// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 29834 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 29834 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 29834 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 29834 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 29834 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9551 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9551 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9551 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9551 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9551 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9551 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9551 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9551 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9551 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8253: LD_VAR 0 1
8257: PUSH
8258: LD_EXP 11
8262: IN
8263: IFFALSE 8281
// russianTanks := russianTanks diff unit ;
8265: LD_ADDR_EXP 11
8269: PUSH
8270: LD_EXP 11
8274: PUSH
8275: LD_VAR 0 1
8279: DIFF
8280: ST_TO_ADDR
// if unit in russianTimeLapsers then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 12
8290: IN
8291: IFFALSE 8309
// russianTimeLapsers := russianTimeLapsers diff unit ;
8293: LD_ADDR_EXP 12
8297: PUSH
8298: LD_EXP 12
8302: PUSH
8303: LD_VAR 0 1
8307: DIFF
8308: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: PUSH
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 247
8332: PUSH
8333: LD_INT 3
8335: EQUAL
8336: AND
8337: IFFALSE 8801
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 266
8348: PUSH
8349: LD_INT 31
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 36
8357: PUSH
8358: LD_INT 0
8360: PUSH
8361: LD_INT 24
8363: PUSH
8364: LD_INT 17
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 19
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 23
8384: PUSH
8385: LD_INT 16
8387: PUSH
8388: LD_INT 6
8390: PUSH
8391: LD_INT 29
8393: PUSH
8394: LD_INT 26
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 28
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 33
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: IN
8439: IFFALSE 8525
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8441: LD_ADDR_EXP 10
8445: PUSH
8446: LD_EXP 10
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 266
8460: ADD
8461: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8462: LD_ADDR_EXP 10
8466: PUSH
8467: LD_EXP 10
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 250
8481: ADD
8482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8483: LD_ADDR_EXP 10
8487: PUSH
8488: LD_EXP 10
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 251
8502: ADD
8503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8504: LD_ADDR_EXP 10
8508: PUSH
8509: LD_EXP 10
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 254
8523: ADD
8524: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 266
8534: PUSH
8535: LD_INT 1
8537: EQUAL
8538: IFFALSE 8617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8540: LD_ADDR_EXP 10
8544: PUSH
8545: LD_EXP 10
8549: PUSH
8550: LD_INT 0
8552: ADD
8553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8554: LD_ADDR_EXP 10
8558: PUSH
8559: LD_EXP 10
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 250
8573: ADD
8574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8575: LD_ADDR_EXP 10
8579: PUSH
8580: LD_EXP 10
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 251
8594: ADD
8595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8596: LD_ADDR_EXP 10
8600: PUSH
8601: LD_EXP 10
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 254
8615: ADD
8616: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8617: LD_VAR 0 1
8621: PPUSH
8622: CALL_OW 266
8626: PUSH
8627: LD_INT 3
8629: EQUAL
8630: IFFALSE 8709
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8632: LD_ADDR_EXP 10
8636: PUSH
8637: LD_EXP 10
8641: PUSH
8642: LD_INT 2
8644: ADD
8645: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8646: LD_ADDR_EXP 10
8650: PUSH
8651: LD_EXP 10
8655: PUSH
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL_OW 250
8665: ADD
8666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8667: LD_ADDR_EXP 10
8671: PUSH
8672: LD_EXP 10
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 251
8686: ADD
8687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8688: LD_ADDR_EXP 10
8692: PUSH
8693: LD_EXP 10
8697: PUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 254
8707: ADD
8708: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 266
8718: PUSH
8719: LD_INT 5
8721: EQUAL
8722: IFFALSE 8801
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8724: LD_ADDR_EXP 10
8728: PUSH
8729: LD_EXP 10
8733: PUSH
8734: LD_INT 4
8736: ADD
8737: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8738: LD_ADDR_EXP 10
8742: PUSH
8743: LD_EXP 10
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 250
8757: ADD
8758: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8759: LD_ADDR_EXP 10
8763: PUSH
8764: LD_EXP 10
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 251
8778: ADD
8779: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8780: LD_ADDR_EXP 10
8784: PUSH
8785: LD_EXP 10
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 254
8799: ADD
8800: ST_TO_ADDR
// end ; end ; end ;
8801: PPOPN 1
8803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8804: LD_VAR 0 3
8808: PPUSH
8809: CALL_OW 264
8813: PUSH
8814: LD_INT 10
8816: EQUAL
8817: IFFALSE 8833
// destroyCounter := destroyCounter + 1 ;
8819: LD_ADDR_EXP 17
8823: PUSH
8824: LD_EXP 17
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// end ;
8833: PPOPN 3
8835: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: EQUAL
8844: PUSH
8845: LD_VAR 0 2
8849: PUSH
8850: LD_INT 40
8852: EQUAL
8853: OR
8854: IFFALSE 8978
// if GetSide ( vehicle ) = 3 then
8856: LD_VAR 0 1
8860: PPUSH
8861: CALL_OW 255
8865: PUSH
8866: LD_INT 3
8868: EQUAL
8869: IFFALSE 8978
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8871: LD_VAR 0 1
8875: PPUSH
8876: CALL_OW 264
8880: PUSH
8881: LD_INT 47
8883: EQUAL
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 264
8894: PUSH
8895: LD_INT 46
8897: EQUAL
8898: OR
8899: PUSH
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 45
8912: EQUAL
8913: OR
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 264
8924: PUSH
8925: LD_INT 44
8927: EQUAL
8928: OR
8929: IFFALSE 8947
// russianTanks = russianTanks ^ vehicle ;
8931: LD_ADDR_EXP 11
8935: PUSH
8936: LD_EXP 11
8940: PUSH
8941: LD_VAR 0 1
8945: ADD
8946: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 264
8956: PUSH
8957: LD_INT 49
8959: EQUAL
8960: IFFALSE 8978
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8962: LD_ADDR_EXP 12
8966: PUSH
8967: LD_EXP 12
8971: PUSH
8972: LD_VAR 0 1
8976: ADD
8977: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 1
8990: EQUAL
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 264
9001: PUSH
9002: LD_INT 10
9004: EQUAL
9005: AND
9006: IFFALSE 9022
// amLaserCounter = amLaserCounter + 1 ;
9008: LD_ADDR_EXP 9
9012: PUSH
9013: LD_EXP 9
9017: PUSH
9018: LD_INT 1
9020: PLUS
9021: ST_TO_ADDR
// end ;
9022: PPOPN 2
9024: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL 25300 0 1
// end ; end_of_file
9034: PPOPN 1
9036: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9037: LD_EXP 1
9041: PPUSH
9042: CALL_OW 310
9046: PPUSH
9047: LD_INT 12
9049: PPUSH
9050: CALL_OW 308
9054: PUSH
9055: LD_EXP 15
9059: PUSH
9060: LD_INT 0
9062: EQUAL
9063: AND
9064: IFFALSE 9410
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// begin enable ;
9073: ENABLE
// if JMMGirl = 1 then
9074: LD_EXP 7
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9099
// JMMGirlVeh = IsInUnit ( Joan ) ;
9084: LD_ADDR_VAR 0 1
9088: PUSH
9089: LD_EXP 2
9093: PPUSH
9094: CALL_OW 310
9098: ST_TO_ADDR
// if JMMGirl = 2 then
9099: LD_EXP 7
9103: PUSH
9104: LD_INT 2
9106: EQUAL
9107: IFFALSE 9124
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_EXP 3
9118: PPUSH
9119: CALL_OW 310
9123: ST_TO_ADDR
// if JMMGirl = 3 then
9124: LD_EXP 7
9128: PUSH
9129: LD_INT 3
9131: EQUAL
9132: IFFALSE 9149
// JMMGirlVeh = IsInUnit ( Connie ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_EXP 4
9143: PPUSH
9144: CALL_OW 310
9148: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9149: LD_EXP 1
9153: PPUSH
9154: CALL_OW 310
9158: PPUSH
9159: LD_EXP 2
9163: PPUSH
9164: CALL_OW 310
9168: PPUSH
9169: CALL_OW 296
9173: PUSH
9174: LD_INT 10
9176: LESS
9177: PUSH
9178: LD_EXP 1
9182: PPUSH
9183: CALL_OW 310
9187: PPUSH
9188: LD_EXP 3
9192: PPUSH
9193: CALL_OW 310
9197: PPUSH
9198: CALL_OW 296
9202: PUSH
9203: LD_INT 10
9205: LESS
9206: OR
9207: PUSH
9208: LD_EXP 1
9212: PPUSH
9213: CALL_OW 310
9217: PPUSH
9218: LD_EXP 4
9222: PPUSH
9223: CALL_OW 310
9227: PPUSH
9228: CALL_OW 296
9232: PUSH
9233: LD_INT 10
9235: LESS
9236: OR
9237: IFFALSE 9331
// begin case Query ( Q3b ) of 1 :
9239: LD_STRING Q3b
9241: PPUSH
9242: CALL_OW 97
9246: PUSH
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9328
9255: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 265
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 262
9278: PUSH
9279: EMPTY
9280: LIST
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 263
9291: PUSH
9292: EMPTY
9293: LIST
9294: PUSH
9295: LD_VAR 0 1
9299: PPUSH
9300: CALL_OW 264
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: LD_STRING 14_JMMGirlVeh_1
9316: PPUSH
9317: CALL_OW 39
// FinishMission ;
9321: CALL 9551 0 0
// disable ;
9325: DISABLE
// end ; end ;
9326: GO 9329
9328: POP
// end else
9329: GO 9410
// begin if JMMGirl = 1 then
9331: LD_EXP 7
9335: PUSH
9336: LD_INT 1
9338: EQUAL
9339: IFFALSE 9356
// dec := Query ( Q3bJ ) else
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_STRING Q3bJ
9348: PPUSH
9349: CALL_OW 97
9353: ST_TO_ADDR
9354: GO 9394
// if JMMGirl = 2 then
9356: LD_EXP 7
9360: PUSH
9361: LD_INT 2
9363: EQUAL
9364: IFFALSE 9381
// dec := Query ( Q3bL ) else
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_STRING Q3bL
9373: PPUSH
9374: CALL_OW 97
9378: ST_TO_ADDR
9379: GO 9394
// dec := Query ( Q3bX ) ;
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_STRING Q3bX
9388: PPUSH
9389: CALL_OW 97
9393: ST_TO_ADDR
// if dec = 1 then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9410
// begin FinishMission ;
9404: CALL 9551 0 0
// exit ;
9408: GO 9410
// end ; end ; end ;
9410: PPOPN 2
9412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9413: LD_INT 22
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PUSH
9442: LD_INT 0
9444: EQUAL
9445: PUSH
9446: LD_EXP 15
9450: PUSH
9451: LD_INT 0
9453: EQUAL
9454: AND
9455: IFFALSE 9550
9457: GO 9459
9459: DISABLE
// begin DialogueOn ;
9460: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9464: LD_EXP 1
9468: PPUSH
9469: LD_STRING DEnd-JMM-1
9471: PPUSH
9472: CALL_OW 88
// if JMMGirl = 1 then
9476: LD_EXP 7
9480: PUSH
9481: LD_INT 1
9483: EQUAL
9484: IFFALSE 9498
// Say ( Joan , DEnd-Joan-1 ) ;
9486: LD_EXP 2
9490: PPUSH
9491: LD_STRING DEnd-Joan-1
9493: PPUSH
9494: CALL_OW 88
// if JMMGirl = 2 then
9498: LD_EXP 7
9502: PUSH
9503: LD_INT 2
9505: EQUAL
9506: IFFALSE 9520
// Say ( Lisa , DEnd-Lisa-1 ) ;
9508: LD_EXP 3
9512: PPUSH
9513: LD_STRING DEnd-Lisa-1
9515: PPUSH
9516: CALL_OW 88
// if JMMGirl = 3 then
9520: LD_EXP 7
9524: PUSH
9525: LD_INT 3
9527: EQUAL
9528: IFFALSE 9542
// Say ( Connie , DEnd-Con-1 ) ;
9530: LD_EXP 4
9534: PPUSH
9535: LD_STRING DEnd-Con-1
9537: PPUSH
9538: CALL_OW 88
// DialogueOff ;
9542: CALL_OW 7
// FinishMission ;
9546: CALL 9551 0 0
// end ;
9550: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// m1 := false ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// m2 := false ;
9566: LD_ADDR_VAR 0 4
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// m3 := false ;
9574: LD_ADDR_VAR 0 5
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_STRING 14_JMM
9589: PPUSH
9590: CALL_OW 38
// if tick <= 50 50$00 then
9594: LD_OWVAR 1
9598: PUSH
9599: LD_INT 105000
9601: LESSEQUAL
9602: IFFALSE 9611
// SetAchievement ( ACH_ASPEED_14 ) ;
9604: LD_STRING ACH_ASPEED_14
9606: PPUSH
9607: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9611: LD_EXP 1
9615: PPUSH
9616: CALL_OW 310
9620: PUSH
9621: LD_EXP 1
9625: PPUSH
9626: CALL_OW 310
9630: PPUSH
9631: CALL_OW 247
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: AND
9640: IFFALSE 9722
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: LD_EXP 1
9651: PPUSH
9652: CALL_OW 310
9656: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 265
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: LD_VAR 0 2
9674: PPUSH
9675: CALL_OW 262
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_VAR 0 2
9687: PPUSH
9688: CALL_OW 263
9692: PUSH
9693: EMPTY
9694: LIST
9695: PUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: CALL_OW 264
9705: PUSH
9706: EMPTY
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PPUSH
9715: LD_STRING 14_JMMVeh_1
9717: PPUSH
9718: CALL_OW 39
// end ; if fastEnd = 1 then
9722: LD_EXP 15
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9819
// begin AddMedal ( fastend , - 1 ) ;
9732: LD_STRING fastend
9734: PPUSH
9735: LD_INT 1
9737: NEG
9738: PPUSH
9739: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9743: LD_STRING fastend
9745: PPUSH
9746: LD_INT 1
9748: NEG
9749: PPUSH
9750: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9754: LD_STRING fastend
9756: PPUSH
9757: LD_INT 1
9759: NEG
9760: PPUSH
9761: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9765: LD_EXP 7
9769: PPUSH
9770: LD_STRING 14_JMMGirl_1
9772: PPUSH
9773: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9777: LD_INT 0
9779: PPUSH
9780: LD_STRING 14_JMMGirlStatus_1
9782: PPUSH
9783: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9787: LD_INT 0
9789: PPUSH
9790: LD_STRING 14_KappaStatus_1
9792: PPUSH
9793: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9797: LD_STRING Eliminate
9799: PPUSH
9800: CALL_OW 102
// RewardPeople ( JMM ) ;
9804: LD_EXP 1
9808: PPUSH
9809: CALL_OW 43
// YouWin ;
9813: CALL_OW 103
// exit ;
9817: GO 10644
// end ; if fastEnd = 0 then
9819: LD_EXP 15
9823: PUSH
9824: LD_INT 0
9826: EQUAL
9827: IFFALSE 10537
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9829: LD_EXP 7
9833: PPUSH
9834: LD_STRING 14_JMMGirl_1
9836: PPUSH
9837: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_INT 48
9876: PPUSH
9877: CALL_OW 255
9881: PUSH
9882: LD_INT 1
9884: EQUAL
9885: AND
9886: IFFALSE 9900
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9888: LD_INT 1
9890: PPUSH
9891: LD_STRING 14_KappaStatus_1
9893: PPUSH
9894: CALL_OW 39
9898: GO 9910
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9900: LD_INT 0
9902: PPUSH
9903: LD_STRING 14_KappaStatus_1
9905: PPUSH
9906: CALL_OW 39
// case JMMGirl of 1 :
9910: LD_EXP 7
9914: PUSH
9915: LD_INT 1
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 10079
9923: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9924: LD_EXP 2
9928: PPUSH
9929: CALL_OW 302
9933: PUSH
9934: LD_EXP 2
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 1
9946: EQUAL
9947: AND
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 3
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: PUSH
9982: LD_EXP 1
9986: PPUSH
9987: CALL_OW 310
9991: PPUSH
9992: LD_EXP 2
9996: PPUSH
9997: CALL_OW 310
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 10
10009: LESS
10010: OR
10011: AND
10012: IFFALSE 10056
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10014: LD_INT 1
10016: PPUSH
10017: LD_STRING 14_JMMGirlStatus_1
10019: PPUSH
10020: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10024: LD_EXP 2
10028: PPUSH
10029: LD_STRING 14_Joan
10031: PPUSH
10032: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10036: LD_STRING protect
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 101
// m1 := true ;
10046: LD_ADDR_VAR 0 3
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// end else
10054: GO 10077
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10056: LD_INT 0
10058: PPUSH
10059: LD_STRING 14_JMMGirlStatus_1
10061: PPUSH
10062: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10066: LD_STRING protect
10068: PPUSH
10069: LD_INT 1
10071: NEG
10072: PPUSH
10073: CALL_OW 101
// end ; end ; 2 :
10077: GO 10408
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10243
10087: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10088: LD_EXP 3
10092: PPUSH
10093: CALL_OW 302
10097: PUSH
10098: LD_EXP 3
10102: PPUSH
10103: CALL_OW 255
10107: PUSH
10108: LD_INT 1
10110: EQUAL
10111: AND
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: PUSH
10142: LD_INT 0
10144: EQUAL
10145: PUSH
10146: LD_EXP 1
10150: PPUSH
10151: CALL_OW 310
10155: PPUSH
10156: LD_EXP 3
10160: PPUSH
10161: CALL_OW 310
10165: PPUSH
10166: CALL_OW 296
10170: PUSH
10171: LD_INT 10
10173: LESS
10174: OR
10175: AND
10176: IFFALSE 10220
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10178: LD_INT 1
10180: PPUSH
10181: LD_STRING 14_JMMGirlStatus_1
10183: PPUSH
10184: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10188: LD_EXP 3
10192: PPUSH
10193: LD_STRING 14_Lisa
10195: PPUSH
10196: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10200: LD_STRING protect
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 101
// m1 := true ;
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// end else
10218: GO 10241
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10220: LD_INT 0
10222: PPUSH
10223: LD_STRING 14_JMMGirlStatus_1
10225: PPUSH
10226: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10230: LD_STRING protect
10232: PPUSH
10233: LD_INT 2
10235: NEG
10236: PPUSH
10237: CALL_OW 101
// end ; end ; 3 :
10241: GO 10408
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10407
10251: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10252: LD_EXP 4
10256: PPUSH
10257: CALL_OW 302
10261: PUSH
10262: LD_EXP 4
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 1
10274: EQUAL
10275: AND
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 21
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 69
10305: PUSH
10306: LD_INT 0
10308: EQUAL
10309: PUSH
10310: LD_EXP 1
10314: PPUSH
10315: CALL_OW 310
10319: PPUSH
10320: LD_EXP 4
10324: PPUSH
10325: CALL_OW 310
10329: PPUSH
10330: CALL_OW 296
10334: PUSH
10335: LD_INT 10
10337: LESS
10338: OR
10339: AND
10340: IFFALSE 10384
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10342: LD_INT 1
10344: PPUSH
10345: LD_STRING 14_JMMGirlStatus_1
10347: PPUSH
10348: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10352: LD_EXP 4
10356: PPUSH
10357: LD_STRING 14_Connie
10359: PPUSH
10360: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10364: LD_STRING protect
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 101
// m1 := true ;
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// end else
10382: GO 10405
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10384: LD_INT 0
10386: PPUSH
10387: LD_STRING 14_JMMGirlStatus_1
10389: PPUSH
10390: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10394: LD_STRING protect
10396: PPUSH
10397: LD_INT 3
10399: NEG
10400: PPUSH
10401: CALL_OW 101
// end ; end ; end ;
10405: GO 10408
10407: POP
// if amLaserCounter >= 2 then
10408: LD_EXP 9
10412: PUSH
10413: LD_INT 2
10415: GREATEREQUAL
10416: IFFALSE 10438
// begin AddMedal ( double , 1 ) ;
10418: LD_STRING double
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 101
// m2 := true ;
10428: LD_ADDR_VAR 0 4
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// end else
10436: GO 10472
// begin if amLaserCounter = 1 then
10438: LD_EXP 9
10442: PUSH
10443: LD_INT 1
10445: EQUAL
10446: IFFALSE 10461
// AddMedal ( double , - 2 ) else
10448: LD_STRING double
10450: PPUSH
10451: LD_INT 2
10453: NEG
10454: PPUSH
10455: CALL_OW 101
10459: GO 10472
// AddMedal ( double , - 1 ) ;
10461: LD_STRING double
10463: PPUSH
10464: LD_INT 1
10466: NEG
10467: PPUSH
10468: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10472: LD_INT 22
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_INT 0
10503: EQUAL
10504: IFFALSE 10526
// begin AddMedal ( base , 1 ) ;
10506: LD_STRING base
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 101
// m3 := true ;
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// end else
10524: GO 10537
// AddMedal ( base , - 1 ) ;
10526: LD_STRING base
10528: PPUSH
10529: LD_INT 1
10531: NEG
10532: PPUSH
10533: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_VAR 0 4
10546: AND
10547: PUSH
10548: LD_VAR 0 5
10552: AND
10553: PUSH
10554: LD_OWVAR 67
10558: PUSH
10559: LD_INT 3
10561: GREATEREQUAL
10562: AND
10563: IFFALSE 10575
// SetAchievementEX ( ACH_AMER , 14 ) ;
10565: LD_STRING ACH_AMER
10567: PPUSH
10568: LD_INT 14
10570: PPUSH
10571: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10575: LD_STRING Eliminate
10577: PPUSH
10578: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10582: LD_INT 22
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 3
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: CALL_OW 43
// YouWin ;
10640: CALL_OW 103
// end ; end_of_file
10644: LD_VAR 0 1
10648: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10649: LD_EXP 1
10653: PPUSH
10654: CALL_OW 301
10658: IFFALSE 10670
10660: GO 10662
10662: DISABLE
// YouLost ( JMM ) ; end_of_file
10663: LD_STRING JMM
10665: PPUSH
10666: CALL_OW 104
10670: END
// every 1 1$0 do
10671: GO 10673
10673: DISABLE
// begin enable ;
10674: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10675: LD_INT 3
10677: PPUSH
10678: LD_INT 5
10680: PPUSH
10681: CALL_OW 12
10685: PPUSH
10686: LD_INT 13
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 55
// end ; end_of_file
10696: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10697: LD_INT 0
10699: PPUSH
// ar_miner := 81 ;
10700: LD_ADDR_EXP 26
10704: PUSH
10705: LD_INT 81
10707: ST_TO_ADDR
// ar_crane := 88 ;
10708: LD_ADDR_EXP 25
10712: PUSH
10713: LD_INT 88
10715: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10716: LD_ADDR_EXP 20
10720: PUSH
10721: LD_INT 89
10723: ST_TO_ADDR
// us_hack := 99 ;
10724: LD_ADDR_EXP 21
10728: PUSH
10729: LD_INT 99
10731: ST_TO_ADDR
// us_artillery := 97 ;
10732: LD_ADDR_EXP 22
10736: PUSH
10737: LD_INT 97
10739: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10740: LD_ADDR_EXP 23
10744: PUSH
10745: LD_INT 91
10747: ST_TO_ADDR
// ar_mortar := 92 ;
10748: LD_ADDR_EXP 24
10752: PUSH
10753: LD_INT 92
10755: ST_TO_ADDR
// ru_radar := 98 ;
10756: LD_ADDR_EXP 19
10760: PUSH
10761: LD_INT 98
10763: ST_TO_ADDR
// tech_Artillery := 80 ;
10764: LD_ADDR_EXP 27
10768: PUSH
10769: LD_INT 80
10771: ST_TO_ADDR
// tech_RadMat := 81 ;
10772: LD_ADDR_EXP 28
10776: PUSH
10777: LD_INT 81
10779: ST_TO_ADDR
// tech_BasicTools := 82 ;
10780: LD_ADDR_EXP 29
10784: PUSH
10785: LD_INT 82
10787: ST_TO_ADDR
// tech_Cargo := 83 ;
10788: LD_ADDR_EXP 30
10792: PUSH
10793: LD_INT 83
10795: ST_TO_ADDR
// tech_Track := 84 ;
10796: LD_ADDR_EXP 31
10800: PUSH
10801: LD_INT 84
10803: ST_TO_ADDR
// tech_Crane := 85 ;
10804: LD_ADDR_EXP 32
10808: PUSH
10809: LD_INT 85
10811: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10812: LD_ADDR_EXP 33
10816: PUSH
10817: LD_INT 86
10819: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10820: LD_ADDR_EXP 34
10824: PUSH
10825: LD_INT 87
10827: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10828: LD_ADDR_EXP 35
10832: PUSH
10833: LD_INT 88
10835: ST_TO_ADDR
// class_mastodont := 31 ;
10836: LD_ADDR_EXP 36
10840: PUSH
10841: LD_INT 31
10843: ST_TO_ADDR
// class_horse := 21 ;
10844: LD_ADDR_EXP 37
10848: PUSH
10849: LD_INT 21
10851: ST_TO_ADDR
// end ;
10852: LD_VAR 0 1
10856: RET
// every 1 do
10857: GO 10859
10859: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10860: CALL 10697 0 0
10864: END
// every 0 0$1 do
10865: GO 10867
10867: DISABLE
// begin enable ;
10868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10869: LD_STRING updateTimer(
10871: PUSH
10872: LD_OWVAR 1
10876: STR
10877: PUSH
10878: LD_STRING );
10880: STR
10881: PPUSH
10882: CALL_OW 559
// end ;
10886: END
// on MapStart ( p ) do begin if streamModeActive then
10887: LD_EXP 38
10891: IFFALSE 10900
// DefineStreamItems ( true ) ;
10893: LD_INT 1
10895: PPUSH
10896: CALL 12548 0 1
// UpdateFactoryWaypoints ( ) ;
10900: CALL 26132 0 0
// end ;
10904: PPOPN 1
10906: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10907: LD_INT 0
10909: PPUSH
// if p2 = 100 then
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 100
10917: EQUAL
10918: IFFALSE 11921
// begin if not StreamModeActive then
10920: LD_EXP 38
10924: NOT
10925: IFFALSE 10935
// StreamModeActive := true ;
10927: LD_ADDR_EXP 38
10931: PUSH
10932: LD_INT 1
10934: ST_TO_ADDR
// if p3 = 0 then
10935: LD_VAR 0 3
10939: PUSH
10940: LD_INT 0
10942: EQUAL
10943: IFFALSE 10949
// InitStreamMode ;
10945: CALL 12084 0 0
// if p3 = 1 then
10949: LD_VAR 0 3
10953: PUSH
10954: LD_INT 1
10956: EQUAL
10957: IFFALSE 10967
// sRocket := true ;
10959: LD_ADDR_EXP 43
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// if p3 = 2 then
10967: LD_VAR 0 3
10971: PUSH
10972: LD_INT 2
10974: EQUAL
10975: IFFALSE 10985
// sSpeed := true ;
10977: LD_ADDR_EXP 42
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// if p3 = 3 then
10985: LD_VAR 0 3
10989: PUSH
10990: LD_INT 3
10992: EQUAL
10993: IFFALSE 11003
// sEngine := true ;
10995: LD_ADDR_EXP 44
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// if p3 = 4 then
11003: LD_VAR 0 3
11007: PUSH
11008: LD_INT 4
11010: EQUAL
11011: IFFALSE 11021
// sSpec := true ;
11013: LD_ADDR_EXP 41
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// if p3 = 5 then
11021: LD_VAR 0 3
11025: PUSH
11026: LD_INT 5
11028: EQUAL
11029: IFFALSE 11039
// sLevel := true ;
11031: LD_ADDR_EXP 45
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// if p3 = 6 then
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 6
11046: EQUAL
11047: IFFALSE 11057
// sArmoury := true ;
11049: LD_ADDR_EXP 46
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// if p3 = 7 then
11057: LD_VAR 0 3
11061: PUSH
11062: LD_INT 7
11064: EQUAL
11065: IFFALSE 11075
// sRadar := true ;
11067: LD_ADDR_EXP 47
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// if p3 = 8 then
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 8
11082: EQUAL
11083: IFFALSE 11093
// sBunker := true ;
11085: LD_ADDR_EXP 48
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// if p3 = 9 then
11093: LD_VAR 0 3
11097: PUSH
11098: LD_INT 9
11100: EQUAL
11101: IFFALSE 11111
// sHack := true ;
11103: LD_ADDR_EXP 49
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// if p3 = 10 then
11111: LD_VAR 0 3
11115: PUSH
11116: LD_INT 10
11118: EQUAL
11119: IFFALSE 11129
// sFire := true ;
11121: LD_ADDR_EXP 50
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// if p3 = 11 then
11129: LD_VAR 0 3
11133: PUSH
11134: LD_INT 11
11136: EQUAL
11137: IFFALSE 11147
// sRefresh := true ;
11139: LD_ADDR_EXP 51
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// if p3 = 12 then
11147: LD_VAR 0 3
11151: PUSH
11152: LD_INT 12
11154: EQUAL
11155: IFFALSE 11165
// sExp := true ;
11157: LD_ADDR_EXP 52
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// if p3 = 13 then
11165: LD_VAR 0 3
11169: PUSH
11170: LD_INT 13
11172: EQUAL
11173: IFFALSE 11183
// sDepot := true ;
11175: LD_ADDR_EXP 53
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if p3 = 14 then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_INT 14
11190: EQUAL
11191: IFFALSE 11201
// sFlag := true ;
11193: LD_ADDR_EXP 54
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// if p3 = 15 then
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 15
11208: EQUAL
11209: IFFALSE 11219
// sKamikadze := true ;
11211: LD_ADDR_EXP 62
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// if p3 = 16 then
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 16
11226: EQUAL
11227: IFFALSE 11237
// sTroll := true ;
11229: LD_ADDR_EXP 63
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// if p3 = 17 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 17
11244: EQUAL
11245: IFFALSE 11255
// sSlow := true ;
11247: LD_ADDR_EXP 64
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 18 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 18
11262: EQUAL
11263: IFFALSE 11273
// sLack := true ;
11265: LD_ADDR_EXP 65
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// if p3 = 19 then
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 19
11280: EQUAL
11281: IFFALSE 11291
// sTank := true ;
11283: LD_ADDR_EXP 67
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// if p3 = 20 then
11291: LD_VAR 0 3
11295: PUSH
11296: LD_INT 20
11298: EQUAL
11299: IFFALSE 11309
// sRemote := true ;
11301: LD_ADDR_EXP 68
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// if p3 = 21 then
11309: LD_VAR 0 3
11313: PUSH
11314: LD_INT 21
11316: EQUAL
11317: IFFALSE 11327
// sPowell := true ;
11319: LD_ADDR_EXP 69
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// if p3 = 22 then
11327: LD_VAR 0 3
11331: PUSH
11332: LD_INT 22
11334: EQUAL
11335: IFFALSE 11345
// sTeleport := true ;
11337: LD_ADDR_EXP 72
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
// if p3 = 23 then
11345: LD_VAR 0 3
11349: PUSH
11350: LD_INT 23
11352: EQUAL
11353: IFFALSE 11363
// sOilTower := true ;
11355: LD_ADDR_EXP 74
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// if p3 = 24 then
11363: LD_VAR 0 3
11367: PUSH
11368: LD_INT 24
11370: EQUAL
11371: IFFALSE 11381
// sShovel := true ;
11373: LD_ADDR_EXP 75
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// if p3 = 25 then
11381: LD_VAR 0 3
11385: PUSH
11386: LD_INT 25
11388: EQUAL
11389: IFFALSE 11399
// sSheik := true ;
11391: LD_ADDR_EXP 76
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
// if p3 = 26 then
11399: LD_VAR 0 3
11403: PUSH
11404: LD_INT 26
11406: EQUAL
11407: IFFALSE 11417
// sEarthquake := true ;
11409: LD_ADDR_EXP 78
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// if p3 = 27 then
11417: LD_VAR 0 3
11421: PUSH
11422: LD_INT 27
11424: EQUAL
11425: IFFALSE 11435
// sAI := true ;
11427: LD_ADDR_EXP 79
11431: PUSH
11432: LD_INT 1
11434: ST_TO_ADDR
// if p3 = 28 then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_INT 28
11442: EQUAL
11443: IFFALSE 11453
// sCargo := true ;
11445: LD_ADDR_EXP 82
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// if p3 = 29 then
11453: LD_VAR 0 3
11457: PUSH
11458: LD_INT 29
11460: EQUAL
11461: IFFALSE 11471
// sDLaser := true ;
11463: LD_ADDR_EXP 83
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// if p3 = 30 then
11471: LD_VAR 0 3
11475: PUSH
11476: LD_INT 30
11478: EQUAL
11479: IFFALSE 11489
// sExchange := true ;
11481: LD_ADDR_EXP 84
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// if p3 = 31 then
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 31
11496: EQUAL
11497: IFFALSE 11507
// sFac := true ;
11499: LD_ADDR_EXP 85
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// if p3 = 32 then
11507: LD_VAR 0 3
11511: PUSH
11512: LD_INT 32
11514: EQUAL
11515: IFFALSE 11525
// sPower := true ;
11517: LD_ADDR_EXP 86
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// if p3 = 33 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 33
11532: EQUAL
11533: IFFALSE 11543
// sRandom := true ;
11535: LD_ADDR_EXP 87
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 34 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 34
11550: EQUAL
11551: IFFALSE 11561
// sShield := true ;
11553: LD_ADDR_EXP 88
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 35 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 35
11568: EQUAL
11569: IFFALSE 11579
// sTime := true ;
11571: LD_ADDR_EXP 89
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 36 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 36
11586: EQUAL
11587: IFFALSE 11597
// sTools := true ;
11589: LD_ADDR_EXP 90
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 101 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 101
11604: EQUAL
11605: IFFALSE 11615
// sSold := true ;
11607: LD_ADDR_EXP 55
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 102 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 102
11622: EQUAL
11623: IFFALSE 11633
// sDiff := true ;
11625: LD_ADDR_EXP 56
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 103 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 103
11640: EQUAL
11641: IFFALSE 11651
// sFog := true ;
11643: LD_ADDR_EXP 59
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 104 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 104
11658: EQUAL
11659: IFFALSE 11669
// sReset := true ;
11661: LD_ADDR_EXP 60
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 105 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 105
11676: EQUAL
11677: IFFALSE 11687
// sSun := true ;
11679: LD_ADDR_EXP 61
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 106 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 106
11694: EQUAL
11695: IFFALSE 11705
// sTiger := true ;
11697: LD_ADDR_EXP 57
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 107 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 107
11712: EQUAL
11713: IFFALSE 11723
// sBomb := true ;
11715: LD_ADDR_EXP 58
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 108 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 108
11730: EQUAL
11731: IFFALSE 11741
// sWound := true ;
11733: LD_ADDR_EXP 66
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 109 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 109
11748: EQUAL
11749: IFFALSE 11759
// sBetray := true ;
11751: LD_ADDR_EXP 70
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 110 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 110
11766: EQUAL
11767: IFFALSE 11777
// sContamin := true ;
11769: LD_ADDR_EXP 71
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 111 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 111
11784: EQUAL
11785: IFFALSE 11795
// sOil := true ;
11787: LD_ADDR_EXP 73
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 112 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 112
11802: EQUAL
11803: IFFALSE 11813
// sStu := true ;
11805: LD_ADDR_EXP 77
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 113 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 113
11820: EQUAL
11821: IFFALSE 11831
// sBazooka := true ;
11823: LD_ADDR_EXP 80
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 114 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 114
11838: EQUAL
11839: IFFALSE 11849
// sMortar := true ;
11841: LD_ADDR_EXP 81
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 115 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 115
11856: EQUAL
11857: IFFALSE 11867
// sRanger := true ;
11859: LD_ADDR_EXP 91
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 116 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 116
11874: EQUAL
11875: IFFALSE 11885
// sComputer := true ;
11877: LD_ADDR_EXP 92
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 117 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 117
11892: EQUAL
11893: IFFALSE 11903
// s30 := true ;
11895: LD_ADDR_EXP 93
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 118 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 118
11910: EQUAL
11911: IFFALSE 11921
// s60 := true ;
11913: LD_ADDR_EXP 94
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// end ; if p2 = 101 then
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 101
11928: EQUAL
11929: IFFALSE 12057
// begin case p3 of 1 :
11931: LD_VAR 0 3
11935: PUSH
11936: LD_INT 1
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 11951
11944: POP
// hHackUnlimitedResources ; 2 :
11945: CALL 24155 0 0
11949: GO 12057
11951: LD_INT 2
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 11966
11959: POP
// hHackSetLevel10 ; 3 :
11960: CALL 24288 0 0
11964: GO 12057
11966: LD_INT 3
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 11981
11974: POP
// hHackSetLevel10YourUnits ; 4 :
11975: CALL 24373 0 0
11979: GO 12057
11981: LD_INT 4
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 11996
11989: POP
// hHackInvincible ; 5 :
11990: CALL 24821 0 0
11994: GO 12057
11996: LD_INT 5
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12011
12004: POP
// hHackInvisible ; 6 :
12005: CALL 24932 0 0
12009: GO 12057
12011: LD_INT 6
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12026
12019: POP
// hHackChangeYourSide ; 7 :
12020: CALL 24989 0 0
12024: GO 12057
12026: LD_INT 7
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12041
12034: POP
// hHackChangeUnitSide ; 8 :
12035: CALL 25031 0 0
12039: GO 12057
12041: LD_INT 8
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12056
12049: POP
// hHackFog ; end ;
12050: CALL 25132 0 0
12054: GO 12057
12056: POP
// end ; end ;
12057: LD_VAR 0 7
12061: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12062: GO 12064
12064: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12065: LD_STRING initStreamRollete();
12067: PPUSH
12068: CALL_OW 559
// InitStreamMode ;
12072: CALL 12084 0 0
// DefineStreamItems ( false ) ;
12076: LD_INT 0
12078: PPUSH
12079: CALL 12548 0 1
// end ;
12083: END
// function InitStreamMode ; begin
12084: LD_INT 0
12086: PPUSH
// streamModeActive := false ;
12087: LD_ADDR_EXP 38
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// normalCounter := 36 ;
12095: LD_ADDR_EXP 39
12099: PUSH
12100: LD_INT 36
12102: ST_TO_ADDR
// hardcoreCounter := 18 ;
12103: LD_ADDR_EXP 40
12107: PUSH
12108: LD_INT 18
12110: ST_TO_ADDR
// sRocket := false ;
12111: LD_ADDR_EXP 43
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sSpeed := false ;
12119: LD_ADDR_EXP 42
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// sEngine := false ;
12127: LD_ADDR_EXP 44
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// sSpec := false ;
12135: LD_ADDR_EXP 41
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// sLevel := false ;
12143: LD_ADDR_EXP 45
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// sArmoury := false ;
12151: LD_ADDR_EXP 46
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// sRadar := false ;
12159: LD_ADDR_EXP 47
12163: PUSH
12164: LD_INT 0
12166: ST_TO_ADDR
// sBunker := false ;
12167: LD_ADDR_EXP 48
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// sHack := false ;
12175: LD_ADDR_EXP 49
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// sFire := false ;
12183: LD_ADDR_EXP 50
12187: PUSH
12188: LD_INT 0
12190: ST_TO_ADDR
// sRefresh := false ;
12191: LD_ADDR_EXP 51
12195: PUSH
12196: LD_INT 0
12198: ST_TO_ADDR
// sExp := false ;
12199: LD_ADDR_EXP 52
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// sDepot := false ;
12207: LD_ADDR_EXP 53
12211: PUSH
12212: LD_INT 0
12214: ST_TO_ADDR
// sFlag := false ;
12215: LD_ADDR_EXP 54
12219: PUSH
12220: LD_INT 0
12222: ST_TO_ADDR
// sKamikadze := false ;
12223: LD_ADDR_EXP 62
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// sTroll := false ;
12231: LD_ADDR_EXP 63
12235: PUSH
12236: LD_INT 0
12238: ST_TO_ADDR
// sSlow := false ;
12239: LD_ADDR_EXP 64
12243: PUSH
12244: LD_INT 0
12246: ST_TO_ADDR
// sLack := false ;
12247: LD_ADDR_EXP 65
12251: PUSH
12252: LD_INT 0
12254: ST_TO_ADDR
// sTank := false ;
12255: LD_ADDR_EXP 67
12259: PUSH
12260: LD_INT 0
12262: ST_TO_ADDR
// sRemote := false ;
12263: LD_ADDR_EXP 68
12267: PUSH
12268: LD_INT 0
12270: ST_TO_ADDR
// sPowell := false ;
12271: LD_ADDR_EXP 69
12275: PUSH
12276: LD_INT 0
12278: ST_TO_ADDR
// sTeleport := false ;
12279: LD_ADDR_EXP 72
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// sOilTower := false ;
12287: LD_ADDR_EXP 74
12291: PUSH
12292: LD_INT 0
12294: ST_TO_ADDR
// sShovel := false ;
12295: LD_ADDR_EXP 75
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// sSheik := false ;
12303: LD_ADDR_EXP 76
12307: PUSH
12308: LD_INT 0
12310: ST_TO_ADDR
// sEarthquake := false ;
12311: LD_ADDR_EXP 78
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// sAI := false ;
12319: LD_ADDR_EXP 79
12323: PUSH
12324: LD_INT 0
12326: ST_TO_ADDR
// sCargo := false ;
12327: LD_ADDR_EXP 82
12331: PUSH
12332: LD_INT 0
12334: ST_TO_ADDR
// sDLaser := false ;
12335: LD_ADDR_EXP 83
12339: PUSH
12340: LD_INT 0
12342: ST_TO_ADDR
// sExchange := false ;
12343: LD_ADDR_EXP 84
12347: PUSH
12348: LD_INT 0
12350: ST_TO_ADDR
// sFac := false ;
12351: LD_ADDR_EXP 85
12355: PUSH
12356: LD_INT 0
12358: ST_TO_ADDR
// sPower := false ;
12359: LD_ADDR_EXP 86
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// sRandom := false ;
12367: LD_ADDR_EXP 87
12371: PUSH
12372: LD_INT 0
12374: ST_TO_ADDR
// sShield := false ;
12375: LD_ADDR_EXP 88
12379: PUSH
12380: LD_INT 0
12382: ST_TO_ADDR
// sTime := false ;
12383: LD_ADDR_EXP 89
12387: PUSH
12388: LD_INT 0
12390: ST_TO_ADDR
// sTools := false ;
12391: LD_ADDR_EXP 90
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// sSold := false ;
12399: LD_ADDR_EXP 55
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// sDiff := false ;
12407: LD_ADDR_EXP 56
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// sFog := false ;
12415: LD_ADDR_EXP 59
12419: PUSH
12420: LD_INT 0
12422: ST_TO_ADDR
// sReset := false ;
12423: LD_ADDR_EXP 60
12427: PUSH
12428: LD_INT 0
12430: ST_TO_ADDR
// sSun := false ;
12431: LD_ADDR_EXP 61
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// sTiger := false ;
12439: LD_ADDR_EXP 57
12443: PUSH
12444: LD_INT 0
12446: ST_TO_ADDR
// sBomb := false ;
12447: LD_ADDR_EXP 58
12451: PUSH
12452: LD_INT 0
12454: ST_TO_ADDR
// sWound := false ;
12455: LD_ADDR_EXP 66
12459: PUSH
12460: LD_INT 0
12462: ST_TO_ADDR
// sBetray := false ;
12463: LD_ADDR_EXP 70
12467: PUSH
12468: LD_INT 0
12470: ST_TO_ADDR
// sContamin := false ;
12471: LD_ADDR_EXP 71
12475: PUSH
12476: LD_INT 0
12478: ST_TO_ADDR
// sOil := false ;
12479: LD_ADDR_EXP 73
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// sStu := false ;
12487: LD_ADDR_EXP 77
12491: PUSH
12492: LD_INT 0
12494: ST_TO_ADDR
// sBazooka := false ;
12495: LD_ADDR_EXP 80
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// sMortar := false ;
12503: LD_ADDR_EXP 81
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// sRanger := false ;
12511: LD_ADDR_EXP 91
12515: PUSH
12516: LD_INT 0
12518: ST_TO_ADDR
// sComputer := false ;
12519: LD_ADDR_EXP 92
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// s30 := false ;
12527: LD_ADDR_EXP 93
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// s60 := false ;
12535: LD_ADDR_EXP 94
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// end ;
12543: LD_VAR 0 1
12547: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12548: LD_INT 0
12550: PPUSH
12551: PPUSH
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
// result := [ ] ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: EMPTY
12563: ST_TO_ADDR
// if campaign_id = 1 then
12564: LD_OWVAR 69
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: IFFALSE 15738
// begin case mission_number of 1 :
12574: LD_OWVAR 70
12578: PUSH
12579: LD_INT 1
12581: DOUBLE
12582: EQUAL
12583: IFTRUE 12587
12585: GO 12663
12587: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12588: LD_ADDR_VAR 0 2
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: LD_INT 4
12598: PUSH
12599: LD_INT 11
12601: PUSH
12602: LD_INT 12
12604: PUSH
12605: LD_INT 15
12607: PUSH
12608: LD_INT 16
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 23
12616: PUSH
12617: LD_INT 26
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 101
12633: PUSH
12634: LD_INT 102
12636: PUSH
12637: LD_INT 106
12639: PUSH
12640: LD_INT 116
12642: PUSH
12643: LD_INT 117
12645: PUSH
12646: LD_INT 118
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: ST_TO_ADDR
12661: GO 15736
12663: LD_INT 2
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12755
12671: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12672: LD_ADDR_VAR 0 2
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: LD_INT 4
12682: PUSH
12683: LD_INT 11
12685: PUSH
12686: LD_INT 12
12688: PUSH
12689: LD_INT 15
12691: PUSH
12692: LD_INT 16
12694: PUSH
12695: LD_INT 22
12697: PUSH
12698: LD_INT 23
12700: PUSH
12701: LD_INT 26
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 101
12717: PUSH
12718: LD_INT 102
12720: PUSH
12721: LD_INT 105
12723: PUSH
12724: LD_INT 106
12726: PUSH
12727: LD_INT 108
12729: PUSH
12730: LD_INT 116
12732: PUSH
12733: LD_INT 117
12735: PUSH
12736: LD_INT 118
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: ST_TO_ADDR
12753: GO 15736
12755: LD_INT 3
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12851
12763: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12764: LD_ADDR_VAR 0 2
12768: PUSH
12769: LD_INT 2
12771: PUSH
12772: LD_INT 4
12774: PUSH
12775: LD_INT 5
12777: PUSH
12778: LD_INT 11
12780: PUSH
12781: LD_INT 12
12783: PUSH
12784: LD_INT 15
12786: PUSH
12787: LD_INT 16
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 26
12795: PUSH
12796: LD_INT 36
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 101
12813: PUSH
12814: LD_INT 102
12816: PUSH
12817: LD_INT 105
12819: PUSH
12820: LD_INT 106
12822: PUSH
12823: LD_INT 108
12825: PUSH
12826: LD_INT 116
12828: PUSH
12829: LD_INT 117
12831: PUSH
12832: LD_INT 118
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: ST_TO_ADDR
12849: GO 15736
12851: LD_INT 4
12853: DOUBLE
12854: EQUAL
12855: IFTRUE 12859
12857: GO 12955
12859: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_INT 2
12867: PUSH
12868: LD_INT 4
12870: PUSH
12871: LD_INT 5
12873: PUSH
12874: LD_INT 8
12876: PUSH
12877: LD_INT 11
12879: PUSH
12880: LD_INT 12
12882: PUSH
12883: LD_INT 15
12885: PUSH
12886: LD_INT 16
12888: PUSH
12889: LD_INT 22
12891: PUSH
12892: LD_INT 23
12894: PUSH
12895: LD_INT 26
12897: PUSH
12898: LD_INT 36
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 101
12917: PUSH
12918: LD_INT 102
12920: PUSH
12921: LD_INT 105
12923: PUSH
12924: LD_INT 106
12926: PUSH
12927: LD_INT 108
12929: PUSH
12930: LD_INT 116
12932: PUSH
12933: LD_INT 117
12935: PUSH
12936: LD_INT 118
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: ST_TO_ADDR
12953: GO 15736
12955: LD_INT 5
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13075
12963: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12964: LD_ADDR_VAR 0 2
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: LD_INT 5
12977: PUSH
12978: LD_INT 6
12980: PUSH
12981: LD_INT 8
12983: PUSH
12984: LD_INT 11
12986: PUSH
12987: LD_INT 12
12989: PUSH
12990: LD_INT 15
12992: PUSH
12993: LD_INT 16
12995: PUSH
12996: LD_INT 22
12998: PUSH
12999: LD_INT 23
13001: PUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 26
13007: PUSH
13008: LD_INT 36
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 101
13029: PUSH
13030: LD_INT 102
13032: PUSH
13033: LD_INT 105
13035: PUSH
13036: LD_INT 106
13038: PUSH
13039: LD_INT 108
13041: PUSH
13042: LD_INT 109
13044: PUSH
13045: LD_INT 112
13047: PUSH
13048: LD_INT 116
13050: PUSH
13051: LD_INT 117
13053: PUSH
13054: LD_INT 118
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: ST_TO_ADDR
13073: GO 15736
13075: LD_INT 6
13077: DOUBLE
13078: EQUAL
13079: IFTRUE 13083
13081: GO 13215
13083: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13084: LD_ADDR_VAR 0 2
13088: PUSH
13089: LD_INT 2
13091: PUSH
13092: LD_INT 4
13094: PUSH
13095: LD_INT 5
13097: PUSH
13098: LD_INT 6
13100: PUSH
13101: LD_INT 8
13103: PUSH
13104: LD_INT 11
13106: PUSH
13107: LD_INT 12
13109: PUSH
13110: LD_INT 15
13112: PUSH
13113: LD_INT 16
13115: PUSH
13116: LD_INT 20
13118: PUSH
13119: LD_INT 21
13121: PUSH
13122: LD_INT 22
13124: PUSH
13125: LD_INT 23
13127: PUSH
13128: LD_INT 25
13130: PUSH
13131: LD_INT 26
13133: PUSH
13134: LD_INT 30
13136: PUSH
13137: LD_INT 31
13139: PUSH
13140: LD_INT 32
13142: PUSH
13143: LD_INT 36
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 101
13169: PUSH
13170: LD_INT 102
13172: PUSH
13173: LD_INT 105
13175: PUSH
13176: LD_INT 106
13178: PUSH
13179: LD_INT 108
13181: PUSH
13182: LD_INT 109
13184: PUSH
13185: LD_INT 112
13187: PUSH
13188: LD_INT 116
13190: PUSH
13191: LD_INT 117
13193: PUSH
13194: LD_INT 118
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: ST_TO_ADDR
13213: GO 15736
13215: LD_INT 7
13217: DOUBLE
13218: EQUAL
13219: IFTRUE 13223
13221: GO 13335
13223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13224: LD_ADDR_VAR 0 2
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 4
13234: PUSH
13235: LD_INT 5
13237: PUSH
13238: LD_INT 7
13240: PUSH
13241: LD_INT 11
13243: PUSH
13244: LD_INT 12
13246: PUSH
13247: LD_INT 15
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 20
13255: PUSH
13256: LD_INT 21
13258: PUSH
13259: LD_INT 22
13261: PUSH
13262: LD_INT 23
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 26
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 101
13289: PUSH
13290: LD_INT 102
13292: PUSH
13293: LD_INT 103
13295: PUSH
13296: LD_INT 105
13298: PUSH
13299: LD_INT 106
13301: PUSH
13302: LD_INT 108
13304: PUSH
13305: LD_INT 112
13307: PUSH
13308: LD_INT 116
13310: PUSH
13311: LD_INT 117
13313: PUSH
13314: LD_INT 118
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
13333: GO 15736
13335: LD_INT 8
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13483
13343: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 2
13351: PUSH
13352: LD_INT 4
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: LD_INT 6
13360: PUSH
13361: LD_INT 7
13363: PUSH
13364: LD_INT 8
13366: PUSH
13367: LD_INT 11
13369: PUSH
13370: LD_INT 12
13372: PUSH
13373: LD_INT 15
13375: PUSH
13376: LD_INT 16
13378: PUSH
13379: LD_INT 20
13381: PUSH
13382: LD_INT 21
13384: PUSH
13385: LD_INT 22
13387: PUSH
13388: LD_INT 23
13390: PUSH
13391: LD_INT 25
13393: PUSH
13394: LD_INT 26
13396: PUSH
13397: LD_INT 30
13399: PUSH
13400: LD_INT 31
13402: PUSH
13403: LD_INT 32
13405: PUSH
13406: LD_INT 36
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 101
13433: PUSH
13434: LD_INT 102
13436: PUSH
13437: LD_INT 103
13439: PUSH
13440: LD_INT 105
13442: PUSH
13443: LD_INT 106
13445: PUSH
13446: LD_INT 108
13448: PUSH
13449: LD_INT 109
13451: PUSH
13452: LD_INT 112
13454: PUSH
13455: LD_INT 116
13457: PUSH
13458: LD_INT 117
13460: PUSH
13461: LD_INT 118
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: ST_TO_ADDR
13481: GO 15736
13483: LD_INT 9
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13639
13491: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13492: LD_ADDR_VAR 0 2
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: LD_INT 4
13502: PUSH
13503: LD_INT 5
13505: PUSH
13506: LD_INT 6
13508: PUSH
13509: LD_INT 7
13511: PUSH
13512: LD_INT 8
13514: PUSH
13515: LD_INT 11
13517: PUSH
13518: LD_INT 12
13520: PUSH
13521: LD_INT 15
13523: PUSH
13524: LD_INT 16
13526: PUSH
13527: LD_INT 20
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_INT 23
13538: PUSH
13539: LD_INT 25
13541: PUSH
13542: LD_INT 26
13544: PUSH
13545: LD_INT 28
13547: PUSH
13548: LD_INT 30
13550: PUSH
13551: LD_INT 31
13553: PUSH
13554: LD_INT 32
13556: PUSH
13557: LD_INT 36
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 101
13585: PUSH
13586: LD_INT 102
13588: PUSH
13589: LD_INT 103
13591: PUSH
13592: LD_INT 105
13594: PUSH
13595: LD_INT 106
13597: PUSH
13598: LD_INT 108
13600: PUSH
13601: LD_INT 109
13603: PUSH
13604: LD_INT 112
13606: PUSH
13607: LD_INT 114
13609: PUSH
13610: LD_INT 116
13612: PUSH
13613: LD_INT 117
13615: PUSH
13616: LD_INT 118
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: ST_TO_ADDR
13637: GO 15736
13639: LD_INT 10
13641: DOUBLE
13642: EQUAL
13643: IFTRUE 13647
13645: GO 13843
13647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_INT 2
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: LD_INT 5
13661: PUSH
13662: LD_INT 6
13664: PUSH
13665: LD_INT 7
13667: PUSH
13668: LD_INT 8
13670: PUSH
13671: LD_INT 9
13673: PUSH
13674: LD_INT 10
13676: PUSH
13677: LD_INT 11
13679: PUSH
13680: LD_INT 12
13682: PUSH
13683: LD_INT 13
13685: PUSH
13686: LD_INT 14
13688: PUSH
13689: LD_INT 15
13691: PUSH
13692: LD_INT 16
13694: PUSH
13695: LD_INT 17
13697: PUSH
13698: LD_INT 18
13700: PUSH
13701: LD_INT 19
13703: PUSH
13704: LD_INT 20
13706: PUSH
13707: LD_INT 21
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_INT 23
13715: PUSH
13716: LD_INT 24
13718: PUSH
13719: LD_INT 25
13721: PUSH
13722: LD_INT 26
13724: PUSH
13725: LD_INT 28
13727: PUSH
13728: LD_INT 30
13730: PUSH
13731: LD_INT 31
13733: PUSH
13734: LD_INT 32
13736: PUSH
13737: LD_INT 36
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 101
13773: PUSH
13774: LD_INT 102
13776: PUSH
13777: LD_INT 103
13779: PUSH
13780: LD_INT 104
13782: PUSH
13783: LD_INT 105
13785: PUSH
13786: LD_INT 106
13788: PUSH
13789: LD_INT 107
13791: PUSH
13792: LD_INT 108
13794: PUSH
13795: LD_INT 109
13797: PUSH
13798: LD_INT 110
13800: PUSH
13801: LD_INT 111
13803: PUSH
13804: LD_INT 112
13806: PUSH
13807: LD_INT 114
13809: PUSH
13810: LD_INT 116
13812: PUSH
13813: LD_INT 117
13815: PUSH
13816: LD_INT 118
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: ST_TO_ADDR
13841: GO 15736
13843: LD_INT 11
13845: DOUBLE
13846: EQUAL
13847: IFTRUE 13851
13849: GO 14055
13851: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: LD_INT 2
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 4
13865: PUSH
13866: LD_INT 5
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: LD_INT 7
13874: PUSH
13875: LD_INT 8
13877: PUSH
13878: LD_INT 9
13880: PUSH
13881: LD_INT 10
13883: PUSH
13884: LD_INT 11
13886: PUSH
13887: LD_INT 12
13889: PUSH
13890: LD_INT 13
13892: PUSH
13893: LD_INT 14
13895: PUSH
13896: LD_INT 15
13898: PUSH
13899: LD_INT 16
13901: PUSH
13902: LD_INT 17
13904: PUSH
13905: LD_INT 18
13907: PUSH
13908: LD_INT 19
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: LD_INT 21
13916: PUSH
13917: LD_INT 22
13919: PUSH
13920: LD_INT 23
13922: PUSH
13923: LD_INT 24
13925: PUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 26
13931: PUSH
13932: LD_INT 28
13934: PUSH
13935: LD_INT 30
13937: PUSH
13938: LD_INT 31
13940: PUSH
13941: LD_INT 32
13943: PUSH
13944: LD_INT 34
13946: PUSH
13947: LD_INT 36
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 101
13985: PUSH
13986: LD_INT 102
13988: PUSH
13989: LD_INT 103
13991: PUSH
13992: LD_INT 104
13994: PUSH
13995: LD_INT 105
13997: PUSH
13998: LD_INT 106
14000: PUSH
14001: LD_INT 107
14003: PUSH
14004: LD_INT 108
14006: PUSH
14007: LD_INT 109
14009: PUSH
14010: LD_INT 110
14012: PUSH
14013: LD_INT 111
14015: PUSH
14016: LD_INT 112
14018: PUSH
14019: LD_INT 114
14021: PUSH
14022: LD_INT 116
14024: PUSH
14025: LD_INT 117
14027: PUSH
14028: LD_INT 118
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: ST_TO_ADDR
14053: GO 15736
14055: LD_INT 12
14057: DOUBLE
14058: EQUAL
14059: IFTRUE 14063
14061: GO 14283
14063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: LD_INT 4
14080: PUSH
14081: LD_INT 5
14083: PUSH
14084: LD_INT 6
14086: PUSH
14087: LD_INT 7
14089: PUSH
14090: LD_INT 8
14092: PUSH
14093: LD_INT 9
14095: PUSH
14096: LD_INT 10
14098: PUSH
14099: LD_INT 11
14101: PUSH
14102: LD_INT 12
14104: PUSH
14105: LD_INT 13
14107: PUSH
14108: LD_INT 14
14110: PUSH
14111: LD_INT 15
14113: PUSH
14114: LD_INT 16
14116: PUSH
14117: LD_INT 17
14119: PUSH
14120: LD_INT 18
14122: PUSH
14123: LD_INT 19
14125: PUSH
14126: LD_INT 20
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_INT 23
14137: PUSH
14138: LD_INT 24
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 26
14146: PUSH
14147: LD_INT 27
14149: PUSH
14150: LD_INT 28
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: LD_INT 32
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 34
14167: PUSH
14168: LD_INT 36
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 101
14209: PUSH
14210: LD_INT 102
14212: PUSH
14213: LD_INT 103
14215: PUSH
14216: LD_INT 104
14218: PUSH
14219: LD_INT 105
14221: PUSH
14222: LD_INT 106
14224: PUSH
14225: LD_INT 107
14227: PUSH
14228: LD_INT 108
14230: PUSH
14231: LD_INT 109
14233: PUSH
14234: LD_INT 110
14236: PUSH
14237: LD_INT 111
14239: PUSH
14240: LD_INT 112
14242: PUSH
14243: LD_INT 113
14245: PUSH
14246: LD_INT 114
14248: PUSH
14249: LD_INT 116
14251: PUSH
14252: LD_INT 117
14254: PUSH
14255: LD_INT 118
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: ST_TO_ADDR
14281: GO 15736
14283: LD_INT 13
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14499
14291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: LD_INT 8
14314: PUSH
14315: LD_INT 9
14317: PUSH
14318: LD_INT 10
14320: PUSH
14321: LD_INT 11
14323: PUSH
14324: LD_INT 12
14326: PUSH
14327: LD_INT 14
14329: PUSH
14330: LD_INT 15
14332: PUSH
14333: LD_INT 16
14335: PUSH
14336: LD_INT 17
14338: PUSH
14339: LD_INT 18
14341: PUSH
14342: LD_INT 19
14344: PUSH
14345: LD_INT 20
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 23
14356: PUSH
14357: LD_INT 24
14359: PUSH
14360: LD_INT 25
14362: PUSH
14363: LD_INT 26
14365: PUSH
14366: LD_INT 27
14368: PUSH
14369: LD_INT 28
14371: PUSH
14372: LD_INT 30
14374: PUSH
14375: LD_INT 31
14377: PUSH
14378: LD_INT 32
14380: PUSH
14381: LD_INT 33
14383: PUSH
14384: LD_INT 34
14386: PUSH
14387: LD_INT 36
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 101
14425: PUSH
14426: LD_INT 102
14428: PUSH
14429: LD_INT 103
14431: PUSH
14432: LD_INT 104
14434: PUSH
14435: LD_INT 105
14437: PUSH
14438: LD_INT 106
14440: PUSH
14441: LD_INT 107
14443: PUSH
14444: LD_INT 108
14446: PUSH
14447: LD_INT 109
14449: PUSH
14450: LD_INT 110
14452: PUSH
14453: LD_INT 111
14455: PUSH
14456: LD_INT 112
14458: PUSH
14459: LD_INT 113
14461: PUSH
14462: LD_INT 114
14464: PUSH
14465: LD_INT 116
14467: PUSH
14468: LD_INT 117
14470: PUSH
14471: LD_INT 118
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: ST_TO_ADDR
14497: GO 15736
14499: LD_INT 14
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14731
14507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14508: LD_ADDR_VAR 0 2
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: LD_INT 5
14527: PUSH
14528: LD_INT 6
14530: PUSH
14531: LD_INT 7
14533: PUSH
14534: LD_INT 8
14536: PUSH
14537: LD_INT 9
14539: PUSH
14540: LD_INT 10
14542: PUSH
14543: LD_INT 11
14545: PUSH
14546: LD_INT 12
14548: PUSH
14549: LD_INT 13
14551: PUSH
14552: LD_INT 14
14554: PUSH
14555: LD_INT 15
14557: PUSH
14558: LD_INT 16
14560: PUSH
14561: LD_INT 17
14563: PUSH
14564: LD_INT 18
14566: PUSH
14567: LD_INT 19
14569: PUSH
14570: LD_INT 20
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_INT 23
14581: PUSH
14582: LD_INT 24
14584: PUSH
14585: LD_INT 25
14587: PUSH
14588: LD_INT 26
14590: PUSH
14591: LD_INT 27
14593: PUSH
14594: LD_INT 28
14596: PUSH
14597: LD_INT 29
14599: PUSH
14600: LD_INT 30
14602: PUSH
14603: LD_INT 31
14605: PUSH
14606: LD_INT 32
14608: PUSH
14609: LD_INT 33
14611: PUSH
14612: LD_INT 34
14614: PUSH
14615: LD_INT 36
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 101
14657: PUSH
14658: LD_INT 102
14660: PUSH
14661: LD_INT 103
14663: PUSH
14664: LD_INT 104
14666: PUSH
14667: LD_INT 105
14669: PUSH
14670: LD_INT 106
14672: PUSH
14673: LD_INT 107
14675: PUSH
14676: LD_INT 108
14678: PUSH
14679: LD_INT 109
14681: PUSH
14682: LD_INT 110
14684: PUSH
14685: LD_INT 111
14687: PUSH
14688: LD_INT 112
14690: PUSH
14691: LD_INT 113
14693: PUSH
14694: LD_INT 114
14696: PUSH
14697: LD_INT 116
14699: PUSH
14700: LD_INT 117
14702: PUSH
14703: LD_INT 118
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: ST_TO_ADDR
14729: GO 15736
14731: LD_INT 15
14733: DOUBLE
14734: EQUAL
14735: IFTRUE 14739
14737: GO 14963
14739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14740: LD_ADDR_VAR 0 2
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 4
14756: PUSH
14757: LD_INT 5
14759: PUSH
14760: LD_INT 6
14762: PUSH
14763: LD_INT 7
14765: PUSH
14766: LD_INT 8
14768: PUSH
14769: LD_INT 9
14771: PUSH
14772: LD_INT 10
14774: PUSH
14775: LD_INT 11
14777: PUSH
14778: LD_INT 12
14780: PUSH
14781: LD_INT 13
14783: PUSH
14784: LD_INT 14
14786: PUSH
14787: LD_INT 15
14789: PUSH
14790: LD_INT 16
14792: PUSH
14793: LD_INT 17
14795: PUSH
14796: LD_INT 18
14798: PUSH
14799: LD_INT 19
14801: PUSH
14802: LD_INT 20
14804: PUSH
14805: LD_INT 21
14807: PUSH
14808: LD_INT 22
14810: PUSH
14811: LD_INT 23
14813: PUSH
14814: LD_INT 24
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 26
14822: PUSH
14823: LD_INT 27
14825: PUSH
14826: LD_INT 28
14828: PUSH
14829: LD_INT 29
14831: PUSH
14832: LD_INT 30
14834: PUSH
14835: LD_INT 31
14837: PUSH
14838: LD_INT 32
14840: PUSH
14841: LD_INT 33
14843: PUSH
14844: LD_INT 34
14846: PUSH
14847: LD_INT 36
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 101
14889: PUSH
14890: LD_INT 102
14892: PUSH
14893: LD_INT 103
14895: PUSH
14896: LD_INT 104
14898: PUSH
14899: LD_INT 105
14901: PUSH
14902: LD_INT 106
14904: PUSH
14905: LD_INT 107
14907: PUSH
14908: LD_INT 108
14910: PUSH
14911: LD_INT 109
14913: PUSH
14914: LD_INT 110
14916: PUSH
14917: LD_INT 111
14919: PUSH
14920: LD_INT 112
14922: PUSH
14923: LD_INT 113
14925: PUSH
14926: LD_INT 114
14928: PUSH
14929: LD_INT 116
14931: PUSH
14932: LD_INT 117
14934: PUSH
14935: LD_INT 118
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: ST_TO_ADDR
14961: GO 15736
14963: LD_INT 16
14965: DOUBLE
14966: EQUAL
14967: IFTRUE 14971
14969: GO 15107
14971: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14972: LD_ADDR_VAR 0 2
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: LD_INT 5
14985: PUSH
14986: LD_INT 7
14988: PUSH
14989: LD_INT 11
14991: PUSH
14992: LD_INT 12
14994: PUSH
14995: LD_INT 15
14997: PUSH
14998: LD_INT 16
15000: PUSH
15001: LD_INT 20
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 22
15009: PUSH
15010: LD_INT 23
15012: PUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 30
15021: PUSH
15022: LD_INT 31
15024: PUSH
15025: LD_INT 32
15027: PUSH
15028: LD_INT 33
15030: PUSH
15031: LD_INT 34
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 101
15057: PUSH
15058: LD_INT 102
15060: PUSH
15061: LD_INT 103
15063: PUSH
15064: LD_INT 106
15066: PUSH
15067: LD_INT 108
15069: PUSH
15070: LD_INT 112
15072: PUSH
15073: LD_INT 113
15075: PUSH
15076: LD_INT 114
15078: PUSH
15079: LD_INT 116
15081: PUSH
15082: LD_INT 117
15084: PUSH
15085: LD_INT 118
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: ST_TO_ADDR
15105: GO 15736
15107: LD_INT 17
15109: DOUBLE
15110: EQUAL
15111: IFTRUE 15115
15113: GO 15339
15115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: LD_INT 4
15132: PUSH
15133: LD_INT 5
15135: PUSH
15136: LD_INT 6
15138: PUSH
15139: LD_INT 7
15141: PUSH
15142: LD_INT 8
15144: PUSH
15145: LD_INT 9
15147: PUSH
15148: LD_INT 10
15150: PUSH
15151: LD_INT 11
15153: PUSH
15154: LD_INT 12
15156: PUSH
15157: LD_INT 13
15159: PUSH
15160: LD_INT 14
15162: PUSH
15163: LD_INT 15
15165: PUSH
15166: LD_INT 16
15168: PUSH
15169: LD_INT 17
15171: PUSH
15172: LD_INT 18
15174: PUSH
15175: LD_INT 19
15177: PUSH
15178: LD_INT 20
15180: PUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 23
15189: PUSH
15190: LD_INT 24
15192: PUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 26
15198: PUSH
15199: LD_INT 27
15201: PUSH
15202: LD_INT 28
15204: PUSH
15205: LD_INT 29
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 31
15213: PUSH
15214: LD_INT 32
15216: PUSH
15217: LD_INT 33
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 36
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 113
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: LD_INT 116
15307: PUSH
15308: LD_INT 117
15310: PUSH
15311: LD_INT 118
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: ST_TO_ADDR
15337: GO 15736
15339: LD_INT 18
15341: DOUBLE
15342: EQUAL
15343: IFTRUE 15347
15345: GO 15495
15347: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15348: LD_ADDR_VAR 0 2
15352: PUSH
15353: LD_INT 2
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: LD_INT 7
15364: PUSH
15365: LD_INT 11
15367: PUSH
15368: LD_INT 12
15370: PUSH
15371: LD_INT 15
15373: PUSH
15374: LD_INT 16
15376: PUSH
15377: LD_INT 20
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 23
15388: PUSH
15389: LD_INT 25
15391: PUSH
15392: LD_INT 26
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: LD_INT 32
15403: PUSH
15404: LD_INT 33
15406: PUSH
15407: LD_INT 34
15409: PUSH
15410: LD_INT 35
15412: PUSH
15413: LD_INT 36
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 101
15441: PUSH
15442: LD_INT 102
15444: PUSH
15445: LD_INT 103
15447: PUSH
15448: LD_INT 106
15450: PUSH
15451: LD_INT 108
15453: PUSH
15454: LD_INT 112
15456: PUSH
15457: LD_INT 113
15459: PUSH
15460: LD_INT 114
15462: PUSH
15463: LD_INT 115
15465: PUSH
15466: LD_INT 116
15468: PUSH
15469: LD_INT 117
15471: PUSH
15472: LD_INT 118
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: ST_TO_ADDR
15493: GO 15736
15495: LD_INT 19
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15735
15503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: LD_INT 2
15514: PUSH
15515: LD_INT 3
15517: PUSH
15518: LD_INT 4
15520: PUSH
15521: LD_INT 5
15523: PUSH
15524: LD_INT 6
15526: PUSH
15527: LD_INT 7
15529: PUSH
15530: LD_INT 8
15532: PUSH
15533: LD_INT 9
15535: PUSH
15536: LD_INT 10
15538: PUSH
15539: LD_INT 11
15541: PUSH
15542: LD_INT 12
15544: PUSH
15545: LD_INT 13
15547: PUSH
15548: LD_INT 14
15550: PUSH
15551: LD_INT 15
15553: PUSH
15554: LD_INT 16
15556: PUSH
15557: LD_INT 17
15559: PUSH
15560: LD_INT 18
15562: PUSH
15563: LD_INT 19
15565: PUSH
15566: LD_INT 20
15568: PUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 22
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 24
15580: PUSH
15581: LD_INT 25
15583: PUSH
15584: LD_INT 26
15586: PUSH
15587: LD_INT 27
15589: PUSH
15590: LD_INT 28
15592: PUSH
15593: LD_INT 29
15595: PUSH
15596: LD_INT 30
15598: PUSH
15599: LD_INT 31
15601: PUSH
15602: LD_INT 32
15604: PUSH
15605: LD_INT 33
15607: PUSH
15608: LD_INT 34
15610: PUSH
15611: LD_INT 35
15613: PUSH
15614: LD_INT 36
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 101
15657: PUSH
15658: LD_INT 102
15660: PUSH
15661: LD_INT 103
15663: PUSH
15664: LD_INT 104
15666: PUSH
15667: LD_INT 105
15669: PUSH
15670: LD_INT 106
15672: PUSH
15673: LD_INT 107
15675: PUSH
15676: LD_INT 108
15678: PUSH
15679: LD_INT 109
15681: PUSH
15682: LD_INT 110
15684: PUSH
15685: LD_INT 111
15687: PUSH
15688: LD_INT 112
15690: PUSH
15691: LD_INT 113
15693: PUSH
15694: LD_INT 114
15696: PUSH
15697: LD_INT 115
15699: PUSH
15700: LD_INT 116
15702: PUSH
15703: LD_INT 117
15705: PUSH
15706: LD_INT 118
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: ST_TO_ADDR
15733: GO 15736
15735: POP
// end else
15736: GO 15967
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15738: LD_ADDR_VAR 0 2
15742: PUSH
15743: LD_INT 1
15745: PUSH
15746: LD_INT 2
15748: PUSH
15749: LD_INT 3
15751: PUSH
15752: LD_INT 4
15754: PUSH
15755: LD_INT 5
15757: PUSH
15758: LD_INT 6
15760: PUSH
15761: LD_INT 7
15763: PUSH
15764: LD_INT 8
15766: PUSH
15767: LD_INT 9
15769: PUSH
15770: LD_INT 10
15772: PUSH
15773: LD_INT 11
15775: PUSH
15776: LD_INT 12
15778: PUSH
15779: LD_INT 13
15781: PUSH
15782: LD_INT 14
15784: PUSH
15785: LD_INT 15
15787: PUSH
15788: LD_INT 16
15790: PUSH
15791: LD_INT 17
15793: PUSH
15794: LD_INT 18
15796: PUSH
15797: LD_INT 19
15799: PUSH
15800: LD_INT 20
15802: PUSH
15803: LD_INT 21
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_INT 23
15811: PUSH
15812: LD_INT 24
15814: PUSH
15815: LD_INT 25
15817: PUSH
15818: LD_INT 26
15820: PUSH
15821: LD_INT 27
15823: PUSH
15824: LD_INT 28
15826: PUSH
15827: LD_INT 29
15829: PUSH
15830: LD_INT 30
15832: PUSH
15833: LD_INT 31
15835: PUSH
15836: LD_INT 32
15838: PUSH
15839: LD_INT 33
15841: PUSH
15842: LD_INT 34
15844: PUSH
15845: LD_INT 35
15847: PUSH
15848: LD_INT 36
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 101
15891: PUSH
15892: LD_INT 102
15894: PUSH
15895: LD_INT 103
15897: PUSH
15898: LD_INT 104
15900: PUSH
15901: LD_INT 105
15903: PUSH
15904: LD_INT 106
15906: PUSH
15907: LD_INT 107
15909: PUSH
15910: LD_INT 108
15912: PUSH
15913: LD_INT 109
15915: PUSH
15916: LD_INT 110
15918: PUSH
15919: LD_INT 111
15921: PUSH
15922: LD_INT 112
15924: PUSH
15925: LD_INT 113
15927: PUSH
15928: LD_INT 114
15930: PUSH
15931: LD_INT 115
15933: PUSH
15934: LD_INT 116
15936: PUSH
15937: LD_INT 117
15939: PUSH
15940: LD_INT 118
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: ST_TO_ADDR
// if result then
15967: LD_VAR 0 2
15971: IFFALSE 16757
// begin normal :=  ;
15973: LD_ADDR_VAR 0 5
15977: PUSH
15978: LD_STRING 
15980: ST_TO_ADDR
// hardcore :=  ;
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_STRING 
15988: ST_TO_ADDR
// active :=  ;
15989: LD_ADDR_VAR 0 7
15993: PUSH
15994: LD_STRING 
15996: ST_TO_ADDR
// for i = 1 to normalCounter do
15997: LD_ADDR_VAR 0 8
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_EXP 39
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16114
// begin tmp := 0 ;
16015: LD_ADDR_VAR 0 3
16019: PUSH
16020: LD_STRING 0
16022: ST_TO_ADDR
// if result [ 1 ] then
16023: LD_VAR 0 2
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: IFFALSE 16096
// if result [ 1 ] [ 1 ] = i then
16033: LD_VAR 0 2
16037: PUSH
16038: LD_INT 1
16040: ARRAY
16041: PUSH
16042: LD_INT 1
16044: ARRAY
16045: PUSH
16046: LD_VAR 0 8
16050: EQUAL
16051: IFFALSE 16096
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16053: LD_ADDR_VAR 0 2
16057: PUSH
16058: LD_VAR 0 2
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: LD_VAR 0 2
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 3
16082: PPUSH
16083: CALL_OW 1
16087: ST_TO_ADDR
// tmp := 1 ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_STRING 1
16095: ST_TO_ADDR
// end ; normal := normal & tmp ;
16096: LD_ADDR_VAR 0 5
16100: PUSH
16101: LD_VAR 0 5
16105: PUSH
16106: LD_VAR 0 3
16110: STR
16111: ST_TO_ADDR
// end ;
16112: GO 16012
16114: POP
16115: POP
// for i = 1 to hardcoreCounter do
16116: LD_ADDR_VAR 0 8
16120: PUSH
16121: DOUBLE
16122: LD_INT 1
16124: DEC
16125: ST_TO_ADDR
16126: LD_EXP 40
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16237
// begin tmp := 0 ;
16134: LD_ADDR_VAR 0 3
16138: PUSH
16139: LD_STRING 0
16141: ST_TO_ADDR
// if result [ 2 ] then
16142: LD_VAR 0 2
16146: PUSH
16147: LD_INT 2
16149: ARRAY
16150: IFFALSE 16219
// if result [ 2 ] [ 1 ] = 100 + i then
16152: LD_VAR 0 2
16156: PUSH
16157: LD_INT 2
16159: ARRAY
16160: PUSH
16161: LD_INT 1
16163: ARRAY
16164: PUSH
16165: LD_INT 100
16167: PUSH
16168: LD_VAR 0 8
16172: PLUS
16173: EQUAL
16174: IFFALSE 16219
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_VAR 0 2
16185: PPUSH
16186: LD_INT 2
16188: PPUSH
16189: LD_VAR 0 2
16193: PUSH
16194: LD_INT 2
16196: ARRAY
16197: PPUSH
16198: LD_INT 1
16200: PPUSH
16201: CALL_OW 3
16205: PPUSH
16206: CALL_OW 1
16210: ST_TO_ADDR
// tmp := 1 ;
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_STRING 1
16218: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16219: LD_ADDR_VAR 0 6
16223: PUSH
16224: LD_VAR 0 6
16228: PUSH
16229: LD_VAR 0 3
16233: STR
16234: ST_TO_ADDR
// end ;
16235: GO 16131
16237: POP
16238: POP
// if isGameLoad then
16239: LD_VAR 0 1
16243: IFFALSE 16718
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16245: LD_ADDR_VAR 0 4
16249: PUSH
16250: LD_EXP 43
16254: PUSH
16255: LD_EXP 42
16259: PUSH
16260: LD_EXP 44
16264: PUSH
16265: LD_EXP 41
16269: PUSH
16270: LD_EXP 45
16274: PUSH
16275: LD_EXP 46
16279: PUSH
16280: LD_EXP 47
16284: PUSH
16285: LD_EXP 48
16289: PUSH
16290: LD_EXP 49
16294: PUSH
16295: LD_EXP 50
16299: PUSH
16300: LD_EXP 51
16304: PUSH
16305: LD_EXP 52
16309: PUSH
16310: LD_EXP 53
16314: PUSH
16315: LD_EXP 54
16319: PUSH
16320: LD_EXP 62
16324: PUSH
16325: LD_EXP 63
16329: PUSH
16330: LD_EXP 64
16334: PUSH
16335: LD_EXP 65
16339: PUSH
16340: LD_EXP 67
16344: PUSH
16345: LD_EXP 68
16349: PUSH
16350: LD_EXP 69
16354: PUSH
16355: LD_EXP 72
16359: PUSH
16360: LD_EXP 74
16364: PUSH
16365: LD_EXP 75
16369: PUSH
16370: LD_EXP 76
16374: PUSH
16375: LD_EXP 78
16379: PUSH
16380: LD_EXP 79
16384: PUSH
16385: LD_EXP 82
16389: PUSH
16390: LD_EXP 83
16394: PUSH
16395: LD_EXP 84
16399: PUSH
16400: LD_EXP 85
16404: PUSH
16405: LD_EXP 86
16409: PUSH
16410: LD_EXP 87
16414: PUSH
16415: LD_EXP 88
16419: PUSH
16420: LD_EXP 89
16424: PUSH
16425: LD_EXP 90
16429: PUSH
16430: LD_EXP 55
16434: PUSH
16435: LD_EXP 56
16439: PUSH
16440: LD_EXP 59
16444: PUSH
16445: LD_EXP 60
16449: PUSH
16450: LD_EXP 61
16454: PUSH
16455: LD_EXP 57
16459: PUSH
16460: LD_EXP 58
16464: PUSH
16465: LD_EXP 66
16469: PUSH
16470: LD_EXP 70
16474: PUSH
16475: LD_EXP 71
16479: PUSH
16480: LD_EXP 73
16484: PUSH
16485: LD_EXP 77
16489: PUSH
16490: LD_EXP 80
16494: PUSH
16495: LD_EXP 81
16499: PUSH
16500: LD_EXP 91
16504: PUSH
16505: LD_EXP 92
16509: PUSH
16510: LD_EXP 93
16514: PUSH
16515: LD_EXP 94
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: ST_TO_ADDR
// tmp :=  ;
16576: LD_ADDR_VAR 0 3
16580: PUSH
16581: LD_STRING 
16583: ST_TO_ADDR
// for i = 1 to normalCounter do
16584: LD_ADDR_VAR 0 8
16588: PUSH
16589: DOUBLE
16590: LD_INT 1
16592: DEC
16593: ST_TO_ADDR
16594: LD_EXP 39
16598: PUSH
16599: FOR_TO
16600: IFFALSE 16636
// begin if flags [ i ] then
16602: LD_VAR 0 4
16606: PUSH
16607: LD_VAR 0 8
16611: ARRAY
16612: IFFALSE 16634
// tmp := tmp & i & ; ;
16614: LD_ADDR_VAR 0 3
16618: PUSH
16619: LD_VAR 0 3
16623: PUSH
16624: LD_VAR 0 8
16628: STR
16629: PUSH
16630: LD_STRING ;
16632: STR
16633: ST_TO_ADDR
// end ;
16634: GO 16599
16636: POP
16637: POP
// for i = 1 to hardcoreCounter do
16638: LD_ADDR_VAR 0 8
16642: PUSH
16643: DOUBLE
16644: LD_INT 1
16646: DEC
16647: ST_TO_ADDR
16648: LD_EXP 40
16652: PUSH
16653: FOR_TO
16654: IFFALSE 16700
// begin if flags [ normalCounter + i ] then
16656: LD_VAR 0 4
16660: PUSH
16661: LD_EXP 39
16665: PUSH
16666: LD_VAR 0 8
16670: PLUS
16671: ARRAY
16672: IFFALSE 16698
// tmp := tmp & ( 100 + i ) & ; ;
16674: LD_ADDR_VAR 0 3
16678: PUSH
16679: LD_VAR 0 3
16683: PUSH
16684: LD_INT 100
16686: PUSH
16687: LD_VAR 0 8
16691: PLUS
16692: STR
16693: PUSH
16694: LD_STRING ;
16696: STR
16697: ST_TO_ADDR
// end ;
16698: GO 16653
16700: POP
16701: POP
// if tmp then
16702: LD_VAR 0 3
16706: IFFALSE 16718
// active := tmp ;
16708: LD_ADDR_VAR 0 7
16712: PUSH
16713: LD_VAR 0 3
16717: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16718: LD_STRING getStreamItemsFromMission("
16720: PUSH
16721: LD_VAR 0 5
16725: STR
16726: PUSH
16727: LD_STRING ","
16729: STR
16730: PUSH
16731: LD_VAR 0 6
16735: STR
16736: PUSH
16737: LD_STRING ","
16739: STR
16740: PUSH
16741: LD_VAR 0 7
16745: STR
16746: PUSH
16747: LD_STRING ")
16749: STR
16750: PPUSH
16751: CALL_OW 559
// end else
16755: GO 16764
// ToLua ( getStreamItemsFromMission("","","") ) ;
16757: LD_STRING getStreamItemsFromMission("","","")
16759: PPUSH
16760: CALL_OW 559
// end ;
16764: LD_VAR 0 2
16768: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16769: LD_EXP 38
16773: PUSH
16774: LD_EXP 43
16778: AND
16779: IFFALSE 16903
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
// begin enable ;
16788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16789: LD_ADDR_VAR 0 2
16793: PUSH
16794: LD_INT 22
16796: PUSH
16797: LD_OWVAR 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 2
16808: PUSH
16809: LD_INT 34
16811: PUSH
16812: LD_INT 7
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 34
16821: PUSH
16822: LD_INT 45
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 34
16831: PUSH
16832: LD_INT 28
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 34
16841: PUSH
16842: LD_INT 47
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// if not tmp then
16865: LD_VAR 0 2
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 16903
// for i in tmp do
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: LD_VAR 0 2
16883: PUSH
16884: FOR_IN
16885: IFFALSE 16901
// begin SetLives ( i , 0 ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_INT 0
16894: PPUSH
16895: CALL_OW 234
// end ;
16899: GO 16884
16901: POP
16902: POP
// end ;
16903: PPOPN 2
16905: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16906: LD_EXP 38
16910: PUSH
16911: LD_EXP 44
16915: AND
16916: IFFALSE 17000
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
// begin enable ;
16925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 32
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 2
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17000
// for i in tmp do
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_VAR 0 2
16980: PUSH
16981: FOR_IN
16982: IFFALSE 16998
// begin SetLives ( i , 0 ) ;
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 0
16991: PPUSH
16992: CALL_OW 234
// end ;
16996: GO 16981
16998: POP
16999: POP
// end ;
17000: PPOPN 2
17002: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17003: LD_EXP 38
17007: PUSH
17008: LD_EXP 41
17012: AND
17013: IFFALSE 17106
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
// begin enable ;
17021: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_OWVAR 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 25
17044: PUSH
17045: LD_INT 5
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 25
17054: PUSH
17055: LD_INT 9
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 25
17064: PUSH
17065: LD_INT 8
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: PUSH
17087: FOR_IN
17088: IFFALSE 17104
// begin SetClass ( i , 1 ) ;
17090: LD_VAR 0 1
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 336
// end ;
17102: GO 17087
17104: POP
17105: POP
// end ;
17106: PPOPN 1
17108: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17109: LD_EXP 38
17113: PUSH
17114: LD_EXP 42
17118: AND
17119: PUSH
17120: LD_OWVAR 65
17124: PUSH
17125: LD_INT 7
17127: LESS
17128: AND
17129: IFFALSE 17143
17131: GO 17133
17133: DISABLE
// begin enable ;
17134: ENABLE
// game_speed := 7 ;
17135: LD_ADDR_OWVAR 65
17139: PUSH
17140: LD_INT 7
17142: ST_TO_ADDR
// end ;
17143: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17144: LD_EXP 38
17148: PUSH
17149: LD_EXP 45
17153: AND
17154: IFFALSE 17356
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
17163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: LD_INT 81
17171: PUSH
17172: LD_OWVAR 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 21
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: ST_TO_ADDR
// if not tmp then
17200: LD_VAR 0 3
17204: NOT
17205: IFFALSE 17209
// exit ;
17207: GO 17356
// if tmp > 5 then
17209: LD_VAR 0 3
17213: PUSH
17214: LD_INT 5
17216: GREATER
17217: IFFALSE 17229
// k := 5 else
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_INT 5
17226: ST_TO_ADDR
17227: GO 17239
// k := tmp ;
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_VAR 0 3
17238: ST_TO_ADDR
// for i := 1 to k do
17239: LD_ADDR_VAR 0 1
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_VAR 0 2
17253: PUSH
17254: FOR_TO
17255: IFFALSE 17354
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17257: LD_VAR 0 3
17261: PUSH
17262: LD_VAR 0 1
17266: ARRAY
17267: PPUSH
17268: LD_VAR 0 1
17272: PUSH
17273: LD_INT 4
17275: MOD
17276: PUSH
17277: LD_INT 1
17279: PLUS
17280: PPUSH
17281: CALL_OW 259
17285: PUSH
17286: LD_INT 10
17288: LESS
17289: IFFALSE 17352
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17291: LD_VAR 0 3
17295: PUSH
17296: LD_VAR 0 1
17300: ARRAY
17301: PPUSH
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 4
17309: MOD
17310: PUSH
17311: LD_INT 1
17313: PLUS
17314: PPUSH
17315: LD_VAR 0 3
17319: PUSH
17320: LD_VAR 0 1
17324: ARRAY
17325: PPUSH
17326: LD_VAR 0 1
17330: PUSH
17331: LD_INT 4
17333: MOD
17334: PUSH
17335: LD_INT 1
17337: PLUS
17338: PPUSH
17339: CALL_OW 259
17343: PUSH
17344: LD_INT 1
17346: PLUS
17347: PPUSH
17348: CALL_OW 237
17352: GO 17254
17354: POP
17355: POP
// end ;
17356: PPOPN 3
17358: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17359: LD_EXP 38
17363: PUSH
17364: LD_EXP 46
17368: AND
17369: IFFALSE 17389
17371: GO 17373
17373: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17374: LD_INT 4
17376: PPUSH
17377: LD_OWVAR 2
17381: PPUSH
17382: LD_INT 0
17384: PPUSH
17385: CALL_OW 324
17389: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17390: LD_EXP 38
17394: PUSH
17395: LD_EXP 75
17399: AND
17400: IFFALSE 17420
17402: GO 17404
17404: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17405: LD_INT 19
17407: PPUSH
17408: LD_OWVAR 2
17412: PPUSH
17413: LD_INT 0
17415: PPUSH
17416: CALL_OW 324
17420: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17421: LD_EXP 38
17425: PUSH
17426: LD_EXP 47
17430: AND
17431: IFFALSE 17533
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
// begin enable ;
17440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17441: LD_ADDR_VAR 0 2
17445: PUSH
17446: LD_INT 22
17448: PUSH
17449: LD_OWVAR 2
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: LD_INT 34
17463: PUSH
17464: LD_INT 11
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 34
17473: PUSH
17474: LD_INT 30
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: ST_TO_ADDR
// if not tmp then
17495: LD_VAR 0 2
17499: NOT
17500: IFFALSE 17504
// exit ;
17502: GO 17533
// for i in tmp do
17504: LD_ADDR_VAR 0 1
17508: PUSH
17509: LD_VAR 0 2
17513: PUSH
17514: FOR_IN
17515: IFFALSE 17531
// begin SetLives ( i , 0 ) ;
17517: LD_VAR 0 1
17521: PPUSH
17522: LD_INT 0
17524: PPUSH
17525: CALL_OW 234
// end ;
17529: GO 17514
17531: POP
17532: POP
// end ;
17533: PPOPN 2
17535: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17536: LD_EXP 38
17540: PUSH
17541: LD_EXP 48
17545: AND
17546: IFFALSE 17566
17548: GO 17550
17550: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17551: LD_INT 32
17553: PPUSH
17554: LD_OWVAR 2
17558: PPUSH
17559: LD_INT 0
17561: PPUSH
17562: CALL_OW 324
17566: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17567: LD_EXP 38
17571: PUSH
17572: LD_EXP 49
17576: AND
17577: IFFALSE 17758
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
17586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 33
17606: PUSH
17607: LD_INT 3
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17758
// side := 0 ;
17632: LD_ADDR_VAR 0 3
17636: PUSH
17637: LD_INT 0
17639: ST_TO_ADDR
// for i := 1 to 8 do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: DOUBLE
17646: LD_INT 1
17648: DEC
17649: ST_TO_ADDR
17650: LD_INT 8
17652: PUSH
17653: FOR_TO
17654: IFFALSE 17702
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17656: LD_OWVAR 2
17660: PUSH
17661: LD_VAR 0 1
17665: NONEQUAL
17666: PUSH
17667: LD_OWVAR 2
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 81
17681: PUSH
17682: LD_INT 2
17684: EQUAL
17685: AND
17686: IFFALSE 17700
// begin side := i ;
17688: LD_ADDR_VAR 0 3
17692: PUSH
17693: LD_VAR 0 1
17697: ST_TO_ADDR
// break ;
17698: GO 17702
// end ;
17700: GO 17653
17702: POP
17703: POP
// if not side then
17704: LD_VAR 0 3
17708: NOT
17709: IFFALSE 17713
// exit ;
17711: GO 17758
// for i := 1 to tmp do
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: DOUBLE
17719: LD_INT 1
17721: DEC
17722: ST_TO_ADDR
17723: LD_VAR 0 2
17727: PUSH
17728: FOR_TO
17729: IFFALSE 17756
// if Prob ( 60 ) then
17731: LD_INT 60
17733: PPUSH
17734: CALL_OW 13
17738: IFFALSE 17754
// SetSide ( i , side ) ;
17740: LD_VAR 0 1
17744: PPUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: CALL_OW 235
17754: GO 17728
17756: POP
17757: POP
// end ;
17758: PPOPN 3
17760: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17761: LD_EXP 38
17765: PUSH
17766: LD_EXP 51
17770: AND
17771: IFFALSE 17890
17773: GO 17775
17775: DISABLE
17776: LD_INT 0
17778: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17779: LD_ADDR_VAR 0 1
17783: PUSH
17784: LD_INT 22
17786: PUSH
17787: LD_OWVAR 2
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 21
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 3
17808: PUSH
17809: LD_INT 23
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: PUSH
17833: FOR_IN
17834: IFFALSE 17888
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17836: LD_VAR 0 1
17840: PPUSH
17841: CALL_OW 257
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: LD_INT 3
17854: PUSH
17855: LD_INT 4
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: IN
17864: IFFALSE 17886
// SetClass ( un , rand ( 1 , 4 ) ) ;
17866: LD_VAR 0 1
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: LD_INT 4
17876: PPUSH
17877: CALL_OW 12
17881: PPUSH
17882: CALL_OW 336
17886: GO 17833
17888: POP
17889: POP
// end ;
17890: PPOPN 1
17892: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17893: LD_EXP 38
17897: PUSH
17898: LD_EXP 50
17902: AND
17903: IFFALSE 17982
17905: GO 17907
17907: DISABLE
17908: LD_INT 0
17910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_OWVAR 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 21
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 69
17946: ST_TO_ADDR
// if not tmp then
17947: LD_VAR 0 1
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 17982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17956: LD_VAR 0 1
17960: PUSH
17961: LD_INT 1
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 12
17973: ARRAY
17974: PPUSH
17975: LD_INT 100
17977: PPUSH
17978: CALL_OW 234
// end ;
17982: PPOPN 1
17984: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17985: LD_EXP 38
17989: PUSH
17990: LD_EXP 52
17994: AND
17995: IFFALSE 18093
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 1
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18093
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18048: LD_VAR 0 1
18052: PUSH
18053: LD_INT 1
18055: PPUSH
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 12
18065: ARRAY
18066: PPUSH
18067: LD_INT 1
18069: PPUSH
18070: LD_INT 4
18072: PPUSH
18073: CALL_OW 12
18077: PPUSH
18078: LD_INT 3000
18080: PPUSH
18081: LD_INT 9000
18083: PPUSH
18084: CALL_OW 12
18088: PPUSH
18089: CALL_OW 492
// end ;
18093: PPOPN 1
18095: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18096: LD_EXP 38
18100: PUSH
18101: LD_EXP 53
18105: AND
18106: IFFALSE 18126
18108: GO 18110
18110: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18111: LD_INT 1
18113: PPUSH
18114: LD_OWVAR 2
18118: PPUSH
18119: LD_INT 0
18121: PPUSH
18122: CALL_OW 324
18126: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18127: LD_EXP 38
18131: PUSH
18132: LD_EXP 54
18136: AND
18137: IFFALSE 18220
18139: GO 18141
18141: DISABLE
18142: LD_INT 0
18144: PPUSH
18145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_INT 22
18153: PUSH
18154: LD_OWVAR 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: ST_TO_ADDR
// if not tmp then
18182: LD_VAR 0 2
18186: NOT
18187: IFFALSE 18191
// exit ;
18189: GO 18220
// for i in tmp do
18191: LD_ADDR_VAR 0 1
18195: PUSH
18196: LD_VAR 0 2
18200: PUSH
18201: FOR_IN
18202: IFFALSE 18218
// SetBLevel ( i , 10 ) ;
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_INT 10
18211: PPUSH
18212: CALL_OW 241
18216: GO 18201
18218: POP
18219: POP
// end ;
18220: PPOPN 2
18222: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18223: LD_EXP 38
18227: PUSH
18228: LD_EXP 55
18232: AND
18233: IFFALSE 18344
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
18241: PPUSH
18242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18243: LD_ADDR_VAR 0 3
18247: PUSH
18248: LD_INT 22
18250: PUSH
18251: LD_OWVAR 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 25
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: ST_TO_ADDR
// if not tmp then
18279: LD_VAR 0 3
18283: NOT
18284: IFFALSE 18288
// exit ;
18286: GO 18344
// un := tmp [ rand ( 1 , tmp ) ] ;
18288: LD_ADDR_VAR 0 2
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 1
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: CALL_OW 12
18310: ARRAY
18311: ST_TO_ADDR
// if Crawls ( un ) then
18312: LD_VAR 0 2
18316: PPUSH
18317: CALL_OW 318
18321: IFFALSE 18332
// ComWalk ( un ) ;
18323: LD_VAR 0 2
18327: PPUSH
18328: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18332: LD_VAR 0 2
18336: PPUSH
18337: LD_INT 5
18339: PPUSH
18340: CALL_OW 336
// end ;
18344: PPOPN 3
18346: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18347: LD_EXP 38
18351: PUSH
18352: LD_EXP 56
18356: AND
18357: PUSH
18358: LD_OWVAR 67
18362: PUSH
18363: LD_INT 4
18365: LESS
18366: AND
18367: IFFALSE 18386
18369: GO 18371
18371: DISABLE
// begin Difficulty := Difficulty + 1 ;
18372: LD_ADDR_OWVAR 67
18376: PUSH
18377: LD_OWVAR 67
18381: PUSH
18382: LD_INT 1
18384: PLUS
18385: ST_TO_ADDR
// end ;
18386: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18387: LD_EXP 38
18391: PUSH
18392: LD_EXP 57
18396: AND
18397: IFFALSE 18500
18399: GO 18401
18401: DISABLE
18402: LD_INT 0
18404: PPUSH
// begin for i := 1 to 5 do
18405: LD_ADDR_VAR 0 1
18409: PUSH
18410: DOUBLE
18411: LD_INT 1
18413: DEC
18414: ST_TO_ADDR
18415: LD_INT 5
18417: PUSH
18418: FOR_TO
18419: IFFALSE 18498
// begin uc_nation := nation_nature ;
18421: LD_ADDR_OWVAR 21
18425: PUSH
18426: LD_INT 0
18428: ST_TO_ADDR
// uc_side := 0 ;
18429: LD_ADDR_OWVAR 20
18433: PUSH
18434: LD_INT 0
18436: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18437: LD_ADDR_OWVAR 29
18441: PUSH
18442: LD_INT 12
18444: PUSH
18445: LD_INT 12
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: ST_TO_ADDR
// hc_agressivity := 20 ;
18452: LD_ADDR_OWVAR 35
18456: PUSH
18457: LD_INT 20
18459: ST_TO_ADDR
// hc_class := class_tiger ;
18460: LD_ADDR_OWVAR 28
18464: PUSH
18465: LD_INT 14
18467: ST_TO_ADDR
// hc_gallery :=  ;
18468: LD_ADDR_OWVAR 33
18472: PUSH
18473: LD_STRING 
18475: ST_TO_ADDR
// hc_name :=  ;
18476: LD_ADDR_OWVAR 26
18480: PUSH
18481: LD_STRING 
18483: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18484: CALL_OW 44
18488: PPUSH
18489: LD_INT 0
18491: PPUSH
18492: CALL_OW 51
// end ;
18496: GO 18418
18498: POP
18499: POP
// end ;
18500: PPOPN 1
18502: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18503: LD_EXP 38
18507: PUSH
18508: LD_EXP 58
18512: AND
18513: IFFALSE 18522
18515: GO 18517
18517: DISABLE
// StreamSibBomb ;
18518: CALL 18523 0 0
18522: END
// export function StreamSibBomb ; var i , x , y ; begin
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
// result := false ;
18529: LD_ADDR_VAR 0 1
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// for i := 1 to 16 do
18537: LD_ADDR_VAR 0 2
18541: PUSH
18542: DOUBLE
18543: LD_INT 1
18545: DEC
18546: ST_TO_ADDR
18547: LD_INT 16
18549: PUSH
18550: FOR_TO
18551: IFFALSE 18750
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18553: LD_ADDR_VAR 0 3
18557: PUSH
18558: LD_INT 10
18560: PUSH
18561: LD_INT 20
18563: PUSH
18564: LD_INT 30
18566: PUSH
18567: LD_INT 40
18569: PUSH
18570: LD_INT 50
18572: PUSH
18573: LD_INT 60
18575: PUSH
18576: LD_INT 70
18578: PUSH
18579: LD_INT 80
18581: PUSH
18582: LD_INT 90
18584: PUSH
18585: LD_INT 100
18587: PUSH
18588: LD_INT 110
18590: PUSH
18591: LD_INT 120
18593: PUSH
18594: LD_INT 130
18596: PUSH
18597: LD_INT 140
18599: PUSH
18600: LD_INT 150
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PPUSH
18623: LD_INT 15
18625: PPUSH
18626: CALL_OW 12
18630: ARRAY
18631: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18632: LD_ADDR_VAR 0 4
18636: PUSH
18637: LD_INT 10
18639: PUSH
18640: LD_INT 20
18642: PUSH
18643: LD_INT 30
18645: PUSH
18646: LD_INT 40
18648: PUSH
18649: LD_INT 50
18651: PUSH
18652: LD_INT 60
18654: PUSH
18655: LD_INT 70
18657: PUSH
18658: LD_INT 80
18660: PUSH
18661: LD_INT 90
18663: PUSH
18664: LD_INT 100
18666: PUSH
18667: LD_INT 110
18669: PUSH
18670: LD_INT 120
18672: PUSH
18673: LD_INT 130
18675: PUSH
18676: LD_INT 140
18678: PUSH
18679: LD_INT 150
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PPUSH
18702: LD_INT 15
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: ST_TO_ADDR
// if ValidHex ( x , y ) then
18711: LD_VAR 0 3
18715: PPUSH
18716: LD_VAR 0 4
18720: PPUSH
18721: CALL_OW 488
18725: IFFALSE 18748
// begin result := [ x , y ] ;
18727: LD_ADDR_VAR 0 1
18731: PUSH
18732: LD_VAR 0 3
18736: PUSH
18737: LD_VAR 0 4
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: ST_TO_ADDR
// break ;
18746: GO 18750
// end ; end ;
18748: GO 18550
18750: POP
18751: POP
// if result then
18752: LD_VAR 0 1
18756: IFFALSE 18816
// begin ToLua ( playSibBomb() ) ;
18758: LD_STRING playSibBomb()
18760: PPUSH
18761: CALL_OW 559
// wait ( 0 0$14 ) ;
18765: LD_INT 490
18767: PPUSH
18768: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18772: LD_VAR 0 1
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PPUSH
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 2
18788: ARRAY
18789: PPUSH
18790: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18794: LD_VAR 0 1
18798: PUSH
18799: LD_INT 1
18801: ARRAY
18802: PPUSH
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 2
18810: ARRAY
18811: PPUSH
18812: CALL_OW 429
// end ; end ;
18816: LD_VAR 0 1
18820: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18821: LD_EXP 38
18825: PUSH
18826: LD_EXP 60
18830: AND
18831: IFFALSE 18843
18833: GO 18835
18835: DISABLE
// YouLost (  ) ;
18836: LD_STRING 
18838: PPUSH
18839: CALL_OW 104
18843: END
// every 0 0$1 trigger StreamModeActive and sFog do
18844: LD_EXP 38
18848: PUSH
18849: LD_EXP 59
18853: AND
18854: IFFALSE 18868
18856: GO 18858
18858: DISABLE
// FogOff ( your_side ) ;
18859: LD_OWVAR 2
18863: PPUSH
18864: CALL_OW 344
18868: END
// every 0 0$1 trigger StreamModeActive and sSun do
18869: LD_EXP 38
18873: PUSH
18874: LD_EXP 61
18878: AND
18879: IFFALSE 18907
18881: GO 18883
18883: DISABLE
// begin solar_recharge_percent := 0 ;
18884: LD_ADDR_OWVAR 79
18888: PUSH
18889: LD_INT 0
18891: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18892: LD_INT 10500
18894: PPUSH
18895: CALL_OW 67
// solar_recharge_percent := 100 ;
18899: LD_ADDR_OWVAR 79
18903: PUSH
18904: LD_INT 100
18906: ST_TO_ADDR
// end ;
18907: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18908: LD_EXP 38
18912: PUSH
18913: LD_EXP 62
18917: AND
18918: IFFALSE 19157
18920: GO 18922
18922: DISABLE
18923: LD_INT 0
18925: PPUSH
18926: PPUSH
18927: PPUSH
// begin tmp := [ ] ;
18928: LD_ADDR_VAR 0 3
18932: PUSH
18933: EMPTY
18934: ST_TO_ADDR
// for i := 1 to 6 do
18935: LD_ADDR_VAR 0 1
18939: PUSH
18940: DOUBLE
18941: LD_INT 1
18943: DEC
18944: ST_TO_ADDR
18945: LD_INT 6
18947: PUSH
18948: FOR_TO
18949: IFFALSE 19054
// begin uc_nation := nation_nature ;
18951: LD_ADDR_OWVAR 21
18955: PUSH
18956: LD_INT 0
18958: ST_TO_ADDR
// uc_side := 0 ;
18959: LD_ADDR_OWVAR 20
18963: PUSH
18964: LD_INT 0
18966: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18967: LD_ADDR_OWVAR 29
18971: PUSH
18972: LD_INT 12
18974: PUSH
18975: LD_INT 12
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: ST_TO_ADDR
// hc_agressivity := 20 ;
18982: LD_ADDR_OWVAR 35
18986: PUSH
18987: LD_INT 20
18989: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18990: LD_ADDR_OWVAR 28
18994: PUSH
18995: LD_INT 17
18997: ST_TO_ADDR
// hc_gallery :=  ;
18998: LD_ADDR_OWVAR 33
19002: PUSH
19003: LD_STRING 
19005: ST_TO_ADDR
// hc_name :=  ;
19006: LD_ADDR_OWVAR 26
19010: PUSH
19011: LD_STRING 
19013: ST_TO_ADDR
// un := CreateHuman ;
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: CALL_OW 44
19023: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 51
// tmp := tmp ^ un ;
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: LD_VAR 0 3
19045: PUSH
19046: LD_VAR 0 2
19050: ADD
19051: ST_TO_ADDR
// end ;
19052: GO 18948
19054: POP
19055: POP
// repeat wait ( 0 0$1 ) ;
19056: LD_INT 35
19058: PPUSH
19059: CALL_OW 67
// for un in tmp do
19063: LD_ADDR_VAR 0 2
19067: PUSH
19068: LD_VAR 0 3
19072: PUSH
19073: FOR_IN
19074: IFFALSE 19148
// begin if IsDead ( un ) then
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL_OW 301
19085: IFFALSE 19105
// begin tmp := tmp diff un ;
19087: LD_ADDR_VAR 0 3
19091: PUSH
19092: LD_VAR 0 3
19096: PUSH
19097: LD_VAR 0 2
19101: DIFF
19102: ST_TO_ADDR
// continue ;
19103: GO 19073
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19105: LD_VAR 0 2
19109: PPUSH
19110: LD_INT 3
19112: PUSH
19113: LD_INT 22
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: PPUSH
19132: LD_VAR 0 2
19136: PPUSH
19137: CALL_OW 74
19141: PPUSH
19142: CALL_OW 115
// end ;
19146: GO 19073
19148: POP
19149: POP
// until not tmp ;
19150: LD_VAR 0 3
19154: NOT
19155: IFFALSE 19056
// end ;
19157: PPOPN 3
19159: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19160: LD_EXP 38
19164: PUSH
19165: LD_EXP 63
19169: AND
19170: IFFALSE 19224
19172: GO 19174
19174: DISABLE
// begin ToLua ( displayTroll(); ) ;
19175: LD_STRING displayTroll();
19177: PPUSH
19178: CALL_OW 559
// wait ( 3 3$00 ) ;
19182: LD_INT 6300
19184: PPUSH
19185: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19189: LD_STRING hideTroll();
19191: PPUSH
19192: CALL_OW 559
// wait ( 1 1$00 ) ;
19196: LD_INT 2100
19198: PPUSH
19199: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19203: LD_STRING displayTroll();
19205: PPUSH
19206: CALL_OW 559
// wait ( 1 1$00 ) ;
19210: LD_INT 2100
19212: PPUSH
19213: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19217: LD_STRING hideTroll();
19219: PPUSH
19220: CALL_OW 559
// end ;
19224: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19225: LD_EXP 38
19229: PUSH
19230: LD_EXP 64
19234: AND
19235: IFFALSE 19298
19237: GO 19239
19239: DISABLE
19240: LD_INT 0
19242: PPUSH
// begin p := 0 ;
19243: LD_ADDR_VAR 0 1
19247: PUSH
19248: LD_INT 0
19250: ST_TO_ADDR
// repeat game_speed := 1 ;
19251: LD_ADDR_OWVAR 65
19255: PUSH
19256: LD_INT 1
19258: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19259: LD_INT 35
19261: PPUSH
19262: CALL_OW 67
// p := p + 1 ;
19266: LD_ADDR_VAR 0 1
19270: PUSH
19271: LD_VAR 0 1
19275: PUSH
19276: LD_INT 1
19278: PLUS
19279: ST_TO_ADDR
// until p >= 60 ;
19280: LD_VAR 0 1
19284: PUSH
19285: LD_INT 60
19287: GREATEREQUAL
19288: IFFALSE 19251
// game_speed := 4 ;
19290: LD_ADDR_OWVAR 65
19294: PUSH
19295: LD_INT 4
19297: ST_TO_ADDR
// end ;
19298: PPOPN 1
19300: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19301: LD_EXP 38
19305: PUSH
19306: LD_EXP 65
19310: AND
19311: IFFALSE 19457
19313: GO 19315
19315: DISABLE
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19320: LD_ADDR_VAR 0 1
19324: PUSH
19325: LD_INT 22
19327: PUSH
19328: LD_OWVAR 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: LD_INT 30
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 30
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: ST_TO_ADDR
// if not depot then
19374: LD_VAR 0 1
19378: NOT
19379: IFFALSE 19383
// exit ;
19381: GO 19457
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 1
19395: PPUSH
19396: LD_VAR 0 1
19400: PPUSH
19401: CALL_OW 12
19405: ARRAY
19406: PPUSH
19407: CALL_OW 274
19411: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: LD_INT 0
19422: PPUSH
19423: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_INT 2
19434: PPUSH
19435: LD_INT 0
19437: PPUSH
19438: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19442: LD_VAR 0 2
19446: PPUSH
19447: LD_INT 3
19449: PPUSH
19450: LD_INT 0
19452: PPUSH
19453: CALL_OW 277
// end ;
19457: PPOPN 2
19459: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19460: LD_EXP 38
19464: PUSH
19465: LD_EXP 66
19469: AND
19470: IFFALSE 19567
19472: GO 19474
19474: DISABLE
19475: LD_INT 0
19477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19478: LD_ADDR_VAR 0 1
19482: PUSH
19483: LD_INT 22
19485: PUSH
19486: LD_OWVAR 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 21
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: LD_INT 23
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: ST_TO_ADDR
// if not tmp then
19532: LD_VAR 0 1
19536: NOT
19537: IFFALSE 19541
// exit ;
19539: GO 19567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19541: LD_VAR 0 1
19545: PUSH
19546: LD_INT 1
19548: PPUSH
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 12
19558: ARRAY
19559: PPUSH
19560: LD_INT 200
19562: PPUSH
19563: CALL_OW 234
// end ;
19567: PPOPN 1
19569: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19570: LD_EXP 38
19574: PUSH
19575: LD_EXP 67
19579: AND
19580: IFFALSE 19659
19582: GO 19584
19584: DISABLE
19585: LD_INT 0
19587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19588: LD_ADDR_VAR 0 1
19592: PUSH
19593: LD_INT 22
19595: PUSH
19596: LD_OWVAR 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 21
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 69
19623: ST_TO_ADDR
// if not tmp then
19624: LD_VAR 0 1
19628: NOT
19629: IFFALSE 19633
// exit ;
19631: GO 19659
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 1
19640: PPUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 12
19650: ARRAY
19651: PPUSH
19652: LD_INT 60
19654: PPUSH
19655: CALL_OW 234
// end ;
19659: PPOPN 1
19661: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19662: LD_EXP 38
19666: PUSH
19667: LD_EXP 68
19671: AND
19672: IFFALSE 19771
19674: GO 19676
19676: DISABLE
19677: LD_INT 0
19679: PPUSH
19680: PPUSH
// begin enable ;
19681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_INT 22
19689: PUSH
19690: LD_OWVAR 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 61
19701: PUSH
19702: EMPTY
19703: LIST
19704: PUSH
19705: LD_INT 33
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 1
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19771
// for i in tmp do
19734: LD_ADDR_VAR 0 2
19738: PUSH
19739: LD_VAR 0 1
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19769
// if IsControledBy ( i ) then
19747: LD_VAR 0 2
19751: PPUSH
19752: CALL_OW 312
19756: IFFALSE 19767
// ComUnlink ( i ) ;
19758: LD_VAR 0 2
19762: PPUSH
19763: CALL_OW 136
19767: GO 19744
19769: POP
19770: POP
// end ;
19771: PPOPN 2
19773: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19774: LD_EXP 38
19778: PUSH
19779: LD_EXP 69
19783: AND
19784: IFFALSE 19924
19786: GO 19788
19788: DISABLE
19789: LD_INT 0
19791: PPUSH
19792: PPUSH
// begin ToLua ( displayPowell(); ) ;
19793: LD_STRING displayPowell();
19795: PPUSH
19796: CALL_OW 559
// uc_side := 0 ;
19800: LD_ADDR_OWVAR 20
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// uc_nation := 2 ;
19808: LD_ADDR_OWVAR 21
19812: PUSH
19813: LD_INT 2
19815: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19816: LD_ADDR_OWVAR 37
19820: PUSH
19821: LD_INT 14
19823: ST_TO_ADDR
// vc_engine := engine_siberite ;
19824: LD_ADDR_OWVAR 39
19828: PUSH
19829: LD_INT 3
19831: ST_TO_ADDR
// vc_control := control_apeman ;
19832: LD_ADDR_OWVAR 38
19836: PUSH
19837: LD_INT 5
19839: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19840: LD_ADDR_OWVAR 40
19844: PUSH
19845: LD_INT 29
19847: ST_TO_ADDR
// un := CreateVehicle ;
19848: LD_ADDR_VAR 0 2
19852: PUSH
19853: CALL_OW 45
19857: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19858: LD_VAR 0 2
19862: PPUSH
19863: LD_INT 1
19865: PPUSH
19866: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19870: LD_INT 35
19872: PPUSH
19873: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_INT 22
19884: PUSH
19885: LD_OWVAR 2
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 69
19898: PPUSH
19899: LD_VAR 0 2
19903: PPUSH
19904: CALL_OW 74
19908: PPUSH
19909: CALL_OW 115
// until IsDead ( un ) ;
19913: LD_VAR 0 2
19917: PPUSH
19918: CALL_OW 301
19922: IFFALSE 19870
// end ;
19924: PPOPN 2
19926: END
// every 0 0$1 trigger StreamModeActive and sStu do
19927: LD_EXP 38
19931: PUSH
19932: LD_EXP 77
19936: AND
19937: IFFALSE 19953
19939: GO 19941
19941: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19942: LD_STRING displayStucuk();
19944: PPUSH
19945: CALL_OW 559
// ResetFog ;
19949: CALL_OW 335
// end ;
19953: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19954: LD_EXP 38
19958: PUSH
19959: LD_EXP 70
19963: AND
19964: IFFALSE 20105
19966: GO 19968
19968: DISABLE
19969: LD_INT 0
19971: PPUSH
19972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19973: LD_ADDR_VAR 0 2
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_OWVAR 2
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 21
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PPUSH
20004: CALL_OW 69
20008: ST_TO_ADDR
// if not tmp then
20009: LD_VAR 0 2
20013: NOT
20014: IFFALSE 20018
// exit ;
20016: GO 20105
// un := tmp [ rand ( 1 , tmp ) ] ;
20018: LD_ADDR_VAR 0 1
20022: PUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_INT 1
20030: PPUSH
20031: LD_VAR 0 2
20035: PPUSH
20036: CALL_OW 12
20040: ARRAY
20041: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_INT 0
20049: PPUSH
20050: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20054: LD_VAR 0 1
20058: PPUSH
20059: LD_OWVAR 3
20063: PUSH
20064: LD_VAR 0 1
20068: DIFF
20069: PPUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 74
20079: PPUSH
20080: CALL_OW 115
// wait ( 0 0$20 ) ;
20084: LD_INT 700
20086: PPUSH
20087: CALL_OW 67
// SetSide ( un , your_side ) ;
20091: LD_VAR 0 1
20095: PPUSH
20096: LD_OWVAR 2
20100: PPUSH
20101: CALL_OW 235
// end ;
20105: PPOPN 2
20107: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20108: LD_EXP 38
20112: PUSH
20113: LD_EXP 71
20117: AND
20118: IFFALSE 20224
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20126: LD_ADDR_VAR 0 1
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_OWVAR 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 30
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 30
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PPUSH
20175: CALL_OW 69
20179: ST_TO_ADDR
// if not depot then
20180: LD_VAR 0 1
20184: NOT
20185: IFFALSE 20189
// exit ;
20187: GO 20224
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20189: LD_VAR 0 1
20193: PUSH
20194: LD_INT 1
20196: ARRAY
20197: PPUSH
20198: CALL_OW 250
20202: PPUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PPUSH
20212: CALL_OW 251
20216: PPUSH
20217: LD_INT 70
20219: PPUSH
20220: CALL_OW 495
// end ;
20224: PPOPN 1
20226: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20227: LD_EXP 38
20231: PUSH
20232: LD_EXP 72
20236: AND
20237: IFFALSE 20448
20239: GO 20241
20241: DISABLE
20242: LD_INT 0
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
20248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20249: LD_ADDR_VAR 0 5
20253: PUSH
20254: LD_INT 22
20256: PUSH
20257: LD_OWVAR 2
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 21
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PPUSH
20280: CALL_OW 69
20284: ST_TO_ADDR
// if not tmp then
20285: LD_VAR 0 5
20289: NOT
20290: IFFALSE 20294
// exit ;
20292: GO 20448
// for i in tmp do
20294: LD_ADDR_VAR 0 1
20298: PUSH
20299: LD_VAR 0 5
20303: PUSH
20304: FOR_IN
20305: IFFALSE 20446
// begin d := rand ( 0 , 5 ) ;
20307: LD_ADDR_VAR 0 4
20311: PUSH
20312: LD_INT 0
20314: PPUSH
20315: LD_INT 5
20317: PPUSH
20318: CALL_OW 12
20322: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20323: LD_ADDR_VAR 0 2
20327: PUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 250
20337: PPUSH
20338: LD_VAR 0 4
20342: PPUSH
20343: LD_INT 3
20345: PPUSH
20346: LD_INT 12
20348: PPUSH
20349: CALL_OW 12
20353: PPUSH
20354: CALL_OW 272
20358: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20359: LD_ADDR_VAR 0 3
20363: PUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 251
20373: PPUSH
20374: LD_VAR 0 4
20378: PPUSH
20379: LD_INT 3
20381: PPUSH
20382: LD_INT 12
20384: PPUSH
20385: CALL_OW 12
20389: PPUSH
20390: CALL_OW 273
20394: ST_TO_ADDR
// if ValidHex ( x , y ) then
20395: LD_VAR 0 2
20399: PPUSH
20400: LD_VAR 0 3
20404: PPUSH
20405: CALL_OW 488
20409: IFFALSE 20444
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20411: LD_VAR 0 1
20415: PPUSH
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_VAR 0 3
20425: PPUSH
20426: LD_INT 3
20428: PPUSH
20429: LD_INT 6
20431: PPUSH
20432: CALL_OW 12
20436: PPUSH
20437: LD_INT 1
20439: PPUSH
20440: CALL_OW 483
// end ;
20444: GO 20304
20446: POP
20447: POP
// end ;
20448: PPOPN 5
20450: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20451: LD_EXP 38
20455: PUSH
20456: LD_EXP 73
20460: AND
20461: IFFALSE 20555
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_INT 22
20477: PUSH
20478: LD_OWVAR 2
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 32
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 21
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: ST_TO_ADDR
// if not tmp then
20517: LD_VAR 0 2
20521: NOT
20522: IFFALSE 20526
// exit ;
20524: GO 20555
// for i in tmp do
20526: LD_ADDR_VAR 0 1
20530: PUSH
20531: LD_VAR 0 2
20535: PUSH
20536: FOR_IN
20537: IFFALSE 20553
// SetFuel ( i , 0 ) ;
20539: LD_VAR 0 1
20543: PPUSH
20544: LD_INT 0
20546: PPUSH
20547: CALL_OW 240
20551: GO 20536
20553: POP
20554: POP
// end ;
20555: PPOPN 2
20557: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20558: LD_EXP 38
20562: PUSH
20563: LD_EXP 74
20567: AND
20568: IFFALSE 20634
20570: GO 20572
20572: DISABLE
20573: LD_INT 0
20575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20576: LD_ADDR_VAR 0 1
20580: PUSH
20581: LD_INT 22
20583: PUSH
20584: LD_OWVAR 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 29
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: ST_TO_ADDR
// if not tmp then
20612: LD_VAR 0 1
20616: NOT
20617: IFFALSE 20621
// exit ;
20619: GO 20634
// DestroyUnit ( tmp [ 1 ] ) ;
20621: LD_VAR 0 1
20625: PUSH
20626: LD_INT 1
20628: ARRAY
20629: PPUSH
20630: CALL_OW 65
// end ;
20634: PPOPN 1
20636: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20637: LD_EXP 38
20641: PUSH
20642: LD_EXP 76
20646: AND
20647: IFFALSE 20776
20649: GO 20651
20651: DISABLE
20652: LD_INT 0
20654: PPUSH
// begin uc_side := 0 ;
20655: LD_ADDR_OWVAR 20
20659: PUSH
20660: LD_INT 0
20662: ST_TO_ADDR
// uc_nation := nation_arabian ;
20663: LD_ADDR_OWVAR 21
20667: PUSH
20668: LD_INT 2
20670: ST_TO_ADDR
// hc_gallery :=  ;
20671: LD_ADDR_OWVAR 33
20675: PUSH
20676: LD_STRING 
20678: ST_TO_ADDR
// hc_name :=  ;
20679: LD_ADDR_OWVAR 26
20683: PUSH
20684: LD_STRING 
20686: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20687: LD_INT 1
20689: PPUSH
20690: LD_INT 11
20692: PPUSH
20693: LD_INT 10
20695: PPUSH
20696: CALL_OW 380
// un := CreateHuman ;
20700: LD_ADDR_VAR 0 1
20704: PUSH
20705: CALL_OW 44
20709: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_INT 1
20717: PPUSH
20718: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20722: LD_INT 35
20724: PPUSH
20725: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20729: LD_VAR 0 1
20733: PPUSH
20734: LD_INT 22
20736: PUSH
20737: LD_OWVAR 2
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PPUSH
20746: CALL_OW 69
20750: PPUSH
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 74
20760: PPUSH
20761: CALL_OW 115
// until IsDead ( un ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: CALL_OW 301
20774: IFFALSE 20722
// end ;
20776: PPOPN 1
20778: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20779: LD_EXP 38
20783: PUSH
20784: LD_EXP 78
20788: AND
20789: IFFALSE 20801
20791: GO 20793
20793: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20794: LD_STRING earthquake(getX(game), 0, 32)
20796: PPUSH
20797: CALL_OW 559
20801: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20802: LD_EXP 38
20806: PUSH
20807: LD_EXP 79
20811: AND
20812: IFFALSE 20903
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
// begin enable ;
20820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20821: LD_ADDR_VAR 0 1
20825: PUSH
20826: LD_INT 22
20828: PUSH
20829: LD_OWVAR 2
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 21
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 33
20850: PUSH
20851: LD_INT 3
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: PPUSH
20863: CALL_OW 69
20867: ST_TO_ADDR
// if not tmp then
20868: LD_VAR 0 1
20872: NOT
20873: IFFALSE 20877
// exit ;
20875: GO 20903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20877: LD_VAR 0 1
20881: PUSH
20882: LD_INT 1
20884: PPUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 12
20894: ARRAY
20895: PPUSH
20896: LD_INT 1
20898: PPUSH
20899: CALL_OW 234
// end ;
20903: PPOPN 1
20905: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20906: LD_EXP 38
20910: PUSH
20911: LD_EXP 80
20915: AND
20916: IFFALSE 21057
20918: GO 20920
20920: DISABLE
20921: LD_INT 0
20923: PPUSH
20924: PPUSH
20925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: LD_INT 22
20933: PUSH
20934: LD_OWVAR 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 25
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL_OW 69
20961: ST_TO_ADDR
// if not tmp then
20962: LD_VAR 0 3
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21057
// un := tmp [ rand ( 1 , tmp ) ] ;
20971: LD_ADDR_VAR 0 2
20975: PUSH
20976: LD_VAR 0 3
20980: PUSH
20981: LD_INT 1
20983: PPUSH
20984: LD_VAR 0 3
20988: PPUSH
20989: CALL_OW 12
20993: ARRAY
20994: ST_TO_ADDR
// if Crawls ( un ) then
20995: LD_VAR 0 2
20999: PPUSH
21000: CALL_OW 318
21004: IFFALSE 21015
// ComWalk ( un ) ;
21006: LD_VAR 0 2
21010: PPUSH
21011: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21015: LD_VAR 0 2
21019: PPUSH
21020: LD_INT 9
21022: PPUSH
21023: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21027: LD_INT 28
21029: PPUSH
21030: LD_OWVAR 2
21034: PPUSH
21035: LD_INT 2
21037: PPUSH
21038: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21042: LD_INT 29
21044: PPUSH
21045: LD_OWVAR 2
21049: PPUSH
21050: LD_INT 2
21052: PPUSH
21053: CALL_OW 322
// end ;
21057: PPOPN 3
21059: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21060: LD_EXP 38
21064: PUSH
21065: LD_EXP 81
21069: AND
21070: IFFALSE 21181
21072: GO 21074
21074: DISABLE
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
21079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 25
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 3
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21181
// un := tmp [ rand ( 1 , tmp ) ] ;
21125: LD_ADDR_VAR 0 2
21129: PUSH
21130: LD_VAR 0 3
21134: PUSH
21135: LD_INT 1
21137: PPUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: CALL_OW 12
21147: ARRAY
21148: ST_TO_ADDR
// if Crawls ( un ) then
21149: LD_VAR 0 2
21153: PPUSH
21154: CALL_OW 318
21158: IFFALSE 21169
// ComWalk ( un ) ;
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_INT 8
21176: PPUSH
21177: CALL_OW 336
// end ;
21181: PPOPN 3
21183: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21184: LD_EXP 38
21188: PUSH
21189: LD_EXP 82
21193: AND
21194: IFFALSE 21338
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
21202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21203: LD_ADDR_VAR 0 2
21207: PUSH
21208: LD_INT 22
21210: PUSH
21211: LD_OWVAR 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 34
21235: PUSH
21236: LD_INT 12
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 34
21245: PUSH
21246: LD_INT 51
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 34
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: PPUSH
21274: CALL_OW 69
21278: ST_TO_ADDR
// if not tmp then
21279: LD_VAR 0 2
21283: NOT
21284: IFFALSE 21288
// exit ;
21286: GO 21338
// for i in tmp do
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: LD_VAR 0 2
21297: PUSH
21298: FOR_IN
21299: IFFALSE 21336
// if GetCargo ( i , mat_artifact ) = 0 then
21301: LD_VAR 0 1
21305: PPUSH
21306: LD_INT 4
21308: PPUSH
21309: CALL_OW 289
21313: PUSH
21314: LD_INT 0
21316: EQUAL
21317: IFFALSE 21334
// SetCargo ( i , mat_siberit , 100 ) ;
21319: LD_VAR 0 1
21323: PPUSH
21324: LD_INT 3
21326: PPUSH
21327: LD_INT 100
21329: PPUSH
21330: CALL_OW 290
21334: GO 21298
21336: POP
21337: POP
// end ;
21338: PPOPN 2
21340: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21341: LD_EXP 38
21345: PUSH
21346: LD_EXP 83
21350: AND
21351: IFFALSE 21534
21353: GO 21355
21355: DISABLE
21356: LD_INT 0
21358: PPUSH
21359: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21360: LD_ADDR_VAR 0 2
21364: PUSH
21365: LD_INT 22
21367: PUSH
21368: LD_OWVAR 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: ST_TO_ADDR
// if not tmp then
21382: LD_VAR 0 2
21386: NOT
21387: IFFALSE 21391
// exit ;
21389: GO 21534
// for i := 1 to 2 do
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: DOUBLE
21397: LD_INT 1
21399: DEC
21400: ST_TO_ADDR
21401: LD_INT 2
21403: PUSH
21404: FOR_TO
21405: IFFALSE 21532
// begin uc_side := your_side ;
21407: LD_ADDR_OWVAR 20
21411: PUSH
21412: LD_OWVAR 2
21416: ST_TO_ADDR
// uc_nation := nation_american ;
21417: LD_ADDR_OWVAR 21
21421: PUSH
21422: LD_INT 1
21424: ST_TO_ADDR
// vc_chassis := us_morphling ;
21425: LD_ADDR_OWVAR 37
21429: PUSH
21430: LD_INT 5
21432: ST_TO_ADDR
// vc_engine := engine_siberite ;
21433: LD_ADDR_OWVAR 39
21437: PUSH
21438: LD_INT 3
21440: ST_TO_ADDR
// vc_control := control_computer ;
21441: LD_ADDR_OWVAR 38
21445: PUSH
21446: LD_INT 3
21448: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21449: LD_ADDR_OWVAR 40
21453: PUSH
21454: LD_INT 10
21456: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21457: LD_VAR 0 2
21461: PUSH
21462: LD_INT 1
21464: ARRAY
21465: PPUSH
21466: CALL_OW 310
21470: NOT
21471: IFFALSE 21518
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21473: CALL_OW 45
21477: PPUSH
21478: LD_VAR 0 2
21482: PUSH
21483: LD_INT 1
21485: ARRAY
21486: PPUSH
21487: CALL_OW 250
21491: PPUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: PPUSH
21501: CALL_OW 251
21505: PPUSH
21506: LD_INT 12
21508: PPUSH
21509: LD_INT 1
21511: PPUSH
21512: CALL_OW 50
21516: GO 21530
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21518: CALL_OW 45
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: CALL_OW 51
// end ;
21530: GO 21404
21532: POP
21533: POP
// end ;
21534: PPOPN 2
21536: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21537: LD_EXP 38
21541: PUSH
21542: LD_EXP 84
21546: AND
21547: IFFALSE 21769
21549: GO 21551
21551: DISABLE
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21560: LD_ADDR_VAR 0 6
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: PPUSH
21609: CALL_OW 69
21613: ST_TO_ADDR
// if not tmp then
21614: LD_VAR 0 6
21618: NOT
21619: IFFALSE 21623
// exit ;
21621: GO 21769
// s1 := rand ( 1 , 4 ) ;
21623: LD_ADDR_VAR 0 2
21627: PUSH
21628: LD_INT 1
21630: PPUSH
21631: LD_INT 4
21633: PPUSH
21634: CALL_OW 12
21638: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21639: LD_ADDR_VAR 0 4
21643: PUSH
21644: LD_VAR 0 6
21648: PUSH
21649: LD_INT 1
21651: ARRAY
21652: PPUSH
21653: LD_VAR 0 2
21657: PPUSH
21658: CALL_OW 259
21662: ST_TO_ADDR
// if s1 = 1 then
21663: LD_VAR 0 2
21667: PUSH
21668: LD_INT 1
21670: EQUAL
21671: IFFALSE 21691
// s2 := rand ( 2 , 4 ) else
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_INT 2
21680: PPUSH
21681: LD_INT 4
21683: PPUSH
21684: CALL_OW 12
21688: ST_TO_ADDR
21689: GO 21699
// s2 := 1 ;
21691: LD_ADDR_VAR 0 3
21695: PUSH
21696: LD_INT 1
21698: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21699: LD_ADDR_VAR 0 5
21703: PUSH
21704: LD_VAR 0 6
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PPUSH
21713: LD_VAR 0 3
21717: PPUSH
21718: CALL_OW 259
21722: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21723: LD_VAR 0 6
21727: PUSH
21728: LD_INT 1
21730: ARRAY
21731: PPUSH
21732: LD_VAR 0 2
21736: PPUSH
21737: LD_VAR 0 5
21741: PPUSH
21742: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21746: LD_VAR 0 6
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: LD_VAR 0 3
21759: PPUSH
21760: LD_VAR 0 4
21764: PPUSH
21765: CALL_OW 237
// end ;
21769: PPOPN 6
21771: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21772: LD_EXP 38
21776: PUSH
21777: LD_EXP 85
21781: AND
21782: IFFALSE 21861
21784: GO 21786
21786: DISABLE
21787: LD_INT 0
21789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21790: LD_ADDR_VAR 0 1
21794: PUSH
21795: LD_INT 22
21797: PUSH
21798: LD_OWVAR 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 30
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PPUSH
21821: CALL_OW 69
21825: ST_TO_ADDR
// if not tmp then
21826: LD_VAR 0 1
21830: NOT
21831: IFFALSE 21835
// exit ;
21833: GO 21861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21835: LD_VAR 0 1
21839: PUSH
21840: LD_INT 1
21842: PPUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 12
21852: ARRAY
21853: PPUSH
21854: LD_INT 1
21856: PPUSH
21857: CALL_OW 234
// end ;
21861: PPOPN 1
21863: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21864: LD_EXP 38
21868: PUSH
21869: LD_EXP 86
21873: AND
21874: IFFALSE 21986
21876: GO 21878
21878: DISABLE
21879: LD_INT 0
21881: PPUSH
21882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_INT 22
21890: PUSH
21891: LD_OWVAR 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: LD_INT 30
21905: PUSH
21906: LD_INT 27
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 30
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 30
21925: PUSH
21926: LD_INT 28
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PPUSH
21943: CALL_OW 69
21947: ST_TO_ADDR
// if not tmp then
21948: LD_VAR 0 2
21952: NOT
21953: IFFALSE 21957
// exit ;
21955: GO 21986
// for i in tmp do
21957: LD_ADDR_VAR 0 1
21961: PUSH
21962: LD_VAR 0 2
21966: PUSH
21967: FOR_IN
21968: IFFALSE 21984
// SetLives ( i , 1 ) ;
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_INT 1
21977: PPUSH
21978: CALL_OW 234
21982: GO 21967
21984: POP
21985: POP
// end ;
21986: PPOPN 2
21988: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21989: LD_EXP 38
21993: PUSH
21994: LD_EXP 87
21998: AND
21999: IFFALSE 22286
22001: GO 22003
22003: DISABLE
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
22008: PPUSH
// begin i := rand ( 1 , 7 ) ;
22009: LD_ADDR_VAR 0 1
22013: PUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 7
22019: PPUSH
22020: CALL_OW 12
22024: ST_TO_ADDR
// case i of 1 :
22025: LD_VAR 0 1
22029: PUSH
22030: LD_INT 1
22032: DOUBLE
22033: EQUAL
22034: IFTRUE 22038
22036: GO 22048
22038: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22039: LD_STRING earthquake(getX(game), 0, 32)
22041: PPUSH
22042: CALL_OW 559
22046: GO 22286
22048: LD_INT 2
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22070
22056: POP
// begin ToLua ( displayStucuk(); ) ;
22057: LD_STRING displayStucuk();
22059: PPUSH
22060: CALL_OW 559
// ResetFog ;
22064: CALL_OW 335
// end ; 3 :
22068: GO 22286
22070: LD_INT 3
22072: DOUBLE
22073: EQUAL
22074: IFTRUE 22078
22076: GO 22182
22078: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22079: LD_ADDR_VAR 0 2
22083: PUSH
22084: LD_INT 22
22086: PUSH
22087: LD_OWVAR 2
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 25
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PPUSH
22110: CALL_OW 69
22114: ST_TO_ADDR
// if not tmp then
22115: LD_VAR 0 2
22119: NOT
22120: IFFALSE 22124
// exit ;
22122: GO 22286
// un := tmp [ rand ( 1 , tmp ) ] ;
22124: LD_ADDR_VAR 0 3
22128: PUSH
22129: LD_VAR 0 2
22133: PUSH
22134: LD_INT 1
22136: PPUSH
22137: LD_VAR 0 2
22141: PPUSH
22142: CALL_OW 12
22146: ARRAY
22147: ST_TO_ADDR
// if Crawls ( un ) then
22148: LD_VAR 0 3
22152: PPUSH
22153: CALL_OW 318
22157: IFFALSE 22168
// ComWalk ( un ) ;
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_INT 8
22175: PPUSH
22176: CALL_OW 336
// end ; 4 :
22180: GO 22286
22182: LD_INT 4
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22264
22190: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22191: LD_ADDR_VAR 0 2
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 29
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PPUSH
22222: CALL_OW 69
22226: ST_TO_ADDR
// if not tmp then
22227: LD_VAR 0 2
22231: NOT
22232: IFFALSE 22236
// exit ;
22234: GO 22286
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22236: LD_VAR 0 2
22240: PUSH
22241: LD_INT 1
22243: ARRAY
22244: PPUSH
22245: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22249: LD_VAR 0 2
22253: PUSH
22254: LD_INT 1
22256: ARRAY
22257: PPUSH
22258: CALL_OW 65
// end ; 5 .. 7 :
22262: GO 22286
22264: LD_INT 5
22266: DOUBLE
22267: GREATEREQUAL
22268: IFFALSE 22276
22270: LD_INT 7
22272: DOUBLE
22273: LESSEQUAL
22274: IFTRUE 22278
22276: GO 22285
22278: POP
// StreamSibBomb ; end ;
22279: CALL 18523 0 0
22283: GO 22286
22285: POP
// end ;
22286: PPOPN 3
22288: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22289: LD_EXP 38
22293: PUSH
22294: LD_EXP 88
22298: AND
22299: IFFALSE 22455
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_INT 81
22316: PUSH
22317: LD_OWVAR 2
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 21
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 21
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: CALL_OW 69
22362: ST_TO_ADDR
// if not tmp then
22363: LD_VAR 0 2
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 22455
// p := 0 ;
22372: LD_ADDR_VAR 0 3
22376: PUSH
22377: LD_INT 0
22379: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22380: LD_INT 35
22382: PPUSH
22383: CALL_OW 67
// p := p + 1 ;
22387: LD_ADDR_VAR 0 3
22391: PUSH
22392: LD_VAR 0 3
22396: PUSH
22397: LD_INT 1
22399: PLUS
22400: ST_TO_ADDR
// for i in tmp do
22401: LD_ADDR_VAR 0 1
22405: PUSH
22406: LD_VAR 0 2
22410: PUSH
22411: FOR_IN
22412: IFFALSE 22443
// if GetLives ( i ) < 1000 then
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 256
22423: PUSH
22424: LD_INT 1000
22426: LESS
22427: IFFALSE 22441
// SetLives ( i , 1000 ) ;
22429: LD_VAR 0 1
22433: PPUSH
22434: LD_INT 1000
22436: PPUSH
22437: CALL_OW 234
22441: GO 22411
22443: POP
22444: POP
// until p > 20 ;
22445: LD_VAR 0 3
22449: PUSH
22450: LD_INT 20
22452: GREATER
22453: IFFALSE 22380
// end ;
22455: PPOPN 3
22457: END
// every 0 0$1 trigger StreamModeActive and sTime do
22458: LD_EXP 38
22462: PUSH
22463: LD_EXP 89
22467: AND
22468: IFFALSE 22503
22470: GO 22472
22472: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22473: LD_INT 28
22475: PPUSH
22476: LD_OWVAR 2
22480: PPUSH
22481: LD_INT 2
22483: PPUSH
22484: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22488: LD_INT 30
22490: PPUSH
22491: LD_OWVAR 2
22495: PPUSH
22496: LD_INT 2
22498: PPUSH
22499: CALL_OW 322
// end ;
22503: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22504: LD_EXP 38
22508: PUSH
22509: LD_EXP 90
22513: AND
22514: IFFALSE 22635
22516: GO 22518
22518: DISABLE
22519: LD_INT 0
22521: PPUSH
22522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_OWVAR 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 21
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: LD_INT 23
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 69
22576: ST_TO_ADDR
// if not tmp then
22577: LD_VAR 0 2
22581: NOT
22582: IFFALSE 22586
// exit ;
22584: GO 22635
// for i in tmp do
22586: LD_ADDR_VAR 0 1
22590: PUSH
22591: LD_VAR 0 2
22595: PUSH
22596: FOR_IN
22597: IFFALSE 22633
// begin if Crawls ( i ) then
22599: LD_VAR 0 1
22603: PPUSH
22604: CALL_OW 318
22608: IFFALSE 22619
// ComWalk ( i ) ;
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 138
// SetClass ( i , 2 ) ;
22619: LD_VAR 0 1
22623: PPUSH
22624: LD_INT 2
22626: PPUSH
22627: CALL_OW 336
// end ;
22631: GO 22596
22633: POP
22634: POP
// end ;
22635: PPOPN 2
22637: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22638: LD_EXP 38
22642: PUSH
22643: LD_EXP 91
22647: AND
22648: IFFALSE 22936
22650: GO 22652
22652: DISABLE
22653: LD_INT 0
22655: PPUSH
22656: PPUSH
22657: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22658: LD_OWVAR 2
22662: PPUSH
22663: LD_INT 9
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: LD_INT 1
22671: PPUSH
22672: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22676: LD_INT 9
22678: PPUSH
22679: LD_OWVAR 2
22683: PPUSH
22684: CALL_OW 343
// uc_side := 9 ;
22688: LD_ADDR_OWVAR 20
22692: PUSH
22693: LD_INT 9
22695: ST_TO_ADDR
// uc_nation := 2 ;
22696: LD_ADDR_OWVAR 21
22700: PUSH
22701: LD_INT 2
22703: ST_TO_ADDR
// hc_name := Dark Warrior ;
22704: LD_ADDR_OWVAR 26
22708: PUSH
22709: LD_STRING Dark Warrior
22711: ST_TO_ADDR
// hc_gallery :=  ;
22712: LD_ADDR_OWVAR 33
22716: PUSH
22717: LD_STRING 
22719: ST_TO_ADDR
// hc_noskilllimit := true ;
22720: LD_ADDR_OWVAR 76
22724: PUSH
22725: LD_INT 1
22727: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22728: LD_ADDR_OWVAR 31
22732: PUSH
22733: LD_INT 30
22735: PUSH
22736: LD_INT 30
22738: PUSH
22739: LD_INT 30
22741: PUSH
22742: LD_INT 30
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: ST_TO_ADDR
// un := CreateHuman ;
22751: LD_ADDR_VAR 0 3
22755: PUSH
22756: CALL_OW 44
22760: ST_TO_ADDR
// hc_noskilllimit := false ;
22761: LD_ADDR_OWVAR 76
22765: PUSH
22766: LD_INT 0
22768: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22769: LD_VAR 0 3
22773: PPUSH
22774: LD_INT 1
22776: PPUSH
22777: CALL_OW 51
// ToLua ( playRanger() ) ;
22781: LD_STRING playRanger()
22783: PPUSH
22784: CALL_OW 559
// p := 0 ;
22788: LD_ADDR_VAR 0 2
22792: PUSH
22793: LD_INT 0
22795: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22796: LD_INT 35
22798: PPUSH
22799: CALL_OW 67
// p := p + 1 ;
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_VAR 0 2
22812: PUSH
22813: LD_INT 1
22815: PLUS
22816: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22817: LD_VAR 0 3
22821: PPUSH
22822: CALL_OW 256
22826: PUSH
22827: LD_INT 1000
22829: LESS
22830: IFFALSE 22844
// SetLives ( un , 1000 ) ;
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_INT 1000
22839: PPUSH
22840: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22844: LD_VAR 0 3
22848: PPUSH
22849: LD_INT 81
22851: PUSH
22852: LD_OWVAR 2
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 91
22863: PUSH
22864: LD_VAR 0 3
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PPUSH
22881: CALL_OW 69
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: CALL_OW 74
22895: PPUSH
22896: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22900: LD_VAR 0 2
22904: PUSH
22905: LD_INT 80
22907: GREATER
22908: PUSH
22909: LD_VAR 0 3
22913: PPUSH
22914: CALL_OW 301
22918: OR
22919: IFFALSE 22796
// if un then
22921: LD_VAR 0 3
22925: IFFALSE 22936
// RemoveUnit ( un ) ;
22927: LD_VAR 0 3
22931: PPUSH
22932: CALL_OW 64
// end ;
22936: PPOPN 3
22938: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22939: LD_EXP 92
22943: IFFALSE 23059
22945: GO 22947
22947: DISABLE
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_INT 81
22960: PUSH
22961: LD_OWVAR 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 21
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 69
22988: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22989: LD_STRING playComputer()
22991: PPUSH
22992: CALL_OW 559
// if not tmp then
22996: LD_VAR 0 2
23000: NOT
23001: IFFALSE 23005
// exit ;
23003: GO 23059
// for i in tmp do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: LD_VAR 0 2
23014: PUSH
23015: FOR_IN
23016: IFFALSE 23057
// for j := 1 to 4 do
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: DOUBLE
23024: LD_INT 1
23026: DEC
23027: ST_TO_ADDR
23028: LD_INT 4
23030: PUSH
23031: FOR_TO
23032: IFFALSE 23053
// SetSkill ( i , j , 10 ) ;
23034: LD_VAR 0 1
23038: PPUSH
23039: LD_VAR 0 3
23043: PPUSH
23044: LD_INT 10
23046: PPUSH
23047: CALL_OW 237
23051: GO 23031
23053: POP
23054: POP
23055: GO 23015
23057: POP
23058: POP
// end ;
23059: PPOPN 3
23061: END
// every 0 0$1 trigger s30 do var i , tmp ;
23062: LD_EXP 93
23066: IFFALSE 23135
23068: GO 23070
23070: DISABLE
23071: LD_INT 0
23073: PPUSH
23074: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_INT 22
23082: PUSH
23083: LD_OWVAR 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PPUSH
23092: CALL_OW 69
23096: ST_TO_ADDR
// if not tmp then
23097: LD_VAR 0 2
23101: NOT
23102: IFFALSE 23106
// exit ;
23104: GO 23135
// for i in tmp do
23106: LD_ADDR_VAR 0 1
23110: PUSH
23111: LD_VAR 0 2
23115: PUSH
23116: FOR_IN
23117: IFFALSE 23133
// SetLives ( i , 300 ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_INT 300
23126: PPUSH
23127: CALL_OW 234
23131: GO 23116
23133: POP
23134: POP
// end ;
23135: PPOPN 2
23137: END
// every 0 0$1 trigger s60 do var i , tmp ;
23138: LD_EXP 94
23142: IFFALSE 23211
23144: GO 23146
23146: DISABLE
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 22
23158: PUSH
23159: LD_OWVAR 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: ST_TO_ADDR
// if not tmp then
23173: LD_VAR 0 2
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23211
// for i in tmp do
23182: LD_ADDR_VAR 0 1
23186: PUSH
23187: LD_VAR 0 2
23191: PUSH
23192: FOR_IN
23193: IFFALSE 23209
// SetLives ( i , 600 ) ;
23195: LD_VAR 0 1
23199: PPUSH
23200: LD_INT 600
23202: PPUSH
23203: CALL_OW 234
23207: GO 23192
23209: POP
23210: POP
// end ;
23211: PPOPN 2
23213: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23214: LD_INT 0
23216: PPUSH
// case cmd of 301 :
23217: LD_VAR 0 1
23221: PUSH
23222: LD_INT 301
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23262
23230: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23231: LD_VAR 0 6
23235: PPUSH
23236: LD_VAR 0 7
23240: PPUSH
23241: LD_VAR 0 8
23245: PPUSH
23246: LD_VAR 0 4
23250: PPUSH
23251: LD_VAR 0 5
23255: PPUSH
23256: CALL 24463 0 5
23260: GO 23383
23262: LD_INT 302
23264: DOUBLE
23265: EQUAL
23266: IFTRUE 23270
23268: GO 23307
23270: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23271: LD_VAR 0 6
23275: PPUSH
23276: LD_VAR 0 7
23280: PPUSH
23281: LD_VAR 0 8
23285: PPUSH
23286: LD_VAR 0 9
23290: PPUSH
23291: LD_VAR 0 4
23295: PPUSH
23296: LD_VAR 0 5
23300: PPUSH
23301: CALL 24554 0 6
23305: GO 23383
23307: LD_INT 303
23309: DOUBLE
23310: EQUAL
23311: IFTRUE 23315
23313: GO 23352
23315: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23316: LD_VAR 0 6
23320: PPUSH
23321: LD_VAR 0 7
23325: PPUSH
23326: LD_VAR 0 8
23330: PPUSH
23331: LD_VAR 0 9
23335: PPUSH
23336: LD_VAR 0 4
23340: PPUSH
23341: LD_VAR 0 5
23345: PPUSH
23346: CALL 23388 0 6
23350: GO 23383
23352: LD_INT 304
23354: DOUBLE
23355: EQUAL
23356: IFTRUE 23360
23358: GO 23382
23360: POP
// hHackTeleport ( unit , x , y ) ; end ;
23361: LD_VAR 0 2
23365: PPUSH
23366: LD_VAR 0 4
23370: PPUSH
23371: LD_VAR 0 5
23375: PPUSH
23376: CALL 25147 0 3
23380: GO 23383
23382: POP
// end ;
23383: LD_VAR 0 12
23387: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23388: LD_INT 0
23390: PPUSH
23391: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23392: LD_VAR 0 1
23396: PUSH
23397: LD_INT 1
23399: LESS
23400: PUSH
23401: LD_VAR 0 1
23405: PUSH
23406: LD_INT 3
23408: GREATER
23409: OR
23410: PUSH
23411: LD_VAR 0 5
23415: PPUSH
23416: LD_VAR 0 6
23420: PPUSH
23421: CALL_OW 428
23425: OR
23426: IFFALSE 23430
// exit ;
23428: GO 24150
// uc_side := your_side ;
23430: LD_ADDR_OWVAR 20
23434: PUSH
23435: LD_OWVAR 2
23439: ST_TO_ADDR
// uc_nation := nation ;
23440: LD_ADDR_OWVAR 21
23444: PUSH
23445: LD_VAR 0 1
23449: ST_TO_ADDR
// bc_level = 1 ;
23450: LD_ADDR_OWVAR 43
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// case btype of 1 :
23458: LD_VAR 0 2
23462: PUSH
23463: LD_INT 1
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23482
23471: POP
// bc_type := b_depot ; 2 :
23472: LD_ADDR_OWVAR 42
23476: PUSH
23477: LD_INT 0
23479: ST_TO_ADDR
23480: GO 24094
23482: LD_INT 2
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23501
23490: POP
// bc_type := b_warehouse ; 3 :
23491: LD_ADDR_OWVAR 42
23495: PUSH
23496: LD_INT 1
23498: ST_TO_ADDR
23499: GO 24094
23501: LD_INT 3
23503: DOUBLE
23504: EQUAL
23505: IFTRUE 23509
23507: GO 23520
23509: POP
// bc_type := b_lab ; 4 .. 9 :
23510: LD_ADDR_OWVAR 42
23514: PUSH
23515: LD_INT 6
23517: ST_TO_ADDR
23518: GO 24094
23520: LD_INT 4
23522: DOUBLE
23523: GREATEREQUAL
23524: IFFALSE 23532
23526: LD_INT 9
23528: DOUBLE
23529: LESSEQUAL
23530: IFTRUE 23534
23532: GO 23586
23534: POP
// begin bc_type := b_lab_half ;
23535: LD_ADDR_OWVAR 42
23539: PUSH
23540: LD_INT 7
23542: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23543: LD_ADDR_OWVAR 44
23547: PUSH
23548: LD_INT 10
23550: PUSH
23551: LD_INT 11
23553: PUSH
23554: LD_INT 12
23556: PUSH
23557: LD_INT 15
23559: PUSH
23560: LD_INT 14
23562: PUSH
23563: LD_INT 13
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: LD_VAR 0 2
23578: PUSH
23579: LD_INT 3
23581: MINUS
23582: ARRAY
23583: ST_TO_ADDR
// end ; 10 .. 13 :
23584: GO 24094
23586: LD_INT 10
23588: DOUBLE
23589: GREATEREQUAL
23590: IFFALSE 23598
23592: LD_INT 13
23594: DOUBLE
23595: LESSEQUAL
23596: IFTRUE 23600
23598: GO 23677
23600: POP
// begin bc_type := b_lab_full ;
23601: LD_ADDR_OWVAR 42
23605: PUSH
23606: LD_INT 8
23608: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23609: LD_ADDR_OWVAR 44
23613: PUSH
23614: LD_INT 10
23616: PUSH
23617: LD_INT 12
23619: PUSH
23620: LD_INT 14
23622: PUSH
23623: LD_INT 13
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 9
23639: MINUS
23640: ARRAY
23641: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23642: LD_ADDR_OWVAR 45
23646: PUSH
23647: LD_INT 11
23649: PUSH
23650: LD_INT 15
23652: PUSH
23653: LD_INT 12
23655: PUSH
23656: LD_INT 15
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_INT 9
23672: MINUS
23673: ARRAY
23674: ST_TO_ADDR
// end ; 14 :
23675: GO 24094
23677: LD_INT 14
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23696
23685: POP
// bc_type := b_workshop ; 15 :
23686: LD_ADDR_OWVAR 42
23690: PUSH
23691: LD_INT 2
23693: ST_TO_ADDR
23694: GO 24094
23696: LD_INT 15
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23715
23704: POP
// bc_type := b_factory ; 16 :
23705: LD_ADDR_OWVAR 42
23709: PUSH
23710: LD_INT 3
23712: ST_TO_ADDR
23713: GO 24094
23715: LD_INT 16
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 23734
23723: POP
// bc_type := b_ext_gun ; 17 :
23724: LD_ADDR_OWVAR 42
23728: PUSH
23729: LD_INT 17
23731: ST_TO_ADDR
23732: GO 24094
23734: LD_INT 17
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 23770
23742: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23743: LD_ADDR_OWVAR 42
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 23
23753: PUSH
23754: LD_INT 19
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: PUSH
23762: LD_VAR 0 1
23766: ARRAY
23767: ST_TO_ADDR
23768: GO 24094
23770: LD_INT 18
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23789
23778: POP
// bc_type := b_ext_radar ; 19 :
23779: LD_ADDR_OWVAR 42
23783: PUSH
23784: LD_INT 20
23786: ST_TO_ADDR
23787: GO 24094
23789: LD_INT 19
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 23808
23797: POP
// bc_type := b_ext_radio ; 20 :
23798: LD_ADDR_OWVAR 42
23802: PUSH
23803: LD_INT 22
23805: ST_TO_ADDR
23806: GO 24094
23808: LD_INT 20
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23816
23814: GO 23827
23816: POP
// bc_type := b_ext_siberium ; 21 :
23817: LD_ADDR_OWVAR 42
23821: PUSH
23822: LD_INT 21
23824: ST_TO_ADDR
23825: GO 24094
23827: LD_INT 21
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23846
23835: POP
// bc_type := b_ext_computer ; 22 :
23836: LD_ADDR_OWVAR 42
23840: PUSH
23841: LD_INT 24
23843: ST_TO_ADDR
23844: GO 24094
23846: LD_INT 22
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23865
23854: POP
// bc_type := b_ext_track ; 23 :
23855: LD_ADDR_OWVAR 42
23859: PUSH
23860: LD_INT 16
23862: ST_TO_ADDR
23863: GO 24094
23865: LD_INT 23
23867: DOUBLE
23868: EQUAL
23869: IFTRUE 23873
23871: GO 23884
23873: POP
// bc_type := b_ext_laser ; 24 :
23874: LD_ADDR_OWVAR 42
23878: PUSH
23879: LD_INT 25
23881: ST_TO_ADDR
23882: GO 24094
23884: LD_INT 24
23886: DOUBLE
23887: EQUAL
23888: IFTRUE 23892
23890: GO 23903
23892: POP
// bc_type := b_control_tower ; 25 :
23893: LD_ADDR_OWVAR 42
23897: PUSH
23898: LD_INT 36
23900: ST_TO_ADDR
23901: GO 24094
23903: LD_INT 25
23905: DOUBLE
23906: EQUAL
23907: IFTRUE 23911
23909: GO 23922
23911: POP
// bc_type := b_breastwork ; 26 :
23912: LD_ADDR_OWVAR 42
23916: PUSH
23917: LD_INT 31
23919: ST_TO_ADDR
23920: GO 24094
23922: LD_INT 26
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 23941
23930: POP
// bc_type := b_bunker ; 27 :
23931: LD_ADDR_OWVAR 42
23935: PUSH
23936: LD_INT 32
23938: ST_TO_ADDR
23939: GO 24094
23941: LD_INT 27
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23960
23949: POP
// bc_type := b_turret ; 28 :
23950: LD_ADDR_OWVAR 42
23954: PUSH
23955: LD_INT 33
23957: ST_TO_ADDR
23958: GO 24094
23960: LD_INT 28
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 23979
23968: POP
// bc_type := b_armoury ; 29 :
23969: LD_ADDR_OWVAR 42
23973: PUSH
23974: LD_INT 4
23976: ST_TO_ADDR
23977: GO 24094
23979: LD_INT 29
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// bc_type := b_barracks ; 30 :
23988: LD_ADDR_OWVAR 42
23992: PUSH
23993: LD_INT 5
23995: ST_TO_ADDR
23996: GO 24094
23998: LD_INT 30
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24017
24006: POP
// bc_type := b_solar_power ; 31 :
24007: LD_ADDR_OWVAR 42
24011: PUSH
24012: LD_INT 27
24014: ST_TO_ADDR
24015: GO 24094
24017: LD_INT 31
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// bc_type := b_oil_power ; 32 :
24026: LD_ADDR_OWVAR 42
24030: PUSH
24031: LD_INT 26
24033: ST_TO_ADDR
24034: GO 24094
24036: LD_INT 32
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24055
24044: POP
// bc_type := b_siberite_power ; 33 :
24045: LD_ADDR_OWVAR 42
24049: PUSH
24050: LD_INT 28
24052: ST_TO_ADDR
24053: GO 24094
24055: LD_INT 33
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// bc_type := b_oil_mine ; 34 :
24064: LD_ADDR_OWVAR 42
24068: PUSH
24069: LD_INT 29
24071: ST_TO_ADDR
24072: GO 24094
24074: LD_INT 34
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// bc_type := b_siberite_mine ; end ;
24083: LD_ADDR_OWVAR 42
24087: PUSH
24088: LD_INT 30
24090: ST_TO_ADDR
24091: GO 24094
24093: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24094: LD_ADDR_VAR 0 8
24098: PUSH
24099: LD_VAR 0 5
24103: PPUSH
24104: LD_VAR 0 6
24108: PPUSH
24109: LD_VAR 0 3
24113: PPUSH
24114: CALL_OW 47
24118: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24119: LD_OWVAR 42
24123: PUSH
24124: LD_INT 32
24126: PUSH
24127: LD_INT 33
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: IN
24134: IFFALSE 24150
// PlaceWeaponTurret ( b , weapon ) ;
24136: LD_VAR 0 8
24140: PPUSH
24141: LD_VAR 0 4
24145: PPUSH
24146: CALL_OW 431
// end ;
24150: LD_VAR 0 7
24154: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24155: LD_INT 0
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24161: LD_ADDR_VAR 0 4
24165: PUSH
24166: LD_INT 22
24168: PUSH
24169: LD_OWVAR 2
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 30
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 30
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PPUSH
24210: CALL_OW 69
24214: ST_TO_ADDR
// if not tmp then
24215: LD_VAR 0 4
24219: NOT
24220: IFFALSE 24224
// exit ;
24222: GO 24283
// for i in tmp do
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_VAR 0 4
24233: PUSH
24234: FOR_IN
24235: IFFALSE 24281
// for j = 1 to 3 do
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: DOUBLE
24243: LD_INT 1
24245: DEC
24246: ST_TO_ADDR
24247: LD_INT 3
24249: PUSH
24250: FOR_TO
24251: IFFALSE 24277
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24253: LD_VAR 0 2
24257: PPUSH
24258: CALL_OW 274
24262: PPUSH
24263: LD_VAR 0 3
24267: PPUSH
24268: LD_INT 99999
24270: PPUSH
24271: CALL_OW 277
24275: GO 24250
24277: POP
24278: POP
24279: GO 24234
24281: POP
24282: POP
// end ;
24283: LD_VAR 0 1
24287: RET
// export function hHackSetLevel10 ; var i , j ; begin
24288: LD_INT 0
24290: PPUSH
24291: PPUSH
24292: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24293: LD_ADDR_VAR 0 2
24297: PUSH
24298: LD_INT 21
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PPUSH
24308: CALL_OW 69
24312: PUSH
24313: FOR_IN
24314: IFFALSE 24366
// if IsSelected ( i ) then
24316: LD_VAR 0 2
24320: PPUSH
24321: CALL_OW 306
24325: IFFALSE 24364
// begin for j := 1 to 4 do
24327: LD_ADDR_VAR 0 3
24331: PUSH
24332: DOUBLE
24333: LD_INT 1
24335: DEC
24336: ST_TO_ADDR
24337: LD_INT 4
24339: PUSH
24340: FOR_TO
24341: IFFALSE 24362
// SetSkill ( i , j , 10 ) ;
24343: LD_VAR 0 2
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: LD_INT 10
24355: PPUSH
24356: CALL_OW 237
24360: GO 24340
24362: POP
24363: POP
// end ;
24364: GO 24313
24366: POP
24367: POP
// end ;
24368: LD_VAR 0 1
24372: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24373: LD_INT 0
24375: PPUSH
24376: PPUSH
24377: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 22
24385: PUSH
24386: LD_OWVAR 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 21
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: PUSH
24414: FOR_IN
24415: IFFALSE 24456
// begin for j := 1 to 4 do
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: DOUBLE
24423: LD_INT 1
24425: DEC
24426: ST_TO_ADDR
24427: LD_INT 4
24429: PUSH
24430: FOR_TO
24431: IFFALSE 24452
// SetSkill ( i , j , 10 ) ;
24433: LD_VAR 0 2
24437: PPUSH
24438: LD_VAR 0 3
24442: PPUSH
24443: LD_INT 10
24445: PPUSH
24446: CALL_OW 237
24450: GO 24430
24452: POP
24453: POP
// end ;
24454: GO 24414
24456: POP
24457: POP
// end ;
24458: LD_VAR 0 1
24462: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24463: LD_INT 0
24465: PPUSH
// uc_side := your_side ;
24466: LD_ADDR_OWVAR 20
24470: PUSH
24471: LD_OWVAR 2
24475: ST_TO_ADDR
// uc_nation := nation ;
24476: LD_ADDR_OWVAR 21
24480: PUSH
24481: LD_VAR 0 1
24485: ST_TO_ADDR
// InitHc ;
24486: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24490: LD_INT 0
24492: PPUSH
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_VAR 0 3
24502: PPUSH
24503: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24507: LD_VAR 0 4
24511: PPUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: CALL_OW 428
24521: PUSH
24522: LD_INT 0
24524: EQUAL
24525: IFFALSE 24549
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24527: CALL_OW 44
24531: PPUSH
24532: LD_VAR 0 4
24536: PPUSH
24537: LD_VAR 0 5
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: CALL_OW 48
// end ;
24549: LD_VAR 0 6
24553: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
// uc_side := your_side ;
24558: LD_ADDR_OWVAR 20
24562: PUSH
24563: LD_OWVAR 2
24567: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: LD_INT 3
24581: PUSH
24582: LD_INT 4
24584: PUSH
24585: LD_INT 5
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: IN
24595: IFFALSE 24607
// uc_nation := nation_american else
24597: LD_ADDR_OWVAR 21
24601: PUSH
24602: LD_INT 1
24604: ST_TO_ADDR
24605: GO 24650
// if chassis in [ 11 , 12 , 13 , 14 ] then
24607: LD_VAR 0 1
24611: PUSH
24612: LD_INT 11
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 13
24620: PUSH
24621: LD_INT 14
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: IN
24630: IFFALSE 24642
// uc_nation := nation_arabian else
24632: LD_ADDR_OWVAR 21
24636: PUSH
24637: LD_INT 2
24639: ST_TO_ADDR
24640: GO 24650
// uc_nation := nation_russian ;
24642: LD_ADDR_OWVAR 21
24646: PUSH
24647: LD_INT 3
24649: ST_TO_ADDR
// vc_chassis := chassis ;
24650: LD_ADDR_OWVAR 37
24654: PUSH
24655: LD_VAR 0 1
24659: ST_TO_ADDR
// vc_engine := engine ;
24660: LD_ADDR_OWVAR 39
24664: PUSH
24665: LD_VAR 0 2
24669: ST_TO_ADDR
// vc_control := control ;
24670: LD_ADDR_OWVAR 38
24674: PUSH
24675: LD_VAR 0 3
24679: ST_TO_ADDR
// vc_weapon := weapon ;
24680: LD_ADDR_OWVAR 40
24684: PUSH
24685: LD_VAR 0 4
24689: ST_TO_ADDR
// un := CreateVehicle ;
24690: LD_ADDR_VAR 0 8
24694: PUSH
24695: CALL_OW 45
24699: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24700: LD_VAR 0 8
24704: PPUSH
24705: LD_INT 0
24707: PPUSH
24708: LD_INT 5
24710: PPUSH
24711: CALL_OW 12
24715: PPUSH
24716: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24720: LD_VAR 0 8
24724: PPUSH
24725: LD_VAR 0 5
24729: PPUSH
24730: LD_VAR 0 6
24734: PPUSH
24735: LD_INT 1
24737: PPUSH
24738: CALL_OW 48
// end ;
24742: LD_VAR 0 7
24746: RET
// export hInvincible ; every 1 do
24747: GO 24749
24749: DISABLE
// hInvincible := [ ] ;
24750: LD_ADDR_EXP 95
24754: PUSH
24755: EMPTY
24756: ST_TO_ADDR
24757: END
// every 10 do var i ;
24758: GO 24760
24760: DISABLE
24761: LD_INT 0
24763: PPUSH
// begin enable ;
24764: ENABLE
// if not hInvincible then
24765: LD_EXP 95
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 24818
// for i in hInvincible do
24774: LD_ADDR_VAR 0 1
24778: PUSH
24779: LD_EXP 95
24783: PUSH
24784: FOR_IN
24785: IFFALSE 24816
// if GetLives ( i ) < 1000 then
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL_OW 256
24796: PUSH
24797: LD_INT 1000
24799: LESS
24800: IFFALSE 24814
// SetLives ( i , 1000 ) ;
24802: LD_VAR 0 1
24806: PPUSH
24807: LD_INT 1000
24809: PPUSH
24810: CALL_OW 234
24814: GO 24784
24816: POP
24817: POP
// end ;
24818: PPOPN 1
24820: END
// export function hHackInvincible ; var i ; begin
24821: LD_INT 0
24823: PPUSH
24824: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 21
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 21
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PPUSH
24858: CALL_OW 69
24862: PUSH
24863: FOR_IN
24864: IFFALSE 24925
// if IsSelected ( i ) then
24866: LD_VAR 0 2
24870: PPUSH
24871: CALL_OW 306
24875: IFFALSE 24923
// begin if i in hInvincible then
24877: LD_VAR 0 2
24881: PUSH
24882: LD_EXP 95
24886: IN
24887: IFFALSE 24907
// hInvincible := hInvincible diff i else
24889: LD_ADDR_EXP 95
24893: PUSH
24894: LD_EXP 95
24898: PUSH
24899: LD_VAR 0 2
24903: DIFF
24904: ST_TO_ADDR
24905: GO 24923
// hInvincible := hInvincible union i ;
24907: LD_ADDR_EXP 95
24911: PUSH
24912: LD_EXP 95
24916: PUSH
24917: LD_VAR 0 2
24921: UNION
24922: ST_TO_ADDR
// end ;
24923: GO 24863
24925: POP
24926: POP
// end ;
24927: LD_VAR 0 1
24931: RET
// export function hHackInvisible ; var i , j ; begin
24932: LD_INT 0
24934: PPUSH
24935: PPUSH
24936: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24937: LD_ADDR_VAR 0 2
24941: PUSH
24942: LD_INT 21
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PPUSH
24952: CALL_OW 69
24956: PUSH
24957: FOR_IN
24958: IFFALSE 24982
// if IsSelected ( i ) then
24960: LD_VAR 0 2
24964: PPUSH
24965: CALL_OW 306
24969: IFFALSE 24980
// ComForceInvisible ( i ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: CALL_OW 496
24980: GO 24957
24982: POP
24983: POP
// end ;
24984: LD_VAR 0 1
24988: RET
// export function hHackChangeYourSide ; begin
24989: LD_INT 0
24991: PPUSH
// if your_side = 8 then
24992: LD_OWVAR 2
24996: PUSH
24997: LD_INT 8
24999: EQUAL
25000: IFFALSE 25012
// your_side := 0 else
25002: LD_ADDR_OWVAR 2
25006: PUSH
25007: LD_INT 0
25009: ST_TO_ADDR
25010: GO 25026
// your_side := your_side + 1 ;
25012: LD_ADDR_OWVAR 2
25016: PUSH
25017: LD_OWVAR 2
25021: PUSH
25022: LD_INT 1
25024: PLUS
25025: ST_TO_ADDR
// end ;
25026: LD_VAR 0 1
25030: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25031: LD_INT 0
25033: PPUSH
25034: PPUSH
25035: PPUSH
// for i in all_units do
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_OWVAR 3
25045: PUSH
25046: FOR_IN
25047: IFFALSE 25125
// if IsSelected ( i ) then
25049: LD_VAR 0 2
25053: PPUSH
25054: CALL_OW 306
25058: IFFALSE 25123
// begin j := GetSide ( i ) ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_VAR 0 2
25069: PPUSH
25070: CALL_OW 255
25074: ST_TO_ADDR
// if j = 8 then
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 8
25082: EQUAL
25083: IFFALSE 25095
// j := 0 else
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_INT 0
25092: ST_TO_ADDR
25093: GO 25109
// j := j + 1 ;
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_VAR 0 3
25104: PUSH
25105: LD_INT 1
25107: PLUS
25108: ST_TO_ADDR
// SetSide ( i , j ) ;
25109: LD_VAR 0 2
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: CALL_OW 235
// end ;
25123: GO 25046
25125: POP
25126: POP
// end ;
25127: LD_VAR 0 1
25131: RET
// export function hHackFog ; begin
25132: LD_INT 0
25134: PPUSH
// FogOff ( true ) ;
25135: LD_INT 1
25137: PPUSH
25138: CALL_OW 344
// end ;
25142: LD_VAR 0 1
25146: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25147: LD_INT 0
25149: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25150: LD_VAR 0 1
25154: PPUSH
25155: LD_VAR 0 2
25159: PPUSH
25160: LD_VAR 0 3
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: LD_INT 1
25170: PPUSH
25171: CALL_OW 483
// CenterOnXY ( x , y ) ;
25175: LD_VAR 0 2
25179: PPUSH
25180: LD_VAR 0 3
25184: PPUSH
25185: CALL_OW 84
// end ; end_of_file
25189: LD_VAR 0 4
25193: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 264
25209: PUSH
25210: LD_EXP 23
25214: EQUAL
25215: IFFALSE 25287
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25217: LD_INT 68
25219: PPUSH
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL_OW 255
25229: PPUSH
25230: CALL_OW 321
25234: PUSH
25235: LD_INT 2
25237: EQUAL
25238: IFFALSE 25250
// eff := 70 else
25240: LD_ADDR_VAR 0 4
25244: PUSH
25245: LD_INT 70
25247: ST_TO_ADDR
25248: GO 25258
// eff := 30 ;
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_INT 30
25257: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 250
25267: PPUSH
25268: LD_VAR 0 1
25272: PPUSH
25273: CALL_OW 251
25277: PPUSH
25278: LD_VAR 0 4
25282: PPUSH
25283: CALL_OW 495
// end ; end ;
25287: LD_VAR 0 2
25291: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25292: LD_INT 0
25294: PPUSH
// end ;
25295: LD_VAR 0 4
25299: RET
// export function SOS_Command ( cmd ) ; begin
25300: LD_INT 0
25302: PPUSH
// end ;
25303: LD_VAR 0 2
25307: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25308: LD_INT 0
25310: PPUSH
// end ;
25311: LD_VAR 0 6
25315: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25316: LD_INT 0
25318: PPUSH
25319: PPUSH
// if not vehicle or not factory then
25320: LD_VAR 0 1
25324: NOT
25325: PUSH
25326: LD_VAR 0 2
25330: NOT
25331: OR
25332: IFFALSE 25336
// exit ;
25334: GO 25567
// if factoryWaypoints >= factory then
25336: LD_EXP 96
25340: PUSH
25341: LD_VAR 0 2
25345: GREATEREQUAL
25346: IFFALSE 25567
// if factoryWaypoints [ factory ] then
25348: LD_EXP 96
25352: PUSH
25353: LD_VAR 0 2
25357: ARRAY
25358: IFFALSE 25567
// begin if GetControl ( vehicle ) = control_manual then
25360: LD_VAR 0 1
25364: PPUSH
25365: CALL_OW 263
25369: PUSH
25370: LD_INT 1
25372: EQUAL
25373: IFFALSE 25454
// begin driver := IsDrivenBy ( vehicle ) ;
25375: LD_ADDR_VAR 0 4
25379: PUSH
25380: LD_VAR 0 1
25384: PPUSH
25385: CALL_OW 311
25389: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25390: LD_VAR 0 4
25394: PPUSH
25395: LD_EXP 96
25399: PUSH
25400: LD_VAR 0 2
25404: ARRAY
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PPUSH
25410: LD_EXP 96
25414: PUSH
25415: LD_VAR 0 2
25419: ARRAY
25420: PUSH
25421: LD_INT 2
25423: ARRAY
25424: PPUSH
25425: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25429: LD_VAR 0 4
25433: PPUSH
25434: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25438: LD_VAR 0 4
25442: PPUSH
25443: LD_VAR 0 2
25447: PPUSH
25448: CALL_OW 180
// end else
25452: GO 25567
// if GetControl ( vehicle ) = control_remote then
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 263
25463: PUSH
25464: LD_INT 2
25466: EQUAL
25467: IFFALSE 25528
// begin wait ( 0 0$2 ) ;
25469: LD_INT 70
25471: PPUSH
25472: CALL_OW 67
// if Connect ( vehicle ) then
25476: LD_VAR 0 1
25480: PPUSH
25481: CALL 37791 0 1
25485: IFFALSE 25526
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_EXP 96
25496: PUSH
25497: LD_VAR 0 2
25501: ARRAY
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: PPUSH
25507: LD_EXP 96
25511: PUSH
25512: LD_VAR 0 2
25516: ARRAY
25517: PUSH
25518: LD_INT 2
25520: ARRAY
25521: PPUSH
25522: CALL_OW 171
// end else
25526: GO 25567
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_EXP 96
25537: PUSH
25538: LD_VAR 0 2
25542: ARRAY
25543: PUSH
25544: LD_INT 1
25546: ARRAY
25547: PPUSH
25548: LD_EXP 96
25552: PUSH
25553: LD_VAR 0 2
25557: ARRAY
25558: PUSH
25559: LD_INT 2
25561: ARRAY
25562: PPUSH
25563: CALL_OW 171
// end ; end ;
25567: LD_VAR 0 3
25571: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25572: LD_INT 0
25574: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25575: LD_VAR 0 1
25579: PUSH
25580: LD_INT 250
25582: EQUAL
25583: PUSH
25584: LD_VAR 0 2
25588: PPUSH
25589: CALL_OW 264
25593: PUSH
25594: LD_EXP 26
25598: EQUAL
25599: AND
25600: IFFALSE 25621
// MinerPlaceMine ( unit , x , y ) ;
25602: LD_VAR 0 2
25606: PPUSH
25607: LD_VAR 0 4
25611: PPUSH
25612: LD_VAR 0 5
25616: PPUSH
25617: CALL 28349 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25621: LD_VAR 0 1
25625: PUSH
25626: LD_INT 251
25628: EQUAL
25629: PUSH
25630: LD_VAR 0 2
25634: PPUSH
25635: CALL_OW 264
25639: PUSH
25640: LD_EXP 26
25644: EQUAL
25645: AND
25646: IFFALSE 25667
// MinerDetonateMine ( unit , x , y ) ;
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_VAR 0 4
25657: PPUSH
25658: LD_VAR 0 5
25662: PPUSH
25663: CALL 28626 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 252
25674: EQUAL
25675: PUSH
25676: LD_VAR 0 2
25680: PPUSH
25681: CALL_OW 264
25685: PUSH
25686: LD_EXP 26
25690: EQUAL
25691: AND
25692: IFFALSE 25713
// MinerCreateMinefield ( unit , x , y ) ;
25694: LD_VAR 0 2
25698: PPUSH
25699: LD_VAR 0 4
25703: PPUSH
25704: LD_VAR 0 5
25708: PPUSH
25709: CALL 29043 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25713: LD_VAR 0 1
25717: PUSH
25718: LD_INT 253
25720: EQUAL
25721: PUSH
25722: LD_VAR 0 2
25726: PPUSH
25727: CALL_OW 257
25731: PUSH
25732: LD_INT 5
25734: EQUAL
25735: AND
25736: IFFALSE 25757
// ComBinocular ( unit , x , y ) ;
25738: LD_VAR 0 2
25742: PPUSH
25743: LD_VAR 0 4
25747: PPUSH
25748: LD_VAR 0 5
25752: PPUSH
25753: CALL 29414 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25757: LD_VAR 0 1
25761: PUSH
25762: LD_INT 254
25764: EQUAL
25765: PUSH
25766: LD_VAR 0 2
25770: PPUSH
25771: CALL_OW 264
25775: PUSH
25776: LD_EXP 21
25780: EQUAL
25781: AND
25782: PUSH
25783: LD_VAR 0 3
25787: PPUSH
25788: CALL_OW 263
25792: PUSH
25793: LD_INT 3
25795: EQUAL
25796: AND
25797: IFFALSE 25813
// HackDestroyVehicle ( unit , selectedUnit ) ;
25799: LD_VAR 0 2
25803: PPUSH
25804: LD_VAR 0 3
25808: PPUSH
25809: CALL 27709 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25813: LD_VAR 0 1
25817: PUSH
25818: LD_INT 255
25820: EQUAL
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: CALL_OW 264
25831: PUSH
25832: LD_INT 14
25834: PUSH
25835: LD_INT 53
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: IN
25842: AND
25843: PUSH
25844: LD_VAR 0 4
25848: PPUSH
25849: LD_VAR 0 5
25853: PPUSH
25854: CALL_OW 488
25858: AND
25859: IFFALSE 25883
// CutTreeXYR ( unit , x , y , 12 ) ;
25861: LD_VAR 0 2
25865: PPUSH
25866: LD_VAR 0 4
25870: PPUSH
25871: LD_VAR 0 5
25875: PPUSH
25876: LD_INT 12
25878: PPUSH
25879: CALL 26275 0 4
// if cmd = 256 then
25883: LD_VAR 0 1
25887: PUSH
25888: LD_INT 256
25890: EQUAL
25891: IFFALSE 25912
// SetFactoryWaypoint ( unit , x , y ) ;
25893: LD_VAR 0 2
25897: PPUSH
25898: LD_VAR 0 4
25902: PPUSH
25903: LD_VAR 0 5
25907: PPUSH
25908: CALL 25917 0 3
// end ;
25912: LD_VAR 0 6
25916: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25917: LD_INT 0
25919: PPUSH
25920: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25921: LD_VAR 0 1
25925: NOT
25926: PUSH
25927: LD_VAR 0 2
25931: PPUSH
25932: LD_VAR 0 3
25936: PPUSH
25937: CALL_OW 488
25941: NOT
25942: OR
25943: PUSH
25944: LD_VAR 0 1
25948: PPUSH
25949: CALL_OW 266
25953: PUSH
25954: LD_INT 3
25956: NONEQUAL
25957: PUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 247
25967: PUSH
25968: LD_INT 1
25970: EQUAL
25971: NOT
25972: AND
25973: OR
25974: IFFALSE 25978
// exit ;
25976: GO 26127
// if GetType ( factory ) = unit_human then
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 247
25987: PUSH
25988: LD_INT 1
25990: EQUAL
25991: IFFALSE 26008
// factory := IsInUnit ( factory ) ;
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 310
26007: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 266
26017: PUSH
26018: LD_INT 3
26020: NONEQUAL
26021: IFFALSE 26025
// exit ;
26023: GO 26127
// if HexInfo ( x , y ) = factory then
26025: LD_VAR 0 2
26029: PPUSH
26030: LD_VAR 0 3
26034: PPUSH
26035: CALL_OW 428
26039: PUSH
26040: LD_VAR 0 1
26044: EQUAL
26045: IFFALSE 26072
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26047: LD_ADDR_EXP 96
26051: PUSH
26052: LD_EXP 96
26056: PPUSH
26057: LD_VAR 0 1
26061: PPUSH
26062: LD_INT 0
26064: PPUSH
26065: CALL_OW 1
26069: ST_TO_ADDR
26070: GO 26123
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26072: LD_ADDR_EXP 96
26076: PUSH
26077: LD_EXP 96
26081: PPUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_VAR 0 1
26091: PPUSH
26092: CALL_OW 255
26096: PUSH
26097: LD_VAR 0 1
26101: PUSH
26102: LD_VAR 0 2
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: PPUSH
26118: CALL_OW 1
26122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26123: CALL 26132 0 0
// end ;
26127: LD_VAR 0 4
26131: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26132: LD_INT 0
26134: PPUSH
26135: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26136: LD_STRING resetFactoryWaypoint();
26138: PPUSH
26139: CALL_OW 559
// if factoryWaypoints then
26143: LD_EXP 96
26147: IFFALSE 26270
// begin for i := 1 to factoryWaypoints do
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: DOUBLE
26155: LD_INT 1
26157: DEC
26158: ST_TO_ADDR
26159: LD_EXP 96
26163: PUSH
26164: FOR_TO
26165: IFFALSE 26268
// if factoryWaypoints [ i ] then
26167: LD_EXP 96
26171: PUSH
26172: LD_VAR 0 2
26176: ARRAY
26177: IFFALSE 26266
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26179: LD_STRING setFactoryWaypointXY(
26181: PUSH
26182: LD_EXP 96
26186: PUSH
26187: LD_VAR 0 2
26191: ARRAY
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: STR
26197: PUSH
26198: LD_STRING ,
26200: STR
26201: PUSH
26202: LD_EXP 96
26206: PUSH
26207: LD_VAR 0 2
26211: ARRAY
26212: PUSH
26213: LD_INT 2
26215: ARRAY
26216: STR
26217: PUSH
26218: LD_STRING ,
26220: STR
26221: PUSH
26222: LD_EXP 96
26226: PUSH
26227: LD_VAR 0 2
26231: ARRAY
26232: PUSH
26233: LD_INT 3
26235: ARRAY
26236: STR
26237: PUSH
26238: LD_STRING ,
26240: STR
26241: PUSH
26242: LD_EXP 96
26246: PUSH
26247: LD_VAR 0 2
26251: ARRAY
26252: PUSH
26253: LD_INT 4
26255: ARRAY
26256: STR
26257: PUSH
26258: LD_STRING )
26260: STR
26261: PPUSH
26262: CALL_OW 559
26266: GO 26164
26268: POP
26269: POP
// end ; end ;
26270: LD_VAR 0 1
26274: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26275: LD_INT 0
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26286: LD_VAR 0 1
26290: NOT
26291: PUSH
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_VAR 0 3
26301: PPUSH
26302: CALL_OW 488
26306: NOT
26307: OR
26308: PUSH
26309: LD_VAR 0 4
26313: NOT
26314: OR
26315: IFFALSE 26319
// exit ;
26317: GO 26659
// list := [ ] ;
26319: LD_ADDR_VAR 0 13
26323: PUSH
26324: EMPTY
26325: ST_TO_ADDR
// if x - r < 0 then
26326: LD_VAR 0 2
26330: PUSH
26331: LD_VAR 0 4
26335: MINUS
26336: PUSH
26337: LD_INT 0
26339: LESS
26340: IFFALSE 26352
// min_x := 0 else
26342: LD_ADDR_VAR 0 7
26346: PUSH
26347: LD_INT 0
26349: ST_TO_ADDR
26350: GO 26368
// min_x := x - r ;
26352: LD_ADDR_VAR 0 7
26356: PUSH
26357: LD_VAR 0 2
26361: PUSH
26362: LD_VAR 0 4
26366: MINUS
26367: ST_TO_ADDR
// if y - r < 0 then
26368: LD_VAR 0 3
26372: PUSH
26373: LD_VAR 0 4
26377: MINUS
26378: PUSH
26379: LD_INT 0
26381: LESS
26382: IFFALSE 26394
// min_y := 0 else
26384: LD_ADDR_VAR 0 8
26388: PUSH
26389: LD_INT 0
26391: ST_TO_ADDR
26392: GO 26410
// min_y := y - r ;
26394: LD_ADDR_VAR 0 8
26398: PUSH
26399: LD_VAR 0 3
26403: PUSH
26404: LD_VAR 0 4
26408: MINUS
26409: ST_TO_ADDR
// max_x := x + r ;
26410: LD_ADDR_VAR 0 9
26414: PUSH
26415: LD_VAR 0 2
26419: PUSH
26420: LD_VAR 0 4
26424: PLUS
26425: ST_TO_ADDR
// max_y := y + r ;
26426: LD_ADDR_VAR 0 10
26430: PUSH
26431: LD_VAR 0 3
26435: PUSH
26436: LD_VAR 0 4
26440: PLUS
26441: ST_TO_ADDR
// for _x = min_x to max_x do
26442: LD_ADDR_VAR 0 11
26446: PUSH
26447: DOUBLE
26448: LD_VAR 0 7
26452: DEC
26453: ST_TO_ADDR
26454: LD_VAR 0 9
26458: PUSH
26459: FOR_TO
26460: IFFALSE 26577
// for _y = min_y to max_y do
26462: LD_ADDR_VAR 0 12
26466: PUSH
26467: DOUBLE
26468: LD_VAR 0 8
26472: DEC
26473: ST_TO_ADDR
26474: LD_VAR 0 10
26478: PUSH
26479: FOR_TO
26480: IFFALSE 26573
// begin if not ValidHex ( _x , _y ) then
26482: LD_VAR 0 11
26486: PPUSH
26487: LD_VAR 0 12
26491: PPUSH
26492: CALL_OW 488
26496: NOT
26497: IFFALSE 26501
// continue ;
26499: GO 26479
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26501: LD_VAR 0 11
26505: PPUSH
26506: LD_VAR 0 12
26510: PPUSH
26511: CALL_OW 351
26515: PUSH
26516: LD_VAR 0 11
26520: PPUSH
26521: LD_VAR 0 12
26525: PPUSH
26526: CALL_OW 554
26530: AND
26531: IFFALSE 26571
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26533: LD_ADDR_VAR 0 13
26537: PUSH
26538: LD_VAR 0 13
26542: PPUSH
26543: LD_VAR 0 13
26547: PUSH
26548: LD_INT 1
26550: PLUS
26551: PPUSH
26552: LD_VAR 0 11
26556: PUSH
26557: LD_VAR 0 12
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PPUSH
26566: CALL_OW 2
26570: ST_TO_ADDR
// end ;
26571: GO 26479
26573: POP
26574: POP
26575: GO 26459
26577: POP
26578: POP
// if not list then
26579: LD_VAR 0 13
26583: NOT
26584: IFFALSE 26588
// exit ;
26586: GO 26659
// for i in list do
26588: LD_ADDR_VAR 0 6
26592: PUSH
26593: LD_VAR 0 13
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26657
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_STRING M
26608: PUSH
26609: LD_VAR 0 6
26613: PUSH
26614: LD_INT 1
26616: ARRAY
26617: PUSH
26618: LD_VAR 0 6
26622: PUSH
26623: LD_INT 2
26625: ARRAY
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: PPUSH
26651: CALL_OW 447
26655: GO 26598
26657: POP
26658: POP
// end ;
26659: LD_VAR 0 5
26663: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26664: LD_EXP 97
26668: NOT
26669: IFFALSE 26719
26671: GO 26673
26673: DISABLE
// begin initHack := true ;
26674: LD_ADDR_EXP 97
26678: PUSH
26679: LD_INT 1
26681: ST_TO_ADDR
// hackTanks := [ ] ;
26682: LD_ADDR_EXP 98
26686: PUSH
26687: EMPTY
26688: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26689: LD_ADDR_EXP 99
26693: PUSH
26694: EMPTY
26695: ST_TO_ADDR
// hackLimit := 3 ;
26696: LD_ADDR_EXP 100
26700: PUSH
26701: LD_INT 3
26703: ST_TO_ADDR
// hackDist := 12 ;
26704: LD_ADDR_EXP 101
26708: PUSH
26709: LD_INT 12
26711: ST_TO_ADDR
// hackCounter := [ ] ;
26712: LD_ADDR_EXP 102
26716: PUSH
26717: EMPTY
26718: ST_TO_ADDR
// end ;
26719: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26720: LD_EXP 97
26724: PUSH
26725: LD_INT 34
26727: PUSH
26728: LD_EXP 21
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PPUSH
26737: CALL_OW 69
26741: AND
26742: IFFALSE 26997
26744: GO 26746
26746: DISABLE
26747: LD_INT 0
26749: PPUSH
26750: PPUSH
// begin enable ;
26751: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26752: LD_ADDR_VAR 0 1
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_EXP 21
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PPUSH
26769: CALL_OW 69
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26995
// begin if not i in hackTanks then
26777: LD_VAR 0 1
26781: PUSH
26782: LD_EXP 98
26786: IN
26787: NOT
26788: IFFALSE 26871
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26790: LD_ADDR_EXP 98
26794: PUSH
26795: LD_EXP 98
26799: PPUSH
26800: LD_EXP 98
26804: PUSH
26805: LD_INT 1
26807: PLUS
26808: PPUSH
26809: LD_VAR 0 1
26813: PPUSH
26814: CALL_OW 1
26818: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26819: LD_ADDR_EXP 99
26823: PUSH
26824: LD_EXP 99
26828: PPUSH
26829: LD_EXP 99
26833: PUSH
26834: LD_INT 1
26836: PLUS
26837: PPUSH
26838: EMPTY
26839: PPUSH
26840: CALL_OW 1
26844: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26845: LD_ADDR_EXP 102
26849: PUSH
26850: LD_EXP 102
26854: PPUSH
26855: LD_EXP 102
26859: PUSH
26860: LD_INT 1
26862: PLUS
26863: PPUSH
26864: EMPTY
26865: PPUSH
26866: CALL_OW 1
26870: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 302
26880: NOT
26881: IFFALSE 26894
// begin HackUnlinkAll ( i ) ;
26883: LD_VAR 0 1
26887: PPUSH
26888: CALL 27000 0 1
// continue ;
26892: GO 26774
// end ; HackCheckCapturedStatus ( i ) ;
26894: LD_VAR 0 1
26898: PPUSH
26899: CALL 27443 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26903: LD_ADDR_VAR 0 2
26907: PUSH
26908: LD_INT 81
26910: PUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 255
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 33
26927: PUSH
26928: LD_INT 3
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 91
26937: PUSH
26938: LD_VAR 0 1
26942: PUSH
26943: LD_EXP 101
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 50
26955: PUSH
26956: EMPTY
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: ST_TO_ADDR
// if not tmp then
26970: LD_VAR 0 2
26974: NOT
26975: IFFALSE 26979
// continue ;
26977: GO 26774
// HackLink ( i , tmp ) ;
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL 27136 0 2
// end ;
26993: GO 26774
26995: POP
26996: POP
// end ;
26997: PPOPN 2
26999: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27000: LD_INT 0
27002: PPUSH
27003: PPUSH
27004: PPUSH
// if not hack in hackTanks then
27005: LD_VAR 0 1
27009: PUSH
27010: LD_EXP 98
27014: IN
27015: NOT
27016: IFFALSE 27020
// exit ;
27018: GO 27131
// index := GetElementIndex ( hackTanks , hack ) ;
27020: LD_ADDR_VAR 0 4
27024: PUSH
27025: LD_EXP 98
27029: PPUSH
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL 34605 0 2
27039: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27040: LD_EXP 99
27044: PUSH
27045: LD_VAR 0 4
27049: ARRAY
27050: IFFALSE 27131
// begin for i in hackTanksCaptured [ index ] do
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_EXP 99
27061: PUSH
27062: LD_VAR 0 4
27066: ARRAY
27067: PUSH
27068: FOR_IN
27069: IFFALSE 27095
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27071: LD_VAR 0 3
27075: PUSH
27076: LD_INT 1
27078: ARRAY
27079: PPUSH
27080: LD_VAR 0 3
27084: PUSH
27085: LD_INT 2
27087: ARRAY
27088: PPUSH
27089: CALL_OW 235
27093: GO 27068
27095: POP
27096: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27097: LD_ADDR_EXP 99
27101: PUSH
27102: LD_EXP 99
27106: PPUSH
27107: LD_VAR 0 4
27111: PPUSH
27112: EMPTY
27113: PPUSH
27114: CALL_OW 1
27118: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27119: LD_VAR 0 1
27123: PPUSH
27124: LD_INT 0
27126: PPUSH
27127: CALL_OW 505
// end ; end ;
27131: LD_VAR 0 2
27135: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27136: LD_INT 0
27138: PPUSH
27139: PPUSH
27140: PPUSH
// if not hack in hackTanks or not vehicles then
27141: LD_VAR 0 1
27145: PUSH
27146: LD_EXP 98
27150: IN
27151: NOT
27152: PUSH
27153: LD_VAR 0 2
27157: NOT
27158: OR
27159: IFFALSE 27163
// exit ;
27161: GO 27438
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_INT 1
27180: PPUSH
27181: LD_INT 1
27183: PPUSH
27184: CALL 35255 0 4
27188: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27189: LD_ADDR_VAR 0 5
27193: PUSH
27194: LD_EXP 98
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL 34605 0 2
27208: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27209: LD_EXP 99
27213: PUSH
27214: LD_VAR 0 5
27218: ARRAY
27219: PUSH
27220: LD_EXP 100
27224: LESS
27225: IFFALSE 27414
// begin for i := 1 to vehicles do
27227: LD_ADDR_VAR 0 4
27231: PUSH
27232: DOUBLE
27233: LD_INT 1
27235: DEC
27236: ST_TO_ADDR
27237: LD_VAR 0 2
27241: PUSH
27242: FOR_TO
27243: IFFALSE 27412
// begin if hackTanksCaptured [ index ] = hackLimit then
27245: LD_EXP 99
27249: PUSH
27250: LD_VAR 0 5
27254: ARRAY
27255: PUSH
27256: LD_EXP 100
27260: EQUAL
27261: IFFALSE 27265
// break ;
27263: GO 27412
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27265: LD_ADDR_EXP 102
27269: PUSH
27270: LD_EXP 102
27274: PPUSH
27275: LD_VAR 0 5
27279: PPUSH
27280: LD_EXP 102
27284: PUSH
27285: LD_VAR 0 5
27289: ARRAY
27290: PUSH
27291: LD_INT 1
27293: PLUS
27294: PPUSH
27295: CALL_OW 1
27299: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27300: LD_ADDR_EXP 99
27304: PUSH
27305: LD_EXP 99
27309: PPUSH
27310: LD_VAR 0 5
27314: PUSH
27315: LD_EXP 99
27319: PUSH
27320: LD_VAR 0 5
27324: ARRAY
27325: PUSH
27326: LD_INT 1
27328: PLUS
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: LD_VAR 0 2
27338: PUSH
27339: LD_VAR 0 4
27343: ARRAY
27344: PUSH
27345: LD_VAR 0 2
27349: PUSH
27350: LD_VAR 0 4
27354: ARRAY
27355: PPUSH
27356: CALL_OW 255
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL 34820 0 3
27369: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27370: LD_VAR 0 2
27374: PUSH
27375: LD_VAR 0 4
27379: ARRAY
27380: PPUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 255
27390: PPUSH
27391: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27395: LD_VAR 0 2
27399: PUSH
27400: LD_VAR 0 4
27404: ARRAY
27405: PPUSH
27406: CALL_OW 141
// end ;
27410: GO 27242
27412: POP
27413: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_EXP 99
27423: PUSH
27424: LD_VAR 0 5
27428: ARRAY
27429: PUSH
27430: LD_INT 0
27432: PLUS
27433: PPUSH
27434: CALL_OW 505
// end ;
27438: LD_VAR 0 3
27442: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// if not hack in hackTanks then
27449: LD_VAR 0 1
27453: PUSH
27454: LD_EXP 98
27458: IN
27459: NOT
27460: IFFALSE 27464
// exit ;
27462: GO 27704
// index := GetElementIndex ( hackTanks , hack ) ;
27464: LD_ADDR_VAR 0 4
27468: PUSH
27469: LD_EXP 98
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL 34605 0 2
27483: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: DOUBLE
27490: LD_EXP 99
27494: PUSH
27495: LD_VAR 0 4
27499: ARRAY
27500: INC
27501: ST_TO_ADDR
27502: LD_INT 1
27504: PUSH
27505: FOR_DOWNTO
27506: IFFALSE 27678
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27508: LD_ADDR_VAR 0 5
27512: PUSH
27513: LD_EXP 99
27517: PUSH
27518: LD_VAR 0 4
27522: ARRAY
27523: PUSH
27524: LD_VAR 0 3
27528: ARRAY
27529: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27530: LD_VAR 0 5
27534: PUSH
27535: LD_INT 1
27537: ARRAY
27538: PPUSH
27539: CALL_OW 302
27543: NOT
27544: PUSH
27545: LD_VAR 0 5
27549: PUSH
27550: LD_INT 1
27552: ARRAY
27553: PPUSH
27554: CALL_OW 255
27558: PUSH
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL_OW 255
27568: NONEQUAL
27569: OR
27570: IFFALSE 27676
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27572: LD_VAR 0 5
27576: PUSH
27577: LD_INT 1
27579: ARRAY
27580: PPUSH
27581: CALL_OW 305
27585: PUSH
27586: LD_VAR 0 5
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: CALL_OW 255
27599: PUSH
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 255
27609: EQUAL
27610: AND
27611: IFFALSE 27635
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27613: LD_VAR 0 5
27617: PUSH
27618: LD_INT 1
27620: ARRAY
27621: PPUSH
27622: LD_VAR 0 5
27626: PUSH
27627: LD_INT 2
27629: ARRAY
27630: PPUSH
27631: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27635: LD_ADDR_EXP 99
27639: PUSH
27640: LD_EXP 99
27644: PPUSH
27645: LD_VAR 0 4
27649: PPUSH
27650: LD_EXP 99
27654: PUSH
27655: LD_VAR 0 4
27659: ARRAY
27660: PPUSH
27661: LD_VAR 0 3
27665: PPUSH
27666: CALL_OW 3
27670: PPUSH
27671: CALL_OW 1
27675: ST_TO_ADDR
// end ; end ;
27676: GO 27505
27678: POP
27679: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27680: LD_VAR 0 1
27684: PPUSH
27685: LD_EXP 99
27689: PUSH
27690: LD_VAR 0 4
27694: ARRAY
27695: PUSH
27696: LD_INT 0
27698: PLUS
27699: PPUSH
27700: CALL_OW 505
// end ;
27704: LD_VAR 0 2
27708: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27709: LD_INT 0
27711: PPUSH
27712: PPUSH
27713: PPUSH
27714: PPUSH
// if not hack in hackTanks then
27715: LD_VAR 0 1
27719: PUSH
27720: LD_EXP 98
27724: IN
27725: NOT
27726: IFFALSE 27730
// exit ;
27728: GO 27815
// index := GetElementIndex ( hackTanks , hack ) ;
27730: LD_ADDR_VAR 0 5
27734: PUSH
27735: LD_EXP 98
27739: PPUSH
27740: LD_VAR 0 1
27744: PPUSH
27745: CALL 34605 0 2
27749: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27750: LD_ADDR_VAR 0 4
27754: PUSH
27755: DOUBLE
27756: LD_INT 1
27758: DEC
27759: ST_TO_ADDR
27760: LD_EXP 99
27764: PUSH
27765: LD_VAR 0 5
27769: ARRAY
27770: PUSH
27771: FOR_TO
27772: IFFALSE 27813
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27774: LD_EXP 99
27778: PUSH
27779: LD_VAR 0 5
27783: ARRAY
27784: PUSH
27785: LD_VAR 0 4
27789: ARRAY
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PUSH
27795: LD_VAR 0 2
27799: EQUAL
27800: IFFALSE 27811
// KillUnit ( vehicle ) ;
27802: LD_VAR 0 2
27806: PPUSH
27807: CALL_OW 66
27811: GO 27771
27813: POP
27814: POP
// end ;
27815: LD_VAR 0 3
27819: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27820: LD_EXP 103
27824: NOT
27825: IFFALSE 27860
27827: GO 27829
27829: DISABLE
// begin initMiner := true ;
27830: LD_ADDR_EXP 103
27834: PUSH
27835: LD_INT 1
27837: ST_TO_ADDR
// minersList := [ ] ;
27838: LD_ADDR_EXP 104
27842: PUSH
27843: EMPTY
27844: ST_TO_ADDR
// minerMinesList := [ ] ;
27845: LD_ADDR_EXP 105
27849: PUSH
27850: EMPTY
27851: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27852: LD_ADDR_EXP 106
27856: PUSH
27857: LD_INT 5
27859: ST_TO_ADDR
// end ;
27860: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27861: LD_EXP 103
27865: PUSH
27866: LD_INT 34
27868: PUSH
27869: LD_EXP 26
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: CALL_OW 69
27882: AND
27883: IFFALSE 28346
27885: GO 27887
27887: DISABLE
27888: LD_INT 0
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
// begin enable ;
27894: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27895: LD_ADDR_VAR 0 1
27899: PUSH
27900: LD_INT 34
27902: PUSH
27903: LD_EXP 26
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PPUSH
27912: CALL_OW 69
27916: PUSH
27917: FOR_IN
27918: IFFALSE 27990
// begin if not i in minersList then
27920: LD_VAR 0 1
27924: PUSH
27925: LD_EXP 104
27929: IN
27930: NOT
27931: IFFALSE 27988
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27933: LD_ADDR_EXP 104
27937: PUSH
27938: LD_EXP 104
27942: PPUSH
27943: LD_EXP 104
27947: PUSH
27948: LD_INT 1
27950: PLUS
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 1
27961: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27962: LD_ADDR_EXP 105
27966: PUSH
27967: LD_EXP 105
27971: PPUSH
27972: LD_EXP 105
27976: PUSH
27977: LD_INT 1
27979: PLUS
27980: PPUSH
27981: EMPTY
27982: PPUSH
27983: CALL_OW 1
27987: ST_TO_ADDR
// end end ;
27988: GO 27917
27990: POP
27991: POP
// for i := minerMinesList downto 1 do
27992: LD_ADDR_VAR 0 1
27996: PUSH
27997: DOUBLE
27998: LD_EXP 105
28002: INC
28003: ST_TO_ADDR
28004: LD_INT 1
28006: PUSH
28007: FOR_DOWNTO
28008: IFFALSE 28344
// begin if IsLive ( minersList [ i ] ) then
28010: LD_EXP 104
28014: PUSH
28015: LD_VAR 0 1
28019: ARRAY
28020: PPUSH
28021: CALL_OW 300
28025: IFFALSE 28053
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28027: LD_EXP 104
28031: PUSH
28032: LD_VAR 0 1
28036: ARRAY
28037: PPUSH
28038: LD_EXP 105
28042: PUSH
28043: LD_VAR 0 1
28047: ARRAY
28048: PPUSH
28049: CALL_OW 505
// if not minerMinesList [ i ] then
28053: LD_EXP 105
28057: PUSH
28058: LD_VAR 0 1
28062: ARRAY
28063: NOT
28064: IFFALSE 28068
// continue ;
28066: GO 28007
// for j := minerMinesList [ i ] downto 1 do
28068: LD_ADDR_VAR 0 2
28072: PUSH
28073: DOUBLE
28074: LD_EXP 105
28078: PUSH
28079: LD_VAR 0 1
28083: ARRAY
28084: INC
28085: ST_TO_ADDR
28086: LD_INT 1
28088: PUSH
28089: FOR_DOWNTO
28090: IFFALSE 28340
// begin side := GetSide ( minersList [ i ] ) ;
28092: LD_ADDR_VAR 0 3
28096: PUSH
28097: LD_EXP 104
28101: PUSH
28102: LD_VAR 0 1
28106: ARRAY
28107: PPUSH
28108: CALL_OW 255
28112: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28113: LD_ADDR_VAR 0 4
28117: PUSH
28118: LD_EXP 105
28122: PUSH
28123: LD_VAR 0 1
28127: ARRAY
28128: PUSH
28129: LD_VAR 0 2
28133: ARRAY
28134: PUSH
28135: LD_INT 1
28137: ARRAY
28138: PPUSH
28139: LD_EXP 105
28143: PUSH
28144: LD_VAR 0 1
28148: ARRAY
28149: PUSH
28150: LD_VAR 0 2
28154: ARRAY
28155: PUSH
28156: LD_INT 2
28158: ARRAY
28159: PPUSH
28160: CALL_OW 428
28164: ST_TO_ADDR
// if not tmp then
28165: LD_VAR 0 4
28169: NOT
28170: IFFALSE 28174
// continue ;
28172: GO 28089
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28174: LD_VAR 0 4
28178: PUSH
28179: LD_INT 81
28181: PUSH
28182: LD_VAR 0 3
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 69
28195: IN
28196: PUSH
28197: LD_EXP 105
28201: PUSH
28202: LD_VAR 0 1
28206: ARRAY
28207: PUSH
28208: LD_VAR 0 2
28212: ARRAY
28213: PUSH
28214: LD_INT 1
28216: ARRAY
28217: PPUSH
28218: LD_EXP 105
28222: PUSH
28223: LD_VAR 0 1
28227: ARRAY
28228: PUSH
28229: LD_VAR 0 2
28233: ARRAY
28234: PUSH
28235: LD_INT 2
28237: ARRAY
28238: PPUSH
28239: CALL_OW 458
28243: AND
28244: IFFALSE 28338
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28246: LD_EXP 105
28250: PUSH
28251: LD_VAR 0 1
28255: ARRAY
28256: PUSH
28257: LD_VAR 0 2
28261: ARRAY
28262: PUSH
28263: LD_INT 1
28265: ARRAY
28266: PPUSH
28267: LD_EXP 105
28271: PUSH
28272: LD_VAR 0 1
28276: ARRAY
28277: PUSH
28278: LD_VAR 0 2
28282: ARRAY
28283: PUSH
28284: LD_INT 2
28286: ARRAY
28287: PPUSH
28288: LD_VAR 0 3
28292: PPUSH
28293: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28297: LD_ADDR_EXP 105
28301: PUSH
28302: LD_EXP 105
28306: PPUSH
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_EXP 105
28316: PUSH
28317: LD_VAR 0 1
28321: ARRAY
28322: PPUSH
28323: LD_VAR 0 2
28327: PPUSH
28328: CALL_OW 3
28332: PPUSH
28333: CALL_OW 1
28337: ST_TO_ADDR
// end ; end ;
28338: GO 28089
28340: POP
28341: POP
// end ;
28342: GO 28007
28344: POP
28345: POP
// end ;
28346: PPOPN 4
28348: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28349: LD_INT 0
28351: PPUSH
28352: PPUSH
// result := false ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_INT 0
28360: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28361: LD_VAR 0 1
28365: PPUSH
28366: CALL_OW 264
28370: PUSH
28371: LD_EXP 26
28375: EQUAL
28376: NOT
28377: IFFALSE 28381
// exit ;
28379: GO 28621
// index := GetElementIndex ( minersList , unit ) ;
28381: LD_ADDR_VAR 0 5
28385: PUSH
28386: LD_EXP 104
28390: PPUSH
28391: LD_VAR 0 1
28395: PPUSH
28396: CALL 34605 0 2
28400: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28401: LD_EXP 105
28405: PUSH
28406: LD_VAR 0 5
28410: ARRAY
28411: PUSH
28412: LD_EXP 106
28416: GREATEREQUAL
28417: IFFALSE 28421
// exit ;
28419: GO 28621
// ComMoveXY ( unit , x , y ) ;
28421: LD_VAR 0 1
28425: PPUSH
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_VAR 0 3
28435: PPUSH
28436: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28440: LD_INT 35
28442: PPUSH
28443: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28447: LD_VAR 0 1
28451: PPUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: LD_VAR 0 3
28461: PPUSH
28462: CALL 65377 0 3
28466: NOT
28467: PUSH
28468: LD_VAR 0 1
28472: PPUSH
28473: CALL_OW 314
28477: AND
28478: IFFALSE 28482
// exit ;
28480: GO 28621
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 3
28491: PPUSH
28492: CALL_OW 428
28496: PUSH
28497: LD_VAR 0 1
28501: EQUAL
28502: PUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 314
28512: NOT
28513: AND
28514: IFFALSE 28440
// PlaySoundXY ( x , y , PlantMine ) ;
28516: LD_VAR 0 2
28520: PPUSH
28521: LD_VAR 0 3
28525: PPUSH
28526: LD_STRING PlantMine
28528: PPUSH
28529: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28533: LD_VAR 0 2
28537: PPUSH
28538: LD_VAR 0 3
28542: PPUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: CALL_OW 255
28552: PPUSH
28553: LD_INT 0
28555: PPUSH
28556: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28560: LD_ADDR_EXP 105
28564: PUSH
28565: LD_EXP 105
28569: PPUSH
28570: LD_VAR 0 5
28574: PUSH
28575: LD_EXP 105
28579: PUSH
28580: LD_VAR 0 5
28584: ARRAY
28585: PUSH
28586: LD_INT 1
28588: PLUS
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PPUSH
28594: LD_VAR 0 2
28598: PUSH
28599: LD_VAR 0 3
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PPUSH
28608: CALL 34820 0 3
28612: ST_TO_ADDR
// result := true ;
28613: LD_ADDR_VAR 0 4
28617: PUSH
28618: LD_INT 1
28620: ST_TO_ADDR
// end ;
28621: LD_VAR 0 4
28625: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// if not unit in minersList then
28631: LD_VAR 0 1
28635: PUSH
28636: LD_EXP 104
28640: IN
28641: NOT
28642: IFFALSE 28646
// exit ;
28644: GO 29038
// index := GetElementIndex ( minersList , unit ) ;
28646: LD_ADDR_VAR 0 6
28650: PUSH
28651: LD_EXP 104
28655: PPUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL 34605 0 2
28665: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28666: LD_ADDR_VAR 0 5
28670: PUSH
28671: DOUBLE
28672: LD_EXP 105
28676: PUSH
28677: LD_VAR 0 6
28681: ARRAY
28682: INC
28683: ST_TO_ADDR
28684: LD_INT 1
28686: PUSH
28687: FOR_DOWNTO
28688: IFFALSE 28849
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28690: LD_EXP 105
28694: PUSH
28695: LD_VAR 0 6
28699: ARRAY
28700: PUSH
28701: LD_VAR 0 5
28705: ARRAY
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PUSH
28711: LD_VAR 0 2
28715: EQUAL
28716: PUSH
28717: LD_EXP 105
28721: PUSH
28722: LD_VAR 0 6
28726: ARRAY
28727: PUSH
28728: LD_VAR 0 5
28732: ARRAY
28733: PUSH
28734: LD_INT 2
28736: ARRAY
28737: PUSH
28738: LD_VAR 0 3
28742: EQUAL
28743: AND
28744: IFFALSE 28847
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28746: LD_EXP 105
28750: PUSH
28751: LD_VAR 0 6
28755: ARRAY
28756: PUSH
28757: LD_VAR 0 5
28761: ARRAY
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: PPUSH
28767: LD_EXP 105
28771: PUSH
28772: LD_VAR 0 6
28776: ARRAY
28777: PUSH
28778: LD_VAR 0 5
28782: ARRAY
28783: PUSH
28784: LD_INT 2
28786: ARRAY
28787: PPUSH
28788: LD_VAR 0 1
28792: PPUSH
28793: CALL_OW 255
28797: PPUSH
28798: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28802: LD_ADDR_EXP 105
28806: PUSH
28807: LD_EXP 105
28811: PPUSH
28812: LD_VAR 0 6
28816: PPUSH
28817: LD_EXP 105
28821: PUSH
28822: LD_VAR 0 6
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 5
28832: PPUSH
28833: CALL_OW 3
28837: PPUSH
28838: CALL_OW 1
28842: ST_TO_ADDR
// exit ;
28843: POP
28844: POP
28845: GO 29038
// end ; end ;
28847: GO 28687
28849: POP
28850: POP
// for i := minerMinesList [ index ] downto 1 do
28851: LD_ADDR_VAR 0 5
28855: PUSH
28856: DOUBLE
28857: LD_EXP 105
28861: PUSH
28862: LD_VAR 0 6
28866: ARRAY
28867: INC
28868: ST_TO_ADDR
28869: LD_INT 1
28871: PUSH
28872: FOR_DOWNTO
28873: IFFALSE 29036
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28875: LD_EXP 105
28879: PUSH
28880: LD_VAR 0 6
28884: ARRAY
28885: PUSH
28886: LD_VAR 0 5
28890: ARRAY
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: PPUSH
28896: LD_EXP 105
28900: PUSH
28901: LD_VAR 0 6
28905: ARRAY
28906: PUSH
28907: LD_VAR 0 5
28911: ARRAY
28912: PUSH
28913: LD_INT 2
28915: ARRAY
28916: PPUSH
28917: LD_VAR 0 2
28921: PPUSH
28922: LD_VAR 0 3
28926: PPUSH
28927: CALL_OW 298
28931: PUSH
28932: LD_INT 6
28934: LESS
28935: IFFALSE 29034
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28937: LD_EXP 105
28941: PUSH
28942: LD_VAR 0 6
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 5
28952: ARRAY
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_EXP 105
28962: PUSH
28963: LD_VAR 0 6
28967: ARRAY
28968: PUSH
28969: LD_VAR 0 5
28973: ARRAY
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 255
28988: PPUSH
28989: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28993: LD_ADDR_EXP 105
28997: PUSH
28998: LD_EXP 105
29002: PPUSH
29003: LD_VAR 0 6
29007: PPUSH
29008: LD_EXP 105
29012: PUSH
29013: LD_VAR 0 6
29017: ARRAY
29018: PPUSH
29019: LD_VAR 0 5
29023: PPUSH
29024: CALL_OW 3
29028: PPUSH
29029: CALL_OW 1
29033: ST_TO_ADDR
// end ; end ;
29034: GO 28872
29036: POP
29037: POP
// end ;
29038: LD_VAR 0 4
29042: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29043: LD_INT 0
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29054: LD_VAR 0 1
29058: PPUSH
29059: CALL_OW 264
29063: PUSH
29064: LD_EXP 26
29068: EQUAL
29069: NOT
29070: PUSH
29071: LD_VAR 0 1
29075: PUSH
29076: LD_EXP 104
29080: IN
29081: NOT
29082: OR
29083: IFFALSE 29087
// exit ;
29085: GO 29409
// index := GetElementIndex ( minersList , unit ) ;
29087: LD_ADDR_VAR 0 6
29091: PUSH
29092: LD_EXP 104
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL 34605 0 2
29106: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29107: LD_ADDR_VAR 0 8
29111: PUSH
29112: LD_EXP 106
29116: PUSH
29117: LD_EXP 105
29121: PUSH
29122: LD_VAR 0 6
29126: ARRAY
29127: MINUS
29128: ST_TO_ADDR
// if not minesFreeAmount then
29129: LD_VAR 0 8
29133: NOT
29134: IFFALSE 29138
// exit ;
29136: GO 29409
// tmp := [ ] ;
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: EMPTY
29144: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29145: LD_ADDR_VAR 0 5
29149: PUSH
29150: DOUBLE
29151: LD_INT 1
29153: DEC
29154: ST_TO_ADDR
29155: LD_VAR 0 8
29159: PUSH
29160: FOR_TO
29161: IFFALSE 29356
// begin _d := rand ( 0 , 5 ) ;
29163: LD_ADDR_VAR 0 11
29167: PUSH
29168: LD_INT 0
29170: PPUSH
29171: LD_INT 5
29173: PPUSH
29174: CALL_OW 12
29178: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29179: LD_ADDR_VAR 0 12
29183: PUSH
29184: LD_INT 2
29186: PPUSH
29187: LD_INT 6
29189: PPUSH
29190: CALL_OW 12
29194: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29195: LD_ADDR_VAR 0 9
29199: PUSH
29200: LD_VAR 0 2
29204: PPUSH
29205: LD_VAR 0 11
29209: PPUSH
29210: LD_VAR 0 12
29214: PPUSH
29215: CALL_OW 272
29219: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29220: LD_ADDR_VAR 0 10
29224: PUSH
29225: LD_VAR 0 3
29229: PPUSH
29230: LD_VAR 0 11
29234: PPUSH
29235: LD_VAR 0 12
29239: PPUSH
29240: CALL_OW 273
29244: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29245: LD_VAR 0 9
29249: PPUSH
29250: LD_VAR 0 10
29254: PPUSH
29255: CALL_OW 488
29259: PUSH
29260: LD_VAR 0 9
29264: PUSH
29265: LD_VAR 0 10
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_VAR 0 7
29278: IN
29279: NOT
29280: AND
29281: PUSH
29282: LD_VAR 0 9
29286: PPUSH
29287: LD_VAR 0 10
29291: PPUSH
29292: CALL_OW 458
29296: NOT
29297: AND
29298: IFFALSE 29340
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29300: LD_ADDR_VAR 0 7
29304: PUSH
29305: LD_VAR 0 7
29309: PPUSH
29310: LD_VAR 0 7
29314: PUSH
29315: LD_INT 1
29317: PLUS
29318: PPUSH
29319: LD_VAR 0 9
29323: PUSH
29324: LD_VAR 0 10
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 1
29337: ST_TO_ADDR
29338: GO 29354
// i := i - 1 ;
29340: LD_ADDR_VAR 0 5
29344: PUSH
29345: LD_VAR 0 5
29349: PUSH
29350: LD_INT 1
29352: MINUS
29353: ST_TO_ADDR
// end ;
29354: GO 29160
29356: POP
29357: POP
// for i in tmp do
29358: LD_ADDR_VAR 0 5
29362: PUSH
29363: LD_VAR 0 7
29367: PUSH
29368: FOR_IN
29369: IFFALSE 29407
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29371: LD_VAR 0 1
29375: PPUSH
29376: LD_VAR 0 5
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PPUSH
29385: LD_VAR 0 5
29389: PUSH
29390: LD_INT 2
29392: ARRAY
29393: PPUSH
29394: CALL 28349 0 3
29398: NOT
29399: IFFALSE 29405
// exit ;
29401: POP
29402: POP
29403: GO 29409
29405: GO 29368
29407: POP
29408: POP
// end ;
29409: LD_VAR 0 4
29413: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
// if not GetClass ( unit ) = class_sniper then
29423: LD_VAR 0 1
29427: PPUSH
29428: CALL_OW 257
29432: PUSH
29433: LD_INT 5
29435: EQUAL
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29829
// dist := 8 ;
29441: LD_ADDR_VAR 0 5
29445: PUSH
29446: LD_INT 8
29448: ST_TO_ADDR
// viewRange := 12 ;
29449: LD_ADDR_VAR 0 7
29453: PUSH
29454: LD_INT 12
29456: ST_TO_ADDR
// side := GetSide ( unit ) ;
29457: LD_ADDR_VAR 0 6
29461: PUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL_OW 255
29471: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29472: LD_INT 61
29474: PPUSH
29475: LD_VAR 0 6
29479: PPUSH
29480: CALL_OW 321
29484: PUSH
29485: LD_INT 2
29487: EQUAL
29488: IFFALSE 29498
// viewRange := 16 ;
29490: LD_ADDR_VAR 0 7
29494: PUSH
29495: LD_INT 16
29497: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: CALL_OW 297
29517: PUSH
29518: LD_VAR 0 5
29522: GREATER
29523: IFFALSE 29602
// begin ComMoveXY ( unit , x , y ) ;
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_VAR 0 2
29534: PPUSH
29535: LD_VAR 0 3
29539: PPUSH
29540: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29544: LD_INT 35
29546: PPUSH
29547: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29551: LD_VAR 0 1
29555: PPUSH
29556: LD_VAR 0 2
29560: PPUSH
29561: LD_VAR 0 3
29565: PPUSH
29566: CALL 65377 0 3
29570: NOT
29571: IFFALSE 29575
// exit ;
29573: GO 29829
// until GetDistUnitXY ( unit , x , y ) < dist ;
29575: LD_VAR 0 1
29579: PPUSH
29580: LD_VAR 0 2
29584: PPUSH
29585: LD_VAR 0 3
29589: PPUSH
29590: CALL_OW 297
29594: PUSH
29595: LD_VAR 0 5
29599: LESS
29600: IFFALSE 29544
// end ; ComTurnXY ( unit , x , y ) ;
29602: LD_VAR 0 1
29606: PPUSH
29607: LD_VAR 0 2
29611: PPUSH
29612: LD_VAR 0 3
29616: PPUSH
29617: CALL_OW 118
// wait ( 5 ) ;
29621: LD_INT 5
29623: PPUSH
29624: CALL_OW 67
// _d := GetDir ( unit ) ;
29628: LD_ADDR_VAR 0 10
29632: PUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 254
29642: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29643: LD_ADDR_VAR 0 8
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 250
29657: PPUSH
29658: LD_VAR 0 10
29662: PPUSH
29663: LD_VAR 0 5
29667: PPUSH
29668: CALL_OW 272
29672: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29673: LD_ADDR_VAR 0 9
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 251
29687: PPUSH
29688: LD_VAR 0 10
29692: PPUSH
29693: LD_VAR 0 5
29697: PPUSH
29698: CALL_OW 273
29702: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29703: LD_VAR 0 8
29707: PPUSH
29708: LD_VAR 0 9
29712: PPUSH
29713: CALL_OW 488
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29829
// ComAnimCustom ( unit , 1 ) ;
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_INT 1
29729: PPUSH
29730: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29734: LD_VAR 0 8
29738: PPUSH
29739: LD_VAR 0 9
29743: PPUSH
29744: LD_VAR 0 6
29748: PPUSH
29749: LD_VAR 0 7
29753: PPUSH
29754: CALL_OW 330
// repeat wait ( 1 ) ;
29758: LD_INT 1
29760: PPUSH
29761: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 316
29774: PUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 314
29784: OR
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: CALL_OW 302
29795: NOT
29796: OR
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 301
29807: OR
29808: IFFALSE 29758
// RemoveSeeing ( _x , _y , side ) ;
29810: LD_VAR 0 8
29814: PPUSH
29815: LD_VAR 0 9
29819: PPUSH
29820: LD_VAR 0 6
29824: PPUSH
29825: CALL_OW 331
// end ; end_of_file
29829: LD_VAR 0 4
29833: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
// if exist_mode then
29838: LD_VAR 0 2
29842: IFFALSE 29867
// unit := CreateCharacter ( prefix & ident ) else
29844: LD_ADDR_VAR 0 5
29848: PUSH
29849: LD_VAR 0 3
29853: PUSH
29854: LD_VAR 0 1
29858: STR
29859: PPUSH
29860: CALL_OW 34
29864: ST_TO_ADDR
29865: GO 29882
// unit := NewCharacter ( ident ) ;
29867: LD_ADDR_VAR 0 5
29871: PUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL_OW 25
29881: ST_TO_ADDR
// result := unit ;
29882: LD_ADDR_VAR 0 4
29886: PUSH
29887: LD_VAR 0 5
29891: ST_TO_ADDR
// end ;
29892: LD_VAR 0 4
29896: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29897: LD_INT 0
29899: PPUSH
29900: PPUSH
// if not side or not nation then
29901: LD_VAR 0 1
29905: NOT
29906: PUSH
29907: LD_VAR 0 2
29911: NOT
29912: OR
29913: IFFALSE 29917
// exit ;
29915: GO 30685
// case nation of nation_american :
29917: LD_VAR 0 2
29921: PUSH
29922: LD_INT 1
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 30144
29930: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29931: LD_ADDR_VAR 0 4
29935: PUSH
29936: LD_INT 35
29938: PUSH
29939: LD_INT 45
29941: PUSH
29942: LD_INT 46
29944: PUSH
29945: LD_INT 47
29947: PUSH
29948: LD_INT 82
29950: PUSH
29951: LD_INT 83
29953: PUSH
29954: LD_INT 84
29956: PUSH
29957: LD_INT 85
29959: PUSH
29960: LD_INT 86
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: LD_INT 6
29971: PUSH
29972: LD_INT 15
29974: PUSH
29975: LD_INT 16
29977: PUSH
29978: LD_INT 7
29980: PUSH
29981: LD_INT 12
29983: PUSH
29984: LD_INT 13
29986: PUSH
29987: LD_INT 10
29989: PUSH
29990: LD_INT 14
29992: PUSH
29993: LD_INT 20
29995: PUSH
29996: LD_INT 21
29998: PUSH
29999: LD_INT 22
30001: PUSH
30002: LD_INT 25
30004: PUSH
30005: LD_INT 32
30007: PUSH
30008: LD_INT 27
30010: PUSH
30011: LD_INT 36
30013: PUSH
30014: LD_INT 69
30016: PUSH
30017: LD_INT 39
30019: PUSH
30020: LD_INT 34
30022: PUSH
30023: LD_INT 40
30025: PUSH
30026: LD_INT 48
30028: PUSH
30029: LD_INT 49
30031: PUSH
30032: LD_INT 50
30034: PUSH
30035: LD_INT 51
30037: PUSH
30038: LD_INT 52
30040: PUSH
30041: LD_INT 53
30043: PUSH
30044: LD_INT 54
30046: PUSH
30047: LD_INT 55
30049: PUSH
30050: LD_INT 56
30052: PUSH
30053: LD_INT 57
30055: PUSH
30056: LD_INT 58
30058: PUSH
30059: LD_INT 59
30061: PUSH
30062: LD_INT 60
30064: PUSH
30065: LD_INT 61
30067: PUSH
30068: LD_INT 62
30070: PUSH
30071: LD_INT 80
30073: PUSH
30074: LD_INT 82
30076: PUSH
30077: LD_INT 83
30079: PUSH
30080: LD_INT 84
30082: PUSH
30083: LD_INT 85
30085: PUSH
30086: LD_INT 86
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
30142: GO 30609
30144: LD_INT 2
30146: DOUBLE
30147: EQUAL
30148: IFTRUE 30152
30150: GO 30378
30152: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30153: LD_ADDR_VAR 0 4
30157: PUSH
30158: LD_INT 35
30160: PUSH
30161: LD_INT 45
30163: PUSH
30164: LD_INT 46
30166: PUSH
30167: LD_INT 47
30169: PUSH
30170: LD_INT 82
30172: PUSH
30173: LD_INT 83
30175: PUSH
30176: LD_INT 84
30178: PUSH
30179: LD_INT 85
30181: PUSH
30182: LD_INT 87
30184: PUSH
30185: LD_INT 70
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 11
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 4
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: LD_INT 6
30205: PUSH
30206: LD_INT 15
30208: PUSH
30209: LD_INT 18
30211: PUSH
30212: LD_INT 7
30214: PUSH
30215: LD_INT 17
30217: PUSH
30218: LD_INT 8
30220: PUSH
30221: LD_INT 20
30223: PUSH
30224: LD_INT 21
30226: PUSH
30227: LD_INT 22
30229: PUSH
30230: LD_INT 72
30232: PUSH
30233: LD_INT 26
30235: PUSH
30236: LD_INT 69
30238: PUSH
30239: LD_INT 39
30241: PUSH
30242: LD_INT 40
30244: PUSH
30245: LD_INT 41
30247: PUSH
30248: LD_INT 42
30250: PUSH
30251: LD_INT 43
30253: PUSH
30254: LD_INT 48
30256: PUSH
30257: LD_INT 49
30259: PUSH
30260: LD_INT 50
30262: PUSH
30263: LD_INT 51
30265: PUSH
30266: LD_INT 52
30268: PUSH
30269: LD_INT 53
30271: PUSH
30272: LD_INT 54
30274: PUSH
30275: LD_INT 55
30277: PUSH
30278: LD_INT 56
30280: PUSH
30281: LD_INT 60
30283: PUSH
30284: LD_INT 61
30286: PUSH
30287: LD_INT 62
30289: PUSH
30290: LD_INT 66
30292: PUSH
30293: LD_INT 67
30295: PUSH
30296: LD_INT 68
30298: PUSH
30299: LD_INT 81
30301: PUSH
30302: LD_INT 82
30304: PUSH
30305: LD_INT 83
30307: PUSH
30308: LD_INT 84
30310: PUSH
30311: LD_INT 85
30313: PUSH
30314: LD_INT 87
30316: PUSH
30317: LD_INT 88
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
30376: GO 30609
30378: LD_INT 3
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30608
30386: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30387: LD_ADDR_VAR 0 4
30391: PUSH
30392: LD_INT 46
30394: PUSH
30395: LD_INT 47
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: LD_INT 82
30406: PUSH
30407: LD_INT 83
30409: PUSH
30410: LD_INT 84
30412: PUSH
30413: LD_INT 85
30415: PUSH
30416: LD_INT 86
30418: PUSH
30419: LD_INT 11
30421: PUSH
30422: LD_INT 9
30424: PUSH
30425: LD_INT 20
30427: PUSH
30428: LD_INT 19
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 24
30436: PUSH
30437: LD_INT 22
30439: PUSH
30440: LD_INT 25
30442: PUSH
30443: LD_INT 28
30445: PUSH
30446: LD_INT 29
30448: PUSH
30449: LD_INT 30
30451: PUSH
30452: LD_INT 31
30454: PUSH
30455: LD_INT 37
30457: PUSH
30458: LD_INT 38
30460: PUSH
30461: LD_INT 32
30463: PUSH
30464: LD_INT 27
30466: PUSH
30467: LD_INT 33
30469: PUSH
30470: LD_INT 69
30472: PUSH
30473: LD_INT 39
30475: PUSH
30476: LD_INT 34
30478: PUSH
30479: LD_INT 40
30481: PUSH
30482: LD_INT 71
30484: PUSH
30485: LD_INT 23
30487: PUSH
30488: LD_INT 44
30490: PUSH
30491: LD_INT 48
30493: PUSH
30494: LD_INT 49
30496: PUSH
30497: LD_INT 50
30499: PUSH
30500: LD_INT 51
30502: PUSH
30503: LD_INT 52
30505: PUSH
30506: LD_INT 53
30508: PUSH
30509: LD_INT 54
30511: PUSH
30512: LD_INT 55
30514: PUSH
30515: LD_INT 56
30517: PUSH
30518: LD_INT 57
30520: PUSH
30521: LD_INT 58
30523: PUSH
30524: LD_INT 59
30526: PUSH
30527: LD_INT 63
30529: PUSH
30530: LD_INT 64
30532: PUSH
30533: LD_INT 65
30535: PUSH
30536: LD_INT 82
30538: PUSH
30539: LD_INT 83
30541: PUSH
30542: LD_INT 84
30544: PUSH
30545: LD_INT 85
30547: PUSH
30548: LD_INT 86
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 30609
30608: POP
// if state > - 1 and state < 3 then
30609: LD_VAR 0 3
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: GREATER
30618: PUSH
30619: LD_VAR 0 3
30623: PUSH
30624: LD_INT 3
30626: LESS
30627: AND
30628: IFFALSE 30685
// for i in result do
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_VAR 0 4
30639: PUSH
30640: FOR_IN
30641: IFFALSE 30683
// if GetTech ( i , side ) <> state then
30643: LD_VAR 0 5
30647: PPUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 321
30657: PUSH
30658: LD_VAR 0 3
30662: NONEQUAL
30663: IFFALSE 30681
// result := result diff i ;
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: LD_VAR 0 4
30674: PUSH
30675: LD_VAR 0 5
30679: DIFF
30680: ST_TO_ADDR
30681: GO 30640
30683: POP
30684: POP
// end ;
30685: LD_VAR 0 4
30689: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30690: LD_INT 0
30692: PPUSH
30693: PPUSH
30694: PPUSH
// result := true ;
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 1
30702: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30703: LD_ADDR_VAR 0 5
30707: PUSH
30708: LD_VAR 0 2
30712: PPUSH
30713: CALL_OW 480
30717: ST_TO_ADDR
// if not tmp then
30718: LD_VAR 0 5
30722: NOT
30723: IFFALSE 30727
// exit ;
30725: GO 30776
// for i in tmp do
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_VAR 0 5
30736: PUSH
30737: FOR_IN
30738: IFFALSE 30774
// if GetTech ( i , side ) <> state_researched then
30740: LD_VAR 0 4
30744: PPUSH
30745: LD_VAR 0 1
30749: PPUSH
30750: CALL_OW 321
30754: PUSH
30755: LD_INT 2
30757: NONEQUAL
30758: IFFALSE 30772
// begin result := false ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 0
30767: ST_TO_ADDR
// exit ;
30768: POP
30769: POP
30770: GO 30776
// end ;
30772: GO 30737
30774: POP
30775: POP
// end ;
30776: LD_VAR 0 3
30780: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30781: LD_INT 0
30783: PPUSH
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30796: LD_VAR 0 1
30800: NOT
30801: PUSH
30802: LD_VAR 0 1
30806: PPUSH
30807: CALL_OW 257
30811: PUSH
30812: LD_INT 9
30814: NONEQUAL
30815: OR
30816: IFFALSE 30820
// exit ;
30818: GO 31393
// side := GetSide ( unit ) ;
30820: LD_ADDR_VAR 0 9
30824: PUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 255
30834: ST_TO_ADDR
// tech_space := tech_spacanom ;
30835: LD_ADDR_VAR 0 12
30839: PUSH
30840: LD_INT 29
30842: ST_TO_ADDR
// tech_time := tech_taurad ;
30843: LD_ADDR_VAR 0 13
30847: PUSH
30848: LD_INT 28
30850: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30851: LD_ADDR_VAR 0 11
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL_OW 310
30865: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30866: LD_VAR 0 11
30870: PPUSH
30871: CALL_OW 247
30875: PUSH
30876: LD_INT 2
30878: EQUAL
30879: IFFALSE 30883
// exit ;
30881: GO 31393
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30883: LD_ADDR_VAR 0 8
30887: PUSH
30888: LD_INT 81
30890: PUSH
30891: LD_VAR 0 9
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 21
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 8
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 31393
// if in_unit then
30935: LD_VAR 0 11
30939: IFFALSE 30963
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30941: LD_ADDR_VAR 0 10
30945: PUSH
30946: LD_VAR 0 8
30950: PPUSH
30951: LD_VAR 0 11
30955: PPUSH
30956: CALL_OW 74
30960: ST_TO_ADDR
30961: GO 30983
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30963: LD_ADDR_VAR 0 10
30967: PUSH
30968: LD_VAR 0 8
30972: PPUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL_OW 74
30982: ST_TO_ADDR
// if not enemy then
30983: LD_VAR 0 10
30987: NOT
30988: IFFALSE 30992
// exit ;
30990: GO 31393
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30992: LD_VAR 0 11
30996: PUSH
30997: LD_VAR 0 11
31001: PPUSH
31002: LD_VAR 0 10
31006: PPUSH
31007: CALL_OW 296
31011: PUSH
31012: LD_INT 13
31014: GREATER
31015: AND
31016: PUSH
31017: LD_VAR 0 1
31021: PPUSH
31022: LD_VAR 0 10
31026: PPUSH
31027: CALL_OW 296
31031: PUSH
31032: LD_INT 12
31034: GREATER
31035: OR
31036: IFFALSE 31040
// exit ;
31038: GO 31393
// missile := [ 1 ] ;
31040: LD_ADDR_VAR 0 14
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31051: LD_VAR 0 9
31055: PPUSH
31056: LD_VAR 0 12
31060: PPUSH
31061: CALL_OW 325
31065: IFFALSE 31094
// missile := Insert ( missile , missile + 1 , 2 ) ;
31067: LD_ADDR_VAR 0 14
31071: PUSH
31072: LD_VAR 0 14
31076: PPUSH
31077: LD_VAR 0 14
31081: PUSH
31082: LD_INT 1
31084: PLUS
31085: PPUSH
31086: LD_INT 2
31088: PPUSH
31089: CALL_OW 2
31093: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31094: LD_VAR 0 9
31098: PPUSH
31099: LD_VAR 0 13
31103: PPUSH
31104: CALL_OW 325
31108: PUSH
31109: LD_VAR 0 10
31113: PPUSH
31114: CALL_OW 255
31118: PPUSH
31119: LD_VAR 0 13
31123: PPUSH
31124: CALL_OW 325
31128: NOT
31129: AND
31130: IFFALSE 31159
// missile := Insert ( missile , missile + 1 , 3 ) ;
31132: LD_ADDR_VAR 0 14
31136: PUSH
31137: LD_VAR 0 14
31141: PPUSH
31142: LD_VAR 0 14
31146: PUSH
31147: LD_INT 1
31149: PLUS
31150: PPUSH
31151: LD_INT 3
31153: PPUSH
31154: CALL_OW 2
31158: ST_TO_ADDR
// if missile < 2 then
31159: LD_VAR 0 14
31163: PUSH
31164: LD_INT 2
31166: LESS
31167: IFFALSE 31171
// exit ;
31169: GO 31393
// x := GetX ( enemy ) ;
31171: LD_ADDR_VAR 0 4
31175: PUSH
31176: LD_VAR 0 10
31180: PPUSH
31181: CALL_OW 250
31185: ST_TO_ADDR
// y := GetY ( enemy ) ;
31186: LD_ADDR_VAR 0 5
31190: PUSH
31191: LD_VAR 0 10
31195: PPUSH
31196: CALL_OW 251
31200: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31201: LD_ADDR_VAR 0 6
31205: PUSH
31206: LD_VAR 0 4
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PPUSH
31215: LD_INT 1
31217: PPUSH
31218: CALL_OW 12
31222: PLUS
31223: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31224: LD_ADDR_VAR 0 7
31228: PUSH
31229: LD_VAR 0 5
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PPUSH
31238: LD_INT 1
31240: PPUSH
31241: CALL_OW 12
31245: PLUS
31246: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31247: LD_VAR 0 6
31251: PPUSH
31252: LD_VAR 0 7
31256: PPUSH
31257: CALL_OW 488
31261: NOT
31262: IFFALSE 31284
// begin _x := x ;
31264: LD_ADDR_VAR 0 6
31268: PUSH
31269: LD_VAR 0 4
31273: ST_TO_ADDR
// _y := y ;
31274: LD_ADDR_VAR 0 7
31278: PUSH
31279: LD_VAR 0 5
31283: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_INT 1
31291: PPUSH
31292: LD_VAR 0 14
31296: PPUSH
31297: CALL_OW 12
31301: ST_TO_ADDR
// case i of 1 :
31302: LD_VAR 0 3
31306: PUSH
31307: LD_INT 1
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31332
31315: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31316: LD_VAR 0 1
31320: PPUSH
31321: LD_VAR 0 10
31325: PPUSH
31326: CALL_OW 115
31330: GO 31393
31332: LD_INT 2
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31362
31340: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31341: LD_VAR 0 1
31345: PPUSH
31346: LD_VAR 0 6
31350: PPUSH
31351: LD_VAR 0 7
31355: PPUSH
31356: CALL_OW 153
31360: GO 31393
31362: LD_INT 3
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31392
31370: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31371: LD_VAR 0 1
31375: PPUSH
31376: LD_VAR 0 6
31380: PPUSH
31381: LD_VAR 0 7
31385: PPUSH
31386: CALL_OW 154
31390: GO 31393
31392: POP
// end ;
31393: LD_VAR 0 2
31397: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
// if not unit or not building then
31406: LD_VAR 0 1
31410: NOT
31411: PUSH
31412: LD_VAR 0 2
31416: NOT
31417: OR
31418: IFFALSE 31422
// exit ;
31420: GO 31580
// x := GetX ( building ) ;
31422: LD_ADDR_VAR 0 5
31426: PUSH
31427: LD_VAR 0 2
31431: PPUSH
31432: CALL_OW 250
31436: ST_TO_ADDR
// y := GetY ( building ) ;
31437: LD_ADDR_VAR 0 6
31441: PUSH
31442: LD_VAR 0 2
31446: PPUSH
31447: CALL_OW 251
31451: ST_TO_ADDR
// for i = 0 to 5 do
31452: LD_ADDR_VAR 0 4
31456: PUSH
31457: DOUBLE
31458: LD_INT 0
31460: DEC
31461: ST_TO_ADDR
31462: LD_INT 5
31464: PUSH
31465: FOR_TO
31466: IFFALSE 31578
// begin _x := ShiftX ( x , i , 3 ) ;
31468: LD_ADDR_VAR 0 7
31472: PUSH
31473: LD_VAR 0 5
31477: PPUSH
31478: LD_VAR 0 4
31482: PPUSH
31483: LD_INT 3
31485: PPUSH
31486: CALL_OW 272
31490: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31491: LD_ADDR_VAR 0 8
31495: PUSH
31496: LD_VAR 0 6
31500: PPUSH
31501: LD_VAR 0 4
31505: PPUSH
31506: LD_INT 3
31508: PPUSH
31509: CALL_OW 273
31513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31514: LD_VAR 0 7
31518: PPUSH
31519: LD_VAR 0 8
31523: PPUSH
31524: CALL_OW 488
31528: NOT
31529: IFFALSE 31533
// continue ;
31531: GO 31465
// if HexInfo ( _x , _y ) = 0 then
31533: LD_VAR 0 7
31537: PPUSH
31538: LD_VAR 0 8
31542: PPUSH
31543: CALL_OW 428
31547: PUSH
31548: LD_INT 0
31550: EQUAL
31551: IFFALSE 31576
// begin ComMoveXY ( unit , _x , _y ) ;
31553: LD_VAR 0 1
31557: PPUSH
31558: LD_VAR 0 7
31562: PPUSH
31563: LD_VAR 0 8
31567: PPUSH
31568: CALL_OW 111
// exit ;
31572: POP
31573: POP
31574: GO 31580
// end ; end ;
31576: GO 31465
31578: POP
31579: POP
// end ;
31580: LD_VAR 0 3
31584: RET
// export function ScanBase ( side , base_area ) ; begin
31585: LD_INT 0
31587: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31588: LD_ADDR_VAR 0 3
31592: PUSH
31593: LD_VAR 0 2
31597: PPUSH
31598: LD_INT 81
31600: PUSH
31601: LD_VAR 0 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 70
31614: ST_TO_ADDR
// end ;
31615: LD_VAR 0 3
31619: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
// result := false ;
31626: LD_ADDR_VAR 0 2
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// side := GetSide ( unit ) ;
31634: LD_ADDR_VAR 0 3
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 255
31648: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31649: LD_ADDR_VAR 0 4
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 248
31663: ST_TO_ADDR
// case nat of 1 :
31664: LD_VAR 0 4
31668: PUSH
31669: LD_INT 1
31671: DOUBLE
31672: EQUAL
31673: IFTRUE 31677
31675: GO 31688
31677: POP
// tech := tech_lassight ; 2 :
31678: LD_ADDR_VAR 0 5
31682: PUSH
31683: LD_INT 12
31685: ST_TO_ADDR
31686: GO 31727
31688: LD_INT 2
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31707
31696: POP
// tech := tech_mortar ; 3 :
31697: LD_ADDR_VAR 0 5
31701: PUSH
31702: LD_INT 41
31704: ST_TO_ADDR
31705: GO 31727
31707: LD_INT 3
31709: DOUBLE
31710: EQUAL
31711: IFTRUE 31715
31713: GO 31726
31715: POP
// tech := tech_bazooka ; end ;
31716: LD_ADDR_VAR 0 5
31720: PUSH
31721: LD_INT 44
31723: ST_TO_ADDR
31724: GO 31727
31726: POP
// if Researched ( side , tech ) then
31727: LD_VAR 0 3
31731: PPUSH
31732: LD_VAR 0 5
31736: PPUSH
31737: CALL_OW 325
31741: IFFALSE 31768
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31743: LD_ADDR_VAR 0 2
31747: PUSH
31748: LD_INT 5
31750: PUSH
31751: LD_INT 8
31753: PUSH
31754: LD_INT 9
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: PUSH
31762: LD_VAR 0 4
31766: ARRAY
31767: ST_TO_ADDR
// end ;
31768: LD_VAR 0 2
31772: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
31777: PPUSH
// if not mines then
31778: LD_VAR 0 2
31782: NOT
31783: IFFALSE 31787
// exit ;
31785: GO 31931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31787: LD_ADDR_VAR 0 5
31791: PUSH
31792: LD_INT 81
31794: PUSH
31795: LD_VAR 0 1
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 21
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PPUSH
31825: CALL_OW 69
31829: ST_TO_ADDR
// for i in mines do
31830: LD_ADDR_VAR 0 4
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: FOR_IN
31841: IFFALSE 31929
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31843: LD_VAR 0 4
31847: PUSH
31848: LD_INT 1
31850: ARRAY
31851: PPUSH
31852: LD_VAR 0 4
31856: PUSH
31857: LD_INT 2
31859: ARRAY
31860: PPUSH
31861: CALL_OW 458
31865: NOT
31866: IFFALSE 31870
// continue ;
31868: GO 31840
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31870: LD_VAR 0 4
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: PPUSH
31879: LD_VAR 0 4
31883: PUSH
31884: LD_INT 2
31886: ARRAY
31887: PPUSH
31888: CALL_OW 428
31892: PUSH
31893: LD_VAR 0 5
31897: IN
31898: IFFALSE 31927
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31900: LD_VAR 0 4
31904: PUSH
31905: LD_INT 1
31907: ARRAY
31908: PPUSH
31909: LD_VAR 0 4
31913: PUSH
31914: LD_INT 2
31916: ARRAY
31917: PPUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL_OW 456
// end ;
31927: GO 31840
31929: POP
31930: POP
// end ;
31931: LD_VAR 0 3
31935: RET
// export function Count ( array ) ; var i ; begin
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
// result := 0 ;
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: LD_INT 0
31947: ST_TO_ADDR
// for i in array do
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_VAR 0 1
31957: PUSH
31958: FOR_IN
31959: IFFALSE 31983
// if i then
31961: LD_VAR 0 3
31965: IFFALSE 31981
// result := result + 1 ;
31967: LD_ADDR_VAR 0 2
31971: PUSH
31972: LD_VAR 0 2
31976: PUSH
31977: LD_INT 1
31979: PLUS
31980: ST_TO_ADDR
31981: GO 31958
31983: POP
31984: POP
// end ;
31985: LD_VAR 0 2
31989: RET
// export function IsEmpty ( building ) ; begin
31990: LD_INT 0
31992: PPUSH
// if not building then
31993: LD_VAR 0 1
31997: NOT
31998: IFFALSE 32002
// exit ;
32000: GO 32045
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32002: LD_ADDR_VAR 0 2
32006: PUSH
32007: LD_VAR 0 1
32011: PUSH
32012: LD_INT 22
32014: PUSH
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL_OW 255
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 58
32031: PUSH
32032: EMPTY
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PPUSH
32039: CALL_OW 69
32043: IN
32044: ST_TO_ADDR
// end ;
32045: LD_VAR 0 2
32049: RET
// export function IsNotFull ( building ) ; begin
32050: LD_INT 0
32052: PPUSH
// if not building then
32053: LD_VAR 0 1
32057: NOT
32058: IFFALSE 32062
// exit ;
32060: GO 32081
// result := UnitsInside ( building ) < 6 ;
32062: LD_ADDR_VAR 0 2
32066: PUSH
32067: LD_VAR 0 1
32071: PPUSH
32072: CALL_OW 313
32076: PUSH
32077: LD_INT 6
32079: LESS
32080: ST_TO_ADDR
// end ;
32081: LD_VAR 0 2
32085: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32086: LD_INT 0
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
// tmp := [ ] ;
32092: LD_ADDR_VAR 0 3
32096: PUSH
32097: EMPTY
32098: ST_TO_ADDR
// list := [ ] ;
32099: LD_ADDR_VAR 0 5
32103: PUSH
32104: EMPTY
32105: ST_TO_ADDR
// for i = 16 to 25 do
32106: LD_ADDR_VAR 0 4
32110: PUSH
32111: DOUBLE
32112: LD_INT 16
32114: DEC
32115: ST_TO_ADDR
32116: LD_INT 25
32118: PUSH
32119: FOR_TO
32120: IFFALSE 32193
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32122: LD_ADDR_VAR 0 3
32126: PUSH
32127: LD_VAR 0 3
32131: PUSH
32132: LD_INT 22
32134: PUSH
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 255
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 91
32151: PUSH
32152: LD_VAR 0 1
32156: PUSH
32157: LD_INT 6
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 30
32167: PUSH
32168: LD_VAR 0 4
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: PPUSH
32185: CALL_OW 69
32189: ADD
32190: ST_TO_ADDR
32191: GO 32119
32193: POP
32194: POP
// for i = 1 to tmp do
32195: LD_ADDR_VAR 0 4
32199: PUSH
32200: DOUBLE
32201: LD_INT 1
32203: DEC
32204: ST_TO_ADDR
32205: LD_VAR 0 3
32209: PUSH
32210: FOR_TO
32211: IFFALSE 32299
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32213: LD_ADDR_VAR 0 5
32217: PUSH
32218: LD_VAR 0 5
32222: PUSH
32223: LD_VAR 0 3
32227: PUSH
32228: LD_VAR 0 4
32232: ARRAY
32233: PPUSH
32234: CALL_OW 266
32238: PUSH
32239: LD_VAR 0 3
32243: PUSH
32244: LD_VAR 0 4
32248: ARRAY
32249: PPUSH
32250: CALL_OW 250
32254: PUSH
32255: LD_VAR 0 3
32259: PUSH
32260: LD_VAR 0 4
32264: ARRAY
32265: PPUSH
32266: CALL_OW 251
32270: PUSH
32271: LD_VAR 0 3
32275: PUSH
32276: LD_VAR 0 4
32280: ARRAY
32281: PPUSH
32282: CALL_OW 254
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: ADD
32296: ST_TO_ADDR
32297: GO 32210
32299: POP
32300: POP
// result := list ;
32301: LD_ADDR_VAR 0 2
32305: PUSH
32306: LD_VAR 0 5
32310: ST_TO_ADDR
// end ;
32311: LD_VAR 0 2
32315: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
32323: PPUSH
32324: PPUSH
// if not factory then
32325: LD_VAR 0 1
32329: NOT
32330: IFFALSE 32334
// exit ;
32332: GO 32927
// if control = control_apeman then
32334: LD_VAR 0 4
32338: PUSH
32339: LD_INT 5
32341: EQUAL
32342: IFFALSE 32451
// begin tmp := UnitsInside ( factory ) ;
32344: LD_ADDR_VAR 0 8
32348: PUSH
32349: LD_VAR 0 1
32353: PPUSH
32354: CALL_OW 313
32358: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32359: LD_VAR 0 8
32363: PPUSH
32364: LD_INT 25
32366: PUSH
32367: LD_INT 12
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PPUSH
32374: CALL_OW 72
32378: NOT
32379: IFFALSE 32389
// control := control_manual ;
32381: LD_ADDR_VAR 0 4
32385: PUSH
32386: LD_INT 1
32388: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32389: LD_ADDR_VAR 0 8
32393: PUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: CALL 32086 0 1
32403: ST_TO_ADDR
// if tmp then
32404: LD_VAR 0 8
32408: IFFALSE 32451
// begin for i in tmp do
32410: LD_ADDR_VAR 0 7
32414: PUSH
32415: LD_VAR 0 8
32419: PUSH
32420: FOR_IN
32421: IFFALSE 32449
// if i [ 1 ] = b_ext_radio then
32423: LD_VAR 0 7
32427: PUSH
32428: LD_INT 1
32430: ARRAY
32431: PUSH
32432: LD_INT 22
32434: EQUAL
32435: IFFALSE 32447
// begin control := control_remote ;
32437: LD_ADDR_VAR 0 4
32441: PUSH
32442: LD_INT 2
32444: ST_TO_ADDR
// break ;
32445: GO 32449
// end ;
32447: GO 32420
32449: POP
32450: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32451: LD_VAR 0 1
32455: PPUSH
32456: LD_VAR 0 2
32460: PPUSH
32461: LD_VAR 0 3
32465: PPUSH
32466: LD_VAR 0 4
32470: PPUSH
32471: LD_VAR 0 5
32475: PPUSH
32476: CALL_OW 448
32480: IFFALSE 32515
// begin result := [ chassis , engine , control , weapon ] ;
32482: LD_ADDR_VAR 0 6
32486: PUSH
32487: LD_VAR 0 2
32491: PUSH
32492: LD_VAR 0 3
32496: PUSH
32497: LD_VAR 0 4
32501: PUSH
32502: LD_VAR 0 5
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: ST_TO_ADDR
// exit ;
32513: GO 32927
// end ; _chassis := AvailableChassisList ( factory ) ;
32515: LD_ADDR_VAR 0 9
32519: PUSH
32520: LD_VAR 0 1
32524: PPUSH
32525: CALL_OW 475
32529: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32530: LD_ADDR_VAR 0 11
32534: PUSH
32535: LD_VAR 0 1
32539: PPUSH
32540: CALL_OW 476
32544: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32545: LD_ADDR_VAR 0 12
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 477
32559: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32560: LD_ADDR_VAR 0 10
32564: PUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 478
32574: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32575: LD_VAR 0 9
32579: NOT
32580: PUSH
32581: LD_VAR 0 11
32585: NOT
32586: OR
32587: PUSH
32588: LD_VAR 0 12
32592: NOT
32593: OR
32594: PUSH
32595: LD_VAR 0 10
32599: NOT
32600: OR
32601: IFFALSE 32636
// begin result := [ chassis , engine , control , weapon ] ;
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_VAR 0 3
32617: PUSH
32618: LD_VAR 0 4
32622: PUSH
32623: LD_VAR 0 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
// exit ;
32634: GO 32927
// end ; if not chassis in _chassis then
32636: LD_VAR 0 2
32640: PUSH
32641: LD_VAR 0 9
32645: IN
32646: NOT
32647: IFFALSE 32673
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32649: LD_ADDR_VAR 0 2
32653: PUSH
32654: LD_VAR 0 9
32658: PUSH
32659: LD_INT 1
32661: PPUSH
32662: LD_VAR 0 9
32666: PPUSH
32667: CALL_OW 12
32671: ARRAY
32672: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 3
32682: PPUSH
32683: CALL 32932 0 2
32687: NOT
32688: IFFALSE 32747
// repeat engine := _engine [ 1 ] ;
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_VAR 0 11
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32704: LD_ADDR_VAR 0 11
32708: PUSH
32709: LD_VAR 0 11
32713: PPUSH
32714: LD_INT 1
32716: PPUSH
32717: CALL_OW 3
32721: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32722: LD_VAR 0 2
32726: PPUSH
32727: LD_VAR 0 3
32731: PPUSH
32732: CALL 32932 0 2
32736: PUSH
32737: LD_VAR 0 11
32741: PUSH
32742: EMPTY
32743: EQUAL
32744: OR
32745: IFFALSE 32690
// if not control in _control then
32747: LD_VAR 0 4
32751: PUSH
32752: LD_VAR 0 12
32756: IN
32757: NOT
32758: IFFALSE 32784
// control := _control [ rand ( 1 , _control ) ] ;
32760: LD_ADDR_VAR 0 4
32764: PUSH
32765: LD_VAR 0 12
32769: PUSH
32770: LD_INT 1
32772: PPUSH
32773: LD_VAR 0 12
32777: PPUSH
32778: CALL_OW 12
32782: ARRAY
32783: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_VAR 0 5
32793: PPUSH
32794: CALL 33152 0 2
32798: NOT
32799: IFFALSE 32858
// repeat weapon := _weapon [ 1 ] ;
32801: LD_ADDR_VAR 0 5
32805: PUSH
32806: LD_VAR 0 10
32810: PUSH
32811: LD_INT 1
32813: ARRAY
32814: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32815: LD_ADDR_VAR 0 10
32819: PUSH
32820: LD_VAR 0 10
32824: PPUSH
32825: LD_INT 1
32827: PPUSH
32828: CALL_OW 3
32832: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 5
32842: PPUSH
32843: CALL 33152 0 2
32847: PUSH
32848: LD_VAR 0 10
32852: PUSH
32853: EMPTY
32854: EQUAL
32855: OR
32856: IFFALSE 32801
// result := [ ] ;
32858: LD_ADDR_VAR 0 6
32862: PUSH
32863: EMPTY
32864: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32865: LD_VAR 0 1
32869: PPUSH
32870: LD_VAR 0 2
32874: PPUSH
32875: LD_VAR 0 3
32879: PPUSH
32880: LD_VAR 0 4
32884: PPUSH
32885: LD_VAR 0 5
32889: PPUSH
32890: CALL_OW 448
32894: IFFALSE 32927
// result := [ chassis , engine , control , weapon ] ;
32896: LD_ADDR_VAR 0 6
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_VAR 0 3
32910: PUSH
32911: LD_VAR 0 4
32915: PUSH
32916: LD_VAR 0 5
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// end ;
32927: LD_VAR 0 6
32931: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32932: LD_INT 0
32934: PPUSH
// if not chassis or not engine then
32935: LD_VAR 0 1
32939: NOT
32940: PUSH
32941: LD_VAR 0 2
32945: NOT
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33147
// case engine of engine_solar :
32951: LD_VAR 0 2
32955: PUSH
32956: LD_INT 2
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 33002
32964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 11
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 13
32978: PUSH
32979: LD_INT 14
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
33000: GO 33131
33002: LD_INT 1
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33072
33010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33011: LD_ADDR_VAR 0 3
33015: PUSH
33016: LD_INT 11
33018: PUSH
33019: LD_INT 12
33021: PUSH
33022: LD_INT 13
33024: PUSH
33025: LD_INT 14
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: LD_INT 5
33042: PUSH
33043: LD_INT 21
33045: PUSH
33046: LD_INT 23
33048: PUSH
33049: LD_INT 22
33051: PUSH
33052: LD_INT 24
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
33070: GO 33131
33072: LD_INT 3
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33130
33080: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_INT 13
33088: PUSH
33089: LD_INT 14
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 4
33100: PUSH
33101: LD_INT 5
33103: PUSH
33104: LD_INT 21
33106: PUSH
33107: LD_INT 22
33109: PUSH
33110: LD_INT 23
33112: PUSH
33113: LD_INT 24
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33131
33130: POP
// result := ( chassis in result ) ;
33131: LD_ADDR_VAR 0 3
33135: PUSH
33136: LD_VAR 0 1
33140: PUSH
33141: LD_VAR 0 3
33145: IN
33146: ST_TO_ADDR
// end ;
33147: LD_VAR 0 3
33151: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33152: LD_INT 0
33154: PPUSH
// if not chassis or not weapon then
33155: LD_VAR 0 1
33159: NOT
33160: PUSH
33161: LD_VAR 0 2
33165: NOT
33166: OR
33167: IFFALSE 33171
// exit ;
33169: GO 34233
// case weapon of us_machine_gun :
33171: LD_VAR 0 2
33175: PUSH
33176: LD_INT 2
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33214
33184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33185: LD_ADDR_VAR 0 3
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 5
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
33212: GO 34217
33214: LD_INT 3
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33252
33222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33223: LD_ADDR_VAR 0 3
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 5
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
33250: GO 34217
33252: LD_INT 11
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33260
33258: GO 33290
33260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33261: LD_ADDR_VAR 0 3
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: LD_INT 4
33277: PUSH
33278: LD_INT 5
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 34217
33290: LD_INT 4
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33324
33298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: LD_INT 3
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 5
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
33322: GO 34217
33324: LD_INT 5
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33358
33332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 3
33343: PUSH
33344: LD_INT 4
33346: PUSH
33347: LD_INT 5
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
33356: GO 34217
33358: LD_INT 9
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33392
33366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: LD_INT 5
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 34217
33392: LD_INT 7
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33426
33400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33401: LD_ADDR_VAR 0 3
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
33424: GO 34217
33426: LD_INT 12
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33460
33434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: LD_INT 4
33448: PUSH
33449: LD_INT 5
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 34217
33460: LD_INT 13
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33494
33468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: LD_INT 4
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
33492: GO 34217
33494: LD_INT 14
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33520
33502: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_INT 4
33510: PUSH
33511: LD_INT 5
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 34217
33520: LD_INT 6
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33546
33528: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 4
33536: PUSH
33537: LD_INT 5
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: ST_TO_ADDR
33544: GO 34217
33546: LD_INT 10
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33572
33554: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: ST_TO_ADDR
33570: GO 34217
33572: LD_INT 22
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33606
33580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_INT 11
33588: PUSH
33589: LD_INT 12
33591: PUSH
33592: LD_INT 13
33594: PUSH
33595: LD_INT 14
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
33604: GO 34217
33606: LD_INT 23
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33614
33612: GO 33640
33614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_INT 11
33622: PUSH
33623: LD_INT 12
33625: PUSH
33626: LD_INT 13
33628: PUSH
33629: LD_INT 14
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
33638: GO 34217
33640: LD_INT 24
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33674
33648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 11
33656: PUSH
33657: LD_INT 12
33659: PUSH
33660: LD_INT 13
33662: PUSH
33663: LD_INT 14
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: ST_TO_ADDR
33672: GO 34217
33674: LD_INT 30
33676: DOUBLE
33677: EQUAL
33678: IFTRUE 33682
33680: GO 33708
33682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 11
33690: PUSH
33691: LD_INT 12
33693: PUSH
33694: LD_INT 13
33696: PUSH
33697: LD_INT 14
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: ST_TO_ADDR
33706: GO 34217
33708: LD_INT 25
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33716
33714: GO 33734
33716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: LD_INT 13
33724: PUSH
33725: LD_INT 14
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: ST_TO_ADDR
33732: GO 34217
33734: LD_INT 27
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33760
33742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 13
33750: PUSH
33751: LD_INT 14
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: ST_TO_ADDR
33758: GO 34217
33760: LD_EXP 24
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33796
33770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 11
33778: PUSH
33779: LD_INT 12
33781: PUSH
33782: LD_INT 13
33784: PUSH
33785: LD_INT 14
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: ST_TO_ADDR
33794: GO 34217
33796: LD_INT 28
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33822
33804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_INT 13
33812: PUSH
33813: LD_INT 14
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: ST_TO_ADDR
33820: GO 34217
33822: LD_INT 29
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33848
33830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_INT 13
33838: PUSH
33839: LD_INT 14
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: ST_TO_ADDR
33846: GO 34217
33848: LD_INT 31
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33856
33854: GO 33874
33856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33857: LD_ADDR_VAR 0 3
33861: PUSH
33862: LD_INT 13
33864: PUSH
33865: LD_INT 14
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: ST_TO_ADDR
33872: GO 34217
33874: LD_INT 26
33876: DOUBLE
33877: EQUAL
33878: IFTRUE 33882
33880: GO 33900
33882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: LD_INT 14
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: ST_TO_ADDR
33898: GO 34217
33900: LD_INT 42
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33908
33906: GO 33934
33908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_INT 21
33916: PUSH
33917: LD_INT 22
33919: PUSH
33920: LD_INT 23
33922: PUSH
33923: LD_INT 24
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: ST_TO_ADDR
33932: GO 34217
33934: LD_INT 43
33936: DOUBLE
33937: EQUAL
33938: IFTRUE 33942
33940: GO 33968
33942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33943: LD_ADDR_VAR 0 3
33947: PUSH
33948: LD_INT 21
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_INT 23
33956: PUSH
33957: LD_INT 24
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
33966: GO 34217
33968: LD_INT 44
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 34002
33976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33977: LD_ADDR_VAR 0 3
33981: PUSH
33982: LD_INT 21
33984: PUSH
33985: LD_INT 22
33987: PUSH
33988: LD_INT 23
33990: PUSH
33991: LD_INT 24
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
34000: GO 34217
34002: LD_INT 45
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34036
34010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34011: LD_ADDR_VAR 0 3
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 22
34021: PUSH
34022: LD_INT 23
34024: PUSH
34025: LD_INT 24
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
34034: GO 34217
34036: LD_INT 49
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34070
34044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_INT 21
34052: PUSH
34053: LD_INT 22
34055: PUSH
34056: LD_INT 23
34058: PUSH
34059: LD_INT 24
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: ST_TO_ADDR
34068: GO 34217
34070: LD_INT 51
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34104
34078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_INT 21
34086: PUSH
34087: LD_INT 22
34089: PUSH
34090: LD_INT 23
34092: PUSH
34093: LD_INT 24
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
34102: GO 34217
34104: LD_INT 52
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34138
34112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34113: LD_ADDR_VAR 0 3
34117: PUSH
34118: LD_INT 21
34120: PUSH
34121: LD_INT 22
34123: PUSH
34124: LD_INT 23
34126: PUSH
34127: LD_INT 24
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
34136: GO 34217
34138: LD_INT 53
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34164
34146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34147: LD_ADDR_VAR 0 3
34151: PUSH
34152: LD_INT 23
34154: PUSH
34155: LD_INT 24
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: ST_TO_ADDR
34162: GO 34217
34164: LD_INT 46
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34172
34170: GO 34190
34172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_INT 23
34180: PUSH
34181: LD_INT 24
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: ST_TO_ADDR
34188: GO 34217
34190: LD_INT 47
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34216
34198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 23
34206: PUSH
34207: LD_INT 24
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: ST_TO_ADDR
34214: GO 34217
34216: POP
// result := ( chassis in result ) ;
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: LD_VAR 0 1
34226: PUSH
34227: LD_VAR 0 3
34231: IN
34232: ST_TO_ADDR
// end ;
34233: LD_VAR 0 3
34237: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
// result := array ;
34247: LD_ADDR_VAR 0 5
34251: PUSH
34252: LD_VAR 0 1
34256: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34257: LD_VAR 0 1
34261: NOT
34262: PUSH
34263: LD_VAR 0 2
34267: NOT
34268: OR
34269: PUSH
34270: LD_VAR 0 3
34274: NOT
34275: OR
34276: PUSH
34277: LD_VAR 0 2
34281: PUSH
34282: LD_VAR 0 1
34286: GREATER
34287: OR
34288: PUSH
34289: LD_VAR 0 3
34293: PUSH
34294: LD_VAR 0 1
34298: GREATER
34299: OR
34300: IFFALSE 34304
// exit ;
34302: GO 34600
// if direction then
34304: LD_VAR 0 4
34308: IFFALSE 34372
// begin d := 1 ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_INT 1
34317: ST_TO_ADDR
// if i_from > i_to then
34318: LD_VAR 0 2
34322: PUSH
34323: LD_VAR 0 3
34327: GREATER
34328: IFFALSE 34354
// length := ( array - i_from ) + i_to else
34330: LD_ADDR_VAR 0 11
34334: PUSH
34335: LD_VAR 0 1
34339: PUSH
34340: LD_VAR 0 2
34344: MINUS
34345: PUSH
34346: LD_VAR 0 3
34350: PLUS
34351: ST_TO_ADDR
34352: GO 34370
// length := i_to - i_from ;
34354: LD_ADDR_VAR 0 11
34358: PUSH
34359: LD_VAR 0 3
34363: PUSH
34364: LD_VAR 0 2
34368: MINUS
34369: ST_TO_ADDR
// end else
34370: GO 34433
// begin d := - 1 ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: ST_TO_ADDR
// if i_from > i_to then
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 3
34390: GREATER
34391: IFFALSE 34411
// length := i_from - i_to else
34393: LD_ADDR_VAR 0 11
34397: PUSH
34398: LD_VAR 0 2
34402: PUSH
34403: LD_VAR 0 3
34407: MINUS
34408: ST_TO_ADDR
34409: GO 34433
// length := ( array - i_to ) + i_from ;
34411: LD_ADDR_VAR 0 11
34415: PUSH
34416: LD_VAR 0 1
34420: PUSH
34421: LD_VAR 0 3
34425: MINUS
34426: PUSH
34427: LD_VAR 0 2
34431: PLUS
34432: ST_TO_ADDR
// end ; if not length then
34433: LD_VAR 0 11
34437: NOT
34438: IFFALSE 34442
// exit ;
34440: GO 34600
// tmp := array ;
34442: LD_ADDR_VAR 0 10
34446: PUSH
34447: LD_VAR 0 1
34451: ST_TO_ADDR
// for i = 1 to length do
34452: LD_ADDR_VAR 0 6
34456: PUSH
34457: DOUBLE
34458: LD_INT 1
34460: DEC
34461: ST_TO_ADDR
34462: LD_VAR 0 11
34466: PUSH
34467: FOR_TO
34468: IFFALSE 34588
// begin for j = 1 to array do
34470: LD_ADDR_VAR 0 7
34474: PUSH
34475: DOUBLE
34476: LD_INT 1
34478: DEC
34479: ST_TO_ADDR
34480: LD_VAR 0 1
34484: PUSH
34485: FOR_TO
34486: IFFALSE 34574
// begin k := j + d ;
34488: LD_ADDR_VAR 0 8
34492: PUSH
34493: LD_VAR 0 7
34497: PUSH
34498: LD_VAR 0 9
34502: PLUS
34503: ST_TO_ADDR
// if k > array then
34504: LD_VAR 0 8
34508: PUSH
34509: LD_VAR 0 1
34513: GREATER
34514: IFFALSE 34524
// k := 1 ;
34516: LD_ADDR_VAR 0 8
34520: PUSH
34521: LD_INT 1
34523: ST_TO_ADDR
// if not k then
34524: LD_VAR 0 8
34528: NOT
34529: IFFALSE 34541
// k := array ;
34531: LD_ADDR_VAR 0 8
34535: PUSH
34536: LD_VAR 0 1
34540: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34541: LD_ADDR_VAR 0 10
34545: PUSH
34546: LD_VAR 0 10
34550: PPUSH
34551: LD_VAR 0 8
34555: PPUSH
34556: LD_VAR 0 1
34560: PUSH
34561: LD_VAR 0 7
34565: ARRAY
34566: PPUSH
34567: CALL_OW 1
34571: ST_TO_ADDR
// end ;
34572: GO 34485
34574: POP
34575: POP
// array := tmp ;
34576: LD_ADDR_VAR 0 1
34580: PUSH
34581: LD_VAR 0 10
34585: ST_TO_ADDR
// end ;
34586: GO 34467
34588: POP
34589: POP
// result := array ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: LD_VAR 0 1
34599: ST_TO_ADDR
// end ;
34600: LD_VAR 0 5
34604: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34605: LD_INT 0
34607: PPUSH
34608: PPUSH
// result := 0 ;
34609: LD_ADDR_VAR 0 3
34613: PUSH
34614: LD_INT 0
34616: ST_TO_ADDR
// if not array or not value in array then
34617: LD_VAR 0 1
34621: NOT
34622: PUSH
34623: LD_VAR 0 2
34627: PUSH
34628: LD_VAR 0 1
34632: IN
34633: NOT
34634: OR
34635: IFFALSE 34639
// exit ;
34637: GO 34693
// for i = 1 to array do
34639: LD_ADDR_VAR 0 4
34643: PUSH
34644: DOUBLE
34645: LD_INT 1
34647: DEC
34648: ST_TO_ADDR
34649: LD_VAR 0 1
34653: PUSH
34654: FOR_TO
34655: IFFALSE 34691
// if value = array [ i ] then
34657: LD_VAR 0 2
34661: PUSH
34662: LD_VAR 0 1
34666: PUSH
34667: LD_VAR 0 4
34671: ARRAY
34672: EQUAL
34673: IFFALSE 34689
// begin result := i ;
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_VAR 0 4
34684: ST_TO_ADDR
// exit ;
34685: POP
34686: POP
34687: GO 34693
// end ;
34689: GO 34654
34691: POP
34692: POP
// end ;
34693: LD_VAR 0 3
34697: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34698: LD_INT 0
34700: PPUSH
// vc_chassis := chassis ;
34701: LD_ADDR_OWVAR 37
34705: PUSH
34706: LD_VAR 0 1
34710: ST_TO_ADDR
// vc_engine := engine ;
34711: LD_ADDR_OWVAR 39
34715: PUSH
34716: LD_VAR 0 2
34720: ST_TO_ADDR
// vc_control := control ;
34721: LD_ADDR_OWVAR 38
34725: PUSH
34726: LD_VAR 0 3
34730: ST_TO_ADDR
// vc_weapon := weapon ;
34731: LD_ADDR_OWVAR 40
34735: PUSH
34736: LD_VAR 0 4
34740: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34741: LD_ADDR_OWVAR 41
34745: PUSH
34746: LD_VAR 0 5
34750: ST_TO_ADDR
// end ;
34751: LD_VAR 0 6
34755: RET
// export function WantPlant ( unit ) ; var task ; begin
34756: LD_INT 0
34758: PPUSH
34759: PPUSH
// result := false ;
34760: LD_ADDR_VAR 0 2
34764: PUSH
34765: LD_INT 0
34767: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 437
34782: ST_TO_ADDR
// if task then
34783: LD_VAR 0 3
34787: IFFALSE 34815
// if task [ 1 ] [ 1 ] = p then
34789: LD_VAR 0 3
34793: PUSH
34794: LD_INT 1
34796: ARRAY
34797: PUSH
34798: LD_INT 1
34800: ARRAY
34801: PUSH
34802: LD_STRING p
34804: EQUAL
34805: IFFALSE 34815
// result := true ;
34807: LD_ADDR_VAR 0 2
34811: PUSH
34812: LD_INT 1
34814: ST_TO_ADDR
// end ;
34815: LD_VAR 0 2
34819: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34820: LD_INT 0
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
// if pos < 1 then
34826: LD_VAR 0 2
34830: PUSH
34831: LD_INT 1
34833: LESS
34834: IFFALSE 34838
// exit ;
34836: GO 35141
// if pos = 1 then
34838: LD_VAR 0 2
34842: PUSH
34843: LD_INT 1
34845: EQUAL
34846: IFFALSE 34879
// result := Replace ( arr , pos [ 1 ] , value ) else
34848: LD_ADDR_VAR 0 4
34852: PUSH
34853: LD_VAR 0 1
34857: PPUSH
34858: LD_VAR 0 2
34862: PUSH
34863: LD_INT 1
34865: ARRAY
34866: PPUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: CALL_OW 1
34876: ST_TO_ADDR
34877: GO 35141
// begin tmp := arr ;
34879: LD_ADDR_VAR 0 6
34883: PUSH
34884: LD_VAR 0 1
34888: ST_TO_ADDR
// s_arr := [ tmp ] ;
34889: LD_ADDR_VAR 0 7
34893: PUSH
34894: LD_VAR 0 6
34898: PUSH
34899: EMPTY
34900: LIST
34901: ST_TO_ADDR
// for i = 1 to pos - 1 do
34902: LD_ADDR_VAR 0 5
34906: PUSH
34907: DOUBLE
34908: LD_INT 1
34910: DEC
34911: ST_TO_ADDR
34912: LD_VAR 0 2
34916: PUSH
34917: LD_INT 1
34919: MINUS
34920: PUSH
34921: FOR_TO
34922: IFFALSE 34967
// begin tmp := tmp [ pos [ i ] ] ;
34924: LD_ADDR_VAR 0 6
34928: PUSH
34929: LD_VAR 0 6
34933: PUSH
34934: LD_VAR 0 2
34938: PUSH
34939: LD_VAR 0 5
34943: ARRAY
34944: ARRAY
34945: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34946: LD_ADDR_VAR 0 7
34950: PUSH
34951: LD_VAR 0 7
34955: PUSH
34956: LD_VAR 0 6
34960: PUSH
34961: EMPTY
34962: LIST
34963: ADD
34964: ST_TO_ADDR
// end ;
34965: GO 34921
34967: POP
34968: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34969: LD_ADDR_VAR 0 6
34973: PUSH
34974: LD_VAR 0 6
34978: PPUSH
34979: LD_VAR 0 2
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 3
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35000: LD_ADDR_VAR 0 7
35004: PUSH
35005: LD_VAR 0 7
35009: PPUSH
35010: LD_VAR 0 7
35014: PPUSH
35015: LD_VAR 0 6
35019: PPUSH
35020: CALL_OW 1
35024: ST_TO_ADDR
// for i = s_arr downto 2 do
35025: LD_ADDR_VAR 0 5
35029: PUSH
35030: DOUBLE
35031: LD_VAR 0 7
35035: INC
35036: ST_TO_ADDR
35037: LD_INT 2
35039: PUSH
35040: FOR_DOWNTO
35041: IFFALSE 35125
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35043: LD_ADDR_VAR 0 6
35047: PUSH
35048: LD_VAR 0 7
35052: PUSH
35053: LD_VAR 0 5
35057: PUSH
35058: LD_INT 1
35060: MINUS
35061: ARRAY
35062: PPUSH
35063: LD_VAR 0 2
35067: PUSH
35068: LD_VAR 0 5
35072: PUSH
35073: LD_INT 1
35075: MINUS
35076: ARRAY
35077: PPUSH
35078: LD_VAR 0 7
35082: PUSH
35083: LD_VAR 0 5
35087: ARRAY
35088: PPUSH
35089: CALL_OW 1
35093: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35094: LD_ADDR_VAR 0 7
35098: PUSH
35099: LD_VAR 0 7
35103: PPUSH
35104: LD_VAR 0 5
35108: PUSH
35109: LD_INT 1
35111: MINUS
35112: PPUSH
35113: LD_VAR 0 6
35117: PPUSH
35118: CALL_OW 1
35122: ST_TO_ADDR
// end ;
35123: GO 35040
35125: POP
35126: POP
// result := s_arr [ 1 ] ;
35127: LD_ADDR_VAR 0 4
35131: PUSH
35132: LD_VAR 0 7
35136: PUSH
35137: LD_INT 1
35139: ARRAY
35140: ST_TO_ADDR
// end ; end ;
35141: LD_VAR 0 4
35145: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35146: LD_INT 0
35148: PPUSH
35149: PPUSH
// if not list then
35150: LD_VAR 0 1
35154: NOT
35155: IFFALSE 35159
// exit ;
35157: GO 35250
// i := list [ pos1 ] ;
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: LD_VAR 0 1
35168: PUSH
35169: LD_VAR 0 2
35173: ARRAY
35174: ST_TO_ADDR
// if not i then
35175: LD_VAR 0 5
35179: NOT
35180: IFFALSE 35184
// exit ;
35182: GO 35250
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35184: LD_ADDR_VAR 0 1
35188: PUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: LD_VAR 0 2
35198: PPUSH
35199: LD_VAR 0 1
35203: PUSH
35204: LD_VAR 0 3
35208: ARRAY
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35215: LD_ADDR_VAR 0 1
35219: PUSH
35220: LD_VAR 0 1
35224: PPUSH
35225: LD_VAR 0 3
35229: PPUSH
35230: LD_VAR 0 5
35234: PPUSH
35235: CALL_OW 1
35239: ST_TO_ADDR
// result := list ;
35240: LD_ADDR_VAR 0 4
35244: PUSH
35245: LD_VAR 0 1
35249: ST_TO_ADDR
// end ;
35250: LD_VAR 0 4
35254: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35255: LD_INT 0
35257: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35258: LD_ADDR_VAR 0 5
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 250
35272: PPUSH
35273: LD_VAR 0 1
35277: PPUSH
35278: CALL_OW 251
35282: PPUSH
35283: LD_VAR 0 2
35287: PPUSH
35288: LD_VAR 0 3
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: CALL 35308 0 5
35302: ST_TO_ADDR
// end ;
35303: LD_VAR 0 5
35307: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
// if not list then
35314: LD_VAR 0 3
35318: NOT
35319: IFFALSE 35323
// exit ;
35321: GO 35711
// result := [ ] ;
35323: LD_ADDR_VAR 0 6
35327: PUSH
35328: EMPTY
35329: ST_TO_ADDR
// for i in list do
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: LD_VAR 0 3
35339: PUSH
35340: FOR_IN
35341: IFFALSE 35543
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35343: LD_ADDR_VAR 0 9
35347: PUSH
35348: LD_VAR 0 7
35352: PPUSH
35353: LD_VAR 0 1
35357: PPUSH
35358: LD_VAR 0 2
35362: PPUSH
35363: CALL_OW 297
35367: ST_TO_ADDR
// if not result then
35368: LD_VAR 0 6
35372: NOT
35373: IFFALSE 35399
// result := [ [ i , tmp ] ] else
35375: LD_ADDR_VAR 0 6
35379: PUSH
35380: LD_VAR 0 7
35384: PUSH
35385: LD_VAR 0 9
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: ST_TO_ADDR
35397: GO 35541
// begin if result [ result ] [ 2 ] < tmp then
35399: LD_VAR 0 6
35403: PUSH
35404: LD_VAR 0 6
35408: ARRAY
35409: PUSH
35410: LD_INT 2
35412: ARRAY
35413: PUSH
35414: LD_VAR 0 9
35418: LESS
35419: IFFALSE 35461
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35421: LD_ADDR_VAR 0 6
35425: PUSH
35426: LD_VAR 0 6
35430: PPUSH
35431: LD_VAR 0 6
35435: PUSH
35436: LD_INT 1
35438: PLUS
35439: PPUSH
35440: LD_VAR 0 7
35444: PUSH
35445: LD_VAR 0 9
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PPUSH
35454: CALL_OW 2
35458: ST_TO_ADDR
35459: GO 35541
// for j = 1 to result do
35461: LD_ADDR_VAR 0 8
35465: PUSH
35466: DOUBLE
35467: LD_INT 1
35469: DEC
35470: ST_TO_ADDR
35471: LD_VAR 0 6
35475: PUSH
35476: FOR_TO
35477: IFFALSE 35539
// begin if tmp < result [ j ] [ 2 ] then
35479: LD_VAR 0 9
35483: PUSH
35484: LD_VAR 0 6
35488: PUSH
35489: LD_VAR 0 8
35493: ARRAY
35494: PUSH
35495: LD_INT 2
35497: ARRAY
35498: LESS
35499: IFFALSE 35537
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35501: LD_ADDR_VAR 0 6
35505: PUSH
35506: LD_VAR 0 6
35510: PPUSH
35511: LD_VAR 0 8
35515: PPUSH
35516: LD_VAR 0 7
35520: PUSH
35521: LD_VAR 0 9
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PPUSH
35530: CALL_OW 2
35534: ST_TO_ADDR
// break ;
35535: GO 35539
// end ; end ;
35537: GO 35476
35539: POP
35540: POP
// end ; end ;
35541: GO 35340
35543: POP
35544: POP
// if result and not asc then
35545: LD_VAR 0 6
35549: PUSH
35550: LD_VAR 0 4
35554: NOT
35555: AND
35556: IFFALSE 35631
// begin tmp := result ;
35558: LD_ADDR_VAR 0 9
35562: PUSH
35563: LD_VAR 0 6
35567: ST_TO_ADDR
// for i = tmp downto 1 do
35568: LD_ADDR_VAR 0 7
35572: PUSH
35573: DOUBLE
35574: LD_VAR 0 9
35578: INC
35579: ST_TO_ADDR
35580: LD_INT 1
35582: PUSH
35583: FOR_DOWNTO
35584: IFFALSE 35629
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35586: LD_ADDR_VAR 0 6
35590: PUSH
35591: LD_VAR 0 6
35595: PPUSH
35596: LD_VAR 0 9
35600: PUSH
35601: LD_VAR 0 7
35605: MINUS
35606: PUSH
35607: LD_INT 1
35609: PLUS
35610: PPUSH
35611: LD_VAR 0 9
35615: PUSH
35616: LD_VAR 0 7
35620: ARRAY
35621: PPUSH
35622: CALL_OW 1
35626: ST_TO_ADDR
35627: GO 35583
35629: POP
35630: POP
// end ; tmp := [ ] ;
35631: LD_ADDR_VAR 0 9
35635: PUSH
35636: EMPTY
35637: ST_TO_ADDR
// if mode then
35638: LD_VAR 0 5
35642: IFFALSE 35711
// begin for i = 1 to result do
35644: LD_ADDR_VAR 0 7
35648: PUSH
35649: DOUBLE
35650: LD_INT 1
35652: DEC
35653: ST_TO_ADDR
35654: LD_VAR 0 6
35658: PUSH
35659: FOR_TO
35660: IFFALSE 35699
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35662: LD_ADDR_VAR 0 9
35666: PUSH
35667: LD_VAR 0 9
35671: PPUSH
35672: LD_VAR 0 7
35676: PPUSH
35677: LD_VAR 0 6
35681: PUSH
35682: LD_VAR 0 7
35686: ARRAY
35687: PUSH
35688: LD_INT 1
35690: ARRAY
35691: PPUSH
35692: CALL_OW 1
35696: ST_TO_ADDR
35697: GO 35659
35699: POP
35700: POP
// result := tmp ;
35701: LD_ADDR_VAR 0 6
35705: PUSH
35706: LD_VAR 0 9
35710: ST_TO_ADDR
// end ; end ;
35711: LD_VAR 0 6
35715: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35724: LD_ADDR_VAR 0 5
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// if not x or not y then
35746: LD_VAR 0 2
35750: NOT
35751: PUSH
35752: LD_VAR 0 3
35756: NOT
35757: OR
35758: IFFALSE 35762
// exit ;
35760: GO 37414
// if not range then
35762: LD_VAR 0 4
35766: NOT
35767: IFFALSE 35777
// range := 10 ;
35769: LD_ADDR_VAR 0 4
35773: PUSH
35774: LD_INT 10
35776: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35777: LD_ADDR_VAR 0 8
35781: PUSH
35782: LD_INT 81
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 92
35796: PUSH
35797: LD_VAR 0 2
35801: PUSH
35802: LD_VAR 0 3
35806: PUSH
35807: LD_VAR 0 4
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: LD_INT 21
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: PPUSH
35840: CALL_OW 69
35844: ST_TO_ADDR
// if not tmp then
35845: LD_VAR 0 8
35849: NOT
35850: IFFALSE 35854
// exit ;
35852: GO 37414
// for i in tmp do
35854: LD_ADDR_VAR 0 6
35858: PUSH
35859: LD_VAR 0 8
35863: PUSH
35864: FOR_IN
35865: IFFALSE 37389
// begin points := [ 0 , 0 , 0 ] ;
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: ST_TO_ADDR
// bpoints := 1 ;
35886: LD_ADDR_VAR 0 10
35890: PUSH
35891: LD_INT 1
35893: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 247
35903: PUSH
35904: LD_INT 1
35906: DOUBLE
35907: EQUAL
35908: IFTRUE 35912
35910: GO 36490
35912: POP
// begin if GetClass ( i ) = 1 then
35913: LD_VAR 0 6
35917: PPUSH
35918: CALL_OW 257
35922: PUSH
35923: LD_INT 1
35925: EQUAL
35926: IFFALSE 35947
// points := [ 10 , 5 , 3 ] ;
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: LD_INT 10
35935: PUSH
35936: LD_INT 5
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35947: LD_VAR 0 6
35951: PPUSH
35952: CALL_OW 257
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 4
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: IN
35971: IFFALSE 35992
// points := [ 3 , 2 , 1 ] ;
35973: LD_ADDR_VAR 0 9
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35992: LD_VAR 0 6
35996: PPUSH
35997: CALL_OW 257
36001: PUSH
36002: LD_INT 5
36004: EQUAL
36005: IFFALSE 36026
// points := [ 130 , 5 , 2 ] ;
36007: LD_ADDR_VAR 0 9
36011: PUSH
36012: LD_INT 130
36014: PUSH
36015: LD_INT 5
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 8
36038: EQUAL
36039: IFFALSE 36060
// points := [ 35 , 35 , 30 ] ;
36041: LD_ADDR_VAR 0 9
36045: PUSH
36046: LD_INT 35
36048: PUSH
36049: LD_INT 35
36051: PUSH
36052: LD_INT 30
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36060: LD_VAR 0 6
36064: PPUSH
36065: CALL_OW 257
36069: PUSH
36070: LD_INT 9
36072: EQUAL
36073: IFFALSE 36094
// points := [ 20 , 55 , 40 ] ;
36075: LD_ADDR_VAR 0 9
36079: PUSH
36080: LD_INT 20
36082: PUSH
36083: LD_INT 55
36085: PUSH
36086: LD_INT 40
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 257
36103: PUSH
36104: LD_INT 12
36106: PUSH
36107: LD_INT 16
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: IN
36114: IFFALSE 36135
// points := [ 5 , 3 , 2 ] ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: LD_INT 5
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36135: LD_VAR 0 6
36139: PPUSH
36140: CALL_OW 257
36144: PUSH
36145: LD_INT 17
36147: EQUAL
36148: IFFALSE 36169
// points := [ 100 , 50 , 75 ] ;
36150: LD_ADDR_VAR 0 9
36154: PUSH
36155: LD_INT 100
36157: PUSH
36158: LD_INT 50
36160: PUSH
36161: LD_INT 75
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36169: LD_VAR 0 6
36173: PPUSH
36174: CALL_OW 257
36178: PUSH
36179: LD_INT 15
36181: EQUAL
36182: IFFALSE 36203
// points := [ 10 , 5 , 3 ] ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_INT 10
36191: PUSH
36192: LD_INT 5
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36203: LD_VAR 0 6
36207: PPUSH
36208: CALL_OW 257
36212: PUSH
36213: LD_INT 14
36215: EQUAL
36216: IFFALSE 36237
// points := [ 10 , 0 , 0 ] ;
36218: LD_ADDR_VAR 0 9
36222: PUSH
36223: LD_INT 10
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 257
36246: PUSH
36247: LD_INT 11
36249: EQUAL
36250: IFFALSE 36271
// points := [ 30 , 10 , 5 ] ;
36252: LD_ADDR_VAR 0 9
36256: PUSH
36257: LD_INT 30
36259: PUSH
36260: LD_INT 10
36262: PUSH
36263: LD_INT 5
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36271: LD_VAR 0 1
36275: PPUSH
36276: LD_INT 5
36278: PPUSH
36279: CALL_OW 321
36283: PUSH
36284: LD_INT 2
36286: EQUAL
36287: IFFALSE 36304
// bpoints := bpoints * 1.8 ;
36289: LD_ADDR_VAR 0 10
36293: PUSH
36294: LD_VAR 0 10
36298: PUSH
36299: LD_REAL  1.80000000000000E+0000
36302: MUL
36303: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36304: LD_VAR 0 6
36308: PPUSH
36309: CALL_OW 257
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 3
36322: PUSH
36323: LD_INT 4
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: IN
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_INT 51
36340: PPUSH
36341: CALL_OW 321
36345: PUSH
36346: LD_INT 2
36348: EQUAL
36349: AND
36350: IFFALSE 36367
// bpoints := bpoints * 1.2 ;
36352: LD_ADDR_VAR 0 10
36356: PUSH
36357: LD_VAR 0 10
36361: PUSH
36362: LD_REAL  1.20000000000000E+0000
36365: MUL
36366: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36367: LD_VAR 0 6
36371: PPUSH
36372: CALL_OW 257
36376: PUSH
36377: LD_INT 5
36379: PUSH
36380: LD_INT 7
36382: PUSH
36383: LD_INT 9
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: IN
36391: PUSH
36392: LD_VAR 0 1
36396: PPUSH
36397: LD_INT 52
36399: PPUSH
36400: CALL_OW 321
36404: PUSH
36405: LD_INT 2
36407: EQUAL
36408: AND
36409: IFFALSE 36426
// bpoints := bpoints * 1.5 ;
36411: LD_ADDR_VAR 0 10
36415: PUSH
36416: LD_VAR 0 10
36420: PUSH
36421: LD_REAL  1.50000000000000E+0000
36424: MUL
36425: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36426: LD_VAR 0 1
36430: PPUSH
36431: LD_INT 66
36433: PPUSH
36434: CALL_OW 321
36438: PUSH
36439: LD_INT 2
36441: EQUAL
36442: IFFALSE 36459
// bpoints := bpoints * 1.1 ;
36444: LD_ADDR_VAR 0 10
36448: PUSH
36449: LD_VAR 0 10
36453: PUSH
36454: LD_REAL  1.10000000000000E+0000
36457: MUL
36458: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36459: LD_ADDR_VAR 0 10
36463: PUSH
36464: LD_VAR 0 10
36468: PUSH
36469: LD_VAR 0 6
36473: PPUSH
36474: LD_INT 1
36476: PPUSH
36477: CALL_OW 259
36481: PUSH
36482: LD_REAL  1.15000000000000E+0000
36485: MUL
36486: MUL
36487: ST_TO_ADDR
// end ; unit_vehicle :
36488: GO 37318
36490: LD_INT 2
36492: DOUBLE
36493: EQUAL
36494: IFTRUE 36498
36496: GO 37306
36498: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36499: LD_VAR 0 6
36503: PPUSH
36504: CALL_OW 264
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 42
36514: PUSH
36515: LD_INT 24
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: IN
36523: IFFALSE 36544
// points := [ 25 , 5 , 3 ] ;
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_INT 25
36532: PUSH
36533: LD_INT 5
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36544: LD_VAR 0 6
36548: PPUSH
36549: CALL_OW 264
36553: PUSH
36554: LD_INT 4
36556: PUSH
36557: LD_INT 43
36559: PUSH
36560: LD_INT 25
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: IN
36568: IFFALSE 36589
// points := [ 40 , 15 , 5 ] ;
36570: LD_ADDR_VAR 0 9
36574: PUSH
36575: LD_INT 40
36577: PUSH
36578: LD_INT 15
36580: PUSH
36581: LD_INT 5
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36589: LD_VAR 0 6
36593: PPUSH
36594: CALL_OW 264
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: LD_INT 23
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: IN
36609: IFFALSE 36630
// points := [ 7 , 25 , 8 ] ;
36611: LD_ADDR_VAR 0 9
36615: PUSH
36616: LD_INT 7
36618: PUSH
36619: LD_INT 25
36621: PUSH
36622: LD_INT 8
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36630: LD_VAR 0 6
36634: PPUSH
36635: CALL_OW 264
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: LD_INT 27
36645: PUSH
36646: LD_INT 44
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: IN
36654: IFFALSE 36675
// points := [ 14 , 50 , 16 ] ;
36656: LD_ADDR_VAR 0 9
36660: PUSH
36661: LD_INT 14
36663: PUSH
36664: LD_INT 50
36666: PUSH
36667: LD_INT 16
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36675: LD_VAR 0 6
36679: PPUSH
36680: CALL_OW 264
36684: PUSH
36685: LD_INT 6
36687: PUSH
36688: LD_INT 46
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: IN
36695: IFFALSE 36716
// points := [ 32 , 120 , 70 ] ;
36697: LD_ADDR_VAR 0 9
36701: PUSH
36702: LD_INT 32
36704: PUSH
36705: LD_INT 120
36707: PUSH
36708: LD_INT 70
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36716: LD_VAR 0 6
36720: PPUSH
36721: CALL_OW 264
36725: PUSH
36726: LD_INT 7
36728: PUSH
36729: LD_INT 28
36731: PUSH
36732: LD_INT 45
36734: PUSH
36735: LD_EXP 24
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: IN
36746: IFFALSE 36767
// points := [ 35 , 20 , 45 ] ;
36748: LD_ADDR_VAR 0 9
36752: PUSH
36753: LD_INT 35
36755: PUSH
36756: LD_INT 20
36758: PUSH
36759: LD_INT 45
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36767: LD_VAR 0 6
36771: PPUSH
36772: CALL_OW 264
36776: PUSH
36777: LD_INT 47
36779: PUSH
36780: EMPTY
36781: LIST
36782: IN
36783: IFFALSE 36804
// points := [ 67 , 45 , 75 ] ;
36785: LD_ADDR_VAR 0 9
36789: PUSH
36790: LD_INT 67
36792: PUSH
36793: LD_INT 45
36795: PUSH
36796: LD_INT 75
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36804: LD_VAR 0 6
36808: PPUSH
36809: CALL_OW 264
36813: PUSH
36814: LD_INT 26
36816: PUSH
36817: EMPTY
36818: LIST
36819: IN
36820: IFFALSE 36841
// points := [ 120 , 30 , 80 ] ;
36822: LD_ADDR_VAR 0 9
36826: PUSH
36827: LD_INT 120
36829: PUSH
36830: LD_INT 30
36832: PUSH
36833: LD_INT 80
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36841: LD_VAR 0 6
36845: PPUSH
36846: CALL_OW 264
36850: PUSH
36851: LD_INT 22
36853: PUSH
36854: EMPTY
36855: LIST
36856: IN
36857: IFFALSE 36878
// points := [ 40 , 1 , 1 ] ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 40
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36878: LD_VAR 0 6
36882: PPUSH
36883: CALL_OW 264
36887: PUSH
36888: LD_INT 29
36890: PUSH
36891: EMPTY
36892: LIST
36893: IN
36894: IFFALSE 36915
// points := [ 70 , 200 , 400 ] ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_INT 70
36903: PUSH
36904: LD_INT 200
36906: PUSH
36907: LD_INT 400
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36915: LD_VAR 0 6
36919: PPUSH
36920: CALL_OW 264
36924: PUSH
36925: LD_INT 14
36927: PUSH
36928: LD_INT 53
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: IN
36935: IFFALSE 36956
// points := [ 40 , 10 , 20 ] ;
36937: LD_ADDR_VAR 0 9
36941: PUSH
36942: LD_INT 40
36944: PUSH
36945: LD_INT 10
36947: PUSH
36948: LD_INT 20
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36956: LD_VAR 0 6
36960: PPUSH
36961: CALL_OW 264
36965: PUSH
36966: LD_INT 9
36968: PUSH
36969: EMPTY
36970: LIST
36971: IN
36972: IFFALSE 36993
// points := [ 5 , 70 , 20 ] ;
36974: LD_ADDR_VAR 0 9
36978: PUSH
36979: LD_INT 5
36981: PUSH
36982: LD_INT 70
36984: PUSH
36985: LD_INT 20
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 264
37002: PUSH
37003: LD_INT 10
37005: PUSH
37006: EMPTY
37007: LIST
37008: IN
37009: IFFALSE 37030
// points := [ 35 , 110 , 70 ] ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_INT 35
37018: PUSH
37019: LD_INT 110
37021: PUSH
37022: LD_INT 70
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37030: LD_VAR 0 6
37034: PPUSH
37035: CALL_OW 265
37039: PUSH
37040: LD_INT 25
37042: EQUAL
37043: IFFALSE 37064
// points := [ 80 , 65 , 100 ] ;
37045: LD_ADDR_VAR 0 9
37049: PUSH
37050: LD_INT 80
37052: PUSH
37053: LD_INT 65
37055: PUSH
37056: LD_INT 100
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37064: LD_VAR 0 6
37068: PPUSH
37069: CALL_OW 263
37073: PUSH
37074: LD_INT 1
37076: EQUAL
37077: IFFALSE 37112
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37079: LD_ADDR_VAR 0 10
37083: PUSH
37084: LD_VAR 0 10
37088: PUSH
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL_OW 311
37098: PPUSH
37099: LD_INT 3
37101: PPUSH
37102: CALL_OW 259
37106: PUSH
37107: LD_INT 4
37109: MUL
37110: MUL
37111: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37112: LD_VAR 0 6
37116: PPUSH
37117: CALL_OW 263
37121: PUSH
37122: LD_INT 2
37124: EQUAL
37125: IFFALSE 37176
// begin j := IsControledBy ( i ) ;
37127: LD_ADDR_VAR 0 7
37131: PUSH
37132: LD_VAR 0 6
37136: PPUSH
37137: CALL_OW 312
37141: ST_TO_ADDR
// if j then
37142: LD_VAR 0 7
37146: IFFALSE 37176
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37148: LD_ADDR_VAR 0 10
37152: PUSH
37153: LD_VAR 0 10
37157: PUSH
37158: LD_VAR 0 7
37162: PPUSH
37163: LD_INT 3
37165: PPUSH
37166: CALL_OW 259
37170: PUSH
37171: LD_INT 3
37173: MUL
37174: MUL
37175: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37176: LD_VAR 0 6
37180: PPUSH
37181: CALL_OW 264
37185: PUSH
37186: LD_INT 5
37188: PUSH
37189: LD_INT 6
37191: PUSH
37192: LD_INT 46
37194: PUSH
37195: LD_INT 44
37197: PUSH
37198: LD_INT 47
37200: PUSH
37201: LD_INT 45
37203: PUSH
37204: LD_INT 28
37206: PUSH
37207: LD_INT 7
37209: PUSH
37210: LD_INT 27
37212: PUSH
37213: LD_INT 29
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: IN
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: LD_INT 52
37236: PPUSH
37237: CALL_OW 321
37241: PUSH
37242: LD_INT 2
37244: EQUAL
37245: AND
37246: IFFALSE 37263
// bpoints := bpoints * 1.2 ;
37248: LD_ADDR_VAR 0 10
37252: PUSH
37253: LD_VAR 0 10
37257: PUSH
37258: LD_REAL  1.20000000000000E+0000
37261: MUL
37262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37263: LD_VAR 0 6
37267: PPUSH
37268: CALL_OW 264
37272: PUSH
37273: LD_INT 6
37275: PUSH
37276: LD_INT 46
37278: PUSH
37279: LD_INT 47
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: IN
37287: IFFALSE 37304
// bpoints := bpoints * 1.2 ;
37289: LD_ADDR_VAR 0 10
37293: PUSH
37294: LD_VAR 0 10
37298: PUSH
37299: LD_REAL  1.20000000000000E+0000
37302: MUL
37303: ST_TO_ADDR
// end ; unit_building :
37304: GO 37318
37306: LD_INT 3
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37317
37314: POP
// ; end ;
37315: GO 37318
37317: POP
// for j = 1 to 3 do
37318: LD_ADDR_VAR 0 7
37322: PUSH
37323: DOUBLE
37324: LD_INT 1
37326: DEC
37327: ST_TO_ADDR
37328: LD_INT 3
37330: PUSH
37331: FOR_TO
37332: IFFALSE 37385
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37334: LD_ADDR_VAR 0 5
37338: PUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_VAR 0 7
37348: PPUSH
37349: LD_VAR 0 5
37353: PUSH
37354: LD_VAR 0 7
37358: ARRAY
37359: PUSH
37360: LD_VAR 0 9
37364: PUSH
37365: LD_VAR 0 7
37369: ARRAY
37370: PUSH
37371: LD_VAR 0 10
37375: MUL
37376: PLUS
37377: PPUSH
37378: CALL_OW 1
37382: ST_TO_ADDR
37383: GO 37331
37385: POP
37386: POP
// end ;
37387: GO 35864
37389: POP
37390: POP
// result := Replace ( result , 4 , tmp ) ;
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: LD_VAR 0 5
37400: PPUSH
37401: LD_INT 4
37403: PPUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: CALL_OW 1
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 5
37418: RET
// export function DangerAtRange ( unit , range ) ; begin
37419: LD_INT 0
37421: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37422: LD_ADDR_VAR 0 3
37426: PUSH
37427: LD_VAR 0 1
37431: PPUSH
37432: CALL_OW 255
37436: PPUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 250
37446: PPUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 251
37456: PPUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: CALL 35716 0 4
37466: ST_TO_ADDR
// end ;
37467: LD_VAR 0 3
37471: RET
// export function DangerInArea ( side , area ) ; begin
37472: LD_INT 0
37474: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37475: LD_ADDR_VAR 0 3
37479: PUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: LD_INT 81
37487: PUSH
37488: LD_VAR 0 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PPUSH
37497: CALL_OW 70
37501: ST_TO_ADDR
// end ;
37502: LD_VAR 0 3
37506: RET
// export function IsExtension ( b ) ; begin
37507: LD_INT 0
37509: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37510: LD_ADDR_VAR 0 2
37514: PUSH
37515: LD_VAR 0 1
37519: PUSH
37520: LD_INT 23
37522: PUSH
37523: LD_INT 20
37525: PUSH
37526: LD_INT 22
37528: PUSH
37529: LD_INT 17
37531: PUSH
37532: LD_INT 24
37534: PUSH
37535: LD_INT 21
37537: PUSH
37538: LD_INT 19
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: LD_INT 25
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: IN
37562: ST_TO_ADDR
// end ;
37563: LD_VAR 0 2
37567: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37568: LD_INT 0
37570: PPUSH
37571: PPUSH
37572: PPUSH
// result := [ ] ;
37573: LD_ADDR_VAR 0 4
37577: PUSH
37578: EMPTY
37579: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: LD_INT 21
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PPUSH
37600: CALL_OW 70
37604: ST_TO_ADDR
// if not tmp then
37605: LD_VAR 0 5
37609: NOT
37610: IFFALSE 37614
// exit ;
37612: GO 37678
// if checkLink then
37614: LD_VAR 0 3
37618: IFFALSE 37668
// begin for i in tmp do
37620: LD_ADDR_VAR 0 6
37624: PUSH
37625: LD_VAR 0 5
37629: PUSH
37630: FOR_IN
37631: IFFALSE 37666
// if GetBase ( i ) <> base then
37633: LD_VAR 0 6
37637: PPUSH
37638: CALL_OW 274
37642: PUSH
37643: LD_VAR 0 1
37647: NONEQUAL
37648: IFFALSE 37664
// ComLinkToBase ( base , i ) ;
37650: LD_VAR 0 1
37654: PPUSH
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 169
37664: GO 37630
37666: POP
37667: POP
// end ; result := tmp ;
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_VAR 0 5
37677: ST_TO_ADDR
// end ;
37678: LD_VAR 0 4
37682: RET
// export function ComComplete ( units , b ) ; var i ; begin
37683: LD_INT 0
37685: PPUSH
37686: PPUSH
// if not units then
37687: LD_VAR 0 1
37691: NOT
37692: IFFALSE 37696
// exit ;
37694: GO 37786
// for i in units do
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: FOR_IN
37707: IFFALSE 37784
// if BuildingStatus ( b ) = bs_build then
37709: LD_VAR 0 2
37713: PPUSH
37714: CALL_OW 461
37718: PUSH
37719: LD_INT 1
37721: EQUAL
37722: IFFALSE 37782
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37724: LD_VAR 0 4
37728: PPUSH
37729: LD_STRING h
37731: PUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 250
37741: PUSH
37742: LD_VAR 0 2
37746: PPUSH
37747: CALL_OW 251
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: PPUSH
37778: CALL_OW 446
37782: GO 37706
37784: POP
37785: POP
// end ;
37786: LD_VAR 0 3
37790: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37791: LD_INT 0
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37799: LD_VAR 0 1
37803: NOT
37804: PUSH
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL_OW 263
37814: PUSH
37815: LD_INT 2
37817: NONEQUAL
37818: OR
37819: IFFALSE 37823
// exit ;
37821: GO 38139
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37823: LD_ADDR_VAR 0 6
37827: PUSH
37828: LD_INT 22
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 255
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 30
37850: PUSH
37851: LD_INT 36
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 34
37860: PUSH
37861: LD_INT 31
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 69
37881: ST_TO_ADDR
// if not tmp then
37882: LD_VAR 0 6
37886: NOT
37887: IFFALSE 37891
// exit ;
37889: GO 38139
// result := [ ] ;
37891: LD_ADDR_VAR 0 2
37895: PUSH
37896: EMPTY
37897: ST_TO_ADDR
// for i in tmp do
37898: LD_ADDR_VAR 0 3
37902: PUSH
37903: LD_VAR 0 6
37907: PUSH
37908: FOR_IN
37909: IFFALSE 37980
// begin t := UnitsInside ( i ) ;
37911: LD_ADDR_VAR 0 4
37915: PUSH
37916: LD_VAR 0 3
37920: PPUSH
37921: CALL_OW 313
37925: ST_TO_ADDR
// if t then
37926: LD_VAR 0 4
37930: IFFALSE 37978
// for j in t do
37932: LD_ADDR_VAR 0 7
37936: PUSH
37937: LD_VAR 0 4
37941: PUSH
37942: FOR_IN
37943: IFFALSE 37976
// result := Replace ( result , result + 1 , j ) ;
37945: LD_ADDR_VAR 0 2
37949: PUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_INT 1
37962: PLUS
37963: PPUSH
37964: LD_VAR 0 7
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
37974: GO 37942
37976: POP
37977: POP
// end ;
37978: GO 37908
37980: POP
37981: POP
// if not result then
37982: LD_VAR 0 2
37986: NOT
37987: IFFALSE 37991
// exit ;
37989: GO 38139
// mech := result [ 1 ] ;
37991: LD_ADDR_VAR 0 5
37995: PUSH
37996: LD_VAR 0 2
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: ST_TO_ADDR
// if result > 1 then
38005: LD_VAR 0 2
38009: PUSH
38010: LD_INT 1
38012: GREATER
38013: IFFALSE 38125
// begin for i = 2 to result do
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: DOUBLE
38021: LD_INT 2
38023: DEC
38024: ST_TO_ADDR
38025: LD_VAR 0 2
38029: PUSH
38030: FOR_TO
38031: IFFALSE 38123
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38033: LD_ADDR_VAR 0 4
38037: PUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_VAR 0 3
38047: ARRAY
38048: PPUSH
38049: LD_INT 3
38051: PPUSH
38052: CALL_OW 259
38056: PUSH
38057: LD_VAR 0 2
38061: PUSH
38062: LD_VAR 0 3
38066: ARRAY
38067: PPUSH
38068: CALL_OW 432
38072: MINUS
38073: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38074: LD_VAR 0 4
38078: PUSH
38079: LD_VAR 0 5
38083: PPUSH
38084: LD_INT 3
38086: PPUSH
38087: CALL_OW 259
38091: PUSH
38092: LD_VAR 0 5
38096: PPUSH
38097: CALL_OW 432
38101: MINUS
38102: GREATEREQUAL
38103: IFFALSE 38121
// mech := result [ i ] ;
38105: LD_ADDR_VAR 0 5
38109: PUSH
38110: LD_VAR 0 2
38114: PUSH
38115: LD_VAR 0 3
38119: ARRAY
38120: ST_TO_ADDR
// end ;
38121: GO 38030
38123: POP
38124: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38125: LD_VAR 0 1
38129: PPUSH
38130: LD_VAR 0 5
38134: PPUSH
38135: CALL_OW 135
// end ;
38139: LD_VAR 0 2
38143: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38144: LD_INT 0
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
// result := [ ] ;
38159: LD_ADDR_VAR 0 7
38163: PUSH
38164: EMPTY
38165: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 266
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: IN
38186: NOT
38187: IFFALSE 38191
// exit ;
38189: GO 39825
// if name then
38191: LD_VAR 0 3
38195: IFFALSE 38211
// SetBName ( base_dep , name ) ;
38197: LD_VAR 0 1
38201: PPUSH
38202: LD_VAR 0 3
38206: PPUSH
38207: CALL_OW 500
// base := GetBase ( base_dep ) ;
38211: LD_ADDR_VAR 0 15
38215: PUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 274
38225: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38226: LD_ADDR_VAR 0 16
38230: PUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 255
38240: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38241: LD_ADDR_VAR 0 17
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: CALL_OW 248
38255: ST_TO_ADDR
// if sources then
38256: LD_VAR 0 5
38260: IFFALSE 38307
// for i = 1 to 3 do
38262: LD_ADDR_VAR 0 8
38266: PUSH
38267: DOUBLE
38268: LD_INT 1
38270: DEC
38271: ST_TO_ADDR
38272: LD_INT 3
38274: PUSH
38275: FOR_TO
38276: IFFALSE 38305
// AddResourceType ( base , i , sources [ i ] ) ;
38278: LD_VAR 0 15
38282: PPUSH
38283: LD_VAR 0 8
38287: PPUSH
38288: LD_VAR 0 5
38292: PUSH
38293: LD_VAR 0 8
38297: ARRAY
38298: PPUSH
38299: CALL_OW 276
38303: GO 38275
38305: POP
38306: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38307: LD_ADDR_VAR 0 18
38311: PUSH
38312: LD_VAR 0 15
38316: PPUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_INT 1
38324: PPUSH
38325: CALL 37568 0 3
38329: ST_TO_ADDR
// InitHc ;
38330: CALL_OW 19
// InitUc ;
38334: CALL_OW 18
// uc_side := side ;
38338: LD_ADDR_OWVAR 20
38342: PUSH
38343: LD_VAR 0 16
38347: ST_TO_ADDR
// uc_nation := nation ;
38348: LD_ADDR_OWVAR 21
38352: PUSH
38353: LD_VAR 0 17
38357: ST_TO_ADDR
// if buildings then
38358: LD_VAR 0 18
38362: IFFALSE 39684
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38364: LD_ADDR_VAR 0 19
38368: PUSH
38369: LD_VAR 0 18
38373: PPUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 30
38379: PUSH
38380: LD_INT 29
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 30
38389: PUSH
38390: LD_INT 30
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PPUSH
38402: CALL_OW 72
38406: ST_TO_ADDR
// if tmp then
38407: LD_VAR 0 19
38411: IFFALSE 38459
// for i in tmp do
38413: LD_ADDR_VAR 0 8
38417: PUSH
38418: LD_VAR 0 19
38422: PUSH
38423: FOR_IN
38424: IFFALSE 38457
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38426: LD_VAR 0 8
38430: PPUSH
38431: CALL_OW 250
38435: PPUSH
38436: LD_VAR 0 8
38440: PPUSH
38441: CALL_OW 251
38445: PPUSH
38446: LD_VAR 0 16
38450: PPUSH
38451: CALL_OW 441
38455: GO 38423
38457: POP
38458: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38459: LD_VAR 0 18
38463: PPUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 30
38469: PUSH
38470: LD_INT 32
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 33
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 72
38496: IFFALSE 38584
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38498: LD_ADDR_VAR 0 8
38502: PUSH
38503: LD_VAR 0 18
38507: PPUSH
38508: LD_INT 2
38510: PUSH
38511: LD_INT 30
38513: PUSH
38514: LD_INT 32
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: LD_INT 33
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: PPUSH
38536: CALL_OW 72
38540: PUSH
38541: FOR_IN
38542: IFFALSE 38582
// begin if not GetBWeapon ( i ) then
38544: LD_VAR 0 8
38548: PPUSH
38549: CALL_OW 269
38553: NOT
38554: IFFALSE 38580
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38556: LD_VAR 0 8
38560: PPUSH
38561: LD_VAR 0 8
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: CALL 39830 0 2
38575: PPUSH
38576: CALL_OW 431
// end ;
38580: GO 38541
38582: POP
38583: POP
// end ; for i = 1 to personel do
38584: LD_ADDR_VAR 0 8
38588: PUSH
38589: DOUBLE
38590: LD_INT 1
38592: DEC
38593: ST_TO_ADDR
38594: LD_VAR 0 6
38598: PUSH
38599: FOR_TO
38600: IFFALSE 39664
// begin if i > 4 then
38602: LD_VAR 0 8
38606: PUSH
38607: LD_INT 4
38609: GREATER
38610: IFFALSE 38614
// break ;
38612: GO 39664
// case i of 1 :
38614: LD_VAR 0 8
38618: PUSH
38619: LD_INT 1
38621: DOUBLE
38622: EQUAL
38623: IFTRUE 38627
38625: GO 38707
38627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38628: LD_ADDR_VAR 0 12
38632: PUSH
38633: LD_VAR 0 18
38637: PPUSH
38638: LD_INT 22
38640: PUSH
38641: LD_VAR 0 16
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 58
38652: PUSH
38653: EMPTY
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 30
38661: PUSH
38662: LD_INT 32
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_INT 4
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 30
38681: PUSH
38682: LD_INT 5
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: PPUSH
38700: CALL_OW 72
38704: ST_TO_ADDR
38705: GO 38929
38707: LD_INT 2
38709: DOUBLE
38710: EQUAL
38711: IFTRUE 38715
38713: GO 38777
38715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38716: LD_ADDR_VAR 0 12
38720: PUSH
38721: LD_VAR 0 18
38725: PPUSH
38726: LD_INT 22
38728: PUSH
38729: LD_VAR 0 16
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 30
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 30
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PPUSH
38770: CALL_OW 72
38774: ST_TO_ADDR
38775: GO 38929
38777: LD_INT 3
38779: DOUBLE
38780: EQUAL
38781: IFTRUE 38785
38783: GO 38847
38785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38786: LD_ADDR_VAR 0 12
38790: PUSH
38791: LD_VAR 0 18
38795: PPUSH
38796: LD_INT 22
38798: PUSH
38799: LD_VAR 0 16
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 30
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 30
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PPUSH
38840: CALL_OW 72
38844: ST_TO_ADDR
38845: GO 38929
38847: LD_INT 4
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38855
38853: GO 38928
38855: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38856: LD_ADDR_VAR 0 12
38860: PUSH
38861: LD_VAR 0 18
38865: PPUSH
38866: LD_INT 22
38868: PUSH
38869: LD_VAR 0 16
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 30
38883: PUSH
38884: LD_INT 6
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 30
38893: PUSH
38894: LD_INT 7
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 30
38903: PUSH
38904: LD_INT 8
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PPUSH
38921: CALL_OW 72
38925: ST_TO_ADDR
38926: GO 38929
38928: POP
// if i = 1 then
38929: LD_VAR 0 8
38933: PUSH
38934: LD_INT 1
38936: EQUAL
38937: IFFALSE 39048
// begin tmp := [ ] ;
38939: LD_ADDR_VAR 0 19
38943: PUSH
38944: EMPTY
38945: ST_TO_ADDR
// for j in f do
38946: LD_ADDR_VAR 0 9
38950: PUSH
38951: LD_VAR 0 12
38955: PUSH
38956: FOR_IN
38957: IFFALSE 39030
// if GetBType ( j ) = b_bunker then
38959: LD_VAR 0 9
38963: PPUSH
38964: CALL_OW 266
38968: PUSH
38969: LD_INT 32
38971: EQUAL
38972: IFFALSE 38999
// tmp := Insert ( tmp , 1 , j ) else
38974: LD_ADDR_VAR 0 19
38978: PUSH
38979: LD_VAR 0 19
38983: PPUSH
38984: LD_INT 1
38986: PPUSH
38987: LD_VAR 0 9
38991: PPUSH
38992: CALL_OW 2
38996: ST_TO_ADDR
38997: GO 39028
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38999: LD_ADDR_VAR 0 19
39003: PUSH
39004: LD_VAR 0 19
39008: PPUSH
39009: LD_VAR 0 19
39013: PUSH
39014: LD_INT 1
39016: PLUS
39017: PPUSH
39018: LD_VAR 0 9
39022: PPUSH
39023: CALL_OW 2
39027: ST_TO_ADDR
39028: GO 38956
39030: POP
39031: POP
// if tmp then
39032: LD_VAR 0 19
39036: IFFALSE 39048
// f := tmp ;
39038: LD_ADDR_VAR 0 12
39042: PUSH
39043: LD_VAR 0 19
39047: ST_TO_ADDR
// end ; x := personel [ i ] ;
39048: LD_ADDR_VAR 0 13
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: LD_VAR 0 8
39062: ARRAY
39063: ST_TO_ADDR
// if x = - 1 then
39064: LD_VAR 0 13
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: EQUAL
39073: IFFALSE 39282
// begin for j in f do
39075: LD_ADDR_VAR 0 9
39079: PUSH
39080: LD_VAR 0 12
39084: PUSH
39085: FOR_IN
39086: IFFALSE 39278
// repeat InitHc ;
39088: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39092: LD_VAR 0 9
39096: PPUSH
39097: CALL_OW 266
39101: PUSH
39102: LD_INT 5
39104: EQUAL
39105: IFFALSE 39175
// begin if UnitsInside ( j ) < 3 then
39107: LD_VAR 0 9
39111: PPUSH
39112: CALL_OW 313
39116: PUSH
39117: LD_INT 3
39119: LESS
39120: IFFALSE 39156
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39122: LD_INT 0
39124: PPUSH
39125: LD_INT 5
39127: PUSH
39128: LD_INT 8
39130: PUSH
39131: LD_INT 9
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: PUSH
39139: LD_VAR 0 17
39143: ARRAY
39144: PPUSH
39145: LD_VAR 0 4
39149: PPUSH
39150: CALL_OW 380
39154: GO 39173
// PrepareHuman ( false , i , skill ) ;
39156: LD_INT 0
39158: PPUSH
39159: LD_VAR 0 8
39163: PPUSH
39164: LD_VAR 0 4
39168: PPUSH
39169: CALL_OW 380
// end else
39173: GO 39192
// PrepareHuman ( false , i , skill ) ;
39175: LD_INT 0
39177: PPUSH
39178: LD_VAR 0 8
39182: PPUSH
39183: LD_VAR 0 4
39187: PPUSH
39188: CALL_OW 380
// un := CreateHuman ;
39192: LD_ADDR_VAR 0 14
39196: PUSH
39197: CALL_OW 44
39201: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39202: LD_ADDR_VAR 0 7
39206: PUSH
39207: LD_VAR 0 7
39211: PPUSH
39212: LD_INT 1
39214: PPUSH
39215: LD_VAR 0 14
39219: PPUSH
39220: CALL_OW 2
39224: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39225: LD_VAR 0 14
39229: PPUSH
39230: LD_VAR 0 9
39234: PPUSH
39235: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39239: LD_VAR 0 9
39243: PPUSH
39244: CALL_OW 313
39248: PUSH
39249: LD_INT 6
39251: EQUAL
39252: PUSH
39253: LD_VAR 0 9
39257: PPUSH
39258: CALL_OW 266
39262: PUSH
39263: LD_INT 32
39265: PUSH
39266: LD_INT 31
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: IN
39273: OR
39274: IFFALSE 39088
39276: GO 39085
39278: POP
39279: POP
// end else
39280: GO 39662
// for j = 1 to x do
39282: LD_ADDR_VAR 0 9
39286: PUSH
39287: DOUBLE
39288: LD_INT 1
39290: DEC
39291: ST_TO_ADDR
39292: LD_VAR 0 13
39296: PUSH
39297: FOR_TO
39298: IFFALSE 39660
// begin InitHc ;
39300: CALL_OW 19
// if not f then
39304: LD_VAR 0 12
39308: NOT
39309: IFFALSE 39398
// begin PrepareHuman ( false , i , skill ) ;
39311: LD_INT 0
39313: PPUSH
39314: LD_VAR 0 8
39318: PPUSH
39319: LD_VAR 0 4
39323: PPUSH
39324: CALL_OW 380
// un := CreateHuman ;
39328: LD_ADDR_VAR 0 14
39332: PUSH
39333: CALL_OW 44
39337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39338: LD_ADDR_VAR 0 7
39342: PUSH
39343: LD_VAR 0 7
39347: PPUSH
39348: LD_INT 1
39350: PPUSH
39351: LD_VAR 0 14
39355: PPUSH
39356: CALL_OW 2
39360: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39361: LD_VAR 0 14
39365: PPUSH
39366: LD_VAR 0 1
39370: PPUSH
39371: CALL_OW 250
39375: PPUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 251
39385: PPUSH
39386: LD_INT 10
39388: PPUSH
39389: LD_INT 0
39391: PPUSH
39392: CALL_OW 50
// continue ;
39396: GO 39297
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39398: LD_VAR 0 12
39402: PUSH
39403: LD_INT 1
39405: ARRAY
39406: PPUSH
39407: CALL_OW 313
39411: PUSH
39412: LD_VAR 0 12
39416: PUSH
39417: LD_INT 1
39419: ARRAY
39420: PPUSH
39421: CALL_OW 266
39425: PUSH
39426: LD_INT 32
39428: PUSH
39429: LD_INT 31
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: IN
39436: AND
39437: PUSH
39438: LD_VAR 0 12
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PPUSH
39447: CALL_OW 313
39451: PUSH
39452: LD_INT 6
39454: EQUAL
39455: OR
39456: IFFALSE 39476
// f := Delete ( f , 1 ) ;
39458: LD_ADDR_VAR 0 12
39462: PUSH
39463: LD_VAR 0 12
39467: PPUSH
39468: LD_INT 1
39470: PPUSH
39471: CALL_OW 3
39475: ST_TO_ADDR
// if not f then
39476: LD_VAR 0 12
39480: NOT
39481: IFFALSE 39499
// begin x := x + 2 ;
39483: LD_ADDR_VAR 0 13
39487: PUSH
39488: LD_VAR 0 13
39492: PUSH
39493: LD_INT 2
39495: PLUS
39496: ST_TO_ADDR
// continue ;
39497: GO 39297
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39499: LD_VAR 0 12
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: CALL_OW 266
39512: PUSH
39513: LD_INT 5
39515: EQUAL
39516: IFFALSE 39590
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39518: LD_VAR 0 12
39522: PUSH
39523: LD_INT 1
39525: ARRAY
39526: PPUSH
39527: CALL_OW 313
39531: PUSH
39532: LD_INT 3
39534: LESS
39535: IFFALSE 39571
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39537: LD_INT 0
39539: PPUSH
39540: LD_INT 5
39542: PUSH
39543: LD_INT 8
39545: PUSH
39546: LD_INT 9
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: PUSH
39554: LD_VAR 0 17
39558: ARRAY
39559: PPUSH
39560: LD_VAR 0 4
39564: PPUSH
39565: CALL_OW 380
39569: GO 39588
// PrepareHuman ( false , i , skill ) ;
39571: LD_INT 0
39573: PPUSH
39574: LD_VAR 0 8
39578: PPUSH
39579: LD_VAR 0 4
39583: PPUSH
39584: CALL_OW 380
// end else
39588: GO 39607
// PrepareHuman ( false , i , skill ) ;
39590: LD_INT 0
39592: PPUSH
39593: LD_VAR 0 8
39597: PPUSH
39598: LD_VAR 0 4
39602: PPUSH
39603: CALL_OW 380
// un := CreateHuman ;
39607: LD_ADDR_VAR 0 14
39611: PUSH
39612: CALL_OW 44
39616: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39617: LD_ADDR_VAR 0 7
39621: PUSH
39622: LD_VAR 0 7
39626: PPUSH
39627: LD_INT 1
39629: PPUSH
39630: LD_VAR 0 14
39634: PPUSH
39635: CALL_OW 2
39639: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39640: LD_VAR 0 14
39644: PPUSH
39645: LD_VAR 0 12
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: PPUSH
39654: CALL_OW 52
// end ;
39658: GO 39297
39660: POP
39661: POP
// end ;
39662: GO 38599
39664: POP
39665: POP
// result := result ^ buildings ;
39666: LD_ADDR_VAR 0 7
39670: PUSH
39671: LD_VAR 0 7
39675: PUSH
39676: LD_VAR 0 18
39680: ADD
39681: ST_TO_ADDR
// end else
39682: GO 39825
// begin for i = 1 to personel do
39684: LD_ADDR_VAR 0 8
39688: PUSH
39689: DOUBLE
39690: LD_INT 1
39692: DEC
39693: ST_TO_ADDR
39694: LD_VAR 0 6
39698: PUSH
39699: FOR_TO
39700: IFFALSE 39823
// begin if i > 4 then
39702: LD_VAR 0 8
39706: PUSH
39707: LD_INT 4
39709: GREATER
39710: IFFALSE 39714
// break ;
39712: GO 39823
// x := personel [ i ] ;
39714: LD_ADDR_VAR 0 13
39718: PUSH
39719: LD_VAR 0 6
39723: PUSH
39724: LD_VAR 0 8
39728: ARRAY
39729: ST_TO_ADDR
// if x = - 1 then
39730: LD_VAR 0 13
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: EQUAL
39739: IFFALSE 39743
// continue ;
39741: GO 39699
// PrepareHuman ( false , i , skill ) ;
39743: LD_INT 0
39745: PPUSH
39746: LD_VAR 0 8
39750: PPUSH
39751: LD_VAR 0 4
39755: PPUSH
39756: CALL_OW 380
// un := CreateHuman ;
39760: LD_ADDR_VAR 0 14
39764: PUSH
39765: CALL_OW 44
39769: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39770: LD_VAR 0 14
39774: PPUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 250
39784: PPUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 251
39794: PPUSH
39795: LD_INT 10
39797: PPUSH
39798: LD_INT 0
39800: PPUSH
39801: CALL_OW 50
// result := result ^ un ;
39805: LD_ADDR_VAR 0 7
39809: PUSH
39810: LD_VAR 0 7
39814: PUSH
39815: LD_VAR 0 14
39819: ADD
39820: ST_TO_ADDR
// end ;
39821: GO 39699
39823: POP
39824: POP
// end ; end ;
39825: LD_VAR 0 7
39829: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39830: LD_INT 0
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
// result := false ;
39848: LD_ADDR_VAR 0 3
39852: PUSH
39853: LD_INT 0
39855: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39856: LD_VAR 0 1
39860: NOT
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 266
39871: PUSH
39872: LD_INT 32
39874: PUSH
39875: LD_INT 33
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: IN
39882: NOT
39883: OR
39884: IFFALSE 39888
// exit ;
39886: GO 40997
// nat := GetNation ( tower ) ;
39888: LD_ADDR_VAR 0 12
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 248
39902: ST_TO_ADDR
// side := GetSide ( tower ) ;
39903: LD_ADDR_VAR 0 16
39907: PUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 255
39917: ST_TO_ADDR
// x := GetX ( tower ) ;
39918: LD_ADDR_VAR 0 10
39922: PUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 250
39932: ST_TO_ADDR
// y := GetY ( tower ) ;
39933: LD_ADDR_VAR 0 11
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 251
39947: ST_TO_ADDR
// if not x or not y then
39948: LD_VAR 0 10
39952: NOT
39953: PUSH
39954: LD_VAR 0 11
39958: NOT
39959: OR
39960: IFFALSE 39964
// exit ;
39962: GO 40997
// weapon := 0 ;
39964: LD_ADDR_VAR 0 18
39968: PUSH
39969: LD_INT 0
39971: ST_TO_ADDR
// fac_list := [ ] ;
39972: LD_ADDR_VAR 0 17
39976: PUSH
39977: EMPTY
39978: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39979: LD_ADDR_VAR 0 6
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 274
39993: PPUSH
39994: LD_VAR 0 2
39998: PPUSH
39999: LD_INT 0
40001: PPUSH
40002: CALL 37568 0 3
40006: PPUSH
40007: LD_INT 30
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PPUSH
40017: CALL_OW 72
40021: ST_TO_ADDR
// if not factories then
40022: LD_VAR 0 6
40026: NOT
40027: IFFALSE 40031
// exit ;
40029: GO 40997
// for i in factories do
40031: LD_ADDR_VAR 0 8
40035: PUSH
40036: LD_VAR 0 6
40040: PUSH
40041: FOR_IN
40042: IFFALSE 40067
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40044: LD_ADDR_VAR 0 17
40048: PUSH
40049: LD_VAR 0 17
40053: PUSH
40054: LD_VAR 0 8
40058: PPUSH
40059: CALL_OW 478
40063: UNION
40064: ST_TO_ADDR
40065: GO 40041
40067: POP
40068: POP
// if not fac_list then
40069: LD_VAR 0 17
40073: NOT
40074: IFFALSE 40078
// exit ;
40076: GO 40997
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40078: LD_ADDR_VAR 0 5
40082: PUSH
40083: LD_INT 4
40085: PUSH
40086: LD_INT 5
40088: PUSH
40089: LD_INT 9
40091: PUSH
40092: LD_INT 10
40094: PUSH
40095: LD_INT 6
40097: PUSH
40098: LD_INT 7
40100: PUSH
40101: LD_INT 11
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 27
40115: PUSH
40116: LD_INT 28
40118: PUSH
40119: LD_INT 26
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 43
40133: PUSH
40134: LD_INT 44
40136: PUSH
40137: LD_INT 46
40139: PUSH
40140: LD_INT 45
40142: PUSH
40143: LD_INT 47
40145: PUSH
40146: LD_INT 49
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: LIST
40161: PUSH
40162: LD_VAR 0 12
40166: ARRAY
40167: ST_TO_ADDR
// list := list isect fac_list ;
40168: LD_ADDR_VAR 0 5
40172: PUSH
40173: LD_VAR 0 5
40177: PUSH
40178: LD_VAR 0 17
40182: ISECT
40183: ST_TO_ADDR
// if not list then
40184: LD_VAR 0 5
40188: NOT
40189: IFFALSE 40193
// exit ;
40191: GO 40997
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40193: LD_VAR 0 12
40197: PUSH
40198: LD_INT 3
40200: EQUAL
40201: PUSH
40202: LD_INT 49
40204: PUSH
40205: LD_VAR 0 5
40209: IN
40210: AND
40211: PUSH
40212: LD_INT 31
40214: PPUSH
40215: LD_VAR 0 16
40219: PPUSH
40220: CALL_OW 321
40224: PUSH
40225: LD_INT 2
40227: EQUAL
40228: AND
40229: IFFALSE 40289
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40231: LD_INT 22
40233: PUSH
40234: LD_VAR 0 16
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 35
40245: PUSH
40246: LD_INT 49
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 91
40255: PUSH
40256: LD_VAR 0 1
40260: PUSH
40261: LD_INT 10
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: PPUSH
40274: CALL_OW 69
40278: NOT
40279: IFFALSE 40289
// weapon := ru_time_lapser ;
40281: LD_ADDR_VAR 0 18
40285: PUSH
40286: LD_INT 49
40288: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40289: LD_VAR 0 12
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: IN
40304: PUSH
40305: LD_INT 11
40307: PUSH
40308: LD_VAR 0 5
40312: IN
40313: PUSH
40314: LD_INT 30
40316: PUSH
40317: LD_VAR 0 5
40321: IN
40322: OR
40323: AND
40324: PUSH
40325: LD_INT 6
40327: PPUSH
40328: LD_VAR 0 16
40332: PPUSH
40333: CALL_OW 321
40337: PUSH
40338: LD_INT 2
40340: EQUAL
40341: AND
40342: IFFALSE 40507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40344: LD_INT 22
40346: PUSH
40347: LD_VAR 0 16
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: LD_INT 35
40361: PUSH
40362: LD_INT 11
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 35
40371: PUSH
40372: LD_INT 30
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 91
40386: PUSH
40387: LD_VAR 0 1
40391: PUSH
40392: LD_INT 18
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: PPUSH
40405: CALL_OW 69
40409: NOT
40410: PUSH
40411: LD_INT 22
40413: PUSH
40414: LD_VAR 0 16
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 30
40428: PUSH
40429: LD_INT 32
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 30
40438: PUSH
40439: LD_INT 33
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 91
40453: PUSH
40454: LD_VAR 0 1
40458: PUSH
40459: LD_INT 12
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: PPUSH
40475: CALL_OW 69
40479: PUSH
40480: LD_INT 2
40482: GREATER
40483: AND
40484: IFFALSE 40507
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40486: LD_ADDR_VAR 0 18
40490: PUSH
40491: LD_INT 11
40493: PUSH
40494: LD_INT 30
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_VAR 0 12
40505: ARRAY
40506: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40507: LD_VAR 0 18
40511: NOT
40512: PUSH
40513: LD_INT 40
40515: PPUSH
40516: LD_VAR 0 16
40520: PPUSH
40521: CALL_OW 321
40525: PUSH
40526: LD_INT 2
40528: EQUAL
40529: AND
40530: PUSH
40531: LD_INT 7
40533: PUSH
40534: LD_VAR 0 5
40538: IN
40539: PUSH
40540: LD_INT 28
40542: PUSH
40543: LD_VAR 0 5
40547: IN
40548: OR
40549: PUSH
40550: LD_INT 45
40552: PUSH
40553: LD_VAR 0 5
40557: IN
40558: OR
40559: AND
40560: IFFALSE 40814
// begin hex := GetHexInfo ( x , y ) ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_VAR 0 10
40571: PPUSH
40572: LD_VAR 0 11
40576: PPUSH
40577: CALL_OW 546
40581: ST_TO_ADDR
// if hex [ 1 ] then
40582: LD_VAR 0 4
40586: PUSH
40587: LD_INT 1
40589: ARRAY
40590: IFFALSE 40594
// exit ;
40592: GO 40997
// height := hex [ 2 ] ;
40594: LD_ADDR_VAR 0 15
40598: PUSH
40599: LD_VAR 0 4
40603: PUSH
40604: LD_INT 2
40606: ARRAY
40607: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40608: LD_ADDR_VAR 0 14
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 5
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// for i in tmp do
40631: LD_ADDR_VAR 0 8
40635: PUSH
40636: LD_VAR 0 14
40640: PUSH
40641: FOR_IN
40642: IFFALSE 40812
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40644: LD_ADDR_VAR 0 9
40648: PUSH
40649: LD_VAR 0 10
40653: PPUSH
40654: LD_VAR 0 8
40658: PPUSH
40659: LD_INT 5
40661: PPUSH
40662: CALL_OW 272
40666: PUSH
40667: LD_VAR 0 11
40671: PPUSH
40672: LD_VAR 0 8
40676: PPUSH
40677: LD_INT 5
40679: PPUSH
40680: CALL_OW 273
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40689: LD_VAR 0 9
40693: PUSH
40694: LD_INT 1
40696: ARRAY
40697: PPUSH
40698: LD_VAR 0 9
40702: PUSH
40703: LD_INT 2
40705: ARRAY
40706: PPUSH
40707: CALL_OW 488
40711: IFFALSE 40810
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40713: LD_ADDR_VAR 0 4
40717: PUSH
40718: LD_VAR 0 9
40722: PUSH
40723: LD_INT 1
40725: ARRAY
40726: PPUSH
40727: LD_VAR 0 9
40731: PUSH
40732: LD_INT 2
40734: ARRAY
40735: PPUSH
40736: CALL_OW 546
40740: ST_TO_ADDR
// if hex [ 1 ] then
40741: LD_VAR 0 4
40745: PUSH
40746: LD_INT 1
40748: ARRAY
40749: IFFALSE 40753
// continue ;
40751: GO 40641
// h := hex [ 2 ] ;
40753: LD_ADDR_VAR 0 13
40757: PUSH
40758: LD_VAR 0 4
40762: PUSH
40763: LD_INT 2
40765: ARRAY
40766: ST_TO_ADDR
// if h + 7 < height then
40767: LD_VAR 0 13
40771: PUSH
40772: LD_INT 7
40774: PLUS
40775: PUSH
40776: LD_VAR 0 15
40780: LESS
40781: IFFALSE 40810
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40783: LD_ADDR_VAR 0 18
40787: PUSH
40788: LD_INT 7
40790: PUSH
40791: LD_INT 28
40793: PUSH
40794: LD_INT 45
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: PUSH
40802: LD_VAR 0 12
40806: ARRAY
40807: ST_TO_ADDR
// break ;
40808: GO 40812
// end ; end ; end ;
40810: GO 40641
40812: POP
40813: POP
// end ; if not weapon then
40814: LD_VAR 0 18
40818: NOT
40819: IFFALSE 40879
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40821: LD_ADDR_VAR 0 5
40825: PUSH
40826: LD_VAR 0 5
40830: PUSH
40831: LD_INT 11
40833: PUSH
40834: LD_INT 30
40836: PUSH
40837: LD_INT 49
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: DIFF
40845: ST_TO_ADDR
// if not list then
40846: LD_VAR 0 5
40850: NOT
40851: IFFALSE 40855
// exit ;
40853: GO 40997
// weapon := list [ rand ( 1 , list ) ] ;
40855: LD_ADDR_VAR 0 18
40859: PUSH
40860: LD_VAR 0 5
40864: PUSH
40865: LD_INT 1
40867: PPUSH
40868: LD_VAR 0 5
40872: PPUSH
40873: CALL_OW 12
40877: ARRAY
40878: ST_TO_ADDR
// end ; if weapon then
40879: LD_VAR 0 18
40883: IFFALSE 40997
// begin tmp := CostOfWeapon ( weapon ) ;
40885: LD_ADDR_VAR 0 14
40889: PUSH
40890: LD_VAR 0 18
40894: PPUSH
40895: CALL_OW 451
40899: ST_TO_ADDR
// j := GetBase ( tower ) ;
40900: LD_ADDR_VAR 0 9
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 274
40914: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40915: LD_VAR 0 9
40919: PPUSH
40920: LD_INT 1
40922: PPUSH
40923: CALL_OW 275
40927: PUSH
40928: LD_VAR 0 14
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: GREATEREQUAL
40937: PUSH
40938: LD_VAR 0 9
40942: PPUSH
40943: LD_INT 2
40945: PPUSH
40946: CALL_OW 275
40950: PUSH
40951: LD_VAR 0 14
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: GREATEREQUAL
40960: AND
40961: PUSH
40962: LD_VAR 0 9
40966: PPUSH
40967: LD_INT 3
40969: PPUSH
40970: CALL_OW 275
40974: PUSH
40975: LD_VAR 0 14
40979: PUSH
40980: LD_INT 3
40982: ARRAY
40983: GREATEREQUAL
40984: AND
40985: IFFALSE 40997
// result := weapon ;
40987: LD_ADDR_VAR 0 3
40991: PUSH
40992: LD_VAR 0 18
40996: ST_TO_ADDR
// end ; end ;
40997: LD_VAR 0 3
41001: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41002: LD_INT 0
41004: PPUSH
41005: PPUSH
// result := true ;
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_INT 1
41013: ST_TO_ADDR
// if array1 = array2 then
41014: LD_VAR 0 1
41018: PUSH
41019: LD_VAR 0 2
41023: EQUAL
41024: IFFALSE 41084
// begin for i = 1 to array1 do
41026: LD_ADDR_VAR 0 4
41030: PUSH
41031: DOUBLE
41032: LD_INT 1
41034: DEC
41035: ST_TO_ADDR
41036: LD_VAR 0 1
41040: PUSH
41041: FOR_TO
41042: IFFALSE 41080
// if array1 [ i ] <> array2 [ i ] then
41044: LD_VAR 0 1
41048: PUSH
41049: LD_VAR 0 4
41053: ARRAY
41054: PUSH
41055: LD_VAR 0 2
41059: PUSH
41060: LD_VAR 0 4
41064: ARRAY
41065: NONEQUAL
41066: IFFALSE 41078
// begin result := false ;
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_INT 0
41075: ST_TO_ADDR
// break ;
41076: GO 41080
// end ;
41078: GO 41041
41080: POP
41081: POP
// end else
41082: GO 41092
// result := false ;
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_INT 0
41091: ST_TO_ADDR
// end ;
41092: LD_VAR 0 3
41096: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41097: LD_INT 0
41099: PPUSH
41100: PPUSH
// if not array1 or not array2 then
41101: LD_VAR 0 1
41105: NOT
41106: PUSH
41107: LD_VAR 0 2
41111: NOT
41112: OR
41113: IFFALSE 41117
// exit ;
41115: GO 41181
// result := true ;
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_INT 1
41124: ST_TO_ADDR
// for i = 1 to array1 do
41125: LD_ADDR_VAR 0 4
41129: PUSH
41130: DOUBLE
41131: LD_INT 1
41133: DEC
41134: ST_TO_ADDR
41135: LD_VAR 0 1
41139: PUSH
41140: FOR_TO
41141: IFFALSE 41179
// if array1 [ i ] <> array2 [ i ] then
41143: LD_VAR 0 1
41147: PUSH
41148: LD_VAR 0 4
41152: ARRAY
41153: PUSH
41154: LD_VAR 0 2
41158: PUSH
41159: LD_VAR 0 4
41163: ARRAY
41164: NONEQUAL
41165: IFFALSE 41177
// begin result := false ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 0
41174: ST_TO_ADDR
// break ;
41175: GO 41179
// end ;
41177: GO 41140
41179: POP
41180: POP
// end ;
41181: LD_VAR 0 3
41185: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41186: LD_INT 0
41188: PPUSH
41189: PPUSH
41190: PPUSH
// pom := GetBase ( fac ) ;
41191: LD_ADDR_VAR 0 5
41195: PUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 274
41205: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41206: LD_ADDR_VAR 0 4
41210: PUSH
41211: LD_VAR 0 2
41215: PUSH
41216: LD_INT 1
41218: ARRAY
41219: PPUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 2
41233: PUSH
41234: LD_INT 3
41236: ARRAY
41237: PPUSH
41238: LD_VAR 0 2
41242: PUSH
41243: LD_INT 4
41245: ARRAY
41246: PPUSH
41247: CALL_OW 449
41251: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41252: LD_ADDR_VAR 0 3
41256: PUSH
41257: LD_VAR 0 5
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: CALL_OW 275
41269: PUSH
41270: LD_VAR 0 4
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: GREATEREQUAL
41279: PUSH
41280: LD_VAR 0 5
41284: PPUSH
41285: LD_INT 2
41287: PPUSH
41288: CALL_OW 275
41292: PUSH
41293: LD_VAR 0 4
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: GREATEREQUAL
41302: AND
41303: PUSH
41304: LD_VAR 0 5
41308: PPUSH
41309: LD_INT 3
41311: PPUSH
41312: CALL_OW 275
41316: PUSH
41317: LD_VAR 0 4
41321: PUSH
41322: LD_INT 3
41324: ARRAY
41325: GREATEREQUAL
41326: AND
41327: ST_TO_ADDR
// end ;
41328: LD_VAR 0 3
41332: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
// pom := GetBase ( building ) ;
41339: LD_ADDR_VAR 0 3
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: CALL_OW 274
41353: ST_TO_ADDR
// if not pom then
41354: LD_VAR 0 3
41358: NOT
41359: IFFALSE 41363
// exit ;
41361: GO 41533
// btype := GetBType ( building ) ;
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 266
41377: ST_TO_ADDR
// if btype = b_armoury then
41378: LD_VAR 0 5
41382: PUSH
41383: LD_INT 4
41385: EQUAL
41386: IFFALSE 41396
// btype := b_barracks ;
41388: LD_ADDR_VAR 0 5
41392: PUSH
41393: LD_INT 5
41395: ST_TO_ADDR
// if btype = b_depot then
41396: LD_VAR 0 5
41400: PUSH
41401: LD_INT 0
41403: EQUAL
41404: IFFALSE 41414
// btype := b_warehouse ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_INT 1
41413: ST_TO_ADDR
// if btype = b_workshop then
41414: LD_VAR 0 5
41418: PUSH
41419: LD_INT 2
41421: EQUAL
41422: IFFALSE 41432
// btype := b_factory ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_INT 3
41431: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41432: LD_ADDR_VAR 0 4
41436: PUSH
41437: LD_VAR 0 5
41441: PPUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 248
41451: PPUSH
41452: CALL_OW 450
41456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41457: LD_ADDR_VAR 0 2
41461: PUSH
41462: LD_VAR 0 3
41466: PPUSH
41467: LD_INT 1
41469: PPUSH
41470: CALL_OW 275
41474: PUSH
41475: LD_VAR 0 4
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: GREATEREQUAL
41484: PUSH
41485: LD_VAR 0 3
41489: PPUSH
41490: LD_INT 2
41492: PPUSH
41493: CALL_OW 275
41497: PUSH
41498: LD_VAR 0 4
41502: PUSH
41503: LD_INT 2
41505: ARRAY
41506: GREATEREQUAL
41507: AND
41508: PUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: LD_INT 3
41516: PPUSH
41517: CALL_OW 275
41521: PUSH
41522: LD_VAR 0 4
41526: PUSH
41527: LD_INT 3
41529: ARRAY
41530: GREATEREQUAL
41531: AND
41532: ST_TO_ADDR
// end ;
41533: LD_VAR 0 2
41537: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41538: LD_INT 0
41540: PPUSH
41541: PPUSH
41542: PPUSH
// pom := GetBase ( building ) ;
41543: LD_ADDR_VAR 0 4
41547: PUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 274
41557: ST_TO_ADDR
// if not pom then
41558: LD_VAR 0 4
41562: NOT
41563: IFFALSE 41567
// exit ;
41565: GO 41668
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 248
41586: PPUSH
41587: CALL_OW 450
41591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_VAR 0 4
41601: PPUSH
41602: LD_INT 1
41604: PPUSH
41605: CALL_OW 275
41609: PUSH
41610: LD_VAR 0 5
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: GREATEREQUAL
41619: PUSH
41620: LD_VAR 0 4
41624: PPUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 275
41632: PUSH
41633: LD_VAR 0 5
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: GREATEREQUAL
41642: AND
41643: PUSH
41644: LD_VAR 0 4
41648: PPUSH
41649: LD_INT 3
41651: PPUSH
41652: CALL_OW 275
41656: PUSH
41657: LD_VAR 0 5
41661: PUSH
41662: LD_INT 3
41664: ARRAY
41665: GREATEREQUAL
41666: AND
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 3
41672: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
// result := false ;
41686: LD_ADDR_VAR 0 8
41690: PUSH
41691: LD_INT 0
41693: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41694: LD_VAR 0 5
41698: NOT
41699: PUSH
41700: LD_VAR 0 1
41704: NOT
41705: OR
41706: PUSH
41707: LD_VAR 0 2
41711: NOT
41712: OR
41713: PUSH
41714: LD_VAR 0 3
41718: NOT
41719: OR
41720: IFFALSE 41724
// exit ;
41722: GO 42538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41724: LD_ADDR_VAR 0 14
41728: PUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: LD_VAR 0 2
41738: PPUSH
41739: LD_VAR 0 3
41743: PPUSH
41744: LD_VAR 0 4
41748: PPUSH
41749: LD_VAR 0 5
41753: PUSH
41754: LD_INT 1
41756: ARRAY
41757: PPUSH
41758: CALL_OW 248
41762: PPUSH
41763: LD_INT 0
41765: PPUSH
41766: CALL 43775 0 6
41770: ST_TO_ADDR
// if not hexes then
41771: LD_VAR 0 14
41775: NOT
41776: IFFALSE 41780
// exit ;
41778: GO 42538
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41780: LD_ADDR_VAR 0 17
41784: PUSH
41785: LD_VAR 0 5
41789: PPUSH
41790: LD_INT 22
41792: PUSH
41793: LD_VAR 0 13
41797: PPUSH
41798: CALL_OW 255
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: LD_INT 30
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 30
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PPUSH
41839: CALL_OW 72
41843: ST_TO_ADDR
// for i = 1 to hexes do
41844: LD_ADDR_VAR 0 9
41848: PUSH
41849: DOUBLE
41850: LD_INT 1
41852: DEC
41853: ST_TO_ADDR
41854: LD_VAR 0 14
41858: PUSH
41859: FOR_TO
41860: IFFALSE 42536
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41862: LD_ADDR_VAR 0 13
41866: PUSH
41867: LD_VAR 0 14
41871: PUSH
41872: LD_VAR 0 9
41876: ARRAY
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PPUSH
41882: LD_VAR 0 14
41886: PUSH
41887: LD_VAR 0 9
41891: ARRAY
41892: PUSH
41893: LD_INT 2
41895: ARRAY
41896: PPUSH
41897: CALL_OW 428
41901: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41902: LD_VAR 0 14
41906: PUSH
41907: LD_VAR 0 9
41911: ARRAY
41912: PUSH
41913: LD_INT 1
41915: ARRAY
41916: PPUSH
41917: LD_VAR 0 14
41921: PUSH
41922: LD_VAR 0 9
41926: ARRAY
41927: PUSH
41928: LD_INT 2
41930: ARRAY
41931: PPUSH
41932: CALL_OW 351
41936: PUSH
41937: LD_VAR 0 14
41941: PUSH
41942: LD_VAR 0 9
41946: ARRAY
41947: PUSH
41948: LD_INT 1
41950: ARRAY
41951: PPUSH
41952: LD_VAR 0 14
41956: PUSH
41957: LD_VAR 0 9
41961: ARRAY
41962: PUSH
41963: LD_INT 2
41965: ARRAY
41966: PPUSH
41967: CALL_OW 488
41971: NOT
41972: OR
41973: PUSH
41974: LD_VAR 0 13
41978: PPUSH
41979: CALL_OW 247
41983: PUSH
41984: LD_INT 3
41986: EQUAL
41987: OR
41988: IFFALSE 41994
// exit ;
41990: POP
41991: POP
41992: GO 42538
// if not tmp then
41994: LD_VAR 0 13
41998: NOT
41999: IFFALSE 42003
// continue ;
42001: GO 41859
// result := true ;
42003: LD_ADDR_VAR 0 8
42007: PUSH
42008: LD_INT 1
42010: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42011: LD_VAR 0 6
42015: PUSH
42016: LD_VAR 0 13
42020: PPUSH
42021: CALL_OW 247
42025: PUSH
42026: LD_INT 2
42028: EQUAL
42029: AND
42030: PUSH
42031: LD_VAR 0 13
42035: PPUSH
42036: CALL_OW 263
42040: PUSH
42041: LD_INT 1
42043: EQUAL
42044: AND
42045: IFFALSE 42209
// begin if IsDrivenBy ( tmp ) then
42047: LD_VAR 0 13
42051: PPUSH
42052: CALL_OW 311
42056: IFFALSE 42060
// continue ;
42058: GO 41859
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42060: LD_VAR 0 6
42064: PPUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 60
42070: PUSH
42071: EMPTY
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 55
42083: PUSH
42084: EMPTY
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PPUSH
42095: CALL_OW 72
42099: IFFALSE 42207
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42101: LD_ADDR_VAR 0 18
42105: PUSH
42106: LD_VAR 0 6
42110: PPUSH
42111: LD_INT 3
42113: PUSH
42114: LD_INT 60
42116: PUSH
42117: EMPTY
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 55
42129: PUSH
42130: EMPTY
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PPUSH
42141: CALL_OW 72
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: ST_TO_ADDR
// if IsInUnit ( driver ) then
42150: LD_VAR 0 18
42154: PPUSH
42155: CALL_OW 310
42159: IFFALSE 42170
// ComExit ( driver ) ;
42161: LD_VAR 0 18
42165: PPUSH
42166: CALL 66959 0 1
// AddComEnterUnit ( driver , tmp ) ;
42170: LD_VAR 0 18
42174: PPUSH
42175: LD_VAR 0 13
42179: PPUSH
42180: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42184: LD_VAR 0 18
42188: PPUSH
42189: LD_VAR 0 7
42193: PPUSH
42194: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42198: LD_VAR 0 18
42202: PPUSH
42203: CALL_OW 181
// end ; continue ;
42207: GO 41859
// end ; if not cleaners or not tmp in cleaners then
42209: LD_VAR 0 6
42213: NOT
42214: PUSH
42215: LD_VAR 0 13
42219: PUSH
42220: LD_VAR 0 6
42224: IN
42225: NOT
42226: OR
42227: IFFALSE 42534
// begin if dep then
42229: LD_VAR 0 17
42233: IFFALSE 42369
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42235: LD_ADDR_VAR 0 16
42239: PUSH
42240: LD_VAR 0 17
42244: PUSH
42245: LD_INT 1
42247: ARRAY
42248: PPUSH
42249: CALL_OW 250
42253: PPUSH
42254: LD_VAR 0 17
42258: PUSH
42259: LD_INT 1
42261: ARRAY
42262: PPUSH
42263: CALL_OW 254
42267: PPUSH
42268: LD_INT 5
42270: PPUSH
42271: CALL_OW 272
42275: PUSH
42276: LD_VAR 0 17
42280: PUSH
42281: LD_INT 1
42283: ARRAY
42284: PPUSH
42285: CALL_OW 251
42289: PPUSH
42290: LD_VAR 0 17
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PPUSH
42299: CALL_OW 254
42303: PPUSH
42304: LD_INT 5
42306: PPUSH
42307: CALL_OW 273
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42316: LD_VAR 0 16
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: PPUSH
42325: LD_VAR 0 16
42329: PUSH
42330: LD_INT 2
42332: ARRAY
42333: PPUSH
42334: CALL_OW 488
42338: IFFALSE 42369
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42340: LD_VAR 0 13
42344: PPUSH
42345: LD_VAR 0 16
42349: PUSH
42350: LD_INT 1
42352: ARRAY
42353: PPUSH
42354: LD_VAR 0 16
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: PPUSH
42363: CALL_OW 111
// continue ;
42367: GO 41859
// end ; end ; r := GetDir ( tmp ) ;
42369: LD_ADDR_VAR 0 15
42373: PUSH
42374: LD_VAR 0 13
42378: PPUSH
42379: CALL_OW 254
42383: ST_TO_ADDR
// if r = 5 then
42384: LD_VAR 0 15
42388: PUSH
42389: LD_INT 5
42391: EQUAL
42392: IFFALSE 42402
// r := 0 ;
42394: LD_ADDR_VAR 0 15
42398: PUSH
42399: LD_INT 0
42401: ST_TO_ADDR
// for j = r to 5 do
42402: LD_ADDR_VAR 0 10
42406: PUSH
42407: DOUBLE
42408: LD_VAR 0 15
42412: DEC
42413: ST_TO_ADDR
42414: LD_INT 5
42416: PUSH
42417: FOR_TO
42418: IFFALSE 42532
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42420: LD_ADDR_VAR 0 11
42424: PUSH
42425: LD_VAR 0 13
42429: PPUSH
42430: CALL_OW 250
42434: PPUSH
42435: LD_VAR 0 10
42439: PPUSH
42440: LD_INT 2
42442: PPUSH
42443: CALL_OW 272
42447: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42448: LD_ADDR_VAR 0 12
42452: PUSH
42453: LD_VAR 0 13
42457: PPUSH
42458: CALL_OW 251
42462: PPUSH
42463: LD_VAR 0 10
42467: PPUSH
42468: LD_INT 2
42470: PPUSH
42471: CALL_OW 273
42475: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42476: LD_VAR 0 11
42480: PPUSH
42481: LD_VAR 0 12
42485: PPUSH
42486: CALL_OW 488
42490: PUSH
42491: LD_VAR 0 11
42495: PPUSH
42496: LD_VAR 0 12
42500: PPUSH
42501: CALL_OW 428
42505: NOT
42506: AND
42507: IFFALSE 42530
// begin ComMoveXY ( tmp , _x , _y ) ;
42509: LD_VAR 0 13
42513: PPUSH
42514: LD_VAR 0 11
42518: PPUSH
42519: LD_VAR 0 12
42523: PPUSH
42524: CALL_OW 111
// break ;
42528: GO 42532
// end ; end ;
42530: GO 42417
42532: POP
42533: POP
// end ; end ;
42534: GO 41859
42536: POP
42537: POP
// end ;
42538: LD_VAR 0 8
42542: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42543: LD_INT 0
42545: PPUSH
// result := true ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_INT 1
42553: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42554: LD_VAR 0 2
42558: PUSH
42559: LD_INT 24
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42573
42565: LD_INT 33
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42573
42571: GO 42598
42573: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42574: LD_ADDR_VAR 0 3
42578: PUSH
42579: LD_INT 32
42581: PPUSH
42582: LD_VAR 0 1
42586: PPUSH
42587: CALL_OW 321
42591: PUSH
42592: LD_INT 2
42594: EQUAL
42595: ST_TO_ADDR
42596: GO 42918
42598: LD_INT 20
42600: DOUBLE
42601: EQUAL
42602: IFTRUE 42606
42604: GO 42631
42606: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: LD_INT 6
42614: PPUSH
42615: LD_VAR 0 1
42619: PPUSH
42620: CALL_OW 321
42624: PUSH
42625: LD_INT 2
42627: EQUAL
42628: ST_TO_ADDR
42629: GO 42918
42631: LD_INT 22
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42645
42637: LD_INT 36
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42645
42643: GO 42670
42645: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_INT 15
42653: PPUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 321
42663: PUSH
42664: LD_INT 2
42666: EQUAL
42667: ST_TO_ADDR
42668: GO 42918
42670: LD_INT 30
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42703
42678: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 20
42686: PPUSH
42687: LD_VAR 0 1
42691: PPUSH
42692: CALL_OW 321
42696: PUSH
42697: LD_INT 2
42699: EQUAL
42700: ST_TO_ADDR
42701: GO 42918
42703: LD_INT 28
42705: DOUBLE
42706: EQUAL
42707: IFTRUE 42717
42709: LD_INT 21
42711: DOUBLE
42712: EQUAL
42713: IFTRUE 42717
42715: GO 42742
42717: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: LD_INT 21
42725: PPUSH
42726: LD_VAR 0 1
42730: PPUSH
42731: CALL_OW 321
42735: PUSH
42736: LD_INT 2
42738: EQUAL
42739: ST_TO_ADDR
42740: GO 42918
42742: LD_INT 16
42744: DOUBLE
42745: EQUAL
42746: IFTRUE 42750
42748: GO 42777
42750: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42751: LD_ADDR_VAR 0 3
42755: PUSH
42756: LD_EXP 31
42760: PPUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 321
42770: PUSH
42771: LD_INT 2
42773: EQUAL
42774: ST_TO_ADDR
42775: GO 42918
42777: LD_INT 19
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42791
42783: LD_INT 23
42785: DOUBLE
42786: EQUAL
42787: IFTRUE 42791
42789: GO 42818
42791: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42792: LD_ADDR_VAR 0 3
42796: PUSH
42797: LD_EXP 30
42801: PPUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: CALL_OW 321
42811: PUSH
42812: LD_INT 2
42814: EQUAL
42815: ST_TO_ADDR
42816: GO 42918
42818: LD_INT 17
42820: DOUBLE
42821: EQUAL
42822: IFTRUE 42826
42824: GO 42851
42826: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42827: LD_ADDR_VAR 0 3
42831: PUSH
42832: LD_INT 39
42834: PPUSH
42835: LD_VAR 0 1
42839: PPUSH
42840: CALL_OW 321
42844: PUSH
42845: LD_INT 2
42847: EQUAL
42848: ST_TO_ADDR
42849: GO 42918
42851: LD_INT 18
42853: DOUBLE
42854: EQUAL
42855: IFTRUE 42859
42857: GO 42884
42859: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42860: LD_ADDR_VAR 0 3
42864: PUSH
42865: LD_INT 40
42867: PPUSH
42868: LD_VAR 0 1
42872: PPUSH
42873: CALL_OW 321
42877: PUSH
42878: LD_INT 2
42880: EQUAL
42881: ST_TO_ADDR
42882: GO 42918
42884: LD_INT 27
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42917
42892: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_INT 35
42900: PPUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 321
42910: PUSH
42911: LD_INT 2
42913: EQUAL
42914: ST_TO_ADDR
42915: GO 42918
42917: POP
// end ;
42918: LD_VAR 0 3
42922: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
// result := false ;
42936: LD_ADDR_VAR 0 6
42940: PUSH
42941: LD_INT 0
42943: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42944: LD_VAR 0 1
42948: NOT
42949: PUSH
42950: LD_VAR 0 1
42954: PPUSH
42955: CALL_OW 266
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: IN
42970: NOT
42971: OR
42972: PUSH
42973: LD_VAR 0 2
42977: NOT
42978: OR
42979: PUSH
42980: LD_VAR 0 5
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: LD_INT 4
42999: PUSH
43000: LD_INT 5
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: IN
43011: NOT
43012: OR
43013: PUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: LD_VAR 0 4
43023: PPUSH
43024: CALL_OW 488
43028: NOT
43029: OR
43030: IFFALSE 43034
// exit ;
43032: GO 43770
// side := GetSide ( depot ) ;
43034: LD_ADDR_VAR 0 9
43038: PUSH
43039: LD_VAR 0 1
43043: PPUSH
43044: CALL_OW 255
43048: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43049: LD_VAR 0 9
43053: PPUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: CALL 42543 0 2
43063: NOT
43064: IFFALSE 43068
// exit ;
43066: GO 43770
// pom := GetBase ( depot ) ;
43068: LD_ADDR_VAR 0 10
43072: PUSH
43073: LD_VAR 0 1
43077: PPUSH
43078: CALL_OW 274
43082: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43083: LD_ADDR_VAR 0 11
43087: PUSH
43088: LD_VAR 0 2
43092: PPUSH
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 248
43102: PPUSH
43103: CALL_OW 450
43107: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43108: LD_VAR 0 10
43112: PPUSH
43113: LD_INT 1
43115: PPUSH
43116: CALL_OW 275
43120: PUSH
43121: LD_VAR 0 11
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: GREATEREQUAL
43130: PUSH
43131: LD_VAR 0 10
43135: PPUSH
43136: LD_INT 2
43138: PPUSH
43139: CALL_OW 275
43143: PUSH
43144: LD_VAR 0 11
43148: PUSH
43149: LD_INT 2
43151: ARRAY
43152: GREATEREQUAL
43153: AND
43154: PUSH
43155: LD_VAR 0 10
43159: PPUSH
43160: LD_INT 3
43162: PPUSH
43163: CALL_OW 275
43167: PUSH
43168: LD_VAR 0 11
43172: PUSH
43173: LD_INT 3
43175: ARRAY
43176: GREATEREQUAL
43177: AND
43178: NOT
43179: IFFALSE 43183
// exit ;
43181: GO 43770
// if GetBType ( depot ) = b_depot then
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 266
43192: PUSH
43193: LD_INT 0
43195: EQUAL
43196: IFFALSE 43208
// dist := 28 else
43198: LD_ADDR_VAR 0 14
43202: PUSH
43203: LD_INT 28
43205: ST_TO_ADDR
43206: GO 43216
// dist := 36 ;
43208: LD_ADDR_VAR 0 14
43212: PUSH
43213: LD_INT 36
43215: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43216: LD_VAR 0 1
43220: PPUSH
43221: LD_VAR 0 3
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: CALL_OW 297
43235: PUSH
43236: LD_VAR 0 14
43240: GREATER
43241: IFFALSE 43245
// exit ;
43243: GO 43770
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43245: LD_ADDR_VAR 0 12
43249: PUSH
43250: LD_VAR 0 2
43254: PPUSH
43255: LD_VAR 0 3
43259: PPUSH
43260: LD_VAR 0 4
43264: PPUSH
43265: LD_VAR 0 5
43269: PPUSH
43270: LD_VAR 0 1
43274: PPUSH
43275: CALL_OW 248
43279: PPUSH
43280: LD_INT 0
43282: PPUSH
43283: CALL 43775 0 6
43287: ST_TO_ADDR
// if not hexes then
43288: LD_VAR 0 12
43292: NOT
43293: IFFALSE 43297
// exit ;
43295: GO 43770
// hex := GetHexInfo ( x , y ) ;
43297: LD_ADDR_VAR 0 15
43301: PUSH
43302: LD_VAR 0 3
43306: PPUSH
43307: LD_VAR 0 4
43311: PPUSH
43312: CALL_OW 546
43316: ST_TO_ADDR
// if hex [ 1 ] then
43317: LD_VAR 0 15
43321: PUSH
43322: LD_INT 1
43324: ARRAY
43325: IFFALSE 43329
// exit ;
43327: GO 43770
// height := hex [ 2 ] ;
43329: LD_ADDR_VAR 0 13
43333: PUSH
43334: LD_VAR 0 15
43338: PUSH
43339: LD_INT 2
43341: ARRAY
43342: ST_TO_ADDR
// for i = 1 to hexes do
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: DOUBLE
43349: LD_INT 1
43351: DEC
43352: ST_TO_ADDR
43353: LD_VAR 0 12
43357: PUSH
43358: FOR_TO
43359: IFFALSE 43689
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43361: LD_VAR 0 12
43365: PUSH
43366: LD_VAR 0 7
43370: ARRAY
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: PPUSH
43376: LD_VAR 0 12
43380: PUSH
43381: LD_VAR 0 7
43385: ARRAY
43386: PUSH
43387: LD_INT 2
43389: ARRAY
43390: PPUSH
43391: CALL_OW 488
43395: NOT
43396: PUSH
43397: LD_VAR 0 12
43401: PUSH
43402: LD_VAR 0 7
43406: ARRAY
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PPUSH
43412: LD_VAR 0 12
43416: PUSH
43417: LD_VAR 0 7
43421: ARRAY
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: PPUSH
43427: CALL_OW 428
43431: PUSH
43432: LD_INT 0
43434: GREATER
43435: OR
43436: PUSH
43437: LD_VAR 0 12
43441: PUSH
43442: LD_VAR 0 7
43446: ARRAY
43447: PUSH
43448: LD_INT 1
43450: ARRAY
43451: PPUSH
43452: LD_VAR 0 12
43456: PUSH
43457: LD_VAR 0 7
43461: ARRAY
43462: PUSH
43463: LD_INT 2
43465: ARRAY
43466: PPUSH
43467: CALL_OW 351
43471: OR
43472: IFFALSE 43478
// exit ;
43474: POP
43475: POP
43476: GO 43770
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43478: LD_ADDR_VAR 0 8
43482: PUSH
43483: LD_VAR 0 12
43487: PUSH
43488: LD_VAR 0 7
43492: ARRAY
43493: PUSH
43494: LD_INT 1
43496: ARRAY
43497: PPUSH
43498: LD_VAR 0 12
43502: PUSH
43503: LD_VAR 0 7
43507: ARRAY
43508: PUSH
43509: LD_INT 2
43511: ARRAY
43512: PPUSH
43513: CALL_OW 546
43517: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43518: LD_VAR 0 8
43522: PUSH
43523: LD_INT 1
43525: ARRAY
43526: PUSH
43527: LD_VAR 0 8
43531: PUSH
43532: LD_INT 2
43534: ARRAY
43535: PUSH
43536: LD_VAR 0 13
43540: PUSH
43541: LD_INT 2
43543: PLUS
43544: GREATER
43545: OR
43546: PUSH
43547: LD_VAR 0 8
43551: PUSH
43552: LD_INT 2
43554: ARRAY
43555: PUSH
43556: LD_VAR 0 13
43560: PUSH
43561: LD_INT 2
43563: MINUS
43564: LESS
43565: OR
43566: PUSH
43567: LD_VAR 0 8
43571: PUSH
43572: LD_INT 3
43574: ARRAY
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 8
43581: PUSH
43582: LD_INT 9
43584: PUSH
43585: LD_INT 10
43587: PUSH
43588: LD_INT 11
43590: PUSH
43591: LD_INT 12
43593: PUSH
43594: LD_INT 13
43596: PUSH
43597: LD_INT 16
43599: PUSH
43600: LD_INT 17
43602: PUSH
43603: LD_INT 18
43605: PUSH
43606: LD_INT 19
43608: PUSH
43609: LD_INT 20
43611: PUSH
43612: LD_INT 21
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: IN
43630: NOT
43631: OR
43632: PUSH
43633: LD_VAR 0 8
43637: PUSH
43638: LD_INT 5
43640: ARRAY
43641: NOT
43642: OR
43643: PUSH
43644: LD_VAR 0 8
43648: PUSH
43649: LD_INT 6
43651: ARRAY
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 7
43661: PUSH
43662: LD_INT 9
43664: PUSH
43665: LD_INT 10
43667: PUSH
43668: LD_INT 11
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: IN
43679: NOT
43680: OR
43681: IFFALSE 43687
// exit ;
43683: POP
43684: POP
43685: GO 43770
// end ;
43687: GO 43358
43689: POP
43690: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43691: LD_VAR 0 9
43695: PPUSH
43696: LD_VAR 0 3
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: LD_INT 20
43708: PPUSH
43709: CALL 35716 0 4
43713: PUSH
43714: LD_INT 4
43716: ARRAY
43717: IFFALSE 43721
// exit ;
43719: GO 43770
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43721: LD_VAR 0 2
43725: PUSH
43726: LD_INT 29
43728: PUSH
43729: LD_INT 30
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: IN
43736: PUSH
43737: LD_VAR 0 3
43741: PPUSH
43742: LD_VAR 0 4
43746: PPUSH
43747: LD_VAR 0 9
43751: PPUSH
43752: CALL_OW 440
43756: NOT
43757: AND
43758: IFFALSE 43762
// exit ;
43760: GO 43770
// result := true ;
43762: LD_ADDR_VAR 0 6
43766: PUSH
43767: LD_INT 1
43769: ST_TO_ADDR
// end ;
43770: LD_VAR 0 6
43774: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43775: LD_INT 0
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
// result = [ ] ;
43835: LD_ADDR_VAR 0 7
43839: PUSH
43840: EMPTY
43841: ST_TO_ADDR
// temp_list = [ ] ;
43842: LD_ADDR_VAR 0 9
43846: PUSH
43847: EMPTY
43848: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43849: LD_VAR 0 4
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: LD_INT 4
43868: PUSH
43869: LD_INT 5
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: IN
43880: NOT
43881: PUSH
43882: LD_VAR 0 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: IN
43897: PUSH
43898: LD_VAR 0 5
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: IN
43917: NOT
43918: AND
43919: OR
43920: IFFALSE 43924
// exit ;
43922: GO 62315
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43924: LD_VAR 0 1
43928: PUSH
43929: LD_INT 6
43931: PUSH
43932: LD_INT 7
43934: PUSH
43935: LD_INT 8
43937: PUSH
43938: LD_INT 13
43940: PUSH
43941: LD_INT 12
43943: PUSH
43944: LD_INT 15
43946: PUSH
43947: LD_INT 11
43949: PUSH
43950: LD_INT 14
43952: PUSH
43953: LD_INT 10
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: IN
43967: IFFALSE 43977
// btype = b_lab ;
43969: LD_ADDR_VAR 0 1
43973: PUSH
43974: LD_INT 6
43976: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43977: LD_VAR 0 6
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: IN
43996: NOT
43997: PUSH
43998: LD_VAR 0 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 6
44017: PUSH
44018: LD_INT 36
44020: PUSH
44021: LD_INT 4
44023: PUSH
44024: LD_INT 5
44026: PUSH
44027: LD_INT 31
44029: PUSH
44030: LD_INT 32
44032: PUSH
44033: LD_INT 33
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: IN
44049: NOT
44050: PUSH
44051: LD_VAR 0 6
44055: PUSH
44056: LD_INT 1
44058: EQUAL
44059: AND
44060: OR
44061: PUSH
44062: LD_VAR 0 1
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: IN
44077: NOT
44078: PUSH
44079: LD_VAR 0 6
44083: PUSH
44084: LD_INT 2
44086: EQUAL
44087: AND
44088: OR
44089: IFFALSE 44099
// mode = 0 ;
44091: LD_ADDR_VAR 0 6
44095: PUSH
44096: LD_INT 0
44098: ST_TO_ADDR
// case mode of 0 :
44099: LD_VAR 0 6
44103: PUSH
44104: LD_INT 0
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44112
44110: GO 55565
44112: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44113: LD_ADDR_VAR 0 11
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44306: LD_ADDR_VAR 0 12
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44502: LD_ADDR_VAR 0 13
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 3
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44701: LD_ADDR_VAR 0 14
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 3
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44897: LD_ADDR_VAR 0 15
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45090: LD_ADDR_VAR 0 16
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: LD_INT 3
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45283: LD_ADDR_VAR 0 17
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 18
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45743: LD_ADDR_VAR 0 19
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45973: LD_ADDR_VAR 0 20
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46203: LD_ADDR_VAR 0 21
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46433: LD_ADDR_VAR 0 22
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46663: LD_ADDR_VAR 0 23
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 3
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46943: LD_ADDR_VAR 0 24
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47219: LD_ADDR_VAR 0 25
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47493: LD_ADDR_VAR 0 26
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47769: LD_ADDR_VAR 0 27
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48049: LD_ADDR_VAR 0 28
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48331: LD_ADDR_VAR 0 29
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48610: LD_ADDR_VAR 0 30
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 3
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48888: LD_ADDR_VAR 0 31
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49166: LD_ADDR_VAR 0 32
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49444: LD_ADDR_VAR 0 33
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 3
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49723: LD_ADDR_VAR 0 34
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50003: LD_ADDR_VAR 0 35
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50115: LD_ADDR_VAR 0 36
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50227: LD_ADDR_VAR 0 37
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50339: LD_ADDR_VAR 0 38
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50451: LD_ADDR_VAR 0 39
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50563: LD_ADDR_VAR 0 40
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50675: LD_ADDR_VAR 0 41
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51025: LD_ADDR_VAR 0 42
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 3
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51375: LD_ADDR_VAR 0 43
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51723: LD_ADDR_VAR 0 44
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 3
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52073: LD_ADDR_VAR 0 45
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52423: LD_ADDR_VAR 0 46
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52771: LD_ADDR_VAR 0 47
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52922: LD_ADDR_VAR 0 48
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53069: LD_ADDR_VAR 0 49
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53213: LD_ADDR_VAR 0 50
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53357: LD_ADDR_VAR 0 51
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53504: LD_ADDR_VAR 0 52
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53655: LD_ADDR_VAR 0 53
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53885: LD_ADDR_VAR 0 54
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54115: LD_ADDR_VAR 0 55
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54345: LD_ADDR_VAR 0 56
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54575: LD_ADDR_VAR 0 57
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54805: LD_ADDR_VAR 0 58
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55035: LD_ADDR_VAR 0 59
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55123: LD_ADDR_VAR 0 60
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55211: LD_ADDR_VAR 0 61
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55299: LD_ADDR_VAR 0 62
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55387: LD_ADDR_VAR 0 63
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55475: LD_ADDR_VAR 0 64
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// end ; 1 :
55563: GO 61460
55565: LD_INT 1
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 58196
55573: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55574: LD_ADDR_VAR 0 11
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55618: LD_ADDR_VAR 0 12
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55659: LD_ADDR_VAR 0 13
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55699: LD_ADDR_VAR 0 14
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 3
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55740: LD_ADDR_VAR 0 15
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55784: LD_ADDR_VAR 0 16
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55830: LD_ADDR_VAR 0 17
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55874: LD_ADDR_VAR 0 18
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55915: LD_ADDR_VAR 0 19
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55955: LD_ADDR_VAR 0 20
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55996: LD_ADDR_VAR 0 21
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56040: LD_ADDR_VAR 0 22
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56086: LD_ADDR_VAR 0 23
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56130: LD_ADDR_VAR 0 24
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56171: LD_ADDR_VAR 0 25
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 4
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56211: LD_ADDR_VAR 0 26
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 4
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56252: LD_ADDR_VAR 0 27
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 4
56281: NEG
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56296: LD_ADDR_VAR 0 28
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: LD_INT 4
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: NEG
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56342: LD_ADDR_VAR 0 29
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 5
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 4
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 6
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 6
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 5
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56497: LD_ADDR_VAR 0 30
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 5
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 6
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 6
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56640: LD_ADDR_VAR 0 31
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: LD_INT 4
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: LD_INT 5
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 4
56727: PUSH
56728: LD_INT 5
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 6
56737: PUSH
56738: LD_INT 5
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 6
56747: PUSH
56748: LD_INT 6
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 5
56757: PUSH
56758: LD_INT 6
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56779: LD_ADDR_VAR 0 32
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 4
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 5
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 5
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: LD_INT 6
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 6
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 5
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56922: LD_ADDR_VAR 0 33
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 4
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 5
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 5
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 5
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 6
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 6
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57077: LD_ADDR_VAR 0 34
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 4
57144: NEG
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 4
57156: NEG
57157: PUSH
57158: LD_INT 5
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 5
57168: NEG
57169: PUSH
57170: LD_INT 4
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 5
57180: NEG
57181: PUSH
57182: LD_INT 5
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 5
57192: NEG
57193: PUSH
57194: LD_INT 6
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 6
57204: NEG
57205: PUSH
57206: LD_INT 5
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 6
57216: NEG
57217: PUSH
57218: LD_INT 6
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57240: LD_ADDR_VAR 0 41
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57284: LD_ADDR_VAR 0 42
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57325: LD_ADDR_VAR 0 43
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57365: LD_ADDR_VAR 0 44
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57406: LD_ADDR_VAR 0 45
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57450: LD_ADDR_VAR 0 46
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57496: LD_ADDR_VAR 0 47
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57529: LD_ADDR_VAR 0 48
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57560: LD_ADDR_VAR 0 49
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57589: LD_ADDR_VAR 0 50
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57618: LD_ADDR_VAR 0 51
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57649: LD_ADDR_VAR 0 52
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57682: LD_ADDR_VAR 0 53
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57726: LD_ADDR_VAR 0 54
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57767: LD_ADDR_VAR 0 55
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57807: LD_ADDR_VAR 0 56
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57848: LD_ADDR_VAR 0 57
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57892: LD_ADDR_VAR 0 58
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57938: LD_ADDR_VAR 0 59
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57982: LD_ADDR_VAR 0 60
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58023: LD_ADDR_VAR 0 61
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58063: LD_ADDR_VAR 0 62
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58104: LD_ADDR_VAR 0 63
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58148: LD_ADDR_VAR 0 64
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// end ; 2 :
58194: GO 61460
58196: LD_INT 2
58198: DOUBLE
58199: EQUAL
58200: IFTRUE 58204
58202: GO 61459
58204: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58205: LD_ADDR_VAR 0 29
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 5
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 4
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 4
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 5
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 5
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: LD_INT 5
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: NEG
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 4
58555: NEG
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: NEG
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 4
58602: NEG
58603: PUSH
58604: LD_INT 5
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 4
58638: NEG
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: NEG
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 5
58662: NEG
58663: PUSH
58664: LD_INT 5
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: LD_INT 5
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 5
58686: NEG
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58743: LD_ADDR_VAR 0 30
58747: PUSH
58748: LD_INT 4
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 4
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 5
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: LD_INT 5
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 4
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: LD_INT 4
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 4
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 5
58989: NEG
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 5
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 5
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: LD_INT 4
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 4
59095: NEG
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 4
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 4
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 5
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 4
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 4
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 5
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 5
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59290: LD_ADDR_VAR 0 31
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 4
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 5
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 5
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 4
59446: NEG
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: LD_INT 5
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 5
59552: NEG
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 5
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 5
59588: NEG
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 4
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 4
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 4
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 5
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 5
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59840: LD_ADDR_VAR 0 32
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 3
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 5
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 5
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 5
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: NEG
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: LD_INT 4
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 4
60045: NEG
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 4
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 5
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 5
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 5
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 4
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 5
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: LD_INT 5
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: LD_INT 5
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: LD_INT 4
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 5
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 3
60332: PUSH
60333: LD_INT 5
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60387: LD_ADDR_VAR 0 33
60391: PUSH
60392: LD_INT 4
60394: NEG
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: LD_INT 5
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 3
60430: NEG
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 5
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 5
60466: NEG
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: LD_INT 5
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 5
60490: NEG
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 4
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 3
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 4
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 4
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 5
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 5
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 5
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: LD_INT 4
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 4
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 4
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 5
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 5
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 4
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 5
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60925: LD_ADDR_VAR 0 34
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 5
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 5
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 5
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 4
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 4
61127: PUSH
61128: LD_INT 4
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 5
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: LD_INT 5
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 4
61167: PUSH
61168: LD_INT 5
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: LD_INT 4
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 5
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 3
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: LD_INT 4
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 4
61310: NEG
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 4
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 4
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 5
61366: NEG
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 5
61377: NEG
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 5
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: ST_TO_ADDR
// end ; end ;
61457: GO 61460
61459: POP
// case btype of b_depot , b_warehouse :
61460: LD_VAR 0 1
61464: PUSH
61465: LD_INT 0
61467: DOUBLE
61468: EQUAL
61469: IFTRUE 61479
61471: LD_INT 1
61473: DOUBLE
61474: EQUAL
61475: IFTRUE 61479
61477: GO 61680
61479: POP
// case nation of nation_american :
61480: LD_VAR 0 5
61484: PUSH
61485: LD_INT 1
61487: DOUBLE
61488: EQUAL
61489: IFTRUE 61493
61491: GO 61549
61493: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61494: LD_ADDR_VAR 0 9
61498: PUSH
61499: LD_VAR 0 11
61503: PUSH
61504: LD_VAR 0 12
61508: PUSH
61509: LD_VAR 0 13
61513: PUSH
61514: LD_VAR 0 14
61518: PUSH
61519: LD_VAR 0 15
61523: PUSH
61524: LD_VAR 0 16
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: PUSH
61537: LD_VAR 0 4
61541: PUSH
61542: LD_INT 1
61544: PLUS
61545: ARRAY
61546: ST_TO_ADDR
61547: GO 61678
61549: LD_INT 2
61551: DOUBLE
61552: EQUAL
61553: IFTRUE 61557
61555: GO 61613
61557: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61558: LD_ADDR_VAR 0 9
61562: PUSH
61563: LD_VAR 0 17
61567: PUSH
61568: LD_VAR 0 18
61572: PUSH
61573: LD_VAR 0 19
61577: PUSH
61578: LD_VAR 0 20
61582: PUSH
61583: LD_VAR 0 21
61587: PUSH
61588: LD_VAR 0 22
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: LD_VAR 0 4
61605: PUSH
61606: LD_INT 1
61608: PLUS
61609: ARRAY
61610: ST_TO_ADDR
61611: GO 61678
61613: LD_INT 3
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61621
61619: GO 61677
61621: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61622: LD_ADDR_VAR 0 9
61626: PUSH
61627: LD_VAR 0 23
61631: PUSH
61632: LD_VAR 0 24
61636: PUSH
61637: LD_VAR 0 25
61641: PUSH
61642: LD_VAR 0 26
61646: PUSH
61647: LD_VAR 0 27
61651: PUSH
61652: LD_VAR 0 28
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: PUSH
61665: LD_VAR 0 4
61669: PUSH
61670: LD_INT 1
61672: PLUS
61673: ARRAY
61674: ST_TO_ADDR
61675: GO 61678
61677: POP
61678: GO 62233
61680: LD_INT 2
61682: DOUBLE
61683: EQUAL
61684: IFTRUE 61694
61686: LD_INT 3
61688: DOUBLE
61689: EQUAL
61690: IFTRUE 61694
61692: GO 61750
61694: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61695: LD_ADDR_VAR 0 9
61699: PUSH
61700: LD_VAR 0 29
61704: PUSH
61705: LD_VAR 0 30
61709: PUSH
61710: LD_VAR 0 31
61714: PUSH
61715: LD_VAR 0 32
61719: PUSH
61720: LD_VAR 0 33
61724: PUSH
61725: LD_VAR 0 34
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: PUSH
61738: LD_VAR 0 4
61742: PUSH
61743: LD_INT 1
61745: PLUS
61746: ARRAY
61747: ST_TO_ADDR
61748: GO 62233
61750: LD_INT 16
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61812
61756: LD_INT 17
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61812
61762: LD_INT 18
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61812
61768: LD_INT 19
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61812
61774: LD_INT 22
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61812
61780: LD_INT 20
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61812
61786: LD_INT 21
61788: DOUBLE
61789: EQUAL
61790: IFTRUE 61812
61792: LD_INT 23
61794: DOUBLE
61795: EQUAL
61796: IFTRUE 61812
61798: LD_INT 24
61800: DOUBLE
61801: EQUAL
61802: IFTRUE 61812
61804: LD_INT 25
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61812
61810: GO 61868
61812: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61813: LD_ADDR_VAR 0 9
61817: PUSH
61818: LD_VAR 0 35
61822: PUSH
61823: LD_VAR 0 36
61827: PUSH
61828: LD_VAR 0 37
61832: PUSH
61833: LD_VAR 0 38
61837: PUSH
61838: LD_VAR 0 39
61842: PUSH
61843: LD_VAR 0 40
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: PUSH
61856: LD_VAR 0 4
61860: PUSH
61861: LD_INT 1
61863: PLUS
61864: ARRAY
61865: ST_TO_ADDR
61866: GO 62233
61868: LD_INT 6
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61924
61874: LD_INT 7
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61924
61880: LD_INT 8
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61924
61886: LD_INT 13
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61924
61892: LD_INT 12
61894: DOUBLE
61895: EQUAL
61896: IFTRUE 61924
61898: LD_INT 15
61900: DOUBLE
61901: EQUAL
61902: IFTRUE 61924
61904: LD_INT 11
61906: DOUBLE
61907: EQUAL
61908: IFTRUE 61924
61910: LD_INT 14
61912: DOUBLE
61913: EQUAL
61914: IFTRUE 61924
61916: LD_INT 10
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61924
61922: GO 61980
61924: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61925: LD_ADDR_VAR 0 9
61929: PUSH
61930: LD_VAR 0 41
61934: PUSH
61935: LD_VAR 0 42
61939: PUSH
61940: LD_VAR 0 43
61944: PUSH
61945: LD_VAR 0 44
61949: PUSH
61950: LD_VAR 0 45
61954: PUSH
61955: LD_VAR 0 46
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: LD_VAR 0 4
61972: PUSH
61973: LD_INT 1
61975: PLUS
61976: ARRAY
61977: ST_TO_ADDR
61978: GO 62233
61980: LD_INT 36
61982: DOUBLE
61983: EQUAL
61984: IFTRUE 61988
61986: GO 62044
61988: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61989: LD_ADDR_VAR 0 9
61993: PUSH
61994: LD_VAR 0 47
61998: PUSH
61999: LD_VAR 0 48
62003: PUSH
62004: LD_VAR 0 49
62008: PUSH
62009: LD_VAR 0 50
62013: PUSH
62014: LD_VAR 0 51
62018: PUSH
62019: LD_VAR 0 52
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: PUSH
62032: LD_VAR 0 4
62036: PUSH
62037: LD_INT 1
62039: PLUS
62040: ARRAY
62041: ST_TO_ADDR
62042: GO 62233
62044: LD_INT 4
62046: DOUBLE
62047: EQUAL
62048: IFTRUE 62070
62050: LD_INT 5
62052: DOUBLE
62053: EQUAL
62054: IFTRUE 62070
62056: LD_INT 34
62058: DOUBLE
62059: EQUAL
62060: IFTRUE 62070
62062: LD_INT 37
62064: DOUBLE
62065: EQUAL
62066: IFTRUE 62070
62068: GO 62126
62070: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62071: LD_ADDR_VAR 0 9
62075: PUSH
62076: LD_VAR 0 53
62080: PUSH
62081: LD_VAR 0 54
62085: PUSH
62086: LD_VAR 0 55
62090: PUSH
62091: LD_VAR 0 56
62095: PUSH
62096: LD_VAR 0 57
62100: PUSH
62101: LD_VAR 0 58
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: PUSH
62114: LD_VAR 0 4
62118: PUSH
62119: LD_INT 1
62121: PLUS
62122: ARRAY
62123: ST_TO_ADDR
62124: GO 62233
62126: LD_INT 31
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62176
62132: LD_INT 32
62134: DOUBLE
62135: EQUAL
62136: IFTRUE 62176
62138: LD_INT 33
62140: DOUBLE
62141: EQUAL
62142: IFTRUE 62176
62144: LD_INT 27
62146: DOUBLE
62147: EQUAL
62148: IFTRUE 62176
62150: LD_INT 26
62152: DOUBLE
62153: EQUAL
62154: IFTRUE 62176
62156: LD_INT 28
62158: DOUBLE
62159: EQUAL
62160: IFTRUE 62176
62162: LD_INT 29
62164: DOUBLE
62165: EQUAL
62166: IFTRUE 62176
62168: LD_INT 30
62170: DOUBLE
62171: EQUAL
62172: IFTRUE 62176
62174: GO 62232
62176: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62177: LD_ADDR_VAR 0 9
62181: PUSH
62182: LD_VAR 0 59
62186: PUSH
62187: LD_VAR 0 60
62191: PUSH
62192: LD_VAR 0 61
62196: PUSH
62197: LD_VAR 0 62
62201: PUSH
62202: LD_VAR 0 63
62206: PUSH
62207: LD_VAR 0 64
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: LD_VAR 0 4
62224: PUSH
62225: LD_INT 1
62227: PLUS
62228: ARRAY
62229: ST_TO_ADDR
62230: GO 62233
62232: POP
// temp_list2 = [ ] ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: EMPTY
62239: ST_TO_ADDR
// for i in temp_list do
62240: LD_ADDR_VAR 0 8
62244: PUSH
62245: LD_VAR 0 9
62249: PUSH
62250: FOR_IN
62251: IFFALSE 62303
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62253: LD_ADDR_VAR 0 10
62257: PUSH
62258: LD_VAR 0 10
62262: PUSH
62263: LD_VAR 0 8
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: PUSH
62272: LD_VAR 0 2
62276: PLUS
62277: PUSH
62278: LD_VAR 0 8
62282: PUSH
62283: LD_INT 2
62285: ARRAY
62286: PUSH
62287: LD_VAR 0 3
62291: PLUS
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: EMPTY
62298: LIST
62299: ADD
62300: ST_TO_ADDR
62301: GO 62250
62303: POP
62304: POP
// result = temp_list2 ;
62305: LD_ADDR_VAR 0 7
62309: PUSH
62310: LD_VAR 0 10
62314: ST_TO_ADDR
// end ;
62315: LD_VAR 0 7
62319: RET
// export function EnemyInRange ( unit , dist ) ; begin
62320: LD_INT 0
62322: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62323: LD_ADDR_VAR 0 3
62327: PUSH
62328: LD_VAR 0 1
62332: PPUSH
62333: CALL_OW 255
62337: PPUSH
62338: LD_VAR 0 1
62342: PPUSH
62343: CALL_OW 250
62347: PPUSH
62348: LD_VAR 0 1
62352: PPUSH
62353: CALL_OW 251
62357: PPUSH
62358: LD_VAR 0 2
62362: PPUSH
62363: CALL 35716 0 4
62367: PUSH
62368: LD_INT 4
62370: ARRAY
62371: ST_TO_ADDR
// end ;
62372: LD_VAR 0 3
62376: RET
// export function PlayerSeeMe ( unit ) ; begin
62377: LD_INT 0
62379: PPUSH
// result := See ( your_side , unit ) ;
62380: LD_ADDR_VAR 0 2
62384: PUSH
62385: LD_OWVAR 2
62389: PPUSH
62390: LD_VAR 0 1
62394: PPUSH
62395: CALL_OW 292
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 2
62404: RET
// export function ReverseDir ( unit ) ; begin
62405: LD_INT 0
62407: PPUSH
// if not unit then
62408: LD_VAR 0 1
62412: NOT
62413: IFFALSE 62417
// exit ;
62415: GO 62440
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62417: LD_ADDR_VAR 0 2
62421: PUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: CALL_OW 254
62431: PUSH
62432: LD_INT 3
62434: PLUS
62435: PUSH
62436: LD_INT 6
62438: MOD
62439: ST_TO_ADDR
// end ;
62440: LD_VAR 0 2
62444: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
62449: PPUSH
62450: PPUSH
62451: PPUSH
// if not hexes then
62452: LD_VAR 0 2
62456: NOT
62457: IFFALSE 62461
// exit ;
62459: GO 62609
// dist := 9999 ;
62461: LD_ADDR_VAR 0 5
62465: PUSH
62466: LD_INT 9999
62468: ST_TO_ADDR
// for i = 1 to hexes do
62469: LD_ADDR_VAR 0 4
62473: PUSH
62474: DOUBLE
62475: LD_INT 1
62477: DEC
62478: ST_TO_ADDR
62479: LD_VAR 0 2
62483: PUSH
62484: FOR_TO
62485: IFFALSE 62597
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62487: LD_VAR 0 1
62491: PPUSH
62492: LD_VAR 0 2
62496: PUSH
62497: LD_VAR 0 4
62501: ARRAY
62502: PUSH
62503: LD_INT 1
62505: ARRAY
62506: PPUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_VAR 0 4
62516: ARRAY
62517: PUSH
62518: LD_INT 2
62520: ARRAY
62521: PPUSH
62522: CALL_OW 297
62526: PUSH
62527: LD_VAR 0 5
62531: LESS
62532: IFFALSE 62595
// begin hex := hexes [ i ] ;
62534: LD_ADDR_VAR 0 7
62538: PUSH
62539: LD_VAR 0 2
62543: PUSH
62544: LD_VAR 0 4
62548: ARRAY
62549: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62550: LD_ADDR_VAR 0 5
62554: PUSH
62555: LD_VAR 0 1
62559: PPUSH
62560: LD_VAR 0 2
62564: PUSH
62565: LD_VAR 0 4
62569: ARRAY
62570: PUSH
62571: LD_INT 1
62573: ARRAY
62574: PPUSH
62575: LD_VAR 0 2
62579: PUSH
62580: LD_VAR 0 4
62584: ARRAY
62585: PUSH
62586: LD_INT 2
62588: ARRAY
62589: PPUSH
62590: CALL_OW 297
62594: ST_TO_ADDR
// end ; end ;
62595: GO 62484
62597: POP
62598: POP
// result := hex ;
62599: LD_ADDR_VAR 0 3
62603: PUSH
62604: LD_VAR 0 7
62608: ST_TO_ADDR
// end ;
62609: LD_VAR 0 3
62613: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62614: LD_INT 0
62616: PPUSH
62617: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62618: LD_VAR 0 1
62622: NOT
62623: PUSH
62624: LD_VAR 0 1
62628: PUSH
62629: LD_INT 21
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 23
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PPUSH
62653: CALL_OW 69
62657: IN
62658: NOT
62659: OR
62660: IFFALSE 62664
// exit ;
62662: GO 62711
// for i = 1 to 3 do
62664: LD_ADDR_VAR 0 3
62668: PUSH
62669: DOUBLE
62670: LD_INT 1
62672: DEC
62673: ST_TO_ADDR
62674: LD_INT 3
62676: PUSH
62677: FOR_TO
62678: IFFALSE 62709
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 250
62689: PPUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: CALL_OW 251
62699: PPUSH
62700: LD_INT 1
62702: PPUSH
62703: CALL_OW 453
62707: GO 62677
62709: POP
62710: POP
// end ;
62711: LD_VAR 0 2
62715: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62716: LD_INT 0
62718: PPUSH
62719: PPUSH
62720: PPUSH
62721: PPUSH
62722: PPUSH
62723: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62724: LD_VAR 0 1
62728: NOT
62729: PUSH
62730: LD_VAR 0 2
62734: NOT
62735: OR
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 314
62746: OR
62747: IFFALSE 62751
// exit ;
62749: GO 63192
// x := GetX ( enemy_unit ) ;
62751: LD_ADDR_VAR 0 7
62755: PUSH
62756: LD_VAR 0 2
62760: PPUSH
62761: CALL_OW 250
62765: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62766: LD_ADDR_VAR 0 8
62770: PUSH
62771: LD_VAR 0 2
62775: PPUSH
62776: CALL_OW 251
62780: ST_TO_ADDR
// if not x or not y then
62781: LD_VAR 0 7
62785: NOT
62786: PUSH
62787: LD_VAR 0 8
62791: NOT
62792: OR
62793: IFFALSE 62797
// exit ;
62795: GO 63192
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62797: LD_ADDR_VAR 0 6
62801: PUSH
62802: LD_VAR 0 7
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: LD_INT 4
62812: PPUSH
62813: CALL_OW 272
62817: PUSH
62818: LD_VAR 0 8
62822: PPUSH
62823: LD_INT 0
62825: PPUSH
62826: LD_INT 4
62828: PPUSH
62829: CALL_OW 273
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_VAR 0 7
62842: PPUSH
62843: LD_INT 1
62845: PPUSH
62846: LD_INT 4
62848: PPUSH
62849: CALL_OW 272
62853: PUSH
62854: LD_VAR 0 8
62858: PPUSH
62859: LD_INT 1
62861: PPUSH
62862: LD_INT 4
62864: PPUSH
62865: CALL_OW 273
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_VAR 0 7
62878: PPUSH
62879: LD_INT 2
62881: PPUSH
62882: LD_INT 4
62884: PPUSH
62885: CALL_OW 272
62889: PUSH
62890: LD_VAR 0 8
62894: PPUSH
62895: LD_INT 2
62897: PPUSH
62898: LD_INT 4
62900: PPUSH
62901: CALL_OW 273
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 7
62914: PPUSH
62915: LD_INT 3
62917: PPUSH
62918: LD_INT 4
62920: PPUSH
62921: CALL_OW 272
62925: PUSH
62926: LD_VAR 0 8
62930: PPUSH
62931: LD_INT 3
62933: PPUSH
62934: LD_INT 4
62936: PPUSH
62937: CALL_OW 273
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_VAR 0 7
62950: PPUSH
62951: LD_INT 4
62953: PPUSH
62954: LD_INT 4
62956: PPUSH
62957: CALL_OW 272
62961: PUSH
62962: LD_VAR 0 8
62966: PPUSH
62967: LD_INT 4
62969: PPUSH
62970: LD_INT 4
62972: PPUSH
62973: CALL_OW 273
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_VAR 0 7
62986: PPUSH
62987: LD_INT 5
62989: PPUSH
62990: LD_INT 4
62992: PPUSH
62993: CALL_OW 272
62997: PUSH
62998: LD_VAR 0 8
63002: PPUSH
63003: LD_INT 5
63005: PPUSH
63006: LD_INT 4
63008: PPUSH
63009: CALL_OW 273
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// for i = tmp downto 1 do
63026: LD_ADDR_VAR 0 4
63030: PUSH
63031: DOUBLE
63032: LD_VAR 0 6
63036: INC
63037: ST_TO_ADDR
63038: LD_INT 1
63040: PUSH
63041: FOR_DOWNTO
63042: IFFALSE 63143
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63044: LD_VAR 0 6
63048: PUSH
63049: LD_VAR 0 4
63053: ARRAY
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PPUSH
63059: LD_VAR 0 6
63063: PUSH
63064: LD_VAR 0 4
63068: ARRAY
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: CALL_OW 488
63078: NOT
63079: PUSH
63080: LD_VAR 0 6
63084: PUSH
63085: LD_VAR 0 4
63089: ARRAY
63090: PUSH
63091: LD_INT 1
63093: ARRAY
63094: PPUSH
63095: LD_VAR 0 6
63099: PUSH
63100: LD_VAR 0 4
63104: ARRAY
63105: PUSH
63106: LD_INT 2
63108: ARRAY
63109: PPUSH
63110: CALL_OW 428
63114: PUSH
63115: LD_INT 0
63117: NONEQUAL
63118: OR
63119: IFFALSE 63141
// tmp := Delete ( tmp , i ) ;
63121: LD_ADDR_VAR 0 6
63125: PUSH
63126: LD_VAR 0 6
63130: PPUSH
63131: LD_VAR 0 4
63135: PPUSH
63136: CALL_OW 3
63140: ST_TO_ADDR
63141: GO 63041
63143: POP
63144: POP
// j := GetClosestHex ( unit , tmp ) ;
63145: LD_ADDR_VAR 0 5
63149: PUSH
63150: LD_VAR 0 1
63154: PPUSH
63155: LD_VAR 0 6
63159: PPUSH
63160: CALL 62445 0 2
63164: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63165: LD_VAR 0 1
63169: PPUSH
63170: LD_VAR 0 5
63174: PUSH
63175: LD_INT 1
63177: ARRAY
63178: PPUSH
63179: LD_VAR 0 5
63183: PUSH
63184: LD_INT 2
63186: ARRAY
63187: PPUSH
63188: CALL_OW 111
// end ;
63192: LD_VAR 0 3
63196: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63197: LD_INT 0
63199: PPUSH
63200: PPUSH
63201: PPUSH
// uc_side = 0 ;
63202: LD_ADDR_OWVAR 20
63206: PUSH
63207: LD_INT 0
63209: ST_TO_ADDR
// uc_nation = 0 ;
63210: LD_ADDR_OWVAR 21
63214: PUSH
63215: LD_INT 0
63217: ST_TO_ADDR
// InitHc_All ( ) ;
63218: CALL_OW 584
// InitVc ;
63222: CALL_OW 20
// if mastodonts then
63226: LD_VAR 0 6
63230: IFFALSE 63297
// for i = 1 to mastodonts do
63232: LD_ADDR_VAR 0 11
63236: PUSH
63237: DOUBLE
63238: LD_INT 1
63240: DEC
63241: ST_TO_ADDR
63242: LD_VAR 0 6
63246: PUSH
63247: FOR_TO
63248: IFFALSE 63295
// begin vc_chassis := 31 ;
63250: LD_ADDR_OWVAR 37
63254: PUSH
63255: LD_INT 31
63257: ST_TO_ADDR
// vc_control := control_rider ;
63258: LD_ADDR_OWVAR 38
63262: PUSH
63263: LD_INT 4
63265: ST_TO_ADDR
// animal := CreateVehicle ;
63266: LD_ADDR_VAR 0 12
63270: PUSH
63271: CALL_OW 45
63275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63276: LD_VAR 0 12
63280: PPUSH
63281: LD_VAR 0 8
63285: PPUSH
63286: LD_INT 0
63288: PPUSH
63289: CALL 65485 0 3
// end ;
63293: GO 63247
63295: POP
63296: POP
// if horses then
63297: LD_VAR 0 5
63301: IFFALSE 63368
// for i = 1 to horses do
63303: LD_ADDR_VAR 0 11
63307: PUSH
63308: DOUBLE
63309: LD_INT 1
63311: DEC
63312: ST_TO_ADDR
63313: LD_VAR 0 5
63317: PUSH
63318: FOR_TO
63319: IFFALSE 63366
// begin hc_class := 21 ;
63321: LD_ADDR_OWVAR 28
63325: PUSH
63326: LD_INT 21
63328: ST_TO_ADDR
// hc_gallery :=  ;
63329: LD_ADDR_OWVAR 33
63333: PUSH
63334: LD_STRING 
63336: ST_TO_ADDR
// animal := CreateHuman ;
63337: LD_ADDR_VAR 0 12
63341: PUSH
63342: CALL_OW 44
63346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63347: LD_VAR 0 12
63351: PPUSH
63352: LD_VAR 0 8
63356: PPUSH
63357: LD_INT 0
63359: PPUSH
63360: CALL 65485 0 3
// end ;
63364: GO 63318
63366: POP
63367: POP
// if birds then
63368: LD_VAR 0 1
63372: IFFALSE 63439
// for i = 1 to birds do
63374: LD_ADDR_VAR 0 11
63378: PUSH
63379: DOUBLE
63380: LD_INT 1
63382: DEC
63383: ST_TO_ADDR
63384: LD_VAR 0 1
63388: PUSH
63389: FOR_TO
63390: IFFALSE 63437
// begin hc_class = 18 ;
63392: LD_ADDR_OWVAR 28
63396: PUSH
63397: LD_INT 18
63399: ST_TO_ADDR
// hc_gallery =  ;
63400: LD_ADDR_OWVAR 33
63404: PUSH
63405: LD_STRING 
63407: ST_TO_ADDR
// animal := CreateHuman ;
63408: LD_ADDR_VAR 0 12
63412: PUSH
63413: CALL_OW 44
63417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63418: LD_VAR 0 12
63422: PPUSH
63423: LD_VAR 0 8
63427: PPUSH
63428: LD_INT 0
63430: PPUSH
63431: CALL 65485 0 3
// end ;
63435: GO 63389
63437: POP
63438: POP
// if tigers then
63439: LD_VAR 0 2
63443: IFFALSE 63527
// for i = 1 to tigers do
63445: LD_ADDR_VAR 0 11
63449: PUSH
63450: DOUBLE
63451: LD_INT 1
63453: DEC
63454: ST_TO_ADDR
63455: LD_VAR 0 2
63459: PUSH
63460: FOR_TO
63461: IFFALSE 63525
// begin hc_class = class_tiger ;
63463: LD_ADDR_OWVAR 28
63467: PUSH
63468: LD_INT 14
63470: ST_TO_ADDR
// hc_gallery =  ;
63471: LD_ADDR_OWVAR 33
63475: PUSH
63476: LD_STRING 
63478: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63479: LD_ADDR_OWVAR 35
63483: PUSH
63484: LD_INT 7
63486: NEG
63487: PPUSH
63488: LD_INT 7
63490: PPUSH
63491: CALL_OW 12
63495: ST_TO_ADDR
// animal := CreateHuman ;
63496: LD_ADDR_VAR 0 12
63500: PUSH
63501: CALL_OW 44
63505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63506: LD_VAR 0 12
63510: PPUSH
63511: LD_VAR 0 8
63515: PPUSH
63516: LD_INT 0
63518: PPUSH
63519: CALL 65485 0 3
// end ;
63523: GO 63460
63525: POP
63526: POP
// if apemans then
63527: LD_VAR 0 3
63531: IFFALSE 63654
// for i = 1 to apemans do
63533: LD_ADDR_VAR 0 11
63537: PUSH
63538: DOUBLE
63539: LD_INT 1
63541: DEC
63542: ST_TO_ADDR
63543: LD_VAR 0 3
63547: PUSH
63548: FOR_TO
63549: IFFALSE 63652
// begin hc_class = class_apeman ;
63551: LD_ADDR_OWVAR 28
63555: PUSH
63556: LD_INT 12
63558: ST_TO_ADDR
// hc_gallery =  ;
63559: LD_ADDR_OWVAR 33
63563: PUSH
63564: LD_STRING 
63566: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63567: LD_ADDR_OWVAR 35
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PPUSH
63576: LD_INT 2
63578: PPUSH
63579: CALL_OW 12
63583: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63584: LD_ADDR_OWVAR 31
63588: PUSH
63589: LD_INT 1
63591: PPUSH
63592: LD_INT 3
63594: PPUSH
63595: CALL_OW 12
63599: PUSH
63600: LD_INT 1
63602: PPUSH
63603: LD_INT 3
63605: PPUSH
63606: CALL_OW 12
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: ST_TO_ADDR
// animal := CreateHuman ;
63623: LD_ADDR_VAR 0 12
63627: PUSH
63628: CALL_OW 44
63632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63633: LD_VAR 0 12
63637: PPUSH
63638: LD_VAR 0 8
63642: PPUSH
63643: LD_INT 0
63645: PPUSH
63646: CALL 65485 0 3
// end ;
63650: GO 63548
63652: POP
63653: POP
// if enchidnas then
63654: LD_VAR 0 4
63658: IFFALSE 63725
// for i = 1 to enchidnas do
63660: LD_ADDR_VAR 0 11
63664: PUSH
63665: DOUBLE
63666: LD_INT 1
63668: DEC
63669: ST_TO_ADDR
63670: LD_VAR 0 4
63674: PUSH
63675: FOR_TO
63676: IFFALSE 63723
// begin hc_class = 13 ;
63678: LD_ADDR_OWVAR 28
63682: PUSH
63683: LD_INT 13
63685: ST_TO_ADDR
// hc_gallery =  ;
63686: LD_ADDR_OWVAR 33
63690: PUSH
63691: LD_STRING 
63693: ST_TO_ADDR
// animal := CreateHuman ;
63694: LD_ADDR_VAR 0 12
63698: PUSH
63699: CALL_OW 44
63703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63704: LD_VAR 0 12
63708: PPUSH
63709: LD_VAR 0 8
63713: PPUSH
63714: LD_INT 0
63716: PPUSH
63717: CALL 65485 0 3
// end ;
63721: GO 63675
63723: POP
63724: POP
// if fishes then
63725: LD_VAR 0 7
63729: IFFALSE 63796
// for i = 1 to fishes do
63731: LD_ADDR_VAR 0 11
63735: PUSH
63736: DOUBLE
63737: LD_INT 1
63739: DEC
63740: ST_TO_ADDR
63741: LD_VAR 0 7
63745: PUSH
63746: FOR_TO
63747: IFFALSE 63794
// begin hc_class = 20 ;
63749: LD_ADDR_OWVAR 28
63753: PUSH
63754: LD_INT 20
63756: ST_TO_ADDR
// hc_gallery =  ;
63757: LD_ADDR_OWVAR 33
63761: PUSH
63762: LD_STRING 
63764: ST_TO_ADDR
// animal := CreateHuman ;
63765: LD_ADDR_VAR 0 12
63769: PUSH
63770: CALL_OW 44
63774: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63775: LD_VAR 0 12
63779: PPUSH
63780: LD_VAR 0 9
63784: PPUSH
63785: LD_INT 0
63787: PPUSH
63788: CALL 65485 0 3
// end ;
63792: GO 63746
63794: POP
63795: POP
// end ;
63796: LD_VAR 0 10
63800: RET
// export function WantHeal ( sci , unit ) ; begin
63801: LD_INT 0
63803: PPUSH
// if GetTaskList ( sci ) > 0 then
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 437
63813: PUSH
63814: LD_INT 0
63816: GREATER
63817: IFFALSE 63887
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63819: LD_VAR 0 1
63823: PPUSH
63824: CALL_OW 437
63828: PUSH
63829: LD_INT 1
63831: ARRAY
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PUSH
63837: LD_STRING l
63839: EQUAL
63840: PUSH
63841: LD_VAR 0 1
63845: PPUSH
63846: CALL_OW 437
63850: PUSH
63851: LD_INT 1
63853: ARRAY
63854: PUSH
63855: LD_INT 4
63857: ARRAY
63858: PUSH
63859: LD_VAR 0 2
63863: EQUAL
63864: AND
63865: IFFALSE 63877
// result := true else
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_INT 1
63874: ST_TO_ADDR
63875: GO 63885
// result := false ;
63877: LD_ADDR_VAR 0 3
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// end else
63885: GO 63895
// result := false ;
63887: LD_ADDR_VAR 0 3
63891: PUSH
63892: LD_INT 0
63894: ST_TO_ADDR
// end ;
63895: LD_VAR 0 3
63899: RET
// export function HealTarget ( sci ) ; begin
63900: LD_INT 0
63902: PPUSH
// if not sci then
63903: LD_VAR 0 1
63907: NOT
63908: IFFALSE 63912
// exit ;
63910: GO 63977
// result := 0 ;
63912: LD_ADDR_VAR 0 2
63916: PUSH
63917: LD_INT 0
63919: ST_TO_ADDR
// if GetTaskList ( sci ) then
63920: LD_VAR 0 1
63924: PPUSH
63925: CALL_OW 437
63929: IFFALSE 63977
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63931: LD_VAR 0 1
63935: PPUSH
63936: CALL_OW 437
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: PUSH
63945: LD_INT 1
63947: ARRAY
63948: PUSH
63949: LD_STRING l
63951: EQUAL
63952: IFFALSE 63977
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63954: LD_ADDR_VAR 0 2
63958: PUSH
63959: LD_VAR 0 1
63963: PPUSH
63964: CALL_OW 437
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PUSH
63973: LD_INT 4
63975: ARRAY
63976: ST_TO_ADDR
// end ;
63977: LD_VAR 0 2
63981: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63982: LD_INT 0
63984: PPUSH
63985: PPUSH
63986: PPUSH
63987: PPUSH
// if not base_units then
63988: LD_VAR 0 1
63992: NOT
63993: IFFALSE 63997
// exit ;
63995: GO 64084
// result := false ;
63997: LD_ADDR_VAR 0 2
64001: PUSH
64002: LD_INT 0
64004: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64005: LD_ADDR_VAR 0 5
64009: PUSH
64010: LD_VAR 0 1
64014: PPUSH
64015: LD_INT 21
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PPUSH
64025: CALL_OW 72
64029: ST_TO_ADDR
// if not tmp then
64030: LD_VAR 0 5
64034: NOT
64035: IFFALSE 64039
// exit ;
64037: GO 64084
// for i in tmp do
64039: LD_ADDR_VAR 0 3
64043: PUSH
64044: LD_VAR 0 5
64048: PUSH
64049: FOR_IN
64050: IFFALSE 64082
// begin result := EnemyInRange ( i , 22 ) ;
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: LD_INT 22
64064: PPUSH
64065: CALL 62320 0 2
64069: ST_TO_ADDR
// if result then
64070: LD_VAR 0 2
64074: IFFALSE 64080
// exit ;
64076: POP
64077: POP
64078: GO 64084
// end ;
64080: GO 64049
64082: POP
64083: POP
// end ;
64084: LD_VAR 0 2
64088: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64089: LD_INT 0
64091: PPUSH
64092: PPUSH
// if not units then
64093: LD_VAR 0 1
64097: NOT
64098: IFFALSE 64102
// exit ;
64100: GO 64172
// result := [ ] ;
64102: LD_ADDR_VAR 0 3
64106: PUSH
64107: EMPTY
64108: ST_TO_ADDR
// for i in units do
64109: LD_ADDR_VAR 0 4
64113: PUSH
64114: LD_VAR 0 1
64118: PUSH
64119: FOR_IN
64120: IFFALSE 64170
// if GetTag ( i ) = tag then
64122: LD_VAR 0 4
64126: PPUSH
64127: CALL_OW 110
64131: PUSH
64132: LD_VAR 0 2
64136: EQUAL
64137: IFFALSE 64168
// result := Replace ( result , result + 1 , i ) ;
64139: LD_ADDR_VAR 0 3
64143: PUSH
64144: LD_VAR 0 3
64148: PPUSH
64149: LD_VAR 0 3
64153: PUSH
64154: LD_INT 1
64156: PLUS
64157: PPUSH
64158: LD_VAR 0 4
64162: PPUSH
64163: CALL_OW 1
64167: ST_TO_ADDR
64168: GO 64119
64170: POP
64171: POP
// end ;
64172: LD_VAR 0 3
64176: RET
// export function IsDriver ( un ) ; begin
64177: LD_INT 0
64179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_VAR 0 1
64189: PUSH
64190: LD_INT 55
64192: PUSH
64193: EMPTY
64194: LIST
64195: PPUSH
64196: CALL_OW 69
64200: IN
64201: ST_TO_ADDR
// end ;
64202: LD_VAR 0 2
64206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
// list := [ ] ;
64211: LD_ADDR_VAR 0 5
64215: PUSH
64216: EMPTY
64217: ST_TO_ADDR
// case d of 0 :
64218: LD_VAR 0 3
64222: PUSH
64223: LD_INT 0
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64231
64229: GO 64364
64231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64232: LD_ADDR_VAR 0 5
64236: PUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_INT 4
64244: MINUS
64245: PUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_INT 4
64253: MINUS
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: PUSH
64263: LD_VAR 0 1
64267: PUSH
64268: LD_INT 3
64270: MINUS
64271: PUSH
64272: LD_VAR 0 2
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: PUSH
64285: LD_VAR 0 1
64289: PUSH
64290: LD_INT 4
64292: PLUS
64293: PUSH
64294: LD_VAR 0 2
64298: PUSH
64299: LD_INT 4
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: PUSH
64307: LD_VAR 0 1
64311: PUSH
64312: LD_INT 3
64314: PLUS
64315: PUSH
64316: LD_VAR 0 2
64320: PUSH
64321: LD_INT 3
64323: PLUS
64324: PUSH
64325: LD_INT 5
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: LIST
64332: PUSH
64333: LD_VAR 0 1
64337: PUSH
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 4
64345: PLUS
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// end ; 1 :
64362: GO 65062
64364: LD_INT 1
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64372
64370: GO 64505
64372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64373: LD_ADDR_VAR 0 5
64377: PUSH
64378: LD_VAR 0 1
64382: PUSH
64383: LD_VAR 0 2
64387: PUSH
64388: LD_INT 4
64390: MINUS
64391: PUSH
64392: LD_INT 3
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_INT 3
64407: MINUS
64408: PUSH
64409: LD_VAR 0 2
64413: PUSH
64414: LD_INT 3
64416: MINUS
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: LIST
64425: PUSH
64426: LD_VAR 0 1
64430: PUSH
64431: LD_INT 4
64433: MINUS
64434: PUSH
64435: LD_VAR 0 2
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: PUSH
64448: LD_VAR 0 1
64452: PUSH
64453: LD_VAR 0 2
64457: PUSH
64458: LD_INT 3
64460: PLUS
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: PUSH
64470: LD_VAR 0 1
64474: PUSH
64475: LD_INT 4
64477: PLUS
64478: PUSH
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 4
64486: PLUS
64487: PUSH
64488: LD_INT 5
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// end ; 2 :
64503: GO 65062
64505: LD_INT 2
64507: DOUBLE
64508: EQUAL
64509: IFTRUE 64513
64511: GO 64642
64513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 3
64531: MINUS
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: LD_INT 4
64548: PLUS
64549: PUSH
64550: LD_VAR 0 2
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: PUSH
64563: LD_VAR 0 1
64567: PUSH
64568: LD_VAR 0 2
64572: PUSH
64573: LD_INT 4
64575: PLUS
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 3
64592: MINUS
64593: PUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: PUSH
64607: LD_VAR 0 1
64611: PUSH
64612: LD_INT 4
64614: MINUS
64615: PUSH
64616: LD_VAR 0 2
64620: PUSH
64621: LD_INT 4
64623: MINUS
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// end ; 3 :
64640: GO 65062
64642: LD_INT 3
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64650
64648: GO 64783
64650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64651: LD_ADDR_VAR 0 5
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_INT 3
64663: PLUS
64664: PUSH
64665: LD_VAR 0 2
64669: PUSH
64670: LD_INT 4
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: PUSH
64678: LD_VAR 0 1
64682: PUSH
64683: LD_INT 4
64685: PLUS
64686: PUSH
64687: LD_VAR 0 2
64691: PUSH
64692: LD_INT 4
64694: PLUS
64695: PUSH
64696: LD_INT 5
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: PUSH
64704: LD_VAR 0 1
64708: PUSH
64709: LD_INT 4
64711: MINUS
64712: PUSH
64713: LD_VAR 0 2
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: PUSH
64726: LD_VAR 0 1
64730: PUSH
64731: LD_VAR 0 2
64735: PUSH
64736: LD_INT 4
64738: MINUS
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: PUSH
64748: LD_VAR 0 1
64752: PUSH
64753: LD_INT 3
64755: MINUS
64756: PUSH
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 3
64764: MINUS
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// end ; 4 :
64781: GO 65062
64783: LD_INT 4
64785: DOUBLE
64786: EQUAL
64787: IFTRUE 64791
64789: GO 64924
64791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64792: LD_ADDR_VAR 0 5
64796: PUSH
64797: LD_VAR 0 1
64801: PUSH
64802: LD_VAR 0 2
64806: PUSH
64807: LD_INT 4
64809: PLUS
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: PUSH
64819: LD_VAR 0 1
64823: PUSH
64824: LD_INT 3
64826: PLUS
64827: PUSH
64828: LD_VAR 0 2
64832: PUSH
64833: LD_INT 3
64835: PLUS
64836: PUSH
64837: LD_INT 5
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: PUSH
64845: LD_VAR 0 1
64849: PUSH
64850: LD_INT 4
64852: PLUS
64853: PUSH
64854: LD_VAR 0 2
64858: PUSH
64859: LD_INT 4
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: PUSH
64867: LD_VAR 0 1
64871: PUSH
64872: LD_VAR 0 2
64876: PUSH
64877: LD_INT 3
64879: MINUS
64880: PUSH
64881: LD_INT 3
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: PUSH
64889: LD_VAR 0 1
64893: PUSH
64894: LD_INT 4
64896: MINUS
64897: PUSH
64898: LD_VAR 0 2
64902: PUSH
64903: LD_INT 4
64905: MINUS
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// end ; 5 :
64922: GO 65062
64924: LD_INT 5
64926: DOUBLE
64927: EQUAL
64928: IFTRUE 64932
64930: GO 65061
64932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64933: LD_ADDR_VAR 0 5
64937: PUSH
64938: LD_VAR 0 1
64942: PUSH
64943: LD_INT 4
64945: MINUS
64946: PUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: PUSH
64960: LD_VAR 0 1
64964: PUSH
64965: LD_VAR 0 2
64969: PUSH
64970: LD_INT 4
64972: MINUS
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: PUSH
64982: LD_VAR 0 1
64986: PUSH
64987: LD_INT 4
64989: PLUS
64990: PUSH
64991: LD_VAR 0 2
64995: PUSH
64996: LD_INT 4
64998: PLUS
64999: PUSH
65000: LD_INT 5
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: PUSH
65008: LD_VAR 0 1
65012: PUSH
65013: LD_INT 3
65015: PLUS
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_INT 4
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: PUSH
65030: LD_VAR 0 1
65034: PUSH
65035: LD_VAR 0 2
65039: PUSH
65040: LD_INT 3
65042: PLUS
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: ST_TO_ADDR
// end ; end ;
65059: GO 65062
65061: POP
// result := list ;
65062: LD_ADDR_VAR 0 4
65066: PUSH
65067: LD_VAR 0 5
65071: ST_TO_ADDR
// end ;
65072: LD_VAR 0 4
65076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65077: LD_INT 0
65079: PPUSH
65080: PPUSH
65081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65082: LD_VAR 0 1
65086: NOT
65087: PUSH
65088: LD_VAR 0 2
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: LD_INT 4
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: IN
65111: NOT
65112: OR
65113: IFFALSE 65117
// exit ;
65115: GO 65209
// tmp := [ ] ;
65117: LD_ADDR_VAR 0 5
65121: PUSH
65122: EMPTY
65123: ST_TO_ADDR
// for i in units do
65124: LD_ADDR_VAR 0 4
65128: PUSH
65129: LD_VAR 0 1
65133: PUSH
65134: FOR_IN
65135: IFFALSE 65178
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65137: LD_ADDR_VAR 0 5
65141: PUSH
65142: LD_VAR 0 5
65146: PPUSH
65147: LD_VAR 0 5
65151: PUSH
65152: LD_INT 1
65154: PLUS
65155: PPUSH
65156: LD_VAR 0 4
65160: PPUSH
65161: LD_VAR 0 2
65165: PPUSH
65166: CALL_OW 259
65170: PPUSH
65171: CALL_OW 2
65175: ST_TO_ADDR
65176: GO 65134
65178: POP
65179: POP
// if not tmp then
65180: LD_VAR 0 5
65184: NOT
65185: IFFALSE 65189
// exit ;
65187: GO 65209
// result := SortListByListDesc ( units , tmp ) ;
65189: LD_ADDR_VAR 0 3
65193: PUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_VAR 0 5
65203: PPUSH
65204: CALL_OW 77
65208: ST_TO_ADDR
// end ;
65209: LD_VAR 0 3
65213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65214: LD_INT 0
65216: PPUSH
65217: PPUSH
65218: PPUSH
// result := false ;
65219: LD_ADDR_VAR 0 3
65223: PUSH
65224: LD_INT 0
65226: ST_TO_ADDR
// x := GetX ( building ) ;
65227: LD_ADDR_VAR 0 4
65231: PUSH
65232: LD_VAR 0 2
65236: PPUSH
65237: CALL_OW 250
65241: ST_TO_ADDR
// y := GetY ( building ) ;
65242: LD_ADDR_VAR 0 5
65246: PUSH
65247: LD_VAR 0 2
65251: PPUSH
65252: CALL_OW 251
65256: ST_TO_ADDR
// if not building or not x or not y then
65257: LD_VAR 0 2
65261: NOT
65262: PUSH
65263: LD_VAR 0 4
65267: NOT
65268: OR
65269: PUSH
65270: LD_VAR 0 5
65274: NOT
65275: OR
65276: IFFALSE 65280
// exit ;
65278: GO 65372
// if GetTaskList ( unit ) then
65280: LD_VAR 0 1
65284: PPUSH
65285: CALL_OW 437
65289: IFFALSE 65372
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65291: LD_STRING e
65293: PUSH
65294: LD_VAR 0 1
65298: PPUSH
65299: CALL_OW 437
65303: PUSH
65304: LD_INT 1
65306: ARRAY
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: EQUAL
65312: PUSH
65313: LD_VAR 0 4
65317: PUSH
65318: LD_VAR 0 1
65322: PPUSH
65323: CALL_OW 437
65327: PUSH
65328: LD_INT 1
65330: ARRAY
65331: PUSH
65332: LD_INT 2
65334: ARRAY
65335: EQUAL
65336: AND
65337: PUSH
65338: LD_VAR 0 5
65342: PUSH
65343: LD_VAR 0 1
65347: PPUSH
65348: CALL_OW 437
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: PUSH
65357: LD_INT 3
65359: ARRAY
65360: EQUAL
65361: AND
65362: IFFALSE 65372
// result := true end ;
65364: LD_ADDR_VAR 0 3
65368: PUSH
65369: LD_INT 1
65371: ST_TO_ADDR
// end ;
65372: LD_VAR 0 3
65376: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65377: LD_INT 0
65379: PPUSH
// result := false ;
65380: LD_ADDR_VAR 0 4
65384: PUSH
65385: LD_INT 0
65387: ST_TO_ADDR
// if GetTaskList ( unit ) then
65388: LD_VAR 0 1
65392: PPUSH
65393: CALL_OW 437
65397: IFFALSE 65480
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65399: LD_STRING M
65401: PUSH
65402: LD_VAR 0 1
65406: PPUSH
65407: CALL_OW 437
65411: PUSH
65412: LD_INT 1
65414: ARRAY
65415: PUSH
65416: LD_INT 1
65418: ARRAY
65419: EQUAL
65420: PUSH
65421: LD_VAR 0 2
65425: PUSH
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 437
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PUSH
65440: LD_INT 2
65442: ARRAY
65443: EQUAL
65444: AND
65445: PUSH
65446: LD_VAR 0 3
65450: PUSH
65451: LD_VAR 0 1
65455: PPUSH
65456: CALL_OW 437
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PUSH
65465: LD_INT 3
65467: ARRAY
65468: EQUAL
65469: AND
65470: IFFALSE 65480
// result := true ;
65472: LD_ADDR_VAR 0 4
65476: PUSH
65477: LD_INT 1
65479: ST_TO_ADDR
// end ; end ;
65480: LD_VAR 0 4
65484: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65485: LD_INT 0
65487: PPUSH
65488: PPUSH
65489: PPUSH
65490: PPUSH
// if not unit or not area then
65491: LD_VAR 0 1
65495: NOT
65496: PUSH
65497: LD_VAR 0 2
65501: NOT
65502: OR
65503: IFFALSE 65507
// exit ;
65505: GO 65671
// tmp := AreaToList ( area , i ) ;
65507: LD_ADDR_VAR 0 6
65511: PUSH
65512: LD_VAR 0 2
65516: PPUSH
65517: LD_VAR 0 5
65521: PPUSH
65522: CALL_OW 517
65526: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65527: LD_ADDR_VAR 0 5
65531: PUSH
65532: DOUBLE
65533: LD_INT 1
65535: DEC
65536: ST_TO_ADDR
65537: LD_VAR 0 6
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: PUSH
65546: FOR_TO
65547: IFFALSE 65669
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65549: LD_ADDR_VAR 0 7
65553: PUSH
65554: LD_VAR 0 6
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PUSH
65563: LD_VAR 0 5
65567: ARRAY
65568: PUSH
65569: LD_VAR 0 6
65573: PUSH
65574: LD_INT 2
65576: ARRAY
65577: PUSH
65578: LD_VAR 0 5
65582: ARRAY
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65588: LD_VAR 0 7
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: PPUSH
65597: LD_VAR 0 7
65601: PUSH
65602: LD_INT 2
65604: ARRAY
65605: PPUSH
65606: CALL_OW 428
65610: PUSH
65611: LD_INT 0
65613: EQUAL
65614: IFFALSE 65667
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65616: LD_VAR 0 1
65620: PPUSH
65621: LD_VAR 0 7
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 7
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: LD_VAR 0 3
65643: PPUSH
65644: CALL_OW 48
// result := IsPlaced ( unit ) ;
65648: LD_ADDR_VAR 0 4
65652: PUSH
65653: LD_VAR 0 1
65657: PPUSH
65658: CALL_OW 305
65662: ST_TO_ADDR
// exit ;
65663: POP
65664: POP
65665: GO 65671
// end ; end ;
65667: GO 65546
65669: POP
65670: POP
// end ;
65671: LD_VAR 0 4
65675: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65676: LD_INT 0
65678: PPUSH
65679: PPUSH
65680: PPUSH
// if not side or side > 8 then
65681: LD_VAR 0 1
65685: NOT
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: LD_INT 8
65694: GREATER
65695: OR
65696: IFFALSE 65700
// exit ;
65698: GO 65887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65700: LD_ADDR_VAR 0 4
65704: PUSH
65705: LD_INT 22
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 21
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PPUSH
65731: CALL_OW 69
65735: ST_TO_ADDR
// if not tmp then
65736: LD_VAR 0 4
65740: NOT
65741: IFFALSE 65745
// exit ;
65743: GO 65887
// enable_addtolog := true ;
65745: LD_ADDR_OWVAR 81
65749: PUSH
65750: LD_INT 1
65752: ST_TO_ADDR
// AddToLog ( [ ) ;
65753: LD_STRING [
65755: PPUSH
65756: CALL_OW 561
// for i in tmp do
65760: LD_ADDR_VAR 0 3
65764: PUSH
65765: LD_VAR 0 4
65769: PUSH
65770: FOR_IN
65771: IFFALSE 65878
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65773: LD_STRING [
65775: PUSH
65776: LD_VAR 0 3
65780: PPUSH
65781: CALL_OW 266
65785: STR
65786: PUSH
65787: LD_STRING , 
65789: STR
65790: PUSH
65791: LD_VAR 0 3
65795: PPUSH
65796: CALL_OW 250
65800: STR
65801: PUSH
65802: LD_STRING , 
65804: STR
65805: PUSH
65806: LD_VAR 0 3
65810: PPUSH
65811: CALL_OW 251
65815: STR
65816: PUSH
65817: LD_STRING , 
65819: STR
65820: PUSH
65821: LD_VAR 0 3
65825: PPUSH
65826: CALL_OW 254
65830: STR
65831: PUSH
65832: LD_STRING , 
65834: STR
65835: PUSH
65836: LD_VAR 0 3
65840: PPUSH
65841: LD_INT 1
65843: PPUSH
65844: CALL_OW 268
65848: STR
65849: PUSH
65850: LD_STRING , 
65852: STR
65853: PUSH
65854: LD_VAR 0 3
65858: PPUSH
65859: LD_INT 2
65861: PPUSH
65862: CALL_OW 268
65866: STR
65867: PUSH
65868: LD_STRING ],
65870: STR
65871: PPUSH
65872: CALL_OW 561
// end ;
65876: GO 65770
65878: POP
65879: POP
// AddToLog ( ]; ) ;
65880: LD_STRING ];
65882: PPUSH
65883: CALL_OW 561
// end ;
65887: LD_VAR 0 2
65891: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65892: LD_INT 0
65894: PPUSH
65895: PPUSH
65896: PPUSH
65897: PPUSH
65898: PPUSH
// if not area or not rate or not max then
65899: LD_VAR 0 1
65903: NOT
65904: PUSH
65905: LD_VAR 0 2
65909: NOT
65910: OR
65911: PUSH
65912: LD_VAR 0 4
65916: NOT
65917: OR
65918: IFFALSE 65922
// exit ;
65920: GO 66114
// while 1 do
65922: LD_INT 1
65924: IFFALSE 66114
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65926: LD_ADDR_VAR 0 9
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: LD_INT 1
65938: PPUSH
65939: CALL_OW 287
65943: PUSH
65944: LD_INT 10
65946: MUL
65947: ST_TO_ADDR
// r := rate / 10 ;
65948: LD_ADDR_VAR 0 7
65952: PUSH
65953: LD_VAR 0 2
65957: PUSH
65958: LD_INT 10
65960: DIVREAL
65961: ST_TO_ADDR
// time := 1 1$00 ;
65962: LD_ADDR_VAR 0 8
65966: PUSH
65967: LD_INT 2100
65969: ST_TO_ADDR
// if amount < min then
65970: LD_VAR 0 9
65974: PUSH
65975: LD_VAR 0 3
65979: LESS
65980: IFFALSE 65998
// r := r * 2 else
65982: LD_ADDR_VAR 0 7
65986: PUSH
65987: LD_VAR 0 7
65991: PUSH
65992: LD_INT 2
65994: MUL
65995: ST_TO_ADDR
65996: GO 66024
// if amount > max then
65998: LD_VAR 0 9
66002: PUSH
66003: LD_VAR 0 4
66007: GREATER
66008: IFFALSE 66024
// r := r / 2 ;
66010: LD_ADDR_VAR 0 7
66014: PUSH
66015: LD_VAR 0 7
66019: PUSH
66020: LD_INT 2
66022: DIVREAL
66023: ST_TO_ADDR
// time := time / r ;
66024: LD_ADDR_VAR 0 8
66028: PUSH
66029: LD_VAR 0 8
66033: PUSH
66034: LD_VAR 0 7
66038: DIVREAL
66039: ST_TO_ADDR
// if time < 0 then
66040: LD_VAR 0 8
66044: PUSH
66045: LD_INT 0
66047: LESS
66048: IFFALSE 66065
// time := time * - 1 ;
66050: LD_ADDR_VAR 0 8
66054: PUSH
66055: LD_VAR 0 8
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: MUL
66064: ST_TO_ADDR
// wait ( time ) ;
66065: LD_VAR 0 8
66069: PPUSH
66070: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66074: LD_INT 35
66076: PPUSH
66077: LD_INT 875
66079: PPUSH
66080: CALL_OW 12
66084: PPUSH
66085: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66089: LD_INT 1
66091: PPUSH
66092: LD_INT 5
66094: PPUSH
66095: CALL_OW 12
66099: PPUSH
66100: LD_VAR 0 1
66104: PPUSH
66105: LD_INT 1
66107: PPUSH
66108: CALL_OW 55
// end ;
66112: GO 65922
// end ;
66114: LD_VAR 0 5
66118: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
66128: PPUSH
// if not turrets or not factories then
66129: LD_VAR 0 1
66133: NOT
66134: PUSH
66135: LD_VAR 0 2
66139: NOT
66140: OR
66141: IFFALSE 66145
// exit ;
66143: GO 66452
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66145: LD_ADDR_VAR 0 10
66149: PUSH
66150: LD_INT 5
66152: PUSH
66153: LD_INT 6
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 4
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 5
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 24
66187: PUSH
66188: LD_INT 25
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 23
66197: PUSH
66198: LD_INT 27
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 42
66211: PUSH
66212: LD_INT 43
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 44
66221: PUSH
66222: LD_INT 46
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 45
66231: PUSH
66232: LD_INT 47
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// result := [ ] ;
66249: LD_ADDR_VAR 0 3
66253: PUSH
66254: EMPTY
66255: ST_TO_ADDR
// for i in turrets do
66256: LD_ADDR_VAR 0 4
66260: PUSH
66261: LD_VAR 0 1
66265: PUSH
66266: FOR_IN
66267: IFFALSE 66450
// begin nat := GetNation ( i ) ;
66269: LD_ADDR_VAR 0 7
66273: PUSH
66274: LD_VAR 0 4
66278: PPUSH
66279: CALL_OW 248
66283: ST_TO_ADDR
// weapon := 0 ;
66284: LD_ADDR_VAR 0 8
66288: PUSH
66289: LD_INT 0
66291: ST_TO_ADDR
// if not nat then
66292: LD_VAR 0 7
66296: NOT
66297: IFFALSE 66301
// continue ;
66299: GO 66266
// for j in list [ nat ] do
66301: LD_ADDR_VAR 0 5
66305: PUSH
66306: LD_VAR 0 10
66310: PUSH
66311: LD_VAR 0 7
66315: ARRAY
66316: PUSH
66317: FOR_IN
66318: IFFALSE 66359
// if GetBWeapon ( i ) = j [ 1 ] then
66320: LD_VAR 0 4
66324: PPUSH
66325: CALL_OW 269
66329: PUSH
66330: LD_VAR 0 5
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: EQUAL
66339: IFFALSE 66357
// begin weapon := j [ 2 ] ;
66341: LD_ADDR_VAR 0 8
66345: PUSH
66346: LD_VAR 0 5
66350: PUSH
66351: LD_INT 2
66353: ARRAY
66354: ST_TO_ADDR
// break ;
66355: GO 66359
// end ;
66357: GO 66317
66359: POP
66360: POP
// if not weapon then
66361: LD_VAR 0 8
66365: NOT
66366: IFFALSE 66370
// continue ;
66368: GO 66266
// for k in factories do
66370: LD_ADDR_VAR 0 6
66374: PUSH
66375: LD_VAR 0 2
66379: PUSH
66380: FOR_IN
66381: IFFALSE 66446
// begin weapons := AvailableWeaponList ( k ) ;
66383: LD_ADDR_VAR 0 9
66387: PUSH
66388: LD_VAR 0 6
66392: PPUSH
66393: CALL_OW 478
66397: ST_TO_ADDR
// if not weapons then
66398: LD_VAR 0 9
66402: NOT
66403: IFFALSE 66407
// continue ;
66405: GO 66380
// if weapon in weapons then
66407: LD_VAR 0 8
66411: PUSH
66412: LD_VAR 0 9
66416: IN
66417: IFFALSE 66444
// begin result := [ i , weapon ] ;
66419: LD_ADDR_VAR 0 3
66423: PUSH
66424: LD_VAR 0 4
66428: PUSH
66429: LD_VAR 0 8
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: ST_TO_ADDR
// exit ;
66438: POP
66439: POP
66440: POP
66441: POP
66442: GO 66452
// end ; end ;
66444: GO 66380
66446: POP
66447: POP
// end ;
66448: GO 66266
66450: POP
66451: POP
// end ;
66452: LD_VAR 0 3
66456: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66457: LD_INT 0
66459: PPUSH
// if not side or side > 8 then
66460: LD_VAR 0 3
66464: NOT
66465: PUSH
66466: LD_VAR 0 3
66470: PUSH
66471: LD_INT 8
66473: GREATER
66474: OR
66475: IFFALSE 66479
// exit ;
66477: GO 66538
// if not range then
66479: LD_VAR 0 4
66483: NOT
66484: IFFALSE 66495
// range := - 12 ;
66486: LD_ADDR_VAR 0 4
66490: PUSH
66491: LD_INT 12
66493: NEG
66494: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66495: LD_VAR 0 1
66499: PPUSH
66500: LD_VAR 0 2
66504: PPUSH
66505: LD_VAR 0 3
66509: PPUSH
66510: LD_VAR 0 4
66514: PPUSH
66515: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66519: LD_VAR 0 1
66523: PPUSH
66524: LD_VAR 0 2
66528: PPUSH
66529: LD_VAR 0 3
66533: PPUSH
66534: CALL_OW 331
// end ;
66538: LD_VAR 0 5
66542: RET
// export function Video ( mode ) ; begin
66543: LD_INT 0
66545: PPUSH
// ingame_video = mode ;
66546: LD_ADDR_OWVAR 52
66550: PUSH
66551: LD_VAR 0 1
66555: ST_TO_ADDR
// interface_hidden = mode ;
66556: LD_ADDR_OWVAR 54
66560: PUSH
66561: LD_VAR 0 1
66565: ST_TO_ADDR
// end ;
66566: LD_VAR 0 2
66570: RET
// export function Join ( array , element ) ; begin
66571: LD_INT 0
66573: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: LD_VAR 0 1
66583: PPUSH
66584: LD_VAR 0 1
66588: PUSH
66589: LD_INT 1
66591: PLUS
66592: PPUSH
66593: LD_VAR 0 2
66597: PPUSH
66598: CALL_OW 1
66602: ST_TO_ADDR
// end ;
66603: LD_VAR 0 3
66607: RET
// export function JoinUnion ( array , element ) ; begin
66608: LD_INT 0
66610: PPUSH
// result := array union element ;
66611: LD_ADDR_VAR 0 3
66615: PUSH
66616: LD_VAR 0 1
66620: PUSH
66621: LD_VAR 0 2
66625: UNION
66626: ST_TO_ADDR
// end ;
66627: LD_VAR 0 3
66631: RET
// export function GetBehemoths ( side ) ; begin
66632: LD_INT 0
66634: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66635: LD_ADDR_VAR 0 2
66639: PUSH
66640: LD_INT 22
66642: PUSH
66643: LD_VAR 0 1
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 31
66654: PUSH
66655: LD_INT 25
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PPUSH
66666: CALL_OW 69
66670: ST_TO_ADDR
// end ;
66671: LD_VAR 0 2
66675: RET
// export function Shuffle ( array ) ; var i , index ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
66680: PPUSH
// result := [ ] ;
66681: LD_ADDR_VAR 0 2
66685: PUSH
66686: EMPTY
66687: ST_TO_ADDR
// if not array then
66688: LD_VAR 0 1
66692: NOT
66693: IFFALSE 66697
// exit ;
66695: GO 66796
// Randomize ;
66697: CALL_OW 10
// for i = array downto 1 do
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: DOUBLE
66707: LD_VAR 0 1
66711: INC
66712: ST_TO_ADDR
66713: LD_INT 1
66715: PUSH
66716: FOR_DOWNTO
66717: IFFALSE 66794
// begin index := rand ( 1 , array ) ;
66719: LD_ADDR_VAR 0 4
66723: PUSH
66724: LD_INT 1
66726: PPUSH
66727: LD_VAR 0 1
66731: PPUSH
66732: CALL_OW 12
66736: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66737: LD_ADDR_VAR 0 2
66741: PUSH
66742: LD_VAR 0 2
66746: PPUSH
66747: LD_VAR 0 2
66751: PUSH
66752: LD_INT 1
66754: PLUS
66755: PPUSH
66756: LD_VAR 0 1
66760: PUSH
66761: LD_VAR 0 4
66765: ARRAY
66766: PPUSH
66767: CALL_OW 2
66771: ST_TO_ADDR
// array := Delete ( array , index ) ;
66772: LD_ADDR_VAR 0 1
66776: PUSH
66777: LD_VAR 0 1
66781: PPUSH
66782: LD_VAR 0 4
66786: PPUSH
66787: CALL_OW 3
66791: ST_TO_ADDR
// end ;
66792: GO 66716
66794: POP
66795: POP
// end ;
66796: LD_VAR 0 2
66800: RET
// export function GetBaseMaterials ( base ) ; begin
66801: LD_INT 0
66803: PPUSH
// result := [ 0 , 0 , 0 ] ;
66804: LD_ADDR_VAR 0 2
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// if not base then
66823: LD_VAR 0 1
66827: NOT
66828: IFFALSE 66832
// exit ;
66830: GO 66881
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66832: LD_ADDR_VAR 0 2
66836: PUSH
66837: LD_VAR 0 1
66841: PPUSH
66842: LD_INT 1
66844: PPUSH
66845: CALL_OW 275
66849: PUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: LD_INT 2
66857: PPUSH
66858: CALL_OW 275
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: LD_INT 3
66870: PPUSH
66871: CALL_OW 275
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: ST_TO_ADDR
// end ;
66881: LD_VAR 0 2
66885: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66886: LD_INT 0
66888: PPUSH
66889: PPUSH
// result := array ;
66890: LD_ADDR_VAR 0 3
66894: PUSH
66895: LD_VAR 0 1
66899: ST_TO_ADDR
// if size > 0 then
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 0
66907: GREATER
66908: IFFALSE 66954
// for i := array downto size do
66910: LD_ADDR_VAR 0 4
66914: PUSH
66915: DOUBLE
66916: LD_VAR 0 1
66920: INC
66921: ST_TO_ADDR
66922: LD_VAR 0 2
66926: PUSH
66927: FOR_DOWNTO
66928: IFFALSE 66952
// result := Delete ( result , result ) ;
66930: LD_ADDR_VAR 0 3
66934: PUSH
66935: LD_VAR 0 3
66939: PPUSH
66940: LD_VAR 0 3
66944: PPUSH
66945: CALL_OW 3
66949: ST_TO_ADDR
66950: GO 66927
66952: POP
66953: POP
// end ;
66954: LD_VAR 0 3
66958: RET
// export function ComExit ( unit ) ; var tmp ; begin
66959: LD_INT 0
66961: PPUSH
66962: PPUSH
// if not IsInUnit ( unit ) then
66963: LD_VAR 0 1
66967: PPUSH
66968: CALL_OW 310
66972: NOT
66973: IFFALSE 66977
// exit ;
66975: GO 67037
// tmp := IsInUnit ( unit ) ;
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 310
66991: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66992: LD_VAR 0 3
66996: PPUSH
66997: CALL_OW 247
67001: PUSH
67002: LD_INT 2
67004: EQUAL
67005: IFFALSE 67018
// ComExitVehicle ( unit ) else
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 121
67016: GO 67027
// ComExitBuilding ( unit ) ;
67018: LD_VAR 0 1
67022: PPUSH
67023: CALL_OW 122
// result := tmp ;
67027: LD_ADDR_VAR 0 2
67031: PUSH
67032: LD_VAR 0 3
67036: ST_TO_ADDR
// end ;
67037: LD_VAR 0 2
67041: RET
// export function ComExitAll ( units ) ; var i ; begin
67042: LD_INT 0
67044: PPUSH
67045: PPUSH
// if not units then
67046: LD_VAR 0 1
67050: NOT
67051: IFFALSE 67055
// exit ;
67053: GO 67081
// for i in units do
67055: LD_ADDR_VAR 0 3
67059: PUSH
67060: LD_VAR 0 1
67064: PUSH
67065: FOR_IN
67066: IFFALSE 67079
// ComExit ( i ) ;
67068: LD_VAR 0 3
67072: PPUSH
67073: CALL 66959 0 1
67077: GO 67065
67079: POP
67080: POP
// end ;
67081: LD_VAR 0 2
67085: RET
// export function ResetHc ; begin
67086: LD_INT 0
67088: PPUSH
// InitHc ;
67089: CALL_OW 19
// hc_importance := 0 ;
67093: LD_ADDR_OWVAR 32
67097: PUSH
67098: LD_INT 0
67100: ST_TO_ADDR
// end ;
67101: LD_VAR 0 1
67105: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67106: LD_INT 0
67108: PPUSH
67109: PPUSH
67110: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67111: LD_ADDR_VAR 0 6
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_VAR 0 3
67125: PLUS
67126: PUSH
67127: LD_INT 2
67129: DIV
67130: ST_TO_ADDR
// if _x < 0 then
67131: LD_VAR 0 6
67135: PUSH
67136: LD_INT 0
67138: LESS
67139: IFFALSE 67156
// _x := _x * - 1 ;
67141: LD_ADDR_VAR 0 6
67145: PUSH
67146: LD_VAR 0 6
67150: PUSH
67151: LD_INT 1
67153: NEG
67154: MUL
67155: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67156: LD_ADDR_VAR 0 7
67160: PUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_VAR 0 4
67170: PLUS
67171: PUSH
67172: LD_INT 2
67174: DIV
67175: ST_TO_ADDR
// if _y < 0 then
67176: LD_VAR 0 7
67180: PUSH
67181: LD_INT 0
67183: LESS
67184: IFFALSE 67201
// _y := _y * - 1 ;
67186: LD_ADDR_VAR 0 7
67190: PUSH
67191: LD_VAR 0 7
67195: PUSH
67196: LD_INT 1
67198: NEG
67199: MUL
67200: ST_TO_ADDR
// result := [ _x , _y ] ;
67201: LD_ADDR_VAR 0 5
67205: PUSH
67206: LD_VAR 0 6
67210: PUSH
67211: LD_VAR 0 7
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: ST_TO_ADDR
// end ;
67220: LD_VAR 0 5
67224: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67225: LD_INT 0
67227: PPUSH
67228: PPUSH
67229: PPUSH
67230: PPUSH
// task := GetTaskList ( unit ) ;
67231: LD_ADDR_VAR 0 7
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 437
67245: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67246: LD_VAR 0 7
67250: NOT
67251: PUSH
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: CALL_OW 308
67266: NOT
67267: AND
67268: IFFALSE 67272
// exit ;
67270: GO 67390
// if IsInArea ( unit , area ) then
67272: LD_VAR 0 1
67276: PPUSH
67277: LD_VAR 0 2
67281: PPUSH
67282: CALL_OW 308
67286: IFFALSE 67304
// begin ComMoveToArea ( unit , goAway ) ;
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_VAR 0 3
67297: PPUSH
67298: CALL_OW 113
// exit ;
67302: GO 67390
// end ; if task [ 1 ] [ 1 ] <> M then
67304: LD_VAR 0 7
67308: PUSH
67309: LD_INT 1
67311: ARRAY
67312: PUSH
67313: LD_INT 1
67315: ARRAY
67316: PUSH
67317: LD_STRING M
67319: NONEQUAL
67320: IFFALSE 67324
// exit ;
67322: GO 67390
// x := task [ 1 ] [ 2 ] ;
67324: LD_ADDR_VAR 0 5
67328: PUSH
67329: LD_VAR 0 7
67333: PUSH
67334: LD_INT 1
67336: ARRAY
67337: PUSH
67338: LD_INT 2
67340: ARRAY
67341: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67342: LD_ADDR_VAR 0 6
67346: PUSH
67347: LD_VAR 0 7
67351: PUSH
67352: LD_INT 1
67354: ARRAY
67355: PUSH
67356: LD_INT 3
67358: ARRAY
67359: ST_TO_ADDR
// if InArea ( x , y , area ) then
67360: LD_VAR 0 5
67364: PPUSH
67365: LD_VAR 0 6
67369: PPUSH
67370: LD_VAR 0 2
67374: PPUSH
67375: CALL_OW 309
67379: IFFALSE 67390
// ComStop ( unit ) ;
67381: LD_VAR 0 1
67385: PPUSH
67386: CALL_OW 141
// end ;
67390: LD_VAR 0 4
67394: RET
// export function Abs ( value ) ; begin
67395: LD_INT 0
67397: PPUSH
// result := value ;
67398: LD_ADDR_VAR 0 2
67402: PUSH
67403: LD_VAR 0 1
67407: ST_TO_ADDR
// if value < 0 then
67408: LD_VAR 0 1
67412: PUSH
67413: LD_INT 0
67415: LESS
67416: IFFALSE 67433
// result := value * - 1 ;
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: LD_VAR 0 1
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: MUL
67432: ST_TO_ADDR
// end ;
67433: LD_VAR 0 2
67437: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67438: LD_INT 0
67440: PPUSH
67441: PPUSH
67442: PPUSH
67443: PPUSH
67444: PPUSH
67445: PPUSH
67446: PPUSH
67447: PPUSH
// if not unit or not building then
67448: LD_VAR 0 1
67452: NOT
67453: PUSH
67454: LD_VAR 0 2
67458: NOT
67459: OR
67460: IFFALSE 67464
// exit ;
67462: GO 67690
// x := GetX ( building ) ;
67464: LD_ADDR_VAR 0 4
67468: PUSH
67469: LD_VAR 0 2
67473: PPUSH
67474: CALL_OW 250
67478: ST_TO_ADDR
// y := GetY ( building ) ;
67479: LD_ADDR_VAR 0 6
67483: PUSH
67484: LD_VAR 0 2
67488: PPUSH
67489: CALL_OW 251
67493: ST_TO_ADDR
// d := GetDir ( building ) ;
67494: LD_ADDR_VAR 0 8
67498: PUSH
67499: LD_VAR 0 2
67503: PPUSH
67504: CALL_OW 254
67508: ST_TO_ADDR
// r := 4 ;
67509: LD_ADDR_VAR 0 9
67513: PUSH
67514: LD_INT 4
67516: ST_TO_ADDR
// for i := 1 to 5 do
67517: LD_ADDR_VAR 0 10
67521: PUSH
67522: DOUBLE
67523: LD_INT 1
67525: DEC
67526: ST_TO_ADDR
67527: LD_INT 5
67529: PUSH
67530: FOR_TO
67531: IFFALSE 67688
// begin _x := ShiftX ( x , d , r + i ) ;
67533: LD_ADDR_VAR 0 5
67537: PUSH
67538: LD_VAR 0 4
67542: PPUSH
67543: LD_VAR 0 8
67547: PPUSH
67548: LD_VAR 0 9
67552: PUSH
67553: LD_VAR 0 10
67557: PLUS
67558: PPUSH
67559: CALL_OW 272
67563: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67564: LD_ADDR_VAR 0 7
67568: PUSH
67569: LD_VAR 0 6
67573: PPUSH
67574: LD_VAR 0 8
67578: PPUSH
67579: LD_VAR 0 9
67583: PUSH
67584: LD_VAR 0 10
67588: PLUS
67589: PPUSH
67590: CALL_OW 273
67594: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67595: LD_VAR 0 5
67599: PPUSH
67600: LD_VAR 0 7
67604: PPUSH
67605: CALL_OW 488
67609: PUSH
67610: LD_VAR 0 5
67614: PPUSH
67615: LD_VAR 0 7
67619: PPUSH
67620: CALL_OW 428
67624: PPUSH
67625: CALL_OW 247
67629: PUSH
67630: LD_INT 3
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: IN
67640: NOT
67641: AND
67642: IFFALSE 67686
// begin ComMoveXY ( unit , _x , _y ) ;
67644: LD_VAR 0 1
67648: PPUSH
67649: LD_VAR 0 5
67653: PPUSH
67654: LD_VAR 0 7
67658: PPUSH
67659: CALL_OW 111
// result := [ _x , _y ] ;
67663: LD_ADDR_VAR 0 3
67667: PUSH
67668: LD_VAR 0 5
67672: PUSH
67673: LD_VAR 0 7
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: ST_TO_ADDR
// exit ;
67682: POP
67683: POP
67684: GO 67690
// end ; end ;
67686: GO 67530
67688: POP
67689: POP
// end ;
67690: LD_VAR 0 3
67694: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67695: LD_INT 0
67697: PPUSH
67698: PPUSH
67699: PPUSH
// result := 0 ;
67700: LD_ADDR_VAR 0 3
67704: PUSH
67705: LD_INT 0
67707: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67708: LD_VAR 0 1
67712: PUSH
67713: LD_INT 0
67715: LESS
67716: PUSH
67717: LD_VAR 0 1
67721: PUSH
67722: LD_INT 8
67724: GREATER
67725: OR
67726: PUSH
67727: LD_VAR 0 2
67731: PUSH
67732: LD_INT 0
67734: LESS
67735: OR
67736: PUSH
67737: LD_VAR 0 2
67741: PUSH
67742: LD_INT 8
67744: GREATER
67745: OR
67746: IFFALSE 67750
// exit ;
67748: GO 67825
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67750: LD_ADDR_VAR 0 4
67754: PUSH
67755: LD_INT 22
67757: PUSH
67758: LD_VAR 0 2
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PPUSH
67767: CALL_OW 69
67771: PUSH
67772: FOR_IN
67773: IFFALSE 67823
// begin un := UnitShoot ( i ) ;
67775: LD_ADDR_VAR 0 5
67779: PUSH
67780: LD_VAR 0 4
67784: PPUSH
67785: CALL_OW 504
67789: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67790: LD_VAR 0 5
67794: PPUSH
67795: CALL_OW 255
67799: PUSH
67800: LD_VAR 0 1
67804: EQUAL
67805: IFFALSE 67821
// begin result := un ;
67807: LD_ADDR_VAR 0 3
67811: PUSH
67812: LD_VAR 0 5
67816: ST_TO_ADDR
// exit ;
67817: POP
67818: POP
67819: GO 67825
// end ; end ;
67821: GO 67772
67823: POP
67824: POP
// end ;
67825: LD_VAR 0 3
67829: RET
// export function GetCargoBay ( units ) ; begin
67830: LD_INT 0
67832: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67833: LD_ADDR_VAR 0 2
67837: PUSH
67838: LD_VAR 0 1
67842: PPUSH
67843: LD_INT 2
67845: PUSH
67846: LD_INT 34
67848: PUSH
67849: LD_INT 12
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 34
67858: PUSH
67859: LD_INT 51
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 34
67868: PUSH
67869: LD_INT 32
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 34
67878: PUSH
67879: LD_EXP 20
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: PPUSH
67895: CALL_OW 72
67899: ST_TO_ADDR
// end ;
67900: LD_VAR 0 2
67904: RET
// export function Negate ( value ) ; begin
67905: LD_INT 0
67907: PPUSH
// result := not value ;
67908: LD_ADDR_VAR 0 2
67912: PUSH
67913: LD_VAR 0 1
67917: NOT
67918: ST_TO_ADDR
// end ;
67919: LD_VAR 0 2
67923: RET
// export function Inc ( value ) ; begin
67924: LD_INT 0
67926: PPUSH
// result := value + 1 ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_VAR 0 1
67936: PUSH
67937: LD_INT 1
67939: PLUS
67940: ST_TO_ADDR
// end ;
67941: LD_VAR 0 2
67945: RET
// export function Dec ( value ) ; begin
67946: LD_INT 0
67948: PPUSH
// result := value - 1 ;
67949: LD_ADDR_VAR 0 2
67953: PUSH
67954: LD_VAR 0 1
67958: PUSH
67959: LD_INT 1
67961: MINUS
67962: ST_TO_ADDR
// end ;
67963: LD_VAR 0 2
67967: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67968: LD_INT 0
67970: PPUSH
67971: PPUSH
67972: PPUSH
67973: PPUSH
67974: PPUSH
67975: PPUSH
67976: PPUSH
67977: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67978: LD_VAR 0 1
67982: PPUSH
67983: LD_VAR 0 2
67987: PPUSH
67988: CALL_OW 488
67992: NOT
67993: PUSH
67994: LD_VAR 0 3
67998: PPUSH
67999: LD_VAR 0 4
68003: PPUSH
68004: CALL_OW 488
68008: NOT
68009: OR
68010: IFFALSE 68023
// begin result := - 1 ;
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: ST_TO_ADDR
// exit ;
68021: GO 68258
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68023: LD_ADDR_VAR 0 12
68027: PUSH
68028: LD_VAR 0 1
68032: PPUSH
68033: LD_VAR 0 2
68037: PPUSH
68038: LD_VAR 0 3
68042: PPUSH
68043: LD_VAR 0 4
68047: PPUSH
68048: CALL 67106 0 4
68052: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68053: LD_ADDR_VAR 0 11
68057: PUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: LD_VAR 0 2
68067: PPUSH
68068: LD_VAR 0 12
68072: PUSH
68073: LD_INT 1
68075: ARRAY
68076: PPUSH
68077: LD_VAR 0 12
68081: PUSH
68082: LD_INT 2
68084: ARRAY
68085: PPUSH
68086: CALL_OW 298
68090: ST_TO_ADDR
// distance := 9999 ;
68091: LD_ADDR_VAR 0 10
68095: PUSH
68096: LD_INT 9999
68098: ST_TO_ADDR
// for i := 0 to 5 do
68099: LD_ADDR_VAR 0 6
68103: PUSH
68104: DOUBLE
68105: LD_INT 0
68107: DEC
68108: ST_TO_ADDR
68109: LD_INT 5
68111: PUSH
68112: FOR_TO
68113: IFFALSE 68256
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68115: LD_ADDR_VAR 0 7
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: LD_VAR 0 6
68129: PPUSH
68130: LD_VAR 0 11
68134: PPUSH
68135: CALL_OW 272
68139: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68140: LD_ADDR_VAR 0 8
68144: PUSH
68145: LD_VAR 0 2
68149: PPUSH
68150: LD_VAR 0 6
68154: PPUSH
68155: LD_VAR 0 11
68159: PPUSH
68160: CALL_OW 273
68164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68165: LD_VAR 0 7
68169: PPUSH
68170: LD_VAR 0 8
68174: PPUSH
68175: CALL_OW 488
68179: NOT
68180: IFFALSE 68184
// continue ;
68182: GO 68112
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68184: LD_ADDR_VAR 0 9
68188: PUSH
68189: LD_VAR 0 12
68193: PUSH
68194: LD_INT 1
68196: ARRAY
68197: PPUSH
68198: LD_VAR 0 12
68202: PUSH
68203: LD_INT 2
68205: ARRAY
68206: PPUSH
68207: LD_VAR 0 7
68211: PPUSH
68212: LD_VAR 0 8
68216: PPUSH
68217: CALL_OW 298
68221: ST_TO_ADDR
// if tmp < distance then
68222: LD_VAR 0 9
68226: PUSH
68227: LD_VAR 0 10
68231: LESS
68232: IFFALSE 68254
// begin result := i ;
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 6
68243: ST_TO_ADDR
// distance := tmp ;
68244: LD_ADDR_VAR 0 10
68248: PUSH
68249: LD_VAR 0 9
68253: ST_TO_ADDR
// end ; end ;
68254: GO 68112
68256: POP
68257: POP
// end ;
68258: LD_VAR 0 5
68262: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68263: LD_INT 0
68265: PPUSH
68266: PPUSH
// if not driver or not IsInUnit ( driver ) then
68267: LD_VAR 0 1
68271: NOT
68272: PUSH
68273: LD_VAR 0 1
68277: PPUSH
68278: CALL_OW 310
68282: NOT
68283: OR
68284: IFFALSE 68288
// exit ;
68286: GO 68378
// vehicle := IsInUnit ( driver ) ;
68288: LD_ADDR_VAR 0 3
68292: PUSH
68293: LD_VAR 0 1
68297: PPUSH
68298: CALL_OW 310
68302: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68303: LD_VAR 0 1
68307: PPUSH
68308: LD_STRING \
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: LD_INT 0
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: PUSH
68338: LD_STRING E
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_VAR 0 3
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PPUSH
68374: CALL_OW 446
// end ;
68378: LD_VAR 0 2
68382: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68383: LD_INT 0
68385: PPUSH
68386: PPUSH
// if not driver or not IsInUnit ( driver ) then
68387: LD_VAR 0 1
68391: NOT
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 310
68402: NOT
68403: OR
68404: IFFALSE 68408
// exit ;
68406: GO 68498
// vehicle := IsInUnit ( driver ) ;
68408: LD_ADDR_VAR 0 3
68412: PUSH
68413: LD_VAR 0 1
68417: PPUSH
68418: CALL_OW 310
68422: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68423: LD_VAR 0 1
68427: PPUSH
68428: LD_STRING \
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: PUSH
68458: LD_STRING E
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_VAR 0 3
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PPUSH
68494: CALL_OW 447
// end ;
68498: LD_VAR 0 2
68502: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68503: LD_INT 0
68505: PPUSH
68506: PPUSH
68507: PPUSH
// tmp := [ ] ;
68508: LD_ADDR_VAR 0 5
68512: PUSH
68513: EMPTY
68514: ST_TO_ADDR
// for i in units do
68515: LD_ADDR_VAR 0 4
68519: PUSH
68520: LD_VAR 0 1
68524: PUSH
68525: FOR_IN
68526: IFFALSE 68564
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68528: LD_ADDR_VAR 0 5
68532: PUSH
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_VAR 0 5
68542: PUSH
68543: LD_INT 1
68545: PLUS
68546: PPUSH
68547: LD_VAR 0 4
68551: PPUSH
68552: CALL_OW 256
68556: PPUSH
68557: CALL_OW 2
68561: ST_TO_ADDR
68562: GO 68525
68564: POP
68565: POP
// if not tmp then
68566: LD_VAR 0 5
68570: NOT
68571: IFFALSE 68575
// exit ;
68573: GO 68623
// if asc then
68575: LD_VAR 0 2
68579: IFFALSE 68603
// result := SortListByListAsc ( units , tmp ) else
68581: LD_ADDR_VAR 0 3
68585: PUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: LD_VAR 0 5
68595: PPUSH
68596: CALL_OW 76
68600: ST_TO_ADDR
68601: GO 68623
// result := SortListByListDesc ( units , tmp ) ;
68603: LD_ADDR_VAR 0 3
68607: PUSH
68608: LD_VAR 0 1
68612: PPUSH
68613: LD_VAR 0 5
68617: PPUSH
68618: CALL_OW 77
68622: ST_TO_ADDR
// end ;
68623: LD_VAR 0 3
68627: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68628: LD_INT 0
68630: PPUSH
68631: PPUSH
// task := GetTaskList ( mech ) ;
68632: LD_ADDR_VAR 0 4
68636: PUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 437
68646: ST_TO_ADDR
// if not task then
68647: LD_VAR 0 4
68651: NOT
68652: IFFALSE 68656
// exit ;
68654: GO 68698
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68656: LD_ADDR_VAR 0 3
68660: PUSH
68661: LD_VAR 0 4
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PUSH
68670: LD_INT 1
68672: ARRAY
68673: PUSH
68674: LD_STRING r
68676: EQUAL
68677: PUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: ARRAY
68686: PUSH
68687: LD_INT 4
68689: ARRAY
68690: PUSH
68691: LD_VAR 0 2
68695: EQUAL
68696: AND
68697: ST_TO_ADDR
// end ;
68698: LD_VAR 0 3
68702: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68703: LD_INT 0
68705: PPUSH
// SetDir ( unit , d ) ;
68706: LD_VAR 0 1
68710: PPUSH
68711: LD_VAR 0 4
68715: PPUSH
68716: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68720: LD_VAR 0 1
68724: PPUSH
68725: LD_VAR 0 2
68729: PPUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: LD_VAR 0 5
68739: PPUSH
68740: CALL_OW 48
// end ;
68744: LD_VAR 0 6
68748: RET
// export function ToNaturalNumber ( number ) ; begin
68749: LD_INT 0
68751: PPUSH
// result := number div 1 ;
68752: LD_ADDR_VAR 0 2
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_INT 1
68764: DIV
68765: ST_TO_ADDR
// if number < 0 then
68766: LD_VAR 0 1
68770: PUSH
68771: LD_INT 0
68773: LESS
68774: IFFALSE 68784
// result := 0 ;
68776: LD_ADDR_VAR 0 2
68780: PUSH
68781: LD_INT 0
68783: ST_TO_ADDR
// end ;
68784: LD_VAR 0 2
68788: RET
// export function SortByClass ( units , class ) ; var un ; begin
68789: LD_INT 0
68791: PPUSH
68792: PPUSH
// if not units or not class then
68793: LD_VAR 0 1
68797: NOT
68798: PUSH
68799: LD_VAR 0 2
68803: NOT
68804: OR
68805: IFFALSE 68809
// exit ;
68807: GO 68904
// result := [ ] ;
68809: LD_ADDR_VAR 0 3
68813: PUSH
68814: EMPTY
68815: ST_TO_ADDR
// for un in units do
68816: LD_ADDR_VAR 0 4
68820: PUSH
68821: LD_VAR 0 1
68825: PUSH
68826: FOR_IN
68827: IFFALSE 68902
// if GetClass ( un ) = class then
68829: LD_VAR 0 4
68833: PPUSH
68834: CALL_OW 257
68838: PUSH
68839: LD_VAR 0 2
68843: EQUAL
68844: IFFALSE 68871
// result := Insert ( result , 1 , un ) else
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: LD_VAR 0 3
68855: PPUSH
68856: LD_INT 1
68858: PPUSH
68859: LD_VAR 0 4
68863: PPUSH
68864: CALL_OW 2
68868: ST_TO_ADDR
68869: GO 68900
// result := Replace ( result , result + 1 , un ) ;
68871: LD_ADDR_VAR 0 3
68875: PUSH
68876: LD_VAR 0 3
68880: PPUSH
68881: LD_VAR 0 3
68885: PUSH
68886: LD_INT 1
68888: PLUS
68889: PPUSH
68890: LD_VAR 0 4
68894: PPUSH
68895: CALL_OW 1
68899: ST_TO_ADDR
68900: GO 68826
68902: POP
68903: POP
// end ;
68904: LD_VAR 0 3
68908: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68909: LD_INT 0
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
68915: PPUSH
68916: PPUSH
68917: PPUSH
// result := [ ] ;
68918: LD_ADDR_VAR 0 4
68922: PUSH
68923: EMPTY
68924: ST_TO_ADDR
// if x - r < 0 then
68925: LD_VAR 0 1
68929: PUSH
68930: LD_VAR 0 3
68934: MINUS
68935: PUSH
68936: LD_INT 0
68938: LESS
68939: IFFALSE 68951
// min_x := 0 else
68941: LD_ADDR_VAR 0 8
68945: PUSH
68946: LD_INT 0
68948: ST_TO_ADDR
68949: GO 68967
// min_x := x - r ;
68951: LD_ADDR_VAR 0 8
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_VAR 0 3
68965: MINUS
68966: ST_TO_ADDR
// if y - r < 0 then
68967: LD_VAR 0 2
68971: PUSH
68972: LD_VAR 0 3
68976: MINUS
68977: PUSH
68978: LD_INT 0
68980: LESS
68981: IFFALSE 68993
// min_y := 0 else
68983: LD_ADDR_VAR 0 7
68987: PUSH
68988: LD_INT 0
68990: ST_TO_ADDR
68991: GO 69009
// min_y := y - r ;
68993: LD_ADDR_VAR 0 7
68997: PUSH
68998: LD_VAR 0 2
69002: PUSH
69003: LD_VAR 0 3
69007: MINUS
69008: ST_TO_ADDR
// max_x := x + r ;
69009: LD_ADDR_VAR 0 9
69013: PUSH
69014: LD_VAR 0 1
69018: PUSH
69019: LD_VAR 0 3
69023: PLUS
69024: ST_TO_ADDR
// max_y := y + r ;
69025: LD_ADDR_VAR 0 10
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_VAR 0 3
69039: PLUS
69040: ST_TO_ADDR
// for _x = min_x to max_x do
69041: LD_ADDR_VAR 0 5
69045: PUSH
69046: DOUBLE
69047: LD_VAR 0 8
69051: DEC
69052: ST_TO_ADDR
69053: LD_VAR 0 9
69057: PUSH
69058: FOR_TO
69059: IFFALSE 69160
// for _y = min_y to max_y do
69061: LD_ADDR_VAR 0 6
69065: PUSH
69066: DOUBLE
69067: LD_VAR 0 7
69071: DEC
69072: ST_TO_ADDR
69073: LD_VAR 0 10
69077: PUSH
69078: FOR_TO
69079: IFFALSE 69156
// begin if not ValidHex ( _x , _y ) then
69081: LD_VAR 0 5
69085: PPUSH
69086: LD_VAR 0 6
69090: PPUSH
69091: CALL_OW 488
69095: NOT
69096: IFFALSE 69100
// continue ;
69098: GO 69078
// if GetResourceTypeXY ( _x , _y ) then
69100: LD_VAR 0 5
69104: PPUSH
69105: LD_VAR 0 6
69109: PPUSH
69110: CALL_OW 283
69114: IFFALSE 69154
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69116: LD_ADDR_VAR 0 4
69120: PUSH
69121: LD_VAR 0 4
69125: PPUSH
69126: LD_VAR 0 4
69130: PUSH
69131: LD_INT 1
69133: PLUS
69134: PPUSH
69135: LD_VAR 0 5
69139: PUSH
69140: LD_VAR 0 6
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PPUSH
69149: CALL_OW 1
69153: ST_TO_ADDR
// end ;
69154: GO 69078
69156: POP
69157: POP
69158: GO 69058
69160: POP
69161: POP
// end ;
69162: LD_VAR 0 4
69166: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69167: LD_INT 0
69169: PPUSH
69170: PPUSH
69171: PPUSH
69172: PPUSH
69173: PPUSH
69174: PPUSH
69175: PPUSH
69176: PPUSH
// if not units then
69177: LD_VAR 0 1
69181: NOT
69182: IFFALSE 69186
// exit ;
69184: GO 69611
// result := UnitFilter ( units , [ f_ok ] ) ;
69186: LD_ADDR_VAR 0 3
69190: PUSH
69191: LD_VAR 0 1
69195: PPUSH
69196: LD_INT 50
69198: PUSH
69199: EMPTY
69200: LIST
69201: PPUSH
69202: CALL_OW 72
69206: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69207: LD_ADDR_VAR 0 8
69211: PUSH
69212: LD_VAR 0 1
69216: PUSH
69217: LD_INT 1
69219: ARRAY
69220: PPUSH
69221: CALL_OW 255
69225: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69226: LD_ADDR_VAR 0 10
69230: PUSH
69231: LD_INT 29
69233: PUSH
69234: LD_EXP 23
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: ST_TO_ADDR
// if not result then
69243: LD_VAR 0 3
69247: NOT
69248: IFFALSE 69252
// exit ;
69250: GO 69611
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69252: LD_ADDR_VAR 0 5
69256: PUSH
69257: LD_INT 81
69259: PUSH
69260: LD_VAR 0 8
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PPUSH
69269: CALL_OW 69
69273: ST_TO_ADDR
// for i in result do
69274: LD_ADDR_VAR 0 4
69278: PUSH
69279: LD_VAR 0 3
69283: PUSH
69284: FOR_IN
69285: IFFALSE 69609
// begin tag := GetTag ( i ) + 1 ;
69287: LD_ADDR_VAR 0 9
69291: PUSH
69292: LD_VAR 0 4
69296: PPUSH
69297: CALL_OW 110
69301: PUSH
69302: LD_INT 1
69304: PLUS
69305: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69306: LD_ADDR_VAR 0 7
69310: PUSH
69311: LD_VAR 0 4
69315: PPUSH
69316: CALL_OW 250
69320: PPUSH
69321: LD_VAR 0 4
69325: PPUSH
69326: CALL_OW 251
69330: PPUSH
69331: LD_INT 6
69333: PPUSH
69334: CALL 68909 0 3
69338: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69339: LD_VAR 0 7
69343: PUSH
69344: LD_VAR 0 4
69348: PPUSH
69349: CALL_OW 264
69353: PUSH
69354: LD_VAR 0 10
69358: IN
69359: NOT
69360: AND
69361: IFFALSE 69400
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69363: LD_VAR 0 4
69367: PPUSH
69368: LD_VAR 0 7
69372: PUSH
69373: LD_INT 1
69375: ARRAY
69376: PUSH
69377: LD_INT 1
69379: ARRAY
69380: PPUSH
69381: LD_VAR 0 7
69385: PUSH
69386: LD_INT 1
69388: ARRAY
69389: PUSH
69390: LD_INT 2
69392: ARRAY
69393: PPUSH
69394: CALL_OW 116
69398: GO 69607
// if path > tag then
69400: LD_VAR 0 2
69404: PUSH
69405: LD_VAR 0 9
69409: GREATER
69410: IFFALSE 69577
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69412: LD_ADDR_VAR 0 6
69416: PUSH
69417: LD_VAR 0 5
69421: PPUSH
69422: LD_INT 91
69424: PUSH
69425: LD_VAR 0 4
69429: PUSH
69430: LD_INT 12
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: LIST
69437: PPUSH
69438: CALL_OW 72
69442: ST_TO_ADDR
// if nearEnemy then
69443: LD_VAR 0 6
69447: IFFALSE 69475
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69449: LD_VAR 0 4
69453: PPUSH
69454: LD_VAR 0 6
69458: PPUSH
69459: LD_VAR 0 4
69463: PPUSH
69464: CALL_OW 74
69468: PPUSH
69469: CALL_OW 115
69473: GO 69575
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69475: LD_VAR 0 4
69479: PPUSH
69480: LD_VAR 0 2
69484: PUSH
69485: LD_VAR 0 9
69489: ARRAY
69490: PUSH
69491: LD_INT 1
69493: ARRAY
69494: PPUSH
69495: LD_VAR 0 2
69499: PUSH
69500: LD_VAR 0 9
69504: ARRAY
69505: PUSH
69506: LD_INT 2
69508: ARRAY
69509: PPUSH
69510: CALL_OW 297
69514: PUSH
69515: LD_INT 6
69517: GREATER
69518: IFFALSE 69561
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69520: LD_VAR 0 4
69524: PPUSH
69525: LD_VAR 0 2
69529: PUSH
69530: LD_VAR 0 9
69534: ARRAY
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PPUSH
69540: LD_VAR 0 2
69544: PUSH
69545: LD_VAR 0 9
69549: ARRAY
69550: PUSH
69551: LD_INT 2
69553: ARRAY
69554: PPUSH
69555: CALL_OW 114
69559: GO 69575
// SetTag ( i , tag ) ;
69561: LD_VAR 0 4
69565: PPUSH
69566: LD_VAR 0 9
69570: PPUSH
69571: CALL_OW 109
// end else
69575: GO 69607
// if enemy then
69577: LD_VAR 0 5
69581: IFFALSE 69607
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69583: LD_VAR 0 4
69587: PPUSH
69588: LD_VAR 0 5
69592: PPUSH
69593: LD_VAR 0 4
69597: PPUSH
69598: CALL_OW 74
69602: PPUSH
69603: CALL_OW 115
// end ;
69607: GO 69284
69609: POP
69610: POP
// end ;
69611: LD_VAR 0 3
69615: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69616: LD_INT 0
69618: PPUSH
69619: PPUSH
69620: PPUSH
// if not unit or IsInUnit ( unit ) then
69621: LD_VAR 0 1
69625: NOT
69626: PUSH
69627: LD_VAR 0 1
69631: PPUSH
69632: CALL_OW 310
69636: OR
69637: IFFALSE 69641
// exit ;
69639: GO 69732
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69641: LD_ADDR_VAR 0 4
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: CALL_OW 250
69655: PPUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: LD_INT 1
69663: PPUSH
69664: CALL_OW 272
69668: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69669: LD_ADDR_VAR 0 5
69673: PUSH
69674: LD_VAR 0 1
69678: PPUSH
69679: CALL_OW 251
69683: PPUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: LD_INT 1
69691: PPUSH
69692: CALL_OW 273
69696: ST_TO_ADDR
// if ValidHex ( x , y ) then
69697: LD_VAR 0 4
69701: PPUSH
69702: LD_VAR 0 5
69706: PPUSH
69707: CALL_OW 488
69711: IFFALSE 69732
// ComTurnXY ( unit , x , y ) ;
69713: LD_VAR 0 1
69717: PPUSH
69718: LD_VAR 0 4
69722: PPUSH
69723: LD_VAR 0 5
69727: PPUSH
69728: CALL_OW 118
// end ;
69732: LD_VAR 0 3
69736: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69737: LD_INT 0
69739: PPUSH
69740: PPUSH
// result := false ;
69741: LD_ADDR_VAR 0 3
69745: PUSH
69746: LD_INT 0
69748: ST_TO_ADDR
// if not units then
69749: LD_VAR 0 2
69753: NOT
69754: IFFALSE 69758
// exit ;
69756: GO 69803
// for i in units do
69758: LD_ADDR_VAR 0 4
69762: PUSH
69763: LD_VAR 0 2
69767: PUSH
69768: FOR_IN
69769: IFFALSE 69801
// if See ( side , i ) then
69771: LD_VAR 0 1
69775: PPUSH
69776: LD_VAR 0 4
69780: PPUSH
69781: CALL_OW 292
69785: IFFALSE 69799
// begin result := true ;
69787: LD_ADDR_VAR 0 3
69791: PUSH
69792: LD_INT 1
69794: ST_TO_ADDR
// exit ;
69795: POP
69796: POP
69797: GO 69803
// end ;
69799: GO 69768
69801: POP
69802: POP
// end ;
69803: LD_VAR 0 3
69807: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69808: LD_INT 0
69810: PPUSH
69811: PPUSH
69812: PPUSH
69813: PPUSH
// if not unit or not points then
69814: LD_VAR 0 1
69818: NOT
69819: PUSH
69820: LD_VAR 0 2
69824: NOT
69825: OR
69826: IFFALSE 69830
// exit ;
69828: GO 69920
// dist := 99999 ;
69830: LD_ADDR_VAR 0 5
69834: PUSH
69835: LD_INT 99999
69837: ST_TO_ADDR
// for i in points do
69838: LD_ADDR_VAR 0 4
69842: PUSH
69843: LD_VAR 0 2
69847: PUSH
69848: FOR_IN
69849: IFFALSE 69918
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69851: LD_ADDR_VAR 0 6
69855: PUSH
69856: LD_VAR 0 1
69860: PPUSH
69861: LD_VAR 0 4
69865: PUSH
69866: LD_INT 1
69868: ARRAY
69869: PPUSH
69870: LD_VAR 0 4
69874: PUSH
69875: LD_INT 2
69877: ARRAY
69878: PPUSH
69879: CALL_OW 297
69883: ST_TO_ADDR
// if tmpDist < dist then
69884: LD_VAR 0 6
69888: PUSH
69889: LD_VAR 0 5
69893: LESS
69894: IFFALSE 69916
// begin result := i ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: LD_VAR 0 4
69905: ST_TO_ADDR
// dist := tmpDist ;
69906: LD_ADDR_VAR 0 5
69910: PUSH
69911: LD_VAR 0 6
69915: ST_TO_ADDR
// end ; end ;
69916: GO 69848
69918: POP
69919: POP
// end ; end_of_file
69920: LD_VAR 0 3
69924: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69925: LD_VAR 0 1
69929: PUSH
69930: LD_INT 200
69932: DOUBLE
69933: GREATEREQUAL
69934: IFFALSE 69942
69936: LD_INT 299
69938: DOUBLE
69939: LESSEQUAL
69940: IFTRUE 69944
69942: GO 69976
69944: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_VAR 0 2
69954: PPUSH
69955: LD_VAR 0 3
69959: PPUSH
69960: LD_VAR 0 4
69964: PPUSH
69965: LD_VAR 0 5
69969: PPUSH
69970: CALL 25572 0 5
69974: GO 70053
69976: LD_INT 300
69978: DOUBLE
69979: GREATEREQUAL
69980: IFFALSE 69988
69982: LD_INT 399
69984: DOUBLE
69985: LESSEQUAL
69986: IFTRUE 69990
69988: GO 70052
69990: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69991: LD_VAR 0 1
69995: PPUSH
69996: LD_VAR 0 2
70000: PPUSH
70001: LD_VAR 0 3
70005: PPUSH
70006: LD_VAR 0 4
70010: PPUSH
70011: LD_VAR 0 5
70015: PPUSH
70016: LD_VAR 0 6
70020: PPUSH
70021: LD_VAR 0 7
70025: PPUSH
70026: LD_VAR 0 8
70030: PPUSH
70031: LD_VAR 0 9
70035: PPUSH
70036: LD_VAR 0 10
70040: PPUSH
70041: LD_VAR 0 11
70045: PPUSH
70046: CALL 23214 0 11
70050: GO 70053
70052: POP
// end ;
70053: PPOPN 11
70055: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70056: LD_VAR 0 1
70060: PPUSH
70061: LD_VAR 0 2
70065: PPUSH
70066: LD_VAR 0 3
70070: PPUSH
70071: LD_VAR 0 4
70075: PPUSH
70076: LD_VAR 0 5
70080: PPUSH
70081: CALL 25308 0 5
// end ; end_of_file
70085: PPOPN 5
70087: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70088: LD_VAR 0 1
70092: PPUSH
70093: LD_VAR 0 2
70097: PPUSH
70098: LD_VAR 0 3
70102: PPUSH
70103: LD_VAR 0 4
70107: PPUSH
70108: LD_VAR 0 5
70112: PPUSH
70113: LD_VAR 0 6
70117: PPUSH
70118: CALL 10907 0 6
// end ;
70122: PPOPN 6
70124: END
