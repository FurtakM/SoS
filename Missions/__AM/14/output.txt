// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1272 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 736 0 0
// PrepareRussianBase ;
 115: CALL 925 0 0
// PrepareCommander ;
 119: CALL 870 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1065 0 2
 475: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 476: LD_EXP 1
 480: PPUSH
 481: LD_INT 95
 483: PPUSH
 484: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 488: LD_EXP 1
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 500: LD_ADDR_EXP 5
 504: PUSH
 505: LD_STRING Powell
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL 1065 0 2
 515: ST_TO_ADDR
// uc_side = 4 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 4
 523: ST_TO_ADDR
// if TestCharacters ( 10c_Joan ) = true then
 524: LD_STRING 10c_Joan
 526: PPUSH
 527: CALL_OW 28
 531: PUSH
 532: LD_INT 1
 534: EQUAL
 535: IFFALSE 590
// begin Joan = PrepareUnit ( 10c_Joan , true ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING 10c_Joan
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 1065 0 2
 552: ST_TO_ADDR
// PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 553: LD_EXP 2
 557: PPUSH
 558: LD_INT 4
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 568: LD_EXP 2
 572: PPUSH
 573: LD_INT 4
 575: PPUSH
 576: CALL_OW 336
// JMMGirl = 1 ;
 580: LD_ADDR_EXP 7
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// end else
 588: GO 707
// begin if TestCharacters ( 13s_Lisa ) = true then
 590: LD_STRING 13s_Lisa
 592: PPUSH
 593: CALL_OW 28
 597: PUSH
 598: LD_INT 1
 600: EQUAL
 601: IFFALSE 656
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 603: LD_ADDR_EXP 3
 607: PUSH
 608: LD_STRING 13s_Lisa
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: CALL 1065 0 2
 618: ST_TO_ADDR
// PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 619: LD_EXP 3
 623: PPUSH
 624: LD_INT 4
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 634: LD_EXP 3
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 336
// JMMGirl = 2 ;
 646: LD_ADDR_EXP 7
 650: PUSH
 651: LD_INT 2
 653: ST_TO_ADDR
// end else
 654: GO 707
// begin Connie = PrepareUnit ( Coonie , false ) ;
 656: LD_ADDR_EXP 4
 660: PUSH
 661: LD_STRING Coonie
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL 1065 0 2
 671: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 672: LD_EXP 4
 676: PPUSH
 677: LD_INT 4
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 687: LD_EXP 4
 691: PPUSH
 692: LD_INT 3
 694: PPUSH
 695: CALL_OW 336
// JMMGirl = 3 ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_INT 3
 706: ST_TO_ADDR
// end ; end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 707: LD_EXP 2
 711: PUSH
 712: LD_EXP 3
 716: PUSH
 717: LD_EXP 4
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 140
// end ;
 731: LD_VAR 0 1
 735: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// for i = 1 to 5 do
 741: LD_ADDR_VAR 0 2
 745: PUSH
 746: DOUBLE
 747: LD_INT 1
 749: DEC
 750: ST_TO_ADDR
 751: LD_INT 5
 753: PUSH
 754: FOR_TO
 755: IFFALSE 863
// begin vc_engine = 1 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// vc_control = 2 ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 9
 780: PUSH
 781: LD_INT 5
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 4
 801: PPUSH
 802: CALL_OW 12
 806: ARRAY
 807: ST_TO_ADDR
// vc_chassis = 2 ;
 808: LD_ADDR_OWVAR 37
 812: PUSH
 813: LD_INT 2
 815: ST_TO_ADDR
// veh = CreateVehicle ;
 816: LD_ADDR_VAR 0 3
 820: PUSH
 821: CALL_OW 45
 825: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 826: LD_VAR 0 3
 830: PPUSH
 831: LD_INT 500
 833: PPUSH
 834: LD_INT 1000
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 846: LD_VAR 0 3
 850: PPUSH
 851: LD_INT 15
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ;
 861: GO 754
 863: POP
 864: POP
// end ; end_of_file
 865: LD_VAR 0 1
 869: RET
// export function PrepareCommander ; begin
 870: LD_INT 0
 872: PPUSH
// uc_side = 3 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// uc_nation = 3 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 3
 888: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 889: LD_ADDR_EXP 6
 893: PUSH
 894: LD_STRING Eisenstein
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 1065 0 2
 904: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 11
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareRussianBase ; begin
 925: LD_INT 0
 927: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 3
 933: PPUSH
 934: LD_INT 45
 936: PPUSH
 937: LD_INT 10
 939: PPUSH
 940: LD_INT 9
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 950: LD_INT 3
 952: PPUSH
 953: LD_INT 3
 955: PPUSH
 956: LD_INT 22
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 972: LD_INT 3
 974: PPUSH
 975: LD_INT 3
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 10
 983: PPUSH
 984: LD_INT 3
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
 994: LD_INT 3
 996: PPUSH
 997: LD_INT 3
 999: PPUSH
1000: LD_INT 40
1002: PPUSH
1003: LD_INT 10
1005: PPUSH
1006: LD_INT 3
1008: PPUSH
1009: LD_INT 3
1011: PPUSH
1012: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 3
1021: PPUSH
1022: LD_INT 14
1024: PPUSH
1025: LD_INT 10
1027: PPUSH
1028: LD_INT 4
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: CALL 1162 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1038: LD_INT 3
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: LD_INT 15
1046: PPUSH
1047: LD_INT 10
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL 1162 0 6
// end ; end_of_file
1060: LD_VAR 0 1
1064: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
// if exist_mode then
1069: LD_VAR 0 2
1073: IFFALSE 1092
// begin unit := CreateCharacter ( ident ) ;
1075: LD_ADDR_VAR 0 4
1079: PUSH
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL_OW 34
1089: ST_TO_ADDR
// end else
1090: GO 1107
// begin unit := NewCharacter ( ident ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 25
1106: ST_TO_ADDR
// end ; result := unit ;
1107: LD_ADDR_VAR 0 3
1111: PUSH
1112: LD_VAR 0 4
1116: ST_TO_ADDR
// end ;
1117: LD_VAR 0 3
1121: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1122: LD_INT 0
1124: PPUSH
1125: PPUSH
// for i in charactersList do
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: LD_VAR 0 1
1135: PUSH
1136: FOR_IN
1137: IFFALSE 1155
// SaveCharacters ( i , ident ) ;
1139: LD_VAR 0 4
1143: PPUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 38
1153: GO 1136
1155: POP
1156: POP
// end ;
1157: LD_VAR 0 3
1161: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
1166: PPUSH
1167: PPUSH
// for i = 1 to count do
1168: LD_ADDR_VAR 0 8
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_VAR 0 6
1182: PUSH
1183: FOR_TO
1184: IFFALSE 1265
// begin uc_side = side ;
1186: LD_ADDR_OWVAR 20
1190: PUSH
1191: LD_VAR 0 1
1195: ST_TO_ADDR
// uc_nation = nation ;
1196: LD_ADDR_OWVAR 21
1200: PUSH
1201: LD_VAR 0 2
1205: ST_TO_ADDR
// hc_gallery =  ;
1206: LD_ADDR_OWVAR 33
1210: PUSH
1211: LD_STRING 
1213: ST_TO_ADDR
// hc_name =  ;
1214: LD_ADDR_OWVAR 26
1218: PUSH
1219: LD_STRING 
1221: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1222: LD_INT 0
1224: PPUSH
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 4
1234: PPUSH
1235: CALL_OW 380
// un = CreateHuman ;
1239: LD_ADDR_VAR 0 10
1243: PUSH
1244: CALL_OW 44
1248: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1249: LD_VAR 0 10
1253: PPUSH
1254: LD_VAR 0 3
1258: PPUSH
1259: CALL_OW 52
// end ;
1263: GO 1183
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 7
1271: RET
// export function PrepareDifficulty ; begin
1272: LD_INT 0
1274: PPUSH
// if difficulty = 1 then
1275: LD_OWVAR 67
1279: PUSH
1280: LD_INT 1
1282: EQUAL
1283: IFFALSE 1363
// begin SetTech ( 57 , 3 , state_disabled ) ;
1285: LD_INT 57
1287: PPUSH
1288: LD_INT 3
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1298: LD_INT 58
1300: PPUSH
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1311: LD_INT 59
1313: PPUSH
1314: LD_INT 3
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1324: LD_INT 51
1326: PPUSH
1327: LD_INT 3
1329: PPUSH
1330: LD_INT 0
1332: PPUSH
1333: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1337: LD_INT 52
1339: PPUSH
1340: LD_INT 3
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1350: LD_INT 53
1352: PPUSH
1353: LD_INT 3
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: CALL_OW 322
// end ; if difficulty = 2 then
1363: LD_OWVAR 67
1367: PUSH
1368: LD_INT 2
1370: EQUAL
1371: IFFALSE 1451
// begin SetTech ( 57 , 3 , state_enabled ) ;
1373: LD_INT 57
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1386: LD_INT 58
1388: PPUSH
1389: LD_INT 3
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1399: LD_INT 59
1401: PPUSH
1402: LD_INT 3
1404: PPUSH
1405: LD_INT 0
1407: PPUSH
1408: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1412: LD_INT 51
1414: PPUSH
1415: LD_INT 3
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1425: LD_INT 52
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1438: LD_INT 53
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 322
// end ; if difficulty = 3 then
1451: LD_OWVAR 67
1455: PUSH
1456: LD_INT 3
1458: EQUAL
1459: IFFALSE 1539
// begin SetTech ( 57 , 3 , state_enabled ) ;
1461: LD_INT 57
1463: PPUSH
1464: LD_INT 3
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1474: LD_INT 58
1476: PPUSH
1477: LD_INT 3
1479: PPUSH
1480: LD_INT 1
1482: PPUSH
1483: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1487: LD_INT 59
1489: PPUSH
1490: LD_INT 3
1492: PPUSH
1493: LD_INT 0
1495: PPUSH
1496: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1500: LD_INT 51
1502: PPUSH
1503: LD_INT 3
1505: PPUSH
1506: LD_INT 1
1508: PPUSH
1509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1513: LD_INT 52
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1526: LD_INT 53
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: LD_INT 0
1534: PPUSH
1535: CALL_OW 322
// end ; end ;
1539: LD_VAR 0 1
1543: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1544: LD_INT 0
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
1551: LD_ADDR_VAR 0 8
1555: PUSH
1556: LD_INT 48
1558: PUSH
1559: LD_INT 49
1561: PUSH
1562: LD_INT 50
1564: PUSH
1565: LD_INT 20
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 51
1573: PUSH
1574: LD_INT 52
1576: PUSH
1577: LD_INT 69
1579: PUSH
1580: LD_INT 39
1582: PUSH
1583: LD_INT 34
1585: PUSH
1586: LD_INT 40
1588: PUSH
1589: LD_INT 53
1591: PUSH
1592: LD_INT 71
1594: PUSH
1595: LD_INT 57
1597: PUSH
1598: LD_INT 58
1600: PUSH
1601: LD_INT 44
1603: PUSH
1604: LD_INT 32
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 23
1612: PUSH
1613: LD_INT 33
1615: PUSH
1616: LD_INT 59
1618: PUSH
1619: LD_INT 54
1621: PUSH
1622: LD_INT 55
1624: PUSH
1625: LD_INT 56
1627: PUSH
1628: LD_INT 63
1630: PUSH
1631: LD_INT 64
1633: PUSH
1634: LD_INT 65
1636: PUSH
1637: LD_INT 30
1639: PUSH
1640: LD_INT 31
1642: PUSH
1643: LD_INT 21
1645: PUSH
1646: LD_INT 22
1648: PUSH
1649: LD_INT 25
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1686: LD_ADDR_VAR 0 5
1690: PUSH
1691: DOUBLE
1692: LD_INT 1
1694: DEC
1695: ST_TO_ADDR
1696: LD_VAR 0 8
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1778
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1704: LD_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: ARRAY
1714: PPUSH
1715: LD_VAR 0 1
1719: PPUSH
1720: CALL_OW 321
1724: PUSH
1725: LD_INT 1
1727: EQUAL
1728: PUSH
1729: LD_VAR 0 8
1733: PUSH
1734: LD_VAR 0 5
1738: ARRAY
1739: PPUSH
1740: LD_VAR 0 3
1744: PPUSH
1745: CALL_OW 482
1749: PUSH
1750: LD_INT 1
1752: EQUAL
1753: AND
1754: IFFALSE 1776
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1756: LD_VAR 0 2
1760: PPUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_VAR 0 5
1770: ARRAY
1771: PPUSH
1772: CALL_OW 184
1776: GO 1701
1778: POP
1779: POP
// end ;
1780: LD_VAR 0 4
1784: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1785: LD_INT 0
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1793: LD_ADDR_VAR 0 8
1797: PUSH
1798: LD_VAR 0 2
1802: PPUSH
1803: CALL_OW 313
1807: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1808: LD_ADDR_VAR 0 9
1812: PUSH
1813: LD_VAR 0 3
1817: PPUSH
1818: LD_INT 22
1820: PUSH
1821: LD_VAR 0 1
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 25
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 750
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 54
1855: PUSH
1856: EMPTY
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PPUSH
1869: CALL_OW 70
1873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1874: LD_ADDR_VAR 0 6
1878: PUSH
1879: LD_VAR 0 3
1883: PPUSH
1884: LD_INT 22
1886: PUSH
1887: LD_VAR 0 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 3
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 3
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 1000
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: PPUSH
1931: CALL_OW 70
1935: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1936: LD_VAR 0 6
1940: NOT
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_VAR 0 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 25
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 24
1966: PUSH
1967: LD_INT 250
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PPUSH
1979: CALL_OW 69
1983: NOT
1984: AND
1985: IFFALSE 1989
// exit ;
1987: GO 2171
// if buildings_list > 0 and engineerOkInside then
1989: LD_VAR 0 6
1993: PUSH
1994: LD_INT 0
1996: GREATER
1997: PUSH
1998: LD_VAR 0 8
2002: AND
2003: IFFALSE 2014
// ComExitBuilding ( engineerOkInside ) ;
2005: LD_VAR 0 8
2009: PPUSH
2010: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2014: LD_VAR 0 6
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: PUSH
2023: LD_VAR 0 9
2027: PUSH
2028: LD_INT 0
2030: GREATER
2031: AND
2032: IFFALSE 2052
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2034: LD_VAR 0 9
2038: PPUSH
2039: LD_VAR 0 6
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2052: LD_VAR 0 6
2056: PUSH
2057: LD_INT 0
2059: EQUAL
2060: PUSH
2061: LD_VAR 0 4
2065: PUSH
2066: LD_INT 0
2068: EQUAL
2069: AND
2070: PUSH
2071: LD_VAR 0 9
2075: PUSH
2076: LD_INT 0
2078: GREATER
2079: AND
2080: IFFALSE 2096
// ComEnterUnit ( engineerOkOutside , building ) ;
2082: LD_VAR 0 9
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2096: LD_VAR 0 9
2100: PUSH
2101: LD_INT 0
2103: GREATER
2104: PUSH
2105: LD_VAR 0 6
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_INT 0
2122: GREATER
2123: AND
2124: IFFALSE 2171
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2126: LD_VAR 0 9
2130: PPUSH
2131: LD_VAR 0 4
2135: PUSH
2136: LD_INT 1
2138: ARRAY
2139: PPUSH
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 2
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 4
2153: PUSH
2154: LD_INT 3
2156: ARRAY
2157: PPUSH
2158: LD_VAR 0 4
2162: PUSH
2163: LD_INT 4
2165: ARRAY
2166: PPUSH
2167: CALL_OW 145
// end ;
2171: LD_VAR 0 5
2175: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2176: LD_INT 0
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
2186: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2187: LD_ADDR_VAR 0 6
2191: PUSH
2192: LD_INT 22
2194: PUSH
2195: LD_VAR 0 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 4
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 23
2216: PUSH
2217: LD_INT 2
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 24
2226: PUSH
2227: LD_INT 251
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_VAR 0 3
2254: PPUSH
2255: LD_INT 22
2257: PUSH
2258: LD_VAR 0 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 23
2269: PUSH
2270: LD_INT 2
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 25
2279: PUSH
2280: LD_INT 4
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 50
2289: PUSH
2290: EMPTY
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 70
2303: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2304: LD_ADDR_VAR 0 10
2308: PUSH
2309: LD_VAR 0 3
2313: PPUSH
2314: LD_INT 22
2316: PUSH
2317: LD_VAR 0 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 21
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 25
2341: PUSH
2342: LD_INT 3
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 3
2355: PUSH
2356: LD_INT 24
2358: PUSH
2359: LD_INT 750
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 70
2380: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2381: LD_ADDR_VAR 0 11
2385: PUSH
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_INT 22
2393: PUSH
2394: LD_VAR 0 1
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 21
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 25
2418: PUSH
2419: LD_INT 3
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 3
2432: PUSH
2433: LD_INT 24
2435: PUSH
2436: LD_INT 1000
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 70
2457: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2458: LD_VAR 0 10
2462: NOT
2463: PUSH
2464: LD_VAR 0 11
2468: NOT
2469: AND
2470: PUSH
2471: LD_VAR 0 6
2475: NOT
2476: AND
2477: IFFALSE 2481
// exit ;
2479: GO 2715
// if damageUnits > 0 and sci_list > 0 then
2481: LD_VAR 0 10
2485: PUSH
2486: LD_INT 0
2488: GREATER
2489: PUSH
2490: LD_VAR 0 6
2494: PUSH
2495: LD_INT 0
2497: GREATER
2498: AND
2499: IFFALSE 2515
// ComMoveToArea ( damageUnits , healArea ) ;
2501: LD_VAR 0 10
2505: PPUSH
2506: LD_VAR 0 2
2510: PPUSH
2511: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2515: LD_VAR 0 11
2519: PUSH
2520: LD_INT 0
2522: GREATER
2523: PUSH
2524: LD_VAR 0 6
2528: PUSH
2529: LD_INT 0
2531: GREATER
2532: AND
2533: IFFALSE 2544
// ComExitBuilding ( sci_list ) ;
2535: LD_VAR 0 6
2539: PPUSH
2540: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 0
2551: GREATER
2552: PUSH
2553: LD_VAR 0 7
2557: PUSH
2558: LD_INT 0
2560: GREATER
2561: AND
2562: IFFALSE 2582
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2564: LD_VAR 0 7
2568: PPUSH
2569: LD_VAR 0 11
2573: PUSH
2574: LD_INT 1
2576: ARRAY
2577: PPUSH
2578: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2582: LD_VAR 0 10
2586: PUSH
2587: LD_INT 0
2589: EQUAL
2590: PUSH
2591: LD_VAR 0 11
2595: PUSH
2596: LD_INT 0
2598: EQUAL
2599: AND
2600: PUSH
2601: LD_VAR 0 7
2605: PUSH
2606: LD_INT 0
2608: GREATER
2609: AND
2610: IFFALSE 2715
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2612: LD_ADDR_VAR 0 12
2616: PUSH
2617: LD_INT 22
2619: PUSH
2620: LD_VAR 0 1
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 21
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 30
2641: PUSH
2642: LD_INT 8
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PPUSH
2654: CALL_OW 69
2658: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2659: LD_ADDR_VAR 0 13
2663: PUSH
2664: LD_INT 1
2666: PPUSH
2667: LD_VAR 0 12
2671: PPUSH
2672: CALL_OW 12
2676: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2677: LD_VAR 0 7
2681: PPUSH
2682: LD_INT 3
2684: PUSH
2685: LD_INT 60
2687: PUSH
2688: EMPTY
2689: LIST
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 72
2699: PPUSH
2700: LD_VAR 0 12
2704: PUSH
2705: LD_VAR 0 13
2709: ARRAY
2710: PPUSH
2711: CALL_OW 120
// end ; end ;
2715: LD_VAR 0 5
2719: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
// tmpTab = [ ] ;
2726: LD_ADDR_VAR 0 6
2730: PUSH
2731: EMPTY
2732: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2733: LD_INT 22
2735: PUSH
2736: LD_VAR 0 1
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: LD_INT 30
2747: PUSH
2748: LD_INT 32
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PPUSH
2759: CALL_OW 69
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: IFFALSE 2850
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2769: LD_ADDR_VAR 0 4
2773: PUSH
2774: LD_INT 22
2776: PUSH
2777: LD_VAR 0 1
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 30
2788: PUSH
2789: LD_INT 32
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: PUSH
2805: FOR_IN
2806: IFFALSE 2848
// begin for j in UnitsInside ( i ) do
2808: LD_ADDR_VAR 0 5
2812: PUSH
2813: LD_VAR 0 4
2817: PPUSH
2818: CALL_OW 313
2822: PUSH
2823: FOR_IN
2824: IFFALSE 2844
// tmpTab = tmpTab ^ j ;
2826: LD_ADDR_VAR 0 6
2830: PUSH
2831: LD_VAR 0 6
2835: PUSH
2836: LD_VAR 0 5
2840: ADD
2841: ST_TO_ADDR
2842: GO 2823
2844: POP
2845: POP
// end ;
2846: GO 2805
2848: POP
2849: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2850: LD_VAR 0 6
2854: PPUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL_OW 250
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 251
2874: PPUSH
2875: CALL_OW 114
// end ;
2879: LD_VAR 0 3
2883: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// enable ;
2890: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
2891: LD_ADDR_VAR 0 7
2895: PUSH
2896: LD_VAR 0 3
2900: PPUSH
2901: CALL_OW 435
2905: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2906: LD_ADDR_VAR 0 6
2910: PUSH
2911: LD_INT 22
2913: PUSH
2914: LD_VAR 0 1
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 34
2925: PUSH
2926: LD_VAR 0 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
2944: LD_VAR 0 6
2948: PUSH
2949: LD_INT 0
2951: GREATER
2952: PUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 435
2962: AND
2963: PUSH
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 0
2971: GREATER
2972: AND
2973: IFFALSE 3022
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2975: LD_VAR 0 6
2979: PUSH
2980: LD_INT 1
2982: ARRAY
2983: PPUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: LD_VAR 0 7
2997: PUSH
2998: LD_INT 2
3000: ARRAY
3001: PPUSH
3002: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3006: LD_VAR 0 6
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 100
3017: PPUSH
3018: CALL_OW 240
// end ; end ;
3022: LD_VAR 0 4
3026: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3027: LD_INT 0
3029: PPUSH
3030: PPUSH
3031: PPUSH
3032: PPUSH
3033: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3034: LD_ADDR_VAR 0 6
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_VAR 0 1
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 30
3056: PUSH
3057: LD_INT 31
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 32
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 30
3076: PUSH
3077: LD_INT 33
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 30
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 30
3096: PUSH
3097: LD_INT 5
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PPUSH
3116: CALL_OW 69
3120: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3121: LD_ADDR_VAR 0 7
3125: PUSH
3126: LD_INT 22
3128: PUSH
3129: LD_VAR 0 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: LD_INT 21
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 58
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 69
3163: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3164: LD_VAR 0 6
3168: PUSH
3169: LD_INT 0
3171: GREATER
3172: PUSH
3173: LD_VAR 0 7
3177: PUSH
3178: LD_INT 0
3180: GREATER
3181: AND
3182: IFFALSE 3252
// begin for i in turretsList do
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_VAR 0 6
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3250
// begin for j in enemyBuildings do
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 7
3206: PUSH
3207: FOR_IN
3208: IFFALSE 3246
// begin if GetDistUnits ( i , j ) < 20 then
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: CALL_OW 296
3224: PUSH
3225: LD_INT 20
3227: LESS
3228: IFFALSE 3244
// begin ComAttackUnit ( i , j ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_VAR 0 5
3239: PPUSH
3240: CALL_OW 115
// end ; end ;
3244: GO 3207
3246: POP
3247: POP
// end ;
3248: GO 3194
3250: POP
3251: POP
// end ; end ;
3252: LD_VAR 0 3
3256: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3257: LD_INT 0
3259: PPUSH
3260: PPUSH
// for i = 1 to vehCount do
3261: LD_ADDR_VAR 0 9
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 3
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3324
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_VAR 0 7
3288: PPUSH
3289: LD_VAR 0 5
3293: PPUSH
3294: LD_VAR 0 6
3298: PPUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_INT 1
3306: PPUSH
3307: LD_VAR 0 4
3311: PPUSH
3312: CALL_OW 12
3316: ARRAY
3317: PPUSH
3318: CALL_OW 185
3322: GO 3276
3324: POP
3325: POP
// end ;
3326: LD_VAR 0 8
3330: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3339: LD_EXP 11
3343: PUSH
3344: LD_INT 2
3346: PUSH
3347: LD_INT 3
3349: PUSH
3350: LD_INT 4
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: PUSH
3358: LD_OWVAR 67
3362: ARRAY
3363: GREATEREQUAL
3364: PUSH
3365: LD_EXP 12
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: LD_INT 1
3375: PUSH
3376: LD_INT 2
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: PUSH
3384: LD_OWVAR 67
3388: ARRAY
3389: GREATEREQUAL
3390: AND
3391: IFFALSE 3652
// begin repeat wait ( 0 0$1 ) ;
3393: LD_INT 35
3395: PPUSH
3396: CALL_OW 67
// for j in russianTanks do
3400: LD_ADDR_VAR 0 4
3404: PUSH
3405: LD_EXP 11
3409: PUSH
3410: FOR_IN
3411: IFFALSE 3640
// begin if GetSide ( j ) <> side then
3413: LD_VAR 0 4
3417: PPUSH
3418: CALL_OW 255
3422: PUSH
3423: LD_VAR 0 1
3427: NONEQUAL
3428: IFFALSE 3441
// begin ComStop ( j ) ;
3430: LD_VAR 0 4
3434: PPUSH
3435: CALL_OW 141
// continue ;
3439: GO 3410
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3441: LD_ADDR_VAR 0 6
3445: PUSH
3446: LD_INT 81
3448: PUSH
3449: LD_VAR 0 1
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 101
3460: PUSH
3461: LD_INT 1
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PPUSH
3472: CALL_OW 69
3476: PPUSH
3477: LD_VAR 0 4
3481: PPUSH
3482: CALL_OW 74
3486: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3487: LD_ADDR_VAR 0 7
3491: PUSH
3492: LD_INT 81
3494: PUSH
3495: LD_VAR 0 1
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 101
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: LD_INT 59
3519: PUSH
3520: EMPTY
3521: LIST
3522: PUSH
3523: LD_INT 21
3525: PUSH
3526: LD_INT 1
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 21
3535: PUSH
3536: LD_INT 2
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: PPUSH
3557: CALL_OW 69
3561: PPUSH
3562: LD_VAR 0 4
3566: PPUSH
3567: CALL_OW 74
3571: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 6
3581: PPUSH
3582: CALL_OW 296
3586: PUSH
3587: LD_INT 8
3589: PLUS
3590: PUSH
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 7
3600: PPUSH
3601: CALL_OW 296
3605: LESS
3606: IFFALSE 3624
// ComAttackUnit ( j , target1 ) else
3608: LD_VAR 0 4
3612: PPUSH
3613: LD_VAR 0 6
3617: PPUSH
3618: CALL_OW 115
3622: GO 3638
// ComAttackUnit ( j , target2 ) ;
3624: LD_VAR 0 4
3628: PPUSH
3629: LD_VAR 0 7
3633: PPUSH
3634: CALL_OW 115
// end ;
3638: GO 3410
3640: POP
3641: POP
// until russianTanks = 0 ;
3642: LD_EXP 11
3646: PUSH
3647: LD_INT 0
3649: EQUAL
3650: IFFALSE 3393
// end ; end ;
3652: LD_VAR 0 2
3656: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3657: LD_INT 0
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
3664: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3665: LD_ADDR_VAR 0 6
3669: PUSH
3670: LD_INT 22
3672: PUSH
3673: LD_VAR 0 1
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 25
3684: PUSH
3685: LD_INT 9
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PPUSH
3696: CALL_OW 69
3700: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: LD_INT 81
3708: PUSH
3709: LD_VAR 0 1
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 69
3743: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3744: LD_ADDR_VAR 0 4
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: ST_TO_ADDR
// for i = 1 to list do
3760: LD_ADDR_VAR 0 5
3764: PUSH
3765: DOUBLE
3766: LD_INT 1
3768: DEC
3769: ST_TO_ADDR
3770: LD_VAR 0 6
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3978
// for ta in filter do
3778: LD_ADDR_VAR 0 3
3782: PUSH
3783: LD_VAR 0 7
3787: PUSH
3788: FOR_IN
3789: IFFALSE 3974
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3791: LD_VAR 0 6
3795: PUSH
3796: LD_VAR 0 5
3800: ARRAY
3801: PPUSH
3802: LD_VAR 0 3
3806: PPUSH
3807: CALL_OW 296
3811: PUSH
3812: LD_INT 15
3814: LESSEQUAL
3815: IFFALSE 3972
// begin case c of 1 :
3817: LD_VAR 0 4
3821: PUSH
3822: LD_INT 1
3824: DOUBLE
3825: EQUAL
3826: IFTRUE 3830
3828: GO 3868
3830: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3831: LD_VAR 0 6
3835: PUSH
3836: LD_VAR 0 5
3840: ARRAY
3841: PPUSH
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 250
3851: PPUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 251
3861: PPUSH
3862: CALL_OW 154
3866: GO 3972
3868: LD_INT 2
3870: DOUBLE
3871: EQUAL
3872: IFTRUE 3876
3874: GO 3940
3876: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3877: LD_VAR 0 6
3881: PUSH
3882: LD_VAR 0 5
3886: ARRAY
3887: PPUSH
3888: LD_VAR 0 3
3892: PPUSH
3893: CALL_OW 250
3897: PUSH
3898: LD_INT 1
3900: NEG
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 12
3909: PLUS
3910: PPUSH
3911: LD_VAR 0 3
3915: PPUSH
3916: CALL_OW 251
3920: PUSH
3921: LD_INT 1
3923: NEG
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 12
3932: PLUS
3933: PPUSH
3934: CALL_OW 153
3938: GO 3972
3940: LD_INT 3
3942: DOUBLE
3943: EQUAL
3944: IFTRUE 3948
3946: GO 3971
3948: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3949: LD_VAR 0 6
3953: PUSH
3954: LD_VAR 0 5
3958: ARRAY
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 115
3969: GO 3972
3971: POP
// end ; end ;
3972: GO 3788
3974: POP
3975: POP
3976: GO 3775
3978: POP
3979: POP
// end ;
3980: LD_VAR 0 2
3984: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
3990: LD_EXP 11
3994: PUSH
3995: LD_INT 1
3997: GREATEREQUAL
3998: PUSH
3999: LD_EXP 12
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: LIST
4017: PUSH
4018: LD_OWVAR 67
4022: ARRAY
4023: GREATEREQUAL
4024: AND
4025: IFFALSE 4164
// repeat wait ( 0 0$3 ) ;
4027: LD_INT 105
4029: PPUSH
4030: CALL_OW 67
// if russianTimeLapsers > 0 then
4034: LD_EXP 12
4038: PUSH
4039: LD_INT 0
4041: GREATER
4042: IFFALSE 4154
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
4044: LD_ADDR_VAR 0 3
4048: PUSH
4049: LD_EXP 12
4053: PPUSH
4054: LD_INT 3
4056: PUSH
4057: LD_INT 60
4059: PUSH
4060: EMPTY
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 72
4071: PUSH
4072: FOR_IN
4073: IFFALSE 4152
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
4075: LD_ADDR_VAR 0 4
4079: PUSH
4080: LD_INT 81
4082: PUSH
4083: LD_VAR 0 1
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 101
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PPUSH
4111: LD_VAR 0 3
4115: PPUSH
4116: CALL_OW 74
4120: ST_TO_ADDR
// ComMoveXY ( j , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_VAR 0 4
4130: PPUSH
4131: CALL_OW 250
4135: PPUSH
4136: LD_VAR 0 4
4140: PPUSH
4141: CALL_OW 251
4145: PPUSH
4146: CALL_OW 111
// end ;
4150: GO 4072
4152: POP
4153: POP
// until russianTimeLapsers = 0 ;
4154: LD_EXP 12
4158: PUSH
4159: LD_INT 0
4161: EQUAL
4162: IFFALSE 4027
// end ;
4164: LD_VAR 0 2
4168: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4169: LD_INT 0
4171: PPUSH
4172: PPUSH
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4177: LD_ADDR_VAR 0 7
4181: PUSH
4182: LD_VAR 0 2
4186: PPUSH
4187: LD_INT 22
4189: PUSH
4190: LD_VAR 0 1
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 34
4211: PUSH
4212: LD_INT 52
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 70
4228: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4229: LD_ADDR_VAR 0 8
4233: PUSH
4234: LD_VAR 0 2
4238: PPUSH
4239: LD_INT 22
4241: PUSH
4242: LD_VAR 0 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 21
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 3
4263: PUSH
4264: LD_INT 24
4266: PUSH
4267: LD_INT 1000
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: PPUSH
4286: CALL_OW 70
4290: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4291: LD_VAR 0 8
4295: PUSH
4296: LD_INT 0
4298: GREATER
4299: PUSH
4300: LD_VAR 0 7
4304: PPUSH
4305: LD_INT 24
4307: PUSH
4308: LD_INT 750
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 72
4319: PUSH
4320: LD_INT 0
4322: GREATER
4323: AND
4324: IFFALSE 4344
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4326: LD_VAR 0 7
4330: PPUSH
4331: LD_VAR 0 8
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4344: LD_VAR 0 7
4348: PUSH
4349: LD_INT 0
4351: GREATER
4352: PUSH
4353: LD_VAR 0 8
4357: PUSH
4358: LD_INT 0
4360: EQUAL
4361: AND
4362: PUSH
4363: LD_EXP 10
4367: PUSH
4368: LD_INT 0
4370: GREATER
4371: AND
4372: IFFALSE 4419
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4374: LD_VAR 0 7
4378: PPUSH
4379: LD_EXP 10
4383: PUSH
4384: LD_INT 1
4386: ARRAY
4387: PPUSH
4388: LD_EXP 10
4392: PUSH
4393: LD_INT 2
4395: ARRAY
4396: PPUSH
4397: LD_EXP 10
4401: PUSH
4402: LD_INT 3
4404: ARRAY
4405: PPUSH
4406: LD_EXP 10
4410: PUSH
4411: LD_INT 4
4413: ARRAY
4414: PPUSH
4415: CALL_OW 567
// end ; end_of_file
4419: LD_VAR 0 3
4423: RET
// every 0 0$1 do
4424: GO 4426
4426: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4427: LD_INT 3
4429: PPUSH
4430: LD_INT 14
4432: PPUSH
4433: LD_INT 3
4435: PPUSH
4436: CALL 1544 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4440: LD_INT 3
4442: PPUSH
4443: LD_INT 15
4445: PPUSH
4446: LD_INT 3
4448: PPUSH
4449: CALL 1544 0 3
// end ;
4453: END
// every 0 0$1 trigger russianAI = 1 do
4454: LD_EXP 13
4458: PUSH
4459: LD_INT 1
4461: EQUAL
4462: IFFALSE 4575
4464: GO 4466
4466: DISABLE
// begin enable ;
4467: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4468: LD_INT 3
4470: PPUSH
4471: LD_INT 22
4473: PPUSH
4474: LD_INT 7
4476: PPUSH
4477: LD_EXP 10
4481: PPUSH
4482: CALL 1785 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 8
4491: PPUSH
4492: LD_INT 7
4494: PPUSH
4495: LD_INT 14
4497: PUSH
4498: LD_INT 15
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 1
4507: PPUSH
4508: LD_INT 2
4510: PPUSH
4511: CALL_OW 12
4515: ARRAY
4516: PPUSH
4517: CALL 2176 0 4
// AttackVehicles ( 3 ) ;
4521: LD_INT 3
4523: PPUSH
4524: CALL 3331 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4528: LD_INT 3
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: CALL 3027 0 2
// TimeLapsersAI ( 3 ) ;
4538: LD_INT 3
4540: PPUSH
4541: CALL 3985 0 1
// IntBazooka ( 3 ) ;
4545: LD_INT 3
4547: PPUSH
4548: CALL 3657 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 51
4557: PPUSH
4558: LD_INT 14
4560: PPUSH
4561: CALL 2884 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4565: LD_INT 3
4567: PPUSH
4568: LD_INT 7
4570: PPUSH
4571: CALL 4169 0 2
// end ;
4575: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4576: LD_INT 22
4578: PPUSH
4579: CALL_OW 303
4583: PUSH
4584: LD_INT 22
4586: PPUSH
4587: CALL_OW 255
4591: PUSH
4592: LD_INT 1
4594: EQUAL
4595: OR
4596: IFFALSE 4611
4598: GO 4600
4600: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 22
4606: PPUSH
4607: CALL 2720 0 2
4611: END
// every 5 5$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4612: LD_EXP 13
4616: PUSH
4617: LD_INT 1
4619: EQUAL
4620: PUSH
4621: LD_INT 22
4623: PUSH
4624: LD_INT 3
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 21
4633: PUSH
4634: LD_INT 2
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 50
4643: PUSH
4644: EMPTY
4645: LIST
4646: PUSH
4647: LD_INT 33
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 2
4659: PUSH
4660: LD_INT 34
4662: PUSH
4663: LD_INT 46
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 34
4672: PUSH
4673: LD_INT 45
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 34
4682: PUSH
4683: LD_INT 44
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 34
4692: PUSH
4693: LD_INT 49
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 34
4702: PUSH
4703: LD_INT 47
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 69
4729: PUSH
4730: LD_INT 0
4732: EQUAL
4733: AND
4734: IFFALSE 4921
4736: GO 4738
4738: DISABLE
// begin enable ;
4739: ENABLE
// if russianRocketsAvalaible = 1 then
4740: LD_EXP 14
4744: PUSH
4745: LD_INT 1
4747: EQUAL
4748: IFFALSE 4805
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4750: LD_INT 3
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: LD_INT 3
4758: PUSH
4759: LD_INT 4
4761: PUSH
4762: LD_INT 4
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: LIST
4769: PUSH
4770: LD_OWVAR 67
4774: ARRAY
4775: PPUSH
4776: LD_INT 46
4778: PUSH
4779: LD_INT 45
4781: PUSH
4782: LD_INT 44
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: PPUSH
4790: LD_INT 3
4792: PPUSH
4793: LD_INT 3
4795: PPUSH
4796: LD_INT 24
4798: PPUSH
4799: CALL 3257 0 7
4803: GO 4862
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4805: LD_INT 3
4807: PPUSH
4808: LD_INT 1
4810: PPUSH
4811: LD_INT 3
4813: PUSH
4814: LD_INT 4
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: LD_OWVAR 67
4829: ARRAY
4830: PPUSH
4831: LD_INT 46
4833: PUSH
4834: LD_INT 45
4836: PUSH
4837: LD_INT 44
4839: PUSH
4840: LD_INT 47
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: LD_INT 3
4851: PPUSH
4852: LD_INT 3
4854: PPUSH
4855: LD_INT 24
4857: PPUSH
4858: CALL 3257 0 7
// if russianTimeLapsers = 0 then
4862: LD_EXP 12
4866: PUSH
4867: LD_INT 0
4869: EQUAL
4870: IFFALSE 4921
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4872: LD_INT 3
4874: PPUSH
4875: LD_INT 40
4877: PPUSH
4878: LD_INT 1
4880: PUSH
4881: LD_INT 2
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_OWVAR 67
4896: ARRAY
4897: PPUSH
4898: LD_INT 49
4900: PUSH
4901: LD_INT 49
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PPUSH
4908: LD_INT 3
4910: PPUSH
4911: LD_INT 3
4913: PPUSH
4914: LD_INT 24
4916: PPUSH
4917: CALL 3257 0 7
// end ; end_of_file
4921: END
// every 1 do var dec1 , dec2 ;
4922: GO 4924
4924: DISABLE
4925: LD_INT 0
4927: PPUSH
4928: PPUSH
// begin InGameOn ;
4929: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
4933: LD_INT 48
4935: PPUSH
4936: LD_STRING deltakappa
4938: PPUSH
4939: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4943: LD_INT 95
4945: PPUSH
4946: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4950: LD_INT 95
4952: PPUSH
4953: LD_INT 30
4955: PPUSH
4956: LD_INT 11
4958: PPUSH
4959: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4963: LD_INT 30
4965: PPUSH
4966: LD_INT 11
4968: PPUSH
4969: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4973: LD_EXP 5
4977: PPUSH
4978: LD_STRING D1-Pow-1
4980: PPUSH
4981: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4985: LD_EXP 1
4989: PPUSH
4990: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4994: LD_EXP 1
4998: PPUSH
4999: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5003: LD_EXP 1
5007: PPUSH
5008: LD_STRING D1-JMM-1
5010: PPUSH
5011: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5015: LD_EXP 5
5019: PPUSH
5020: LD_STRING D1-Pow-2
5022: PPUSH
5023: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5027: LD_EXP 1
5031: PPUSH
5032: LD_STRING D1-JMM-2
5034: PPUSH
5035: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_INT 95
5046: PPUSH
5047: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5051: LD_STRING M1
5053: PPUSH
5054: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5058: LD_INT 35
5060: PPUSH
5061: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5065: LD_EXP 1
5069: PPUSH
5070: LD_INT 95
5072: PPUSH
5073: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5077: LD_INT 95
5079: PPUSH
5080: LD_INT 51
5082: PPUSH
5083: LD_INT 21
5085: PPUSH
5086: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5090: LD_INT 95
5092: PPUSH
5093: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5097: LD_INT 95
5099: PPUSH
5100: LD_INT 5
5102: PPUSH
5103: CALL_OW 308
5107: IFFALSE 5058
// if JMMGirl = 1 then
5109: LD_EXP 7
5113: PUSH
5114: LD_INT 1
5116: EQUAL
5117: IFFALSE 5430
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5119: LD_EXP 2
5123: PPUSH
5124: LD_STRING D2J-Joan-1
5126: PPUSH
5127: CALL_OW 94
// dec1 = query ( Q1 ) ;
5131: LD_ADDR_VAR 0 1
5135: PUSH
5136: LD_STRING Q1
5138: PPUSH
5139: CALL_OW 97
5143: ST_TO_ADDR
// if dec1 = 1 then
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 1
5151: EQUAL
5152: IFFALSE 5406
// begin ComExitVehicle ( JMM ) ;
5154: LD_EXP 1
5158: PPUSH
5159: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5163: LD_EXP 1
5167: PPUSH
5168: LD_STRING D2J-JMM-1
5170: PPUSH
5171: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5175: LD_EXP 2
5179: PPUSH
5180: LD_STRING D2J-Joan-2
5182: PPUSH
5183: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_STRING D2J-JMM-2
5194: PPUSH
5195: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5199: LD_EXP 2
5203: PPUSH
5204: LD_STRING D2J-Joan-3
5206: PPUSH
5207: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5211: LD_EXP 5
5215: PPUSH
5216: LD_STRING DPowell-Pow-1
5218: PPUSH
5219: CALL_OW 94
// dec2 = query ( Q2J ) ;
5223: LD_ADDR_VAR 0 2
5227: PUSH
5228: LD_STRING Q2J
5230: PPUSH
5231: CALL_OW 97
5235: ST_TO_ADDR
// if dec2 = 1 then
5236: LD_VAR 0 2
5240: PUSH
5241: LD_INT 1
5243: EQUAL
5244: IFFALSE 5286
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5246: LD_EXP 1
5250: PPUSH
5251: LD_STRING D2Ja-JMM-1
5253: PPUSH
5254: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5258: LD_EXP 2
5262: PPUSH
5263: LD_STRING D2Ja-Joan-1
5265: PPUSH
5266: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5270: LD_EXP 1
5274: PPUSH
5275: LD_STRING D2Ja-JMM-2
5277: PPUSH
5278: CALL_OW 88
// InGameOff ;
5282: CALL_OW 9
// end ; if dec2 = 2 then
5286: LD_VAR 0 2
5290: PUSH
5291: LD_INT 2
5293: EQUAL
5294: IFFALSE 5370
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5296: LD_EXP 1
5300: PPUSH
5301: LD_STRING D2Jb-JMM-1
5303: PPUSH
5304: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5308: LD_EXP 2
5312: PPUSH
5313: LD_STRING D2Jb-Joan-1
5315: PPUSH
5316: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5320: LD_EXP 1
5324: PPUSH
5325: LD_STRING D2Jb-JMM-2
5327: PPUSH
5328: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5332: LD_EXP 2
5336: PPUSH
5337: LD_STRING D2Jb-Joan-2
5339: PPUSH
5340: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5344: LD_EXP 1
5348: PPUSH
5349: LD_STRING D2Jb-JMM-3
5351: PPUSH
5352: CALL_OW 88
// fastEnd = 1 ;
5356: LD_ADDR_EXP 15
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// FinishMission ;
5364: CALL 9289 0 0
// exit ;
5368: GO 6000
// end ; if dec2 = 3 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 3
5377: EQUAL
5378: IFFALSE 5406
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5380: LD_EXP 2
5384: PPUSH
5385: LD_STRING D2Jc-Joan-1
5387: PPUSH
5388: CALL_OW 94
// fastEnd = 1 ;
5392: LD_ADDR_EXP 15
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// FinishMission ;
5400: CALL 9289 0 0
// exit ;
5404: GO 6000
// end ; end ; if dec1 = 2 then
5406: LD_VAR 0 1
5410: PUSH
5411: LD_INT 2
5413: EQUAL
5414: IFFALSE 5430
// begin fastEnd = 1 ;
5416: LD_ADDR_EXP 15
5420: PUSH
5421: LD_INT 1
5423: ST_TO_ADDR
// FinishMission ;
5424: CALL 9289 0 0
// exit ;
5428: GO 6000
// end ; end ; if JMMGirl = 2 then
5430: LD_EXP 7
5434: PUSH
5435: LD_INT 2
5437: EQUAL
5438: IFFALSE 5763
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5440: LD_EXP 3
5444: PPUSH
5445: LD_STRING D2L-Lisa-1
5447: PPUSH
5448: CALL_OW 94
// dec1 = query ( Q1 ) ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: LD_STRING Q1
5459: PPUSH
5460: CALL_OW 97
5464: ST_TO_ADDR
// if dec1 = 1 then
5465: LD_VAR 0 1
5469: PUSH
5470: LD_INT 1
5472: EQUAL
5473: IFFALSE 5739
// begin ComExitVehicle ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_STRING D2L-JMM-1
5491: PPUSH
5492: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5496: LD_EXP 3
5500: PPUSH
5501: LD_STRING D2L-Lisa-2
5503: PPUSH
5504: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5508: LD_EXP 1
5512: PPUSH
5513: LD_STRING D2L-JMM-2
5515: PPUSH
5516: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5520: LD_EXP 3
5524: PPUSH
5525: LD_STRING D2L-Lisa-3
5527: PPUSH
5528: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5532: LD_EXP 5
5536: PPUSH
5537: LD_STRING DPowell-Pow-1
5539: PPUSH
5540: CALL_OW 94
// dec2 = query ( Q2L ) ;
5544: LD_ADDR_VAR 0 2
5548: PUSH
5549: LD_STRING Q2L
5551: PPUSH
5552: CALL_OW 97
5556: ST_TO_ADDR
// if dec2 = 1 then
5557: LD_VAR 0 2
5561: PUSH
5562: LD_INT 1
5564: EQUAL
5565: IFFALSE 5631
// begin Say ( JMM , D2La-JMM-1 ) ;
5567: LD_EXP 1
5571: PPUSH
5572: LD_STRING D2La-JMM-1
5574: PPUSH
5575: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5579: LD_EXP 3
5583: PPUSH
5584: LD_STRING D2La-Lisa-1
5586: PPUSH
5587: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5591: LD_EXP 1
5595: PPUSH
5596: LD_STRING D2La-JMM-2
5598: PPUSH
5599: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5603: LD_EXP 3
5607: PPUSH
5608: LD_STRING D2La-Lisa-2
5610: PPUSH
5611: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5615: LD_EXP 1
5619: PPUSH
5620: LD_STRING D2La-JMM-3
5622: PPUSH
5623: CALL_OW 88
// InGameOff ;
5627: CALL_OW 9
// end ; if dec2 = 2 then
5631: LD_VAR 0 2
5635: PUSH
5636: LD_INT 2
5638: EQUAL
5639: IFFALSE 5703
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5641: LD_EXP 1
5645: PPUSH
5646: LD_STRING D2Lb-JMM-1
5648: PPUSH
5649: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5653: LD_EXP 3
5657: PPUSH
5658: LD_STRING D2Lb-Lisa-1
5660: PPUSH
5661: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5665: LD_EXP 1
5669: PPUSH
5670: LD_STRING D2Lb-JMM-2
5672: PPUSH
5673: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5677: LD_EXP 3
5681: PPUSH
5682: LD_STRING D2Lb-Lisa-2
5684: PPUSH
5685: CALL_OW 94
// fastEnd = 1 ;
5689: LD_ADDR_EXP 15
5693: PUSH
5694: LD_INT 1
5696: ST_TO_ADDR
// FinishMission ;
5697: CALL 9289 0 0
// exit ;
5701: GO 6000
// end ; if dec2 = 3 then
5703: LD_VAR 0 2
5707: PUSH
5708: LD_INT 3
5710: EQUAL
5711: IFFALSE 5739
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5713: LD_EXP 3
5717: PPUSH
5718: LD_STRING D2Lc-Lisa-1
5720: PPUSH
5721: CALL_OW 94
// fastEnd = 1 ;
5725: LD_ADDR_EXP 15
5729: PUSH
5730: LD_INT 1
5732: ST_TO_ADDR
// FinishMission ;
5733: CALL 9289 0 0
// exit ;
5737: GO 6000
// end ; end ; if dec1 = 2 then
5739: LD_VAR 0 1
5743: PUSH
5744: LD_INT 2
5746: EQUAL
5747: IFFALSE 5763
// begin fastEnd = 1 ;
5749: LD_ADDR_EXP 15
5753: PUSH
5754: LD_INT 1
5756: ST_TO_ADDR
// FinishMission ;
5757: CALL 9289 0 0
// exit ;
5761: GO 6000
// end ; end ; if JMMGirl = 3 then
5763: LD_EXP 7
5767: PUSH
5768: LD_INT 3
5770: EQUAL
5771: IFFALSE 6000
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5773: LD_EXP 4
5777: PPUSH
5778: LD_STRING D2X-Con-1
5780: PPUSH
5781: CALL_OW 94
// dec1 = query ( Q1 ) ;
5785: LD_ADDR_VAR 0 1
5789: PUSH
5790: LD_STRING Q1
5792: PPUSH
5793: CALL_OW 97
5797: ST_TO_ADDR
// if dec1 = 1 then
5798: LD_VAR 0 1
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: IFFALSE 5976
// begin ComExitVehicle ( JMM ) ;
5808: LD_EXP 1
5812: PPUSH
5813: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5817: LD_EXP 1
5821: PPUSH
5822: LD_STRING D2X-JMM-1
5824: PPUSH
5825: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5829: LD_EXP 4
5833: PPUSH
5834: LD_STRING D2X-Con-2
5836: PPUSH
5837: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5841: LD_EXP 5
5845: PPUSH
5846: LD_STRING DPowell-Pow-1
5848: PPUSH
5849: CALL_OW 94
// dec2 = query ( Q2X ) ;
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_STRING Q2X
5860: PPUSH
5861: CALL_OW 97
5865: ST_TO_ADDR
// if dec2 = 1 then
5866: LD_VAR 0 2
5870: PUSH
5871: LD_INT 1
5873: EQUAL
5874: IFFALSE 5892
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5876: LD_EXP 1
5880: PPUSH
5881: LD_STRING D2Xa-JMM-1
5883: PPUSH
5884: CALL_OW 88
// InGameOff ;
5888: CALL_OW 9
// end ; if dec2 = 2 then
5892: LD_VAR 0 2
5896: PUSH
5897: LD_INT 2
5899: EQUAL
5900: IFFALSE 5940
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5902: LD_EXP 1
5906: PPUSH
5907: LD_STRING D2Xb-JMM-1
5909: PPUSH
5910: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5914: LD_EXP 4
5918: PPUSH
5919: LD_STRING D2Xb-Con-1
5921: PPUSH
5922: CALL_OW 94
// fastEnd = 1 ;
5926: LD_ADDR_EXP 15
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// FinishMission ;
5934: CALL 9289 0 0
// exit ;
5938: GO 6000
// end ; if dec2 = 3 then
5940: LD_VAR 0 2
5944: PUSH
5945: LD_INT 3
5947: EQUAL
5948: IFFALSE 5976
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5950: LD_EXP 4
5954: PPUSH
5955: LD_STRING D2Xc-Con-1
5957: PPUSH
5958: CALL_OW 94
// fastEnd = 1 ;
5962: LD_ADDR_EXP 15
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// FinishMission ;
5970: CALL 9289 0 0
// exit ;
5974: GO 6000
// end ; end ; if dec1 = 2 then
5976: LD_VAR 0 1
5980: PUSH
5981: LD_INT 2
5983: EQUAL
5984: IFFALSE 6000
// begin fastEnd = 1 ;
5986: LD_ADDR_EXP 15
5990: PUSH
5991: LD_INT 1
5993: ST_TO_ADDR
// FinishMission ;
5994: CALL 9289 0 0
// exit ;
5998: GO 6000
// end ; end ; end ;
6000: PPOPN 2
6002: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6003: LD_EXP 1
6007: PPUSH
6008: LD_INT 6
6010: PPUSH
6011: CALL_OW 308
6015: IFFALSE 6781
6017: GO 6019
6019: DISABLE
// begin InGameOn ;
6020: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6024: LD_INT 35
6026: PPUSH
6027: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6031: LD_EXP 1
6035: PPUSH
6036: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6040: LD_EXP 1
6044: PPUSH
6045: LD_INT 62
6047: PPUSH
6048: LD_INT 104
6050: PPUSH
6051: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_EXP 2
6064: PPUSH
6065: CALL_OW 296
6069: PUSH
6070: LD_INT 4
6072: LESS
6073: PUSH
6074: LD_EXP 1
6078: PPUSH
6079: LD_EXP 3
6083: PPUSH
6084: CALL_OW 296
6088: PUSH
6089: LD_INT 4
6091: LESS
6092: OR
6093: PUSH
6094: LD_EXP 1
6098: PPUSH
6099: LD_EXP 4
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 4
6111: LESS
6112: OR
6113: IFFALSE 6024
// case JMMGirl of 1 :
6115: LD_EXP 7
6119: PUSH
6120: LD_INT 1
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6340
6128: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6129: LD_INT 22
6131: PUSH
6132: LD_INT 4
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_INT 1
6146: PPUSH
6147: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6151: LD_EXP 2
6155: PPUSH
6156: LD_EXP 1
6160: PPUSH
6161: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_EXP 2
6174: PPUSH
6175: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6179: LD_EXP 2
6183: PUSH
6184: LD_EXP 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 87
// wait ( 0 0$1 ) ;
6197: LD_INT 35
6199: PPUSH
6200: CALL_OW 67
// DialogueOn ;
6204: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6208: LD_EXP 2
6212: PPUSH
6213: LD_STRING D3J-Joan-1
6215: PPUSH
6216: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6220: LD_EXP 1
6224: PPUSH
6225: LD_STRING D3J-JMM-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6232: LD_EXP 2
6236: PPUSH
6237: LD_STRING D3J-Joan-2
6239: PPUSH
6240: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6244: LD_EXP 1
6248: PPUSH
6249: LD_STRING D3J-JMM-2
6251: PPUSH
6252: CALL_OW 88
// wait ( 0 0$1 ) ;
6256: LD_INT 35
6258: PPUSH
6259: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6263: LD_EXP 1
6267: PPUSH
6268: LD_STRING D4-JMM-1
6270: PPUSH
6271: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6275: LD_EXP 2
6279: PPUSH
6280: LD_STRING D4-Joan-1
6282: PPUSH
6283: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6287: LD_EXP 1
6291: PPUSH
6292: LD_STRING D4-JMM-2
6294: PPUSH
6295: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6299: LD_EXP 2
6303: PPUSH
6304: LD_STRING D4-Joan-2
6306: PPUSH
6307: CALL_OW 88
// DialogueOff ;
6311: CALL_OW 7
// InGameOff ;
6315: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6319: LD_STRING M2J
6321: PPUSH
6322: CALL_OW 337
// SaveForQuickRestart ;
6326: CALL_OW 22
// russianAI = 1 ;
6330: LD_ADDR_EXP 13
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// end ; 2 :
6338: GO 6781
6340: LD_INT 2
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6560
6348: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6349: LD_INT 22
6351: PUSH
6352: LD_INT 4
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PPUSH
6359: CALL_OW 69
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6371: LD_EXP 3
6375: PPUSH
6376: LD_EXP 1
6380: PPUSH
6381: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6385: LD_EXP 1
6389: PPUSH
6390: LD_EXP 3
6394: PPUSH
6395: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6399: LD_EXP 3
6403: PUSH
6404: LD_EXP 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 87
// wait ( 0 0$1 ) ;
6417: LD_INT 35
6419: PPUSH
6420: CALL_OW 67
// DialogueOn ;
6424: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6428: LD_EXP 3
6432: PPUSH
6433: LD_STRING D3L-Lisa-1
6435: PPUSH
6436: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6440: LD_EXP 1
6444: PPUSH
6445: LD_STRING D3L-JMM-1
6447: PPUSH
6448: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6452: LD_EXP 3
6456: PPUSH
6457: LD_STRING D3L-Lisa-2
6459: PPUSH
6460: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6464: LD_EXP 1
6468: PPUSH
6469: LD_STRING D3L-JMM-2
6471: PPUSH
6472: CALL_OW 88
// wait ( 0 0$1 ) ;
6476: LD_INT 35
6478: PPUSH
6479: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6483: LD_EXP 1
6487: PPUSH
6488: LD_STRING D4-JMM-1
6490: PPUSH
6491: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6495: LD_EXP 3
6499: PPUSH
6500: LD_STRING D4-Lisa-1
6502: PPUSH
6503: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6507: LD_EXP 1
6511: PPUSH
6512: LD_STRING D4-JMM-1
6514: PPUSH
6515: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6519: LD_EXP 3
6523: PPUSH
6524: LD_STRING D4-Lisa-2
6526: PPUSH
6527: CALL_OW 88
// DialogueOff ;
6531: CALL_OW 7
// InGameOff ;
6535: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6539: LD_STRING M2L
6541: PPUSH
6542: CALL_OW 337
// SaveForQuickRestart ;
6546: CALL_OW 22
// russianAI = 1 ;
6550: LD_ADDR_EXP 13
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// end ; 3 :
6558: GO 6781
6560: LD_INT 3
6562: DOUBLE
6563: EQUAL
6564: IFTRUE 6568
6566: GO 6780
6568: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6569: LD_INT 22
6571: PUSH
6572: LD_INT 4
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL_OW 69
6583: PPUSH
6584: LD_INT 1
6586: PPUSH
6587: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6591: LD_EXP 4
6595: PPUSH
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_EXP 4
6614: PPUSH
6615: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6619: LD_EXP 2
6623: PUSH
6624: LD_EXP 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PPUSH
6633: CALL_OW 87
// wait ( 0 0$1 ) ;
6637: LD_INT 35
6639: PPUSH
6640: CALL_OW 67
// DialogueOn ;
6644: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6648: LD_EXP 4
6652: PPUSH
6653: LD_STRING D3X-Con-1
6655: PPUSH
6656: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6660: LD_EXP 1
6664: PPUSH
6665: LD_STRING D3J-JMM-1
6667: PPUSH
6668: CALL_OW 88
// Say ( Connie , D3J-Joan-2 ) ;
6672: LD_EXP 4
6676: PPUSH
6677: LD_STRING D3J-Joan-2
6679: PPUSH
6680: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6684: LD_EXP 1
6688: PPUSH
6689: LD_STRING D3J-JMM-2
6691: PPUSH
6692: CALL_OW 88
// wait ( 0 0$1 ) ;
6696: LD_INT 35
6698: PPUSH
6699: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6703: LD_EXP 1
6707: PPUSH
6708: LD_STRING D4-JMM-1
6710: PPUSH
6711: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6715: LD_EXP 4
6719: PPUSH
6720: LD_STRING D4-Con-1
6722: PPUSH
6723: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6727: LD_EXP 1
6731: PPUSH
6732: LD_STRING D4-JMM-2
6734: PPUSH
6735: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6739: LD_EXP 4
6743: PPUSH
6744: LD_STRING D4-Con-2
6746: PPUSH
6747: CALL_OW 88
// DialogueOff ;
6751: CALL_OW 7
// InGameOff ;
6755: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6759: LD_STRING M2X
6761: PPUSH
6762: CALL_OW 337
// SaveForQuickRestart ;
6766: CALL_OW 22
// russianAI = 1 ;
6770: LD_ADDR_EXP 13
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// end ; end ;
6778: GO 6781
6780: POP
// end ;
6781: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6782: LD_INT 32
6784: PPUSH
6785: CALL_OW 306
6789: IFFALSE 7122
6791: GO 6793
6793: DISABLE
// begin case JMMGirl of 1 :
6794: LD_EXP 7
6798: PUSH
6799: LD_INT 1
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6929
6807: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6808: LD_EXP 1
6812: PPUSH
6813: LD_STRING D6J-JMM-1
6815: PPUSH
6816: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6820: LD_STRING 13f_Denis
6822: PPUSH
6823: CALL_OW 28
6827: PUSH
6828: LD_INT 1
6830: EQUAL
6831: PUSH
6832: LD_STRING 13s_Denis
6834: PPUSH
6835: CALL_OW 28
6839: PUSH
6840: LD_INT 1
6842: EQUAL
6843: OR
6844: IFFALSE 6884
// begin Say ( Joan , D6J-Joan-1 ) ;
6846: LD_EXP 2
6850: PPUSH
6851: LD_STRING D6J-Joan-1
6853: PPUSH
6854: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6858: LD_EXP 1
6862: PPUSH
6863: LD_STRING D6J-JMM-2
6865: PPUSH
6866: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6870: LD_EXP 2
6874: PPUSH
6875: LD_STRING D6J-Joan-2
6877: PPUSH
6878: CALL_OW 88
// end else
6882: GO 6896
// begin Say ( Joan , D6J-Joan-2a ) ;
6884: LD_EXP 2
6888: PPUSH
6889: LD_STRING D6J-Joan-2a
6891: PPUSH
6892: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6896: LD_EXP 1
6900: PPUSH
6901: LD_STRING D6J-JMM-3
6903: PPUSH
6904: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6908: LD_EXP 2
6912: PPUSH
6913: LD_STRING D6J-Joan-3
6915: PPUSH
6916: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6920: LD_STRING M3
6922: PPUSH
6923: CALL_OW 337
// end ; 2 :
6927: GO 7122
6929: LD_INT 2
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6995
6937: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6938: LD_EXP 1
6942: PPUSH
6943: LD_STRING D6L-JMM-1
6945: PPUSH
6946: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6950: LD_EXP 3
6954: PPUSH
6955: LD_STRING D6L-Lisa-1
6957: PPUSH
6958: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6962: LD_EXP 1
6966: PPUSH
6967: LD_STRING D6L-JMM-2
6969: PPUSH
6970: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6974: LD_EXP 3
6978: PPUSH
6979: LD_STRING D6L-Lisa-2
6981: PPUSH
6982: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6986: LD_STRING M3
6988: PPUSH
6989: CALL_OW 337
// end ; 3 :
6993: GO 7122
6995: LD_INT 3
6997: DOUBLE
6998: EQUAL
6999: IFTRUE 7003
7001: GO 7121
7003: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7004: LD_EXP 1
7008: PPUSH
7009: LD_STRING D6X-JMM-1
7011: PPUSH
7012: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7016: LD_EXP 4
7020: PPUSH
7021: LD_STRING D6X-Con-1
7023: PPUSH
7024: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7028: LD_EXP 1
7032: PPUSH
7033: LD_STRING D6X-JMM-2
7035: PPUSH
7036: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7040: LD_EXP 4
7044: PPUSH
7045: LD_STRING D6X-Con-2
7047: PPUSH
7048: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7052: LD_EXP 1
7056: PPUSH
7057: LD_STRING D6X-JMM-3
7059: PPUSH
7060: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7064: LD_EXP 4
7068: PPUSH
7069: LD_STRING D6X-Con-3
7071: PPUSH
7072: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7076: LD_EXP 1
7080: PPUSH
7081: LD_STRING D6X-JMM-4
7083: PPUSH
7084: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7088: LD_EXP 4
7092: PPUSH
7093: LD_STRING D6X-Con-4
7095: PPUSH
7096: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7100: LD_EXP 1
7104: PPUSH
7105: LD_STRING D6X-JMM-5
7107: PPUSH
7108: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7112: LD_STRING M3
7114: PPUSH
7115: CALL_OW 337
// end ; end ;
7119: GO 7122
7121: POP
// end ;
7122: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7123: LD_INT 22
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 33
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PPUSH
7152: CALL_OW 306
7156: IFFALSE 7302
7158: GO 7160
7160: DISABLE
// begin case JMMGirl of 1 :
7161: LD_EXP 7
7165: PUSH
7166: LD_INT 1
7168: DOUBLE
7169: EQUAL
7170: IFTRUE 7174
7172: GO 7211
7174: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7175: LD_EXP 1
7179: PPUSH
7180: LD_STRING D5-JMM-1
7182: PPUSH
7183: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7187: LD_INT 77
7189: PPUSH
7190: LD_INT 87
7192: PPUSH
7193: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7197: LD_EXP 2
7201: PPUSH
7202: LD_STRING D5-Joan-1
7204: PPUSH
7205: CALL_OW 88
// end ; 2 :
7209: GO 7302
7211: LD_INT 2
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7256
7219: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7220: LD_EXP 1
7224: PPUSH
7225: LD_STRING D5-JMM-1
7227: PPUSH
7228: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7232: LD_INT 77
7234: PPUSH
7235: LD_INT 87
7237: PPUSH
7238: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7242: LD_EXP 3
7246: PPUSH
7247: LD_STRING D5-Lisa-1
7249: PPUSH
7250: CALL_OW 88
// end ; 3 :
7254: GO 7302
7256: LD_INT 3
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7301
7264: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7265: LD_EXP 1
7269: PPUSH
7270: LD_STRING D5-JMM-1
7272: PPUSH
7273: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7277: LD_INT 77
7279: PPUSH
7280: LD_INT 87
7282: PPUSH
7283: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7287: LD_EXP 4
7291: PPUSH
7292: LD_STRING D5-Con-1
7294: PPUSH
7295: CALL_OW 88
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: END
// every 15 15$0 do
7303: GO 7305
7305: DISABLE
// begin DialogueOn ;
7306: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7310: LD_EXP 5
7314: PPUSH
7315: LD_STRING D7-Pow-1
7317: PPUSH
7318: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7322: LD_EXP 1
7326: PPUSH
7327: LD_STRING D7-JMM-1
7329: PPUSH
7330: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7334: LD_EXP 5
7338: PPUSH
7339: LD_STRING D7-Pow-2
7341: PPUSH
7342: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7346: LD_EXP 1
7350: PPUSH
7351: LD_STRING D7-JMM-2
7353: PPUSH
7354: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7358: LD_EXP 5
7362: PPUSH
7363: LD_STRING D7-Pow-3
7365: PPUSH
7366: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7370: LD_EXP 1
7374: PPUSH
7375: LD_STRING D7-JMM-3
7377: PPUSH
7378: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7382: LD_EXP 5
7386: PPUSH
7387: LD_STRING D7-Pow-4
7389: PPUSH
7390: CALL_OW 94
// DialogueOff ;
7394: CALL_OW 7
// end ; end_of_file
7398: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 255
7408: PUSH
7409: LD_INT 3
7411: EQUAL
7412: IFFALSE 7486
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7414: LD_ADDR_EXP 10
7418: PUSH
7419: LD_EXP 10
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 3
7431: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7432: LD_ADDR_EXP 10
7436: PUSH
7437: LD_EXP 10
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 3
7449: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7450: LD_ADDR_EXP 10
7454: PUSH
7455: LD_EXP 10
7459: PPUSH
7460: LD_INT 1
7462: PPUSH
7463: CALL_OW 3
7467: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7468: LD_ADDR_EXP 10
7472: PUSH
7473: LD_EXP 10
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 3
7485: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7486: LD_VAR 0 1
7490: PPUSH
7491: CALL_OW 255
7495: PUSH
7496: LD_INT 3
7498: EQUAL
7499: PUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 266
7509: PUSH
7510: LD_INT 0
7512: EQUAL
7513: PUSH
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 266
7523: PUSH
7524: LD_INT 2
7526: EQUAL
7527: OR
7528: PUSH
7529: LD_VAR 0 1
7533: PPUSH
7534: CALL_OW 266
7538: PUSH
7539: LD_INT 4
7541: EQUAL
7542: OR
7543: PUSH
7544: EMPTY
7545: LIST
7546: AND
7547: IFFALSE 7558
// ComUpgrade ( building ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 255
7567: PUSH
7568: LD_INT 3
7570: EQUAL
7571: PUSH
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 266
7581: PUSH
7582: LD_INT 32
7584: EQUAL
7585: AND
7586: IFFALSE 7627
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7588: LD_VAR 0 1
7592: PPUSH
7593: LD_INT 42
7595: PUSH
7596: LD_INT 43
7598: PUSH
7599: LD_INT 44
7601: PUSH
7602: LD_INT 46
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 1
7613: PPUSH
7614: LD_INT 4
7616: PPUSH
7617: CALL_OW 12
7621: ARRAY
7622: PPUSH
7623: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 255
7636: PUSH
7637: LD_INT 3
7639: EQUAL
7640: PUSH
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 266
7650: PUSH
7651: LD_INT 33
7653: EQUAL
7654: AND
7655: IFFALSE 7696
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 42
7664: PUSH
7665: LD_INT 43
7667: PUSH
7668: LD_INT 44
7670: PUSH
7671: LD_INT 46
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_INT 4
7685: PPUSH
7686: CALL_OW 12
7690: ARRAY
7691: PPUSH
7692: CALL_OW 208
// end ;
7696: PPOPN 1
7698: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7699: LD_VAR 0 1
7703: PPUSH
7704: CALL_OW 255
7708: PUSH
7709: LD_INT 3
7711: EQUAL
7712: PUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 247
7722: PUSH
7723: LD_INT 3
7725: EQUAL
7726: AND
7727: IFFALSE 8419
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 266
7738: PUSH
7739: LD_INT 31
7741: EQUAL
7742: PUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 266
7752: PUSH
7753: LD_INT 32
7755: EQUAL
7756: OR
7757: PUSH
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 266
7767: PUSH
7768: LD_INT 36
7770: EQUAL
7771: OR
7772: PUSH
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 266
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: OR
7787: PUSH
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 266
7797: PUSH
7798: LD_INT 24
7800: EQUAL
7801: OR
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 266
7812: PUSH
7813: LD_INT 17
7815: EQUAL
7816: OR
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 266
7827: PUSH
7828: LD_INT 25
7830: EQUAL
7831: OR
7832: PUSH
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 266
7842: PUSH
7843: LD_INT 19
7845: EQUAL
7846: OR
7847: PUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 266
7857: PUSH
7858: LD_INT 20
7860: EQUAL
7861: OR
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 266
7872: PUSH
7873: LD_INT 18
7875: EQUAL
7876: OR
7877: PUSH
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 266
7887: PUSH
7888: LD_INT 21
7890: EQUAL
7891: OR
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 266
7902: PUSH
7903: LD_INT 23
7905: EQUAL
7906: OR
7907: PUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 266
7917: PUSH
7918: LD_INT 16
7920: EQUAL
7921: OR
7922: PUSH
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 266
7932: PUSH
7933: LD_INT 6
7935: EQUAL
7936: OR
7937: PUSH
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 266
7947: PUSH
7948: LD_INT 29
7950: EQUAL
7951: OR
7952: PUSH
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 266
7962: PUSH
7963: LD_INT 26
7965: EQUAL
7966: OR
7967: PUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 266
7977: PUSH
7978: LD_INT 30
7980: EQUAL
7981: OR
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 266
7992: PUSH
7993: LD_INT 28
7995: EQUAL
7996: OR
7997: PUSH
7998: LD_VAR 0 1
8002: PPUSH
8003: CALL_OW 266
8007: PUSH
8008: LD_INT 27
8010: EQUAL
8011: OR
8012: PUSH
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 266
8022: PUSH
8023: LD_INT 33
8025: EQUAL
8026: OR
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 266
8037: PUSH
8038: LD_INT 2
8040: EQUAL
8041: OR
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 266
8052: PUSH
8053: LD_INT 4
8055: EQUAL
8056: OR
8057: IFFALSE 8143
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8059: LD_ADDR_EXP 10
8063: PUSH
8064: LD_EXP 10
8068: PUSH
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 266
8078: ADD
8079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8080: LD_ADDR_EXP 10
8084: PUSH
8085: LD_EXP 10
8089: PUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 250
8099: ADD
8100: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8101: LD_ADDR_EXP 10
8105: PUSH
8106: LD_EXP 10
8110: PUSH
8111: LD_VAR 0 1
8115: PPUSH
8116: CALL_OW 251
8120: ADD
8121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8122: LD_ADDR_EXP 10
8126: PUSH
8127: LD_EXP 10
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: CALL_OW 254
8141: ADD
8142: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 266
8152: PUSH
8153: LD_INT 1
8155: EQUAL
8156: IFFALSE 8235
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8158: LD_ADDR_EXP 10
8162: PUSH
8163: LD_EXP 10
8167: PUSH
8168: LD_INT 0
8170: ADD
8171: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8172: LD_ADDR_EXP 10
8176: PUSH
8177: LD_EXP 10
8181: PUSH
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 250
8191: ADD
8192: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8193: LD_ADDR_EXP 10
8197: PUSH
8198: LD_EXP 10
8202: PUSH
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 251
8212: ADD
8213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8214: LD_ADDR_EXP 10
8218: PUSH
8219: LD_EXP 10
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 254
8233: ADD
8234: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8235: LD_VAR 0 1
8239: PPUSH
8240: CALL_OW 266
8244: PUSH
8245: LD_INT 3
8247: EQUAL
8248: IFFALSE 8327
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8250: LD_ADDR_EXP 10
8254: PUSH
8255: LD_EXP 10
8259: PUSH
8260: LD_INT 2
8262: ADD
8263: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8264: LD_ADDR_EXP 10
8268: PUSH
8269: LD_EXP 10
8273: PUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL_OW 250
8283: ADD
8284: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8285: LD_ADDR_EXP 10
8289: PUSH
8290: LD_EXP 10
8294: PUSH
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 251
8304: ADD
8305: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8306: LD_ADDR_EXP 10
8310: PUSH
8311: LD_EXP 10
8315: PUSH
8316: LD_VAR 0 1
8320: PPUSH
8321: CALL_OW 254
8325: ADD
8326: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 266
8336: PUSH
8337: LD_INT 5
8339: EQUAL
8340: IFFALSE 8419
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8342: LD_ADDR_EXP 10
8346: PUSH
8347: LD_EXP 10
8351: PUSH
8352: LD_INT 4
8354: ADD
8355: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8356: LD_ADDR_EXP 10
8360: PUSH
8361: LD_EXP 10
8365: PUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 250
8375: ADD
8376: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8377: LD_ADDR_EXP 10
8381: PUSH
8382: LD_EXP 10
8386: PUSH
8387: LD_VAR 0 1
8391: PPUSH
8392: CALL_OW 251
8396: ADD
8397: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8398: LD_ADDR_EXP 10
8402: PUSH
8403: LD_EXP 10
8407: PUSH
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 254
8417: ADD
8418: ST_TO_ADDR
// end ; end ; end ;
8419: PPOPN 1
8421: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8422: LD_VAR 0 2
8426: PUSH
8427: LD_INT 1
8429: EQUAL
8430: PUSH
8431: LD_VAR 0 2
8435: PUSH
8436: LD_INT 40
8438: EQUAL
8439: OR
8440: IFFALSE 8564
// if GetSide ( vehicle ) = 3 then
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 255
8451: PUSH
8452: LD_INT 3
8454: EQUAL
8455: IFFALSE 8564
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 264
8466: PUSH
8467: LD_INT 47
8469: EQUAL
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 264
8480: PUSH
8481: LD_INT 46
8483: EQUAL
8484: OR
8485: PUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 264
8495: PUSH
8496: LD_INT 45
8498: EQUAL
8499: OR
8500: PUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 264
8510: PUSH
8511: LD_INT 44
8513: EQUAL
8514: OR
8515: IFFALSE 8533
// russianTanks = russianTanks ^ vehicle ;
8517: LD_ADDR_EXP 11
8521: PUSH
8522: LD_EXP 11
8526: PUSH
8527: LD_VAR 0 1
8531: ADD
8532: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8533: LD_VAR 0 1
8537: PPUSH
8538: CALL_OW 264
8542: PUSH
8543: LD_INT 49
8545: EQUAL
8546: IFFALSE 8564
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8548: LD_ADDR_EXP 12
8552: PUSH
8553: LD_EXP 12
8557: PUSH
8558: LD_VAR 0 1
8562: ADD
8563: ST_TO_ADDR
// ; end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 255
8573: PUSH
8574: LD_INT 1
8576: EQUAL
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 264
8587: PUSH
8588: LD_INT 10
8590: EQUAL
8591: AND
8592: IFFALSE 8608
// amLaserCounter = amLaserCounter + 1 ;
8594: LD_ADDR_EXP 9
8598: PUSH
8599: LD_EXP 9
8603: PUSH
8604: LD_INT 1
8606: PLUS
8607: ST_TO_ADDR
// end ;
8608: PPOPN 2
8610: END
// on UnitGoesToRed ( unit ) do var i ;
8611: LD_INT 0
8613: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8614: LD_VAR 0 1
8618: PPUSH
8619: CALL_OW 255
8623: PUSH
8624: LD_INT 3
8626: EQUAL
8627: PUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 247
8637: PUSH
8638: LD_INT 2
8640: EQUAL
8641: AND
8642: IFFALSE 8760
// begin if russianTanks > 0 then
8644: LD_EXP 11
8648: PUSH
8649: LD_INT 0
8651: GREATER
8652: IFFALSE 8702
// for i in russianTanks do
8654: LD_ADDR_VAR 0 2
8658: PUSH
8659: LD_EXP 11
8663: PUSH
8664: FOR_IN
8665: IFFALSE 8700
// if i = unit then
8667: LD_VAR 0 2
8671: PUSH
8672: LD_VAR 0 1
8676: EQUAL
8677: IFFALSE 8698
// russianTanks = russianTanks diff [ unit ] ;
8679: LD_ADDR_EXP 11
8683: PUSH
8684: LD_EXP 11
8688: PUSH
8689: LD_VAR 0 1
8693: PUSH
8694: EMPTY
8695: LIST
8696: DIFF
8697: ST_TO_ADDR
8698: GO 8664
8700: POP
8701: POP
// if russianTimeLapsers > 0 then
8702: LD_EXP 12
8706: PUSH
8707: LD_INT 0
8709: GREATER
8710: IFFALSE 8760
// for i in russianTimeLapsers do
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: LD_EXP 12
8721: PUSH
8722: FOR_IN
8723: IFFALSE 8758
// if i = unit then
8725: LD_VAR 0 2
8729: PUSH
8730: LD_VAR 0 1
8734: EQUAL
8735: IFFALSE 8756
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
8737: LD_ADDR_EXP 12
8741: PUSH
8742: LD_EXP 12
8746: PUSH
8747: LD_VAR 0 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: DIFF
8755: ST_TO_ADDR
8756: GO 8722
8758: POP
8759: POP
// end ; end ;
8760: PPOPN 2
8762: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL 10560 0 1
// end ; end_of_file
8772: PPOPN 1
8774: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8775: LD_EXP 1
8779: PPUSH
8780: CALL_OW 310
8784: PPUSH
8785: LD_INT 12
8787: PPUSH
8788: CALL_OW 308
8792: PUSH
8793: LD_EXP 15
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 9148
8804: GO 8806
8806: DISABLE
8807: LD_INT 0
8809: PPUSH
8810: PPUSH
// begin enable ;
8811: ENABLE
// if JMMGirl = 1 then
8812: LD_EXP 7
8816: PUSH
8817: LD_INT 1
8819: EQUAL
8820: IFFALSE 8837
// JMMGirlVeh = IsInUnit ( Joan ) ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_EXP 2
8831: PPUSH
8832: CALL_OW 310
8836: ST_TO_ADDR
// if JMMGirl = 2 then
8837: LD_EXP 7
8841: PUSH
8842: LD_INT 2
8844: EQUAL
8845: IFFALSE 8862
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_EXP 3
8856: PPUSH
8857: CALL_OW 310
8861: ST_TO_ADDR
// if JMMGirl = 3 then
8862: LD_EXP 7
8866: PUSH
8867: LD_INT 3
8869: EQUAL
8870: IFFALSE 8887
// JMMGirlVeh = IsInUnit ( Connie ) ;
8872: LD_ADDR_VAR 0 1
8876: PUSH
8877: LD_EXP 4
8881: PPUSH
8882: CALL_OW 310
8886: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8887: LD_EXP 1
8891: PPUSH
8892: CALL_OW 310
8896: PPUSH
8897: LD_EXP 2
8901: PPUSH
8902: CALL_OW 310
8906: PPUSH
8907: CALL_OW 296
8911: PUSH
8912: LD_INT 10
8914: LESS
8915: PUSH
8916: LD_EXP 1
8920: PPUSH
8921: CALL_OW 310
8925: PPUSH
8926: LD_EXP 3
8930: PPUSH
8931: CALL_OW 310
8935: PPUSH
8936: CALL_OW 296
8940: PUSH
8941: LD_INT 10
8943: LESS
8944: OR
8945: PUSH
8946: LD_EXP 1
8950: PPUSH
8951: CALL_OW 310
8955: PPUSH
8956: LD_EXP 4
8960: PPUSH
8961: CALL_OW 310
8965: PPUSH
8966: CALL_OW 296
8970: PUSH
8971: LD_INT 10
8973: LESS
8974: OR
8975: IFFALSE 9069
// begin case Query ( Q3b ) of 1 :
8977: LD_STRING Q3b
8979: PPUSH
8980: CALL_OW 97
8984: PUSH
8985: LD_INT 1
8987: DOUBLE
8988: EQUAL
8989: IFTRUE 8993
8991: GO 9066
8993: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 265
9003: PUSH
9004: EMPTY
9005: LIST
9006: PUSH
9007: LD_VAR 0 1
9011: PPUSH
9012: CALL_OW 262
9016: PUSH
9017: EMPTY
9018: LIST
9019: PUSH
9020: LD_VAR 0 1
9024: PPUSH
9025: CALL_OW 263
9029: PUSH
9030: EMPTY
9031: LIST
9032: PUSH
9033: LD_VAR 0 1
9037: PPUSH
9038: CALL_OW 264
9042: PUSH
9043: EMPTY
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: LD_STRING 14_JMMGirlVeh_1
9054: PPUSH
9055: CALL_OW 39
// FinishMission ;
9059: CALL 9289 0 0
// disable ;
9063: DISABLE
// end ; end ;
9064: GO 9067
9066: POP
// end else
9067: GO 9148
// begin if JMMGirl = 1 then
9069: LD_EXP 7
9073: PUSH
9074: LD_INT 1
9076: EQUAL
9077: IFFALSE 9094
// dec := Query ( Q3bJ ) else
9079: LD_ADDR_VAR 0 2
9083: PUSH
9084: LD_STRING Q3bJ
9086: PPUSH
9087: CALL_OW 97
9091: ST_TO_ADDR
9092: GO 9132
// if JMMGirl = 2 then
9094: LD_EXP 7
9098: PUSH
9099: LD_INT 2
9101: EQUAL
9102: IFFALSE 9119
// dec := Query ( Q3bL ) else
9104: LD_ADDR_VAR 0 2
9108: PUSH
9109: LD_STRING Q3bL
9111: PPUSH
9112: CALL_OW 97
9116: ST_TO_ADDR
9117: GO 9132
// dec := Query ( Q3bX ) ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_STRING Q3bX
9126: PPUSH
9127: CALL_OW 97
9131: ST_TO_ADDR
// if dec = 1 then
9132: LD_VAR 0 2
9136: PUSH
9137: LD_INT 1
9139: EQUAL
9140: IFFALSE 9148
// begin FinishMission ;
9142: CALL 9289 0 0
// exit ;
9146: GO 9148
// end ; end ; end ;
9148: PPOPN 2
9150: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9151: LD_INT 22
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 21
9163: PUSH
9164: LD_INT 1
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 69
9179: PUSH
9180: LD_INT 0
9182: EQUAL
9183: PUSH
9184: LD_EXP 15
9188: PUSH
9189: LD_INT 0
9191: EQUAL
9192: AND
9193: IFFALSE 9288
9195: GO 9197
9197: DISABLE
// begin DialogueOn ;
9198: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9202: LD_EXP 1
9206: PPUSH
9207: LD_STRING DEnd-JMM-1
9209: PPUSH
9210: CALL_OW 88
// if JMMGirl = 1 then
9214: LD_EXP 7
9218: PUSH
9219: LD_INT 1
9221: EQUAL
9222: IFFALSE 9236
// Say ( Joan , DEnd-Joan-1 ) ;
9224: LD_EXP 2
9228: PPUSH
9229: LD_STRING DEnd-Joan-1
9231: PPUSH
9232: CALL_OW 88
// if JMMGirl = 2 then
9236: LD_EXP 7
9240: PUSH
9241: LD_INT 2
9243: EQUAL
9244: IFFALSE 9258
// Say ( Lisa , DEnd-Lisa-1 ) ;
9246: LD_EXP 3
9250: PPUSH
9251: LD_STRING DEnd-Lisa-1
9253: PPUSH
9254: CALL_OW 88
// if JMMGirl = 3 then
9258: LD_EXP 7
9262: PUSH
9263: LD_INT 3
9265: EQUAL
9266: IFFALSE 9280
// Say ( Connie , DEnd-Con-1 ) ;
9268: LD_EXP 4
9272: PPUSH
9273: LD_STRING DEnd-Con-1
9275: PPUSH
9276: CALL_OW 88
// DialogueOff ;
9280: CALL_OW 7
// FinishMission ;
9284: CALL 9289 0 0
// end ;
9288: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
9294: PPUSH
9295: PPUSH
// m1 := false ;
9296: LD_ADDR_VAR 0 3
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// m2 := false ;
9304: LD_ADDR_VAR 0 4
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// m3 := false ;
9312: LD_ADDR_VAR 0 5
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9320: LD_EXP 1
9324: PPUSH
9325: LD_STRING 14_JMM
9327: PPUSH
9328: CALL_OW 38
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9332: LD_EXP 1
9336: PPUSH
9337: CALL_OW 310
9341: PUSH
9342: LD_EXP 1
9346: PPUSH
9347: CALL_OW 310
9351: PPUSH
9352: CALL_OW 247
9356: PUSH
9357: LD_INT 2
9359: EQUAL
9360: AND
9361: IFFALSE 9443
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_EXP 1
9372: PPUSH
9373: CALL_OW 310
9377: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9378: LD_VAR 0 2
9382: PPUSH
9383: CALL_OW 265
9387: PUSH
9388: EMPTY
9389: LIST
9390: PUSH
9391: LD_VAR 0 2
9395: PPUSH
9396: CALL_OW 262
9400: PUSH
9401: EMPTY
9402: LIST
9403: PUSH
9404: LD_VAR 0 2
9408: PPUSH
9409: CALL_OW 263
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: LD_VAR 0 2
9421: PPUSH
9422: CALL_OW 264
9426: PUSH
9427: EMPTY
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PPUSH
9436: LD_STRING 14_JMMVeh_1
9438: PPUSH
9439: CALL_OW 39
// end ; if fastEnd = 1 then
9443: LD_EXP 15
9447: PUSH
9448: LD_INT 1
9450: EQUAL
9451: IFFALSE 9540
// begin AddMedal ( fastend , - 1 ) ;
9453: LD_STRING fastend
9455: PPUSH
9456: LD_INT 1
9458: NEG
9459: PPUSH
9460: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9464: LD_STRING fastend
9466: PPUSH
9467: LD_INT 1
9469: NEG
9470: PPUSH
9471: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9475: LD_STRING fastend
9477: PPUSH
9478: LD_INT 1
9480: NEG
9481: PPUSH
9482: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9486: LD_EXP 7
9490: PPUSH
9491: LD_STRING 14_JMMGirl_1
9493: PPUSH
9494: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9498: LD_INT 0
9500: PPUSH
9501: LD_STRING 14_JMMGirlStatus_1
9503: PPUSH
9504: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9508: LD_INT 0
9510: PPUSH
9511: LD_STRING 14_KappaStatus_1
9513: PPUSH
9514: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9518: LD_STRING Eliminate
9520: PPUSH
9521: CALL_OW 102
// RewardPeople ( JMM ) ;
9525: LD_EXP 1
9529: PPUSH
9530: CALL_OW 43
// YouWin ;
9534: CALL_OW 103
// exit ;
9538: GO 10365
// end ; if fastEnd = 0 then
9540: LD_EXP 15
9544: PUSH
9545: LD_INT 0
9547: EQUAL
9548: IFFALSE 10316
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9550: LD_INT 22
9552: PUSH
9553: LD_INT 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 3
9562: PUSH
9563: LD_INT 25
9565: PUSH
9566: LD_INT 12
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: LD_INT 25
9582: PUSH
9583: LD_INT 16
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 69
9603: PPUSH
9604: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9608: LD_EXP 7
9612: PPUSH
9613: LD_STRING 14_JMMGirl_1
9615: PPUSH
9616: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9620: LD_INT 22
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 1
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 69
9648: PUSH
9649: LD_INT 0
9651: EQUAL
9652: PUSH
9653: LD_INT 48
9655: PPUSH
9656: CALL_OW 255
9660: PUSH
9661: LD_INT 1
9663: EQUAL
9664: AND
9665: IFFALSE 9679
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9667: LD_INT 1
9669: PPUSH
9670: LD_STRING 14_KappaStatus_1
9672: PPUSH
9673: CALL_OW 39
9677: GO 9689
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9679: LD_INT 0
9681: PPUSH
9682: LD_STRING 14_KappaStatus_1
9684: PPUSH
9685: CALL_OW 39
// case JMMGirl of 1 :
9689: LD_EXP 7
9693: PUSH
9694: LD_INT 1
9696: DOUBLE
9697: EQUAL
9698: IFTRUE 9702
9700: GO 9858
9702: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9703: LD_EXP 2
9707: PPUSH
9708: CALL_OW 302
9712: PUSH
9713: LD_EXP 2
9717: PPUSH
9718: CALL_OW 255
9722: PUSH
9723: LD_INT 1
9725: EQUAL
9726: AND
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_INT 3
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 21
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PPUSH
9752: CALL_OW 69
9756: PUSH
9757: LD_INT 0
9759: EQUAL
9760: PUSH
9761: LD_EXP 1
9765: PPUSH
9766: CALL_OW 310
9770: PPUSH
9771: LD_EXP 2
9775: PPUSH
9776: CALL_OW 310
9780: PPUSH
9781: CALL_OW 296
9785: PUSH
9786: LD_INT 10
9788: LESS
9789: OR
9790: AND
9791: IFFALSE 9835
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9793: LD_INT 1
9795: PPUSH
9796: LD_STRING 14_JMMGirlStatus_1
9798: PPUSH
9799: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9803: LD_EXP 2
9807: PPUSH
9808: LD_STRING 14_Joan
9810: PPUSH
9811: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9815: LD_STRING protect
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 101
// m1 := true ;
9825: LD_ADDR_VAR 0 3
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// end else
9833: GO 9856
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9835: LD_INT 0
9837: PPUSH
9838: LD_STRING 14_JMMGirlStatus_1
9840: PPUSH
9841: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9845: LD_STRING protect
9847: PPUSH
9848: LD_INT 1
9850: NEG
9851: PPUSH
9852: CALL_OW 101
// end ; end ; 2 :
9856: GO 10187
9858: LD_INT 2
9860: DOUBLE
9861: EQUAL
9862: IFTRUE 9866
9864: GO 10022
9866: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9867: LD_EXP 3
9871: PPUSH
9872: CALL_OW 302
9876: PUSH
9877: LD_EXP 3
9881: PPUSH
9882: CALL_OW 255
9886: PUSH
9887: LD_INT 1
9889: EQUAL
9890: AND
9891: PUSH
9892: LD_INT 22
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 21
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 69
9920: PUSH
9921: LD_INT 0
9923: EQUAL
9924: PUSH
9925: LD_EXP 1
9929: PPUSH
9930: CALL_OW 310
9934: PPUSH
9935: LD_EXP 3
9939: PPUSH
9940: CALL_OW 310
9944: PPUSH
9945: CALL_OW 296
9949: PUSH
9950: LD_INT 10
9952: LESS
9953: OR
9954: AND
9955: IFFALSE 9999
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9957: LD_INT 1
9959: PPUSH
9960: LD_STRING 14_JMMGirlStatus_1
9962: PPUSH
9963: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9967: LD_EXP 3
9971: PPUSH
9972: LD_STRING 14_Lisa
9974: PPUSH
9975: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9979: LD_STRING protect
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 101
// m1 := true ;
9989: LD_ADDR_VAR 0 3
9993: PUSH
9994: LD_INT 1
9996: ST_TO_ADDR
// end else
9997: GO 10020
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9999: LD_INT 0
10001: PPUSH
10002: LD_STRING 14_JMMGirlStatus_1
10004: PPUSH
10005: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10009: LD_STRING protect
10011: PPUSH
10012: LD_INT 2
10014: NEG
10015: PPUSH
10016: CALL_OW 101
// end ; end ; 3 :
10020: GO 10187
10022: LD_INT 3
10024: DOUBLE
10025: EQUAL
10026: IFTRUE 10030
10028: GO 10186
10030: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10031: LD_EXP 4
10035: PPUSH
10036: CALL_OW 302
10040: PUSH
10041: LD_EXP 4
10045: PPUSH
10046: CALL_OW 255
10050: PUSH
10051: LD_INT 1
10053: EQUAL
10054: AND
10055: PUSH
10056: LD_INT 22
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 21
10068: PUSH
10069: LD_INT 1
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: PUSH
10085: LD_INT 0
10087: EQUAL
10088: PUSH
10089: LD_EXP 1
10093: PPUSH
10094: CALL_OW 310
10098: PPUSH
10099: LD_EXP 4
10103: PPUSH
10104: CALL_OW 310
10108: PPUSH
10109: CALL_OW 296
10113: PUSH
10114: LD_INT 10
10116: LESS
10117: OR
10118: AND
10119: IFFALSE 10163
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10121: LD_INT 1
10123: PPUSH
10124: LD_STRING 14_JMMGirlStatus_1
10126: PPUSH
10127: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10131: LD_EXP 4
10135: PPUSH
10136: LD_STRING 14_Connie
10138: PPUSH
10139: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10143: LD_STRING protect
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 101
// m1 := true ;
10153: LD_ADDR_VAR 0 3
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// end else
10161: GO 10184
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10163: LD_INT 0
10165: PPUSH
10166: LD_STRING 14_JMMGirlStatus_1
10168: PPUSH
10169: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10173: LD_STRING protect
10175: PPUSH
10176: LD_INT 3
10178: NEG
10179: PPUSH
10180: CALL_OW 101
// end ; end ; end ;
10184: GO 10187
10186: POP
// if amLaserCounter >= 2 then
10187: LD_EXP 9
10191: PUSH
10192: LD_INT 2
10194: GREATEREQUAL
10195: IFFALSE 10217
// begin AddMedal ( double , 1 ) ;
10197: LD_STRING double
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 101
// m2 := true ;
10207: LD_ADDR_VAR 0 4
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// end else
10215: GO 10251
// begin if amLaserCounter = 1 then
10217: LD_EXP 9
10221: PUSH
10222: LD_INT 1
10224: EQUAL
10225: IFFALSE 10240
// AddMedal ( double , - 2 ) else
10227: LD_STRING double
10229: PPUSH
10230: LD_INT 2
10232: NEG
10233: PPUSH
10234: CALL_OW 101
10238: GO 10251
// AddMedal ( double , - 1 ) ;
10240: LD_STRING double
10242: PPUSH
10243: LD_INT 1
10245: NEG
10246: PPUSH
10247: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10251: LD_INT 22
10253: PUSH
10254: LD_INT 3
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 1
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: PUSH
10280: LD_INT 0
10282: EQUAL
10283: IFFALSE 10305
// begin AddMedal ( base , 1 ) ;
10285: LD_STRING base
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 101
// m3 := true ;
10295: LD_ADDR_VAR 0 5
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// end else
10303: GO 10316
// AddMedal ( base , - 1 ) ;
10305: LD_STRING base
10307: PPUSH
10308: LD_INT 1
10310: NEG
10311: PPUSH
10312: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10316: LD_VAR 0 3
10320: PUSH
10321: LD_VAR 0 4
10325: AND
10326: PUSH
10327: LD_VAR 0 5
10331: AND
10332: PUSH
10333: LD_OWVAR 67
10337: PUSH
10338: LD_INT 3
10340: EQUAL
10341: AND
10342: IFFALSE 10354
// SetAchievementEX ( ACH_AMER , 14 ) ;
10344: LD_STRING ACH_AMER
10346: PPUSH
10347: LD_INT 14
10349: PPUSH
10350: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10354: LD_STRING Eliminate
10356: PPUSH
10357: CALL_OW 102
// YouWin ;
10361: CALL_OW 103
// end ; end_of_file
10365: LD_VAR 0 1
10369: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10370: LD_EXP 1
10374: PPUSH
10375: CALL_OW 301
10379: IFFALSE 10391
10381: GO 10383
10383: DISABLE
// YouLost ( JMM ) ; end_of_file
10384: LD_STRING JMM
10386: PPUSH
10387: CALL_OW 104
10391: END
// every 1 1$0 do
10392: GO 10394
10394: DISABLE
// begin enable ;
10395: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10396: LD_INT 3
10398: PPUSH
10399: LD_INT 5
10401: PPUSH
10402: CALL_OW 12
10406: PPUSH
10407: LD_INT 13
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 55
// end ; end_of_file
10417: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10418: GO 10420
10420: DISABLE
// begin ru_radar := 98 ;
10421: LD_ADDR_EXP 17
10425: PUSH
10426: LD_INT 98
10428: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10429: LD_ADDR_EXP 18
10433: PUSH
10434: LD_INT 89
10436: ST_TO_ADDR
// us_hack := 99 ;
10437: LD_ADDR_EXP 19
10441: PUSH
10442: LD_INT 99
10444: ST_TO_ADDR
// us_artillery := 97 ;
10445: LD_ADDR_EXP 20
10449: PUSH
10450: LD_INT 97
10452: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10453: LD_ADDR_EXP 21
10457: PUSH
10458: LD_INT 91
10460: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
10461: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
10466: PPUSH
10467: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 264
10477: PUSH
10478: LD_EXP 21
10482: EQUAL
10483: IFFALSE 10555
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10485: LD_INT 68
10487: PPUSH
10488: LD_VAR 0 1
10492: PPUSH
10493: CALL_OW 255
10497: PPUSH
10498: CALL_OW 321
10502: PUSH
10503: LD_INT 2
10505: EQUAL
10506: IFFALSE 10518
// eff := 70 else
10508: LD_ADDR_VAR 0 6
10512: PUSH
10513: LD_INT 70
10515: ST_TO_ADDR
10516: GO 10526
// eff := 30 ;
10518: LD_ADDR_VAR 0 6
10522: PUSH
10523: LD_INT 30
10525: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10526: LD_VAR 0 1
10530: PPUSH
10531: CALL_OW 250
10535: PPUSH
10536: LD_VAR 0 1
10540: PPUSH
10541: CALL_OW 251
10545: PPUSH
10546: LD_VAR 0 6
10550: PPUSH
10551: CALL_OW 495
// end ; end ;
10555: LD_VAR 0 4
10559: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
10560: LD_INT 0
10562: PPUSH
10563: PPUSH
10564: PPUSH
10565: PPUSH
10566: PPUSH
10567: PPUSH
// if cmd = 124 then
10568: LD_VAR 0 1
10572: PUSH
10573: LD_INT 124
10575: EQUAL
10576: IFFALSE 10782
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
10578: LD_ADDR_VAR 0 5
10582: PUSH
10583: LD_INT 2
10585: PUSH
10586: LD_INT 34
10588: PUSH
10589: LD_INT 53
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 34
10598: PUSH
10599: LD_INT 14
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: ST_TO_ADDR
// if not tmp then
10616: LD_VAR 0 5
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10782
// for i in tmp do
10625: LD_ADDR_VAR 0 3
10629: PUSH
10630: LD_VAR 0 5
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10780
// begin taskList := GetTaskList ( i ) ;
10638: LD_ADDR_VAR 0 6
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 437
10652: ST_TO_ADDR
// if not taskList then
10653: LD_VAR 0 6
10657: NOT
10658: IFFALSE 10662
// continue ;
10660: GO 10635
// for j = 1 to taskList do
10662: LD_ADDR_VAR 0 4
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 6
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10776
// if taskList [ j ] [ 1 ] = | then
10680: LD_VAR 0 6
10684: PUSH
10685: LD_VAR 0 4
10689: ARRAY
10690: PUSH
10691: LD_INT 1
10693: ARRAY
10694: PUSH
10695: LD_STRING |
10697: EQUAL
10698: IFFALSE 10774
// begin _taskList := Delete ( taskList , 1 ) ;
10700: LD_ADDR_VAR 0 7
10704: PUSH
10705: LD_VAR 0 6
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 3
10717: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_VAR 0 7
10727: PPUSH
10728: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_VAR 0 6
10741: PUSH
10742: LD_VAR 0 4
10746: ARRAY
10747: PUSH
10748: LD_INT 2
10750: ARRAY
10751: PPUSH
10752: LD_VAR 0 6
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PUSH
10763: LD_INT 3
10765: ARRAY
10766: PPUSH
10767: LD_INT 8
10769: PPUSH
10770: CALL 10787 0 4
// end ;
10774: GO 10677
10776: POP
10777: POP
// end ;
10778: GO 10635
10780: POP
10781: POP
// end ; end ;
10782: LD_VAR 0 2
10786: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10787: LD_INT 0
10789: PPUSH
10790: PPUSH
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10798: LD_VAR 0 1
10802: NOT
10803: PUSH
10804: LD_VAR 0 2
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: CALL_OW 488
10818: NOT
10819: OR
10820: PUSH
10821: LD_VAR 0 4
10825: NOT
10826: OR
10827: IFFALSE 10831
// exit ;
10829: GO 11171
// list := [ ] ;
10831: LD_ADDR_VAR 0 13
10835: PUSH
10836: EMPTY
10837: ST_TO_ADDR
// if x - r < 0 then
10838: LD_VAR 0 2
10842: PUSH
10843: LD_VAR 0 4
10847: MINUS
10848: PUSH
10849: LD_INT 0
10851: LESS
10852: IFFALSE 10864
// min_x := 0 else
10854: LD_ADDR_VAR 0 7
10858: PUSH
10859: LD_INT 0
10861: ST_TO_ADDR
10862: GO 10880
// min_x := x - r ;
10864: LD_ADDR_VAR 0 7
10868: PUSH
10869: LD_VAR 0 2
10873: PUSH
10874: LD_VAR 0 4
10878: MINUS
10879: ST_TO_ADDR
// if y - r < 0 then
10880: LD_VAR 0 3
10884: PUSH
10885: LD_VAR 0 4
10889: MINUS
10890: PUSH
10891: LD_INT 0
10893: LESS
10894: IFFALSE 10906
// min_y := 0 else
10896: LD_ADDR_VAR 0 8
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
10904: GO 10922
// min_y := y - r ;
10906: LD_ADDR_VAR 0 8
10910: PUSH
10911: LD_VAR 0 3
10915: PUSH
10916: LD_VAR 0 4
10920: MINUS
10921: ST_TO_ADDR
// max_x := x + r ;
10922: LD_ADDR_VAR 0 9
10926: PUSH
10927: LD_VAR 0 2
10931: PUSH
10932: LD_VAR 0 4
10936: PLUS
10937: ST_TO_ADDR
// max_y := y + r ;
10938: LD_ADDR_VAR 0 10
10942: PUSH
10943: LD_VAR 0 3
10947: PUSH
10948: LD_VAR 0 4
10952: PLUS
10953: ST_TO_ADDR
// for _x = min_x to max_x do
10954: LD_ADDR_VAR 0 11
10958: PUSH
10959: DOUBLE
10960: LD_VAR 0 7
10964: DEC
10965: ST_TO_ADDR
10966: LD_VAR 0 9
10970: PUSH
10971: FOR_TO
10972: IFFALSE 11089
// for _y = min_y to max_y do
10974: LD_ADDR_VAR 0 12
10978: PUSH
10979: DOUBLE
10980: LD_VAR 0 8
10984: DEC
10985: ST_TO_ADDR
10986: LD_VAR 0 10
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11085
// begin if not ValidHex ( _x , _y ) then
10994: LD_VAR 0 11
10998: PPUSH
10999: LD_VAR 0 12
11003: PPUSH
11004: CALL_OW 488
11008: NOT
11009: IFFALSE 11013
// continue ;
11011: GO 10991
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11013: LD_VAR 0 11
11017: PPUSH
11018: LD_VAR 0 12
11022: PPUSH
11023: CALL_OW 351
11027: PUSH
11028: LD_VAR 0 11
11032: PPUSH
11033: LD_VAR 0 12
11037: PPUSH
11038: CALL_OW 554
11042: AND
11043: IFFALSE 11083
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11045: LD_ADDR_VAR 0 13
11049: PUSH
11050: LD_VAR 0 13
11054: PPUSH
11055: LD_VAR 0 13
11059: PUSH
11060: LD_INT 1
11062: PLUS
11063: PPUSH
11064: LD_VAR 0 11
11068: PUSH
11069: LD_VAR 0 12
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 2
11082: ST_TO_ADDR
// end ;
11083: GO 10991
11085: POP
11086: POP
11087: GO 10971
11089: POP
11090: POP
// if not list then
11091: LD_VAR 0 13
11095: NOT
11096: IFFALSE 11100
// exit ;
11098: GO 11171
// for i in list do
11100: LD_ADDR_VAR 0 6
11104: PUSH
11105: LD_VAR 0 13
11109: PUSH
11110: FOR_IN
11111: IFFALSE 11169
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11113: LD_VAR 0 1
11117: PPUSH
11118: LD_STRING M
11120: PUSH
11121: LD_VAR 0 6
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PUSH
11130: LD_VAR 0 6
11134: PUSH
11135: LD_INT 2
11137: ARRAY
11138: PUSH
11139: LD_INT 0
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: LD_INT 0
11147: PUSH
11148: LD_INT 0
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: PPUSH
11163: CALL_OW 447
11167: GO 11110
11169: POP
11170: POP
// end ;
11171: LD_VAR 0 5
11175: RET
