// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10620 0 0
// PrepareAmerican ;
  19: CALL 253 0 0
// PrepareRussian ;
  23: CALL 1537 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6273 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := LoadVariable ( 12_SciDed_1 , false ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 12_SciDed_1
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// end ;
 112: LD_VAR 0 1
 116: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 117: LD_INT 22
 119: PUSH
 120: LD_INT 1
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 33
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 69
 145: PUSH
 146: LD_INT 15
 148: GREATEREQUAL
 149: IFFALSE 161
 151: GO 153
 153: DISABLE
// SetAchievement ( ACH_FORT ) ;
 154: LD_STRING ACH_FORT
 156: PPUSH
 157: CALL_OW 543
 161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 162: LD_INT 22
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 25
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PPUSH
 186: CALL_OW 69
 190: PUSH
 191: LD_INT 0
 193: EQUAL
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// SetAchievement ( ACH_APE ) ;
 199: LD_STRING ACH_APE
 201: PPUSH
 202: CALL_OW 543
 206: END
// every 0 0$1 trigger killCounter >= 20 do
 207: LD_EXP 5
 211: PUSH
 212: LD_INT 20
 214: GREATEREQUAL
 215: IFFALSE 227
 217: GO 219
 219: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 220: LD_STRING ACH_DOUBLE
 222: PPUSH
 223: CALL_OW 543
 227: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 228: LD_EXP 9
 232: PPUSH
 233: LD_INT 15
 235: PPUSH
 236: CALL_OW 308
 240: IFFALSE 252
 242: GO 244
 244: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 245: LD_STRING ACH_AMASHA
 247: PPUSH
 248: CALL_OW 543
 252: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
// uc_side := 1 ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// uc_nation := 1 ;
 268: LD_ADDR_OWVAR 21
 272: PUSH
 273: LD_INT 1
 275: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 276: LD_INT 48
 278: PPUSH
 279: LD_STRING deltakappa
 281: PPUSH
 282: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 286: LD_INT 48
 288: PPUSH
 289: CALL_OW 274
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 2000
 299: PUSH
 300: LD_INT 1600
 302: PUSH
 303: LD_INT 1200
 305: PUSH
 306: LD_INT 900
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: LD_OWVAR 67
 319: ARRAY
 320: PPUSH
 321: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 325: LD_INT 48
 327: PPUSH
 328: CALL_OW 274
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 20
 338: PPUSH
 339: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 343: LD_INT 48
 345: PPUSH
 346: CALL_OW 274
 350: PPUSH
 351: LD_INT 3
 353: PPUSH
 354: LD_INT 100
 356: PPUSH
 357: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 361: LD_ADDR_EXP 8
 365: PUSH
 366: LD_STRING JMM
 368: PPUSH
 369: LD_EXP 1
 373: NOT
 374: PPUSH
 375: LD_STRING 13f_
 377: PPUSH
 378: CALL 31278 0 3
 382: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 383: LD_EXP 8
 387: PPUSH
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 395: LD_INT 5
 397: PUSH
 398: LD_INT 5
 400: PUSH
 401: LD_INT 3
 403: PUSH
 404: LD_INT 3
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_OWVAR 67
 417: ARRAY
 418: PPUSH
 419: LD_INT 3
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: LD_INT 9
 427: PUSH
 428: LD_INT 9
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: PPUSH
 449: LD_INT 100
 451: PPUSH
 452: CALL 36293 0 5
// JMMVeh := CreateVehicle ;
 456: LD_ADDR_EXP 9
 460: PUSH
 461: CALL_OW 45
 465: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 466: LD_EXP 9
 470: PPUSH
 471: LD_INT 1
 473: PPUSH
 474: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 5 , 5 , false ) ;
 478: LD_EXP 9
 482: PPUSH
 483: LD_INT 5
 485: PPUSH
 486: LD_INT 5
 488: PPUSH
 489: LD_INT 0
 491: PPUSH
 492: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 496: LD_EXP 8
 500: PPUSH
 501: LD_EXP 9
 505: PPUSH
 506: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 510: LD_EXP 9
 514: PPUSH
 515: LD_INT 1
 517: NEG
 518: PPUSH
 519: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 523: LD_EXP 9
 527: PPUSH
 528: LD_INT 21
 530: PPUSH
 531: LD_INT 8
 533: PPUSH
 534: CALL_OW 111
// uc_side := 4 ;
 538: LD_ADDR_OWVAR 20
 542: PUSH
 543: LD_INT 4
 545: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 546: LD_ADDR_EXP 13
 550: PUSH
 551: LD_STRING Powell
 553: PPUSH
 554: LD_INT 0
 556: PPUSH
 557: LD_STRING 
 559: PPUSH
 560: CALL 31278 0 3
 564: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING Joan
 572: PPUSH
 573: LD_EXP 1
 577: NOT
 578: PPUSH
 579: LD_STRING 10c_
 581: PPUSH
 582: CALL 31278 0 3
 586: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 587: LD_ADDR_EXP 11
 591: PUSH
 592: LD_STRING Lisa
 594: PPUSH
 595: LD_EXP 1
 599: NOT
 600: PPUSH
 601: LD_STRING 13s_
 603: PPUSH
 604: CALL 31278 0 3
 608: ST_TO_ADDR
// if Joan then
 609: LD_EXP 10
 613: IFFALSE 652
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 615: LD_EXP 10
 619: PPUSH
 620: LD_INT 4
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 630: LD_EXP 10
 634: PPUSH
 635: LD_INT 4
 637: PPUSH
 638: CALL_OW 336
// JMMGirl = 1 ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 1
 649: ST_TO_ADDR
// end else
 650: GO 743
// if Lisa then
 652: LD_EXP 11
 656: IFFALSE 695
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 658: LD_EXP 11
 662: PPUSH
 663: LD_INT 4
 665: PPUSH
 666: LD_INT 0
 668: PPUSH
 669: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 673: LD_EXP 11
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL_OW 336
// JMMGirl := 2 ;
 685: LD_ADDR_EXP 2
 689: PUSH
 690: LD_INT 2
 692: ST_TO_ADDR
// end else
 693: GO 743
// begin Connie := NewCharacter ( Coonie ) ;
 695: LD_ADDR_EXP 12
 699: PUSH
 700: LD_STRING Coonie
 702: PPUSH
 703: CALL_OW 25
 707: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 708: LD_EXP 12
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 723: LD_EXP 12
 727: PPUSH
 728: LD_INT 3
 730: PPUSH
 731: CALL_OW 336
// JMMGirl := 3 ;
 735: LD_ADDR_EXP 2
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: DOUBLE
 749: LD_INT 1
 751: DEC
 752: ST_TO_ADDR
 753: LD_INT 4
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 3
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_OWVAR 67
 775: ARRAY
 776: PUSH
 777: FOR_TO
 778: IFFALSE 932
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 780: LD_INT 4
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: PUSH
 798: LD_VAR 0 2
 802: PUSH
 803: LD_INT 4
 805: MOD
 806: PUSH
 807: LD_INT 1
 809: PLUS
 810: ARRAY
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 7
 823: PUSH
 824: LD_INT 4
 826: PUSH
 827: LD_INT 5
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: PUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 4
 843: MOD
 844: PUSH
 845: LD_INT 1
 847: PLUS
 848: ARRAY
 849: PPUSH
 850: LD_INT 33
 852: PPUSH
 853: LD_INT 55
 855: PPUSH
 856: CALL_OW 12
 860: PPUSH
 861: CALL 36293 0 5
// veh := CreateVehicle ;
 865: LD_ADDR_VAR 0 4
 869: PUSH
 870: CALL_OW 45
 874: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 875: LD_VAR 0 4
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: LD_INT 5
 885: PPUSH
 886: CALL_OW 12
 890: PPUSH
 891: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 895: LD_VAR 0 4
 899: PPUSH
 900: LD_INT 500
 902: PPUSH
 903: LD_INT 950
 905: PPUSH
 906: CALL_OW 12
 910: PPUSH
 911: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 915: LD_VAR 0 4
 919: PPUSH
 920: LD_INT 5
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL_OW 49
// end ;
 930: GO 777
 932: POP
 933: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 934: LD_ADDR_VAR 0 2
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_INT 3
 946: PUSH
 947: LD_INT 3
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: LD_INT 2
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_OWVAR 67
 966: ARRAY
 967: PUSH
 968: FOR_TO
 969: IFFALSE 1091
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 971: LD_INT 3
 973: PUSH
 974: LD_INT 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: MOD
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 3
1000: PPUSH
1001: LD_INT 9
1003: PUSH
1004: LD_INT 5
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_VAR 0 2
1015: PUSH
1016: LD_INT 2
1018: MOD
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: ARRAY
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL 36293 0 5
// veh := CreateVehicle ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: CALL_OW 45
1041: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1042: LD_VAR 0 4
1046: PPUSH
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 5
1052: PPUSH
1053: CALL_OW 12
1057: PPUSH
1058: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1062: LD_VAR 0 4
1066: PPUSH
1067: LD_INT 1000
1069: PPUSH
1070: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1074: LD_VAR 0 4
1078: PPUSH
1079: LD_INT 17
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: CALL_OW 49
// end ;
1089: GO 968
1091: POP
1092: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1093: LD_ADDR_VAR 0 2
1097: PUSH
1098: DOUBLE
1099: LD_INT 1
1101: DEC
1102: ST_TO_ADDR
1103: LD_INT 3
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1176
// begin PrepareApeman ( 1 ) ;
1130: LD_INT 1
1132: PPUSH
1133: CALL 65026 0 1
// uc_side := 4 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 4
1144: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1145: LD_ADDR_OWVAR 28
1149: PUSH
1150: LD_INT 16
1152: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1153: CALL_OW 44
1157: PPUSH
1158: LD_INT 84
1160: PPUSH
1161: LD_INT 127
1163: PPUSH
1164: LD_INT 5
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 50
// end ;
1174: GO 1127
1176: POP
1177: POP
// uc_side := 4 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 4
1185: ST_TO_ADDR
// uc_nation := 1 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1194: LD_INT 2
1196: PPUSH
1197: LD_INT 3
1199: PPUSH
1200: LD_INT 1
1202: PPUSH
1203: LD_INT 12
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL 36293 0 5
// veh := CreateVehicle ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: CALL_OW 45
1222: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1223: LD_VAR 0 4
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 100
1233: PPUSH
1234: CALL_OW 290
// SetLives ( veh , 450 ) ;
1238: LD_VAR 0 4
1242: PPUSH
1243: LD_INT 450
1245: PPUSH
1246: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1250: LD_VAR 0 4
1254: PPUSH
1255: LD_INT 122
1257: PPUSH
1258: LD_INT 118
1260: PPUSH
1261: LD_INT 4
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 70886 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 2
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1284: CALL_OW 44
1288: PPUSH
1289: LD_INT 124
1291: PPUSH
1292: LD_INT 120
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1302: LD_ADDR_VAR 0 5
1306: PUSH
1307: LD_INT 18
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 517
1317: ST_TO_ADDR
// for i := 1 to 4 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 4
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1440
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1334: LD_INT 1
1336: PPUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 2
1352: PPUSH
1353: CALL_OW 12
1357: ARRAY
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// un := CreateHuman ;
1366: LD_ADDR_VAR 0 3
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1376: LD_VAR 0 3
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: LD_INT 5
1386: PPUSH
1387: CALL_OW 12
1391: PPUSH
1392: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1396: LD_VAR 0 3
1400: PPUSH
1401: LD_VAR 0 5
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_VAR 0 2
1414: ARRAY
1415: PPUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PUSH
1425: LD_VAR 0 2
1429: ARRAY
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL_OW 601
// end ;
1438: GO 1331
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function ChangeSideKappaBase ; begin
1447: LD_INT 0
1449: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1450: LD_INT 70
1452: PPUSH
1453: LD_INT 138
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: LD_INT 80
1461: NEG
1462: PPUSH
1463: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1467: LD_INT 70
1469: PPUSH
1470: LD_INT 138
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1480: LD_INT 147
1482: PPUSH
1483: LD_INT 122
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_INT 40
1491: NEG
1492: PPUSH
1493: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1497: LD_INT 147
1499: PPUSH
1500: LD_INT 122
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1510: LD_INT 22
1512: PUSH
1513: LD_INT 4
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 235
// end ; end_of_file
1532: LD_VAR 0 1
1536: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
1544: PPUSH
// uc_side := 3 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// uc_nation := 3 ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1561: LD_ADDR_EXP 15
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 11
1571: PUSH
1572: LD_INT 14
1574: PUSH
1575: LD_INT 17
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_OWVAR 67
1588: ARRAY
1589: ST_TO_ADDR
// ruMobile := [ ] ;
1590: LD_ADDR_EXP 16
1594: PUSH
1595: EMPTY
1596: ST_TO_ADDR
// ruBuildList := [ ] ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: EMPTY
1603: ST_TO_ADDR
// ruAttackers := [ ] ;
1604: LD_ADDR_EXP 18
1608: PUSH
1609: EMPTY
1610: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1611: LD_ADDR_EXP 19
1615: PUSH
1616: LD_INT 3
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL 31341 0 3
1629: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1630: LD_ADDR_VAR 0 6
1634: PUSH
1635: LD_INT 43
1637: PUSH
1638: LD_INT 46
1640: PUSH
1641: LD_INT 45
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1649: LD_ADDR_EXP 20
1653: PUSH
1654: LD_INT 46
1656: PUSH
1657: LD_INT 70
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 121
1666: PUSH
1667: LD_INT 95
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 68
1676: PUSH
1677: LD_INT 65
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// if not russianRocketsDisabled then
1689: LD_EXP 6
1693: NOT
1694: IFFALSE 1710
// weapons := weapons ^ ru_rocket ;
1696: LD_ADDR_VAR 0 6
1700: PUSH
1701: LD_VAR 0 6
1705: PUSH
1706: LD_INT 47
1708: ADD
1709: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1710: LD_ADDR_EXP 14
1714: PUSH
1715: LD_STRING Eisenstein
1717: PPUSH
1718: CALL_OW 25
1722: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1723: LD_EXP 14
1727: PPUSH
1728: LD_INT 22
1730: PPUSH
1731: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1735: LD_INT 22
1737: PPUSH
1738: CALL_OW 274
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1250
1748: PUSH
1749: LD_INT 2500
1751: PUSH
1752: LD_INT 3500
1754: PUSH
1755: LD_INT 5000
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_OWVAR 67
1768: ARRAY
1769: PPUSH
1770: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1774: LD_INT 22
1776: PPUSH
1777: CALL_OW 274
1781: PPUSH
1782: LD_INT 2
1784: PPUSH
1785: LD_INT 600
1787: PPUSH
1788: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1792: LD_INT 22
1794: PPUSH
1795: CALL_OW 274
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: LD_INT 100
1805: PPUSH
1806: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1810: LD_INT 116
1812: PPUSH
1813: LD_INT 46
1815: PPUSH
1816: LD_INT 70
1818: PPUSH
1819: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1823: LD_ADDR_VAR 0 2
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_INT 3
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 21
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PPUSH
1852: CALL_OW 69
1856: PUSH
1857: FOR_IN
1858: IFFALSE 1880
// SetBLevel ( i , 6 + Difficulty ) ;
1860: LD_VAR 0 2
1864: PPUSH
1865: LD_INT 6
1867: PUSH
1868: LD_OWVAR 67
1872: PLUS
1873: PPUSH
1874: CALL_OW 241
1878: GO 1857
1880: POP
1881: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1882: LD_ADDR_VAR 0 4
1886: PUSH
1887: LD_INT 22
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: LD_INT 30
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 30
1912: PUSH
1913: LD_INT 33
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: ST_TO_ADDR
// if russianRocketsDisabled then
1934: LD_EXP 6
1938: IFFALSE 2014
// begin ruTechList := ruTechList diff tech_advrocket ;
1940: LD_ADDR_EXP 19
1944: PUSH
1945: LD_EXP 19
1949: PUSH
1950: LD_INT 71
1952: DIFF
1953: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_VAR 0 4
1963: PPUSH
1964: LD_INT 35
1966: PUSH
1967: LD_INT 47
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PPUSH
1974: CALL_OW 72
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2012
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_VAR 0 6
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 6
1999: PPUSH
2000: CALL_OW 12
2004: ARRAY
2005: PPUSH
2006: CALL_OW 431
2010: GO 1979
2012: POP
2013: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 30
2031: PUSH
2032: LD_INT 32
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PUSH
2048: FOR_IN
2049: IFFALSE 2098
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 5
2056: PUSH
2057: LD_INT 6
2059: PUSH
2060: LD_INT 7
2062: PUSH
2063: LD_INT 8
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_OWVAR 67
2076: ARRAY
2077: PPUSH
2078: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2082: CALL_OW 44
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 52
// end ;
2096: GO 2048
2098: POP
2099: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 3
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 30
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 69
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2269
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2137: LD_ADDR_VAR 0 3
2141: PUSH
2142: DOUBLE
2143: LD_INT 1
2145: DEC
2146: ST_TO_ADDR
2147: LD_INT 2
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: PUSH
2165: LD_OWVAR 67
2169: ARRAY
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2265
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 5
2179: PUSH
2180: LD_INT 6
2182: PUSH
2183: LD_INT 7
2185: PUSH
2186: LD_INT 8
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_OWVAR 67
2199: ARRAY
2200: PPUSH
2201: CALL_OW 381
// un := CreateHuman ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: CALL_OW 44
2214: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2215: LD_VAR 0 5
2219: PPUSH
2220: LD_VAR 0 2
2224: PPUSH
2225: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2229: LD_VAR 0 5
2233: PPUSH
2234: LD_INT 9
2236: PPUSH
2237: CALL_OW 336
// if j = 2 then
2241: LD_VAR 0 3
2245: PUSH
2246: LD_INT 2
2248: EQUAL
2249: IFFALSE 2263
// SetUnitAttackType ( un , 3 ) ;
2251: LD_VAR 0 5
2255: PPUSH
2256: LD_INT 3
2258: PPUSH
2259: CALL_OW 603
// end ;
2263: GO 2171
2265: POP
2266: POP
// end ;
2267: GO 2134
2269: POP
2270: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 5
2283: PUSH
2284: LD_INT 6
2286: PUSH
2287: LD_INT 6
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PUSH
2299: LD_OWVAR 67
2303: ARRAY
2304: PUSH
2305: FOR_TO
2306: IFFALSE 2353
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 6
2313: PUSH
2314: LD_INT 7
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_OWVAR 67
2333: ARRAY
2334: PPUSH
2335: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2339: CALL_OW 44
2343: PPUSH
2344: LD_INT 22
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2305
2353: POP
2354: POP
// for i := 1 to 2 do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_INT 2
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2449
// for j := 1 to 6 do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 6
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2445
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2387: LD_INT 0
2389: PPUSH
2390: LD_INT 6
2392: PUSH
2393: LD_INT 7
2395: PUSH
2396: LD_INT 9
2398: PUSH
2399: LD_INT 10
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: PUSH
2408: LD_OWVAR 67
2412: ARRAY
2413: PPUSH
2414: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2418: CALL_OW 44
2422: PPUSH
2423: LD_INT 1
2425: PUSH
2426: LD_INT 40
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_VAR 0 2
2437: ARRAY
2438: PPUSH
2439: CALL_OW 52
// end ;
2443: GO 2384
2445: POP
2446: POP
2447: GO 2368
2449: POP
2450: POP
// for i := 1 to 6 do
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: DOUBLE
2457: LD_INT 1
2459: DEC
2460: ST_TO_ADDR
2461: LD_INT 6
2463: PUSH
2464: FOR_TO
2465: IFFALSE 2512
// begin PrepareScientist ( false , 6 ) ;
2467: LD_INT 0
2469: PPUSH
2470: LD_INT 6
2472: PPUSH
2473: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2477: CALL_OW 44
2481: PPUSH
2482: LD_INT 14
2484: PUSH
2485: LD_INT 15
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_VAR 0 2
2496: PUSH
2497: LD_INT 2
2499: MOD
2500: PUSH
2501: LD_INT 1
2503: PLUS
2504: ARRAY
2505: PPUSH
2506: CALL_OW 52
// end ;
2510: GO 2464
2512: POP
2513: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2514: LD_INT 22
2516: PPUSH
2517: LD_INT 3
2519: PPUSH
2520: LD_INT 3
2522: PPUSH
2523: LD_INT 51
2525: PPUSH
2526: LD_INT 100
2528: PPUSH
2529: CALL 36293 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2533: CALL_OW 45
2537: PPUSH
2538: LD_INT 116
2540: PPUSH
2541: LD_INT 58
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 50
// for i := 1 to 2 do
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: DOUBLE
2560: LD_INT 1
2562: DEC
2563: ST_TO_ADDR
2564: LD_INT 2
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2612
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2570: LD_INT 22
2572: PPUSH
2573: LD_INT 3
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 52
2581: PPUSH
2582: LD_INT 100
2584: PPUSH
2585: CALL 36293 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 111
2596: PPUSH
2597: LD_INT 58
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// end ;
2610: GO 2567
2612: POP
2613: POP
// for i := 1 to 4 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 4
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2657
// begin PrepareApemanEngineer ( ) ;
2630: CALL 64947 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2634: CALL_OW 44
2638: PPUSH
2639: LD_INT 118
2641: PPUSH
2642: LD_INT 50
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 50
// end ;
2655: GO 2627
2657: POP
2658: POP
// end ;
2659: LD_VAR 0 1
2663: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2664: LD_EXP 19
2668: IFFALSE 2796
2670: GO 2672
2672: DISABLE
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
// begin enable ;
2678: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: LD_INT 14
2686: PUSH
2687: LD_INT 15
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 50
2696: PUSH
2697: EMPTY
2698: LIST
2699: PPUSH
2700: CALL_OW 72
2704: ST_TO_ADDR
// if not labs then
2705: LD_VAR 0 3
2709: NOT
2710: IFFALSE 2715
// begin disable ;
2712: DISABLE
// exit ;
2713: GO 2796
// end ; for i in labs do
2715: LD_ADDR_VAR 0 1
2719: PUSH
2720: LD_VAR 0 3
2724: PUSH
2725: FOR_IN
2726: IFFALSE 2794
// if BuildingStatus ( i ) = bs_idle then
2728: LD_VAR 0 1
2732: PPUSH
2733: CALL_OW 461
2737: PUSH
2738: LD_INT 2
2740: EQUAL
2741: IFFALSE 2792
// for t in ruTechList do
2743: LD_ADDR_VAR 0 2
2747: PUSH
2748: LD_EXP 19
2752: PUSH
2753: FOR_IN
2754: IFFALSE 2790
// if CanBeResearched ( i , t ) then
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_VAR 0 2
2765: PPUSH
2766: CALL_OW 430
2770: IFFALSE 2788
// begin ComResearch ( i , t ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_VAR 0 2
2781: PPUSH
2782: CALL_OW 124
// break ;
2786: GO 2790
// end ;
2788: GO 2753
2790: POP
2791: POP
2792: GO 2725
2794: POP
2795: POP
// end ;
2796: PPOPN 3
2798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2799: LD_INT 3
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 32
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: IFFALSE 2918
2836: GO 2838
2838: DISABLE
2839: LD_INT 0
2841: PPUSH
// begin enable ;
2842: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2843: LD_ADDR_VAR 0 1
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2916
// if GetFuel ( i ) < 3 then
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 261
2896: PUSH
2897: LD_INT 3
2899: LESS
2900: IFFALSE 2914
// SetFuel ( i , 3 ) ;
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_INT 3
2909: PPUSH
2910: CALL_OW 240
2914: GO 2884
2916: POP
2917: POP
// end ;
2918: PPOPN 1
2920: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) and ruAttackers < [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , chassis , weapon ;
2921: LD_INT 1
2923: PUSH
2924: LD_INT 40
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: LD_INT 50
2933: PUSH
2934: EMPTY
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: PUSH
2942: LD_EXP 18
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: LD_OWVAR 67
2969: ARRAY
2970: LESS
2971: AND
2972: IFFALSE 3308
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
2981: PPUSH
// begin enable ;
2982: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_INT 1
2990: PUSH
2991: LD_INT 40
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PPUSH
2998: LD_INT 50
3000: PUSH
3001: EMPTY
3002: LIST
3003: PPUSH
3004: CALL_OW 72
3008: PUSH
3009: FOR_IN
3010: IFFALSE 3306
// begin if BuildingStatus ( i ) <> bs_idle then
3012: LD_VAR 0 1
3016: PPUSH
3017: CALL_OW 461
3021: PUSH
3022: LD_INT 2
3024: NONEQUAL
3025: IFFALSE 3029
// continue ;
3027: GO 3009
// if i = ruFac1 then
3029: LD_VAR 0 1
3033: PUSH
3034: LD_INT 1
3036: EQUAL
3037: IFFALSE 3080
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: LD_INT 21
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 23
3052: PUSH
3053: LD_INT 23
3055: PUSH
3056: LD_INT 24
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 1
3068: PPUSH
3069: LD_INT 5
3071: PPUSH
3072: CALL_OW 12
3076: ARRAY
3077: ST_TO_ADDR
3078: GO 3107
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_INT 21
3087: PUSH
3088: LD_INT 23
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 12
3105: ARRAY
3106: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 49
3114: PUSH
3115: LD_INT 44
3117: PUSH
3118: LD_INT 43
3120: PUSH
3121: LD_INT 46
3123: PUSH
3124: LD_INT 45
3126: PUSH
3127: LD_INT 46
3129: PUSH
3130: LD_INT 45
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: ST_TO_ADDR
// if not russianRocketsDisabled then
3142: LD_EXP 6
3146: NOT
3147: IFFALSE 3167
// weapon := Join ( weapon , ru_rocket ) ;
3149: LD_ADDR_VAR 0 3
3153: PUSH
3154: LD_VAR 0 3
3158: PPUSH
3159: LD_INT 47
3161: PPUSH
3162: CALL 68746 0 2
3166: ST_TO_ADDR
// weapon := weapon [ Difficulty + rand ( 0 , 3 ) ] ;
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: LD_VAR 0 3
3176: PUSH
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 0
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: CALL_OW 12
3192: PLUS
3193: ARRAY
3194: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3195: LD_VAR 0 2
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 22
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: IN
3210: PUSH
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 46
3218: PUSH
3219: LD_INT 47
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: IN
3226: AND
3227: IFFALSE 3260
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3229: LD_ADDR_VAR 0 3
3233: PUSH
3234: LD_INT 44
3236: PUSH
3237: LD_INT 45
3239: PUSH
3240: LD_INT 49
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: CALL_OW 12
3258: ARRAY
3259: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3260: LD_VAR 0 1
3264: PPUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: CALL_OW 12
3290: ARRAY
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: LD_VAR 0 3
3299: PPUSH
3300: CALL_OW 185
// end ;
3304: GO 3009
3306: POP
3307: POP
// end ;
3308: PPOPN 3
3310: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3311: LD_INT 22
3313: PPUSH
3314: CALL_OW 302
3318: IFFALSE 4175
3320: GO 3322
3322: DISABLE
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
// begin enable ;
3333: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: LD_INT 12
3341: PPUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 24
3347: PUSH
3348: LD_INT 1000
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 70
3377: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 25
3395: PUSH
3396: LD_INT 2
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PPUSH
3407: CALL_OW 69
3411: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 22
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 34
3429: PUSH
3430: LD_INT 52
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3446: LD_ADDR_VAR 0 7
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3480: LD_ADDR_VAR 0 8
3484: PUSH
3485: LD_INT 14
3487: PUSH
3488: LD_INT 15
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3495: LD_VAR 0 7
3499: PUSH
3500: LD_VAR 0 4
3504: PPUSH
3505: LD_INT 120
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 72
3519: AND
3520: IFFALSE 3533
// ComExitAll ( sci ) else
3522: LD_VAR 0 7
3526: PPUSH
3527: CALL 69227 0 1
3531: GO 3615
// if sci then
3533: LD_VAR 0 7
3537: IFFALSE 3615
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3539: LD_VAR 0 7
3543: PPUSH
3544: LD_INT 3
3546: PUSH
3547: LD_INT 54
3549: PUSH
3550: EMPTY
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 72
3561: PUSH
3562: LD_VAR 0 8
3566: AND
3567: IFFALSE 3615
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: PPUSH
3592: LD_VAR 0 8
3596: PUSH
3597: LD_INT 1
3599: PPUSH
3600: LD_VAR 0 8
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: PPUSH
3611: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3615: LD_VAR 0 5
3619: PPUSH
3620: LD_INT 50
3622: PUSH
3623: EMPTY
3624: LIST
3625: PPUSH
3626: CALL_OW 72
3630: PUSH
3631: LD_VAR 0 3
3635: AND
3636: IFFALSE 3677
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 50
3645: PUSH
3646: EMPTY
3647: LIST
3648: PPUSH
3649: CALL_OW 72
3653: PPUSH
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 5
3663: PUSH
3664: LD_INT 1
3666: ARRAY
3667: PPUSH
3668: CALL_OW 74
3672: PPUSH
3673: CALL_OW 130
// if eng then
3677: LD_VAR 0 4
3681: IFFALSE 4175
// begin for i in eng do
3683: LD_ADDR_VAR 0 1
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: FOR_IN
3694: IFFALSE 4173
// begin tag := GetTag ( i ) ;
3696: LD_ADDR_VAR 0 6
3700: PUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 110
3710: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3711: LD_VAR 0 3
3715: NOT
3716: PUSH
3717: LD_EXP 17
3721: NOT
3722: AND
3723: PUSH
3724: LD_VAR 0 6
3728: PUSH
3729: LD_INT 1
3731: EQUAL
3732: AND
3733: IFFALSE 3759
// begin SetTag ( i , 0 ) ;
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_INT 0
3742: PPUSH
3743: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 22
3754: PPUSH
3755: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3759: LD_VAR 0 3
3763: PUSH
3764: LD_EXP 17
3768: OR
3769: PUSH
3770: LD_VAR 0 6
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: AND
3779: IFFALSE 3793
// SetTag ( i , 1 ) ;
3781: LD_VAR 0 1
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 310
3802: PUSH
3803: LD_VAR 0 6
3807: PUSH
3808: LD_INT 1
3810: EQUAL
3811: AND
3812: IFFALSE 3823
// ComExit ( i ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL 69144 0 1
// if GetLives ( i ) < 500 and tag = 1 then
3823: LD_VAR 0 1
3827: PPUSH
3828: CALL_OW 256
3832: PUSH
3833: LD_INT 500
3835: LESS
3836: PUSH
3837: LD_VAR 0 6
3841: PUSH
3842: LD_INT 1
3844: EQUAL
3845: AND
3846: IFFALSE 3860
// SetTag ( i , 2 ) ;
3848: LD_VAR 0 1
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3860: LD_VAR 0 1
3864: PPUSH
3865: CALL_OW 256
3869: PUSH
3870: LD_INT 1000
3872: EQUAL
3873: PUSH
3874: LD_VAR 0 6
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3897
// SetTag ( i , 1 ) ;
3885: LD_VAR 0 1
3889: PPUSH
3890: LD_INT 1
3892: PPUSH
3893: CALL_OW 109
// if tag = 2 then
3897: LD_VAR 0 6
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: IFFALSE 3952
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 110
3914: PPUSH
3915: LD_INT 41
3917: PPUSH
3918: CALL_OW 297
3922: PUSH
3923: LD_INT 6
3925: GREATER
3926: IFFALSE 3952
// begin ComMoveXY ( i , 110 , 41 ) ;
3928: LD_VAR 0 1
3932: PPUSH
3933: LD_INT 110
3935: PPUSH
3936: LD_INT 41
3938: PPUSH
3939: CALL_OW 111
// AddComHold ( i ) ;
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3952: LD_VAR 0 1
3956: PPUSH
3957: LD_INT 11
3959: PPUSH
3960: CALL_OW 308
3964: IFFALSE 3978
// ComMoveToArea ( i , ruBaseArea ) ;
3966: LD_VAR 0 1
3970: PPUSH
3971: LD_INT 12
3973: PPUSH
3974: CALL_OW 113
// if tag = 1 then
3978: LD_VAR 0 6
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: IFFALSE 4171
// begin if b then
3988: LD_VAR 0 3
3992: IFFALSE 4020
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
3994: LD_VAR 0 1
3998: PPUSH
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: CALL_OW 74
4013: PPUSH
4014: CALL_OW 130
4018: GO 4171
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4020: LD_EXP 17
4024: PUSH
4025: LD_INT 11
4027: PPUSH
4028: LD_INT 81
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: LD_INT 0
4045: EQUAL
4046: AND
4047: PUSH
4048: LD_INT 22
4050: PPUSH
4051: LD_EXP 17
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 17
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: PUSH
4073: LD_INT 2
4075: ARRAY
4076: PPUSH
4077: LD_EXP 17
4081: PUSH
4082: LD_INT 1
4084: ARRAY
4085: PUSH
4086: LD_INT 3
4088: ARRAY
4089: PPUSH
4090: LD_EXP 17
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: PUSH
4099: LD_INT 4
4101: ARRAY
4102: PPUSH
4103: CALL 44512 0 5
4107: AND
4108: IFFALSE 4171
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_EXP 17
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: LD_EXP 17
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: PPUSH
4141: LD_EXP 17
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PUSH
4150: LD_INT 3
4152: ARRAY
4153: PPUSH
4154: LD_EXP 17
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 4
4165: ARRAY
4166: PPUSH
4167: CALL_OW 145
// end ; end ;
4171: GO 3693
4173: POP
4174: POP
// end ; end ;
4175: PPOPN 8
4177: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: LD_INT 60
4193: PUSH
4194: EMPTY
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 50
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 16
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 69
4227: PUSH
4228: LD_INT 14
4230: PPUSH
4231: CALL_OW 435
4235: AND
4236: IFFALSE 4348
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// begin enable ;
4245: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 435
4258: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4259: LD_ADDR_VAR 0 1
4263: PUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 60
4279: PUSH
4280: EMPTY
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 50
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 16
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PUSH
4314: FOR_IN
4315: IFFALSE 4346
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4317: LD_VAR 0 1
4321: PPUSH
4322: LD_VAR 0 2
4326: PUSH
4327: LD_INT 1
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 117
4344: GO 4314
4346: POP
4347: POP
// end ;
4348: PPOPN 2
4350: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: LD_INT 60
4366: PUSH
4367: EMPTY
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 50
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: LD_INT 34
4382: PUSH
4383: LD_INT 51
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PUSH
4401: LD_INT 13
4403: PPUSH
4404: CALL_OW 435
4408: AND
4409: IFFALSE 4521
4411: GO 4413
4413: DISABLE
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
// begin enable ;
4418: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: LD_INT 13
4426: PPUSH
4427: CALL_OW 435
4431: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4432: LD_ADDR_VAR 0 1
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 3
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 60
4452: PUSH
4453: EMPTY
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 50
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: LD_INT 34
4468: PUSH
4469: LD_INT 51
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PPUSH
4482: CALL_OW 69
4486: PUSH
4487: FOR_IN
4488: IFFALSE 4519
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4490: LD_VAR 0 1
4494: PPUSH
4495: LD_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 2
4511: ARRAY
4512: PPUSH
4513: CALL_OW 117
4517: GO 4487
4519: POP
4520: POP
// end ;
4521: PPOPN 2
4523: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4524: LD_OWVAR 67
4528: PUSH
4529: LD_INT 1
4531: GREATER
4532: PUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 302
4540: AND
4541: IFFALSE 4697
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4549: LD_ADDR_VAR 0 1
4553: PUSH
4554: DOUBLE
4555: LD_INT 1
4557: DEC
4558: ST_TO_ADDR
4559: LD_INT 3
4561: PUSH
4562: LD_INT 4
4564: PUSH
4565: LD_INT 5
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4628
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4586: LD_INT 1
4588: PUSH
4589: LD_INT 40
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_VAR 0 1
4600: PUSH
4601: LD_INT 2
4603: MOD
4604: PUSH
4605: LD_INT 1
4607: PLUS
4608: ARRAY
4609: PPUSH
4610: LD_INT 21
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: LD_INT 45
4621: PPUSH
4622: CALL_OW 185
// end ;
4626: GO 4583
4628: POP
4629: POP
// wait ( 12 12$00 ) ;
4630: LD_INT 25200
4632: PPUSH
4633: CALL_OW 67
// for i := 1 to 2 do
4637: LD_ADDR_VAR 0 1
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 2
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4695
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4653: LD_INT 1
4655: PUSH
4656: LD_INT 40
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 1
4667: PUSH
4668: LD_INT 2
4670: MOD
4671: PUSH
4672: LD_INT 1
4674: PLUS
4675: ARRAY
4676: PPUSH
4677: LD_INT 21
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 45
4688: PPUSH
4689: CALL_OW 185
// end ;
4693: GO 4650
4695: POP
4696: POP
// end ;
4697: PPOPN 1
4699: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4700: LD_EXP 16
4704: IFFALSE 5290
4706: GO 4708
4708: DISABLE
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// begin enable ;
4714: ENABLE
// if not ruMobile then
4715: LD_EXP 16
4719: NOT
4720: IFFALSE 4724
// exit ;
4722: GO 5290
// for i in ruMobile do
4724: LD_ADDR_VAR 0 1
4728: PUSH
4729: LD_EXP 16
4733: PUSH
4734: FOR_IN
4735: IFFALSE 5288
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 302
4746: NOT
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: LD_INT 3
4760: NONEQUAL
4761: OR
4762: IFFALSE 4782
// begin ruMobile := ruMobile diff i ;
4764: LD_ADDR_EXP 16
4768: PUSH
4769: LD_EXP 16
4773: PUSH
4774: LD_VAR 0 1
4778: DIFF
4779: ST_TO_ADDR
// continue ;
4780: GO 4734
// end ; if GetTag ( i ) = 300 then
4782: LD_VAR 0 1
4786: PPUSH
4787: CALL_OW 110
4791: PUSH
4792: LD_INT 300
4794: EQUAL
4795: IFFALSE 4925
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 261
4806: PUSH
4807: LD_INT 50
4809: LESS
4810: PUSH
4811: LD_VAR 0 1
4815: PPUSH
4816: CALL_OW 262
4820: PUSH
4821: LD_INT 1
4823: EQUAL
4824: AND
4825: IFFALSE 4884
// begin ComMoveXY ( i , 120 , 58 ) ;
4827: LD_VAR 0 1
4831: PPUSH
4832: LD_INT 120
4834: PPUSH
4835: LD_INT 58
4837: PPUSH
4838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4842: LD_INT 35
4844: PPUSH
4845: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 120
4856: PPUSH
4857: LD_INT 58
4859: PPUSH
4860: CALL_OW 297
4864: PUSH
4865: LD_INT 4
4867: LESS
4868: IFFALSE 4842
// SetFuel ( i , 100 ) ;
4870: LD_VAR 0 1
4874: PPUSH
4875: LD_INT 100
4877: PPUSH
4878: CALL_OW 240
// end else
4882: GO 4925
// if not IsInArea ( i , ruParkingArea ) then
4884: LD_VAR 0 1
4888: PPUSH
4889: LD_INT 10
4891: PPUSH
4892: CALL_OW 308
4896: NOT
4897: IFFALSE 4913
// ComMoveToArea ( i , ruParkingArea ) else
4899: LD_VAR 0 1
4903: PPUSH
4904: LD_INT 10
4906: PPUSH
4907: CALL_OW 113
4911: GO 4925
// SetTag ( i , 301 ) ;
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_INT 301
4920: PPUSH
4921: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 110
4934: PUSH
4935: LD_INT 301
4937: EQUAL
4938: IFFALSE 5068
// begin if GetLives ( i ) < 1000 then
4940: LD_VAR 0 1
4944: PPUSH
4945: CALL_OW 256
4949: PUSH
4950: LD_INT 1000
4952: LESS
4953: IFFALSE 5045
// begin if not IsDrivenBy ( i ) then
4955: LD_VAR 0 1
4959: PPUSH
4960: CALL_OW 311
4964: NOT
4965: IFFALSE 4969
// continue ;
4967: GO 4734
// mech := IsDrivenBy ( i ) ;
4969: LD_ADDR_VAR 0 2
4973: PUSH
4974: LD_VAR 0 1
4978: PPUSH
4979: CALL_OW 311
4983: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4993: LD_VAR 0 2
4997: PPUSH
4998: LD_VAR 0 1
5002: PPUSH
5003: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5007: LD_INT 35
5009: PPUSH
5010: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 256
5023: PUSH
5024: LD_INT 1000
5026: EQUAL
5027: IFFALSE 5007
// ComEnterUnit ( mech , i ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_VAR 0 1
5038: PPUSH
5039: CALL_OW 120
// end else
5043: GO 5068
// if IsDrivenBy ( i ) then
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 311
5054: IFFALSE 5068
// SetTag ( i , 0 ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 0
5063: PPUSH
5064: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5068: LD_VAR 0 1
5072: PPUSH
5073: CALL_OW 110
5077: PUSH
5078: LD_INT 300
5080: LESS
5081: IFFALSE 5286
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_INT 11
5090: PPUSH
5091: LD_INT 81
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 70
5105: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL_OW 256
5115: PUSH
5116: LD_INT 650
5118: LESS
5119: IFFALSE 5144
// begin ComStop ( i ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: CALL_OW 141
// SetTag ( i , 300 ) ;
5130: LD_VAR 0 1
5134: PPUSH
5135: LD_INT 300
5137: PPUSH
5138: CALL_OW 109
// continue ;
5142: GO 4734
// end ; if enemy then
5144: LD_VAR 0 3
5148: IFFALSE 5188
// begin if not HasTask ( i ) then
5150: LD_VAR 0 1
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: IFFALSE 5186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 74
5181: PPUSH
5182: CALL_OW 115
// end else
5186: GO 5286
// if ruMobile then
5188: LD_EXP 16
5192: IFFALSE 5286
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: LD_INT 81
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 69
5213: ST_TO_ADDR
// if enemy then
5214: LD_VAR 0 3
5218: IFFALSE 5286
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5220: LD_VAR 0 1
5224: PPUSH
5225: LD_INT 113
5227: PUSH
5228: LD_INT 80
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 118
5237: PUSH
5238: LD_INT 100
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 102
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 114
5257: PUSH
5258: LD_INT 120
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 86
5267: PUSH
5268: LD_INT 116
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: PPUSH
5282: CALL 71350 0 2
// end ; end ; end ;
5286: GO 4734
5288: POP
5289: POP
// end ;
5290: PPOPN 3
5292: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5293: LD_EXP 18
5297: IFFALSE 5343
5299: GO 5301
5301: DISABLE
5302: LD_INT 0
5304: PPUSH
// begin enable ;
5305: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5306: LD_ADDR_VAR 0 1
5310: PUSH
5311: LD_EXP 18
5315: PPUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PPUSH
5322: CALL_OW 72
5326: ST_TO_ADDR
// ruAttackers := [ ] ;
5327: LD_ADDR_EXP 18
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// SendAttack ( tmp ) ;
5334: LD_VAR 0 1
5338: PPUSH
5339: CALL 5346 0 1
// end ;
5343: PPOPN 1
5345: END
// function SendAttack ( group ) ; var i , tmp ; begin
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
// for i in group do
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: FOR_IN
5362: IFFALSE 5428
// begin SetTag ( i , 0 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 0
5371: PPUSH
5372: CALL_OW 109
// if Prob ( 30 ) then
5376: LD_INT 30
5378: PPUSH
5379: CALL_OW 13
5383: IFFALSE 5411
// begin SetTag ( i , 1 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 116
5404: PPUSH
5405: CALL_OW 120
// end else
5409: GO 5426
// ComAgressiveMove ( i , 118 , 93 ) ;
5411: LD_VAR 0 3
5415: PPUSH
5416: LD_INT 118
5418: PPUSH
5419: LD_INT 93
5421: PPUSH
5422: CALL_OW 114
// end ;
5426: GO 5361
5428: POP
5429: POP
// repeat wait ( 0 0$1 ) ;
5430: LD_INT 35
5432: PPUSH
5433: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5437: LD_ADDR_VAR 0 4
5441: PUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 120
5449: PUSH
5450: LD_INT 0
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 72
5461: ST_TO_ADDR
// for i in tmp do
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_VAR 0 4
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5620
// begin if not IsOk ( i ) then
5475: LD_VAR 0 3
5479: PPUSH
5480: CALL_OW 302
5484: NOT
5485: IFFALSE 5505
// begin tmp := tmp diff i ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_VAR 0 4
5496: PUSH
5497: LD_VAR 0 3
5501: DIFF
5502: ST_TO_ADDR
// continue ;
5503: GO 5472
// end ; if GetDistUnits ( i , usDep ) < 8 then
5505: LD_VAR 0 3
5509: PPUSH
5510: LD_INT 48
5512: PPUSH
5513: CALL_OW 296
5517: PUSH
5518: LD_INT 8
5520: LESS
5521: IFFALSE 5537
// begin ComAttackUnit ( i , usDep ) ;
5523: LD_VAR 0 3
5527: PPUSH
5528: LD_INT 48
5530: PPUSH
5531: CALL_OW 115
// continue ;
5535: GO 5472
// end ; if not See ( 1 , i ) then
5537: LD_INT 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: CALL_OW 292
5549: NOT
5550: IFFALSE 5569
// ComAgressiveMove ( i , 86 , 116 ) else
5552: LD_VAR 0 3
5556: PPUSH
5557: LD_INT 86
5559: PPUSH
5560: LD_INT 116
5562: PPUSH
5563: CALL_OW 114
5567: GO 5618
// if GetWeapon ( i ) <> ru_time_lapser then
5569: LD_VAR 0 3
5573: PPUSH
5574: CALL_OW 264
5578: PUSH
5579: LD_INT 49
5581: NONEQUAL
5582: IFFALSE 5618
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_INT 81
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 3
5608: PPUSH
5609: CALL_OW 74
5613: PPUSH
5614: CALL_OW 115
// end ;
5618: GO 5472
5620: POP
5621: POP
// until not tmp ;
5622: LD_VAR 0 4
5626: NOT
5627: IFFALSE 5430
// end ; end_of_file
5629: LD_VAR 0 2
5633: RET
// on UnitDestroyed ( unit ) do var i ;
5634: LD_INT 0
5636: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL 26989 0 1
// if unit = JMM then
5646: LD_VAR 0 1
5650: PUSH
5651: LD_EXP 8
5655: EQUAL
5656: IFFALSE 5665
// YouLost ( JMM ) ;
5658: LD_STRING JMM
5660: PPUSH
5661: CALL_OW 104
// if GetSide ( unit ) = 4 then
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 255
5674: PUSH
5675: LD_INT 4
5677: EQUAL
5678: IFFALSE 5737
// begin if unit = Joan then
5680: LD_VAR 0 1
5684: PUSH
5685: LD_EXP 10
5689: EQUAL
5690: IFFALSE 5699
// YouLost ( Joan ) ;
5692: LD_STRING Joan
5694: PPUSH
5695: CALL_OW 104
// if unit = Connie then
5699: LD_VAR 0 1
5703: PUSH
5704: LD_EXP 12
5708: EQUAL
5709: IFFALSE 5718
// YouLost ( Connie ) ;
5711: LD_STRING Connie
5713: PPUSH
5714: CALL_OW 104
// if unit = Lisa then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_EXP 11
5727: EQUAL
5728: IFFALSE 5737
// YouLost ( Lisa ) ;
5730: LD_STRING Lisa
5732: PPUSH
5733: CALL_OW 104
// end ; if unit in ruAttackers then
5737: LD_VAR 0 1
5741: PUSH
5742: LD_EXP 18
5746: IN
5747: IFFALSE 5765
// ruAttackers := ruAttackers diff unit ;
5749: LD_ADDR_EXP 18
5753: PUSH
5754: LD_EXP 18
5758: PUSH
5759: LD_VAR 0 1
5763: DIFF
5764: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 264
5774: PUSH
5775: LD_INT 51
5777: EQUAL
5778: PUSH
5779: LD_INT 40
5781: PPUSH
5782: CALL_OW 302
5786: AND
5787: IFFALSE 5827
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5789: LD_INT 40
5791: PPUSH
5792: LD_INT 21
5794: PPUSH
5795: LD_INT 1
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_INT 2
5810: PPUSH
5811: CALL_OW 12
5815: ARRAY
5816: PPUSH
5817: LD_INT 3
5819: PPUSH
5820: LD_INT 51
5822: PPUSH
5823: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 264
5836: PUSH
5837: LD_INT 52
5839: EQUAL
5840: PUSH
5841: LD_INT 40
5843: PPUSH
5844: CALL_OW 302
5848: AND
5849: IFFALSE 5889
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5851: LD_INT 40
5853: PPUSH
5854: LD_INT 21
5856: PPUSH
5857: LD_INT 1
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL_OW 12
5877: ARRAY
5878: PPUSH
5879: LD_INT 3
5881: PPUSH
5882: LD_INT 52
5884: PPUSH
5885: CALL_OW 185
// if unit in ruMobile then
5889: LD_VAR 0 1
5893: PUSH
5894: LD_EXP 16
5898: IN
5899: IFFALSE 5917
// ruMobile := ruMobile diff i ;
5901: LD_ADDR_EXP 16
5905: PUSH
5906: LD_EXP 16
5910: PUSH
5911: LD_VAR 0 2
5915: DIFF
5916: ST_TO_ADDR
// end ;
5917: PPOPN 2
5919: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
5920: LD_VAR 0 2
5924: PPUSH
5925: CALL_OW 255
5929: PUSH
5930: LD_INT 3
5932: EQUAL
5933: IFFALSE 5947
// SetTag ( unit , 0 ) ;
5935: LD_VAR 0 2
5939: PPUSH
5940: LD_INT 0
5942: PPUSH
5943: CALL_OW 109
// end ;
5947: PPOPN 2
5949: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 255
5959: PUSH
5960: LD_INT 3
5962: EQUAL
5963: PUSH
5964: LD_VAR 0 1
5968: PUSH
5969: LD_EXP 19
5973: IN
5974: AND
5975: IFFALSE 5993
// ruTechList := ruTechList diff tech ;
5977: LD_ADDR_EXP 19
5981: PUSH
5982: LD_EXP 19
5986: PUSH
5987: LD_VAR 0 1
5991: DIFF
5992: ST_TO_ADDR
// end ;
5993: PPOPN 2
5995: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
5996: LD_INT 0
5998: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL 27109 0 2
// if GetSide ( vehicle ) <> 3 then
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 255
6022: PUSH
6023: LD_INT 3
6025: NONEQUAL
6026: IFFALSE 6097
// begin if GetWeapon ( vehicle ) = us_double_laser then
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 264
6037: PUSH
6038: LD_INT 10
6040: EQUAL
6041: IFFALSE 6095
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6043: LD_ADDR_EXP 7
6047: PUSH
6048: LD_EXP 7
6052: PPUSH
6053: CALL 70107 0 1
6057: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL_OW 313
6072: PUSH
6073: FOR_IN
6074: IFFALSE 6093
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_INT 3
6083: PPUSH
6084: LD_INT 1000
6086: PPUSH
6087: CALL_OW 591
6091: GO 6073
6093: POP
6094: POP
// end ; exit ;
6095: GO 6191
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6097: LD_VAR 0 1
6101: PPUSH
6102: CALL_OW 264
6106: PUSH
6107: LD_INT 51
6109: PUSH
6110: LD_INT 52
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: IN
6117: IFFALSE 6121
// exit ;
6119: GO 6191
// if GetControl ( vehicle ) = control_computer then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL_OW 263
6130: PUSH
6131: LD_INT 3
6133: EQUAL
6134: IFFALSE 6156
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6136: LD_ADDR_EXP 18
6140: PUSH
6141: LD_EXP 18
6145: PPUSH
6146: LD_VAR 0 1
6150: PPUSH
6151: CALL 68746 0 2
6155: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 263
6165: PUSH
6166: LD_INT 1
6168: EQUAL
6169: IFFALSE 6191
// ruMobile := Join ( ruMobile , vehicle ) ;
6171: LD_ADDR_EXP 16
6175: PUSH
6176: LD_EXP 16
6180: PPUSH
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL 68746 0 2
6190: ST_TO_ADDR
// end ;
6191: PPOPN 3
6193: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 255
6203: PUSH
6204: LD_INT 3
6206: EQUAL
6207: PUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 257
6217: PUSH
6218: LD_INT 3
6220: EQUAL
6221: AND
6222: PUSH
6223: LD_INT 1
6225: PPUSH
6226: CALL_OW 255
6230: PUSH
6231: LD_INT 3
6233: EQUAL
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: IFFALSE 6258
// ComEnterUnit ( human , ruFac1 ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 120
// end ;
6258: PPOPN 4
6260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL 27093 0 1
// end ; end_of_file
6270: PPOPN 1
6272: END
// export function Action ; var dec1 , dec2 , veh ; begin
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
// veh := IsInUnit ( JMM ) ;
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOn ;
6294: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 30
6314: PPUSH
6315: LD_INT 11
6317: PPUSH
6318: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6322: LD_VAR 0 4
6326: PPUSH
6327: LD_INT 69
6329: PPUSH
6330: LD_INT 34
6332: PPUSH
6333: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6337: LD_INT 30
6339: PPUSH
6340: LD_INT 11
6342: PPUSH
6343: CALL_OW 84
// wait ( 0 0$3 ) ;
6347: LD_INT 105
6349: PPUSH
6350: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6354: LD_EXP 13
6358: PPUSH
6359: LD_STRING D1-Pow-1
6361: PPUSH
6362: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6366: LD_EXP 8
6370: PPUSH
6371: CALL_OW 121
// AddComHold ( JMM ) ;
6375: LD_EXP 8
6379: PPUSH
6380: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6384: LD_EXP 8
6388: PPUSH
6389: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6393: LD_EXP 8
6397: PPUSH
6398: LD_STRING D1-JMM-1
6400: PPUSH
6401: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6405: LD_EXP 13
6409: PPUSH
6410: LD_STRING D1-Pow-2
6412: PPUSH
6413: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6417: LD_EXP 8
6421: PPUSH
6422: LD_STRING D1-JMM-2
6424: PPUSH
6425: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6429: LD_EXP 8
6433: PPUSH
6434: LD_VAR 0 4
6438: PPUSH
6439: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6443: LD_STRING M1
6445: PPUSH
6446: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6450: LD_INT 16
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6460: LD_INT 35
6462: PPUSH
6463: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6467: LD_EXP 8
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6481: LD_VAR 0 4
6485: PPUSH
6486: LD_INT 51
6488: PPUSH
6489: LD_INT 21
6491: PPUSH
6492: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6505: LD_VAR 0 4
6509: PPUSH
6510: LD_INT 51
6512: PPUSH
6513: LD_INT 21
6515: PPUSH
6516: CALL_OW 297
6520: PUSH
6521: LD_INT 6
6523: LESS
6524: IFFALSE 6460
// if JMMGirl = 1 then
6526: LD_EXP 2
6530: PUSH
6531: LD_INT 1
6533: EQUAL
6534: IFFALSE 6833
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6536: LD_EXP 10
6540: PPUSH
6541: LD_STRING D2J-Joan-1
6543: PPUSH
6544: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_STRING Q1
6555: PPUSH
6556: CALL_OW 97
6560: ST_TO_ADDR
// if dec1 = 1 then
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 1
6568: EQUAL
6569: IFFALSE 6824
// begin ComExitVehicle ( JMM ) ;
6571: LD_EXP 8
6575: PPUSH
6576: CALL_OW 121
// AddComHold ( JMM ) ;
6580: LD_EXP 8
6584: PPUSH
6585: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6589: LD_EXP 8
6593: PPUSH
6594: LD_STRING D2J-JMM-1
6596: PPUSH
6597: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6601: LD_EXP 10
6605: PPUSH
6606: LD_STRING D2J-Joan-2
6608: PPUSH
6609: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6613: LD_EXP 8
6617: PPUSH
6618: LD_STRING D2J-JMM-2
6620: PPUSH
6621: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6625: LD_EXP 10
6629: PPUSH
6630: LD_STRING D2J-Joan-3
6632: PPUSH
6633: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6637: LD_EXP 13
6641: PPUSH
6642: LD_STRING DPowell-Pow-1
6644: PPUSH
6645: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_STRING Q2J
6656: PPUSH
6657: CALL_OW 97
6661: ST_TO_ADDR
// if dec2 = 1 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 1
6669: EQUAL
6670: IFFALSE 6712
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6672: LD_EXP 8
6676: PPUSH
6677: LD_STRING D2Ja-JMM-1
6679: PPUSH
6680: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6684: LD_EXP 10
6688: PPUSH
6689: LD_STRING D2Ja-Joan-1
6691: PPUSH
6692: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6696: LD_EXP 8
6700: PPUSH
6701: LD_STRING D2Ja-JMM-2
6703: PPUSH
6704: CALL_OW 88
// InGameOff ;
6708: CALL_OW 9
// end ; if dec2 = 2 then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 2
6719: EQUAL
6720: IFFALSE 6791
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6722: LD_EXP 8
6726: PPUSH
6727: LD_STRING D2Jb-JMM-1
6729: PPUSH
6730: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6734: LD_EXP 10
6738: PPUSH
6739: LD_STRING D2Jb-Joan-1
6741: PPUSH
6742: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6746: LD_EXP 8
6750: PPUSH
6751: LD_STRING D2Jb-JMM-2
6753: PPUSH
6754: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6758: LD_EXP 10
6762: PPUSH
6763: LD_STRING D2Jb-Joan-2
6765: PPUSH
6766: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6770: LD_EXP 8
6774: PPUSH
6775: LD_STRING D2Jb-JMM-3
6777: PPUSH
6778: CALL_OW 88
// FinishMission ( true ) ;
6782: LD_INT 1
6784: PPUSH
6785: CALL 9664 0 1
// exit ;
6789: GO 7373
// end ; if dec2 = 3 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: IFFALSE 6822
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
6801: LD_EXP 10
6805: PPUSH
6806: LD_STRING D2Jc-Joan-1
6808: PPUSH
6809: CALL_OW 94
// FinishMission ( true ) ;
6813: LD_INT 1
6815: PPUSH
6816: CALL 9664 0 1
// exit ;
6820: GO 7373
// end ; end else
6822: GO 6833
// begin FinishMission ( true ) ;
6824: LD_INT 1
6826: PPUSH
6827: CALL 9664 0 1
// exit ;
6831: GO 7373
// end ; end ; if JMMGirl = 2 then
6833: LD_EXP 2
6837: PUSH
6838: LD_INT 2
6840: EQUAL
6841: IFFALSE 7152
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6843: LD_EXP 11
6847: PPUSH
6848: LD_STRING D2L-Lisa-1
6850: PPUSH
6851: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_STRING Q1
6862: PPUSH
6863: CALL_OW 97
6867: ST_TO_ADDR
// if dec1 = 1 then
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 1
6875: EQUAL
6876: IFFALSE 7143
// begin ComExitVehicle ( JMM ) ;
6878: LD_EXP 8
6882: PPUSH
6883: CALL_OW 121
// AddComHold ( JMM ) ;
6887: LD_EXP 8
6891: PPUSH
6892: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
6896: LD_EXP 8
6900: PPUSH
6901: LD_STRING D2L-JMM-1
6903: PPUSH
6904: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6908: LD_EXP 11
6912: PPUSH
6913: LD_STRING D2L-Lisa-2
6915: PPUSH
6916: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6920: LD_EXP 8
6924: PPUSH
6925: LD_STRING D2L-JMM-2
6927: PPUSH
6928: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
6932: LD_EXP 11
6936: PPUSH
6937: LD_STRING DL-Lisa-3
6939: PPUSH
6940: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6944: LD_EXP 13
6948: PPUSH
6949: LD_STRING DPowell-Pow-1
6951: PPUSH
6952: CALL_OW 94
// dec2 := Query ( Q2L ) ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_STRING Q2L
6963: PPUSH
6964: CALL_OW 97
6968: ST_TO_ADDR
// if dec2 = 1 then
6969: LD_VAR 0 3
6973: PUSH
6974: LD_INT 1
6976: EQUAL
6977: IFFALSE 7043
// begin Say ( JMM , D2La-JMM-1 ) ;
6979: LD_EXP 8
6983: PPUSH
6984: LD_STRING D2La-JMM-1
6986: PPUSH
6987: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6991: LD_EXP 11
6995: PPUSH
6996: LD_STRING D2La-Lisa-1
6998: PPUSH
6999: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7003: LD_EXP 8
7007: PPUSH
7008: LD_STRING D2La-JMM-2
7010: PPUSH
7011: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7015: LD_EXP 11
7019: PPUSH
7020: LD_STRING D2La-Lisa-2
7022: PPUSH
7023: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7027: LD_EXP 8
7031: PPUSH
7032: LD_STRING D2La-JMM-3
7034: PPUSH
7035: CALL_OW 88
// InGameOff ;
7039: CALL_OW 9
// end ; if dec2 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7110
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7053: LD_EXP 8
7057: PPUSH
7058: LD_STRING D2Lb-JMM-1
7060: PPUSH
7061: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7065: LD_EXP 11
7069: PPUSH
7070: LD_STRING D2Lb-Lisa-1
7072: PPUSH
7073: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7077: LD_EXP 8
7081: PPUSH
7082: LD_STRING D2Lb-JMM-2
7084: PPUSH
7085: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7089: LD_EXP 11
7093: PPUSH
7094: LD_STRING D2Lb-Lisa-2
7096: PPUSH
7097: CALL_OW 94
// FinishMission ( true ) ;
7101: LD_INT 1
7103: PPUSH
7104: CALL 9664 0 1
// exit ;
7108: GO 7373
// end ; if dec2 = 3 then
7110: LD_VAR 0 3
7114: PUSH
7115: LD_INT 3
7117: EQUAL
7118: IFFALSE 7141
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7120: LD_EXP 11
7124: PPUSH
7125: LD_STRING D2Lc-Lisa-1
7127: PPUSH
7128: CALL_OW 94
// FinishMission ( true ) ;
7132: LD_INT 1
7134: PPUSH
7135: CALL 9664 0 1
// exit ;
7139: GO 7373
// end ; end else
7141: GO 7152
// begin FinishMission ( true ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL 9664 0 1
// exit ;
7150: GO 7373
// end ; end ; if JMMGirl = 3 then
7152: LD_EXP 2
7156: PUSH
7157: LD_INT 3
7159: EQUAL
7160: IFFALSE 7373
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7162: LD_EXP 12
7166: PPUSH
7167: LD_STRING D2X-Con-1
7169: PPUSH
7170: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_STRING Q1
7181: PPUSH
7182: CALL_OW 97
7186: ST_TO_ADDR
// if dec1 = 1 then
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: EQUAL
7195: IFFALSE 7366
// begin ComExitVehicle ( JMM ) ;
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 121
// AddComHold ( JMM ) ;
7206: LD_EXP 8
7210: PPUSH
7211: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7215: LD_EXP 8
7219: PPUSH
7220: LD_STRING D2X-JMM-1
7222: PPUSH
7223: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7227: LD_EXP 12
7231: PPUSH
7232: LD_STRING D2X-Con-2
7234: PPUSH
7235: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7239: LD_EXP 13
7243: PPUSH
7244: LD_STRING DPowell-Pow-1
7246: PPUSH
7247: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_STRING Q2X
7258: PPUSH
7259: CALL_OW 97
7263: ST_TO_ADDR
// if dec2 = 1 then
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 1
7271: EQUAL
7272: IFFALSE 7290
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_STRING D2Xa-JMM-1
7281: PPUSH
7282: CALL_OW 88
// InGameOff ;
7286: CALL_OW 9
// end ; if dec2 = 2 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 2
7297: EQUAL
7298: IFFALSE 7333
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7300: LD_EXP 8
7304: PPUSH
7305: LD_STRING D2Xb-JMM-1
7307: PPUSH
7308: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7312: LD_EXP 12
7316: PPUSH
7317: LD_STRING D2Xb-Con-1
7319: PPUSH
7320: CALL_OW 94
// FinishMission ( true ) ;
7324: LD_INT 1
7326: PPUSH
7327: CALL 9664 0 1
// exit ;
7331: GO 7373
// end ; if dec2 = 3 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 3
7340: EQUAL
7341: IFFALSE 7364
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7343: LD_EXP 12
7347: PPUSH
7348: LD_STRING D2Xc-Con-1
7350: PPUSH
7351: CALL_OW 94
// FinishMission ( true ) ;
7355: LD_INT 1
7357: PPUSH
7358: CALL 9664 0 1
// exit ;
7362: GO 7373
// end ; end else
7364: GO 7373
// begin FinishMission ( true ) ;
7366: LD_INT 1
7368: PPUSH
7369: CALL 9664 0 1
// end ; end ; end ;
7373: LD_VAR 0 1
7377: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7378: LD_EXP 8
7382: PPUSH
7383: LD_INT 15
7385: PPUSH
7386: CALL_OW 308
7390: IFFALSE 8638
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
// begin if tick < 5 5$00 then
7398: LD_OWVAR 1
7402: PUSH
7403: LD_INT 10500
7405: LESS
7406: IFFALSE 7658
// begin uc_side := 6 ;
7408: LD_ADDR_OWVAR 20
7412: PUSH
7413: LD_INT 6
7415: ST_TO_ADDR
// uc_nation := 3 ;
7416: LD_ADDR_OWVAR 21
7420: PUSH
7421: LD_INT 3
7423: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7424: LD_INT 1
7426: PPUSH
7427: LD_INT 105
7429: PPUSH
7430: LD_INT 97
7432: PPUSH
7433: CALL_OW 293
7437: NOT
7438: IFFALSE 7502
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 3
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 40
7454: PPUSH
7455: CALL 36293 0 5
// veh := CreateVehicle ;
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: CALL_OW 45
7468: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7469: LD_VAR 0 1
7473: PPUSH
7474: LD_INT 200
7476: PPUSH
7477: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_INT 105
7488: PPUSH
7489: LD_INT 97
7491: PPUSH
7492: LD_INT 3
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL 70886 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 116
7507: PPUSH
7508: LD_INT 120
7510: PPUSH
7511: CALL_OW 293
7515: NOT
7516: IFFALSE 7580
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7518: LD_INT 22
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 3
7526: PPUSH
7527: LD_INT 45
7529: PPUSH
7530: LD_INT 40
7532: PPUSH
7533: CALL 36293 0 5
// veh := CreateVehicle ;
7537: LD_ADDR_VAR 0 1
7541: PUSH
7542: CALL_OW 45
7546: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7547: LD_VAR 0 1
7551: PPUSH
7552: LD_INT 200
7554: PPUSH
7555: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7559: LD_VAR 0 1
7563: PPUSH
7564: LD_INT 116
7566: PPUSH
7567: LD_INT 120
7569: PPUSH
7570: LD_INT 4
7572: PPUSH
7573: LD_INT 0
7575: PPUSH
7576: CALL 70886 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7580: LD_INT 1
7582: PPUSH
7583: LD_INT 116
7585: PPUSH
7586: LD_INT 120
7588: PPUSH
7589: CALL_OW 293
7593: NOT
7594: IFFALSE 7658
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7596: LD_INT 24
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: LD_INT 3
7604: PPUSH
7605: LD_INT 45
7607: PPUSH
7608: LD_INT 30
7610: PPUSH
7611: CALL 36293 0 5
// veh := CreateVehicle ;
7615: LD_ADDR_VAR 0 1
7619: PUSH
7620: CALL_OW 45
7624: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 200
7632: PPUSH
7633: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_INT 116
7644: PPUSH
7645: LD_INT 120
7647: PPUSH
7648: LD_INT 4
7650: PPUSH
7651: LD_INT 0
7653: PPUSH
7654: CALL 70886 0 5
// end ; end ; InGameOn ;
7658: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7662: LD_INT 35
7664: PPUSH
7665: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7669: LD_EXP 8
7673: PPUSH
7674: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7678: LD_EXP 8
7682: PPUSH
7683: LD_INT 81
7685: PPUSH
7686: LD_INT 109
7688: PPUSH
7689: CALL_OW 111
// AddComHold ( JMM ) ;
7693: LD_EXP 8
7697: PPUSH
7698: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7702: LD_EXP 10
7706: PUSH
7707: LD_EXP 11
7711: PUSH
7712: LD_EXP 12
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: PPUSH
7722: LD_EXP 8
7726: PPUSH
7727: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7731: LD_EXP 10
7735: PUSH
7736: LD_EXP 11
7740: PUSH
7741: LD_EXP 12
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: LD_INT 91
7753: PUSH
7754: LD_EXP 8
7758: PUSH
7759: LD_INT 6
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: IFFALSE 7662
// case JMMGirl of 1 :
7773: LD_EXP 2
7777: PUSH
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 8071
7786: POP
// begin ChangeSideKappaBase ;
7787: CALL 1447 0 0
// ComTurnUnit ( Joan , JMM ) ;
7791: LD_EXP 10
7795: PPUSH
7796: LD_EXP 8
7800: PPUSH
7801: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
7805: LD_EXP 8
7809: PPUSH
7810: LD_EXP 10
7814: PPUSH
7815: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7819: LD_EXP 10
7823: PUSH
7824: LD_EXP 8
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 87
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// DialogueOn ;
7844: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
7848: LD_EXP 10
7852: PPUSH
7853: LD_STRING D3J-Joan-1
7855: PPUSH
7856: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7860: LD_EXP 8
7864: PPUSH
7865: LD_STRING D3J-JMM-1
7867: PPUSH
7868: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
7872: LD_EXP 10
7876: PPUSH
7877: LD_STRING D3J-Joan-2
7879: PPUSH
7880: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
7884: LD_EXP 8
7888: PPUSH
7889: LD_STRING D3J-JMM-2
7891: PPUSH
7892: CALL_OW 88
// wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7903: LD_EXP 8
7907: PPUSH
7908: LD_STRING D4-JMM-1
7910: PPUSH
7911: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
7915: LD_EXP 10
7919: PPUSH
7920: LD_STRING D4-Joan-1
7922: PPUSH
7923: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7927: LD_EXP 8
7931: PPUSH
7932: LD_STRING D4-JMM-2
7934: PPUSH
7935: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
7939: LD_EXP 10
7943: PPUSH
7944: LD_STRING D4-Joan-2
7946: PPUSH
7947: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7951: LD_EXP 8
7955: PPUSH
7956: LD_STRING D4-JMM-3
7958: PPUSH
7959: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
7963: LD_INT 10
7965: PPUSH
7966: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
7970: LD_EXP 13
7974: PPUSH
7975: LD_STRING D7-Pow-1
7977: PPUSH
7978: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7982: LD_EXP 8
7986: PPUSH
7987: LD_STRING D7-JMM-1
7989: PPUSH
7990: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7994: LD_EXP 13
7998: PPUSH
7999: LD_STRING D7-Pow-2
8001: PPUSH
8002: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8006: LD_EXP 8
8010: PPUSH
8011: LD_STRING D7-JMM-2
8013: PPUSH
8014: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8018: LD_EXP 13
8022: PPUSH
8023: LD_STRING D7-Pow-3
8025: PPUSH
8026: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8030: LD_EXP 8
8034: PPUSH
8035: LD_STRING D7-JMM-3
8037: PPUSH
8038: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8042: LD_EXP 13
8046: PPUSH
8047: LD_STRING D7-Pow-4
8049: PPUSH
8050: CALL_OW 94
// DialogueOff ;
8054: CALL_OW 7
// InGameOff ;
8058: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8062: LD_STRING M2J
8064: PPUSH
8065: CALL_OW 337
// end ; 2 :
8069: GO 8634
8071: LD_INT 2
8073: DOUBLE
8074: EQUAL
8075: IFTRUE 8079
8077: GO 8364
8079: POP
// begin ChangeSideKappaBase ;
8080: CALL 1447 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8084: LD_EXP 11
8088: PPUSH
8089: LD_EXP 8
8093: PPUSH
8094: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8098: LD_EXP 8
8102: PPUSH
8103: LD_EXP 11
8107: PPUSH
8108: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8112: LD_EXP 11
8116: PUSH
8117: LD_EXP 8
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 87
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// DialogueOn ;
8137: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8141: LD_EXP 11
8145: PPUSH
8146: LD_STRING D3L-Lisa-1
8148: PPUSH
8149: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8153: LD_EXP 8
8157: PPUSH
8158: LD_STRING D3L-JMM-1
8160: PPUSH
8161: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8165: LD_EXP 11
8169: PPUSH
8170: LD_STRING D3L-Lisa-2
8172: PPUSH
8173: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8177: LD_EXP 8
8181: PPUSH
8182: LD_STRING D3L-JMM-2
8184: PPUSH
8185: CALL_OW 88
// wait ( 0 0$1 ) ;
8189: LD_INT 35
8191: PPUSH
8192: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D4-JMM-1
8203: PPUSH
8204: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8208: LD_EXP 11
8212: PPUSH
8213: LD_STRING D4-Lisa-1
8215: PPUSH
8216: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8220: LD_EXP 8
8224: PPUSH
8225: LD_STRING D4-JMM-1
8227: PPUSH
8228: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8232: LD_EXP 11
8236: PPUSH
8237: LD_STRING D4-Lisa-2
8239: PPUSH
8240: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8244: LD_EXP 8
8248: PPUSH
8249: LD_STRING D4-JMM-3
8251: PPUSH
8252: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8256: LD_INT 10
8258: PPUSH
8259: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8263: LD_EXP 13
8267: PPUSH
8268: LD_STRING D7-Pow-1
8270: PPUSH
8271: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8275: LD_EXP 8
8279: PPUSH
8280: LD_STRING D7-JMM-1
8282: PPUSH
8283: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8287: LD_EXP 13
8291: PPUSH
8292: LD_STRING D7-Pow-2
8294: PPUSH
8295: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8299: LD_EXP 8
8303: PPUSH
8304: LD_STRING D7-JMM-2
8306: PPUSH
8307: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8311: LD_EXP 13
8315: PPUSH
8316: LD_STRING D7-Pow-3
8318: PPUSH
8319: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8323: LD_EXP 8
8327: PPUSH
8328: LD_STRING D7-JMM-3
8330: PPUSH
8331: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8335: LD_EXP 13
8339: PPUSH
8340: LD_STRING D7-Pow-4
8342: PPUSH
8343: CALL_OW 94
// DialogueOff ;
8347: CALL_OW 7
// InGameOff ;
8351: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8355: LD_STRING M2L
8357: PPUSH
8358: CALL_OW 337
// end ; 3 :
8362: GO 8634
8364: LD_INT 3
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8633
8372: POP
// begin ChangeSideKappaBase ;
8373: CALL 1447 0 0
// ComTurnUnit ( Connie , JMM ) ;
8377: LD_EXP 12
8381: PPUSH
8382: LD_EXP 8
8386: PPUSH
8387: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8391: LD_EXP 8
8395: PPUSH
8396: LD_EXP 12
8400: PPUSH
8401: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8405: LD_EXP 10
8409: PUSH
8410: LD_EXP 8
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 87
// wait ( 0 0$1 ) ;
8423: LD_INT 35
8425: PPUSH
8426: CALL_OW 67
// DialogueOn ;
8430: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8434: LD_EXP 12
8438: PPUSH
8439: LD_STRING D3X-Con-1
8441: PPUSH
8442: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8446: LD_EXP 8
8450: PPUSH
8451: LD_STRING D3J-JMM-1
8453: PPUSH
8454: CALL_OW 88
// wait ( 0 0$1 ) ;
8458: LD_INT 35
8460: PPUSH
8461: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D4-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8477: LD_EXP 12
8481: PPUSH
8482: LD_STRING D4-Con-1
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D4-JMM-2
8496: PPUSH
8497: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8501: LD_EXP 12
8505: PPUSH
8506: LD_STRING D4-Con-2
8508: PPUSH
8509: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8513: LD_EXP 8
8517: PPUSH
8518: LD_STRING D4-JMM-3
8520: PPUSH
8521: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8532: LD_EXP 13
8536: PPUSH
8537: LD_STRING D7-Pow-1
8539: PPUSH
8540: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8544: LD_EXP 8
8548: PPUSH
8549: LD_STRING D7-JMM-1
8551: PPUSH
8552: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8556: LD_EXP 13
8560: PPUSH
8561: LD_STRING D7-Pow-2
8563: PPUSH
8564: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8568: LD_EXP 8
8572: PPUSH
8573: LD_STRING D7-JMM-2
8575: PPUSH
8576: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8580: LD_EXP 13
8584: PPUSH
8585: LD_STRING D7-Pow-3
8587: PPUSH
8588: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8592: LD_EXP 8
8596: PPUSH
8597: LD_STRING D7-JMM-3
8599: PPUSH
8600: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8604: LD_EXP 13
8608: PPUSH
8609: LD_STRING D7-Pow-4
8611: PPUSH
8612: CALL_OW 94
// DialogueOff ;
8616: CALL_OW 7
// InGameOff ;
8620: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8624: LD_STRING M2X
8626: PPUSH
8627: CALL_OW 337
// end ; end ;
8631: GO 8634
8633: POP
// SaveForQuickRestart ;
8634: CALL_OW 22
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8641: LD_INT 32
8643: PPUSH
8644: CALL_OW 306
8648: IFFALSE 8973
8650: GO 8652
8652: DISABLE
// begin case JMMGirl of 1 :
8653: LD_EXP 2
8657: PUSH
8658: LD_INT 1
8660: DOUBLE
8661: EQUAL
8662: IFTRUE 8666
8664: GO 8780
8666: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8667: LD_EXP 8
8671: PPUSH
8672: LD_STRING D6J-JMM-1
8674: PPUSH
8675: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8679: LD_STRING 13f_Denis
8681: PPUSH
8682: CALL_OW 28
8686: PUSH
8687: LD_STRING 13s_Denis
8689: PPUSH
8690: CALL_OW 28
8694: OR
8695: IFFALSE 8735
// begin Say ( Joan , D6J-Joan-1 ) ;
8697: LD_EXP 10
8701: PPUSH
8702: LD_STRING D6J-Joan-1
8704: PPUSH
8705: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8709: LD_EXP 8
8713: PPUSH
8714: LD_STRING D6J-JMM-2
8716: PPUSH
8717: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8721: LD_EXP 10
8725: PPUSH
8726: LD_STRING D6J-Joan-2
8728: PPUSH
8729: CALL_OW 88
// end else
8733: GO 8747
// Say ( Joan , D6J-Joan-2a ) ;
8735: LD_EXP 10
8739: PPUSH
8740: LD_STRING D6J-Joan-2a
8742: PPUSH
8743: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8747: LD_EXP 8
8751: PPUSH
8752: LD_STRING D6J-JMM-3
8754: PPUSH
8755: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8759: LD_EXP 10
8763: PPUSH
8764: LD_STRING D6J-Joan-3
8766: PPUSH
8767: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8771: LD_STRING M3
8773: PPUSH
8774: CALL_OW 337
// end ; 2 :
8778: GO 8973
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8846
8788: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
8789: LD_EXP 8
8793: PPUSH
8794: LD_STRING D6L-JMM-1
8796: PPUSH
8797: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
8801: LD_EXP 11
8805: PPUSH
8806: LD_STRING D6L-Lisa-1
8808: PPUSH
8809: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
8813: LD_EXP 8
8817: PPUSH
8818: LD_STRING D6L-JMM-2
8820: PPUSH
8821: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
8825: LD_EXP 11
8829: PPUSH
8830: LD_STRING D6L-Lisa-2
8832: PPUSH
8833: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8837: LD_STRING M3
8839: PPUSH
8840: CALL_OW 337
// end ; 3 :
8844: GO 8973
8846: LD_INT 3
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 8972
8854: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
8855: LD_EXP 8
8859: PPUSH
8860: LD_STRING D6X-JMM-1
8862: PPUSH
8863: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
8867: LD_EXP 12
8871: PPUSH
8872: LD_STRING D6X-Con-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
8879: LD_EXP 8
8883: PPUSH
8884: LD_STRING D6X-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
8891: LD_EXP 12
8895: PPUSH
8896: LD_STRING D6X-Con-2
8898: PPUSH
8899: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
8903: LD_EXP 8
8907: PPUSH
8908: LD_STRING D6X-JMM-3
8910: PPUSH
8911: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
8915: LD_EXP 12
8919: PPUSH
8920: LD_STRING D6X-Con-3
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
8927: LD_EXP 8
8931: PPUSH
8932: LD_STRING D6X-JMM-4
8934: PPUSH
8935: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
8939: LD_EXP 12
8943: PPUSH
8944: LD_STRING D6X-Con-4
8946: PPUSH
8947: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
8951: LD_EXP 8
8955: PPUSH
8956: LD_STRING D6X-JMM-5
8958: PPUSH
8959: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8963: LD_STRING M3
8965: PPUSH
8966: CALL_OW 337
// end ; end ;
8970: GO 8973
8972: POP
// end ;
8973: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
8974: LD_INT 22
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 33
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 69
9002: PPUSH
9003: CALL_OW 306
9007: IFFALSE 9153
9009: GO 9011
9011: DISABLE
// begin case JMMGirl of 1 :
9012: LD_EXP 2
9016: PUSH
9017: LD_INT 1
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9062
9025: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D5-JMM-1
9033: PPUSH
9034: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9038: LD_INT 77
9040: PPUSH
9041: LD_INT 87
9043: PPUSH
9044: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9048: LD_EXP 10
9052: PPUSH
9053: LD_STRING D5-Joan-1
9055: PPUSH
9056: CALL_OW 88
// end ; 2 :
9060: GO 9153
9062: LD_INT 2
9064: DOUBLE
9065: EQUAL
9066: IFTRUE 9070
9068: GO 9107
9070: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9071: LD_EXP 8
9075: PPUSH
9076: LD_STRING D5-JMM-1
9078: PPUSH
9079: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9083: LD_INT 77
9085: PPUSH
9086: LD_INT 87
9088: PPUSH
9089: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9093: LD_EXP 11
9097: PPUSH
9098: LD_STRING D5-Lisa-1
9100: PPUSH
9101: CALL_OW 88
// end ; 3 :
9105: GO 9153
9107: LD_INT 3
9109: DOUBLE
9110: EQUAL
9111: IFTRUE 9115
9113: GO 9152
9115: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D5-JMM-1
9123: PPUSH
9124: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9128: LD_INT 77
9130: PPUSH
9131: LD_INT 87
9133: PPUSH
9134: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9138: LD_EXP 12
9142: PPUSH
9143: LD_STRING D5-Con-1
9145: PPUSH
9146: CALL_OW 88
// end ; end ;
9150: GO 9153
9152: POP
// end ;
9153: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9154: LD_EXP 8
9158: PPUSH
9159: CALL_OW 310
9163: PPUSH
9164: LD_INT 16
9166: PPUSH
9167: CALL_OW 308
9171: IFFALSE 9521
9173: GO 9175
9175: DISABLE
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
// begin enable ;
9180: ENABLE
// if JMMGirl = 1 then
9181: LD_EXP 2
9185: PUSH
9186: LD_INT 1
9188: EQUAL
9189: IFFALSE 9206
// JMMGirlVeh := IsInUnit ( Joan ) ;
9191: LD_ADDR_VAR 0 1
9195: PUSH
9196: LD_EXP 10
9200: PPUSH
9201: CALL_OW 310
9205: ST_TO_ADDR
// if JMMGirl = 2 then
9206: LD_EXP 2
9210: PUSH
9211: LD_INT 2
9213: EQUAL
9214: IFFALSE 9231
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9216: LD_ADDR_VAR 0 1
9220: PUSH
9221: LD_EXP 11
9225: PPUSH
9226: CALL_OW 310
9230: ST_TO_ADDR
// if JMMGirl = 3 then
9231: LD_EXP 2
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9256
// JMMGirlVeh := IsInUnit ( Connie ) ;
9241: LD_ADDR_VAR 0 1
9245: PUSH
9246: LD_EXP 12
9250: PPUSH
9251: CALL_OW 310
9255: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9256: LD_EXP 8
9260: PPUSH
9261: CALL_OW 310
9265: PPUSH
9266: LD_EXP 10
9270: PPUSH
9271: CALL_OW 310
9275: PPUSH
9276: CALL_OW 296
9280: PUSH
9281: LD_INT 10
9283: LESS
9284: PUSH
9285: LD_EXP 8
9289: PPUSH
9290: CALL_OW 310
9294: PPUSH
9295: LD_EXP 11
9299: PPUSH
9300: CALL_OW 310
9304: PPUSH
9305: CALL_OW 296
9309: PUSH
9310: LD_INT 10
9312: LESS
9313: OR
9314: PUSH
9315: LD_EXP 8
9319: PPUSH
9320: CALL_OW 310
9324: PPUSH
9325: LD_EXP 12
9329: PPUSH
9330: CALL_OW 310
9334: PPUSH
9335: CALL_OW 296
9339: PUSH
9340: LD_INT 10
9342: LESS
9343: OR
9344: IFFALSE 9441
// begin case Query ( Q3b ) of 1 :
9346: LD_STRING Q3b
9348: PPUSH
9349: CALL_OW 97
9353: PUSH
9354: LD_INT 1
9356: DOUBLE
9357: EQUAL
9358: IFTRUE 9362
9360: GO 9438
9362: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 265
9372: PUSH
9373: EMPTY
9374: LIST
9375: PUSH
9376: LD_VAR 0 1
9380: PPUSH
9381: CALL_OW 262
9385: PUSH
9386: EMPTY
9387: LIST
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 263
9398: PUSH
9399: EMPTY
9400: LIST
9401: PUSH
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 264
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: PPUSH
9421: LD_STRING 14_JMMGirlVeh_1
9423: PPUSH
9424: CALL_OW 39
// FinishMission ( false ) ;
9428: LD_INT 0
9430: PPUSH
9431: CALL 9664 0 1
// disable ;
9435: DISABLE
// end ; end ;
9436: GO 9439
9438: POP
// end else
9439: GO 9521
// begin if JMMGirl = 1 then
9441: LD_EXP 2
9445: PUSH
9446: LD_INT 1
9448: EQUAL
9449: IFFALSE 9466
// dec := Query ( Q3bJ ) else
9451: LD_ADDR_VAR 0 2
9455: PUSH
9456: LD_STRING Q3bJ
9458: PPUSH
9459: CALL_OW 97
9463: ST_TO_ADDR
9464: GO 9504
// if JMMGirl = 2 then
9466: LD_EXP 2
9470: PUSH
9471: LD_INT 2
9473: EQUAL
9474: IFFALSE 9491
// dec := Query ( Q3bL ) else
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_STRING Q3bL
9483: PPUSH
9484: CALL_OW 97
9488: ST_TO_ADDR
9489: GO 9504
// dec := Query ( Q3bX ) ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_STRING Q3bX
9498: PPUSH
9499: CALL_OW 97
9503: ST_TO_ADDR
// if dec = 1 then
9504: LD_VAR 0 2
9508: PUSH
9509: LD_INT 1
9511: EQUAL
9512: IFFALSE 9521
// FinishMission ( false ) ;
9514: LD_INT 0
9516: PPUSH
9517: CALL 9664 0 1
// end ; end ;
9521: PPOPN 2
9523: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9524: LD_INT 22
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 1
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: PUSH
9553: LD_INT 0
9555: EQUAL
9556: IFFALSE 9663
9558: GO 9560
9560: DISABLE
// begin DialogueOn ;
9561: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9565: LD_EXP 8
9569: PPUSH
9570: LD_STRING DEnd-JMM-1
9572: PPUSH
9573: CALL_OW 88
// case JMMGirl of 1 :
9577: LD_EXP 2
9581: PUSH
9582: LD_INT 1
9584: DOUBLE
9585: EQUAL
9586: IFTRUE 9590
9588: GO 9605
9590: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9591: LD_EXP 10
9595: PPUSH
9596: LD_STRING DEnd-Joan-1
9598: PPUSH
9599: CALL_OW 88
9603: GO 9652
9605: LD_INT 2
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9628
9613: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9614: LD_EXP 11
9618: PPUSH
9619: LD_STRING DEnd-Lisa-1
9621: PPUSH
9622: CALL_OW 88
9626: GO 9652
9628: LD_INT 3
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9651
9636: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9637: LD_EXP 12
9641: PPUSH
9642: LD_STRING DEnd-Con-1
9644: PPUSH
9645: CALL_OW 88
9649: GO 9652
9651: POP
// DialogueOff ;
9652: CALL_OW 7
// FinishMission ( false ) ;
9656: LD_INT 0
9658: PPUSH
9659: CALL 9664 0 1
// end ;
9663: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9664: LD_INT 0
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
// m1 := false ;
9672: LD_ADDR_VAR 0 4
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// m2 := false ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// m3 := false ;
9688: LD_ADDR_VAR 0 6
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9696: LD_ADDR_VAR 0 7
9700: PUSH
9701: LD_INT 22
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 21
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: PUSH
9730: LD_INT 0
9732: EQUAL
9733: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9734: LD_EXP 8
9738: PPUSH
9739: LD_STRING 14_JMM
9741: PPUSH
9742: CALL_OW 38
// if tick <= 50 50$00 then
9746: LD_OWVAR 1
9750: PUSH
9751: LD_INT 105000
9753: LESSEQUAL
9754: IFFALSE 9763
// SetAchievement ( ACH_ASPEED_14 ) ;
9756: LD_STRING ACH_ASPEED_14
9758: PPUSH
9759: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9763: LD_EXP 8
9767: PPUSH
9768: CALL_OW 310
9772: PUSH
9773: LD_EXP 8
9777: PPUSH
9778: CALL_OW 310
9782: PPUSH
9783: CALL_OW 247
9787: PUSH
9788: LD_INT 2
9790: EQUAL
9791: AND
9792: IFFALSE 9874
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_EXP 8
9803: PPUSH
9804: CALL_OW 310
9808: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9809: LD_VAR 0 3
9813: PPUSH
9814: CALL_OW 265
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: CALL_OW 262
9831: PUSH
9832: EMPTY
9833: LIST
9834: PUSH
9835: LD_VAR 0 3
9839: PPUSH
9840: CALL_OW 263
9844: PUSH
9845: EMPTY
9846: LIST
9847: PUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: CALL_OW 264
9857: PUSH
9858: EMPTY
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: LD_STRING 14_JMMVeh_1
9869: PPUSH
9870: CALL_OW 39
// end ; if fastEnd then
9874: LD_VAR 0 1
9878: IFFALSE 9969
// begin AddMedal ( fastend , - 1 ) ;
9880: LD_STRING fastend
9882: PPUSH
9883: LD_INT 1
9885: NEG
9886: PPUSH
9887: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9891: LD_STRING fastend
9893: PPUSH
9894: LD_INT 1
9896: NEG
9897: PPUSH
9898: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9902: LD_STRING fastend
9904: PPUSH
9905: LD_INT 1
9907: NEG
9908: PPUSH
9909: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9913: LD_EXP 2
9917: PPUSH
9918: LD_STRING 14_JMMGirl_1
9920: PPUSH
9921: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 0
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9935: LD_INT 0
9937: PPUSH
9938: LD_STRING 14_KappaStatus_1
9940: PPUSH
9941: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9945: LD_STRING Eliminate
9947: PPUSH
9948: CALL_OW 102
// RewardPeople ( JMM ) ;
9952: LD_EXP 8
9956: PPUSH
9957: CALL_OW 43
// YouWin ;
9961: CALL_OW 103
// exit ;
9965: GO 10615
// end else
9967: GO 10508
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9969: LD_EXP 2
9973: PPUSH
9974: LD_STRING 14_JMMGirl_1
9976: PPUSH
9977: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
9981: LD_VAR 0 7
9985: PPUSH
9986: LD_STRING 14_KappaStatus_1
9988: PPUSH
9989: CALL_OW 39
// case JMMGirl of 1 :
9993: LD_EXP 2
9997: PUSH
9998: LD_INT 1
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10006
10004: GO 10134
10006: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10007: LD_EXP 10
10011: PPUSH
10012: CALL_OW 302
10016: PUSH
10017: LD_EXP 10
10021: PPUSH
10022: CALL_OW 255
10026: PUSH
10027: LD_INT 1
10029: EQUAL
10030: AND
10031: PUSH
10032: LD_VAR 0 7
10036: PUSH
10037: LD_EXP 8
10041: PPUSH
10042: CALL_OW 310
10046: PPUSH
10047: LD_EXP 10
10051: PPUSH
10052: CALL_OW 310
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 10
10064: LESS
10065: OR
10066: AND
10067: IFFALSE 10111
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10069: LD_INT 1
10071: PPUSH
10072: LD_STRING 14_JMMGirlStatus_1
10074: PPUSH
10075: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10079: LD_EXP 10
10083: PPUSH
10084: LD_STRING 14_Joan
10086: PPUSH
10087: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10091: LD_STRING protect
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 101
// m1 := true ;
10101: LD_ADDR_VAR 0 4
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// end else
10109: GO 10132
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10111: LD_INT 0
10113: PPUSH
10114: LD_STRING 14_JMMGirlStatus_1
10116: PPUSH
10117: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10121: LD_STRING protect
10123: PPUSH
10124: LD_INT 1
10126: NEG
10127: PPUSH
10128: CALL_OW 101
// end ; end ; 2 :
10132: GO 10407
10134: LD_INT 2
10136: DOUBLE
10137: EQUAL
10138: IFTRUE 10142
10140: GO 10270
10142: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10143: LD_EXP 11
10147: PPUSH
10148: CALL_OW 302
10152: PUSH
10153: LD_EXP 11
10157: PPUSH
10158: CALL_OW 255
10162: PUSH
10163: LD_INT 1
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_VAR 0 7
10172: PUSH
10173: LD_EXP 8
10177: PPUSH
10178: CALL_OW 310
10182: PPUSH
10183: LD_EXP 11
10187: PPUSH
10188: CALL_OW 310
10192: PPUSH
10193: CALL_OW 296
10197: PUSH
10198: LD_INT 10
10200: LESS
10201: OR
10202: AND
10203: IFFALSE 10247
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10205: LD_INT 1
10207: PPUSH
10208: LD_STRING 14_JMMGirlStatus_1
10210: PPUSH
10211: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10215: LD_EXP 11
10219: PPUSH
10220: LD_STRING 14_Lisa
10222: PPUSH
10223: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10227: LD_STRING protect
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: CALL_OW 101
// m1 := true ;
10237: LD_ADDR_VAR 0 4
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// end else
10245: GO 10268
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10247: LD_INT 0
10249: PPUSH
10250: LD_STRING 14_JMMGirlStatus_1
10252: PPUSH
10253: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10257: LD_STRING protect
10259: PPUSH
10260: LD_INT 2
10262: NEG
10263: PPUSH
10264: CALL_OW 101
// end ; end ; 3 :
10268: GO 10407
10270: LD_INT 3
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10406
10278: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10279: LD_EXP 12
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 12
10293: PPUSH
10294: CALL_OW 255
10298: PUSH
10299: LD_INT 1
10301: EQUAL
10302: AND
10303: PUSH
10304: LD_VAR 0 7
10308: PUSH
10309: LD_EXP 8
10313: PPUSH
10314: CALL_OW 310
10318: PPUSH
10319: LD_EXP 12
10323: PPUSH
10324: CALL_OW 310
10328: PPUSH
10329: CALL_OW 296
10333: PUSH
10334: LD_INT 10
10336: LESS
10337: OR
10338: AND
10339: IFFALSE 10383
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10341: LD_INT 1
10343: PPUSH
10344: LD_STRING 14_JMMGirlStatus_1
10346: PPUSH
10347: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10351: LD_EXP 12
10355: PPUSH
10356: LD_STRING 14_Connie
10358: PPUSH
10359: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10363: LD_STRING protect
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 101
// m1 := true ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// end else
10381: GO 10404
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10383: LD_INT 0
10385: PPUSH
10386: LD_STRING 14_JMMGirlStatus_1
10388: PPUSH
10389: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10393: LD_STRING protect
10395: PPUSH
10396: LD_INT 3
10398: NEG
10399: PPUSH
10400: CALL_OW 101
// end ; end ; end ;
10404: GO 10407
10406: POP
// if amLaserCounter >= 2 then
10407: LD_EXP 7
10411: PUSH
10412: LD_INT 2
10414: GREATEREQUAL
10415: IFFALSE 10437
// begin AddMedal ( double , 1 ) ;
10417: LD_STRING double
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 101
// m2 := true ;
10427: LD_ADDR_VAR 0 5
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// end else
10435: GO 10471
// begin if amLaserCounter = 1 then
10437: LD_EXP 7
10441: PUSH
10442: LD_INT 1
10444: EQUAL
10445: IFFALSE 10460
// AddMedal ( double , - 2 ) else
10447: LD_STRING double
10449: PPUSH
10450: LD_INT 2
10452: NEG
10453: PPUSH
10454: CALL_OW 101
10458: GO 10471
// AddMedal ( double , - 1 ) ;
10460: LD_STRING double
10462: PPUSH
10463: LD_INT 1
10465: NEG
10466: PPUSH
10467: CALL_OW 101
// end ; if ruEliminated then
10471: LD_VAR 0 7
10475: IFFALSE 10497
// begin AddMedal ( base , 1 ) ;
10477: LD_STRING base
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 101
// m3 := true ;
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// end else
10495: GO 10508
// AddMedal ( base , - 1 ) ;
10497: LD_STRING base
10499: PPUSH
10500: LD_INT 1
10502: NEG
10503: PPUSH
10504: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10508: LD_VAR 0 4
10512: PUSH
10513: LD_VAR 0 5
10517: AND
10518: PUSH
10519: LD_VAR 0 6
10523: AND
10524: PUSH
10525: LD_OWVAR 67
10529: PUSH
10530: LD_INT 3
10532: GREATEREQUAL
10533: AND
10534: IFFALSE 10546
// SetAchievementEX ( ACH_AMER , 14 ) ;
10536: LD_STRING ACH_AMER
10538: PPUSH
10539: LD_INT 14
10541: PPUSH
10542: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10546: LD_STRING Eliminate
10548: PPUSH
10549: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10553: LD_INT 22
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 3
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 16
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: CALL_OW 43
// YouWin ;
10611: CALL_OW 103
// end ; end_of_file
10615: LD_VAR 0 2
10619: RET
// export function CreateNature ; var i , un ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
// PrepareEnchidna ;
10625: CALL 65195 0 0
// for i := 1 to 3 do
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_INT 3
10641: PUSH
10642: FOR_TO
10643: IFFALSE 10692
// begin un := CreateHuman ;
10645: LD_ADDR_VAR 0 3
10649: PUSH
10650: CALL_OW 44
10654: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 5
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 9
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 49
// end ;
10690: GO 10642
10692: POP
10693: POP
// PrepareHorse ;
10694: CALL 65355 0 0
// for i := 1 to 2 do
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: DOUBLE
10704: LD_INT 1
10706: DEC
10707: ST_TO_ADDR
10708: LD_INT 2
10710: PUSH
10711: FOR_TO
10712: IFFALSE 10761
// begin un := CreateHuman ;
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: LD_INT 5
10734: PPUSH
10735: CALL_OW 12
10739: PPUSH
10740: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 9
10751: PPUSH
10752: LD_INT 0
10754: PPUSH
10755: CALL_OW 49
// end ;
10759: GO 10711
10761: POP
10762: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: DOUBLE
10769: LD_INT 1
10771: DEC
10772: ST_TO_ADDR
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 5
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_OWVAR 67
10795: ARRAY
10796: PUSH
10797: FOR_TO
10798: IFFALSE 10862
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
10800: LD_INT 0
10802: PPUSH
10803: LD_INT 5
10805: PPUSH
10806: CALL_OW 12
10810: PPUSH
10811: CALL 65026 0 1
// un := CreateHuman ;
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 0
10832: PPUSH
10833: LD_INT 5
10835: PPUSH
10836: CALL_OW 12
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 8
10852: PPUSH
10853: LD_INT 0
10855: PPUSH
10856: CALL_OW 49
// end ;
10860: GO 10797
10862: POP
10863: POP
// PrepareFish ;
10864: CALL 65275 0 0
// for i := 1 to 2 do
10868: LD_ADDR_VAR 0 2
10872: PUSH
10873: DOUBLE
10874: LD_INT 1
10876: DEC
10877: ST_TO_ADDR
10878: LD_INT 2
10880: PUSH
10881: FOR_TO
10882: IFFALSE 10931
// begin un := CreateHuman ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 0
10901: PPUSH
10902: LD_INT 5
10904: PPUSH
10905: CALL_OW 12
10909: PPUSH
10910: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 6
10921: PPUSH
10922: LD_INT 0
10924: PPUSH
10925: CALL_OW 49
// end ;
10929: GO 10881
10931: POP
10932: POP
// PrepareFrog ;
10933: CALL 65235 0 0
// for i := 1 to 2 do
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_INT 2
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11000
// begin un := CreateHuman ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: PPUSH
10979: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 7
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// end ;
10998: GO 10950
11000: POP
11001: POP
// PrepareMastodont ;
11002: CALL 65395 0 0
// un := CreateVehicle ;
11006: LD_ADDR_VAR 0 3
11010: PUSH
11011: CALL_OW 45
11015: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 166
11023: PPUSH
11024: LD_INT 134
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL 70886 0 5
// end ; end_of_file
11037: LD_VAR 0 1
11041: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11042: LD_INT 14
11044: PPUSH
11045: CALL_OW 435
11049: PUSH
11050: LD_INT 20
11052: LESS
11053: IFFALSE 11095
11055: GO 11057
11057: DISABLE
// begin enable ;
11058: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11059: LD_INT 35
11061: PPUSH
11062: LD_INT 735
11064: PPUSH
11065: CALL_OW 12
11069: PPUSH
11070: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11074: LD_INT 1
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 12
11084: PPUSH
11085: LD_INT 14
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 55
// end ;
11095: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11096: LD_INT 13
11098: PPUSH
11099: CALL_OW 435
11103: PUSH
11104: LD_INT 30
11106: LESS
11107: IFFALSE 11149
11109: GO 11111
11111: DISABLE
// begin enable ;
11112: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11113: LD_INT 35
11115: PPUSH
11116: LD_INT 735
11118: PPUSH
11119: CALL_OW 12
11123: PPUSH
11124: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 5
11133: PPUSH
11134: CALL_OW 12
11138: PPUSH
11139: LD_INT 13
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 55
// end ;
11149: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11150: LD_INT 13
11152: PPUSH
11153: CALL_OW 435
11157: PUSH
11158: LD_INT 30
11160: LESS
11161: IFFALSE 11194
11163: GO 11165
11165: DISABLE
// begin enable ;
11166: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11167: LD_INT 1
11169: PPUSH
11170: LD_INT 5
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: LD_INT 133
11180: PPUSH
11181: LD_INT 122
11183: PPUSH
11184: LD_INT 20
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 56
// end ; end_of_file end_of_file
11194: END
// export globalGameSaveCounter ; every 0 0$1 do
11195: GO 11197
11197: DISABLE
// begin enable ;
11198: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11199: LD_STRING updateTimer(
11201: PUSH
11202: LD_OWVAR 1
11206: STR
11207: PUSH
11208: LD_STRING );
11210: STR
11211: PPUSH
11212: CALL_OW 559
// end ;
11216: END
// every 0 0$1 do
11217: GO 11219
11219: DISABLE
// begin globalGameSaveCounter := 0 ;
11220: LD_ADDR_EXP 21
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11228: LD_STRING setGameSaveCounter(0)
11230: PPUSH
11231: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11235: LD_STRING initStreamRollete();
11237: PPUSH
11238: CALL_OW 559
// InitStreamMode ;
11242: CALL 12568 0 0
// DefineStreamItems ( false ) ;
11246: LD_INT 0
11248: PPUSH
11249: CALL 13032 0 1
// end ;
11253: END
// export function SOS_MapStart ( ) ; begin
11254: LD_INT 0
11256: PPUSH
// if streamModeActive then
11257: LD_EXP 22
11261: IFFALSE 11270
// DefineStreamItems ( true ) ;
11263: LD_INT 1
11265: PPUSH
11266: CALL 13032 0 1
// UpdateLuaVariables ( ) ;
11270: CALL 11287 0 0
// UpdateFactoryWaypoints ( ) ;
11274: CALL 25893 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11278: CALL 26150 0 0
// end ;
11282: LD_VAR 0 1
11286: RET
// function UpdateLuaVariables ( ) ; begin
11287: LD_INT 0
11289: PPUSH
// if globalGameSaveCounter then
11290: LD_EXP 21
11294: IFFALSE 11328
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11296: LD_ADDR_EXP 21
11300: PUSH
11301: LD_EXP 21
11305: PPUSH
11306: CALL 70107 0 1
11310: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11311: LD_STRING setGameSaveCounter(
11313: PUSH
11314: LD_EXP 21
11318: STR
11319: PUSH
11320: LD_STRING )
11322: STR
11323: PPUSH
11324: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11328: LD_STRING setGameDifficulty(
11330: PUSH
11331: LD_OWVAR 67
11335: STR
11336: PUSH
11337: LD_STRING )
11339: STR
11340: PPUSH
11341: CALL_OW 559
// end ;
11345: LD_VAR 0 1
11349: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11350: LD_INT 0
11352: PPUSH
// if p2 = stream_mode then
11353: LD_VAR 0 2
11357: PUSH
11358: LD_INT 100
11360: EQUAL
11361: IFFALSE 12364
// begin if not StreamModeActive then
11363: LD_EXP 22
11367: NOT
11368: IFFALSE 11378
// StreamModeActive := true ;
11370: LD_ADDR_EXP 22
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 0 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 0
11385: EQUAL
11386: IFFALSE 11392
// InitStreamMode ;
11388: CALL 12568 0 0
// if p3 = 1 then
11392: LD_VAR 0 3
11396: PUSH
11397: LD_INT 1
11399: EQUAL
11400: IFFALSE 11410
// sRocket := true ;
11402: LD_ADDR_EXP 27
11406: PUSH
11407: LD_INT 1
11409: ST_TO_ADDR
// if p3 = 2 then
11410: LD_VAR 0 3
11414: PUSH
11415: LD_INT 2
11417: EQUAL
11418: IFFALSE 11428
// sSpeed := true ;
11420: LD_ADDR_EXP 26
11424: PUSH
11425: LD_INT 1
11427: ST_TO_ADDR
// if p3 = 3 then
11428: LD_VAR 0 3
11432: PUSH
11433: LD_INT 3
11435: EQUAL
11436: IFFALSE 11446
// sEngine := true ;
11438: LD_ADDR_EXP 28
11442: PUSH
11443: LD_INT 1
11445: ST_TO_ADDR
// if p3 = 4 then
11446: LD_VAR 0 3
11450: PUSH
11451: LD_INT 4
11453: EQUAL
11454: IFFALSE 11464
// sSpec := true ;
11456: LD_ADDR_EXP 25
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// if p3 = 5 then
11464: LD_VAR 0 3
11468: PUSH
11469: LD_INT 5
11471: EQUAL
11472: IFFALSE 11482
// sLevel := true ;
11474: LD_ADDR_EXP 29
11478: PUSH
11479: LD_INT 1
11481: ST_TO_ADDR
// if p3 = 6 then
11482: LD_VAR 0 3
11486: PUSH
11487: LD_INT 6
11489: EQUAL
11490: IFFALSE 11500
// sArmoury := true ;
11492: LD_ADDR_EXP 30
11496: PUSH
11497: LD_INT 1
11499: ST_TO_ADDR
// if p3 = 7 then
11500: LD_VAR 0 3
11504: PUSH
11505: LD_INT 7
11507: EQUAL
11508: IFFALSE 11518
// sRadar := true ;
11510: LD_ADDR_EXP 31
11514: PUSH
11515: LD_INT 1
11517: ST_TO_ADDR
// if p3 = 8 then
11518: LD_VAR 0 3
11522: PUSH
11523: LD_INT 8
11525: EQUAL
11526: IFFALSE 11536
// sBunker := true ;
11528: LD_ADDR_EXP 32
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// if p3 = 9 then
11536: LD_VAR 0 3
11540: PUSH
11541: LD_INT 9
11543: EQUAL
11544: IFFALSE 11554
// sHack := true ;
11546: LD_ADDR_EXP 33
11550: PUSH
11551: LD_INT 1
11553: ST_TO_ADDR
// if p3 = 10 then
11554: LD_VAR 0 3
11558: PUSH
11559: LD_INT 10
11561: EQUAL
11562: IFFALSE 11572
// sFire := true ;
11564: LD_ADDR_EXP 34
11568: PUSH
11569: LD_INT 1
11571: ST_TO_ADDR
// if p3 = 11 then
11572: LD_VAR 0 3
11576: PUSH
11577: LD_INT 11
11579: EQUAL
11580: IFFALSE 11590
// sRefresh := true ;
11582: LD_ADDR_EXP 35
11586: PUSH
11587: LD_INT 1
11589: ST_TO_ADDR
// if p3 = 12 then
11590: LD_VAR 0 3
11594: PUSH
11595: LD_INT 12
11597: EQUAL
11598: IFFALSE 11608
// sExp := true ;
11600: LD_ADDR_EXP 36
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// if p3 = 13 then
11608: LD_VAR 0 3
11612: PUSH
11613: LD_INT 13
11615: EQUAL
11616: IFFALSE 11626
// sDepot := true ;
11618: LD_ADDR_EXP 37
11622: PUSH
11623: LD_INT 1
11625: ST_TO_ADDR
// if p3 = 14 then
11626: LD_VAR 0 3
11630: PUSH
11631: LD_INT 14
11633: EQUAL
11634: IFFALSE 11644
// sFlag := true ;
11636: LD_ADDR_EXP 38
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// if p3 = 15 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 15
11651: EQUAL
11652: IFFALSE 11662
// sKamikadze := true ;
11654: LD_ADDR_EXP 46
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// if p3 = 16 then
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 16
11669: EQUAL
11670: IFFALSE 11680
// sTroll := true ;
11672: LD_ADDR_EXP 47
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 17 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 17
11687: EQUAL
11688: IFFALSE 11698
// sSlow := true ;
11690: LD_ADDR_EXP 48
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// if p3 = 18 then
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 18
11705: EQUAL
11706: IFFALSE 11716
// sLack := true ;
11708: LD_ADDR_EXP 49
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// if p3 = 19 then
11716: LD_VAR 0 3
11720: PUSH
11721: LD_INT 19
11723: EQUAL
11724: IFFALSE 11734
// sTank := true ;
11726: LD_ADDR_EXP 51
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// if p3 = 20 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 20
11741: EQUAL
11742: IFFALSE 11752
// sRemote := true ;
11744: LD_ADDR_EXP 52
11748: PUSH
11749: LD_INT 1
11751: ST_TO_ADDR
// if p3 = 21 then
11752: LD_VAR 0 3
11756: PUSH
11757: LD_INT 21
11759: EQUAL
11760: IFFALSE 11770
// sPowell := true ;
11762: LD_ADDR_EXP 53
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// if p3 = 22 then
11770: LD_VAR 0 3
11774: PUSH
11775: LD_INT 22
11777: EQUAL
11778: IFFALSE 11788
// sTeleport := true ;
11780: LD_ADDR_EXP 56
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// if p3 = 23 then
11788: LD_VAR 0 3
11792: PUSH
11793: LD_INT 23
11795: EQUAL
11796: IFFALSE 11806
// sOilTower := true ;
11798: LD_ADDR_EXP 58
11802: PUSH
11803: LD_INT 1
11805: ST_TO_ADDR
// if p3 = 24 then
11806: LD_VAR 0 3
11810: PUSH
11811: LD_INT 24
11813: EQUAL
11814: IFFALSE 11824
// sShovel := true ;
11816: LD_ADDR_EXP 59
11820: PUSH
11821: LD_INT 1
11823: ST_TO_ADDR
// if p3 = 25 then
11824: LD_VAR 0 3
11828: PUSH
11829: LD_INT 25
11831: EQUAL
11832: IFFALSE 11842
// sSheik := true ;
11834: LD_ADDR_EXP 60
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// if p3 = 26 then
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 26
11849: EQUAL
11850: IFFALSE 11860
// sEarthquake := true ;
11852: LD_ADDR_EXP 62
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// if p3 = 27 then
11860: LD_VAR 0 3
11864: PUSH
11865: LD_INT 27
11867: EQUAL
11868: IFFALSE 11878
// sAI := true ;
11870: LD_ADDR_EXP 63
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// if p3 = 28 then
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 28
11885: EQUAL
11886: IFFALSE 11896
// sCargo := true ;
11888: LD_ADDR_EXP 66
11892: PUSH
11893: LD_INT 1
11895: ST_TO_ADDR
// if p3 = 29 then
11896: LD_VAR 0 3
11900: PUSH
11901: LD_INT 29
11903: EQUAL
11904: IFFALSE 11914
// sDLaser := true ;
11906: LD_ADDR_EXP 67
11910: PUSH
11911: LD_INT 1
11913: ST_TO_ADDR
// if p3 = 30 then
11914: LD_VAR 0 3
11918: PUSH
11919: LD_INT 30
11921: EQUAL
11922: IFFALSE 11932
// sExchange := true ;
11924: LD_ADDR_EXP 68
11928: PUSH
11929: LD_INT 1
11931: ST_TO_ADDR
// if p3 = 31 then
11932: LD_VAR 0 3
11936: PUSH
11937: LD_INT 31
11939: EQUAL
11940: IFFALSE 11950
// sFac := true ;
11942: LD_ADDR_EXP 69
11946: PUSH
11947: LD_INT 1
11949: ST_TO_ADDR
// if p3 = 32 then
11950: LD_VAR 0 3
11954: PUSH
11955: LD_INT 32
11957: EQUAL
11958: IFFALSE 11968
// sPower := true ;
11960: LD_ADDR_EXP 70
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// if p3 = 33 then
11968: LD_VAR 0 3
11972: PUSH
11973: LD_INT 33
11975: EQUAL
11976: IFFALSE 11986
// sRandom := true ;
11978: LD_ADDR_EXP 71
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// if p3 = 34 then
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 34
11993: EQUAL
11994: IFFALSE 12004
// sShield := true ;
11996: LD_ADDR_EXP 72
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// if p3 = 35 then
12004: LD_VAR 0 3
12008: PUSH
12009: LD_INT 35
12011: EQUAL
12012: IFFALSE 12022
// sTime := true ;
12014: LD_ADDR_EXP 73
12018: PUSH
12019: LD_INT 1
12021: ST_TO_ADDR
// if p3 = 36 then
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 36
12029: EQUAL
12030: IFFALSE 12040
// sTools := true ;
12032: LD_ADDR_EXP 74
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// if p3 = 101 then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 101
12047: EQUAL
12048: IFFALSE 12058
// sSold := true ;
12050: LD_ADDR_EXP 39
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// if p3 = 102 then
12058: LD_VAR 0 3
12062: PUSH
12063: LD_INT 102
12065: EQUAL
12066: IFFALSE 12076
// sDiff := true ;
12068: LD_ADDR_EXP 40
12072: PUSH
12073: LD_INT 1
12075: ST_TO_ADDR
// if p3 = 103 then
12076: LD_VAR 0 3
12080: PUSH
12081: LD_INT 103
12083: EQUAL
12084: IFFALSE 12094
// sFog := true ;
12086: LD_ADDR_EXP 43
12090: PUSH
12091: LD_INT 1
12093: ST_TO_ADDR
// if p3 = 104 then
12094: LD_VAR 0 3
12098: PUSH
12099: LD_INT 104
12101: EQUAL
12102: IFFALSE 12112
// sReset := true ;
12104: LD_ADDR_EXP 44
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// if p3 = 105 then
12112: LD_VAR 0 3
12116: PUSH
12117: LD_INT 105
12119: EQUAL
12120: IFFALSE 12130
// sSun := true ;
12122: LD_ADDR_EXP 45
12126: PUSH
12127: LD_INT 1
12129: ST_TO_ADDR
// if p3 = 106 then
12130: LD_VAR 0 3
12134: PUSH
12135: LD_INT 106
12137: EQUAL
12138: IFFALSE 12148
// sTiger := true ;
12140: LD_ADDR_EXP 41
12144: PUSH
12145: LD_INT 1
12147: ST_TO_ADDR
// if p3 = 107 then
12148: LD_VAR 0 3
12152: PUSH
12153: LD_INT 107
12155: EQUAL
12156: IFFALSE 12166
// sBomb := true ;
12158: LD_ADDR_EXP 42
12162: PUSH
12163: LD_INT 1
12165: ST_TO_ADDR
// if p3 = 108 then
12166: LD_VAR 0 3
12170: PUSH
12171: LD_INT 108
12173: EQUAL
12174: IFFALSE 12184
// sWound := true ;
12176: LD_ADDR_EXP 50
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// if p3 = 109 then
12184: LD_VAR 0 3
12188: PUSH
12189: LD_INT 109
12191: EQUAL
12192: IFFALSE 12202
// sBetray := true ;
12194: LD_ADDR_EXP 54
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// if p3 = 110 then
12202: LD_VAR 0 3
12206: PUSH
12207: LD_INT 110
12209: EQUAL
12210: IFFALSE 12220
// sContamin := true ;
12212: LD_ADDR_EXP 55
12216: PUSH
12217: LD_INT 1
12219: ST_TO_ADDR
// if p3 = 111 then
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 111
12227: EQUAL
12228: IFFALSE 12238
// sOil := true ;
12230: LD_ADDR_EXP 57
12234: PUSH
12235: LD_INT 1
12237: ST_TO_ADDR
// if p3 = 112 then
12238: LD_VAR 0 3
12242: PUSH
12243: LD_INT 112
12245: EQUAL
12246: IFFALSE 12256
// sStu := true ;
12248: LD_ADDR_EXP 61
12252: PUSH
12253: LD_INT 1
12255: ST_TO_ADDR
// if p3 = 113 then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 113
12263: EQUAL
12264: IFFALSE 12274
// sBazooka := true ;
12266: LD_ADDR_EXP 64
12270: PUSH
12271: LD_INT 1
12273: ST_TO_ADDR
// if p3 = 114 then
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 114
12281: EQUAL
12282: IFFALSE 12292
// sMortar := true ;
12284: LD_ADDR_EXP 65
12288: PUSH
12289: LD_INT 1
12291: ST_TO_ADDR
// if p3 = 115 then
12292: LD_VAR 0 3
12296: PUSH
12297: LD_INT 115
12299: EQUAL
12300: IFFALSE 12310
// sRanger := true ;
12302: LD_ADDR_EXP 75
12306: PUSH
12307: LD_INT 1
12309: ST_TO_ADDR
// if p3 = 116 then
12310: LD_VAR 0 3
12314: PUSH
12315: LD_INT 116
12317: EQUAL
12318: IFFALSE 12328
// sComputer := true ;
12320: LD_ADDR_EXP 76
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// if p3 = 117 then
12328: LD_VAR 0 3
12332: PUSH
12333: LD_INT 117
12335: EQUAL
12336: IFFALSE 12346
// s30 := true ;
12338: LD_ADDR_EXP 77
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// if p3 = 118 then
12346: LD_VAR 0 3
12350: PUSH
12351: LD_INT 118
12353: EQUAL
12354: IFFALSE 12364
// s60 := true ;
12356: LD_ADDR_EXP 78
12360: PUSH
12361: LD_INT 1
12363: ST_TO_ADDR
// end ; if p2 = hack_mode then
12364: LD_VAR 0 2
12368: PUSH
12369: LD_INT 101
12371: EQUAL
12372: IFFALSE 12500
// begin case p3 of 1 :
12374: LD_VAR 0 3
12378: PUSH
12379: LD_INT 1
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12394
12387: POP
// hHackUnlimitedResources ; 2 :
12388: CALL 24639 0 0
12392: GO 12500
12394: LD_INT 2
12396: DOUBLE
12397: EQUAL
12398: IFTRUE 12402
12400: GO 12409
12402: POP
// hHackSetLevel10 ; 3 :
12403: CALL 24772 0 0
12407: GO 12500
12409: LD_INT 3
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12424
12417: POP
// hHackSetLevel10YourUnits ; 4 :
12418: CALL 24857 0 0
12422: GO 12500
12424: LD_INT 4
12426: DOUBLE
12427: EQUAL
12428: IFTRUE 12432
12430: GO 12439
12432: POP
// hHackInvincible ; 5 :
12433: CALL 25305 0 0
12437: GO 12500
12439: LD_INT 5
12441: DOUBLE
12442: EQUAL
12443: IFTRUE 12447
12445: GO 12454
12447: POP
// hHackInvisible ; 6 :
12448: CALL 25416 0 0
12452: GO 12500
12454: LD_INT 6
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12469
12462: POP
// hHackChangeYourSide ; 7 :
12463: CALL 25473 0 0
12467: GO 12500
12469: LD_INT 7
12471: DOUBLE
12472: EQUAL
12473: IFTRUE 12477
12475: GO 12484
12477: POP
// hHackChangeUnitSide ; 8 :
12478: CALL 25515 0 0
12482: GO 12500
12484: LD_INT 8
12486: DOUBLE
12487: EQUAL
12488: IFTRUE 12492
12490: GO 12499
12492: POP
// hHackFog ; end ;
12493: CALL 25616 0 0
12497: GO 12500
12499: POP
// end ; if p2 = game_save_mode then
12500: LD_VAR 0 2
12504: PUSH
12505: LD_INT 102
12507: EQUAL
12508: IFFALSE 12563
// begin if p3 = 1 then
12510: LD_VAR 0 3
12514: PUSH
12515: LD_INT 1
12517: EQUAL
12518: IFFALSE 12530
// globalGameSaveCounter := p4 ;
12520: LD_ADDR_EXP 21
12524: PUSH
12525: LD_VAR 0 4
12529: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12530: LD_VAR 0 3
12534: PUSH
12535: LD_INT 2
12537: EQUAL
12538: PUSH
12539: LD_EXP 21
12543: AND
12544: IFFALSE 12563
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12546: LD_STRING setGameSaveCounter(
12548: PUSH
12549: LD_EXP 21
12553: STR
12554: PUSH
12555: LD_STRING )
12557: STR
12558: PPUSH
12559: CALL_OW 559
// end ; end ;
12563: LD_VAR 0 7
12567: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12568: LD_INT 0
12570: PPUSH
// streamModeActive := false ;
12571: LD_ADDR_EXP 22
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// normalCounter := 36 ;
12579: LD_ADDR_EXP 23
12583: PUSH
12584: LD_INT 36
12586: ST_TO_ADDR
// hardcoreCounter := 18 ;
12587: LD_ADDR_EXP 24
12591: PUSH
12592: LD_INT 18
12594: ST_TO_ADDR
// sRocket := false ;
12595: LD_ADDR_EXP 27
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sSpeed := false ;
12603: LD_ADDR_EXP 26
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sEngine := false ;
12611: LD_ADDR_EXP 28
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sSpec := false ;
12619: LD_ADDR_EXP 25
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sLevel := false ;
12627: LD_ADDR_EXP 29
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sArmoury := false ;
12635: LD_ADDR_EXP 30
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sRadar := false ;
12643: LD_ADDR_EXP 31
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sBunker := false ;
12651: LD_ADDR_EXP 32
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sHack := false ;
12659: LD_ADDR_EXP 33
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sFire := false ;
12667: LD_ADDR_EXP 34
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sRefresh := false ;
12675: LD_ADDR_EXP 35
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sExp := false ;
12683: LD_ADDR_EXP 36
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sDepot := false ;
12691: LD_ADDR_EXP 37
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sFlag := false ;
12699: LD_ADDR_EXP 38
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sKamikadze := false ;
12707: LD_ADDR_EXP 46
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sTroll := false ;
12715: LD_ADDR_EXP 47
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sSlow := false ;
12723: LD_ADDR_EXP 48
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// sLack := false ;
12731: LD_ADDR_EXP 49
12735: PUSH
12736: LD_INT 0
12738: ST_TO_ADDR
// sTank := false ;
12739: LD_ADDR_EXP 51
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// sRemote := false ;
12747: LD_ADDR_EXP 52
12751: PUSH
12752: LD_INT 0
12754: ST_TO_ADDR
// sPowell := false ;
12755: LD_ADDR_EXP 53
12759: PUSH
12760: LD_INT 0
12762: ST_TO_ADDR
// sTeleport := false ;
12763: LD_ADDR_EXP 56
12767: PUSH
12768: LD_INT 0
12770: ST_TO_ADDR
// sOilTower := false ;
12771: LD_ADDR_EXP 58
12775: PUSH
12776: LD_INT 0
12778: ST_TO_ADDR
// sShovel := false ;
12779: LD_ADDR_EXP 59
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// sSheik := false ;
12787: LD_ADDR_EXP 60
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// sEarthquake := false ;
12795: LD_ADDR_EXP 62
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// sAI := false ;
12803: LD_ADDR_EXP 63
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// sCargo := false ;
12811: LD_ADDR_EXP 66
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// sDLaser := false ;
12819: LD_ADDR_EXP 67
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sExchange := false ;
12827: LD_ADDR_EXP 68
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sFac := false ;
12835: LD_ADDR_EXP 69
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sPower := false ;
12843: LD_ADDR_EXP 70
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sRandom := false ;
12851: LD_ADDR_EXP 71
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sShield := false ;
12859: LD_ADDR_EXP 72
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sTime := false ;
12867: LD_ADDR_EXP 73
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sTools := false ;
12875: LD_ADDR_EXP 74
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sSold := false ;
12883: LD_ADDR_EXP 39
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sDiff := false ;
12891: LD_ADDR_EXP 40
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sFog := false ;
12899: LD_ADDR_EXP 43
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sReset := false ;
12907: LD_ADDR_EXP 44
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sSun := false ;
12915: LD_ADDR_EXP 45
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sTiger := false ;
12923: LD_ADDR_EXP 41
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sBomb := false ;
12931: LD_ADDR_EXP 42
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sWound := false ;
12939: LD_ADDR_EXP 50
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// sBetray := false ;
12947: LD_ADDR_EXP 54
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// sContamin := false ;
12955: LD_ADDR_EXP 55
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// sOil := false ;
12963: LD_ADDR_EXP 57
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// sStu := false ;
12971: LD_ADDR_EXP 61
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// sBazooka := false ;
12979: LD_ADDR_EXP 64
12983: PUSH
12984: LD_INT 0
12986: ST_TO_ADDR
// sMortar := false ;
12987: LD_ADDR_EXP 65
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sRanger := false ;
12995: LD_ADDR_EXP 75
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sComputer := false ;
13003: LD_ADDR_EXP 76
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// s30 := false ;
13011: LD_ADDR_EXP 77
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// s60 := false ;
13019: LD_ADDR_EXP 78
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// end ;
13027: LD_VAR 0 1
13031: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13032: LD_INT 0
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
// result := [ ] ;
13041: LD_ADDR_VAR 0 2
13045: PUSH
13046: EMPTY
13047: ST_TO_ADDR
// if campaign_id = 1 then
13048: LD_OWVAR 69
13052: PUSH
13053: LD_INT 1
13055: EQUAL
13056: IFFALSE 16222
// begin case mission_number of 1 :
13058: LD_OWVAR 70
13062: PUSH
13063: LD_INT 1
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13147
13071: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13072: LD_ADDR_VAR 0 2
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 4
13082: PUSH
13083: LD_INT 11
13085: PUSH
13086: LD_INT 12
13088: PUSH
13089: LD_INT 15
13091: PUSH
13092: LD_INT 16
13094: PUSH
13095: LD_INT 22
13097: PUSH
13098: LD_INT 23
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 101
13117: PUSH
13118: LD_INT 102
13120: PUSH
13121: LD_INT 106
13123: PUSH
13124: LD_INT 116
13126: PUSH
13127: LD_INT 117
13129: PUSH
13130: LD_INT 118
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: ST_TO_ADDR
13145: GO 16220
13147: LD_INT 2
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13239
13155: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: LD_INT 4
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 15
13175: PUSH
13176: LD_INT 16
13178: PUSH
13179: LD_INT 22
13181: PUSH
13182: LD_INT 23
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 101
13201: PUSH
13202: LD_INT 102
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 108
13213: PUSH
13214: LD_INT 116
13216: PUSH
13217: LD_INT 117
13219: PUSH
13220: LD_INT 118
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: ST_TO_ADDR
13237: GO 16220
13239: LD_INT 3
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13335
13247: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 4
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: LD_INT 11
13264: PUSH
13265: LD_INT 12
13267: PUSH
13268: LD_INT 15
13270: PUSH
13271: LD_INT 16
13273: PUSH
13274: LD_INT 22
13276: PUSH
13277: LD_INT 26
13279: PUSH
13280: LD_INT 36
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 101
13297: PUSH
13298: LD_INT 102
13300: PUSH
13301: LD_INT 105
13303: PUSH
13304: LD_INT 106
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 116
13312: PUSH
13313: LD_INT 117
13315: PUSH
13316: LD_INT 118
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: ST_TO_ADDR
13333: GO 16220
13335: LD_INT 4
13337: DOUBLE
13338: EQUAL
13339: IFTRUE 13343
13341: GO 13439
13343: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 2
13351: PUSH
13352: LD_INT 4
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: LD_INT 8
13360: PUSH
13361: LD_INT 11
13363: PUSH
13364: LD_INT 12
13366: PUSH
13367: LD_INT 15
13369: PUSH
13370: LD_INT 16
13372: PUSH
13373: LD_INT 22
13375: PUSH
13376: LD_INT 23
13378: PUSH
13379: LD_INT 26
13381: PUSH
13382: LD_INT 36
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 101
13401: PUSH
13402: LD_INT 102
13404: PUSH
13405: LD_INT 105
13407: PUSH
13408: LD_INT 106
13410: PUSH
13411: LD_INT 108
13413: PUSH
13414: LD_INT 116
13416: PUSH
13417: LD_INT 117
13419: PUSH
13420: LD_INT 118
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: ST_TO_ADDR
13437: GO 16220
13439: LD_INT 5
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13559
13447: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: LD_INT 5
13461: PUSH
13462: LD_INT 6
13464: PUSH
13465: LD_INT 8
13467: PUSH
13468: LD_INT 11
13470: PUSH
13471: LD_INT 12
13473: PUSH
13474: LD_INT 15
13476: PUSH
13477: LD_INT 16
13479: PUSH
13480: LD_INT 22
13482: PUSH
13483: LD_INT 23
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 36
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 101
13513: PUSH
13514: LD_INT 102
13516: PUSH
13517: LD_INT 105
13519: PUSH
13520: LD_INT 106
13522: PUSH
13523: LD_INT 108
13525: PUSH
13526: LD_INT 109
13528: PUSH
13529: LD_INT 112
13531: PUSH
13532: LD_INT 116
13534: PUSH
13535: LD_INT 117
13537: PUSH
13538: LD_INT 118
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 16220
13559: LD_INT 6
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13699
13567: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 6
13584: PUSH
13585: LD_INT 8
13587: PUSH
13588: LD_INT 11
13590: PUSH
13591: LD_INT 12
13593: PUSH
13594: LD_INT 15
13596: PUSH
13597: LD_INT 16
13599: PUSH
13600: LD_INT 20
13602: PUSH
13603: LD_INT 21
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_INT 23
13611: PUSH
13612: LD_INT 25
13614: PUSH
13615: LD_INT 26
13617: PUSH
13618: LD_INT 30
13620: PUSH
13621: LD_INT 31
13623: PUSH
13624: LD_INT 32
13626: PUSH
13627: LD_INT 36
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 101
13653: PUSH
13654: LD_INT 102
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 108
13665: PUSH
13666: LD_INT 109
13668: PUSH
13669: LD_INT 112
13671: PUSH
13672: LD_INT 116
13674: PUSH
13675: LD_INT 117
13677: PUSH
13678: LD_INT 118
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: ST_TO_ADDR
13697: GO 16220
13699: LD_INT 7
13701: DOUBLE
13702: EQUAL
13703: IFTRUE 13707
13705: GO 13819
13707: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13708: LD_ADDR_VAR 0 2
13712: PUSH
13713: LD_INT 2
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: LD_INT 7
13724: PUSH
13725: LD_INT 11
13727: PUSH
13728: LD_INT 12
13730: PUSH
13731: LD_INT 15
13733: PUSH
13734: LD_INT 16
13736: PUSH
13737: LD_INT 20
13739: PUSH
13740: LD_INT 21
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_INT 23
13748: PUSH
13749: LD_INT 25
13751: PUSH
13752: LD_INT 26
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 101
13773: PUSH
13774: LD_INT 102
13776: PUSH
13777: LD_INT 103
13779: PUSH
13780: LD_INT 105
13782: PUSH
13783: LD_INT 106
13785: PUSH
13786: LD_INT 108
13788: PUSH
13789: LD_INT 112
13791: PUSH
13792: LD_INT 116
13794: PUSH
13795: LD_INT 117
13797: PUSH
13798: LD_INT 118
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: ST_TO_ADDR
13817: GO 16220
13819: LD_INT 8
13821: DOUBLE
13822: EQUAL
13823: IFTRUE 13827
13825: GO 13967
13827: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_INT 2
13835: PUSH
13836: LD_INT 4
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: LD_INT 6
13844: PUSH
13845: LD_INT 7
13847: PUSH
13848: LD_INT 8
13850: PUSH
13851: LD_INT 11
13853: PUSH
13854: LD_INT 12
13856: PUSH
13857: LD_INT 15
13859: PUSH
13860: LD_INT 16
13862: PUSH
13863: LD_INT 20
13865: PUSH
13866: LD_INT 21
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_INT 23
13874: PUSH
13875: LD_INT 25
13877: PUSH
13878: LD_INT 26
13880: PUSH
13881: LD_INT 30
13883: PUSH
13884: LD_INT 31
13886: PUSH
13887: LD_INT 32
13889: PUSH
13890: LD_INT 36
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 101
13917: PUSH
13918: LD_INT 102
13920: PUSH
13921: LD_INT 103
13923: PUSH
13924: LD_INT 105
13926: PUSH
13927: LD_INT 106
13929: PUSH
13930: LD_INT 108
13932: PUSH
13933: LD_INT 109
13935: PUSH
13936: LD_INT 112
13938: PUSH
13939: LD_INT 116
13941: PUSH
13942: LD_INT 117
13944: PUSH
13945: LD_INT 118
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: ST_TO_ADDR
13965: GO 16220
13967: LD_INT 9
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 14123
13975: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13976: LD_ADDR_VAR 0 2
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 4
13986: PUSH
13987: LD_INT 5
13989: PUSH
13990: LD_INT 6
13992: PUSH
13993: LD_INT 7
13995: PUSH
13996: LD_INT 8
13998: PUSH
13999: LD_INT 11
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: LD_INT 15
14007: PUSH
14008: LD_INT 16
14010: PUSH
14011: LD_INT 20
14013: PUSH
14014: LD_INT 21
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_INT 23
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 26
14028: PUSH
14029: LD_INT 28
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 31
14037: PUSH
14038: LD_INT 32
14040: PUSH
14041: LD_INT 36
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 101
14069: PUSH
14070: LD_INT 102
14072: PUSH
14073: LD_INT 103
14075: PUSH
14076: LD_INT 105
14078: PUSH
14079: LD_INT 106
14081: PUSH
14082: LD_INT 108
14084: PUSH
14085: LD_INT 109
14087: PUSH
14088: LD_INT 112
14090: PUSH
14091: LD_INT 114
14093: PUSH
14094: LD_INT 116
14096: PUSH
14097: LD_INT 117
14099: PUSH
14100: LD_INT 118
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: ST_TO_ADDR
14121: GO 16220
14123: LD_INT 10
14125: DOUBLE
14126: EQUAL
14127: IFTRUE 14131
14129: GO 14327
14131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14132: LD_ADDR_VAR 0 2
14136: PUSH
14137: LD_INT 2
14139: PUSH
14140: LD_INT 4
14142: PUSH
14143: LD_INT 5
14145: PUSH
14146: LD_INT 6
14148: PUSH
14149: LD_INT 7
14151: PUSH
14152: LD_INT 8
14154: PUSH
14155: LD_INT 9
14157: PUSH
14158: LD_INT 10
14160: PUSH
14161: LD_INT 11
14163: PUSH
14164: LD_INT 12
14166: PUSH
14167: LD_INT 13
14169: PUSH
14170: LD_INT 14
14172: PUSH
14173: LD_INT 15
14175: PUSH
14176: LD_INT 16
14178: PUSH
14179: LD_INT 17
14181: PUSH
14182: LD_INT 18
14184: PUSH
14185: LD_INT 19
14187: PUSH
14188: LD_INT 20
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 22
14196: PUSH
14197: LD_INT 23
14199: PUSH
14200: LD_INT 24
14202: PUSH
14203: LD_INT 25
14205: PUSH
14206: LD_INT 26
14208: PUSH
14209: LD_INT 28
14211: PUSH
14212: LD_INT 30
14214: PUSH
14215: LD_INT 31
14217: PUSH
14218: LD_INT 32
14220: PUSH
14221: LD_INT 36
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 101
14257: PUSH
14258: LD_INT 102
14260: PUSH
14261: LD_INT 103
14263: PUSH
14264: LD_INT 104
14266: PUSH
14267: LD_INT 105
14269: PUSH
14270: LD_INT 106
14272: PUSH
14273: LD_INT 107
14275: PUSH
14276: LD_INT 108
14278: PUSH
14279: LD_INT 109
14281: PUSH
14282: LD_INT 110
14284: PUSH
14285: LD_INT 111
14287: PUSH
14288: LD_INT 112
14290: PUSH
14291: LD_INT 114
14293: PUSH
14294: LD_INT 116
14296: PUSH
14297: LD_INT 117
14299: PUSH
14300: LD_INT 118
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: ST_TO_ADDR
14325: GO 16220
14327: LD_INT 11
14329: DOUBLE
14330: EQUAL
14331: IFTRUE 14335
14333: GO 14539
14335: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14336: LD_ADDR_VAR 0 2
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: LD_INT 3
14346: PUSH
14347: LD_INT 4
14349: PUSH
14350: LD_INT 5
14352: PUSH
14353: LD_INT 6
14355: PUSH
14356: LD_INT 7
14358: PUSH
14359: LD_INT 8
14361: PUSH
14362: LD_INT 9
14364: PUSH
14365: LD_INT 10
14367: PUSH
14368: LD_INT 11
14370: PUSH
14371: LD_INT 12
14373: PUSH
14374: LD_INT 13
14376: PUSH
14377: LD_INT 14
14379: PUSH
14380: LD_INT 15
14382: PUSH
14383: LD_INT 16
14385: PUSH
14386: LD_INT 17
14388: PUSH
14389: LD_INT 18
14391: PUSH
14392: LD_INT 19
14394: PUSH
14395: LD_INT 20
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 22
14403: PUSH
14404: LD_INT 23
14406: PUSH
14407: LD_INT 24
14409: PUSH
14410: LD_INT 25
14412: PUSH
14413: LD_INT 26
14415: PUSH
14416: LD_INT 28
14418: PUSH
14419: LD_INT 30
14421: PUSH
14422: LD_INT 31
14424: PUSH
14425: LD_INT 32
14427: PUSH
14428: LD_INT 34
14430: PUSH
14431: LD_INT 36
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 101
14469: PUSH
14470: LD_INT 102
14472: PUSH
14473: LD_INT 103
14475: PUSH
14476: LD_INT 104
14478: PUSH
14479: LD_INT 105
14481: PUSH
14482: LD_INT 106
14484: PUSH
14485: LD_INT 107
14487: PUSH
14488: LD_INT 108
14490: PUSH
14491: LD_INT 109
14493: PUSH
14494: LD_INT 110
14496: PUSH
14497: LD_INT 111
14499: PUSH
14500: LD_INT 112
14502: PUSH
14503: LD_INT 114
14505: PUSH
14506: LD_INT 116
14508: PUSH
14509: LD_INT 117
14511: PUSH
14512: LD_INT 118
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: ST_TO_ADDR
14537: GO 16220
14539: LD_INT 12
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14767
14547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14548: LD_ADDR_VAR 0 2
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 3
14561: PUSH
14562: LD_INT 4
14564: PUSH
14565: LD_INT 5
14567: PUSH
14568: LD_INT 6
14570: PUSH
14571: LD_INT 7
14573: PUSH
14574: LD_INT 8
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: LD_INT 10
14582: PUSH
14583: LD_INT 11
14585: PUSH
14586: LD_INT 12
14588: PUSH
14589: LD_INT 13
14591: PUSH
14592: LD_INT 14
14594: PUSH
14595: LD_INT 15
14597: PUSH
14598: LD_INT 16
14600: PUSH
14601: LD_INT 17
14603: PUSH
14604: LD_INT 18
14606: PUSH
14607: LD_INT 19
14609: PUSH
14610: LD_INT 20
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 23
14621: PUSH
14622: LD_INT 24
14624: PUSH
14625: LD_INT 25
14627: PUSH
14628: LD_INT 26
14630: PUSH
14631: LD_INT 27
14633: PUSH
14634: LD_INT 28
14636: PUSH
14637: LD_INT 30
14639: PUSH
14640: LD_INT 31
14642: PUSH
14643: LD_INT 32
14645: PUSH
14646: LD_INT 33
14648: PUSH
14649: LD_INT 34
14651: PUSH
14652: LD_INT 36
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 113
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 116
14735: PUSH
14736: LD_INT 117
14738: PUSH
14739: LD_INT 118
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: ST_TO_ADDR
14765: GO 16220
14767: LD_INT 13
14769: DOUBLE
14770: EQUAL
14771: IFTRUE 14775
14773: GO 14983
14775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14776: LD_ADDR_VAR 0 2
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 5
14795: PUSH
14796: LD_INT 8
14798: PUSH
14799: LD_INT 9
14801: PUSH
14802: LD_INT 10
14804: PUSH
14805: LD_INT 11
14807: PUSH
14808: LD_INT 12
14810: PUSH
14811: LD_INT 14
14813: PUSH
14814: LD_INT 15
14816: PUSH
14817: LD_INT 16
14819: PUSH
14820: LD_INT 17
14822: PUSH
14823: LD_INT 18
14825: PUSH
14826: LD_INT 19
14828: PUSH
14829: LD_INT 20
14831: PUSH
14832: LD_INT 21
14834: PUSH
14835: LD_INT 22
14837: PUSH
14838: LD_INT 23
14840: PUSH
14841: LD_INT 24
14843: PUSH
14844: LD_INT 25
14846: PUSH
14847: LD_INT 26
14849: PUSH
14850: LD_INT 27
14852: PUSH
14853: LD_INT 28
14855: PUSH
14856: LD_INT 30
14858: PUSH
14859: LD_INT 31
14861: PUSH
14862: LD_INT 32
14864: PUSH
14865: LD_INT 33
14867: PUSH
14868: LD_INT 34
14870: PUSH
14871: LD_INT 36
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 101
14909: PUSH
14910: LD_INT 102
14912: PUSH
14913: LD_INT 103
14915: PUSH
14916: LD_INT 104
14918: PUSH
14919: LD_INT 105
14921: PUSH
14922: LD_INT 106
14924: PUSH
14925: LD_INT 107
14927: PUSH
14928: LD_INT 108
14930: PUSH
14931: LD_INT 109
14933: PUSH
14934: LD_INT 110
14936: PUSH
14937: LD_INT 111
14939: PUSH
14940: LD_INT 112
14942: PUSH
14943: LD_INT 113
14945: PUSH
14946: LD_INT 114
14948: PUSH
14949: LD_INT 116
14951: PUSH
14952: LD_INT 117
14954: PUSH
14955: LD_INT 118
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: ST_TO_ADDR
14981: GO 16220
14983: LD_INT 14
14985: DOUBLE
14986: EQUAL
14987: IFTRUE 14991
14989: GO 15215
14991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14992: LD_ADDR_VAR 0 2
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: LD_INT 3
15005: PUSH
15006: LD_INT 4
15008: PUSH
15009: LD_INT 5
15011: PUSH
15012: LD_INT 6
15014: PUSH
15015: LD_INT 7
15017: PUSH
15018: LD_INT 8
15020: PUSH
15021: LD_INT 9
15023: PUSH
15024: LD_INT 10
15026: PUSH
15027: LD_INT 11
15029: PUSH
15030: LD_INT 12
15032: PUSH
15033: LD_INT 13
15035: PUSH
15036: LD_INT 14
15038: PUSH
15039: LD_INT 15
15041: PUSH
15042: LD_INT 16
15044: PUSH
15045: LD_INT 17
15047: PUSH
15048: LD_INT 18
15050: PUSH
15051: LD_INT 19
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 24
15068: PUSH
15069: LD_INT 25
15071: PUSH
15072: LD_INT 26
15074: PUSH
15075: LD_INT 27
15077: PUSH
15078: LD_INT 28
15080: PUSH
15081: LD_INT 29
15083: PUSH
15084: LD_INT 30
15086: PUSH
15087: LD_INT 31
15089: PUSH
15090: LD_INT 32
15092: PUSH
15093: LD_INT 33
15095: PUSH
15096: LD_INT 34
15098: PUSH
15099: LD_INT 36
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 101
15141: PUSH
15142: LD_INT 102
15144: PUSH
15145: LD_INT 103
15147: PUSH
15148: LD_INT 104
15150: PUSH
15151: LD_INT 105
15153: PUSH
15154: LD_INT 106
15156: PUSH
15157: LD_INT 107
15159: PUSH
15160: LD_INT 108
15162: PUSH
15163: LD_INT 109
15165: PUSH
15166: LD_INT 110
15168: PUSH
15169: LD_INT 111
15171: PUSH
15172: LD_INT 112
15174: PUSH
15175: LD_INT 113
15177: PUSH
15178: LD_INT 114
15180: PUSH
15181: LD_INT 116
15183: PUSH
15184: LD_INT 117
15186: PUSH
15187: LD_INT 118
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: ST_TO_ADDR
15213: GO 16220
15215: LD_INT 15
15217: DOUBLE
15218: EQUAL
15219: IFTRUE 15223
15221: GO 15447
15223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15224: LD_ADDR_VAR 0 2
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: LD_INT 5
15243: PUSH
15244: LD_INT 6
15246: PUSH
15247: LD_INT 7
15249: PUSH
15250: LD_INT 8
15252: PUSH
15253: LD_INT 9
15255: PUSH
15256: LD_INT 10
15258: PUSH
15259: LD_INT 11
15261: PUSH
15262: LD_INT 12
15264: PUSH
15265: LD_INT 13
15267: PUSH
15268: LD_INT 14
15270: PUSH
15271: LD_INT 15
15273: PUSH
15274: LD_INT 16
15276: PUSH
15277: LD_INT 17
15279: PUSH
15280: LD_INT 18
15282: PUSH
15283: LD_INT 19
15285: PUSH
15286: LD_INT 20
15288: PUSH
15289: LD_INT 21
15291: PUSH
15292: LD_INT 22
15294: PUSH
15295: LD_INT 23
15297: PUSH
15298: LD_INT 24
15300: PUSH
15301: LD_INT 25
15303: PUSH
15304: LD_INT 26
15306: PUSH
15307: LD_INT 27
15309: PUSH
15310: LD_INT 28
15312: PUSH
15313: LD_INT 29
15315: PUSH
15316: LD_INT 30
15318: PUSH
15319: LD_INT 31
15321: PUSH
15322: LD_INT 32
15324: PUSH
15325: LD_INT 33
15327: PUSH
15328: LD_INT 34
15330: PUSH
15331: LD_INT 36
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 101
15373: PUSH
15374: LD_INT 102
15376: PUSH
15377: LD_INT 103
15379: PUSH
15380: LD_INT 104
15382: PUSH
15383: LD_INT 105
15385: PUSH
15386: LD_INT 106
15388: PUSH
15389: LD_INT 107
15391: PUSH
15392: LD_INT 108
15394: PUSH
15395: LD_INT 109
15397: PUSH
15398: LD_INT 110
15400: PUSH
15401: LD_INT 111
15403: PUSH
15404: LD_INT 112
15406: PUSH
15407: LD_INT 113
15409: PUSH
15410: LD_INT 114
15412: PUSH
15413: LD_INT 116
15415: PUSH
15416: LD_INT 117
15418: PUSH
15419: LD_INT 118
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: ST_TO_ADDR
15445: GO 16220
15447: LD_INT 16
15449: DOUBLE
15450: EQUAL
15451: IFTRUE 15455
15453: GO 15591
15455: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: LD_INT 4
15466: PUSH
15467: LD_INT 5
15469: PUSH
15470: LD_INT 7
15472: PUSH
15473: LD_INT 11
15475: PUSH
15476: LD_INT 12
15478: PUSH
15479: LD_INT 15
15481: PUSH
15482: LD_INT 16
15484: PUSH
15485: LD_INT 20
15487: PUSH
15488: LD_INT 21
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 23
15496: PUSH
15497: LD_INT 25
15499: PUSH
15500: LD_INT 26
15502: PUSH
15503: LD_INT 30
15505: PUSH
15506: LD_INT 31
15508: PUSH
15509: LD_INT 32
15511: PUSH
15512: LD_INT 33
15514: PUSH
15515: LD_INT 34
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 101
15541: PUSH
15542: LD_INT 102
15544: PUSH
15545: LD_INT 103
15547: PUSH
15548: LD_INT 106
15550: PUSH
15551: LD_INT 108
15553: PUSH
15554: LD_INT 112
15556: PUSH
15557: LD_INT 113
15559: PUSH
15560: LD_INT 114
15562: PUSH
15563: LD_INT 116
15565: PUSH
15566: LD_INT 117
15568: PUSH
15569: LD_INT 118
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: ST_TO_ADDR
15589: GO 16220
15591: LD_INT 17
15593: DOUBLE
15594: EQUAL
15595: IFTRUE 15599
15597: GO 15823
15599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: PUSH
15608: LD_INT 2
15610: PUSH
15611: LD_INT 3
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: LD_INT 5
15619: PUSH
15620: LD_INT 6
15622: PUSH
15623: LD_INT 7
15625: PUSH
15626: LD_INT 8
15628: PUSH
15629: LD_INT 9
15631: PUSH
15632: LD_INT 10
15634: PUSH
15635: LD_INT 11
15637: PUSH
15638: LD_INT 12
15640: PUSH
15641: LD_INT 13
15643: PUSH
15644: LD_INT 14
15646: PUSH
15647: LD_INT 15
15649: PUSH
15650: LD_INT 16
15652: PUSH
15653: LD_INT 17
15655: PUSH
15656: LD_INT 18
15658: PUSH
15659: LD_INT 19
15661: PUSH
15662: LD_INT 20
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: LD_INT 22
15670: PUSH
15671: LD_INT 23
15673: PUSH
15674: LD_INT 24
15676: PUSH
15677: LD_INT 25
15679: PUSH
15680: LD_INT 26
15682: PUSH
15683: LD_INT 27
15685: PUSH
15686: LD_INT 28
15688: PUSH
15689: LD_INT 29
15691: PUSH
15692: LD_INT 30
15694: PUSH
15695: LD_INT 31
15697: PUSH
15698: LD_INT 32
15700: PUSH
15701: LD_INT 33
15703: PUSH
15704: LD_INT 34
15706: PUSH
15707: LD_INT 36
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 101
15749: PUSH
15750: LD_INT 102
15752: PUSH
15753: LD_INT 103
15755: PUSH
15756: LD_INT 104
15758: PUSH
15759: LD_INT 105
15761: PUSH
15762: LD_INT 106
15764: PUSH
15765: LD_INT 107
15767: PUSH
15768: LD_INT 108
15770: PUSH
15771: LD_INT 109
15773: PUSH
15774: LD_INT 110
15776: PUSH
15777: LD_INT 111
15779: PUSH
15780: LD_INT 112
15782: PUSH
15783: LD_INT 113
15785: PUSH
15786: LD_INT 114
15788: PUSH
15789: LD_INT 116
15791: PUSH
15792: LD_INT 117
15794: PUSH
15795: LD_INT 118
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: ST_TO_ADDR
15821: GO 16220
15823: LD_INT 18
15825: DOUBLE
15826: EQUAL
15827: IFTRUE 15831
15829: GO 15979
15831: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15832: LD_ADDR_VAR 0 2
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: LD_INT 5
15845: PUSH
15846: LD_INT 7
15848: PUSH
15849: LD_INT 11
15851: PUSH
15852: LD_INT 12
15854: PUSH
15855: LD_INT 15
15857: PUSH
15858: LD_INT 16
15860: PUSH
15861: LD_INT 20
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_INT 23
15872: PUSH
15873: LD_INT 25
15875: PUSH
15876: LD_INT 26
15878: PUSH
15879: LD_INT 30
15881: PUSH
15882: LD_INT 31
15884: PUSH
15885: LD_INT 32
15887: PUSH
15888: LD_INT 33
15890: PUSH
15891: LD_INT 34
15893: PUSH
15894: LD_INT 35
15896: PUSH
15897: LD_INT 36
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 101
15925: PUSH
15926: LD_INT 102
15928: PUSH
15929: LD_INT 103
15931: PUSH
15932: LD_INT 106
15934: PUSH
15935: LD_INT 108
15937: PUSH
15938: LD_INT 112
15940: PUSH
15941: LD_INT 113
15943: PUSH
15944: LD_INT 114
15946: PUSH
15947: LD_INT 115
15949: PUSH
15950: LD_INT 116
15952: PUSH
15953: LD_INT 117
15955: PUSH
15956: LD_INT 118
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: ST_TO_ADDR
15977: GO 16220
15979: LD_INT 19
15981: DOUBLE
15982: EQUAL
15983: IFTRUE 15987
15985: GO 16219
15987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15988: LD_ADDR_VAR 0 2
15992: PUSH
15993: LD_INT 1
15995: PUSH
15996: LD_INT 2
15998: PUSH
15999: LD_INT 3
16001: PUSH
16002: LD_INT 4
16004: PUSH
16005: LD_INT 5
16007: PUSH
16008: LD_INT 6
16010: PUSH
16011: LD_INT 7
16013: PUSH
16014: LD_INT 8
16016: PUSH
16017: LD_INT 9
16019: PUSH
16020: LD_INT 10
16022: PUSH
16023: LD_INT 11
16025: PUSH
16026: LD_INT 12
16028: PUSH
16029: LD_INT 13
16031: PUSH
16032: LD_INT 14
16034: PUSH
16035: LD_INT 15
16037: PUSH
16038: LD_INT 16
16040: PUSH
16041: LD_INT 17
16043: PUSH
16044: LD_INT 18
16046: PUSH
16047: LD_INT 19
16049: PUSH
16050: LD_INT 20
16052: PUSH
16053: LD_INT 21
16055: PUSH
16056: LD_INT 22
16058: PUSH
16059: LD_INT 23
16061: PUSH
16062: LD_INT 24
16064: PUSH
16065: LD_INT 25
16067: PUSH
16068: LD_INT 26
16070: PUSH
16071: LD_INT 27
16073: PUSH
16074: LD_INT 28
16076: PUSH
16077: LD_INT 29
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 31
16085: PUSH
16086: LD_INT 32
16088: PUSH
16089: LD_INT 33
16091: PUSH
16092: LD_INT 34
16094: PUSH
16095: LD_INT 35
16097: PUSH
16098: LD_INT 36
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 101
16141: PUSH
16142: LD_INT 102
16144: PUSH
16145: LD_INT 103
16147: PUSH
16148: LD_INT 104
16150: PUSH
16151: LD_INT 105
16153: PUSH
16154: LD_INT 106
16156: PUSH
16157: LD_INT 107
16159: PUSH
16160: LD_INT 108
16162: PUSH
16163: LD_INT 109
16165: PUSH
16166: LD_INT 110
16168: PUSH
16169: LD_INT 111
16171: PUSH
16172: LD_INT 112
16174: PUSH
16175: LD_INT 113
16177: PUSH
16178: LD_INT 114
16180: PUSH
16181: LD_INT 115
16183: PUSH
16184: LD_INT 116
16186: PUSH
16187: LD_INT 117
16189: PUSH
16190: LD_INT 118
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: ST_TO_ADDR
16217: GO 16220
16219: POP
// end else
16220: GO 16451
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16222: LD_ADDR_VAR 0 2
16226: PUSH
16227: LD_INT 1
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 4
16238: PUSH
16239: LD_INT 5
16241: PUSH
16242: LD_INT 6
16244: PUSH
16245: LD_INT 7
16247: PUSH
16248: LD_INT 8
16250: PUSH
16251: LD_INT 9
16253: PUSH
16254: LD_INT 10
16256: PUSH
16257: LD_INT 11
16259: PUSH
16260: LD_INT 12
16262: PUSH
16263: LD_INT 13
16265: PUSH
16266: LD_INT 14
16268: PUSH
16269: LD_INT 15
16271: PUSH
16272: LD_INT 16
16274: PUSH
16275: LD_INT 17
16277: PUSH
16278: LD_INT 18
16280: PUSH
16281: LD_INT 19
16283: PUSH
16284: LD_INT 20
16286: PUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 23
16295: PUSH
16296: LD_INT 24
16298: PUSH
16299: LD_INT 25
16301: PUSH
16302: LD_INT 26
16304: PUSH
16305: LD_INT 27
16307: PUSH
16308: LD_INT 28
16310: PUSH
16311: LD_INT 29
16313: PUSH
16314: LD_INT 30
16316: PUSH
16317: LD_INT 31
16319: PUSH
16320: LD_INT 32
16322: PUSH
16323: LD_INT 33
16325: PUSH
16326: LD_INT 34
16328: PUSH
16329: LD_INT 35
16331: PUSH
16332: LD_INT 36
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 101
16375: PUSH
16376: LD_INT 102
16378: PUSH
16379: LD_INT 103
16381: PUSH
16382: LD_INT 104
16384: PUSH
16385: LD_INT 105
16387: PUSH
16388: LD_INT 106
16390: PUSH
16391: LD_INT 107
16393: PUSH
16394: LD_INT 108
16396: PUSH
16397: LD_INT 109
16399: PUSH
16400: LD_INT 110
16402: PUSH
16403: LD_INT 111
16405: PUSH
16406: LD_INT 112
16408: PUSH
16409: LD_INT 113
16411: PUSH
16412: LD_INT 114
16414: PUSH
16415: LD_INT 115
16417: PUSH
16418: LD_INT 116
16420: PUSH
16421: LD_INT 117
16423: PUSH
16424: LD_INT 118
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: ST_TO_ADDR
// if result then
16451: LD_VAR 0 2
16455: IFFALSE 17241
// begin normal :=  ;
16457: LD_ADDR_VAR 0 5
16461: PUSH
16462: LD_STRING 
16464: ST_TO_ADDR
// hardcore :=  ;
16465: LD_ADDR_VAR 0 6
16469: PUSH
16470: LD_STRING 
16472: ST_TO_ADDR
// active :=  ;
16473: LD_ADDR_VAR 0 7
16477: PUSH
16478: LD_STRING 
16480: ST_TO_ADDR
// for i = 1 to normalCounter do
16481: LD_ADDR_VAR 0 8
16485: PUSH
16486: DOUBLE
16487: LD_INT 1
16489: DEC
16490: ST_TO_ADDR
16491: LD_EXP 23
16495: PUSH
16496: FOR_TO
16497: IFFALSE 16598
// begin tmp := 0 ;
16499: LD_ADDR_VAR 0 3
16503: PUSH
16504: LD_STRING 0
16506: ST_TO_ADDR
// if result [ 1 ] then
16507: LD_VAR 0 2
16511: PUSH
16512: LD_INT 1
16514: ARRAY
16515: IFFALSE 16580
// if result [ 1 ] [ 1 ] = i then
16517: LD_VAR 0 2
16521: PUSH
16522: LD_INT 1
16524: ARRAY
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PUSH
16530: LD_VAR 0 8
16534: EQUAL
16535: IFFALSE 16580
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16537: LD_ADDR_VAR 0 2
16541: PUSH
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_VAR 0 2
16554: PUSH
16555: LD_INT 1
16557: ARRAY
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 3
16566: PPUSH
16567: CALL_OW 1
16571: ST_TO_ADDR
// tmp := 1 ;
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: LD_STRING 1
16579: ST_TO_ADDR
// end ; normal := normal & tmp ;
16580: LD_ADDR_VAR 0 5
16584: PUSH
16585: LD_VAR 0 5
16589: PUSH
16590: LD_VAR 0 3
16594: STR
16595: ST_TO_ADDR
// end ;
16596: GO 16496
16598: POP
16599: POP
// for i = 1 to hardcoreCounter do
16600: LD_ADDR_VAR 0 8
16604: PUSH
16605: DOUBLE
16606: LD_INT 1
16608: DEC
16609: ST_TO_ADDR
16610: LD_EXP 24
16614: PUSH
16615: FOR_TO
16616: IFFALSE 16721
// begin tmp := 0 ;
16618: LD_ADDR_VAR 0 3
16622: PUSH
16623: LD_STRING 0
16625: ST_TO_ADDR
// if result [ 2 ] then
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 2
16633: ARRAY
16634: IFFALSE 16703
// if result [ 2 ] [ 1 ] = 100 + i then
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PUSH
16645: LD_INT 1
16647: ARRAY
16648: PUSH
16649: LD_INT 100
16651: PUSH
16652: LD_VAR 0 8
16656: PLUS
16657: EQUAL
16658: IFFALSE 16703
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: LD_VAR 0 2
16669: PPUSH
16670: LD_INT 2
16672: PPUSH
16673: LD_VAR 0 2
16677: PUSH
16678: LD_INT 2
16680: ARRAY
16681: PPUSH
16682: LD_INT 1
16684: PPUSH
16685: CALL_OW 3
16689: PPUSH
16690: CALL_OW 1
16694: ST_TO_ADDR
// tmp := 1 ;
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_STRING 1
16702: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16703: LD_ADDR_VAR 0 6
16707: PUSH
16708: LD_VAR 0 6
16712: PUSH
16713: LD_VAR 0 3
16717: STR
16718: ST_TO_ADDR
// end ;
16719: GO 16615
16721: POP
16722: POP
// if isGameLoad then
16723: LD_VAR 0 1
16727: IFFALSE 17202
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16729: LD_ADDR_VAR 0 4
16733: PUSH
16734: LD_EXP 27
16738: PUSH
16739: LD_EXP 26
16743: PUSH
16744: LD_EXP 28
16748: PUSH
16749: LD_EXP 25
16753: PUSH
16754: LD_EXP 29
16758: PUSH
16759: LD_EXP 30
16763: PUSH
16764: LD_EXP 31
16768: PUSH
16769: LD_EXP 32
16773: PUSH
16774: LD_EXP 33
16778: PUSH
16779: LD_EXP 34
16783: PUSH
16784: LD_EXP 35
16788: PUSH
16789: LD_EXP 36
16793: PUSH
16794: LD_EXP 37
16798: PUSH
16799: LD_EXP 38
16803: PUSH
16804: LD_EXP 46
16808: PUSH
16809: LD_EXP 47
16813: PUSH
16814: LD_EXP 48
16818: PUSH
16819: LD_EXP 49
16823: PUSH
16824: LD_EXP 51
16828: PUSH
16829: LD_EXP 52
16833: PUSH
16834: LD_EXP 53
16838: PUSH
16839: LD_EXP 56
16843: PUSH
16844: LD_EXP 58
16848: PUSH
16849: LD_EXP 59
16853: PUSH
16854: LD_EXP 60
16858: PUSH
16859: LD_EXP 62
16863: PUSH
16864: LD_EXP 63
16868: PUSH
16869: LD_EXP 66
16873: PUSH
16874: LD_EXP 67
16878: PUSH
16879: LD_EXP 68
16883: PUSH
16884: LD_EXP 69
16888: PUSH
16889: LD_EXP 70
16893: PUSH
16894: LD_EXP 71
16898: PUSH
16899: LD_EXP 72
16903: PUSH
16904: LD_EXP 73
16908: PUSH
16909: LD_EXP 74
16913: PUSH
16914: LD_EXP 39
16918: PUSH
16919: LD_EXP 40
16923: PUSH
16924: LD_EXP 43
16928: PUSH
16929: LD_EXP 44
16933: PUSH
16934: LD_EXP 45
16938: PUSH
16939: LD_EXP 41
16943: PUSH
16944: LD_EXP 42
16948: PUSH
16949: LD_EXP 50
16953: PUSH
16954: LD_EXP 54
16958: PUSH
16959: LD_EXP 55
16963: PUSH
16964: LD_EXP 57
16968: PUSH
16969: LD_EXP 61
16973: PUSH
16974: LD_EXP 64
16978: PUSH
16979: LD_EXP 65
16983: PUSH
16984: LD_EXP 75
16988: PUSH
16989: LD_EXP 76
16993: PUSH
16994: LD_EXP 77
16998: PUSH
16999: LD_EXP 78
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: ST_TO_ADDR
// tmp :=  ;
17060: LD_ADDR_VAR 0 3
17064: PUSH
17065: LD_STRING 
17067: ST_TO_ADDR
// for i = 1 to normalCounter do
17068: LD_ADDR_VAR 0 8
17072: PUSH
17073: DOUBLE
17074: LD_INT 1
17076: DEC
17077: ST_TO_ADDR
17078: LD_EXP 23
17082: PUSH
17083: FOR_TO
17084: IFFALSE 17120
// begin if flags [ i ] then
17086: LD_VAR 0 4
17090: PUSH
17091: LD_VAR 0 8
17095: ARRAY
17096: IFFALSE 17118
// tmp := tmp & i & ; ;
17098: LD_ADDR_VAR 0 3
17102: PUSH
17103: LD_VAR 0 3
17107: PUSH
17108: LD_VAR 0 8
17112: STR
17113: PUSH
17114: LD_STRING ;
17116: STR
17117: ST_TO_ADDR
// end ;
17118: GO 17083
17120: POP
17121: POP
// for i = 1 to hardcoreCounter do
17122: LD_ADDR_VAR 0 8
17126: PUSH
17127: DOUBLE
17128: LD_INT 1
17130: DEC
17131: ST_TO_ADDR
17132: LD_EXP 24
17136: PUSH
17137: FOR_TO
17138: IFFALSE 17184
// begin if flags [ normalCounter + i ] then
17140: LD_VAR 0 4
17144: PUSH
17145: LD_EXP 23
17149: PUSH
17150: LD_VAR 0 8
17154: PLUS
17155: ARRAY
17156: IFFALSE 17182
// tmp := tmp & ( 100 + i ) & ; ;
17158: LD_ADDR_VAR 0 3
17162: PUSH
17163: LD_VAR 0 3
17167: PUSH
17168: LD_INT 100
17170: PUSH
17171: LD_VAR 0 8
17175: PLUS
17176: STR
17177: PUSH
17178: LD_STRING ;
17180: STR
17181: ST_TO_ADDR
// end ;
17182: GO 17137
17184: POP
17185: POP
// if tmp then
17186: LD_VAR 0 3
17190: IFFALSE 17202
// active := tmp ;
17192: LD_ADDR_VAR 0 7
17196: PUSH
17197: LD_VAR 0 3
17201: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17202: LD_STRING getStreamItemsFromMission("
17204: PUSH
17205: LD_VAR 0 5
17209: STR
17210: PUSH
17211: LD_STRING ","
17213: STR
17214: PUSH
17215: LD_VAR 0 6
17219: STR
17220: PUSH
17221: LD_STRING ","
17223: STR
17224: PUSH
17225: LD_VAR 0 7
17229: STR
17230: PUSH
17231: LD_STRING ")
17233: STR
17234: PPUSH
17235: CALL_OW 559
// end else
17239: GO 17248
// ToLua ( getStreamItemsFromMission("","","") ) ;
17241: LD_STRING getStreamItemsFromMission("","","")
17243: PPUSH
17244: CALL_OW 559
// end ;
17248: LD_VAR 0 2
17252: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17253: LD_EXP 22
17257: PUSH
17258: LD_EXP 27
17262: AND
17263: IFFALSE 17387
17265: GO 17267
17267: DISABLE
17268: LD_INT 0
17270: PPUSH
17271: PPUSH
// begin enable ;
17272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_INT 22
17280: PUSH
17281: LD_OWVAR 2
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: LD_INT 34
17295: PUSH
17296: LD_INT 7
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 34
17305: PUSH
17306: LD_INT 45
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 28
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 34
17325: PUSH
17326: LD_INT 47
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: ST_TO_ADDR
// if not tmp then
17349: LD_VAR 0 2
17353: NOT
17354: IFFALSE 17358
// exit ;
17356: GO 17387
// for i in tmp do
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17385
// begin SetLives ( i , 0 ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 0
17378: PPUSH
17379: CALL_OW 234
// end ;
17383: GO 17368
17385: POP
17386: POP
// end ;
17387: PPOPN 2
17389: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17390: LD_EXP 22
17394: PUSH
17395: LD_EXP 28
17399: AND
17400: IFFALSE 17484
17402: GO 17404
17404: DISABLE
17405: LD_INT 0
17407: PPUSH
17408: PPUSH
// begin enable ;
17409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17410: LD_ADDR_VAR 0 2
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_OWVAR 2
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 32
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL_OW 69
17445: ST_TO_ADDR
// if not tmp then
17446: LD_VAR 0 2
17450: NOT
17451: IFFALSE 17455
// exit ;
17453: GO 17484
// for i in tmp do
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_VAR 0 2
17464: PUSH
17465: FOR_IN
17466: IFFALSE 17482
// begin SetLives ( i , 0 ) ;
17468: LD_VAR 0 1
17472: PPUSH
17473: LD_INT 0
17475: PPUSH
17476: CALL_OW 234
// end ;
17480: GO 17465
17482: POP
17483: POP
// end ;
17484: PPOPN 2
17486: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17487: LD_EXP 22
17491: PUSH
17492: LD_EXP 25
17496: AND
17497: IFFALSE 17590
17499: GO 17501
17501: DISABLE
17502: LD_INT 0
17504: PPUSH
// begin enable ;
17505: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17506: LD_ADDR_VAR 0 1
17510: PUSH
17511: LD_INT 22
17513: PUSH
17514: LD_OWVAR 2
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 25
17528: PUSH
17529: LD_INT 5
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 9
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 8
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17588
// begin SetClass ( i , 1 ) ;
17574: LD_VAR 0 1
17578: PPUSH
17579: LD_INT 1
17581: PPUSH
17582: CALL_OW 336
// end ;
17586: GO 17571
17588: POP
17589: POP
// end ;
17590: PPOPN 1
17592: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17593: LD_EXP 22
17597: PUSH
17598: LD_EXP 26
17602: AND
17603: PUSH
17604: LD_OWVAR 65
17608: PUSH
17609: LD_INT 7
17611: LESS
17612: AND
17613: IFFALSE 17627
17615: GO 17617
17617: DISABLE
// begin enable ;
17618: ENABLE
// game_speed := 7 ;
17619: LD_ADDR_OWVAR 65
17623: PUSH
17624: LD_INT 7
17626: ST_TO_ADDR
// end ;
17627: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17628: LD_EXP 22
17632: PUSH
17633: LD_EXP 29
17637: AND
17638: IFFALSE 17840
17640: GO 17642
17642: DISABLE
17643: LD_INT 0
17645: PPUSH
17646: PPUSH
17647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17648: LD_ADDR_VAR 0 3
17652: PUSH
17653: LD_INT 81
17655: PUSH
17656: LD_OWVAR 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 21
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PPUSH
17679: CALL_OW 69
17683: ST_TO_ADDR
// if not tmp then
17684: LD_VAR 0 3
17688: NOT
17689: IFFALSE 17693
// exit ;
17691: GO 17840
// if tmp > 5 then
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 5
17700: GREATER
17701: IFFALSE 17713
// k := 5 else
17703: LD_ADDR_VAR 0 2
17707: PUSH
17708: LD_INT 5
17710: ST_TO_ADDR
17711: GO 17723
// k := tmp ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_VAR 0 3
17722: ST_TO_ADDR
// for i := 1 to k do
17723: LD_ADDR_VAR 0 1
17727: PUSH
17728: DOUBLE
17729: LD_INT 1
17731: DEC
17732: ST_TO_ADDR
17733: LD_VAR 0 2
17737: PUSH
17738: FOR_TO
17739: IFFALSE 17838
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17741: LD_VAR 0 3
17745: PUSH
17746: LD_VAR 0 1
17750: ARRAY
17751: PPUSH
17752: LD_VAR 0 1
17756: PUSH
17757: LD_INT 4
17759: MOD
17760: PUSH
17761: LD_INT 1
17763: PLUS
17764: PPUSH
17765: CALL_OW 259
17769: PUSH
17770: LD_INT 10
17772: LESS
17773: IFFALSE 17836
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17775: LD_VAR 0 3
17779: PUSH
17780: LD_VAR 0 1
17784: ARRAY
17785: PPUSH
17786: LD_VAR 0 1
17790: PUSH
17791: LD_INT 4
17793: MOD
17794: PUSH
17795: LD_INT 1
17797: PLUS
17798: PPUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_VAR 0 1
17808: ARRAY
17809: PPUSH
17810: LD_VAR 0 1
17814: PUSH
17815: LD_INT 4
17817: MOD
17818: PUSH
17819: LD_INT 1
17821: PLUS
17822: PPUSH
17823: CALL_OW 259
17827: PUSH
17828: LD_INT 1
17830: PLUS
17831: PPUSH
17832: CALL_OW 237
17836: GO 17738
17838: POP
17839: POP
// end ;
17840: PPOPN 3
17842: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17843: LD_EXP 22
17847: PUSH
17848: LD_EXP 30
17852: AND
17853: IFFALSE 17873
17855: GO 17857
17857: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17858: LD_INT 4
17860: PPUSH
17861: LD_OWVAR 2
17865: PPUSH
17866: LD_INT 0
17868: PPUSH
17869: CALL_OW 324
17873: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17874: LD_EXP 22
17878: PUSH
17879: LD_EXP 59
17883: AND
17884: IFFALSE 17904
17886: GO 17888
17888: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17889: LD_INT 19
17891: PPUSH
17892: LD_OWVAR 2
17896: PPUSH
17897: LD_INT 0
17899: PPUSH
17900: CALL_OW 324
17904: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17905: LD_EXP 22
17909: PUSH
17910: LD_EXP 31
17914: AND
17915: IFFALSE 18017
17917: GO 17919
17919: DISABLE
17920: LD_INT 0
17922: PPUSH
17923: PPUSH
// begin enable ;
17924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 34
17947: PUSH
17948: LD_INT 11
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 34
17957: PUSH
17958: LD_INT 30
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// if not tmp then
17979: LD_VAR 0 2
17983: NOT
17984: IFFALSE 17988
// exit ;
17986: GO 18017
// for i in tmp do
17988: LD_ADDR_VAR 0 1
17992: PUSH
17993: LD_VAR 0 2
17997: PUSH
17998: FOR_IN
17999: IFFALSE 18015
// begin SetLives ( i , 0 ) ;
18001: LD_VAR 0 1
18005: PPUSH
18006: LD_INT 0
18008: PPUSH
18009: CALL_OW 234
// end ;
18013: GO 17998
18015: POP
18016: POP
// end ;
18017: PPOPN 2
18019: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18020: LD_EXP 22
18024: PUSH
18025: LD_EXP 32
18029: AND
18030: IFFALSE 18050
18032: GO 18034
18034: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18035: LD_INT 32
18037: PPUSH
18038: LD_OWVAR 2
18042: PPUSH
18043: LD_INT 0
18045: PPUSH
18046: CALL_OW 324
18050: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18051: LD_EXP 22
18055: PUSH
18056: LD_EXP 33
18060: AND
18061: IFFALSE 18242
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
18069: PPUSH
18070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18071: LD_ADDR_VAR 0 2
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_OWVAR 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 33
18090: PUSH
18091: LD_INT 3
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
// if not tmp then
18107: LD_VAR 0 2
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18242
// side := 0 ;
18116: LD_ADDR_VAR 0 3
18120: PUSH
18121: LD_INT 0
18123: ST_TO_ADDR
// for i := 1 to 8 do
18124: LD_ADDR_VAR 0 1
18128: PUSH
18129: DOUBLE
18130: LD_INT 1
18132: DEC
18133: ST_TO_ADDR
18134: LD_INT 8
18136: PUSH
18137: FOR_TO
18138: IFFALSE 18186
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18140: LD_OWVAR 2
18144: PUSH
18145: LD_VAR 0 1
18149: NONEQUAL
18150: PUSH
18151: LD_OWVAR 2
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 81
18165: PUSH
18166: LD_INT 2
18168: EQUAL
18169: AND
18170: IFFALSE 18184
// begin side := i ;
18172: LD_ADDR_VAR 0 3
18176: PUSH
18177: LD_VAR 0 1
18181: ST_TO_ADDR
// break ;
18182: GO 18186
// end ;
18184: GO 18137
18186: POP
18187: POP
// if not side then
18188: LD_VAR 0 3
18192: NOT
18193: IFFALSE 18197
// exit ;
18195: GO 18242
// for i := 1 to tmp do
18197: LD_ADDR_VAR 0 1
18201: PUSH
18202: DOUBLE
18203: LD_INT 1
18205: DEC
18206: ST_TO_ADDR
18207: LD_VAR 0 2
18211: PUSH
18212: FOR_TO
18213: IFFALSE 18240
// if Prob ( 60 ) then
18215: LD_INT 60
18217: PPUSH
18218: CALL_OW 13
18222: IFFALSE 18238
// SetSide ( i , side ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: CALL_OW 235
18238: GO 18212
18240: POP
18241: POP
// end ;
18242: PPOPN 3
18244: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18245: LD_EXP 22
18249: PUSH
18250: LD_EXP 35
18254: AND
18255: IFFALSE 18374
18257: GO 18259
18259: DISABLE
18260: LD_INT 0
18262: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18263: LD_ADDR_VAR 0 1
18267: PUSH
18268: LD_INT 22
18270: PUSH
18271: LD_OWVAR 2
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 3
18292: PUSH
18293: LD_INT 23
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PUSH
18317: FOR_IN
18318: IFFALSE 18372
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 257
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 4
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: IN
18348: IFFALSE 18370
// SetClass ( un , rand ( 1 , 4 ) ) ;
18350: LD_VAR 0 1
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_INT 4
18360: PPUSH
18361: CALL_OW 12
18365: PPUSH
18366: CALL_OW 336
18370: GO 18317
18372: POP
18373: POP
// end ;
18374: PPOPN 1
18376: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18377: LD_EXP 22
18381: PUSH
18382: LD_EXP 34
18386: AND
18387: IFFALSE 18466
18389: GO 18391
18391: DISABLE
18392: LD_INT 0
18394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18395: LD_ADDR_VAR 0 1
18399: PUSH
18400: LD_INT 22
18402: PUSH
18403: LD_OWVAR 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 21
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PPUSH
18426: CALL_OW 69
18430: ST_TO_ADDR
// if not tmp then
18431: LD_VAR 0 1
18435: NOT
18436: IFFALSE 18440
// exit ;
18438: GO 18466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18440: LD_VAR 0 1
18444: PUSH
18445: LD_INT 1
18447: PPUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 12
18457: ARRAY
18458: PPUSH
18459: LD_INT 100
18461: PPUSH
18462: CALL_OW 234
// end ;
18466: PPOPN 1
18468: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18469: LD_EXP 22
18473: PUSH
18474: LD_EXP 36
18478: AND
18479: IFFALSE 18577
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PPUSH
18518: CALL_OW 69
18522: ST_TO_ADDR
// if not tmp then
18523: LD_VAR 0 1
18527: NOT
18528: IFFALSE 18532
// exit ;
18530: GO 18577
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 1
18539: PPUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 12
18549: ARRAY
18550: PPUSH
18551: LD_INT 1
18553: PPUSH
18554: LD_INT 4
18556: PPUSH
18557: CALL_OW 12
18561: PPUSH
18562: LD_INT 3000
18564: PPUSH
18565: LD_INT 9000
18567: PPUSH
18568: CALL_OW 12
18572: PPUSH
18573: CALL_OW 492
// end ;
18577: PPOPN 1
18579: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18580: LD_EXP 22
18584: PUSH
18585: LD_EXP 37
18589: AND
18590: IFFALSE 18610
18592: GO 18594
18594: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18595: LD_INT 1
18597: PPUSH
18598: LD_OWVAR 2
18602: PPUSH
18603: LD_INT 0
18605: PPUSH
18606: CALL_OW 324
18610: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18611: LD_EXP 22
18615: PUSH
18616: LD_EXP 38
18620: AND
18621: IFFALSE 18704
18623: GO 18625
18625: DISABLE
18626: LD_INT 0
18628: PPUSH
18629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_INT 22
18637: PUSH
18638: LD_OWVAR 2
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 21
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 69
18665: ST_TO_ADDR
// if not tmp then
18666: LD_VAR 0 2
18670: NOT
18671: IFFALSE 18675
// exit ;
18673: GO 18704
// for i in tmp do
18675: LD_ADDR_VAR 0 1
18679: PUSH
18680: LD_VAR 0 2
18684: PUSH
18685: FOR_IN
18686: IFFALSE 18702
// SetBLevel ( i , 10 ) ;
18688: LD_VAR 0 1
18692: PPUSH
18693: LD_INT 10
18695: PPUSH
18696: CALL_OW 241
18700: GO 18685
18702: POP
18703: POP
// end ;
18704: PPOPN 2
18706: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18707: LD_EXP 22
18711: PUSH
18712: LD_EXP 39
18716: AND
18717: IFFALSE 18828
18719: GO 18721
18721: DISABLE
18722: LD_INT 0
18724: PPUSH
18725: PPUSH
18726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_INT 22
18734: PUSH
18735: LD_OWVAR 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 25
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PPUSH
18758: CALL_OW 69
18762: ST_TO_ADDR
// if not tmp then
18763: LD_VAR 0 3
18767: NOT
18768: IFFALSE 18772
// exit ;
18770: GO 18828
// un := tmp [ rand ( 1 , tmp ) ] ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_VAR 0 3
18789: PPUSH
18790: CALL_OW 12
18794: ARRAY
18795: ST_TO_ADDR
// if Crawls ( un ) then
18796: LD_VAR 0 2
18800: PPUSH
18801: CALL_OW 318
18805: IFFALSE 18816
// ComWalk ( un ) ;
18807: LD_VAR 0 2
18811: PPUSH
18812: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18816: LD_VAR 0 2
18820: PPUSH
18821: LD_INT 5
18823: PPUSH
18824: CALL_OW 336
// end ;
18828: PPOPN 3
18830: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18831: LD_EXP 22
18835: PUSH
18836: LD_EXP 40
18840: AND
18841: PUSH
18842: LD_OWVAR 67
18846: PUSH
18847: LD_INT 4
18849: LESS
18850: AND
18851: IFFALSE 18870
18853: GO 18855
18855: DISABLE
// begin Difficulty := Difficulty + 1 ;
18856: LD_ADDR_OWVAR 67
18860: PUSH
18861: LD_OWVAR 67
18865: PUSH
18866: LD_INT 1
18868: PLUS
18869: ST_TO_ADDR
// end ;
18870: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18871: LD_EXP 22
18875: PUSH
18876: LD_EXP 41
18880: AND
18881: IFFALSE 18984
18883: GO 18885
18885: DISABLE
18886: LD_INT 0
18888: PPUSH
// begin for i := 1 to 5 do
18889: LD_ADDR_VAR 0 1
18893: PUSH
18894: DOUBLE
18895: LD_INT 1
18897: DEC
18898: ST_TO_ADDR
18899: LD_INT 5
18901: PUSH
18902: FOR_TO
18903: IFFALSE 18982
// begin uc_nation := nation_nature ;
18905: LD_ADDR_OWVAR 21
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// uc_side := 0 ;
18913: LD_ADDR_OWVAR 20
18917: PUSH
18918: LD_INT 0
18920: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18921: LD_ADDR_OWVAR 29
18925: PUSH
18926: LD_INT 12
18928: PUSH
18929: LD_INT 12
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// hc_agressivity := 20 ;
18936: LD_ADDR_OWVAR 35
18940: PUSH
18941: LD_INT 20
18943: ST_TO_ADDR
// hc_class := class_tiger ;
18944: LD_ADDR_OWVAR 28
18948: PUSH
18949: LD_INT 14
18951: ST_TO_ADDR
// hc_gallery :=  ;
18952: LD_ADDR_OWVAR 33
18956: PUSH
18957: LD_STRING 
18959: ST_TO_ADDR
// hc_name :=  ;
18960: LD_ADDR_OWVAR 26
18964: PUSH
18965: LD_STRING 
18967: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18968: CALL_OW 44
18972: PPUSH
18973: LD_INT 0
18975: PPUSH
18976: CALL_OW 51
// end ;
18980: GO 18902
18982: POP
18983: POP
// end ;
18984: PPOPN 1
18986: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18987: LD_EXP 22
18991: PUSH
18992: LD_EXP 42
18996: AND
18997: IFFALSE 19006
18999: GO 19001
19001: DISABLE
// StreamSibBomb ;
19002: CALL 19007 0 0
19006: END
// export function StreamSibBomb ; var i , x , y ; begin
19007: LD_INT 0
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
// result := false ;
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: LD_INT 0
19020: ST_TO_ADDR
// for i := 1 to 16 do
19021: LD_ADDR_VAR 0 2
19025: PUSH
19026: DOUBLE
19027: LD_INT 1
19029: DEC
19030: ST_TO_ADDR
19031: LD_INT 16
19033: PUSH
19034: FOR_TO
19035: IFFALSE 19234
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_INT 10
19044: PUSH
19045: LD_INT 20
19047: PUSH
19048: LD_INT 30
19050: PUSH
19051: LD_INT 40
19053: PUSH
19054: LD_INT 50
19056: PUSH
19057: LD_INT 60
19059: PUSH
19060: LD_INT 70
19062: PUSH
19063: LD_INT 80
19065: PUSH
19066: LD_INT 90
19068: PUSH
19069: LD_INT 100
19071: PUSH
19072: LD_INT 110
19074: PUSH
19075: LD_INT 120
19077: PUSH
19078: LD_INT 130
19080: PUSH
19081: LD_INT 140
19083: PUSH
19084: LD_INT 150
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PPUSH
19107: LD_INT 15
19109: PPUSH
19110: CALL_OW 12
19114: ARRAY
19115: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19116: LD_ADDR_VAR 0 4
19120: PUSH
19121: LD_INT 10
19123: PUSH
19124: LD_INT 20
19126: PUSH
19127: LD_INT 30
19129: PUSH
19130: LD_INT 40
19132: PUSH
19133: LD_INT 50
19135: PUSH
19136: LD_INT 60
19138: PUSH
19139: LD_INT 70
19141: PUSH
19142: LD_INT 80
19144: PUSH
19145: LD_INT 90
19147: PUSH
19148: LD_INT 100
19150: PUSH
19151: LD_INT 110
19153: PUSH
19154: LD_INT 120
19156: PUSH
19157: LD_INT 130
19159: PUSH
19160: LD_INT 140
19162: PUSH
19163: LD_INT 150
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: PPUSH
19186: LD_INT 15
19188: PPUSH
19189: CALL_OW 12
19193: ARRAY
19194: ST_TO_ADDR
// if ValidHex ( x , y ) then
19195: LD_VAR 0 3
19199: PPUSH
19200: LD_VAR 0 4
19204: PPUSH
19205: CALL_OW 488
19209: IFFALSE 19232
// begin result := [ x , y ] ;
19211: LD_ADDR_VAR 0 1
19215: PUSH
19216: LD_VAR 0 3
19220: PUSH
19221: LD_VAR 0 4
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: ST_TO_ADDR
// break ;
19230: GO 19234
// end ; end ;
19232: GO 19034
19234: POP
19235: POP
// if result then
19236: LD_VAR 0 1
19240: IFFALSE 19300
// begin ToLua ( playSibBomb() ) ;
19242: LD_STRING playSibBomb()
19244: PPUSH
19245: CALL_OW 559
// wait ( 0 0$14 ) ;
19249: LD_INT 490
19251: PPUSH
19252: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19256: LD_VAR 0 1
19260: PUSH
19261: LD_INT 1
19263: ARRAY
19264: PPUSH
19265: LD_VAR 0 1
19269: PUSH
19270: LD_INT 2
19272: ARRAY
19273: PPUSH
19274: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19278: LD_VAR 0 1
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PPUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_INT 2
19294: ARRAY
19295: PPUSH
19296: CALL_OW 429
// end ; end ;
19300: LD_VAR 0 1
19304: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19305: LD_EXP 22
19309: PUSH
19310: LD_EXP 44
19314: AND
19315: IFFALSE 19327
19317: GO 19319
19319: DISABLE
// YouLost (  ) ;
19320: LD_STRING 
19322: PPUSH
19323: CALL_OW 104
19327: END
// every 0 0$1 trigger StreamModeActive and sFog do
19328: LD_EXP 22
19332: PUSH
19333: LD_EXP 43
19337: AND
19338: IFFALSE 19352
19340: GO 19342
19342: DISABLE
// FogOff ( your_side ) ;
19343: LD_OWVAR 2
19347: PPUSH
19348: CALL_OW 344
19352: END
// every 0 0$1 trigger StreamModeActive and sSun do
19353: LD_EXP 22
19357: PUSH
19358: LD_EXP 45
19362: AND
19363: IFFALSE 19391
19365: GO 19367
19367: DISABLE
// begin solar_recharge_percent := 0 ;
19368: LD_ADDR_OWVAR 79
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19376: LD_INT 10500
19378: PPUSH
19379: CALL_OW 67
// solar_recharge_percent := 100 ;
19383: LD_ADDR_OWVAR 79
19387: PUSH
19388: LD_INT 100
19390: ST_TO_ADDR
// end ;
19391: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19392: LD_EXP 22
19396: PUSH
19397: LD_EXP 46
19401: AND
19402: IFFALSE 19641
19404: GO 19406
19406: DISABLE
19407: LD_INT 0
19409: PPUSH
19410: PPUSH
19411: PPUSH
// begin tmp := [ ] ;
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: EMPTY
19418: ST_TO_ADDR
// for i := 1 to 6 do
19419: LD_ADDR_VAR 0 1
19423: PUSH
19424: DOUBLE
19425: LD_INT 1
19427: DEC
19428: ST_TO_ADDR
19429: LD_INT 6
19431: PUSH
19432: FOR_TO
19433: IFFALSE 19538
// begin uc_nation := nation_nature ;
19435: LD_ADDR_OWVAR 21
19439: PUSH
19440: LD_INT 0
19442: ST_TO_ADDR
// uc_side := 0 ;
19443: LD_ADDR_OWVAR 20
19447: PUSH
19448: LD_INT 0
19450: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19451: LD_ADDR_OWVAR 29
19455: PUSH
19456: LD_INT 12
19458: PUSH
19459: LD_INT 12
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: ST_TO_ADDR
// hc_agressivity := 20 ;
19466: LD_ADDR_OWVAR 35
19470: PUSH
19471: LD_INT 20
19473: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19474: LD_ADDR_OWVAR 28
19478: PUSH
19479: LD_INT 17
19481: ST_TO_ADDR
// hc_gallery :=  ;
19482: LD_ADDR_OWVAR 33
19486: PUSH
19487: LD_STRING 
19489: ST_TO_ADDR
// hc_name :=  ;
19490: LD_ADDR_OWVAR 26
19494: PUSH
19495: LD_STRING 
19497: ST_TO_ADDR
// un := CreateHuman ;
19498: LD_ADDR_VAR 0 2
19502: PUSH
19503: CALL_OW 44
19507: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19508: LD_VAR 0 2
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 51
// tmp := tmp ^ un ;
19520: LD_ADDR_VAR 0 3
19524: PUSH
19525: LD_VAR 0 3
19529: PUSH
19530: LD_VAR 0 2
19534: ADD
19535: ST_TO_ADDR
// end ;
19536: GO 19432
19538: POP
19539: POP
// repeat wait ( 0 0$1 ) ;
19540: LD_INT 35
19542: PPUSH
19543: CALL_OW 67
// for un in tmp do
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 3
19556: PUSH
19557: FOR_IN
19558: IFFALSE 19632
// begin if IsDead ( un ) then
19560: LD_VAR 0 2
19564: PPUSH
19565: CALL_OW 301
19569: IFFALSE 19589
// begin tmp := tmp diff un ;
19571: LD_ADDR_VAR 0 3
19575: PUSH
19576: LD_VAR 0 3
19580: PUSH
19581: LD_VAR 0 2
19585: DIFF
19586: ST_TO_ADDR
// continue ;
19587: GO 19557
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19589: LD_VAR 0 2
19593: PPUSH
19594: LD_INT 3
19596: PUSH
19597: LD_INT 22
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: PPUSH
19616: LD_VAR 0 2
19620: PPUSH
19621: CALL_OW 74
19625: PPUSH
19626: CALL_OW 115
// end ;
19630: GO 19557
19632: POP
19633: POP
// until not tmp ;
19634: LD_VAR 0 3
19638: NOT
19639: IFFALSE 19540
// end ;
19641: PPOPN 3
19643: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19644: LD_EXP 22
19648: PUSH
19649: LD_EXP 47
19653: AND
19654: IFFALSE 19708
19656: GO 19658
19658: DISABLE
// begin ToLua ( displayTroll(); ) ;
19659: LD_STRING displayTroll();
19661: PPUSH
19662: CALL_OW 559
// wait ( 3 3$00 ) ;
19666: LD_INT 6300
19668: PPUSH
19669: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19673: LD_STRING hideTroll();
19675: PPUSH
19676: CALL_OW 559
// wait ( 1 1$00 ) ;
19680: LD_INT 2100
19682: PPUSH
19683: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19687: LD_STRING displayTroll();
19689: PPUSH
19690: CALL_OW 559
// wait ( 1 1$00 ) ;
19694: LD_INT 2100
19696: PPUSH
19697: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19701: LD_STRING hideTroll();
19703: PPUSH
19704: CALL_OW 559
// end ;
19708: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19709: LD_EXP 22
19713: PUSH
19714: LD_EXP 48
19718: AND
19719: IFFALSE 19782
19721: GO 19723
19723: DISABLE
19724: LD_INT 0
19726: PPUSH
// begin p := 0 ;
19727: LD_ADDR_VAR 0 1
19731: PUSH
19732: LD_INT 0
19734: ST_TO_ADDR
// repeat game_speed := 1 ;
19735: LD_ADDR_OWVAR 65
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19743: LD_INT 35
19745: PPUSH
19746: CALL_OW 67
// p := p + 1 ;
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: LD_VAR 0 1
19759: PUSH
19760: LD_INT 1
19762: PLUS
19763: ST_TO_ADDR
// until p >= 60 ;
19764: LD_VAR 0 1
19768: PUSH
19769: LD_INT 60
19771: GREATEREQUAL
19772: IFFALSE 19735
// game_speed := 4 ;
19774: LD_ADDR_OWVAR 65
19778: PUSH
19779: LD_INT 4
19781: ST_TO_ADDR
// end ;
19782: PPOPN 1
19784: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19785: LD_EXP 22
19789: PUSH
19790: LD_EXP 49
19794: AND
19795: IFFALSE 19941
19797: GO 19799
19799: DISABLE
19800: LD_INT 0
19802: PPUSH
19803: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19804: LD_ADDR_VAR 0 1
19808: PUSH
19809: LD_INT 22
19811: PUSH
19812: LD_OWVAR 2
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 30
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 30
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: ST_TO_ADDR
// if not depot then
19858: LD_VAR 0 1
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 19941
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19867: LD_ADDR_VAR 0 2
19871: PUSH
19872: LD_VAR 0 1
19876: PUSH
19877: LD_INT 1
19879: PPUSH
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 12
19889: ARRAY
19890: PPUSH
19891: CALL_OW 274
19895: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: LD_INT 0
19906: PPUSH
19907: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19911: LD_VAR 0 2
19915: PPUSH
19916: LD_INT 2
19918: PPUSH
19919: LD_INT 0
19921: PPUSH
19922: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_INT 3
19933: PPUSH
19934: LD_INT 0
19936: PPUSH
19937: CALL_OW 277
// end ;
19941: PPOPN 2
19943: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19944: LD_EXP 22
19948: PUSH
19949: LD_EXP 50
19953: AND
19954: IFFALSE 20051
19956: GO 19958
19958: DISABLE
19959: LD_INT 0
19961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19962: LD_ADDR_VAR 0 1
19966: PUSH
19967: LD_INT 22
19969: PUSH
19970: LD_OWVAR 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 21
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 3
19991: PUSH
19992: LD_INT 23
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: ST_TO_ADDR
// if not tmp then
20016: LD_VAR 0 1
20020: NOT
20021: IFFALSE 20025
// exit ;
20023: GO 20051
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20025: LD_VAR 0 1
20029: PUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 12
20042: ARRAY
20043: PPUSH
20044: LD_INT 200
20046: PPUSH
20047: CALL_OW 234
// end ;
20051: PPOPN 1
20053: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20054: LD_EXP 22
20058: PUSH
20059: LD_EXP 51
20063: AND
20064: IFFALSE 20143
20066: GO 20068
20068: DISABLE
20069: LD_INT 0
20071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 22
20079: PUSH
20080: LD_OWVAR 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 2
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 1
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 1
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 12
20134: ARRAY
20135: PPUSH
20136: LD_INT 60
20138: PPUSH
20139: CALL_OW 234
// end ;
20143: PPOPN 1
20145: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20146: LD_EXP 22
20150: PUSH
20151: LD_EXP 52
20155: AND
20156: IFFALSE 20255
20158: GO 20160
20160: DISABLE
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
// begin enable ;
20165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20166: LD_ADDR_VAR 0 1
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_OWVAR 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 61
20185: PUSH
20186: EMPTY
20187: LIST
20188: PUSH
20189: LD_INT 33
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: PPUSH
20204: CALL_OW 69
20208: ST_TO_ADDR
// if not tmp then
20209: LD_VAR 0 1
20213: NOT
20214: IFFALSE 20218
// exit ;
20216: GO 20255
// for i in tmp do
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_VAR 0 1
20227: PUSH
20228: FOR_IN
20229: IFFALSE 20253
// if IsControledBy ( i ) then
20231: LD_VAR 0 2
20235: PPUSH
20236: CALL_OW 312
20240: IFFALSE 20251
// ComUnlink ( i ) ;
20242: LD_VAR 0 2
20246: PPUSH
20247: CALL_OW 136
20251: GO 20228
20253: POP
20254: POP
// end ;
20255: PPOPN 2
20257: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20258: LD_EXP 22
20262: PUSH
20263: LD_EXP 53
20267: AND
20268: IFFALSE 20408
20270: GO 20272
20272: DISABLE
20273: LD_INT 0
20275: PPUSH
20276: PPUSH
// begin ToLua ( displayPowell(); ) ;
20277: LD_STRING displayPowell();
20279: PPUSH
20280: CALL_OW 559
// uc_side := 0 ;
20284: LD_ADDR_OWVAR 20
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// uc_nation := 2 ;
20292: LD_ADDR_OWVAR 21
20296: PUSH
20297: LD_INT 2
20299: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20300: LD_ADDR_OWVAR 37
20304: PUSH
20305: LD_INT 14
20307: ST_TO_ADDR
// vc_engine := engine_siberite ;
20308: LD_ADDR_OWVAR 39
20312: PUSH
20313: LD_INT 3
20315: ST_TO_ADDR
// vc_control := control_apeman ;
20316: LD_ADDR_OWVAR 38
20320: PUSH
20321: LD_INT 5
20323: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20324: LD_ADDR_OWVAR 40
20328: PUSH
20329: LD_INT 29
20331: ST_TO_ADDR
// un := CreateVehicle ;
20332: LD_ADDR_VAR 0 2
20336: PUSH
20337: CALL_OW 45
20341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20342: LD_VAR 0 2
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20354: LD_INT 35
20356: PPUSH
20357: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_INT 22
20368: PUSH
20369: LD_OWVAR 2
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: PPUSH
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 74
20392: PPUSH
20393: CALL_OW 115
// until IsDead ( un ) ;
20397: LD_VAR 0 2
20401: PPUSH
20402: CALL_OW 301
20406: IFFALSE 20354
// end ;
20408: PPOPN 2
20410: END
// every 0 0$1 trigger StreamModeActive and sStu do
20411: LD_EXP 22
20415: PUSH
20416: LD_EXP 61
20420: AND
20421: IFFALSE 20437
20423: GO 20425
20425: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20426: LD_STRING displayStucuk();
20428: PPUSH
20429: CALL_OW 559
// ResetFog ;
20433: CALL_OW 335
// end ;
20437: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20438: LD_EXP 22
20442: PUSH
20443: LD_EXP 54
20447: AND
20448: IFFALSE 20589
20450: GO 20452
20452: DISABLE
20453: LD_INT 0
20455: PPUSH
20456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: LD_INT 22
20464: PUSH
20465: LD_OWVAR 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 21
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PPUSH
20488: CALL_OW 69
20492: ST_TO_ADDR
// if not tmp then
20493: LD_VAR 0 2
20497: NOT
20498: IFFALSE 20502
// exit ;
20500: GO 20589
// un := tmp [ rand ( 1 , tmp ) ] ;
20502: LD_ADDR_VAR 0 1
20506: PUSH
20507: LD_VAR 0 2
20511: PUSH
20512: LD_INT 1
20514: PPUSH
20515: LD_VAR 0 2
20519: PPUSH
20520: CALL_OW 12
20524: ARRAY
20525: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20526: LD_VAR 0 1
20530: PPUSH
20531: LD_INT 0
20533: PPUSH
20534: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20538: LD_VAR 0 1
20542: PPUSH
20543: LD_OWVAR 3
20547: PUSH
20548: LD_VAR 0 1
20552: DIFF
20553: PPUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 74
20563: PPUSH
20564: CALL_OW 115
// wait ( 0 0$20 ) ;
20568: LD_INT 700
20570: PPUSH
20571: CALL_OW 67
// SetSide ( un , your_side ) ;
20575: LD_VAR 0 1
20579: PPUSH
20580: LD_OWVAR 2
20584: PPUSH
20585: CALL_OW 235
// end ;
20589: PPOPN 2
20591: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20592: LD_EXP 22
20596: PUSH
20597: LD_EXP 55
20601: AND
20602: IFFALSE 20708
20604: GO 20606
20606: DISABLE
20607: LD_INT 0
20609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20610: LD_ADDR_VAR 0 1
20614: PUSH
20615: LD_INT 22
20617: PUSH
20618: LD_OWVAR 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 30
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: CALL_OW 69
20663: ST_TO_ADDR
// if not depot then
20664: LD_VAR 0 1
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20708
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20673: LD_VAR 0 1
20677: PUSH
20678: LD_INT 1
20680: ARRAY
20681: PPUSH
20682: CALL_OW 250
20686: PPUSH
20687: LD_VAR 0 1
20691: PUSH
20692: LD_INT 1
20694: ARRAY
20695: PPUSH
20696: CALL_OW 251
20700: PPUSH
20701: LD_INT 70
20703: PPUSH
20704: CALL_OW 495
// end ;
20708: PPOPN 1
20710: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20711: LD_EXP 22
20715: PUSH
20716: LD_EXP 56
20720: AND
20721: IFFALSE 20932
20723: GO 20725
20725: DISABLE
20726: LD_INT 0
20728: PPUSH
20729: PPUSH
20730: PPUSH
20731: PPUSH
20732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20733: LD_ADDR_VAR 0 5
20737: PUSH
20738: LD_INT 22
20740: PUSH
20741: LD_OWVAR 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 21
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PPUSH
20764: CALL_OW 69
20768: ST_TO_ADDR
// if not tmp then
20769: LD_VAR 0 5
20773: NOT
20774: IFFALSE 20778
// exit ;
20776: GO 20932
// for i in tmp do
20778: LD_ADDR_VAR 0 1
20782: PUSH
20783: LD_VAR 0 5
20787: PUSH
20788: FOR_IN
20789: IFFALSE 20930
// begin d := rand ( 0 , 5 ) ;
20791: LD_ADDR_VAR 0 4
20795: PUSH
20796: LD_INT 0
20798: PPUSH
20799: LD_INT 5
20801: PPUSH
20802: CALL_OW 12
20806: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20807: LD_ADDR_VAR 0 2
20811: PUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 250
20821: PPUSH
20822: LD_VAR 0 4
20826: PPUSH
20827: LD_INT 3
20829: PPUSH
20830: LD_INT 12
20832: PPUSH
20833: CALL_OW 12
20837: PPUSH
20838: CALL_OW 272
20842: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20843: LD_ADDR_VAR 0 3
20847: PUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 251
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: LD_INT 12
20868: PPUSH
20869: CALL_OW 12
20873: PPUSH
20874: CALL_OW 273
20878: ST_TO_ADDR
// if ValidHex ( x , y ) then
20879: LD_VAR 0 2
20883: PPUSH
20884: LD_VAR 0 3
20888: PPUSH
20889: CALL_OW 488
20893: IFFALSE 20928
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20895: LD_VAR 0 1
20899: PPUSH
20900: LD_VAR 0 2
20904: PPUSH
20905: LD_VAR 0 3
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: LD_INT 6
20915: PPUSH
20916: CALL_OW 12
20920: PPUSH
20921: LD_INT 1
20923: PPUSH
20924: CALL_OW 483
// end ;
20928: GO 20788
20930: POP
20931: POP
// end ;
20932: PPOPN 5
20934: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20935: LD_EXP 22
20939: PUSH
20940: LD_EXP 57
20944: AND
20945: IFFALSE 21039
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 32
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 21
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 69
21000: ST_TO_ADDR
// if not tmp then
21001: LD_VAR 0 2
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21039
// for i in tmp do
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_VAR 0 2
21019: PUSH
21020: FOR_IN
21021: IFFALSE 21037
// SetFuel ( i , 0 ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 0
21030: PPUSH
21031: CALL_OW 240
21035: GO 21020
21037: POP
21038: POP
// end ;
21039: PPOPN 2
21041: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21042: LD_EXP 22
21046: PUSH
21047: LD_EXP 58
21051: AND
21052: IFFALSE 21118
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_OWVAR 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 29
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 69
21095: ST_TO_ADDR
// if not tmp then
21096: LD_VAR 0 1
21100: NOT
21101: IFFALSE 21105
// exit ;
21103: GO 21118
// DestroyUnit ( tmp [ 1 ] ) ;
21105: LD_VAR 0 1
21109: PUSH
21110: LD_INT 1
21112: ARRAY
21113: PPUSH
21114: CALL_OW 65
// end ;
21118: PPOPN 1
21120: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21121: LD_EXP 22
21125: PUSH
21126: LD_EXP 60
21130: AND
21131: IFFALSE 21260
21133: GO 21135
21135: DISABLE
21136: LD_INT 0
21138: PPUSH
// begin uc_side := 0 ;
21139: LD_ADDR_OWVAR 20
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// uc_nation := nation_arabian ;
21147: LD_ADDR_OWVAR 21
21151: PUSH
21152: LD_INT 2
21154: ST_TO_ADDR
// hc_gallery :=  ;
21155: LD_ADDR_OWVAR 33
21159: PUSH
21160: LD_STRING 
21162: ST_TO_ADDR
// hc_name :=  ;
21163: LD_ADDR_OWVAR 26
21167: PUSH
21168: LD_STRING 
21170: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21171: LD_INT 1
21173: PPUSH
21174: LD_INT 11
21176: PPUSH
21177: LD_INT 10
21179: PPUSH
21180: CALL_OW 380
// un := CreateHuman ;
21184: LD_ADDR_VAR 0 1
21188: PUSH
21189: CALL_OW 44
21193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21194: LD_VAR 0 1
21198: PPUSH
21199: LD_INT 1
21201: PPUSH
21202: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21206: LD_INT 35
21208: PPUSH
21209: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21213: LD_VAR 0 1
21217: PPUSH
21218: LD_INT 22
21220: PUSH
21221: LD_OWVAR 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: PPUSH
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 74
21244: PPUSH
21245: CALL_OW 115
// until IsDead ( un ) ;
21249: LD_VAR 0 1
21253: PPUSH
21254: CALL_OW 301
21258: IFFALSE 21206
// end ;
21260: PPOPN 1
21262: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21263: LD_EXP 22
21267: PUSH
21268: LD_EXP 62
21272: AND
21273: IFFALSE 21285
21275: GO 21277
21277: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21278: LD_STRING earthquake(getX(game), 0, 32)
21280: PPUSH
21281: CALL_OW 559
21285: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21286: LD_EXP 22
21290: PUSH
21291: LD_EXP 63
21295: AND
21296: IFFALSE 21387
21298: GO 21300
21300: DISABLE
21301: LD_INT 0
21303: PPUSH
// begin enable ;
21304: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21305: LD_ADDR_VAR 0 1
21309: PUSH
21310: LD_INT 22
21312: PUSH
21313: LD_OWVAR 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 21
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 33
21334: PUSH
21335: LD_INT 3
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: ST_TO_ADDR
// if not tmp then
21352: LD_VAR 0 1
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21361: LD_VAR 0 1
21365: PUSH
21366: LD_INT 1
21368: PPUSH
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 12
21378: ARRAY
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 234
// end ;
21387: PPOPN 1
21389: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21390: LD_EXP 22
21394: PUSH
21395: LD_EXP 64
21399: AND
21400: IFFALSE 21541
21402: GO 21404
21404: DISABLE
21405: LD_INT 0
21407: PPUSH
21408: PPUSH
21409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21410: LD_ADDR_VAR 0 3
21414: PUSH
21415: LD_INT 22
21417: PUSH
21418: LD_OWVAR 2
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 25
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL_OW 69
21445: ST_TO_ADDR
// if not tmp then
21446: LD_VAR 0 3
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 21541
// un := tmp [ rand ( 1 , tmp ) ] ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 1
21467: PPUSH
21468: LD_VAR 0 3
21472: PPUSH
21473: CALL_OW 12
21477: ARRAY
21478: ST_TO_ADDR
// if Crawls ( un ) then
21479: LD_VAR 0 2
21483: PPUSH
21484: CALL_OW 318
21488: IFFALSE 21499
// ComWalk ( un ) ;
21490: LD_VAR 0 2
21494: PPUSH
21495: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_INT 9
21506: PPUSH
21507: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21511: LD_INT 28
21513: PPUSH
21514: LD_OWVAR 2
21518: PPUSH
21519: LD_INT 2
21521: PPUSH
21522: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21526: LD_INT 29
21528: PPUSH
21529: LD_OWVAR 2
21533: PPUSH
21534: LD_INT 2
21536: PPUSH
21537: CALL_OW 322
// end ;
21541: PPOPN 3
21543: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21544: LD_EXP 22
21548: PUSH
21549: LD_EXP 65
21553: AND
21554: IFFALSE 21665
21556: GO 21558
21558: DISABLE
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21564: LD_ADDR_VAR 0 3
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_OWVAR 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 25
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PPUSH
21595: CALL_OW 69
21599: ST_TO_ADDR
// if not tmp then
21600: LD_VAR 0 3
21604: NOT
21605: IFFALSE 21609
// exit ;
21607: GO 21665
// un := tmp [ rand ( 1 , tmp ) ] ;
21609: LD_ADDR_VAR 0 2
21613: PUSH
21614: LD_VAR 0 3
21618: PUSH
21619: LD_INT 1
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: CALL_OW 12
21631: ARRAY
21632: ST_TO_ADDR
// if Crawls ( un ) then
21633: LD_VAR 0 2
21637: PPUSH
21638: CALL_OW 318
21642: IFFALSE 21653
// ComWalk ( un ) ;
21644: LD_VAR 0 2
21648: PPUSH
21649: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21653: LD_VAR 0 2
21657: PPUSH
21658: LD_INT 8
21660: PPUSH
21661: CALL_OW 336
// end ;
21665: PPOPN 3
21667: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21668: LD_EXP 22
21672: PUSH
21673: LD_EXP 66
21677: AND
21678: IFFALSE 21822
21680: GO 21682
21682: DISABLE
21683: LD_INT 0
21685: PPUSH
21686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21687: LD_ADDR_VAR 0 2
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_OWVAR 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 21
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: LD_INT 34
21719: PUSH
21720: LD_INT 12
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 34
21729: PUSH
21730: LD_INT 51
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 34
21739: PUSH
21740: LD_INT 32
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 69
21762: ST_TO_ADDR
// if not tmp then
21763: LD_VAR 0 2
21767: NOT
21768: IFFALSE 21772
// exit ;
21770: GO 21822
// for i in tmp do
21772: LD_ADDR_VAR 0 1
21776: PUSH
21777: LD_VAR 0 2
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21820
// if GetCargo ( i , mat_artifact ) = 0 then
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 4
21792: PPUSH
21793: CALL_OW 289
21797: PUSH
21798: LD_INT 0
21800: EQUAL
21801: IFFALSE 21818
// SetCargo ( i , mat_siberit , 100 ) ;
21803: LD_VAR 0 1
21807: PPUSH
21808: LD_INT 3
21810: PPUSH
21811: LD_INT 100
21813: PPUSH
21814: CALL_OW 290
21818: GO 21782
21820: POP
21821: POP
// end ;
21822: PPOPN 2
21824: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21825: LD_EXP 22
21829: PUSH
21830: LD_EXP 67
21834: AND
21835: IFFALSE 22018
21837: GO 21839
21839: DISABLE
21840: LD_INT 0
21842: PPUSH
21843: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_INT 22
21851: PUSH
21852: LD_OWVAR 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PPUSH
21861: CALL_OW 69
21865: ST_TO_ADDR
// if not tmp then
21866: LD_VAR 0 2
21870: NOT
21871: IFFALSE 21875
// exit ;
21873: GO 22018
// for i := 1 to 2 do
21875: LD_ADDR_VAR 0 1
21879: PUSH
21880: DOUBLE
21881: LD_INT 1
21883: DEC
21884: ST_TO_ADDR
21885: LD_INT 2
21887: PUSH
21888: FOR_TO
21889: IFFALSE 22016
// begin uc_side := your_side ;
21891: LD_ADDR_OWVAR 20
21895: PUSH
21896: LD_OWVAR 2
21900: ST_TO_ADDR
// uc_nation := nation_american ;
21901: LD_ADDR_OWVAR 21
21905: PUSH
21906: LD_INT 1
21908: ST_TO_ADDR
// vc_chassis := us_morphling ;
21909: LD_ADDR_OWVAR 37
21913: PUSH
21914: LD_INT 5
21916: ST_TO_ADDR
// vc_engine := engine_siberite ;
21917: LD_ADDR_OWVAR 39
21921: PUSH
21922: LD_INT 3
21924: ST_TO_ADDR
// vc_control := control_computer ;
21925: LD_ADDR_OWVAR 38
21929: PUSH
21930: LD_INT 3
21932: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21933: LD_ADDR_OWVAR 40
21937: PUSH
21938: LD_INT 10
21940: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21941: LD_VAR 0 2
21945: PUSH
21946: LD_INT 1
21948: ARRAY
21949: PPUSH
21950: CALL_OW 310
21954: NOT
21955: IFFALSE 22002
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21957: CALL_OW 45
21961: PPUSH
21962: LD_VAR 0 2
21966: PUSH
21967: LD_INT 1
21969: ARRAY
21970: PPUSH
21971: CALL_OW 250
21975: PPUSH
21976: LD_VAR 0 2
21980: PUSH
21981: LD_INT 1
21983: ARRAY
21984: PPUSH
21985: CALL_OW 251
21989: PPUSH
21990: LD_INT 12
21992: PPUSH
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 50
22000: GO 22014
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22002: CALL_OW 45
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 51
// end ;
22014: GO 21888
22016: POP
22017: POP
// end ;
22018: PPOPN 2
22020: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22021: LD_EXP 22
22025: PUSH
22026: LD_EXP 68
22030: AND
22031: IFFALSE 22253
22033: GO 22035
22035: DISABLE
22036: LD_INT 0
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22044: LD_ADDR_VAR 0 6
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_OWVAR 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 3
22073: PUSH
22074: LD_INT 23
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: PPUSH
22093: CALL_OW 69
22097: ST_TO_ADDR
// if not tmp then
22098: LD_VAR 0 6
22102: NOT
22103: IFFALSE 22107
// exit ;
22105: GO 22253
// s1 := rand ( 1 , 4 ) ;
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: LD_INT 1
22114: PPUSH
22115: LD_INT 4
22117: PPUSH
22118: CALL_OW 12
22122: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22123: LD_ADDR_VAR 0 4
22127: PUSH
22128: LD_VAR 0 6
22132: PUSH
22133: LD_INT 1
22135: ARRAY
22136: PPUSH
22137: LD_VAR 0 2
22141: PPUSH
22142: CALL_OW 259
22146: ST_TO_ADDR
// if s1 = 1 then
22147: LD_VAR 0 2
22151: PUSH
22152: LD_INT 1
22154: EQUAL
22155: IFFALSE 22175
// s2 := rand ( 2 , 4 ) else
22157: LD_ADDR_VAR 0 3
22161: PUSH
22162: LD_INT 2
22164: PPUSH
22165: LD_INT 4
22167: PPUSH
22168: CALL_OW 12
22172: ST_TO_ADDR
22173: GO 22183
// s2 := 1 ;
22175: LD_ADDR_VAR 0 3
22179: PUSH
22180: LD_INT 1
22182: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 6
22192: PUSH
22193: LD_INT 1
22195: ARRAY
22196: PPUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: CALL_OW 259
22206: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22207: LD_VAR 0 6
22211: PUSH
22212: LD_INT 1
22214: ARRAY
22215: PPUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: LD_VAR 0 5
22225: PPUSH
22226: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22230: LD_VAR 0 6
22234: PUSH
22235: LD_INT 1
22237: ARRAY
22238: PPUSH
22239: LD_VAR 0 3
22243: PPUSH
22244: LD_VAR 0 4
22248: PPUSH
22249: CALL_OW 237
// end ;
22253: PPOPN 6
22255: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22256: LD_EXP 22
22260: PUSH
22261: LD_EXP 69
22265: AND
22266: IFFALSE 22345
22268: GO 22270
22270: DISABLE
22271: LD_INT 0
22273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22274: LD_ADDR_VAR 0 1
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_OWVAR 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: ST_TO_ADDR
// if not tmp then
22310: LD_VAR 0 1
22314: NOT
22315: IFFALSE 22319
// exit ;
22317: GO 22345
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22319: LD_VAR 0 1
22323: PUSH
22324: LD_INT 1
22326: PPUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 12
22336: ARRAY
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 234
// end ;
22345: PPOPN 1
22347: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22348: LD_EXP 22
22352: PUSH
22353: LD_EXP 70
22357: AND
22358: IFFALSE 22470
22360: GO 22362
22362: DISABLE
22363: LD_INT 0
22365: PPUSH
22366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22367: LD_ADDR_VAR 0 2
22371: PUSH
22372: LD_INT 22
22374: PUSH
22375: LD_OWVAR 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 30
22389: PUSH
22390: LD_INT 27
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 30
22399: PUSH
22400: LD_INT 26
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 30
22409: PUSH
22410: LD_INT 28
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 69
22431: ST_TO_ADDR
// if not tmp then
22432: LD_VAR 0 2
22436: NOT
22437: IFFALSE 22441
// exit ;
22439: GO 22470
// for i in tmp do
22441: LD_ADDR_VAR 0 1
22445: PUSH
22446: LD_VAR 0 2
22450: PUSH
22451: FOR_IN
22452: IFFALSE 22468
// SetLives ( i , 1 ) ;
22454: LD_VAR 0 1
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 234
22466: GO 22451
22468: POP
22469: POP
// end ;
22470: PPOPN 2
22472: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22473: LD_EXP 22
22477: PUSH
22478: LD_EXP 71
22482: AND
22483: IFFALSE 22770
22485: GO 22487
22487: DISABLE
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
22492: PPUSH
// begin i := rand ( 1 , 7 ) ;
22493: LD_ADDR_VAR 0 1
22497: PUSH
22498: LD_INT 1
22500: PPUSH
22501: LD_INT 7
22503: PPUSH
22504: CALL_OW 12
22508: ST_TO_ADDR
// case i of 1 :
22509: LD_VAR 0 1
22513: PUSH
22514: LD_INT 1
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22522
22520: GO 22532
22522: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22523: LD_STRING earthquake(getX(game), 0, 32)
22525: PPUSH
22526: CALL_OW 559
22530: GO 22770
22532: LD_INT 2
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22554
22540: POP
// begin ToLua ( displayStucuk(); ) ;
22541: LD_STRING displayStucuk();
22543: PPUSH
22544: CALL_OW 559
// ResetFog ;
22548: CALL_OW 335
// end ; 3 :
22552: GO 22770
22554: LD_INT 3
22556: DOUBLE
22557: EQUAL
22558: IFTRUE 22562
22560: GO 22666
22562: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_OWVAR 2
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 25
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL_OW 69
22598: ST_TO_ADDR
// if not tmp then
22599: LD_VAR 0 2
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 22770
// un := tmp [ rand ( 1 , tmp ) ] ;
22608: LD_ADDR_VAR 0 3
22612: PUSH
22613: LD_VAR 0 2
22617: PUSH
22618: LD_INT 1
22620: PPUSH
22621: LD_VAR 0 2
22625: PPUSH
22626: CALL_OW 12
22630: ARRAY
22631: ST_TO_ADDR
// if Crawls ( un ) then
22632: LD_VAR 0 3
22636: PPUSH
22637: CALL_OW 318
22641: IFFALSE 22652
// ComWalk ( un ) ;
22643: LD_VAR 0 3
22647: PPUSH
22648: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22652: LD_VAR 0 3
22656: PPUSH
22657: LD_INT 8
22659: PPUSH
22660: CALL_OW 336
// end ; 4 :
22664: GO 22770
22666: LD_INT 4
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22748
22674: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22675: LD_ADDR_VAR 0 2
22679: PUSH
22680: LD_INT 22
22682: PUSH
22683: LD_OWVAR 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 30
22694: PUSH
22695: LD_INT 29
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 69
22710: ST_TO_ADDR
// if not tmp then
22711: LD_VAR 0 2
22715: NOT
22716: IFFALSE 22720
// exit ;
22718: GO 22770
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22720: LD_VAR 0 2
22724: PUSH
22725: LD_INT 1
22727: ARRAY
22728: PPUSH
22729: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22733: LD_VAR 0 2
22737: PUSH
22738: LD_INT 1
22740: ARRAY
22741: PPUSH
22742: CALL_OW 65
// end ; 5 .. 7 :
22746: GO 22770
22748: LD_INT 5
22750: DOUBLE
22751: GREATEREQUAL
22752: IFFALSE 22760
22754: LD_INT 7
22756: DOUBLE
22757: LESSEQUAL
22758: IFTRUE 22762
22760: GO 22769
22762: POP
// StreamSibBomb ; end ;
22763: CALL 19007 0 0
22767: GO 22770
22769: POP
// end ;
22770: PPOPN 3
22772: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22773: LD_EXP 22
22777: PUSH
22778: LD_EXP 72
22782: AND
22783: IFFALSE 22939
22785: GO 22787
22787: DISABLE
22788: LD_INT 0
22790: PPUSH
22791: PPUSH
22792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22793: LD_ADDR_VAR 0 2
22797: PUSH
22798: LD_INT 81
22800: PUSH
22801: LD_OWVAR 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 2
22812: PUSH
22813: LD_INT 21
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 21
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PPUSH
22842: CALL_OW 69
22846: ST_TO_ADDR
// if not tmp then
22847: LD_VAR 0 2
22851: NOT
22852: IFFALSE 22856
// exit ;
22854: GO 22939
// p := 0 ;
22856: LD_ADDR_VAR 0 3
22860: PUSH
22861: LD_INT 0
22863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22864: LD_INT 35
22866: PPUSH
22867: CALL_OW 67
// p := p + 1 ;
22871: LD_ADDR_VAR 0 3
22875: PUSH
22876: LD_VAR 0 3
22880: PUSH
22881: LD_INT 1
22883: PLUS
22884: ST_TO_ADDR
// for i in tmp do
22885: LD_ADDR_VAR 0 1
22889: PUSH
22890: LD_VAR 0 2
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22927
// if GetLives ( i ) < 1000 then
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 256
22907: PUSH
22908: LD_INT 1000
22910: LESS
22911: IFFALSE 22925
// SetLives ( i , 1000 ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_INT 1000
22920: PPUSH
22921: CALL_OW 234
22925: GO 22895
22927: POP
22928: POP
// until p > 20 ;
22929: LD_VAR 0 3
22933: PUSH
22934: LD_INT 20
22936: GREATER
22937: IFFALSE 22864
// end ;
22939: PPOPN 3
22941: END
// every 0 0$1 trigger StreamModeActive and sTime do
22942: LD_EXP 22
22946: PUSH
22947: LD_EXP 73
22951: AND
22952: IFFALSE 22987
22954: GO 22956
22956: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22957: LD_INT 28
22959: PPUSH
22960: LD_OWVAR 2
22964: PPUSH
22965: LD_INT 2
22967: PPUSH
22968: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22972: LD_INT 30
22974: PPUSH
22975: LD_OWVAR 2
22979: PPUSH
22980: LD_INT 2
22982: PPUSH
22983: CALL_OW 322
// end ;
22987: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22988: LD_EXP 22
22992: PUSH
22993: LD_EXP 74
22997: AND
22998: IFFALSE 23119
23000: GO 23002
23002: DISABLE
23003: LD_INT 0
23005: PPUSH
23006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23007: LD_ADDR_VAR 0 2
23011: PUSH
23012: LD_INT 22
23014: PUSH
23015: LD_OWVAR 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 21
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 23
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 69
23060: ST_TO_ADDR
// if not tmp then
23061: LD_VAR 0 2
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23119
// for i in tmp do
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: FOR_IN
23081: IFFALSE 23117
// begin if Crawls ( i ) then
23083: LD_VAR 0 1
23087: PPUSH
23088: CALL_OW 318
23092: IFFALSE 23103
// ComWalk ( i ) ;
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 138
// SetClass ( i , 2 ) ;
23103: LD_VAR 0 1
23107: PPUSH
23108: LD_INT 2
23110: PPUSH
23111: CALL_OW 336
// end ;
23115: GO 23080
23117: POP
23118: POP
// end ;
23119: PPOPN 2
23121: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23122: LD_EXP 22
23126: PUSH
23127: LD_EXP 75
23131: AND
23132: IFFALSE 23420
23134: GO 23136
23136: DISABLE
23137: LD_INT 0
23139: PPUSH
23140: PPUSH
23141: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23142: LD_OWVAR 2
23146: PPUSH
23147: LD_INT 9
23149: PPUSH
23150: LD_INT 1
23152: PPUSH
23153: LD_INT 1
23155: PPUSH
23156: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23160: LD_INT 9
23162: PPUSH
23163: LD_OWVAR 2
23167: PPUSH
23168: CALL_OW 343
// uc_side := 9 ;
23172: LD_ADDR_OWVAR 20
23176: PUSH
23177: LD_INT 9
23179: ST_TO_ADDR
// uc_nation := 2 ;
23180: LD_ADDR_OWVAR 21
23184: PUSH
23185: LD_INT 2
23187: ST_TO_ADDR
// hc_name := Dark Warrior ;
23188: LD_ADDR_OWVAR 26
23192: PUSH
23193: LD_STRING Dark Warrior
23195: ST_TO_ADDR
// hc_gallery :=  ;
23196: LD_ADDR_OWVAR 33
23200: PUSH
23201: LD_STRING 
23203: ST_TO_ADDR
// hc_noskilllimit := true ;
23204: LD_ADDR_OWVAR 76
23208: PUSH
23209: LD_INT 1
23211: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23212: LD_ADDR_OWVAR 31
23216: PUSH
23217: LD_INT 30
23219: PUSH
23220: LD_INT 30
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 30
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: ST_TO_ADDR
// un := CreateHuman ;
23235: LD_ADDR_VAR 0 3
23239: PUSH
23240: CALL_OW 44
23244: ST_TO_ADDR
// hc_noskilllimit := false ;
23245: LD_ADDR_OWVAR 76
23249: PUSH
23250: LD_INT 0
23252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23253: LD_VAR 0 3
23257: PPUSH
23258: LD_INT 1
23260: PPUSH
23261: CALL_OW 51
// ToLua ( playRanger() ) ;
23265: LD_STRING playRanger()
23267: PPUSH
23268: CALL_OW 559
// p := 0 ;
23272: LD_ADDR_VAR 0 2
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23280: LD_INT 35
23282: PPUSH
23283: CALL_OW 67
// p := p + 1 ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_VAR 0 2
23296: PUSH
23297: LD_INT 1
23299: PLUS
23300: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23301: LD_VAR 0 3
23305: PPUSH
23306: CALL_OW 256
23310: PUSH
23311: LD_INT 1000
23313: LESS
23314: IFFALSE 23328
// SetLives ( un , 1000 ) ;
23316: LD_VAR 0 3
23320: PPUSH
23321: LD_INT 1000
23323: PPUSH
23324: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23328: LD_VAR 0 3
23332: PPUSH
23333: LD_INT 81
23335: PUSH
23336: LD_OWVAR 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 91
23347: PUSH
23348: LD_VAR 0 3
23352: PUSH
23353: LD_INT 30
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PPUSH
23365: CALL_OW 69
23369: PPUSH
23370: LD_VAR 0 3
23374: PPUSH
23375: CALL_OW 74
23379: PPUSH
23380: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23384: LD_VAR 0 2
23388: PUSH
23389: LD_INT 80
23391: GREATER
23392: PUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 301
23402: OR
23403: IFFALSE 23280
// if un then
23405: LD_VAR 0 3
23409: IFFALSE 23420
// RemoveUnit ( un ) ;
23411: LD_VAR 0 3
23415: PPUSH
23416: CALL_OW 64
// end ;
23420: PPOPN 3
23422: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23423: LD_EXP 76
23427: IFFALSE 23543
23429: GO 23431
23431: DISABLE
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
23436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23437: LD_ADDR_VAR 0 2
23441: PUSH
23442: LD_INT 81
23444: PUSH
23445: LD_OWVAR 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 21
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23473: LD_STRING playComputer()
23475: PPUSH
23476: CALL_OW 559
// if not tmp then
23480: LD_VAR 0 2
23484: NOT
23485: IFFALSE 23489
// exit ;
23487: GO 23543
// for i in tmp do
23489: LD_ADDR_VAR 0 1
23493: PUSH
23494: LD_VAR 0 2
23498: PUSH
23499: FOR_IN
23500: IFFALSE 23541
// for j := 1 to 4 do
23502: LD_ADDR_VAR 0 3
23506: PUSH
23507: DOUBLE
23508: LD_INT 1
23510: DEC
23511: ST_TO_ADDR
23512: LD_INT 4
23514: PUSH
23515: FOR_TO
23516: IFFALSE 23537
// SetSkill ( i , j , 10 ) ;
23518: LD_VAR 0 1
23522: PPUSH
23523: LD_VAR 0 3
23527: PPUSH
23528: LD_INT 10
23530: PPUSH
23531: CALL_OW 237
23535: GO 23515
23537: POP
23538: POP
23539: GO 23499
23541: POP
23542: POP
// end ;
23543: PPOPN 3
23545: END
// every 0 0$1 trigger s30 do var i , tmp ;
23546: LD_EXP 77
23550: IFFALSE 23619
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
23558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23559: LD_ADDR_VAR 0 2
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_OWVAR 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PPUSH
23576: CALL_OW 69
23580: ST_TO_ADDR
// if not tmp then
23581: LD_VAR 0 2
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 23619
// for i in tmp do
23590: LD_ADDR_VAR 0 1
23594: PUSH
23595: LD_VAR 0 2
23599: PUSH
23600: FOR_IN
23601: IFFALSE 23617
// SetLives ( i , 300 ) ;
23603: LD_VAR 0 1
23607: PPUSH
23608: LD_INT 300
23610: PPUSH
23611: CALL_OW 234
23615: GO 23600
23617: POP
23618: POP
// end ;
23619: PPOPN 2
23621: END
// every 0 0$1 trigger s60 do var i , tmp ;
23622: LD_EXP 78
23626: IFFALSE 23695
23628: GO 23630
23630: DISABLE
23631: LD_INT 0
23633: PPUSH
23634: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23635: LD_ADDR_VAR 0 2
23639: PUSH
23640: LD_INT 22
23642: PUSH
23643: LD_OWVAR 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 69
23656: ST_TO_ADDR
// if not tmp then
23657: LD_VAR 0 2
23661: NOT
23662: IFFALSE 23666
// exit ;
23664: GO 23695
// for i in tmp do
23666: LD_ADDR_VAR 0 1
23670: PUSH
23671: LD_VAR 0 2
23675: PUSH
23676: FOR_IN
23677: IFFALSE 23693
// SetLives ( i , 600 ) ;
23679: LD_VAR 0 1
23683: PPUSH
23684: LD_INT 600
23686: PPUSH
23687: CALL_OW 234
23691: GO 23676
23693: POP
23694: POP
// end ;
23695: PPOPN 2
23697: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23698: LD_INT 0
23700: PPUSH
// case cmd of 301 :
23701: LD_VAR 0 1
23705: PUSH
23706: LD_INT 301
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23746
23714: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23715: LD_VAR 0 6
23719: PPUSH
23720: LD_VAR 0 7
23724: PPUSH
23725: LD_VAR 0 8
23729: PPUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: LD_VAR 0 5
23739: PPUSH
23740: CALL 24947 0 5
23744: GO 23867
23746: LD_INT 302
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23791
23754: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23755: LD_VAR 0 6
23759: PPUSH
23760: LD_VAR 0 7
23764: PPUSH
23765: LD_VAR 0 8
23769: PPUSH
23770: LD_VAR 0 9
23774: PPUSH
23775: LD_VAR 0 4
23779: PPUSH
23780: LD_VAR 0 5
23784: PPUSH
23785: CALL 25038 0 6
23789: GO 23867
23791: LD_INT 303
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23836
23799: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23800: LD_VAR 0 6
23804: PPUSH
23805: LD_VAR 0 7
23809: PPUSH
23810: LD_VAR 0 8
23814: PPUSH
23815: LD_VAR 0 9
23819: PPUSH
23820: LD_VAR 0 4
23824: PPUSH
23825: LD_VAR 0 5
23829: PPUSH
23830: CALL 23872 0 6
23834: GO 23867
23836: LD_INT 304
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23866
23844: POP
// hHackTeleport ( unit , x , y ) ; end ;
23845: LD_VAR 0 2
23849: PPUSH
23850: LD_VAR 0 4
23854: PPUSH
23855: LD_VAR 0 5
23859: PPUSH
23860: CALL 25631 0 3
23864: GO 23867
23866: POP
// end ;
23867: LD_VAR 0 12
23871: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23872: LD_INT 0
23874: PPUSH
23875: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23876: LD_VAR 0 1
23880: PUSH
23881: LD_INT 1
23883: LESS
23884: PUSH
23885: LD_VAR 0 1
23889: PUSH
23890: LD_INT 3
23892: GREATER
23893: OR
23894: PUSH
23895: LD_VAR 0 5
23899: PPUSH
23900: LD_VAR 0 6
23904: PPUSH
23905: CALL_OW 428
23909: OR
23910: IFFALSE 23914
// exit ;
23912: GO 24634
// uc_side := your_side ;
23914: LD_ADDR_OWVAR 20
23918: PUSH
23919: LD_OWVAR 2
23923: ST_TO_ADDR
// uc_nation := nation ;
23924: LD_ADDR_OWVAR 21
23928: PUSH
23929: LD_VAR 0 1
23933: ST_TO_ADDR
// bc_level = 1 ;
23934: LD_ADDR_OWVAR 43
23938: PUSH
23939: LD_INT 1
23941: ST_TO_ADDR
// case btype of 1 :
23942: LD_VAR 0 2
23946: PUSH
23947: LD_INT 1
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 23966
23955: POP
// bc_type := b_depot ; 2 :
23956: LD_ADDR_OWVAR 42
23960: PUSH
23961: LD_INT 0
23963: ST_TO_ADDR
23964: GO 24578
23966: LD_INT 2
23968: DOUBLE
23969: EQUAL
23970: IFTRUE 23974
23972: GO 23985
23974: POP
// bc_type := b_warehouse ; 3 :
23975: LD_ADDR_OWVAR 42
23979: PUSH
23980: LD_INT 1
23982: ST_TO_ADDR
23983: GO 24578
23985: LD_INT 3
23987: DOUBLE
23988: EQUAL
23989: IFTRUE 23993
23991: GO 24004
23993: POP
// bc_type := b_lab ; 4 .. 9 :
23994: LD_ADDR_OWVAR 42
23998: PUSH
23999: LD_INT 6
24001: ST_TO_ADDR
24002: GO 24578
24004: LD_INT 4
24006: DOUBLE
24007: GREATEREQUAL
24008: IFFALSE 24016
24010: LD_INT 9
24012: DOUBLE
24013: LESSEQUAL
24014: IFTRUE 24018
24016: GO 24070
24018: POP
// begin bc_type := b_lab_half ;
24019: LD_ADDR_OWVAR 42
24023: PUSH
24024: LD_INT 7
24026: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24027: LD_ADDR_OWVAR 44
24031: PUSH
24032: LD_INT 10
24034: PUSH
24035: LD_INT 11
24037: PUSH
24038: LD_INT 12
24040: PUSH
24041: LD_INT 15
24043: PUSH
24044: LD_INT 14
24046: PUSH
24047: LD_INT 13
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: LD_VAR 0 2
24062: PUSH
24063: LD_INT 3
24065: MINUS
24066: ARRAY
24067: ST_TO_ADDR
// end ; 10 .. 13 :
24068: GO 24578
24070: LD_INT 10
24072: DOUBLE
24073: GREATEREQUAL
24074: IFFALSE 24082
24076: LD_INT 13
24078: DOUBLE
24079: LESSEQUAL
24080: IFTRUE 24084
24082: GO 24161
24084: POP
// begin bc_type := b_lab_full ;
24085: LD_ADDR_OWVAR 42
24089: PUSH
24090: LD_INT 8
24092: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24093: LD_ADDR_OWVAR 44
24097: PUSH
24098: LD_INT 10
24100: PUSH
24101: LD_INT 12
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: LD_INT 13
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: PUSH
24116: LD_VAR 0 2
24120: PUSH
24121: LD_INT 9
24123: MINUS
24124: ARRAY
24125: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24126: LD_ADDR_OWVAR 45
24130: PUSH
24131: LD_INT 11
24133: PUSH
24134: LD_INT 15
24136: PUSH
24137: LD_INT 12
24139: PUSH
24140: LD_INT 15
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: LD_VAR 0 2
24153: PUSH
24154: LD_INT 9
24156: MINUS
24157: ARRAY
24158: ST_TO_ADDR
// end ; 14 :
24159: GO 24578
24161: LD_INT 14
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24180
24169: POP
// bc_type := b_workshop ; 15 :
24170: LD_ADDR_OWVAR 42
24174: PUSH
24175: LD_INT 2
24177: ST_TO_ADDR
24178: GO 24578
24180: LD_INT 15
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24199
24188: POP
// bc_type := b_factory ; 16 :
24189: LD_ADDR_OWVAR 42
24193: PUSH
24194: LD_INT 3
24196: ST_TO_ADDR
24197: GO 24578
24199: LD_INT 16
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24218
24207: POP
// bc_type := b_ext_gun ; 17 :
24208: LD_ADDR_OWVAR 42
24212: PUSH
24213: LD_INT 17
24215: ST_TO_ADDR
24216: GO 24578
24218: LD_INT 17
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24254
24226: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24227: LD_ADDR_OWVAR 42
24231: PUSH
24232: LD_INT 19
24234: PUSH
24235: LD_INT 23
24237: PUSH
24238: LD_INT 19
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: PUSH
24246: LD_VAR 0 1
24250: ARRAY
24251: ST_TO_ADDR
24252: GO 24578
24254: LD_INT 18
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24273
24262: POP
// bc_type := b_ext_radar ; 19 :
24263: LD_ADDR_OWVAR 42
24267: PUSH
24268: LD_INT 20
24270: ST_TO_ADDR
24271: GO 24578
24273: LD_INT 19
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24292
24281: POP
// bc_type := b_ext_radio ; 20 :
24282: LD_ADDR_OWVAR 42
24286: PUSH
24287: LD_INT 22
24289: ST_TO_ADDR
24290: GO 24578
24292: LD_INT 20
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24311
24300: POP
// bc_type := b_ext_siberium ; 21 :
24301: LD_ADDR_OWVAR 42
24305: PUSH
24306: LD_INT 21
24308: ST_TO_ADDR
24309: GO 24578
24311: LD_INT 21
24313: DOUBLE
24314: EQUAL
24315: IFTRUE 24319
24317: GO 24330
24319: POP
// bc_type := b_ext_computer ; 22 :
24320: LD_ADDR_OWVAR 42
24324: PUSH
24325: LD_INT 24
24327: ST_TO_ADDR
24328: GO 24578
24330: LD_INT 22
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24349
24338: POP
// bc_type := b_ext_track ; 23 :
24339: LD_ADDR_OWVAR 42
24343: PUSH
24344: LD_INT 16
24346: ST_TO_ADDR
24347: GO 24578
24349: LD_INT 23
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24368
24357: POP
// bc_type := b_ext_laser ; 24 :
24358: LD_ADDR_OWVAR 42
24362: PUSH
24363: LD_INT 25
24365: ST_TO_ADDR
24366: GO 24578
24368: LD_INT 24
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24387
24376: POP
// bc_type := b_control_tower ; 25 :
24377: LD_ADDR_OWVAR 42
24381: PUSH
24382: LD_INT 36
24384: ST_TO_ADDR
24385: GO 24578
24387: LD_INT 25
24389: DOUBLE
24390: EQUAL
24391: IFTRUE 24395
24393: GO 24406
24395: POP
// bc_type := b_breastwork ; 26 :
24396: LD_ADDR_OWVAR 42
24400: PUSH
24401: LD_INT 31
24403: ST_TO_ADDR
24404: GO 24578
24406: LD_INT 26
24408: DOUBLE
24409: EQUAL
24410: IFTRUE 24414
24412: GO 24425
24414: POP
// bc_type := b_bunker ; 27 :
24415: LD_ADDR_OWVAR 42
24419: PUSH
24420: LD_INT 32
24422: ST_TO_ADDR
24423: GO 24578
24425: LD_INT 27
24427: DOUBLE
24428: EQUAL
24429: IFTRUE 24433
24431: GO 24444
24433: POP
// bc_type := b_turret ; 28 :
24434: LD_ADDR_OWVAR 42
24438: PUSH
24439: LD_INT 33
24441: ST_TO_ADDR
24442: GO 24578
24444: LD_INT 28
24446: DOUBLE
24447: EQUAL
24448: IFTRUE 24452
24450: GO 24463
24452: POP
// bc_type := b_armoury ; 29 :
24453: LD_ADDR_OWVAR 42
24457: PUSH
24458: LD_INT 4
24460: ST_TO_ADDR
24461: GO 24578
24463: LD_INT 29
24465: DOUBLE
24466: EQUAL
24467: IFTRUE 24471
24469: GO 24482
24471: POP
// bc_type := b_barracks ; 30 :
24472: LD_ADDR_OWVAR 42
24476: PUSH
24477: LD_INT 5
24479: ST_TO_ADDR
24480: GO 24578
24482: LD_INT 30
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24501
24490: POP
// bc_type := b_solar_power ; 31 :
24491: LD_ADDR_OWVAR 42
24495: PUSH
24496: LD_INT 27
24498: ST_TO_ADDR
24499: GO 24578
24501: LD_INT 31
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24520
24509: POP
// bc_type := b_oil_power ; 32 :
24510: LD_ADDR_OWVAR 42
24514: PUSH
24515: LD_INT 26
24517: ST_TO_ADDR
24518: GO 24578
24520: LD_INT 32
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 24539
24528: POP
// bc_type := b_siberite_power ; 33 :
24529: LD_ADDR_OWVAR 42
24533: PUSH
24534: LD_INT 28
24536: ST_TO_ADDR
24537: GO 24578
24539: LD_INT 33
24541: DOUBLE
24542: EQUAL
24543: IFTRUE 24547
24545: GO 24558
24547: POP
// bc_type := b_oil_mine ; 34 :
24548: LD_ADDR_OWVAR 42
24552: PUSH
24553: LD_INT 29
24555: ST_TO_ADDR
24556: GO 24578
24558: LD_INT 34
24560: DOUBLE
24561: EQUAL
24562: IFTRUE 24566
24564: GO 24577
24566: POP
// bc_type := b_siberite_mine ; end ;
24567: LD_ADDR_OWVAR 42
24571: PUSH
24572: LD_INT 30
24574: ST_TO_ADDR
24575: GO 24578
24577: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24578: LD_ADDR_VAR 0 8
24582: PUSH
24583: LD_VAR 0 5
24587: PPUSH
24588: LD_VAR 0 6
24592: PPUSH
24593: LD_VAR 0 3
24597: PPUSH
24598: CALL_OW 47
24602: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24603: LD_OWVAR 42
24607: PUSH
24608: LD_INT 32
24610: PUSH
24611: LD_INT 33
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: IN
24618: IFFALSE 24634
// PlaceWeaponTurret ( b , weapon ) ;
24620: LD_VAR 0 8
24624: PPUSH
24625: LD_VAR 0 4
24629: PPUSH
24630: CALL_OW 431
// end ;
24634: LD_VAR 0 7
24638: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24645: LD_ADDR_VAR 0 4
24649: PUSH
24650: LD_INT 22
24652: PUSH
24653: LD_OWVAR 2
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PPUSH
24694: CALL_OW 69
24698: ST_TO_ADDR
// if not tmp then
24699: LD_VAR 0 4
24703: NOT
24704: IFFALSE 24708
// exit ;
24706: GO 24767
// for i in tmp do
24708: LD_ADDR_VAR 0 2
24712: PUSH
24713: LD_VAR 0 4
24717: PUSH
24718: FOR_IN
24719: IFFALSE 24765
// for j = 1 to 3 do
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: DOUBLE
24727: LD_INT 1
24729: DEC
24730: ST_TO_ADDR
24731: LD_INT 3
24733: PUSH
24734: FOR_TO
24735: IFFALSE 24761
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24737: LD_VAR 0 2
24741: PPUSH
24742: CALL_OW 274
24746: PPUSH
24747: LD_VAR 0 3
24751: PPUSH
24752: LD_INT 99999
24754: PPUSH
24755: CALL_OW 277
24759: GO 24734
24761: POP
24762: POP
24763: GO 24718
24765: POP
24766: POP
// end ;
24767: LD_VAR 0 1
24771: RET
// export function hHackSetLevel10 ; var i , j ; begin
24772: LD_INT 0
24774: PPUSH
24775: PPUSH
24776: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24777: LD_ADDR_VAR 0 2
24781: PUSH
24782: LD_INT 21
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 69
24796: PUSH
24797: FOR_IN
24798: IFFALSE 24850
// if IsSelected ( i ) then
24800: LD_VAR 0 2
24804: PPUSH
24805: CALL_OW 306
24809: IFFALSE 24848
// begin for j := 1 to 4 do
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: DOUBLE
24817: LD_INT 1
24819: DEC
24820: ST_TO_ADDR
24821: LD_INT 4
24823: PUSH
24824: FOR_TO
24825: IFFALSE 24846
// SetSkill ( i , j , 10 ) ;
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: LD_INT 10
24839: PPUSH
24840: CALL_OW 237
24844: GO 24824
24846: POP
24847: POP
// end ;
24848: GO 24797
24850: POP
24851: POP
// end ;
24852: LD_VAR 0 1
24856: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24857: LD_INT 0
24859: PPUSH
24860: PPUSH
24861: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24862: LD_ADDR_VAR 0 2
24866: PUSH
24867: LD_INT 22
24869: PUSH
24870: LD_OWVAR 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PPUSH
24893: CALL_OW 69
24897: PUSH
24898: FOR_IN
24899: IFFALSE 24940
// begin for j := 1 to 4 do
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: DOUBLE
24907: LD_INT 1
24909: DEC
24910: ST_TO_ADDR
24911: LD_INT 4
24913: PUSH
24914: FOR_TO
24915: IFFALSE 24936
// SetSkill ( i , j , 10 ) ;
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: LD_INT 10
24929: PPUSH
24930: CALL_OW 237
24934: GO 24914
24936: POP
24937: POP
// end ;
24938: GO 24898
24940: POP
24941: POP
// end ;
24942: LD_VAR 0 1
24946: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24947: LD_INT 0
24949: PPUSH
// uc_side := your_side ;
24950: LD_ADDR_OWVAR 20
24954: PUSH
24955: LD_OWVAR 2
24959: ST_TO_ADDR
// uc_nation := nation ;
24960: LD_ADDR_OWVAR 21
24964: PUSH
24965: LD_VAR 0 1
24969: ST_TO_ADDR
// InitHc ;
24970: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24974: LD_INT 0
24976: PPUSH
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 3
24986: PPUSH
24987: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24991: LD_VAR 0 4
24995: PPUSH
24996: LD_VAR 0 5
25000: PPUSH
25001: CALL_OW 428
25005: PUSH
25006: LD_INT 0
25008: EQUAL
25009: IFFALSE 25033
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25011: CALL_OW 44
25015: PPUSH
25016: LD_VAR 0 4
25020: PPUSH
25021: LD_VAR 0 5
25025: PPUSH
25026: LD_INT 1
25028: PPUSH
25029: CALL_OW 48
// end ;
25033: LD_VAR 0 6
25037: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
// uc_side := your_side ;
25042: LD_ADDR_OWVAR 20
25046: PUSH
25047: LD_OWVAR 2
25051: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25052: LD_VAR 0 1
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: LD_INT 3
25065: PUSH
25066: LD_INT 4
25068: PUSH
25069: LD_INT 5
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: IN
25079: IFFALSE 25091
// uc_nation := nation_american else
25081: LD_ADDR_OWVAR 21
25085: PUSH
25086: LD_INT 1
25088: ST_TO_ADDR
25089: GO 25134
// if chassis in [ 11 , 12 , 13 , 14 ] then
25091: LD_VAR 0 1
25095: PUSH
25096: LD_INT 11
25098: PUSH
25099: LD_INT 12
25101: PUSH
25102: LD_INT 13
25104: PUSH
25105: LD_INT 14
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: IN
25114: IFFALSE 25126
// uc_nation := nation_arabian else
25116: LD_ADDR_OWVAR 21
25120: PUSH
25121: LD_INT 2
25123: ST_TO_ADDR
25124: GO 25134
// uc_nation := nation_russian ;
25126: LD_ADDR_OWVAR 21
25130: PUSH
25131: LD_INT 3
25133: ST_TO_ADDR
// vc_chassis := chassis ;
25134: LD_ADDR_OWVAR 37
25138: PUSH
25139: LD_VAR 0 1
25143: ST_TO_ADDR
// vc_engine := engine ;
25144: LD_ADDR_OWVAR 39
25148: PUSH
25149: LD_VAR 0 2
25153: ST_TO_ADDR
// vc_control := control ;
25154: LD_ADDR_OWVAR 38
25158: PUSH
25159: LD_VAR 0 3
25163: ST_TO_ADDR
// vc_weapon := weapon ;
25164: LD_ADDR_OWVAR 40
25168: PUSH
25169: LD_VAR 0 4
25173: ST_TO_ADDR
// un := CreateVehicle ;
25174: LD_ADDR_VAR 0 8
25178: PUSH
25179: CALL_OW 45
25183: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25184: LD_VAR 0 8
25188: PPUSH
25189: LD_INT 0
25191: PPUSH
25192: LD_INT 5
25194: PPUSH
25195: CALL_OW 12
25199: PPUSH
25200: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25204: LD_VAR 0 8
25208: PPUSH
25209: LD_VAR 0 5
25213: PPUSH
25214: LD_VAR 0 6
25218: PPUSH
25219: LD_INT 1
25221: PPUSH
25222: CALL_OW 48
// end ;
25226: LD_VAR 0 7
25230: RET
// export hInvincible ; every 1 do
25231: GO 25233
25233: DISABLE
// hInvincible := [ ] ;
25234: LD_ADDR_EXP 79
25238: PUSH
25239: EMPTY
25240: ST_TO_ADDR
25241: END
// every 10 do var i ;
25242: GO 25244
25244: DISABLE
25245: LD_INT 0
25247: PPUSH
// begin enable ;
25248: ENABLE
// if not hInvincible then
25249: LD_EXP 79
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25302
// for i in hInvincible do
25258: LD_ADDR_VAR 0 1
25262: PUSH
25263: LD_EXP 79
25267: PUSH
25268: FOR_IN
25269: IFFALSE 25300
// if GetLives ( i ) < 1000 then
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 256
25280: PUSH
25281: LD_INT 1000
25283: LESS
25284: IFFALSE 25298
// SetLives ( i , 1000 ) ;
25286: LD_VAR 0 1
25290: PPUSH
25291: LD_INT 1000
25293: PPUSH
25294: CALL_OW 234
25298: GO 25268
25300: POP
25301: POP
// end ;
25302: PPOPN 1
25304: END
// export function hHackInvincible ; var i ; begin
25305: LD_INT 0
25307: PPUSH
25308: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 21
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 21
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PPUSH
25342: CALL_OW 69
25346: PUSH
25347: FOR_IN
25348: IFFALSE 25409
// if IsSelected ( i ) then
25350: LD_VAR 0 2
25354: PPUSH
25355: CALL_OW 306
25359: IFFALSE 25407
// begin if i in hInvincible then
25361: LD_VAR 0 2
25365: PUSH
25366: LD_EXP 79
25370: IN
25371: IFFALSE 25391
// hInvincible := hInvincible diff i else
25373: LD_ADDR_EXP 79
25377: PUSH
25378: LD_EXP 79
25382: PUSH
25383: LD_VAR 0 2
25387: DIFF
25388: ST_TO_ADDR
25389: GO 25407
// hInvincible := hInvincible union i ;
25391: LD_ADDR_EXP 79
25395: PUSH
25396: LD_EXP 79
25400: PUSH
25401: LD_VAR 0 2
25405: UNION
25406: ST_TO_ADDR
// end ;
25407: GO 25347
25409: POP
25410: POP
// end ;
25411: LD_VAR 0 1
25415: RET
// export function hHackInvisible ; var i , j ; begin
25416: LD_INT 0
25418: PPUSH
25419: PPUSH
25420: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25421: LD_ADDR_VAR 0 2
25425: PUSH
25426: LD_INT 21
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: PUSH
25441: FOR_IN
25442: IFFALSE 25466
// if IsSelected ( i ) then
25444: LD_VAR 0 2
25448: PPUSH
25449: CALL_OW 306
25453: IFFALSE 25464
// ComForceInvisible ( i ) ;
25455: LD_VAR 0 2
25459: PPUSH
25460: CALL_OW 496
25464: GO 25441
25466: POP
25467: POP
// end ;
25468: LD_VAR 0 1
25472: RET
// export function hHackChangeYourSide ; begin
25473: LD_INT 0
25475: PPUSH
// if your_side = 8 then
25476: LD_OWVAR 2
25480: PUSH
25481: LD_INT 8
25483: EQUAL
25484: IFFALSE 25496
// your_side := 0 else
25486: LD_ADDR_OWVAR 2
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
25494: GO 25510
// your_side := your_side + 1 ;
25496: LD_ADDR_OWVAR 2
25500: PUSH
25501: LD_OWVAR 2
25505: PUSH
25506: LD_INT 1
25508: PLUS
25509: ST_TO_ADDR
// end ;
25510: LD_VAR 0 1
25514: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25515: LD_INT 0
25517: PPUSH
25518: PPUSH
25519: PPUSH
// for i in all_units do
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: LD_OWVAR 3
25529: PUSH
25530: FOR_IN
25531: IFFALSE 25609
// if IsSelected ( i ) then
25533: LD_VAR 0 2
25537: PPUSH
25538: CALL_OW 306
25542: IFFALSE 25607
// begin j := GetSide ( i ) ;
25544: LD_ADDR_VAR 0 3
25548: PUSH
25549: LD_VAR 0 2
25553: PPUSH
25554: CALL_OW 255
25558: ST_TO_ADDR
// if j = 8 then
25559: LD_VAR 0 3
25563: PUSH
25564: LD_INT 8
25566: EQUAL
25567: IFFALSE 25579
// j := 0 else
25569: LD_ADDR_VAR 0 3
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
25577: GO 25593
// j := j + 1 ;
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_VAR 0 3
25588: PUSH
25589: LD_INT 1
25591: PLUS
25592: ST_TO_ADDR
// SetSide ( i , j ) ;
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: CALL_OW 235
// end ;
25607: GO 25530
25609: POP
25610: POP
// end ;
25611: LD_VAR 0 1
25615: RET
// export function hHackFog ; begin
25616: LD_INT 0
25618: PPUSH
// FogOff ( true ) ;
25619: LD_INT 1
25621: PPUSH
25622: CALL_OW 344
// end ;
25626: LD_VAR 0 1
25630: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25631: LD_INT 0
25633: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25634: LD_VAR 0 1
25638: PPUSH
25639: LD_VAR 0 2
25643: PPUSH
25644: LD_VAR 0 3
25648: PPUSH
25649: LD_INT 1
25651: PPUSH
25652: LD_INT 1
25654: PPUSH
25655: CALL_OW 483
// CenterOnXY ( x , y ) ;
25659: LD_VAR 0 2
25663: PPUSH
25664: LD_VAR 0 3
25668: PPUSH
25669: CALL_OW 84
// end ;
25673: LD_VAR 0 4
25677: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25678: LD_INT 0
25680: PPUSH
25681: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25682: LD_VAR 0 1
25686: NOT
25687: PUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: CALL_OW 488
25702: NOT
25703: OR
25704: PUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL_OW 266
25714: PUSH
25715: LD_INT 3
25717: NONEQUAL
25718: PUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 247
25728: PUSH
25729: LD_INT 1
25731: EQUAL
25732: NOT
25733: AND
25734: OR
25735: IFFALSE 25739
// exit ;
25737: GO 25888
// if GetType ( factory ) = unit_human then
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 247
25748: PUSH
25749: LD_INT 1
25751: EQUAL
25752: IFFALSE 25769
// factory := IsInUnit ( factory ) ;
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 310
25768: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 266
25778: PUSH
25779: LD_INT 3
25781: NONEQUAL
25782: IFFALSE 25786
// exit ;
25784: GO 25888
// if HexInfo ( x , y ) = factory then
25786: LD_VAR 0 2
25790: PPUSH
25791: LD_VAR 0 3
25795: PPUSH
25796: CALL_OW 428
25800: PUSH
25801: LD_VAR 0 1
25805: EQUAL
25806: IFFALSE 25833
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25808: LD_ADDR_EXP 80
25812: PUSH
25813: LD_EXP 80
25817: PPUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: LD_INT 0
25825: PPUSH
25826: CALL_OW 1
25830: ST_TO_ADDR
25831: GO 25884
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25833: LD_ADDR_EXP 80
25837: PUSH
25838: LD_EXP 80
25842: PPUSH
25843: LD_VAR 0 1
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL_OW 255
25857: PUSH
25858: LD_VAR 0 1
25862: PUSH
25863: LD_VAR 0 2
25867: PUSH
25868: LD_VAR 0 3
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 1
25883: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25884: CALL 25893 0 0
// end ;
25888: LD_VAR 0 4
25892: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
25897: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25898: LD_STRING resetFactoryWaypoint();
25900: PPUSH
25901: CALL_OW 559
// if factoryWaypoints then
25905: LD_EXP 80
25909: IFFALSE 26035
// begin list := PrepareArray ( factoryWaypoints ) ;
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_EXP 80
25920: PPUSH
25921: CALL 72504 0 1
25925: ST_TO_ADDR
// for i := 1 to list do
25926: LD_ADDR_VAR 0 2
25930: PUSH
25931: DOUBLE
25932: LD_INT 1
25934: DEC
25935: ST_TO_ADDR
25936: LD_VAR 0 3
25940: PUSH
25941: FOR_TO
25942: IFFALSE 26033
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25944: LD_STRING setFactoryWaypointXY(
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_VAR 0 2
25956: ARRAY
25957: PUSH
25958: LD_INT 1
25960: ARRAY
25961: STR
25962: PUSH
25963: LD_STRING ,
25965: STR
25966: PUSH
25967: LD_VAR 0 3
25971: PUSH
25972: LD_VAR 0 2
25976: ARRAY
25977: PUSH
25978: LD_INT 2
25980: ARRAY
25981: STR
25982: PUSH
25983: LD_STRING ,
25985: STR
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 2
25996: ARRAY
25997: PUSH
25998: LD_INT 3
26000: ARRAY
26001: STR
26002: PUSH
26003: LD_STRING ,
26005: STR
26006: PUSH
26007: LD_VAR 0 3
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: PUSH
26018: LD_INT 4
26020: ARRAY
26021: STR
26022: PUSH
26023: LD_STRING )
26025: STR
26026: PPUSH
26027: CALL_OW 559
26031: GO 25941
26033: POP
26034: POP
// end ; end ;
26035: LD_VAR 0 1
26039: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26040: LD_INT 0
26042: PPUSH
// if HexInfo ( x , y ) = warehouse then
26043: LD_VAR 0 2
26047: PPUSH
26048: LD_VAR 0 3
26052: PPUSH
26053: CALL_OW 428
26057: PUSH
26058: LD_VAR 0 1
26062: EQUAL
26063: IFFALSE 26090
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26065: LD_ADDR_EXP 81
26069: PUSH
26070: LD_EXP 81
26074: PPUSH
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_INT 0
26082: PPUSH
26083: CALL_OW 1
26087: ST_TO_ADDR
26088: GO 26141
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26090: LD_ADDR_EXP 81
26094: PUSH
26095: LD_EXP 81
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: LD_VAR 0 1
26109: PPUSH
26110: CALL_OW 255
26114: PUSH
26115: LD_VAR 0 1
26119: PUSH
26120: LD_VAR 0 2
26124: PUSH
26125: LD_VAR 0 3
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 1
26140: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26141: CALL 26150 0 0
// end ;
26145: LD_VAR 0 4
26149: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26150: LD_INT 0
26152: PPUSH
26153: PPUSH
26154: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26155: LD_STRING resetWarehouseGatheringPoints();
26157: PPUSH
26158: CALL_OW 559
// if warehouseGatheringPoints then
26162: LD_EXP 81
26166: IFFALSE 26292
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_EXP 81
26177: PPUSH
26178: CALL 72504 0 1
26182: ST_TO_ADDR
// for i := 1 to list do
26183: LD_ADDR_VAR 0 2
26187: PUSH
26188: DOUBLE
26189: LD_INT 1
26191: DEC
26192: ST_TO_ADDR
26193: LD_VAR 0 3
26197: PUSH
26198: FOR_TO
26199: IFFALSE 26290
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26201: LD_STRING setWarehouseGatheringPointXY(
26203: PUSH
26204: LD_VAR 0 3
26208: PUSH
26209: LD_VAR 0 2
26213: ARRAY
26214: PUSH
26215: LD_INT 1
26217: ARRAY
26218: STR
26219: PUSH
26220: LD_STRING ,
26222: STR
26223: PUSH
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 2
26233: ARRAY
26234: PUSH
26235: LD_INT 2
26237: ARRAY
26238: STR
26239: PUSH
26240: LD_STRING ,
26242: STR
26243: PUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 2
26253: ARRAY
26254: PUSH
26255: LD_INT 3
26257: ARRAY
26258: STR
26259: PUSH
26260: LD_STRING ,
26262: STR
26263: PUSH
26264: LD_VAR 0 3
26268: PUSH
26269: LD_VAR 0 2
26273: ARRAY
26274: PUSH
26275: LD_INT 4
26277: ARRAY
26278: STR
26279: PUSH
26280: LD_STRING )
26282: STR
26283: PPUSH
26284: CALL_OW 559
26288: GO 26198
26290: POP
26291: POP
// end ; end ;
26292: LD_VAR 0 1
26296: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26297: LD_EXP 81
26301: IFFALSE 26986
26303: GO 26305
26305: DISABLE
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
// begin enable ;
26317: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_EXP 81
26327: PPUSH
26328: CALL 72504 0 1
26332: ST_TO_ADDR
// if not list then
26333: LD_VAR 0 3
26337: NOT
26338: IFFALSE 26342
// exit ;
26340: GO 26986
// for i := 1 to list do
26342: LD_ADDR_VAR 0 1
26346: PUSH
26347: DOUBLE
26348: LD_INT 1
26350: DEC
26351: ST_TO_ADDR
26352: LD_VAR 0 3
26356: PUSH
26357: FOR_TO
26358: IFFALSE 26984
// begin depot := list [ i ] [ 2 ] ;
26360: LD_ADDR_VAR 0 8
26364: PUSH
26365: LD_VAR 0 3
26369: PUSH
26370: LD_VAR 0 1
26374: ARRAY
26375: PUSH
26376: LD_INT 2
26378: ARRAY
26379: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26380: LD_ADDR_VAR 0 5
26384: PUSH
26385: LD_VAR 0 3
26389: PUSH
26390: LD_VAR 0 1
26394: ARRAY
26395: PUSH
26396: LD_INT 1
26398: ARRAY
26399: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26400: LD_VAR 0 8
26404: PPUSH
26405: CALL_OW 301
26409: PUSH
26410: LD_VAR 0 5
26414: PUSH
26415: LD_VAR 0 8
26419: PPUSH
26420: CALL_OW 255
26424: NONEQUAL
26425: OR
26426: IFFALSE 26455
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26428: LD_ADDR_EXP 81
26432: PUSH
26433: LD_EXP 81
26437: PPUSH
26438: LD_VAR 0 8
26442: PPUSH
26443: LD_INT 0
26445: PPUSH
26446: CALL_OW 1
26450: ST_TO_ADDR
// exit ;
26451: POP
26452: POP
26453: GO 26986
// end ; x := list [ i ] [ 3 ] ;
26455: LD_ADDR_VAR 0 6
26459: PUSH
26460: LD_VAR 0 3
26464: PUSH
26465: LD_VAR 0 1
26469: ARRAY
26470: PUSH
26471: LD_INT 3
26473: ARRAY
26474: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26475: LD_ADDR_VAR 0 7
26479: PUSH
26480: LD_VAR 0 3
26484: PUSH
26485: LD_VAR 0 1
26489: ARRAY
26490: PUSH
26491: LD_INT 4
26493: ARRAY
26494: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26495: LD_ADDR_VAR 0 9
26499: PUSH
26500: LD_VAR 0 6
26504: PPUSH
26505: LD_VAR 0 7
26509: PPUSH
26510: LD_INT 16
26512: PPUSH
26513: CALL 71092 0 3
26517: ST_TO_ADDR
// if not cratesNearbyPoint then
26518: LD_VAR 0 9
26522: NOT
26523: IFFALSE 26529
// exit ;
26525: POP
26526: POP
26527: GO 26986
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26529: LD_ADDR_VAR 0 4
26533: PUSH
26534: LD_INT 22
26536: PUSH
26537: LD_VAR 0 5
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: LD_INT 60
26551: PUSH
26552: EMPTY
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 91
26561: PUSH
26562: LD_VAR 0 8
26566: PUSH
26567: LD_INT 6
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: LD_INT 25
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 25
26590: PUSH
26591: LD_INT 16
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 69
26613: PUSH
26614: LD_VAR 0 8
26618: PPUSH
26619: CALL_OW 313
26623: PPUSH
26624: LD_INT 3
26626: PUSH
26627: LD_INT 60
26629: PUSH
26630: EMPTY
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 25
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 25
26652: PUSH
26653: LD_INT 16
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PPUSH
26669: CALL_OW 72
26673: UNION
26674: ST_TO_ADDR
// if tmp then
26675: LD_VAR 0 4
26679: IFFALSE 26759
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26681: LD_ADDR_VAR 0 4
26685: PUSH
26686: LD_VAR 0 4
26690: PPUSH
26691: LD_INT 3
26693: PPUSH
26694: CALL 69061 0 2
26698: ST_TO_ADDR
// for j in tmp do
26699: LD_ADDR_VAR 0 2
26703: PUSH
26704: LD_VAR 0 4
26708: PUSH
26709: FOR_IN
26710: IFFALSE 26753
// begin if IsInUnit ( j ) then
26712: LD_VAR 0 2
26716: PPUSH
26717: CALL_OW 310
26721: IFFALSE 26732
// ComExit ( j ) ;
26723: LD_VAR 0 2
26727: PPUSH
26728: CALL 69144 0 1
// AddComCollect ( j , x , y ) ;
26732: LD_VAR 0 2
26736: PPUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 7
26746: PPUSH
26747: CALL_OW 177
// end ;
26751: GO 26709
26753: POP
26754: POP
// exit ;
26755: POP
26756: POP
26757: GO 26986
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26759: LD_ADDR_VAR 0 4
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_VAR 0 5
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 91
26778: PUSH
26779: LD_VAR 0 8
26783: PUSH
26784: LD_INT 8
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 34
26797: PUSH
26798: LD_INT 12
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 34
26807: PUSH
26808: LD_INT 51
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 34
26817: PUSH
26818: LD_INT 32
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 34
26827: PUSH
26828: LD_INT 89
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if tmp then
26852: LD_VAR 0 4
26856: IFFALSE 26982
// begin for j in tmp do
26858: LD_ADDR_VAR 0 2
26862: PUSH
26863: LD_VAR 0 4
26867: PUSH
26868: FOR_IN
26869: IFFALSE 26980
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26871: LD_VAR 0 2
26875: PPUSH
26876: CALL_OW 262
26880: PUSH
26881: LD_INT 3
26883: EQUAL
26884: PUSH
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 261
26894: PUSH
26895: LD_INT 20
26897: GREATER
26898: OR
26899: PUSH
26900: LD_VAR 0 2
26904: PPUSH
26905: CALL_OW 314
26909: NOT
26910: AND
26911: PUSH
26912: LD_VAR 0 2
26916: PPUSH
26917: CALL_OW 263
26921: PUSH
26922: LD_INT 1
26924: NONEQUAL
26925: PUSH
26926: LD_VAR 0 2
26930: PPUSH
26931: CALL_OW 311
26935: OR
26936: AND
26937: IFFALSE 26978
// begin ComCollect ( j , x , y ) ;
26939: LD_VAR 0 2
26943: PPUSH
26944: LD_VAR 0 6
26948: PPUSH
26949: LD_VAR 0 7
26953: PPUSH
26954: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26958: LD_VAR 0 2
26962: PPUSH
26963: LD_VAR 0 8
26967: PPUSH
26968: CALL_OW 172
// exit ;
26972: POP
26973: POP
26974: POP
26975: POP
26976: GO 26986
// end ;
26978: GO 26868
26980: POP
26981: POP
// end ; end ;
26982: GO 26357
26984: POP
26985: POP
// end ; end_of_file
26986: PPOPN 9
26988: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26989: LD_INT 0
26991: PPUSH
26992: PPUSH
26993: PPUSH
26994: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL_OW 264
27004: PUSH
27005: LD_INT 91
27007: EQUAL
27008: IFFALSE 27080
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27010: LD_INT 68
27012: PPUSH
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 255
27022: PPUSH
27023: CALL_OW 321
27027: PUSH
27028: LD_INT 2
27030: EQUAL
27031: IFFALSE 27043
// eff := 70 else
27033: LD_ADDR_VAR 0 4
27037: PUSH
27038: LD_INT 70
27040: ST_TO_ADDR
27041: GO 27051
// eff := 30 ;
27043: LD_ADDR_VAR 0 4
27047: PUSH
27048: LD_INT 30
27050: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 250
27060: PPUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 251
27070: PPUSH
27071: LD_VAR 0 4
27075: PPUSH
27076: CALL_OW 495
// end ; end ;
27080: LD_VAR 0 2
27084: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27085: LD_INT 0
27087: PPUSH
// end ;
27088: LD_VAR 0 4
27092: RET
// export function SOS_Command ( cmd ) ; begin
27093: LD_INT 0
27095: PPUSH
// end ;
27096: LD_VAR 0 2
27100: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27101: LD_INT 0
27103: PPUSH
// end ;
27104: LD_VAR 0 6
27108: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
// if not vehicle or not factory then
27113: LD_VAR 0 1
27117: NOT
27118: PUSH
27119: LD_VAR 0 2
27123: NOT
27124: OR
27125: IFFALSE 27129
// exit ;
27127: GO 27360
// if factoryWaypoints >= factory then
27129: LD_EXP 80
27133: PUSH
27134: LD_VAR 0 2
27138: GREATEREQUAL
27139: IFFALSE 27360
// if factoryWaypoints [ factory ] then
27141: LD_EXP 80
27145: PUSH
27146: LD_VAR 0 2
27150: ARRAY
27151: IFFALSE 27360
// begin if GetControl ( vehicle ) = control_manual then
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 263
27162: PUSH
27163: LD_INT 1
27165: EQUAL
27166: IFFALSE 27247
// begin driver := IsDrivenBy ( vehicle ) ;
27168: LD_ADDR_VAR 0 4
27172: PUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 311
27182: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27183: LD_VAR 0 4
27187: PPUSH
27188: LD_EXP 80
27192: PUSH
27193: LD_VAR 0 2
27197: ARRAY
27198: PUSH
27199: LD_INT 3
27201: ARRAY
27202: PPUSH
27203: LD_EXP 80
27207: PUSH
27208: LD_VAR 0 2
27212: ARRAY
27213: PUSH
27214: LD_INT 4
27216: ARRAY
27217: PPUSH
27218: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27222: LD_VAR 0 4
27226: PPUSH
27227: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27231: LD_VAR 0 4
27235: PPUSH
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 180
// end else
27245: GO 27360
// if GetControl ( vehicle ) = control_remote then
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 263
27256: PUSH
27257: LD_INT 2
27259: EQUAL
27260: IFFALSE 27321
// begin wait ( 0 0$2 ) ;
27262: LD_INT 70
27264: PPUSH
27265: CALL_OW 67
// if Connect ( vehicle ) then
27269: LD_VAR 0 1
27273: PPUSH
27274: CALL 39384 0 1
27278: IFFALSE 27319
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_EXP 80
27289: PUSH
27290: LD_VAR 0 2
27294: ARRAY
27295: PUSH
27296: LD_INT 3
27298: ARRAY
27299: PPUSH
27300: LD_EXP 80
27304: PUSH
27305: LD_VAR 0 2
27309: ARRAY
27310: PUSH
27311: LD_INT 4
27313: ARRAY
27314: PPUSH
27315: CALL_OW 171
// end else
27319: GO 27360
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27321: LD_VAR 0 1
27325: PPUSH
27326: LD_EXP 80
27330: PUSH
27331: LD_VAR 0 2
27335: ARRAY
27336: PUSH
27337: LD_INT 3
27339: ARRAY
27340: PPUSH
27341: LD_EXP 80
27345: PUSH
27346: LD_VAR 0 2
27350: ARRAY
27351: PUSH
27352: LD_INT 4
27354: ARRAY
27355: PPUSH
27356: CALL_OW 171
// end ; end ;
27360: LD_VAR 0 3
27364: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27365: LD_INT 0
27367: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 250
27375: EQUAL
27376: PUSH
27377: LD_VAR 0 2
27381: PPUSH
27382: CALL_OW 264
27386: PUSH
27387: LD_INT 81
27389: EQUAL
27390: AND
27391: IFFALSE 27412
// MinerPlaceMine ( unit , x , y ) ;
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_VAR 0 4
27402: PPUSH
27403: LD_VAR 0 5
27407: PPUSH
27408: CALL 29797 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27412: LD_VAR 0 1
27416: PUSH
27417: LD_INT 251
27419: EQUAL
27420: PUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: CALL_OW 264
27430: PUSH
27431: LD_INT 81
27433: EQUAL
27434: AND
27435: IFFALSE 27456
// MinerDetonateMine ( unit , x , y ) ;
27437: LD_VAR 0 2
27441: PPUSH
27442: LD_VAR 0 4
27446: PPUSH
27447: LD_VAR 0 5
27451: PPUSH
27452: CALL 30072 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27456: LD_VAR 0 1
27460: PUSH
27461: LD_INT 252
27463: EQUAL
27464: PUSH
27465: LD_VAR 0 2
27469: PPUSH
27470: CALL_OW 264
27474: PUSH
27475: LD_INT 81
27477: EQUAL
27478: AND
27479: IFFALSE 27500
// MinerCreateMinefield ( unit , x , y ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_VAR 0 4
27490: PPUSH
27491: LD_VAR 0 5
27495: PPUSH
27496: CALL 30489 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27500: LD_VAR 0 1
27504: PUSH
27505: LD_INT 253
27507: EQUAL
27508: PUSH
27509: LD_VAR 0 2
27513: PPUSH
27514: CALL_OW 257
27518: PUSH
27519: LD_INT 5
27521: EQUAL
27522: AND
27523: IFFALSE 27544
// ComBinocular ( unit , x , y ) ;
27525: LD_VAR 0 2
27529: PPUSH
27530: LD_VAR 0 4
27534: PPUSH
27535: LD_VAR 0 5
27539: PPUSH
27540: CALL 30858 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27544: LD_VAR 0 1
27548: PUSH
27549: LD_INT 254
27551: EQUAL
27552: PUSH
27553: LD_VAR 0 2
27557: PPUSH
27558: CALL_OW 264
27562: PUSH
27563: LD_INT 99
27565: EQUAL
27566: AND
27567: PUSH
27568: LD_VAR 0 3
27572: PPUSH
27573: CALL_OW 263
27577: PUSH
27578: LD_INT 3
27580: EQUAL
27581: AND
27582: IFFALSE 27598
// HackDestroyVehicle ( unit , selectedUnit ) ;
27584: LD_VAR 0 2
27588: PPUSH
27589: LD_VAR 0 3
27593: PPUSH
27594: CALL 29161 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27598: LD_VAR 0 1
27602: PUSH
27603: LD_INT 255
27605: EQUAL
27606: PUSH
27607: LD_VAR 0 2
27611: PPUSH
27612: CALL_OW 264
27616: PUSH
27617: LD_INT 14
27619: PUSH
27620: LD_INT 53
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: IN
27627: AND
27628: PUSH
27629: LD_VAR 0 4
27633: PPUSH
27634: LD_VAR 0 5
27638: PPUSH
27639: CALL_OW 488
27643: AND
27644: IFFALSE 27668
// CutTreeXYR ( unit , x , y , 12 ) ;
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_VAR 0 4
27655: PPUSH
27656: LD_VAR 0 5
27660: PPUSH
27661: LD_INT 12
27663: PPUSH
27664: CALL 27731 0 4
// if cmd = 256 then
27668: LD_VAR 0 1
27672: PUSH
27673: LD_INT 256
27675: EQUAL
27676: IFFALSE 27697
// SetFactoryWaypoint ( unit , x , y ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_VAR 0 4
27687: PPUSH
27688: LD_VAR 0 5
27692: PPUSH
27693: CALL 25678 0 3
// if cmd = 257 then
27697: LD_VAR 0 1
27701: PUSH
27702: LD_INT 257
27704: EQUAL
27705: IFFALSE 27726
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27707: LD_VAR 0 2
27711: PPUSH
27712: LD_VAR 0 4
27716: PPUSH
27717: LD_VAR 0 5
27721: PPUSH
27722: CALL 26040 0 3
// end ;
27726: LD_VAR 0 6
27730: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27731: LD_INT 0
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
27737: PPUSH
27738: PPUSH
27739: PPUSH
27740: PPUSH
27741: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27742: LD_VAR 0 1
27746: NOT
27747: PUSH
27748: LD_VAR 0 2
27752: PPUSH
27753: LD_VAR 0 3
27757: PPUSH
27758: CALL_OW 488
27762: NOT
27763: OR
27764: PUSH
27765: LD_VAR 0 4
27769: NOT
27770: OR
27771: IFFALSE 27775
// exit ;
27773: GO 28115
// list := [ ] ;
27775: LD_ADDR_VAR 0 13
27779: PUSH
27780: EMPTY
27781: ST_TO_ADDR
// if x - r < 0 then
27782: LD_VAR 0 2
27786: PUSH
27787: LD_VAR 0 4
27791: MINUS
27792: PUSH
27793: LD_INT 0
27795: LESS
27796: IFFALSE 27808
// min_x := 0 else
27798: LD_ADDR_VAR 0 7
27802: PUSH
27803: LD_INT 0
27805: ST_TO_ADDR
27806: GO 27824
// min_x := x - r ;
27808: LD_ADDR_VAR 0 7
27812: PUSH
27813: LD_VAR 0 2
27817: PUSH
27818: LD_VAR 0 4
27822: MINUS
27823: ST_TO_ADDR
// if y - r < 0 then
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 4
27833: MINUS
27834: PUSH
27835: LD_INT 0
27837: LESS
27838: IFFALSE 27850
// min_y := 0 else
27840: LD_ADDR_VAR 0 8
27844: PUSH
27845: LD_INT 0
27847: ST_TO_ADDR
27848: GO 27866
// min_y := y - r ;
27850: LD_ADDR_VAR 0 8
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: LD_VAR 0 4
27864: MINUS
27865: ST_TO_ADDR
// max_x := x + r ;
27866: LD_ADDR_VAR 0 9
27870: PUSH
27871: LD_VAR 0 2
27875: PUSH
27876: LD_VAR 0 4
27880: PLUS
27881: ST_TO_ADDR
// max_y := y + r ;
27882: LD_ADDR_VAR 0 10
27886: PUSH
27887: LD_VAR 0 3
27891: PUSH
27892: LD_VAR 0 4
27896: PLUS
27897: ST_TO_ADDR
// for _x = min_x to max_x do
27898: LD_ADDR_VAR 0 11
27902: PUSH
27903: DOUBLE
27904: LD_VAR 0 7
27908: DEC
27909: ST_TO_ADDR
27910: LD_VAR 0 9
27914: PUSH
27915: FOR_TO
27916: IFFALSE 28033
// for _y = min_y to max_y do
27918: LD_ADDR_VAR 0 12
27922: PUSH
27923: DOUBLE
27924: LD_VAR 0 8
27928: DEC
27929: ST_TO_ADDR
27930: LD_VAR 0 10
27934: PUSH
27935: FOR_TO
27936: IFFALSE 28029
// begin if not ValidHex ( _x , _y ) then
27938: LD_VAR 0 11
27942: PPUSH
27943: LD_VAR 0 12
27947: PPUSH
27948: CALL_OW 488
27952: NOT
27953: IFFALSE 27957
// continue ;
27955: GO 27935
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27957: LD_VAR 0 11
27961: PPUSH
27962: LD_VAR 0 12
27966: PPUSH
27967: CALL_OW 351
27971: PUSH
27972: LD_VAR 0 11
27976: PPUSH
27977: LD_VAR 0 12
27981: PPUSH
27982: CALL_OW 554
27986: AND
27987: IFFALSE 28027
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27989: LD_ADDR_VAR 0 13
27993: PUSH
27994: LD_VAR 0 13
27998: PPUSH
27999: LD_VAR 0 13
28003: PUSH
28004: LD_INT 1
28006: PLUS
28007: PPUSH
28008: LD_VAR 0 11
28012: PUSH
28013: LD_VAR 0 12
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PPUSH
28022: CALL_OW 2
28026: ST_TO_ADDR
// end ;
28027: GO 27935
28029: POP
28030: POP
28031: GO 27915
28033: POP
28034: POP
// if not list then
28035: LD_VAR 0 13
28039: NOT
28040: IFFALSE 28044
// exit ;
28042: GO 28115
// for i in list do
28044: LD_ADDR_VAR 0 6
28048: PUSH
28049: LD_VAR 0 13
28053: PUSH
28054: FOR_IN
28055: IFFALSE 28113
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28057: LD_VAR 0 1
28061: PPUSH
28062: LD_STRING M
28064: PUSH
28065: LD_VAR 0 6
28069: PUSH
28070: LD_INT 1
28072: ARRAY
28073: PUSH
28074: LD_VAR 0 6
28078: PUSH
28079: LD_INT 2
28081: ARRAY
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: PPUSH
28107: CALL_OW 447
28111: GO 28054
28113: POP
28114: POP
// end ;
28115: LD_VAR 0 5
28119: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28120: LD_EXP 83
28124: NOT
28125: IFFALSE 28175
28127: GO 28129
28129: DISABLE
// begin initHack := true ;
28130: LD_ADDR_EXP 83
28134: PUSH
28135: LD_INT 1
28137: ST_TO_ADDR
// hackTanks := [ ] ;
28138: LD_ADDR_EXP 84
28142: PUSH
28143: EMPTY
28144: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28145: LD_ADDR_EXP 85
28149: PUSH
28150: EMPTY
28151: ST_TO_ADDR
// hackLimit := 3 ;
28152: LD_ADDR_EXP 86
28156: PUSH
28157: LD_INT 3
28159: ST_TO_ADDR
// hackDist := 12 ;
28160: LD_ADDR_EXP 87
28164: PUSH
28165: LD_INT 12
28167: ST_TO_ADDR
// hackCounter := [ ] ;
28168: LD_ADDR_EXP 88
28172: PUSH
28173: EMPTY
28174: ST_TO_ADDR
// end ;
28175: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28176: LD_EXP 83
28180: PUSH
28181: LD_INT 34
28183: PUSH
28184: LD_INT 99
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 69
28195: AND
28196: IFFALSE 28449
28198: GO 28200
28200: DISABLE
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
// begin enable ;
28205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28206: LD_ADDR_VAR 0 1
28210: PUSH
28211: LD_INT 34
28213: PUSH
28214: LD_INT 99
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: PUSH
28226: FOR_IN
28227: IFFALSE 28447
// begin if not i in hackTanks then
28229: LD_VAR 0 1
28233: PUSH
28234: LD_EXP 84
28238: IN
28239: NOT
28240: IFFALSE 28323
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28242: LD_ADDR_EXP 84
28246: PUSH
28247: LD_EXP 84
28251: PPUSH
28252: LD_EXP 84
28256: PUSH
28257: LD_INT 1
28259: PLUS
28260: PPUSH
28261: LD_VAR 0 1
28265: PPUSH
28266: CALL_OW 1
28270: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28271: LD_ADDR_EXP 85
28275: PUSH
28276: LD_EXP 85
28280: PPUSH
28281: LD_EXP 85
28285: PUSH
28286: LD_INT 1
28288: PLUS
28289: PPUSH
28290: EMPTY
28291: PPUSH
28292: CALL_OW 1
28296: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28297: LD_ADDR_EXP 88
28301: PUSH
28302: LD_EXP 88
28306: PPUSH
28307: LD_EXP 88
28311: PUSH
28312: LD_INT 1
28314: PLUS
28315: PPUSH
28316: EMPTY
28317: PPUSH
28318: CALL_OW 1
28322: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 302
28332: NOT
28333: IFFALSE 28346
// begin HackUnlinkAll ( i ) ;
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL 28452 0 1
// continue ;
28344: GO 28226
// end ; HackCheckCapturedStatus ( i ) ;
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL 28895 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28355: LD_ADDR_VAR 0 2
28359: PUSH
28360: LD_INT 81
28362: PUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 255
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 33
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 91
28389: PUSH
28390: LD_VAR 0 1
28394: PUSH
28395: LD_EXP 87
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 50
28407: PUSH
28408: EMPTY
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: PPUSH
28417: CALL_OW 69
28421: ST_TO_ADDR
// if not tmp then
28422: LD_VAR 0 2
28426: NOT
28427: IFFALSE 28431
// continue ;
28429: GO 28226
// HackLink ( i , tmp ) ;
28431: LD_VAR 0 1
28435: PPUSH
28436: LD_VAR 0 2
28440: PPUSH
28441: CALL 28588 0 2
// end ;
28445: GO 28226
28447: POP
28448: POP
// end ;
28449: PPOPN 2
28451: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
28456: PPUSH
// if not hack in hackTanks then
28457: LD_VAR 0 1
28461: PUSH
28462: LD_EXP 84
28466: IN
28467: NOT
28468: IFFALSE 28472
// exit ;
28470: GO 28583
// index := GetElementIndex ( hackTanks , hack ) ;
28472: LD_ADDR_VAR 0 4
28476: PUSH
28477: LD_EXP 84
28481: PPUSH
28482: LD_VAR 0 1
28486: PPUSH
28487: CALL 36200 0 2
28491: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28492: LD_EXP 85
28496: PUSH
28497: LD_VAR 0 4
28501: ARRAY
28502: IFFALSE 28583
// begin for i in hackTanksCaptured [ index ] do
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_EXP 85
28513: PUSH
28514: LD_VAR 0 4
28518: ARRAY
28519: PUSH
28520: FOR_IN
28521: IFFALSE 28547
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28523: LD_VAR 0 3
28527: PUSH
28528: LD_INT 1
28530: ARRAY
28531: PPUSH
28532: LD_VAR 0 3
28536: PUSH
28537: LD_INT 2
28539: ARRAY
28540: PPUSH
28541: CALL_OW 235
28545: GO 28520
28547: POP
28548: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28549: LD_ADDR_EXP 85
28553: PUSH
28554: LD_EXP 85
28558: PPUSH
28559: LD_VAR 0 4
28563: PPUSH
28564: EMPTY
28565: PPUSH
28566: CALL_OW 1
28570: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_INT 0
28578: PPUSH
28579: CALL_OW 505
// end ; end ;
28583: LD_VAR 0 2
28587: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28588: LD_INT 0
28590: PPUSH
28591: PPUSH
28592: PPUSH
// if not hack in hackTanks or not vehicles then
28593: LD_VAR 0 1
28597: PUSH
28598: LD_EXP 84
28602: IN
28603: NOT
28604: PUSH
28605: LD_VAR 0 2
28609: NOT
28610: OR
28611: IFFALSE 28615
// exit ;
28613: GO 28890
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28615: LD_ADDR_VAR 0 2
28619: PUSH
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_VAR 0 2
28629: PPUSH
28630: LD_INT 1
28632: PPUSH
28633: LD_INT 1
28635: PPUSH
28636: CALL 36850 0 4
28640: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28641: LD_ADDR_VAR 0 5
28645: PUSH
28646: LD_EXP 84
28650: PPUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL 36200 0 2
28660: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28661: LD_EXP 85
28665: PUSH
28666: LD_VAR 0 5
28670: ARRAY
28671: PUSH
28672: LD_EXP 86
28676: LESS
28677: IFFALSE 28866
// begin for i := 1 to vehicles do
28679: LD_ADDR_VAR 0 4
28683: PUSH
28684: DOUBLE
28685: LD_INT 1
28687: DEC
28688: ST_TO_ADDR
28689: LD_VAR 0 2
28693: PUSH
28694: FOR_TO
28695: IFFALSE 28864
// begin if hackTanksCaptured [ index ] = hackLimit then
28697: LD_EXP 85
28701: PUSH
28702: LD_VAR 0 5
28706: ARRAY
28707: PUSH
28708: LD_EXP 86
28712: EQUAL
28713: IFFALSE 28717
// break ;
28715: GO 28864
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28717: LD_ADDR_EXP 88
28721: PUSH
28722: LD_EXP 88
28726: PPUSH
28727: LD_VAR 0 5
28731: PPUSH
28732: LD_EXP 88
28736: PUSH
28737: LD_VAR 0 5
28741: ARRAY
28742: PUSH
28743: LD_INT 1
28745: PLUS
28746: PPUSH
28747: CALL_OW 1
28751: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28752: LD_ADDR_EXP 85
28756: PUSH
28757: LD_EXP 85
28761: PPUSH
28762: LD_VAR 0 5
28766: PUSH
28767: LD_EXP 85
28771: PUSH
28772: LD_VAR 0 5
28776: ARRAY
28777: PUSH
28778: LD_INT 1
28780: PLUS
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PPUSH
28786: LD_VAR 0 2
28790: PUSH
28791: LD_VAR 0 4
28795: ARRAY
28796: PUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_VAR 0 4
28806: ARRAY
28807: PPUSH
28808: CALL_OW 255
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PPUSH
28817: CALL 36415 0 3
28821: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28822: LD_VAR 0 2
28826: PUSH
28827: LD_VAR 0 4
28831: ARRAY
28832: PPUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 255
28842: PPUSH
28843: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28847: LD_VAR 0 2
28851: PUSH
28852: LD_VAR 0 4
28856: ARRAY
28857: PPUSH
28858: CALL_OW 141
// end ;
28862: GO 28694
28864: POP
28865: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_EXP 85
28875: PUSH
28876: LD_VAR 0 5
28880: ARRAY
28881: PUSH
28882: LD_INT 0
28884: PLUS
28885: PPUSH
28886: CALL_OW 505
// end ;
28890: LD_VAR 0 3
28894: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28895: LD_INT 0
28897: PPUSH
28898: PPUSH
28899: PPUSH
28900: PPUSH
// if not hack in hackTanks then
28901: LD_VAR 0 1
28905: PUSH
28906: LD_EXP 84
28910: IN
28911: NOT
28912: IFFALSE 28916
// exit ;
28914: GO 29156
// index := GetElementIndex ( hackTanks , hack ) ;
28916: LD_ADDR_VAR 0 4
28920: PUSH
28921: LD_EXP 84
28925: PPUSH
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL 36200 0 2
28935: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: DOUBLE
28942: LD_EXP 85
28946: PUSH
28947: LD_VAR 0 4
28951: ARRAY
28952: INC
28953: ST_TO_ADDR
28954: LD_INT 1
28956: PUSH
28957: FOR_DOWNTO
28958: IFFALSE 29130
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28960: LD_ADDR_VAR 0 5
28964: PUSH
28965: LD_EXP 85
28969: PUSH
28970: LD_VAR 0 4
28974: ARRAY
28975: PUSH
28976: LD_VAR 0 3
28980: ARRAY
28981: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28982: LD_VAR 0 5
28986: PUSH
28987: LD_INT 1
28989: ARRAY
28990: PPUSH
28991: CALL_OW 302
28995: NOT
28996: PUSH
28997: LD_VAR 0 5
29001: PUSH
29002: LD_INT 1
29004: ARRAY
29005: PPUSH
29006: CALL_OW 255
29010: PUSH
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 255
29020: NONEQUAL
29021: OR
29022: IFFALSE 29128
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29024: LD_VAR 0 5
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: CALL_OW 305
29037: PUSH
29038: LD_VAR 0 5
29042: PUSH
29043: LD_INT 1
29045: ARRAY
29046: PPUSH
29047: CALL_OW 255
29051: PUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 255
29061: EQUAL
29062: AND
29063: IFFALSE 29087
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29065: LD_VAR 0 5
29069: PUSH
29070: LD_INT 1
29072: ARRAY
29073: PPUSH
29074: LD_VAR 0 5
29078: PUSH
29079: LD_INT 2
29081: ARRAY
29082: PPUSH
29083: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29087: LD_ADDR_EXP 85
29091: PUSH
29092: LD_EXP 85
29096: PPUSH
29097: LD_VAR 0 4
29101: PPUSH
29102: LD_EXP 85
29106: PUSH
29107: LD_VAR 0 4
29111: ARRAY
29112: PPUSH
29113: LD_VAR 0 3
29117: PPUSH
29118: CALL_OW 3
29122: PPUSH
29123: CALL_OW 1
29127: ST_TO_ADDR
// end ; end ;
29128: GO 28957
29130: POP
29131: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_EXP 85
29141: PUSH
29142: LD_VAR 0 4
29146: ARRAY
29147: PUSH
29148: LD_INT 0
29150: PLUS
29151: PPUSH
29152: CALL_OW 505
// end ;
29156: LD_VAR 0 2
29160: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29161: LD_INT 0
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
// if not hack in hackTanks then
29167: LD_VAR 0 1
29171: PUSH
29172: LD_EXP 84
29176: IN
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29267
// index := GetElementIndex ( hackTanks , hack ) ;
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: LD_EXP 84
29191: PPUSH
29192: LD_VAR 0 1
29196: PPUSH
29197: CALL 36200 0 2
29201: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29202: LD_ADDR_VAR 0 4
29206: PUSH
29207: DOUBLE
29208: LD_INT 1
29210: DEC
29211: ST_TO_ADDR
29212: LD_EXP 85
29216: PUSH
29217: LD_VAR 0 5
29221: ARRAY
29222: PUSH
29223: FOR_TO
29224: IFFALSE 29265
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29226: LD_EXP 85
29230: PUSH
29231: LD_VAR 0 5
29235: ARRAY
29236: PUSH
29237: LD_VAR 0 4
29241: ARRAY
29242: PUSH
29243: LD_INT 1
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 2
29251: EQUAL
29252: IFFALSE 29263
// KillUnit ( vehicle ) ;
29254: LD_VAR 0 2
29258: PPUSH
29259: CALL_OW 66
29263: GO 29223
29265: POP
29266: POP
// end ;
29267: LD_VAR 0 3
29271: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29272: LD_EXP 89
29276: NOT
29277: IFFALSE 29312
29279: GO 29281
29281: DISABLE
// begin initMiner := true ;
29282: LD_ADDR_EXP 89
29286: PUSH
29287: LD_INT 1
29289: ST_TO_ADDR
// minersList := [ ] ;
29290: LD_ADDR_EXP 90
29294: PUSH
29295: EMPTY
29296: ST_TO_ADDR
// minerMinesList := [ ] ;
29297: LD_ADDR_EXP 91
29301: PUSH
29302: EMPTY
29303: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29304: LD_ADDR_EXP 92
29308: PUSH
29309: LD_INT 5
29311: ST_TO_ADDR
// end ;
29312: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29313: LD_EXP 89
29317: PUSH
29318: LD_INT 34
29320: PUSH
29321: LD_INT 81
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: AND
29333: IFFALSE 29794
29335: GO 29337
29337: DISABLE
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
// begin enable ;
29344: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29345: LD_ADDR_VAR 0 1
29349: PUSH
29350: LD_INT 34
29352: PUSH
29353: LD_INT 81
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 69
29364: PUSH
29365: FOR_IN
29366: IFFALSE 29438
// begin if not i in minersList then
29368: LD_VAR 0 1
29372: PUSH
29373: LD_EXP 90
29377: IN
29378: NOT
29379: IFFALSE 29436
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29381: LD_ADDR_EXP 90
29385: PUSH
29386: LD_EXP 90
29390: PPUSH
29391: LD_EXP 90
29395: PUSH
29396: LD_INT 1
29398: PLUS
29399: PPUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 1
29409: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29410: LD_ADDR_EXP 91
29414: PUSH
29415: LD_EXP 91
29419: PPUSH
29420: LD_EXP 91
29424: PUSH
29425: LD_INT 1
29427: PLUS
29428: PPUSH
29429: EMPTY
29430: PPUSH
29431: CALL_OW 1
29435: ST_TO_ADDR
// end end ;
29436: GO 29365
29438: POP
29439: POP
// for i := minerMinesList downto 1 do
29440: LD_ADDR_VAR 0 1
29444: PUSH
29445: DOUBLE
29446: LD_EXP 91
29450: INC
29451: ST_TO_ADDR
29452: LD_INT 1
29454: PUSH
29455: FOR_DOWNTO
29456: IFFALSE 29792
// begin if IsLive ( minersList [ i ] ) then
29458: LD_EXP 90
29462: PUSH
29463: LD_VAR 0 1
29467: ARRAY
29468: PPUSH
29469: CALL_OW 300
29473: IFFALSE 29501
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29475: LD_EXP 90
29479: PUSH
29480: LD_VAR 0 1
29484: ARRAY
29485: PPUSH
29486: LD_EXP 91
29490: PUSH
29491: LD_VAR 0 1
29495: ARRAY
29496: PPUSH
29497: CALL_OW 505
// if not minerMinesList [ i ] then
29501: LD_EXP 91
29505: PUSH
29506: LD_VAR 0 1
29510: ARRAY
29511: NOT
29512: IFFALSE 29516
// continue ;
29514: GO 29455
// for j := minerMinesList [ i ] downto 1 do
29516: LD_ADDR_VAR 0 2
29520: PUSH
29521: DOUBLE
29522: LD_EXP 91
29526: PUSH
29527: LD_VAR 0 1
29531: ARRAY
29532: INC
29533: ST_TO_ADDR
29534: LD_INT 1
29536: PUSH
29537: FOR_DOWNTO
29538: IFFALSE 29788
// begin side := GetSide ( minersList [ i ] ) ;
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_EXP 90
29549: PUSH
29550: LD_VAR 0 1
29554: ARRAY
29555: PPUSH
29556: CALL_OW 255
29560: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29561: LD_ADDR_VAR 0 4
29565: PUSH
29566: LD_EXP 91
29570: PUSH
29571: LD_VAR 0 1
29575: ARRAY
29576: PUSH
29577: LD_VAR 0 2
29581: ARRAY
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PPUSH
29587: LD_EXP 91
29591: PUSH
29592: LD_VAR 0 1
29596: ARRAY
29597: PUSH
29598: LD_VAR 0 2
29602: ARRAY
29603: PUSH
29604: LD_INT 2
29606: ARRAY
29607: PPUSH
29608: CALL_OW 428
29612: ST_TO_ADDR
// if not tmp then
29613: LD_VAR 0 4
29617: NOT
29618: IFFALSE 29622
// continue ;
29620: GO 29537
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29622: LD_VAR 0 4
29626: PUSH
29627: LD_INT 81
29629: PUSH
29630: LD_VAR 0 3
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: IN
29644: PUSH
29645: LD_EXP 91
29649: PUSH
29650: LD_VAR 0 1
29654: ARRAY
29655: PUSH
29656: LD_VAR 0 2
29660: ARRAY
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: LD_EXP 91
29670: PUSH
29671: LD_VAR 0 1
29675: ARRAY
29676: PUSH
29677: LD_VAR 0 2
29681: ARRAY
29682: PUSH
29683: LD_INT 2
29685: ARRAY
29686: PPUSH
29687: CALL_OW 458
29691: AND
29692: IFFALSE 29786
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29694: LD_EXP 91
29698: PUSH
29699: LD_VAR 0 1
29703: ARRAY
29704: PUSH
29705: LD_VAR 0 2
29709: ARRAY
29710: PUSH
29711: LD_INT 1
29713: ARRAY
29714: PPUSH
29715: LD_EXP 91
29719: PUSH
29720: LD_VAR 0 1
29724: ARRAY
29725: PUSH
29726: LD_VAR 0 2
29730: ARRAY
29731: PUSH
29732: LD_INT 2
29734: ARRAY
29735: PPUSH
29736: LD_VAR 0 3
29740: PPUSH
29741: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29745: LD_ADDR_EXP 91
29749: PUSH
29750: LD_EXP 91
29754: PPUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: LD_EXP 91
29764: PUSH
29765: LD_VAR 0 1
29769: ARRAY
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: CALL_OW 3
29780: PPUSH
29781: CALL_OW 1
29785: ST_TO_ADDR
// end ; end ;
29786: GO 29537
29788: POP
29789: POP
// end ;
29790: GO 29455
29792: POP
29793: POP
// end ;
29794: PPOPN 4
29796: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
// result := false ;
29801: LD_ADDR_VAR 0 4
29805: PUSH
29806: LD_INT 0
29808: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29809: LD_VAR 0 1
29813: PPUSH
29814: CALL_OW 264
29818: PUSH
29819: LD_INT 81
29821: EQUAL
29822: NOT
29823: IFFALSE 29827
// exit ;
29825: GO 30067
// index := GetElementIndex ( minersList , unit ) ;
29827: LD_ADDR_VAR 0 5
29831: PUSH
29832: LD_EXP 90
29836: PPUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL 36200 0 2
29846: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29847: LD_EXP 91
29851: PUSH
29852: LD_VAR 0 5
29856: ARRAY
29857: PUSH
29858: LD_EXP 92
29862: GREATEREQUAL
29863: IFFALSE 29867
// exit ;
29865: GO 30067
// ComMoveXY ( unit , x , y ) ;
29867: LD_VAR 0 1
29871: PPUSH
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 3
29881: PPUSH
29882: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29886: LD_INT 35
29888: PPUSH
29889: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29893: LD_VAR 0 1
29897: PPUSH
29898: LD_VAR 0 2
29902: PPUSH
29903: LD_VAR 0 3
29907: PPUSH
29908: CALL 67555 0 3
29912: NOT
29913: PUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 314
29923: AND
29924: IFFALSE 29928
// exit ;
29926: GO 30067
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29928: LD_VAR 0 2
29932: PPUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: CALL_OW 428
29942: PUSH
29943: LD_VAR 0 1
29947: EQUAL
29948: PUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 314
29958: NOT
29959: AND
29960: IFFALSE 29886
// PlaySoundXY ( x , y , PlantMine ) ;
29962: LD_VAR 0 2
29966: PPUSH
29967: LD_VAR 0 3
29971: PPUSH
29972: LD_STRING PlantMine
29974: PPUSH
29975: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 3
29988: PPUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 255
29998: PPUSH
29999: LD_INT 0
30001: PPUSH
30002: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30006: LD_ADDR_EXP 91
30010: PUSH
30011: LD_EXP 91
30015: PPUSH
30016: LD_VAR 0 5
30020: PUSH
30021: LD_EXP 91
30025: PUSH
30026: LD_VAR 0 5
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: PLUS
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PPUSH
30040: LD_VAR 0 2
30044: PUSH
30045: LD_VAR 0 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL 36415 0 3
30058: ST_TO_ADDR
// result := true ;
30059: LD_ADDR_VAR 0 4
30063: PUSH
30064: LD_INT 1
30066: ST_TO_ADDR
// end ;
30067: LD_VAR 0 4
30071: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30072: LD_INT 0
30074: PPUSH
30075: PPUSH
30076: PPUSH
// if not unit in minersList then
30077: LD_VAR 0 1
30081: PUSH
30082: LD_EXP 90
30086: IN
30087: NOT
30088: IFFALSE 30092
// exit ;
30090: GO 30484
// index := GetElementIndex ( minersList , unit ) ;
30092: LD_ADDR_VAR 0 6
30096: PUSH
30097: LD_EXP 90
30101: PPUSH
30102: LD_VAR 0 1
30106: PPUSH
30107: CALL 36200 0 2
30111: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30112: LD_ADDR_VAR 0 5
30116: PUSH
30117: DOUBLE
30118: LD_EXP 91
30122: PUSH
30123: LD_VAR 0 6
30127: ARRAY
30128: INC
30129: ST_TO_ADDR
30130: LD_INT 1
30132: PUSH
30133: FOR_DOWNTO
30134: IFFALSE 30295
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30136: LD_EXP 91
30140: PUSH
30141: LD_VAR 0 6
30145: ARRAY
30146: PUSH
30147: LD_VAR 0 5
30151: ARRAY
30152: PUSH
30153: LD_INT 1
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 2
30161: EQUAL
30162: PUSH
30163: LD_EXP 91
30167: PUSH
30168: LD_VAR 0 6
30172: ARRAY
30173: PUSH
30174: LD_VAR 0 5
30178: ARRAY
30179: PUSH
30180: LD_INT 2
30182: ARRAY
30183: PUSH
30184: LD_VAR 0 3
30188: EQUAL
30189: AND
30190: IFFALSE 30293
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30192: LD_EXP 91
30196: PUSH
30197: LD_VAR 0 6
30201: ARRAY
30202: PUSH
30203: LD_VAR 0 5
30207: ARRAY
30208: PUSH
30209: LD_INT 1
30211: ARRAY
30212: PPUSH
30213: LD_EXP 91
30217: PUSH
30218: LD_VAR 0 6
30222: ARRAY
30223: PUSH
30224: LD_VAR 0 5
30228: ARRAY
30229: PUSH
30230: LD_INT 2
30232: ARRAY
30233: PPUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: PPUSH
30244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30248: LD_ADDR_EXP 91
30252: PUSH
30253: LD_EXP 91
30257: PPUSH
30258: LD_VAR 0 6
30262: PPUSH
30263: LD_EXP 91
30267: PUSH
30268: LD_VAR 0 6
30272: ARRAY
30273: PPUSH
30274: LD_VAR 0 5
30278: PPUSH
30279: CALL_OW 3
30283: PPUSH
30284: CALL_OW 1
30288: ST_TO_ADDR
// exit ;
30289: POP
30290: POP
30291: GO 30484
// end ; end ;
30293: GO 30133
30295: POP
30296: POP
// for i := minerMinesList [ index ] downto 1 do
30297: LD_ADDR_VAR 0 5
30301: PUSH
30302: DOUBLE
30303: LD_EXP 91
30307: PUSH
30308: LD_VAR 0 6
30312: ARRAY
30313: INC
30314: ST_TO_ADDR
30315: LD_INT 1
30317: PUSH
30318: FOR_DOWNTO
30319: IFFALSE 30482
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30321: LD_EXP 91
30325: PUSH
30326: LD_VAR 0 6
30330: ARRAY
30331: PUSH
30332: LD_VAR 0 5
30336: ARRAY
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: LD_EXP 91
30346: PUSH
30347: LD_VAR 0 6
30351: ARRAY
30352: PUSH
30353: LD_VAR 0 5
30357: ARRAY
30358: PUSH
30359: LD_INT 2
30361: ARRAY
30362: PPUSH
30363: LD_VAR 0 2
30367: PPUSH
30368: LD_VAR 0 3
30372: PPUSH
30373: CALL_OW 298
30377: PUSH
30378: LD_INT 6
30380: LESS
30381: IFFALSE 30480
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30383: LD_EXP 91
30387: PUSH
30388: LD_VAR 0 6
30392: ARRAY
30393: PUSH
30394: LD_VAR 0 5
30398: ARRAY
30399: PUSH
30400: LD_INT 1
30402: ARRAY
30403: PPUSH
30404: LD_EXP 91
30408: PUSH
30409: LD_VAR 0 6
30413: ARRAY
30414: PUSH
30415: LD_VAR 0 5
30419: ARRAY
30420: PUSH
30421: LD_INT 2
30423: ARRAY
30424: PPUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 255
30434: PPUSH
30435: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30439: LD_ADDR_EXP 91
30443: PUSH
30444: LD_EXP 91
30448: PPUSH
30449: LD_VAR 0 6
30453: PPUSH
30454: LD_EXP 91
30458: PUSH
30459: LD_VAR 0 6
30463: ARRAY
30464: PPUSH
30465: LD_VAR 0 5
30469: PPUSH
30470: CALL_OW 3
30474: PPUSH
30475: CALL_OW 1
30479: ST_TO_ADDR
// end ; end ;
30480: GO 30318
30482: POP
30483: POP
// end ;
30484: LD_VAR 0 4
30488: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30489: LD_INT 0
30491: PPUSH
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 264
30509: PUSH
30510: LD_INT 81
30512: EQUAL
30513: NOT
30514: PUSH
30515: LD_VAR 0 1
30519: PUSH
30520: LD_EXP 90
30524: IN
30525: NOT
30526: OR
30527: IFFALSE 30531
// exit ;
30529: GO 30853
// index := GetElementIndex ( minersList , unit ) ;
30531: LD_ADDR_VAR 0 6
30535: PUSH
30536: LD_EXP 90
30540: PPUSH
30541: LD_VAR 0 1
30545: PPUSH
30546: CALL 36200 0 2
30550: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30551: LD_ADDR_VAR 0 8
30555: PUSH
30556: LD_EXP 92
30560: PUSH
30561: LD_EXP 91
30565: PUSH
30566: LD_VAR 0 6
30570: ARRAY
30571: MINUS
30572: ST_TO_ADDR
// if not minesFreeAmount then
30573: LD_VAR 0 8
30577: NOT
30578: IFFALSE 30582
// exit ;
30580: GO 30853
// tmp := [ ] ;
30582: LD_ADDR_VAR 0 7
30586: PUSH
30587: EMPTY
30588: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: DOUBLE
30595: LD_INT 1
30597: DEC
30598: ST_TO_ADDR
30599: LD_VAR 0 8
30603: PUSH
30604: FOR_TO
30605: IFFALSE 30800
// begin _d := rand ( 0 , 5 ) ;
30607: LD_ADDR_VAR 0 11
30611: PUSH
30612: LD_INT 0
30614: PPUSH
30615: LD_INT 5
30617: PPUSH
30618: CALL_OW 12
30622: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30623: LD_ADDR_VAR 0 12
30627: PUSH
30628: LD_INT 2
30630: PPUSH
30631: LD_INT 6
30633: PPUSH
30634: CALL_OW 12
30638: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30639: LD_ADDR_VAR 0 9
30643: PUSH
30644: LD_VAR 0 2
30648: PPUSH
30649: LD_VAR 0 11
30653: PPUSH
30654: LD_VAR 0 12
30658: PPUSH
30659: CALL_OW 272
30663: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30664: LD_ADDR_VAR 0 10
30668: PUSH
30669: LD_VAR 0 3
30673: PPUSH
30674: LD_VAR 0 11
30678: PPUSH
30679: LD_VAR 0 12
30683: PPUSH
30684: CALL_OW 273
30688: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30689: LD_VAR 0 9
30693: PPUSH
30694: LD_VAR 0 10
30698: PPUSH
30699: CALL_OW 488
30703: PUSH
30704: LD_VAR 0 9
30708: PUSH
30709: LD_VAR 0 10
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_VAR 0 7
30722: IN
30723: NOT
30724: AND
30725: PUSH
30726: LD_VAR 0 9
30730: PPUSH
30731: LD_VAR 0 10
30735: PPUSH
30736: CALL_OW 458
30740: NOT
30741: AND
30742: IFFALSE 30784
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30744: LD_ADDR_VAR 0 7
30748: PUSH
30749: LD_VAR 0 7
30753: PPUSH
30754: LD_VAR 0 7
30758: PUSH
30759: LD_INT 1
30761: PLUS
30762: PPUSH
30763: LD_VAR 0 9
30767: PUSH
30768: LD_VAR 0 10
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PPUSH
30777: CALL_OW 1
30781: ST_TO_ADDR
30782: GO 30798
// i := i - 1 ;
30784: LD_ADDR_VAR 0 5
30788: PUSH
30789: LD_VAR 0 5
30793: PUSH
30794: LD_INT 1
30796: MINUS
30797: ST_TO_ADDR
// end ;
30798: GO 30604
30800: POP
30801: POP
// for i in tmp do
30802: LD_ADDR_VAR 0 5
30806: PUSH
30807: LD_VAR 0 7
30811: PUSH
30812: FOR_IN
30813: IFFALSE 30851
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 5
30824: PUSH
30825: LD_INT 1
30827: ARRAY
30828: PPUSH
30829: LD_VAR 0 5
30833: PUSH
30834: LD_INT 2
30836: ARRAY
30837: PPUSH
30838: CALL 29797 0 3
30842: NOT
30843: IFFALSE 30849
// exit ;
30845: POP
30846: POP
30847: GO 30853
30849: GO 30812
30851: POP
30852: POP
// end ;
30853: LD_VAR 0 4
30857: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30858: LD_INT 0
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
// if not GetClass ( unit ) = class_sniper then
30867: LD_VAR 0 1
30871: PPUSH
30872: CALL_OW 257
30876: PUSH
30877: LD_INT 5
30879: EQUAL
30880: NOT
30881: IFFALSE 30885
// exit ;
30883: GO 31273
// dist := 8 ;
30885: LD_ADDR_VAR 0 5
30889: PUSH
30890: LD_INT 8
30892: ST_TO_ADDR
// viewRange := 12 ;
30893: LD_ADDR_VAR 0 7
30897: PUSH
30898: LD_INT 12
30900: ST_TO_ADDR
// side := GetSide ( unit ) ;
30901: LD_ADDR_VAR 0 6
30905: PUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 255
30915: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30916: LD_INT 61
30918: PPUSH
30919: LD_VAR 0 6
30923: PPUSH
30924: CALL_OW 321
30928: PUSH
30929: LD_INT 2
30931: EQUAL
30932: IFFALSE 30942
// viewRange := 16 ;
30934: LD_ADDR_VAR 0 7
30938: PUSH
30939: LD_INT 16
30941: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30942: LD_VAR 0 1
30946: PPUSH
30947: LD_VAR 0 2
30951: PPUSH
30952: LD_VAR 0 3
30956: PPUSH
30957: CALL_OW 297
30961: PUSH
30962: LD_VAR 0 5
30966: GREATER
30967: IFFALSE 31046
// begin ComMoveXY ( unit , x , y ) ;
30969: LD_VAR 0 1
30973: PPUSH
30974: LD_VAR 0 2
30978: PPUSH
30979: LD_VAR 0 3
30983: PPUSH
30984: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30988: LD_INT 35
30990: PPUSH
30991: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30995: LD_VAR 0 1
30999: PPUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: LD_VAR 0 3
31009: PPUSH
31010: CALL 67555 0 3
31014: NOT
31015: IFFALSE 31019
// exit ;
31017: GO 31273
// until GetDistUnitXY ( unit , x , y ) < dist ;
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_VAR 0 2
31028: PPUSH
31029: LD_VAR 0 3
31033: PPUSH
31034: CALL_OW 297
31038: PUSH
31039: LD_VAR 0 5
31043: LESS
31044: IFFALSE 30988
// end ; ComTurnXY ( unit , x , y ) ;
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_VAR 0 3
31060: PPUSH
31061: CALL_OW 118
// wait ( 5 ) ;
31065: LD_INT 5
31067: PPUSH
31068: CALL_OW 67
// _d := GetDir ( unit ) ;
31072: LD_ADDR_VAR 0 10
31076: PUSH
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 254
31086: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31087: LD_ADDR_VAR 0 8
31091: PUSH
31092: LD_VAR 0 1
31096: PPUSH
31097: CALL_OW 250
31101: PPUSH
31102: LD_VAR 0 10
31106: PPUSH
31107: LD_VAR 0 5
31111: PPUSH
31112: CALL_OW 272
31116: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31117: LD_ADDR_VAR 0 9
31121: PUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 251
31131: PPUSH
31132: LD_VAR 0 10
31136: PPUSH
31137: LD_VAR 0 5
31141: PPUSH
31142: CALL_OW 273
31146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31147: LD_VAR 0 8
31151: PPUSH
31152: LD_VAR 0 9
31156: PPUSH
31157: CALL_OW 488
31161: NOT
31162: IFFALSE 31166
// exit ;
31164: GO 31273
// ComAnimCustom ( unit , 1 ) ;
31166: LD_VAR 0 1
31170: PPUSH
31171: LD_INT 1
31173: PPUSH
31174: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31178: LD_VAR 0 8
31182: PPUSH
31183: LD_VAR 0 9
31187: PPUSH
31188: LD_VAR 0 6
31192: PPUSH
31193: LD_VAR 0 7
31197: PPUSH
31198: CALL_OW 330
// repeat wait ( 1 ) ;
31202: LD_INT 1
31204: PPUSH
31205: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 316
31218: PUSH
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL_OW 314
31228: OR
31229: PUSH
31230: LD_VAR 0 1
31234: PPUSH
31235: CALL_OW 302
31239: NOT
31240: OR
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 301
31251: OR
31252: IFFALSE 31202
// RemoveSeeing ( _x , _y , side ) ;
31254: LD_VAR 0 8
31258: PPUSH
31259: LD_VAR 0 9
31263: PPUSH
31264: LD_VAR 0 6
31268: PPUSH
31269: CALL_OW 331
// end ; end_of_file
31273: LD_VAR 0 4
31277: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31278: LD_INT 0
31280: PPUSH
31281: PPUSH
// if exist_mode then
31282: LD_VAR 0 2
31286: IFFALSE 31311
// unit := CreateCharacter ( prefix & ident ) else
31288: LD_ADDR_VAR 0 5
31292: PUSH
31293: LD_VAR 0 3
31297: PUSH
31298: LD_VAR 0 1
31302: STR
31303: PPUSH
31304: CALL_OW 34
31308: ST_TO_ADDR
31309: GO 31326
// unit := NewCharacter ( ident ) ;
31311: LD_ADDR_VAR 0 5
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 25
31325: ST_TO_ADDR
// result := unit ;
31326: LD_ADDR_VAR 0 4
31330: PUSH
31331: LD_VAR 0 5
31335: ST_TO_ADDR
// end ;
31336: LD_VAR 0 4
31340: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
// if not side or not nation then
31345: LD_VAR 0 1
31349: NOT
31350: PUSH
31351: LD_VAR 0 2
31355: NOT
31356: OR
31357: IFFALSE 31361
// exit ;
31359: GO 32129
// case nation of nation_american :
31361: LD_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: DOUBLE
31369: EQUAL
31370: IFTRUE 31374
31372: GO 31588
31374: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31375: LD_ADDR_VAR 0 4
31379: PUSH
31380: LD_INT 35
31382: PUSH
31383: LD_INT 45
31385: PUSH
31386: LD_INT 46
31388: PUSH
31389: LD_INT 47
31391: PUSH
31392: LD_INT 82
31394: PUSH
31395: LD_INT 83
31397: PUSH
31398: LD_INT 84
31400: PUSH
31401: LD_INT 85
31403: PUSH
31404: LD_INT 86
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 6
31415: PUSH
31416: LD_INT 15
31418: PUSH
31419: LD_INT 16
31421: PUSH
31422: LD_INT 7
31424: PUSH
31425: LD_INT 12
31427: PUSH
31428: LD_INT 13
31430: PUSH
31431: LD_INT 10
31433: PUSH
31434: LD_INT 14
31436: PUSH
31437: LD_INT 20
31439: PUSH
31440: LD_INT 21
31442: PUSH
31443: LD_INT 22
31445: PUSH
31446: LD_INT 25
31448: PUSH
31449: LD_INT 32
31451: PUSH
31452: LD_INT 27
31454: PUSH
31455: LD_INT 36
31457: PUSH
31458: LD_INT 69
31460: PUSH
31461: LD_INT 39
31463: PUSH
31464: LD_INT 34
31466: PUSH
31467: LD_INT 40
31469: PUSH
31470: LD_INT 48
31472: PUSH
31473: LD_INT 49
31475: PUSH
31476: LD_INT 50
31478: PUSH
31479: LD_INT 51
31481: PUSH
31482: LD_INT 52
31484: PUSH
31485: LD_INT 53
31487: PUSH
31488: LD_INT 54
31490: PUSH
31491: LD_INT 55
31493: PUSH
31494: LD_INT 56
31496: PUSH
31497: LD_INT 57
31499: PUSH
31500: LD_INT 58
31502: PUSH
31503: LD_INT 59
31505: PUSH
31506: LD_INT 60
31508: PUSH
31509: LD_INT 61
31511: PUSH
31512: LD_INT 62
31514: PUSH
31515: LD_INT 80
31517: PUSH
31518: LD_INT 82
31520: PUSH
31521: LD_INT 83
31523: PUSH
31524: LD_INT 84
31526: PUSH
31527: LD_INT 85
31529: PUSH
31530: LD_INT 86
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
31586: GO 32053
31588: LD_INT 2
31590: DOUBLE
31591: EQUAL
31592: IFTRUE 31596
31594: GO 31822
31596: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31597: LD_ADDR_VAR 0 4
31601: PUSH
31602: LD_INT 35
31604: PUSH
31605: LD_INT 45
31607: PUSH
31608: LD_INT 46
31610: PUSH
31611: LD_INT 47
31613: PUSH
31614: LD_INT 82
31616: PUSH
31617: LD_INT 83
31619: PUSH
31620: LD_INT 84
31622: PUSH
31623: LD_INT 85
31625: PUSH
31626: LD_INT 87
31628: PUSH
31629: LD_INT 70
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 11
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: LD_INT 5
31646: PUSH
31647: LD_INT 6
31649: PUSH
31650: LD_INT 15
31652: PUSH
31653: LD_INT 18
31655: PUSH
31656: LD_INT 7
31658: PUSH
31659: LD_INT 17
31661: PUSH
31662: LD_INT 8
31664: PUSH
31665: LD_INT 20
31667: PUSH
31668: LD_INT 21
31670: PUSH
31671: LD_INT 22
31673: PUSH
31674: LD_INT 72
31676: PUSH
31677: LD_INT 26
31679: PUSH
31680: LD_INT 69
31682: PUSH
31683: LD_INT 39
31685: PUSH
31686: LD_INT 40
31688: PUSH
31689: LD_INT 41
31691: PUSH
31692: LD_INT 42
31694: PUSH
31695: LD_INT 43
31697: PUSH
31698: LD_INT 48
31700: PUSH
31701: LD_INT 49
31703: PUSH
31704: LD_INT 50
31706: PUSH
31707: LD_INT 51
31709: PUSH
31710: LD_INT 52
31712: PUSH
31713: LD_INT 53
31715: PUSH
31716: LD_INT 54
31718: PUSH
31719: LD_INT 55
31721: PUSH
31722: LD_INT 56
31724: PUSH
31725: LD_INT 60
31727: PUSH
31728: LD_INT 61
31730: PUSH
31731: LD_INT 62
31733: PUSH
31734: LD_INT 66
31736: PUSH
31737: LD_INT 67
31739: PUSH
31740: LD_INT 68
31742: PUSH
31743: LD_INT 81
31745: PUSH
31746: LD_INT 82
31748: PUSH
31749: LD_INT 83
31751: PUSH
31752: LD_INT 84
31754: PUSH
31755: LD_INT 85
31757: PUSH
31758: LD_INT 87
31760: PUSH
31761: LD_INT 88
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
31820: GO 32053
31822: LD_INT 3
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 32052
31830: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31831: LD_ADDR_VAR 0 4
31835: PUSH
31836: LD_INT 46
31838: PUSH
31839: LD_INT 47
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 82
31850: PUSH
31851: LD_INT 83
31853: PUSH
31854: LD_INT 84
31856: PUSH
31857: LD_INT 85
31859: PUSH
31860: LD_INT 86
31862: PUSH
31863: LD_INT 11
31865: PUSH
31866: LD_INT 9
31868: PUSH
31869: LD_INT 20
31871: PUSH
31872: LD_INT 19
31874: PUSH
31875: LD_INT 21
31877: PUSH
31878: LD_INT 24
31880: PUSH
31881: LD_INT 22
31883: PUSH
31884: LD_INT 25
31886: PUSH
31887: LD_INT 28
31889: PUSH
31890: LD_INT 29
31892: PUSH
31893: LD_INT 30
31895: PUSH
31896: LD_INT 31
31898: PUSH
31899: LD_INT 37
31901: PUSH
31902: LD_INT 38
31904: PUSH
31905: LD_INT 32
31907: PUSH
31908: LD_INT 27
31910: PUSH
31911: LD_INT 33
31913: PUSH
31914: LD_INT 69
31916: PUSH
31917: LD_INT 39
31919: PUSH
31920: LD_INT 34
31922: PUSH
31923: LD_INT 40
31925: PUSH
31926: LD_INT 71
31928: PUSH
31929: LD_INT 23
31931: PUSH
31932: LD_INT 44
31934: PUSH
31935: LD_INT 48
31937: PUSH
31938: LD_INT 49
31940: PUSH
31941: LD_INT 50
31943: PUSH
31944: LD_INT 51
31946: PUSH
31947: LD_INT 52
31949: PUSH
31950: LD_INT 53
31952: PUSH
31953: LD_INT 54
31955: PUSH
31956: LD_INT 55
31958: PUSH
31959: LD_INT 56
31961: PUSH
31962: LD_INT 57
31964: PUSH
31965: LD_INT 58
31967: PUSH
31968: LD_INT 59
31970: PUSH
31971: LD_INT 63
31973: PUSH
31974: LD_INT 64
31976: PUSH
31977: LD_INT 65
31979: PUSH
31980: LD_INT 82
31982: PUSH
31983: LD_INT 83
31985: PUSH
31986: LD_INT 84
31988: PUSH
31989: LD_INT 85
31991: PUSH
31992: LD_INT 86
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
32050: GO 32053
32052: POP
// if state > - 1 and state < 3 then
32053: LD_VAR 0 3
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: GREATER
32062: PUSH
32063: LD_VAR 0 3
32067: PUSH
32068: LD_INT 3
32070: LESS
32071: AND
32072: IFFALSE 32129
// for i in result do
32074: LD_ADDR_VAR 0 5
32078: PUSH
32079: LD_VAR 0 4
32083: PUSH
32084: FOR_IN
32085: IFFALSE 32127
// if GetTech ( i , side ) <> state then
32087: LD_VAR 0 5
32091: PPUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: CALL_OW 321
32101: PUSH
32102: LD_VAR 0 3
32106: NONEQUAL
32107: IFFALSE 32125
// result := result diff i ;
32109: LD_ADDR_VAR 0 4
32113: PUSH
32114: LD_VAR 0 4
32118: PUSH
32119: LD_VAR 0 5
32123: DIFF
32124: ST_TO_ADDR
32125: GO 32084
32127: POP
32128: POP
// end ;
32129: LD_VAR 0 4
32133: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32134: LD_INT 0
32136: PPUSH
32137: PPUSH
32138: PPUSH
// result := true ;
32139: LD_ADDR_VAR 0 3
32143: PUSH
32144: LD_INT 1
32146: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_VAR 0 2
32156: PPUSH
32157: CALL_OW 480
32161: ST_TO_ADDR
// if not tmp then
32162: LD_VAR 0 5
32166: NOT
32167: IFFALSE 32171
// exit ;
32169: GO 32220
// for i in tmp do
32171: LD_ADDR_VAR 0 4
32175: PUSH
32176: LD_VAR 0 5
32180: PUSH
32181: FOR_IN
32182: IFFALSE 32218
// if GetTech ( i , side ) <> state_researched then
32184: LD_VAR 0 4
32188: PPUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 321
32198: PUSH
32199: LD_INT 2
32201: NONEQUAL
32202: IFFALSE 32216
// begin result := false ;
32204: LD_ADDR_VAR 0 3
32208: PUSH
32209: LD_INT 0
32211: ST_TO_ADDR
// exit ;
32212: POP
32213: POP
32214: GO 32220
// end ;
32216: GO 32181
32218: POP
32219: POP
// end ;
32220: LD_VAR 0 3
32224: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32240: LD_VAR 0 1
32244: NOT
32245: PUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 257
32255: PUSH
32256: LD_INT 9
32258: NONEQUAL
32259: OR
32260: IFFALSE 32264
// exit ;
32262: GO 32837
// side := GetSide ( unit ) ;
32264: LD_ADDR_VAR 0 9
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 255
32278: ST_TO_ADDR
// tech_space := tech_spacanom ;
32279: LD_ADDR_VAR 0 12
32283: PUSH
32284: LD_INT 29
32286: ST_TO_ADDR
// tech_time := tech_taurad ;
32287: LD_ADDR_VAR 0 13
32291: PUSH
32292: LD_INT 28
32294: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32295: LD_ADDR_VAR 0 11
32299: PUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 310
32309: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32310: LD_VAR 0 11
32314: PPUSH
32315: CALL_OW 247
32319: PUSH
32320: LD_INT 2
32322: EQUAL
32323: IFFALSE 32327
// exit ;
32325: GO 32837
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32327: LD_ADDR_VAR 0 8
32331: PUSH
32332: LD_INT 81
32334: PUSH
32335: LD_VAR 0 9
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 21
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PPUSH
32365: CALL_OW 69
32369: ST_TO_ADDR
// if not tmp then
32370: LD_VAR 0 8
32374: NOT
32375: IFFALSE 32379
// exit ;
32377: GO 32837
// if in_unit then
32379: LD_VAR 0 11
32383: IFFALSE 32407
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32385: LD_ADDR_VAR 0 10
32389: PUSH
32390: LD_VAR 0 8
32394: PPUSH
32395: LD_VAR 0 11
32399: PPUSH
32400: CALL_OW 74
32404: ST_TO_ADDR
32405: GO 32427
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32407: LD_ADDR_VAR 0 10
32411: PUSH
32412: LD_VAR 0 8
32416: PPUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 74
32426: ST_TO_ADDR
// if not enemy then
32427: LD_VAR 0 10
32431: NOT
32432: IFFALSE 32436
// exit ;
32434: GO 32837
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32436: LD_VAR 0 11
32440: PUSH
32441: LD_VAR 0 11
32445: PPUSH
32446: LD_VAR 0 10
32450: PPUSH
32451: CALL_OW 296
32455: PUSH
32456: LD_INT 13
32458: GREATER
32459: AND
32460: PUSH
32461: LD_VAR 0 1
32465: PPUSH
32466: LD_VAR 0 10
32470: PPUSH
32471: CALL_OW 296
32475: PUSH
32476: LD_INT 12
32478: GREATER
32479: OR
32480: IFFALSE 32484
// exit ;
32482: GO 32837
// missile := [ 1 ] ;
32484: LD_ADDR_VAR 0 14
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32495: LD_VAR 0 9
32499: PPUSH
32500: LD_VAR 0 12
32504: PPUSH
32505: CALL_OW 325
32509: IFFALSE 32538
// missile := Replace ( missile , missile + 1 , 2 ) ;
32511: LD_ADDR_VAR 0 14
32515: PUSH
32516: LD_VAR 0 14
32520: PPUSH
32521: LD_VAR 0 14
32525: PUSH
32526: LD_INT 1
32528: PLUS
32529: PPUSH
32530: LD_INT 2
32532: PPUSH
32533: CALL_OW 1
32537: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32538: LD_VAR 0 9
32542: PPUSH
32543: LD_VAR 0 13
32547: PPUSH
32548: CALL_OW 325
32552: PUSH
32553: LD_VAR 0 10
32557: PPUSH
32558: CALL_OW 255
32562: PPUSH
32563: LD_VAR 0 13
32567: PPUSH
32568: CALL_OW 325
32572: NOT
32573: AND
32574: IFFALSE 32603
// missile := Replace ( missile , missile + 1 , 3 ) ;
32576: LD_ADDR_VAR 0 14
32580: PUSH
32581: LD_VAR 0 14
32585: PPUSH
32586: LD_VAR 0 14
32590: PUSH
32591: LD_INT 1
32593: PLUS
32594: PPUSH
32595: LD_INT 3
32597: PPUSH
32598: CALL_OW 1
32602: ST_TO_ADDR
// if missile < 2 then
32603: LD_VAR 0 14
32607: PUSH
32608: LD_INT 2
32610: LESS
32611: IFFALSE 32615
// exit ;
32613: GO 32837
// x := GetX ( enemy ) ;
32615: LD_ADDR_VAR 0 4
32619: PUSH
32620: LD_VAR 0 10
32624: PPUSH
32625: CALL_OW 250
32629: ST_TO_ADDR
// y := GetY ( enemy ) ;
32630: LD_ADDR_VAR 0 5
32634: PUSH
32635: LD_VAR 0 10
32639: PPUSH
32640: CALL_OW 251
32644: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32645: LD_ADDR_VAR 0 6
32649: PUSH
32650: LD_VAR 0 4
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PPUSH
32659: LD_INT 1
32661: PPUSH
32662: CALL_OW 12
32666: PLUS
32667: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32668: LD_ADDR_VAR 0 7
32672: PUSH
32673: LD_VAR 0 5
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PPUSH
32682: LD_INT 1
32684: PPUSH
32685: CALL_OW 12
32689: PLUS
32690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32691: LD_VAR 0 6
32695: PPUSH
32696: LD_VAR 0 7
32700: PPUSH
32701: CALL_OW 488
32705: NOT
32706: IFFALSE 32728
// begin _x := x ;
32708: LD_ADDR_VAR 0 6
32712: PUSH
32713: LD_VAR 0 4
32717: ST_TO_ADDR
// _y := y ;
32718: LD_ADDR_VAR 0 7
32722: PUSH
32723: LD_VAR 0 5
32727: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32728: LD_ADDR_VAR 0 3
32732: PUSH
32733: LD_INT 1
32735: PPUSH
32736: LD_VAR 0 14
32740: PPUSH
32741: CALL_OW 12
32745: ST_TO_ADDR
// case i of 1 :
32746: LD_VAR 0 3
32750: PUSH
32751: LD_INT 1
32753: DOUBLE
32754: EQUAL
32755: IFTRUE 32759
32757: GO 32776
32759: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32760: LD_VAR 0 1
32764: PPUSH
32765: LD_VAR 0 10
32769: PPUSH
32770: CALL_OW 115
32774: GO 32837
32776: LD_INT 2
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32806
32784: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32785: LD_VAR 0 1
32789: PPUSH
32790: LD_VAR 0 6
32794: PPUSH
32795: LD_VAR 0 7
32799: PPUSH
32800: CALL_OW 153
32804: GO 32837
32806: LD_INT 3
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32836
32814: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32815: LD_VAR 0 1
32819: PPUSH
32820: LD_VAR 0 6
32824: PPUSH
32825: LD_VAR 0 7
32829: PPUSH
32830: CALL_OW 154
32834: GO 32837
32836: POP
// end ;
32837: LD_VAR 0 2
32841: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
// if not unit or not building then
32850: LD_VAR 0 1
32854: NOT
32855: PUSH
32856: LD_VAR 0 2
32860: NOT
32861: OR
32862: IFFALSE 32866
// exit ;
32864: GO 33024
// x := GetX ( building ) ;
32866: LD_ADDR_VAR 0 5
32870: PUSH
32871: LD_VAR 0 2
32875: PPUSH
32876: CALL_OW 250
32880: ST_TO_ADDR
// y := GetY ( building ) ;
32881: LD_ADDR_VAR 0 6
32885: PUSH
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL_OW 251
32895: ST_TO_ADDR
// for i = 0 to 5 do
32896: LD_ADDR_VAR 0 4
32900: PUSH
32901: DOUBLE
32902: LD_INT 0
32904: DEC
32905: ST_TO_ADDR
32906: LD_INT 5
32908: PUSH
32909: FOR_TO
32910: IFFALSE 33022
// begin _x := ShiftX ( x , i , 3 ) ;
32912: LD_ADDR_VAR 0 7
32916: PUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: LD_VAR 0 4
32926: PPUSH
32927: LD_INT 3
32929: PPUSH
32930: CALL_OW 272
32934: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32935: LD_ADDR_VAR 0 8
32939: PUSH
32940: LD_VAR 0 6
32944: PPUSH
32945: LD_VAR 0 4
32949: PPUSH
32950: LD_INT 3
32952: PPUSH
32953: CALL_OW 273
32957: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32958: LD_VAR 0 7
32962: PPUSH
32963: LD_VAR 0 8
32967: PPUSH
32968: CALL_OW 488
32972: NOT
32973: IFFALSE 32977
// continue ;
32975: GO 32909
// if HexInfo ( _x , _y ) = 0 then
32977: LD_VAR 0 7
32981: PPUSH
32982: LD_VAR 0 8
32986: PPUSH
32987: CALL_OW 428
32991: PUSH
32992: LD_INT 0
32994: EQUAL
32995: IFFALSE 33020
// begin ComMoveXY ( unit , _x , _y ) ;
32997: LD_VAR 0 1
33001: PPUSH
33002: LD_VAR 0 7
33006: PPUSH
33007: LD_VAR 0 8
33011: PPUSH
33012: CALL_OW 111
// exit ;
33016: POP
33017: POP
33018: GO 33024
// end ; end ;
33020: GO 32909
33022: POP
33023: POP
// end ;
33024: LD_VAR 0 3
33028: RET
// export function ScanBase ( side , base_area ) ; begin
33029: LD_INT 0
33031: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_VAR 0 2
33041: PPUSH
33042: LD_INT 81
33044: PUSH
33045: LD_VAR 0 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PPUSH
33054: CALL_OW 70
33058: ST_TO_ADDR
// end ;
33059: LD_VAR 0 3
33063: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33064: LD_INT 0
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
// result := false ;
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_INT 0
33077: ST_TO_ADDR
// side := GetSide ( unit ) ;
33078: LD_ADDR_VAR 0 3
33082: PUSH
33083: LD_VAR 0 1
33087: PPUSH
33088: CALL_OW 255
33092: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33093: LD_ADDR_VAR 0 4
33097: PUSH
33098: LD_VAR 0 1
33102: PPUSH
33103: CALL_OW 248
33107: ST_TO_ADDR
// case nat of 1 :
33108: LD_VAR 0 4
33112: PUSH
33113: LD_INT 1
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33132
33121: POP
// tech := tech_lassight ; 2 :
33122: LD_ADDR_VAR 0 5
33126: PUSH
33127: LD_INT 12
33129: ST_TO_ADDR
33130: GO 33171
33132: LD_INT 2
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33151
33140: POP
// tech := tech_mortar ; 3 :
33141: LD_ADDR_VAR 0 5
33145: PUSH
33146: LD_INT 41
33148: ST_TO_ADDR
33149: GO 33171
33151: LD_INT 3
33153: DOUBLE
33154: EQUAL
33155: IFTRUE 33159
33157: GO 33170
33159: POP
// tech := tech_bazooka ; end ;
33160: LD_ADDR_VAR 0 5
33164: PUSH
33165: LD_INT 44
33167: ST_TO_ADDR
33168: GO 33171
33170: POP
// if Researched ( side , tech ) then
33171: LD_VAR 0 3
33175: PPUSH
33176: LD_VAR 0 5
33180: PPUSH
33181: CALL_OW 325
33185: IFFALSE 33212
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_INT 5
33194: PUSH
33195: LD_INT 8
33197: PUSH
33198: LD_INT 9
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: PUSH
33206: LD_VAR 0 4
33210: ARRAY
33211: ST_TO_ADDR
// end ;
33212: LD_VAR 0 2
33216: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33217: LD_INT 0
33219: PPUSH
33220: PPUSH
33221: PPUSH
// if not mines then
33222: LD_VAR 0 2
33226: NOT
33227: IFFALSE 33231
// exit ;
33229: GO 33375
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_INT 81
33238: PUSH
33239: LD_VAR 0 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 21
33253: PUSH
33254: LD_INT 3
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PPUSH
33269: CALL_OW 69
33273: ST_TO_ADDR
// for i in mines do
33274: LD_ADDR_VAR 0 4
33278: PUSH
33279: LD_VAR 0 2
33283: PUSH
33284: FOR_IN
33285: IFFALSE 33373
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33287: LD_VAR 0 4
33291: PUSH
33292: LD_INT 1
33294: ARRAY
33295: PPUSH
33296: LD_VAR 0 4
33300: PUSH
33301: LD_INT 2
33303: ARRAY
33304: PPUSH
33305: CALL_OW 458
33309: NOT
33310: IFFALSE 33314
// continue ;
33312: GO 33284
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33314: LD_VAR 0 4
33318: PUSH
33319: LD_INT 1
33321: ARRAY
33322: PPUSH
33323: LD_VAR 0 4
33327: PUSH
33328: LD_INT 2
33330: ARRAY
33331: PPUSH
33332: CALL_OW 428
33336: PUSH
33337: LD_VAR 0 5
33341: IN
33342: IFFALSE 33371
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33344: LD_VAR 0 4
33348: PUSH
33349: LD_INT 1
33351: ARRAY
33352: PPUSH
33353: LD_VAR 0 4
33357: PUSH
33358: LD_INT 2
33360: ARRAY
33361: PPUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: CALL_OW 456
// end ;
33371: GO 33284
33373: POP
33374: POP
// end ;
33375: LD_VAR 0 3
33379: RET
// export function Count ( array ) ; var i ; begin
33380: LD_INT 0
33382: PPUSH
33383: PPUSH
// result := 0 ;
33384: LD_ADDR_VAR 0 2
33388: PUSH
33389: LD_INT 0
33391: ST_TO_ADDR
// for i in array do
33392: LD_ADDR_VAR 0 3
33396: PUSH
33397: LD_VAR 0 1
33401: PUSH
33402: FOR_IN
33403: IFFALSE 33427
// if i then
33405: LD_VAR 0 3
33409: IFFALSE 33425
// result := result + 1 ;
33411: LD_ADDR_VAR 0 2
33415: PUSH
33416: LD_VAR 0 2
33420: PUSH
33421: LD_INT 1
33423: PLUS
33424: ST_TO_ADDR
33425: GO 33402
33427: POP
33428: POP
// end ;
33429: LD_VAR 0 2
33433: RET
// export function IsEmpty ( building ) ; begin
33434: LD_INT 0
33436: PPUSH
// if not building then
33437: LD_VAR 0 1
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33489
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33446: LD_ADDR_VAR 0 2
33450: PUSH
33451: LD_VAR 0 1
33455: PUSH
33456: LD_INT 22
33458: PUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 255
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 58
33475: PUSH
33476: EMPTY
33477: LIST
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PPUSH
33483: CALL_OW 69
33487: IN
33488: ST_TO_ADDR
// end ;
33489: LD_VAR 0 2
33493: RET
// export function IsNotFull ( building ) ; var places ; begin
33494: LD_INT 0
33496: PPUSH
33497: PPUSH
// if not building then
33498: LD_VAR 0 1
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33678
// result := false ;
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: LD_INT 0
33514: ST_TO_ADDR
// places := 0 ;
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_INT 0
33522: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 266
33532: PUSH
33533: LD_INT 0
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33595
33539: LD_INT 1
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33595
33545: LD_INT 6
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33595
33551: LD_INT 7
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33595
33557: LD_INT 8
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33595
33563: LD_INT 4
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33595
33569: LD_INT 5
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33595
33575: LD_INT 2
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33595
33581: LD_INT 3
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33595
33587: LD_INT 35
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33606
33595: POP
// places := 6 ; b_bunker , b_breastwork :
33596: LD_ADDR_VAR 0 3
33600: PUSH
33601: LD_INT 6
33603: ST_TO_ADDR
33604: GO 33651
33606: LD_INT 32
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33620
33612: LD_INT 31
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33631
33620: POP
// places := 1 ; b_control_tower :
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_INT 1
33628: ST_TO_ADDR
33629: GO 33651
33631: LD_INT 36
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33650
33639: POP
// places := 3 ; end ;
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 3
33647: ST_TO_ADDR
33648: GO 33651
33650: POP
// if places then
33651: LD_VAR 0 3
33655: IFFALSE 33678
// result := UnitsInside ( building ) < places ;
33657: LD_ADDR_VAR 0 2
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 313
33671: PUSH
33672: LD_VAR 0 3
33676: LESS
33677: ST_TO_ADDR
// end ;
33678: LD_VAR 0 2
33682: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33683: LD_INT 0
33685: PPUSH
33686: PPUSH
33687: PPUSH
33688: PPUSH
// tmp := [ ] ;
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: EMPTY
33695: ST_TO_ADDR
// list := [ ] ;
33696: LD_ADDR_VAR 0 5
33700: PUSH
33701: EMPTY
33702: ST_TO_ADDR
// for i = 16 to 25 do
33703: LD_ADDR_VAR 0 4
33707: PUSH
33708: DOUBLE
33709: LD_INT 16
33711: DEC
33712: ST_TO_ADDR
33713: LD_INT 25
33715: PUSH
33716: FOR_TO
33717: IFFALSE 33790
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_VAR 0 3
33728: PUSH
33729: LD_INT 22
33731: PUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL_OW 255
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 91
33748: PUSH
33749: LD_VAR 0 1
33753: PUSH
33754: LD_INT 6
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 30
33764: PUSH
33765: LD_VAR 0 4
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: PPUSH
33782: CALL_OW 69
33786: ADD
33787: ST_TO_ADDR
33788: GO 33716
33790: POP
33791: POP
// for i = 1 to tmp do
33792: LD_ADDR_VAR 0 4
33796: PUSH
33797: DOUBLE
33798: LD_INT 1
33800: DEC
33801: ST_TO_ADDR
33802: LD_VAR 0 3
33806: PUSH
33807: FOR_TO
33808: IFFALSE 33896
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33810: LD_ADDR_VAR 0 5
33814: PUSH
33815: LD_VAR 0 5
33819: PUSH
33820: LD_VAR 0 3
33824: PUSH
33825: LD_VAR 0 4
33829: ARRAY
33830: PPUSH
33831: CALL_OW 266
33835: PUSH
33836: LD_VAR 0 3
33840: PUSH
33841: LD_VAR 0 4
33845: ARRAY
33846: PPUSH
33847: CALL_OW 250
33851: PUSH
33852: LD_VAR 0 3
33856: PUSH
33857: LD_VAR 0 4
33861: ARRAY
33862: PPUSH
33863: CALL_OW 251
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 4
33877: ARRAY
33878: PPUSH
33879: CALL_OW 254
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: PUSH
33890: EMPTY
33891: LIST
33892: ADD
33893: ST_TO_ADDR
33894: GO 33807
33896: POP
33897: POP
// result := list ;
33898: LD_ADDR_VAR 0 2
33902: PUSH
33903: LD_VAR 0 5
33907: ST_TO_ADDR
// end ;
33908: LD_VAR 0 2
33912: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33913: LD_INT 0
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
// if not factory then
33922: LD_VAR 0 1
33926: NOT
33927: IFFALSE 33931
// exit ;
33929: GO 34524
// if control = control_apeman then
33931: LD_VAR 0 4
33935: PUSH
33936: LD_INT 5
33938: EQUAL
33939: IFFALSE 34048
// begin tmp := UnitsInside ( factory ) ;
33941: LD_ADDR_VAR 0 8
33945: PUSH
33946: LD_VAR 0 1
33950: PPUSH
33951: CALL_OW 313
33955: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33956: LD_VAR 0 8
33960: PPUSH
33961: LD_INT 25
33963: PUSH
33964: LD_INT 12
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PPUSH
33971: CALL_OW 72
33975: NOT
33976: IFFALSE 33986
// control := control_manual ;
33978: LD_ADDR_VAR 0 4
33982: PUSH
33983: LD_INT 1
33985: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL 33683 0 1
34000: ST_TO_ADDR
// if tmp then
34001: LD_VAR 0 8
34005: IFFALSE 34048
// begin for i in tmp do
34007: LD_ADDR_VAR 0 7
34011: PUSH
34012: LD_VAR 0 8
34016: PUSH
34017: FOR_IN
34018: IFFALSE 34046
// if i [ 1 ] = b_ext_radio then
34020: LD_VAR 0 7
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PUSH
34029: LD_INT 22
34031: EQUAL
34032: IFFALSE 34044
// begin control := control_remote ;
34034: LD_ADDR_VAR 0 4
34038: PUSH
34039: LD_INT 2
34041: ST_TO_ADDR
// break ;
34042: GO 34046
// end ;
34044: GO 34017
34046: POP
34047: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34048: LD_VAR 0 1
34052: PPUSH
34053: LD_VAR 0 2
34057: PPUSH
34058: LD_VAR 0 3
34062: PPUSH
34063: LD_VAR 0 4
34067: PPUSH
34068: LD_VAR 0 5
34072: PPUSH
34073: CALL_OW 448
34077: IFFALSE 34112
// begin result := [ chassis , engine , control , weapon ] ;
34079: LD_ADDR_VAR 0 6
34083: PUSH
34084: LD_VAR 0 2
34088: PUSH
34089: LD_VAR 0 3
34093: PUSH
34094: LD_VAR 0 4
34098: PUSH
34099: LD_VAR 0 5
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// exit ;
34110: GO 34524
// end ; _chassis := AvailableChassisList ( factory ) ;
34112: LD_ADDR_VAR 0 9
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 475
34126: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34127: LD_ADDR_VAR 0 11
34131: PUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 476
34141: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34142: LD_ADDR_VAR 0 12
34146: PUSH
34147: LD_VAR 0 1
34151: PPUSH
34152: CALL_OW 477
34156: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34157: LD_ADDR_VAR 0 10
34161: PUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 478
34171: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34172: LD_VAR 0 9
34176: NOT
34177: PUSH
34178: LD_VAR 0 11
34182: NOT
34183: OR
34184: PUSH
34185: LD_VAR 0 12
34189: NOT
34190: OR
34191: PUSH
34192: LD_VAR 0 10
34196: NOT
34197: OR
34198: IFFALSE 34233
// begin result := [ chassis , engine , control , weapon ] ;
34200: LD_ADDR_VAR 0 6
34204: PUSH
34205: LD_VAR 0 2
34209: PUSH
34210: LD_VAR 0 3
34214: PUSH
34215: LD_VAR 0 4
34219: PUSH
34220: LD_VAR 0 5
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// exit ;
34231: GO 34524
// end ; if not chassis in _chassis then
34233: LD_VAR 0 2
34237: PUSH
34238: LD_VAR 0 9
34242: IN
34243: NOT
34244: IFFALSE 34270
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34246: LD_ADDR_VAR 0 2
34250: PUSH
34251: LD_VAR 0 9
34255: PUSH
34256: LD_INT 1
34258: PPUSH
34259: LD_VAR 0 9
34263: PPUSH
34264: CALL_OW 12
34268: ARRAY
34269: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34270: LD_VAR 0 2
34274: PPUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: CALL 34529 0 2
34284: NOT
34285: IFFALSE 34344
// repeat engine := _engine [ 1 ] ;
34287: LD_ADDR_VAR 0 3
34291: PUSH
34292: LD_VAR 0 11
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34301: LD_ADDR_VAR 0 11
34305: PUSH
34306: LD_VAR 0 11
34310: PPUSH
34311: LD_INT 1
34313: PPUSH
34314: CALL_OW 3
34318: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34319: LD_VAR 0 2
34323: PPUSH
34324: LD_VAR 0 3
34328: PPUSH
34329: CALL 34529 0 2
34333: PUSH
34334: LD_VAR 0 11
34338: PUSH
34339: EMPTY
34340: EQUAL
34341: OR
34342: IFFALSE 34287
// if not control in _control then
34344: LD_VAR 0 4
34348: PUSH
34349: LD_VAR 0 12
34353: IN
34354: NOT
34355: IFFALSE 34381
// control := _control [ rand ( 1 , _control ) ] ;
34357: LD_ADDR_VAR 0 4
34361: PUSH
34362: LD_VAR 0 12
34366: PUSH
34367: LD_INT 1
34369: PPUSH
34370: LD_VAR 0 12
34374: PPUSH
34375: CALL_OW 12
34379: ARRAY
34380: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34381: LD_VAR 0 2
34385: PPUSH
34386: LD_VAR 0 5
34390: PPUSH
34391: CALL 34749 0 2
34395: NOT
34396: IFFALSE 34455
// repeat weapon := _weapon [ 1 ] ;
34398: LD_ADDR_VAR 0 5
34402: PUSH
34403: LD_VAR 0 10
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34412: LD_ADDR_VAR 0 10
34416: PUSH
34417: LD_VAR 0 10
34421: PPUSH
34422: LD_INT 1
34424: PPUSH
34425: CALL_OW 3
34429: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_VAR 0 5
34439: PPUSH
34440: CALL 34749 0 2
34444: PUSH
34445: LD_VAR 0 10
34449: PUSH
34450: EMPTY
34451: EQUAL
34452: OR
34453: IFFALSE 34398
// result := [ ] ;
34455: LD_ADDR_VAR 0 6
34459: PUSH
34460: EMPTY
34461: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34462: LD_VAR 0 1
34466: PPUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: LD_VAR 0 3
34476: PPUSH
34477: LD_VAR 0 4
34481: PPUSH
34482: LD_VAR 0 5
34486: PPUSH
34487: CALL_OW 448
34491: IFFALSE 34524
// result := [ chassis , engine , control , weapon ] ;
34493: LD_ADDR_VAR 0 6
34497: PUSH
34498: LD_VAR 0 2
34502: PUSH
34503: LD_VAR 0 3
34507: PUSH
34508: LD_VAR 0 4
34512: PUSH
34513: LD_VAR 0 5
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// end ;
34524: LD_VAR 0 6
34528: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34529: LD_INT 0
34531: PPUSH
// if not chassis or not engine then
34532: LD_VAR 0 1
34536: NOT
34537: PUSH
34538: LD_VAR 0 2
34542: NOT
34543: OR
34544: IFFALSE 34548
// exit ;
34546: GO 34744
// case engine of engine_solar :
34548: LD_VAR 0 2
34552: PUSH
34553: LD_INT 2
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34561
34559: GO 34599
34561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_INT 11
34569: PUSH
34570: LD_INT 12
34572: PUSH
34573: LD_INT 13
34575: PUSH
34576: LD_INT 14
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
34597: GO 34728
34599: LD_INT 1
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34607
34605: GO 34669
34607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34608: LD_ADDR_VAR 0 3
34612: PUSH
34613: LD_INT 11
34615: PUSH
34616: LD_INT 12
34618: PUSH
34619: LD_INT 13
34621: PUSH
34622: LD_INT 14
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 5
34639: PUSH
34640: LD_INT 21
34642: PUSH
34643: LD_INT 23
34645: PUSH
34646: LD_INT 22
34648: PUSH
34649: LD_INT 24
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
34667: GO 34728
34669: LD_INT 3
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34727
34677: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34678: LD_ADDR_VAR 0 3
34682: PUSH
34683: LD_INT 13
34685: PUSH
34686: LD_INT 14
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 21
34703: PUSH
34704: LD_INT 22
34706: PUSH
34707: LD_INT 23
34709: PUSH
34710: LD_INT 24
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
34725: GO 34728
34727: POP
// result := ( chassis in result ) ;
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_VAR 0 1
34737: PUSH
34738: LD_VAR 0 3
34742: IN
34743: ST_TO_ADDR
// end ;
34744: LD_VAR 0 3
34748: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34749: LD_INT 0
34751: PPUSH
// if not chassis or not weapon then
34752: LD_VAR 0 1
34756: NOT
34757: PUSH
34758: LD_VAR 0 2
34762: NOT
34763: OR
34764: IFFALSE 34768
// exit ;
34766: GO 35828
// case weapon of us_machine_gun :
34768: LD_VAR 0 2
34772: PUSH
34773: LD_INT 2
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34811
34781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
34809: GO 35812
34811: LD_INT 3
34813: DOUBLE
34814: EQUAL
34815: IFTRUE 34819
34817: GO 34849
34819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
34847: GO 35812
34849: LD_INT 11
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34887
34857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 4
34874: PUSH
34875: LD_INT 5
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: ST_TO_ADDR
34885: GO 35812
34887: LD_INT 4
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34921
34895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: ST_TO_ADDR
34919: GO 35812
34921: LD_INT 5
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34929
34927: GO 34955
34929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 5
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
34953: GO 35812
34955: LD_INT 9
34957: DOUBLE
34958: EQUAL
34959: IFTRUE 34963
34961: GO 34989
34963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
34987: GO 35812
34989: LD_INT 7
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35023
34997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
35021: GO 35812
35023: LD_INT 12
35025: DOUBLE
35026: EQUAL
35027: IFTRUE 35031
35029: GO 35057
35031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35032: LD_ADDR_VAR 0 3
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 4
35045: PUSH
35046: LD_INT 5
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
35055: GO 35812
35057: LD_INT 13
35059: DOUBLE
35060: EQUAL
35061: IFTRUE 35065
35063: GO 35091
35065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35066: LD_ADDR_VAR 0 3
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: LD_INT 4
35079: PUSH
35080: LD_INT 5
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: ST_TO_ADDR
35089: GO 35812
35091: LD_INT 14
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35117
35099: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: LD_INT 4
35107: PUSH
35108: LD_INT 5
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: ST_TO_ADDR
35115: GO 35812
35117: LD_INT 6
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 35143
35125: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35126: LD_ADDR_VAR 0 3
35130: PUSH
35131: LD_INT 4
35133: PUSH
35134: LD_INT 5
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: ST_TO_ADDR
35141: GO 35812
35143: LD_INT 10
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35151
35149: GO 35169
35151: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_INT 4
35159: PUSH
35160: LD_INT 5
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: ST_TO_ADDR
35167: GO 35812
35169: LD_INT 22
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35177
35175: GO 35203
35177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35178: LD_ADDR_VAR 0 3
35182: PUSH
35183: LD_INT 11
35185: PUSH
35186: LD_INT 12
35188: PUSH
35189: LD_INT 13
35191: PUSH
35192: LD_INT 14
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: ST_TO_ADDR
35201: GO 35812
35203: LD_INT 23
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35237
35211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35212: LD_ADDR_VAR 0 3
35216: PUSH
35217: LD_INT 11
35219: PUSH
35220: LD_INT 12
35222: PUSH
35223: LD_INT 13
35225: PUSH
35226: LD_INT 14
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
35235: GO 35812
35237: LD_INT 24
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35245
35243: GO 35271
35245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 11
35253: PUSH
35254: LD_INT 12
35256: PUSH
35257: LD_INT 13
35259: PUSH
35260: LD_INT 14
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
35269: GO 35812
35271: LD_INT 30
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35305
35279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_INT 11
35287: PUSH
35288: LD_INT 12
35290: PUSH
35291: LD_INT 13
35293: PUSH
35294: LD_INT 14
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
35303: GO 35812
35305: LD_INT 25
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35331
35313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_INT 13
35321: PUSH
35322: LD_INT 14
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: ST_TO_ADDR
35329: GO 35812
35331: LD_INT 27
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35339
35337: GO 35357
35339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35340: LD_ADDR_VAR 0 3
35344: PUSH
35345: LD_INT 13
35347: PUSH
35348: LD_INT 14
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: ST_TO_ADDR
35355: GO 35812
35357: LD_INT 92
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35391
35365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: LD_INT 11
35373: PUSH
35374: LD_INT 12
35376: PUSH
35377: LD_INT 13
35379: PUSH
35380: LD_INT 14
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
35389: GO 35812
35391: LD_INT 28
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35417
35399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 13
35407: PUSH
35408: LD_INT 14
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: ST_TO_ADDR
35415: GO 35812
35417: LD_INT 29
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35443
35425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_INT 13
35433: PUSH
35434: LD_INT 14
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: ST_TO_ADDR
35441: GO 35812
35443: LD_INT 31
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 35469
35451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35452: LD_ADDR_VAR 0 3
35456: PUSH
35457: LD_INT 13
35459: PUSH
35460: LD_INT 14
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: ST_TO_ADDR
35467: GO 35812
35469: LD_INT 26
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35495
35477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 13
35485: PUSH
35486: LD_INT 14
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: ST_TO_ADDR
35493: GO 35812
35495: LD_INT 42
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35529
35503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35504: LD_ADDR_VAR 0 3
35508: PUSH
35509: LD_INT 21
35511: PUSH
35512: LD_INT 22
35514: PUSH
35515: LD_INT 23
35517: PUSH
35518: LD_INT 24
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
35527: GO 35812
35529: LD_INT 43
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35563
35537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 21
35545: PUSH
35546: LD_INT 22
35548: PUSH
35549: LD_INT 23
35551: PUSH
35552: LD_INT 24
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
35561: GO 35812
35563: LD_INT 44
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35597
35571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_INT 21
35579: PUSH
35580: LD_INT 22
35582: PUSH
35583: LD_INT 23
35585: PUSH
35586: LD_INT 24
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: ST_TO_ADDR
35595: GO 35812
35597: LD_INT 45
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35605
35603: GO 35631
35605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35606: LD_ADDR_VAR 0 3
35610: PUSH
35611: LD_INT 21
35613: PUSH
35614: LD_INT 22
35616: PUSH
35617: LD_INT 23
35619: PUSH
35620: LD_INT 24
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: ST_TO_ADDR
35629: GO 35812
35631: LD_INT 49
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35665
35639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35640: LD_ADDR_VAR 0 3
35644: PUSH
35645: LD_INT 21
35647: PUSH
35648: LD_INT 22
35650: PUSH
35651: LD_INT 23
35653: PUSH
35654: LD_INT 24
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
35663: GO 35812
35665: LD_INT 51
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35699
35673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 21
35681: PUSH
35682: LD_INT 22
35684: PUSH
35685: LD_INT 23
35687: PUSH
35688: LD_INT 24
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
35697: GO 35812
35699: LD_INT 52
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35733
35707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 21
35715: PUSH
35716: LD_INT 22
35718: PUSH
35719: LD_INT 23
35721: PUSH
35722: LD_INT 24
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
35731: GO 35812
35733: LD_INT 53
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35759
35741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 23
35749: PUSH
35750: LD_INT 24
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: ST_TO_ADDR
35757: GO 35812
35759: LD_INT 46
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35767
35765: GO 35785
35767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: LD_INT 23
35775: PUSH
35776: LD_INT 24
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: ST_TO_ADDR
35783: GO 35812
35785: LD_INT 47
35787: DOUBLE
35788: EQUAL
35789: IFTRUE 35793
35791: GO 35811
35793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_INT 23
35801: PUSH
35802: LD_INT 24
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: ST_TO_ADDR
35809: GO 35812
35811: POP
// result := ( chassis in result ) ;
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_VAR 0 1
35821: PUSH
35822: LD_VAR 0 3
35826: IN
35827: ST_TO_ADDR
// end ;
35828: LD_VAR 0 3
35832: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35833: LD_INT 0
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
// result := array ;
35842: LD_ADDR_VAR 0 5
35846: PUSH
35847: LD_VAR 0 1
35851: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35852: LD_VAR 0 1
35856: NOT
35857: PUSH
35858: LD_VAR 0 2
35862: NOT
35863: OR
35864: PUSH
35865: LD_VAR 0 3
35869: NOT
35870: OR
35871: PUSH
35872: LD_VAR 0 2
35876: PUSH
35877: LD_VAR 0 1
35881: GREATER
35882: OR
35883: PUSH
35884: LD_VAR 0 3
35888: PUSH
35889: LD_VAR 0 1
35893: GREATER
35894: OR
35895: IFFALSE 35899
// exit ;
35897: GO 36195
// if direction then
35899: LD_VAR 0 4
35903: IFFALSE 35967
// begin d := 1 ;
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_INT 1
35912: ST_TO_ADDR
// if i_from > i_to then
35913: LD_VAR 0 2
35917: PUSH
35918: LD_VAR 0 3
35922: GREATER
35923: IFFALSE 35949
// length := ( array - i_from ) + i_to else
35925: LD_ADDR_VAR 0 11
35929: PUSH
35930: LD_VAR 0 1
35934: PUSH
35935: LD_VAR 0 2
35939: MINUS
35940: PUSH
35941: LD_VAR 0 3
35945: PLUS
35946: ST_TO_ADDR
35947: GO 35965
// length := i_to - i_from ;
35949: LD_ADDR_VAR 0 11
35953: PUSH
35954: LD_VAR 0 3
35958: PUSH
35959: LD_VAR 0 2
35963: MINUS
35964: ST_TO_ADDR
// end else
35965: GO 36028
// begin d := - 1 ;
35967: LD_ADDR_VAR 0 9
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: ST_TO_ADDR
// if i_from > i_to then
35976: LD_VAR 0 2
35980: PUSH
35981: LD_VAR 0 3
35985: GREATER
35986: IFFALSE 36006
// length := i_from - i_to else
35988: LD_ADDR_VAR 0 11
35992: PUSH
35993: LD_VAR 0 2
35997: PUSH
35998: LD_VAR 0 3
36002: MINUS
36003: ST_TO_ADDR
36004: GO 36028
// length := ( array - i_to ) + i_from ;
36006: LD_ADDR_VAR 0 11
36010: PUSH
36011: LD_VAR 0 1
36015: PUSH
36016: LD_VAR 0 3
36020: MINUS
36021: PUSH
36022: LD_VAR 0 2
36026: PLUS
36027: ST_TO_ADDR
// end ; if not length then
36028: LD_VAR 0 11
36032: NOT
36033: IFFALSE 36037
// exit ;
36035: GO 36195
// tmp := array ;
36037: LD_ADDR_VAR 0 10
36041: PUSH
36042: LD_VAR 0 1
36046: ST_TO_ADDR
// for i = 1 to length do
36047: LD_ADDR_VAR 0 6
36051: PUSH
36052: DOUBLE
36053: LD_INT 1
36055: DEC
36056: ST_TO_ADDR
36057: LD_VAR 0 11
36061: PUSH
36062: FOR_TO
36063: IFFALSE 36183
// begin for j = 1 to array do
36065: LD_ADDR_VAR 0 7
36069: PUSH
36070: DOUBLE
36071: LD_INT 1
36073: DEC
36074: ST_TO_ADDR
36075: LD_VAR 0 1
36079: PUSH
36080: FOR_TO
36081: IFFALSE 36169
// begin k := j + d ;
36083: LD_ADDR_VAR 0 8
36087: PUSH
36088: LD_VAR 0 7
36092: PUSH
36093: LD_VAR 0 9
36097: PLUS
36098: ST_TO_ADDR
// if k > array then
36099: LD_VAR 0 8
36103: PUSH
36104: LD_VAR 0 1
36108: GREATER
36109: IFFALSE 36119
// k := 1 ;
36111: LD_ADDR_VAR 0 8
36115: PUSH
36116: LD_INT 1
36118: ST_TO_ADDR
// if not k then
36119: LD_VAR 0 8
36123: NOT
36124: IFFALSE 36136
// k := array ;
36126: LD_ADDR_VAR 0 8
36130: PUSH
36131: LD_VAR 0 1
36135: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36136: LD_ADDR_VAR 0 10
36140: PUSH
36141: LD_VAR 0 10
36145: PPUSH
36146: LD_VAR 0 8
36150: PPUSH
36151: LD_VAR 0 1
36155: PUSH
36156: LD_VAR 0 7
36160: ARRAY
36161: PPUSH
36162: CALL_OW 1
36166: ST_TO_ADDR
// end ;
36167: GO 36080
36169: POP
36170: POP
// array := tmp ;
36171: LD_ADDR_VAR 0 1
36175: PUSH
36176: LD_VAR 0 10
36180: ST_TO_ADDR
// end ;
36181: GO 36062
36183: POP
36184: POP
// result := array ;
36185: LD_ADDR_VAR 0 5
36189: PUSH
36190: LD_VAR 0 1
36194: ST_TO_ADDR
// end ;
36195: LD_VAR 0 5
36199: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36200: LD_INT 0
36202: PPUSH
36203: PPUSH
// result := 0 ;
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 0
36211: ST_TO_ADDR
// if not array or not value in array then
36212: LD_VAR 0 1
36216: NOT
36217: PUSH
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 1
36227: IN
36228: NOT
36229: OR
36230: IFFALSE 36234
// exit ;
36232: GO 36288
// for i = 1 to array do
36234: LD_ADDR_VAR 0 4
36238: PUSH
36239: DOUBLE
36240: LD_INT 1
36242: DEC
36243: ST_TO_ADDR
36244: LD_VAR 0 1
36248: PUSH
36249: FOR_TO
36250: IFFALSE 36286
// if value = array [ i ] then
36252: LD_VAR 0 2
36256: PUSH
36257: LD_VAR 0 1
36261: PUSH
36262: LD_VAR 0 4
36266: ARRAY
36267: EQUAL
36268: IFFALSE 36284
// begin result := i ;
36270: LD_ADDR_VAR 0 3
36274: PUSH
36275: LD_VAR 0 4
36279: ST_TO_ADDR
// exit ;
36280: POP
36281: POP
36282: GO 36288
// end ;
36284: GO 36249
36286: POP
36287: POP
// end ;
36288: LD_VAR 0 3
36292: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36293: LD_INT 0
36295: PPUSH
// vc_chassis := chassis ;
36296: LD_ADDR_OWVAR 37
36300: PUSH
36301: LD_VAR 0 1
36305: ST_TO_ADDR
// vc_engine := engine ;
36306: LD_ADDR_OWVAR 39
36310: PUSH
36311: LD_VAR 0 2
36315: ST_TO_ADDR
// vc_control := control ;
36316: LD_ADDR_OWVAR 38
36320: PUSH
36321: LD_VAR 0 3
36325: ST_TO_ADDR
// vc_weapon := weapon ;
36326: LD_ADDR_OWVAR 40
36330: PUSH
36331: LD_VAR 0 4
36335: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36336: LD_ADDR_OWVAR 41
36340: PUSH
36341: LD_VAR 0 5
36345: ST_TO_ADDR
// end ;
36346: LD_VAR 0 6
36350: RET
// export function WantPlant ( unit ) ; var task ; begin
36351: LD_INT 0
36353: PPUSH
36354: PPUSH
// result := false ;
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: LD_INT 0
36362: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36363: LD_ADDR_VAR 0 3
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 437
36377: ST_TO_ADDR
// if task then
36378: LD_VAR 0 3
36382: IFFALSE 36410
// if task [ 1 ] [ 1 ] = p then
36384: LD_VAR 0 3
36388: PUSH
36389: LD_INT 1
36391: ARRAY
36392: PUSH
36393: LD_INT 1
36395: ARRAY
36396: PUSH
36397: LD_STRING p
36399: EQUAL
36400: IFFALSE 36410
// result := true ;
36402: LD_ADDR_VAR 0 2
36406: PUSH
36407: LD_INT 1
36409: ST_TO_ADDR
// end ;
36410: LD_VAR 0 2
36414: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36415: LD_INT 0
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
// if pos < 1 then
36421: LD_VAR 0 2
36425: PUSH
36426: LD_INT 1
36428: LESS
36429: IFFALSE 36433
// exit ;
36431: GO 36736
// if pos = 1 then
36433: LD_VAR 0 2
36437: PUSH
36438: LD_INT 1
36440: EQUAL
36441: IFFALSE 36474
// result := Replace ( arr , pos [ 1 ] , value ) else
36443: LD_ADDR_VAR 0 4
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PPUSH
36462: LD_VAR 0 3
36466: PPUSH
36467: CALL_OW 1
36471: ST_TO_ADDR
36472: GO 36736
// begin tmp := arr ;
36474: LD_ADDR_VAR 0 6
36478: PUSH
36479: LD_VAR 0 1
36483: ST_TO_ADDR
// s_arr := [ tmp ] ;
36484: LD_ADDR_VAR 0 7
36488: PUSH
36489: LD_VAR 0 6
36493: PUSH
36494: EMPTY
36495: LIST
36496: ST_TO_ADDR
// for i = 1 to pos - 1 do
36497: LD_ADDR_VAR 0 5
36501: PUSH
36502: DOUBLE
36503: LD_INT 1
36505: DEC
36506: ST_TO_ADDR
36507: LD_VAR 0 2
36511: PUSH
36512: LD_INT 1
36514: MINUS
36515: PUSH
36516: FOR_TO
36517: IFFALSE 36562
// begin tmp := tmp [ pos [ i ] ] ;
36519: LD_ADDR_VAR 0 6
36523: PUSH
36524: LD_VAR 0 6
36528: PUSH
36529: LD_VAR 0 2
36533: PUSH
36534: LD_VAR 0 5
36538: ARRAY
36539: ARRAY
36540: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36541: LD_ADDR_VAR 0 7
36545: PUSH
36546: LD_VAR 0 7
36550: PUSH
36551: LD_VAR 0 6
36555: PUSH
36556: EMPTY
36557: LIST
36558: ADD
36559: ST_TO_ADDR
// end ;
36560: GO 36516
36562: POP
36563: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36564: LD_ADDR_VAR 0 6
36568: PUSH
36569: LD_VAR 0 6
36573: PPUSH
36574: LD_VAR 0 2
36578: PUSH
36579: LD_VAR 0 2
36583: ARRAY
36584: PPUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: CALL_OW 1
36594: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36595: LD_ADDR_VAR 0 7
36599: PUSH
36600: LD_VAR 0 7
36604: PPUSH
36605: LD_VAR 0 7
36609: PPUSH
36610: LD_VAR 0 6
36614: PPUSH
36615: CALL_OW 1
36619: ST_TO_ADDR
// for i = s_arr downto 2 do
36620: LD_ADDR_VAR 0 5
36624: PUSH
36625: DOUBLE
36626: LD_VAR 0 7
36630: INC
36631: ST_TO_ADDR
36632: LD_INT 2
36634: PUSH
36635: FOR_DOWNTO
36636: IFFALSE 36720
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36638: LD_ADDR_VAR 0 6
36642: PUSH
36643: LD_VAR 0 7
36647: PUSH
36648: LD_VAR 0 5
36652: PUSH
36653: LD_INT 1
36655: MINUS
36656: ARRAY
36657: PPUSH
36658: LD_VAR 0 2
36662: PUSH
36663: LD_VAR 0 5
36667: PUSH
36668: LD_INT 1
36670: MINUS
36671: ARRAY
36672: PPUSH
36673: LD_VAR 0 7
36677: PUSH
36678: LD_VAR 0 5
36682: ARRAY
36683: PPUSH
36684: CALL_OW 1
36688: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36689: LD_ADDR_VAR 0 7
36693: PUSH
36694: LD_VAR 0 7
36698: PPUSH
36699: LD_VAR 0 5
36703: PUSH
36704: LD_INT 1
36706: MINUS
36707: PPUSH
36708: LD_VAR 0 6
36712: PPUSH
36713: CALL_OW 1
36717: ST_TO_ADDR
// end ;
36718: GO 36635
36720: POP
36721: POP
// result := s_arr [ 1 ] ;
36722: LD_ADDR_VAR 0 4
36726: PUSH
36727: LD_VAR 0 7
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: ST_TO_ADDR
// end ; end ;
36736: LD_VAR 0 4
36740: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36741: LD_INT 0
36743: PPUSH
36744: PPUSH
// if not list then
36745: LD_VAR 0 1
36749: NOT
36750: IFFALSE 36754
// exit ;
36752: GO 36845
// i := list [ pos1 ] ;
36754: LD_ADDR_VAR 0 5
36758: PUSH
36759: LD_VAR 0 1
36763: PUSH
36764: LD_VAR 0 2
36768: ARRAY
36769: ST_TO_ADDR
// if not i then
36770: LD_VAR 0 5
36774: NOT
36775: IFFALSE 36779
// exit ;
36777: GO 36845
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36779: LD_ADDR_VAR 0 1
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: LD_VAR 0 2
36793: PPUSH
36794: LD_VAR 0 1
36798: PUSH
36799: LD_VAR 0 3
36803: ARRAY
36804: PPUSH
36805: CALL_OW 1
36809: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36810: LD_ADDR_VAR 0 1
36814: PUSH
36815: LD_VAR 0 1
36819: PPUSH
36820: LD_VAR 0 3
36824: PPUSH
36825: LD_VAR 0 5
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// result := list ;
36835: LD_ADDR_VAR 0 4
36839: PUSH
36840: LD_VAR 0 1
36844: ST_TO_ADDR
// end ;
36845: LD_VAR 0 4
36849: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36850: LD_INT 0
36852: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36853: LD_ADDR_VAR 0 5
36857: PUSH
36858: LD_VAR 0 1
36862: PPUSH
36863: CALL_OW 250
36867: PPUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 251
36877: PPUSH
36878: LD_VAR 0 2
36882: PPUSH
36883: LD_VAR 0 3
36887: PPUSH
36888: LD_VAR 0 4
36892: PPUSH
36893: CALL 36903 0 5
36897: ST_TO_ADDR
// end ;
36898: LD_VAR 0 5
36902: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36903: LD_INT 0
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
// if not list then
36909: LD_VAR 0 3
36913: NOT
36914: IFFALSE 36918
// exit ;
36916: GO 37306
// result := [ ] ;
36918: LD_ADDR_VAR 0 6
36922: PUSH
36923: EMPTY
36924: ST_TO_ADDR
// for i in list do
36925: LD_ADDR_VAR 0 7
36929: PUSH
36930: LD_VAR 0 3
36934: PUSH
36935: FOR_IN
36936: IFFALSE 37138
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36938: LD_ADDR_VAR 0 9
36942: PUSH
36943: LD_VAR 0 7
36947: PPUSH
36948: LD_VAR 0 1
36952: PPUSH
36953: LD_VAR 0 2
36957: PPUSH
36958: CALL_OW 297
36962: ST_TO_ADDR
// if not result then
36963: LD_VAR 0 6
36967: NOT
36968: IFFALSE 36994
// result := [ [ i , tmp ] ] else
36970: LD_ADDR_VAR 0 6
36974: PUSH
36975: LD_VAR 0 7
36979: PUSH
36980: LD_VAR 0 9
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: ST_TO_ADDR
36992: GO 37136
// begin if result [ result ] [ 2 ] < tmp then
36994: LD_VAR 0 6
36998: PUSH
36999: LD_VAR 0 6
37003: ARRAY
37004: PUSH
37005: LD_INT 2
37007: ARRAY
37008: PUSH
37009: LD_VAR 0 9
37013: LESS
37014: IFFALSE 37056
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37016: LD_ADDR_VAR 0 6
37020: PUSH
37021: LD_VAR 0 6
37025: PPUSH
37026: LD_VAR 0 6
37030: PUSH
37031: LD_INT 1
37033: PLUS
37034: PPUSH
37035: LD_VAR 0 7
37039: PUSH
37040: LD_VAR 0 9
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PPUSH
37049: CALL_OW 2
37053: ST_TO_ADDR
37054: GO 37136
// for j = 1 to result do
37056: LD_ADDR_VAR 0 8
37060: PUSH
37061: DOUBLE
37062: LD_INT 1
37064: DEC
37065: ST_TO_ADDR
37066: LD_VAR 0 6
37070: PUSH
37071: FOR_TO
37072: IFFALSE 37134
// begin if tmp < result [ j ] [ 2 ] then
37074: LD_VAR 0 9
37078: PUSH
37079: LD_VAR 0 6
37083: PUSH
37084: LD_VAR 0 8
37088: ARRAY
37089: PUSH
37090: LD_INT 2
37092: ARRAY
37093: LESS
37094: IFFALSE 37132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37096: LD_ADDR_VAR 0 6
37100: PUSH
37101: LD_VAR 0 6
37105: PPUSH
37106: LD_VAR 0 8
37110: PPUSH
37111: LD_VAR 0 7
37115: PUSH
37116: LD_VAR 0 9
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PPUSH
37125: CALL_OW 2
37129: ST_TO_ADDR
// break ;
37130: GO 37134
// end ; end ;
37132: GO 37071
37134: POP
37135: POP
// end ; end ;
37136: GO 36935
37138: POP
37139: POP
// if result and not asc then
37140: LD_VAR 0 6
37144: PUSH
37145: LD_VAR 0 4
37149: NOT
37150: AND
37151: IFFALSE 37226
// begin tmp := result ;
37153: LD_ADDR_VAR 0 9
37157: PUSH
37158: LD_VAR 0 6
37162: ST_TO_ADDR
// for i = tmp downto 1 do
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: DOUBLE
37169: LD_VAR 0 9
37173: INC
37174: ST_TO_ADDR
37175: LD_INT 1
37177: PUSH
37178: FOR_DOWNTO
37179: IFFALSE 37224
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37181: LD_ADDR_VAR 0 6
37185: PUSH
37186: LD_VAR 0 6
37190: PPUSH
37191: LD_VAR 0 9
37195: PUSH
37196: LD_VAR 0 7
37200: MINUS
37201: PUSH
37202: LD_INT 1
37204: PLUS
37205: PPUSH
37206: LD_VAR 0 9
37210: PUSH
37211: LD_VAR 0 7
37215: ARRAY
37216: PPUSH
37217: CALL_OW 1
37221: ST_TO_ADDR
37222: GO 37178
37224: POP
37225: POP
// end ; tmp := [ ] ;
37226: LD_ADDR_VAR 0 9
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// if mode then
37233: LD_VAR 0 5
37237: IFFALSE 37306
// begin for i = 1 to result do
37239: LD_ADDR_VAR 0 7
37243: PUSH
37244: DOUBLE
37245: LD_INT 1
37247: DEC
37248: ST_TO_ADDR
37249: LD_VAR 0 6
37253: PUSH
37254: FOR_TO
37255: IFFALSE 37294
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37257: LD_ADDR_VAR 0 9
37261: PUSH
37262: LD_VAR 0 9
37266: PPUSH
37267: LD_VAR 0 7
37271: PPUSH
37272: LD_VAR 0 6
37276: PUSH
37277: LD_VAR 0 7
37281: ARRAY
37282: PUSH
37283: LD_INT 1
37285: ARRAY
37286: PPUSH
37287: CALL_OW 1
37291: ST_TO_ADDR
37292: GO 37254
37294: POP
37295: POP
// result := tmp ;
37296: LD_ADDR_VAR 0 6
37300: PUSH
37301: LD_VAR 0 9
37305: ST_TO_ADDR
// end ; end ;
37306: LD_VAR 0 6
37310: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37311: LD_INT 0
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37319: LD_ADDR_VAR 0 5
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// if not x or not y then
37341: LD_VAR 0 2
37345: NOT
37346: PUSH
37347: LD_VAR 0 3
37351: NOT
37352: OR
37353: IFFALSE 37357
// exit ;
37355: GO 39007
// if not range then
37357: LD_VAR 0 4
37361: NOT
37362: IFFALSE 37372
// range := 10 ;
37364: LD_ADDR_VAR 0 4
37368: PUSH
37369: LD_INT 10
37371: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37372: LD_ADDR_VAR 0 8
37376: PUSH
37377: LD_INT 81
37379: PUSH
37380: LD_VAR 0 1
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 92
37391: PUSH
37392: LD_VAR 0 2
37396: PUSH
37397: LD_VAR 0 3
37401: PUSH
37402: LD_VAR 0 4
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: LD_INT 21
37418: PUSH
37419: LD_INT 3
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: PPUSH
37435: CALL_OW 69
37439: ST_TO_ADDR
// if not tmp then
37440: LD_VAR 0 8
37444: NOT
37445: IFFALSE 37449
// exit ;
37447: GO 39007
// for i in tmp do
37449: LD_ADDR_VAR 0 6
37453: PUSH
37454: LD_VAR 0 8
37458: PUSH
37459: FOR_IN
37460: IFFALSE 38982
// begin points := [ 0 , 0 , 0 ] ;
37462: LD_ADDR_VAR 0 9
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// bpoints := 1 ;
37481: LD_ADDR_VAR 0 10
37485: PUSH
37486: LD_INT 1
37488: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37489: LD_VAR 0 6
37493: PPUSH
37494: CALL_OW 247
37498: PUSH
37499: LD_INT 1
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 38085
37507: POP
// begin if GetClass ( i ) = 1 then
37508: LD_VAR 0 6
37512: PPUSH
37513: CALL_OW 257
37517: PUSH
37518: LD_INT 1
37520: EQUAL
37521: IFFALSE 37542
// points := [ 10 , 5 , 3 ] ;
37523: LD_ADDR_VAR 0 9
37527: PUSH
37528: LD_INT 10
37530: PUSH
37531: LD_INT 5
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37542: LD_VAR 0 6
37546: PPUSH
37547: CALL_OW 257
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: IN
37566: IFFALSE 37587
// points := [ 3 , 2 , 1 ] ;
37568: LD_ADDR_VAR 0 9
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37587: LD_VAR 0 6
37591: PPUSH
37592: CALL_OW 257
37596: PUSH
37597: LD_INT 5
37599: EQUAL
37600: IFFALSE 37621
// points := [ 130 , 5 , 2 ] ;
37602: LD_ADDR_VAR 0 9
37606: PUSH
37607: LD_INT 130
37609: PUSH
37610: LD_INT 5
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37621: LD_VAR 0 6
37625: PPUSH
37626: CALL_OW 257
37630: PUSH
37631: LD_INT 8
37633: EQUAL
37634: IFFALSE 37655
// points := [ 35 , 35 , 30 ] ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_INT 35
37643: PUSH
37644: LD_INT 35
37646: PUSH
37647: LD_INT 30
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 257
37664: PUSH
37665: LD_INT 9
37667: EQUAL
37668: IFFALSE 37689
// points := [ 20 , 55 , 40 ] ;
37670: LD_ADDR_VAR 0 9
37674: PUSH
37675: LD_INT 20
37677: PUSH
37678: LD_INT 55
37680: PUSH
37681: LD_INT 40
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37689: LD_VAR 0 6
37693: PPUSH
37694: CALL_OW 257
37698: PUSH
37699: LD_INT 12
37701: PUSH
37702: LD_INT 16
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: IN
37709: IFFALSE 37730
// points := [ 5 , 3 , 2 ] ;
37711: LD_ADDR_VAR 0 9
37715: PUSH
37716: LD_INT 5
37718: PUSH
37719: LD_INT 3
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37730: LD_VAR 0 6
37734: PPUSH
37735: CALL_OW 257
37739: PUSH
37740: LD_INT 17
37742: EQUAL
37743: IFFALSE 37764
// points := [ 100 , 50 , 75 ] ;
37745: LD_ADDR_VAR 0 9
37749: PUSH
37750: LD_INT 100
37752: PUSH
37753: LD_INT 50
37755: PUSH
37756: LD_INT 75
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37764: LD_VAR 0 6
37768: PPUSH
37769: CALL_OW 257
37773: PUSH
37774: LD_INT 15
37776: EQUAL
37777: IFFALSE 37798
// points := [ 10 , 5 , 3 ] ;
37779: LD_ADDR_VAR 0 9
37783: PUSH
37784: LD_INT 10
37786: PUSH
37787: LD_INT 5
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 257
37807: PUSH
37808: LD_INT 14
37810: EQUAL
37811: IFFALSE 37832
// points := [ 10 , 0 , 0 ] ;
37813: LD_ADDR_VAR 0 9
37817: PUSH
37818: LD_INT 10
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 257
37841: PUSH
37842: LD_INT 11
37844: EQUAL
37845: IFFALSE 37866
// points := [ 30 , 10 , 5 ] ;
37847: LD_ADDR_VAR 0 9
37851: PUSH
37852: LD_INT 30
37854: PUSH
37855: LD_INT 10
37857: PUSH
37858: LD_INT 5
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: LIST
37865: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_INT 5
37873: PPUSH
37874: CALL_OW 321
37878: PUSH
37879: LD_INT 2
37881: EQUAL
37882: IFFALSE 37899
// bpoints := bpoints * 1.8 ;
37884: LD_ADDR_VAR 0 10
37888: PUSH
37889: LD_VAR 0 10
37893: PUSH
37894: LD_REAL  1.80000000000000E+0000
37897: MUL
37898: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37899: LD_VAR 0 6
37903: PPUSH
37904: CALL_OW 257
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: LD_INT 4
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: IN
37927: PUSH
37928: LD_VAR 0 1
37932: PPUSH
37933: LD_INT 51
37935: PPUSH
37936: CALL_OW 321
37940: PUSH
37941: LD_INT 2
37943: EQUAL
37944: AND
37945: IFFALSE 37962
// bpoints := bpoints * 1.2 ;
37947: LD_ADDR_VAR 0 10
37951: PUSH
37952: LD_VAR 0 10
37956: PUSH
37957: LD_REAL  1.20000000000000E+0000
37960: MUL
37961: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37962: LD_VAR 0 6
37966: PPUSH
37967: CALL_OW 257
37971: PUSH
37972: LD_INT 5
37974: PUSH
37975: LD_INT 7
37977: PUSH
37978: LD_INT 9
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: IN
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: LD_INT 52
37994: PPUSH
37995: CALL_OW 321
37999: PUSH
38000: LD_INT 2
38002: EQUAL
38003: AND
38004: IFFALSE 38021
// bpoints := bpoints * 1.5 ;
38006: LD_ADDR_VAR 0 10
38010: PUSH
38011: LD_VAR 0 10
38015: PUSH
38016: LD_REAL  1.50000000000000E+0000
38019: MUL
38020: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38021: LD_VAR 0 1
38025: PPUSH
38026: LD_INT 66
38028: PPUSH
38029: CALL_OW 321
38033: PUSH
38034: LD_INT 2
38036: EQUAL
38037: IFFALSE 38054
// bpoints := bpoints * 1.1 ;
38039: LD_ADDR_VAR 0 10
38043: PUSH
38044: LD_VAR 0 10
38048: PUSH
38049: LD_REAL  1.10000000000000E+0000
38052: MUL
38053: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38054: LD_ADDR_VAR 0 10
38058: PUSH
38059: LD_VAR 0 10
38063: PUSH
38064: LD_VAR 0 6
38068: PPUSH
38069: LD_INT 1
38071: PPUSH
38072: CALL_OW 259
38076: PUSH
38077: LD_REAL  1.15000000000000E+0000
38080: MUL
38081: MUL
38082: ST_TO_ADDR
// end ; unit_vehicle :
38083: GO 38911
38085: LD_INT 2
38087: DOUBLE
38088: EQUAL
38089: IFTRUE 38093
38091: GO 38899
38093: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38094: LD_VAR 0 6
38098: PPUSH
38099: CALL_OW 264
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 42
38109: PUSH
38110: LD_INT 24
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: IN
38118: IFFALSE 38139
// points := [ 25 , 5 , 3 ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_INT 25
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 264
38148: PUSH
38149: LD_INT 4
38151: PUSH
38152: LD_INT 43
38154: PUSH
38155: LD_INT 25
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: IN
38163: IFFALSE 38184
// points := [ 40 , 15 , 5 ] ;
38165: LD_ADDR_VAR 0 9
38169: PUSH
38170: LD_INT 40
38172: PUSH
38173: LD_INT 15
38175: PUSH
38176: LD_INT 5
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38184: LD_VAR 0 6
38188: PPUSH
38189: CALL_OW 264
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: LD_INT 23
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: IN
38204: IFFALSE 38225
// points := [ 7 , 25 , 8 ] ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_INT 7
38213: PUSH
38214: LD_INT 25
38216: PUSH
38217: LD_INT 8
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 264
38234: PUSH
38235: LD_INT 5
38237: PUSH
38238: LD_INT 27
38240: PUSH
38241: LD_INT 44
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: IN
38249: IFFALSE 38270
// points := [ 14 , 50 , 16 ] ;
38251: LD_ADDR_VAR 0 9
38255: PUSH
38256: LD_INT 14
38258: PUSH
38259: LD_INT 50
38261: PUSH
38262: LD_INT 16
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 264
38279: PUSH
38280: LD_INT 6
38282: PUSH
38283: LD_INT 46
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: IN
38290: IFFALSE 38311
// points := [ 32 , 120 , 70 ] ;
38292: LD_ADDR_VAR 0 9
38296: PUSH
38297: LD_INT 32
38299: PUSH
38300: LD_INT 120
38302: PUSH
38303: LD_INT 70
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38311: LD_VAR 0 6
38315: PPUSH
38316: CALL_OW 264
38320: PUSH
38321: LD_INT 7
38323: PUSH
38324: LD_INT 28
38326: PUSH
38327: LD_INT 45
38329: PUSH
38330: LD_INT 92
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: IN
38339: IFFALSE 38360
// points := [ 35 , 20 , 45 ] ;
38341: LD_ADDR_VAR 0 9
38345: PUSH
38346: LD_INT 35
38348: PUSH
38349: LD_INT 20
38351: PUSH
38352: LD_INT 45
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 264
38369: PUSH
38370: LD_INT 47
38372: PUSH
38373: EMPTY
38374: LIST
38375: IN
38376: IFFALSE 38397
// points := [ 67 , 45 , 75 ] ;
38378: LD_ADDR_VAR 0 9
38382: PUSH
38383: LD_INT 67
38385: PUSH
38386: LD_INT 45
38388: PUSH
38389: LD_INT 75
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38397: LD_VAR 0 6
38401: PPUSH
38402: CALL_OW 264
38406: PUSH
38407: LD_INT 26
38409: PUSH
38410: EMPTY
38411: LIST
38412: IN
38413: IFFALSE 38434
// points := [ 120 , 30 , 80 ] ;
38415: LD_ADDR_VAR 0 9
38419: PUSH
38420: LD_INT 120
38422: PUSH
38423: LD_INT 30
38425: PUSH
38426: LD_INT 80
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38434: LD_VAR 0 6
38438: PPUSH
38439: CALL_OW 264
38443: PUSH
38444: LD_INT 22
38446: PUSH
38447: EMPTY
38448: LIST
38449: IN
38450: IFFALSE 38471
// points := [ 40 , 1 , 1 ] ;
38452: LD_ADDR_VAR 0 9
38456: PUSH
38457: LD_INT 40
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38471: LD_VAR 0 6
38475: PPUSH
38476: CALL_OW 264
38480: PUSH
38481: LD_INT 29
38483: PUSH
38484: EMPTY
38485: LIST
38486: IN
38487: IFFALSE 38508
// points := [ 70 , 200 , 400 ] ;
38489: LD_ADDR_VAR 0 9
38493: PUSH
38494: LD_INT 70
38496: PUSH
38497: LD_INT 200
38499: PUSH
38500: LD_INT 400
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38508: LD_VAR 0 6
38512: PPUSH
38513: CALL_OW 264
38517: PUSH
38518: LD_INT 14
38520: PUSH
38521: LD_INT 53
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: IN
38528: IFFALSE 38549
// points := [ 40 , 10 , 20 ] ;
38530: LD_ADDR_VAR 0 9
38534: PUSH
38535: LD_INT 40
38537: PUSH
38538: LD_INT 10
38540: PUSH
38541: LD_INT 20
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38549: LD_VAR 0 6
38553: PPUSH
38554: CALL_OW 264
38558: PUSH
38559: LD_INT 9
38561: PUSH
38562: EMPTY
38563: LIST
38564: IN
38565: IFFALSE 38586
// points := [ 5 , 70 , 20 ] ;
38567: LD_ADDR_VAR 0 9
38571: PUSH
38572: LD_INT 5
38574: PUSH
38575: LD_INT 70
38577: PUSH
38578: LD_INT 20
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38586: LD_VAR 0 6
38590: PPUSH
38591: CALL_OW 264
38595: PUSH
38596: LD_INT 10
38598: PUSH
38599: EMPTY
38600: LIST
38601: IN
38602: IFFALSE 38623
// points := [ 35 , 110 , 70 ] ;
38604: LD_ADDR_VAR 0 9
38608: PUSH
38609: LD_INT 35
38611: PUSH
38612: LD_INT 110
38614: PUSH
38615: LD_INT 70
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38623: LD_VAR 0 6
38627: PPUSH
38628: CALL_OW 265
38632: PUSH
38633: LD_INT 25
38635: EQUAL
38636: IFFALSE 38657
// points := [ 80 , 65 , 100 ] ;
38638: LD_ADDR_VAR 0 9
38642: PUSH
38643: LD_INT 80
38645: PUSH
38646: LD_INT 65
38648: PUSH
38649: LD_INT 100
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38657: LD_VAR 0 6
38661: PPUSH
38662: CALL_OW 263
38666: PUSH
38667: LD_INT 1
38669: EQUAL
38670: IFFALSE 38705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38672: LD_ADDR_VAR 0 10
38676: PUSH
38677: LD_VAR 0 10
38681: PUSH
38682: LD_VAR 0 6
38686: PPUSH
38687: CALL_OW 311
38691: PPUSH
38692: LD_INT 3
38694: PPUSH
38695: CALL_OW 259
38699: PUSH
38700: LD_INT 4
38702: MUL
38703: MUL
38704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38705: LD_VAR 0 6
38709: PPUSH
38710: CALL_OW 263
38714: PUSH
38715: LD_INT 2
38717: EQUAL
38718: IFFALSE 38769
// begin j := IsControledBy ( i ) ;
38720: LD_ADDR_VAR 0 7
38724: PUSH
38725: LD_VAR 0 6
38729: PPUSH
38730: CALL_OW 312
38734: ST_TO_ADDR
// if j then
38735: LD_VAR 0 7
38739: IFFALSE 38769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38741: LD_ADDR_VAR 0 10
38745: PUSH
38746: LD_VAR 0 10
38750: PUSH
38751: LD_VAR 0 7
38755: PPUSH
38756: LD_INT 3
38758: PPUSH
38759: CALL_OW 259
38763: PUSH
38764: LD_INT 3
38766: MUL
38767: MUL
38768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38769: LD_VAR 0 6
38773: PPUSH
38774: CALL_OW 264
38778: PUSH
38779: LD_INT 5
38781: PUSH
38782: LD_INT 6
38784: PUSH
38785: LD_INT 46
38787: PUSH
38788: LD_INT 44
38790: PUSH
38791: LD_INT 47
38793: PUSH
38794: LD_INT 45
38796: PUSH
38797: LD_INT 28
38799: PUSH
38800: LD_INT 7
38802: PUSH
38803: LD_INT 27
38805: PUSH
38806: LD_INT 29
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: IN
38821: PUSH
38822: LD_VAR 0 1
38826: PPUSH
38827: LD_INT 52
38829: PPUSH
38830: CALL_OW 321
38834: PUSH
38835: LD_INT 2
38837: EQUAL
38838: AND
38839: IFFALSE 38856
// bpoints := bpoints * 1.2 ;
38841: LD_ADDR_VAR 0 10
38845: PUSH
38846: LD_VAR 0 10
38850: PUSH
38851: LD_REAL  1.20000000000000E+0000
38854: MUL
38855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38856: LD_VAR 0 6
38860: PPUSH
38861: CALL_OW 264
38865: PUSH
38866: LD_INT 6
38868: PUSH
38869: LD_INT 46
38871: PUSH
38872: LD_INT 47
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: IN
38880: IFFALSE 38897
// bpoints := bpoints * 1.2 ;
38882: LD_ADDR_VAR 0 10
38886: PUSH
38887: LD_VAR 0 10
38891: PUSH
38892: LD_REAL  1.20000000000000E+0000
38895: MUL
38896: ST_TO_ADDR
// end ; unit_building :
38897: GO 38911
38899: LD_INT 3
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38907
38905: GO 38910
38907: POP
// ; end ;
38908: GO 38911
38910: POP
// for j = 1 to 3 do
38911: LD_ADDR_VAR 0 7
38915: PUSH
38916: DOUBLE
38917: LD_INT 1
38919: DEC
38920: ST_TO_ADDR
38921: LD_INT 3
38923: PUSH
38924: FOR_TO
38925: IFFALSE 38978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38927: LD_ADDR_VAR 0 5
38931: PUSH
38932: LD_VAR 0 5
38936: PPUSH
38937: LD_VAR 0 7
38941: PPUSH
38942: LD_VAR 0 5
38946: PUSH
38947: LD_VAR 0 7
38951: ARRAY
38952: PUSH
38953: LD_VAR 0 9
38957: PUSH
38958: LD_VAR 0 7
38962: ARRAY
38963: PUSH
38964: LD_VAR 0 10
38968: MUL
38969: PLUS
38970: PPUSH
38971: CALL_OW 1
38975: ST_TO_ADDR
38976: GO 38924
38978: POP
38979: POP
// end ;
38980: GO 37459
38982: POP
38983: POP
// result := Replace ( result , 4 , tmp ) ;
38984: LD_ADDR_VAR 0 5
38988: PUSH
38989: LD_VAR 0 5
38993: PPUSH
38994: LD_INT 4
38996: PPUSH
38997: LD_VAR 0 8
39001: PPUSH
39002: CALL_OW 1
39006: ST_TO_ADDR
// end ;
39007: LD_VAR 0 5
39011: RET
// export function DangerAtRange ( unit , range ) ; begin
39012: LD_INT 0
39014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 255
39029: PPUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 250
39039: PPUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 251
39049: PPUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: CALL 37311 0 4
39059: ST_TO_ADDR
// end ;
39060: LD_VAR 0 3
39064: RET
// export function DangerInArea ( side , area ) ; begin
39065: LD_INT 0
39067: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39068: LD_ADDR_VAR 0 3
39072: PUSH
39073: LD_VAR 0 2
39077: PPUSH
39078: LD_INT 81
39080: PUSH
39081: LD_VAR 0 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PPUSH
39090: CALL_OW 70
39094: ST_TO_ADDR
// end ;
39095: LD_VAR 0 3
39099: RET
// export function IsExtension ( b ) ; begin
39100: LD_INT 0
39102: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39103: LD_ADDR_VAR 0 2
39107: PUSH
39108: LD_VAR 0 1
39112: PUSH
39113: LD_INT 23
39115: PUSH
39116: LD_INT 20
39118: PUSH
39119: LD_INT 22
39121: PUSH
39122: LD_INT 17
39124: PUSH
39125: LD_INT 24
39127: PUSH
39128: LD_INT 21
39130: PUSH
39131: LD_INT 19
39133: PUSH
39134: LD_INT 16
39136: PUSH
39137: LD_INT 25
39139: PUSH
39140: LD_INT 18
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: IN
39155: ST_TO_ADDR
// end ;
39156: LD_VAR 0 2
39160: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39161: LD_INT 0
39163: PPUSH
39164: PPUSH
39165: PPUSH
// result := [ ] ;
39166: LD_ADDR_VAR 0 4
39170: PUSH
39171: EMPTY
39172: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39173: LD_ADDR_VAR 0 5
39177: PUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_INT 21
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PPUSH
39193: CALL_OW 70
39197: ST_TO_ADDR
// if not tmp then
39198: LD_VAR 0 5
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 39271
// if checkLink then
39207: LD_VAR 0 3
39211: IFFALSE 39261
// begin for i in tmp do
39213: LD_ADDR_VAR 0 6
39217: PUSH
39218: LD_VAR 0 5
39222: PUSH
39223: FOR_IN
39224: IFFALSE 39259
// if GetBase ( i ) <> base then
39226: LD_VAR 0 6
39230: PPUSH
39231: CALL_OW 274
39235: PUSH
39236: LD_VAR 0 1
39240: NONEQUAL
39241: IFFALSE 39257
// ComLinkToBase ( base , i ) ;
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 6
39252: PPUSH
39253: CALL_OW 169
39257: GO 39223
39259: POP
39260: POP
// end ; result := tmp ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_VAR 0 5
39270: ST_TO_ADDR
// end ;
39271: LD_VAR 0 4
39275: RET
// export function ComComplete ( units , b ) ; var i ; begin
39276: LD_INT 0
39278: PPUSH
39279: PPUSH
// if not units then
39280: LD_VAR 0 1
39284: NOT
39285: IFFALSE 39289
// exit ;
39287: GO 39379
// for i in units do
39289: LD_ADDR_VAR 0 4
39293: PUSH
39294: LD_VAR 0 1
39298: PUSH
39299: FOR_IN
39300: IFFALSE 39377
// if BuildingStatus ( b ) = bs_build then
39302: LD_VAR 0 2
39306: PPUSH
39307: CALL_OW 461
39311: PUSH
39312: LD_INT 1
39314: EQUAL
39315: IFFALSE 39375
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39317: LD_VAR 0 4
39321: PPUSH
39322: LD_STRING h
39324: PUSH
39325: LD_VAR 0 2
39329: PPUSH
39330: CALL_OW 250
39334: PUSH
39335: LD_VAR 0 2
39339: PPUSH
39340: CALL_OW 251
39344: PUSH
39345: LD_VAR 0 2
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: PPUSH
39371: CALL_OW 446
39375: GO 39299
39377: POP
39378: POP
// end ;
39379: LD_VAR 0 3
39383: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39384: LD_INT 0
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39392: LD_VAR 0 1
39396: NOT
39397: PUSH
39398: LD_VAR 0 1
39402: PPUSH
39403: CALL_OW 263
39407: PUSH
39408: LD_INT 2
39410: NONEQUAL
39411: OR
39412: IFFALSE 39416
// exit ;
39414: GO 39732
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39416: LD_ADDR_VAR 0 6
39420: PUSH
39421: LD_INT 22
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 255
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 30
39443: PUSH
39444: LD_INT 36
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 34
39453: PUSH
39454: LD_INT 31
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PPUSH
39470: CALL_OW 69
39474: ST_TO_ADDR
// if not tmp then
39475: LD_VAR 0 6
39479: NOT
39480: IFFALSE 39484
// exit ;
39482: GO 39732
// result := [ ] ;
39484: LD_ADDR_VAR 0 2
39488: PUSH
39489: EMPTY
39490: ST_TO_ADDR
// for i in tmp do
39491: LD_ADDR_VAR 0 3
39495: PUSH
39496: LD_VAR 0 6
39500: PUSH
39501: FOR_IN
39502: IFFALSE 39573
// begin t := UnitsInside ( i ) ;
39504: LD_ADDR_VAR 0 4
39508: PUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: CALL_OW 313
39518: ST_TO_ADDR
// if t then
39519: LD_VAR 0 4
39523: IFFALSE 39571
// for j in t do
39525: LD_ADDR_VAR 0 7
39529: PUSH
39530: LD_VAR 0 4
39534: PUSH
39535: FOR_IN
39536: IFFALSE 39569
// result := Replace ( result , result + 1 , j ) ;
39538: LD_ADDR_VAR 0 2
39542: PUSH
39543: LD_VAR 0 2
39547: PPUSH
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 1
39555: PLUS
39556: PPUSH
39557: LD_VAR 0 7
39561: PPUSH
39562: CALL_OW 1
39566: ST_TO_ADDR
39567: GO 39535
39569: POP
39570: POP
// end ;
39571: GO 39501
39573: POP
39574: POP
// if not result then
39575: LD_VAR 0 2
39579: NOT
39580: IFFALSE 39584
// exit ;
39582: GO 39732
// mech := result [ 1 ] ;
39584: LD_ADDR_VAR 0 5
39588: PUSH
39589: LD_VAR 0 2
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: ST_TO_ADDR
// if result > 1 then
39598: LD_VAR 0 2
39602: PUSH
39603: LD_INT 1
39605: GREATER
39606: IFFALSE 39718
// begin for i = 2 to result do
39608: LD_ADDR_VAR 0 3
39612: PUSH
39613: DOUBLE
39614: LD_INT 2
39616: DEC
39617: ST_TO_ADDR
39618: LD_VAR 0 2
39622: PUSH
39623: FOR_TO
39624: IFFALSE 39716
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39626: LD_ADDR_VAR 0 4
39630: PUSH
39631: LD_VAR 0 2
39635: PUSH
39636: LD_VAR 0 3
39640: ARRAY
39641: PPUSH
39642: LD_INT 3
39644: PPUSH
39645: CALL_OW 259
39649: PUSH
39650: LD_VAR 0 2
39654: PUSH
39655: LD_VAR 0 3
39659: ARRAY
39660: PPUSH
39661: CALL_OW 432
39665: MINUS
39666: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39667: LD_VAR 0 4
39671: PUSH
39672: LD_VAR 0 5
39676: PPUSH
39677: LD_INT 3
39679: PPUSH
39680: CALL_OW 259
39684: PUSH
39685: LD_VAR 0 5
39689: PPUSH
39690: CALL_OW 432
39694: MINUS
39695: GREATEREQUAL
39696: IFFALSE 39714
// mech := result [ i ] ;
39698: LD_ADDR_VAR 0 5
39702: PUSH
39703: LD_VAR 0 2
39707: PUSH
39708: LD_VAR 0 3
39712: ARRAY
39713: ST_TO_ADDR
// end ;
39714: GO 39623
39716: POP
39717: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39718: LD_VAR 0 1
39722: PPUSH
39723: LD_VAR 0 5
39727: PPUSH
39728: CALL_OW 135
// end ;
39732: LD_VAR 0 2
39736: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39737: LD_INT 0
39739: PPUSH
39740: PPUSH
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
// result := [ ] ;
39752: LD_ADDR_VAR 0 7
39756: PUSH
39757: EMPTY
39758: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 266
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: IN
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 41418
// if name then
39784: LD_VAR 0 3
39788: IFFALSE 39804
// SetBName ( base_dep , name ) ;
39790: LD_VAR 0 1
39794: PPUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: CALL_OW 500
// base := GetBase ( base_dep ) ;
39804: LD_ADDR_VAR 0 15
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 274
39818: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39819: LD_ADDR_VAR 0 16
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 255
39833: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39834: LD_ADDR_VAR 0 17
39838: PUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 248
39848: ST_TO_ADDR
// if sources then
39849: LD_VAR 0 5
39853: IFFALSE 39900
// for i = 1 to 3 do
39855: LD_ADDR_VAR 0 8
39859: PUSH
39860: DOUBLE
39861: LD_INT 1
39863: DEC
39864: ST_TO_ADDR
39865: LD_INT 3
39867: PUSH
39868: FOR_TO
39869: IFFALSE 39898
// AddResourceType ( base , i , sources [ i ] ) ;
39871: LD_VAR 0 15
39875: PPUSH
39876: LD_VAR 0 8
39880: PPUSH
39881: LD_VAR 0 5
39885: PUSH
39886: LD_VAR 0 8
39890: ARRAY
39891: PPUSH
39892: CALL_OW 276
39896: GO 39868
39898: POP
39899: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39900: LD_ADDR_VAR 0 18
39904: PUSH
39905: LD_VAR 0 15
39909: PPUSH
39910: LD_VAR 0 2
39914: PPUSH
39915: LD_INT 1
39917: PPUSH
39918: CALL 39161 0 3
39922: ST_TO_ADDR
// InitHc ;
39923: CALL_OW 19
// InitUc ;
39927: CALL_OW 18
// uc_side := side ;
39931: LD_ADDR_OWVAR 20
39935: PUSH
39936: LD_VAR 0 16
39940: ST_TO_ADDR
// uc_nation := nation ;
39941: LD_ADDR_OWVAR 21
39945: PUSH
39946: LD_VAR 0 17
39950: ST_TO_ADDR
// if buildings then
39951: LD_VAR 0 18
39955: IFFALSE 41277
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39957: LD_ADDR_VAR 0 19
39961: PUSH
39962: LD_VAR 0 18
39966: PPUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 30
39972: PUSH
39973: LD_INT 29
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 30
39982: PUSH
39983: LD_INT 30
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: PPUSH
39995: CALL_OW 72
39999: ST_TO_ADDR
// if tmp then
40000: LD_VAR 0 19
40004: IFFALSE 40052
// for i in tmp do
40006: LD_ADDR_VAR 0 8
40010: PUSH
40011: LD_VAR 0 19
40015: PUSH
40016: FOR_IN
40017: IFFALSE 40050
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40019: LD_VAR 0 8
40023: PPUSH
40024: CALL_OW 250
40028: PPUSH
40029: LD_VAR 0 8
40033: PPUSH
40034: CALL_OW 251
40038: PPUSH
40039: LD_VAR 0 16
40043: PPUSH
40044: CALL_OW 441
40048: GO 40016
40050: POP
40051: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40052: LD_VAR 0 18
40056: PPUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 30
40062: PUSH
40063: LD_INT 32
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 30
40072: PUSH
40073: LD_INT 33
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: PPUSH
40085: CALL_OW 72
40089: IFFALSE 40177
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40091: LD_ADDR_VAR 0 8
40095: PUSH
40096: LD_VAR 0 18
40100: PPUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 30
40106: PUSH
40107: LD_INT 32
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 30
40116: PUSH
40117: LD_INT 33
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: PPUSH
40129: CALL_OW 72
40133: PUSH
40134: FOR_IN
40135: IFFALSE 40175
// begin if not GetBWeapon ( i ) then
40137: LD_VAR 0 8
40141: PPUSH
40142: CALL_OW 269
40146: NOT
40147: IFFALSE 40173
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40149: LD_VAR 0 8
40153: PPUSH
40154: LD_VAR 0 8
40158: PPUSH
40159: LD_VAR 0 2
40163: PPUSH
40164: CALL 41423 0 2
40168: PPUSH
40169: CALL_OW 431
// end ;
40173: GO 40134
40175: POP
40176: POP
// end ; for i = 1 to personel do
40177: LD_ADDR_VAR 0 8
40181: PUSH
40182: DOUBLE
40183: LD_INT 1
40185: DEC
40186: ST_TO_ADDR
40187: LD_VAR 0 6
40191: PUSH
40192: FOR_TO
40193: IFFALSE 41257
// begin if i > 4 then
40195: LD_VAR 0 8
40199: PUSH
40200: LD_INT 4
40202: GREATER
40203: IFFALSE 40207
// break ;
40205: GO 41257
// case i of 1 :
40207: LD_VAR 0 8
40211: PUSH
40212: LD_INT 1
40214: DOUBLE
40215: EQUAL
40216: IFTRUE 40220
40218: GO 40300
40220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40221: LD_ADDR_VAR 0 12
40225: PUSH
40226: LD_VAR 0 18
40230: PPUSH
40231: LD_INT 22
40233: PUSH
40234: LD_VAR 0 16
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 58
40245: PUSH
40246: EMPTY
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 30
40254: PUSH
40255: LD_INT 32
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 30
40264: PUSH
40265: LD_INT 4
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 30
40274: PUSH
40275: LD_INT 5
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: PPUSH
40293: CALL_OW 72
40297: ST_TO_ADDR
40298: GO 40522
40300: LD_INT 2
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40370
40308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_VAR 0 18
40318: PPUSH
40319: LD_INT 22
40321: PUSH
40322: LD_VAR 0 16
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: LD_INT 30
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PPUSH
40363: CALL_OW 72
40367: ST_TO_ADDR
40368: GO 40522
40370: LD_INT 3
40372: DOUBLE
40373: EQUAL
40374: IFTRUE 40378
40376: GO 40440
40378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40379: LD_ADDR_VAR 0 12
40383: PUSH
40384: LD_VAR 0 18
40388: PPUSH
40389: LD_INT 22
40391: PUSH
40392: LD_VAR 0 16
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 30
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 30
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PPUSH
40433: CALL_OW 72
40437: ST_TO_ADDR
40438: GO 40522
40440: LD_INT 4
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40521
40448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40449: LD_ADDR_VAR 0 12
40453: PUSH
40454: LD_VAR 0 18
40458: PPUSH
40459: LD_INT 22
40461: PUSH
40462: LD_VAR 0 16
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 30
40476: PUSH
40477: LD_INT 6
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 30
40486: PUSH
40487: LD_INT 7
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 30
40496: PUSH
40497: LD_INT 8
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PPUSH
40514: CALL_OW 72
40518: ST_TO_ADDR
40519: GO 40522
40521: POP
// if i = 1 then
40522: LD_VAR 0 8
40526: PUSH
40527: LD_INT 1
40529: EQUAL
40530: IFFALSE 40641
// begin tmp := [ ] ;
40532: LD_ADDR_VAR 0 19
40536: PUSH
40537: EMPTY
40538: ST_TO_ADDR
// for j in f do
40539: LD_ADDR_VAR 0 9
40543: PUSH
40544: LD_VAR 0 12
40548: PUSH
40549: FOR_IN
40550: IFFALSE 40623
// if GetBType ( j ) = b_bunker then
40552: LD_VAR 0 9
40556: PPUSH
40557: CALL_OW 266
40561: PUSH
40562: LD_INT 32
40564: EQUAL
40565: IFFALSE 40592
// tmp := Insert ( tmp , 1 , j ) else
40567: LD_ADDR_VAR 0 19
40571: PUSH
40572: LD_VAR 0 19
40576: PPUSH
40577: LD_INT 1
40579: PPUSH
40580: LD_VAR 0 9
40584: PPUSH
40585: CALL_OW 2
40589: ST_TO_ADDR
40590: GO 40621
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40592: LD_ADDR_VAR 0 19
40596: PUSH
40597: LD_VAR 0 19
40601: PPUSH
40602: LD_VAR 0 19
40606: PUSH
40607: LD_INT 1
40609: PLUS
40610: PPUSH
40611: LD_VAR 0 9
40615: PPUSH
40616: CALL_OW 2
40620: ST_TO_ADDR
40621: GO 40549
40623: POP
40624: POP
// if tmp then
40625: LD_VAR 0 19
40629: IFFALSE 40641
// f := tmp ;
40631: LD_ADDR_VAR 0 12
40635: PUSH
40636: LD_VAR 0 19
40640: ST_TO_ADDR
// end ; x := personel [ i ] ;
40641: LD_ADDR_VAR 0 13
40645: PUSH
40646: LD_VAR 0 6
40650: PUSH
40651: LD_VAR 0 8
40655: ARRAY
40656: ST_TO_ADDR
// if x = - 1 then
40657: LD_VAR 0 13
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: EQUAL
40666: IFFALSE 40875
// begin for j in f do
40668: LD_ADDR_VAR 0 9
40672: PUSH
40673: LD_VAR 0 12
40677: PUSH
40678: FOR_IN
40679: IFFALSE 40871
// repeat InitHc ;
40681: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40685: LD_VAR 0 9
40689: PPUSH
40690: CALL_OW 266
40694: PUSH
40695: LD_INT 5
40697: EQUAL
40698: IFFALSE 40768
// begin if UnitsInside ( j ) < 3 then
40700: LD_VAR 0 9
40704: PPUSH
40705: CALL_OW 313
40709: PUSH
40710: LD_INT 3
40712: LESS
40713: IFFALSE 40749
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40715: LD_INT 0
40717: PPUSH
40718: LD_INT 5
40720: PUSH
40721: LD_INT 8
40723: PUSH
40724: LD_INT 9
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: PUSH
40732: LD_VAR 0 17
40736: ARRAY
40737: PPUSH
40738: LD_VAR 0 4
40742: PPUSH
40743: CALL_OW 380
40747: GO 40766
// PrepareHuman ( false , i , skill ) ;
40749: LD_INT 0
40751: PPUSH
40752: LD_VAR 0 8
40756: PPUSH
40757: LD_VAR 0 4
40761: PPUSH
40762: CALL_OW 380
// end else
40766: GO 40785
// PrepareHuman ( false , i , skill ) ;
40768: LD_INT 0
40770: PPUSH
40771: LD_VAR 0 8
40775: PPUSH
40776: LD_VAR 0 4
40780: PPUSH
40781: CALL_OW 380
// un := CreateHuman ;
40785: LD_ADDR_VAR 0 14
40789: PUSH
40790: CALL_OW 44
40794: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40795: LD_ADDR_VAR 0 7
40799: PUSH
40800: LD_VAR 0 7
40804: PPUSH
40805: LD_INT 1
40807: PPUSH
40808: LD_VAR 0 14
40812: PPUSH
40813: CALL_OW 2
40817: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40818: LD_VAR 0 14
40822: PPUSH
40823: LD_VAR 0 9
40827: PPUSH
40828: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40832: LD_VAR 0 9
40836: PPUSH
40837: CALL_OW 313
40841: PUSH
40842: LD_INT 6
40844: EQUAL
40845: PUSH
40846: LD_VAR 0 9
40850: PPUSH
40851: CALL_OW 266
40855: PUSH
40856: LD_INT 32
40858: PUSH
40859: LD_INT 31
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: IN
40866: OR
40867: IFFALSE 40681
40869: GO 40678
40871: POP
40872: POP
// end else
40873: GO 41255
// for j = 1 to x do
40875: LD_ADDR_VAR 0 9
40879: PUSH
40880: DOUBLE
40881: LD_INT 1
40883: DEC
40884: ST_TO_ADDR
40885: LD_VAR 0 13
40889: PUSH
40890: FOR_TO
40891: IFFALSE 41253
// begin InitHc ;
40893: CALL_OW 19
// if not f then
40897: LD_VAR 0 12
40901: NOT
40902: IFFALSE 40991
// begin PrepareHuman ( false , i , skill ) ;
40904: LD_INT 0
40906: PPUSH
40907: LD_VAR 0 8
40911: PPUSH
40912: LD_VAR 0 4
40916: PPUSH
40917: CALL_OW 380
// un := CreateHuman ;
40921: LD_ADDR_VAR 0 14
40925: PUSH
40926: CALL_OW 44
40930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40931: LD_ADDR_VAR 0 7
40935: PUSH
40936: LD_VAR 0 7
40940: PPUSH
40941: LD_INT 1
40943: PPUSH
40944: LD_VAR 0 14
40948: PPUSH
40949: CALL_OW 2
40953: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40954: LD_VAR 0 14
40958: PPUSH
40959: LD_VAR 0 1
40963: PPUSH
40964: CALL_OW 250
40968: PPUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 251
40978: PPUSH
40979: LD_INT 10
40981: PPUSH
40982: LD_INT 0
40984: PPUSH
40985: CALL_OW 50
// continue ;
40989: GO 40890
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40991: LD_VAR 0 12
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: CALL_OW 313
41004: PUSH
41005: LD_VAR 0 12
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: CALL_OW 266
41018: PUSH
41019: LD_INT 32
41021: PUSH
41022: LD_INT 31
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: IN
41029: AND
41030: PUSH
41031: LD_VAR 0 12
41035: PUSH
41036: LD_INT 1
41038: ARRAY
41039: PPUSH
41040: CALL_OW 313
41044: PUSH
41045: LD_INT 6
41047: EQUAL
41048: OR
41049: IFFALSE 41069
// f := Delete ( f , 1 ) ;
41051: LD_ADDR_VAR 0 12
41055: PUSH
41056: LD_VAR 0 12
41060: PPUSH
41061: LD_INT 1
41063: PPUSH
41064: CALL_OW 3
41068: ST_TO_ADDR
// if not f then
41069: LD_VAR 0 12
41073: NOT
41074: IFFALSE 41092
// begin x := x + 2 ;
41076: LD_ADDR_VAR 0 13
41080: PUSH
41081: LD_VAR 0 13
41085: PUSH
41086: LD_INT 2
41088: PLUS
41089: ST_TO_ADDR
// continue ;
41090: GO 40890
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41092: LD_VAR 0 12
41096: PUSH
41097: LD_INT 1
41099: ARRAY
41100: PPUSH
41101: CALL_OW 266
41105: PUSH
41106: LD_INT 5
41108: EQUAL
41109: IFFALSE 41183
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41111: LD_VAR 0 12
41115: PUSH
41116: LD_INT 1
41118: ARRAY
41119: PPUSH
41120: CALL_OW 313
41124: PUSH
41125: LD_INT 3
41127: LESS
41128: IFFALSE 41164
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41130: LD_INT 0
41132: PPUSH
41133: LD_INT 5
41135: PUSH
41136: LD_INT 8
41138: PUSH
41139: LD_INT 9
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: PUSH
41147: LD_VAR 0 17
41151: ARRAY
41152: PPUSH
41153: LD_VAR 0 4
41157: PPUSH
41158: CALL_OW 380
41162: GO 41181
// PrepareHuman ( false , i , skill ) ;
41164: LD_INT 0
41166: PPUSH
41167: LD_VAR 0 8
41171: PPUSH
41172: LD_VAR 0 4
41176: PPUSH
41177: CALL_OW 380
// end else
41181: GO 41200
// PrepareHuman ( false , i , skill ) ;
41183: LD_INT 0
41185: PPUSH
41186: LD_VAR 0 8
41190: PPUSH
41191: LD_VAR 0 4
41195: PPUSH
41196: CALL_OW 380
// un := CreateHuman ;
41200: LD_ADDR_VAR 0 14
41204: PUSH
41205: CALL_OW 44
41209: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41210: LD_ADDR_VAR 0 7
41214: PUSH
41215: LD_VAR 0 7
41219: PPUSH
41220: LD_INT 1
41222: PPUSH
41223: LD_VAR 0 14
41227: PPUSH
41228: CALL_OW 2
41232: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41233: LD_VAR 0 14
41237: PPUSH
41238: LD_VAR 0 12
41242: PUSH
41243: LD_INT 1
41245: ARRAY
41246: PPUSH
41247: CALL_OW 52
// end ;
41251: GO 40890
41253: POP
41254: POP
// end ;
41255: GO 40192
41257: POP
41258: POP
// result := result ^ buildings ;
41259: LD_ADDR_VAR 0 7
41263: PUSH
41264: LD_VAR 0 7
41268: PUSH
41269: LD_VAR 0 18
41273: ADD
41274: ST_TO_ADDR
// end else
41275: GO 41418
// begin for i = 1 to personel do
41277: LD_ADDR_VAR 0 8
41281: PUSH
41282: DOUBLE
41283: LD_INT 1
41285: DEC
41286: ST_TO_ADDR
41287: LD_VAR 0 6
41291: PUSH
41292: FOR_TO
41293: IFFALSE 41416
// begin if i > 4 then
41295: LD_VAR 0 8
41299: PUSH
41300: LD_INT 4
41302: GREATER
41303: IFFALSE 41307
// break ;
41305: GO 41416
// x := personel [ i ] ;
41307: LD_ADDR_VAR 0 13
41311: PUSH
41312: LD_VAR 0 6
41316: PUSH
41317: LD_VAR 0 8
41321: ARRAY
41322: ST_TO_ADDR
// if x = - 1 then
41323: LD_VAR 0 13
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: EQUAL
41332: IFFALSE 41336
// continue ;
41334: GO 41292
// PrepareHuman ( false , i , skill ) ;
41336: LD_INT 0
41338: PPUSH
41339: LD_VAR 0 8
41343: PPUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: CALL_OW 380
// un := CreateHuman ;
41353: LD_ADDR_VAR 0 14
41357: PUSH
41358: CALL_OW 44
41362: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41363: LD_VAR 0 14
41367: PPUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 250
41377: PPUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 251
41387: PPUSH
41388: LD_INT 10
41390: PPUSH
41391: LD_INT 0
41393: PPUSH
41394: CALL_OW 50
// result := result ^ un ;
41398: LD_ADDR_VAR 0 7
41402: PUSH
41403: LD_VAR 0 7
41407: PUSH
41408: LD_VAR 0 14
41412: ADD
41413: ST_TO_ADDR
// end ;
41414: GO 41292
41416: POP
41417: POP
// end ; end ;
41418: LD_VAR 0 7
41422: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
// result := false ;
41441: LD_ADDR_VAR 0 3
41445: PUSH
41446: LD_INT 0
41448: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41449: LD_VAR 0 1
41453: NOT
41454: PUSH
41455: LD_VAR 0 1
41459: PPUSH
41460: CALL_OW 266
41464: PUSH
41465: LD_INT 32
41467: PUSH
41468: LD_INT 33
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: IN
41475: NOT
41476: OR
41477: IFFALSE 41481
// exit ;
41479: GO 42590
// nat := GetNation ( tower ) ;
41481: LD_ADDR_VAR 0 12
41485: PUSH
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 248
41495: ST_TO_ADDR
// side := GetSide ( tower ) ;
41496: LD_ADDR_VAR 0 16
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 255
41510: ST_TO_ADDR
// x := GetX ( tower ) ;
41511: LD_ADDR_VAR 0 10
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 250
41525: ST_TO_ADDR
// y := GetY ( tower ) ;
41526: LD_ADDR_VAR 0 11
41530: PUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 251
41540: ST_TO_ADDR
// if not x or not y then
41541: LD_VAR 0 10
41545: NOT
41546: PUSH
41547: LD_VAR 0 11
41551: NOT
41552: OR
41553: IFFALSE 41557
// exit ;
41555: GO 42590
// weapon := 0 ;
41557: LD_ADDR_VAR 0 18
41561: PUSH
41562: LD_INT 0
41564: ST_TO_ADDR
// fac_list := [ ] ;
41565: LD_ADDR_VAR 0 17
41569: PUSH
41570: EMPTY
41571: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41572: LD_ADDR_VAR 0 6
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 274
41586: PPUSH
41587: LD_VAR 0 2
41591: PPUSH
41592: LD_INT 0
41594: PPUSH
41595: CALL 39161 0 3
41599: PPUSH
41600: LD_INT 30
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PPUSH
41610: CALL_OW 72
41614: ST_TO_ADDR
// if not factories then
41615: LD_VAR 0 6
41619: NOT
41620: IFFALSE 41624
// exit ;
41622: GO 42590
// for i in factories do
41624: LD_ADDR_VAR 0 8
41628: PUSH
41629: LD_VAR 0 6
41633: PUSH
41634: FOR_IN
41635: IFFALSE 41660
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41637: LD_ADDR_VAR 0 17
41641: PUSH
41642: LD_VAR 0 17
41646: PUSH
41647: LD_VAR 0 8
41651: PPUSH
41652: CALL_OW 478
41656: UNION
41657: ST_TO_ADDR
41658: GO 41634
41660: POP
41661: POP
// if not fac_list then
41662: LD_VAR 0 17
41666: NOT
41667: IFFALSE 41671
// exit ;
41669: GO 42590
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41671: LD_ADDR_VAR 0 5
41675: PUSH
41676: LD_INT 4
41678: PUSH
41679: LD_INT 5
41681: PUSH
41682: LD_INT 9
41684: PUSH
41685: LD_INT 10
41687: PUSH
41688: LD_INT 6
41690: PUSH
41691: LD_INT 7
41693: PUSH
41694: LD_INT 11
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 27
41708: PUSH
41709: LD_INT 28
41711: PUSH
41712: LD_INT 26
41714: PUSH
41715: LD_INT 30
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 43
41726: PUSH
41727: LD_INT 44
41729: PUSH
41730: LD_INT 46
41732: PUSH
41733: LD_INT 45
41735: PUSH
41736: LD_INT 47
41738: PUSH
41739: LD_INT 49
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: PUSH
41755: LD_VAR 0 12
41759: ARRAY
41760: ST_TO_ADDR
// list := list isect fac_list ;
41761: LD_ADDR_VAR 0 5
41765: PUSH
41766: LD_VAR 0 5
41770: PUSH
41771: LD_VAR 0 17
41775: ISECT
41776: ST_TO_ADDR
// if not list then
41777: LD_VAR 0 5
41781: NOT
41782: IFFALSE 41786
// exit ;
41784: GO 42590
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41786: LD_VAR 0 12
41790: PUSH
41791: LD_INT 3
41793: EQUAL
41794: PUSH
41795: LD_INT 49
41797: PUSH
41798: LD_VAR 0 5
41802: IN
41803: AND
41804: PUSH
41805: LD_INT 31
41807: PPUSH
41808: LD_VAR 0 16
41812: PPUSH
41813: CALL_OW 321
41817: PUSH
41818: LD_INT 2
41820: EQUAL
41821: AND
41822: IFFALSE 41882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41824: LD_INT 22
41826: PUSH
41827: LD_VAR 0 16
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 35
41838: PUSH
41839: LD_INT 49
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 91
41848: PUSH
41849: LD_VAR 0 1
41853: PUSH
41854: LD_INT 10
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: PPUSH
41867: CALL_OW 69
41871: NOT
41872: IFFALSE 41882
// weapon := ru_time_lapser ;
41874: LD_ADDR_VAR 0 18
41878: PUSH
41879: LD_INT 49
41881: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41882: LD_VAR 0 12
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: IN
41897: PUSH
41898: LD_INT 11
41900: PUSH
41901: LD_VAR 0 5
41905: IN
41906: PUSH
41907: LD_INT 30
41909: PUSH
41910: LD_VAR 0 5
41914: IN
41915: OR
41916: AND
41917: PUSH
41918: LD_INT 6
41920: PPUSH
41921: LD_VAR 0 16
41925: PPUSH
41926: CALL_OW 321
41930: PUSH
41931: LD_INT 2
41933: EQUAL
41934: AND
41935: IFFALSE 42100
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41937: LD_INT 22
41939: PUSH
41940: LD_VAR 0 16
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 35
41954: PUSH
41955: LD_INT 11
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 35
41964: PUSH
41965: LD_INT 30
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 91
41979: PUSH
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 18
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: PPUSH
41998: CALL_OW 69
42002: NOT
42003: PUSH
42004: LD_INT 22
42006: PUSH
42007: LD_VAR 0 16
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: LD_INT 30
42021: PUSH
42022: LD_INT 32
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 30
42031: PUSH
42032: LD_INT 33
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 91
42046: PUSH
42047: LD_VAR 0 1
42051: PUSH
42052: LD_INT 12
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: PPUSH
42068: CALL_OW 69
42072: PUSH
42073: LD_INT 2
42075: GREATER
42076: AND
42077: IFFALSE 42100
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42079: LD_ADDR_VAR 0 18
42083: PUSH
42084: LD_INT 11
42086: PUSH
42087: LD_INT 30
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_VAR 0 12
42098: ARRAY
42099: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42100: LD_VAR 0 18
42104: NOT
42105: PUSH
42106: LD_INT 40
42108: PPUSH
42109: LD_VAR 0 16
42113: PPUSH
42114: CALL_OW 321
42118: PUSH
42119: LD_INT 2
42121: EQUAL
42122: AND
42123: PUSH
42124: LD_INT 7
42126: PUSH
42127: LD_VAR 0 5
42131: IN
42132: PUSH
42133: LD_INT 28
42135: PUSH
42136: LD_VAR 0 5
42140: IN
42141: OR
42142: PUSH
42143: LD_INT 45
42145: PUSH
42146: LD_VAR 0 5
42150: IN
42151: OR
42152: AND
42153: IFFALSE 42407
// begin hex := GetHexInfo ( x , y ) ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: LD_VAR 0 10
42164: PPUSH
42165: LD_VAR 0 11
42169: PPUSH
42170: CALL_OW 546
42174: ST_TO_ADDR
// if hex [ 1 ] then
42175: LD_VAR 0 4
42179: PUSH
42180: LD_INT 1
42182: ARRAY
42183: IFFALSE 42187
// exit ;
42185: GO 42590
// height := hex [ 2 ] ;
42187: LD_ADDR_VAR 0 15
42191: PUSH
42192: LD_VAR 0 4
42196: PUSH
42197: LD_INT 2
42199: ARRAY
42200: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42201: LD_ADDR_VAR 0 14
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 5
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// for i in tmp do
42224: LD_ADDR_VAR 0 8
42228: PUSH
42229: LD_VAR 0 14
42233: PUSH
42234: FOR_IN
42235: IFFALSE 42405
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42237: LD_ADDR_VAR 0 9
42241: PUSH
42242: LD_VAR 0 10
42246: PPUSH
42247: LD_VAR 0 8
42251: PPUSH
42252: LD_INT 5
42254: PPUSH
42255: CALL_OW 272
42259: PUSH
42260: LD_VAR 0 11
42264: PPUSH
42265: LD_VAR 0 8
42269: PPUSH
42270: LD_INT 5
42272: PPUSH
42273: CALL_OW 273
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42282: LD_VAR 0 9
42286: PUSH
42287: LD_INT 1
42289: ARRAY
42290: PPUSH
42291: LD_VAR 0 9
42295: PUSH
42296: LD_INT 2
42298: ARRAY
42299: PPUSH
42300: CALL_OW 488
42304: IFFALSE 42403
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42306: LD_ADDR_VAR 0 4
42310: PUSH
42311: LD_VAR 0 9
42315: PUSH
42316: LD_INT 1
42318: ARRAY
42319: PPUSH
42320: LD_VAR 0 9
42324: PUSH
42325: LD_INT 2
42327: ARRAY
42328: PPUSH
42329: CALL_OW 546
42333: ST_TO_ADDR
// if hex [ 1 ] then
42334: LD_VAR 0 4
42338: PUSH
42339: LD_INT 1
42341: ARRAY
42342: IFFALSE 42346
// continue ;
42344: GO 42234
// h := hex [ 2 ] ;
42346: LD_ADDR_VAR 0 13
42350: PUSH
42351: LD_VAR 0 4
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: ST_TO_ADDR
// if h + 7 < height then
42360: LD_VAR 0 13
42364: PUSH
42365: LD_INT 7
42367: PLUS
42368: PUSH
42369: LD_VAR 0 15
42373: LESS
42374: IFFALSE 42403
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42376: LD_ADDR_VAR 0 18
42380: PUSH
42381: LD_INT 7
42383: PUSH
42384: LD_INT 28
42386: PUSH
42387: LD_INT 45
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: PUSH
42395: LD_VAR 0 12
42399: ARRAY
42400: ST_TO_ADDR
// break ;
42401: GO 42405
// end ; end ; end ;
42403: GO 42234
42405: POP
42406: POP
// end ; if not weapon then
42407: LD_VAR 0 18
42411: NOT
42412: IFFALSE 42472
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42414: LD_ADDR_VAR 0 5
42418: PUSH
42419: LD_VAR 0 5
42423: PUSH
42424: LD_INT 11
42426: PUSH
42427: LD_INT 30
42429: PUSH
42430: LD_INT 49
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: DIFF
42438: ST_TO_ADDR
// if not list then
42439: LD_VAR 0 5
42443: NOT
42444: IFFALSE 42448
// exit ;
42446: GO 42590
// weapon := list [ rand ( 1 , list ) ] ;
42448: LD_ADDR_VAR 0 18
42452: PUSH
42453: LD_VAR 0 5
42457: PUSH
42458: LD_INT 1
42460: PPUSH
42461: LD_VAR 0 5
42465: PPUSH
42466: CALL_OW 12
42470: ARRAY
42471: ST_TO_ADDR
// end ; if weapon then
42472: LD_VAR 0 18
42476: IFFALSE 42590
// begin tmp := CostOfWeapon ( weapon ) ;
42478: LD_ADDR_VAR 0 14
42482: PUSH
42483: LD_VAR 0 18
42487: PPUSH
42488: CALL_OW 451
42492: ST_TO_ADDR
// j := GetBase ( tower ) ;
42493: LD_ADDR_VAR 0 9
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 274
42507: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42508: LD_VAR 0 9
42512: PPUSH
42513: LD_INT 1
42515: PPUSH
42516: CALL_OW 275
42520: PUSH
42521: LD_VAR 0 14
42525: PUSH
42526: LD_INT 1
42528: ARRAY
42529: GREATEREQUAL
42530: PUSH
42531: LD_VAR 0 9
42535: PPUSH
42536: LD_INT 2
42538: PPUSH
42539: CALL_OW 275
42543: PUSH
42544: LD_VAR 0 14
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: GREATEREQUAL
42553: AND
42554: PUSH
42555: LD_VAR 0 9
42559: PPUSH
42560: LD_INT 3
42562: PPUSH
42563: CALL_OW 275
42567: PUSH
42568: LD_VAR 0 14
42572: PUSH
42573: LD_INT 3
42575: ARRAY
42576: GREATEREQUAL
42577: AND
42578: IFFALSE 42590
// result := weapon ;
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_VAR 0 18
42589: ST_TO_ADDR
// end ; end ;
42590: LD_VAR 0 3
42594: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42595: LD_INT 0
42597: PPUSH
42598: PPUSH
// result := true ;
42599: LD_ADDR_VAR 0 3
42603: PUSH
42604: LD_INT 1
42606: ST_TO_ADDR
// if array1 = array2 then
42607: LD_VAR 0 1
42611: PUSH
42612: LD_VAR 0 2
42616: EQUAL
42617: IFFALSE 42677
// begin for i = 1 to array1 do
42619: LD_ADDR_VAR 0 4
42623: PUSH
42624: DOUBLE
42625: LD_INT 1
42627: DEC
42628: ST_TO_ADDR
42629: LD_VAR 0 1
42633: PUSH
42634: FOR_TO
42635: IFFALSE 42673
// if array1 [ i ] <> array2 [ i ] then
42637: LD_VAR 0 1
42641: PUSH
42642: LD_VAR 0 4
42646: ARRAY
42647: PUSH
42648: LD_VAR 0 2
42652: PUSH
42653: LD_VAR 0 4
42657: ARRAY
42658: NONEQUAL
42659: IFFALSE 42671
// begin result := false ;
42661: LD_ADDR_VAR 0 3
42665: PUSH
42666: LD_INT 0
42668: ST_TO_ADDR
// break ;
42669: GO 42673
// end ;
42671: GO 42634
42673: POP
42674: POP
// end else
42675: GO 42685
// result := false ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 0
42684: ST_TO_ADDR
// end ;
42685: LD_VAR 0 3
42689: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
// if not array1 or not array2 then
42694: LD_VAR 0 1
42698: NOT
42699: PUSH
42700: LD_VAR 0 2
42704: NOT
42705: OR
42706: IFFALSE 42710
// exit ;
42708: GO 42774
// result := true ;
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 1
42717: ST_TO_ADDR
// for i = 1 to array1 do
42718: LD_ADDR_VAR 0 4
42722: PUSH
42723: DOUBLE
42724: LD_INT 1
42726: DEC
42727: ST_TO_ADDR
42728: LD_VAR 0 1
42732: PUSH
42733: FOR_TO
42734: IFFALSE 42772
// if array1 [ i ] <> array2 [ i ] then
42736: LD_VAR 0 1
42740: PUSH
42741: LD_VAR 0 4
42745: ARRAY
42746: PUSH
42747: LD_VAR 0 2
42751: PUSH
42752: LD_VAR 0 4
42756: ARRAY
42757: NONEQUAL
42758: IFFALSE 42770
// begin result := false ;
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 0
42767: ST_TO_ADDR
// break ;
42768: GO 42772
// end ;
42770: GO 42733
42772: POP
42773: POP
// end ;
42774: LD_VAR 0 3
42778: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42779: LD_INT 0
42781: PPUSH
42782: PPUSH
42783: PPUSH
// pom := GetBase ( fac ) ;
42784: LD_ADDR_VAR 0 5
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 274
42798: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42799: LD_ADDR_VAR 0 4
42803: PUSH
42804: LD_VAR 0 2
42808: PUSH
42809: LD_INT 1
42811: ARRAY
42812: PPUSH
42813: LD_VAR 0 2
42817: PUSH
42818: LD_INT 2
42820: ARRAY
42821: PPUSH
42822: LD_VAR 0 2
42826: PUSH
42827: LD_INT 3
42829: ARRAY
42830: PPUSH
42831: LD_VAR 0 2
42835: PUSH
42836: LD_INT 4
42838: ARRAY
42839: PPUSH
42840: CALL_OW 449
42844: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42845: LD_ADDR_VAR 0 3
42849: PUSH
42850: LD_VAR 0 5
42854: PPUSH
42855: LD_INT 1
42857: PPUSH
42858: CALL_OW 275
42862: PUSH
42863: LD_VAR 0 4
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: GREATEREQUAL
42872: PUSH
42873: LD_VAR 0 5
42877: PPUSH
42878: LD_INT 2
42880: PPUSH
42881: CALL_OW 275
42885: PUSH
42886: LD_VAR 0 4
42890: PUSH
42891: LD_INT 2
42893: ARRAY
42894: GREATEREQUAL
42895: AND
42896: PUSH
42897: LD_VAR 0 5
42901: PPUSH
42902: LD_INT 3
42904: PPUSH
42905: CALL_OW 275
42909: PUSH
42910: LD_VAR 0 4
42914: PUSH
42915: LD_INT 3
42917: ARRAY
42918: GREATEREQUAL
42919: AND
42920: ST_TO_ADDR
// end ;
42921: LD_VAR 0 3
42925: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
// pom := GetBase ( building ) ;
42932: LD_ADDR_VAR 0 3
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 274
42946: ST_TO_ADDR
// if not pom then
42947: LD_VAR 0 3
42951: NOT
42952: IFFALSE 42956
// exit ;
42954: GO 43126
// btype := GetBType ( building ) ;
42956: LD_ADDR_VAR 0 5
42960: PUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 266
42970: ST_TO_ADDR
// if btype = b_armoury then
42971: LD_VAR 0 5
42975: PUSH
42976: LD_INT 4
42978: EQUAL
42979: IFFALSE 42989
// btype := b_barracks ;
42981: LD_ADDR_VAR 0 5
42985: PUSH
42986: LD_INT 5
42988: ST_TO_ADDR
// if btype = b_depot then
42989: LD_VAR 0 5
42993: PUSH
42994: LD_INT 0
42996: EQUAL
42997: IFFALSE 43007
// btype := b_warehouse ;
42999: LD_ADDR_VAR 0 5
43003: PUSH
43004: LD_INT 1
43006: ST_TO_ADDR
// if btype = b_workshop then
43007: LD_VAR 0 5
43011: PUSH
43012: LD_INT 2
43014: EQUAL
43015: IFFALSE 43025
// btype := b_factory ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: LD_INT 3
43024: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43025: LD_ADDR_VAR 0 4
43029: PUSH
43030: LD_VAR 0 5
43034: PPUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 248
43044: PPUSH
43045: CALL_OW 450
43049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43050: LD_ADDR_VAR 0 2
43054: PUSH
43055: LD_VAR 0 3
43059: PPUSH
43060: LD_INT 1
43062: PPUSH
43063: CALL_OW 275
43067: PUSH
43068: LD_VAR 0 4
43072: PUSH
43073: LD_INT 1
43075: ARRAY
43076: GREATEREQUAL
43077: PUSH
43078: LD_VAR 0 3
43082: PPUSH
43083: LD_INT 2
43085: PPUSH
43086: CALL_OW 275
43090: PUSH
43091: LD_VAR 0 4
43095: PUSH
43096: LD_INT 2
43098: ARRAY
43099: GREATEREQUAL
43100: AND
43101: PUSH
43102: LD_VAR 0 3
43106: PPUSH
43107: LD_INT 3
43109: PPUSH
43110: CALL_OW 275
43114: PUSH
43115: LD_VAR 0 4
43119: PUSH
43120: LD_INT 3
43122: ARRAY
43123: GREATEREQUAL
43124: AND
43125: ST_TO_ADDR
// end ;
43126: LD_VAR 0 2
43130: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43131: LD_INT 0
43133: PPUSH
43134: PPUSH
43135: PPUSH
// pom := GetBase ( building ) ;
43136: LD_ADDR_VAR 0 4
43140: PUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL_OW 274
43150: ST_TO_ADDR
// if not pom then
43151: LD_VAR 0 4
43155: NOT
43156: IFFALSE 43160
// exit ;
43158: GO 43261
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43160: LD_ADDR_VAR 0 5
43164: PUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 248
43179: PPUSH
43180: CALL_OW 450
43184: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_VAR 0 4
43194: PPUSH
43195: LD_INT 1
43197: PPUSH
43198: CALL_OW 275
43202: PUSH
43203: LD_VAR 0 5
43207: PUSH
43208: LD_INT 1
43210: ARRAY
43211: GREATEREQUAL
43212: PUSH
43213: LD_VAR 0 4
43217: PPUSH
43218: LD_INT 2
43220: PPUSH
43221: CALL_OW 275
43225: PUSH
43226: LD_VAR 0 5
43230: PUSH
43231: LD_INT 2
43233: ARRAY
43234: GREATEREQUAL
43235: AND
43236: PUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: LD_INT 3
43244: PPUSH
43245: CALL_OW 275
43249: PUSH
43250: LD_VAR 0 5
43254: PUSH
43255: LD_INT 3
43257: ARRAY
43258: GREATEREQUAL
43259: AND
43260: ST_TO_ADDR
// end ;
43261: LD_VAR 0 3
43265: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43266: LD_INT 0
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
// result := false ;
43279: LD_ADDR_VAR 0 8
43283: PUSH
43284: LD_INT 0
43286: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43287: LD_VAR 0 5
43291: NOT
43292: PUSH
43293: LD_VAR 0 1
43297: NOT
43298: OR
43299: PUSH
43300: LD_VAR 0 2
43304: NOT
43305: OR
43306: PUSH
43307: LD_VAR 0 3
43311: NOT
43312: OR
43313: IFFALSE 43317
// exit ;
43315: GO 44131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43317: LD_ADDR_VAR 0 14
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: LD_VAR 0 2
43331: PPUSH
43332: LD_VAR 0 3
43336: PPUSH
43337: LD_VAR 0 4
43341: PPUSH
43342: LD_VAR 0 5
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: PPUSH
43351: CALL_OW 248
43355: PPUSH
43356: LD_INT 0
43358: PPUSH
43359: CALL 45364 0 6
43363: ST_TO_ADDR
// if not hexes then
43364: LD_VAR 0 14
43368: NOT
43369: IFFALSE 43373
// exit ;
43371: GO 44131
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43373: LD_ADDR_VAR 0 17
43377: PUSH
43378: LD_VAR 0 5
43382: PPUSH
43383: LD_INT 22
43385: PUSH
43386: LD_VAR 0 13
43390: PPUSH
43391: CALL_OW 255
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 30
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 30
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PPUSH
43432: CALL_OW 72
43436: ST_TO_ADDR
// for i = 1 to hexes do
43437: LD_ADDR_VAR 0 9
43441: PUSH
43442: DOUBLE
43443: LD_INT 1
43445: DEC
43446: ST_TO_ADDR
43447: LD_VAR 0 14
43451: PUSH
43452: FOR_TO
43453: IFFALSE 44129
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43455: LD_ADDR_VAR 0 13
43459: PUSH
43460: LD_VAR 0 14
43464: PUSH
43465: LD_VAR 0 9
43469: ARRAY
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: PPUSH
43475: LD_VAR 0 14
43479: PUSH
43480: LD_VAR 0 9
43484: ARRAY
43485: PUSH
43486: LD_INT 2
43488: ARRAY
43489: PPUSH
43490: CALL_OW 428
43494: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43495: LD_VAR 0 14
43499: PUSH
43500: LD_VAR 0 9
43504: ARRAY
43505: PUSH
43506: LD_INT 1
43508: ARRAY
43509: PPUSH
43510: LD_VAR 0 14
43514: PUSH
43515: LD_VAR 0 9
43519: ARRAY
43520: PUSH
43521: LD_INT 2
43523: ARRAY
43524: PPUSH
43525: CALL_OW 351
43529: PUSH
43530: LD_VAR 0 14
43534: PUSH
43535: LD_VAR 0 9
43539: ARRAY
43540: PUSH
43541: LD_INT 1
43543: ARRAY
43544: PPUSH
43545: LD_VAR 0 14
43549: PUSH
43550: LD_VAR 0 9
43554: ARRAY
43555: PUSH
43556: LD_INT 2
43558: ARRAY
43559: PPUSH
43560: CALL_OW 488
43564: NOT
43565: OR
43566: PUSH
43567: LD_VAR 0 13
43571: PPUSH
43572: CALL_OW 247
43576: PUSH
43577: LD_INT 3
43579: EQUAL
43580: OR
43581: IFFALSE 43587
// exit ;
43583: POP
43584: POP
43585: GO 44131
// if not tmp then
43587: LD_VAR 0 13
43591: NOT
43592: IFFALSE 43596
// continue ;
43594: GO 43452
// result := true ;
43596: LD_ADDR_VAR 0 8
43600: PUSH
43601: LD_INT 1
43603: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43604: LD_VAR 0 6
43608: PUSH
43609: LD_VAR 0 13
43613: PPUSH
43614: CALL_OW 247
43618: PUSH
43619: LD_INT 2
43621: EQUAL
43622: AND
43623: PUSH
43624: LD_VAR 0 13
43628: PPUSH
43629: CALL_OW 263
43633: PUSH
43634: LD_INT 1
43636: EQUAL
43637: AND
43638: IFFALSE 43802
// begin if IsDrivenBy ( tmp ) then
43640: LD_VAR 0 13
43644: PPUSH
43645: CALL_OW 311
43649: IFFALSE 43653
// continue ;
43651: GO 43452
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43653: LD_VAR 0 6
43657: PPUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 60
43663: PUSH
43664: EMPTY
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: LD_INT 55
43676: PUSH
43677: EMPTY
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 72
43692: IFFALSE 43800
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43694: LD_ADDR_VAR 0 18
43698: PUSH
43699: LD_VAR 0 6
43703: PPUSH
43704: LD_INT 3
43706: PUSH
43707: LD_INT 60
43709: PUSH
43710: EMPTY
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: LD_INT 55
43722: PUSH
43723: EMPTY
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PPUSH
43734: CALL_OW 72
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: ST_TO_ADDR
// if IsInUnit ( driver ) then
43743: LD_VAR 0 18
43747: PPUSH
43748: CALL_OW 310
43752: IFFALSE 43763
// ComExit ( driver ) ;
43754: LD_VAR 0 18
43758: PPUSH
43759: CALL 69144 0 1
// AddComEnterUnit ( driver , tmp ) ;
43763: LD_VAR 0 18
43767: PPUSH
43768: LD_VAR 0 13
43772: PPUSH
43773: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43777: LD_VAR 0 18
43781: PPUSH
43782: LD_VAR 0 7
43786: PPUSH
43787: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43791: LD_VAR 0 18
43795: PPUSH
43796: CALL_OW 181
// end ; continue ;
43800: GO 43452
// end ; if not cleaners or not tmp in cleaners then
43802: LD_VAR 0 6
43806: NOT
43807: PUSH
43808: LD_VAR 0 13
43812: PUSH
43813: LD_VAR 0 6
43817: IN
43818: NOT
43819: OR
43820: IFFALSE 44127
// begin if dep then
43822: LD_VAR 0 17
43826: IFFALSE 43962
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43828: LD_ADDR_VAR 0 16
43832: PUSH
43833: LD_VAR 0 17
43837: PUSH
43838: LD_INT 1
43840: ARRAY
43841: PPUSH
43842: CALL_OW 250
43846: PPUSH
43847: LD_VAR 0 17
43851: PUSH
43852: LD_INT 1
43854: ARRAY
43855: PPUSH
43856: CALL_OW 254
43860: PPUSH
43861: LD_INT 5
43863: PPUSH
43864: CALL_OW 272
43868: PUSH
43869: LD_VAR 0 17
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: PPUSH
43878: CALL_OW 251
43882: PPUSH
43883: LD_VAR 0 17
43887: PUSH
43888: LD_INT 1
43890: ARRAY
43891: PPUSH
43892: CALL_OW 254
43896: PPUSH
43897: LD_INT 5
43899: PPUSH
43900: CALL_OW 273
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43909: LD_VAR 0 16
43913: PUSH
43914: LD_INT 1
43916: ARRAY
43917: PPUSH
43918: LD_VAR 0 16
43922: PUSH
43923: LD_INT 2
43925: ARRAY
43926: PPUSH
43927: CALL_OW 488
43931: IFFALSE 43962
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43933: LD_VAR 0 13
43937: PPUSH
43938: LD_VAR 0 16
43942: PUSH
43943: LD_INT 1
43945: ARRAY
43946: PPUSH
43947: LD_VAR 0 16
43951: PUSH
43952: LD_INT 2
43954: ARRAY
43955: PPUSH
43956: CALL_OW 111
// continue ;
43960: GO 43452
// end ; end ; r := GetDir ( tmp ) ;
43962: LD_ADDR_VAR 0 15
43966: PUSH
43967: LD_VAR 0 13
43971: PPUSH
43972: CALL_OW 254
43976: ST_TO_ADDR
// if r = 5 then
43977: LD_VAR 0 15
43981: PUSH
43982: LD_INT 5
43984: EQUAL
43985: IFFALSE 43995
// r := 0 ;
43987: LD_ADDR_VAR 0 15
43991: PUSH
43992: LD_INT 0
43994: ST_TO_ADDR
// for j = r to 5 do
43995: LD_ADDR_VAR 0 10
43999: PUSH
44000: DOUBLE
44001: LD_VAR 0 15
44005: DEC
44006: ST_TO_ADDR
44007: LD_INT 5
44009: PUSH
44010: FOR_TO
44011: IFFALSE 44125
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44013: LD_ADDR_VAR 0 11
44017: PUSH
44018: LD_VAR 0 13
44022: PPUSH
44023: CALL_OW 250
44027: PPUSH
44028: LD_VAR 0 10
44032: PPUSH
44033: LD_INT 2
44035: PPUSH
44036: CALL_OW 272
44040: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44041: LD_ADDR_VAR 0 12
44045: PUSH
44046: LD_VAR 0 13
44050: PPUSH
44051: CALL_OW 251
44055: PPUSH
44056: LD_VAR 0 10
44060: PPUSH
44061: LD_INT 2
44063: PPUSH
44064: CALL_OW 273
44068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44069: LD_VAR 0 11
44073: PPUSH
44074: LD_VAR 0 12
44078: PPUSH
44079: CALL_OW 488
44083: PUSH
44084: LD_VAR 0 11
44088: PPUSH
44089: LD_VAR 0 12
44093: PPUSH
44094: CALL_OW 428
44098: NOT
44099: AND
44100: IFFALSE 44123
// begin ComMoveXY ( tmp , _x , _y ) ;
44102: LD_VAR 0 13
44106: PPUSH
44107: LD_VAR 0 11
44111: PPUSH
44112: LD_VAR 0 12
44116: PPUSH
44117: CALL_OW 111
// break ;
44121: GO 44125
// end ; end ;
44123: GO 44010
44125: POP
44126: POP
// end ; end ;
44127: GO 43452
44129: POP
44130: POP
// end ;
44131: LD_VAR 0 8
44135: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44136: LD_INT 0
44138: PPUSH
// result := true ;
44139: LD_ADDR_VAR 0 3
44143: PUSH
44144: LD_INT 1
44146: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 24
44154: DOUBLE
44155: EQUAL
44156: IFTRUE 44166
44158: LD_INT 33
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44191
44166: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 32
44174: PPUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 321
44184: PUSH
44185: LD_INT 2
44187: EQUAL
44188: ST_TO_ADDR
44189: GO 44507
44191: LD_INT 20
44193: DOUBLE
44194: EQUAL
44195: IFTRUE 44199
44197: GO 44224
44199: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44200: LD_ADDR_VAR 0 3
44204: PUSH
44205: LD_INT 6
44207: PPUSH
44208: LD_VAR 0 1
44212: PPUSH
44213: CALL_OW 321
44217: PUSH
44218: LD_INT 2
44220: EQUAL
44221: ST_TO_ADDR
44222: GO 44507
44224: LD_INT 22
44226: DOUBLE
44227: EQUAL
44228: IFTRUE 44238
44230: LD_INT 36
44232: DOUBLE
44233: EQUAL
44234: IFTRUE 44238
44236: GO 44263
44238: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44239: LD_ADDR_VAR 0 3
44243: PUSH
44244: LD_INT 15
44246: PPUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 321
44256: PUSH
44257: LD_INT 2
44259: EQUAL
44260: ST_TO_ADDR
44261: GO 44507
44263: LD_INT 30
44265: DOUBLE
44266: EQUAL
44267: IFTRUE 44271
44269: GO 44296
44271: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44272: LD_ADDR_VAR 0 3
44276: PUSH
44277: LD_INT 20
44279: PPUSH
44280: LD_VAR 0 1
44284: PPUSH
44285: CALL_OW 321
44289: PUSH
44290: LD_INT 2
44292: EQUAL
44293: ST_TO_ADDR
44294: GO 44507
44296: LD_INT 28
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44310
44302: LD_INT 21
44304: DOUBLE
44305: EQUAL
44306: IFTRUE 44310
44308: GO 44335
44310: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44311: LD_ADDR_VAR 0 3
44315: PUSH
44316: LD_INT 21
44318: PPUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 321
44328: PUSH
44329: LD_INT 2
44331: EQUAL
44332: ST_TO_ADDR
44333: GO 44507
44335: LD_INT 16
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44343
44341: GO 44368
44343: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44344: LD_ADDR_VAR 0 3
44348: PUSH
44349: LD_INT 84
44351: PPUSH
44352: LD_VAR 0 1
44356: PPUSH
44357: CALL_OW 321
44361: PUSH
44362: LD_INT 2
44364: EQUAL
44365: ST_TO_ADDR
44366: GO 44507
44368: LD_INT 19
44370: DOUBLE
44371: EQUAL
44372: IFTRUE 44382
44374: LD_INT 23
44376: DOUBLE
44377: EQUAL
44378: IFTRUE 44382
44380: GO 44407
44382: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44383: LD_ADDR_VAR 0 3
44387: PUSH
44388: LD_INT 83
44390: PPUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 321
44400: PUSH
44401: LD_INT 2
44403: EQUAL
44404: ST_TO_ADDR
44405: GO 44507
44407: LD_INT 17
44409: DOUBLE
44410: EQUAL
44411: IFTRUE 44415
44413: GO 44440
44415: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44416: LD_ADDR_VAR 0 3
44420: PUSH
44421: LD_INT 39
44423: PPUSH
44424: LD_VAR 0 1
44428: PPUSH
44429: CALL_OW 321
44433: PUSH
44434: LD_INT 2
44436: EQUAL
44437: ST_TO_ADDR
44438: GO 44507
44440: LD_INT 18
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44448
44446: GO 44473
44448: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_INT 40
44456: PPUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 321
44466: PUSH
44467: LD_INT 2
44469: EQUAL
44470: ST_TO_ADDR
44471: GO 44507
44473: LD_INT 27
44475: DOUBLE
44476: EQUAL
44477: IFTRUE 44481
44479: GO 44506
44481: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44482: LD_ADDR_VAR 0 3
44486: PUSH
44487: LD_INT 35
44489: PPUSH
44490: LD_VAR 0 1
44494: PPUSH
44495: CALL_OW 321
44499: PUSH
44500: LD_INT 2
44502: EQUAL
44503: ST_TO_ADDR
44504: GO 44507
44506: POP
// end ;
44507: LD_VAR 0 3
44511: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44512: LD_INT 0
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
// result := false ;
44525: LD_ADDR_VAR 0 6
44529: PUSH
44530: LD_INT 0
44532: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44533: LD_VAR 0 1
44537: NOT
44538: PUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: CALL_OW 266
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: IN
44559: NOT
44560: OR
44561: PUSH
44562: LD_VAR 0 2
44566: NOT
44567: OR
44568: PUSH
44569: LD_VAR 0 5
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 4
44588: PUSH
44589: LD_INT 5
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: IN
44600: NOT
44601: OR
44602: PUSH
44603: LD_VAR 0 3
44607: PPUSH
44608: LD_VAR 0 4
44612: PPUSH
44613: CALL_OW 488
44617: NOT
44618: OR
44619: IFFALSE 44623
// exit ;
44621: GO 45359
// side := GetSide ( depot ) ;
44623: LD_ADDR_VAR 0 9
44627: PUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 255
44637: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44638: LD_VAR 0 9
44642: PPUSH
44643: LD_VAR 0 2
44647: PPUSH
44648: CALL 44136 0 2
44652: NOT
44653: IFFALSE 44657
// exit ;
44655: GO 45359
// pom := GetBase ( depot ) ;
44657: LD_ADDR_VAR 0 10
44661: PUSH
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 274
44671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44672: LD_ADDR_VAR 0 11
44676: PUSH
44677: LD_VAR 0 2
44681: PPUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 248
44691: PPUSH
44692: CALL_OW 450
44696: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44697: LD_VAR 0 10
44701: PPUSH
44702: LD_INT 1
44704: PPUSH
44705: CALL_OW 275
44709: PUSH
44710: LD_VAR 0 11
44714: PUSH
44715: LD_INT 1
44717: ARRAY
44718: GREATEREQUAL
44719: PUSH
44720: LD_VAR 0 10
44724: PPUSH
44725: LD_INT 2
44727: PPUSH
44728: CALL_OW 275
44732: PUSH
44733: LD_VAR 0 11
44737: PUSH
44738: LD_INT 2
44740: ARRAY
44741: GREATEREQUAL
44742: AND
44743: PUSH
44744: LD_VAR 0 10
44748: PPUSH
44749: LD_INT 3
44751: PPUSH
44752: CALL_OW 275
44756: PUSH
44757: LD_VAR 0 11
44761: PUSH
44762: LD_INT 3
44764: ARRAY
44765: GREATEREQUAL
44766: AND
44767: NOT
44768: IFFALSE 44772
// exit ;
44770: GO 45359
// if GetBType ( depot ) = b_depot then
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 266
44781: PUSH
44782: LD_INT 0
44784: EQUAL
44785: IFFALSE 44797
// dist := 28 else
44787: LD_ADDR_VAR 0 14
44791: PUSH
44792: LD_INT 28
44794: ST_TO_ADDR
44795: GO 44805
// dist := 36 ;
44797: LD_ADDR_VAR 0 14
44801: PUSH
44802: LD_INT 36
44804: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44805: LD_VAR 0 1
44809: PPUSH
44810: LD_VAR 0 3
44814: PPUSH
44815: LD_VAR 0 4
44819: PPUSH
44820: CALL_OW 297
44824: PUSH
44825: LD_VAR 0 14
44829: GREATER
44830: IFFALSE 44834
// exit ;
44832: GO 45359
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44834: LD_ADDR_VAR 0 12
44838: PUSH
44839: LD_VAR 0 2
44843: PPUSH
44844: LD_VAR 0 3
44848: PPUSH
44849: LD_VAR 0 4
44853: PPUSH
44854: LD_VAR 0 5
44858: PPUSH
44859: LD_VAR 0 1
44863: PPUSH
44864: CALL_OW 248
44868: PPUSH
44869: LD_INT 0
44871: PPUSH
44872: CALL 45364 0 6
44876: ST_TO_ADDR
// if not hexes then
44877: LD_VAR 0 12
44881: NOT
44882: IFFALSE 44886
// exit ;
44884: GO 45359
// hex := GetHexInfo ( x , y ) ;
44886: LD_ADDR_VAR 0 15
44890: PUSH
44891: LD_VAR 0 3
44895: PPUSH
44896: LD_VAR 0 4
44900: PPUSH
44901: CALL_OW 546
44905: ST_TO_ADDR
// if hex [ 1 ] then
44906: LD_VAR 0 15
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: IFFALSE 44918
// exit ;
44916: GO 45359
// height := hex [ 2 ] ;
44918: LD_ADDR_VAR 0 13
44922: PUSH
44923: LD_VAR 0 15
44927: PUSH
44928: LD_INT 2
44930: ARRAY
44931: ST_TO_ADDR
// for i = 1 to hexes do
44932: LD_ADDR_VAR 0 7
44936: PUSH
44937: DOUBLE
44938: LD_INT 1
44940: DEC
44941: ST_TO_ADDR
44942: LD_VAR 0 12
44946: PUSH
44947: FOR_TO
44948: IFFALSE 45278
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44950: LD_VAR 0 12
44954: PUSH
44955: LD_VAR 0 7
44959: ARRAY
44960: PUSH
44961: LD_INT 1
44963: ARRAY
44964: PPUSH
44965: LD_VAR 0 12
44969: PUSH
44970: LD_VAR 0 7
44974: ARRAY
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PPUSH
44980: CALL_OW 488
44984: NOT
44985: PUSH
44986: LD_VAR 0 12
44990: PUSH
44991: LD_VAR 0 7
44995: ARRAY
44996: PUSH
44997: LD_INT 1
44999: ARRAY
45000: PPUSH
45001: LD_VAR 0 12
45005: PUSH
45006: LD_VAR 0 7
45010: ARRAY
45011: PUSH
45012: LD_INT 2
45014: ARRAY
45015: PPUSH
45016: CALL_OW 428
45020: PUSH
45021: LD_INT 0
45023: GREATER
45024: OR
45025: PUSH
45026: LD_VAR 0 12
45030: PUSH
45031: LD_VAR 0 7
45035: ARRAY
45036: PUSH
45037: LD_INT 1
45039: ARRAY
45040: PPUSH
45041: LD_VAR 0 12
45045: PUSH
45046: LD_VAR 0 7
45050: ARRAY
45051: PUSH
45052: LD_INT 2
45054: ARRAY
45055: PPUSH
45056: CALL_OW 351
45060: OR
45061: IFFALSE 45067
// exit ;
45063: POP
45064: POP
45065: GO 45359
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45067: LD_ADDR_VAR 0 8
45071: PUSH
45072: LD_VAR 0 12
45076: PUSH
45077: LD_VAR 0 7
45081: ARRAY
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: LD_VAR 0 12
45091: PUSH
45092: LD_VAR 0 7
45096: ARRAY
45097: PUSH
45098: LD_INT 2
45100: ARRAY
45101: PPUSH
45102: CALL_OW 546
45106: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45107: LD_VAR 0 8
45111: PUSH
45112: LD_INT 1
45114: ARRAY
45115: PUSH
45116: LD_VAR 0 8
45120: PUSH
45121: LD_INT 2
45123: ARRAY
45124: PUSH
45125: LD_VAR 0 13
45129: PUSH
45130: LD_INT 2
45132: PLUS
45133: GREATER
45134: OR
45135: PUSH
45136: LD_VAR 0 8
45140: PUSH
45141: LD_INT 2
45143: ARRAY
45144: PUSH
45145: LD_VAR 0 13
45149: PUSH
45150: LD_INT 2
45152: MINUS
45153: LESS
45154: OR
45155: PUSH
45156: LD_VAR 0 8
45160: PUSH
45161: LD_INT 3
45163: ARRAY
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 8
45170: PUSH
45171: LD_INT 9
45173: PUSH
45174: LD_INT 10
45176: PUSH
45177: LD_INT 11
45179: PUSH
45180: LD_INT 12
45182: PUSH
45183: LD_INT 13
45185: PUSH
45186: LD_INT 16
45188: PUSH
45189: LD_INT 17
45191: PUSH
45192: LD_INT 18
45194: PUSH
45195: LD_INT 19
45197: PUSH
45198: LD_INT 20
45200: PUSH
45201: LD_INT 21
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: IN
45219: NOT
45220: OR
45221: PUSH
45222: LD_VAR 0 8
45226: PUSH
45227: LD_INT 5
45229: ARRAY
45230: NOT
45231: OR
45232: PUSH
45233: LD_VAR 0 8
45237: PUSH
45238: LD_INT 6
45240: ARRAY
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 7
45250: PUSH
45251: LD_INT 9
45253: PUSH
45254: LD_INT 10
45256: PUSH
45257: LD_INT 11
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: IN
45268: NOT
45269: OR
45270: IFFALSE 45276
// exit ;
45272: POP
45273: POP
45274: GO 45359
// end ;
45276: GO 44947
45278: POP
45279: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45280: LD_VAR 0 9
45284: PPUSH
45285: LD_VAR 0 3
45289: PPUSH
45290: LD_VAR 0 4
45294: PPUSH
45295: LD_INT 20
45297: PPUSH
45298: CALL 37311 0 4
45302: PUSH
45303: LD_INT 4
45305: ARRAY
45306: IFFALSE 45310
// exit ;
45308: GO 45359
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45310: LD_VAR 0 2
45314: PUSH
45315: LD_INT 29
45317: PUSH
45318: LD_INT 30
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: IN
45325: PUSH
45326: LD_VAR 0 3
45330: PPUSH
45331: LD_VAR 0 4
45335: PPUSH
45336: LD_VAR 0 9
45340: PPUSH
45341: CALL_OW 440
45345: NOT
45346: AND
45347: IFFALSE 45351
// exit ;
45349: GO 45359
// result := true ;
45351: LD_ADDR_VAR 0 6
45355: PUSH
45356: LD_INT 1
45358: ST_TO_ADDR
// end ;
45359: LD_VAR 0 6
45363: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45364: LD_INT 0
45366: PPUSH
45367: PPUSH
45368: PPUSH
45369: PPUSH
45370: PPUSH
45371: PPUSH
45372: PPUSH
45373: PPUSH
45374: PPUSH
45375: PPUSH
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
// result = [ ] ;
45424: LD_ADDR_VAR 0 7
45428: PUSH
45429: EMPTY
45430: ST_TO_ADDR
// temp_list = [ ] ;
45431: LD_ADDR_VAR 0 9
45435: PUSH
45436: EMPTY
45437: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45438: LD_VAR 0 4
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: LD_INT 4
45457: PUSH
45458: LD_INT 5
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: IN
45469: NOT
45470: PUSH
45471: LD_VAR 0 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: IN
45486: PUSH
45487: LD_VAR 0 5
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 3
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: IN
45506: NOT
45507: AND
45508: OR
45509: IFFALSE 45513
// exit ;
45511: GO 63904
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45513: LD_VAR 0 1
45517: PUSH
45518: LD_INT 6
45520: PUSH
45521: LD_INT 7
45523: PUSH
45524: LD_INT 8
45526: PUSH
45527: LD_INT 13
45529: PUSH
45530: LD_INT 12
45532: PUSH
45533: LD_INT 15
45535: PUSH
45536: LD_INT 11
45538: PUSH
45539: LD_INT 14
45541: PUSH
45542: LD_INT 10
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: IN
45556: IFFALSE 45566
// btype = b_lab ;
45558: LD_ADDR_VAR 0 1
45562: PUSH
45563: LD_INT 6
45565: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45566: LD_VAR 0 6
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: IN
45585: NOT
45586: PUSH
45587: LD_VAR 0 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 6
45606: PUSH
45607: LD_INT 36
45609: PUSH
45610: LD_INT 4
45612: PUSH
45613: LD_INT 5
45615: PUSH
45616: LD_INT 31
45618: PUSH
45619: LD_INT 32
45621: PUSH
45622: LD_INT 33
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: IN
45638: NOT
45639: PUSH
45640: LD_VAR 0 6
45644: PUSH
45645: LD_INT 1
45647: EQUAL
45648: AND
45649: OR
45650: PUSH
45651: LD_VAR 0 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: IN
45666: NOT
45667: PUSH
45668: LD_VAR 0 6
45672: PUSH
45673: LD_INT 2
45675: EQUAL
45676: AND
45677: OR
45678: IFFALSE 45688
// mode = 0 ;
45680: LD_ADDR_VAR 0 6
45684: PUSH
45685: LD_INT 0
45687: ST_TO_ADDR
// case mode of 0 :
45688: LD_VAR 0 6
45692: PUSH
45693: LD_INT 0
45695: DOUBLE
45696: EQUAL
45697: IFTRUE 45701
45699: GO 57154
45701: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45702: LD_ADDR_VAR 0 11
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45895: LD_ADDR_VAR 0 12
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46091: LD_ADDR_VAR 0 13
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: NEG
46263: PUSH
46264: LD_INT 3
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46290: LD_ADDR_VAR 0 14
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46486: LD_ADDR_VAR 0 15
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46679: LD_ADDR_VAR 0 16
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46872: LD_ADDR_VAR 0 17
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47102: LD_ADDR_VAR 0 18
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 19
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 20
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47792: LD_ADDR_VAR 0 21
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48022: LD_ADDR_VAR 0 22
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48252: LD_ADDR_VAR 0 23
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48532: LD_ADDR_VAR 0 24
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48808: LD_ADDR_VAR 0 25
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49082: LD_ADDR_VAR 0 26
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49358: LD_ADDR_VAR 0 27
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49638: LD_ADDR_VAR 0 28
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49920: LD_ADDR_VAR 0 29
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50199: LD_ADDR_VAR 0 30
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50477: LD_ADDR_VAR 0 31
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 3
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50755: LD_ADDR_VAR 0 32
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51033: LD_ADDR_VAR 0 33
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51312: LD_ADDR_VAR 0 34
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51592: LD_ADDR_VAR 0 35
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51704: LD_ADDR_VAR 0 36
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51816: LD_ADDR_VAR 0 37
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51928: LD_ADDR_VAR 0 38
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52040: LD_ADDR_VAR 0 39
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52152: LD_ADDR_VAR 0 40
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52264: LD_ADDR_VAR 0 41
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: LD_INT 3
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52614: LD_ADDR_VAR 0 42
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52964: LD_ADDR_VAR 0 43
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53312: LD_ADDR_VAR 0 44
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53662: LD_ADDR_VAR 0 45
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54012: LD_ADDR_VAR 0 46
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54360: LD_ADDR_VAR 0 47
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54511: LD_ADDR_VAR 0 48
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54658: LD_ADDR_VAR 0 49
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54802: LD_ADDR_VAR 0 50
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54946: LD_ADDR_VAR 0 51
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55093: LD_ADDR_VAR 0 52
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55244: LD_ADDR_VAR 0 53
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55474: LD_ADDR_VAR 0 54
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55704: LD_ADDR_VAR 0 55
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55934: LD_ADDR_VAR 0 56
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56164: LD_ADDR_VAR 0 57
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56394: LD_ADDR_VAR 0 58
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56624: LD_ADDR_VAR 0 59
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56712: LD_ADDR_VAR 0 60
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56800: LD_ADDR_VAR 0 61
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56888: LD_ADDR_VAR 0 62
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56976: LD_ADDR_VAR 0 63
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57064: LD_ADDR_VAR 0 64
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// end ; 1 :
57152: GO 63049
57154: LD_INT 1
57156: DOUBLE
57157: EQUAL
57158: IFTRUE 57162
57160: GO 59785
57162: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57163: LD_ADDR_VAR 0 11
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57207: LD_ADDR_VAR 0 12
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57248: LD_ADDR_VAR 0 13
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57288: LD_ADDR_VAR 0 14
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57329: LD_ADDR_VAR 0 15
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57373: LD_ADDR_VAR 0 16
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57419: LD_ADDR_VAR 0 17
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57463: LD_ADDR_VAR 0 18
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57504: LD_ADDR_VAR 0 19
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57544: LD_ADDR_VAR 0 20
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: LIST
57584: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57585: LD_ADDR_VAR 0 21
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57629: LD_ADDR_VAR 0 22
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 3
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57675: LD_ADDR_VAR 0 23
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 4
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57719: LD_ADDR_VAR 0 24
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57760: LD_ADDR_VAR 0 25
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 4
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57800: LD_ADDR_VAR 0 26
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57841: LD_ADDR_VAR 0 27
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 4
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57885: LD_ADDR_VAR 0 28
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 4
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57931: LD_ADDR_VAR 0 29
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 4
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 5
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 5
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 6
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 6
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58086: LD_ADDR_VAR 0 30
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 4
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 6
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 6
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58229: LD_ADDR_VAR 0 31
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 4
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: LD_INT 5
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 4
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 6
58326: PUSH
58327: LD_INT 5
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 6
58336: PUSH
58337: LD_INT 6
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 5
58346: PUSH
58347: LD_INT 6
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58368: LD_ADDR_VAR 0 32
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 4
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 5
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 6
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 6
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58511: LD_ADDR_VAR 0 33
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 4
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 4
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 5
58597: NEG
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 5
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 5
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 6
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 6
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58666: LD_ADDR_VAR 0 34
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 3
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 4
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 4
58745: NEG
58746: PUSH
58747: LD_INT 5
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 5
58757: NEG
58758: PUSH
58759: LD_INT 4
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 5
58769: NEG
58770: PUSH
58771: LD_INT 5
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 5
58781: NEG
58782: PUSH
58783: LD_INT 6
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 6
58793: NEG
58794: PUSH
58795: LD_INT 5
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 6
58805: NEG
58806: PUSH
58807: LD_INT 6
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58829: LD_ADDR_VAR 0 41
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58873: LD_ADDR_VAR 0 42
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58914: LD_ADDR_VAR 0 43
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58954: LD_ADDR_VAR 0 44
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58995: LD_ADDR_VAR 0 45
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59039: LD_ADDR_VAR 0 46
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59085: LD_ADDR_VAR 0 47
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59118: LD_ADDR_VAR 0 48
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59149: LD_ADDR_VAR 0 49
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59178: LD_ADDR_VAR 0 50
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59207: LD_ADDR_VAR 0 51
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59238: LD_ADDR_VAR 0 52
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59271: LD_ADDR_VAR 0 53
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59315: LD_ADDR_VAR 0 54
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59356: LD_ADDR_VAR 0 55
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59396: LD_ADDR_VAR 0 56
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59437: LD_ADDR_VAR 0 57
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59481: LD_ADDR_VAR 0 58
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59527: LD_ADDR_VAR 0 59
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59571: LD_ADDR_VAR 0 60
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59612: LD_ADDR_VAR 0 61
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59652: LD_ADDR_VAR 0 62
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59693: LD_ADDR_VAR 0 63
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59737: LD_ADDR_VAR 0 64
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: ST_TO_ADDR
// end ; 2 :
59783: GO 63049
59785: LD_INT 2
59787: DOUBLE
59788: EQUAL
59789: IFTRUE 59793
59791: GO 63048
59793: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59794: LD_ADDR_VAR 0 29
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: PUSH
59925: LD_INT 4
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 4
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 5
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 5
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 4
60179: NEG
60180: PUSH
60181: LD_INT 4
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: LD_INT 5
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: LD_INT 3
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 5
60239: NEG
60240: PUSH
60241: LD_INT 4
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 5
60251: NEG
60252: PUSH
60253: LD_INT 5
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: LD_INT 5
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 5
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60332: LD_ADDR_VAR 0 30
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: LD_INT 4
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 4
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 5
60359: PUSH
60360: LD_INT 4
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: PUSH
60370: LD_INT 5
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 4
60379: PUSH
60380: LD_INT 5
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 5
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 5
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 4
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: NEG
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 4
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 5
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 5
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 4
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 2
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: LD_INT 4
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 4
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 4
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 4
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 5
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 4
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 4
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 5
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 3
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 5
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60879: LD_ADDR_VAR 0 31
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 3
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 4
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 5
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 4
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 4
61035: NEG
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 4
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: NEG
61082: PUSH
61083: LD_INT 4
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: NEG
61094: PUSH
61095: LD_INT 5
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: NEG
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: LD_INT 3
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: LD_INT 3
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 5
61141: NEG
61142: PUSH
61143: LD_INT 4
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 5
61153: NEG
61154: PUSH
61155: LD_INT 5
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 5
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: NEG
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: LD_INT 4
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 4
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 4
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 5
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 5
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61429: LD_ADDR_VAR 0 32
61433: PUSH
61434: LD_INT 4
61436: NEG
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 4
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 3
61459: NEG
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 5
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 5
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 5
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: NEG
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 3
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 4
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: LD_INT 4
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: LD_INT 4
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: NEG
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 4
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 4
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 3
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 3
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 5
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 5
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 4
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 4
61841: PUSH
61842: LD_INT 4
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 4
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 5
61861: PUSH
61862: LD_INT 4
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 5
61871: PUSH
61872: LD_INT 5
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 4
61881: PUSH
61882: LD_INT 5
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: LD_INT 4
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 5
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: LD_INT 5
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61976: LD_ADDR_VAR 0 33
61980: PUSH
61981: LD_INT 4
61983: NEG
61984: PUSH
61985: LD_INT 4
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 4
61995: NEG
61996: PUSH
61997: LD_INT 5
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 4
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: NEG
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 4
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 5
62043: NEG
62044: PUSH
62045: LD_INT 4
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 5
62055: NEG
62056: PUSH
62057: LD_INT 5
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: NEG
62068: PUSH
62069: LD_INT 5
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: NEG
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 4
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: LD_INT 4
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 4
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 5
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 4
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 4
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: LD_INT 4
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 5
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62514: LD_ADDR_VAR 0 34
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 4
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 5
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 3
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: LD_INT 5
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 5
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 4
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: LD_INT 2
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 4
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 5
62736: PUSH
62737: LD_INT 4
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: LD_INT 5
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 4
62756: PUSH
62757: LD_INT 5
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: LD_INT 4
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 5
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 5
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 4
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 4
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 3
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: LD_INT 4
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 4
62899: NEG
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 4
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 5
62955: NEG
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 5
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 5
62978: NEG
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// end ; end ;
63046: GO 63049
63048: POP
// case btype of b_depot , b_warehouse :
63049: LD_VAR 0 1
63053: PUSH
63054: LD_INT 0
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63068
63060: LD_INT 1
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63068
63066: GO 63269
63068: POP
// case nation of nation_american :
63069: LD_VAR 0 5
63073: PUSH
63074: LD_INT 1
63076: DOUBLE
63077: EQUAL
63078: IFTRUE 63082
63080: GO 63138
63082: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63083: LD_ADDR_VAR 0 9
63087: PUSH
63088: LD_VAR 0 11
63092: PUSH
63093: LD_VAR 0 12
63097: PUSH
63098: LD_VAR 0 13
63102: PUSH
63103: LD_VAR 0 14
63107: PUSH
63108: LD_VAR 0 15
63112: PUSH
63113: LD_VAR 0 16
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: PUSH
63126: LD_VAR 0 4
63130: PUSH
63131: LD_INT 1
63133: PLUS
63134: ARRAY
63135: ST_TO_ADDR
63136: GO 63267
63138: LD_INT 2
63140: DOUBLE
63141: EQUAL
63142: IFTRUE 63146
63144: GO 63202
63146: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63147: LD_ADDR_VAR 0 9
63151: PUSH
63152: LD_VAR 0 17
63156: PUSH
63157: LD_VAR 0 18
63161: PUSH
63162: LD_VAR 0 19
63166: PUSH
63167: LD_VAR 0 20
63171: PUSH
63172: LD_VAR 0 21
63176: PUSH
63177: LD_VAR 0 22
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: PUSH
63190: LD_VAR 0 4
63194: PUSH
63195: LD_INT 1
63197: PLUS
63198: ARRAY
63199: ST_TO_ADDR
63200: GO 63267
63202: LD_INT 3
63204: DOUBLE
63205: EQUAL
63206: IFTRUE 63210
63208: GO 63266
63210: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63211: LD_ADDR_VAR 0 9
63215: PUSH
63216: LD_VAR 0 23
63220: PUSH
63221: LD_VAR 0 24
63225: PUSH
63226: LD_VAR 0 25
63230: PUSH
63231: LD_VAR 0 26
63235: PUSH
63236: LD_VAR 0 27
63240: PUSH
63241: LD_VAR 0 28
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: PUSH
63254: LD_VAR 0 4
63258: PUSH
63259: LD_INT 1
63261: PLUS
63262: ARRAY
63263: ST_TO_ADDR
63264: GO 63267
63266: POP
63267: GO 63822
63269: LD_INT 2
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63283
63275: LD_INT 3
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63283
63281: GO 63339
63283: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63284: LD_ADDR_VAR 0 9
63288: PUSH
63289: LD_VAR 0 29
63293: PUSH
63294: LD_VAR 0 30
63298: PUSH
63299: LD_VAR 0 31
63303: PUSH
63304: LD_VAR 0 32
63308: PUSH
63309: LD_VAR 0 33
63313: PUSH
63314: LD_VAR 0 34
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 4
63331: PUSH
63332: LD_INT 1
63334: PLUS
63335: ARRAY
63336: ST_TO_ADDR
63337: GO 63822
63339: LD_INT 16
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63401
63345: LD_INT 17
63347: DOUBLE
63348: EQUAL
63349: IFTRUE 63401
63351: LD_INT 18
63353: DOUBLE
63354: EQUAL
63355: IFTRUE 63401
63357: LD_INT 19
63359: DOUBLE
63360: EQUAL
63361: IFTRUE 63401
63363: LD_INT 22
63365: DOUBLE
63366: EQUAL
63367: IFTRUE 63401
63369: LD_INT 20
63371: DOUBLE
63372: EQUAL
63373: IFTRUE 63401
63375: LD_INT 21
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63401
63381: LD_INT 23
63383: DOUBLE
63384: EQUAL
63385: IFTRUE 63401
63387: LD_INT 24
63389: DOUBLE
63390: EQUAL
63391: IFTRUE 63401
63393: LD_INT 25
63395: DOUBLE
63396: EQUAL
63397: IFTRUE 63401
63399: GO 63457
63401: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63402: LD_ADDR_VAR 0 9
63406: PUSH
63407: LD_VAR 0 35
63411: PUSH
63412: LD_VAR 0 36
63416: PUSH
63417: LD_VAR 0 37
63421: PUSH
63422: LD_VAR 0 38
63426: PUSH
63427: LD_VAR 0 39
63431: PUSH
63432: LD_VAR 0 40
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: PUSH
63445: LD_VAR 0 4
63449: PUSH
63450: LD_INT 1
63452: PLUS
63453: ARRAY
63454: ST_TO_ADDR
63455: GO 63822
63457: LD_INT 6
63459: DOUBLE
63460: EQUAL
63461: IFTRUE 63513
63463: LD_INT 7
63465: DOUBLE
63466: EQUAL
63467: IFTRUE 63513
63469: LD_INT 8
63471: DOUBLE
63472: EQUAL
63473: IFTRUE 63513
63475: LD_INT 13
63477: DOUBLE
63478: EQUAL
63479: IFTRUE 63513
63481: LD_INT 12
63483: DOUBLE
63484: EQUAL
63485: IFTRUE 63513
63487: LD_INT 15
63489: DOUBLE
63490: EQUAL
63491: IFTRUE 63513
63493: LD_INT 11
63495: DOUBLE
63496: EQUAL
63497: IFTRUE 63513
63499: LD_INT 14
63501: DOUBLE
63502: EQUAL
63503: IFTRUE 63513
63505: LD_INT 10
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63513
63511: GO 63569
63513: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63514: LD_ADDR_VAR 0 9
63518: PUSH
63519: LD_VAR 0 41
63523: PUSH
63524: LD_VAR 0 42
63528: PUSH
63529: LD_VAR 0 43
63533: PUSH
63534: LD_VAR 0 44
63538: PUSH
63539: LD_VAR 0 45
63543: PUSH
63544: LD_VAR 0 46
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: PUSH
63557: LD_VAR 0 4
63561: PUSH
63562: LD_INT 1
63564: PLUS
63565: ARRAY
63566: ST_TO_ADDR
63567: GO 63822
63569: LD_INT 36
63571: DOUBLE
63572: EQUAL
63573: IFTRUE 63577
63575: GO 63633
63577: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63578: LD_ADDR_VAR 0 9
63582: PUSH
63583: LD_VAR 0 47
63587: PUSH
63588: LD_VAR 0 48
63592: PUSH
63593: LD_VAR 0 49
63597: PUSH
63598: LD_VAR 0 50
63602: PUSH
63603: LD_VAR 0 51
63607: PUSH
63608: LD_VAR 0 52
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: PUSH
63621: LD_VAR 0 4
63625: PUSH
63626: LD_INT 1
63628: PLUS
63629: ARRAY
63630: ST_TO_ADDR
63631: GO 63822
63633: LD_INT 4
63635: DOUBLE
63636: EQUAL
63637: IFTRUE 63659
63639: LD_INT 5
63641: DOUBLE
63642: EQUAL
63643: IFTRUE 63659
63645: LD_INT 34
63647: DOUBLE
63648: EQUAL
63649: IFTRUE 63659
63651: LD_INT 37
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63659
63657: GO 63715
63659: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63660: LD_ADDR_VAR 0 9
63664: PUSH
63665: LD_VAR 0 53
63669: PUSH
63670: LD_VAR 0 54
63674: PUSH
63675: LD_VAR 0 55
63679: PUSH
63680: LD_VAR 0 56
63684: PUSH
63685: LD_VAR 0 57
63689: PUSH
63690: LD_VAR 0 58
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: PUSH
63703: LD_VAR 0 4
63707: PUSH
63708: LD_INT 1
63710: PLUS
63711: ARRAY
63712: ST_TO_ADDR
63713: GO 63822
63715: LD_INT 31
63717: DOUBLE
63718: EQUAL
63719: IFTRUE 63765
63721: LD_INT 32
63723: DOUBLE
63724: EQUAL
63725: IFTRUE 63765
63727: LD_INT 33
63729: DOUBLE
63730: EQUAL
63731: IFTRUE 63765
63733: LD_INT 27
63735: DOUBLE
63736: EQUAL
63737: IFTRUE 63765
63739: LD_INT 26
63741: DOUBLE
63742: EQUAL
63743: IFTRUE 63765
63745: LD_INT 28
63747: DOUBLE
63748: EQUAL
63749: IFTRUE 63765
63751: LD_INT 29
63753: DOUBLE
63754: EQUAL
63755: IFTRUE 63765
63757: LD_INT 30
63759: DOUBLE
63760: EQUAL
63761: IFTRUE 63765
63763: GO 63821
63765: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63766: LD_ADDR_VAR 0 9
63770: PUSH
63771: LD_VAR 0 59
63775: PUSH
63776: LD_VAR 0 60
63780: PUSH
63781: LD_VAR 0 61
63785: PUSH
63786: LD_VAR 0 62
63790: PUSH
63791: LD_VAR 0 63
63795: PUSH
63796: LD_VAR 0 64
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: PUSH
63809: LD_VAR 0 4
63813: PUSH
63814: LD_INT 1
63816: PLUS
63817: ARRAY
63818: ST_TO_ADDR
63819: GO 63822
63821: POP
// temp_list2 = [ ] ;
63822: LD_ADDR_VAR 0 10
63826: PUSH
63827: EMPTY
63828: ST_TO_ADDR
// for i in temp_list do
63829: LD_ADDR_VAR 0 8
63833: PUSH
63834: LD_VAR 0 9
63838: PUSH
63839: FOR_IN
63840: IFFALSE 63892
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63842: LD_ADDR_VAR 0 10
63846: PUSH
63847: LD_VAR 0 10
63851: PUSH
63852: LD_VAR 0 8
63856: PUSH
63857: LD_INT 1
63859: ARRAY
63860: PUSH
63861: LD_VAR 0 2
63865: PLUS
63866: PUSH
63867: LD_VAR 0 8
63871: PUSH
63872: LD_INT 2
63874: ARRAY
63875: PUSH
63876: LD_VAR 0 3
63880: PLUS
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: EMPTY
63887: LIST
63888: ADD
63889: ST_TO_ADDR
63890: GO 63839
63892: POP
63893: POP
// result = temp_list2 ;
63894: LD_ADDR_VAR 0 7
63898: PUSH
63899: LD_VAR 0 10
63903: ST_TO_ADDR
// end ;
63904: LD_VAR 0 7
63908: RET
// export function EnemyInRange ( unit , dist ) ; begin
63909: LD_INT 0
63911: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63912: LD_ADDR_VAR 0 3
63916: PUSH
63917: LD_VAR 0 1
63921: PPUSH
63922: CALL_OW 255
63926: PPUSH
63927: LD_VAR 0 1
63931: PPUSH
63932: CALL_OW 250
63936: PPUSH
63937: LD_VAR 0 1
63941: PPUSH
63942: CALL_OW 251
63946: PPUSH
63947: LD_VAR 0 2
63951: PPUSH
63952: CALL 37311 0 4
63956: PUSH
63957: LD_INT 4
63959: ARRAY
63960: ST_TO_ADDR
// end ;
63961: LD_VAR 0 3
63965: RET
// export function PlayerSeeMe ( unit ) ; begin
63966: LD_INT 0
63968: PPUSH
// result := See ( your_side , unit ) ;
63969: LD_ADDR_VAR 0 2
63973: PUSH
63974: LD_OWVAR 2
63978: PPUSH
63979: LD_VAR 0 1
63983: PPUSH
63984: CALL_OW 292
63988: ST_TO_ADDR
// end ;
63989: LD_VAR 0 2
63993: RET
// export function ReverseDir ( unit ) ; begin
63994: LD_INT 0
63996: PPUSH
// if not unit then
63997: LD_VAR 0 1
64001: NOT
64002: IFFALSE 64006
// exit ;
64004: GO 64029
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64006: LD_ADDR_VAR 0 2
64010: PUSH
64011: LD_VAR 0 1
64015: PPUSH
64016: CALL_OW 254
64020: PUSH
64021: LD_INT 3
64023: PLUS
64024: PUSH
64025: LD_INT 6
64027: MOD
64028: ST_TO_ADDR
// end ;
64029: LD_VAR 0 2
64033: RET
// export function ReverseArray ( array ) ; var i ; begin
64034: LD_INT 0
64036: PPUSH
64037: PPUSH
// if not array then
64038: LD_VAR 0 1
64042: NOT
64043: IFFALSE 64047
// exit ;
64045: GO 64102
// result := [ ] ;
64047: LD_ADDR_VAR 0 2
64051: PUSH
64052: EMPTY
64053: ST_TO_ADDR
// for i := array downto 1 do
64054: LD_ADDR_VAR 0 3
64058: PUSH
64059: DOUBLE
64060: LD_VAR 0 1
64064: INC
64065: ST_TO_ADDR
64066: LD_INT 1
64068: PUSH
64069: FOR_DOWNTO
64070: IFFALSE 64100
// result := Join ( result , array [ i ] ) ;
64072: LD_ADDR_VAR 0 2
64076: PUSH
64077: LD_VAR 0 2
64081: PPUSH
64082: LD_VAR 0 1
64086: PUSH
64087: LD_VAR 0 3
64091: ARRAY
64092: PPUSH
64093: CALL 68746 0 2
64097: ST_TO_ADDR
64098: GO 64069
64100: POP
64101: POP
// end ;
64102: LD_VAR 0 2
64106: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64107: LD_INT 0
64109: PPUSH
64110: PPUSH
64111: PPUSH
64112: PPUSH
64113: PPUSH
64114: PPUSH
// if not unit or not hexes then
64115: LD_VAR 0 1
64119: NOT
64120: PUSH
64121: LD_VAR 0 2
64125: NOT
64126: OR
64127: IFFALSE 64131
// exit ;
64129: GO 64254
// dist := 9999 ;
64131: LD_ADDR_VAR 0 5
64135: PUSH
64136: LD_INT 9999
64138: ST_TO_ADDR
// for i = 1 to hexes do
64139: LD_ADDR_VAR 0 4
64143: PUSH
64144: DOUBLE
64145: LD_INT 1
64147: DEC
64148: ST_TO_ADDR
64149: LD_VAR 0 2
64153: PUSH
64154: FOR_TO
64155: IFFALSE 64242
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64157: LD_ADDR_VAR 0 6
64161: PUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_VAR 0 2
64171: PUSH
64172: LD_VAR 0 4
64176: ARRAY
64177: PUSH
64178: LD_INT 1
64180: ARRAY
64181: PPUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_VAR 0 4
64191: ARRAY
64192: PUSH
64193: LD_INT 2
64195: ARRAY
64196: PPUSH
64197: CALL_OW 297
64201: ST_TO_ADDR
// if tdist < dist then
64202: LD_VAR 0 6
64206: PUSH
64207: LD_VAR 0 5
64211: LESS
64212: IFFALSE 64240
// begin hex := hexes [ i ] ;
64214: LD_ADDR_VAR 0 8
64218: PUSH
64219: LD_VAR 0 2
64223: PUSH
64224: LD_VAR 0 4
64228: ARRAY
64229: ST_TO_ADDR
// dist := tdist ;
64230: LD_ADDR_VAR 0 5
64234: PUSH
64235: LD_VAR 0 6
64239: ST_TO_ADDR
// end ; end ;
64240: GO 64154
64242: POP
64243: POP
// result := hex ;
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: LD_VAR 0 8
64253: ST_TO_ADDR
// end ;
64254: LD_VAR 0 3
64258: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64259: LD_INT 0
64261: PPUSH
64262: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64263: LD_VAR 0 1
64267: NOT
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 21
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 23
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PPUSH
64298: CALL_OW 69
64302: IN
64303: NOT
64304: OR
64305: IFFALSE 64309
// exit ;
64307: GO 64356
// for i = 1 to 3 do
64309: LD_ADDR_VAR 0 3
64313: PUSH
64314: DOUBLE
64315: LD_INT 1
64317: DEC
64318: ST_TO_ADDR
64319: LD_INT 3
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64354
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64325: LD_VAR 0 1
64329: PPUSH
64330: CALL_OW 250
64334: PPUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: CALL_OW 251
64344: PPUSH
64345: LD_INT 1
64347: PPUSH
64348: CALL_OW 453
64352: GO 64322
64354: POP
64355: POP
// end ;
64356: LD_VAR 0 2
64360: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64361: LD_INT 0
64363: PPUSH
64364: PPUSH
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64369: LD_VAR 0 1
64373: NOT
64374: PUSH
64375: LD_VAR 0 2
64379: NOT
64380: OR
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 314
64391: OR
64392: IFFALSE 64396
// exit ;
64394: GO 64863
// if GetLives ( i ) < 250 then
64396: LD_VAR 0 4
64400: PPUSH
64401: CALL_OW 256
64405: PUSH
64406: LD_INT 250
64408: LESS
64409: IFFALSE 64422
// begin ComAutodestruct ( i ) ;
64411: LD_VAR 0 4
64415: PPUSH
64416: CALL 64259 0 1
// exit ;
64420: GO 64863
// end ; x := GetX ( enemy_unit ) ;
64422: LD_ADDR_VAR 0 7
64426: PUSH
64427: LD_VAR 0 2
64431: PPUSH
64432: CALL_OW 250
64436: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64437: LD_ADDR_VAR 0 8
64441: PUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: CALL_OW 251
64451: ST_TO_ADDR
// if not x or not y then
64452: LD_VAR 0 7
64456: NOT
64457: PUSH
64458: LD_VAR 0 8
64462: NOT
64463: OR
64464: IFFALSE 64468
// exit ;
64466: GO 64863
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64468: LD_ADDR_VAR 0 6
64472: PUSH
64473: LD_VAR 0 7
64477: PPUSH
64478: LD_INT 0
64480: PPUSH
64481: LD_INT 4
64483: PPUSH
64484: CALL_OW 272
64488: PUSH
64489: LD_VAR 0 8
64493: PPUSH
64494: LD_INT 0
64496: PPUSH
64497: LD_INT 4
64499: PPUSH
64500: CALL_OW 273
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_VAR 0 7
64513: PPUSH
64514: LD_INT 1
64516: PPUSH
64517: LD_INT 4
64519: PPUSH
64520: CALL_OW 272
64524: PUSH
64525: LD_VAR 0 8
64529: PPUSH
64530: LD_INT 1
64532: PPUSH
64533: LD_INT 4
64535: PPUSH
64536: CALL_OW 273
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_VAR 0 7
64549: PPUSH
64550: LD_INT 2
64552: PPUSH
64553: LD_INT 4
64555: PPUSH
64556: CALL_OW 272
64560: PUSH
64561: LD_VAR 0 8
64565: PPUSH
64566: LD_INT 2
64568: PPUSH
64569: LD_INT 4
64571: PPUSH
64572: CALL_OW 273
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_VAR 0 7
64585: PPUSH
64586: LD_INT 3
64588: PPUSH
64589: LD_INT 4
64591: PPUSH
64592: CALL_OW 272
64596: PUSH
64597: LD_VAR 0 8
64601: PPUSH
64602: LD_INT 3
64604: PPUSH
64605: LD_INT 4
64607: PPUSH
64608: CALL_OW 273
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_VAR 0 7
64621: PPUSH
64622: LD_INT 4
64624: PPUSH
64625: LD_INT 4
64627: PPUSH
64628: CALL_OW 272
64632: PUSH
64633: LD_VAR 0 8
64637: PPUSH
64638: LD_INT 4
64640: PPUSH
64641: LD_INT 4
64643: PPUSH
64644: CALL_OW 273
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_VAR 0 7
64657: PPUSH
64658: LD_INT 5
64660: PPUSH
64661: LD_INT 4
64663: PPUSH
64664: CALL_OW 272
64668: PUSH
64669: LD_VAR 0 8
64673: PPUSH
64674: LD_INT 5
64676: PPUSH
64677: LD_INT 4
64679: PPUSH
64680: CALL_OW 273
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// for i = tmp downto 1 do
64697: LD_ADDR_VAR 0 4
64701: PUSH
64702: DOUBLE
64703: LD_VAR 0 6
64707: INC
64708: ST_TO_ADDR
64709: LD_INT 1
64711: PUSH
64712: FOR_DOWNTO
64713: IFFALSE 64814
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64715: LD_VAR 0 6
64719: PUSH
64720: LD_VAR 0 4
64724: ARRAY
64725: PUSH
64726: LD_INT 1
64728: ARRAY
64729: PPUSH
64730: LD_VAR 0 6
64734: PUSH
64735: LD_VAR 0 4
64739: ARRAY
64740: PUSH
64741: LD_INT 2
64743: ARRAY
64744: PPUSH
64745: CALL_OW 488
64749: NOT
64750: PUSH
64751: LD_VAR 0 6
64755: PUSH
64756: LD_VAR 0 4
64760: ARRAY
64761: PUSH
64762: LD_INT 1
64764: ARRAY
64765: PPUSH
64766: LD_VAR 0 6
64770: PUSH
64771: LD_VAR 0 4
64775: ARRAY
64776: PUSH
64777: LD_INT 2
64779: ARRAY
64780: PPUSH
64781: CALL_OW 428
64785: PUSH
64786: LD_INT 0
64788: NONEQUAL
64789: OR
64790: IFFALSE 64812
// tmp := Delete ( tmp , i ) ;
64792: LD_ADDR_VAR 0 6
64796: PUSH
64797: LD_VAR 0 6
64801: PPUSH
64802: LD_VAR 0 4
64806: PPUSH
64807: CALL_OW 3
64811: ST_TO_ADDR
64812: GO 64712
64814: POP
64815: POP
// j := GetClosestHex ( unit , tmp ) ;
64816: LD_ADDR_VAR 0 5
64820: PUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: LD_VAR 0 6
64830: PPUSH
64831: CALL 64107 0 2
64835: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64836: LD_VAR 0 1
64840: PPUSH
64841: LD_VAR 0 5
64845: PUSH
64846: LD_INT 1
64848: ARRAY
64849: PPUSH
64850: LD_VAR 0 5
64854: PUSH
64855: LD_INT 2
64857: ARRAY
64858: PPUSH
64859: CALL_OW 111
// end ;
64863: LD_VAR 0 3
64867: RET
// export function PrepareApemanSoldier ( ) ; begin
64868: LD_INT 0
64870: PPUSH
// uc_nation := 0 ;
64871: LD_ADDR_OWVAR 21
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// hc_sex := sex_male ;
64879: LD_ADDR_OWVAR 27
64883: PUSH
64884: LD_INT 1
64886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64887: LD_ADDR_OWVAR 28
64891: PUSH
64892: LD_INT 15
64894: ST_TO_ADDR
// hc_gallery :=  ;
64895: LD_ADDR_OWVAR 33
64899: PUSH
64900: LD_STRING 
64902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64903: LD_ADDR_OWVAR 31
64907: PUSH
64908: LD_INT 0
64910: PPUSH
64911: LD_INT 3
64913: PPUSH
64914: CALL_OW 12
64918: PUSH
64919: LD_INT 0
64921: PPUSH
64922: LD_INT 3
64924: PPUSH
64925: CALL_OW 12
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// end ;
64942: LD_VAR 0 1
64946: RET
// export function PrepareApemanEngineer ( ) ; begin
64947: LD_INT 0
64949: PPUSH
// uc_nation := 0 ;
64950: LD_ADDR_OWVAR 21
64954: PUSH
64955: LD_INT 0
64957: ST_TO_ADDR
// hc_sex := sex_male ;
64958: LD_ADDR_OWVAR 27
64962: PUSH
64963: LD_INT 1
64965: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64966: LD_ADDR_OWVAR 28
64970: PUSH
64971: LD_INT 16
64973: ST_TO_ADDR
// hc_gallery :=  ;
64974: LD_ADDR_OWVAR 33
64978: PUSH
64979: LD_STRING 
64981: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64982: LD_ADDR_OWVAR 31
64986: PUSH
64987: LD_INT 0
64989: PPUSH
64990: LD_INT 3
64992: PPUSH
64993: CALL_OW 12
64997: PUSH
64998: LD_INT 0
65000: PPUSH
65001: LD_INT 3
65003: PPUSH
65004: CALL_OW 12
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// end ;
65021: LD_VAR 0 1
65025: RET
// export function PrepareApeman ( agressivity ) ; begin
65026: LD_INT 0
65028: PPUSH
// uc_side := 0 ;
65029: LD_ADDR_OWVAR 20
65033: PUSH
65034: LD_INT 0
65036: ST_TO_ADDR
// uc_nation := 0 ;
65037: LD_ADDR_OWVAR 21
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
// hc_sex := sex_male ;
65045: LD_ADDR_OWVAR 27
65049: PUSH
65050: LD_INT 1
65052: ST_TO_ADDR
// hc_class := class_apeman ;
65053: LD_ADDR_OWVAR 28
65057: PUSH
65058: LD_INT 12
65060: ST_TO_ADDR
// hc_gallery :=  ;
65061: LD_ADDR_OWVAR 33
65065: PUSH
65066: LD_STRING 
65068: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65069: LD_ADDR_OWVAR 35
65073: PUSH
65074: LD_VAR 0 1
65078: NEG
65079: PPUSH
65080: LD_VAR 0 1
65084: PPUSH
65085: CALL_OW 12
65089: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65090: LD_ADDR_OWVAR 31
65094: PUSH
65095: LD_INT 0
65097: PPUSH
65098: LD_INT 3
65100: PPUSH
65101: CALL_OW 12
65105: PUSH
65106: LD_INT 0
65108: PPUSH
65109: LD_INT 3
65111: PPUSH
65112: CALL_OW 12
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: ST_TO_ADDR
// end ;
65129: LD_VAR 0 2
65133: RET
// export function PrepareTiger ( agressivity ) ; begin
65134: LD_INT 0
65136: PPUSH
// uc_side := 0 ;
65137: LD_ADDR_OWVAR 20
65141: PUSH
65142: LD_INT 0
65144: ST_TO_ADDR
// uc_nation := 0 ;
65145: LD_ADDR_OWVAR 21
65149: PUSH
65150: LD_INT 0
65152: ST_TO_ADDR
// hc_class := class_tiger ;
65153: LD_ADDR_OWVAR 28
65157: PUSH
65158: LD_INT 14
65160: ST_TO_ADDR
// hc_gallery :=  ;
65161: LD_ADDR_OWVAR 33
65165: PUSH
65166: LD_STRING 
65168: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65169: LD_ADDR_OWVAR 35
65173: PUSH
65174: LD_VAR 0 1
65178: NEG
65179: PPUSH
65180: LD_VAR 0 1
65184: PPUSH
65185: CALL_OW 12
65189: ST_TO_ADDR
// end ;
65190: LD_VAR 0 2
65194: RET
// export function PrepareEnchidna ( ) ; begin
65195: LD_INT 0
65197: PPUSH
// uc_side := 0 ;
65198: LD_ADDR_OWVAR 20
65202: PUSH
65203: LD_INT 0
65205: ST_TO_ADDR
// uc_nation := 0 ;
65206: LD_ADDR_OWVAR 21
65210: PUSH
65211: LD_INT 0
65213: ST_TO_ADDR
// hc_class := class_baggie ;
65214: LD_ADDR_OWVAR 28
65218: PUSH
65219: LD_INT 13
65221: ST_TO_ADDR
// hc_gallery :=  ;
65222: LD_ADDR_OWVAR 33
65226: PUSH
65227: LD_STRING 
65229: ST_TO_ADDR
// end ;
65230: LD_VAR 0 1
65234: RET
// export function PrepareFrog ( ) ; begin
65235: LD_INT 0
65237: PPUSH
// uc_side := 0 ;
65238: LD_ADDR_OWVAR 20
65242: PUSH
65243: LD_INT 0
65245: ST_TO_ADDR
// uc_nation := 0 ;
65246: LD_ADDR_OWVAR 21
65250: PUSH
65251: LD_INT 0
65253: ST_TO_ADDR
// hc_class := class_frog ;
65254: LD_ADDR_OWVAR 28
65258: PUSH
65259: LD_INT 19
65261: ST_TO_ADDR
// hc_gallery :=  ;
65262: LD_ADDR_OWVAR 33
65266: PUSH
65267: LD_STRING 
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 1
65274: RET
// export function PrepareFish ( ) ; begin
65275: LD_INT 0
65277: PPUSH
// uc_side := 0 ;
65278: LD_ADDR_OWVAR 20
65282: PUSH
65283: LD_INT 0
65285: ST_TO_ADDR
// uc_nation := 0 ;
65286: LD_ADDR_OWVAR 21
65290: PUSH
65291: LD_INT 0
65293: ST_TO_ADDR
// hc_class := class_fish ;
65294: LD_ADDR_OWVAR 28
65298: PUSH
65299: LD_INT 20
65301: ST_TO_ADDR
// hc_gallery :=  ;
65302: LD_ADDR_OWVAR 33
65306: PUSH
65307: LD_STRING 
65309: ST_TO_ADDR
// end ;
65310: LD_VAR 0 1
65314: RET
// export function PrepareBird ( ) ; begin
65315: LD_INT 0
65317: PPUSH
// uc_side := 0 ;
65318: LD_ADDR_OWVAR 20
65322: PUSH
65323: LD_INT 0
65325: ST_TO_ADDR
// uc_nation := 0 ;
65326: LD_ADDR_OWVAR 21
65330: PUSH
65331: LD_INT 0
65333: ST_TO_ADDR
// hc_class := class_phororhacos ;
65334: LD_ADDR_OWVAR 28
65338: PUSH
65339: LD_INT 18
65341: ST_TO_ADDR
// hc_gallery :=  ;
65342: LD_ADDR_OWVAR 33
65346: PUSH
65347: LD_STRING 
65349: ST_TO_ADDR
// end ;
65350: LD_VAR 0 1
65354: RET
// export function PrepareHorse ( ) ; begin
65355: LD_INT 0
65357: PPUSH
// uc_side := 0 ;
65358: LD_ADDR_OWVAR 20
65362: PUSH
65363: LD_INT 0
65365: ST_TO_ADDR
// uc_nation := 0 ;
65366: LD_ADDR_OWVAR 21
65370: PUSH
65371: LD_INT 0
65373: ST_TO_ADDR
// hc_class := class_horse ;
65374: LD_ADDR_OWVAR 28
65378: PUSH
65379: LD_INT 21
65381: ST_TO_ADDR
// hc_gallery :=  ;
65382: LD_ADDR_OWVAR 33
65386: PUSH
65387: LD_STRING 
65389: ST_TO_ADDR
// end ;
65390: LD_VAR 0 1
65394: RET
// export function PrepareMastodont ( ) ; begin
65395: LD_INT 0
65397: PPUSH
// uc_side := 0 ;
65398: LD_ADDR_OWVAR 20
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
// uc_nation := 0 ;
65406: LD_ADDR_OWVAR 21
65410: PUSH
65411: LD_INT 0
65413: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65414: LD_ADDR_OWVAR 37
65418: PUSH
65419: LD_INT 31
65421: ST_TO_ADDR
// vc_control := control_rider ;
65422: LD_ADDR_OWVAR 38
65426: PUSH
65427: LD_INT 4
65429: ST_TO_ADDR
// end ;
65430: LD_VAR 0 1
65434: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
65439: PPUSH
// uc_side = 0 ;
65440: LD_ADDR_OWVAR 20
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
// uc_nation = 0 ;
65448: LD_ADDR_OWVAR 21
65452: PUSH
65453: LD_INT 0
65455: ST_TO_ADDR
// InitHc_All ( ) ;
65456: CALL_OW 584
// InitVc ;
65460: CALL_OW 20
// if mastodonts then
65464: LD_VAR 0 6
65468: IFFALSE 65535
// for i = 1 to mastodonts do
65470: LD_ADDR_VAR 0 11
65474: PUSH
65475: DOUBLE
65476: LD_INT 1
65478: DEC
65479: ST_TO_ADDR
65480: LD_VAR 0 6
65484: PUSH
65485: FOR_TO
65486: IFFALSE 65533
// begin vc_chassis := 31 ;
65488: LD_ADDR_OWVAR 37
65492: PUSH
65493: LD_INT 31
65495: ST_TO_ADDR
// vc_control := control_rider ;
65496: LD_ADDR_OWVAR 38
65500: PUSH
65501: LD_INT 4
65503: ST_TO_ADDR
// animal := CreateVehicle ;
65504: LD_ADDR_VAR 0 12
65508: PUSH
65509: CALL_OW 45
65513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65514: LD_VAR 0 12
65518: PPUSH
65519: LD_VAR 0 8
65523: PPUSH
65524: LD_INT 0
65526: PPUSH
65527: CALL 67663 0 3
// end ;
65531: GO 65485
65533: POP
65534: POP
// if horses then
65535: LD_VAR 0 5
65539: IFFALSE 65606
// for i = 1 to horses do
65541: LD_ADDR_VAR 0 11
65545: PUSH
65546: DOUBLE
65547: LD_INT 1
65549: DEC
65550: ST_TO_ADDR
65551: LD_VAR 0 5
65555: PUSH
65556: FOR_TO
65557: IFFALSE 65604
// begin hc_class := 21 ;
65559: LD_ADDR_OWVAR 28
65563: PUSH
65564: LD_INT 21
65566: ST_TO_ADDR
// hc_gallery :=  ;
65567: LD_ADDR_OWVAR 33
65571: PUSH
65572: LD_STRING 
65574: ST_TO_ADDR
// animal := CreateHuman ;
65575: LD_ADDR_VAR 0 12
65579: PUSH
65580: CALL_OW 44
65584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65585: LD_VAR 0 12
65589: PPUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: LD_INT 0
65597: PPUSH
65598: CALL 67663 0 3
// end ;
65602: GO 65556
65604: POP
65605: POP
// if birds then
65606: LD_VAR 0 1
65610: IFFALSE 65677
// for i = 1 to birds do
65612: LD_ADDR_VAR 0 11
65616: PUSH
65617: DOUBLE
65618: LD_INT 1
65620: DEC
65621: ST_TO_ADDR
65622: LD_VAR 0 1
65626: PUSH
65627: FOR_TO
65628: IFFALSE 65675
// begin hc_class = 18 ;
65630: LD_ADDR_OWVAR 28
65634: PUSH
65635: LD_INT 18
65637: ST_TO_ADDR
// hc_gallery =  ;
65638: LD_ADDR_OWVAR 33
65642: PUSH
65643: LD_STRING 
65645: ST_TO_ADDR
// animal := CreateHuman ;
65646: LD_ADDR_VAR 0 12
65650: PUSH
65651: CALL_OW 44
65655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65656: LD_VAR 0 12
65660: PPUSH
65661: LD_VAR 0 8
65665: PPUSH
65666: LD_INT 0
65668: PPUSH
65669: CALL 67663 0 3
// end ;
65673: GO 65627
65675: POP
65676: POP
// if tigers then
65677: LD_VAR 0 2
65681: IFFALSE 65765
// for i = 1 to tigers do
65683: LD_ADDR_VAR 0 11
65687: PUSH
65688: DOUBLE
65689: LD_INT 1
65691: DEC
65692: ST_TO_ADDR
65693: LD_VAR 0 2
65697: PUSH
65698: FOR_TO
65699: IFFALSE 65763
// begin hc_class = class_tiger ;
65701: LD_ADDR_OWVAR 28
65705: PUSH
65706: LD_INT 14
65708: ST_TO_ADDR
// hc_gallery =  ;
65709: LD_ADDR_OWVAR 33
65713: PUSH
65714: LD_STRING 
65716: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65717: LD_ADDR_OWVAR 35
65721: PUSH
65722: LD_INT 7
65724: NEG
65725: PPUSH
65726: LD_INT 7
65728: PPUSH
65729: CALL_OW 12
65733: ST_TO_ADDR
// animal := CreateHuman ;
65734: LD_ADDR_VAR 0 12
65738: PUSH
65739: CALL_OW 44
65743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65744: LD_VAR 0 12
65748: PPUSH
65749: LD_VAR 0 8
65753: PPUSH
65754: LD_INT 0
65756: PPUSH
65757: CALL 67663 0 3
// end ;
65761: GO 65698
65763: POP
65764: POP
// if apemans then
65765: LD_VAR 0 3
65769: IFFALSE 65892
// for i = 1 to apemans do
65771: LD_ADDR_VAR 0 11
65775: PUSH
65776: DOUBLE
65777: LD_INT 1
65779: DEC
65780: ST_TO_ADDR
65781: LD_VAR 0 3
65785: PUSH
65786: FOR_TO
65787: IFFALSE 65890
// begin hc_class = class_apeman ;
65789: LD_ADDR_OWVAR 28
65793: PUSH
65794: LD_INT 12
65796: ST_TO_ADDR
// hc_gallery =  ;
65797: LD_ADDR_OWVAR 33
65801: PUSH
65802: LD_STRING 
65804: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65805: LD_ADDR_OWVAR 35
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PPUSH
65814: LD_INT 2
65816: PPUSH
65817: CALL_OW 12
65821: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65822: LD_ADDR_OWVAR 31
65826: PUSH
65827: LD_INT 1
65829: PPUSH
65830: LD_INT 3
65832: PPUSH
65833: CALL_OW 12
65837: PUSH
65838: LD_INT 1
65840: PPUSH
65841: LD_INT 3
65843: PPUSH
65844: CALL_OW 12
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// animal := CreateHuman ;
65861: LD_ADDR_VAR 0 12
65865: PUSH
65866: CALL_OW 44
65870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65871: LD_VAR 0 12
65875: PPUSH
65876: LD_VAR 0 8
65880: PPUSH
65881: LD_INT 0
65883: PPUSH
65884: CALL 67663 0 3
// end ;
65888: GO 65786
65890: POP
65891: POP
// if enchidnas then
65892: LD_VAR 0 4
65896: IFFALSE 65963
// for i = 1 to enchidnas do
65898: LD_ADDR_VAR 0 11
65902: PUSH
65903: DOUBLE
65904: LD_INT 1
65906: DEC
65907: ST_TO_ADDR
65908: LD_VAR 0 4
65912: PUSH
65913: FOR_TO
65914: IFFALSE 65961
// begin hc_class = 13 ;
65916: LD_ADDR_OWVAR 28
65920: PUSH
65921: LD_INT 13
65923: ST_TO_ADDR
// hc_gallery =  ;
65924: LD_ADDR_OWVAR 33
65928: PUSH
65929: LD_STRING 
65931: ST_TO_ADDR
// animal := CreateHuman ;
65932: LD_ADDR_VAR 0 12
65936: PUSH
65937: CALL_OW 44
65941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65942: LD_VAR 0 12
65946: PPUSH
65947: LD_VAR 0 8
65951: PPUSH
65952: LD_INT 0
65954: PPUSH
65955: CALL 67663 0 3
// end ;
65959: GO 65913
65961: POP
65962: POP
// if fishes then
65963: LD_VAR 0 7
65967: IFFALSE 66034
// for i = 1 to fishes do
65969: LD_ADDR_VAR 0 11
65973: PUSH
65974: DOUBLE
65975: LD_INT 1
65977: DEC
65978: ST_TO_ADDR
65979: LD_VAR 0 7
65983: PUSH
65984: FOR_TO
65985: IFFALSE 66032
// begin hc_class = 20 ;
65987: LD_ADDR_OWVAR 28
65991: PUSH
65992: LD_INT 20
65994: ST_TO_ADDR
// hc_gallery =  ;
65995: LD_ADDR_OWVAR 33
65999: PUSH
66000: LD_STRING 
66002: ST_TO_ADDR
// animal := CreateHuman ;
66003: LD_ADDR_VAR 0 12
66007: PUSH
66008: CALL_OW 44
66012: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66013: LD_VAR 0 12
66017: PPUSH
66018: LD_VAR 0 9
66022: PPUSH
66023: LD_INT 0
66025: PPUSH
66026: CALL 67663 0 3
// end ;
66030: GO 65984
66032: POP
66033: POP
// end ;
66034: LD_VAR 0 10
66038: RET
// export function WantHeal ( sci , unit ) ; begin
66039: LD_INT 0
66041: PPUSH
// if GetTaskList ( sci ) > 0 then
66042: LD_VAR 0 1
66046: PPUSH
66047: CALL_OW 437
66051: PUSH
66052: LD_INT 0
66054: GREATER
66055: IFFALSE 66125
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL_OW 437
66066: PUSH
66067: LD_INT 1
66069: ARRAY
66070: PUSH
66071: LD_INT 1
66073: ARRAY
66074: PUSH
66075: LD_STRING l
66077: EQUAL
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 437
66088: PUSH
66089: LD_INT 1
66091: ARRAY
66092: PUSH
66093: LD_INT 4
66095: ARRAY
66096: PUSH
66097: LD_VAR 0 2
66101: EQUAL
66102: AND
66103: IFFALSE 66115
// result := true else
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: LD_INT 1
66112: ST_TO_ADDR
66113: GO 66123
// result := false ;
66115: LD_ADDR_VAR 0 3
66119: PUSH
66120: LD_INT 0
66122: ST_TO_ADDR
// end else
66123: GO 66133
// result := false ;
66125: LD_ADDR_VAR 0 3
66129: PUSH
66130: LD_INT 0
66132: ST_TO_ADDR
// end ;
66133: LD_VAR 0 3
66137: RET
// export function HealTarget ( sci ) ; begin
66138: LD_INT 0
66140: PPUSH
// if not sci then
66141: LD_VAR 0 1
66145: NOT
66146: IFFALSE 66150
// exit ;
66148: GO 66215
// result := 0 ;
66150: LD_ADDR_VAR 0 2
66154: PUSH
66155: LD_INT 0
66157: ST_TO_ADDR
// if GetTaskList ( sci ) then
66158: LD_VAR 0 1
66162: PPUSH
66163: CALL_OW 437
66167: IFFALSE 66215
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66169: LD_VAR 0 1
66173: PPUSH
66174: CALL_OW 437
66178: PUSH
66179: LD_INT 1
66181: ARRAY
66182: PUSH
66183: LD_INT 1
66185: ARRAY
66186: PUSH
66187: LD_STRING l
66189: EQUAL
66190: IFFALSE 66215
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66192: LD_ADDR_VAR 0 2
66196: PUSH
66197: LD_VAR 0 1
66201: PPUSH
66202: CALL_OW 437
66206: PUSH
66207: LD_INT 1
66209: ARRAY
66210: PUSH
66211: LD_INT 4
66213: ARRAY
66214: ST_TO_ADDR
// end ;
66215: LD_VAR 0 2
66219: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66220: LD_INT 0
66222: PPUSH
66223: PPUSH
66224: PPUSH
66225: PPUSH
// if not base_units then
66226: LD_VAR 0 1
66230: NOT
66231: IFFALSE 66235
// exit ;
66233: GO 66322
// result := false ;
66235: LD_ADDR_VAR 0 2
66239: PUSH
66240: LD_INT 0
66242: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: LD_VAR 0 1
66252: PPUSH
66253: LD_INT 21
66255: PUSH
66256: LD_INT 3
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PPUSH
66263: CALL_OW 72
66267: ST_TO_ADDR
// if not tmp then
66268: LD_VAR 0 5
66272: NOT
66273: IFFALSE 66277
// exit ;
66275: GO 66322
// for i in tmp do
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_VAR 0 5
66286: PUSH
66287: FOR_IN
66288: IFFALSE 66320
// begin result := EnemyInRange ( i , 22 ) ;
66290: LD_ADDR_VAR 0 2
66294: PUSH
66295: LD_VAR 0 3
66299: PPUSH
66300: LD_INT 22
66302: PPUSH
66303: CALL 63909 0 2
66307: ST_TO_ADDR
// if result then
66308: LD_VAR 0 2
66312: IFFALSE 66318
// exit ;
66314: POP
66315: POP
66316: GO 66322
// end ;
66318: GO 66287
66320: POP
66321: POP
// end ;
66322: LD_VAR 0 2
66326: RET
// export function FilterByTag ( units , tag ) ; begin
66327: LD_INT 0
66329: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66330: LD_ADDR_VAR 0 3
66334: PUSH
66335: LD_VAR 0 1
66339: PPUSH
66340: LD_INT 120
66342: PUSH
66343: LD_VAR 0 2
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PPUSH
66352: CALL_OW 72
66356: ST_TO_ADDR
// end ;
66357: LD_VAR 0 3
66361: RET
// export function IsDriver ( un ) ; begin
66362: LD_INT 0
66364: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66365: LD_ADDR_VAR 0 2
66369: PUSH
66370: LD_VAR 0 1
66374: PUSH
66375: LD_INT 55
66377: PUSH
66378: EMPTY
66379: LIST
66380: PPUSH
66381: CALL_OW 69
66385: IN
66386: ST_TO_ADDR
// end ;
66387: LD_VAR 0 2
66391: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66392: LD_INT 0
66394: PPUSH
66395: PPUSH
// list := [ ] ;
66396: LD_ADDR_VAR 0 5
66400: PUSH
66401: EMPTY
66402: ST_TO_ADDR
// case d of 0 :
66403: LD_VAR 0 3
66407: PUSH
66408: LD_INT 0
66410: DOUBLE
66411: EQUAL
66412: IFTRUE 66416
66414: GO 66549
66416: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66417: LD_ADDR_VAR 0 5
66421: PUSH
66422: LD_VAR 0 1
66426: PUSH
66427: LD_INT 4
66429: MINUS
66430: PUSH
66431: LD_VAR 0 2
66435: PUSH
66436: LD_INT 4
66438: MINUS
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: PUSH
66448: LD_VAR 0 1
66452: PUSH
66453: LD_INT 3
66455: MINUS
66456: PUSH
66457: LD_VAR 0 2
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: PUSH
66470: LD_VAR 0 1
66474: PUSH
66475: LD_INT 4
66477: PLUS
66478: PUSH
66479: LD_VAR 0 2
66483: PUSH
66484: LD_INT 4
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 1
66496: PUSH
66497: LD_INT 3
66499: PLUS
66500: PUSH
66501: LD_VAR 0 2
66505: PUSH
66506: LD_INT 3
66508: PLUS
66509: PUSH
66510: LD_INT 5
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: PUSH
66518: LD_VAR 0 1
66522: PUSH
66523: LD_VAR 0 2
66527: PUSH
66528: LD_INT 4
66530: PLUS
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: ST_TO_ADDR
// end ; 1 :
66547: GO 67247
66549: LD_INT 1
66551: DOUBLE
66552: EQUAL
66553: IFTRUE 66557
66555: GO 66690
66557: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66558: LD_ADDR_VAR 0 5
66562: PUSH
66563: LD_VAR 0 1
66567: PUSH
66568: LD_VAR 0 2
66572: PUSH
66573: LD_INT 4
66575: MINUS
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: PUSH
66585: LD_VAR 0 1
66589: PUSH
66590: LD_INT 3
66592: MINUS
66593: PUSH
66594: LD_VAR 0 2
66598: PUSH
66599: LD_INT 3
66601: MINUS
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: PUSH
66611: LD_VAR 0 1
66615: PUSH
66616: LD_INT 4
66618: MINUS
66619: PUSH
66620: LD_VAR 0 2
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: PUSH
66633: LD_VAR 0 1
66637: PUSH
66638: LD_VAR 0 2
66642: PUSH
66643: LD_INT 3
66645: PLUS
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: PUSH
66655: LD_VAR 0 1
66659: PUSH
66660: LD_INT 4
66662: PLUS
66663: PUSH
66664: LD_VAR 0 2
66668: PUSH
66669: LD_INT 4
66671: PLUS
66672: PUSH
66673: LD_INT 5
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: ST_TO_ADDR
// end ; 2 :
66688: GO 67247
66690: LD_INT 2
66692: DOUBLE
66693: EQUAL
66694: IFTRUE 66698
66696: GO 66827
66698: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 1
66708: PUSH
66709: LD_VAR 0 2
66713: PUSH
66714: LD_INT 3
66716: MINUS
66717: PUSH
66718: LD_INT 3
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: PUSH
66726: LD_VAR 0 1
66730: PUSH
66731: LD_INT 4
66733: PLUS
66734: PUSH
66735: LD_VAR 0 2
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 4
66760: PLUS
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PUSH
66770: LD_VAR 0 1
66774: PUSH
66775: LD_INT 3
66777: MINUS
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: PUSH
66792: LD_VAR 0 1
66796: PUSH
66797: LD_INT 4
66799: MINUS
66800: PUSH
66801: LD_VAR 0 2
66805: PUSH
66806: LD_INT 4
66808: MINUS
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: ST_TO_ADDR
// end ; 3 :
66825: GO 67247
66827: LD_INT 3
66829: DOUBLE
66830: EQUAL
66831: IFTRUE 66835
66833: GO 66968
66835: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66836: LD_ADDR_VAR 0 5
66840: PUSH
66841: LD_VAR 0 1
66845: PUSH
66846: LD_INT 3
66848: PLUS
66849: PUSH
66850: LD_VAR 0 2
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: LD_INT 4
66870: PLUS
66871: PUSH
66872: LD_VAR 0 2
66876: PUSH
66877: LD_INT 4
66879: PLUS
66880: PUSH
66881: LD_INT 5
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: PUSH
66889: LD_VAR 0 1
66893: PUSH
66894: LD_INT 4
66896: MINUS
66897: PUSH
66898: LD_VAR 0 2
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: PUSH
66911: LD_VAR 0 1
66915: PUSH
66916: LD_VAR 0 2
66920: PUSH
66921: LD_INT 4
66923: MINUS
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: PUSH
66933: LD_VAR 0 1
66937: PUSH
66938: LD_INT 3
66940: MINUS
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_INT 3
66949: MINUS
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: ST_TO_ADDR
// end ; 4 :
66966: GO 67247
66968: LD_INT 4
66970: DOUBLE
66971: EQUAL
66972: IFTRUE 66976
66974: GO 67109
66976: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66977: LD_ADDR_VAR 0 5
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_VAR 0 2
66991: PUSH
66992: LD_INT 4
66994: PLUS
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: PUSH
67004: LD_VAR 0 1
67008: PUSH
67009: LD_INT 3
67011: PLUS
67012: PUSH
67013: LD_VAR 0 2
67017: PUSH
67018: LD_INT 3
67020: PLUS
67021: PUSH
67022: LD_INT 5
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: PUSH
67030: LD_VAR 0 1
67034: PUSH
67035: LD_INT 4
67037: PLUS
67038: PUSH
67039: LD_VAR 0 2
67043: PUSH
67044: LD_INT 4
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: PUSH
67052: LD_VAR 0 1
67056: PUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_INT 3
67064: MINUS
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: PUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_INT 4
67081: MINUS
67082: PUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_INT 4
67090: MINUS
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// end ; 5 :
67107: GO 67247
67109: LD_INT 5
67111: DOUBLE
67112: EQUAL
67113: IFTRUE 67117
67115: GO 67246
67117: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67118: LD_ADDR_VAR 0 5
67122: PUSH
67123: LD_VAR 0 1
67127: PUSH
67128: LD_INT 4
67130: MINUS
67131: PUSH
67132: LD_VAR 0 2
67136: PUSH
67137: LD_INT 1
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: PUSH
67145: LD_VAR 0 1
67149: PUSH
67150: LD_VAR 0 2
67154: PUSH
67155: LD_INT 4
67157: MINUS
67158: PUSH
67159: LD_INT 3
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: PUSH
67167: LD_VAR 0 1
67171: PUSH
67172: LD_INT 4
67174: PLUS
67175: PUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_INT 4
67183: PLUS
67184: PUSH
67185: LD_INT 5
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: PUSH
67193: LD_VAR 0 1
67197: PUSH
67198: LD_INT 3
67200: PLUS
67201: PUSH
67202: LD_VAR 0 2
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: PUSH
67215: LD_VAR 0 1
67219: PUSH
67220: LD_VAR 0 2
67224: PUSH
67225: LD_INT 3
67227: PLUS
67228: PUSH
67229: LD_INT 0
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: ST_TO_ADDR
// end ; end ;
67244: GO 67247
67246: POP
// result := list ;
67247: LD_ADDR_VAR 0 4
67251: PUSH
67252: LD_VAR 0 5
67256: ST_TO_ADDR
// end ;
67257: LD_VAR 0 4
67261: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67262: LD_INT 0
67264: PPUSH
67265: PPUSH
67266: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67267: LD_VAR 0 1
67271: NOT
67272: PUSH
67273: LD_VAR 0 2
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 3
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: IN
67296: NOT
67297: OR
67298: IFFALSE 67302
// exit ;
67300: GO 67385
// tmp := [ ] ;
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: EMPTY
67308: ST_TO_ADDR
// for i in units do
67309: LD_ADDR_VAR 0 4
67313: PUSH
67314: LD_VAR 0 1
67318: PUSH
67319: FOR_IN
67320: IFFALSE 67354
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67322: LD_ADDR_VAR 0 5
67326: PUSH
67327: LD_VAR 0 5
67331: PPUSH
67332: LD_VAR 0 4
67336: PPUSH
67337: LD_VAR 0 2
67341: PPUSH
67342: CALL_OW 259
67346: PPUSH
67347: CALL 68746 0 2
67351: ST_TO_ADDR
67352: GO 67319
67354: POP
67355: POP
// if not tmp then
67356: LD_VAR 0 5
67360: NOT
67361: IFFALSE 67365
// exit ;
67363: GO 67385
// result := SortListByListDesc ( units , tmp ) ;
67365: LD_ADDR_VAR 0 3
67369: PUSH
67370: LD_VAR 0 1
67374: PPUSH
67375: LD_VAR 0 5
67379: PPUSH
67380: CALL_OW 77
67384: ST_TO_ADDR
// end ;
67385: LD_VAR 0 3
67389: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67390: LD_INT 0
67392: PPUSH
67393: PPUSH
67394: PPUSH
// result := false ;
67395: LD_ADDR_VAR 0 3
67399: PUSH
67400: LD_INT 0
67402: ST_TO_ADDR
// if not building then
67403: LD_VAR 0 2
67407: NOT
67408: IFFALSE 67412
// exit ;
67410: GO 67550
// x := GetX ( building ) ;
67412: LD_ADDR_VAR 0 4
67416: PUSH
67417: LD_VAR 0 2
67421: PPUSH
67422: CALL_OW 250
67426: ST_TO_ADDR
// y := GetY ( building ) ;
67427: LD_ADDR_VAR 0 5
67431: PUSH
67432: LD_VAR 0 2
67436: PPUSH
67437: CALL_OW 251
67441: ST_TO_ADDR
// if not x or not y then
67442: LD_VAR 0 4
67446: NOT
67447: PUSH
67448: LD_VAR 0 5
67452: NOT
67453: OR
67454: IFFALSE 67458
// exit ;
67456: GO 67550
// if GetTaskList ( unit ) then
67458: LD_VAR 0 1
67462: PPUSH
67463: CALL_OW 437
67467: IFFALSE 67550
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67469: LD_STRING e
67471: PUSH
67472: LD_VAR 0 1
67476: PPUSH
67477: CALL_OW 437
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PUSH
67486: LD_INT 1
67488: ARRAY
67489: EQUAL
67490: PUSH
67491: LD_VAR 0 4
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: CALL_OW 437
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_INT 2
67512: ARRAY
67513: EQUAL
67514: AND
67515: PUSH
67516: LD_VAR 0 5
67520: PUSH
67521: LD_VAR 0 1
67525: PPUSH
67526: CALL_OW 437
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_INT 3
67537: ARRAY
67538: EQUAL
67539: AND
67540: IFFALSE 67550
// result := true end ;
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_INT 1
67549: ST_TO_ADDR
// end ;
67550: LD_VAR 0 3
67554: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67555: LD_INT 0
67557: PPUSH
// result := false ;
67558: LD_ADDR_VAR 0 4
67562: PUSH
67563: LD_INT 0
67565: ST_TO_ADDR
// if GetTaskList ( unit ) then
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 437
67575: IFFALSE 67658
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67577: LD_STRING M
67579: PUSH
67580: LD_VAR 0 1
67584: PPUSH
67585: CALL_OW 437
67589: PUSH
67590: LD_INT 1
67592: ARRAY
67593: PUSH
67594: LD_INT 1
67596: ARRAY
67597: EQUAL
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_VAR 0 1
67608: PPUSH
67609: CALL_OW 437
67613: PUSH
67614: LD_INT 1
67616: ARRAY
67617: PUSH
67618: LD_INT 2
67620: ARRAY
67621: EQUAL
67622: AND
67623: PUSH
67624: LD_VAR 0 3
67628: PUSH
67629: LD_VAR 0 1
67633: PPUSH
67634: CALL_OW 437
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_INT 3
67645: ARRAY
67646: EQUAL
67647: AND
67648: IFFALSE 67658
// result := true ;
67650: LD_ADDR_VAR 0 4
67654: PUSH
67655: LD_INT 1
67657: ST_TO_ADDR
// end ; end ;
67658: LD_VAR 0 4
67662: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67663: LD_INT 0
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
// if not unit or not area then
67669: LD_VAR 0 1
67673: NOT
67674: PUSH
67675: LD_VAR 0 2
67679: NOT
67680: OR
67681: IFFALSE 67685
// exit ;
67683: GO 67849
// tmp := AreaToList ( area , i ) ;
67685: LD_ADDR_VAR 0 6
67689: PUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_VAR 0 5
67699: PPUSH
67700: CALL_OW 517
67704: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67705: LD_ADDR_VAR 0 5
67709: PUSH
67710: DOUBLE
67711: LD_INT 1
67713: DEC
67714: ST_TO_ADDR
67715: LD_VAR 0 6
67719: PUSH
67720: LD_INT 1
67722: ARRAY
67723: PUSH
67724: FOR_TO
67725: IFFALSE 67847
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67727: LD_ADDR_VAR 0 7
67731: PUSH
67732: LD_VAR 0 6
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_VAR 0 5
67745: ARRAY
67746: PUSH
67747: LD_VAR 0 6
67751: PUSH
67752: LD_INT 2
67754: ARRAY
67755: PUSH
67756: LD_VAR 0 5
67760: ARRAY
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67766: LD_VAR 0 7
67770: PUSH
67771: LD_INT 1
67773: ARRAY
67774: PPUSH
67775: LD_VAR 0 7
67779: PUSH
67780: LD_INT 2
67782: ARRAY
67783: PPUSH
67784: CALL_OW 428
67788: PUSH
67789: LD_INT 0
67791: EQUAL
67792: IFFALSE 67845
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67794: LD_VAR 0 1
67798: PPUSH
67799: LD_VAR 0 7
67803: PUSH
67804: LD_INT 1
67806: ARRAY
67807: PPUSH
67808: LD_VAR 0 7
67812: PUSH
67813: LD_INT 2
67815: ARRAY
67816: PPUSH
67817: LD_VAR 0 3
67821: PPUSH
67822: CALL_OW 48
// result := IsPlaced ( unit ) ;
67826: LD_ADDR_VAR 0 4
67830: PUSH
67831: LD_VAR 0 1
67835: PPUSH
67836: CALL_OW 305
67840: ST_TO_ADDR
// exit ;
67841: POP
67842: POP
67843: GO 67849
// end ; end ;
67845: GO 67724
67847: POP
67848: POP
// end ;
67849: LD_VAR 0 4
67853: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67854: LD_INT 0
67856: PPUSH
67857: PPUSH
67858: PPUSH
// if not side or side > 8 then
67859: LD_VAR 0 1
67863: NOT
67864: PUSH
67865: LD_VAR 0 1
67869: PUSH
67870: LD_INT 8
67872: GREATER
67873: OR
67874: IFFALSE 67878
// exit ;
67876: GO 68065
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67878: LD_ADDR_VAR 0 4
67882: PUSH
67883: LD_INT 22
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 21
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PPUSH
67909: CALL_OW 69
67913: ST_TO_ADDR
// if not tmp then
67914: LD_VAR 0 4
67918: NOT
67919: IFFALSE 67923
// exit ;
67921: GO 68065
// enable_addtolog := true ;
67923: LD_ADDR_OWVAR 81
67927: PUSH
67928: LD_INT 1
67930: ST_TO_ADDR
// AddToLog ( [ ) ;
67931: LD_STRING [
67933: PPUSH
67934: CALL_OW 561
// for i in tmp do
67938: LD_ADDR_VAR 0 3
67942: PUSH
67943: LD_VAR 0 4
67947: PUSH
67948: FOR_IN
67949: IFFALSE 68056
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67951: LD_STRING [
67953: PUSH
67954: LD_VAR 0 3
67958: PPUSH
67959: CALL_OW 266
67963: STR
67964: PUSH
67965: LD_STRING , 
67967: STR
67968: PUSH
67969: LD_VAR 0 3
67973: PPUSH
67974: CALL_OW 250
67978: STR
67979: PUSH
67980: LD_STRING , 
67982: STR
67983: PUSH
67984: LD_VAR 0 3
67988: PPUSH
67989: CALL_OW 251
67993: STR
67994: PUSH
67995: LD_STRING , 
67997: STR
67998: PUSH
67999: LD_VAR 0 3
68003: PPUSH
68004: CALL_OW 254
68008: STR
68009: PUSH
68010: LD_STRING , 
68012: STR
68013: PUSH
68014: LD_VAR 0 3
68018: PPUSH
68019: LD_INT 1
68021: PPUSH
68022: CALL_OW 268
68026: STR
68027: PUSH
68028: LD_STRING , 
68030: STR
68031: PUSH
68032: LD_VAR 0 3
68036: PPUSH
68037: LD_INT 2
68039: PPUSH
68040: CALL_OW 268
68044: STR
68045: PUSH
68046: LD_STRING ],
68048: STR
68049: PPUSH
68050: CALL_OW 561
// end ;
68054: GO 67948
68056: POP
68057: POP
// AddToLog ( ]; ) ;
68058: LD_STRING ];
68060: PPUSH
68061: CALL_OW 561
// end ;
68065: LD_VAR 0 2
68069: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68070: LD_INT 0
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
68076: PPUSH
// if not area or not rate or not max then
68077: LD_VAR 0 1
68081: NOT
68082: PUSH
68083: LD_VAR 0 2
68087: NOT
68088: OR
68089: PUSH
68090: LD_VAR 0 4
68094: NOT
68095: OR
68096: IFFALSE 68100
// exit ;
68098: GO 68289
// while 1 do
68100: LD_INT 1
68102: IFFALSE 68289
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68104: LD_ADDR_VAR 0 9
68108: PUSH
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_INT 1
68116: PPUSH
68117: CALL_OW 287
68121: PUSH
68122: LD_INT 10
68124: MUL
68125: ST_TO_ADDR
// r := rate / 10 ;
68126: LD_ADDR_VAR 0 7
68130: PUSH
68131: LD_VAR 0 2
68135: PUSH
68136: LD_INT 10
68138: DIVREAL
68139: ST_TO_ADDR
// time := 1 1$00 ;
68140: LD_ADDR_VAR 0 8
68144: PUSH
68145: LD_INT 2100
68147: ST_TO_ADDR
// if amount < min then
68148: LD_VAR 0 9
68152: PUSH
68153: LD_VAR 0 3
68157: LESS
68158: IFFALSE 68176
// r := r * 2 else
68160: LD_ADDR_VAR 0 7
68164: PUSH
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 2
68172: MUL
68173: ST_TO_ADDR
68174: GO 68202
// if amount > max then
68176: LD_VAR 0 9
68180: PUSH
68181: LD_VAR 0 4
68185: GREATER
68186: IFFALSE 68202
// r := r / 2 ;
68188: LD_ADDR_VAR 0 7
68192: PUSH
68193: LD_VAR 0 7
68197: PUSH
68198: LD_INT 2
68200: DIVREAL
68201: ST_TO_ADDR
// time := time / r ;
68202: LD_ADDR_VAR 0 8
68206: PUSH
68207: LD_VAR 0 8
68211: PUSH
68212: LD_VAR 0 7
68216: DIVREAL
68217: ST_TO_ADDR
// if time < 0 then
68218: LD_VAR 0 8
68222: PUSH
68223: LD_INT 0
68225: LESS
68226: IFFALSE 68243
// time := time * - 1 ;
68228: LD_ADDR_VAR 0 8
68232: PUSH
68233: LD_VAR 0 8
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: MUL
68242: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68243: LD_VAR 0 8
68247: PUSH
68248: LD_INT 35
68250: PPUSH
68251: LD_INT 875
68253: PPUSH
68254: CALL_OW 12
68258: PLUS
68259: PPUSH
68260: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68264: LD_INT 1
68266: PPUSH
68267: LD_INT 5
68269: PPUSH
68270: CALL_OW 12
68274: PPUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_INT 1
68282: PPUSH
68283: CALL_OW 55
// end ;
68287: GO 68100
// end ;
68289: LD_VAR 0 5
68293: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
68301: PPUSH
68302: PPUSH
68303: PPUSH
// if not turrets or not factories then
68304: LD_VAR 0 1
68308: NOT
68309: PUSH
68310: LD_VAR 0 2
68314: NOT
68315: OR
68316: IFFALSE 68320
// exit ;
68318: GO 68627
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68320: LD_ADDR_VAR 0 10
68324: PUSH
68325: LD_INT 5
68327: PUSH
68328: LD_INT 6
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: LD_INT 4
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: LD_INT 5
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 24
68362: PUSH
68363: LD_INT 25
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 23
68372: PUSH
68373: LD_INT 27
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 42
68386: PUSH
68387: LD_INT 43
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 44
68396: PUSH
68397: LD_INT 46
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 45
68406: PUSH
68407: LD_INT 47
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: ST_TO_ADDR
// result := [ ] ;
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: EMPTY
68430: ST_TO_ADDR
// for i in turrets do
68431: LD_ADDR_VAR 0 4
68435: PUSH
68436: LD_VAR 0 1
68440: PUSH
68441: FOR_IN
68442: IFFALSE 68625
// begin nat := GetNation ( i ) ;
68444: LD_ADDR_VAR 0 7
68448: PUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: CALL_OW 248
68458: ST_TO_ADDR
// weapon := 0 ;
68459: LD_ADDR_VAR 0 8
68463: PUSH
68464: LD_INT 0
68466: ST_TO_ADDR
// if not nat then
68467: LD_VAR 0 7
68471: NOT
68472: IFFALSE 68476
// continue ;
68474: GO 68441
// for j in list [ nat ] do
68476: LD_ADDR_VAR 0 5
68480: PUSH
68481: LD_VAR 0 10
68485: PUSH
68486: LD_VAR 0 7
68490: ARRAY
68491: PUSH
68492: FOR_IN
68493: IFFALSE 68534
// if GetBWeapon ( i ) = j [ 1 ] then
68495: LD_VAR 0 4
68499: PPUSH
68500: CALL_OW 269
68504: PUSH
68505: LD_VAR 0 5
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: EQUAL
68514: IFFALSE 68532
// begin weapon := j [ 2 ] ;
68516: LD_ADDR_VAR 0 8
68520: PUSH
68521: LD_VAR 0 5
68525: PUSH
68526: LD_INT 2
68528: ARRAY
68529: ST_TO_ADDR
// break ;
68530: GO 68534
// end ;
68532: GO 68492
68534: POP
68535: POP
// if not weapon then
68536: LD_VAR 0 8
68540: NOT
68541: IFFALSE 68545
// continue ;
68543: GO 68441
// for k in factories do
68545: LD_ADDR_VAR 0 6
68549: PUSH
68550: LD_VAR 0 2
68554: PUSH
68555: FOR_IN
68556: IFFALSE 68621
// begin weapons := AvailableWeaponList ( k ) ;
68558: LD_ADDR_VAR 0 9
68562: PUSH
68563: LD_VAR 0 6
68567: PPUSH
68568: CALL_OW 478
68572: ST_TO_ADDR
// if not weapons then
68573: LD_VAR 0 9
68577: NOT
68578: IFFALSE 68582
// continue ;
68580: GO 68555
// if weapon in weapons then
68582: LD_VAR 0 8
68586: PUSH
68587: LD_VAR 0 9
68591: IN
68592: IFFALSE 68619
// begin result := [ i , weapon ] ;
68594: LD_ADDR_VAR 0 3
68598: PUSH
68599: LD_VAR 0 4
68603: PUSH
68604: LD_VAR 0 8
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: ST_TO_ADDR
// exit ;
68613: POP
68614: POP
68615: POP
68616: POP
68617: GO 68627
// end ; end ;
68619: GO 68555
68621: POP
68622: POP
// end ;
68623: GO 68441
68625: POP
68626: POP
// end ;
68627: LD_VAR 0 3
68631: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68632: LD_INT 0
68634: PPUSH
// if not side or side > 8 then
68635: LD_VAR 0 3
68639: NOT
68640: PUSH
68641: LD_VAR 0 3
68645: PUSH
68646: LD_INT 8
68648: GREATER
68649: OR
68650: IFFALSE 68654
// exit ;
68652: GO 68713
// if not range then
68654: LD_VAR 0 4
68658: NOT
68659: IFFALSE 68670
// range := - 12 ;
68661: LD_ADDR_VAR 0 4
68665: PUSH
68666: LD_INT 12
68668: NEG
68669: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68670: LD_VAR 0 1
68674: PPUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: LD_VAR 0 3
68684: PPUSH
68685: LD_VAR 0 4
68689: PPUSH
68690: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68694: LD_VAR 0 1
68698: PPUSH
68699: LD_VAR 0 2
68703: PPUSH
68704: LD_VAR 0 3
68708: PPUSH
68709: CALL_OW 331
// end ;
68713: LD_VAR 0 5
68717: RET
// export function Video ( mode ) ; begin
68718: LD_INT 0
68720: PPUSH
// ingame_video = mode ;
68721: LD_ADDR_OWVAR 52
68725: PUSH
68726: LD_VAR 0 1
68730: ST_TO_ADDR
// interface_hidden = mode ;
68731: LD_ADDR_OWVAR 54
68735: PUSH
68736: LD_VAR 0 1
68740: ST_TO_ADDR
// end ;
68741: LD_VAR 0 2
68745: RET
// export function Join ( array , element ) ; begin
68746: LD_INT 0
68748: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68749: LD_ADDR_VAR 0 3
68753: PUSH
68754: LD_VAR 0 1
68758: PPUSH
68759: LD_VAR 0 1
68763: PUSH
68764: LD_INT 1
68766: PLUS
68767: PPUSH
68768: LD_VAR 0 2
68772: PPUSH
68773: CALL_OW 1
68777: ST_TO_ADDR
// end ;
68778: LD_VAR 0 3
68782: RET
// export function JoinUnion ( array , element ) ; begin
68783: LD_INT 0
68785: PPUSH
// result := array union element ;
68786: LD_ADDR_VAR 0 3
68790: PUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_VAR 0 2
68800: UNION
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 3
68806: RET
// export function GetBehemoths ( side ) ; begin
68807: LD_INT 0
68809: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_INT 22
68817: PUSH
68818: LD_VAR 0 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 31
68829: PUSH
68830: LD_INT 25
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 69
68845: ST_TO_ADDR
// end ;
68846: LD_VAR 0 2
68850: RET
// export function Shuffle ( array ) ; var i , index ; begin
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
68855: PPUSH
// result := [ ] ;
68856: LD_ADDR_VAR 0 2
68860: PUSH
68861: EMPTY
68862: ST_TO_ADDR
// if not array then
68863: LD_VAR 0 1
68867: NOT
68868: IFFALSE 68872
// exit ;
68870: GO 68971
// Randomize ;
68872: CALL_OW 10
// for i = array downto 1 do
68876: LD_ADDR_VAR 0 3
68880: PUSH
68881: DOUBLE
68882: LD_VAR 0 1
68886: INC
68887: ST_TO_ADDR
68888: LD_INT 1
68890: PUSH
68891: FOR_DOWNTO
68892: IFFALSE 68969
// begin index := rand ( 1 , array ) ;
68894: LD_ADDR_VAR 0 4
68898: PUSH
68899: LD_INT 1
68901: PPUSH
68902: LD_VAR 0 1
68906: PPUSH
68907: CALL_OW 12
68911: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68912: LD_ADDR_VAR 0 2
68916: PUSH
68917: LD_VAR 0 2
68921: PPUSH
68922: LD_VAR 0 2
68926: PUSH
68927: LD_INT 1
68929: PLUS
68930: PPUSH
68931: LD_VAR 0 1
68935: PUSH
68936: LD_VAR 0 4
68940: ARRAY
68941: PPUSH
68942: CALL_OW 2
68946: ST_TO_ADDR
// array := Delete ( array , index ) ;
68947: LD_ADDR_VAR 0 1
68951: PUSH
68952: LD_VAR 0 1
68956: PPUSH
68957: LD_VAR 0 4
68961: PPUSH
68962: CALL_OW 3
68966: ST_TO_ADDR
// end ;
68967: GO 68891
68969: POP
68970: POP
// end ;
68971: LD_VAR 0 2
68975: RET
// export function GetBaseMaterials ( base ) ; begin
68976: LD_INT 0
68978: PPUSH
// result := [ 0 , 0 , 0 ] ;
68979: LD_ADDR_VAR 0 2
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: ST_TO_ADDR
// if not base then
68998: LD_VAR 0 1
69002: NOT
69003: IFFALSE 69007
// exit ;
69005: GO 69056
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_INT 1
69019: PPUSH
69020: CALL_OW 275
69024: PUSH
69025: LD_VAR 0 1
69029: PPUSH
69030: LD_INT 2
69032: PPUSH
69033: CALL_OW 275
69037: PUSH
69038: LD_VAR 0 1
69042: PPUSH
69043: LD_INT 3
69045: PPUSH
69046: CALL_OW 275
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: ST_TO_ADDR
// end ;
69056: LD_VAR 0 2
69060: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69061: LD_INT 0
69063: PPUSH
69064: PPUSH
// result := array ;
69065: LD_ADDR_VAR 0 3
69069: PUSH
69070: LD_VAR 0 1
69074: ST_TO_ADDR
// if size >= result then
69075: LD_VAR 0 2
69079: PUSH
69080: LD_VAR 0 3
69084: GREATEREQUAL
69085: IFFALSE 69089
// exit ;
69087: GO 69139
// if size then
69089: LD_VAR 0 2
69093: IFFALSE 69139
// for i := array downto size do
69095: LD_ADDR_VAR 0 4
69099: PUSH
69100: DOUBLE
69101: LD_VAR 0 1
69105: INC
69106: ST_TO_ADDR
69107: LD_VAR 0 2
69111: PUSH
69112: FOR_DOWNTO
69113: IFFALSE 69137
// result := Delete ( result , result ) ;
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_VAR 0 3
69124: PPUSH
69125: LD_VAR 0 3
69129: PPUSH
69130: CALL_OW 3
69134: ST_TO_ADDR
69135: GO 69112
69137: POP
69138: POP
// end ;
69139: LD_VAR 0 3
69143: RET
// export function ComExit ( unit ) ; var tmp ; begin
69144: LD_INT 0
69146: PPUSH
69147: PPUSH
// if not IsInUnit ( unit ) then
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 310
69157: NOT
69158: IFFALSE 69162
// exit ;
69160: GO 69222
// tmp := IsInUnit ( unit ) ;
69162: LD_ADDR_VAR 0 3
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 310
69176: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69177: LD_VAR 0 3
69181: PPUSH
69182: CALL_OW 247
69186: PUSH
69187: LD_INT 2
69189: EQUAL
69190: IFFALSE 69203
// ComExitVehicle ( unit ) else
69192: LD_VAR 0 1
69196: PPUSH
69197: CALL_OW 121
69201: GO 69212
// ComExitBuilding ( unit ) ;
69203: LD_VAR 0 1
69207: PPUSH
69208: CALL_OW 122
// result := tmp ;
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: LD_VAR 0 3
69221: ST_TO_ADDR
// end ;
69222: LD_VAR 0 2
69226: RET
// export function ComExitAll ( units ) ; var i ; begin
69227: LD_INT 0
69229: PPUSH
69230: PPUSH
// if not units then
69231: LD_VAR 0 1
69235: NOT
69236: IFFALSE 69240
// exit ;
69238: GO 69266
// for i in units do
69240: LD_ADDR_VAR 0 3
69244: PUSH
69245: LD_VAR 0 1
69249: PUSH
69250: FOR_IN
69251: IFFALSE 69264
// ComExit ( i ) ;
69253: LD_VAR 0 3
69257: PPUSH
69258: CALL 69144 0 1
69262: GO 69250
69264: POP
69265: POP
// end ;
69266: LD_VAR 0 2
69270: RET
// export function ResetHc ; begin
69271: LD_INT 0
69273: PPUSH
// InitHc ;
69274: CALL_OW 19
// hc_importance := 0 ;
69278: LD_ADDR_OWVAR 32
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// end ;
69286: LD_VAR 0 1
69290: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69291: LD_INT 0
69293: PPUSH
69294: PPUSH
69295: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69296: LD_ADDR_VAR 0 6
69300: PUSH
69301: LD_VAR 0 1
69305: PUSH
69306: LD_VAR 0 3
69310: PLUS
69311: PUSH
69312: LD_INT 2
69314: DIV
69315: ST_TO_ADDR
// if _x < 0 then
69316: LD_VAR 0 6
69320: PUSH
69321: LD_INT 0
69323: LESS
69324: IFFALSE 69341
// _x := _x * - 1 ;
69326: LD_ADDR_VAR 0 6
69330: PUSH
69331: LD_VAR 0 6
69335: PUSH
69336: LD_INT 1
69338: NEG
69339: MUL
69340: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69341: LD_ADDR_VAR 0 7
69345: PUSH
69346: LD_VAR 0 2
69350: PUSH
69351: LD_VAR 0 4
69355: PLUS
69356: PUSH
69357: LD_INT 2
69359: DIV
69360: ST_TO_ADDR
// if _y < 0 then
69361: LD_VAR 0 7
69365: PUSH
69366: LD_INT 0
69368: LESS
69369: IFFALSE 69386
// _y := _y * - 1 ;
69371: LD_ADDR_VAR 0 7
69375: PUSH
69376: LD_VAR 0 7
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: MUL
69385: ST_TO_ADDR
// result := [ _x , _y ] ;
69386: LD_ADDR_VAR 0 5
69390: PUSH
69391: LD_VAR 0 6
69395: PUSH
69396: LD_VAR 0 7
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// end ;
69405: LD_VAR 0 5
69409: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69410: LD_INT 0
69412: PPUSH
69413: PPUSH
69414: PPUSH
69415: PPUSH
// task := GetTaskList ( unit ) ;
69416: LD_ADDR_VAR 0 7
69420: PUSH
69421: LD_VAR 0 1
69425: PPUSH
69426: CALL_OW 437
69430: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69431: LD_VAR 0 7
69435: NOT
69436: PUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: LD_VAR 0 2
69446: PPUSH
69447: CALL_OW 308
69451: NOT
69452: AND
69453: IFFALSE 69457
// exit ;
69455: GO 69575
// if IsInArea ( unit , area ) then
69457: LD_VAR 0 1
69461: PPUSH
69462: LD_VAR 0 2
69466: PPUSH
69467: CALL_OW 308
69471: IFFALSE 69489
// begin ComMoveToArea ( unit , goAway ) ;
69473: LD_VAR 0 1
69477: PPUSH
69478: LD_VAR 0 3
69482: PPUSH
69483: CALL_OW 113
// exit ;
69487: GO 69575
// end ; if task [ 1 ] [ 1 ] <> M then
69489: LD_VAR 0 7
69493: PUSH
69494: LD_INT 1
69496: ARRAY
69497: PUSH
69498: LD_INT 1
69500: ARRAY
69501: PUSH
69502: LD_STRING M
69504: NONEQUAL
69505: IFFALSE 69509
// exit ;
69507: GO 69575
// x := task [ 1 ] [ 2 ] ;
69509: LD_ADDR_VAR 0 5
69513: PUSH
69514: LD_VAR 0 7
69518: PUSH
69519: LD_INT 1
69521: ARRAY
69522: PUSH
69523: LD_INT 2
69525: ARRAY
69526: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69527: LD_ADDR_VAR 0 6
69531: PUSH
69532: LD_VAR 0 7
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PUSH
69541: LD_INT 3
69543: ARRAY
69544: ST_TO_ADDR
// if InArea ( x , y , area ) then
69545: LD_VAR 0 5
69549: PPUSH
69550: LD_VAR 0 6
69554: PPUSH
69555: LD_VAR 0 2
69559: PPUSH
69560: CALL_OW 309
69564: IFFALSE 69575
// ComStop ( unit ) ;
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 141
// end ;
69575: LD_VAR 0 4
69579: RET
// export function Abs ( value ) ; begin
69580: LD_INT 0
69582: PPUSH
// result := value ;
69583: LD_ADDR_VAR 0 2
69587: PUSH
69588: LD_VAR 0 1
69592: ST_TO_ADDR
// if value < 0 then
69593: LD_VAR 0 1
69597: PUSH
69598: LD_INT 0
69600: LESS
69601: IFFALSE 69618
// result := value * - 1 ;
69603: LD_ADDR_VAR 0 2
69607: PUSH
69608: LD_VAR 0 1
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: MUL
69617: ST_TO_ADDR
// end ;
69618: LD_VAR 0 2
69622: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69623: LD_INT 0
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
// if not unit or not building then
69633: LD_VAR 0 1
69637: NOT
69638: PUSH
69639: LD_VAR 0 2
69643: NOT
69644: OR
69645: IFFALSE 69649
// exit ;
69647: GO 69875
// x := GetX ( building ) ;
69649: LD_ADDR_VAR 0 4
69653: PUSH
69654: LD_VAR 0 2
69658: PPUSH
69659: CALL_OW 250
69663: ST_TO_ADDR
// y := GetY ( building ) ;
69664: LD_ADDR_VAR 0 6
69668: PUSH
69669: LD_VAR 0 2
69673: PPUSH
69674: CALL_OW 251
69678: ST_TO_ADDR
// d := GetDir ( building ) ;
69679: LD_ADDR_VAR 0 8
69683: PUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: CALL_OW 254
69693: ST_TO_ADDR
// r := 4 ;
69694: LD_ADDR_VAR 0 9
69698: PUSH
69699: LD_INT 4
69701: ST_TO_ADDR
// for i := 1 to 5 do
69702: LD_ADDR_VAR 0 10
69706: PUSH
69707: DOUBLE
69708: LD_INT 1
69710: DEC
69711: ST_TO_ADDR
69712: LD_INT 5
69714: PUSH
69715: FOR_TO
69716: IFFALSE 69873
// begin _x := ShiftX ( x , d , r + i ) ;
69718: LD_ADDR_VAR 0 5
69722: PUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: LD_VAR 0 8
69732: PPUSH
69733: LD_VAR 0 9
69737: PUSH
69738: LD_VAR 0 10
69742: PLUS
69743: PPUSH
69744: CALL_OW 272
69748: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69749: LD_ADDR_VAR 0 7
69753: PUSH
69754: LD_VAR 0 6
69758: PPUSH
69759: LD_VAR 0 8
69763: PPUSH
69764: LD_VAR 0 9
69768: PUSH
69769: LD_VAR 0 10
69773: PLUS
69774: PPUSH
69775: CALL_OW 273
69779: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69780: LD_VAR 0 5
69784: PPUSH
69785: LD_VAR 0 7
69789: PPUSH
69790: CALL_OW 488
69794: PUSH
69795: LD_VAR 0 5
69799: PPUSH
69800: LD_VAR 0 7
69804: PPUSH
69805: CALL_OW 428
69809: PPUSH
69810: CALL_OW 247
69814: PUSH
69815: LD_INT 3
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: IN
69825: NOT
69826: AND
69827: IFFALSE 69871
// begin ComMoveXY ( unit , _x , _y ) ;
69829: LD_VAR 0 1
69833: PPUSH
69834: LD_VAR 0 5
69838: PPUSH
69839: LD_VAR 0 7
69843: PPUSH
69844: CALL_OW 111
// result := [ _x , _y ] ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 5
69857: PUSH
69858: LD_VAR 0 7
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: ST_TO_ADDR
// exit ;
69867: POP
69868: POP
69869: GO 69875
// end ; end ;
69871: GO 69715
69873: POP
69874: POP
// end ;
69875: LD_VAR 0 3
69879: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69880: LD_INT 0
69882: PPUSH
69883: PPUSH
69884: PPUSH
// result := 0 ;
69885: LD_ADDR_VAR 0 3
69889: PUSH
69890: LD_INT 0
69892: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69893: LD_VAR 0 1
69897: PUSH
69898: LD_INT 0
69900: LESS
69901: PUSH
69902: LD_VAR 0 1
69906: PUSH
69907: LD_INT 8
69909: GREATER
69910: OR
69911: PUSH
69912: LD_VAR 0 2
69916: PUSH
69917: LD_INT 0
69919: LESS
69920: OR
69921: PUSH
69922: LD_VAR 0 2
69926: PUSH
69927: LD_INT 8
69929: GREATER
69930: OR
69931: IFFALSE 69935
// exit ;
69933: GO 70010
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69935: LD_ADDR_VAR 0 4
69939: PUSH
69940: LD_INT 22
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PPUSH
69952: CALL_OW 69
69956: PUSH
69957: FOR_IN
69958: IFFALSE 70008
// begin un := UnitShoot ( i ) ;
69960: LD_ADDR_VAR 0 5
69964: PUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: CALL_OW 504
69974: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69975: LD_VAR 0 5
69979: PPUSH
69980: CALL_OW 255
69984: PUSH
69985: LD_VAR 0 1
69989: EQUAL
69990: IFFALSE 70006
// begin result := un ;
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: LD_VAR 0 5
70001: ST_TO_ADDR
// exit ;
70002: POP
70003: POP
70004: GO 70010
// end ; end ;
70006: GO 69957
70008: POP
70009: POP
// end ;
70010: LD_VAR 0 3
70014: RET
// export function GetCargoBay ( units ) ; begin
70015: LD_INT 0
70017: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70018: LD_ADDR_VAR 0 2
70022: PUSH
70023: LD_VAR 0 1
70027: PPUSH
70028: LD_INT 2
70030: PUSH
70031: LD_INT 34
70033: PUSH
70034: LD_INT 12
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 34
70043: PUSH
70044: LD_INT 51
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 34
70053: PUSH
70054: LD_INT 32
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 34
70063: PUSH
70064: LD_INT 89
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 72
70082: ST_TO_ADDR
// end ;
70083: LD_VAR 0 2
70087: RET
// export function Negate ( value ) ; begin
70088: LD_INT 0
70090: PPUSH
// result := not value ;
70091: LD_ADDR_VAR 0 2
70095: PUSH
70096: LD_VAR 0 1
70100: NOT
70101: ST_TO_ADDR
// end ;
70102: LD_VAR 0 2
70106: RET
// export function Inc ( value ) ; begin
70107: LD_INT 0
70109: PPUSH
// result := value + 1 ;
70110: LD_ADDR_VAR 0 2
70114: PUSH
70115: LD_VAR 0 1
70119: PUSH
70120: LD_INT 1
70122: PLUS
70123: ST_TO_ADDR
// end ;
70124: LD_VAR 0 2
70128: RET
// export function Dec ( value ) ; begin
70129: LD_INT 0
70131: PPUSH
// result := value - 1 ;
70132: LD_ADDR_VAR 0 2
70136: PUSH
70137: LD_VAR 0 1
70141: PUSH
70142: LD_INT 1
70144: MINUS
70145: ST_TO_ADDR
// end ;
70146: LD_VAR 0 2
70150: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70151: LD_INT 0
70153: PPUSH
70154: PPUSH
70155: PPUSH
70156: PPUSH
70157: PPUSH
70158: PPUSH
70159: PPUSH
70160: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70161: LD_VAR 0 1
70165: PPUSH
70166: LD_VAR 0 2
70170: PPUSH
70171: CALL_OW 488
70175: NOT
70176: PUSH
70177: LD_VAR 0 3
70181: PPUSH
70182: LD_VAR 0 4
70186: PPUSH
70187: CALL_OW 488
70191: NOT
70192: OR
70193: IFFALSE 70206
// begin result := - 1 ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: ST_TO_ADDR
// exit ;
70204: GO 70441
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70206: LD_ADDR_VAR 0 12
70210: PUSH
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_VAR 0 2
70220: PPUSH
70221: LD_VAR 0 3
70225: PPUSH
70226: LD_VAR 0 4
70230: PPUSH
70231: CALL 69291 0 4
70235: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70236: LD_ADDR_VAR 0 11
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 2
70250: PPUSH
70251: LD_VAR 0 12
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PPUSH
70260: LD_VAR 0 12
70264: PUSH
70265: LD_INT 2
70267: ARRAY
70268: PPUSH
70269: CALL_OW 298
70273: ST_TO_ADDR
// distance := 9999 ;
70274: LD_ADDR_VAR 0 10
70278: PUSH
70279: LD_INT 9999
70281: ST_TO_ADDR
// for i := 0 to 5 do
70282: LD_ADDR_VAR 0 6
70286: PUSH
70287: DOUBLE
70288: LD_INT 0
70290: DEC
70291: ST_TO_ADDR
70292: LD_INT 5
70294: PUSH
70295: FOR_TO
70296: IFFALSE 70439
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70298: LD_ADDR_VAR 0 7
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: LD_VAR 0 6
70312: PPUSH
70313: LD_VAR 0 11
70317: PPUSH
70318: CALL_OW 272
70322: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70323: LD_ADDR_VAR 0 8
70327: PUSH
70328: LD_VAR 0 2
70332: PPUSH
70333: LD_VAR 0 6
70337: PPUSH
70338: LD_VAR 0 11
70342: PPUSH
70343: CALL_OW 273
70347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70348: LD_VAR 0 7
70352: PPUSH
70353: LD_VAR 0 8
70357: PPUSH
70358: CALL_OW 488
70362: NOT
70363: IFFALSE 70367
// continue ;
70365: GO 70295
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70367: LD_ADDR_VAR 0 9
70371: PUSH
70372: LD_VAR 0 12
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PPUSH
70381: LD_VAR 0 12
70385: PUSH
70386: LD_INT 2
70388: ARRAY
70389: PPUSH
70390: LD_VAR 0 7
70394: PPUSH
70395: LD_VAR 0 8
70399: PPUSH
70400: CALL_OW 298
70404: ST_TO_ADDR
// if tmp < distance then
70405: LD_VAR 0 9
70409: PUSH
70410: LD_VAR 0 10
70414: LESS
70415: IFFALSE 70437
// begin result := i ;
70417: LD_ADDR_VAR 0 5
70421: PUSH
70422: LD_VAR 0 6
70426: ST_TO_ADDR
// distance := tmp ;
70427: LD_ADDR_VAR 0 10
70431: PUSH
70432: LD_VAR 0 9
70436: ST_TO_ADDR
// end ; end ;
70437: GO 70295
70439: POP
70440: POP
// end ;
70441: LD_VAR 0 5
70445: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70446: LD_INT 0
70448: PPUSH
70449: PPUSH
// if not driver or not IsInUnit ( driver ) then
70450: LD_VAR 0 1
70454: NOT
70455: PUSH
70456: LD_VAR 0 1
70460: PPUSH
70461: CALL_OW 310
70465: NOT
70466: OR
70467: IFFALSE 70471
// exit ;
70469: GO 70561
// vehicle := IsInUnit ( driver ) ;
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_VAR 0 1
70480: PPUSH
70481: CALL_OW 310
70485: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70486: LD_VAR 0 1
70490: PPUSH
70491: LD_STRING \
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 0
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: PUSH
70521: LD_STRING E
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: LD_VAR 0 3
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PPUSH
70557: CALL_OW 446
// end ;
70561: LD_VAR 0 2
70565: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70566: LD_INT 0
70568: PPUSH
70569: PPUSH
// if not driver or not IsInUnit ( driver ) then
70570: LD_VAR 0 1
70574: NOT
70575: PUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 310
70585: NOT
70586: OR
70587: IFFALSE 70591
// exit ;
70589: GO 70681
// vehicle := IsInUnit ( driver ) ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: CALL_OW 310
70605: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_STRING \
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_STRING E
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_VAR 0 3
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PPUSH
70677: CALL_OW 447
// end ;
70681: LD_VAR 0 2
70685: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
70690: PPUSH
// tmp := [ ] ;
70691: LD_ADDR_VAR 0 5
70695: PUSH
70696: EMPTY
70697: ST_TO_ADDR
// for i in units do
70698: LD_ADDR_VAR 0 4
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: FOR_IN
70709: IFFALSE 70747
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70711: LD_ADDR_VAR 0 5
70715: PUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: LD_VAR 0 5
70725: PUSH
70726: LD_INT 1
70728: PLUS
70729: PPUSH
70730: LD_VAR 0 4
70734: PPUSH
70735: CALL_OW 256
70739: PPUSH
70740: CALL_OW 2
70744: ST_TO_ADDR
70745: GO 70708
70747: POP
70748: POP
// if not tmp then
70749: LD_VAR 0 5
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 70806
// if asc then
70758: LD_VAR 0 2
70762: IFFALSE 70786
// result := SortListByListAsc ( units , tmp ) else
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 5
70778: PPUSH
70779: CALL_OW 76
70783: ST_TO_ADDR
70784: GO 70806
// result := SortListByListDesc ( units , tmp ) ;
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: LD_VAR 0 1
70795: PPUSH
70796: LD_VAR 0 5
70800: PPUSH
70801: CALL_OW 77
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 3
70810: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
// task := GetTaskList ( mech ) ;
70815: LD_ADDR_VAR 0 4
70819: PUSH
70820: LD_VAR 0 1
70824: PPUSH
70825: CALL_OW 437
70829: ST_TO_ADDR
// if not task then
70830: LD_VAR 0 4
70834: NOT
70835: IFFALSE 70839
// exit ;
70837: GO 70881
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_VAR 0 4
70848: PUSH
70849: LD_INT 1
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PUSH
70857: LD_STRING r
70859: EQUAL
70860: PUSH
70861: LD_VAR 0 4
70865: PUSH
70866: LD_INT 1
70868: ARRAY
70869: PUSH
70870: LD_INT 4
70872: ARRAY
70873: PUSH
70874: LD_VAR 0 2
70878: EQUAL
70879: AND
70880: ST_TO_ADDR
// end ;
70881: LD_VAR 0 3
70885: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70886: LD_INT 0
70888: PPUSH
// SetDir ( unit , d ) ;
70889: LD_VAR 0 1
70893: PPUSH
70894: LD_VAR 0 4
70898: PPUSH
70899: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70903: LD_VAR 0 1
70907: PPUSH
70908: LD_VAR 0 2
70912: PPUSH
70913: LD_VAR 0 3
70917: PPUSH
70918: LD_VAR 0 5
70922: PPUSH
70923: CALL_OW 48
// end ;
70927: LD_VAR 0 6
70931: RET
// export function ToNaturalNumber ( number ) ; begin
70932: LD_INT 0
70934: PPUSH
// result := number div 1 ;
70935: LD_ADDR_VAR 0 2
70939: PUSH
70940: LD_VAR 0 1
70944: PUSH
70945: LD_INT 1
70947: DIV
70948: ST_TO_ADDR
// if number < 0 then
70949: LD_VAR 0 1
70953: PUSH
70954: LD_INT 0
70956: LESS
70957: IFFALSE 70967
// result := 0 ;
70959: LD_ADDR_VAR 0 2
70963: PUSH
70964: LD_INT 0
70966: ST_TO_ADDR
// end ;
70967: LD_VAR 0 2
70971: RET
// export function SortByClass ( units , class ) ; var un ; begin
70972: LD_INT 0
70974: PPUSH
70975: PPUSH
// if not units or not class then
70976: LD_VAR 0 1
70980: NOT
70981: PUSH
70982: LD_VAR 0 2
70986: NOT
70987: OR
70988: IFFALSE 70992
// exit ;
70990: GO 71087
// result := [ ] ;
70992: LD_ADDR_VAR 0 3
70996: PUSH
70997: EMPTY
70998: ST_TO_ADDR
// for un in units do
70999: LD_ADDR_VAR 0 4
71003: PUSH
71004: LD_VAR 0 1
71008: PUSH
71009: FOR_IN
71010: IFFALSE 71085
// if GetClass ( un ) = class then
71012: LD_VAR 0 4
71016: PPUSH
71017: CALL_OW 257
71021: PUSH
71022: LD_VAR 0 2
71026: EQUAL
71027: IFFALSE 71054
// result := Insert ( result , 1 , un ) else
71029: LD_ADDR_VAR 0 3
71033: PUSH
71034: LD_VAR 0 3
71038: PPUSH
71039: LD_INT 1
71041: PPUSH
71042: LD_VAR 0 4
71046: PPUSH
71047: CALL_OW 2
71051: ST_TO_ADDR
71052: GO 71083
// result := Replace ( result , result + 1 , un ) ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_VAR 0 3
71068: PUSH
71069: LD_INT 1
71071: PLUS
71072: PPUSH
71073: LD_VAR 0 4
71077: PPUSH
71078: CALL_OW 1
71082: ST_TO_ADDR
71083: GO 71009
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 3
71091: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71092: LD_INT 0
71094: PPUSH
71095: PPUSH
71096: PPUSH
71097: PPUSH
71098: PPUSH
71099: PPUSH
71100: PPUSH
// result := [ ] ;
71101: LD_ADDR_VAR 0 4
71105: PUSH
71106: EMPTY
71107: ST_TO_ADDR
// if x - r < 0 then
71108: LD_VAR 0 1
71112: PUSH
71113: LD_VAR 0 3
71117: MINUS
71118: PUSH
71119: LD_INT 0
71121: LESS
71122: IFFALSE 71134
// min_x := 0 else
71124: LD_ADDR_VAR 0 8
71128: PUSH
71129: LD_INT 0
71131: ST_TO_ADDR
71132: GO 71150
// min_x := x - r ;
71134: LD_ADDR_VAR 0 8
71138: PUSH
71139: LD_VAR 0 1
71143: PUSH
71144: LD_VAR 0 3
71148: MINUS
71149: ST_TO_ADDR
// if y - r < 0 then
71150: LD_VAR 0 2
71154: PUSH
71155: LD_VAR 0 3
71159: MINUS
71160: PUSH
71161: LD_INT 0
71163: LESS
71164: IFFALSE 71176
// min_y := 0 else
71166: LD_ADDR_VAR 0 7
71170: PUSH
71171: LD_INT 0
71173: ST_TO_ADDR
71174: GO 71192
// min_y := y - r ;
71176: LD_ADDR_VAR 0 7
71180: PUSH
71181: LD_VAR 0 2
71185: PUSH
71186: LD_VAR 0 3
71190: MINUS
71191: ST_TO_ADDR
// max_x := x + r ;
71192: LD_ADDR_VAR 0 9
71196: PUSH
71197: LD_VAR 0 1
71201: PUSH
71202: LD_VAR 0 3
71206: PLUS
71207: ST_TO_ADDR
// max_y := y + r ;
71208: LD_ADDR_VAR 0 10
71212: PUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 3
71222: PLUS
71223: ST_TO_ADDR
// for _x = min_x to max_x do
71224: LD_ADDR_VAR 0 5
71228: PUSH
71229: DOUBLE
71230: LD_VAR 0 8
71234: DEC
71235: ST_TO_ADDR
71236: LD_VAR 0 9
71240: PUSH
71241: FOR_TO
71242: IFFALSE 71343
// for _y = min_y to max_y do
71244: LD_ADDR_VAR 0 6
71248: PUSH
71249: DOUBLE
71250: LD_VAR 0 7
71254: DEC
71255: ST_TO_ADDR
71256: LD_VAR 0 10
71260: PUSH
71261: FOR_TO
71262: IFFALSE 71339
// begin if not ValidHex ( _x , _y ) then
71264: LD_VAR 0 5
71268: PPUSH
71269: LD_VAR 0 6
71273: PPUSH
71274: CALL_OW 488
71278: NOT
71279: IFFALSE 71283
// continue ;
71281: GO 71261
// if GetResourceTypeXY ( _x , _y ) then
71283: LD_VAR 0 5
71287: PPUSH
71288: LD_VAR 0 6
71292: PPUSH
71293: CALL_OW 283
71297: IFFALSE 71337
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71299: LD_ADDR_VAR 0 4
71303: PUSH
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 4
71313: PUSH
71314: LD_INT 1
71316: PLUS
71317: PPUSH
71318: LD_VAR 0 5
71322: PUSH
71323: LD_VAR 0 6
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PPUSH
71332: CALL_OW 1
71336: ST_TO_ADDR
// end ;
71337: GO 71261
71339: POP
71340: POP
71341: GO 71241
71343: POP
71344: POP
// end ;
71345: LD_VAR 0 4
71349: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71350: LD_INT 0
71352: PPUSH
71353: PPUSH
71354: PPUSH
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// if not units then
71360: LD_VAR 0 1
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71893
// result := UnitFilter ( units , [ f_ok ] ) ;
71369: LD_ADDR_VAR 0 3
71373: PUSH
71374: LD_VAR 0 1
71378: PPUSH
71379: LD_INT 50
71381: PUSH
71382: EMPTY
71383: LIST
71384: PPUSH
71385: CALL_OW 72
71389: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71390: LD_ADDR_VAR 0 8
71394: PUSH
71395: LD_VAR 0 1
71399: PUSH
71400: LD_INT 1
71402: ARRAY
71403: PPUSH
71404: CALL_OW 255
71408: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71409: LD_ADDR_VAR 0 10
71413: PUSH
71414: LD_INT 29
71416: PUSH
71417: LD_INT 91
71419: PUSH
71420: LD_INT 49
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: LIST
71427: ST_TO_ADDR
// if not result then
71428: LD_VAR 0 3
71432: NOT
71433: IFFALSE 71437
// exit ;
71435: GO 71893
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71437: LD_ADDR_VAR 0 5
71441: PUSH
71442: LD_INT 81
71444: PUSH
71445: LD_VAR 0 8
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PPUSH
71454: CALL_OW 69
71458: ST_TO_ADDR
// for i in result do
71459: LD_ADDR_VAR 0 4
71463: PUSH
71464: LD_VAR 0 3
71468: PUSH
71469: FOR_IN
71470: IFFALSE 71891
// begin tag := GetTag ( i ) + 1 ;
71472: LD_ADDR_VAR 0 9
71476: PUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: CALL_OW 110
71486: PUSH
71487: LD_INT 1
71489: PLUS
71490: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71491: LD_ADDR_VAR 0 7
71495: PUSH
71496: LD_VAR 0 4
71500: PPUSH
71501: CALL_OW 250
71505: PPUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: CALL_OW 251
71515: PPUSH
71516: LD_INT 6
71518: PPUSH
71519: CALL 71092 0 3
71523: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71524: LD_VAR 0 4
71528: PPUSH
71529: CALL_OW 247
71533: PUSH
71534: LD_INT 2
71536: EQUAL
71537: PUSH
71538: LD_VAR 0 7
71542: AND
71543: PUSH
71544: LD_VAR 0 4
71548: PPUSH
71549: CALL_OW 264
71553: PUSH
71554: LD_VAR 0 10
71558: IN
71559: NOT
71560: AND
71561: IFFALSE 71600
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71563: LD_VAR 0 4
71567: PPUSH
71568: LD_VAR 0 7
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PUSH
71577: LD_INT 1
71579: ARRAY
71580: PPUSH
71581: LD_VAR 0 7
71585: PUSH
71586: LD_INT 1
71588: ARRAY
71589: PUSH
71590: LD_INT 2
71592: ARRAY
71593: PPUSH
71594: CALL_OW 116
71598: GO 71889
// if path > tag then
71600: LD_VAR 0 2
71604: PUSH
71605: LD_VAR 0 9
71609: GREATER
71610: IFFALSE 71818
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71612: LD_ADDR_VAR 0 6
71616: PUSH
71617: LD_VAR 0 5
71621: PPUSH
71622: LD_INT 91
71624: PUSH
71625: LD_VAR 0 4
71629: PUSH
71630: LD_INT 8
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: LIST
71637: PPUSH
71638: CALL_OW 72
71642: ST_TO_ADDR
// if nearEnemy then
71643: LD_VAR 0 6
71647: IFFALSE 71716
// begin if GetWeapon ( i ) = ru_time_lapser then
71649: LD_VAR 0 4
71653: PPUSH
71654: CALL_OW 264
71658: PUSH
71659: LD_INT 49
71661: EQUAL
71662: IFFALSE 71690
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71664: LD_VAR 0 4
71668: PPUSH
71669: LD_VAR 0 6
71673: PPUSH
71674: LD_VAR 0 4
71678: PPUSH
71679: CALL_OW 74
71683: PPUSH
71684: CALL_OW 112
71688: GO 71714
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71690: LD_VAR 0 4
71694: PPUSH
71695: LD_VAR 0 6
71699: PPUSH
71700: LD_VAR 0 4
71704: PPUSH
71705: CALL_OW 74
71709: PPUSH
71710: CALL_OW 115
// end else
71714: GO 71816
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71716: LD_VAR 0 4
71720: PPUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_VAR 0 9
71730: ARRAY
71731: PUSH
71732: LD_INT 1
71734: ARRAY
71735: PPUSH
71736: LD_VAR 0 2
71740: PUSH
71741: LD_VAR 0 9
71745: ARRAY
71746: PUSH
71747: LD_INT 2
71749: ARRAY
71750: PPUSH
71751: CALL_OW 297
71755: PUSH
71756: LD_INT 6
71758: GREATER
71759: IFFALSE 71802
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71761: LD_VAR 0 4
71765: PPUSH
71766: LD_VAR 0 2
71770: PUSH
71771: LD_VAR 0 9
71775: ARRAY
71776: PUSH
71777: LD_INT 1
71779: ARRAY
71780: PPUSH
71781: LD_VAR 0 2
71785: PUSH
71786: LD_VAR 0 9
71790: ARRAY
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PPUSH
71796: CALL_OW 114
71800: GO 71816
// SetTag ( i , tag ) ;
71802: LD_VAR 0 4
71806: PPUSH
71807: LD_VAR 0 9
71811: PPUSH
71812: CALL_OW 109
// end else
71816: GO 71889
// if enemy then
71818: LD_VAR 0 5
71822: IFFALSE 71889
// begin if GetWeapon ( i ) = ru_time_lapser then
71824: LD_VAR 0 4
71828: PPUSH
71829: CALL_OW 264
71833: PUSH
71834: LD_INT 49
71836: EQUAL
71837: IFFALSE 71865
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71839: LD_VAR 0 4
71843: PPUSH
71844: LD_VAR 0 5
71848: PPUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: CALL_OW 74
71858: PPUSH
71859: CALL_OW 112
71863: GO 71889
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71865: LD_VAR 0 4
71869: PPUSH
71870: LD_VAR 0 5
71874: PPUSH
71875: LD_VAR 0 4
71879: PPUSH
71880: CALL_OW 74
71884: PPUSH
71885: CALL_OW 115
// end ; end ;
71889: GO 71469
71891: POP
71892: POP
// end ;
71893: LD_VAR 0 3
71897: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71898: LD_INT 0
71900: PPUSH
71901: PPUSH
71902: PPUSH
// if not unit or IsInUnit ( unit ) then
71903: LD_VAR 0 1
71907: NOT
71908: PUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 310
71918: OR
71919: IFFALSE 71923
// exit ;
71921: GO 72014
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: CALL_OW 250
71937: PPUSH
71938: LD_VAR 0 2
71942: PPUSH
71943: LD_INT 1
71945: PPUSH
71946: CALL_OW 272
71950: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 1
71960: PPUSH
71961: CALL_OW 251
71965: PPUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_INT 1
71973: PPUSH
71974: CALL_OW 273
71978: ST_TO_ADDR
// if ValidHex ( x , y ) then
71979: LD_VAR 0 4
71983: PPUSH
71984: LD_VAR 0 5
71988: PPUSH
71989: CALL_OW 488
71993: IFFALSE 72014
// ComTurnXY ( unit , x , y ) ;
71995: LD_VAR 0 1
71999: PPUSH
72000: LD_VAR 0 4
72004: PPUSH
72005: LD_VAR 0 5
72009: PPUSH
72010: CALL_OW 118
// end ;
72014: LD_VAR 0 3
72018: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72019: LD_INT 0
72021: PPUSH
72022: PPUSH
// result := false ;
72023: LD_ADDR_VAR 0 3
72027: PUSH
72028: LD_INT 0
72030: ST_TO_ADDR
// if not units then
72031: LD_VAR 0 2
72035: NOT
72036: IFFALSE 72040
// exit ;
72038: GO 72085
// for i in units do
72040: LD_ADDR_VAR 0 4
72044: PUSH
72045: LD_VAR 0 2
72049: PUSH
72050: FOR_IN
72051: IFFALSE 72083
// if See ( side , i ) then
72053: LD_VAR 0 1
72057: PPUSH
72058: LD_VAR 0 4
72062: PPUSH
72063: CALL_OW 292
72067: IFFALSE 72081
// begin result := true ;
72069: LD_ADDR_VAR 0 3
72073: PUSH
72074: LD_INT 1
72076: ST_TO_ADDR
// exit ;
72077: POP
72078: POP
72079: GO 72085
// end ;
72081: GO 72050
72083: POP
72084: POP
// end ;
72085: LD_VAR 0 3
72089: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
72094: PPUSH
72095: PPUSH
// if not unit or not points then
72096: LD_VAR 0 1
72100: NOT
72101: PUSH
72102: LD_VAR 0 2
72106: NOT
72107: OR
72108: IFFALSE 72112
// exit ;
72110: GO 72202
// dist := 99999 ;
72112: LD_ADDR_VAR 0 5
72116: PUSH
72117: LD_INT 99999
72119: ST_TO_ADDR
// for i in points do
72120: LD_ADDR_VAR 0 4
72124: PUSH
72125: LD_VAR 0 2
72129: PUSH
72130: FOR_IN
72131: IFFALSE 72200
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72133: LD_ADDR_VAR 0 6
72137: PUSH
72138: LD_VAR 0 1
72142: PPUSH
72143: LD_VAR 0 4
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PPUSH
72152: LD_VAR 0 4
72156: PUSH
72157: LD_INT 2
72159: ARRAY
72160: PPUSH
72161: CALL_OW 297
72165: ST_TO_ADDR
// if tmpDist < dist then
72166: LD_VAR 0 6
72170: PUSH
72171: LD_VAR 0 5
72175: LESS
72176: IFFALSE 72198
// begin result := i ;
72178: LD_ADDR_VAR 0 3
72182: PUSH
72183: LD_VAR 0 4
72187: ST_TO_ADDR
// dist := tmpDist ;
72188: LD_ADDR_VAR 0 5
72192: PUSH
72193: LD_VAR 0 6
72197: ST_TO_ADDR
// end ; end ;
72198: GO 72130
72200: POP
72201: POP
// end ;
72202: LD_VAR 0 3
72206: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72207: LD_INT 0
72209: PPUSH
// uc_side := side ;
72210: LD_ADDR_OWVAR 20
72214: PUSH
72215: LD_VAR 0 1
72219: ST_TO_ADDR
// uc_nation := 3 ;
72220: LD_ADDR_OWVAR 21
72224: PUSH
72225: LD_INT 3
72227: ST_TO_ADDR
// vc_chassis := 25 ;
72228: LD_ADDR_OWVAR 37
72232: PUSH
72233: LD_INT 25
72235: ST_TO_ADDR
// vc_engine := engine_siberite ;
72236: LD_ADDR_OWVAR 39
72240: PUSH
72241: LD_INT 3
72243: ST_TO_ADDR
// vc_control := control_computer ;
72244: LD_ADDR_OWVAR 38
72248: PUSH
72249: LD_INT 3
72251: ST_TO_ADDR
// vc_weapon := 59 ;
72252: LD_ADDR_OWVAR 40
72256: PUSH
72257: LD_INT 59
72259: ST_TO_ADDR
// result := CreateVehicle ;
72260: LD_ADDR_VAR 0 5
72264: PUSH
72265: CALL_OW 45
72269: ST_TO_ADDR
// SetDir ( result , d ) ;
72270: LD_VAR 0 5
72274: PPUSH
72275: LD_VAR 0 4
72279: PPUSH
72280: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72284: LD_VAR 0 5
72288: PPUSH
72289: LD_VAR 0 2
72293: PPUSH
72294: LD_VAR 0 3
72298: PPUSH
72299: LD_INT 0
72301: PPUSH
72302: CALL_OW 48
// end ;
72306: LD_VAR 0 5
72310: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72311: LD_INT 0
72313: PPUSH
72314: PPUSH
72315: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72339: LD_VAR 0 1
72343: NOT
72344: PUSH
72345: LD_VAR 0 1
72349: PPUSH
72350: CALL_OW 264
72354: PUSH
72355: LD_INT 12
72357: PUSH
72358: LD_INT 51
72360: PUSH
72361: LD_INT 32
72363: PUSH
72364: LD_INT 89
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: IN
72373: NOT
72374: OR
72375: IFFALSE 72379
// exit ;
72377: GO 72477
// for i := 1 to 3 do
72379: LD_ADDR_VAR 0 3
72383: PUSH
72384: DOUBLE
72385: LD_INT 1
72387: DEC
72388: ST_TO_ADDR
72389: LD_INT 3
72391: PUSH
72392: FOR_TO
72393: IFFALSE 72475
// begin tmp := GetCargo ( cargo , i ) ;
72395: LD_ADDR_VAR 0 4
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 3
72409: PPUSH
72410: CALL_OW 289
72414: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72415: LD_ADDR_VAR 0 2
72419: PUSH
72420: LD_VAR 0 2
72424: PPUSH
72425: LD_VAR 0 3
72429: PPUSH
72430: LD_VAR 0 4
72434: PPUSH
72435: CALL_OW 1
72439: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72440: LD_ADDR_VAR 0 2
72444: PUSH
72445: LD_VAR 0 2
72449: PPUSH
72450: LD_INT 4
72452: PPUSH
72453: LD_VAR 0 2
72457: PUSH
72458: LD_INT 4
72460: ARRAY
72461: PUSH
72462: LD_VAR 0 4
72466: PLUS
72467: PPUSH
72468: CALL_OW 1
72472: ST_TO_ADDR
// end ;
72473: GO 72392
72475: POP
72476: POP
// end ;
72477: LD_VAR 0 2
72481: RET
// export function Length ( array ) ; begin
72482: LD_INT 0
72484: PPUSH
// result := array + 0 ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_INT 0
72497: PLUS
72498: ST_TO_ADDR
// end ;
72499: LD_VAR 0 2
72503: RET
// export function PrepareArray ( array ) ; begin
72504: LD_INT 0
72506: PPUSH
// result := array diff 0 ;
72507: LD_ADDR_VAR 0 2
72511: PUSH
72512: LD_VAR 0 1
72516: PUSH
72517: LD_INT 0
72519: DIFF
72520: ST_TO_ADDR
// if not result [ 1 ] then
72521: LD_VAR 0 2
72525: PUSH
72526: LD_INT 1
72528: ARRAY
72529: NOT
72530: IFFALSE 72550
// result := Delete ( result , 1 ) ;
72532: LD_ADDR_VAR 0 2
72536: PUSH
72537: LD_VAR 0 2
72541: PPUSH
72542: LD_INT 1
72544: PPUSH
72545: CALL_OW 3
72549: ST_TO_ADDR
// end ;
72550: LD_VAR 0 2
72554: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
72559: PPUSH
72560: PPUSH
// sibRocketRange := 25 ;
72561: LD_ADDR_VAR 0 6
72565: PUSH
72566: LD_INT 25
72568: ST_TO_ADDR
// result := false ;
72569: LD_ADDR_VAR 0 4
72573: PUSH
72574: LD_INT 0
72576: ST_TO_ADDR
// for i := 0 to 5 do
72577: LD_ADDR_VAR 0 5
72581: PUSH
72582: DOUBLE
72583: LD_INT 0
72585: DEC
72586: ST_TO_ADDR
72587: LD_INT 5
72589: PUSH
72590: FOR_TO
72591: IFFALSE 72658
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72593: LD_VAR 0 1
72597: PPUSH
72598: LD_VAR 0 5
72602: PPUSH
72603: LD_VAR 0 6
72607: PPUSH
72608: CALL_OW 272
72612: PPUSH
72613: LD_VAR 0 2
72617: PPUSH
72618: LD_VAR 0 5
72622: PPUSH
72623: LD_VAR 0 6
72627: PPUSH
72628: CALL_OW 273
72632: PPUSH
72633: LD_VAR 0 3
72637: PPUSH
72638: CALL_OW 309
72642: IFFALSE 72656
// begin result := true ;
72644: LD_ADDR_VAR 0 4
72648: PUSH
72649: LD_INT 1
72651: ST_TO_ADDR
// exit ;
72652: POP
72653: POP
72654: GO 72660
// end ;
72656: GO 72590
72658: POP
72659: POP
// end ;
72660: LD_VAR 0 4
72664: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72665: LD_INT 0
72667: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72668: LD_VAR 0 1
72672: PPUSH
72673: LD_VAR 0 2
72677: PPUSH
72678: LD_INT 0
72680: PPUSH
72681: LD_INT 0
72683: PPUSH
72684: LD_INT 1
72686: PPUSH
72687: LD_INT 0
72689: PPUSH
72690: CALL_OW 587
// end ; end_of_file
72694: LD_VAR 0 3
72698: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72699: LD_VAR 0 1
72703: PUSH
72704: LD_INT 200
72706: DOUBLE
72707: GREATEREQUAL
72708: IFFALSE 72716
72710: LD_INT 299
72712: DOUBLE
72713: LESSEQUAL
72714: IFTRUE 72718
72716: GO 72750
72718: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72719: LD_VAR 0 1
72723: PPUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: LD_VAR 0 3
72733: PPUSH
72734: LD_VAR 0 4
72738: PPUSH
72739: LD_VAR 0 5
72743: PPUSH
72744: CALL 27365 0 5
72748: GO 72827
72750: LD_INT 300
72752: DOUBLE
72753: GREATEREQUAL
72754: IFFALSE 72762
72756: LD_INT 399
72758: DOUBLE
72759: LESSEQUAL
72760: IFTRUE 72764
72762: GO 72826
72764: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72765: LD_VAR 0 1
72769: PPUSH
72770: LD_VAR 0 2
72774: PPUSH
72775: LD_VAR 0 3
72779: PPUSH
72780: LD_VAR 0 4
72784: PPUSH
72785: LD_VAR 0 5
72789: PPUSH
72790: LD_VAR 0 6
72794: PPUSH
72795: LD_VAR 0 7
72799: PPUSH
72800: LD_VAR 0 8
72804: PPUSH
72805: LD_VAR 0 9
72809: PPUSH
72810: LD_VAR 0 10
72814: PPUSH
72815: LD_VAR 0 11
72819: PPUSH
72820: CALL 23698 0 11
72824: GO 72827
72826: POP
// end ;
72827: PPOPN 11
72829: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72830: LD_VAR 0 1
72834: PPUSH
72835: LD_VAR 0 2
72839: PPUSH
72840: LD_VAR 0 3
72844: PPUSH
72845: LD_VAR 0 4
72849: PPUSH
72850: LD_VAR 0 5
72854: PPUSH
72855: CALL 27101 0 5
// end ; end_of_file
72859: PPOPN 5
72861: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_VAR 0 2
72871: PPUSH
72872: LD_VAR 0 3
72876: PPUSH
72877: LD_VAR 0 4
72881: PPUSH
72882: LD_VAR 0 5
72886: PPUSH
72887: LD_VAR 0 6
72891: PPUSH
72892: CALL 11350 0 6
// end ;
72896: PPOPN 6
72898: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72899: LD_INT 0
72901: PPUSH
// begin if not units then
72902: LD_VAR 0 1
72906: NOT
72907: IFFALSE 72911
// exit ;
72909: GO 72911
// end ;
72911: PPOPN 7
72913: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72914: CALL 11254 0 0
// end ;
72918: PPOPN 1
72920: END
