// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10993 0 0
// PrepareAmerican ;
  19: CALL 259 0 0
// PrepareRussian ;
  23: CALL 1543 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6585 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 3
 121: PUSH
 122: LD_INT 57
 124: PUSH
 125: EMPTY
 126: LIST
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 30
 134: PUSH
 135: LD_INT 33
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PPUSH
 147: CALL_OW 69
 151: PUSH
 152: LD_INT 15
 154: GREATEREQUAL
 155: IFFALSE 167
 157: GO 159
 159: DISABLE
// SetAchievement ( ACH_FORT ) ;
 160: LD_STRING ACH_FORT
 162: PPUSH
 163: CALL_OW 543
 167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 168: LD_INT 22
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 12
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PPUSH
 192: CALL_OW 69
 196: PUSH
 197: LD_INT 0
 199: EQUAL
 200: IFFALSE 212
 202: GO 204
 204: DISABLE
// SetAchievement ( ACH_APE ) ;
 205: LD_STRING ACH_APE
 207: PPUSH
 208: CALL_OW 543
 212: END
// every 0 0$1 trigger killCounter >= 20 do
 213: LD_EXP 5
 217: PUSH
 218: LD_INT 20
 220: GREATEREQUAL
 221: IFFALSE 233
 223: GO 225
 225: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 226: LD_STRING ACH_DOUBLE
 228: PPUSH
 229: CALL_OW 543
 233: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 234: LD_EXP 9
 238: PPUSH
 239: LD_INT 15
 241: PPUSH
 242: CALL_OW 308
 246: IFFALSE 258
 248: GO 250
 250: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 251: LD_STRING ACH_AMASHA
 253: PPUSH
 254: CALL_OW 543
 258: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 259: LD_INT 0
 261: PPUSH
 262: PPUSH
 263: PPUSH
 264: PPUSH
 265: PPUSH
// uc_side := 1 ;
 266: LD_ADDR_OWVAR 20
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// uc_nation := 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 282: LD_INT 48
 284: PPUSH
 285: LD_STRING deltakappa
 287: PPUSH
 288: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 292: LD_INT 48
 294: PPUSH
 295: CALL_OW 274
 299: PPUSH
 300: LD_INT 1
 302: PPUSH
 303: LD_INT 2000
 305: PUSH
 306: LD_INT 1600
 308: PUSH
 309: LD_INT 1200
 311: PUSH
 312: LD_INT 900
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_OWVAR 67
 325: ARRAY
 326: PPUSH
 327: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 331: LD_INT 48
 333: PPUSH
 334: CALL_OW 274
 338: PPUSH
 339: LD_INT 2
 341: PPUSH
 342: LD_INT 20
 344: PPUSH
 345: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 349: LD_INT 48
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: LD_INT 100
 362: PPUSH
 363: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 367: LD_ADDR_EXP 8
 371: PUSH
 372: LD_STRING JMM
 374: PPUSH
 375: LD_EXP 1
 379: NOT
 380: PPUSH
 381: LD_STRING 13f_
 383: PPUSH
 384: CALL 33850 0 3
 388: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 389: LD_EXP 8
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 401: LD_INT 5
 403: PUSH
 404: LD_INT 5
 406: PUSH
 407: LD_INT 3
 409: PUSH
 410: LD_INT 3
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 9
 433: PUSH
 434: LD_INT 9
 436: PUSH
 437: LD_INT 5
 439: PUSH
 440: LD_INT 5
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: LD_INT 100
 457: PPUSH
 458: CALL 38836 0 5
// JMMVeh := CreateVehicle ;
 462: LD_ADDR_EXP 9
 466: PUSH
 467: CALL_OW 45
 471: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 472: LD_EXP 9
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 484: LD_EXP 9
 488: PPUSH
 489: LD_INT 6
 491: PPUSH
 492: LD_INT 5
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 502: LD_EXP 8
 506: PPUSH
 507: LD_EXP 9
 511: PPUSH
 512: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 516: LD_EXP 9
 520: PPUSH
 521: LD_INT 1
 523: NEG
 524: PPUSH
 525: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 529: LD_EXP 9
 533: PPUSH
 534: LD_INT 21
 536: PPUSH
 537: LD_INT 8
 539: PPUSH
 540: CALL_OW 111
// uc_side := 4 ;
 544: LD_ADDR_OWVAR 20
 548: PUSH
 549: LD_INT 4
 551: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 552: LD_ADDR_EXP 13
 556: PUSH
 557: LD_STRING Powell
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 33850 0 3
 570: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 571: LD_ADDR_EXP 10
 575: PUSH
 576: LD_STRING Joan
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_STRING 10c_
 587: PPUSH
 588: CALL 33850 0 3
 592: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 593: LD_ADDR_EXP 11
 597: PUSH
 598: LD_STRING Lisa
 600: PPUSH
 601: LD_EXP 1
 605: NOT
 606: PPUSH
 607: LD_STRING 13s_
 609: PPUSH
 610: CALL 33850 0 3
 614: ST_TO_ADDR
// if Joan then
 615: LD_EXP 10
 619: IFFALSE 658
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 621: LD_EXP 10
 625: PPUSH
 626: LD_INT 4
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 636: LD_EXP 10
 640: PPUSH
 641: LD_INT 4
 643: PPUSH
 644: CALL_OW 336
// JMMGirl = 1 ;
 648: LD_ADDR_EXP 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// end else
 656: GO 749
// if Lisa then
 658: LD_EXP 11
 662: IFFALSE 701
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 664: LD_EXP 11
 668: PPUSH
 669: LD_INT 4
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 679: LD_EXP 11
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 336
// JMMGirl := 2 ;
 691: LD_ADDR_EXP 2
 695: PUSH
 696: LD_INT 2
 698: ST_TO_ADDR
// end else
 699: GO 749
// begin Connie := NewCharacter ( Coonie ) ;
 701: LD_ADDR_EXP 12
 705: PUSH
 706: LD_STRING Coonie
 708: PPUSH
 709: CALL_OW 25
 713: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 714: LD_EXP 12
 718: PPUSH
 719: LD_INT 4
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 729: LD_EXP 12
 733: PPUSH
 734: LD_INT 3
 736: PPUSH
 737: CALL_OW 336
// JMMGirl := 3 ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 3
 748: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 749: LD_ADDR_VAR 0 2
 753: PUSH
 754: DOUBLE
 755: LD_INT 1
 757: DEC
 758: ST_TO_ADDR
 759: LD_INT 4
 761: PUSH
 762: LD_INT 3
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_OWVAR 67
 781: ARRAY
 782: PUSH
 783: FOR_TO
 784: IFFALSE 938
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 786: LD_INT 4
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 3
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 2
 808: PUSH
 809: LD_INT 4
 811: MOD
 812: PUSH
 813: LD_INT 1
 815: PLUS
 816: ARRAY
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 9
 826: PUSH
 827: LD_INT 7
 829: PUSH
 830: LD_INT 4
 832: PUSH
 833: LD_INT 5
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: LD_VAR 0 2
 846: PUSH
 847: LD_INT 4
 849: MOD
 850: PUSH
 851: LD_INT 1
 853: PLUS
 854: ARRAY
 855: PPUSH
 856: LD_INT 33
 858: PPUSH
 859: LD_INT 55
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: CALL 38836 0 5
// veh := CreateVehicle ;
 871: LD_ADDR_VAR 0 4
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 881: LD_VAR 0 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 5
 891: PPUSH
 892: CALL_OW 12
 896: PPUSH
 897: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 901: LD_VAR 0 4
 905: PPUSH
 906: LD_INT 500
 908: PPUSH
 909: LD_INT 950
 911: PPUSH
 912: CALL_OW 12
 916: PPUSH
 917: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 921: LD_VAR 0 4
 925: PPUSH
 926: LD_INT 5
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: GO 783
 938: POP
 939: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_INT 3
 952: PUSH
 953: LD_INT 3
 955: PUSH
 956: LD_INT 2
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_OWVAR 67
 972: ARRAY
 973: PUSH
 974: FOR_TO
 975: IFFALSE 1097
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 977: LD_INT 3
 979: PUSH
 980: LD_INT 2
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 2
 994: MOD
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: PPUSH
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 3
1006: PPUSH
1007: LD_INT 9
1009: PUSH
1010: LD_INT 5
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_VAR 0 2
1021: PUSH
1022: LD_INT 2
1024: MOD
1025: PUSH
1026: LD_INT 1
1028: PLUS
1029: ARRAY
1030: PPUSH
1031: LD_INT 0
1033: PPUSH
1034: CALL 38836 0 5
// veh := CreateVehicle ;
1038: LD_ADDR_VAR 0 4
1042: PUSH
1043: CALL_OW 45
1047: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1048: LD_VAR 0 4
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: CALL_OW 12
1063: PPUSH
1064: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1068: LD_VAR 0 4
1072: PPUSH
1073: LD_INT 1000
1075: PPUSH
1076: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1080: LD_VAR 0 4
1084: PPUSH
1085: LD_INT 17
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end ;
1095: GO 974
1097: POP
1098: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1099: LD_ADDR_VAR 0 2
1103: PUSH
1104: DOUBLE
1105: LD_INT 1
1107: DEC
1108: ST_TO_ADDR
1109: LD_INT 3
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_OWVAR 67
1131: ARRAY
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1182
// begin PrepareApeman ( 1 ) ;
1136: LD_INT 1
1138: PPUSH
1139: CALL 68133 0 1
// uc_side := 4 ;
1143: LD_ADDR_OWVAR 20
1147: PUSH
1148: LD_INT 4
1150: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1151: LD_ADDR_OWVAR 28
1155: PUSH
1156: LD_INT 16
1158: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1159: CALL_OW 44
1163: PPUSH
1164: LD_INT 84
1166: PPUSH
1167: LD_INT 127
1169: PPUSH
1170: LD_INT 5
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// end ;
1180: GO 1133
1182: POP
1183: POP
// uc_side := 4 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 3
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 12
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL 38836 0 5
// veh := CreateVehicle ;
1219: LD_ADDR_VAR 0 4
1223: PUSH
1224: CALL_OW 45
1228: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1229: LD_VAR 0 4
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 100
1239: PPUSH
1240: CALL_OW 290
// SetLives ( veh , 450 ) ;
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_INT 450
1251: PPUSH
1252: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_INT 122
1263: PPUSH
1264: LD_INT 118
1266: PPUSH
1267: LD_INT 4
1269: PPUSH
1270: LD_INT 0
1272: PPUSH
1273: CALL 74166 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1277: LD_INT 1
1279: PPUSH
1280: LD_INT 2
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1290: CALL_OW 44
1294: PPUSH
1295: LD_INT 124
1297: PPUSH
1298: LD_INT 120
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_INT 18
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 517
1323: ST_TO_ADDR
// for i := 1 to 4 do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_INT 4
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1446
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1340: LD_INT 1
1342: PPUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 2
1358: PPUSH
1359: CALL_OW 12
1363: ARRAY
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 380
// un := CreateHuman ;
1372: LD_ADDR_VAR 0 3
1376: PUSH
1377: CALL_OW 44
1381: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1382: LD_VAR 0 3
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: LD_INT 5
1392: PPUSH
1393: CALL_OW 12
1397: PPUSH
1398: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1402: LD_VAR 0 3
1406: PPUSH
1407: LD_VAR 0 5
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PPUSH
1422: LD_VAR 0 5
1426: PUSH
1427: LD_INT 2
1429: ARRAY
1430: PUSH
1431: LD_VAR 0 2
1435: ARRAY
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL_OW 601
// end ;
1444: GO 1337
1446: POP
1447: POP
// end ;
1448: LD_VAR 0 1
1452: RET
// export function ChangeSideKappaBase ; begin
1453: LD_INT 0
1455: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1456: LD_INT 70
1458: PPUSH
1459: LD_INT 138
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 80
1467: NEG
1468: PPUSH
1469: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1473: LD_INT 70
1475: PPUSH
1476: LD_INT 138
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1486: LD_INT 147
1488: PPUSH
1489: LD_INT 122
1491: PPUSH
1492: LD_INT 1
1494: PPUSH
1495: LD_INT 40
1497: NEG
1498: PPUSH
1499: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1503: LD_INT 147
1505: PPUSH
1506: LD_INT 122
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1516: LD_INT 22
1518: PUSH
1519: LD_INT 4
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL_OW 235
// end ; end_of_file
1538: LD_VAR 0 1
1542: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// uc_side := 3 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 3
1558: ST_TO_ADDR
// uc_nation := 3 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1567: LD_ADDR_EXP 15
1571: PUSH
1572: LD_INT 8
1574: PUSH
1575: LD_INT 11
1577: PUSH
1578: LD_INT 14
1580: PUSH
1581: LD_INT 17
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_OWVAR 67
1594: ARRAY
1595: ST_TO_ADDR
// ruMobile := [ ] ;
1596: LD_ADDR_EXP 16
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruBuildList := [ ] ;
1603: LD_ADDR_EXP 17
1607: PUSH
1608: EMPTY
1609: ST_TO_ADDR
// ruAttackers := [ ] ;
1610: LD_ADDR_EXP 18
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1617: LD_ADDR_EXP 19
1621: PUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: CALL 33997 0 3
1635: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1636: LD_ADDR_VAR 0 6
1640: PUSH
1641: LD_INT 43
1643: PUSH
1644: LD_INT 46
1646: PUSH
1647: LD_INT 45
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_INT 46
1662: PUSH
1663: LD_INT 70
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 121
1672: PUSH
1673: LD_INT 95
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 68
1682: PUSH
1683: LD_INT 65
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// if not russianRocketsDisabled then
1695: LD_EXP 6
1699: NOT
1700: IFFALSE 1716
// weapons := weapons ^ ru_rocket ;
1702: LD_ADDR_VAR 0 6
1706: PUSH
1707: LD_VAR 0 6
1711: PUSH
1712: LD_INT 47
1714: ADD
1715: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1716: LD_ADDR_EXP 14
1720: PUSH
1721: LD_STRING Eisenstein
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1729: LD_EXP 14
1733: PPUSH
1734: LD_INT 22
1736: PPUSH
1737: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1741: LD_INT 22
1743: PPUSH
1744: CALL_OW 274
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: LD_INT 2250
1754: PUSH
1755: LD_INT 3500
1757: PUSH
1758: LD_INT 4500
1760: PUSH
1761: LD_INT 5600
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_OWVAR 67
1774: ARRAY
1775: PPUSH
1776: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1780: LD_INT 22
1782: PPUSH
1783: CALL_OW 274
1787: PPUSH
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 600
1793: PPUSH
1794: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1798: LD_INT 22
1800: PPUSH
1801: CALL_OW 274
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: LD_INT 100
1811: PPUSH
1812: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1816: LD_INT 116
1818: PPUSH
1819: LD_INT 46
1821: PPUSH
1822: LD_INT 70
1824: PPUSH
1825: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 22
1836: PUSH
1837: LD_INT 3
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 21
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: FOR_IN
1864: IFFALSE 1886
// SetBLevel ( i , 6 + Difficulty ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_INT 6
1873: PUSH
1874: LD_OWVAR 67
1878: PLUS
1879: PPUSH
1880: CALL_OW 241
1884: GO 1863
1886: POP
1887: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: LD_INT 22
1895: PUSH
1896: LD_INT 3
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: LD_INT 30
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 30
1918: PUSH
1919: LD_INT 33
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PPUSH
1935: CALL_OW 69
1939: ST_TO_ADDR
// if russianRocketsDisabled then
1940: LD_EXP 6
1944: IFFALSE 2020
// begin ruTechList := ruTechList diff tech_advrocket ;
1946: LD_ADDR_EXP 19
1950: PUSH
1951: LD_EXP 19
1955: PUSH
1956: LD_INT 71
1958: DIFF
1959: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_VAR 0 4
1969: PPUSH
1970: LD_INT 35
1972: PUSH
1973: LD_INT 47
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 72
1984: PUSH
1985: FOR_IN
1986: IFFALSE 2018
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 6
1997: PUSH
1998: LD_INT 1
2000: PPUSH
2001: LD_VAR 0 6
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PPUSH
2012: CALL_OW 431
2016: GO 1985
2018: POP
2019: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 30
2037: PUSH
2038: LD_INT 32
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL_OW 69
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2104
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2057: LD_INT 0
2059: PPUSH
2060: LD_INT 5
2062: PUSH
2063: LD_INT 6
2065: PUSH
2066: LD_INT 7
2068: PUSH
2069: LD_INT 8
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_OWVAR 67
2082: ARRAY
2083: PPUSH
2084: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2088: CALL_OW 44
2092: PPUSH
2093: LD_VAR 0 2
2097: PPUSH
2098: CALL_OW 52
// end ;
2102: GO 2054
2104: POP
2105: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PPUSH
2135: CALL_OW 69
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2275
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: DOUBLE
2149: LD_INT 1
2151: DEC
2152: ST_TO_ADDR
2153: LD_INT 2
2155: PUSH
2156: LD_INT 2
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: LD_INT 3
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_OWVAR 67
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2271
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 5
2185: PUSH
2186: LD_INT 6
2188: PUSH
2189: LD_INT 7
2191: PUSH
2192: LD_INT 8
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_OWVAR 67
2205: ARRAY
2206: PPUSH
2207: CALL_OW 381
// un := CreateHuman ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: CALL_OW 44
2220: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2235: LD_VAR 0 5
2239: PPUSH
2240: LD_INT 9
2242: PPUSH
2243: CALL_OW 336
// if j = 2 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 2
2254: EQUAL
2255: IFFALSE 2269
// SetUnitAttackType ( un , 3 ) ;
2257: LD_VAR 0 5
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: CALL_OW 603
// end ;
2269: GO 2177
2271: POP
2272: POP
// end ;
2273: GO 2140
2275: POP
2276: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 5
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: LD_INT 6
2295: PUSH
2296: LD_INT 6
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_OWVAR 67
2309: ARRAY
2310: PUSH
2311: FOR_TO
2312: IFFALSE 2359
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 6
2319: PUSH
2320: LD_INT 7
2322: PUSH
2323: LD_INT 9
2325: PUSH
2326: LD_INT 10
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_OWVAR 67
2339: ARRAY
2340: PPUSH
2341: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2345: CALL_OW 44
2349: PPUSH
2350: LD_INT 22
2352: PPUSH
2353: CALL_OW 52
// end ;
2357: GO 2311
2359: POP
2360: POP
// for i := 1 to 2 do
2361: LD_ADDR_VAR 0 2
2365: PUSH
2366: DOUBLE
2367: LD_INT 1
2369: DEC
2370: ST_TO_ADDR
2371: LD_INT 2
2373: PUSH
2374: FOR_TO
2375: IFFALSE 2455
// for j := 1 to 6 do
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: DOUBLE
2383: LD_INT 1
2385: DEC
2386: ST_TO_ADDR
2387: LD_INT 6
2389: PUSH
2390: FOR_TO
2391: IFFALSE 2451
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 6
2398: PUSH
2399: LD_INT 7
2401: PUSH
2402: LD_INT 9
2404: PUSH
2405: LD_INT 10
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2424: CALL_OW 44
2428: PPUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 40
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PPUSH
2445: CALL_OW 52
// end ;
2449: GO 2390
2451: POP
2452: POP
2453: GO 2374
2455: POP
2456: POP
// for i := 1 to 4 do
2457: LD_ADDR_VAR 0 2
2461: PUSH
2462: DOUBLE
2463: LD_INT 1
2465: DEC
2466: ST_TO_ADDR
2467: LD_INT 4
2469: PUSH
2470: FOR_TO
2471: IFFALSE 2518
// begin PrepareScientist ( false , 6 ) ;
2473: LD_INT 0
2475: PPUSH
2476: LD_INT 6
2478: PPUSH
2479: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_INT 14
2490: PUSH
2491: LD_INT 15
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 2
2505: MOD
2506: PUSH
2507: LD_INT 1
2509: PLUS
2510: ARRAY
2511: PPUSH
2512: CALL_OW 52
// end ;
2516: GO 2470
2518: POP
2519: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2520: LD_INT 22
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 51
2531: PPUSH
2532: LD_INT 100
2534: PPUSH
2535: CALL 38836 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2539: CALL_OW 45
2543: PPUSH
2544: LD_INT 116
2546: PPUSH
2547: LD_INT 58
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: LD_INT 0
2555: PPUSH
2556: CALL_OW 50
// for i := 1 to 2 do
2560: LD_ADDR_VAR 0 2
2564: PUSH
2565: DOUBLE
2566: LD_INT 1
2568: DEC
2569: ST_TO_ADDR
2570: LD_INT 2
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2618
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2576: LD_INT 22
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: LD_INT 52
2587: PPUSH
2588: LD_INT 100
2590: PPUSH
2591: CALL 38836 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2595: CALL_OW 45
2599: PPUSH
2600: LD_INT 111
2602: PPUSH
2603: LD_INT 58
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 50
// end ;
2616: GO 2573
2618: POP
2619: POP
// for i := 1 to 4 do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: DOUBLE
2626: LD_INT 1
2628: DEC
2629: ST_TO_ADDR
2630: LD_INT 4
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2663
// begin PrepareApemanEngineer ( ) ;
2636: CALL 68031 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2640: CALL_OW 44
2644: PPUSH
2645: LD_INT 118
2647: PPUSH
2648: LD_INT 50
2650: PPUSH
2651: LD_INT 3
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 50
// end ;
2661: GO 2633
2663: POP
2664: POP
// end ;
2665: LD_VAR 0 1
2669: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2670: LD_EXP 19
2674: IFFALSE 2802
2676: GO 2678
2678: DISABLE
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// begin enable ;
2684: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2685: LD_ADDR_VAR 0 3
2689: PUSH
2690: LD_INT 14
2692: PUSH
2693: LD_INT 15
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PPUSH
2700: LD_INT 50
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: ST_TO_ADDR
// if not labs then
2711: LD_VAR 0 3
2715: NOT
2716: IFFALSE 2721
// begin disable ;
2718: DISABLE
// exit ;
2719: GO 2802
// end ; for i in labs do
2721: LD_ADDR_VAR 0 1
2725: PUSH
2726: LD_VAR 0 3
2730: PUSH
2731: FOR_IN
2732: IFFALSE 2800
// if BuildingStatus ( i ) = bs_idle then
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 461
2743: PUSH
2744: LD_INT 2
2746: EQUAL
2747: IFFALSE 2798
// for t in ruTechList do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_EXP 19
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2796
// if CanBeResearched ( i , t ) then
2762: LD_VAR 0 1
2766: PPUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: CALL_OW 430
2776: IFFALSE 2794
// begin ComResearch ( i , t ) ;
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 2
2787: PPUSH
2788: CALL_OW 124
// break ;
2792: GO 2796
// end ;
2794: GO 2759
2796: POP
2797: POP
2798: GO 2731
2800: POP
2801: POP
// end ;
2802: PPOPN 3
2804: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2805: LD_INT 3
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 32
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PPUSH
2836: CALL_OW 69
2840: IFFALSE 2924
2842: GO 2844
2844: DISABLE
2845: LD_INT 0
2847: PPUSH
// begin enable ;
2848: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2849: LD_ADDR_VAR 0 1
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 32
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: FOR_IN
2891: IFFALSE 2922
// if GetFuel ( i ) < 3 then
2893: LD_VAR 0 1
2897: PPUSH
2898: CALL_OW 261
2902: PUSH
2903: LD_INT 3
2905: LESS
2906: IFFALSE 2920
// SetFuel ( i , 3 ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 240
2920: GO 2890
2922: POP
2923: POP
// end ;
2924: PPOPN 1
2926: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2927: LD_INT 1
2929: PUSH
2930: LD_INT 40
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: LD_INT 3
2939: PUSH
2940: LD_INT 58
2942: PUSH
2943: EMPTY
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 50
2952: PUSH
2953: EMPTY
2954: LIST
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PPUSH
2960: CALL_OW 72
2964: IFFALSE 2997
2966: PUSH
2967: LD_EXP 18
2971: PUSH
2972: LD_INT 6
2974: PUSH
2975: LD_INT 8
2977: PUSH
2978: LD_INT 10
2980: PUSH
2981: LD_INT 12
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_OWVAR 67
2994: ARRAY
2995: LESS
2996: AND
2997: IFFALSE 3336
2999: GO 3001
3001: DISABLE
3002: LD_INT 0
3004: PPUSH
3005: PPUSH
3006: PPUSH
// begin enable ;
3007: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
3008: LD_ADDR_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PUSH
3016: LD_INT 40
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: LD_INT 50
3025: PUSH
3026: EMPTY
3027: LIST
3028: PPUSH
3029: CALL_OW 72
3033: PUSH
3034: FOR_IN
3035: IFFALSE 3334
// begin if BuildingStatus ( i ) <> bs_idle then
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 461
3046: PUSH
3047: LD_INT 2
3049: NONEQUAL
3050: IFFALSE 3054
// continue ;
3052: GO 3034
// if i = ruFac1 then
3054: LD_VAR 0 1
3058: PUSH
3059: LD_INT 1
3061: EQUAL
3062: IFFALSE 3105
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_INT 21
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 23
3077: PUSH
3078: LD_INT 23
3080: PUSH
3081: LD_INT 24
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 12
3101: ARRAY
3102: ST_TO_ADDR
3103: GO 3132
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 21
3112: PUSH
3113: LD_INT 23
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_INT 49
3139: PUSH
3140: LD_INT 44
3142: PUSH
3143: LD_INT 43
3145: PUSH
3146: LD_INT 46
3148: PUSH
3149: LD_INT 45
3151: PUSH
3152: LD_INT 46
3154: PUSH
3155: LD_INT 45
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// if not russianRocketsDisabled then
3167: LD_EXP 6
3171: NOT
3172: IFFALSE 3192
// weapon := Join ( weapon , ru_rocket ) ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 47
3186: PPUSH
3187: CALL 72006 0 2
3191: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3192: LD_ADDR_VAR 0 3
3196: PUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: CALL 36074 0 1
3214: PPUSH
3215: CALL_OW 12
3219: ARRAY
3220: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 21
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: IFFALSE 3255
3238: PUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 46
3246: PUSH
3247: LD_INT 47
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: IN
3254: AND
3255: IFFALSE 3288
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 44
3264: PUSH
3265: LD_INT 45
3267: PUSH
3268: LD_INT 49
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 2
3313: PPUSH
3314: CALL_OW 12
3318: ARRAY
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_VAR 0 3
3327: PPUSH
3328: CALL_OW 185
// end ;
3332: GO 3034
3334: POP
3335: POP
// end ;
3336: PPOPN 3
3338: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3339: LD_INT 22
3341: PPUSH
3342: CALL_OW 302
3346: IFFALSE 4227
3348: GO 3350
3350: DISABLE
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
// begin enable ;
3361: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: LD_INT 12
3369: PPUSH
3370: LD_INT 3
3372: PUSH
3373: LD_INT 24
3375: PUSH
3376: LD_INT 1000
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 21
3389: PUSH
3390: LD_INT 3
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 70
3405: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3406: LD_ADDR_VAR 0 4
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 25
3423: PUSH
3424: LD_INT 2
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 34
3457: PUSH
3458: LD_INT 52
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3474: LD_ADDR_VAR 0 7
3478: PUSH
3479: LD_INT 22
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 25
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3508: LD_ADDR_VAR 0 8
3512: PUSH
3513: LD_INT 14
3515: PUSH
3516: LD_INT 15
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3523: LD_VAR 0 7
3527: IFFALSE 3550
3529: PUSH
3530: LD_VAR 0 4
3534: PPUSH
3535: LD_INT 120
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 72
3549: AND
3550: IFFALSE 3563
// ComExitAll ( sci ) else
3552: LD_VAR 0 7
3556: PPUSH
3557: CALL 72487 0 1
3561: GO 3647
// if sci then
3563: LD_VAR 0 7
3567: IFFALSE 3647
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: IFFALSE 3599
3593: PUSH
3594: LD_VAR 0 8
3598: AND
3599: IFFALSE 3647
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3601: LD_VAR 0 7
3605: PPUSH
3606: LD_INT 3
3608: PUSH
3609: LD_INT 54
3611: PUSH
3612: EMPTY
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PPUSH
3619: CALL_OW 72
3623: PPUSH
3624: LD_VAR 0 8
3628: PUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_VAR 0 8
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3647: LD_VAR 0 5
3651: PPUSH
3652: LD_INT 50
3654: PUSH
3655: EMPTY
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: IFFALSE 3670
3664: PUSH
3665: LD_VAR 0 3
3669: AND
3670: IFFALSE 3711
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3672: LD_VAR 0 5
3676: PPUSH
3677: LD_INT 50
3679: PUSH
3680: EMPTY
3681: LIST
3682: PPUSH
3683: CALL_OW 72
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_VAR 0 5
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: CALL_OW 74
3706: PPUSH
3707: CALL_OW 130
// if eng then
3711: LD_VAR 0 4
3715: IFFALSE 4227
// begin for i in eng do
3717: LD_ADDR_VAR 0 1
3721: PUSH
3722: LD_VAR 0 4
3726: PUSH
3727: FOR_IN
3728: IFFALSE 4225
// begin tag := GetTag ( i ) ;
3730: LD_ADDR_VAR 0 6
3734: PUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 110
3744: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3745: LD_VAR 0 3
3749: NOT
3750: IFFALSE 3759
3752: PUSH
3753: LD_EXP 17
3757: NOT
3758: AND
3759: IFFALSE 3771
3761: PUSH
3762: LD_VAR 0 6
3766: PUSH
3767: LD_INT 1
3769: EQUAL
3770: AND
3771: IFFALSE 3797
// begin SetTag ( i , 0 ) ;
3773: LD_VAR 0 1
3777: PPUSH
3778: LD_INT 0
3780: PPUSH
3781: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3785: LD_VAR 0 1
3789: PPUSH
3790: LD_INT 22
3792: PPUSH
3793: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3797: LD_VAR 0 3
3801: IFTRUE 3809
3803: PUSH
3804: LD_EXP 17
3808: OR
3809: IFFALSE 3821
3811: PUSH
3812: LD_VAR 0 6
3816: PUSH
3817: LD_INT 0
3819: EQUAL
3820: AND
3821: IFFALSE 3835
// SetTag ( i , 1 ) ;
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 310
3844: IFFALSE 3856
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3867
// ComExit ( i ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL 72404 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3867: LD_VAR 0 1
3871: PPUSH
3872: CALL_OW 256
3876: PUSH
3877: LD_INT 700
3879: LESS
3880: IFFALSE 3892
3882: PUSH
3883: LD_VAR 0 6
3887: PUSH
3888: LD_INT 1
3890: EQUAL
3891: AND
3892: IFFALSE 3906
// SetTag ( i , 2 ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3906: LD_VAR 0 1
3910: PPUSH
3911: CALL_OW 256
3915: PUSH
3916: LD_INT 1000
3918: EQUAL
3919: IFFALSE 3931
3921: PUSH
3922: LD_VAR 0 6
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: AND
3931: IFFALSE 3945
// SetTag ( i , 1 ) ;
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: CALL_OW 109
// if tag = 2 then
3945: LD_VAR 0 6
3949: PUSH
3950: LD_INT 2
3952: EQUAL
3953: IFFALSE 4000
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3955: LD_VAR 0 1
3959: PPUSH
3960: LD_INT 110
3962: PPUSH
3963: LD_INT 41
3965: PPUSH
3966: CALL_OW 297
3970: PUSH
3971: LD_INT 6
3973: GREATER
3974: IFFALSE 4000
// begin ComMoveXY ( i , 110 , 41 ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 110
3983: PPUSH
3984: LD_INT 41
3986: PPUSH
3987: CALL_OW 111
// AddComHold ( i ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 308
4012: IFFALSE 4026
// ComMoveToArea ( i , ruBaseArea ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_INT 12
4021: PPUSH
4022: CALL_OW 113
// if tag = 1 then
4026: LD_VAR 0 6
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4223
// begin if b then
4036: LD_VAR 0 3
4040: IFFALSE 4068
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 130
4066: GO 4223
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4068: LD_EXP 17
4072: IFFALSE 4097
4074: PUSH
4075: LD_INT 11
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 70
4092: PUSH
4093: LD_INT 0
4095: EQUAL
4096: AND
4097: IFFALSE 4160
4099: PUSH
4100: LD_INT 22
4102: PPUSH
4103: LD_EXP 17
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: PUSH
4112: LD_INT 1
4114: ARRAY
4115: PPUSH
4116: LD_EXP 17
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: PUSH
4125: LD_INT 2
4127: ARRAY
4128: PPUSH
4129: LD_EXP 17
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PUSH
4138: LD_INT 3
4140: ARRAY
4141: PPUSH
4142: LD_EXP 17
4146: PUSH
4147: LD_INT 1
4149: ARRAY
4150: PUSH
4151: LD_INT 4
4153: ARRAY
4154: PPUSH
4155: CALL 47514 0 5
4159: AND
4160: IFFALSE 4223
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4162: LD_VAR 0 1
4166: PPUSH
4167: LD_EXP 17
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: LD_EXP 17
4184: PUSH
4185: LD_INT 1
4187: ARRAY
4188: PUSH
4189: LD_INT 2
4191: ARRAY
4192: PPUSH
4193: LD_EXP 17
4197: PUSH
4198: LD_INT 1
4200: ARRAY
4201: PUSH
4202: LD_INT 3
4204: ARRAY
4205: PPUSH
4206: LD_EXP 17
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PUSH
4215: LD_INT 4
4217: ARRAY
4218: PPUSH
4219: CALL_OW 145
// end ; end ;
4223: GO 3727
4225: POP
4226: POP
// end ; end ;
4227: PPOPN 8
4229: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 3
4242: PUSH
4243: LD_INT 60
4245: PUSH
4246: EMPTY
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 50
4255: PUSH
4256: EMPTY
4257: LIST
4258: PUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 16
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: PPUSH
4275: CALL_OW 69
4279: IFFALSE 4290
4281: PUSH
4282: LD_INT 14
4284: PPUSH
4285: CALL_OW 435
4289: AND
4290: IFFALSE 4402
4292: GO 4294
4294: DISABLE
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
// begin enable ;
4299: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4300: LD_ADDR_VAR 0 2
4304: PUSH
4305: LD_INT 14
4307: PPUSH
4308: CALL_OW 435
4312: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4313: LD_ADDR_VAR 0 1
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 3
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 60
4333: PUSH
4334: EMPTY
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 50
4343: PUSH
4344: EMPTY
4345: LIST
4346: PUSH
4347: LD_INT 25
4349: PUSH
4350: LD_INT 16
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: PPUSH
4363: CALL_OW 69
4367: PUSH
4368: FOR_IN
4369: IFFALSE 4400
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4371: LD_VAR 0 1
4375: PPUSH
4376: LD_VAR 0 2
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: PPUSH
4385: LD_VAR 0 2
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: CALL_OW 117
4398: GO 4368
4400: POP
4401: POP
// end ;
4402: PPOPN 2
4404: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4405: LD_INT 22
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 60
4420: PUSH
4421: EMPTY
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 50
4430: PUSH
4431: EMPTY
4432: LIST
4433: PUSH
4434: LD_INT 34
4436: PUSH
4437: LD_INT 51
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: IFFALSE 4465
4456: PUSH
4457: LD_INT 13
4459: PPUSH
4460: CALL_OW 435
4464: AND
4465: IFFALSE 4577
4467: GO 4469
4469: DISABLE
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
// begin enable ;
4474: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: LD_INT 13
4482: PPUSH
4483: CALL_OW 435
4487: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 60
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 50
4518: PUSH
4519: EMPTY
4520: LIST
4521: PUSH
4522: LD_INT 34
4524: PUSH
4525: LD_INT 51
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 69
4542: PUSH
4543: FOR_IN
4544: IFFALSE 4575
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_VAR 0 2
4555: PUSH
4556: LD_INT 1
4558: ARRAY
4559: PPUSH
4560: LD_VAR 0 2
4564: PUSH
4565: LD_INT 2
4567: ARRAY
4568: PPUSH
4569: CALL_OW 117
4573: GO 4543
4575: POP
4576: POP
// end ;
4577: PPOPN 2
4579: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4580: LD_OWVAR 67
4584: PUSH
4585: LD_INT 1
4587: GREATER
4588: IFFALSE 4599
4590: PUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 302
4598: AND
4599: IFFALSE 4759
4601: GO 4603
4603: DISABLE
4604: LD_INT 0
4606: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4607: LD_ADDR_VAR 0 1
4611: PUSH
4612: DOUBLE
4613: LD_INT 1
4615: DEC
4616: ST_TO_ADDR
4617: LD_INT 3
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 5
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: PUSH
4631: LD_OWVAR 67
4635: PUSH
4636: LD_INT 1
4638: MINUS
4639: ARRAY
4640: PUSH
4641: FOR_TO
4642: IFFALSE 4686
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4644: LD_INT 1
4646: PUSH
4647: LD_INT 40
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_VAR 0 1
4658: PUSH
4659: LD_INT 2
4661: MOD
4662: PUSH
4663: LD_INT 1
4665: PLUS
4666: ARRAY
4667: PPUSH
4668: LD_INT 21
4670: PPUSH
4671: LD_INT 3
4673: PPUSH
4674: LD_INT 1
4676: PPUSH
4677: LD_INT 45
4679: PPUSH
4680: CALL_OW 185
// end ;
4684: GO 4641
4686: POP
4687: POP
// repeat wait ( 6 6$00 ) ;
4688: LD_INT 12600
4690: PPUSH
4691: CALL_OW 67
// for i := 1 to 2 do
4695: LD_ADDR_VAR 0 1
4699: PUSH
4700: DOUBLE
4701: LD_INT 1
4703: DEC
4704: ST_TO_ADDR
4705: LD_INT 2
4707: PUSH
4708: FOR_TO
4709: IFFALSE 4732
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 21
4716: PPUSH
4717: LD_INT 3
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_INT 45
4725: PPUSH
4726: CALL_OW 185
4730: GO 4708
4732: POP
4733: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4734: LD_INT 1
4736: PPUSH
4737: CALL_OW 302
4741: NOT
4742: IFTRUE 4757
4744: PUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 313
4752: PUSH
4753: LD_INT 0
4755: EQUAL
4756: OR
4757: IFFALSE 4688
// end ;
4759: PPOPN 1
4761: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4762: LD_EXP 16
4766: IFFALSE 5356
4768: GO 4770
4770: DISABLE
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// begin enable ;
4776: ENABLE
// if not ruMobile then
4777: LD_EXP 16
4781: NOT
4782: IFFALSE 4786
// exit ;
4784: GO 5356
// for i in ruMobile do
4786: LD_ADDR_VAR 0 1
4790: PUSH
4791: LD_EXP 16
4795: PUSH
4796: FOR_IN
4797: IFFALSE 5354
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4799: LD_VAR 0 1
4803: PPUSH
4804: CALL_OW 302
4808: NOT
4809: IFTRUE 4826
4811: PUSH
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL_OW 255
4821: PUSH
4822: LD_INT 3
4824: NONEQUAL
4825: OR
4826: IFFALSE 4846
// begin ruMobile := ruMobile diff i ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: LD_EXP 16
4837: PUSH
4838: LD_VAR 0 1
4842: DIFF
4843: ST_TO_ADDR
// continue ;
4844: GO 4796
// end ; if GetTag ( i ) = 300 then
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 110
4855: PUSH
4856: LD_INT 300
4858: EQUAL
4859: IFFALSE 4991
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL_OW 261
4870: PUSH
4871: LD_INT 50
4873: LESS
4874: IFFALSE 4891
4876: PUSH
4877: LD_VAR 0 1
4881: PPUSH
4882: CALL_OW 262
4886: PUSH
4887: LD_INT 1
4889: EQUAL
4890: AND
4891: IFFALSE 4950
// begin ComMoveXY ( i , 120 , 58 ) ;
4893: LD_VAR 0 1
4897: PPUSH
4898: LD_INT 120
4900: PPUSH
4901: LD_INT 58
4903: PPUSH
4904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4908: LD_INT 35
4910: PPUSH
4911: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_INT 120
4922: PPUSH
4923: LD_INT 58
4925: PPUSH
4926: CALL_OW 297
4930: PUSH
4931: LD_INT 4
4933: LESS
4934: IFFALSE 4908
// SetFuel ( i , 100 ) ;
4936: LD_VAR 0 1
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// end else
4948: GO 4991
// if not IsInArea ( i , ruParkingArea ) then
4950: LD_VAR 0 1
4954: PPUSH
4955: LD_INT 10
4957: PPUSH
4958: CALL_OW 308
4962: NOT
4963: IFFALSE 4979
// ComMoveToArea ( i , ruParkingArea ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_INT 10
4972: PPUSH
4973: CALL_OW 113
4977: GO 4991
// SetTag ( i , 301 ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_INT 301
4986: PPUSH
4987: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 110
5000: PUSH
5001: LD_INT 301
5003: EQUAL
5004: IFFALSE 5134
// begin if GetLives ( i ) < 1000 then
5006: LD_VAR 0 1
5010: PPUSH
5011: CALL_OW 256
5015: PUSH
5016: LD_INT 1000
5018: LESS
5019: IFFALSE 5111
// begin if not IsDrivenBy ( i ) then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 311
5030: NOT
5031: IFFALSE 5035
// continue ;
5033: GO 4796
// mech := IsDrivenBy ( i ) ;
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 311
5049: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5073: LD_INT 35
5075: PPUSH
5076: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 256
5089: PUSH
5090: LD_INT 1000
5092: EQUAL
5093: IFFALSE 5073
// ComEnterUnit ( mech , i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 120
// end else
5109: GO 5134
// if IsDrivenBy ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 311
5120: IFFALSE 5134
// SetTag ( i , 0 ) ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5134: LD_VAR 0 1
5138: PPUSH
5139: CALL_OW 110
5143: PUSH
5144: LD_INT 300
5146: LESS
5147: IFFALSE 5352
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5149: LD_ADDR_VAR 0 3
5153: PUSH
5154: LD_INT 11
5156: PPUSH
5157: LD_INT 81
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 70
5171: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 256
5181: PUSH
5182: LD_INT 650
5184: LESS
5185: IFFALSE 5210
// begin ComStop ( i ) ;
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 141
// SetTag ( i , 300 ) ;
5196: LD_VAR 0 1
5200: PPUSH
5201: LD_INT 300
5203: PPUSH
5204: CALL_OW 109
// continue ;
5208: GO 4796
// end ; if enemy then
5210: LD_VAR 0 3
5214: IFFALSE 5254
// begin if not HasTask ( i ) then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 314
5225: NOT
5226: IFFALSE 5252
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 74
5247: PPUSH
5248: CALL_OW 115
// end else
5252: GO 5352
// if ruMobile then
5254: LD_EXP 16
5258: IFFALSE 5352
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 81
5267: PUSH
5268: LD_INT 3
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if enemy then
5280: LD_VAR 0 3
5284: IFFALSE 5352
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5286: LD_VAR 0 1
5290: PPUSH
5291: LD_INT 113
5293: PUSH
5294: LD_INT 80
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 118
5303: PUSH
5304: LD_INT 100
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 107
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 114
5323: PUSH
5324: LD_INT 120
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 86
5333: PUSH
5334: LD_INT 116
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL 74772 0 2
// end ; end ; end ;
5352: GO 4796
5354: POP
5355: POP
// end ;
5356: PPOPN 3
5358: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5359: LD_EXP 18
5363: IFFALSE 5409
5365: GO 5367
5367: DISABLE
5368: LD_INT 0
5370: PPUSH
// begin enable ;
5371: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_EXP 18
5381: PPUSH
5382: LD_INT 50
5384: PUSH
5385: EMPTY
5386: LIST
5387: PPUSH
5388: CALL_OW 72
5392: ST_TO_ADDR
// ruAttackers := [ ] ;
5393: LD_ADDR_EXP 18
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// SendAttack ( tmp ) ;
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL 5412 0 1
// end ;
5409: PPOPN 1
5411: END
// function SendAttack ( group ) ; var i , tmp ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
5416: PPUSH
// for i in group do
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5494
// begin SetTag ( i , 0 ) ;
5430: LD_VAR 0 3
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 109
// if Prob ( 30 ) then
5442: LD_INT 30
5444: PPUSH
5445: CALL_OW 13
5449: IFFALSE 5477
// begin SetTag ( i , 1 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_INT 116
5470: PPUSH
5471: CALL_OW 120
// end else
5475: GO 5492
// ComAgressiveMove ( i , 118 , 93 ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_INT 118
5484: PPUSH
5485: LD_INT 93
5487: PPUSH
5488: CALL_OW 114
// end ;
5492: GO 5427
5494: POP
5495: POP
// repeat wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_VAR 0 1
5512: PPUSH
5513: LD_INT 120
5515: PUSH
5516: LD_INT 0
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 72
5527: ST_TO_ADDR
// for i in tmp do
5528: LD_ADDR_VAR 0 3
5532: PUSH
5533: LD_VAR 0 4
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5686
// begin if not IsOk ( i ) then
5541: LD_VAR 0 3
5545: PPUSH
5546: CALL_OW 302
5550: NOT
5551: IFFALSE 5571
// begin tmp := tmp diff i ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_VAR 0 4
5562: PUSH
5563: LD_VAR 0 3
5567: DIFF
5568: ST_TO_ADDR
// continue ;
5569: GO 5538
// end ; if GetDistUnits ( i , usDep ) < 8 then
5571: LD_VAR 0 3
5575: PPUSH
5576: LD_INT 48
5578: PPUSH
5579: CALL_OW 296
5583: PUSH
5584: LD_INT 8
5586: LESS
5587: IFFALSE 5603
// begin ComAttackUnit ( i , usDep ) ;
5589: LD_VAR 0 3
5593: PPUSH
5594: LD_INT 48
5596: PPUSH
5597: CALL_OW 115
// continue ;
5601: GO 5538
// end ; if not See ( 1 , i ) then
5603: LD_INT 1
5605: PPUSH
5606: LD_VAR 0 3
5610: PPUSH
5611: CALL_OW 292
5615: NOT
5616: IFFALSE 5635
// ComAgressiveMove ( i , 86 , 116 ) else
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 86
5625: PPUSH
5626: LD_INT 116
5628: PPUSH
5629: CALL_OW 114
5633: GO 5684
// if GetWeapon ( i ) <> ru_time_lapser then
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 264
5644: PUSH
5645: LD_INT 49
5647: NONEQUAL
5648: IFFALSE 5684
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5650: LD_VAR 0 3
5654: PPUSH
5655: LD_INT 81
5657: PUSH
5658: LD_INT 3
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PPUSH
5670: LD_VAR 0 3
5674: PPUSH
5675: CALL_OW 74
5679: PPUSH
5680: CALL_OW 115
// end ;
5684: GO 5538
5686: POP
5687: POP
// until not tmp ;
5688: LD_VAR 0 4
5692: NOT
5693: IFFALSE 5496
// end ; end_of_file
5695: LD_VAR 0 2
5699: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL 27647 0 1
// if unit = JMM then
5713: LD_VAR 0 1
5717: PUSH
5718: LD_EXP 8
5722: EQUAL
5723: IFFALSE 5732
// YouLost ( JMM ) ;
5725: LD_STRING JMM
5727: PPUSH
5728: CALL_OW 104
// if GetSide ( unit ) = 4 then
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 255
5741: PUSH
5742: LD_INT 4
5744: EQUAL
5745: IFFALSE 5804
// begin if unit = Joan then
5747: LD_VAR 0 1
5751: PUSH
5752: LD_EXP 10
5756: EQUAL
5757: IFFALSE 5766
// YouLost ( Joan ) ;
5759: LD_STRING Joan
5761: PPUSH
5762: CALL_OW 104
// if unit = Connie then
5766: LD_VAR 0 1
5770: PUSH
5771: LD_EXP 12
5775: EQUAL
5776: IFFALSE 5785
// YouLost ( Connie ) ;
5778: LD_STRING Connie
5780: PPUSH
5781: CALL_OW 104
// if unit = Lisa then
5785: LD_VAR 0 1
5789: PUSH
5790: LD_EXP 11
5794: EQUAL
5795: IFFALSE 5804
// YouLost ( Lisa ) ;
5797: LD_STRING Lisa
5799: PPUSH
5800: CALL_OW 104
// end ; if unit in ruAttackers then
5804: LD_VAR 0 1
5808: PUSH
5809: LD_EXP 18
5813: IN
5814: IFFALSE 5832
// ruAttackers := ruAttackers diff unit ;
5816: LD_ADDR_EXP 18
5820: PUSH
5821: LD_EXP 18
5825: PUSH
5826: LD_VAR 0 1
5830: DIFF
5831: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5832: LD_VAR 0 1
5836: PPUSH
5837: CALL_OW 264
5841: PUSH
5842: LD_INT 51
5844: EQUAL
5845: IFFALSE 5856
5847: PUSH
5848: LD_INT 40
5850: PPUSH
5851: CALL_OW 302
5855: AND
5856: IFFALSE 5896
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5858: LD_INT 40
5860: PPUSH
5861: LD_INT 21
5863: PPUSH
5864: LD_INT 1
5866: PUSH
5867: LD_INT 3
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: CALL_OW 12
5884: ARRAY
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 51
5891: PPUSH
5892: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5896: LD_VAR 0 1
5900: PPUSH
5901: CALL_OW 264
5905: PUSH
5906: LD_INT 52
5908: EQUAL
5909: IFFALSE 5920
5911: PUSH
5912: LD_INT 40
5914: PPUSH
5915: CALL_OW 302
5919: AND
5920: IFFALSE 5960
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5922: LD_INT 40
5924: PPUSH
5925: LD_INT 21
5927: PPUSH
5928: LD_INT 1
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: PUSH
5938: LD_INT 1
5940: PPUSH
5941: LD_INT 2
5943: PPUSH
5944: CALL_OW 12
5948: ARRAY
5949: PPUSH
5950: LD_INT 3
5952: PPUSH
5953: LD_INT 52
5955: PPUSH
5956: CALL_OW 185
// if unit in ruMobile then
5960: LD_VAR 0 1
5964: PUSH
5965: LD_EXP 16
5969: IN
5970: IFFALSE 5988
// ruMobile := ruMobile diff i ;
5972: LD_ADDR_EXP 16
5976: PUSH
5977: LD_EXP 16
5981: PUSH
5982: LD_VAR 0 2
5986: DIFF
5987: ST_TO_ADDR
// if unit = ruCommander then
5988: LD_VAR 0 1
5992: PUSH
5993: LD_EXP 14
5997: EQUAL
5998: IFFALSE 6161
// begin repeat wait ( 0 0$2 ) ;
6000: LD_INT 70
6002: PPUSH
6003: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
6007: LD_ADDR_VAR 0 3
6011: PUSH
6012: LD_INT 22
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 23
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 50
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 21
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: ST_TO_ADDR
// if tmp then
6059: LD_VAR 0 3
6063: IFFALSE 6154
// for i in tmp do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6152
// begin if IsInUnit ( i ) then
6078: LD_VAR 0 2
6082: PPUSH
6083: CALL_OW 310
6087: IFFALSE 6098
// ComExit ( i ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL 72404 0 1
// wait ( 3 ) ;
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6105: LD_VAR 0 2
6109: PPUSH
6110: LD_INT 147
6112: PPUSH
6113: LD_INT 18
6115: PPUSH
6116: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6120: LD_VAR 0 2
6124: PPUSH
6125: LD_INT 147
6127: PPUSH
6128: LD_INT 18
6130: PPUSH
6131: CALL_OW 297
6135: PUSH
6136: LD_INT 3
6138: LESS
6139: IFFALSE 6150
// RemoveUnit ( i ) ;
6141: LD_VAR 0 2
6145: PPUSH
6146: CALL_OW 64
// end ;
6150: GO 6075
6152: POP
6153: POP
// until not tmp ;
6154: LD_VAR 0 3
6158: NOT
6159: IFFALSE 6000
// end ; end ;
6161: PPOPN 3
6163: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
6164: LD_VAR 0 3
6168: PPUSH
6169: CALL_OW 264
6173: PUSH
6174: LD_INT 10
6176: EQUAL
6177: IFFALSE 6194
// killCounter := Inc ( killCounter ) ;
6179: LD_ADDR_EXP 5
6183: PUSH
6184: LD_EXP 5
6188: PPUSH
6189: CALL 73379 0 1
6193: ST_TO_ADDR
// end ;
6194: PPOPN 3
6196: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 3
6209: EQUAL
6210: IFFALSE 6224
// SetTag ( unit , 0 ) ;
6212: LD_VAR 0 2
6216: PPUSH
6217: LD_INT 0
6219: PPUSH
6220: CALL_OW 109
// end ;
6224: PPOPN 2
6226: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL_OW 255
6236: PUSH
6237: LD_INT 3
6239: EQUAL
6240: IFFALSE 6254
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: LD_EXP 19
6252: IN
6253: AND
6254: IFFALSE 6272
// ruTechList := ruTechList diff tech ;
6256: LD_ADDR_EXP 19
6260: PUSH
6261: LD_EXP 19
6265: PUSH
6266: LD_VAR 0 1
6270: DIFF
6271: ST_TO_ADDR
// end ;
6272: PPOPN 2
6274: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6275: LD_INT 0
6277: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: CALL 27705 0 2
// if GetSide ( vehicle ) <> 3 then
6292: LD_VAR 0 1
6296: PPUSH
6297: CALL_OW 255
6301: PUSH
6302: LD_INT 3
6304: NONEQUAL
6305: IFFALSE 6376
// begin if GetWeapon ( vehicle ) = us_double_laser then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 264
6316: PUSH
6317: LD_INT 10
6319: EQUAL
6320: IFFALSE 6374
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6322: LD_ADDR_EXP 7
6326: PUSH
6327: LD_EXP 7
6331: PPUSH
6332: CALL 73379 0 1
6336: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_VAR 0 2
6346: PPUSH
6347: CALL_OW 313
6351: PUSH
6352: FOR_IN
6353: IFFALSE 6372
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6355: LD_VAR 0 3
6359: PPUSH
6360: LD_INT 3
6362: PPUSH
6363: LD_INT 1000
6365: PPUSH
6366: CALL_OW 591
6370: GO 6352
6372: POP
6373: POP
// end ; exit ;
6374: GO 6470
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 264
6385: PUSH
6386: LD_INT 51
6388: PUSH
6389: LD_INT 52
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: IN
6396: IFFALSE 6400
// exit ;
6398: GO 6470
// if GetControl ( vehicle ) = control_computer then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 263
6409: PUSH
6410: LD_INT 3
6412: EQUAL
6413: IFFALSE 6435
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6415: LD_ADDR_EXP 18
6419: PUSH
6420: LD_EXP 18
6424: PPUSH
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL 72006 0 2
6434: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 263
6444: PUSH
6445: LD_INT 1
6447: EQUAL
6448: IFFALSE 6470
// ruMobile := Join ( ruMobile , vehicle ) ;
6450: LD_ADDR_EXP 16
6454: PUSH
6455: LD_EXP 16
6459: PPUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL 72006 0 2
6469: ST_TO_ADDR
// end ;
6470: PPOPN 3
6472: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 255
6482: PUSH
6483: LD_INT 3
6485: EQUAL
6486: IFFALSE 6503
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 257
6498: PUSH
6499: LD_INT 3
6501: EQUAL
6502: AND
6503: IFFALSE 6570
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 255
6512: PUSH
6513: LD_INT 3
6515: EQUAL
6516: IFFALSE 6527
6518: PUSH
6519: LD_INT 1
6521: PPUSH
6522: CALL_OW 302
6526: AND
6527: IFFALSE 6542
6529: PUSH
6530: LD_INT 1
6532: PPUSH
6533: CALL_OW 313
6537: PUSH
6538: LD_INT 6
6540: LESS
6541: AND
6542: IFFALSE 6558
// ComEnterUnit ( human , ruFac1 ) else
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: CALL_OW 120
6556: GO 6570
// ComEnterUnit ( human , ruFac2 ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: LD_INT 40
6565: PPUSH
6566: CALL_OW 120
// end ;
6570: PPOPN 4
6572: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6573: LD_VAR 0 1
6577: PPUSH
6578: CALL 27689 0 1
// end ; end_of_file
6582: PPOPN 1
6584: END
// export function Action ; var dec1 , dec2 , veh ; begin
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
// veh := IsInUnit ( JMM ) ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: LD_EXP 8
6600: PPUSH
6601: CALL_OW 310
6605: ST_TO_ADDR
// InGameOn ;
6606: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6610: LD_VAR 0 4
6614: PPUSH
6615: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6619: LD_VAR 0 4
6623: PPUSH
6624: LD_INT 30
6626: PPUSH
6627: LD_INT 11
6629: PPUSH
6630: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_INT 69
6641: PPUSH
6642: LD_INT 34
6644: PPUSH
6645: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6649: LD_INT 30
6651: PPUSH
6652: LD_INT 11
6654: PPUSH
6655: CALL_OW 84
// wait ( 0 0$3 ) ;
6659: LD_INT 105
6661: PPUSH
6662: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6666: LD_EXP 13
6670: PPUSH
6671: LD_STRING D1-Pow-1
6673: PPUSH
6674: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6678: LD_EXP 8
6682: PPUSH
6683: CALL_OW 121
// AddComHold ( JMM ) ;
6687: LD_EXP 8
6691: PPUSH
6692: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6696: LD_EXP 8
6700: PPUSH
6701: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6705: LD_EXP 8
6709: PPUSH
6710: LD_STRING D1-JMM-1
6712: PPUSH
6713: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6717: LD_EXP 13
6721: PPUSH
6722: LD_STRING D1-Pow-2
6724: PPUSH
6725: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6729: LD_EXP 8
6733: PPUSH
6734: LD_STRING D1-JMM-2
6736: PPUSH
6737: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6741: LD_EXP 8
6745: PPUSH
6746: LD_VAR 0 4
6750: PPUSH
6751: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6755: LD_STRING M1
6757: PPUSH
6758: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6762: LD_INT 16
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6772: LD_INT 35
6774: PPUSH
6775: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6779: LD_EXP 8
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6793: LD_VAR 0 4
6797: PPUSH
6798: LD_INT 51
6800: PPUSH
6801: LD_INT 21
6803: PPUSH
6804: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6808: LD_VAR 0 4
6812: PPUSH
6813: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6817: LD_VAR 0 4
6821: PPUSH
6822: LD_INT 51
6824: PPUSH
6825: LD_INT 21
6827: PPUSH
6828: CALL_OW 297
6832: PUSH
6833: LD_INT 6
6835: LESS
6836: IFFALSE 6772
// if JMMGirl = 1 then
6838: LD_EXP 2
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 7145
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6848: LD_EXP 10
6852: PPUSH
6853: LD_STRING D2J-Joan-1
6855: PPUSH
6856: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_STRING Q1
6867: PPUSH
6868: CALL_OW 97
6872: ST_TO_ADDR
// if dec1 = 1 then
6873: LD_VAR 0 2
6877: PUSH
6878: LD_INT 1
6880: EQUAL
6881: IFFALSE 7136
// begin ComExitVehicle ( JMM ) ;
6883: LD_EXP 8
6887: PPUSH
6888: CALL_OW 121
// AddComHold ( JMM ) ;
6892: LD_EXP 8
6896: PPUSH
6897: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6901: LD_EXP 8
6905: PPUSH
6906: LD_STRING D2J-JMM-1
6908: PPUSH
6909: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6913: LD_EXP 10
6917: PPUSH
6918: LD_STRING D2J-Joan-2
6920: PPUSH
6921: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6925: LD_EXP 8
6929: PPUSH
6930: LD_STRING D2J-JMM-2
6932: PPUSH
6933: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6937: LD_EXP 10
6941: PPUSH
6942: LD_STRING D2J-Joan-3
6944: PPUSH
6945: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6949: LD_EXP 13
6953: PPUSH
6954: LD_STRING DPowell-Pow-1
6956: PPUSH
6957: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_STRING Q2J
6968: PPUSH
6969: CALL_OW 97
6973: ST_TO_ADDR
// if dec2 = 1 then
6974: LD_VAR 0 3
6978: PUSH
6979: LD_INT 1
6981: EQUAL
6982: IFFALSE 7024
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6984: LD_EXP 8
6988: PPUSH
6989: LD_STRING D2Ja-JMM-1
6991: PPUSH
6992: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6996: LD_EXP 10
7000: PPUSH
7001: LD_STRING D2Ja-Joan-1
7003: PPUSH
7004: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
7008: LD_EXP 8
7012: PPUSH
7013: LD_STRING D2Ja-JMM-2
7015: PPUSH
7016: CALL_OW 88
// InGameOff ;
7020: CALL_OW 9
// end ; if dec2 = 2 then
7024: LD_VAR 0 3
7028: PUSH
7029: LD_INT 2
7031: EQUAL
7032: IFFALSE 7103
// begin Say ( JMM , D2Jb-JMM-1 ) ;
7034: LD_EXP 8
7038: PPUSH
7039: LD_STRING D2Jb-JMM-1
7041: PPUSH
7042: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
7046: LD_EXP 10
7050: PPUSH
7051: LD_STRING D2Jb-Joan-1
7053: PPUSH
7054: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
7058: LD_EXP 8
7062: PPUSH
7063: LD_STRING D2Jb-JMM-2
7065: PPUSH
7066: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
7070: LD_EXP 10
7074: PPUSH
7075: LD_STRING D2Jb-Joan-2
7077: PPUSH
7078: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
7082: LD_EXP 8
7086: PPUSH
7087: LD_STRING D2Jb-JMM-3
7089: PPUSH
7090: CALL_OW 88
// FinishMission ( true ) ;
7094: LD_INT 1
7096: PPUSH
7097: CALL 9993 0 1
// exit ;
7101: GO 7685
// end ; if dec2 = 3 then
7103: LD_VAR 0 3
7107: PUSH
7108: LD_INT 3
7110: EQUAL
7111: IFFALSE 7134
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7113: LD_EXP 10
7117: PPUSH
7118: LD_STRING D2Jc-Joan-1
7120: PPUSH
7121: CALL_OW 94
// FinishMission ( true ) ;
7125: LD_INT 1
7127: PPUSH
7128: CALL 9993 0 1
// exit ;
7132: GO 7685
// end ; end else
7134: GO 7145
// begin FinishMission ( true ) ;
7136: LD_INT 1
7138: PPUSH
7139: CALL 9993 0 1
// exit ;
7143: GO 7685
// end ; end ; if JMMGirl = 2 then
7145: LD_EXP 2
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7464
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7155: LD_EXP 11
7159: PPUSH
7160: LD_STRING D2L-Lisa-1
7162: PPUSH
7163: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7167: LD_ADDR_VAR 0 2
7171: PUSH
7172: LD_STRING Q1
7174: PPUSH
7175: CALL_OW 97
7179: ST_TO_ADDR
// if dec1 = 1 then
7180: LD_VAR 0 2
7184: PUSH
7185: LD_INT 1
7187: EQUAL
7188: IFFALSE 7455
// begin ComExitVehicle ( JMM ) ;
7190: LD_EXP 8
7194: PPUSH
7195: CALL_OW 121
// AddComHold ( JMM ) ;
7199: LD_EXP 8
7203: PPUSH
7204: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7208: LD_EXP 8
7212: PPUSH
7213: LD_STRING D2L-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7220: LD_EXP 11
7224: PPUSH
7225: LD_STRING D2L-Lisa-2
7227: PPUSH
7228: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7232: LD_EXP 8
7236: PPUSH
7237: LD_STRING D2L-JMM-2
7239: PPUSH
7240: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING DL-Lisa-3
7251: PPUSH
7252: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7256: LD_EXP 13
7260: PPUSH
7261: LD_STRING DPowell-Pow-1
7263: PPUSH
7264: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_STRING Q2L
7275: PPUSH
7276: CALL_OW 97
7280: ST_TO_ADDR
// if dec2 = 1 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 1
7288: EQUAL
7289: IFFALSE 7355
// begin Say ( JMM , D2La-JMM-1 ) ;
7291: LD_EXP 8
7295: PPUSH
7296: LD_STRING D2La-JMM-1
7298: PPUSH
7299: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7303: LD_EXP 11
7307: PPUSH
7308: LD_STRING D2La-Lisa-1
7310: PPUSH
7311: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_STRING D2La-JMM-2
7322: PPUSH
7323: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7327: LD_EXP 11
7331: PPUSH
7332: LD_STRING D2La-Lisa-2
7334: PPUSH
7335: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7339: LD_EXP 8
7343: PPUSH
7344: LD_STRING D2La-JMM-3
7346: PPUSH
7347: CALL_OW 88
// InGameOff ;
7351: CALL_OW 9
// end ; if dec2 = 2 then
7355: LD_VAR 0 3
7359: PUSH
7360: LD_INT 2
7362: EQUAL
7363: IFFALSE 7422
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7365: LD_EXP 8
7369: PPUSH
7370: LD_STRING D2Lb-JMM-1
7372: PPUSH
7373: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7377: LD_EXP 11
7381: PPUSH
7382: LD_STRING D2Lb-Lisa-1
7384: PPUSH
7385: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7389: LD_EXP 8
7393: PPUSH
7394: LD_STRING D2Lb-JMM-2
7396: PPUSH
7397: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7401: LD_EXP 11
7405: PPUSH
7406: LD_STRING D2Lb-Lisa-2
7408: PPUSH
7409: CALL_OW 94
// FinishMission ( true ) ;
7413: LD_INT 1
7415: PPUSH
7416: CALL 9993 0 1
// exit ;
7420: GO 7685
// end ; if dec2 = 3 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 3
7429: EQUAL
7430: IFFALSE 7453
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7432: LD_EXP 11
7436: PPUSH
7437: LD_STRING D2Lc-Lisa-1
7439: PPUSH
7440: CALL_OW 94
// FinishMission ( true ) ;
7444: LD_INT 1
7446: PPUSH
7447: CALL 9993 0 1
// exit ;
7451: GO 7685
// end ; end else
7453: GO 7464
// begin FinishMission ( true ) ;
7455: LD_INT 1
7457: PPUSH
7458: CALL 9993 0 1
// exit ;
7462: GO 7685
// end ; end ; if JMMGirl = 3 then
7464: LD_EXP 2
7468: PUSH
7469: LD_INT 3
7471: EQUAL
7472: IFFALSE 7685
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7474: LD_EXP 12
7478: PPUSH
7479: LD_STRING D2X-Con-1
7481: PPUSH
7482: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_STRING Q1
7493: PPUSH
7494: CALL_OW 97
7498: ST_TO_ADDR
// if dec1 = 1 then
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 7678
// begin ComExitVehicle ( JMM ) ;
7509: LD_EXP 8
7513: PPUSH
7514: CALL_OW 121
// AddComHold ( JMM ) ;
7518: LD_EXP 8
7522: PPUSH
7523: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_STRING D2X-JMM-1
7534: PPUSH
7535: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7539: LD_EXP 12
7543: PPUSH
7544: LD_STRING D2X-Con-2
7546: PPUSH
7547: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7551: LD_EXP 13
7555: PPUSH
7556: LD_STRING DPowell-Pow-1
7558: PPUSH
7559: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_STRING Q2X
7570: PPUSH
7571: CALL_OW 97
7575: ST_TO_ADDR
// if dec2 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7602
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7586: LD_EXP 8
7590: PPUSH
7591: LD_STRING D2Xa-JMM-1
7593: PPUSH
7594: CALL_OW 88
// InGameOff ;
7598: CALL_OW 9
// end ; if dec2 = 2 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_INT 2
7609: EQUAL
7610: IFFALSE 7645
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7612: LD_EXP 8
7616: PPUSH
7617: LD_STRING D2Xb-JMM-1
7619: PPUSH
7620: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7624: LD_EXP 12
7628: PPUSH
7629: LD_STRING D2Xb-Con-1
7631: PPUSH
7632: CALL_OW 94
// FinishMission ( true ) ;
7636: LD_INT 1
7638: PPUSH
7639: CALL 9993 0 1
// exit ;
7643: GO 7685
// end ; if dec2 = 3 then
7645: LD_VAR 0 3
7649: PUSH
7650: LD_INT 3
7652: EQUAL
7653: IFFALSE 7676
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7655: LD_EXP 12
7659: PPUSH
7660: LD_STRING D2Xc-Con-1
7662: PPUSH
7663: CALL_OW 94
// FinishMission ( true ) ;
7667: LD_INT 1
7669: PPUSH
7670: CALL 9993 0 1
// exit ;
7674: GO 7685
// end ; end else
7676: GO 7685
// begin FinishMission ( true ) ;
7678: LD_INT 1
7680: PPUSH
7681: CALL 9993 0 1
// end ; end ; end ;
7685: LD_VAR 0 1
7689: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7690: LD_EXP 8
7694: PPUSH
7695: LD_INT 15
7697: PPUSH
7698: CALL_OW 308
7702: IFFALSE 8950
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
// begin if tick < 5 5$00 then
7710: LD_OWVAR 1
7714: PUSH
7715: LD_INT 10500
7717: LESS
7718: IFFALSE 7970
// begin uc_side := 6 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 6
7727: ST_TO_ADDR
// uc_nation := 3 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 3
7735: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7736: LD_INT 1
7738: PPUSH
7739: LD_INT 105
7741: PPUSH
7742: LD_INT 97
7744: PPUSH
7745: CALL_OW 293
7749: NOT
7750: IFFALSE 7814
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7752: LD_INT 22
7754: PPUSH
7755: LD_INT 1
7757: PPUSH
7758: LD_INT 3
7760: PPUSH
7761: LD_INT 44
7763: PPUSH
7764: LD_INT 40
7766: PPUSH
7767: CALL 38836 0 5
// veh := CreateVehicle ;
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: CALL_OW 45
7780: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_INT 200
7788: PPUSH
7789: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_INT 105
7800: PPUSH
7801: LD_INT 97
7803: PPUSH
7804: LD_INT 3
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL 74166 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7814: LD_INT 1
7816: PPUSH
7817: LD_INT 116
7819: PPUSH
7820: LD_INT 120
7822: PPUSH
7823: CALL_OW 293
7827: NOT
7828: IFFALSE 7892
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7830: LD_INT 22
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: LD_INT 3
7838: PPUSH
7839: LD_INT 45
7841: PPUSH
7842: LD_INT 40
7844: PPUSH
7845: CALL 38836 0 5
// veh := CreateVehicle ;
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: CALL_OW 45
7858: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7859: LD_VAR 0 1
7863: PPUSH
7864: LD_INT 200
7866: PPUSH
7867: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 116
7878: PPUSH
7879: LD_INT 120
7881: PPUSH
7882: LD_INT 4
7884: PPUSH
7885: LD_INT 0
7887: PPUSH
7888: CALL 74166 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 116
7897: PPUSH
7898: LD_INT 120
7900: PPUSH
7901: CALL_OW 293
7905: NOT
7906: IFFALSE 7970
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7908: LD_INT 24
7910: PPUSH
7911: LD_INT 1
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 45
7919: PPUSH
7920: LD_INT 30
7922: PPUSH
7923: CALL 38836 0 5
// veh := CreateVehicle ;
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: CALL_OW 45
7936: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7937: LD_VAR 0 1
7941: PPUSH
7942: LD_INT 200
7944: PPUSH
7945: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_INT 116
7956: PPUSH
7957: LD_INT 120
7959: PPUSH
7960: LD_INT 4
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 74166 0 5
// end ; end ; InGameOn ;
7970: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7974: LD_INT 35
7976: PPUSH
7977: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7981: LD_EXP 8
7985: PPUSH
7986: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 81
7997: PPUSH
7998: LD_INT 109
8000: PPUSH
8001: CALL_OW 111
// AddComHold ( JMM ) ;
8005: LD_EXP 8
8009: PPUSH
8010: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
8014: LD_EXP 10
8018: PUSH
8019: LD_EXP 11
8023: PUSH
8024: LD_EXP 12
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: LD_EXP 8
8038: PPUSH
8039: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
8043: LD_EXP 10
8047: PUSH
8048: LD_EXP 11
8052: PUSH
8053: LD_EXP 12
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: PPUSH
8063: LD_INT 91
8065: PUSH
8066: LD_EXP 8
8070: PUSH
8071: LD_INT 6
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 72
8083: IFFALSE 7974
// case JMMGirl of 1 :
8085: LD_EXP 2
8089: PUSH
8090: LD_INT 1
8092: DOUBLE
8093: EQUAL
8094: IFTRUE 8098
8096: GO 8383
8098: POP
// begin ChangeSideKappaBase ;
8099: CALL 1453 0 0
// ComTurnUnit ( Joan , JMM ) ;
8103: LD_EXP 10
8107: PPUSH
8108: LD_EXP 8
8112: PPUSH
8113: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8117: LD_EXP 8
8121: PPUSH
8122: LD_EXP 10
8126: PPUSH
8127: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 8
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 87
// wait ( 0 0$1 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// DialogueOn ;
8156: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8160: LD_EXP 10
8164: PPUSH
8165: LD_STRING D3J-Joan-1
8167: PPUSH
8168: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8172: LD_EXP 8
8176: PPUSH
8177: LD_STRING D3J-JMM-1
8179: PPUSH
8180: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8184: LD_EXP 10
8188: PPUSH
8189: LD_STRING D3J-Joan-2
8191: PPUSH
8192: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D3J-JMM-2
8203: PPUSH
8204: CALL_OW 88
// wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8215: LD_EXP 8
8219: PPUSH
8220: LD_STRING D4-JMM-1
8222: PPUSH
8223: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8227: LD_EXP 10
8231: PPUSH
8232: LD_STRING D4-Joan-1
8234: PPUSH
8235: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8239: LD_EXP 8
8243: PPUSH
8244: LD_STRING D4-JMM-2
8246: PPUSH
8247: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8251: LD_EXP 10
8255: PPUSH
8256: LD_STRING D4-Joan-2
8258: PPUSH
8259: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8263: LD_EXP 8
8267: PPUSH
8268: LD_STRING D4-JMM-3
8270: PPUSH
8271: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8275: LD_INT 10
8277: PPUSH
8278: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8282: LD_EXP 13
8286: PPUSH
8287: LD_STRING D7-Pow-1
8289: PPUSH
8290: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8294: LD_EXP 8
8298: PPUSH
8299: LD_STRING D7-JMM-1
8301: PPUSH
8302: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8306: LD_EXP 13
8310: PPUSH
8311: LD_STRING D7-Pow-2
8313: PPUSH
8314: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8318: LD_EXP 8
8322: PPUSH
8323: LD_STRING D7-JMM-2
8325: PPUSH
8326: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8330: LD_EXP 13
8334: PPUSH
8335: LD_STRING D7-Pow-3
8337: PPUSH
8338: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8342: LD_EXP 8
8346: PPUSH
8347: LD_STRING D7-JMM-3
8349: PPUSH
8350: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8354: LD_EXP 13
8358: PPUSH
8359: LD_STRING D7-Pow-4
8361: PPUSH
8362: CALL_OW 94
// DialogueOff ;
8366: CALL_OW 7
// InGameOff ;
8370: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8374: LD_STRING M2J
8376: PPUSH
8377: CALL_OW 337
// end ; 2 :
8381: GO 8946
8383: LD_INT 2
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8676
8391: POP
// begin ChangeSideKappaBase ;
8392: CALL 1453 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8396: LD_EXP 11
8400: PPUSH
8401: LD_EXP 8
8405: PPUSH
8406: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8410: LD_EXP 8
8414: PPUSH
8415: LD_EXP 11
8419: PPUSH
8420: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8424: LD_EXP 11
8428: PUSH
8429: LD_EXP 8
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 87
// wait ( 0 0$1 ) ;
8442: LD_INT 35
8444: PPUSH
8445: CALL_OW 67
// DialogueOn ;
8449: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8453: LD_EXP 11
8457: PPUSH
8458: LD_STRING D3L-Lisa-1
8460: PPUSH
8461: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D3L-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8477: LD_EXP 11
8481: PPUSH
8482: LD_STRING D3L-Lisa-2
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D3L-JMM-2
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$1 ) ;
8501: LD_INT 35
8503: PPUSH
8504: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8508: LD_EXP 8
8512: PPUSH
8513: LD_STRING D4-JMM-1
8515: PPUSH
8516: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8520: LD_EXP 11
8524: PPUSH
8525: LD_STRING D4-Lisa-1
8527: PPUSH
8528: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8532: LD_EXP 8
8536: PPUSH
8537: LD_STRING D4-JMM-1
8539: PPUSH
8540: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8544: LD_EXP 11
8548: PPUSH
8549: LD_STRING D4-Lisa-2
8551: PPUSH
8552: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8556: LD_EXP 8
8560: PPUSH
8561: LD_STRING D4-JMM-3
8563: PPUSH
8564: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8568: LD_INT 10
8570: PPUSH
8571: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8575: LD_EXP 13
8579: PPUSH
8580: LD_STRING D7-Pow-1
8582: PPUSH
8583: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8587: LD_EXP 8
8591: PPUSH
8592: LD_STRING D7-JMM-1
8594: PPUSH
8595: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8599: LD_EXP 13
8603: PPUSH
8604: LD_STRING D7-Pow-2
8606: PPUSH
8607: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8611: LD_EXP 8
8615: PPUSH
8616: LD_STRING D7-JMM-2
8618: PPUSH
8619: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8623: LD_EXP 13
8627: PPUSH
8628: LD_STRING D7-Pow-3
8630: PPUSH
8631: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8635: LD_EXP 8
8639: PPUSH
8640: LD_STRING D7-JMM-3
8642: PPUSH
8643: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8647: LD_EXP 13
8651: PPUSH
8652: LD_STRING D7-Pow-4
8654: PPUSH
8655: CALL_OW 94
// DialogueOff ;
8659: CALL_OW 7
// InGameOff ;
8663: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8667: LD_STRING M2L
8669: PPUSH
8670: CALL_OW 337
// end ; 3 :
8674: GO 8946
8676: LD_INT 3
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8945
8684: POP
// begin ChangeSideKappaBase ;
8685: CALL 1453 0 0
// ComTurnUnit ( Connie , JMM ) ;
8689: LD_EXP 12
8693: PPUSH
8694: LD_EXP 8
8698: PPUSH
8699: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8703: LD_EXP 8
8707: PPUSH
8708: LD_EXP 12
8712: PPUSH
8713: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8717: LD_EXP 10
8721: PUSH
8722: LD_EXP 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 87
// wait ( 0 0$1 ) ;
8735: LD_INT 35
8737: PPUSH
8738: CALL_OW 67
// DialogueOn ;
8742: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8746: LD_EXP 12
8750: PPUSH
8751: LD_STRING D3X-Con-1
8753: PPUSH
8754: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8758: LD_EXP 8
8762: PPUSH
8763: LD_STRING D3J-JMM-1
8765: PPUSH
8766: CALL_OW 88
// wait ( 0 0$1 ) ;
8770: LD_INT 35
8772: PPUSH
8773: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8777: LD_EXP 8
8781: PPUSH
8782: LD_STRING D4-JMM-1
8784: PPUSH
8785: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8789: LD_EXP 12
8793: PPUSH
8794: LD_STRING D4-Con-1
8796: PPUSH
8797: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8801: LD_EXP 8
8805: PPUSH
8806: LD_STRING D4-JMM-2
8808: PPUSH
8809: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8813: LD_EXP 12
8817: PPUSH
8818: LD_STRING D4-Con-2
8820: PPUSH
8821: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8825: LD_EXP 8
8829: PPUSH
8830: LD_STRING D4-JMM-3
8832: PPUSH
8833: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8837: LD_INT 10
8839: PPUSH
8840: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8844: LD_EXP 13
8848: PPUSH
8849: LD_STRING D7-Pow-1
8851: PPUSH
8852: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8856: LD_EXP 8
8860: PPUSH
8861: LD_STRING D7-JMM-1
8863: PPUSH
8864: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8868: LD_EXP 13
8872: PPUSH
8873: LD_STRING D7-Pow-2
8875: PPUSH
8876: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D7-JMM-2
8887: PPUSH
8888: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8892: LD_EXP 13
8896: PPUSH
8897: LD_STRING D7-Pow-3
8899: PPUSH
8900: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8904: LD_EXP 8
8908: PPUSH
8909: LD_STRING D7-JMM-3
8911: PPUSH
8912: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8916: LD_EXP 13
8920: PPUSH
8921: LD_STRING D7-Pow-4
8923: PPUSH
8924: CALL_OW 94
// DialogueOff ;
8928: CALL_OW 7
// InGameOff ;
8932: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8936: LD_STRING M2X
8938: PPUSH
8939: CALL_OW 337
// end ; end ;
8943: GO 8946
8945: POP
// SaveForQuickRestart ;
8946: CALL_OW 22
// end ;
8950: PPOPN 1
8952: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8953: LD_INT 32
8955: PPUSH
8956: CALL_OW 306
8960: IFFALSE 9287
8962: GO 8964
8964: DISABLE
// begin case JMMGirl of 1 :
8965: LD_EXP 2
8969: PUSH
8970: LD_INT 1
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 9094
8978: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8979: LD_EXP 8
8983: PPUSH
8984: LD_STRING D6J-JMM-1
8986: PPUSH
8987: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8991: LD_STRING 13f_Denis
8993: PPUSH
8994: CALL_OW 28
8998: IFTRUE 9009
9000: PUSH
9001: LD_STRING 13s_Denis
9003: PPUSH
9004: CALL_OW 28
9008: OR
9009: IFFALSE 9049
// begin Say ( Joan , D6J-Joan-1 ) ;
9011: LD_EXP 10
9015: PPUSH
9016: LD_STRING D6J-Joan-1
9018: PPUSH
9019: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
9023: LD_EXP 8
9027: PPUSH
9028: LD_STRING D6J-JMM-2
9030: PPUSH
9031: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
9035: LD_EXP 10
9039: PPUSH
9040: LD_STRING D6J-Joan-2
9042: PPUSH
9043: CALL_OW 88
// end else
9047: GO 9061
// Say ( Joan , D6J-Joan-2a ) ;
9049: LD_EXP 10
9053: PPUSH
9054: LD_STRING D6J-Joan-2a
9056: PPUSH
9057: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
9061: LD_EXP 8
9065: PPUSH
9066: LD_STRING D6J-JMM-3
9068: PPUSH
9069: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
9073: LD_EXP 10
9077: PPUSH
9078: LD_STRING D6J-Joan-3
9080: PPUSH
9081: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9085: LD_STRING M3
9087: PPUSH
9088: CALL_OW 337
// end ; 2 :
9092: GO 9287
9094: LD_INT 2
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9160
9102: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9103: LD_EXP 8
9107: PPUSH
9108: LD_STRING D6L-JMM-1
9110: PPUSH
9111: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9115: LD_EXP 11
9119: PPUSH
9120: LD_STRING D6L-Lisa-1
9122: PPUSH
9123: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9127: LD_EXP 8
9131: PPUSH
9132: LD_STRING D6L-JMM-2
9134: PPUSH
9135: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9139: LD_EXP 11
9143: PPUSH
9144: LD_STRING D6L-Lisa-2
9146: PPUSH
9147: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9151: LD_STRING M3
9153: PPUSH
9154: CALL_OW 337
// end ; 3 :
9158: GO 9287
9160: LD_INT 3
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9286
9168: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9169: LD_EXP 8
9173: PPUSH
9174: LD_STRING D6X-JMM-1
9176: PPUSH
9177: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9181: LD_EXP 12
9185: PPUSH
9186: LD_STRING D6X-Con-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9193: LD_EXP 8
9197: PPUSH
9198: LD_STRING D6X-JMM-2
9200: PPUSH
9201: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9205: LD_EXP 12
9209: PPUSH
9210: LD_STRING D6X-Con-2
9212: PPUSH
9213: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9217: LD_EXP 8
9221: PPUSH
9222: LD_STRING D6X-JMM-3
9224: PPUSH
9225: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9229: LD_EXP 12
9233: PPUSH
9234: LD_STRING D6X-Con-3
9236: PPUSH
9237: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9241: LD_EXP 8
9245: PPUSH
9246: LD_STRING D6X-JMM-4
9248: PPUSH
9249: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9253: LD_EXP 12
9257: PPUSH
9258: LD_STRING D6X-Con-4
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9265: LD_EXP 8
9269: PPUSH
9270: LD_STRING D6X-JMM-5
9272: PPUSH
9273: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9277: LD_STRING M3
9279: PPUSH
9280: CALL_OW 337
// end ; end ;
9284: GO 9287
9286: POP
// end ;
9287: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9288: LD_INT 22
9290: PUSH
9291: LD_INT 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 33
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PPUSH
9317: CALL_OW 306
9321: IFFALSE 9467
9323: GO 9325
9325: DISABLE
// begin case JMMGirl of 1 :
9326: LD_EXP 2
9330: PUSH
9331: LD_INT 1
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9376
9339: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9340: LD_EXP 8
9344: PPUSH
9345: LD_STRING D5-JMM-1
9347: PPUSH
9348: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9352: LD_INT 77
9354: PPUSH
9355: LD_INT 87
9357: PPUSH
9358: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9362: LD_EXP 10
9366: PPUSH
9367: LD_STRING D5-Joan-1
9369: PPUSH
9370: CALL_OW 88
// end ; 2 :
9374: GO 9467
9376: LD_INT 2
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9421
9384: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9385: LD_EXP 8
9389: PPUSH
9390: LD_STRING D5-JMM-1
9392: PPUSH
9393: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9397: LD_INT 77
9399: PPUSH
9400: LD_INT 87
9402: PPUSH
9403: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9407: LD_EXP 11
9411: PPUSH
9412: LD_STRING D5-Lisa-1
9414: PPUSH
9415: CALL_OW 88
// end ; 3 :
9419: GO 9467
9421: LD_INT 3
9423: DOUBLE
9424: EQUAL
9425: IFTRUE 9429
9427: GO 9466
9429: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9430: LD_EXP 8
9434: PPUSH
9435: LD_STRING D5-JMM-1
9437: PPUSH
9438: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9442: LD_INT 77
9444: PPUSH
9445: LD_INT 87
9447: PPUSH
9448: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9452: LD_EXP 12
9456: PPUSH
9457: LD_STRING D5-Con-1
9459: PPUSH
9460: CALL_OW 88
// end ; end ;
9464: GO 9467
9466: POP
// end ;
9467: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9468: LD_EXP 8
9472: PPUSH
9473: CALL_OW 310
9477: PPUSH
9478: LD_INT 16
9480: PPUSH
9481: CALL_OW 308
9485: IFFALSE 9839
9487: GO 9489
9489: DISABLE
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
// begin enable ;
9494: ENABLE
// if JMMGirl = 1 then
9495: LD_EXP 2
9499: PUSH
9500: LD_INT 1
9502: EQUAL
9503: IFFALSE 9520
// JMMGirlVeh := IsInUnit ( Joan ) ;
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_EXP 10
9514: PPUSH
9515: CALL_OW 310
9519: ST_TO_ADDR
// if JMMGirl = 2 then
9520: LD_EXP 2
9524: PUSH
9525: LD_INT 2
9527: EQUAL
9528: IFFALSE 9545
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_EXP 11
9539: PPUSH
9540: CALL_OW 310
9544: ST_TO_ADDR
// if JMMGirl = 3 then
9545: LD_EXP 2
9549: PUSH
9550: LD_INT 3
9552: EQUAL
9553: IFFALSE 9570
// JMMGirlVeh := IsInUnit ( Connie ) ;
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_EXP 12
9564: PPUSH
9565: CALL_OW 310
9569: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9570: LD_EXP 8
9574: PPUSH
9575: CALL_OW 310
9579: PPUSH
9580: LD_EXP 10
9584: PPUSH
9585: CALL_OW 310
9589: PPUSH
9590: CALL_OW 296
9594: PUSH
9595: LD_INT 10
9597: LESS
9598: IFTRUE 9630
9600: PUSH
9601: LD_EXP 8
9605: PPUSH
9606: CALL_OW 310
9610: PPUSH
9611: LD_EXP 11
9615: PPUSH
9616: CALL_OW 310
9620: PPUSH
9621: CALL_OW 296
9625: PUSH
9626: LD_INT 10
9628: LESS
9629: OR
9630: IFTRUE 9662
9632: PUSH
9633: LD_EXP 8
9637: PPUSH
9638: CALL_OW 310
9642: PPUSH
9643: LD_EXP 12
9647: PPUSH
9648: CALL_OW 310
9652: PPUSH
9653: CALL_OW 296
9657: PUSH
9658: LD_INT 10
9660: LESS
9661: OR
9662: IFFALSE 9759
// begin case Query ( Q3b ) of 1 :
9664: LD_STRING Q3b
9666: PPUSH
9667: CALL_OW 97
9671: PUSH
9672: LD_INT 1
9674: DOUBLE
9675: EQUAL
9676: IFTRUE 9680
9678: GO 9756
9680: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9681: LD_VAR 0 1
9685: PPUSH
9686: CALL_OW 265
9690: PUSH
9691: EMPTY
9692: LIST
9693: PUSH
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 262
9703: PUSH
9704: EMPTY
9705: LIST
9706: PUSH
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 263
9716: PUSH
9717: EMPTY
9718: LIST
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 264
9729: PUSH
9730: EMPTY
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: LD_STRING 14_JMMGirlVeh_1
9741: PPUSH
9742: CALL_OW 39
// FinishMission ( false ) ;
9746: LD_INT 0
9748: PPUSH
9749: CALL 9993 0 1
// disable ;
9753: DISABLE
// end ; end ;
9754: GO 9757
9756: POP
// end else
9757: GO 9839
// begin if JMMGirl = 1 then
9759: LD_EXP 2
9763: PUSH
9764: LD_INT 1
9766: EQUAL
9767: IFFALSE 9784
// dec := Query ( Q3bJ ) else
9769: LD_ADDR_VAR 0 2
9773: PUSH
9774: LD_STRING Q3bJ
9776: PPUSH
9777: CALL_OW 97
9781: ST_TO_ADDR
9782: GO 9822
// if JMMGirl = 2 then
9784: LD_EXP 2
9788: PUSH
9789: LD_INT 2
9791: EQUAL
9792: IFFALSE 9809
// dec := Query ( Q3bL ) else
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_STRING Q3bL
9801: PPUSH
9802: CALL_OW 97
9806: ST_TO_ADDR
9807: GO 9822
// dec := Query ( Q3bX ) ;
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_STRING Q3bX
9816: PPUSH
9817: CALL_OW 97
9821: ST_TO_ADDR
// if dec = 1 then
9822: LD_VAR 0 2
9826: PUSH
9827: LD_INT 1
9829: EQUAL
9830: IFFALSE 9839
// FinishMission ( false ) ;
9832: LD_INT 0
9834: PPUSH
9835: CALL 9993 0 1
// end ; end ;
9839: PPOPN 2
9841: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9842: LD_INT 22
9844: PUSH
9845: LD_INT 3
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 23
9854: PUSH
9855: LD_INT 3
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: PUSH
9882: LD_INT 0
9884: EQUAL
9885: IFFALSE 9992
9887: GO 9889
9889: DISABLE
// begin DialogueOn ;
9890: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9894: LD_EXP 8
9898: PPUSH
9899: LD_STRING DEnd-JMM-1
9901: PPUSH
9902: CALL_OW 88
// case JMMGirl of 1 :
9906: LD_EXP 2
9910: PUSH
9911: LD_INT 1
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 9934
9919: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9920: LD_EXP 10
9924: PPUSH
9925: LD_STRING DEnd-Joan-1
9927: PPUSH
9928: CALL_OW 88
9932: GO 9981
9934: LD_INT 2
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 9957
9942: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9943: LD_EXP 11
9947: PPUSH
9948: LD_STRING DEnd-Lisa-1
9950: PPUSH
9951: CALL_OW 88
9955: GO 9981
9957: LD_INT 3
9959: DOUBLE
9960: EQUAL
9961: IFTRUE 9965
9963: GO 9980
9965: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9966: LD_EXP 12
9970: PPUSH
9971: LD_STRING DEnd-Con-1
9973: PPUSH
9974: CALL_OW 88
9978: GO 9981
9980: POP
// DialogueOff ;
9981: CALL_OW 7
// FinishMission ( false ) ;
9985: LD_INT 0
9987: PPUSH
9988: CALL 9993 0 1
// end ;
9992: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// m1 := false ;
10001: LD_ADDR_VAR 0 4
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// m2 := false ;
10009: LD_ADDR_VAR 0 5
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// m3 := false ;
10017: LD_ADDR_VAR 0 6
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 50
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 3
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PUSH
10077: LD_INT 0
10079: EQUAL
10080: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
10081: LD_EXP 8
10085: PPUSH
10086: LD_STRING 14_JMM
10088: PPUSH
10089: CALL_OW 38
// if tick <= 50 50$00 then
10093: LD_OWVAR 1
10097: PUSH
10098: LD_INT 105000
10100: LESSEQUAL
10101: IFFALSE 10110
// SetAchievement ( ACH_ASPEED_14 ) ;
10103: LD_STRING ACH_ASPEED_14
10105: PPUSH
10106: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10110: LD_EXP 8
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10141
10121: PUSH
10122: LD_EXP 8
10126: PPUSH
10127: CALL_OW 310
10131: PPUSH
10132: CALL_OW 247
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: AND
10141: IFFALSE 10223
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_EXP 8
10152: PPUSH
10153: CALL_OW 310
10157: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10158: LD_VAR 0 3
10162: PPUSH
10163: CALL_OW 265
10167: PUSH
10168: EMPTY
10169: LIST
10170: PUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: CALL_OW 262
10180: PUSH
10181: EMPTY
10182: LIST
10183: PUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: CALL_OW 263
10193: PUSH
10194: EMPTY
10195: LIST
10196: PUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: CALL_OW 264
10206: PUSH
10207: EMPTY
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: LD_STRING 14_JMMVeh_1
10218: PPUSH
10219: CALL_OW 39
// end ; if fastEnd then
10223: LD_VAR 0 1
10227: IFFALSE 10318
// begin AddMedal ( fastend , - 1 ) ;
10229: LD_STRING fastend
10231: PPUSH
10232: LD_INT 1
10234: NEG
10235: PPUSH
10236: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10240: LD_STRING fastend
10242: PPUSH
10243: LD_INT 1
10245: NEG
10246: PPUSH
10247: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10251: LD_STRING fastend
10253: PPUSH
10254: LD_INT 1
10256: NEG
10257: PPUSH
10258: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10262: LD_EXP 2
10266: PPUSH
10267: LD_STRING 14_JMMGirl_1
10269: PPUSH
10270: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10274: LD_INT 0
10276: PPUSH
10277: LD_STRING 14_JMMGirlStatus_1
10279: PPUSH
10280: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10284: LD_INT 0
10286: PPUSH
10287: LD_STRING 14_KappaStatus_1
10289: PPUSH
10290: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10294: LD_STRING Eliminate
10296: PPUSH
10297: CALL_OW 102
// RewardPeople ( JMM ) ;
10301: LD_EXP 8
10305: PPUSH
10306: CALL_OW 43
// YouWin ;
10310: CALL_OW 103
// exit ;
10314: GO 10988
// end else
10316: GO 10875
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10318: LD_EXP 2
10322: PPUSH
10323: LD_STRING 14_JMMGirl_1
10325: PPUSH
10326: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10330: LD_VAR 0 7
10334: PPUSH
10335: LD_STRING 14_KappaStatus_1
10337: PPUSH
10338: CALL_OW 39
// case JMMGirl of 1 :
10342: LD_EXP 2
10346: PUSH
10347: LD_INT 1
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10489
10355: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10356: LD_EXP 10
10360: PPUSH
10361: CALL_OW 302
10365: IFFALSE 10382
10367: PUSH
10368: LD_EXP 10
10372: PPUSH
10373: CALL_OW 255
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: AND
10382: IFFALSE 10422
10384: PUSH
10385: LD_VAR 0 7
10389: IFTRUE 10421
10391: PUSH
10392: LD_EXP 8
10396: PPUSH
10397: CALL_OW 310
10401: PPUSH
10402: LD_EXP 10
10406: PPUSH
10407: CALL_OW 310
10411: PPUSH
10412: CALL_OW 296
10416: PUSH
10417: LD_INT 10
10419: LESS
10420: OR
10421: AND
10422: IFFALSE 10466
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10424: LD_INT 1
10426: PPUSH
10427: LD_STRING 14_JMMGirlStatus_1
10429: PPUSH
10430: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10434: LD_EXP 10
10438: PPUSH
10439: LD_STRING 14_Joan
10441: PPUSH
10442: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10446: LD_STRING protect
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 101
// m1 := true ;
10456: LD_ADDR_VAR 0 4
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// end else
10464: GO 10487
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10466: LD_INT 0
10468: PPUSH
10469: LD_STRING 14_JMMGirlStatus_1
10471: PPUSH
10472: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10476: LD_STRING protect
10478: PPUSH
10479: LD_INT 1
10481: NEG
10482: PPUSH
10483: CALL_OW 101
// end ; end ; 2 :
10487: GO 10774
10489: LD_INT 2
10491: DOUBLE
10492: EQUAL
10493: IFTRUE 10497
10495: GO 10631
10497: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10498: LD_EXP 11
10502: PPUSH
10503: CALL_OW 302
10507: IFFALSE 10524
10509: PUSH
10510: LD_EXP 11
10514: PPUSH
10515: CALL_OW 255
10519: PUSH
10520: LD_INT 1
10522: EQUAL
10523: AND
10524: IFFALSE 10564
10526: PUSH
10527: LD_VAR 0 7
10531: IFTRUE 10563
10533: PUSH
10534: LD_EXP 8
10538: PPUSH
10539: CALL_OW 310
10543: PPUSH
10544: LD_EXP 11
10548: PPUSH
10549: CALL_OW 310
10553: PPUSH
10554: CALL_OW 296
10558: PUSH
10559: LD_INT 10
10561: LESS
10562: OR
10563: AND
10564: IFFALSE 10608
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10566: LD_INT 1
10568: PPUSH
10569: LD_STRING 14_JMMGirlStatus_1
10571: PPUSH
10572: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10576: LD_EXP 11
10580: PPUSH
10581: LD_STRING 14_Lisa
10583: PPUSH
10584: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10588: LD_STRING protect
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 101
// m1 := true ;
10598: LD_ADDR_VAR 0 4
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// end else
10606: GO 10629
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_STRING 14_JMMGirlStatus_1
10613: PPUSH
10614: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10618: LD_STRING protect
10620: PPUSH
10621: LD_INT 2
10623: NEG
10624: PPUSH
10625: CALL_OW 101
// end ; end ; 3 :
10629: GO 10774
10631: LD_INT 3
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10773
10639: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10640: LD_EXP 12
10644: PPUSH
10645: CALL_OW 302
10649: IFFALSE 10666
10651: PUSH
10652: LD_EXP 12
10656: PPUSH
10657: CALL_OW 255
10661: PUSH
10662: LD_INT 1
10664: EQUAL
10665: AND
10666: IFFALSE 10706
10668: PUSH
10669: LD_VAR 0 7
10673: IFTRUE 10705
10675: PUSH
10676: LD_EXP 8
10680: PPUSH
10681: CALL_OW 310
10685: PPUSH
10686: LD_EXP 12
10690: PPUSH
10691: CALL_OW 310
10695: PPUSH
10696: CALL_OW 296
10700: PUSH
10701: LD_INT 10
10703: LESS
10704: OR
10705: AND
10706: IFFALSE 10750
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10708: LD_INT 1
10710: PPUSH
10711: LD_STRING 14_JMMGirlStatus_1
10713: PPUSH
10714: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10718: LD_EXP 12
10722: PPUSH
10723: LD_STRING 14_Connie
10725: PPUSH
10726: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10730: LD_STRING protect
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 101
// m1 := true ;
10740: LD_ADDR_VAR 0 4
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end else
10748: GO 10771
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10750: LD_INT 0
10752: PPUSH
10753: LD_STRING 14_JMMGirlStatus_1
10755: PPUSH
10756: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10760: LD_STRING protect
10762: PPUSH
10763: LD_INT 3
10765: NEG
10766: PPUSH
10767: CALL_OW 101
// end ; end ; end ;
10771: GO 10774
10773: POP
// if amLaserCounter >= 2 then
10774: LD_EXP 7
10778: PUSH
10779: LD_INT 2
10781: GREATEREQUAL
10782: IFFALSE 10804
// begin AddMedal ( double , 1 ) ;
10784: LD_STRING double
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 101
// m2 := true ;
10794: LD_ADDR_VAR 0 5
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// end else
10802: GO 10838
// begin if amLaserCounter = 1 then
10804: LD_EXP 7
10808: PUSH
10809: LD_INT 1
10811: EQUAL
10812: IFFALSE 10827
// AddMedal ( double , - 2 ) else
10814: LD_STRING double
10816: PPUSH
10817: LD_INT 2
10819: NEG
10820: PPUSH
10821: CALL_OW 101
10825: GO 10838
// AddMedal ( double , - 1 ) ;
10827: LD_STRING double
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if ruEliminated then
10838: LD_VAR 0 7
10842: IFFALSE 10864
// begin AddMedal ( base , 1 ) ;
10844: LD_STRING base
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 101
// m3 := true ;
10854: LD_ADDR_VAR 0 6
10858: PUSH
10859: LD_INT 1
10861: ST_TO_ADDR
// end else
10862: GO 10875
// AddMedal ( base , - 1 ) ;
10864: LD_STRING base
10866: PPUSH
10867: LD_INT 1
10869: NEG
10870: PPUSH
10871: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10875: LD_VAR 0 4
10879: IFFALSE 10887
10881: PUSH
10882: LD_VAR 0 5
10886: AND
10887: IFFALSE 10895
10889: PUSH
10890: LD_VAR 0 6
10894: AND
10895: IFFALSE 10907
10897: PUSH
10898: LD_OWVAR 67
10902: PUSH
10903: LD_INT 3
10905: GREATEREQUAL
10906: AND
10907: IFFALSE 10919
// SetAchievementEX ( ACH_AMER , 14 ) ;
10909: LD_STRING ACH_AMER
10911: PPUSH
10912: LD_INT 14
10914: PPUSH
10915: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10919: LD_STRING Eliminate
10921: PPUSH
10922: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 12
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 3
10955: PUSH
10956: LD_INT 25
10958: PUSH
10959: LD_INT 16
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: CALL_OW 43
// YouWin ;
10984: CALL_OW 103
// end ; end_of_file
10988: LD_VAR 0 2
10992: RET
// export function CreateNature ; var i , un ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
// PrepareEnchidna ;
10998: CALL 68357 0 0
// for i := 1 to 3 do
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: DOUBLE
11008: LD_INT 1
11010: DEC
11011: ST_TO_ADDR
11012: LD_INT 3
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11065
// begin un := CreateHuman ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: CALL_OW 44
11027: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 0
11035: PPUSH
11036: LD_INT 5
11038: PPUSH
11039: CALL_OW 12
11043: PPUSH
11044: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 9
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 49
// end ;
11063: GO 11015
11065: POP
11066: POP
// PrepareHorse ;
11067: CALL 68565 0 0
// for i := 1 to 2 do
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: DOUBLE
11077: LD_INT 1
11079: DEC
11080: ST_TO_ADDR
11081: LD_INT 2
11083: PUSH
11084: FOR_TO
11085: IFFALSE 11134
// begin un := CreateHuman ;
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: CALL_OW 44
11096: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 0
11104: PPUSH
11105: LD_INT 5
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 9
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 49
// end ;
11132: GO 11084
11134: POP
11135: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: DOUBLE
11142: LD_INT 1
11144: DEC
11145: ST_TO_ADDR
11146: LD_INT 4
11148: PUSH
11149: LD_INT 5
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: LD_INT 5
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11235
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11173: LD_INT 0
11175: PPUSH
11176: LD_INT 5
11178: PPUSH
11179: CALL_OW 12
11183: PPUSH
11184: CALL 68133 0 1
// un := CreateHuman ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: CALL_OW 44
11197: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: LD_INT 5
11208: PPUSH
11209: CALL_OW 12
11213: PPUSH
11214: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 8
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 49
// end ;
11233: GO 11170
11235: POP
11236: POP
// PrepareFish ;
11237: CALL 68461 0 0
// for i := 1 to 2 do
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_INT 2
11253: PUSH
11254: FOR_TO
11255: IFFALSE 11304
// begin un := CreateHuman ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: CALL_OW 44
11266: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: LD_INT 5
11277: PPUSH
11278: CALL_OW 12
11282: PPUSH
11283: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_INT 6
11294: PPUSH
11295: LD_INT 0
11297: PPUSH
11298: CALL_OW 49
// end ;
11302: GO 11254
11304: POP
11305: POP
// PrepareFrog ;
11306: CALL 68409 0 0
// for i := 1 to 2 do
11310: LD_ADDR_VAR 0 2
11314: PUSH
11315: DOUBLE
11316: LD_INT 1
11318: DEC
11319: ST_TO_ADDR
11320: LD_INT 2
11322: PUSH
11323: FOR_TO
11324: IFFALSE 11373
// begin un := CreateHuman ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: CALL_OW 44
11335: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 7
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// end ;
11371: GO 11323
11373: POP
11374: POP
// PrepareMastodont ;
11375: CALL 68617 0 0
// un := CreateVehicle ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: CALL_OW 45
11388: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 166
11396: PPUSH
11397: LD_INT 134
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL 74166 0 5
// end ; end_of_file
11410: LD_VAR 0 1
11414: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11415: LD_INT 14
11417: PPUSH
11418: CALL_OW 435
11422: PUSH
11423: LD_INT 20
11425: LESS
11426: IFFALSE 11468
11428: GO 11430
11430: DISABLE
// begin enable ;
11431: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11432: LD_INT 35
11434: PPUSH
11435: LD_INT 735
11437: PPUSH
11438: CALL_OW 12
11442: PPUSH
11443: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 5
11452: PPUSH
11453: CALL_OW 12
11457: PPUSH
11458: LD_INT 14
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 55
// end ;
11468: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11469: LD_INT 13
11471: PPUSH
11472: CALL_OW 435
11476: PUSH
11477: LD_INT 30
11479: LESS
11480: IFFALSE 11522
11482: GO 11484
11484: DISABLE
// begin enable ;
11485: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11486: LD_INT 35
11488: PPUSH
11489: LD_INT 735
11491: PPUSH
11492: CALL_OW 12
11496: PPUSH
11497: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 5
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: LD_INT 13
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 55
// end ;
11522: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11523: LD_INT 13
11525: PPUSH
11526: CALL_OW 435
11530: PUSH
11531: LD_INT 30
11533: LESS
11534: IFFALSE 11567
11536: GO 11538
11538: DISABLE
// begin enable ;
11539: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 5
11545: PPUSH
11546: CALL_OW 12
11550: PPUSH
11551: LD_INT 133
11553: PPUSH
11554: LD_INT 122
11556: PPUSH
11557: LD_INT 20
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 56
// end ; end_of_file end_of_file
11567: END
// export globalGameSaveCounter ; every 0 0$1 do
11568: GO 11570
11570: DISABLE
// begin enable ;
11571: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11572: LD_STRING updateTimer(
11574: PUSH
11575: LD_OWVAR 1
11579: STR
11580: PUSH
11581: LD_STRING );
11583: STR
11584: PPUSH
11585: CALL_OW 559
// end ;
11589: END
// every 0 0$1 do
11590: GO 11592
11592: DISABLE
// begin globalGameSaveCounter := 0 ;
11593: LD_ADDR_EXP 21
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11601: LD_STRING setGameSaveCounter(0)
11603: PPUSH
11604: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11608: LD_STRING initStreamRollete();
11610: PPUSH
11611: CALL_OW 559
// InitStreamMode ;
11615: CALL 12960 0 0
// DefineStreamItems ( false ) ;
11619: LD_INT 0
11621: PPUSH
11622: CALL 13424 0 1
// end ;
11626: END
// export function SOS_MapStart ( ) ; begin
11627: LD_INT 0
11629: PPUSH
// if streamModeActive then
11630: LD_EXP 22
11634: IFFALSE 11643
// DefineStreamItems ( true ) ;
11636: LD_INT 1
11638: PPUSH
11639: CALL 13424 0 1
// UpdateLuaVariables ( ) ;
11643: CALL 11660 0 0
// UpdateFactoryWaypoints ( ) ;
11647: CALL 26546 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11651: CALL 26798 0 0
// end ;
11655: LD_VAR 0 1
11659: RET
// function UpdateLuaVariables ( ) ; begin
11660: LD_INT 0
11662: PPUSH
// if globalGameSaveCounter then
11663: LD_EXP 21
11667: IFFALSE 11701
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11669: LD_ADDR_EXP 21
11673: PUSH
11674: LD_EXP 21
11678: PPUSH
11679: CALL 73379 0 1
11683: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11684: LD_STRING setGameSaveCounter(
11686: PUSH
11687: LD_EXP 21
11691: STR
11692: PUSH
11693: LD_STRING )
11695: STR
11696: PPUSH
11697: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11701: LD_STRING setGameDifficulty(
11703: PUSH
11704: LD_OWVAR 67
11708: STR
11709: PUSH
11710: LD_STRING )
11712: STR
11713: PPUSH
11714: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11718: LD_STRING displayDifficulty(
11720: PUSH
11721: LD_OWVAR 67
11725: STR
11726: PUSH
11727: LD_STRING )
11729: STR
11730: PPUSH
11731: CALL_OW 559
// end ;
11735: LD_VAR 0 1
11739: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11740: LD_INT 0
11742: PPUSH
// if p2 = stream_mode then
11743: LD_VAR 0 2
11747: PUSH
11748: LD_INT 100
11750: EQUAL
11751: IFFALSE 12754
// begin if not StreamModeActive then
11753: LD_EXP 22
11757: NOT
11758: IFFALSE 11768
// StreamModeActive := true ;
11760: LD_ADDR_EXP 22
11764: PUSH
11765: LD_INT 1
11767: ST_TO_ADDR
// if p3 = 0 then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 0
11775: EQUAL
11776: IFFALSE 11782
// InitStreamMode ;
11778: CALL 12960 0 0
// if p3 = 1 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 1
11789: EQUAL
11790: IFFALSE 11800
// sRocket := true ;
11792: LD_ADDR_EXP 27
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// if p3 = 2 then
11800: LD_VAR 0 3
11804: PUSH
11805: LD_INT 2
11807: EQUAL
11808: IFFALSE 11818
// sSpeed := true ;
11810: LD_ADDR_EXP 26
11814: PUSH
11815: LD_INT 1
11817: ST_TO_ADDR
// if p3 = 3 then
11818: LD_VAR 0 3
11822: PUSH
11823: LD_INT 3
11825: EQUAL
11826: IFFALSE 11836
// sEngine := true ;
11828: LD_ADDR_EXP 28
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// if p3 = 4 then
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 4
11843: EQUAL
11844: IFFALSE 11854
// sSpec := true ;
11846: LD_ADDR_EXP 25
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// if p3 = 5 then
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 5
11861: EQUAL
11862: IFFALSE 11872
// sLevel := true ;
11864: LD_ADDR_EXP 29
11868: PUSH
11869: LD_INT 1
11871: ST_TO_ADDR
// if p3 = 6 then
11872: LD_VAR 0 3
11876: PUSH
11877: LD_INT 6
11879: EQUAL
11880: IFFALSE 11890
// sArmoury := true ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// if p3 = 7 then
11890: LD_VAR 0 3
11894: PUSH
11895: LD_INT 7
11897: EQUAL
11898: IFFALSE 11908
// sRadar := true ;
11900: LD_ADDR_EXP 31
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// if p3 = 8 then
11908: LD_VAR 0 3
11912: PUSH
11913: LD_INT 8
11915: EQUAL
11916: IFFALSE 11926
// sBunker := true ;
11918: LD_ADDR_EXP 32
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// if p3 = 9 then
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 9
11933: EQUAL
11934: IFFALSE 11944
// sHack := true ;
11936: LD_ADDR_EXP 33
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
// if p3 = 10 then
11944: LD_VAR 0 3
11948: PUSH
11949: LD_INT 10
11951: EQUAL
11952: IFFALSE 11962
// sFire := true ;
11954: LD_ADDR_EXP 34
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// if p3 = 11 then
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 11
11969: EQUAL
11970: IFFALSE 11980
// sRefresh := true ;
11972: LD_ADDR_EXP 35
11976: PUSH
11977: LD_INT 1
11979: ST_TO_ADDR
// if p3 = 12 then
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 12
11987: EQUAL
11988: IFFALSE 11998
// sExp := true ;
11990: LD_ADDR_EXP 36
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if p3 = 13 then
11998: LD_VAR 0 3
12002: PUSH
12003: LD_INT 13
12005: EQUAL
12006: IFFALSE 12016
// sDepot := true ;
12008: LD_ADDR_EXP 37
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// if p3 = 14 then
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 14
12023: EQUAL
12024: IFFALSE 12034
// sFlag := true ;
12026: LD_ADDR_EXP 38
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
// if p3 = 15 then
12034: LD_VAR 0 3
12038: PUSH
12039: LD_INT 15
12041: EQUAL
12042: IFFALSE 12052
// sKamikadze := true ;
12044: LD_ADDR_EXP 46
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// if p3 = 16 then
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 16
12059: EQUAL
12060: IFFALSE 12070
// sTroll := true ;
12062: LD_ADDR_EXP 47
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// if p3 = 17 then
12070: LD_VAR 0 3
12074: PUSH
12075: LD_INT 17
12077: EQUAL
12078: IFFALSE 12088
// sSlow := true ;
12080: LD_ADDR_EXP 48
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// if p3 = 18 then
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 18
12095: EQUAL
12096: IFFALSE 12106
// sLack := true ;
12098: LD_ADDR_EXP 49
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// if p3 = 19 then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 19
12113: EQUAL
12114: IFFALSE 12124
// sTank := true ;
12116: LD_ADDR_EXP 51
12120: PUSH
12121: LD_INT 1
12123: ST_TO_ADDR
// if p3 = 20 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 20
12131: EQUAL
12132: IFFALSE 12142
// sRemote := true ;
12134: LD_ADDR_EXP 52
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 21 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 21
12149: EQUAL
12150: IFFALSE 12160
// sPowell := true ;
12152: LD_ADDR_EXP 53
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 22 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 22
12167: EQUAL
12168: IFFALSE 12178
// sTeleport := true ;
12170: LD_ADDR_EXP 56
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 23 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 23
12185: EQUAL
12186: IFFALSE 12196
// sOilTower := true ;
12188: LD_ADDR_EXP 58
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 24 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 24
12203: EQUAL
12204: IFFALSE 12214
// sShovel := true ;
12206: LD_ADDR_EXP 59
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 25 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 25
12221: EQUAL
12222: IFFALSE 12232
// sSheik := true ;
12224: LD_ADDR_EXP 60
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 26 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 26
12239: EQUAL
12240: IFFALSE 12250
// sEarthquake := true ;
12242: LD_ADDR_EXP 62
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 27 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 27
12257: EQUAL
12258: IFFALSE 12268
// sAI := true ;
12260: LD_ADDR_EXP 63
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 28 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 28
12275: EQUAL
12276: IFFALSE 12286
// sCargo := true ;
12278: LD_ADDR_EXP 66
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 29 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 29
12293: EQUAL
12294: IFFALSE 12304
// sDLaser := true ;
12296: LD_ADDR_EXP 67
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 30 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 30
12311: EQUAL
12312: IFFALSE 12322
// sExchange := true ;
12314: LD_ADDR_EXP 68
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 31 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 31
12329: EQUAL
12330: IFFALSE 12340
// sFac := true ;
12332: LD_ADDR_EXP 69
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 32 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 32
12347: EQUAL
12348: IFFALSE 12358
// sPower := true ;
12350: LD_ADDR_EXP 70
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 33 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 33
12365: EQUAL
12366: IFFALSE 12376
// sRandom := true ;
12368: LD_ADDR_EXP 71
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 34 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 34
12383: EQUAL
12384: IFFALSE 12394
// sShield := true ;
12386: LD_ADDR_EXP 72
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 35 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 35
12401: EQUAL
12402: IFFALSE 12412
// sTime := true ;
12404: LD_ADDR_EXP 73
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 36 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 36
12419: EQUAL
12420: IFFALSE 12430
// sTools := true ;
12422: LD_ADDR_EXP 74
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 101 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 101
12437: EQUAL
12438: IFFALSE 12448
// sSold := true ;
12440: LD_ADDR_EXP 39
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 102 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 102
12455: EQUAL
12456: IFFALSE 12466
// sDiff := true ;
12458: LD_ADDR_EXP 40
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 103 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 103
12473: EQUAL
12474: IFFALSE 12484
// sFog := true ;
12476: LD_ADDR_EXP 43
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 104 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 104
12491: EQUAL
12492: IFFALSE 12502
// sReset := true ;
12494: LD_ADDR_EXP 44
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 105 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 105
12509: EQUAL
12510: IFFALSE 12520
// sSun := true ;
12512: LD_ADDR_EXP 45
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 106 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 106
12527: EQUAL
12528: IFFALSE 12538
// sTiger := true ;
12530: LD_ADDR_EXP 41
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 107 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 107
12545: EQUAL
12546: IFFALSE 12556
// sBomb := true ;
12548: LD_ADDR_EXP 42
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 108 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 108
12563: EQUAL
12564: IFFALSE 12574
// sWound := true ;
12566: LD_ADDR_EXP 50
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 109 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 109
12581: EQUAL
12582: IFFALSE 12592
// sBetray := true ;
12584: LD_ADDR_EXP 54
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 110 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 110
12599: EQUAL
12600: IFFALSE 12610
// sContamin := true ;
12602: LD_ADDR_EXP 55
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// if p3 = 111 then
12610: LD_VAR 0 3
12614: PUSH
12615: LD_INT 111
12617: EQUAL
12618: IFFALSE 12628
// sOil := true ;
12620: LD_ADDR_EXP 57
12624: PUSH
12625: LD_INT 1
12627: ST_TO_ADDR
// if p3 = 112 then
12628: LD_VAR 0 3
12632: PUSH
12633: LD_INT 112
12635: EQUAL
12636: IFFALSE 12646
// sStu := true ;
12638: LD_ADDR_EXP 61
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// if p3 = 113 then
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 113
12653: EQUAL
12654: IFFALSE 12664
// sBazooka := true ;
12656: LD_ADDR_EXP 64
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// if p3 = 114 then
12664: LD_VAR 0 3
12668: PUSH
12669: LD_INT 114
12671: EQUAL
12672: IFFALSE 12682
// sMortar := true ;
12674: LD_ADDR_EXP 65
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// if p3 = 115 then
12682: LD_VAR 0 3
12686: PUSH
12687: LD_INT 115
12689: EQUAL
12690: IFFALSE 12700
// sRanger := true ;
12692: LD_ADDR_EXP 75
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// if p3 = 116 then
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 116
12707: EQUAL
12708: IFFALSE 12718
// sComputer := true ;
12710: LD_ADDR_EXP 76
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if p3 = 117 then
12718: LD_VAR 0 3
12722: PUSH
12723: LD_INT 117
12725: EQUAL
12726: IFFALSE 12736
// s30 := true ;
12728: LD_ADDR_EXP 77
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// if p3 = 118 then
12736: LD_VAR 0 3
12740: PUSH
12741: LD_INT 118
12743: EQUAL
12744: IFFALSE 12754
// s60 := true ;
12746: LD_ADDR_EXP 78
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// end ; if p2 = hack_mode then
12754: LD_VAR 0 2
12758: PUSH
12759: LD_INT 101
12761: EQUAL
12762: IFFALSE 12890
// begin case p3 of 1 :
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 1
12771: DOUBLE
12772: EQUAL
12773: IFTRUE 12777
12775: GO 12784
12777: POP
// hHackUnlimitedResources ; 2 :
12778: CALL 25153 0 0
12782: GO 12890
12784: LD_INT 2
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12799
12792: POP
// hHackSetLevel10 ; 3 :
12793: CALL 25286 0 0
12797: GO 12890
12799: LD_INT 3
12801: DOUBLE
12802: EQUAL
12803: IFTRUE 12807
12805: GO 12814
12807: POP
// hHackSetLevel10YourUnits ; 4 :
12808: CALL 25371 0 0
12812: GO 12890
12814: LD_INT 4
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12829
12822: POP
// hHackInvincible ; 5 :
12823: CALL 25819 0 0
12827: GO 12890
12829: LD_INT 5
12831: DOUBLE
12832: EQUAL
12833: IFTRUE 12837
12835: GO 12844
12837: POP
// hHackInvisible ; 6 :
12838: CALL 25930 0 0
12842: GO 12890
12844: LD_INT 6
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 12859
12852: POP
// hHackChangeYourSide ; 7 :
12853: CALL 25987 0 0
12857: GO 12890
12859: LD_INT 7
12861: DOUBLE
12862: EQUAL
12863: IFTRUE 12867
12865: GO 12874
12867: POP
// hHackChangeUnitSide ; 8 :
12868: CALL 26029 0 0
12872: GO 12890
12874: LD_INT 8
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12889
12882: POP
// hHackFog ; end ;
12883: CALL 26130 0 0
12887: GO 12890
12889: POP
// end ; if p2 = game_save_mode then
12890: LD_VAR 0 2
12894: PUSH
12895: LD_INT 102
12897: EQUAL
12898: IFFALSE 12955
// begin if p3 = 1 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 1
12907: EQUAL
12908: IFFALSE 12920
// globalGameSaveCounter := p4 ;
12910: LD_ADDR_EXP 21
12914: PUSH
12915: LD_VAR 0 4
12919: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12920: LD_VAR 0 3
12924: PUSH
12925: LD_INT 2
12927: EQUAL
12928: IFFALSE 12936
12930: PUSH
12931: LD_EXP 21
12935: AND
12936: IFFALSE 12955
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12938: LD_STRING setGameSaveCounter(
12940: PUSH
12941: LD_EXP 21
12945: STR
12946: PUSH
12947: LD_STRING )
12949: STR
12950: PPUSH
12951: CALL_OW 559
// end ; end ;
12955: LD_VAR 0 7
12959: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12960: LD_INT 0
12962: PPUSH
// streamModeActive := false ;
12963: LD_ADDR_EXP 22
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// normalCounter := 36 ;
12971: LD_ADDR_EXP 23
12975: PUSH
12976: LD_INT 36
12978: ST_TO_ADDR
// hardcoreCounter := 18 ;
12979: LD_ADDR_EXP 24
12983: PUSH
12984: LD_INT 18
12986: ST_TO_ADDR
// sRocket := false ;
12987: LD_ADDR_EXP 27
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sSpeed := false ;
12995: LD_ADDR_EXP 26
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sEngine := false ;
13003: LD_ADDR_EXP 28
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sSpec := false ;
13011: LD_ADDR_EXP 25
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sLevel := false ;
13019: LD_ADDR_EXP 29
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sArmoury := false ;
13027: LD_ADDR_EXP 30
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sRadar := false ;
13035: LD_ADDR_EXP 31
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sBunker := false ;
13043: LD_ADDR_EXP 32
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sHack := false ;
13051: LD_ADDR_EXP 33
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sFire := false ;
13059: LD_ADDR_EXP 34
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sRefresh := false ;
13067: LD_ADDR_EXP 35
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sExp := false ;
13075: LD_ADDR_EXP 36
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sDepot := false ;
13083: LD_ADDR_EXP 37
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sFlag := false ;
13091: LD_ADDR_EXP 38
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sKamikadze := false ;
13099: LD_ADDR_EXP 46
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sTroll := false ;
13107: LD_ADDR_EXP 47
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sSlow := false ;
13115: LD_ADDR_EXP 48
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sLack := false ;
13123: LD_ADDR_EXP 49
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sTank := false ;
13131: LD_ADDR_EXP 51
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sRemote := false ;
13139: LD_ADDR_EXP 52
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sPowell := false ;
13147: LD_ADDR_EXP 53
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sTeleport := false ;
13155: LD_ADDR_EXP 56
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sOilTower := false ;
13163: LD_ADDR_EXP 58
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sShovel := false ;
13171: LD_ADDR_EXP 59
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sSheik := false ;
13179: LD_ADDR_EXP 60
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sEarthquake := false ;
13187: LD_ADDR_EXP 62
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sAI := false ;
13195: LD_ADDR_EXP 63
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sCargo := false ;
13203: LD_ADDR_EXP 66
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sDLaser := false ;
13211: LD_ADDR_EXP 67
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sExchange := false ;
13219: LD_ADDR_EXP 68
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sFac := false ;
13227: LD_ADDR_EXP 69
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sPower := false ;
13235: LD_ADDR_EXP 70
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sRandom := false ;
13243: LD_ADDR_EXP 71
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sShield := false ;
13251: LD_ADDR_EXP 72
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sTime := false ;
13259: LD_ADDR_EXP 73
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sTools := false ;
13267: LD_ADDR_EXP 74
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sSold := false ;
13275: LD_ADDR_EXP 39
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sDiff := false ;
13283: LD_ADDR_EXP 40
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sFog := false ;
13291: LD_ADDR_EXP 43
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sReset := false ;
13299: LD_ADDR_EXP 44
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sSun := false ;
13307: LD_ADDR_EXP 45
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sTiger := false ;
13315: LD_ADDR_EXP 41
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sBomb := false ;
13323: LD_ADDR_EXP 42
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sWound := false ;
13331: LD_ADDR_EXP 50
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sBetray := false ;
13339: LD_ADDR_EXP 54
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sContamin := false ;
13347: LD_ADDR_EXP 55
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sOil := false ;
13355: LD_ADDR_EXP 57
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sStu := false ;
13363: LD_ADDR_EXP 61
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sBazooka := false ;
13371: LD_ADDR_EXP 64
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sMortar := false ;
13379: LD_ADDR_EXP 65
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sRanger := false ;
13387: LD_ADDR_EXP 75
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sComputer := false ;
13395: LD_ADDR_EXP 76
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// s30 := false ;
13403: LD_ADDR_EXP 77
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// s60 := false ;
13411: LD_ADDR_EXP 78
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// end ;
13419: LD_VAR 0 1
13423: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
// result := [ ] ;
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: EMPTY
13439: ST_TO_ADDR
// if campaign_id = 1 then
13440: LD_OWVAR 69
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 16614
// begin case mission_number of 1 :
13450: LD_OWVAR 70
13454: PUSH
13455: LD_INT 1
13457: DOUBLE
13458: EQUAL
13459: IFTRUE 13463
13461: GO 13539
13463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: LD_INT 4
13474: PUSH
13475: LD_INT 11
13477: PUSH
13478: LD_INT 12
13480: PUSH
13481: LD_INT 15
13483: PUSH
13484: LD_INT 16
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 23
13492: PUSH
13493: LD_INT 26
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 101
13509: PUSH
13510: LD_INT 102
13512: PUSH
13513: LD_INT 106
13515: PUSH
13516: LD_INT 116
13518: PUSH
13519: LD_INT 117
13521: PUSH
13522: LD_INT 118
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: ST_TO_ADDR
13537: GO 16612
13539: LD_INT 2
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13631
13547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: LD_INT 11
13561: PUSH
13562: LD_INT 12
13564: PUSH
13565: LD_INT 15
13567: PUSH
13568: LD_INT 16
13570: PUSH
13571: LD_INT 22
13573: PUSH
13574: LD_INT 23
13576: PUSH
13577: LD_INT 26
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 101
13593: PUSH
13594: LD_INT 102
13596: PUSH
13597: LD_INT 105
13599: PUSH
13600: LD_INT 106
13602: PUSH
13603: LD_INT 108
13605: PUSH
13606: LD_INT 116
13608: PUSH
13609: LD_INT 117
13611: PUSH
13612: LD_INT 118
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: ST_TO_ADDR
13629: GO 16612
13631: LD_INT 3
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13727
13639: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: LD_INT 11
13656: PUSH
13657: LD_INT 12
13659: PUSH
13660: LD_INT 15
13662: PUSH
13663: LD_INT 16
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_INT 26
13671: PUSH
13672: LD_INT 36
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 101
13689: PUSH
13690: LD_INT 102
13692: PUSH
13693: LD_INT 105
13695: PUSH
13696: LD_INT 106
13698: PUSH
13699: LD_INT 108
13701: PUSH
13702: LD_INT 116
13704: PUSH
13705: LD_INT 117
13707: PUSH
13708: LD_INT 118
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: ST_TO_ADDR
13725: GO 16612
13727: LD_INT 4
13729: DOUBLE
13730: EQUAL
13731: IFTRUE 13735
13733: GO 13831
13735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: LD_INT 4
13746: PUSH
13747: LD_INT 5
13749: PUSH
13750: LD_INT 8
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 15
13761: PUSH
13762: LD_INT 16
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 26
13773: PUSH
13774: LD_INT 36
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 101
13793: PUSH
13794: LD_INT 102
13796: PUSH
13797: LD_INT 105
13799: PUSH
13800: LD_INT 106
13802: PUSH
13803: LD_INT 108
13805: PUSH
13806: LD_INT 116
13808: PUSH
13809: LD_INT 117
13811: PUSH
13812: LD_INT 118
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: ST_TO_ADDR
13829: GO 16612
13831: LD_INT 5
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13951
13839: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13840: LD_ADDR_VAR 0 2
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: LD_INT 6
13856: PUSH
13857: LD_INT 8
13859: PUSH
13860: LD_INT 11
13862: PUSH
13863: LD_INT 12
13865: PUSH
13866: LD_INT 15
13868: PUSH
13869: LD_INT 16
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 23
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 26
13883: PUSH
13884: LD_INT 36
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 101
13905: PUSH
13906: LD_INT 102
13908: PUSH
13909: LD_INT 105
13911: PUSH
13912: LD_INT 106
13914: PUSH
13915: LD_INT 108
13917: PUSH
13918: LD_INT 109
13920: PUSH
13921: LD_INT 112
13923: PUSH
13924: LD_INT 116
13926: PUSH
13927: LD_INT 117
13929: PUSH
13930: LD_INT 118
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: ST_TO_ADDR
13949: GO 16612
13951: LD_INT 6
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 14091
13959: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: LD_INT 4
13970: PUSH
13971: LD_INT 5
13973: PUSH
13974: LD_INT 6
13976: PUSH
13977: LD_INT 8
13979: PUSH
13980: LD_INT 11
13982: PUSH
13983: LD_INT 12
13985: PUSH
13986: LD_INT 15
13988: PUSH
13989: LD_INT 16
13991: PUSH
13992: LD_INT 20
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 23
14003: PUSH
14004: LD_INT 25
14006: PUSH
14007: LD_INT 26
14009: PUSH
14010: LD_INT 30
14012: PUSH
14013: LD_INT 31
14015: PUSH
14016: LD_INT 32
14018: PUSH
14019: LD_INT 36
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 101
14045: PUSH
14046: LD_INT 102
14048: PUSH
14049: LD_INT 105
14051: PUSH
14052: LD_INT 106
14054: PUSH
14055: LD_INT 108
14057: PUSH
14058: LD_INT 109
14060: PUSH
14061: LD_INT 112
14063: PUSH
14064: LD_INT 116
14066: PUSH
14067: LD_INT 117
14069: PUSH
14070: LD_INT 118
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: ST_TO_ADDR
14089: GO 16612
14091: LD_INT 7
14093: DOUBLE
14094: EQUAL
14095: IFTRUE 14099
14097: GO 14211
14099: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: LD_INT 4
14110: PUSH
14111: LD_INT 5
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 11
14119: PUSH
14120: LD_INT 12
14122: PUSH
14123: LD_INT 15
14125: PUSH
14126: LD_INT 16
14128: PUSH
14129: LD_INT 20
14131: PUSH
14132: LD_INT 21
14134: PUSH
14135: LD_INT 22
14137: PUSH
14138: LD_INT 23
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 26
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 101
14165: PUSH
14166: LD_INT 102
14168: PUSH
14169: LD_INT 103
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 108
14180: PUSH
14181: LD_INT 112
14183: PUSH
14184: LD_INT 116
14186: PUSH
14187: LD_INT 117
14189: PUSH
14190: LD_INT 118
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: ST_TO_ADDR
14209: GO 16612
14211: LD_INT 8
14213: DOUBLE
14214: EQUAL
14215: IFTRUE 14219
14217: GO 14359
14219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: LD_INT 4
14230: PUSH
14231: LD_INT 5
14233: PUSH
14234: LD_INT 6
14236: PUSH
14237: LD_INT 7
14239: PUSH
14240: LD_INT 8
14242: PUSH
14243: LD_INT 11
14245: PUSH
14246: LD_INT 12
14248: PUSH
14249: LD_INT 15
14251: PUSH
14252: LD_INT 16
14254: PUSH
14255: LD_INT 20
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 25
14269: PUSH
14270: LD_INT 26
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 31
14278: PUSH
14279: LD_INT 32
14281: PUSH
14282: LD_INT 36
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 101
14309: PUSH
14310: LD_INT 102
14312: PUSH
14313: LD_INT 103
14315: PUSH
14316: LD_INT 105
14318: PUSH
14319: LD_INT 106
14321: PUSH
14322: LD_INT 108
14324: PUSH
14325: LD_INT 109
14327: PUSH
14328: LD_INT 112
14330: PUSH
14331: LD_INT 116
14333: PUSH
14334: LD_INT 117
14336: PUSH
14337: LD_INT 118
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: ST_TO_ADDR
14357: GO 16612
14359: LD_INT 9
14361: DOUBLE
14362: EQUAL
14363: IFTRUE 14367
14365: GO 14515
14367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14368: LD_ADDR_VAR 0 2
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: LD_INT 6
14384: PUSH
14385: LD_INT 7
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: LD_INT 11
14393: PUSH
14394: LD_INT 12
14396: PUSH
14397: LD_INT 15
14399: PUSH
14400: LD_INT 16
14402: PUSH
14403: LD_INT 20
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 36
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 101
14461: PUSH
14462: LD_INT 102
14464: PUSH
14465: LD_INT 103
14467: PUSH
14468: LD_INT 105
14470: PUSH
14471: LD_INT 106
14473: PUSH
14474: LD_INT 108
14476: PUSH
14477: LD_INT 109
14479: PUSH
14480: LD_INT 112
14482: PUSH
14483: LD_INT 114
14485: PUSH
14486: LD_INT 116
14488: PUSH
14489: LD_INT 117
14491: PUSH
14492: LD_INT 118
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: ST_TO_ADDR
14513: GO 16612
14515: LD_INT 10
14517: DOUBLE
14518: EQUAL
14519: IFTRUE 14523
14521: GO 14719
14523: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: LD_INT 5
14537: PUSH
14538: LD_INT 6
14540: PUSH
14541: LD_INT 7
14543: PUSH
14544: LD_INT 8
14546: PUSH
14547: LD_INT 9
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: LD_INT 11
14555: PUSH
14556: LD_INT 12
14558: PUSH
14559: LD_INT 13
14561: PUSH
14562: LD_INT 14
14564: PUSH
14565: LD_INT 15
14567: PUSH
14568: LD_INT 16
14570: PUSH
14571: LD_INT 17
14573: PUSH
14574: LD_INT 18
14576: PUSH
14577: LD_INT 19
14579: PUSH
14580: LD_INT 20
14582: PUSH
14583: LD_INT 21
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_INT 23
14591: PUSH
14592: LD_INT 24
14594: PUSH
14595: LD_INT 25
14597: PUSH
14598: LD_INT 26
14600: PUSH
14601: LD_INT 28
14603: PUSH
14604: LD_INT 30
14606: PUSH
14607: LD_INT 31
14609: PUSH
14610: LD_INT 32
14612: PUSH
14613: LD_INT 36
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 114
14685: PUSH
14686: LD_INT 116
14688: PUSH
14689: LD_INT 117
14691: PUSH
14692: LD_INT 118
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: ST_TO_ADDR
14717: GO 16612
14719: LD_INT 11
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14931
14727: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14728: LD_ADDR_VAR 0 2
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: LD_INT 4
14741: PUSH
14742: LD_INT 5
14744: PUSH
14745: LD_INT 6
14747: PUSH
14748: LD_INT 7
14750: PUSH
14751: LD_INT 8
14753: PUSH
14754: LD_INT 9
14756: PUSH
14757: LD_INT 10
14759: PUSH
14760: LD_INT 11
14762: PUSH
14763: LD_INT 12
14765: PUSH
14766: LD_INT 13
14768: PUSH
14769: LD_INT 14
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 16
14777: PUSH
14778: LD_INT 17
14780: PUSH
14781: LD_INT 18
14783: PUSH
14784: LD_INT 19
14786: PUSH
14787: LD_INT 20
14789: PUSH
14790: LD_INT 21
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: LD_INT 24
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 26
14807: PUSH
14808: LD_INT 28
14810: PUSH
14811: LD_INT 30
14813: PUSH
14814: LD_INT 31
14816: PUSH
14817: LD_INT 32
14819: PUSH
14820: LD_INT 34
14822: PUSH
14823: LD_INT 36
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 101
14861: PUSH
14862: LD_INT 102
14864: PUSH
14865: LD_INT 103
14867: PUSH
14868: LD_INT 104
14870: PUSH
14871: LD_INT 105
14873: PUSH
14874: LD_INT 106
14876: PUSH
14877: LD_INT 107
14879: PUSH
14880: LD_INT 108
14882: PUSH
14883: LD_INT 109
14885: PUSH
14886: LD_INT 110
14888: PUSH
14889: LD_INT 111
14891: PUSH
14892: LD_INT 112
14894: PUSH
14895: LD_INT 114
14897: PUSH
14898: LD_INT 116
14900: PUSH
14901: LD_INT 117
14903: PUSH
14904: LD_INT 118
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: ST_TO_ADDR
14929: GO 16612
14931: LD_INT 12
14933: DOUBLE
14934: EQUAL
14935: IFTRUE 14939
14937: GO 15159
14939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: LD_INT 4
14956: PUSH
14957: LD_INT 5
14959: PUSH
14960: LD_INT 6
14962: PUSH
14963: LD_INT 7
14965: PUSH
14966: LD_INT 8
14968: PUSH
14969: LD_INT 9
14971: PUSH
14972: LD_INT 10
14974: PUSH
14975: LD_INT 11
14977: PUSH
14978: LD_INT 12
14980: PUSH
14981: LD_INT 13
14983: PUSH
14984: LD_INT 14
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: LD_INT 16
14992: PUSH
14993: LD_INT 17
14995: PUSH
14996: LD_INT 18
14998: PUSH
14999: LD_INT 19
15001: PUSH
15002: LD_INT 20
15004: PUSH
15005: LD_INT 21
15007: PUSH
15008: LD_INT 22
15010: PUSH
15011: LD_INT 23
15013: PUSH
15014: LD_INT 24
15016: PUSH
15017: LD_INT 25
15019: PUSH
15020: LD_INT 26
15022: PUSH
15023: LD_INT 27
15025: PUSH
15026: LD_INT 28
15028: PUSH
15029: LD_INT 30
15031: PUSH
15032: LD_INT 31
15034: PUSH
15035: LD_INT 32
15037: PUSH
15038: LD_INT 33
15040: PUSH
15041: LD_INT 34
15043: PUSH
15044: LD_INT 36
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 101
15085: PUSH
15086: LD_INT 102
15088: PUSH
15089: LD_INT 103
15091: PUSH
15092: LD_INT 104
15094: PUSH
15095: LD_INT 105
15097: PUSH
15098: LD_INT 106
15100: PUSH
15101: LD_INT 107
15103: PUSH
15104: LD_INT 108
15106: PUSH
15107: LD_INT 109
15109: PUSH
15110: LD_INT 110
15112: PUSH
15113: LD_INT 111
15115: PUSH
15116: LD_INT 112
15118: PUSH
15119: LD_INT 113
15121: PUSH
15122: LD_INT 114
15124: PUSH
15125: LD_INT 116
15127: PUSH
15128: LD_INT 117
15130: PUSH
15131: LD_INT 118
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: ST_TO_ADDR
15157: GO 16612
15159: LD_INT 13
15161: DOUBLE
15162: EQUAL
15163: IFTRUE 15167
15165: GO 15375
15167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 3
15181: PUSH
15182: LD_INT 4
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: LD_INT 8
15190: PUSH
15191: LD_INT 9
15193: PUSH
15194: LD_INT 10
15196: PUSH
15197: LD_INT 11
15199: PUSH
15200: LD_INT 12
15202: PUSH
15203: LD_INT 14
15205: PUSH
15206: LD_INT 15
15208: PUSH
15209: LD_INT 16
15211: PUSH
15212: LD_INT 17
15214: PUSH
15215: LD_INT 18
15217: PUSH
15218: LD_INT 19
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_INT 23
15232: PUSH
15233: LD_INT 24
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 26
15241: PUSH
15242: LD_INT 27
15244: PUSH
15245: LD_INT 28
15247: PUSH
15248: LD_INT 30
15250: PUSH
15251: LD_INT 31
15253: PUSH
15254: LD_INT 32
15256: PUSH
15257: LD_INT 33
15259: PUSH
15260: LD_INT 34
15262: PUSH
15263: LD_INT 36
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 101
15301: PUSH
15302: LD_INT 102
15304: PUSH
15305: LD_INT 103
15307: PUSH
15308: LD_INT 104
15310: PUSH
15311: LD_INT 105
15313: PUSH
15314: LD_INT 106
15316: PUSH
15317: LD_INT 107
15319: PUSH
15320: LD_INT 108
15322: PUSH
15323: LD_INT 109
15325: PUSH
15326: LD_INT 110
15328: PUSH
15329: LD_INT 111
15331: PUSH
15332: LD_INT 112
15334: PUSH
15335: LD_INT 113
15337: PUSH
15338: LD_INT 114
15340: PUSH
15341: LD_INT 116
15343: PUSH
15344: LD_INT 117
15346: PUSH
15347: LD_INT 118
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: ST_TO_ADDR
15373: GO 16612
15375: LD_INT 14
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15607
15383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: LD_INT 3
15397: PUSH
15398: LD_INT 4
15400: PUSH
15401: LD_INT 5
15403: PUSH
15404: LD_INT 6
15406: PUSH
15407: LD_INT 7
15409: PUSH
15410: LD_INT 8
15412: PUSH
15413: LD_INT 9
15415: PUSH
15416: LD_INT 10
15418: PUSH
15419: LD_INT 11
15421: PUSH
15422: LD_INT 12
15424: PUSH
15425: LD_INT 13
15427: PUSH
15428: LD_INT 14
15430: PUSH
15431: LD_INT 15
15433: PUSH
15434: LD_INT 16
15436: PUSH
15437: LD_INT 17
15439: PUSH
15440: LD_INT 18
15442: PUSH
15443: LD_INT 19
15445: PUSH
15446: LD_INT 20
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 22
15454: PUSH
15455: LD_INT 23
15457: PUSH
15458: LD_INT 24
15460: PUSH
15461: LD_INT 25
15463: PUSH
15464: LD_INT 26
15466: PUSH
15467: LD_INT 27
15469: PUSH
15470: LD_INT 28
15472: PUSH
15473: LD_INT 29
15475: PUSH
15476: LD_INT 30
15478: PUSH
15479: LD_INT 31
15481: PUSH
15482: LD_INT 32
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 34
15490: PUSH
15491: LD_INT 36
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 101
15533: PUSH
15534: LD_INT 102
15536: PUSH
15537: LD_INT 103
15539: PUSH
15540: LD_INT 104
15542: PUSH
15543: LD_INT 105
15545: PUSH
15546: LD_INT 106
15548: PUSH
15549: LD_INT 107
15551: PUSH
15552: LD_INT 108
15554: PUSH
15555: LD_INT 109
15557: PUSH
15558: LD_INT 110
15560: PUSH
15561: LD_INT 111
15563: PUSH
15564: LD_INT 112
15566: PUSH
15567: LD_INT 113
15569: PUSH
15570: LD_INT 114
15572: PUSH
15573: LD_INT 116
15575: PUSH
15576: LD_INT 117
15578: PUSH
15579: LD_INT 118
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: ST_TO_ADDR
15605: GO 16612
15607: LD_INT 15
15609: DOUBLE
15610: EQUAL
15611: IFTRUE 15615
15613: GO 15839
15615: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: LD_INT 2
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: LD_INT 4
15632: PUSH
15633: LD_INT 5
15635: PUSH
15636: LD_INT 6
15638: PUSH
15639: LD_INT 7
15641: PUSH
15642: LD_INT 8
15644: PUSH
15645: LD_INT 9
15647: PUSH
15648: LD_INT 10
15650: PUSH
15651: LD_INT 11
15653: PUSH
15654: LD_INT 12
15656: PUSH
15657: LD_INT 13
15659: PUSH
15660: LD_INT 14
15662: PUSH
15663: LD_INT 15
15665: PUSH
15666: LD_INT 16
15668: PUSH
15669: LD_INT 17
15671: PUSH
15672: LD_INT 18
15674: PUSH
15675: LD_INT 19
15677: PUSH
15678: LD_INT 20
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_INT 23
15689: PUSH
15690: LD_INT 24
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 26
15698: PUSH
15699: LD_INT 27
15701: PUSH
15702: LD_INT 28
15704: PUSH
15705: LD_INT 29
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: LD_INT 31
15713: PUSH
15714: LD_INT 32
15716: PUSH
15717: LD_INT 33
15719: PUSH
15720: LD_INT 34
15722: PUSH
15723: LD_INT 36
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 101
15765: PUSH
15766: LD_INT 102
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: LD_INT 104
15774: PUSH
15775: LD_INT 105
15777: PUSH
15778: LD_INT 106
15780: PUSH
15781: LD_INT 107
15783: PUSH
15784: LD_INT 108
15786: PUSH
15787: LD_INT 109
15789: PUSH
15790: LD_INT 110
15792: PUSH
15793: LD_INT 111
15795: PUSH
15796: LD_INT 112
15798: PUSH
15799: LD_INT 113
15801: PUSH
15802: LD_INT 114
15804: PUSH
15805: LD_INT 116
15807: PUSH
15808: LD_INT 117
15810: PUSH
15811: LD_INT 118
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: ST_TO_ADDR
15837: GO 16612
15839: LD_INT 16
15841: DOUBLE
15842: EQUAL
15843: IFTRUE 15847
15845: GO 15983
15847: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: LD_INT 4
15858: PUSH
15859: LD_INT 5
15861: PUSH
15862: LD_INT 7
15864: PUSH
15865: LD_INT 11
15867: PUSH
15868: LD_INT 12
15870: PUSH
15871: LD_INT 15
15873: PUSH
15874: LD_INT 16
15876: PUSH
15877: LD_INT 20
15879: PUSH
15880: LD_INT 21
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_INT 23
15888: PUSH
15889: LD_INT 25
15891: PUSH
15892: LD_INT 26
15894: PUSH
15895: LD_INT 30
15897: PUSH
15898: LD_INT 31
15900: PUSH
15901: LD_INT 32
15903: PUSH
15904: LD_INT 33
15906: PUSH
15907: LD_INT 34
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 101
15933: PUSH
15934: LD_INT 102
15936: PUSH
15937: LD_INT 103
15939: PUSH
15940: LD_INT 106
15942: PUSH
15943: LD_INT 108
15945: PUSH
15946: LD_INT 112
15948: PUSH
15949: LD_INT 113
15951: PUSH
15952: LD_INT 114
15954: PUSH
15955: LD_INT 116
15957: PUSH
15958: LD_INT 117
15960: PUSH
15961: LD_INT 118
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: ST_TO_ADDR
15981: GO 16612
15983: LD_INT 17
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16215
15991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: LD_INT 3
16005: PUSH
16006: LD_INT 4
16008: PUSH
16009: LD_INT 5
16011: PUSH
16012: LD_INT 6
16014: PUSH
16015: LD_INT 7
16017: PUSH
16018: LD_INT 8
16020: PUSH
16021: LD_INT 9
16023: PUSH
16024: LD_INT 10
16026: PUSH
16027: LD_INT 11
16029: PUSH
16030: LD_INT 12
16032: PUSH
16033: LD_INT 13
16035: PUSH
16036: LD_INT 14
16038: PUSH
16039: LD_INT 15
16041: PUSH
16042: LD_INT 16
16044: PUSH
16045: LD_INT 17
16047: PUSH
16048: LD_INT 18
16050: PUSH
16051: LD_INT 19
16053: PUSH
16054: LD_INT 20
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_INT 23
16065: PUSH
16066: LD_INT 24
16068: PUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 26
16074: PUSH
16075: LD_INT 27
16077: PUSH
16078: LD_INT 28
16080: PUSH
16081: LD_INT 29
16083: PUSH
16084: LD_INT 30
16086: PUSH
16087: LD_INT 31
16089: PUSH
16090: LD_INT 32
16092: PUSH
16093: LD_INT 33
16095: PUSH
16096: LD_INT 34
16098: PUSH
16099: LD_INT 36
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 101
16141: PUSH
16142: LD_INT 102
16144: PUSH
16145: LD_INT 103
16147: PUSH
16148: LD_INT 104
16150: PUSH
16151: LD_INT 105
16153: PUSH
16154: LD_INT 106
16156: PUSH
16157: LD_INT 107
16159: PUSH
16160: LD_INT 108
16162: PUSH
16163: LD_INT 109
16165: PUSH
16166: LD_INT 110
16168: PUSH
16169: LD_INT 111
16171: PUSH
16172: LD_INT 112
16174: PUSH
16175: LD_INT 113
16177: PUSH
16178: LD_INT 114
16180: PUSH
16181: LD_INT 116
16183: PUSH
16184: LD_INT 117
16186: PUSH
16187: LD_INT 118
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: ST_TO_ADDR
16213: GO 16612
16215: LD_INT 18
16217: DOUBLE
16218: EQUAL
16219: IFTRUE 16223
16221: GO 16371
16223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 4
16234: PUSH
16235: LD_INT 5
16237: PUSH
16238: LD_INT 7
16240: PUSH
16241: LD_INT 11
16243: PUSH
16244: LD_INT 12
16246: PUSH
16247: LD_INT 15
16249: PUSH
16250: LD_INT 16
16252: PUSH
16253: LD_INT 20
16255: PUSH
16256: LD_INT 21
16258: PUSH
16259: LD_INT 22
16261: PUSH
16262: LD_INT 23
16264: PUSH
16265: LD_INT 25
16267: PUSH
16268: LD_INT 26
16270: PUSH
16271: LD_INT 30
16273: PUSH
16274: LD_INT 31
16276: PUSH
16277: LD_INT 32
16279: PUSH
16280: LD_INT 33
16282: PUSH
16283: LD_INT 34
16285: PUSH
16286: LD_INT 35
16288: PUSH
16289: LD_INT 36
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 101
16317: PUSH
16318: LD_INT 102
16320: PUSH
16321: LD_INT 103
16323: PUSH
16324: LD_INT 106
16326: PUSH
16327: LD_INT 108
16329: PUSH
16330: LD_INT 112
16332: PUSH
16333: LD_INT 113
16335: PUSH
16336: LD_INT 114
16338: PUSH
16339: LD_INT 115
16341: PUSH
16342: LD_INT 116
16344: PUSH
16345: LD_INT 117
16347: PUSH
16348: LD_INT 118
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: ST_TO_ADDR
16369: GO 16612
16371: LD_INT 19
16373: DOUBLE
16374: EQUAL
16375: IFTRUE 16379
16377: GO 16611
16379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 2
16390: PUSH
16391: LD_INT 3
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: LD_INT 5
16399: PUSH
16400: LD_INT 6
16402: PUSH
16403: LD_INT 7
16405: PUSH
16406: LD_INT 8
16408: PUSH
16409: LD_INT 9
16411: PUSH
16412: LD_INT 10
16414: PUSH
16415: LD_INT 11
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: LD_INT 13
16423: PUSH
16424: LD_INT 14
16426: PUSH
16427: LD_INT 15
16429: PUSH
16430: LD_INT 16
16432: PUSH
16433: LD_INT 17
16435: PUSH
16436: LD_INT 18
16438: PUSH
16439: LD_INT 19
16441: PUSH
16442: LD_INT 20
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 24
16456: PUSH
16457: LD_INT 25
16459: PUSH
16460: LD_INT 26
16462: PUSH
16463: LD_INT 27
16465: PUSH
16466: LD_INT 28
16468: PUSH
16469: LD_INT 29
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 31
16477: PUSH
16478: LD_INT 32
16480: PUSH
16481: LD_INT 33
16483: PUSH
16484: LD_INT 34
16486: PUSH
16487: LD_INT 35
16489: PUSH
16490: LD_INT 36
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 101
16533: PUSH
16534: LD_INT 102
16536: PUSH
16537: LD_INT 103
16539: PUSH
16540: LD_INT 104
16542: PUSH
16543: LD_INT 105
16545: PUSH
16546: LD_INT 106
16548: PUSH
16549: LD_INT 107
16551: PUSH
16552: LD_INT 108
16554: PUSH
16555: LD_INT 109
16557: PUSH
16558: LD_INT 110
16560: PUSH
16561: LD_INT 111
16563: PUSH
16564: LD_INT 112
16566: PUSH
16567: LD_INT 113
16569: PUSH
16570: LD_INT 114
16572: PUSH
16573: LD_INT 115
16575: PUSH
16576: LD_INT 116
16578: PUSH
16579: LD_INT 117
16581: PUSH
16582: LD_INT 118
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: ST_TO_ADDR
16609: GO 16612
16611: POP
// end else
16612: GO 16843
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16614: LD_ADDR_VAR 0 2
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: LD_INT 5
16633: PUSH
16634: LD_INT 6
16636: PUSH
16637: LD_INT 7
16639: PUSH
16640: LD_INT 8
16642: PUSH
16643: LD_INT 9
16645: PUSH
16646: LD_INT 10
16648: PUSH
16649: LD_INT 11
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 13
16657: PUSH
16658: LD_INT 14
16660: PUSH
16661: LD_INT 15
16663: PUSH
16664: LD_INT 16
16666: PUSH
16667: LD_INT 17
16669: PUSH
16670: LD_INT 18
16672: PUSH
16673: LD_INT 19
16675: PUSH
16676: LD_INT 20
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_INT 23
16687: PUSH
16688: LD_INT 24
16690: PUSH
16691: LD_INT 25
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: LD_INT 28
16702: PUSH
16703: LD_INT 29
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: LD_INT 31
16711: PUSH
16712: LD_INT 32
16714: PUSH
16715: LD_INT 33
16717: PUSH
16718: LD_INT 34
16720: PUSH
16721: LD_INT 35
16723: PUSH
16724: LD_INT 36
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 104
16776: PUSH
16777: LD_INT 105
16779: PUSH
16780: LD_INT 106
16782: PUSH
16783: LD_INT 107
16785: PUSH
16786: LD_INT 108
16788: PUSH
16789: LD_INT 109
16791: PUSH
16792: LD_INT 110
16794: PUSH
16795: LD_INT 111
16797: PUSH
16798: LD_INT 112
16800: PUSH
16801: LD_INT 113
16803: PUSH
16804: LD_INT 114
16806: PUSH
16807: LD_INT 115
16809: PUSH
16810: LD_INT 116
16812: PUSH
16813: LD_INT 117
16815: PUSH
16816: LD_INT 118
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: ST_TO_ADDR
// if result then
16843: LD_VAR 0 2
16847: IFFALSE 17633
// begin normal :=  ;
16849: LD_ADDR_VAR 0 5
16853: PUSH
16854: LD_STRING 
16856: ST_TO_ADDR
// hardcore :=  ;
16857: LD_ADDR_VAR 0 6
16861: PUSH
16862: LD_STRING 
16864: ST_TO_ADDR
// active :=  ;
16865: LD_ADDR_VAR 0 7
16869: PUSH
16870: LD_STRING 
16872: ST_TO_ADDR
// for i = 1 to normalCounter do
16873: LD_ADDR_VAR 0 8
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_EXP 23
16887: PUSH
16888: FOR_TO
16889: IFFALSE 16990
// begin tmp := 0 ;
16891: LD_ADDR_VAR 0 3
16895: PUSH
16896: LD_STRING 0
16898: ST_TO_ADDR
// if result [ 1 ] then
16899: LD_VAR 0 2
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: IFFALSE 16972
// if result [ 1 ] [ 1 ] = i then
16909: LD_VAR 0 2
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PUSH
16918: LD_INT 1
16920: ARRAY
16921: PUSH
16922: LD_VAR 0 8
16926: EQUAL
16927: IFFALSE 16972
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_VAR 0 2
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 1
16949: ARRAY
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 3
16958: PPUSH
16959: CALL_OW 1
16963: ST_TO_ADDR
// tmp := 1 ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_STRING 1
16971: ST_TO_ADDR
// end ; normal := normal & tmp ;
16972: LD_ADDR_VAR 0 5
16976: PUSH
16977: LD_VAR 0 5
16981: PUSH
16982: LD_VAR 0 3
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16888
16990: POP
16991: POP
// for i = 1 to hardcoreCounter do
16992: LD_ADDR_VAR 0 8
16996: PUSH
16997: DOUBLE
16998: LD_INT 1
17000: DEC
17001: ST_TO_ADDR
17002: LD_EXP 24
17006: PUSH
17007: FOR_TO
17008: IFFALSE 17113
// begin tmp := 0 ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: LD_STRING 0
17017: ST_TO_ADDR
// if result [ 2 ] then
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 2
17025: ARRAY
17026: IFFALSE 17095
// if result [ 2 ] [ 1 ] = 100 + i then
17028: LD_VAR 0 2
17032: PUSH
17033: LD_INT 2
17035: ARRAY
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PUSH
17041: LD_INT 100
17043: PUSH
17044: LD_VAR 0 8
17048: PLUS
17049: EQUAL
17050: IFFALSE 17095
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: LD_VAR 0 2
17061: PPUSH
17062: LD_INT 2
17064: PPUSH
17065: LD_VAR 0 2
17069: PUSH
17070: LD_INT 2
17072: ARRAY
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 3
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// tmp := 1 ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_STRING 1
17094: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17095: LD_ADDR_VAR 0 6
17099: PUSH
17100: LD_VAR 0 6
17104: PUSH
17105: LD_VAR 0 3
17109: STR
17110: ST_TO_ADDR
// end ;
17111: GO 17007
17113: POP
17114: POP
// if isGameLoad then
17115: LD_VAR 0 1
17119: IFFALSE 17594
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17121: LD_ADDR_VAR 0 4
17125: PUSH
17126: LD_EXP 27
17130: PUSH
17131: LD_EXP 26
17135: PUSH
17136: LD_EXP 28
17140: PUSH
17141: LD_EXP 25
17145: PUSH
17146: LD_EXP 29
17150: PUSH
17151: LD_EXP 30
17155: PUSH
17156: LD_EXP 31
17160: PUSH
17161: LD_EXP 32
17165: PUSH
17166: LD_EXP 33
17170: PUSH
17171: LD_EXP 34
17175: PUSH
17176: LD_EXP 35
17180: PUSH
17181: LD_EXP 36
17185: PUSH
17186: LD_EXP 37
17190: PUSH
17191: LD_EXP 38
17195: PUSH
17196: LD_EXP 46
17200: PUSH
17201: LD_EXP 47
17205: PUSH
17206: LD_EXP 48
17210: PUSH
17211: LD_EXP 49
17215: PUSH
17216: LD_EXP 51
17220: PUSH
17221: LD_EXP 52
17225: PUSH
17226: LD_EXP 53
17230: PUSH
17231: LD_EXP 56
17235: PUSH
17236: LD_EXP 58
17240: PUSH
17241: LD_EXP 59
17245: PUSH
17246: LD_EXP 60
17250: PUSH
17251: LD_EXP 62
17255: PUSH
17256: LD_EXP 63
17260: PUSH
17261: LD_EXP 66
17265: PUSH
17266: LD_EXP 67
17270: PUSH
17271: LD_EXP 68
17275: PUSH
17276: LD_EXP 69
17280: PUSH
17281: LD_EXP 70
17285: PUSH
17286: LD_EXP 71
17290: PUSH
17291: LD_EXP 72
17295: PUSH
17296: LD_EXP 73
17300: PUSH
17301: LD_EXP 74
17305: PUSH
17306: LD_EXP 39
17310: PUSH
17311: LD_EXP 40
17315: PUSH
17316: LD_EXP 43
17320: PUSH
17321: LD_EXP 44
17325: PUSH
17326: LD_EXP 45
17330: PUSH
17331: LD_EXP 41
17335: PUSH
17336: LD_EXP 42
17340: PUSH
17341: LD_EXP 50
17345: PUSH
17346: LD_EXP 54
17350: PUSH
17351: LD_EXP 55
17355: PUSH
17356: LD_EXP 57
17360: PUSH
17361: LD_EXP 61
17365: PUSH
17366: LD_EXP 64
17370: PUSH
17371: LD_EXP 65
17375: PUSH
17376: LD_EXP 75
17380: PUSH
17381: LD_EXP 76
17385: PUSH
17386: LD_EXP 77
17390: PUSH
17391: LD_EXP 78
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: ST_TO_ADDR
// tmp :=  ;
17452: LD_ADDR_VAR 0 3
17456: PUSH
17457: LD_STRING 
17459: ST_TO_ADDR
// for i = 1 to normalCounter do
17460: LD_ADDR_VAR 0 8
17464: PUSH
17465: DOUBLE
17466: LD_INT 1
17468: DEC
17469: ST_TO_ADDR
17470: LD_EXP 23
17474: PUSH
17475: FOR_TO
17476: IFFALSE 17512
// begin if flags [ i ] then
17478: LD_VAR 0 4
17482: PUSH
17483: LD_VAR 0 8
17487: ARRAY
17488: IFFALSE 17510
// tmp := tmp & i & ; ;
17490: LD_ADDR_VAR 0 3
17494: PUSH
17495: LD_VAR 0 3
17499: PUSH
17500: LD_VAR 0 8
17504: STR
17505: PUSH
17506: LD_STRING ;
17508: STR
17509: ST_TO_ADDR
// end ;
17510: GO 17475
17512: POP
17513: POP
// for i = 1 to hardcoreCounter do
17514: LD_ADDR_VAR 0 8
17518: PUSH
17519: DOUBLE
17520: LD_INT 1
17522: DEC
17523: ST_TO_ADDR
17524: LD_EXP 24
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17576
// begin if flags [ normalCounter + i ] then
17532: LD_VAR 0 4
17536: PUSH
17537: LD_EXP 23
17541: PUSH
17542: LD_VAR 0 8
17546: PLUS
17547: ARRAY
17548: IFFALSE 17574
// tmp := tmp & ( 100 + i ) & ; ;
17550: LD_ADDR_VAR 0 3
17554: PUSH
17555: LD_VAR 0 3
17559: PUSH
17560: LD_INT 100
17562: PUSH
17563: LD_VAR 0 8
17567: PLUS
17568: STR
17569: PUSH
17570: LD_STRING ;
17572: STR
17573: ST_TO_ADDR
// end ;
17574: GO 17529
17576: POP
17577: POP
// if tmp then
17578: LD_VAR 0 3
17582: IFFALSE 17594
// active := tmp ;
17584: LD_ADDR_VAR 0 7
17588: PUSH
17589: LD_VAR 0 3
17593: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17594: LD_STRING getStreamItemsFromMission("
17596: PUSH
17597: LD_VAR 0 5
17601: STR
17602: PUSH
17603: LD_STRING ","
17605: STR
17606: PUSH
17607: LD_VAR 0 6
17611: STR
17612: PUSH
17613: LD_STRING ","
17615: STR
17616: PUSH
17617: LD_VAR 0 7
17621: STR
17622: PUSH
17623: LD_STRING ")
17625: STR
17626: PPUSH
17627: CALL_OW 559
// end else
17631: GO 17640
// ToLua ( getStreamItemsFromMission("","","") ) ;
17633: LD_STRING getStreamItemsFromMission("","","")
17635: PPUSH
17636: CALL_OW 559
// end ;
17640: LD_VAR 0 2
17644: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17645: LD_EXP 22
17649: IFFALSE 17657
17651: PUSH
17652: LD_EXP 27
17656: AND
17657: IFFALSE 17781
17659: GO 17661
17661: DISABLE
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
// begin enable ;
17666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_OWVAR 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 34
17689: PUSH
17690: LD_INT 7
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 34
17699: PUSH
17700: LD_INT 45
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 34
17709: PUSH
17710: LD_INT 28
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 34
17719: PUSH
17720: LD_INT 47
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: ST_TO_ADDR
// if not tmp then
17743: LD_VAR 0 2
17747: NOT
17748: IFFALSE 17752
// exit ;
17750: GO 17781
// for i in tmp do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: LD_VAR 0 2
17761: PUSH
17762: FOR_IN
17763: IFFALSE 17779
// begin SetLives ( i , 0 ) ;
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_INT 0
17772: PPUSH
17773: CALL_OW 234
// end ;
17777: GO 17762
17779: POP
17780: POP
// end ;
17781: PPOPN 2
17783: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17784: LD_EXP 22
17788: IFFALSE 17796
17790: PUSH
17791: LD_EXP 28
17795: AND
17796: IFFALSE 17880
17798: GO 17800
17800: DISABLE
17801: LD_INT 0
17803: PPUSH
17804: PPUSH
// begin enable ;
17805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 32
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: ST_TO_ADDR
// if not tmp then
17842: LD_VAR 0 2
17846: NOT
17847: IFFALSE 17851
// exit ;
17849: GO 17880
// for i in tmp do
17851: LD_ADDR_VAR 0 1
17855: PUSH
17856: LD_VAR 0 2
17860: PUSH
17861: FOR_IN
17862: IFFALSE 17878
// begin SetLives ( i , 0 ) ;
17864: LD_VAR 0 1
17868: PPUSH
17869: LD_INT 0
17871: PPUSH
17872: CALL_OW 234
// end ;
17876: GO 17861
17878: POP
17879: POP
// end ;
17880: PPOPN 2
17882: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17883: LD_EXP 22
17887: IFFALSE 17895
17889: PUSH
17890: LD_EXP 25
17894: AND
17895: IFFALSE 17988
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
// begin enable ;
17903: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17904: LD_ADDR_VAR 0 1
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 5
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 25
17936: PUSH
17937: LD_INT 9
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 25
17946: PUSH
17947: LD_INT 8
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: PUSH
17969: FOR_IN
17970: IFFALSE 17986
// begin SetClass ( i , 1 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 336
// end ;
17984: GO 17969
17986: POP
17987: POP
// end ;
17988: PPOPN 1
17990: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17991: LD_EXP 22
17995: IFFALSE 18003
17997: PUSH
17998: LD_EXP 26
18002: AND
18003: IFFALSE 18015
18005: PUSH
18006: LD_OWVAR 65
18010: PUSH
18011: LD_INT 7
18013: LESS
18014: AND
18015: IFFALSE 18029
18017: GO 18019
18019: DISABLE
// begin enable ;
18020: ENABLE
// game_speed := 7 ;
18021: LD_ADDR_OWVAR 65
18025: PUSH
18026: LD_INT 7
18028: ST_TO_ADDR
// end ;
18029: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18030: LD_EXP 22
18034: IFFALSE 18042
18036: PUSH
18037: LD_EXP 29
18041: AND
18042: IFFALSE 18244
18044: GO 18046
18046: DISABLE
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
18051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 81
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 21
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: ST_TO_ADDR
// if not tmp then
18088: LD_VAR 0 3
18092: NOT
18093: IFFALSE 18097
// exit ;
18095: GO 18244
// if tmp > 5 then
18097: LD_VAR 0 3
18101: PUSH
18102: LD_INT 5
18104: GREATER
18105: IFFALSE 18117
// k := 5 else
18107: LD_ADDR_VAR 0 2
18111: PUSH
18112: LD_INT 5
18114: ST_TO_ADDR
18115: GO 18127
// k := tmp ;
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 3
18126: ST_TO_ADDR
// for i := 1 to k do
18127: LD_ADDR_VAR 0 1
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_VAR 0 2
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18242
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18145: LD_VAR 0 3
18149: PUSH
18150: LD_VAR 0 1
18154: ARRAY
18155: PPUSH
18156: LD_VAR 0 1
18160: PUSH
18161: LD_INT 4
18163: MOD
18164: PUSH
18165: LD_INT 1
18167: PLUS
18168: PPUSH
18169: CALL_OW 259
18173: PUSH
18174: LD_INT 10
18176: LESS
18177: IFFALSE 18240
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18179: LD_VAR 0 3
18183: PUSH
18184: LD_VAR 0 1
18188: ARRAY
18189: PPUSH
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 4
18197: MOD
18198: PUSH
18199: LD_INT 1
18201: PLUS
18202: PPUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_VAR 0 1
18212: ARRAY
18213: PPUSH
18214: LD_VAR 0 1
18218: PUSH
18219: LD_INT 4
18221: MOD
18222: PUSH
18223: LD_INT 1
18225: PLUS
18226: PPUSH
18227: CALL_OW 259
18231: PUSH
18232: LD_INT 1
18234: PLUS
18235: PPUSH
18236: CALL_OW 237
18240: GO 18142
18242: POP
18243: POP
// end ;
18244: PPOPN 3
18246: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18247: LD_EXP 22
18251: IFFALSE 18259
18253: PUSH
18254: LD_EXP 30
18258: AND
18259: IFFALSE 18279
18261: GO 18263
18263: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18264: LD_INT 4
18266: PPUSH
18267: LD_OWVAR 2
18271: PPUSH
18272: LD_INT 0
18274: PPUSH
18275: CALL_OW 324
18279: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18280: LD_EXP 22
18284: IFFALSE 18292
18286: PUSH
18287: LD_EXP 59
18291: AND
18292: IFFALSE 18312
18294: GO 18296
18296: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18297: LD_INT 19
18299: PPUSH
18300: LD_OWVAR 2
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 324
18312: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18313: LD_EXP 22
18317: IFFALSE 18325
18319: PUSH
18320: LD_EXP 31
18324: AND
18325: IFFALSE 18427
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
// begin enable ;
18334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_INT 22
18342: PUSH
18343: LD_OWVAR 2
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 34
18357: PUSH
18358: LD_INT 11
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 34
18367: PUSH
18368: LD_INT 30
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: ST_TO_ADDR
// if not tmp then
18389: LD_VAR 0 2
18393: NOT
18394: IFFALSE 18398
// exit ;
18396: GO 18427
// for i in tmp do
18398: LD_ADDR_VAR 0 1
18402: PUSH
18403: LD_VAR 0 2
18407: PUSH
18408: FOR_IN
18409: IFFALSE 18425
// begin SetLives ( i , 0 ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_INT 0
18418: PPUSH
18419: CALL_OW 234
// end ;
18423: GO 18408
18425: POP
18426: POP
// end ;
18427: PPOPN 2
18429: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18430: LD_EXP 22
18434: IFFALSE 18442
18436: PUSH
18437: LD_EXP 32
18441: AND
18442: IFFALSE 18462
18444: GO 18446
18446: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18447: LD_INT 32
18449: PPUSH
18450: LD_OWVAR 2
18454: PPUSH
18455: LD_INT 0
18457: PPUSH
18458: CALL_OW 324
18462: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18463: LD_EXP 22
18467: IFFALSE 18475
18469: PUSH
18470: LD_EXP 33
18474: AND
18475: IFFALSE 18658
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 33
18504: PUSH
18505: LD_INT 3
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 2
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18658
// side := 0 ;
18530: LD_ADDR_VAR 0 3
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// for i := 1 to 8 do
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: DOUBLE
18544: LD_INT 1
18546: DEC
18547: ST_TO_ADDR
18548: LD_INT 8
18550: PUSH
18551: FOR_TO
18552: IFFALSE 18602
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18554: LD_OWVAR 2
18558: PUSH
18559: LD_VAR 0 1
18563: NONEQUAL
18564: IFFALSE 18586
18566: PUSH
18567: LD_OWVAR 2
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 81
18581: PUSH
18582: LD_INT 2
18584: EQUAL
18585: AND
18586: IFFALSE 18600
// begin side := i ;
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: LD_VAR 0 1
18597: ST_TO_ADDR
// break ;
18598: GO 18602
// end ;
18600: GO 18551
18602: POP
18603: POP
// if not side then
18604: LD_VAR 0 3
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18658
// for i := 1 to tmp do
18613: LD_ADDR_VAR 0 1
18617: PUSH
18618: DOUBLE
18619: LD_INT 1
18621: DEC
18622: ST_TO_ADDR
18623: LD_VAR 0 2
18627: PUSH
18628: FOR_TO
18629: IFFALSE 18656
// if Prob ( 60 ) then
18631: LD_INT 60
18633: PPUSH
18634: CALL_OW 13
18638: IFFALSE 18654
// SetSide ( i , side ) ;
18640: LD_VAR 0 1
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: CALL_OW 235
18654: GO 18628
18656: POP
18657: POP
// end ;
18658: PPOPN 3
18660: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18661: LD_EXP 22
18665: IFFALSE 18673
18667: PUSH
18668: LD_EXP 35
18672: AND
18673: IFFALSE 18792
18675: GO 18677
18677: DISABLE
18678: LD_INT 0
18680: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18681: LD_ADDR_VAR 0 1
18685: PUSH
18686: LD_INT 22
18688: PUSH
18689: LD_OWVAR 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: LD_INT 23
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: PUSH
18735: FOR_IN
18736: IFFALSE 18790
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 257
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 4
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: IN
18766: IFFALSE 18788
// SetClass ( un , rand ( 1 , 4 ) ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_INT 4
18778: PPUSH
18779: CALL_OW 12
18783: PPUSH
18784: CALL_OW 336
18788: GO 18735
18790: POP
18791: POP
// end ;
18792: PPOPN 1
18794: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18795: LD_EXP 22
18799: IFFALSE 18807
18801: PUSH
18802: LD_EXP 34
18806: AND
18807: IFFALSE 18886
18809: GO 18811
18811: DISABLE
18812: LD_INT 0
18814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_OWVAR 2
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: ST_TO_ADDR
// if not tmp then
18851: LD_VAR 0 1
18855: NOT
18856: IFFALSE 18860
// exit ;
18858: GO 18886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18860: LD_VAR 0 1
18864: PUSH
18865: LD_INT 1
18867: PPUSH
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 12
18877: ARRAY
18878: PPUSH
18879: LD_INT 100
18881: PPUSH
18882: CALL_OW 234
// end ;
18886: PPOPN 1
18888: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18889: LD_EXP 22
18893: IFFALSE 18901
18895: PUSH
18896: LD_EXP 36
18900: AND
18901: IFFALSE 18999
18903: GO 18905
18905: DISABLE
18906: LD_INT 0
18908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_OWVAR 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 21
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 69
18944: ST_TO_ADDR
// if not tmp then
18945: LD_VAR 0 1
18949: NOT
18950: IFFALSE 18954
// exit ;
18952: GO 18999
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18954: LD_VAR 0 1
18958: PUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_VAR 0 1
18966: PPUSH
18967: CALL_OW 12
18971: ARRAY
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 4
18978: PPUSH
18979: CALL_OW 12
18983: PPUSH
18984: LD_INT 3000
18986: PPUSH
18987: LD_INT 9000
18989: PPUSH
18990: CALL_OW 12
18994: PPUSH
18995: CALL_OW 492
// end ;
18999: PPOPN 1
19001: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19002: LD_EXP 22
19006: IFFALSE 19014
19008: PUSH
19009: LD_EXP 37
19013: AND
19014: IFFALSE 19034
19016: GO 19018
19018: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19019: LD_INT 1
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 0
19029: PPUSH
19030: CALL_OW 324
19034: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19035: LD_EXP 22
19039: IFFALSE 19047
19041: PUSH
19042: LD_EXP 38
19046: AND
19047: IFFALSE 19130
19049: GO 19051
19051: DISABLE
19052: LD_INT 0
19054: PPUSH
19055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_OWVAR 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 21
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PPUSH
19087: CALL_OW 69
19091: ST_TO_ADDR
// if not tmp then
19092: LD_VAR 0 2
19096: NOT
19097: IFFALSE 19101
// exit ;
19099: GO 19130
// for i in tmp do
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_VAR 0 2
19110: PUSH
19111: FOR_IN
19112: IFFALSE 19128
// SetBLevel ( i , 10 ) ;
19114: LD_VAR 0 1
19118: PPUSH
19119: LD_INT 10
19121: PPUSH
19122: CALL_OW 241
19126: GO 19111
19128: POP
19129: POP
// end ;
19130: PPOPN 2
19132: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19133: LD_EXP 22
19137: IFFALSE 19145
19139: PUSH
19140: LD_EXP 39
19144: AND
19145: IFFALSE 19256
19147: GO 19149
19149: DISABLE
19150: LD_INT 0
19152: PPUSH
19153: PPUSH
19154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_OWVAR 2
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: ST_TO_ADDR
// if not tmp then
19191: LD_VAR 0 3
19195: NOT
19196: IFFALSE 19200
// exit ;
19198: GO 19256
// un := tmp [ rand ( 1 , tmp ) ] ;
19200: LD_ADDR_VAR 0 2
19204: PUSH
19205: LD_VAR 0 3
19209: PUSH
19210: LD_INT 1
19212: PPUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: CALL_OW 12
19222: ARRAY
19223: ST_TO_ADDR
// if Crawls ( un ) then
19224: LD_VAR 0 2
19228: PPUSH
19229: CALL_OW 318
19233: IFFALSE 19244
// ComWalk ( un ) ;
19235: LD_VAR 0 2
19239: PPUSH
19240: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19244: LD_VAR 0 2
19248: PPUSH
19249: LD_INT 5
19251: PPUSH
19252: CALL_OW 336
// end ;
19256: PPOPN 3
19258: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19259: LD_EXP 22
19263: IFFALSE 19271
19265: PUSH
19266: LD_EXP 40
19270: AND
19271: IFFALSE 19283
19273: PUSH
19274: LD_OWVAR 67
19278: PUSH
19279: LD_INT 4
19281: LESS
19282: AND
19283: IFFALSE 19302
19285: GO 19287
19287: DISABLE
// begin Difficulty := Difficulty + 1 ;
19288: LD_ADDR_OWVAR 67
19292: PUSH
19293: LD_OWVAR 67
19297: PUSH
19298: LD_INT 1
19300: PLUS
19301: ST_TO_ADDR
// end ;
19302: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19303: LD_EXP 22
19307: IFFALSE 19315
19309: PUSH
19310: LD_EXP 41
19314: AND
19315: IFFALSE 19418
19317: GO 19319
19319: DISABLE
19320: LD_INT 0
19322: PPUSH
// begin for i := 1 to 5 do
19323: LD_ADDR_VAR 0 1
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_INT 5
19335: PUSH
19336: FOR_TO
19337: IFFALSE 19416
// begin uc_nation := nation_nature ;
19339: LD_ADDR_OWVAR 21
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// uc_side := 0 ;
19347: LD_ADDR_OWVAR 20
19351: PUSH
19352: LD_INT 0
19354: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19355: LD_ADDR_OWVAR 29
19359: PUSH
19360: LD_INT 12
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ST_TO_ADDR
// hc_agressivity := 20 ;
19370: LD_ADDR_OWVAR 35
19374: PUSH
19375: LD_INT 20
19377: ST_TO_ADDR
// hc_class := class_tiger ;
19378: LD_ADDR_OWVAR 28
19382: PUSH
19383: LD_INT 14
19385: ST_TO_ADDR
// hc_gallery :=  ;
19386: LD_ADDR_OWVAR 33
19390: PUSH
19391: LD_STRING 
19393: ST_TO_ADDR
// hc_name :=  ;
19394: LD_ADDR_OWVAR 26
19398: PUSH
19399: LD_STRING 
19401: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19402: CALL_OW 44
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: CALL_OW 51
// end ;
19414: GO 19336
19416: POP
19417: POP
// end ;
19418: PPOPN 1
19420: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19421: LD_EXP 22
19425: IFFALSE 19433
19427: PUSH
19428: LD_EXP 42
19432: AND
19433: IFFALSE 19442
19435: GO 19437
19437: DISABLE
// StreamSibBomb ;
19438: CALL 19443 0 0
19442: END
// export function StreamSibBomb ; var i , x , y ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
19448: PPUSH
// result := false ;
19449: LD_ADDR_VAR 0 1
19453: PUSH
19454: LD_INT 0
19456: ST_TO_ADDR
// for i := 1 to 16 do
19457: LD_ADDR_VAR 0 2
19461: PUSH
19462: DOUBLE
19463: LD_INT 1
19465: DEC
19466: ST_TO_ADDR
19467: LD_INT 16
19469: PUSH
19470: FOR_TO
19471: IFFALSE 19670
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: LD_INT 10
19480: PUSH
19481: LD_INT 20
19483: PUSH
19484: LD_INT 30
19486: PUSH
19487: LD_INT 40
19489: PUSH
19490: LD_INT 50
19492: PUSH
19493: LD_INT 60
19495: PUSH
19496: LD_INT 70
19498: PUSH
19499: LD_INT 80
19501: PUSH
19502: LD_INT 90
19504: PUSH
19505: LD_INT 100
19507: PUSH
19508: LD_INT 110
19510: PUSH
19511: LD_INT 120
19513: PUSH
19514: LD_INT 130
19516: PUSH
19517: LD_INT 140
19519: PUSH
19520: LD_INT 150
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PPUSH
19543: LD_INT 15
19545: PPUSH
19546: CALL_OW 12
19550: ARRAY
19551: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19552: LD_ADDR_VAR 0 4
19556: PUSH
19557: LD_INT 10
19559: PUSH
19560: LD_INT 20
19562: PUSH
19563: LD_INT 30
19565: PUSH
19566: LD_INT 40
19568: PUSH
19569: LD_INT 50
19571: PUSH
19572: LD_INT 60
19574: PUSH
19575: LD_INT 70
19577: PUSH
19578: LD_INT 80
19580: PUSH
19581: LD_INT 90
19583: PUSH
19584: LD_INT 100
19586: PUSH
19587: LD_INT 110
19589: PUSH
19590: LD_INT 120
19592: PUSH
19593: LD_INT 130
19595: PUSH
19596: LD_INT 140
19598: PUSH
19599: LD_INT 150
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PPUSH
19622: LD_INT 15
19624: PPUSH
19625: CALL_OW 12
19629: ARRAY
19630: ST_TO_ADDR
// if ValidHex ( x , y ) then
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_VAR 0 4
19640: PPUSH
19641: CALL_OW 488
19645: IFFALSE 19668
// begin result := [ x , y ] ;
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_VAR 0 3
19656: PUSH
19657: LD_VAR 0 4
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: ST_TO_ADDR
// break ;
19666: GO 19670
// end ; end ;
19668: GO 19470
19670: POP
19671: POP
// if result then
19672: LD_VAR 0 1
19676: IFFALSE 19736
// begin ToLua ( playSibBomb() ) ;
19678: LD_STRING playSibBomb()
19680: PPUSH
19681: CALL_OW 559
// wait ( 0 0$14 ) ;
19685: LD_INT 490
19687: PPUSH
19688: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19692: LD_VAR 0 1
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: PPUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_INT 2
19708: ARRAY
19709: PPUSH
19710: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19714: LD_VAR 0 1
19718: PUSH
19719: LD_INT 1
19721: ARRAY
19722: PPUSH
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 2
19730: ARRAY
19731: PPUSH
19732: CALL_OW 429
// end ; end ;
19736: LD_VAR 0 1
19740: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19741: LD_EXP 22
19745: IFFALSE 19753
19747: PUSH
19748: LD_EXP 44
19752: AND
19753: IFFALSE 19765
19755: GO 19757
19757: DISABLE
// YouLost (  ) ;
19758: LD_STRING 
19760: PPUSH
19761: CALL_OW 104
19765: END
// every 0 0$1 trigger StreamModeActive and sFog do
19766: LD_EXP 22
19770: IFFALSE 19778
19772: PUSH
19773: LD_EXP 43
19777: AND
19778: IFFALSE 19792
19780: GO 19782
19782: DISABLE
// FogOff ( your_side ) ;
19783: LD_OWVAR 2
19787: PPUSH
19788: CALL_OW 344
19792: END
// every 0 0$1 trigger StreamModeActive and sSun do
19793: LD_EXP 22
19797: IFFALSE 19805
19799: PUSH
19800: LD_EXP 45
19804: AND
19805: IFFALSE 19833
19807: GO 19809
19809: DISABLE
// begin solar_recharge_percent := 0 ;
19810: LD_ADDR_OWVAR 79
19814: PUSH
19815: LD_INT 0
19817: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19818: LD_INT 10500
19820: PPUSH
19821: CALL_OW 67
// solar_recharge_percent := 100 ;
19825: LD_ADDR_OWVAR 79
19829: PUSH
19830: LD_INT 100
19832: ST_TO_ADDR
// end ;
19833: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19834: LD_EXP 22
19838: IFFALSE 19846
19840: PUSH
19841: LD_EXP 46
19845: AND
19846: IFFALSE 20085
19848: GO 19850
19850: DISABLE
19851: LD_INT 0
19853: PPUSH
19854: PPUSH
19855: PPUSH
// begin tmp := [ ] ;
19856: LD_ADDR_VAR 0 3
19860: PUSH
19861: EMPTY
19862: ST_TO_ADDR
// for i := 1 to 6 do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: DOUBLE
19869: LD_INT 1
19871: DEC
19872: ST_TO_ADDR
19873: LD_INT 6
19875: PUSH
19876: FOR_TO
19877: IFFALSE 19982
// begin uc_nation := nation_nature ;
19879: LD_ADDR_OWVAR 21
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// uc_side := 0 ;
19887: LD_ADDR_OWVAR 20
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19895: LD_ADDR_OWVAR 29
19899: PUSH
19900: LD_INT 12
19902: PUSH
19903: LD_INT 12
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
// hc_agressivity := 20 ;
19910: LD_ADDR_OWVAR 35
19914: PUSH
19915: LD_INT 20
19917: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19918: LD_ADDR_OWVAR 28
19922: PUSH
19923: LD_INT 17
19925: ST_TO_ADDR
// hc_gallery :=  ;
19926: LD_ADDR_OWVAR 33
19930: PUSH
19931: LD_STRING 
19933: ST_TO_ADDR
// hc_name :=  ;
19934: LD_ADDR_OWVAR 26
19938: PUSH
19939: LD_STRING 
19941: ST_TO_ADDR
// un := CreateHuman ;
19942: LD_ADDR_VAR 0 2
19946: PUSH
19947: CALL_OW 44
19951: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19952: LD_VAR 0 2
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL_OW 51
// tmp := tmp ^ un ;
19964: LD_ADDR_VAR 0 3
19968: PUSH
19969: LD_VAR 0 3
19973: PUSH
19974: LD_VAR 0 2
19978: ADD
19979: ST_TO_ADDR
// end ;
19980: GO 19876
19982: POP
19983: POP
// repeat wait ( 0 0$1 ) ;
19984: LD_INT 35
19986: PPUSH
19987: CALL_OW 67
// for un in tmp do
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: LD_VAR 0 3
20000: PUSH
20001: FOR_IN
20002: IFFALSE 20076
// begin if IsDead ( un ) then
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 301
20013: IFFALSE 20033
// begin tmp := tmp diff un ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: DIFF
20030: ST_TO_ADDR
// continue ;
20031: GO 20001
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20033: LD_VAR 0 2
20037: PPUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 22
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PPUSH
20055: CALL_OW 69
20059: PPUSH
20060: LD_VAR 0 2
20064: PPUSH
20065: CALL_OW 74
20069: PPUSH
20070: CALL_OW 115
// end ;
20074: GO 20001
20076: POP
20077: POP
// until not tmp ;
20078: LD_VAR 0 3
20082: NOT
20083: IFFALSE 19984
// end ;
20085: PPOPN 3
20087: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20088: LD_EXP 22
20092: IFFALSE 20100
20094: PUSH
20095: LD_EXP 47
20099: AND
20100: IFFALSE 20154
20102: GO 20104
20104: DISABLE
// begin ToLua ( displayTroll(); ) ;
20105: LD_STRING displayTroll();
20107: PPUSH
20108: CALL_OW 559
// wait ( 3 3$00 ) ;
20112: LD_INT 6300
20114: PPUSH
20115: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20119: LD_STRING hideTroll();
20121: PPUSH
20122: CALL_OW 559
// wait ( 1 1$00 ) ;
20126: LD_INT 2100
20128: PPUSH
20129: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20133: LD_STRING displayTroll();
20135: PPUSH
20136: CALL_OW 559
// wait ( 1 1$00 ) ;
20140: LD_INT 2100
20142: PPUSH
20143: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20147: LD_STRING hideTroll();
20149: PPUSH
20150: CALL_OW 559
// end ;
20154: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20155: LD_EXP 22
20159: IFFALSE 20167
20161: PUSH
20162: LD_EXP 48
20166: AND
20167: IFFALSE 20230
20169: GO 20171
20171: DISABLE
20172: LD_INT 0
20174: PPUSH
// begin p := 0 ;
20175: LD_ADDR_VAR 0 1
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// repeat game_speed := 1 ;
20183: LD_ADDR_OWVAR 65
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20191: LD_INT 35
20193: PPUSH
20194: CALL_OW 67
// p := p + 1 ;
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: PLUS
20211: ST_TO_ADDR
// until p >= 60 ;
20212: LD_VAR 0 1
20216: PUSH
20217: LD_INT 60
20219: GREATEREQUAL
20220: IFFALSE 20183
// game_speed := 4 ;
20222: LD_ADDR_OWVAR 65
20226: PUSH
20227: LD_INT 4
20229: ST_TO_ADDR
// end ;
20230: PPOPN 1
20232: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20233: LD_EXP 22
20237: IFFALSE 20245
20239: PUSH
20240: LD_EXP 49
20244: AND
20245: IFFALSE 20391
20247: GO 20249
20249: DISABLE
20250: LD_INT 0
20252: PPUSH
20253: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not depot then
20308: LD_VAR 0 1
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20391
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_VAR 0 1
20326: PUSH
20327: LD_INT 1
20329: PPUSH
20330: LD_VAR 0 1
20334: PPUSH
20335: CALL_OW 12
20339: ARRAY
20340: PPUSH
20341: CALL_OW 274
20345: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20346: LD_VAR 0 2
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: LD_INT 0
20356: PPUSH
20357: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_INT 2
20368: PPUSH
20369: LD_INT 0
20371: PPUSH
20372: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20376: LD_VAR 0 2
20380: PPUSH
20381: LD_INT 3
20383: PPUSH
20384: LD_INT 0
20386: PPUSH
20387: CALL_OW 277
// end ;
20391: PPOPN 2
20393: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20394: LD_EXP 22
20398: IFFALSE 20406
20400: PUSH
20401: LD_EXP 50
20405: AND
20406: IFFALSE 20503
20408: GO 20410
20410: DISABLE
20411: LD_INT 0
20413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20414: LD_ADDR_VAR 0 1
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_OWVAR 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 21
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: LD_INT 23
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 1
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20477: LD_VAR 0 1
20481: PUSH
20482: LD_INT 1
20484: PPUSH
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 12
20494: ARRAY
20495: PPUSH
20496: LD_INT 200
20498: PPUSH
20499: CALL_OW 234
// end ;
20503: PPOPN 1
20505: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20506: LD_EXP 22
20510: IFFALSE 20518
20512: PUSH
20513: LD_EXP 51
20517: AND
20518: IFFALSE 20597
20520: GO 20522
20522: DISABLE
20523: LD_INT 0
20525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20526: LD_ADDR_VAR 0 1
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_OWVAR 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 21
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PPUSH
20557: CALL_OW 69
20561: ST_TO_ADDR
// if not tmp then
20562: LD_VAR 0 1
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20571: LD_VAR 0 1
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: PPUSH
20590: LD_INT 60
20592: PPUSH
20593: CALL_OW 234
// end ;
20597: PPOPN 1
20599: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20600: LD_EXP 22
20604: IFFALSE 20612
20606: PUSH
20607: LD_EXP 52
20611: AND
20612: IFFALSE 20711
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
// begin enable ;
20621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20622: LD_ADDR_VAR 0 1
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_OWVAR 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 61
20641: PUSH
20642: EMPTY
20643: LIST
20644: PUSH
20645: LD_INT 33
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PPUSH
20660: CALL_OW 69
20664: ST_TO_ADDR
// if not tmp then
20665: LD_VAR 0 1
20669: NOT
20670: IFFALSE 20674
// exit ;
20672: GO 20711
// for i in tmp do
20674: LD_ADDR_VAR 0 2
20678: PUSH
20679: LD_VAR 0 1
20683: PUSH
20684: FOR_IN
20685: IFFALSE 20709
// if IsControledBy ( i ) then
20687: LD_VAR 0 2
20691: PPUSH
20692: CALL_OW 312
20696: IFFALSE 20707
// ComUnlink ( i ) ;
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 136
20707: GO 20684
20709: POP
20710: POP
// end ;
20711: PPOPN 2
20713: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20714: LD_EXP 22
20718: IFFALSE 20726
20720: PUSH
20721: LD_EXP 53
20725: AND
20726: IFFALSE 20866
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
// begin ToLua ( displayPowell(); ) ;
20735: LD_STRING displayPowell();
20737: PPUSH
20738: CALL_OW 559
// uc_side := 0 ;
20742: LD_ADDR_OWVAR 20
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// uc_nation := 2 ;
20750: LD_ADDR_OWVAR 21
20754: PUSH
20755: LD_INT 2
20757: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20758: LD_ADDR_OWVAR 37
20762: PUSH
20763: LD_INT 14
20765: ST_TO_ADDR
// vc_engine := engine_siberite ;
20766: LD_ADDR_OWVAR 39
20770: PUSH
20771: LD_INT 3
20773: ST_TO_ADDR
// vc_control := control_apeman ;
20774: LD_ADDR_OWVAR 38
20778: PUSH
20779: LD_INT 5
20781: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20782: LD_ADDR_OWVAR 40
20786: PUSH
20787: LD_INT 29
20789: ST_TO_ADDR
// un := CreateVehicle ;
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: CALL_OW 45
20799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20800: LD_VAR 0 2
20804: PPUSH
20805: LD_INT 1
20807: PPUSH
20808: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20812: LD_INT 35
20814: PPUSH
20815: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20819: LD_VAR 0 2
20823: PPUSH
20824: LD_INT 22
20826: PUSH
20827: LD_OWVAR 2
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PPUSH
20836: CALL_OW 69
20840: PPUSH
20841: LD_VAR 0 2
20845: PPUSH
20846: CALL_OW 74
20850: PPUSH
20851: CALL_OW 115
// until IsDead ( un ) ;
20855: LD_VAR 0 2
20859: PPUSH
20860: CALL_OW 301
20864: IFFALSE 20812
// end ;
20866: PPOPN 2
20868: END
// every 0 0$1 trigger StreamModeActive and sStu do
20869: LD_EXP 22
20873: IFFALSE 20881
20875: PUSH
20876: LD_EXP 61
20880: AND
20881: IFFALSE 20897
20883: GO 20885
20885: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20886: LD_STRING displayStucuk();
20888: PPUSH
20889: CALL_OW 559
// ResetFog ;
20893: CALL_OW 335
// end ;
20897: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20898: LD_EXP 22
20902: IFFALSE 20910
20904: PUSH
20905: LD_EXP 54
20909: AND
20910: IFFALSE 21051
20912: GO 20914
20914: DISABLE
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: LD_INT 22
20926: PUSH
20927: LD_OWVAR 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 21
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: ST_TO_ADDR
// if not tmp then
20955: LD_VAR 0 2
20959: NOT
20960: IFFALSE 20964
// exit ;
20962: GO 21051
// un := tmp [ rand ( 1 , tmp ) ] ;
20964: LD_ADDR_VAR 0 1
20968: PUSH
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_VAR 0 2
20981: PPUSH
20982: CALL_OW 12
20986: ARRAY
20987: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_OWVAR 3
21009: PUSH
21010: LD_VAR 0 1
21014: DIFF
21015: PPUSH
21016: LD_VAR 0 1
21020: PPUSH
21021: CALL_OW 74
21025: PPUSH
21026: CALL_OW 115
// wait ( 0 0$20 ) ;
21030: LD_INT 700
21032: PPUSH
21033: CALL_OW 67
// SetSide ( un , your_side ) ;
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_OWVAR 2
21046: PPUSH
21047: CALL_OW 235
// end ;
21051: PPOPN 2
21053: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21054: LD_EXP 22
21058: IFFALSE 21066
21060: PUSH
21061: LD_EXP 55
21065: AND
21066: IFFALSE 21172
21068: GO 21070
21070: DISABLE
21071: LD_INT 0
21073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_OWVAR 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 30
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: ST_TO_ADDR
// if not depot then
21128: LD_VAR 0 1
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21172
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21137: LD_VAR 0 1
21141: PUSH
21142: LD_INT 1
21144: ARRAY
21145: PPUSH
21146: CALL_OW 250
21150: PPUSH
21151: LD_VAR 0 1
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PPUSH
21160: CALL_OW 251
21164: PPUSH
21165: LD_INT 70
21167: PPUSH
21168: CALL_OW 495
// end ;
21172: PPOPN 1
21174: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21175: LD_EXP 22
21179: IFFALSE 21187
21181: PUSH
21182: LD_EXP 56
21186: AND
21187: IFFALSE 21398
21189: GO 21191
21191: DISABLE
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21199: LD_ADDR_VAR 0 5
21203: PUSH
21204: LD_INT 22
21206: PUSH
21207: LD_OWVAR 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 21
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 5
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21398
// for i in tmp do
21244: LD_ADDR_VAR 0 1
21248: PUSH
21249: LD_VAR 0 5
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21396
// begin d := rand ( 0 , 5 ) ;
21257: LD_ADDR_VAR 0 4
21261: PUSH
21262: LD_INT 0
21264: PPUSH
21265: LD_INT 5
21267: PPUSH
21268: CALL_OW 12
21272: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_VAR 0 1
21282: PPUSH
21283: CALL_OW 250
21287: PPUSH
21288: LD_VAR 0 4
21292: PPUSH
21293: LD_INT 3
21295: PPUSH
21296: LD_INT 12
21298: PPUSH
21299: CALL_OW 12
21303: PPUSH
21304: CALL_OW 272
21308: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21309: LD_ADDR_VAR 0 3
21313: PUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 251
21323: PPUSH
21324: LD_VAR 0 4
21328: PPUSH
21329: LD_INT 3
21331: PPUSH
21332: LD_INT 12
21334: PPUSH
21335: CALL_OW 12
21339: PPUSH
21340: CALL_OW 273
21344: ST_TO_ADDR
// if ValidHex ( x , y ) then
21345: LD_VAR 0 2
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 488
21359: IFFALSE 21394
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21361: LD_VAR 0 1
21365: PPUSH
21366: LD_VAR 0 2
21370: PPUSH
21371: LD_VAR 0 3
21375: PPUSH
21376: LD_INT 3
21378: PPUSH
21379: LD_INT 6
21381: PPUSH
21382: CALL_OW 12
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 483
// end ;
21394: GO 21254
21396: POP
21397: POP
// end ;
21398: PPOPN 5
21400: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21401: LD_EXP 22
21405: IFFALSE 21413
21407: PUSH
21408: LD_EXP 57
21412: AND
21413: IFFALSE 21507
21415: GO 21417
21417: DISABLE
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_OWVAR 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 32
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 21
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 2
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21507
// for i in tmp do
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_VAR 0 2
21487: PUSH
21488: FOR_IN
21489: IFFALSE 21505
// SetFuel ( i , 0 ) ;
21491: LD_VAR 0 1
21495: PPUSH
21496: LD_INT 0
21498: PPUSH
21499: CALL_OW 240
21503: GO 21488
21505: POP
21506: POP
// end ;
21507: PPOPN 2
21509: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21510: LD_EXP 22
21514: IFFALSE 21522
21516: PUSH
21517: LD_EXP 58
21521: AND
21522: IFFALSE 21588
21524: GO 21526
21526: DISABLE
21527: LD_INT 0
21529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_INT 22
21537: PUSH
21538: LD_OWVAR 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_INT 29
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: ST_TO_ADDR
// if not tmp then
21566: LD_VAR 0 1
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21588
// DestroyUnit ( tmp [ 1 ] ) ;
21575: LD_VAR 0 1
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: CALL_OW 65
// end ;
21588: PPOPN 1
21590: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21591: LD_EXP 22
21595: IFFALSE 21603
21597: PUSH
21598: LD_EXP 60
21602: AND
21603: IFFALSE 21732
21605: GO 21607
21607: DISABLE
21608: LD_INT 0
21610: PPUSH
// begin uc_side := 0 ;
21611: LD_ADDR_OWVAR 20
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// uc_nation := nation_arabian ;
21619: LD_ADDR_OWVAR 21
21623: PUSH
21624: LD_INT 2
21626: ST_TO_ADDR
// hc_gallery :=  ;
21627: LD_ADDR_OWVAR 33
21631: PUSH
21632: LD_STRING 
21634: ST_TO_ADDR
// hc_name :=  ;
21635: LD_ADDR_OWVAR 26
21639: PUSH
21640: LD_STRING 
21642: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21643: LD_INT 1
21645: PPUSH
21646: LD_INT 11
21648: PPUSH
21649: LD_INT 10
21651: PPUSH
21652: CALL_OW 380
// un := CreateHuman ;
21656: LD_ADDR_VAR 0 1
21660: PUSH
21661: CALL_OW 44
21665: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21678: LD_INT 35
21680: PPUSH
21681: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21685: LD_VAR 0 1
21689: PPUSH
21690: LD_INT 22
21692: PUSH
21693: LD_OWVAR 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 74
21716: PPUSH
21717: CALL_OW 115
// until IsDead ( un ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 301
21730: IFFALSE 21678
// end ;
21732: PPOPN 1
21734: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21735: LD_EXP 22
21739: IFFALSE 21747
21741: PUSH
21742: LD_EXP 62
21746: AND
21747: IFFALSE 21759
21749: GO 21751
21751: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21752: LD_STRING earthquake(getX(game), 0, 32)
21754: PPUSH
21755: CALL_OW 559
21759: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21760: LD_EXP 22
21764: IFFALSE 21772
21766: PUSH
21767: LD_EXP 63
21771: AND
21772: IFFALSE 21863
21774: GO 21776
21776: DISABLE
21777: LD_INT 0
21779: PPUSH
// begin enable ;
21780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21781: LD_ADDR_VAR 0 1
21785: PUSH
21786: LD_INT 22
21788: PUSH
21789: LD_OWVAR 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 33
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 1
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21837: LD_VAR 0 1
21841: PUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 12
21854: ARRAY
21855: PPUSH
21856: LD_INT 1
21858: PPUSH
21859: CALL_OW 234
// end ;
21863: PPOPN 1
21865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21866: LD_EXP 22
21870: IFFALSE 21878
21872: PUSH
21873: LD_EXP 64
21877: AND
21878: IFFALSE 22019
21880: GO 21882
21882: DISABLE
21883: LD_INT 0
21885: PPUSH
21886: PPUSH
21887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: LD_INT 22
21895: PUSH
21896: LD_OWVAR 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 25
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PPUSH
21919: CALL_OW 69
21923: ST_TO_ADDR
// if not tmp then
21924: LD_VAR 0 3
21928: NOT
21929: IFFALSE 21933
// exit ;
21931: GO 22019
// un := tmp [ rand ( 1 , tmp ) ] ;
21933: LD_ADDR_VAR 0 2
21937: PUSH
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 1
21945: PPUSH
21946: LD_VAR 0 3
21950: PPUSH
21951: CALL_OW 12
21955: ARRAY
21956: ST_TO_ADDR
// if Crawls ( un ) then
21957: LD_VAR 0 2
21961: PPUSH
21962: CALL_OW 318
21966: IFFALSE 21977
// ComWalk ( un ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21977: LD_VAR 0 2
21981: PPUSH
21982: LD_INT 9
21984: PPUSH
21985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21989: LD_INT 28
21991: PPUSH
21992: LD_OWVAR 2
21996: PPUSH
21997: LD_INT 2
21999: PPUSH
22000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22004: LD_INT 29
22006: PPUSH
22007: LD_OWVAR 2
22011: PPUSH
22012: LD_INT 2
22014: PPUSH
22015: CALL_OW 322
// end ;
22019: PPOPN 3
22021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22022: LD_EXP 22
22026: IFFALSE 22034
22028: PUSH
22029: LD_EXP 65
22033: AND
22034: IFFALSE 22145
22036: GO 22038
22038: DISABLE
22039: LD_INT 0
22041: PPUSH
22042: PPUSH
22043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_OWVAR 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 25
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PPUSH
22075: CALL_OW 69
22079: ST_TO_ADDR
// if not tmp then
22080: LD_VAR 0 3
22084: NOT
22085: IFFALSE 22089
// exit ;
22087: GO 22145
// un := tmp [ rand ( 1 , tmp ) ] ;
22089: LD_ADDR_VAR 0 2
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_INT 1
22101: PPUSH
22102: LD_VAR 0 3
22106: PPUSH
22107: CALL_OW 12
22111: ARRAY
22112: ST_TO_ADDR
// if Crawls ( un ) then
22113: LD_VAR 0 2
22117: PPUSH
22118: CALL_OW 318
22122: IFFALSE 22133
// ComWalk ( un ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_INT 8
22140: PPUSH
22141: CALL_OW 336
// end ;
22145: PPOPN 3
22147: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22148: LD_EXP 22
22152: IFFALSE 22160
22154: PUSH
22155: LD_EXP 66
22159: AND
22160: IFFALSE 22304
22162: GO 22164
22164: DISABLE
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_INT 22
22176: PUSH
22177: LD_OWVAR 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 12
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 51
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 34
22221: PUSH
22222: LD_INT 32
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL_OW 69
22244: ST_TO_ADDR
// if not tmp then
22245: LD_VAR 0 2
22249: NOT
22250: IFFALSE 22254
// exit ;
22252: GO 22304
// for i in tmp do
22254: LD_ADDR_VAR 0 1
22258: PUSH
22259: LD_VAR 0 2
22263: PUSH
22264: FOR_IN
22265: IFFALSE 22302
// if GetCargo ( i , mat_artifact ) = 0 then
22267: LD_VAR 0 1
22271: PPUSH
22272: LD_INT 4
22274: PPUSH
22275: CALL_OW 289
22279: PUSH
22280: LD_INT 0
22282: EQUAL
22283: IFFALSE 22300
// SetCargo ( i , mat_siberit , 100 ) ;
22285: LD_VAR 0 1
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: LD_INT 100
22295: PPUSH
22296: CALL_OW 290
22300: GO 22264
22302: POP
22303: POP
// end ;
22304: PPOPN 2
22306: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22307: LD_EXP 22
22311: IFFALSE 22319
22313: PUSH
22314: LD_EXP 67
22318: AND
22319: IFFALSE 22502
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: ST_TO_ADDR
// if not tmp then
22350: LD_VAR 0 2
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22502
// for i := 1 to 2 do
22359: LD_ADDR_VAR 0 1
22363: PUSH
22364: DOUBLE
22365: LD_INT 1
22367: DEC
22368: ST_TO_ADDR
22369: LD_INT 2
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22500
// begin uc_side := your_side ;
22375: LD_ADDR_OWVAR 20
22379: PUSH
22380: LD_OWVAR 2
22384: ST_TO_ADDR
// uc_nation := nation_american ;
22385: LD_ADDR_OWVAR 21
22389: PUSH
22390: LD_INT 1
22392: ST_TO_ADDR
// vc_chassis := us_morphling ;
22393: LD_ADDR_OWVAR 37
22397: PUSH
22398: LD_INT 5
22400: ST_TO_ADDR
// vc_engine := engine_siberite ;
22401: LD_ADDR_OWVAR 39
22405: PUSH
22406: LD_INT 3
22408: ST_TO_ADDR
// vc_control := control_computer ;
22409: LD_ADDR_OWVAR 38
22413: PUSH
22414: LD_INT 3
22416: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22417: LD_ADDR_OWVAR 40
22421: PUSH
22422: LD_INT 10
22424: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22425: LD_VAR 0 2
22429: PUSH
22430: LD_INT 1
22432: ARRAY
22433: PPUSH
22434: CALL_OW 310
22438: NOT
22439: IFFALSE 22486
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22441: CALL_OW 45
22445: PPUSH
22446: LD_VAR 0 2
22450: PUSH
22451: LD_INT 1
22453: ARRAY
22454: PPUSH
22455: CALL_OW 250
22459: PPUSH
22460: LD_VAR 0 2
22464: PUSH
22465: LD_INT 1
22467: ARRAY
22468: PPUSH
22469: CALL_OW 251
22473: PPUSH
22474: LD_INT 12
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 50
22484: GO 22498
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22486: CALL_OW 45
22490: PPUSH
22491: LD_INT 1
22493: PPUSH
22494: CALL_OW 51
// end ;
22498: GO 22372
22500: POP
22501: POP
// end ;
22502: PPOPN 2
22504: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22505: LD_EXP 22
22509: IFFALSE 22517
22511: PUSH
22512: LD_EXP 68
22516: AND
22517: IFFALSE 22739
22519: GO 22521
22521: DISABLE
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22530: LD_ADDR_VAR 0 6
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_OWVAR 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 21
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 23
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: ST_TO_ADDR
// if not tmp then
22584: LD_VAR 0 6
22588: NOT
22589: IFFALSE 22593
// exit ;
22591: GO 22739
// s1 := rand ( 1 , 4 ) ;
22593: LD_ADDR_VAR 0 2
22597: PUSH
22598: LD_INT 1
22600: PPUSH
22601: LD_INT 4
22603: PPUSH
22604: CALL_OW 12
22608: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22609: LD_ADDR_VAR 0 4
22613: PUSH
22614: LD_VAR 0 6
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 2
22627: PPUSH
22628: CALL_OW 259
22632: ST_TO_ADDR
// if s1 = 1 then
22633: LD_VAR 0 2
22637: PUSH
22638: LD_INT 1
22640: EQUAL
22641: IFFALSE 22661
// s2 := rand ( 2 , 4 ) else
22643: LD_ADDR_VAR 0 3
22647: PUSH
22648: LD_INT 2
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL_OW 12
22658: ST_TO_ADDR
22659: GO 22669
// s2 := 1 ;
22661: LD_ADDR_VAR 0 3
22665: PUSH
22666: LD_INT 1
22668: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22669: LD_ADDR_VAR 0 5
22673: PUSH
22674: LD_VAR 0 6
22678: PUSH
22679: LD_INT 1
22681: ARRAY
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: CALL_OW 259
22692: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22693: LD_VAR 0 6
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_VAR 0 2
22706: PPUSH
22707: LD_VAR 0 5
22711: PPUSH
22712: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22716: LD_VAR 0 6
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_VAR 0 3
22729: PPUSH
22730: LD_VAR 0 4
22734: PPUSH
22735: CALL_OW 237
// end ;
22739: PPOPN 6
22741: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22742: LD_EXP 22
22746: IFFALSE 22754
22748: PUSH
22749: LD_EXP 69
22753: AND
22754: IFFALSE 22833
22756: GO 22758
22758: DISABLE
22759: LD_INT 0
22761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22762: LD_ADDR_VAR 0 1
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 30
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PPUSH
22793: CALL_OW 69
22797: ST_TO_ADDR
// if not tmp then
22798: LD_VAR 0 1
22802: NOT
22803: IFFALSE 22807
// exit ;
22805: GO 22833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22807: LD_VAR 0 1
22811: PUSH
22812: LD_INT 1
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 12
22824: ARRAY
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 234
// end ;
22833: PPOPN 1
22835: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22836: LD_EXP 22
22840: IFFALSE 22848
22842: PUSH
22843: LD_EXP 70
22847: AND
22848: IFFALSE 22960
22850: GO 22852
22852: DISABLE
22853: LD_INT 0
22855: PPUSH
22856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_INT 22
22864: PUSH
22865: LD_OWVAR 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: LD_INT 27
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 26
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 28
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: ST_TO_ADDR
// if not tmp then
22922: LD_VAR 0 2
22926: NOT
22927: IFFALSE 22931
// exit ;
22929: GO 22960
// for i in tmp do
22931: LD_ADDR_VAR 0 1
22935: PUSH
22936: LD_VAR 0 2
22940: PUSH
22941: FOR_IN
22942: IFFALSE 22958
// SetLives ( i , 1 ) ;
22944: LD_VAR 0 1
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 234
22956: GO 22941
22958: POP
22959: POP
// end ;
22960: PPOPN 2
22962: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22963: LD_EXP 22
22967: IFFALSE 22975
22969: PUSH
22970: LD_EXP 71
22974: AND
22975: IFFALSE 23262
22977: GO 22979
22979: DISABLE
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
22984: PPUSH
// begin i := rand ( 1 , 7 ) ;
22985: LD_ADDR_VAR 0 1
22989: PUSH
22990: LD_INT 1
22992: PPUSH
22993: LD_INT 7
22995: PPUSH
22996: CALL_OW 12
23000: ST_TO_ADDR
// case i of 1 :
23001: LD_VAR 0 1
23005: PUSH
23006: LD_INT 1
23008: DOUBLE
23009: EQUAL
23010: IFTRUE 23014
23012: GO 23024
23014: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23015: LD_STRING earthquake(getX(game), 0, 32)
23017: PPUSH
23018: CALL_OW 559
23022: GO 23262
23024: LD_INT 2
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23046
23032: POP
// begin ToLua ( displayStucuk(); ) ;
23033: LD_STRING displayStucuk();
23035: PPUSH
23036: CALL_OW 559
// ResetFog ;
23040: CALL_OW 335
// end ; 3 :
23044: GO 23262
23046: LD_INT 3
23048: DOUBLE
23049: EQUAL
23050: IFTRUE 23054
23052: GO 23158
23054: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23055: LD_ADDR_VAR 0 2
23059: PUSH
23060: LD_INT 22
23062: PUSH
23063: LD_OWVAR 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 25
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PPUSH
23086: CALL_OW 69
23090: ST_TO_ADDR
// if not tmp then
23091: LD_VAR 0 2
23095: NOT
23096: IFFALSE 23100
// exit ;
23098: GO 23262
// un := tmp [ rand ( 1 , tmp ) ] ;
23100: LD_ADDR_VAR 0 3
23104: PUSH
23105: LD_VAR 0 2
23109: PUSH
23110: LD_INT 1
23112: PPUSH
23113: LD_VAR 0 2
23117: PPUSH
23118: CALL_OW 12
23122: ARRAY
23123: ST_TO_ADDR
// if Crawls ( un ) then
23124: LD_VAR 0 3
23128: PPUSH
23129: CALL_OW 318
23133: IFFALSE 23144
// ComWalk ( un ) ;
23135: LD_VAR 0 3
23139: PPUSH
23140: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23144: LD_VAR 0 3
23148: PPUSH
23149: LD_INT 8
23151: PPUSH
23152: CALL_OW 336
// end ; 4 :
23156: GO 23262
23158: LD_INT 4
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23166
23164: GO 23240
23166: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 30
23186: PUSH
23187: LD_INT 29
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23262
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23212: LD_VAR 0 2
23216: PUSH
23217: LD_INT 1
23219: ARRAY
23220: PPUSH
23221: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23225: LD_VAR 0 2
23229: PUSH
23230: LD_INT 1
23232: ARRAY
23233: PPUSH
23234: CALL_OW 65
// end ; 5 .. 7 :
23238: GO 23262
23240: LD_INT 5
23242: DOUBLE
23243: GREATEREQUAL
23244: IFFALSE 23252
23246: LD_INT 7
23248: DOUBLE
23249: LESSEQUAL
23250: IFTRUE 23254
23252: GO 23261
23254: POP
// StreamSibBomb ; end ;
23255: CALL 19443 0 0
23259: GO 23262
23261: POP
// end ;
23262: PPOPN 3
23264: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23265: LD_EXP 22
23269: IFFALSE 23277
23271: PUSH
23272: LD_EXP 72
23276: AND
23277: IFFALSE 23433
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
23285: PPUSH
23286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 81
23294: PUSH
23295: LD_OWVAR 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 21
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 69
23340: ST_TO_ADDR
// if not tmp then
23341: LD_VAR 0 2
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23433
// p := 0 ;
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: LD_INT 0
23357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23358: LD_INT 35
23360: PPUSH
23361: CALL_OW 67
// p := p + 1 ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 1
23377: PLUS
23378: ST_TO_ADDR
// for i in tmp do
23379: LD_ADDR_VAR 0 1
23383: PUSH
23384: LD_VAR 0 2
23388: PUSH
23389: FOR_IN
23390: IFFALSE 23421
// if GetLives ( i ) < 1000 then
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 256
23401: PUSH
23402: LD_INT 1000
23404: LESS
23405: IFFALSE 23419
// SetLives ( i , 1000 ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_INT 1000
23414: PPUSH
23415: CALL_OW 234
23419: GO 23389
23421: POP
23422: POP
// until p > 20 ;
23423: LD_VAR 0 3
23427: PUSH
23428: LD_INT 20
23430: GREATER
23431: IFFALSE 23358
// end ;
23433: PPOPN 3
23435: END
// every 0 0$1 trigger StreamModeActive and sTime do
23436: LD_EXP 22
23440: IFFALSE 23448
23442: PUSH
23443: LD_EXP 73
23447: AND
23448: IFFALSE 23483
23450: GO 23452
23452: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23453: LD_INT 28
23455: PPUSH
23456: LD_OWVAR 2
23460: PPUSH
23461: LD_INT 2
23463: PPUSH
23464: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23468: LD_INT 30
23470: PPUSH
23471: LD_OWVAR 2
23475: PPUSH
23476: LD_INT 2
23478: PPUSH
23479: CALL_OW 322
// end ;
23483: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23484: LD_EXP 22
23488: IFFALSE 23496
23490: PUSH
23491: LD_EXP 74
23495: AND
23496: IFFALSE 23617
23498: GO 23500
23500: DISABLE
23501: LD_INT 0
23503: PPUSH
23504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_INT 22
23512: PUSH
23513: LD_OWVAR 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 21
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: LD_INT 23
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 69
23558: ST_TO_ADDR
// if not tmp then
23559: LD_VAR 0 2
23563: NOT
23564: IFFALSE 23568
// exit ;
23566: GO 23617
// for i in tmp do
23568: LD_ADDR_VAR 0 1
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: FOR_IN
23579: IFFALSE 23615
// begin if Crawls ( i ) then
23581: LD_VAR 0 1
23585: PPUSH
23586: CALL_OW 318
23590: IFFALSE 23601
// ComWalk ( i ) ;
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 138
// SetClass ( i , 2 ) ;
23601: LD_VAR 0 1
23605: PPUSH
23606: LD_INT 2
23608: PPUSH
23609: CALL_OW 336
// end ;
23613: GO 23578
23615: POP
23616: POP
// end ;
23617: PPOPN 2
23619: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23620: LD_EXP 22
23624: IFFALSE 23632
23626: PUSH
23627: LD_EXP 75
23631: AND
23632: IFFALSE 23922
23634: GO 23636
23636: DISABLE
23637: LD_INT 0
23639: PPUSH
23640: PPUSH
23641: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23642: LD_OWVAR 2
23646: PPUSH
23647: LD_INT 9
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: LD_INT 1
23655: PPUSH
23656: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23660: LD_INT 9
23662: PPUSH
23663: LD_OWVAR 2
23667: PPUSH
23668: CALL_OW 343
// uc_side := 9 ;
23672: LD_ADDR_OWVAR 20
23676: PUSH
23677: LD_INT 9
23679: ST_TO_ADDR
// uc_nation := 2 ;
23680: LD_ADDR_OWVAR 21
23684: PUSH
23685: LD_INT 2
23687: ST_TO_ADDR
// hc_name := Dark Warrior ;
23688: LD_ADDR_OWVAR 26
23692: PUSH
23693: LD_STRING Dark Warrior
23695: ST_TO_ADDR
// hc_gallery :=  ;
23696: LD_ADDR_OWVAR 33
23700: PUSH
23701: LD_STRING 
23703: ST_TO_ADDR
// hc_noskilllimit := true ;
23704: LD_ADDR_OWVAR 76
23708: PUSH
23709: LD_INT 1
23711: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23712: LD_ADDR_OWVAR 31
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 30
23722: PUSH
23723: LD_INT 30
23725: PUSH
23726: LD_INT 30
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: ST_TO_ADDR
// un := CreateHuman ;
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: CALL_OW 44
23744: ST_TO_ADDR
// hc_noskilllimit := false ;
23745: LD_ADDR_OWVAR 76
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23753: LD_VAR 0 3
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 51
// ToLua ( playRanger() ) ;
23765: LD_STRING playRanger()
23767: PPUSH
23768: CALL_OW 559
// p := 0 ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 0
23779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23780: LD_INT 35
23782: PPUSH
23783: CALL_OW 67
// p := p + 1 ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: PLUS
23800: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL_OW 256
23810: PUSH
23811: LD_INT 1000
23813: LESS
23814: IFFALSE 23828
// SetLives ( un , 1000 ) ;
23816: LD_VAR 0 3
23820: PPUSH
23821: LD_INT 1000
23823: PPUSH
23824: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23828: LD_VAR 0 3
23832: PPUSH
23833: LD_INT 81
23835: PUSH
23836: LD_OWVAR 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 91
23847: PUSH
23848: LD_VAR 0 3
23852: PUSH
23853: LD_INT 30
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: PPUSH
23870: LD_VAR 0 3
23874: PPUSH
23875: CALL_OW 74
23879: PPUSH
23880: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23884: LD_VAR 0 2
23888: PUSH
23889: LD_INT 80
23891: GREATER
23892: IFTRUE 23905
23894: PUSH
23895: LD_VAR 0 3
23899: PPUSH
23900: CALL_OW 301
23904: OR
23905: IFFALSE 23780
// if un then
23907: LD_VAR 0 3
23911: IFFALSE 23922
// RemoveUnit ( un ) ;
23913: LD_VAR 0 3
23917: PPUSH
23918: CALL_OW 64
// end ;
23922: PPOPN 3
23924: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23925: LD_EXP 76
23929: IFFALSE 24045
23931: GO 23933
23933: DISABLE
23934: LD_INT 0
23936: PPUSH
23937: PPUSH
23938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: LD_INT 81
23946: PUSH
23947: LD_OWVAR 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 21
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 69
23974: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23975: LD_STRING playComputer()
23977: PPUSH
23978: CALL_OW 559
// if not tmp then
23982: LD_VAR 0 2
23986: NOT
23987: IFFALSE 23991
// exit ;
23989: GO 24045
// for i in tmp do
23991: LD_ADDR_VAR 0 1
23995: PUSH
23996: LD_VAR 0 2
24000: PUSH
24001: FOR_IN
24002: IFFALSE 24043
// for j := 1 to 4 do
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: DOUBLE
24010: LD_INT 1
24012: DEC
24013: ST_TO_ADDR
24014: LD_INT 4
24016: PUSH
24017: FOR_TO
24018: IFFALSE 24039
// SetSkill ( i , j , 10 ) ;
24020: LD_VAR 0 1
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: LD_INT 10
24032: PPUSH
24033: CALL_OW 237
24037: GO 24017
24039: POP
24040: POP
24041: GO 24001
24043: POP
24044: POP
// end ;
24045: PPOPN 3
24047: END
// every 0 0$1 trigger s30 do var i , tmp ;
24048: LD_EXP 77
24052: IFFALSE 24121
24054: GO 24056
24056: DISABLE
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24061: LD_ADDR_VAR 0 2
24065: PUSH
24066: LD_INT 22
24068: PUSH
24069: LD_OWVAR 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 69
24082: ST_TO_ADDR
// if not tmp then
24083: LD_VAR 0 2
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24121
// for i in tmp do
24092: LD_ADDR_VAR 0 1
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24119
// SetLives ( i , 300 ) ;
24105: LD_VAR 0 1
24109: PPUSH
24110: LD_INT 300
24112: PPUSH
24113: CALL_OW 234
24117: GO 24102
24119: POP
24120: POP
// end ;
24121: PPOPN 2
24123: END
// every 0 0$1 trigger s60 do var i , tmp ;
24124: LD_EXP 78
24128: IFFALSE 24197
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: ST_TO_ADDR
// if not tmp then
24159: LD_VAR 0 2
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 24197
// for i in tmp do
24168: LD_ADDR_VAR 0 1
24172: PUSH
24173: LD_VAR 0 2
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24195
// SetLives ( i , 600 ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 600
24188: PPUSH
24189: CALL_OW 234
24193: GO 24178
24195: POP
24196: POP
// end ;
24197: PPOPN 2
24199: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24200: LD_INT 0
24202: PPUSH
// case cmd of 301 :
24203: LD_VAR 0 1
24207: PUSH
24208: LD_INT 301
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24248
24216: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24217: LD_VAR 0 6
24221: PPUSH
24222: LD_VAR 0 7
24226: PPUSH
24227: LD_VAR 0 8
24231: PPUSH
24232: LD_VAR 0 4
24236: PPUSH
24237: LD_VAR 0 5
24241: PPUSH
24242: CALL 25461 0 5
24246: GO 24369
24248: LD_INT 302
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24293
24256: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24257: LD_VAR 0 6
24261: PPUSH
24262: LD_VAR 0 7
24266: PPUSH
24267: LD_VAR 0 8
24271: PPUSH
24272: LD_VAR 0 9
24276: PPUSH
24277: LD_VAR 0 4
24281: PPUSH
24282: LD_VAR 0 5
24286: PPUSH
24287: CALL 25552 0 6
24291: GO 24369
24293: LD_INT 303
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24338
24301: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24302: LD_VAR 0 6
24306: PPUSH
24307: LD_VAR 0 7
24311: PPUSH
24312: LD_VAR 0 8
24316: PPUSH
24317: LD_VAR 0 9
24321: PPUSH
24322: LD_VAR 0 4
24326: PPUSH
24327: LD_VAR 0 5
24331: PPUSH
24332: CALL 24374 0 6
24336: GO 24369
24338: LD_INT 304
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24368
24346: POP
// hHackTeleport ( unit , x , y ) ; end ;
24347: LD_VAR 0 2
24351: PPUSH
24352: LD_VAR 0 4
24356: PPUSH
24357: LD_VAR 0 5
24361: PPUSH
24362: CALL 26145 0 3
24366: GO 24369
24368: POP
// end ;
24369: LD_VAR 0 12
24373: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24374: LD_INT 0
24376: PPUSH
24377: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24378: LD_VAR 0 1
24382: PUSH
24383: LD_INT 1
24385: LESS
24386: IFTRUE 24398
24388: PUSH
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 3
24396: GREATER
24397: OR
24398: IFTRUE 24416
24400: PUSH
24401: LD_VAR 0 5
24405: PPUSH
24406: LD_VAR 0 6
24410: PPUSH
24411: CALL_OW 428
24415: OR
24416: IFFALSE 24420
// exit ;
24418: GO 25148
// uc_side := your_side ;
24420: LD_ADDR_OWVAR 20
24424: PUSH
24425: LD_OWVAR 2
24429: ST_TO_ADDR
// uc_nation := nation ;
24430: LD_ADDR_OWVAR 21
24434: PUSH
24435: LD_VAR 0 1
24439: ST_TO_ADDR
// bc_level = 1 ;
24440: LD_ADDR_OWVAR 43
24444: PUSH
24445: LD_INT 1
24447: ST_TO_ADDR
// case btype of 1 :
24448: LD_VAR 0 2
24452: PUSH
24453: LD_INT 1
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// bc_type := b_depot ; 2 :
24462: LD_ADDR_OWVAR 42
24466: PUSH
24467: LD_INT 0
24469: ST_TO_ADDR
24470: GO 25092
24472: LD_INT 2
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24491
24480: POP
// bc_type := b_warehouse ; 3 :
24481: LD_ADDR_OWVAR 42
24485: PUSH
24486: LD_INT 1
24488: ST_TO_ADDR
24489: GO 25092
24491: LD_INT 3
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24510
24499: POP
// bc_type := b_lab ; 4 .. 9 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 6
24507: ST_TO_ADDR
24508: GO 25092
24510: LD_INT 4
24512: DOUBLE
24513: GREATEREQUAL
24514: IFFALSE 24522
24516: LD_INT 9
24518: DOUBLE
24519: LESSEQUAL
24520: IFTRUE 24524
24522: GO 24584
24524: POP
// begin bc_type := b_lab_half ;
24525: LD_ADDR_OWVAR 42
24529: PUSH
24530: LD_INT 7
24532: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24533: LD_ADDR_OWVAR 44
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 15
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 13
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: PUSH
24564: LD_VAR 0 2
24568: PUSH
24569: LD_INT 3
24571: MINUS
24572: ARRAY
24573: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24574: LD_ADDR_OWVAR 45
24578: PUSH
24579: LD_INT 9
24581: ST_TO_ADDR
// end ; 10 .. 13 :
24582: GO 25092
24584: LD_INT 10
24586: DOUBLE
24587: GREATEREQUAL
24588: IFFALSE 24596
24590: LD_INT 13
24592: DOUBLE
24593: LESSEQUAL
24594: IFTRUE 24598
24596: GO 24675
24598: POP
// begin bc_type := b_lab_full ;
24599: LD_ADDR_OWVAR 42
24603: PUSH
24604: LD_INT 8
24606: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24607: LD_ADDR_OWVAR 44
24611: PUSH
24612: LD_INT 10
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 14
24620: PUSH
24621: LD_INT 13
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PUSH
24630: LD_VAR 0 2
24634: PUSH
24635: LD_INT 9
24637: MINUS
24638: ARRAY
24639: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24640: LD_ADDR_OWVAR 45
24644: PUSH
24645: LD_INT 11
24647: PUSH
24648: LD_INT 15
24650: PUSH
24651: LD_INT 12
24653: PUSH
24654: LD_INT 15
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: LD_VAR 0 2
24667: PUSH
24668: LD_INT 9
24670: MINUS
24671: ARRAY
24672: ST_TO_ADDR
// end ; 14 :
24673: GO 25092
24675: LD_INT 14
24677: DOUBLE
24678: EQUAL
24679: IFTRUE 24683
24681: GO 24694
24683: POP
// bc_type := b_workshop ; 15 :
24684: LD_ADDR_OWVAR 42
24688: PUSH
24689: LD_INT 2
24691: ST_TO_ADDR
24692: GO 25092
24694: LD_INT 15
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24713
24702: POP
// bc_type := b_factory ; 16 :
24703: LD_ADDR_OWVAR 42
24707: PUSH
24708: LD_INT 3
24710: ST_TO_ADDR
24711: GO 25092
24713: LD_INT 16
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24732
24721: POP
// bc_type := b_ext_gun ; 17 :
24722: LD_ADDR_OWVAR 42
24726: PUSH
24727: LD_INT 17
24729: ST_TO_ADDR
24730: GO 25092
24732: LD_INT 17
24734: DOUBLE
24735: EQUAL
24736: IFTRUE 24740
24738: GO 24768
24740: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24741: LD_ADDR_OWVAR 42
24745: PUSH
24746: LD_INT 19
24748: PUSH
24749: LD_INT 23
24751: PUSH
24752: LD_INT 19
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: LD_VAR 0 1
24764: ARRAY
24765: ST_TO_ADDR
24766: GO 25092
24768: LD_INT 18
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24787
24776: POP
// bc_type := b_ext_radar ; 19 :
24777: LD_ADDR_OWVAR 42
24781: PUSH
24782: LD_INT 20
24784: ST_TO_ADDR
24785: GO 25092
24787: LD_INT 19
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24806
24795: POP
// bc_type := b_ext_radio ; 20 :
24796: LD_ADDR_OWVAR 42
24800: PUSH
24801: LD_INT 22
24803: ST_TO_ADDR
24804: GO 25092
24806: LD_INT 20
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24825
24814: POP
// bc_type := b_ext_siberium ; 21 :
24815: LD_ADDR_OWVAR 42
24819: PUSH
24820: LD_INT 21
24822: ST_TO_ADDR
24823: GO 25092
24825: LD_INT 21
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 24844
24833: POP
// bc_type := b_ext_computer ; 22 :
24834: LD_ADDR_OWVAR 42
24838: PUSH
24839: LD_INT 24
24841: ST_TO_ADDR
24842: GO 25092
24844: LD_INT 22
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24863
24852: POP
// bc_type := b_ext_track ; 23 :
24853: LD_ADDR_OWVAR 42
24857: PUSH
24858: LD_INT 16
24860: ST_TO_ADDR
24861: GO 25092
24863: LD_INT 23
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24882
24871: POP
// bc_type := b_ext_laser ; 24 :
24872: LD_ADDR_OWVAR 42
24876: PUSH
24877: LD_INT 25
24879: ST_TO_ADDR
24880: GO 25092
24882: LD_INT 24
24884: DOUBLE
24885: EQUAL
24886: IFTRUE 24890
24888: GO 24901
24890: POP
// bc_type := b_control_tower ; 25 :
24891: LD_ADDR_OWVAR 42
24895: PUSH
24896: LD_INT 36
24898: ST_TO_ADDR
24899: GO 25092
24901: LD_INT 25
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 24920
24909: POP
// bc_type := b_breastwork ; 26 :
24910: LD_ADDR_OWVAR 42
24914: PUSH
24915: LD_INT 31
24917: ST_TO_ADDR
24918: GO 25092
24920: LD_INT 26
24922: DOUBLE
24923: EQUAL
24924: IFTRUE 24928
24926: GO 24939
24928: POP
// bc_type := b_bunker ; 27 :
24929: LD_ADDR_OWVAR 42
24933: PUSH
24934: LD_INT 32
24936: ST_TO_ADDR
24937: GO 25092
24939: LD_INT 27
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24958
24947: POP
// bc_type := b_turret ; 28 :
24948: LD_ADDR_OWVAR 42
24952: PUSH
24953: LD_INT 33
24955: ST_TO_ADDR
24956: GO 25092
24958: LD_INT 28
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24977
24966: POP
// bc_type := b_armoury ; 29 :
24967: LD_ADDR_OWVAR 42
24971: PUSH
24972: LD_INT 4
24974: ST_TO_ADDR
24975: GO 25092
24977: LD_INT 29
24979: DOUBLE
24980: EQUAL
24981: IFTRUE 24985
24983: GO 24996
24985: POP
// bc_type := b_barracks ; 30 :
24986: LD_ADDR_OWVAR 42
24990: PUSH
24991: LD_INT 5
24993: ST_TO_ADDR
24994: GO 25092
24996: LD_INT 30
24998: DOUBLE
24999: EQUAL
25000: IFTRUE 25004
25002: GO 25015
25004: POP
// bc_type := b_solar_power ; 31 :
25005: LD_ADDR_OWVAR 42
25009: PUSH
25010: LD_INT 27
25012: ST_TO_ADDR
25013: GO 25092
25015: LD_INT 31
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25034
25023: POP
// bc_type := b_oil_power ; 32 :
25024: LD_ADDR_OWVAR 42
25028: PUSH
25029: LD_INT 26
25031: ST_TO_ADDR
25032: GO 25092
25034: LD_INT 32
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25053
25042: POP
// bc_type := b_siberite_power ; 33 :
25043: LD_ADDR_OWVAR 42
25047: PUSH
25048: LD_INT 28
25050: ST_TO_ADDR
25051: GO 25092
25053: LD_INT 33
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25072
25061: POP
// bc_type := b_oil_mine ; 34 :
25062: LD_ADDR_OWVAR 42
25066: PUSH
25067: LD_INT 29
25069: ST_TO_ADDR
25070: GO 25092
25072: LD_INT 34
25074: DOUBLE
25075: EQUAL
25076: IFTRUE 25080
25078: GO 25091
25080: POP
// bc_type := b_siberite_mine ; end ;
25081: LD_ADDR_OWVAR 42
25085: PUSH
25086: LD_INT 30
25088: ST_TO_ADDR
25089: GO 25092
25091: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25092: LD_ADDR_VAR 0 8
25096: PUSH
25097: LD_VAR 0 5
25101: PPUSH
25102: LD_VAR 0 6
25106: PPUSH
25107: LD_VAR 0 3
25111: PPUSH
25112: CALL_OW 47
25116: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25117: LD_OWVAR 42
25121: PUSH
25122: LD_INT 32
25124: PUSH
25125: LD_INT 33
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: IN
25132: IFFALSE 25148
// PlaceWeaponTurret ( b , weapon ) ;
25134: LD_VAR 0 8
25138: PPUSH
25139: LD_VAR 0 4
25143: PPUSH
25144: CALL_OW 431
// end ;
25148: LD_VAR 0 7
25152: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_INT 22
25166: PUSH
25167: LD_OWVAR 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 30
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 30
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: ST_TO_ADDR
// if not tmp then
25213: LD_VAR 0 4
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25281
// for i in tmp do
25222: LD_ADDR_VAR 0 2
25226: PUSH
25227: LD_VAR 0 4
25231: PUSH
25232: FOR_IN
25233: IFFALSE 25279
// for j = 1 to 3 do
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: DOUBLE
25241: LD_INT 1
25243: DEC
25244: ST_TO_ADDR
25245: LD_INT 3
25247: PUSH
25248: FOR_TO
25249: IFFALSE 25275
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25251: LD_VAR 0 2
25255: PPUSH
25256: CALL_OW 274
25260: PPUSH
25261: LD_VAR 0 3
25265: PPUSH
25266: LD_INT 99999
25268: PPUSH
25269: CALL_OW 277
25273: GO 25248
25275: POP
25276: POP
25277: GO 25232
25279: POP
25280: POP
// end ;
25281: LD_VAR 0 1
25285: RET
// export function hHackSetLevel10 ; var i , j ; begin
25286: LD_INT 0
25288: PPUSH
25289: PPUSH
25290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25291: LD_ADDR_VAR 0 2
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PPUSH
25306: CALL_OW 69
25310: PUSH
25311: FOR_IN
25312: IFFALSE 25364
// if IsSelected ( i ) then
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 306
25323: IFFALSE 25362
// begin for j := 1 to 4 do
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: DOUBLE
25331: LD_INT 1
25333: DEC
25334: ST_TO_ADDR
25335: LD_INT 4
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25360
// SetSkill ( i , j , 10 ) ;
25341: LD_VAR 0 2
25345: PPUSH
25346: LD_VAR 0 3
25350: PPUSH
25351: LD_INT 10
25353: PPUSH
25354: CALL_OW 237
25358: GO 25338
25360: POP
25361: POP
// end ;
25362: GO 25311
25364: POP
25365: POP
// end ;
25366: LD_VAR 0 1
25370: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25371: LD_INT 0
25373: PPUSH
25374: PPUSH
25375: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: LD_INT 22
25383: PUSH
25384: LD_OWVAR 2
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 21
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 69
25411: PUSH
25412: FOR_IN
25413: IFFALSE 25454
// begin for j := 1 to 4 do
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: DOUBLE
25421: LD_INT 1
25423: DEC
25424: ST_TO_ADDR
25425: LD_INT 4
25427: PUSH
25428: FOR_TO
25429: IFFALSE 25450
// SetSkill ( i , j , 10 ) ;
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_INT 10
25443: PPUSH
25444: CALL_OW 237
25448: GO 25428
25450: POP
25451: POP
// end ;
25452: GO 25412
25454: POP
25455: POP
// end ;
25456: LD_VAR 0 1
25460: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25461: LD_INT 0
25463: PPUSH
// uc_side := your_side ;
25464: LD_ADDR_OWVAR 20
25468: PUSH
25469: LD_OWVAR 2
25473: ST_TO_ADDR
// uc_nation := nation ;
25474: LD_ADDR_OWVAR 21
25478: PUSH
25479: LD_VAR 0 1
25483: ST_TO_ADDR
// InitHc ;
25484: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25488: LD_INT 0
25490: PPUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25505: LD_VAR 0 4
25509: PPUSH
25510: LD_VAR 0 5
25514: PPUSH
25515: CALL_OW 428
25519: PUSH
25520: LD_INT 0
25522: EQUAL
25523: IFFALSE 25547
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25525: CALL_OW 44
25529: PPUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: LD_VAR 0 5
25539: PPUSH
25540: LD_INT 1
25542: PPUSH
25543: CALL_OW 48
// end ;
25547: LD_VAR 0 6
25551: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25552: LD_INT 0
25554: PPUSH
25555: PPUSH
// uc_side := your_side ;
25556: LD_ADDR_OWVAR 20
25560: PUSH
25561: LD_OWVAR 2
25565: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: IN
25593: IFFALSE 25605
// uc_nation := nation_american else
25595: LD_ADDR_OWVAR 21
25599: PUSH
25600: LD_INT 1
25602: ST_TO_ADDR
25603: GO 25648
// if chassis in [ 11 , 12 , 13 , 14 ] then
25605: LD_VAR 0 1
25609: PUSH
25610: LD_INT 11
25612: PUSH
25613: LD_INT 12
25615: PUSH
25616: LD_INT 13
25618: PUSH
25619: LD_INT 14
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: IN
25628: IFFALSE 25640
// uc_nation := nation_arabian else
25630: LD_ADDR_OWVAR 21
25634: PUSH
25635: LD_INT 2
25637: ST_TO_ADDR
25638: GO 25648
// uc_nation := nation_russian ;
25640: LD_ADDR_OWVAR 21
25644: PUSH
25645: LD_INT 3
25647: ST_TO_ADDR
// vc_chassis := chassis ;
25648: LD_ADDR_OWVAR 37
25652: PUSH
25653: LD_VAR 0 1
25657: ST_TO_ADDR
// vc_engine := engine ;
25658: LD_ADDR_OWVAR 39
25662: PUSH
25663: LD_VAR 0 2
25667: ST_TO_ADDR
// vc_control := control ;
25668: LD_ADDR_OWVAR 38
25672: PUSH
25673: LD_VAR 0 3
25677: ST_TO_ADDR
// vc_weapon := weapon ;
25678: LD_ADDR_OWVAR 40
25682: PUSH
25683: LD_VAR 0 4
25687: ST_TO_ADDR
// un := CreateVehicle ;
25688: LD_ADDR_VAR 0 8
25692: PUSH
25693: CALL_OW 45
25697: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25698: LD_VAR 0 8
25702: PPUSH
25703: LD_INT 0
25705: PPUSH
25706: LD_INT 5
25708: PPUSH
25709: CALL_OW 12
25713: PPUSH
25714: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25718: LD_VAR 0 8
25722: PPUSH
25723: LD_VAR 0 5
25727: PPUSH
25728: LD_VAR 0 6
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: CALL_OW 48
// end ;
25740: LD_VAR 0 7
25744: RET
// export hInvincible ; every 1 do
25745: GO 25747
25747: DISABLE
// hInvincible := [ ] ;
25748: LD_ADDR_EXP 79
25752: PUSH
25753: EMPTY
25754: ST_TO_ADDR
25755: END
// every 10 do var i ;
25756: GO 25758
25758: DISABLE
25759: LD_INT 0
25761: PPUSH
// begin enable ;
25762: ENABLE
// if not hInvincible then
25763: LD_EXP 79
25767: NOT
25768: IFFALSE 25772
// exit ;
25770: GO 25816
// for i in hInvincible do
25772: LD_ADDR_VAR 0 1
25776: PUSH
25777: LD_EXP 79
25781: PUSH
25782: FOR_IN
25783: IFFALSE 25814
// if GetLives ( i ) < 1000 then
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 256
25794: PUSH
25795: LD_INT 1000
25797: LESS
25798: IFFALSE 25812
// SetLives ( i , 1000 ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_INT 1000
25807: PPUSH
25808: CALL_OW 234
25812: GO 25782
25814: POP
25815: POP
// end ;
25816: PPOPN 1
25818: END
// export function hHackInvincible ; var i ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 21
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 21
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: PPUSH
25856: CALL_OW 69
25860: PUSH
25861: FOR_IN
25862: IFFALSE 25923
// if IsSelected ( i ) then
25864: LD_VAR 0 2
25868: PPUSH
25869: CALL_OW 306
25873: IFFALSE 25921
// begin if i in hInvincible then
25875: LD_VAR 0 2
25879: PUSH
25880: LD_EXP 79
25884: IN
25885: IFFALSE 25905
// hInvincible := hInvincible diff i else
25887: LD_ADDR_EXP 79
25891: PUSH
25892: LD_EXP 79
25896: PUSH
25897: LD_VAR 0 2
25901: DIFF
25902: ST_TO_ADDR
25903: GO 25921
// hInvincible := hInvincible union i ;
25905: LD_ADDR_EXP 79
25909: PUSH
25910: LD_EXP 79
25914: PUSH
25915: LD_VAR 0 2
25919: UNION
25920: ST_TO_ADDR
// end ;
25921: GO 25861
25923: POP
25924: POP
// end ;
25925: LD_VAR 0 1
25929: RET
// export function hHackInvisible ; var i , j ; begin
25930: LD_INT 0
25932: PPUSH
25933: PPUSH
25934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: LD_INT 21
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 69
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25980
// if IsSelected ( i ) then
25958: LD_VAR 0 2
25962: PPUSH
25963: CALL_OW 306
25967: IFFALSE 25978
// ComForceInvisible ( i ) ;
25969: LD_VAR 0 2
25973: PPUSH
25974: CALL_OW 496
25978: GO 25955
25980: POP
25981: POP
// end ;
25982: LD_VAR 0 1
25986: RET
// export function hHackChangeYourSide ; begin
25987: LD_INT 0
25989: PPUSH
// if your_side = 8 then
25990: LD_OWVAR 2
25994: PUSH
25995: LD_INT 8
25997: EQUAL
25998: IFFALSE 26010
// your_side := 0 else
26000: LD_ADDR_OWVAR 2
26004: PUSH
26005: LD_INT 0
26007: ST_TO_ADDR
26008: GO 26024
// your_side := your_side + 1 ;
26010: LD_ADDR_OWVAR 2
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: LD_INT 1
26022: PLUS
26023: ST_TO_ADDR
// end ;
26024: LD_VAR 0 1
26028: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26029: LD_INT 0
26031: PPUSH
26032: PPUSH
26033: PPUSH
// for i in all_units do
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_OWVAR 3
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26123
// if IsSelected ( i ) then
26047: LD_VAR 0 2
26051: PPUSH
26052: CALL_OW 306
26056: IFFALSE 26121
// begin j := GetSide ( i ) ;
26058: LD_ADDR_VAR 0 3
26062: PUSH
26063: LD_VAR 0 2
26067: PPUSH
26068: CALL_OW 255
26072: ST_TO_ADDR
// if j = 8 then
26073: LD_VAR 0 3
26077: PUSH
26078: LD_INT 8
26080: EQUAL
26081: IFFALSE 26093
// j := 0 else
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: LD_INT 0
26090: ST_TO_ADDR
26091: GO 26107
// j := j + 1 ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_INT 1
26105: PLUS
26106: ST_TO_ADDR
// SetSide ( i , j ) ;
26107: LD_VAR 0 2
26111: PPUSH
26112: LD_VAR 0 3
26116: PPUSH
26117: CALL_OW 235
// end ;
26121: GO 26044
26123: POP
26124: POP
// end ;
26125: LD_VAR 0 1
26129: RET
// export function hHackFog ; begin
26130: LD_INT 0
26132: PPUSH
// FogOff ( true ) ;
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 344
// end ;
26140: LD_VAR 0 1
26144: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26145: LD_INT 0
26147: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26148: LD_VAR 0 1
26152: PPUSH
26153: LD_VAR 0 2
26157: PPUSH
26158: LD_VAR 0 3
26162: PPUSH
26163: LD_INT 1
26165: PPUSH
26166: LD_INT 1
26168: PPUSH
26169: CALL_OW 483
// CenterOnXY ( x , y ) ;
26173: LD_VAR 0 2
26177: PPUSH
26178: LD_VAR 0 3
26182: PPUSH
26183: CALL_OW 84
// end ;
26187: LD_VAR 0 4
26191: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26196: LD_VAR 0 1
26200: NOT
26201: IFTRUE 26220
26203: PUSH
26204: LD_VAR 0 2
26208: PPUSH
26209: LD_VAR 0 3
26213: PPUSH
26214: CALL_OW 488
26218: NOT
26219: OR
26220: IFTRUE 26255
26222: PUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 266
26232: PUSH
26233: LD_INT 3
26235: NONEQUAL
26236: IFFALSE 26254
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 247
26248: PUSH
26249: LD_INT 1
26251: EQUAL
26252: NOT
26253: AND
26254: OR
26255: IFFALSE 26259
// exit ;
26257: GO 26541
// if GetType ( factory ) = unit_human then
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL_OW 247
26268: PUSH
26269: LD_INT 1
26271: EQUAL
26272: IFFALSE 26289
// factory := IsInUnit ( factory ) ;
26274: LD_ADDR_VAR 0 1
26278: PUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 310
26288: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 266
26298: PUSH
26299: LD_INT 3
26301: NONEQUAL
26302: IFFALSE 26306
// exit ;
26304: GO 26541
// for i := 1 to Count ( factoryWaypoints ) do
26306: LD_ADDR_VAR 0 5
26310: PUSH
26311: DOUBLE
26312: LD_INT 1
26314: DEC
26315: ST_TO_ADDR
26316: LD_EXP 80
26320: PPUSH
26321: CALL 36074 0 1
26325: PUSH
26326: FOR_TO
26327: IFFALSE 26489
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 3
26338: PPUSH
26339: CALL_OW 428
26343: PUSH
26344: LD_EXP 80
26348: PUSH
26349: LD_VAR 0 5
26353: ARRAY
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: EQUAL
26359: IFFALSE 26391
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26361: LD_ADDR_EXP 80
26365: PUSH
26366: LD_EXP 80
26370: PPUSH
26371: LD_VAR 0 5
26375: PPUSH
26376: CALL_OW 3
26380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26381: CALL 26546 0 0
// exit ;
26385: POP
26386: POP
26387: GO 26541
// end else
26389: GO 26487
// if factory = factoryWaypoints [ i ] [ 2 ] then
26391: LD_VAR 0 1
26395: PUSH
26396: LD_EXP 80
26400: PUSH
26401: LD_VAR 0 5
26405: ARRAY
26406: PUSH
26407: LD_INT 2
26409: ARRAY
26410: EQUAL
26411: IFFALSE 26487
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26413: LD_ADDR_EXP 80
26417: PUSH
26418: LD_EXP 80
26422: PPUSH
26423: LD_VAR 0 5
26427: PPUSH
26428: CALL_OW 3
26432: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26433: LD_ADDR_EXP 80
26437: PUSH
26438: LD_EXP 80
26442: PPUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 255
26452: PUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_VAR 0 3
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: PPUSH
26474: CALL 72006 0 2
26478: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26479: CALL 26546 0 0
// exit ;
26483: POP
26484: POP
26485: GO 26541
// end ; end ;
26487: GO 26326
26489: POP
26490: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26491: LD_ADDR_EXP 80
26495: PUSH
26496: LD_EXP 80
26500: PPUSH
26501: LD_VAR 0 1
26505: PPUSH
26506: CALL_OW 255
26510: PUSH
26511: LD_VAR 0 1
26515: PUSH
26516: LD_VAR 0 2
26520: PUSH
26521: LD_VAR 0 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL 72006 0 2
26536: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26537: CALL 26546 0 0
// end ;
26541: LD_VAR 0 4
26545: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26551: LD_STRING resetFactoryWaypoint();
26553: PPUSH
26554: CALL_OW 559
// if factoryWaypoints then
26558: LD_EXP 80
26562: IFFALSE 26683
// begin list := factoryWaypoints ;
26564: LD_ADDR_VAR 0 3
26568: PUSH
26569: LD_EXP 80
26573: ST_TO_ADDR
// for i := 1 to list do
26574: LD_ADDR_VAR 0 2
26578: PUSH
26579: DOUBLE
26580: LD_INT 1
26582: DEC
26583: ST_TO_ADDR
26584: LD_VAR 0 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26681
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26592: LD_STRING setFactoryWaypointXY(
26594: PUSH
26595: LD_VAR 0 3
26599: PUSH
26600: LD_VAR 0 2
26604: ARRAY
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: STR
26610: PUSH
26611: LD_STRING ,
26613: STR
26614: PUSH
26615: LD_VAR 0 3
26619: PUSH
26620: LD_VAR 0 2
26624: ARRAY
26625: PUSH
26626: LD_INT 2
26628: ARRAY
26629: STR
26630: PUSH
26631: LD_STRING ,
26633: STR
26634: PUSH
26635: LD_VAR 0 3
26639: PUSH
26640: LD_VAR 0 2
26644: ARRAY
26645: PUSH
26646: LD_INT 3
26648: ARRAY
26649: STR
26650: PUSH
26651: LD_STRING ,
26653: STR
26654: PUSH
26655: LD_VAR 0 3
26659: PUSH
26660: LD_VAR 0 2
26664: ARRAY
26665: PUSH
26666: LD_INT 4
26668: ARRAY
26669: STR
26670: PUSH
26671: LD_STRING )
26673: STR
26674: PPUSH
26675: CALL_OW 559
26679: GO 26589
26681: POP
26682: POP
// end ; end ;
26683: LD_VAR 0 1
26687: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26688: LD_INT 0
26690: PPUSH
// if HexInfo ( x , y ) = warehouse then
26691: LD_VAR 0 2
26695: PPUSH
26696: LD_VAR 0 3
26700: PPUSH
26701: CALL_OW 428
26705: PUSH
26706: LD_VAR 0 1
26710: EQUAL
26711: IFFALSE 26738
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26713: LD_ADDR_EXP 82
26717: PUSH
26718: LD_EXP 82
26722: PPUSH
26723: LD_VAR 0 1
26727: PPUSH
26728: LD_INT 0
26730: PPUSH
26731: CALL_OW 1
26735: ST_TO_ADDR
26736: GO 26789
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26738: LD_ADDR_EXP 82
26742: PUSH
26743: LD_EXP 82
26747: PPUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 255
26762: PUSH
26763: LD_VAR 0 1
26767: PUSH
26768: LD_VAR 0 2
26772: PUSH
26773: LD_VAR 0 3
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26789: CALL 26798 0 0
// end ;
26793: LD_VAR 0 4
26797: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26803: LD_STRING resetWarehouseGatheringPoints();
26805: PPUSH
26806: CALL_OW 559
// if warehouseGatheringPoints then
26810: LD_EXP 82
26814: IFFALSE 26940
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_EXP 82
26825: PPUSH
26826: CALL 75940 0 1
26830: ST_TO_ADDR
// for i := 1 to list do
26831: LD_ADDR_VAR 0 2
26835: PUSH
26836: DOUBLE
26837: LD_INT 1
26839: DEC
26840: ST_TO_ADDR
26841: LD_VAR 0 3
26845: PUSH
26846: FOR_TO
26847: IFFALSE 26938
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26849: LD_STRING setWarehouseGatheringPointXY(
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: LD_VAR 0 2
26861: ARRAY
26862: PUSH
26863: LD_INT 1
26865: ARRAY
26866: STR
26867: PUSH
26868: LD_STRING ,
26870: STR
26871: PUSH
26872: LD_VAR 0 3
26876: PUSH
26877: LD_VAR 0 2
26881: ARRAY
26882: PUSH
26883: LD_INT 2
26885: ARRAY
26886: STR
26887: PUSH
26888: LD_STRING ,
26890: STR
26891: PUSH
26892: LD_VAR 0 3
26896: PUSH
26897: LD_VAR 0 2
26901: ARRAY
26902: PUSH
26903: LD_INT 3
26905: ARRAY
26906: STR
26907: PUSH
26908: LD_STRING ,
26910: STR
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_VAR 0 2
26921: ARRAY
26922: PUSH
26923: LD_INT 4
26925: ARRAY
26926: STR
26927: PUSH
26928: LD_STRING )
26930: STR
26931: PPUSH
26932: CALL_OW 559
26936: GO 26846
26938: POP
26939: POP
// end ; end ;
26940: LD_VAR 0 1
26944: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26945: LD_EXP 82
26949: IFFALSE 27644
26951: GO 26953
26953: DISABLE
26954: LD_INT 0
26956: PPUSH
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// begin enable ;
26965: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_EXP 82
26975: PPUSH
26976: CALL 75940 0 1
26980: ST_TO_ADDR
// if not list then
26981: LD_VAR 0 3
26985: NOT
26986: IFFALSE 26990
// exit ;
26988: GO 27644
// for i := 1 to list do
26990: LD_ADDR_VAR 0 1
26994: PUSH
26995: DOUBLE
26996: LD_INT 1
26998: DEC
26999: ST_TO_ADDR
27000: LD_VAR 0 3
27004: PUSH
27005: FOR_TO
27006: IFFALSE 27642
// begin depot := list [ i ] [ 2 ] ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_VAR 0 3
27017: PUSH
27018: LD_VAR 0 1
27022: ARRAY
27023: PUSH
27024: LD_INT 2
27026: ARRAY
27027: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27028: LD_ADDR_VAR 0 5
27032: PUSH
27033: LD_VAR 0 3
27037: PUSH
27038: LD_VAR 0 1
27042: ARRAY
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27048: LD_VAR 0 8
27052: PPUSH
27053: CALL_OW 301
27057: IFTRUE 27076
27059: PUSH
27060: LD_VAR 0 5
27064: PUSH
27065: LD_VAR 0 8
27069: PPUSH
27070: CALL_OW 255
27074: NONEQUAL
27075: OR
27076: IFFALSE 27105
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27078: LD_ADDR_EXP 82
27082: PUSH
27083: LD_EXP 82
27087: PPUSH
27088: LD_VAR 0 8
27092: PPUSH
27093: LD_INT 0
27095: PPUSH
27096: CALL_OW 1
27100: ST_TO_ADDR
// exit ;
27101: POP
27102: POP
27103: GO 27644
// end ; x := list [ i ] [ 3 ] ;
27105: LD_ADDR_VAR 0 6
27109: PUSH
27110: LD_VAR 0 3
27114: PUSH
27115: LD_VAR 0 1
27119: ARRAY
27120: PUSH
27121: LD_INT 3
27123: ARRAY
27124: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27125: LD_ADDR_VAR 0 7
27129: PUSH
27130: LD_VAR 0 3
27134: PUSH
27135: LD_VAR 0 1
27139: ARRAY
27140: PUSH
27141: LD_INT 4
27143: ARRAY
27144: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27145: LD_ADDR_VAR 0 9
27149: PUSH
27150: LD_VAR 0 6
27154: PPUSH
27155: LD_VAR 0 7
27159: PPUSH
27160: LD_INT 16
27162: PPUSH
27163: CALL 74514 0 3
27167: ST_TO_ADDR
// if not cratesNearbyPoint then
27168: LD_VAR 0 9
27172: NOT
27173: IFFALSE 27179
// exit ;
27175: POP
27176: POP
27177: GO 27644
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27179: LD_ADDR_VAR 0 4
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_VAR 0 5
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 60
27201: PUSH
27202: EMPTY
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 91
27211: PUSH
27212: LD_VAR 0 8
27216: PUSH
27217: LD_INT 6
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 25
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 25
27240: PUSH
27241: LD_INT 16
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: PPUSH
27259: CALL_OW 69
27263: PUSH
27264: LD_VAR 0 8
27268: PPUSH
27269: CALL_OW 313
27273: PPUSH
27274: LD_INT 3
27276: PUSH
27277: LD_INT 60
27279: PUSH
27280: EMPTY
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 25
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 25
27302: PUSH
27303: LD_INT 16
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: CALL_OW 72
27323: UNION
27324: ST_TO_ADDR
// if tmp then
27325: LD_VAR 0 4
27329: IFFALSE 27409
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27331: LD_ADDR_VAR 0 4
27335: PUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: CALL 72321 0 2
27348: ST_TO_ADDR
// for j in tmp do
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 4
27358: PUSH
27359: FOR_IN
27360: IFFALSE 27403
// begin if IsInUnit ( j ) then
27362: LD_VAR 0 2
27366: PPUSH
27367: CALL_OW 310
27371: IFFALSE 27382
// ComExit ( j ) ;
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL 72404 0 1
// AddComCollect ( j , x , y ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_VAR 0 6
27391: PPUSH
27392: LD_VAR 0 7
27396: PPUSH
27397: CALL_OW 177
// end ;
27401: GO 27359
27403: POP
27404: POP
// exit ;
27405: POP
27406: POP
27407: GO 27644
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27409: LD_ADDR_VAR 0 4
27413: PUSH
27414: LD_INT 22
27416: PUSH
27417: LD_VAR 0 5
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 91
27428: PUSH
27429: LD_VAR 0 8
27433: PUSH
27434: LD_INT 8
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: LD_INT 34
27447: PUSH
27448: LD_INT 12
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 34
27457: PUSH
27458: LD_INT 51
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 34
27467: PUSH
27468: LD_INT 32
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 34
27477: PUSH
27478: LD_INT 89
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: PPUSH
27497: CALL_OW 69
27501: ST_TO_ADDR
// if tmp then
27502: LD_VAR 0 4
27506: IFFALSE 27640
// begin for j in tmp do
27508: LD_ADDR_VAR 0 2
27512: PUSH
27513: LD_VAR 0 4
27517: PUSH
27518: FOR_IN
27519: IFFALSE 27638
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27521: LD_VAR 0 2
27525: PPUSH
27526: CALL_OW 262
27530: PUSH
27531: LD_INT 3
27533: EQUAL
27534: IFTRUE 27551
27536: PUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 261
27546: PUSH
27547: LD_INT 20
27549: GREATER
27550: OR
27551: IFFALSE 27565
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 314
27563: NOT
27564: AND
27565: IFFALSE 27595
27567: PUSH
27568: LD_VAR 0 2
27572: PPUSH
27573: CALL_OW 263
27577: PUSH
27578: LD_INT 1
27580: NONEQUAL
27581: IFTRUE 27594
27583: PUSH
27584: LD_VAR 0 2
27588: PPUSH
27589: CALL_OW 311
27593: OR
27594: AND
27595: IFFALSE 27636
// begin ComCollect ( j , x , y ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 6
27606: PPUSH
27607: LD_VAR 0 7
27611: PPUSH
27612: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_VAR 0 8
27625: PPUSH
27626: CALL_OW 172
// exit ;
27630: POP
27631: POP
27632: POP
27633: POP
27634: GO 27644
// end ;
27636: GO 27518
27638: POP
27639: POP
// end ; end ;
27640: GO 27005
27642: POP
27643: POP
// end ; end_of_file
27644: PPOPN 9
27646: END
// export function SOS_UnitDestroyed ( un ) ; begin
27647: LD_INT 0
27649: PPUSH
// ComRadiation ( un ) ;
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL 28736 0 1
// end ;
27659: LD_VAR 0 2
27663: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27664: LD_INT 0
27666: PPUSH
// ComRadiation ( un ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL 28736 0 1
// end ;
27676: LD_VAR 0 2
27680: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27681: LD_INT 0
27683: PPUSH
// end ;
27684: LD_VAR 0 4
27688: RET
// export function SOS_Command ( cmd ) ; begin
27689: LD_INT 0
27691: PPUSH
// end ;
27692: LD_VAR 0 2
27696: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27697: LD_INT 0
27699: PPUSH
// end ;
27700: LD_VAR 0 6
27704: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27705: LD_INT 0
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
// if not vehicle or not factory then
27711: LD_VAR 0 1
27715: NOT
27716: IFTRUE 27725
27718: PUSH
27719: LD_VAR 0 2
27723: NOT
27724: OR
27725: IFFALSE 27729
// exit ;
27727: GO 28311
// if not factoryWaypoints then
27729: LD_EXP 80
27733: NOT
27734: IFFALSE 27738
// exit ;
27736: GO 28311
// for i := 1 to Count ( factoryWaypoints ) do
27738: LD_ADDR_VAR 0 4
27742: PUSH
27743: DOUBLE
27744: LD_INT 1
27746: DEC
27747: ST_TO_ADDR
27748: LD_EXP 80
27752: PPUSH
27753: CALL 36074 0 1
27757: PUSH
27758: FOR_TO
27759: IFFALSE 28309
// if factoryWaypoints [ i ] [ 2 ] = factory then
27761: LD_EXP 80
27765: PUSH
27766: LD_VAR 0 4
27770: ARRAY
27771: PUSH
27772: LD_INT 2
27774: ARRAY
27775: PUSH
27776: LD_VAR 0 2
27780: EQUAL
27781: IFFALSE 28307
// begin if GetControl ( vehicle ) = control_manual then
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 263
27792: PUSH
27793: LD_INT 1
27795: EQUAL
27796: IFFALSE 28160
// begin driver := IsDrivenBy ( vehicle ) ;
27798: LD_ADDR_VAR 0 5
27802: PUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 311
27812: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27813: LD_VAR 0 5
27817: PUSH
27818: LD_EXP 81
27822: IN
27823: IFTRUE 27837
27825: PUSH
27826: LD_VAR 0 1
27830: PUSH
27831: LD_EXP 81
27835: IN
27836: OR
27837: IFFALSE 27843
// exit ;
27839: POP
27840: POP
27841: GO 28311
// if not HasTask ( driver ) then
27843: LD_VAR 0 5
27847: PPUSH
27848: CALL_OW 314
27852: NOT
27853: IFFALSE 28158
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27855: LD_ADDR_EXP 81
27859: PUSH
27860: LD_EXP 81
27864: PPUSH
27865: LD_VAR 0 5
27869: PPUSH
27870: CALL 72006 0 2
27874: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27875: LD_ADDR_EXP 81
27879: PUSH
27880: LD_EXP 81
27884: PPUSH
27885: LD_VAR 0 1
27889: PPUSH
27890: CALL 72006 0 2
27894: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27895: LD_ADDR_VAR 0 6
27899: PUSH
27900: LD_EXP 80
27904: PUSH
27905: LD_VAR 0 4
27909: ARRAY
27910: PUSH
27911: LD_INT 3
27913: ARRAY
27914: PPUSH
27915: LD_EXP 80
27919: PUSH
27920: LD_VAR 0 4
27924: ARRAY
27925: PUSH
27926: LD_INT 4
27928: ARRAY
27929: PPUSH
27930: CALL_OW 428
27934: ST_TO_ADDR
// if hex then
27935: LD_VAR 0 6
27939: IFFALSE 27957
// ComMoveUnit ( driver , hex ) else
27941: LD_VAR 0 5
27945: PPUSH
27946: LD_VAR 0 6
27950: PPUSH
27951: CALL_OW 112
27955: GO 28041
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27957: LD_VAR 0 1
27961: PPUSH
27962: LD_EXP 80
27966: PUSH
27967: LD_VAR 0 4
27971: ARRAY
27972: PUSH
27973: LD_INT 3
27975: ARRAY
27976: PPUSH
27977: LD_EXP 80
27981: PUSH
27982: LD_VAR 0 4
27986: ARRAY
27987: PUSH
27988: LD_INT 4
27990: ARRAY
27991: PPUSH
27992: CALL_OW 297
27996: PUSH
27997: LD_INT 0
27999: GREATER
28000: IFFALSE 28041
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28002: LD_VAR 0 5
28006: PPUSH
28007: LD_EXP 80
28011: PUSH
28012: LD_VAR 0 4
28016: ARRAY
28017: PUSH
28018: LD_INT 3
28020: ARRAY
28021: PPUSH
28022: LD_EXP 80
28026: PUSH
28027: LD_VAR 0 4
28031: ARRAY
28032: PUSH
28033: LD_INT 4
28035: ARRAY
28036: PPUSH
28037: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28041: LD_VAR 0 5
28045: PPUSH
28046: CALL_OW 181
// if Multiplayer then
28050: LD_OWVAR 4
28054: IFFALSE 28103
// begin repeat wait ( 10 ) ;
28056: LD_INT 10
28058: PPUSH
28059: CALL_OW 67
// until not IsInUnit ( driver ) ;
28063: LD_VAR 0 5
28067: PPUSH
28068: CALL_OW 310
28072: NOT
28073: IFFALSE 28056
// if not HasTask ( driver ) then
28075: LD_VAR 0 5
28079: PPUSH
28080: CALL_OW 314
28084: NOT
28085: IFFALSE 28101
// ComEnterUnit ( driver , factory ) ;
28087: LD_VAR 0 5
28091: PPUSH
28092: LD_VAR 0 2
28096: PPUSH
28097: CALL_OW 120
// end else
28101: GO 28117
// AddComEnterUnit ( driver , factory ) ;
28103: LD_VAR 0 5
28107: PPUSH
28108: LD_VAR 0 2
28112: PPUSH
28113: CALL_OW 180
// wait ( 0 0$1 ) ;
28117: LD_INT 35
28119: PPUSH
28120: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28124: LD_ADDR_EXP 81
28128: PUSH
28129: LD_EXP 81
28133: PUSH
28134: LD_VAR 0 5
28138: DIFF
28139: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28140: LD_ADDR_EXP 81
28144: PUSH
28145: LD_EXP 81
28149: PUSH
28150: LD_VAR 0 1
28154: DIFF
28155: ST_TO_ADDR
// break ;
28156: GO 28309
// end ; end else
28158: GO 28307
// if GetControl ( vehicle ) = control_remote then
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 263
28169: PUSH
28170: LD_INT 2
28172: EQUAL
28173: IFFALSE 28259
// begin wait ( 0 0$2 ) ;
28175: LD_INT 70
28177: PPUSH
28178: CALL_OW 67
// repeat wait ( 10 ) ;
28182: LD_INT 10
28184: PPUSH
28185: CALL_OW 67
// Connect ( vehicle ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: CALL 42318 0 1
// until IsControledBy ( vehicle ) ;
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 312
28207: IFFALSE 28182
// wait ( 10 ) ;
28209: LD_INT 10
28211: PPUSH
28212: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28216: LD_VAR 0 1
28220: PPUSH
28221: LD_EXP 80
28225: PUSH
28226: LD_VAR 0 4
28230: ARRAY
28231: PUSH
28232: LD_INT 3
28234: ARRAY
28235: PPUSH
28236: LD_EXP 80
28240: PUSH
28241: LD_VAR 0 4
28245: ARRAY
28246: PUSH
28247: LD_INT 4
28249: ARRAY
28250: PPUSH
28251: CALL_OW 111
// break ;
28255: GO 28309
// end else
28257: GO 28307
// begin wait ( 0 0$3 ) ;
28259: LD_INT 105
28261: PPUSH
28262: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28266: LD_VAR 0 1
28270: PPUSH
28271: LD_EXP 80
28275: PUSH
28276: LD_VAR 0 4
28280: ARRAY
28281: PUSH
28282: LD_INT 3
28284: ARRAY
28285: PPUSH
28286: LD_EXP 80
28290: PUSH
28291: LD_VAR 0 4
28295: ARRAY
28296: PUSH
28297: LD_INT 4
28299: ARRAY
28300: PPUSH
28301: CALL_OW 111
// break ;
28305: GO 28309
// end ; end ;
28307: GO 27758
28309: POP
28310: POP
// end ;
28311: LD_VAR 0 3
28315: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28316: LD_INT 0
28318: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28319: LD_VAR 0 1
28323: PUSH
28324: LD_INT 250
28326: EQUAL
28327: IFFALSE 28344
28329: PUSH
28330: LD_VAR 0 2
28334: PPUSH
28335: CALL_OW 264
28339: PUSH
28340: LD_INT 81
28342: EQUAL
28343: AND
28344: IFFALSE 28365
// MinerPlaceMine ( unit , x , y ) ;
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_VAR 0 4
28355: PPUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: CALL 31497 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 251
28372: EQUAL
28373: IFFALSE 28390
28375: PUSH
28376: LD_VAR 0 2
28380: PPUSH
28381: CALL_OW 264
28385: PUSH
28386: LD_INT 81
28388: EQUAL
28389: AND
28390: IFFALSE 28411
// MinerDetonateMine ( unit , x , y ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_VAR 0 4
28401: PPUSH
28402: LD_VAR 0 5
28406: PPUSH
28407: CALL 31776 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 252
28418: EQUAL
28419: IFFALSE 28436
28421: PUSH
28422: LD_VAR 0 2
28426: PPUSH
28427: CALL_OW 264
28431: PUSH
28432: LD_INT 81
28434: EQUAL
28435: AND
28436: IFFALSE 28457
// MinerCreateMinefield ( unit , x , y ) ;
28438: LD_VAR 0 2
28442: PPUSH
28443: LD_VAR 0 4
28447: PPUSH
28448: LD_VAR 0 5
28452: PPUSH
28453: CALL 32195 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28457: LD_VAR 0 1
28461: PUSH
28462: LD_INT 253
28464: EQUAL
28465: IFFALSE 28482
28467: PUSH
28468: LD_VAR 0 2
28472: PPUSH
28473: CALL_OW 257
28477: PUSH
28478: LD_INT 5
28480: EQUAL
28481: AND
28482: IFFALSE 28503
// ComBinocular ( unit , x , y ) ;
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 4
28493: PPUSH
28494: LD_VAR 0 5
28498: PPUSH
28499: CALL 32570 0 3
// if selectedUnit then
28503: LD_VAR 0 3
28507: IFFALSE 28567
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 254
28516: EQUAL
28517: IFFALSE 28534
28519: PUSH
28520: LD_VAR 0 2
28524: PPUSH
28525: CALL_OW 264
28529: PUSH
28530: LD_INT 99
28532: EQUAL
28533: AND
28534: IFFALSE 28551
28536: PUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: CALL_OW 263
28546: PUSH
28547: LD_INT 3
28549: EQUAL
28550: AND
28551: IFFALSE 28567
// HackDestroyVehicle ( unit , selectedUnit ) ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_VAR 0 3
28562: PPUSH
28563: CALL 30857 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 255
28574: EQUAL
28575: IFFALSE 28599
28577: PUSH
28578: LD_VAR 0 2
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 14
28590: PUSH
28591: LD_INT 53
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: IN
28598: AND
28599: IFFALSE 28617
28601: PUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: LD_VAR 0 5
28611: PPUSH
28612: CALL_OW 488
28616: AND
28617: IFFALSE 28641
// CutTreeXYR ( unit , x , y , 12 ) ;
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: LD_INT 12
28636: PPUSH
28637: CALL 28832 0 4
// if cmd = 256 then
28641: LD_VAR 0 1
28645: PUSH
28646: LD_INT 256
28648: EQUAL
28649: IFFALSE 28670
// SetFactoryWaypoint ( unit , x , y ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 4
28660: PPUSH
28661: LD_VAR 0 5
28665: PPUSH
28666: CALL 26192 0 3
// if cmd = 257 then
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 257
28677: EQUAL
28678: IFFALSE 28699
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28680: LD_VAR 0 2
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL 26688 0 3
// if cmd = 258 then
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 258
28706: EQUAL
28707: IFFALSE 28731
// BurnTreeXYR ( unit , x , y , 8 ) ;
28709: LD_VAR 0 2
28713: PPUSH
28714: LD_VAR 0 4
28718: PPUSH
28719: LD_VAR 0 5
28723: PPUSH
28724: LD_INT 8
28726: PPUSH
28727: CALL 29232 0 4
// end ;
28731: LD_VAR 0 6
28735: RET
// export function ComRadiation ( un ) ; var eff ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28740: LD_VAR 0 1
28744: PPUSH
28745: CALL_OW 264
28749: PUSH
28750: LD_INT 91
28752: NONEQUAL
28753: IFFALSE 28757
// exit ;
28755: GO 28827
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28757: LD_INT 68
28759: PPUSH
28760: LD_VAR 0 1
28764: PPUSH
28765: CALL_OW 255
28769: PPUSH
28770: CALL_OW 321
28774: PUSH
28775: LD_INT 2
28777: EQUAL
28778: IFFALSE 28790
// eff := 50 else
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 50
28787: ST_TO_ADDR
28788: GO 28798
// eff := 25 ;
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_INT 25
28797: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL_OW 250
28807: PPUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 251
28817: PPUSH
28818: LD_VAR 0 3
28822: PPUSH
28823: CALL_OW 495
// end ;
28827: LD_VAR 0 2
28831: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL_OW 302
28852: NOT
28853: IFTRUE 28872
28855: PUSH
28856: LD_VAR 0 2
28860: PPUSH
28861: LD_VAR 0 3
28865: PPUSH
28866: CALL_OW 488
28870: NOT
28871: OR
28872: IFTRUE 28881
28874: PUSH
28875: LD_VAR 0 4
28879: NOT
28880: OR
28881: IFFALSE 28885
// exit ;
28883: GO 29227
// list := [ ] ;
28885: LD_ADDR_VAR 0 13
28889: PUSH
28890: EMPTY
28891: ST_TO_ADDR
// if x - r < 0 then
28892: LD_VAR 0 2
28896: PUSH
28897: LD_VAR 0 4
28901: MINUS
28902: PUSH
28903: LD_INT 0
28905: LESS
28906: IFFALSE 28918
// min_x := 0 else
28908: LD_ADDR_VAR 0 7
28912: PUSH
28913: LD_INT 0
28915: ST_TO_ADDR
28916: GO 28934
// min_x := x - r ;
28918: LD_ADDR_VAR 0 7
28922: PUSH
28923: LD_VAR 0 2
28927: PUSH
28928: LD_VAR 0 4
28932: MINUS
28933: ST_TO_ADDR
// if y - r < 0 then
28934: LD_VAR 0 3
28938: PUSH
28939: LD_VAR 0 4
28943: MINUS
28944: PUSH
28945: LD_INT 0
28947: LESS
28948: IFFALSE 28960
// min_y := 0 else
28950: LD_ADDR_VAR 0 8
28954: PUSH
28955: LD_INT 0
28957: ST_TO_ADDR
28958: GO 28976
// min_y := y - r ;
28960: LD_ADDR_VAR 0 8
28964: PUSH
28965: LD_VAR 0 3
28969: PUSH
28970: LD_VAR 0 4
28974: MINUS
28975: ST_TO_ADDR
// max_x := x + r ;
28976: LD_ADDR_VAR 0 9
28980: PUSH
28981: LD_VAR 0 2
28985: PUSH
28986: LD_VAR 0 4
28990: PLUS
28991: ST_TO_ADDR
// max_y := y + r ;
28992: LD_ADDR_VAR 0 10
28996: PUSH
28997: LD_VAR 0 3
29001: PUSH
29002: LD_VAR 0 4
29006: PLUS
29007: ST_TO_ADDR
// for _x = min_x to max_x do
29008: LD_ADDR_VAR 0 11
29012: PUSH
29013: DOUBLE
29014: LD_VAR 0 7
29018: DEC
29019: ST_TO_ADDR
29020: LD_VAR 0 9
29024: PUSH
29025: FOR_TO
29026: IFFALSE 29145
// for _y = min_y to max_y do
29028: LD_ADDR_VAR 0 12
29032: PUSH
29033: DOUBLE
29034: LD_VAR 0 8
29038: DEC
29039: ST_TO_ADDR
29040: LD_VAR 0 10
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29141
// begin if not ValidHex ( _x , _y ) then
29048: LD_VAR 0 11
29052: PPUSH
29053: LD_VAR 0 12
29057: PPUSH
29058: CALL_OW 488
29062: NOT
29063: IFFALSE 29067
// continue ;
29065: GO 29045
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29067: LD_VAR 0 11
29071: PPUSH
29072: LD_VAR 0 12
29076: PPUSH
29077: CALL_OW 351
29081: IFFALSE 29099
29083: PUSH
29084: LD_VAR 0 11
29088: PPUSH
29089: LD_VAR 0 12
29093: PPUSH
29094: CALL_OW 554
29098: AND
29099: IFFALSE 29139
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29101: LD_ADDR_VAR 0 13
29105: PUSH
29106: LD_VAR 0 13
29110: PPUSH
29111: LD_VAR 0 13
29115: PUSH
29116: LD_INT 1
29118: PLUS
29119: PPUSH
29120: LD_VAR 0 11
29124: PUSH
29125: LD_VAR 0 12
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 2
29138: ST_TO_ADDR
// end ;
29139: GO 29045
29141: POP
29142: POP
29143: GO 29025
29145: POP
29146: POP
// if not list then
29147: LD_VAR 0 13
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29227
// for i in list do
29156: LD_ADDR_VAR 0 6
29160: PUSH
29161: LD_VAR 0 13
29165: PUSH
29166: FOR_IN
29167: IFFALSE 29225
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29169: LD_VAR 0 1
29173: PPUSH
29174: LD_STRING M
29176: PUSH
29177: LD_VAR 0 6
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PUSH
29186: LD_VAR 0 6
29190: PUSH
29191: LD_INT 2
29193: ARRAY
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: PPUSH
29219: CALL_OW 447
29223: GO 29166
29225: POP
29226: POP
// end ;
29227: LD_VAR 0 5
29231: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
29242: PPUSH
29243: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 302
29253: NOT
29254: IFTRUE 29273
29256: PUSH
29257: LD_VAR 0 2
29261: PPUSH
29262: LD_VAR 0 3
29266: PPUSH
29267: CALL_OW 488
29271: NOT
29272: OR
29273: IFTRUE 29282
29275: PUSH
29276: LD_VAR 0 4
29280: NOT
29281: OR
29282: IFFALSE 29286
// exit ;
29284: GO 29803
// list := [ ] ;
29286: LD_ADDR_VAR 0 13
29290: PUSH
29291: EMPTY
29292: ST_TO_ADDR
// if x - r < 0 then
29293: LD_VAR 0 2
29297: PUSH
29298: LD_VAR 0 4
29302: MINUS
29303: PUSH
29304: LD_INT 0
29306: LESS
29307: IFFALSE 29319
// min_x := 0 else
29309: LD_ADDR_VAR 0 7
29313: PUSH
29314: LD_INT 0
29316: ST_TO_ADDR
29317: GO 29335
// min_x := x - r ;
29319: LD_ADDR_VAR 0 7
29323: PUSH
29324: LD_VAR 0 2
29328: PUSH
29329: LD_VAR 0 4
29333: MINUS
29334: ST_TO_ADDR
// if y - r < 0 then
29335: LD_VAR 0 3
29339: PUSH
29340: LD_VAR 0 4
29344: MINUS
29345: PUSH
29346: LD_INT 0
29348: LESS
29349: IFFALSE 29361
// min_y := 0 else
29351: LD_ADDR_VAR 0 8
29355: PUSH
29356: LD_INT 0
29358: ST_TO_ADDR
29359: GO 29377
// min_y := y - r ;
29361: LD_ADDR_VAR 0 8
29365: PUSH
29366: LD_VAR 0 3
29370: PUSH
29371: LD_VAR 0 4
29375: MINUS
29376: ST_TO_ADDR
// max_x := x + r ;
29377: LD_ADDR_VAR 0 9
29381: PUSH
29382: LD_VAR 0 2
29386: PUSH
29387: LD_VAR 0 4
29391: PLUS
29392: ST_TO_ADDR
// max_y := y + r ;
29393: LD_ADDR_VAR 0 10
29397: PUSH
29398: LD_VAR 0 3
29402: PUSH
29403: LD_VAR 0 4
29407: PLUS
29408: ST_TO_ADDR
// for _x = min_x to max_x do
29409: LD_ADDR_VAR 0 11
29413: PUSH
29414: DOUBLE
29415: LD_VAR 0 7
29419: DEC
29420: ST_TO_ADDR
29421: LD_VAR 0 9
29425: PUSH
29426: FOR_TO
29427: IFFALSE 29546
// for _y = min_y to max_y do
29429: LD_ADDR_VAR 0 12
29433: PUSH
29434: DOUBLE
29435: LD_VAR 0 8
29439: DEC
29440: ST_TO_ADDR
29441: LD_VAR 0 10
29445: PUSH
29446: FOR_TO
29447: IFFALSE 29542
// begin if not ValidHex ( _x , _y ) then
29449: LD_VAR 0 11
29453: PPUSH
29454: LD_VAR 0 12
29458: PPUSH
29459: CALL_OW 488
29463: NOT
29464: IFFALSE 29468
// continue ;
29466: GO 29446
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29468: LD_VAR 0 11
29472: PPUSH
29473: LD_VAR 0 12
29477: PPUSH
29478: CALL_OW 351
29482: IFFALSE 29500
29484: PUSH
29485: LD_VAR 0 11
29489: PPUSH
29490: LD_VAR 0 12
29494: PPUSH
29495: CALL_OW 554
29499: AND
29500: IFFALSE 29540
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29502: LD_ADDR_VAR 0 13
29506: PUSH
29507: LD_VAR 0 13
29511: PPUSH
29512: LD_VAR 0 13
29516: PUSH
29517: LD_INT 1
29519: PLUS
29520: PPUSH
29521: LD_VAR 0 11
29525: PUSH
29526: LD_VAR 0 12
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 2
29539: ST_TO_ADDR
// end ;
29540: GO 29446
29542: POP
29543: POP
29544: GO 29426
29546: POP
29547: POP
// if not list then
29548: LD_VAR 0 13
29552: NOT
29553: IFFALSE 29557
// exit ;
29555: GO 29803
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29557: LD_ADDR_VAR 0 13
29561: PUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: LD_VAR 0 13
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: LD_INT 1
29577: PPUSH
29578: CALL 39446 0 4
29582: ST_TO_ADDR
// ComStop ( flame ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 141
// for i in list do
29592: LD_ADDR_VAR 0 6
29596: PUSH
29597: LD_VAR 0 13
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29634
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_VAR 0 6
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: PPUSH
29619: LD_VAR 0 6
29623: PUSH
29624: LD_INT 2
29626: ARRAY
29627: PPUSH
29628: CALL_OW 176
29632: GO 29602
29634: POP
29635: POP
// repeat wait ( 0 0$1 ) ;
29636: LD_INT 35
29638: PPUSH
29639: CALL_OW 67
// task := GetTaskList ( flame ) ;
29643: LD_ADDR_VAR 0 14
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 437
29657: ST_TO_ADDR
// if not task then
29658: LD_VAR 0 14
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 29803
// if task [ 1 ] [ 1 ] <> | then
29667: LD_VAR 0 14
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PUSH
29676: LD_INT 1
29678: ARRAY
29679: PUSH
29680: LD_STRING |
29682: NONEQUAL
29683: IFFALSE 29687
// exit ;
29685: GO 29803
// _x := task [ 1 ] [ 2 ] ;
29687: LD_ADDR_VAR 0 11
29691: PUSH
29692: LD_VAR 0 14
29696: PUSH
29697: LD_INT 1
29699: ARRAY
29700: PUSH
29701: LD_INT 2
29703: ARRAY
29704: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29705: LD_ADDR_VAR 0 12
29709: PUSH
29710: LD_VAR 0 14
29714: PUSH
29715: LD_INT 1
29717: ARRAY
29718: PUSH
29719: LD_INT 3
29721: ARRAY
29722: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29723: LD_VAR 0 11
29727: PPUSH
29728: LD_VAR 0 12
29732: PPUSH
29733: CALL_OW 351
29737: NOT
29738: IFTRUE 29757
29740: PUSH
29741: LD_VAR 0 11
29745: PPUSH
29746: LD_VAR 0 12
29750: PPUSH
29751: CALL_OW 554
29755: NOT
29756: OR
29757: IFFALSE 29791
// begin task := Delete ( task , 1 ) ;
29759: LD_ADDR_VAR 0 14
29763: PUSH
29764: LD_VAR 0 14
29768: PPUSH
29769: LD_INT 1
29771: PPUSH
29772: CALL_OW 3
29776: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29777: LD_VAR 0 1
29781: PPUSH
29782: LD_VAR 0 14
29786: PPUSH
29787: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 314
29800: NOT
29801: IFFALSE 29636
// end ;
29803: LD_VAR 0 5
29807: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29808: LD_EXP 84
29812: NOT
29813: IFFALSE 29863
29815: GO 29817
29817: DISABLE
// begin initHack := true ;
29818: LD_ADDR_EXP 84
29822: PUSH
29823: LD_INT 1
29825: ST_TO_ADDR
// hackTanks := [ ] ;
29826: LD_ADDR_EXP 85
29830: PUSH
29831: EMPTY
29832: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29833: LD_ADDR_EXP 86
29837: PUSH
29838: EMPTY
29839: ST_TO_ADDR
// hackLimit := 3 ;
29840: LD_ADDR_EXP 87
29844: PUSH
29845: LD_INT 3
29847: ST_TO_ADDR
// hackDist := 12 ;
29848: LD_ADDR_EXP 88
29852: PUSH
29853: LD_INT 12
29855: ST_TO_ADDR
// hackCounter := [ ] ;
29856: LD_ADDR_EXP 89
29860: PUSH
29861: EMPTY
29862: ST_TO_ADDR
// end ;
29863: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29864: LD_EXP 84
29868: IFFALSE 29886
29870: PUSH
29871: LD_INT 34
29873: PUSH
29874: LD_INT 99
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PPUSH
29881: CALL_OW 69
29885: AND
29886: IFFALSE 30139
29888: GO 29890
29890: DISABLE
29891: LD_INT 0
29893: PPUSH
29894: PPUSH
// begin enable ;
29895: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_INT 34
29903: PUSH
29904: LD_INT 99
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: PUSH
29916: FOR_IN
29917: IFFALSE 30137
// begin if not i in hackTanks then
29919: LD_VAR 0 1
29923: PUSH
29924: LD_EXP 85
29928: IN
29929: NOT
29930: IFFALSE 30013
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29932: LD_ADDR_EXP 85
29936: PUSH
29937: LD_EXP 85
29941: PPUSH
29942: LD_EXP 85
29946: PUSH
29947: LD_INT 1
29949: PLUS
29950: PPUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 1
29960: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29961: LD_ADDR_EXP 86
29965: PUSH
29966: LD_EXP 86
29970: PPUSH
29971: LD_EXP 86
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: PPUSH
29980: EMPTY
29981: PPUSH
29982: CALL_OW 1
29986: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29987: LD_ADDR_EXP 89
29991: PUSH
29992: LD_EXP 89
29996: PPUSH
29997: LD_EXP 89
30001: PUSH
30002: LD_INT 1
30004: PLUS
30005: PPUSH
30006: EMPTY
30007: PPUSH
30008: CALL_OW 1
30012: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL_OW 302
30022: NOT
30023: IFFALSE 30036
// begin HackUnlinkAll ( i ) ;
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL 30142 0 1
// continue ;
30034: GO 29916
// end ; HackCheckCapturedStatus ( i ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL 30587 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30045: LD_ADDR_VAR 0 2
30049: PUSH
30050: LD_INT 81
30052: PUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 255
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 33
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 91
30079: PUSH
30080: LD_VAR 0 1
30084: PUSH
30085: LD_EXP 88
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 50
30097: PUSH
30098: EMPTY
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: PPUSH
30107: CALL_OW 69
30111: ST_TO_ADDR
// if not tmp then
30112: LD_VAR 0 2
30116: NOT
30117: IFFALSE 30121
// continue ;
30119: GO 29916
// HackLink ( i , tmp ) ;
30121: LD_VAR 0 1
30125: PPUSH
30126: LD_VAR 0 2
30130: PPUSH
30131: CALL 30278 0 2
// end ;
30135: GO 29916
30137: POP
30138: POP
// end ;
30139: PPOPN 2
30141: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
30146: PPUSH
// if not hack in hackTanks then
30147: LD_VAR 0 1
30151: PUSH
30152: LD_EXP 85
30156: IN
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30273
// index := GetElementIndex ( hackTanks , hack ) ;
30162: LD_ADDR_VAR 0 4
30166: PUSH
30167: LD_EXP 85
30171: PPUSH
30172: LD_VAR 0 1
30176: PPUSH
30177: CALL 38741 0 2
30181: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30182: LD_EXP 86
30186: PUSH
30187: LD_VAR 0 4
30191: ARRAY
30192: IFFALSE 30273
// begin for i in hackTanksCaptured [ index ] do
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_EXP 86
30203: PUSH
30204: LD_VAR 0 4
30208: ARRAY
30209: PUSH
30210: FOR_IN
30211: IFFALSE 30237
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30213: LD_VAR 0 3
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: PPUSH
30231: CALL_OW 235
30235: GO 30210
30237: POP
30238: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30239: LD_ADDR_EXP 86
30243: PUSH
30244: LD_EXP 86
30248: PPUSH
30249: LD_VAR 0 4
30253: PPUSH
30254: EMPTY
30255: PPUSH
30256: CALL_OW 1
30260: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_INT 0
30268: PPUSH
30269: CALL_OW 505
// end ; end ;
30273: LD_VAR 0 2
30277: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30278: LD_INT 0
30280: PPUSH
30281: PPUSH
30282: PPUSH
// if not hack in hackTanks or not vehicles then
30283: LD_VAR 0 1
30287: PUSH
30288: LD_EXP 85
30292: IN
30293: NOT
30294: IFTRUE 30303
30296: PUSH
30297: LD_VAR 0 2
30301: NOT
30302: OR
30303: IFFALSE 30307
// exit ;
30305: GO 30582
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30307: LD_ADDR_VAR 0 2
30311: PUSH
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_INT 1
30324: PPUSH
30325: LD_INT 1
30327: PPUSH
30328: CALL 39393 0 4
30332: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30333: LD_ADDR_VAR 0 5
30337: PUSH
30338: LD_EXP 85
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL 38741 0 2
30352: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30353: LD_EXP 86
30357: PUSH
30358: LD_VAR 0 5
30362: ARRAY
30363: PUSH
30364: LD_EXP 87
30368: LESS
30369: IFFALSE 30558
// begin for i := 1 to vehicles do
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: DOUBLE
30377: LD_INT 1
30379: DEC
30380: ST_TO_ADDR
30381: LD_VAR 0 2
30385: PUSH
30386: FOR_TO
30387: IFFALSE 30556
// begin if hackTanksCaptured [ index ] = hackLimit then
30389: LD_EXP 86
30393: PUSH
30394: LD_VAR 0 5
30398: ARRAY
30399: PUSH
30400: LD_EXP 87
30404: EQUAL
30405: IFFALSE 30409
// break ;
30407: GO 30556
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30409: LD_ADDR_EXP 89
30413: PUSH
30414: LD_EXP 89
30418: PPUSH
30419: LD_VAR 0 5
30423: PPUSH
30424: LD_EXP 89
30428: PUSH
30429: LD_VAR 0 5
30433: ARRAY
30434: PUSH
30435: LD_INT 1
30437: PLUS
30438: PPUSH
30439: CALL_OW 1
30443: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30444: LD_ADDR_EXP 86
30448: PUSH
30449: LD_EXP 86
30453: PPUSH
30454: LD_VAR 0 5
30458: PUSH
30459: LD_EXP 86
30463: PUSH
30464: LD_VAR 0 5
30468: ARRAY
30469: PUSH
30470: LD_INT 1
30472: PLUS
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: LD_VAR 0 2
30482: PUSH
30483: LD_VAR 0 4
30487: ARRAY
30488: PUSH
30489: LD_VAR 0 2
30493: PUSH
30494: LD_VAR 0 4
30498: ARRAY
30499: PPUSH
30500: CALL_OW 255
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PPUSH
30509: CALL 38958 0 3
30513: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30514: LD_VAR 0 2
30518: PUSH
30519: LD_VAR 0 4
30523: ARRAY
30524: PPUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 255
30534: PPUSH
30535: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30539: LD_VAR 0 2
30543: PUSH
30544: LD_VAR 0 4
30548: ARRAY
30549: PPUSH
30550: CALL_OW 141
// end ;
30554: GO 30386
30556: POP
30557: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30558: LD_VAR 0 1
30562: PPUSH
30563: LD_EXP 86
30567: PUSH
30568: LD_VAR 0 5
30572: ARRAY
30573: PUSH
30574: LD_INT 0
30576: PLUS
30577: PPUSH
30578: CALL_OW 505
// end ;
30582: LD_VAR 0 3
30586: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30587: LD_INT 0
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
// if not hack in hackTanks then
30593: LD_VAR 0 1
30597: PUSH
30598: LD_EXP 85
30602: IN
30603: NOT
30604: IFFALSE 30608
// exit ;
30606: GO 30852
// index := GetElementIndex ( hackTanks , hack ) ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_EXP 85
30617: PPUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: CALL 38741 0 2
30627: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: DOUBLE
30634: LD_EXP 86
30638: PUSH
30639: LD_VAR 0 4
30643: ARRAY
30644: INC
30645: ST_TO_ADDR
30646: LD_INT 1
30648: PUSH
30649: FOR_DOWNTO
30650: IFFALSE 30826
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30652: LD_ADDR_VAR 0 5
30656: PUSH
30657: LD_EXP 86
30661: PUSH
30662: LD_VAR 0 4
30666: ARRAY
30667: PUSH
30668: LD_VAR 0 3
30672: ARRAY
30673: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30674: LD_VAR 0 5
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 302
30687: NOT
30688: IFTRUE 30716
30690: PUSH
30691: LD_VAR 0 5
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: CALL_OW 255
30704: PUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 255
30714: NONEQUAL
30715: OR
30716: IFFALSE 30824
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30718: LD_VAR 0 5
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: PPUSH
30727: CALL_OW 305
30731: IFFALSE 30759
30733: PUSH
30734: LD_VAR 0 5
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: CALL_OW 255
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 255
30757: EQUAL
30758: AND
30759: IFFALSE 30783
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30761: LD_VAR 0 5
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 5
30774: PUSH
30775: LD_INT 2
30777: ARRAY
30778: PPUSH
30779: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30783: LD_ADDR_EXP 86
30787: PUSH
30788: LD_EXP 86
30792: PPUSH
30793: LD_VAR 0 4
30797: PPUSH
30798: LD_EXP 86
30802: PUSH
30803: LD_VAR 0 4
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: CALL_OW 3
30818: PPUSH
30819: CALL_OW 1
30823: ST_TO_ADDR
// end ; end ;
30824: GO 30649
30826: POP
30827: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30828: LD_VAR 0 1
30832: PPUSH
30833: LD_EXP 86
30837: PUSH
30838: LD_VAR 0 4
30842: ARRAY
30843: PUSH
30844: LD_INT 0
30846: PLUS
30847: PPUSH
30848: CALL_OW 505
// end ;
30852: LD_VAR 0 2
30856: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
// if not hack in hackTanks then
30863: LD_VAR 0 1
30867: PUSH
30868: LD_EXP 85
30872: IN
30873: NOT
30874: IFFALSE 30878
// exit ;
30876: GO 30963
// index := GetElementIndex ( hackTanks , hack ) ;
30878: LD_ADDR_VAR 0 5
30882: PUSH
30883: LD_EXP 85
30887: PPUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL 38741 0 2
30897: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30898: LD_ADDR_VAR 0 4
30902: PUSH
30903: DOUBLE
30904: LD_INT 1
30906: DEC
30907: ST_TO_ADDR
30908: LD_EXP 86
30912: PUSH
30913: LD_VAR 0 5
30917: ARRAY
30918: PUSH
30919: FOR_TO
30920: IFFALSE 30961
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30922: LD_EXP 86
30926: PUSH
30927: LD_VAR 0 5
30931: ARRAY
30932: PUSH
30933: LD_VAR 0 4
30937: ARRAY
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PUSH
30943: LD_VAR 0 2
30947: EQUAL
30948: IFFALSE 30959
// KillUnit ( vehicle ) ;
30950: LD_VAR 0 2
30954: PPUSH
30955: CALL_OW 66
30959: GO 30919
30961: POP
30962: POP
// end ;
30963: LD_VAR 0 3
30967: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30968: LD_EXP 90
30972: NOT
30973: IFFALSE 31008
30975: GO 30977
30977: DISABLE
// begin initMiner := true ;
30978: LD_ADDR_EXP 90
30982: PUSH
30983: LD_INT 1
30985: ST_TO_ADDR
// minersList := [ ] ;
30986: LD_ADDR_EXP 91
30990: PUSH
30991: EMPTY
30992: ST_TO_ADDR
// minerMinesList := [ ] ;
30993: LD_ADDR_EXP 92
30997: PUSH
30998: EMPTY
30999: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31000: LD_ADDR_EXP 93
31004: PUSH
31005: LD_INT 5
31007: ST_TO_ADDR
// end ;
31008: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31009: LD_EXP 90
31013: IFFALSE 31031
31015: PUSH
31016: LD_INT 34
31018: PUSH
31019: LD_INT 81
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PPUSH
31026: CALL_OW 69
31030: AND
31031: IFFALSE 31494
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
// begin enable ;
31042: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_INT 34
31050: PUSH
31051: LD_INT 81
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PPUSH
31058: CALL_OW 69
31062: PUSH
31063: FOR_IN
31064: IFFALSE 31136
// begin if not i in minersList then
31066: LD_VAR 0 1
31070: PUSH
31071: LD_EXP 91
31075: IN
31076: NOT
31077: IFFALSE 31134
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31079: LD_ADDR_EXP 91
31083: PUSH
31084: LD_EXP 91
31088: PPUSH
31089: LD_EXP 91
31093: PUSH
31094: LD_INT 1
31096: PLUS
31097: PPUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 1
31107: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31108: LD_ADDR_EXP 92
31112: PUSH
31113: LD_EXP 92
31117: PPUSH
31118: LD_EXP 92
31122: PUSH
31123: LD_INT 1
31125: PLUS
31126: PPUSH
31127: EMPTY
31128: PPUSH
31129: CALL_OW 1
31133: ST_TO_ADDR
// end end ;
31134: GO 31063
31136: POP
31137: POP
// for i := minerMinesList downto 1 do
31138: LD_ADDR_VAR 0 1
31142: PUSH
31143: DOUBLE
31144: LD_EXP 92
31148: INC
31149: ST_TO_ADDR
31150: LD_INT 1
31152: PUSH
31153: FOR_DOWNTO
31154: IFFALSE 31492
// begin if IsLive ( minersList [ i ] ) then
31156: LD_EXP 91
31160: PUSH
31161: LD_VAR 0 1
31165: ARRAY
31166: PPUSH
31167: CALL_OW 300
31171: IFFALSE 31199
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31173: LD_EXP 91
31177: PUSH
31178: LD_VAR 0 1
31182: ARRAY
31183: PPUSH
31184: LD_EXP 92
31188: PUSH
31189: LD_VAR 0 1
31193: ARRAY
31194: PPUSH
31195: CALL_OW 505
// if not minerMinesList [ i ] then
31199: LD_EXP 92
31203: PUSH
31204: LD_VAR 0 1
31208: ARRAY
31209: NOT
31210: IFFALSE 31214
// continue ;
31212: GO 31153
// for j := minerMinesList [ i ] downto 1 do
31214: LD_ADDR_VAR 0 2
31218: PUSH
31219: DOUBLE
31220: LD_EXP 92
31224: PUSH
31225: LD_VAR 0 1
31229: ARRAY
31230: INC
31231: ST_TO_ADDR
31232: LD_INT 1
31234: PUSH
31235: FOR_DOWNTO
31236: IFFALSE 31488
// begin side := GetSide ( minersList [ i ] ) ;
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_EXP 91
31247: PUSH
31248: LD_VAR 0 1
31252: ARRAY
31253: PPUSH
31254: CALL_OW 255
31258: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_EXP 92
31268: PUSH
31269: LD_VAR 0 1
31273: ARRAY
31274: PUSH
31275: LD_VAR 0 2
31279: ARRAY
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: LD_EXP 92
31289: PUSH
31290: LD_VAR 0 1
31294: ARRAY
31295: PUSH
31296: LD_VAR 0 2
31300: ARRAY
31301: PUSH
31302: LD_INT 2
31304: ARRAY
31305: PPUSH
31306: CALL_OW 428
31310: ST_TO_ADDR
// if not tmp then
31311: LD_VAR 0 4
31315: NOT
31316: IFFALSE 31320
// continue ;
31318: GO 31235
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31320: LD_VAR 0 4
31324: PUSH
31325: LD_INT 81
31327: PUSH
31328: LD_VAR 0 3
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PPUSH
31337: CALL_OW 69
31341: IN
31342: IFFALSE 31392
31344: PUSH
31345: LD_EXP 92
31349: PUSH
31350: LD_VAR 0 1
31354: ARRAY
31355: PUSH
31356: LD_VAR 0 2
31360: ARRAY
31361: PUSH
31362: LD_INT 1
31364: ARRAY
31365: PPUSH
31366: LD_EXP 92
31370: PUSH
31371: LD_VAR 0 1
31375: ARRAY
31376: PUSH
31377: LD_VAR 0 2
31381: ARRAY
31382: PUSH
31383: LD_INT 2
31385: ARRAY
31386: PPUSH
31387: CALL_OW 458
31391: AND
31392: IFFALSE 31486
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31394: LD_EXP 92
31398: PUSH
31399: LD_VAR 0 1
31403: ARRAY
31404: PUSH
31405: LD_VAR 0 2
31409: ARRAY
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: LD_EXP 92
31419: PUSH
31420: LD_VAR 0 1
31424: ARRAY
31425: PUSH
31426: LD_VAR 0 2
31430: ARRAY
31431: PUSH
31432: LD_INT 2
31434: ARRAY
31435: PPUSH
31436: LD_VAR 0 3
31440: PPUSH
31441: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31445: LD_ADDR_EXP 92
31449: PUSH
31450: LD_EXP 92
31454: PPUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: LD_EXP 92
31464: PUSH
31465: LD_VAR 0 1
31469: ARRAY
31470: PPUSH
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL_OW 3
31480: PPUSH
31481: CALL_OW 1
31485: ST_TO_ADDR
// end ; end ;
31486: GO 31235
31488: POP
31489: POP
// end ;
31490: GO 31153
31492: POP
31493: POP
// end ;
31494: PPOPN 4
31496: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31497: LD_INT 0
31499: PPUSH
31500: PPUSH
// result := false ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_INT 0
31508: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 264
31518: PUSH
31519: LD_INT 81
31521: EQUAL
31522: NOT
31523: IFFALSE 31527
// exit ;
31525: GO 31771
// index := GetElementIndex ( minersList , unit ) ;
31527: LD_ADDR_VAR 0 5
31531: PUSH
31532: LD_EXP 91
31536: PPUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL 38741 0 2
31546: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31547: LD_EXP 92
31551: PUSH
31552: LD_VAR 0 5
31556: ARRAY
31557: PUSH
31558: LD_EXP 93
31562: GREATEREQUAL
31563: IFFALSE 31567
// exit ;
31565: GO 31771
// ComMoveXY ( unit , x , y ) ;
31567: LD_VAR 0 1
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31586: LD_INT 35
31588: PPUSH
31589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31593: LD_VAR 0 1
31597: PPUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL 70787 0 3
31612: NOT
31613: IFFALSE 31626
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 314
31625: AND
31626: IFFALSE 31630
// exit ;
31628: GO 31771
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31630: LD_VAR 0 2
31634: PPUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: CALL_OW 428
31644: PUSH
31645: LD_VAR 0 1
31649: EQUAL
31650: IFFALSE 31664
31652: PUSH
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 314
31662: NOT
31663: AND
31664: IFFALSE 31586
// PlaySoundXY ( x , y , PlantMine ) ;
31666: LD_VAR 0 2
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: LD_STRING PlantMine
31678: PPUSH
31679: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 255
31702: PPUSH
31703: LD_INT 0
31705: PPUSH
31706: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31710: LD_ADDR_EXP 92
31714: PUSH
31715: LD_EXP 92
31719: PPUSH
31720: LD_VAR 0 5
31724: PUSH
31725: LD_EXP 92
31729: PUSH
31730: LD_VAR 0 5
31734: ARRAY
31735: PUSH
31736: LD_INT 1
31738: PLUS
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PPUSH
31744: LD_VAR 0 2
31748: PUSH
31749: LD_VAR 0 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PPUSH
31758: CALL 38958 0 3
31762: ST_TO_ADDR
// result := true ;
31763: LD_ADDR_VAR 0 4
31767: PUSH
31768: LD_INT 1
31770: ST_TO_ADDR
// end ;
31771: LD_VAR 0 4
31775: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// if not unit in minersList then
31781: LD_VAR 0 1
31785: PUSH
31786: LD_EXP 91
31790: IN
31791: NOT
31792: IFFALSE 31796
// exit ;
31794: GO 32190
// index := GetElementIndex ( minersList , unit ) ;
31796: LD_ADDR_VAR 0 6
31800: PUSH
31801: LD_EXP 91
31805: PPUSH
31806: LD_VAR 0 1
31810: PPUSH
31811: CALL 38741 0 2
31815: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31816: LD_ADDR_VAR 0 5
31820: PUSH
31821: DOUBLE
31822: LD_EXP 92
31826: PUSH
31827: LD_VAR 0 6
31831: ARRAY
31832: INC
31833: ST_TO_ADDR
31834: LD_INT 1
31836: PUSH
31837: FOR_DOWNTO
31838: IFFALSE 32001
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31840: LD_EXP 92
31844: PUSH
31845: LD_VAR 0 6
31849: ARRAY
31850: PUSH
31851: LD_VAR 0 5
31855: ARRAY
31856: PUSH
31857: LD_INT 1
31859: ARRAY
31860: PUSH
31861: LD_VAR 0 2
31865: EQUAL
31866: IFFALSE 31896
31868: PUSH
31869: LD_EXP 92
31873: PUSH
31874: LD_VAR 0 6
31878: ARRAY
31879: PUSH
31880: LD_VAR 0 5
31884: ARRAY
31885: PUSH
31886: LD_INT 2
31888: ARRAY
31889: PUSH
31890: LD_VAR 0 3
31894: EQUAL
31895: AND
31896: IFFALSE 31999
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31898: LD_EXP 92
31902: PUSH
31903: LD_VAR 0 6
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 5
31913: ARRAY
31914: PUSH
31915: LD_INT 1
31917: ARRAY
31918: PPUSH
31919: LD_EXP 92
31923: PUSH
31924: LD_VAR 0 6
31928: ARRAY
31929: PUSH
31930: LD_VAR 0 5
31934: ARRAY
31935: PUSH
31936: LD_INT 2
31938: ARRAY
31939: PPUSH
31940: LD_VAR 0 1
31944: PPUSH
31945: CALL_OW 255
31949: PPUSH
31950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31954: LD_ADDR_EXP 92
31958: PUSH
31959: LD_EXP 92
31963: PPUSH
31964: LD_VAR 0 6
31968: PPUSH
31969: LD_EXP 92
31973: PUSH
31974: LD_VAR 0 6
31978: ARRAY
31979: PPUSH
31980: LD_VAR 0 5
31984: PPUSH
31985: CALL_OW 3
31989: PPUSH
31990: CALL_OW 1
31994: ST_TO_ADDR
// exit ;
31995: POP
31996: POP
31997: GO 32190
// end ; end ;
31999: GO 31837
32001: POP
32002: POP
// for i := minerMinesList [ index ] downto 1 do
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: DOUBLE
32009: LD_EXP 92
32013: PUSH
32014: LD_VAR 0 6
32018: ARRAY
32019: INC
32020: ST_TO_ADDR
32021: LD_INT 1
32023: PUSH
32024: FOR_DOWNTO
32025: IFFALSE 32188
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32027: LD_EXP 92
32031: PUSH
32032: LD_VAR 0 6
32036: ARRAY
32037: PUSH
32038: LD_VAR 0 5
32042: ARRAY
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: PPUSH
32048: LD_EXP 92
32052: PUSH
32053: LD_VAR 0 6
32057: ARRAY
32058: PUSH
32059: LD_VAR 0 5
32063: ARRAY
32064: PUSH
32065: LD_INT 2
32067: ARRAY
32068: PPUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: LD_VAR 0 3
32078: PPUSH
32079: CALL_OW 298
32083: PUSH
32084: LD_INT 6
32086: LESS
32087: IFFALSE 32186
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32089: LD_EXP 92
32093: PUSH
32094: LD_VAR 0 6
32098: ARRAY
32099: PUSH
32100: LD_VAR 0 5
32104: ARRAY
32105: PUSH
32106: LD_INT 1
32108: ARRAY
32109: PPUSH
32110: LD_EXP 92
32114: PUSH
32115: LD_VAR 0 6
32119: ARRAY
32120: PUSH
32121: LD_VAR 0 5
32125: ARRAY
32126: PUSH
32127: LD_INT 2
32129: ARRAY
32130: PPUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 255
32140: PPUSH
32141: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32145: LD_ADDR_EXP 92
32149: PUSH
32150: LD_EXP 92
32154: PPUSH
32155: LD_VAR 0 6
32159: PPUSH
32160: LD_EXP 92
32164: PUSH
32165: LD_VAR 0 6
32169: ARRAY
32170: PPUSH
32171: LD_VAR 0 5
32175: PPUSH
32176: CALL_OW 3
32180: PPUSH
32181: CALL_OW 1
32185: ST_TO_ADDR
// end ; end ;
32186: GO 32024
32188: POP
32189: POP
// end ;
32190: LD_VAR 0 4
32194: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
32205: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32206: LD_VAR 0 1
32210: PPUSH
32211: CALL_OW 264
32215: PUSH
32216: LD_INT 81
32218: EQUAL
32219: NOT
32220: IFTRUE 32235
32222: PUSH
32223: LD_VAR 0 1
32227: PUSH
32228: LD_EXP 91
32232: IN
32233: NOT
32234: OR
32235: IFFALSE 32239
// exit ;
32237: GO 32565
// index := GetElementIndex ( minersList , unit ) ;
32239: LD_ADDR_VAR 0 6
32243: PUSH
32244: LD_EXP 91
32248: PPUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL 38741 0 2
32258: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32259: LD_ADDR_VAR 0 8
32263: PUSH
32264: LD_EXP 93
32268: PUSH
32269: LD_EXP 92
32273: PUSH
32274: LD_VAR 0 6
32278: ARRAY
32279: MINUS
32280: ST_TO_ADDR
// if not minesFreeAmount then
32281: LD_VAR 0 8
32285: NOT
32286: IFFALSE 32290
// exit ;
32288: GO 32565
// tmp := [ ] ;
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: EMPTY
32296: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32297: LD_ADDR_VAR 0 5
32301: PUSH
32302: DOUBLE
32303: LD_INT 1
32305: DEC
32306: ST_TO_ADDR
32307: LD_VAR 0 8
32311: PUSH
32312: FOR_TO
32313: IFFALSE 32512
// begin _d := rand ( 0 , 5 ) ;
32315: LD_ADDR_VAR 0 11
32319: PUSH
32320: LD_INT 0
32322: PPUSH
32323: LD_INT 5
32325: PPUSH
32326: CALL_OW 12
32330: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32331: LD_ADDR_VAR 0 12
32335: PUSH
32336: LD_INT 2
32338: PPUSH
32339: LD_INT 6
32341: PPUSH
32342: CALL_OW 12
32346: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_VAR 0 2
32356: PPUSH
32357: LD_VAR 0 11
32361: PPUSH
32362: LD_VAR 0 12
32366: PPUSH
32367: CALL_OW 272
32371: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32372: LD_ADDR_VAR 0 10
32376: PUSH
32377: LD_VAR 0 3
32381: PPUSH
32382: LD_VAR 0 11
32386: PPUSH
32387: LD_VAR 0 12
32391: PPUSH
32392: CALL_OW 273
32396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32397: LD_VAR 0 9
32401: PPUSH
32402: LD_VAR 0 10
32406: PPUSH
32407: CALL_OW 488
32411: IFFALSE 32435
32413: PUSH
32414: LD_VAR 0 9
32418: PUSH
32419: LD_VAR 0 10
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_VAR 0 7
32432: IN
32433: NOT
32434: AND
32435: IFFALSE 32454
32437: PUSH
32438: LD_VAR 0 9
32442: PPUSH
32443: LD_VAR 0 10
32447: PPUSH
32448: CALL_OW 458
32452: NOT
32453: AND
32454: IFFALSE 32496
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32456: LD_ADDR_VAR 0 7
32460: PUSH
32461: LD_VAR 0 7
32465: PPUSH
32466: LD_VAR 0 7
32470: PUSH
32471: LD_INT 1
32473: PLUS
32474: PPUSH
32475: LD_VAR 0 9
32479: PUSH
32480: LD_VAR 0 10
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PPUSH
32489: CALL_OW 1
32493: ST_TO_ADDR
32494: GO 32510
// i := i - 1 ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_VAR 0 5
32505: PUSH
32506: LD_INT 1
32508: MINUS
32509: ST_TO_ADDR
// end ;
32510: GO 32312
32512: POP
32513: POP
// for i in tmp do
32514: LD_ADDR_VAR 0 5
32518: PUSH
32519: LD_VAR 0 7
32523: PUSH
32524: FOR_IN
32525: IFFALSE 32563
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32527: LD_VAR 0 1
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_INT 1
32539: ARRAY
32540: PPUSH
32541: LD_VAR 0 5
32545: PUSH
32546: LD_INT 2
32548: ARRAY
32549: PPUSH
32550: CALL 31497 0 3
32554: NOT
32555: IFFALSE 32561
// exit ;
32557: POP
32558: POP
32559: GO 32565
32561: GO 32524
32563: POP
32564: POP
// end ;
32565: LD_VAR 0 4
32569: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
// if GetClass ( unit ) <> class_sniper then
32581: LD_VAR 0 1
32585: PPUSH
32586: CALL_OW 257
32590: PUSH
32591: LD_INT 5
32593: NONEQUAL
32594: IFFALSE 32598
// exit ;
32596: GO 33068
// dist := 8 ;
32598: LD_ADDR_VAR 0 5
32602: PUSH
32603: LD_INT 8
32605: ST_TO_ADDR
// viewRange := 12 ;
32606: LD_ADDR_VAR 0 8
32610: PUSH
32611: LD_INT 12
32613: ST_TO_ADDR
// side := GetSide ( unit ) ;
32614: LD_ADDR_VAR 0 6
32618: PUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 255
32628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32629: LD_INT 61
32631: PPUSH
32632: LD_VAR 0 6
32636: PPUSH
32637: CALL_OW 321
32641: PUSH
32642: LD_INT 2
32644: EQUAL
32645: IFFALSE 32655
// viewRange := 16 ;
32647: LD_ADDR_VAR 0 8
32651: PUSH
32652: LD_INT 16
32654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_VAR 0 2
32664: PPUSH
32665: LD_VAR 0 3
32669: PPUSH
32670: CALL_OW 297
32674: PUSH
32675: LD_VAR 0 5
32679: GREATER
32680: IFFALSE 32759
// begin ComMoveXY ( unit , x , y ) ;
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32701: LD_INT 35
32703: PPUSH
32704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32708: LD_VAR 0 1
32712: PPUSH
32713: LD_VAR 0 2
32717: PPUSH
32718: LD_VAR 0 3
32722: PPUSH
32723: CALL 70787 0 3
32727: NOT
32728: IFFALSE 32732
// exit ;
32730: GO 33068
// until GetDistUnitXY ( unit , x , y ) < dist ;
32732: LD_VAR 0 1
32736: PPUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: LD_VAR 0 3
32746: PPUSH
32747: CALL_OW 297
32751: PUSH
32752: LD_VAR 0 5
32756: LESS
32757: IFFALSE 32701
// end ; ComTurnXY ( unit , x , y ) ;
32759: LD_VAR 0 1
32763: PPUSH
32764: LD_VAR 0 2
32768: PPUSH
32769: LD_VAR 0 3
32773: PPUSH
32774: CALL_OW 118
// repeat if Multiplayer then
32778: LD_OWVAR 4
32782: IFFALSE 32793
// wait ( 35 ) else
32784: LD_INT 35
32786: PPUSH
32787: CALL_OW 67
32791: GO 32800
// wait ( 5 ) ;
32793: LD_INT 5
32795: PPUSH
32796: CALL_OW 67
// _d := GetDir ( unit ) ;
32800: LD_ADDR_VAR 0 11
32804: PUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 254
32814: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32815: LD_ADDR_VAR 0 7
32819: PUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 250
32829: PPUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 251
32839: PPUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL 73423 0 4
32854: ST_TO_ADDR
// until dir = _d ;
32855: LD_VAR 0 7
32859: PUSH
32860: LD_VAR 0 11
32864: EQUAL
32865: IFFALSE 32778
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 250
32881: PPUSH
32882: LD_VAR 0 7
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 272
32896: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32897: LD_ADDR_VAR 0 10
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 251
32911: PPUSH
32912: LD_VAR 0 7
32916: PPUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: CALL_OW 273
32926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32927: LD_VAR 0 9
32931: PPUSH
32932: LD_VAR 0 10
32936: PPUSH
32937: CALL_OW 488
32941: NOT
32942: IFFALSE 32946
// exit ;
32944: GO 33068
// ComAnimCustom ( unit , 1 ) ;
32946: LD_VAR 0 1
32950: PPUSH
32951: LD_INT 1
32953: PPUSH
32954: CALL_OW 592
// p := 0 ;
32958: LD_ADDR_VAR 0 12
32962: PUSH
32963: LD_INT 0
32965: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32966: LD_VAR 0 9
32970: PPUSH
32971: LD_VAR 0 10
32975: PPUSH
32976: LD_VAR 0 6
32980: PPUSH
32981: LD_VAR 0 8
32985: PPUSH
32986: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32990: LD_INT 35
32992: PPUSH
32993: CALL_OW 67
// p := Inc ( p ) ;
32997: LD_ADDR_VAR 0 12
33001: PUSH
33002: LD_VAR 0 12
33006: PPUSH
33007: CALL 73379 0 1
33011: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33012: LD_VAR 0 12
33016: PUSH
33017: LD_INT 3
33019: EQUAL
33020: IFTRUE 33034
33022: PUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 302
33032: NOT
33033: OR
33034: IFTRUE 33047
33036: PUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL_OW 301
33046: OR
33047: IFFALSE 32990
// RemoveSeeing ( _x , _y , side ) ;
33049: LD_VAR 0 9
33053: PPUSH
33054: LD_VAR 0 10
33058: PPUSH
33059: LD_VAR 0 6
33063: PPUSH
33064: CALL_OW 331
// end ;
33068: LD_VAR 0 4
33072: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
// if not unit then
33086: LD_VAR 0 1
33090: NOT
33091: IFFALSE 33095
// exit ;
33093: GO 33366
// side := GetSide ( unit ) ;
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 255
33109: ST_TO_ADDR
// x := GetX ( unit ) ;
33110: LD_ADDR_VAR 0 5
33114: PUSH
33115: LD_VAR 0 1
33119: PPUSH
33120: CALL_OW 250
33124: ST_TO_ADDR
// y := GetY ( unit ) ;
33125: LD_ADDR_VAR 0 6
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 251
33139: ST_TO_ADDR
// r := 8 ;
33140: LD_ADDR_VAR 0 4
33144: PUSH
33145: LD_INT 8
33147: ST_TO_ADDR
// if x - r < 0 then
33148: LD_VAR 0 5
33152: PUSH
33153: LD_VAR 0 4
33157: MINUS
33158: PUSH
33159: LD_INT 0
33161: LESS
33162: IFFALSE 33174
// min_x := 0 else
33164: LD_ADDR_VAR 0 7
33168: PUSH
33169: LD_INT 0
33171: ST_TO_ADDR
33172: GO 33190
// min_x := x - r ;
33174: LD_ADDR_VAR 0 7
33178: PUSH
33179: LD_VAR 0 5
33183: PUSH
33184: LD_VAR 0 4
33188: MINUS
33189: ST_TO_ADDR
// if y - r < 0 then
33190: LD_VAR 0 6
33194: PUSH
33195: LD_VAR 0 4
33199: MINUS
33200: PUSH
33201: LD_INT 0
33203: LESS
33204: IFFALSE 33216
// min_y := 0 else
33206: LD_ADDR_VAR 0 8
33210: PUSH
33211: LD_INT 0
33213: ST_TO_ADDR
33214: GO 33232
// min_y := y - r ;
33216: LD_ADDR_VAR 0 8
33220: PUSH
33221: LD_VAR 0 6
33225: PUSH
33226: LD_VAR 0 4
33230: MINUS
33231: ST_TO_ADDR
// max_x := x + r ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: LD_VAR 0 5
33241: PUSH
33242: LD_VAR 0 4
33246: PLUS
33247: ST_TO_ADDR
// max_y := y + r ;
33248: LD_ADDR_VAR 0 10
33252: PUSH
33253: LD_VAR 0 6
33257: PUSH
33258: LD_VAR 0 4
33262: PLUS
33263: ST_TO_ADDR
// for _x = min_x to max_x do
33264: LD_ADDR_VAR 0 11
33268: PUSH
33269: DOUBLE
33270: LD_VAR 0 7
33274: DEC
33275: ST_TO_ADDR
33276: LD_VAR 0 9
33280: PUSH
33281: FOR_TO
33282: IFFALSE 33364
// for _y = min_y to max_y do
33284: LD_ADDR_VAR 0 12
33288: PUSH
33289: DOUBLE
33290: LD_VAR 0 8
33294: DEC
33295: ST_TO_ADDR
33296: LD_VAR 0 10
33300: PUSH
33301: FOR_TO
33302: IFFALSE 33360
// begin if not ValidHex ( _x , _y ) then
33304: LD_VAR 0 11
33308: PPUSH
33309: LD_VAR 0 12
33313: PPUSH
33314: CALL_OW 488
33318: NOT
33319: IFFALSE 33323
// continue ;
33321: GO 33301
// if MineAtPos ( _x , _y ) then
33323: LD_VAR 0 11
33327: PPUSH
33328: LD_VAR 0 12
33332: PPUSH
33333: CALL_OW 458
33337: IFFALSE 33358
// ViewMineAtPos ( _x , _y , side ) ;
33339: LD_VAR 0 11
33343: PPUSH
33344: LD_VAR 0 12
33348: PPUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: CALL_OW 457
// end ;
33358: GO 33301
33360: POP
33361: POP
33362: GO 33281
33364: POP
33365: POP
// end ;
33366: LD_VAR 0 2
33370: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
33371: LD_INT 0
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
// if not units then
33379: LD_VAR 0 1
33383: NOT
33384: IFFALSE 33388
// exit ;
33386: GO 33818
// scaners := [ ] ;
33388: LD_ADDR_VAR 0 6
33392: PUSH
33393: EMPTY
33394: ST_TO_ADDR
// for i in units do
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_VAR 0 1
33404: PUSH
33405: FOR_IN
33406: IFFALSE 33563
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33408: LD_VAR 0 3
33412: PPUSH
33413: CALL_OW 264
33417: PUSH
33418: LD_INT 11
33420: NONEQUAL
33421: IFTRUE 33435
33423: PUSH
33424: LD_VAR 0 3
33428: PPUSH
33429: CALL_OW 302
33433: NOT
33434: OR
33435: IFTRUE 33452
33437: PUSH
33438: LD_VAR 0 3
33442: PPUSH
33443: CALL_OW 110
33447: PUSH
33448: LD_INT 502
33450: EQUAL
33451: OR
33452: IFFALSE 33456
// continue ;
33454: GO 33405
// ComStop ( i ) ;
33456: LD_VAR 0 3
33460: PPUSH
33461: CALL_OW 141
// x := GetX ( i ) ;
33465: LD_ADDR_VAR 0 4
33469: PUSH
33470: LD_VAR 0 3
33474: PPUSH
33475: CALL_OW 250
33479: ST_TO_ADDR
// y := GetY ( i ) ;
33480: LD_ADDR_VAR 0 5
33484: PUSH
33485: LD_VAR 0 3
33489: PPUSH
33490: CALL_OW 251
33494: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33495: LD_VAR 0 3
33499: PPUSH
33500: CALL_OW 255
33504: PUSH
33505: LD_OWVAR 2
33509: EQUAL
33510: IFFALSE 33529
// PlaySoundXY ( x , y , mineDetector ) ;
33512: LD_VAR 0 4
33516: PPUSH
33517: LD_VAR 0 5
33521: PPUSH
33522: LD_STRING mineDetector
33524: PPUSH
33525: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33529: LD_ADDR_VAR 0 6
33533: PUSH
33534: LD_VAR 0 6
33538: PPUSH
33539: LD_VAR 0 3
33543: PPUSH
33544: CALL 72006 0 2
33548: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33549: LD_VAR 0 3
33553: PPUSH
33554: LD_INT 502
33556: PPUSH
33557: CALL_OW 109
// end ;
33561: GO 33405
33563: POP
33564: POP
// if not scaners then
33565: LD_VAR 0 6
33569: NOT
33570: IFFALSE 33574
// exit ;
33572: GO 33818
// wait ( 3 ) ;
33574: LD_INT 3
33576: PPUSH
33577: CALL_OW 67
// timer := 6 ;
33581: LD_ADDR_VAR 0 7
33585: PUSH
33586: LD_INT 6
33588: ST_TO_ADDR
// repeat for i in scaners do
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_VAR 0 6
33598: PUSH
33599: FOR_IN
33600: IFFALSE 33716
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33602: LD_VAR 0 3
33606: PPUSH
33607: CALL_OW 302
33611: NOT
33612: IFTRUE 33625
33614: PUSH
33615: LD_VAR 0 3
33619: PPUSH
33620: CALL_OW 314
33624: OR
33625: IFTRUE 33656
33627: PUSH
33628: LD_VAR 0 3
33632: PPUSH
33633: CALL_OW 263
33637: PUSH
33638: LD_INT 1
33640: EQUAL
33641: IFFALSE 33655
33643: PUSH
33644: LD_VAR 0 3
33648: PPUSH
33649: CALL_OW 311
33653: NOT
33654: AND
33655: OR
33656: IFFALSE 33700
// begin SetUnitDisplayNumber ( i , 0 ) ;
33658: LD_VAR 0 3
33662: PPUSH
33663: LD_INT 0
33665: PPUSH
33666: CALL_OW 505
// SetTag ( i , 0 ) ;
33670: LD_VAR 0 3
33674: PPUSH
33675: LD_INT 0
33677: PPUSH
33678: CALL_OW 109
// scaners := scaners diff i ;
33682: LD_ADDR_VAR 0 6
33686: PUSH
33687: LD_VAR 0 6
33691: PUSH
33692: LD_VAR 0 3
33696: DIFF
33697: ST_TO_ADDR
// continue ;
33698: GO 33599
// end ; SetUnitDisplayNumber ( i , timer ) ;
33700: LD_VAR 0 3
33704: PPUSH
33705: LD_VAR 0 7
33709: PPUSH
33710: CALL_OW 505
// end ;
33714: GO 33599
33716: POP
33717: POP
// if not scaners then
33718: LD_VAR 0 6
33722: NOT
33723: IFFALSE 33727
// exit ;
33725: GO 33818
// timer := Dec ( timer ) ;
33727: LD_ADDR_VAR 0 7
33731: PUSH
33732: LD_VAR 0 7
33736: PPUSH
33737: CALL 73401 0 1
33741: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33742: LD_INT 35
33744: PPUSH
33745: CALL_OW 67
// until timer = 0 ;
33749: LD_VAR 0 7
33753: PUSH
33754: LD_INT 0
33756: EQUAL
33757: IFFALSE 33589
// if not scaners then
33759: LD_VAR 0 6
33763: NOT
33764: IFFALSE 33768
// exit ;
33766: GO 33818
// for i in scaners do
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 6
33777: PUSH
33778: FOR_IN
33779: IFFALSE 33816
// begin SetUnitDisplayNumber ( i , 0 ) ;
33781: LD_VAR 0 3
33785: PPUSH
33786: LD_INT 0
33788: PPUSH
33789: CALL_OW 505
// SetTag ( i , 0 ) ;
33793: LD_VAR 0 3
33797: PPUSH
33798: LD_INT 0
33800: PPUSH
33801: CALL_OW 109
// RevealDetectorMine ( i ) ;
33805: LD_VAR 0 3
33809: PPUSH
33810: CALL 33073 0 1
// end ;
33814: GO 33778
33816: POP
33817: POP
// end ;
33818: LD_VAR 0 2
33822: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33823: LD_INT 0
33825: PPUSH
// if p1 = mine_detector_mode then
33826: LD_VAR 0 2
33830: PUSH
33831: LD_INT 103
33833: EQUAL
33834: IFFALSE 33845
// DetectMine ( units ) ;
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL 33371 0 1
// end ; end_of_file
33845: LD_VAR 0 7
33849: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
// if exist_mode then
33854: LD_VAR 0 2
33858: IFFALSE 33904
// begin unit := CreateCharacter ( prefix & ident ) ;
33860: LD_ADDR_VAR 0 5
33864: PUSH
33865: LD_VAR 0 3
33869: PUSH
33870: LD_VAR 0 1
33874: STR
33875: PPUSH
33876: CALL_OW 34
33880: ST_TO_ADDR
// if unit then
33881: LD_VAR 0 5
33885: IFFALSE 33902
// DeleteCharacters ( prefix & ident ) ;
33887: LD_VAR 0 3
33891: PUSH
33892: LD_VAR 0 1
33896: STR
33897: PPUSH
33898: CALL_OW 40
// end else
33902: GO 33919
// unit := NewCharacter ( ident ) ;
33904: LD_ADDR_VAR 0 5
33908: PUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 25
33918: ST_TO_ADDR
// result := unit ;
33919: LD_ADDR_VAR 0 4
33923: PUSH
33924: LD_VAR 0 5
33928: ST_TO_ADDR
// end ;
33929: LD_VAR 0 4
33933: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// if exist_mode then
33938: LD_VAR 0 2
33942: IFFALSE 33967
// unit := CreateCharacter ( prefix & ident ) else
33944: LD_ADDR_VAR 0 5
33948: PUSH
33949: LD_VAR 0 3
33953: PUSH
33954: LD_VAR 0 1
33958: STR
33959: PPUSH
33960: CALL_OW 34
33964: ST_TO_ADDR
33965: GO 33982
// unit := NewCharacter ( ident ) ;
33967: LD_ADDR_VAR 0 5
33971: PUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL_OW 25
33981: ST_TO_ADDR
// result := unit ;
33982: LD_ADDR_VAR 0 4
33986: PUSH
33987: LD_VAR 0 5
33991: ST_TO_ADDR
// end ;
33992: LD_VAR 0 4
33996: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33997: LD_INT 0
33999: PPUSH
34000: PPUSH
// if not side or not nation then
34001: LD_VAR 0 1
34005: NOT
34006: IFTRUE 34015
34008: PUSH
34009: LD_VAR 0 2
34013: NOT
34014: OR
34015: IFFALSE 34019
// exit ;
34017: GO 34813
// case nation of nation_american :
34019: LD_VAR 0 2
34023: PUSH
34024: LD_INT 1
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34254
34032: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
34033: LD_ADDR_VAR 0 4
34037: PUSH
34038: LD_INT 35
34040: PUSH
34041: LD_INT 45
34043: PUSH
34044: LD_INT 46
34046: PUSH
34047: LD_INT 47
34049: PUSH
34050: LD_INT 82
34052: PUSH
34053: LD_INT 83
34055: PUSH
34056: LD_INT 84
34058: PUSH
34059: LD_INT 85
34061: PUSH
34062: LD_INT 86
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 6
34073: PUSH
34074: LD_INT 15
34076: PUSH
34077: LD_INT 16
34079: PUSH
34080: LD_INT 7
34082: PUSH
34083: LD_INT 12
34085: PUSH
34086: LD_INT 13
34088: PUSH
34089: LD_INT 10
34091: PUSH
34092: LD_INT 14
34094: PUSH
34095: LD_INT 20
34097: PUSH
34098: LD_INT 21
34100: PUSH
34101: LD_INT 22
34103: PUSH
34104: LD_INT 25
34106: PUSH
34107: LD_INT 32
34109: PUSH
34110: LD_INT 27
34112: PUSH
34113: LD_INT 36
34115: PUSH
34116: LD_INT 69
34118: PUSH
34119: LD_INT 39
34121: PUSH
34122: LD_INT 34
34124: PUSH
34125: LD_INT 40
34127: PUSH
34128: LD_INT 48
34130: PUSH
34131: LD_INT 49
34133: PUSH
34134: LD_INT 50
34136: PUSH
34137: LD_INT 51
34139: PUSH
34140: LD_INT 52
34142: PUSH
34143: LD_INT 53
34145: PUSH
34146: LD_INT 54
34148: PUSH
34149: LD_INT 55
34151: PUSH
34152: LD_INT 56
34154: PUSH
34155: LD_INT 57
34157: PUSH
34158: LD_INT 58
34160: PUSH
34161: LD_INT 59
34163: PUSH
34164: LD_INT 60
34166: PUSH
34167: LD_INT 61
34169: PUSH
34170: LD_INT 62
34172: PUSH
34173: LD_INT 80
34175: PUSH
34176: LD_INT 82
34178: PUSH
34179: LD_INT 83
34181: PUSH
34182: LD_INT 84
34184: PUSH
34185: LD_INT 85
34187: PUSH
34188: LD_INT 86
34190: PUSH
34191: LD_INT 90
34193: PUSH
34194: LD_INT 93
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: ST_TO_ADDR
34252: GO 34735
34254: LD_INT 2
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34496
34262: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
34263: LD_ADDR_VAR 0 4
34267: PUSH
34268: LD_INT 35
34270: PUSH
34271: LD_INT 45
34273: PUSH
34274: LD_INT 46
34276: PUSH
34277: LD_INT 47
34279: PUSH
34280: LD_INT 82
34282: PUSH
34283: LD_INT 83
34285: PUSH
34286: LD_INT 84
34288: PUSH
34289: LD_INT 85
34291: PUSH
34292: LD_INT 87
34294: PUSH
34295: LD_INT 70
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 11
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: LD_INT 4
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: LD_INT 6
34315: PUSH
34316: LD_INT 15
34318: PUSH
34319: LD_INT 18
34321: PUSH
34322: LD_INT 7
34324: PUSH
34325: LD_INT 17
34327: PUSH
34328: LD_INT 8
34330: PUSH
34331: LD_INT 20
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 22
34339: PUSH
34340: LD_INT 72
34342: PUSH
34343: LD_INT 26
34345: PUSH
34346: LD_INT 69
34348: PUSH
34349: LD_INT 39
34351: PUSH
34352: LD_INT 40
34354: PUSH
34355: LD_INT 41
34357: PUSH
34358: LD_INT 42
34360: PUSH
34361: LD_INT 43
34363: PUSH
34364: LD_INT 48
34366: PUSH
34367: LD_INT 49
34369: PUSH
34370: LD_INT 50
34372: PUSH
34373: LD_INT 51
34375: PUSH
34376: LD_INT 52
34378: PUSH
34379: LD_INT 53
34381: PUSH
34382: LD_INT 54
34384: PUSH
34385: LD_INT 55
34387: PUSH
34388: LD_INT 56
34390: PUSH
34391: LD_INT 60
34393: PUSH
34394: LD_INT 61
34396: PUSH
34397: LD_INT 62
34399: PUSH
34400: LD_INT 66
34402: PUSH
34403: LD_INT 67
34405: PUSH
34406: LD_INT 68
34408: PUSH
34409: LD_INT 81
34411: PUSH
34412: LD_INT 82
34414: PUSH
34415: LD_INT 83
34417: PUSH
34418: LD_INT 84
34420: PUSH
34421: LD_INT 85
34423: PUSH
34424: LD_INT 87
34426: PUSH
34427: LD_INT 88
34429: PUSH
34430: LD_INT 92
34432: PUSH
34433: LD_INT 94
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
34494: GO 34735
34496: LD_INT 3
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34734
34504: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34505: LD_ADDR_VAR 0 4
34509: PUSH
34510: LD_INT 46
34512: PUSH
34513: LD_INT 47
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 82
34524: PUSH
34525: LD_INT 83
34527: PUSH
34528: LD_INT 84
34530: PUSH
34531: LD_INT 85
34533: PUSH
34534: LD_INT 86
34536: PUSH
34537: LD_INT 11
34539: PUSH
34540: LD_INT 9
34542: PUSH
34543: LD_INT 20
34545: PUSH
34546: LD_INT 19
34548: PUSH
34549: LD_INT 21
34551: PUSH
34552: LD_INT 24
34554: PUSH
34555: LD_INT 22
34557: PUSH
34558: LD_INT 25
34560: PUSH
34561: LD_INT 28
34563: PUSH
34564: LD_INT 29
34566: PUSH
34567: LD_INT 30
34569: PUSH
34570: LD_INT 31
34572: PUSH
34573: LD_INT 37
34575: PUSH
34576: LD_INT 38
34578: PUSH
34579: LD_INT 32
34581: PUSH
34582: LD_INT 27
34584: PUSH
34585: LD_INT 33
34587: PUSH
34588: LD_INT 69
34590: PUSH
34591: LD_INT 39
34593: PUSH
34594: LD_INT 34
34596: PUSH
34597: LD_INT 40
34599: PUSH
34600: LD_INT 71
34602: PUSH
34603: LD_INT 23
34605: PUSH
34606: LD_INT 44
34608: PUSH
34609: LD_INT 48
34611: PUSH
34612: LD_INT 49
34614: PUSH
34615: LD_INT 50
34617: PUSH
34618: LD_INT 51
34620: PUSH
34621: LD_INT 52
34623: PUSH
34624: LD_INT 53
34626: PUSH
34627: LD_INT 54
34629: PUSH
34630: LD_INT 55
34632: PUSH
34633: LD_INT 56
34635: PUSH
34636: LD_INT 57
34638: PUSH
34639: LD_INT 58
34641: PUSH
34642: LD_INT 59
34644: PUSH
34645: LD_INT 63
34647: PUSH
34648: LD_INT 64
34650: PUSH
34651: LD_INT 65
34653: PUSH
34654: LD_INT 82
34656: PUSH
34657: LD_INT 83
34659: PUSH
34660: LD_INT 84
34662: PUSH
34663: LD_INT 85
34665: PUSH
34666: LD_INT 86
34668: PUSH
34669: LD_INT 89
34671: PUSH
34672: LD_INT 91
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: ST_TO_ADDR
34732: GO 34735
34734: POP
// if state > - 1 and state < 3 then
34735: LD_VAR 0 3
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: GREATER
34744: IFFALSE 34756
34746: PUSH
34747: LD_VAR 0 3
34751: PUSH
34752: LD_INT 3
34754: LESS
34755: AND
34756: IFFALSE 34813
// for i in result do
34758: LD_ADDR_VAR 0 5
34762: PUSH
34763: LD_VAR 0 4
34767: PUSH
34768: FOR_IN
34769: IFFALSE 34811
// if GetTech ( i , side ) <> state then
34771: LD_VAR 0 5
34775: PPUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 321
34785: PUSH
34786: LD_VAR 0 3
34790: NONEQUAL
34791: IFFALSE 34809
// result := result diff i ;
34793: LD_ADDR_VAR 0 4
34797: PUSH
34798: LD_VAR 0 4
34802: PUSH
34803: LD_VAR 0 5
34807: DIFF
34808: ST_TO_ADDR
34809: GO 34768
34811: POP
34812: POP
// end ;
34813: LD_VAR 0 4
34817: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34818: LD_INT 0
34820: PPUSH
34821: PPUSH
34822: PPUSH
// result := true ;
34823: LD_ADDR_VAR 0 3
34827: PUSH
34828: LD_INT 1
34830: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34831: LD_ADDR_VAR 0 5
34835: PUSH
34836: LD_VAR 0 2
34840: PPUSH
34841: CALL_OW 480
34845: ST_TO_ADDR
// if not tmp then
34846: LD_VAR 0 5
34850: NOT
34851: IFFALSE 34855
// exit ;
34853: GO 34904
// for i in tmp do
34855: LD_ADDR_VAR 0 4
34859: PUSH
34860: LD_VAR 0 5
34864: PUSH
34865: FOR_IN
34866: IFFALSE 34902
// if GetTech ( i , side ) <> state_researched then
34868: LD_VAR 0 4
34872: PPUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: CALL_OW 321
34882: PUSH
34883: LD_INT 2
34885: NONEQUAL
34886: IFFALSE 34900
// begin result := false ;
34888: LD_ADDR_VAR 0 3
34892: PUSH
34893: LD_INT 0
34895: ST_TO_ADDR
// exit ;
34896: POP
34897: POP
34898: GO 34904
// end ;
34900: GO 34865
34902: POP
34903: POP
// end ;
34904: LD_VAR 0 3
34908: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34909: LD_INT 0
34911: PPUSH
34912: PPUSH
34913: PPUSH
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34924: LD_VAR 0 1
34928: NOT
34929: IFTRUE 34946
34931: PUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 257
34941: PUSH
34942: LD_INT 9
34944: NONEQUAL
34945: OR
34946: IFFALSE 34950
// exit ;
34948: GO 35529
// side := GetSide ( unit ) ;
34950: LD_ADDR_VAR 0 9
34954: PUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 255
34964: ST_TO_ADDR
// tech_space := tech_spacanom ;
34965: LD_ADDR_VAR 0 12
34969: PUSH
34970: LD_INT 29
34972: ST_TO_ADDR
// tech_time := tech_taurad ;
34973: LD_ADDR_VAR 0 13
34977: PUSH
34978: LD_INT 28
34980: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34981: LD_ADDR_VAR 0 11
34985: PUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 310
34995: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34996: LD_VAR 0 11
35000: PPUSH
35001: CALL_OW 247
35005: PUSH
35006: LD_INT 2
35008: EQUAL
35009: IFFALSE 35013
// exit ;
35011: GO 35529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35013: LD_ADDR_VAR 0 8
35017: PUSH
35018: LD_INT 81
35020: PUSH
35021: LD_VAR 0 9
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 21
35035: PUSH
35036: LD_INT 3
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PPUSH
35051: CALL_OW 69
35055: ST_TO_ADDR
// if not tmp then
35056: LD_VAR 0 8
35060: NOT
35061: IFFALSE 35065
// exit ;
35063: GO 35529
// if in_unit then
35065: LD_VAR 0 11
35069: IFFALSE 35093
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35071: LD_ADDR_VAR 0 10
35075: PUSH
35076: LD_VAR 0 8
35080: PPUSH
35081: LD_VAR 0 11
35085: PPUSH
35086: CALL_OW 74
35090: ST_TO_ADDR
35091: GO 35113
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35093: LD_ADDR_VAR 0 10
35097: PUSH
35098: LD_VAR 0 8
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 74
35112: ST_TO_ADDR
// if not enemy then
35113: LD_VAR 0 10
35117: NOT
35118: IFFALSE 35122
// exit ;
35120: GO 35529
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35122: LD_VAR 0 11
35126: IFFALSE 35148
35128: PUSH
35129: LD_VAR 0 11
35133: PPUSH
35134: LD_VAR 0 10
35138: PPUSH
35139: CALL_OW 296
35143: PUSH
35144: LD_INT 13
35146: GREATER
35147: AND
35148: IFTRUE 35170
35150: PUSH
35151: LD_VAR 0 1
35155: PPUSH
35156: LD_VAR 0 10
35160: PPUSH
35161: CALL_OW 296
35165: PUSH
35166: LD_INT 12
35168: GREATER
35169: OR
35170: IFFALSE 35174
// exit ;
35172: GO 35529
// missile := [ 1 ] ;
35174: LD_ADDR_VAR 0 14
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35185: LD_VAR 0 9
35189: PPUSH
35190: LD_VAR 0 12
35194: PPUSH
35195: CALL_OW 325
35199: IFFALSE 35228
// missile := Replace ( missile , missile + 1 , 2 ) ;
35201: LD_ADDR_VAR 0 14
35205: PUSH
35206: LD_VAR 0 14
35210: PPUSH
35211: LD_VAR 0 14
35215: PUSH
35216: LD_INT 1
35218: PLUS
35219: PPUSH
35220: LD_INT 2
35222: PPUSH
35223: CALL_OW 1
35227: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35228: LD_VAR 0 9
35232: PPUSH
35233: LD_VAR 0 13
35237: PPUSH
35238: CALL_OW 325
35242: IFFALSE 35266
35244: PUSH
35245: LD_VAR 0 10
35249: PPUSH
35250: CALL_OW 255
35254: PPUSH
35255: LD_VAR 0 13
35259: PPUSH
35260: CALL_OW 325
35264: NOT
35265: AND
35266: IFFALSE 35295
// missile := Replace ( missile , missile + 1 , 3 ) ;
35268: LD_ADDR_VAR 0 14
35272: PUSH
35273: LD_VAR 0 14
35277: PPUSH
35278: LD_VAR 0 14
35282: PUSH
35283: LD_INT 1
35285: PLUS
35286: PPUSH
35287: LD_INT 3
35289: PPUSH
35290: CALL_OW 1
35294: ST_TO_ADDR
// if missile < 2 then
35295: LD_VAR 0 14
35299: PUSH
35300: LD_INT 2
35302: LESS
35303: IFFALSE 35307
// exit ;
35305: GO 35529
// x := GetX ( enemy ) ;
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: LD_VAR 0 10
35316: PPUSH
35317: CALL_OW 250
35321: ST_TO_ADDR
// y := GetY ( enemy ) ;
35322: LD_ADDR_VAR 0 5
35326: PUSH
35327: LD_VAR 0 10
35331: PPUSH
35332: CALL_OW 251
35336: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35337: LD_ADDR_VAR 0 6
35341: PUSH
35342: LD_VAR 0 4
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PPUSH
35351: LD_INT 1
35353: PPUSH
35354: CALL_OW 12
35358: PLUS
35359: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35360: LD_ADDR_VAR 0 7
35364: PUSH
35365: LD_VAR 0 5
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 12
35381: PLUS
35382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35383: LD_VAR 0 6
35387: PPUSH
35388: LD_VAR 0 7
35392: PPUSH
35393: CALL_OW 488
35397: NOT
35398: IFFALSE 35420
// begin _x := x ;
35400: LD_ADDR_VAR 0 6
35404: PUSH
35405: LD_VAR 0 4
35409: ST_TO_ADDR
// _y := y ;
35410: LD_ADDR_VAR 0 7
35414: PUSH
35415: LD_VAR 0 5
35419: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_INT 1
35427: PPUSH
35428: LD_VAR 0 14
35432: PPUSH
35433: CALL_OW 12
35437: ST_TO_ADDR
// case i of 1 :
35438: LD_VAR 0 3
35442: PUSH
35443: LD_INT 1
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35451
35449: GO 35468
35451: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35452: LD_VAR 0 1
35456: PPUSH
35457: LD_VAR 0 10
35461: PPUSH
35462: CALL_OW 115
35466: GO 35529
35468: LD_INT 2
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35476
35474: GO 35498
35476: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35477: LD_VAR 0 1
35481: PPUSH
35482: LD_VAR 0 6
35486: PPUSH
35487: LD_VAR 0 7
35491: PPUSH
35492: CALL_OW 153
35496: GO 35529
35498: LD_INT 3
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35528
35506: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_VAR 0 6
35516: PPUSH
35517: LD_VAR 0 7
35521: PPUSH
35522: CALL_OW 154
35526: GO 35529
35528: POP
// end ;
35529: LD_VAR 0 2
35533: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35534: LD_INT 0
35536: PPUSH
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
// if not unit or not building then
35542: LD_VAR 0 1
35546: NOT
35547: IFTRUE 35556
35549: PUSH
35550: LD_VAR 0 2
35554: NOT
35555: OR
35556: IFFALSE 35560
// exit ;
35558: GO 35718
// x := GetX ( building ) ;
35560: LD_ADDR_VAR 0 5
35564: PUSH
35565: LD_VAR 0 2
35569: PPUSH
35570: CALL_OW 250
35574: ST_TO_ADDR
// y := GetY ( building ) ;
35575: LD_ADDR_VAR 0 6
35579: PUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: CALL_OW 251
35589: ST_TO_ADDR
// for i := 0 to 5 do
35590: LD_ADDR_VAR 0 4
35594: PUSH
35595: DOUBLE
35596: LD_INT 0
35598: DEC
35599: ST_TO_ADDR
35600: LD_INT 5
35602: PUSH
35603: FOR_TO
35604: IFFALSE 35716
// begin _x := ShiftX ( x , i , 3 ) ;
35606: LD_ADDR_VAR 0 7
35610: PUSH
35611: LD_VAR 0 5
35615: PPUSH
35616: LD_VAR 0 4
35620: PPUSH
35621: LD_INT 3
35623: PPUSH
35624: CALL_OW 272
35628: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35629: LD_ADDR_VAR 0 8
35633: PUSH
35634: LD_VAR 0 6
35638: PPUSH
35639: LD_VAR 0 4
35643: PPUSH
35644: LD_INT 3
35646: PPUSH
35647: CALL_OW 273
35651: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35652: LD_VAR 0 7
35656: PPUSH
35657: LD_VAR 0 8
35661: PPUSH
35662: CALL_OW 488
35666: NOT
35667: IFFALSE 35671
// continue ;
35669: GO 35603
// if HexInfo ( _x , _y ) = 0 then
35671: LD_VAR 0 7
35675: PPUSH
35676: LD_VAR 0 8
35680: PPUSH
35681: CALL_OW 428
35685: PUSH
35686: LD_INT 0
35688: EQUAL
35689: IFFALSE 35714
// begin ComMoveXY ( unit , _x , _y ) ;
35691: LD_VAR 0 1
35695: PPUSH
35696: LD_VAR 0 7
35700: PPUSH
35701: LD_VAR 0 8
35705: PPUSH
35706: CALL_OW 111
// exit ;
35710: POP
35711: POP
35712: GO 35718
// end ; end ;
35714: GO 35603
35716: POP
35717: POP
// end ;
35718: LD_VAR 0 3
35722: RET
// export function ScanBase ( side , base_area ) ; begin
35723: LD_INT 0
35725: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_VAR 0 2
35735: PPUSH
35736: LD_INT 81
35738: PUSH
35739: LD_VAR 0 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PPUSH
35748: CALL_OW 70
35752: ST_TO_ADDR
// end ;
35753: LD_VAR 0 3
35757: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35758: LD_INT 0
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
// result := false ;
35764: LD_ADDR_VAR 0 2
35768: PUSH
35769: LD_INT 0
35771: ST_TO_ADDR
// side := GetSide ( unit ) ;
35772: LD_ADDR_VAR 0 3
35776: PUSH
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 255
35786: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35787: LD_ADDR_VAR 0 4
35791: PUSH
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 248
35801: ST_TO_ADDR
// case nat of 1 :
35802: LD_VAR 0 4
35806: PUSH
35807: LD_INT 1
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35826
35815: POP
// tech := tech_lassight ; 2 :
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_INT 12
35823: ST_TO_ADDR
35824: GO 35865
35826: LD_INT 2
35828: DOUBLE
35829: EQUAL
35830: IFTRUE 35834
35832: GO 35845
35834: POP
// tech := tech_mortar ; 3 :
35835: LD_ADDR_VAR 0 5
35839: PUSH
35840: LD_INT 41
35842: ST_TO_ADDR
35843: GO 35865
35845: LD_INT 3
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35864
35853: POP
// tech := tech_bazooka ; end ;
35854: LD_ADDR_VAR 0 5
35858: PUSH
35859: LD_INT 44
35861: ST_TO_ADDR
35862: GO 35865
35864: POP
// if Researched ( side , tech ) then
35865: LD_VAR 0 3
35869: PPUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: CALL_OW 325
35879: IFFALSE 35906
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35881: LD_ADDR_VAR 0 2
35885: PUSH
35886: LD_INT 5
35888: PUSH
35889: LD_INT 8
35891: PUSH
35892: LD_INT 9
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: PUSH
35900: LD_VAR 0 4
35904: ARRAY
35905: ST_TO_ADDR
// end ;
35906: LD_VAR 0 2
35910: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
35915: PPUSH
// if not mines then
35916: LD_VAR 0 2
35920: NOT
35921: IFFALSE 35925
// exit ;
35923: GO 36069
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_INT 81
35932: PUSH
35933: LD_VAR 0 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 3
35944: PUSH
35945: LD_INT 21
35947: PUSH
35948: LD_INT 3
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 69
35967: ST_TO_ADDR
// for i in mines do
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_VAR 0 2
35977: PUSH
35978: FOR_IN
35979: IFFALSE 36067
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35981: LD_VAR 0 4
35985: PUSH
35986: LD_INT 1
35988: ARRAY
35989: PPUSH
35990: LD_VAR 0 4
35994: PUSH
35995: LD_INT 2
35997: ARRAY
35998: PPUSH
35999: CALL_OW 458
36003: NOT
36004: IFFALSE 36008
// continue ;
36006: GO 35978
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36008: LD_VAR 0 4
36012: PUSH
36013: LD_INT 1
36015: ARRAY
36016: PPUSH
36017: LD_VAR 0 4
36021: PUSH
36022: LD_INT 2
36024: ARRAY
36025: PPUSH
36026: CALL_OW 428
36030: PUSH
36031: LD_VAR 0 5
36035: IN
36036: IFFALSE 36065
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36038: LD_VAR 0 4
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 4
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 456
// end ;
36065: GO 35978
36067: POP
36068: POP
// end ;
36069: LD_VAR 0 3
36073: RET
// export function Count ( array ) ; begin
36074: LD_INT 0
36076: PPUSH
// result := array + 0 ;
36077: LD_ADDR_VAR 0 2
36081: PUSH
36082: LD_VAR 0 1
36086: PUSH
36087: LD_INT 0
36089: PLUS
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 2
36095: RET
// export function IsEmpty ( building ) ; begin
36096: LD_INT 0
36098: PPUSH
// if not building then
36099: LD_VAR 0 1
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36151
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36108: LD_ADDR_VAR 0 2
36112: PUSH
36113: LD_VAR 0 1
36117: PUSH
36118: LD_INT 22
36120: PUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: CALL_OW 255
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 58
36137: PUSH
36138: EMPTY
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PPUSH
36145: CALL_OW 69
36149: IN
36150: ST_TO_ADDR
// end ;
36151: LD_VAR 0 2
36155: RET
// export function IsNotFull ( building ) ; var places ; begin
36156: LD_INT 0
36158: PPUSH
36159: PPUSH
// if not building then
36160: LD_VAR 0 1
36164: NOT
36165: IFFALSE 36169
// exit ;
36167: GO 36197
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36169: LD_ADDR_VAR 0 2
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: LD_INT 3
36181: PUSH
36182: LD_INT 62
36184: PUSH
36185: EMPTY
36186: LIST
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PPUSH
36192: CALL_OW 72
36196: ST_TO_ADDR
// end ;
36197: LD_VAR 0 2
36201: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36202: LD_INT 0
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
// tmp := [ ] ;
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: EMPTY
36214: ST_TO_ADDR
// list := [ ] ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: EMPTY
36221: ST_TO_ADDR
// for i = 16 to 25 do
36222: LD_ADDR_VAR 0 4
36226: PUSH
36227: DOUBLE
36228: LD_INT 16
36230: DEC
36231: ST_TO_ADDR
36232: LD_INT 25
36234: PUSH
36235: FOR_TO
36236: IFFALSE 36309
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36238: LD_ADDR_VAR 0 3
36242: PUSH
36243: LD_VAR 0 3
36247: PUSH
36248: LD_INT 22
36250: PUSH
36251: LD_VAR 0 1
36255: PPUSH
36256: CALL_OW 255
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 91
36267: PUSH
36268: LD_VAR 0 1
36272: PUSH
36273: LD_INT 6
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 30
36283: PUSH
36284: LD_VAR 0 4
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: PPUSH
36301: CALL_OW 69
36305: ADD
36306: ST_TO_ADDR
36307: GO 36235
36309: POP
36310: POP
// for i = 1 to tmp do
36311: LD_ADDR_VAR 0 4
36315: PUSH
36316: DOUBLE
36317: LD_INT 1
36319: DEC
36320: ST_TO_ADDR
36321: LD_VAR 0 3
36325: PUSH
36326: FOR_TO
36327: IFFALSE 36415
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: LD_VAR 0 5
36338: PUSH
36339: LD_VAR 0 3
36343: PUSH
36344: LD_VAR 0 4
36348: ARRAY
36349: PPUSH
36350: CALL_OW 266
36354: PUSH
36355: LD_VAR 0 3
36359: PUSH
36360: LD_VAR 0 4
36364: ARRAY
36365: PPUSH
36366: CALL_OW 250
36370: PUSH
36371: LD_VAR 0 3
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PPUSH
36382: CALL_OW 251
36386: PUSH
36387: LD_VAR 0 3
36391: PUSH
36392: LD_VAR 0 4
36396: ARRAY
36397: PPUSH
36398: CALL_OW 254
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: PUSH
36409: EMPTY
36410: LIST
36411: ADD
36412: ST_TO_ADDR
36413: GO 36326
36415: POP
36416: POP
// result := list ;
36417: LD_ADDR_VAR 0 2
36421: PUSH
36422: LD_VAR 0 5
36426: ST_TO_ADDR
// end ;
36427: LD_VAR 0 2
36431: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36432: LD_INT 0
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
// if not factory then
36441: LD_VAR 0 1
36445: NOT
36446: IFFALSE 36450
// exit ;
36448: GO 37053
// if control = control_apeman then
36450: LD_VAR 0 4
36454: PUSH
36455: LD_INT 5
36457: EQUAL
36458: IFFALSE 36567
// begin tmp := UnitsInside ( factory ) ;
36460: LD_ADDR_VAR 0 8
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 313
36474: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36475: LD_VAR 0 8
36479: PPUSH
36480: LD_INT 25
36482: PUSH
36483: LD_INT 12
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PPUSH
36490: CALL_OW 72
36494: NOT
36495: IFFALSE 36505
// control := control_manual ;
36497: LD_ADDR_VAR 0 4
36501: PUSH
36502: LD_INT 1
36504: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36505: LD_ADDR_VAR 0 8
36509: PUSH
36510: LD_VAR 0 1
36514: PPUSH
36515: CALL 36202 0 1
36519: ST_TO_ADDR
// if tmp then
36520: LD_VAR 0 8
36524: IFFALSE 36567
// begin for i in tmp do
36526: LD_ADDR_VAR 0 7
36530: PUSH
36531: LD_VAR 0 8
36535: PUSH
36536: FOR_IN
36537: IFFALSE 36565
// if i [ 1 ] = b_ext_radio then
36539: LD_VAR 0 7
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PUSH
36548: LD_INT 22
36550: EQUAL
36551: IFFALSE 36563
// begin control := control_remote ;
36553: LD_ADDR_VAR 0 4
36557: PUSH
36558: LD_INT 2
36560: ST_TO_ADDR
// break ;
36561: GO 36565
// end ;
36563: GO 36536
36565: POP
36566: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36567: LD_VAR 0 1
36571: PPUSH
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 3
36581: PPUSH
36582: LD_VAR 0 4
36586: PPUSH
36587: LD_VAR 0 5
36591: PPUSH
36592: CALL_OW 448
36596: IFFALSE 36631
// begin result := [ chassis , engine , control , weapon ] ;
36598: LD_ADDR_VAR 0 6
36602: PUSH
36603: LD_VAR 0 2
36607: PUSH
36608: LD_VAR 0 3
36612: PUSH
36613: LD_VAR 0 4
36617: PUSH
36618: LD_VAR 0 5
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: ST_TO_ADDR
// exit ;
36629: GO 37053
// end ; _chassis := AvailableChassisList ( factory ) ;
36631: LD_ADDR_VAR 0 9
36635: PUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 475
36645: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36646: LD_ADDR_VAR 0 11
36650: PUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 476
36660: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36661: LD_ADDR_VAR 0 12
36665: PUSH
36666: LD_VAR 0 1
36670: PPUSH
36671: CALL_OW 477
36675: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36676: LD_ADDR_VAR 0 10
36680: PUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 478
36690: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36691: LD_VAR 0 9
36695: NOT
36696: IFTRUE 36705
36698: PUSH
36699: LD_VAR 0 11
36703: NOT
36704: OR
36705: IFTRUE 36714
36707: PUSH
36708: LD_VAR 0 12
36712: NOT
36713: OR
36714: IFTRUE 36723
36716: PUSH
36717: LD_VAR 0 10
36721: NOT
36722: OR
36723: IFFALSE 36758
// begin result := [ chassis , engine , control , weapon ] ;
36725: LD_ADDR_VAR 0 6
36729: PUSH
36730: LD_VAR 0 2
36734: PUSH
36735: LD_VAR 0 3
36739: PUSH
36740: LD_VAR 0 4
36744: PUSH
36745: LD_VAR 0 5
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// exit ;
36756: GO 37053
// end ; if not chassis in _chassis then
36758: LD_VAR 0 2
36762: PUSH
36763: LD_VAR 0 9
36767: IN
36768: NOT
36769: IFFALSE 36795
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36771: LD_ADDR_VAR 0 2
36775: PUSH
36776: LD_VAR 0 9
36780: PUSH
36781: LD_INT 1
36783: PPUSH
36784: LD_VAR 0 9
36788: PPUSH
36789: CALL_OW 12
36793: ARRAY
36794: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36795: LD_VAR 0 2
36799: PPUSH
36800: LD_VAR 0 3
36804: PPUSH
36805: CALL 37058 0 2
36809: NOT
36810: IFFALSE 36871
// repeat engine := _engine [ 1 ] ;
36812: LD_ADDR_VAR 0 3
36816: PUSH
36817: LD_VAR 0 11
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36826: LD_ADDR_VAR 0 11
36830: PUSH
36831: LD_VAR 0 11
36835: PPUSH
36836: LD_INT 1
36838: PPUSH
36839: CALL_OW 3
36843: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36844: LD_VAR 0 2
36848: PPUSH
36849: LD_VAR 0 3
36853: PPUSH
36854: CALL 37058 0 2
36858: IFTRUE 36869
36860: PUSH
36861: LD_VAR 0 11
36865: PUSH
36866: EMPTY
36867: EQUAL
36868: OR
36869: IFFALSE 36812
// if not control in _control then
36871: LD_VAR 0 4
36875: PUSH
36876: LD_VAR 0 12
36880: IN
36881: NOT
36882: IFFALSE 36908
// control := _control [ rand ( 1 , _control ) ] ;
36884: LD_ADDR_VAR 0 4
36888: PUSH
36889: LD_VAR 0 12
36893: PUSH
36894: LD_INT 1
36896: PPUSH
36897: LD_VAR 0 12
36901: PPUSH
36902: CALL_OW 12
36906: ARRAY
36907: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36908: LD_VAR 0 2
36912: PPUSH
36913: LD_VAR 0 5
36917: PPUSH
36918: CALL 37280 0 2
36922: NOT
36923: IFFALSE 36984
// repeat weapon := _weapon [ 1 ] ;
36925: LD_ADDR_VAR 0 5
36929: PUSH
36930: LD_VAR 0 10
36934: PUSH
36935: LD_INT 1
36937: ARRAY
36938: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36939: LD_ADDR_VAR 0 10
36943: PUSH
36944: LD_VAR 0 10
36948: PPUSH
36949: LD_INT 1
36951: PPUSH
36952: CALL_OW 3
36956: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_VAR 0 5
36966: PPUSH
36967: CALL 37280 0 2
36971: IFTRUE 36982
36973: PUSH
36974: LD_VAR 0 10
36978: PUSH
36979: EMPTY
36980: EQUAL
36981: OR
36982: IFFALSE 36925
// result := [ ] ;
36984: LD_ADDR_VAR 0 6
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36991: LD_VAR 0 1
36995: PPUSH
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_VAR 0 3
37005: PPUSH
37006: LD_VAR 0 4
37010: PPUSH
37011: LD_VAR 0 5
37015: PPUSH
37016: CALL_OW 448
37020: IFFALSE 37053
// result := [ chassis , engine , control , weapon ] ;
37022: LD_ADDR_VAR 0 6
37026: PUSH
37027: LD_VAR 0 2
37031: PUSH
37032: LD_VAR 0 3
37036: PUSH
37037: LD_VAR 0 4
37041: PUSH
37042: LD_VAR 0 5
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
// end ;
37053: LD_VAR 0 6
37057: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37058: LD_INT 0
37060: PPUSH
// if not chassis or not engine then
37061: LD_VAR 0 1
37065: NOT
37066: IFTRUE 37075
37068: PUSH
37069: LD_VAR 0 2
37073: NOT
37074: OR
37075: IFFALSE 37079
// exit ;
37077: GO 37275
// case engine of engine_solar :
37079: LD_VAR 0 2
37083: PUSH
37084: LD_INT 2
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37130
37092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 11
37100: PUSH
37101: LD_INT 12
37103: PUSH
37104: LD_INT 13
37106: PUSH
37107: LD_INT 14
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
37128: GO 37259
37130: LD_INT 1
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37138
37136: GO 37200
37138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_INT 11
37146: PUSH
37147: LD_INT 12
37149: PUSH
37150: LD_INT 13
37152: PUSH
37153: LD_INT 14
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 3
37164: PUSH
37165: LD_INT 4
37167: PUSH
37168: LD_INT 5
37170: PUSH
37171: LD_INT 21
37173: PUSH
37174: LD_INT 23
37176: PUSH
37177: LD_INT 22
37179: PUSH
37180: LD_INT 24
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: ST_TO_ADDR
37198: GO 37259
37200: LD_INT 3
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37258
37208: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37209: LD_ADDR_VAR 0 3
37213: PUSH
37214: LD_INT 13
37216: PUSH
37217: LD_INT 14
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 4
37228: PUSH
37229: LD_INT 5
37231: PUSH
37232: LD_INT 21
37234: PUSH
37235: LD_INT 22
37237: PUSH
37238: LD_INT 23
37240: PUSH
37241: LD_INT 24
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
37256: GO 37259
37258: POP
// result := ( chassis in result ) ;
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_VAR 0 1
37268: PUSH
37269: LD_VAR 0 3
37273: IN
37274: ST_TO_ADDR
// end ;
37275: LD_VAR 0 3
37279: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37280: LD_INT 0
37282: PPUSH
// if not chassis or not weapon then
37283: LD_VAR 0 1
37287: NOT
37288: IFTRUE 37297
37290: PUSH
37291: LD_VAR 0 2
37295: NOT
37296: OR
37297: IFFALSE 37301
// exit ;
37299: GO 38361
// case weapon of us_machine_gun :
37301: LD_VAR 0 2
37305: PUSH
37306: LD_INT 2
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37344
37314: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 3
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
37342: GO 38345
37344: LD_INT 3
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37352
37350: GO 37382
37352: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 4
37369: PUSH
37370: LD_INT 5
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: ST_TO_ADDR
37380: GO 38345
37382: LD_INT 11
37384: DOUBLE
37385: EQUAL
37386: IFTRUE 37390
37388: GO 37420
37390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37391: LD_ADDR_VAR 0 3
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: LD_INT 4
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
37418: GO 38345
37420: LD_INT 4
37422: DOUBLE
37423: EQUAL
37424: IFTRUE 37428
37426: GO 37454
37428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 4
37442: PUSH
37443: LD_INT 5
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
37452: GO 38345
37454: LD_INT 5
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37488
37462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 3
37473: PUSH
37474: LD_INT 4
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
37486: GO 38345
37488: LD_INT 9
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37496
37494: GO 37522
37496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37497: LD_ADDR_VAR 0 3
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: LD_INT 5
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
37520: GO 38345
37522: LD_INT 7
37524: DOUBLE
37525: EQUAL
37526: IFTRUE 37530
37528: GO 37556
37530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: LD_INT 4
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: ST_TO_ADDR
37554: GO 38345
37556: LD_INT 12
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37564
37562: GO 37590
37564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 4
37578: PUSH
37579: LD_INT 5
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
37588: GO 38345
37590: LD_INT 13
37592: DOUBLE
37593: EQUAL
37594: IFTRUE 37598
37596: GO 37624
37598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37599: LD_ADDR_VAR 0 3
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 4
37612: PUSH
37613: LD_INT 5
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
37622: GO 38345
37624: LD_INT 14
37626: DOUBLE
37627: EQUAL
37628: IFTRUE 37632
37630: GO 37650
37632: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37633: LD_ADDR_VAR 0 3
37637: PUSH
37638: LD_INT 4
37640: PUSH
37641: LD_INT 5
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: ST_TO_ADDR
37648: GO 38345
37650: LD_INT 6
37652: DOUBLE
37653: EQUAL
37654: IFTRUE 37658
37656: GO 37676
37658: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37659: LD_ADDR_VAR 0 3
37663: PUSH
37664: LD_INT 4
37666: PUSH
37667: LD_INT 5
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: ST_TO_ADDR
37674: GO 38345
37676: LD_INT 10
37678: DOUBLE
37679: EQUAL
37680: IFTRUE 37684
37682: GO 37702
37684: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_INT 4
37692: PUSH
37693: LD_INT 5
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: ST_TO_ADDR
37700: GO 38345
37702: LD_INT 22
37704: DOUBLE
37705: EQUAL
37706: IFTRUE 37710
37708: GO 37736
37710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_INT 11
37718: PUSH
37719: LD_INT 12
37721: PUSH
37722: LD_INT 13
37724: PUSH
37725: LD_INT 14
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
37734: GO 38345
37736: LD_INT 23
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37770
37744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 11
37752: PUSH
37753: LD_INT 12
37755: PUSH
37756: LD_INT 13
37758: PUSH
37759: LD_INT 14
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: ST_TO_ADDR
37768: GO 38345
37770: LD_INT 24
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 37804
37778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37779: LD_ADDR_VAR 0 3
37783: PUSH
37784: LD_INT 11
37786: PUSH
37787: LD_INT 12
37789: PUSH
37790: LD_INT 13
37792: PUSH
37793: LD_INT 14
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
37802: GO 38345
37804: LD_INT 30
37806: DOUBLE
37807: EQUAL
37808: IFTRUE 37812
37810: GO 37838
37812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_INT 11
37820: PUSH
37821: LD_INT 12
37823: PUSH
37824: LD_INT 13
37826: PUSH
37827: LD_INT 14
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: ST_TO_ADDR
37836: GO 38345
37838: LD_INT 25
37840: DOUBLE
37841: EQUAL
37842: IFTRUE 37846
37844: GO 37864
37846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37847: LD_ADDR_VAR 0 3
37851: PUSH
37852: LD_INT 13
37854: PUSH
37855: LD_INT 14
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: ST_TO_ADDR
37862: GO 38345
37864: LD_INT 27
37866: DOUBLE
37867: EQUAL
37868: IFTRUE 37872
37870: GO 37890
37872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_INT 13
37880: PUSH
37881: LD_INT 14
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: ST_TO_ADDR
37888: GO 38345
37890: LD_INT 92
37892: DOUBLE
37893: EQUAL
37894: IFTRUE 37898
37896: GO 37924
37898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37899: LD_ADDR_VAR 0 3
37903: PUSH
37904: LD_INT 11
37906: PUSH
37907: LD_INT 12
37909: PUSH
37910: LD_INT 13
37912: PUSH
37913: LD_INT 14
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
37922: GO 38345
37924: LD_INT 28
37926: DOUBLE
37927: EQUAL
37928: IFTRUE 37932
37930: GO 37950
37932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37933: LD_ADDR_VAR 0 3
37937: PUSH
37938: LD_INT 13
37940: PUSH
37941: LD_INT 14
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: ST_TO_ADDR
37948: GO 38345
37950: LD_INT 29
37952: DOUBLE
37953: EQUAL
37954: IFTRUE 37958
37956: GO 37976
37958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_INT 13
37966: PUSH
37967: LD_INT 14
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: ST_TO_ADDR
37974: GO 38345
37976: LD_INT 31
37978: DOUBLE
37979: EQUAL
37980: IFTRUE 37984
37982: GO 38002
37984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37985: LD_ADDR_VAR 0 3
37989: PUSH
37990: LD_INT 13
37992: PUSH
37993: LD_INT 14
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: ST_TO_ADDR
38000: GO 38345
38002: LD_INT 26
38004: DOUBLE
38005: EQUAL
38006: IFTRUE 38010
38008: GO 38028
38010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38011: LD_ADDR_VAR 0 3
38015: PUSH
38016: LD_INT 13
38018: PUSH
38019: LD_INT 14
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: ST_TO_ADDR
38026: GO 38345
38028: LD_INT 42
38030: DOUBLE
38031: EQUAL
38032: IFTRUE 38036
38034: GO 38062
38036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_INT 21
38044: PUSH
38045: LD_INT 22
38047: PUSH
38048: LD_INT 23
38050: PUSH
38051: LD_INT 24
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: ST_TO_ADDR
38060: GO 38345
38062: LD_INT 43
38064: DOUBLE
38065: EQUAL
38066: IFTRUE 38070
38068: GO 38096
38070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38071: LD_ADDR_VAR 0 3
38075: PUSH
38076: LD_INT 21
38078: PUSH
38079: LD_INT 22
38081: PUSH
38082: LD_INT 23
38084: PUSH
38085: LD_INT 24
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
38094: GO 38345
38096: LD_INT 44
38098: DOUBLE
38099: EQUAL
38100: IFTRUE 38104
38102: GO 38130
38104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_INT 21
38112: PUSH
38113: LD_INT 22
38115: PUSH
38116: LD_INT 23
38118: PUSH
38119: LD_INT 24
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
38128: GO 38345
38130: LD_INT 45
38132: DOUBLE
38133: EQUAL
38134: IFTRUE 38138
38136: GO 38164
38138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38139: LD_ADDR_VAR 0 3
38143: PUSH
38144: LD_INT 21
38146: PUSH
38147: LD_INT 22
38149: PUSH
38150: LD_INT 23
38152: PUSH
38153: LD_INT 24
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
38162: GO 38345
38164: LD_INT 49
38166: DOUBLE
38167: EQUAL
38168: IFTRUE 38172
38170: GO 38198
38172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38173: LD_ADDR_VAR 0 3
38177: PUSH
38178: LD_INT 21
38180: PUSH
38181: LD_INT 22
38183: PUSH
38184: LD_INT 23
38186: PUSH
38187: LD_INT 24
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
38196: GO 38345
38198: LD_INT 51
38200: DOUBLE
38201: EQUAL
38202: IFTRUE 38206
38204: GO 38232
38206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 22
38217: PUSH
38218: LD_INT 23
38220: PUSH
38221: LD_INT 24
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
38230: GO 38345
38232: LD_INT 52
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38266
38240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38241: LD_ADDR_VAR 0 3
38245: PUSH
38246: LD_INT 21
38248: PUSH
38249: LD_INT 22
38251: PUSH
38252: LD_INT 23
38254: PUSH
38255: LD_INT 24
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: ST_TO_ADDR
38264: GO 38345
38266: LD_INT 53
38268: DOUBLE
38269: EQUAL
38270: IFTRUE 38274
38272: GO 38292
38274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_INT 23
38282: PUSH
38283: LD_INT 24
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: ST_TO_ADDR
38290: GO 38345
38292: LD_INT 46
38294: DOUBLE
38295: EQUAL
38296: IFTRUE 38300
38298: GO 38318
38300: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38301: LD_ADDR_VAR 0 3
38305: PUSH
38306: LD_INT 23
38308: PUSH
38309: LD_INT 24
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: ST_TO_ADDR
38316: GO 38345
38318: LD_INT 47
38320: DOUBLE
38321: EQUAL
38322: IFTRUE 38326
38324: GO 38344
38326: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38327: LD_ADDR_VAR 0 3
38331: PUSH
38332: LD_INT 23
38334: PUSH
38335: LD_INT 24
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: ST_TO_ADDR
38342: GO 38345
38344: POP
// result := ( chassis in result ) ;
38345: LD_ADDR_VAR 0 3
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_VAR 0 3
38359: IN
38360: ST_TO_ADDR
// end ;
38361: LD_VAR 0 3
38365: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38366: LD_INT 0
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
// result := array ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 1
38384: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38385: LD_VAR 0 1
38389: NOT
38390: IFTRUE 38399
38392: PUSH
38393: LD_VAR 0 2
38397: NOT
38398: OR
38399: IFTRUE 38408
38401: PUSH
38402: LD_VAR 0 3
38406: NOT
38407: OR
38408: IFTRUE 38422
38410: PUSH
38411: LD_VAR 0 2
38415: PUSH
38416: LD_VAR 0 1
38420: GREATER
38421: OR
38422: IFTRUE 38436
38424: PUSH
38425: LD_VAR 0 3
38429: PUSH
38430: LD_VAR 0 1
38434: GREATER
38435: OR
38436: IFFALSE 38440
// exit ;
38438: GO 38736
// if direction then
38440: LD_VAR 0 4
38444: IFFALSE 38508
// begin d := 1 ;
38446: LD_ADDR_VAR 0 9
38450: PUSH
38451: LD_INT 1
38453: ST_TO_ADDR
// if i_from > i_to then
38454: LD_VAR 0 2
38458: PUSH
38459: LD_VAR 0 3
38463: GREATER
38464: IFFALSE 38490
// length := ( array - i_from ) + i_to else
38466: LD_ADDR_VAR 0 11
38470: PUSH
38471: LD_VAR 0 1
38475: PUSH
38476: LD_VAR 0 2
38480: MINUS
38481: PUSH
38482: LD_VAR 0 3
38486: PLUS
38487: ST_TO_ADDR
38488: GO 38506
// length := i_to - i_from ;
38490: LD_ADDR_VAR 0 11
38494: PUSH
38495: LD_VAR 0 3
38499: PUSH
38500: LD_VAR 0 2
38504: MINUS
38505: ST_TO_ADDR
// end else
38506: GO 38569
// begin d := - 1 ;
38508: LD_ADDR_VAR 0 9
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: ST_TO_ADDR
// if i_from > i_to then
38517: LD_VAR 0 2
38521: PUSH
38522: LD_VAR 0 3
38526: GREATER
38527: IFFALSE 38547
// length := i_from - i_to else
38529: LD_ADDR_VAR 0 11
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_VAR 0 3
38543: MINUS
38544: ST_TO_ADDR
38545: GO 38569
// length := ( array - i_to ) + i_from ;
38547: LD_ADDR_VAR 0 11
38551: PUSH
38552: LD_VAR 0 1
38556: PUSH
38557: LD_VAR 0 3
38561: MINUS
38562: PUSH
38563: LD_VAR 0 2
38567: PLUS
38568: ST_TO_ADDR
// end ; if not length then
38569: LD_VAR 0 11
38573: NOT
38574: IFFALSE 38578
// exit ;
38576: GO 38736
// tmp := array ;
38578: LD_ADDR_VAR 0 10
38582: PUSH
38583: LD_VAR 0 1
38587: ST_TO_ADDR
// for i = 1 to length do
38588: LD_ADDR_VAR 0 6
38592: PUSH
38593: DOUBLE
38594: LD_INT 1
38596: DEC
38597: ST_TO_ADDR
38598: LD_VAR 0 11
38602: PUSH
38603: FOR_TO
38604: IFFALSE 38724
// begin for j = 1 to array do
38606: LD_ADDR_VAR 0 7
38610: PUSH
38611: DOUBLE
38612: LD_INT 1
38614: DEC
38615: ST_TO_ADDR
38616: LD_VAR 0 1
38620: PUSH
38621: FOR_TO
38622: IFFALSE 38710
// begin k := j + d ;
38624: LD_ADDR_VAR 0 8
38628: PUSH
38629: LD_VAR 0 7
38633: PUSH
38634: LD_VAR 0 9
38638: PLUS
38639: ST_TO_ADDR
// if k > array then
38640: LD_VAR 0 8
38644: PUSH
38645: LD_VAR 0 1
38649: GREATER
38650: IFFALSE 38660
// k := 1 ;
38652: LD_ADDR_VAR 0 8
38656: PUSH
38657: LD_INT 1
38659: ST_TO_ADDR
// if not k then
38660: LD_VAR 0 8
38664: NOT
38665: IFFALSE 38677
// k := array ;
38667: LD_ADDR_VAR 0 8
38671: PUSH
38672: LD_VAR 0 1
38676: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38677: LD_ADDR_VAR 0 10
38681: PUSH
38682: LD_VAR 0 10
38686: PPUSH
38687: LD_VAR 0 8
38691: PPUSH
38692: LD_VAR 0 1
38696: PUSH
38697: LD_VAR 0 7
38701: ARRAY
38702: PPUSH
38703: CALL_OW 1
38707: ST_TO_ADDR
// end ;
38708: GO 38621
38710: POP
38711: POP
// array := tmp ;
38712: LD_ADDR_VAR 0 1
38716: PUSH
38717: LD_VAR 0 10
38721: ST_TO_ADDR
// end ;
38722: GO 38603
38724: POP
38725: POP
// result := array ;
38726: LD_ADDR_VAR 0 5
38730: PUSH
38731: LD_VAR 0 1
38735: ST_TO_ADDR
// end ;
38736: LD_VAR 0 5
38740: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38741: LD_INT 0
38743: PPUSH
38744: PPUSH
// result := 0 ;
38745: LD_ADDR_VAR 0 3
38749: PUSH
38750: LD_INT 0
38752: ST_TO_ADDR
// if not array or not value in array then
38753: LD_VAR 0 1
38757: NOT
38758: IFTRUE 38773
38760: PUSH
38761: LD_VAR 0 2
38765: PUSH
38766: LD_VAR 0 1
38770: IN
38771: NOT
38772: OR
38773: IFFALSE 38777
// exit ;
38775: GO 38831
// for i = 1 to array do
38777: LD_ADDR_VAR 0 4
38781: PUSH
38782: DOUBLE
38783: LD_INT 1
38785: DEC
38786: ST_TO_ADDR
38787: LD_VAR 0 1
38791: PUSH
38792: FOR_TO
38793: IFFALSE 38829
// if value = array [ i ] then
38795: LD_VAR 0 2
38799: PUSH
38800: LD_VAR 0 1
38804: PUSH
38805: LD_VAR 0 4
38809: ARRAY
38810: EQUAL
38811: IFFALSE 38827
// begin result := i ;
38813: LD_ADDR_VAR 0 3
38817: PUSH
38818: LD_VAR 0 4
38822: ST_TO_ADDR
// exit ;
38823: POP
38824: POP
38825: GO 38831
// end ;
38827: GO 38792
38829: POP
38830: POP
// end ;
38831: LD_VAR 0 3
38835: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38836: LD_INT 0
38838: PPUSH
// vc_chassis := chassis ;
38839: LD_ADDR_OWVAR 37
38843: PUSH
38844: LD_VAR 0 1
38848: ST_TO_ADDR
// vc_engine := engine ;
38849: LD_ADDR_OWVAR 39
38853: PUSH
38854: LD_VAR 0 2
38858: ST_TO_ADDR
// vc_control := control ;
38859: LD_ADDR_OWVAR 38
38863: PUSH
38864: LD_VAR 0 3
38868: ST_TO_ADDR
// vc_weapon := weapon ;
38869: LD_ADDR_OWVAR 40
38873: PUSH
38874: LD_VAR 0 4
38878: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38879: LD_ADDR_OWVAR 41
38883: PUSH
38884: LD_VAR 0 5
38888: ST_TO_ADDR
// end ;
38889: LD_VAR 0 6
38893: RET
// export function WantPlant ( unit ) ; var task ; begin
38894: LD_INT 0
38896: PPUSH
38897: PPUSH
// result := false ;
38898: LD_ADDR_VAR 0 2
38902: PUSH
38903: LD_INT 0
38905: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38906: LD_ADDR_VAR 0 3
38910: PUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: CALL_OW 437
38920: ST_TO_ADDR
// if task then
38921: LD_VAR 0 3
38925: IFFALSE 38953
// if task [ 1 ] [ 1 ] = p then
38927: LD_VAR 0 3
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PUSH
38940: LD_STRING p
38942: EQUAL
38943: IFFALSE 38953
// result := true ;
38945: LD_ADDR_VAR 0 2
38949: PUSH
38950: LD_INT 1
38952: ST_TO_ADDR
// end ;
38953: LD_VAR 0 2
38957: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38958: LD_INT 0
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
// if pos < 1 then
38964: LD_VAR 0 2
38968: PUSH
38969: LD_INT 1
38971: LESS
38972: IFFALSE 38976
// exit ;
38974: GO 39279
// if pos = 1 then
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 1
38983: EQUAL
38984: IFFALSE 39017
// result := Replace ( arr , pos [ 1 ] , value ) else
38986: LD_ADDR_VAR 0 4
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: LD_VAR 0 2
39000: PUSH
39001: LD_INT 1
39003: ARRAY
39004: PPUSH
39005: LD_VAR 0 3
39009: PPUSH
39010: CALL_OW 1
39014: ST_TO_ADDR
39015: GO 39279
// begin tmp := arr ;
39017: LD_ADDR_VAR 0 6
39021: PUSH
39022: LD_VAR 0 1
39026: ST_TO_ADDR
// s_arr := [ tmp ] ;
39027: LD_ADDR_VAR 0 7
39031: PUSH
39032: LD_VAR 0 6
39036: PUSH
39037: EMPTY
39038: LIST
39039: ST_TO_ADDR
// for i = 1 to pos - 1 do
39040: LD_ADDR_VAR 0 5
39044: PUSH
39045: DOUBLE
39046: LD_INT 1
39048: DEC
39049: ST_TO_ADDR
39050: LD_VAR 0 2
39054: PUSH
39055: LD_INT 1
39057: MINUS
39058: PUSH
39059: FOR_TO
39060: IFFALSE 39105
// begin tmp := tmp [ pos [ i ] ] ;
39062: LD_ADDR_VAR 0 6
39066: PUSH
39067: LD_VAR 0 6
39071: PUSH
39072: LD_VAR 0 2
39076: PUSH
39077: LD_VAR 0 5
39081: ARRAY
39082: ARRAY
39083: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39084: LD_ADDR_VAR 0 7
39088: PUSH
39089: LD_VAR 0 7
39093: PUSH
39094: LD_VAR 0 6
39098: PUSH
39099: EMPTY
39100: LIST
39101: ADD
39102: ST_TO_ADDR
// end ;
39103: GO 39059
39105: POP
39106: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39107: LD_ADDR_VAR 0 6
39111: PUSH
39112: LD_VAR 0 6
39116: PPUSH
39117: LD_VAR 0 2
39121: PUSH
39122: LD_VAR 0 2
39126: ARRAY
39127: PPUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: CALL_OW 1
39137: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39138: LD_ADDR_VAR 0 7
39142: PUSH
39143: LD_VAR 0 7
39147: PPUSH
39148: LD_VAR 0 7
39152: PPUSH
39153: LD_VAR 0 6
39157: PPUSH
39158: CALL_OW 1
39162: ST_TO_ADDR
// for i = s_arr downto 2 do
39163: LD_ADDR_VAR 0 5
39167: PUSH
39168: DOUBLE
39169: LD_VAR 0 7
39173: INC
39174: ST_TO_ADDR
39175: LD_INT 2
39177: PUSH
39178: FOR_DOWNTO
39179: IFFALSE 39263
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39181: LD_ADDR_VAR 0 6
39185: PUSH
39186: LD_VAR 0 7
39190: PUSH
39191: LD_VAR 0 5
39195: PUSH
39196: LD_INT 1
39198: MINUS
39199: ARRAY
39200: PPUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_VAR 0 5
39210: PUSH
39211: LD_INT 1
39213: MINUS
39214: ARRAY
39215: PPUSH
39216: LD_VAR 0 7
39220: PUSH
39221: LD_VAR 0 5
39225: ARRAY
39226: PPUSH
39227: CALL_OW 1
39231: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39232: LD_ADDR_VAR 0 7
39236: PUSH
39237: LD_VAR 0 7
39241: PPUSH
39242: LD_VAR 0 5
39246: PUSH
39247: LD_INT 1
39249: MINUS
39250: PPUSH
39251: LD_VAR 0 6
39255: PPUSH
39256: CALL_OW 1
39260: ST_TO_ADDR
// end ;
39261: GO 39178
39263: POP
39264: POP
// result := s_arr [ 1 ] ;
39265: LD_ADDR_VAR 0 4
39269: PUSH
39270: LD_VAR 0 7
39274: PUSH
39275: LD_INT 1
39277: ARRAY
39278: ST_TO_ADDR
// end ; end ;
39279: LD_VAR 0 4
39283: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39284: LD_INT 0
39286: PPUSH
39287: PPUSH
// if not list then
39288: LD_VAR 0 1
39292: NOT
39293: IFFALSE 39297
// exit ;
39295: GO 39388
// i := list [ pos1 ] ;
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 1
39306: PUSH
39307: LD_VAR 0 2
39311: ARRAY
39312: ST_TO_ADDR
// if not i then
39313: LD_VAR 0 5
39317: NOT
39318: IFFALSE 39322
// exit ;
39320: GO 39388
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39322: LD_ADDR_VAR 0 1
39326: PUSH
39327: LD_VAR 0 1
39331: PPUSH
39332: LD_VAR 0 2
39336: PPUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_VAR 0 3
39346: ARRAY
39347: PPUSH
39348: CALL_OW 1
39352: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39353: LD_ADDR_VAR 0 1
39357: PUSH
39358: LD_VAR 0 1
39362: PPUSH
39363: LD_VAR 0 3
39367: PPUSH
39368: LD_VAR 0 5
39372: PPUSH
39373: CALL_OW 1
39377: ST_TO_ADDR
// result := list ;
39378: LD_ADDR_VAR 0 4
39382: PUSH
39383: LD_VAR 0 1
39387: ST_TO_ADDR
// end ;
39388: LD_VAR 0 4
39392: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39393: LD_INT 0
39395: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39396: LD_ADDR_VAR 0 5
39400: PUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 250
39410: PPUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 251
39420: PPUSH
39421: LD_VAR 0 2
39425: PPUSH
39426: LD_VAR 0 3
39430: PPUSH
39431: LD_VAR 0 4
39435: PPUSH
39436: CALL 39818 0 5
39440: ST_TO_ADDR
// end ;
39441: LD_VAR 0 5
39445: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39446: LD_INT 0
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
// if not list or not unit then
39452: LD_VAR 0 2
39456: NOT
39457: IFTRUE 39466
39459: PUSH
39460: LD_VAR 0 1
39464: NOT
39465: OR
39466: IFFALSE 39470
// exit ;
39468: GO 39813
// result := [ ] ;
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: EMPTY
39476: ST_TO_ADDR
// for i in list do
39477: LD_ADDR_VAR 0 6
39481: PUSH
39482: LD_VAR 0 2
39486: PUSH
39487: FOR_IN
39488: IFFALSE 39706
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39490: LD_ADDR_VAR 0 8
39494: PUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: LD_VAR 0 6
39504: PUSH
39505: LD_INT 1
39507: ARRAY
39508: PPUSH
39509: LD_VAR 0 6
39513: PUSH
39514: LD_INT 2
39516: ARRAY
39517: PPUSH
39518: CALL_OW 297
39522: ST_TO_ADDR
// if not Count ( result ) then
39523: LD_VAR 0 5
39527: PPUSH
39528: CALL 36074 0 1
39532: NOT
39533: IFFALSE 39566
// begin result := Join ( result , [ i , tmp ] ) ;
39535: LD_ADDR_VAR 0 5
39539: PUSH
39540: LD_VAR 0 5
39544: PPUSH
39545: LD_VAR 0 6
39549: PUSH
39550: LD_VAR 0 8
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PPUSH
39559: CALL 72006 0 2
39563: ST_TO_ADDR
// continue ;
39564: GO 39487
// end ; if result [ result ] [ 2 ] <= tmp then
39566: LD_VAR 0 5
39570: PUSH
39571: LD_VAR 0 5
39575: ARRAY
39576: PUSH
39577: LD_INT 2
39579: ARRAY
39580: PUSH
39581: LD_VAR 0 8
39585: LESSEQUAL
39586: IFFALSE 39619
// result := Join ( result , [ i , tmp ] ) else
39588: LD_ADDR_VAR 0 5
39592: PUSH
39593: LD_VAR 0 5
39597: PPUSH
39598: LD_VAR 0 6
39602: PUSH
39603: LD_VAR 0 8
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PPUSH
39612: CALL 72006 0 2
39616: ST_TO_ADDR
39617: GO 39704
// begin for j := 1 to Count ( result ) do
39619: LD_ADDR_VAR 0 7
39623: PUSH
39624: DOUBLE
39625: LD_INT 1
39627: DEC
39628: ST_TO_ADDR
39629: LD_VAR 0 5
39633: PPUSH
39634: CALL 36074 0 1
39638: PUSH
39639: FOR_TO
39640: IFFALSE 39702
// begin if tmp < result [ j ] [ 2 ] then
39642: LD_VAR 0 8
39646: PUSH
39647: LD_VAR 0 5
39651: PUSH
39652: LD_VAR 0 7
39656: ARRAY
39657: PUSH
39658: LD_INT 2
39660: ARRAY
39661: LESS
39662: IFFALSE 39700
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39664: LD_ADDR_VAR 0 5
39668: PUSH
39669: LD_VAR 0 5
39673: PPUSH
39674: LD_VAR 0 7
39678: PPUSH
39679: LD_VAR 0 6
39683: PUSH
39684: LD_VAR 0 8
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PPUSH
39693: CALL_OW 2
39697: ST_TO_ADDR
// break ;
39698: GO 39702
// end ; end ;
39700: GO 39639
39702: POP
39703: POP
// end ; end ;
39704: GO 39487
39706: POP
39707: POP
// if result and not asc then
39708: LD_VAR 0 5
39712: IFFALSE 39721
39714: PUSH
39715: LD_VAR 0 3
39719: NOT
39720: AND
39721: IFFALSE 39738
// result := ReverseArray ( result ) ;
39723: LD_ADDR_VAR 0 5
39727: PUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: CALL 67096 0 1
39737: ST_TO_ADDR
// tmp := [ ] ;
39738: LD_ADDR_VAR 0 8
39742: PUSH
39743: EMPTY
39744: ST_TO_ADDR
// if mode then
39745: LD_VAR 0 4
39749: IFFALSE 39813
// begin for i := 1 to result do
39751: LD_ADDR_VAR 0 6
39755: PUSH
39756: DOUBLE
39757: LD_INT 1
39759: DEC
39760: ST_TO_ADDR
39761: LD_VAR 0 5
39765: PUSH
39766: FOR_TO
39767: IFFALSE 39801
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39769: LD_ADDR_VAR 0 8
39773: PUSH
39774: LD_VAR 0 8
39778: PPUSH
39779: LD_VAR 0 5
39783: PUSH
39784: LD_VAR 0 6
39788: ARRAY
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: PPUSH
39794: CALL 72006 0 2
39798: ST_TO_ADDR
39799: GO 39766
39801: POP
39802: POP
// result := tmp ;
39803: LD_ADDR_VAR 0 5
39807: PUSH
39808: LD_VAR 0 8
39812: ST_TO_ADDR
// end ; end ;
39813: LD_VAR 0 5
39817: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39818: LD_INT 0
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
// if not list then
39824: LD_VAR 0 3
39828: NOT
39829: IFFALSE 39833
// exit ;
39831: GO 40223
// result := [ ] ;
39833: LD_ADDR_VAR 0 6
39837: PUSH
39838: EMPTY
39839: ST_TO_ADDR
// for i in list do
39840: LD_ADDR_VAR 0 7
39844: PUSH
39845: LD_VAR 0 3
39849: PUSH
39850: FOR_IN
39851: IFFALSE 40053
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39853: LD_ADDR_VAR 0 9
39857: PUSH
39858: LD_VAR 0 7
39862: PPUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: LD_VAR 0 2
39872: PPUSH
39873: CALL_OW 297
39877: ST_TO_ADDR
// if not result then
39878: LD_VAR 0 6
39882: NOT
39883: IFFALSE 39909
// result := [ [ i , tmp ] ] else
39885: LD_ADDR_VAR 0 6
39889: PUSH
39890: LD_VAR 0 7
39894: PUSH
39895: LD_VAR 0 9
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: EMPTY
39905: LIST
39906: ST_TO_ADDR
39907: GO 40051
// begin if result [ result ] [ 2 ] <= tmp then
39909: LD_VAR 0 6
39913: PUSH
39914: LD_VAR 0 6
39918: ARRAY
39919: PUSH
39920: LD_INT 2
39922: ARRAY
39923: PUSH
39924: LD_VAR 0 9
39928: LESSEQUAL
39929: IFFALSE 39971
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39931: LD_ADDR_VAR 0 6
39935: PUSH
39936: LD_VAR 0 6
39940: PPUSH
39941: LD_VAR 0 6
39945: PUSH
39946: LD_INT 1
39948: PLUS
39949: PPUSH
39950: LD_VAR 0 7
39954: PUSH
39955: LD_VAR 0 9
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PPUSH
39964: CALL_OW 2
39968: ST_TO_ADDR
39969: GO 40051
// for j := 1 to result do
39971: LD_ADDR_VAR 0 8
39975: PUSH
39976: DOUBLE
39977: LD_INT 1
39979: DEC
39980: ST_TO_ADDR
39981: LD_VAR 0 6
39985: PUSH
39986: FOR_TO
39987: IFFALSE 40049
// begin if tmp < result [ j ] [ 2 ] then
39989: LD_VAR 0 9
39993: PUSH
39994: LD_VAR 0 6
39998: PUSH
39999: LD_VAR 0 8
40003: ARRAY
40004: PUSH
40005: LD_INT 2
40007: ARRAY
40008: LESS
40009: IFFALSE 40047
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40011: LD_ADDR_VAR 0 6
40015: PUSH
40016: LD_VAR 0 6
40020: PPUSH
40021: LD_VAR 0 8
40025: PPUSH
40026: LD_VAR 0 7
40030: PUSH
40031: LD_VAR 0 9
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PPUSH
40040: CALL_OW 2
40044: ST_TO_ADDR
// break ;
40045: GO 40049
// end ; end ;
40047: GO 39986
40049: POP
40050: POP
// end ; end ;
40051: GO 39850
40053: POP
40054: POP
// if result and not asc then
40055: LD_VAR 0 6
40059: IFFALSE 40068
40061: PUSH
40062: LD_VAR 0 4
40066: NOT
40067: AND
40068: IFFALSE 40143
// begin tmp := result ;
40070: LD_ADDR_VAR 0 9
40074: PUSH
40075: LD_VAR 0 6
40079: ST_TO_ADDR
// for i = tmp downto 1 do
40080: LD_ADDR_VAR 0 7
40084: PUSH
40085: DOUBLE
40086: LD_VAR 0 9
40090: INC
40091: ST_TO_ADDR
40092: LD_INT 1
40094: PUSH
40095: FOR_DOWNTO
40096: IFFALSE 40141
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40098: LD_ADDR_VAR 0 6
40102: PUSH
40103: LD_VAR 0 6
40107: PPUSH
40108: LD_VAR 0 9
40112: PUSH
40113: LD_VAR 0 7
40117: MINUS
40118: PUSH
40119: LD_INT 1
40121: PLUS
40122: PPUSH
40123: LD_VAR 0 9
40127: PUSH
40128: LD_VAR 0 7
40132: ARRAY
40133: PPUSH
40134: CALL_OW 1
40138: ST_TO_ADDR
40139: GO 40095
40141: POP
40142: POP
// end ; tmp := [ ] ;
40143: LD_ADDR_VAR 0 9
40147: PUSH
40148: EMPTY
40149: ST_TO_ADDR
// if mode then
40150: LD_VAR 0 5
40154: IFFALSE 40223
// begin for i = 1 to result do
40156: LD_ADDR_VAR 0 7
40160: PUSH
40161: DOUBLE
40162: LD_INT 1
40164: DEC
40165: ST_TO_ADDR
40166: LD_VAR 0 6
40170: PUSH
40171: FOR_TO
40172: IFFALSE 40211
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40174: LD_ADDR_VAR 0 9
40178: PUSH
40179: LD_VAR 0 9
40183: PPUSH
40184: LD_VAR 0 7
40188: PPUSH
40189: LD_VAR 0 6
40193: PUSH
40194: LD_VAR 0 7
40198: ARRAY
40199: PUSH
40200: LD_INT 1
40202: ARRAY
40203: PPUSH
40204: CALL_OW 1
40208: ST_TO_ADDR
40209: GO 40171
40211: POP
40212: POP
// result := tmp ;
40213: LD_ADDR_VAR 0 6
40217: PUSH
40218: LD_VAR 0 9
40222: ST_TO_ADDR
// end ; end ;
40223: LD_VAR 0 6
40227: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40228: LD_INT 0
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40236: LD_ADDR_VAR 0 5
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// if not x or not y then
40258: LD_VAR 0 2
40262: NOT
40263: IFTRUE 40272
40265: PUSH
40266: LD_VAR 0 3
40270: NOT
40271: OR
40272: IFFALSE 40276
// exit ;
40274: GO 41932
// if not range then
40276: LD_VAR 0 4
40280: NOT
40281: IFFALSE 40291
// range := 10 ;
40283: LD_ADDR_VAR 0 4
40287: PUSH
40288: LD_INT 10
40290: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40291: LD_ADDR_VAR 0 8
40295: PUSH
40296: LD_INT 81
40298: PUSH
40299: LD_VAR 0 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 92
40310: PUSH
40311: LD_VAR 0 2
40315: PUSH
40316: LD_VAR 0 3
40320: PUSH
40321: LD_VAR 0 4
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: LD_INT 21
40337: PUSH
40338: LD_INT 3
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PPUSH
40354: CALL_OW 69
40358: ST_TO_ADDR
// if not tmp then
40359: LD_VAR 0 8
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 41932
// for i in tmp do
40368: LD_ADDR_VAR 0 6
40372: PUSH
40373: LD_VAR 0 8
40377: PUSH
40378: FOR_IN
40379: IFFALSE 41907
// begin points := [ 0 , 0 , 0 ] ;
40381: LD_ADDR_VAR 0 9
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// bpoints := 1 ;
40400: LD_ADDR_VAR 0 10
40404: PUSH
40405: LD_INT 1
40407: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40408: LD_VAR 0 6
40412: PPUSH
40413: CALL_OW 247
40417: PUSH
40418: LD_INT 1
40420: DOUBLE
40421: EQUAL
40422: IFTRUE 40426
40424: GO 41008
40426: POP
// begin if GetClass ( i ) = 1 then
40427: LD_VAR 0 6
40431: PPUSH
40432: CALL_OW 257
40436: PUSH
40437: LD_INT 1
40439: EQUAL
40440: IFFALSE 40461
// points := [ 10 , 5 , 3 ] ;
40442: LD_ADDR_VAR 0 9
40446: PUSH
40447: LD_INT 10
40449: PUSH
40450: LD_INT 5
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40461: LD_VAR 0 6
40465: PPUSH
40466: CALL_OW 257
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 3
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: IN
40485: IFFALSE 40506
// points := [ 3 , 2 , 1 ] ;
40487: LD_ADDR_VAR 0 9
40491: PUSH
40492: LD_INT 3
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40506: LD_VAR 0 6
40510: PPUSH
40511: CALL_OW 257
40515: PUSH
40516: LD_INT 5
40518: EQUAL
40519: IFFALSE 40540
// points := [ 130 , 5 , 2 ] ;
40521: LD_ADDR_VAR 0 9
40525: PUSH
40526: LD_INT 130
40528: PUSH
40529: LD_INT 5
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40540: LD_VAR 0 6
40544: PPUSH
40545: CALL_OW 257
40549: PUSH
40550: LD_INT 8
40552: EQUAL
40553: IFFALSE 40574
// points := [ 35 , 35 , 30 ] ;
40555: LD_ADDR_VAR 0 9
40559: PUSH
40560: LD_INT 35
40562: PUSH
40563: LD_INT 35
40565: PUSH
40566: LD_INT 30
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40574: LD_VAR 0 6
40578: PPUSH
40579: CALL_OW 257
40583: PUSH
40584: LD_INT 9
40586: EQUAL
40587: IFFALSE 40608
// points := [ 20 , 55 , 40 ] ;
40589: LD_ADDR_VAR 0 9
40593: PUSH
40594: LD_INT 20
40596: PUSH
40597: LD_INT 55
40599: PUSH
40600: LD_INT 40
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40608: LD_VAR 0 6
40612: PPUSH
40613: CALL_OW 257
40617: PUSH
40618: LD_INT 12
40620: PUSH
40621: LD_INT 16
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: IN
40628: IFFALSE 40649
// points := [ 5 , 3 , 2 ] ;
40630: LD_ADDR_VAR 0 9
40634: PUSH
40635: LD_INT 5
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40649: LD_VAR 0 6
40653: PPUSH
40654: CALL_OW 257
40658: PUSH
40659: LD_INT 17
40661: EQUAL
40662: IFFALSE 40683
// points := [ 100 , 50 , 75 ] ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_INT 100
40671: PUSH
40672: LD_INT 50
40674: PUSH
40675: LD_INT 75
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40683: LD_VAR 0 6
40687: PPUSH
40688: CALL_OW 257
40692: PUSH
40693: LD_INT 15
40695: EQUAL
40696: IFFALSE 40717
// points := [ 10 , 5 , 3 ] ;
40698: LD_ADDR_VAR 0 9
40702: PUSH
40703: LD_INT 10
40705: PUSH
40706: LD_INT 5
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40717: LD_VAR 0 6
40721: PPUSH
40722: CALL_OW 257
40726: PUSH
40727: LD_INT 14
40729: EQUAL
40730: IFFALSE 40751
// points := [ 10 , 0 , 0 ] ;
40732: LD_ADDR_VAR 0 9
40736: PUSH
40737: LD_INT 10
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40751: LD_VAR 0 6
40755: PPUSH
40756: CALL_OW 257
40760: PUSH
40761: LD_INT 11
40763: EQUAL
40764: IFFALSE 40785
// points := [ 30 , 10 , 5 ] ;
40766: LD_ADDR_VAR 0 9
40770: PUSH
40771: LD_INT 30
40773: PUSH
40774: LD_INT 10
40776: PUSH
40777: LD_INT 5
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40785: LD_VAR 0 1
40789: PPUSH
40790: LD_INT 5
40792: PPUSH
40793: CALL_OW 321
40797: PUSH
40798: LD_INT 2
40800: EQUAL
40801: IFFALSE 40818
// bpoints := bpoints * 1.8 ;
40803: LD_ADDR_VAR 0 10
40807: PUSH
40808: LD_VAR 0 10
40812: PUSH
40813: LD_REAL  1.80000000000000E+0000
40816: MUL
40817: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40818: LD_VAR 0 6
40822: PPUSH
40823: CALL_OW 257
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 4
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: IN
40846: IFFALSE 40866
40848: PUSH
40849: LD_VAR 0 1
40853: PPUSH
40854: LD_INT 51
40856: PPUSH
40857: CALL_OW 321
40861: PUSH
40862: LD_INT 2
40864: EQUAL
40865: AND
40866: IFFALSE 40883
// bpoints := bpoints * 1.2 ;
40868: LD_ADDR_VAR 0 10
40872: PUSH
40873: LD_VAR 0 10
40877: PUSH
40878: LD_REAL  1.20000000000000E+0000
40881: MUL
40882: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40883: LD_VAR 0 6
40887: PPUSH
40888: CALL_OW 257
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: LD_INT 7
40898: PUSH
40899: LD_INT 9
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: IN
40907: IFFALSE 40927
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: LD_INT 52
40917: PPUSH
40918: CALL_OW 321
40922: PUSH
40923: LD_INT 2
40925: EQUAL
40926: AND
40927: IFFALSE 40944
// bpoints := bpoints * 1.5 ;
40929: LD_ADDR_VAR 0 10
40933: PUSH
40934: LD_VAR 0 10
40938: PUSH
40939: LD_REAL  1.50000000000000E+0000
40942: MUL
40943: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40944: LD_VAR 0 1
40948: PPUSH
40949: LD_INT 66
40951: PPUSH
40952: CALL_OW 321
40956: PUSH
40957: LD_INT 2
40959: EQUAL
40960: IFFALSE 40977
// bpoints := bpoints * 1.1 ;
40962: LD_ADDR_VAR 0 10
40966: PUSH
40967: LD_VAR 0 10
40971: PUSH
40972: LD_REAL  1.10000000000000E+0000
40975: MUL
40976: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40977: LD_ADDR_VAR 0 10
40981: PUSH
40982: LD_VAR 0 10
40986: PUSH
40987: LD_VAR 0 6
40991: PPUSH
40992: LD_INT 1
40994: PPUSH
40995: CALL_OW 259
40999: PUSH
41000: LD_REAL  1.15000000000000E+0000
41003: MUL
41004: MUL
41005: ST_TO_ADDR
// end ; unit_vehicle :
41006: GO 41836
41008: LD_INT 2
41010: DOUBLE
41011: EQUAL
41012: IFTRUE 41016
41014: GO 41824
41016: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41017: LD_VAR 0 6
41021: PPUSH
41022: CALL_OW 264
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: LD_INT 42
41032: PUSH
41033: LD_INT 24
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: LIST
41040: IN
41041: IFFALSE 41062
// points := [ 25 , 5 , 3 ] ;
41043: LD_ADDR_VAR 0 9
41047: PUSH
41048: LD_INT 25
41050: PUSH
41051: LD_INT 5
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41062: LD_VAR 0 6
41066: PPUSH
41067: CALL_OW 264
41071: PUSH
41072: LD_INT 4
41074: PUSH
41075: LD_INT 43
41077: PUSH
41078: LD_INT 25
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: IN
41086: IFFALSE 41107
// points := [ 40 , 15 , 5 ] ;
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: LD_INT 40
41095: PUSH
41096: LD_INT 15
41098: PUSH
41099: LD_INT 5
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41107: LD_VAR 0 6
41111: PPUSH
41112: CALL_OW 264
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: LD_INT 23
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: IN
41127: IFFALSE 41148
// points := [ 7 , 25 , 8 ] ;
41129: LD_ADDR_VAR 0 9
41133: PUSH
41134: LD_INT 7
41136: PUSH
41137: LD_INT 25
41139: PUSH
41140: LD_INT 8
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41148: LD_VAR 0 6
41152: PPUSH
41153: CALL_OW 264
41157: PUSH
41158: LD_INT 5
41160: PUSH
41161: LD_INT 27
41163: PUSH
41164: LD_INT 44
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: IN
41172: IFFALSE 41193
// points := [ 14 , 50 , 16 ] ;
41174: LD_ADDR_VAR 0 9
41178: PUSH
41179: LD_INT 14
41181: PUSH
41182: LD_INT 50
41184: PUSH
41185: LD_INT 16
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41193: LD_VAR 0 6
41197: PPUSH
41198: CALL_OW 264
41202: PUSH
41203: LD_INT 6
41205: PUSH
41206: LD_INT 46
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: IN
41213: IFFALSE 41234
// points := [ 32 , 120 , 70 ] ;
41215: LD_ADDR_VAR 0 9
41219: PUSH
41220: LD_INT 32
41222: PUSH
41223: LD_INT 120
41225: PUSH
41226: LD_INT 70
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41234: LD_VAR 0 6
41238: PPUSH
41239: CALL_OW 264
41243: PUSH
41244: LD_INT 7
41246: PUSH
41247: LD_INT 28
41249: PUSH
41250: LD_INT 45
41252: PUSH
41253: LD_INT 92
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: IN
41262: IFFALSE 41283
// points := [ 35 , 20 , 45 ] ;
41264: LD_ADDR_VAR 0 9
41268: PUSH
41269: LD_INT 35
41271: PUSH
41272: LD_INT 20
41274: PUSH
41275: LD_INT 45
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41283: LD_VAR 0 6
41287: PPUSH
41288: CALL_OW 264
41292: PUSH
41293: LD_INT 47
41295: PUSH
41296: EMPTY
41297: LIST
41298: IN
41299: IFFALSE 41320
// points := [ 67 , 45 , 75 ] ;
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: LD_INT 67
41308: PUSH
41309: LD_INT 45
41311: PUSH
41312: LD_INT 75
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41320: LD_VAR 0 6
41324: PPUSH
41325: CALL_OW 264
41329: PUSH
41330: LD_INT 26
41332: PUSH
41333: EMPTY
41334: LIST
41335: IN
41336: IFFALSE 41357
// points := [ 120 , 30 , 80 ] ;
41338: LD_ADDR_VAR 0 9
41342: PUSH
41343: LD_INT 120
41345: PUSH
41346: LD_INT 30
41348: PUSH
41349: LD_INT 80
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41357: LD_VAR 0 6
41361: PPUSH
41362: CALL_OW 264
41366: PUSH
41367: LD_INT 22
41369: PUSH
41370: EMPTY
41371: LIST
41372: IN
41373: IFFALSE 41394
// points := [ 40 , 1 , 1 ] ;
41375: LD_ADDR_VAR 0 9
41379: PUSH
41380: LD_INT 40
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41394: LD_VAR 0 6
41398: PPUSH
41399: CALL_OW 264
41403: PUSH
41404: LD_INT 29
41406: PUSH
41407: EMPTY
41408: LIST
41409: IN
41410: IFFALSE 41431
// points := [ 70 , 200 , 400 ] ;
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: LD_INT 70
41419: PUSH
41420: LD_INT 200
41422: PUSH
41423: LD_INT 400
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41431: LD_VAR 0 6
41435: PPUSH
41436: CALL_OW 264
41440: PUSH
41441: LD_INT 14
41443: PUSH
41444: LD_INT 53
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: IN
41451: IFFALSE 41472
// points := [ 40 , 10 , 20 ] ;
41453: LD_ADDR_VAR 0 9
41457: PUSH
41458: LD_INT 40
41460: PUSH
41461: LD_INT 10
41463: PUSH
41464: LD_INT 20
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41472: LD_VAR 0 6
41476: PPUSH
41477: CALL_OW 264
41481: PUSH
41482: LD_INT 9
41484: PUSH
41485: EMPTY
41486: LIST
41487: IN
41488: IFFALSE 41509
// points := [ 5 , 70 , 20 ] ;
41490: LD_ADDR_VAR 0 9
41494: PUSH
41495: LD_INT 5
41497: PUSH
41498: LD_INT 70
41500: PUSH
41501: LD_INT 20
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41509: LD_VAR 0 6
41513: PPUSH
41514: CALL_OW 264
41518: PUSH
41519: LD_INT 10
41521: PUSH
41522: EMPTY
41523: LIST
41524: IN
41525: IFFALSE 41546
// points := [ 35 , 110 , 70 ] ;
41527: LD_ADDR_VAR 0 9
41531: PUSH
41532: LD_INT 35
41534: PUSH
41535: LD_INT 110
41537: PUSH
41538: LD_INT 70
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41546: LD_VAR 0 6
41550: PPUSH
41551: CALL_OW 265
41555: PUSH
41556: LD_INT 25
41558: EQUAL
41559: IFFALSE 41580
// points := [ 80 , 65 , 100 ] ;
41561: LD_ADDR_VAR 0 9
41565: PUSH
41566: LD_INT 80
41568: PUSH
41569: LD_INT 65
41571: PUSH
41572: LD_INT 100
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41580: LD_VAR 0 6
41584: PPUSH
41585: CALL_OW 263
41589: PUSH
41590: LD_INT 1
41592: EQUAL
41593: IFFALSE 41628
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41595: LD_ADDR_VAR 0 10
41599: PUSH
41600: LD_VAR 0 10
41604: PUSH
41605: LD_VAR 0 6
41609: PPUSH
41610: CALL_OW 311
41614: PPUSH
41615: LD_INT 3
41617: PPUSH
41618: CALL_OW 259
41622: PUSH
41623: LD_INT 4
41625: MUL
41626: MUL
41627: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41628: LD_VAR 0 6
41632: PPUSH
41633: CALL_OW 263
41637: PUSH
41638: LD_INT 2
41640: EQUAL
41641: IFFALSE 41692
// begin j := IsControledBy ( i ) ;
41643: LD_ADDR_VAR 0 7
41647: PUSH
41648: LD_VAR 0 6
41652: PPUSH
41653: CALL_OW 312
41657: ST_TO_ADDR
// if j then
41658: LD_VAR 0 7
41662: IFFALSE 41692
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41664: LD_ADDR_VAR 0 10
41668: PUSH
41669: LD_VAR 0 10
41673: PUSH
41674: LD_VAR 0 7
41678: PPUSH
41679: LD_INT 3
41681: PPUSH
41682: CALL_OW 259
41686: PUSH
41687: LD_INT 3
41689: MUL
41690: MUL
41691: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41692: LD_VAR 0 6
41696: PPUSH
41697: CALL_OW 264
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: LD_INT 6
41707: PUSH
41708: LD_INT 46
41710: PUSH
41711: LD_INT 44
41713: PUSH
41714: LD_INT 47
41716: PUSH
41717: LD_INT 45
41719: PUSH
41720: LD_INT 28
41722: PUSH
41723: LD_INT 7
41725: PUSH
41726: LD_INT 27
41728: PUSH
41729: LD_INT 29
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: IN
41744: IFFALSE 41764
41746: PUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: LD_INT 52
41754: PPUSH
41755: CALL_OW 321
41759: PUSH
41760: LD_INT 2
41762: EQUAL
41763: AND
41764: IFFALSE 41781
// bpoints := bpoints * 1.2 ;
41766: LD_ADDR_VAR 0 10
41770: PUSH
41771: LD_VAR 0 10
41775: PUSH
41776: LD_REAL  1.20000000000000E+0000
41779: MUL
41780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41781: LD_VAR 0 6
41785: PPUSH
41786: CALL_OW 264
41790: PUSH
41791: LD_INT 6
41793: PUSH
41794: LD_INT 46
41796: PUSH
41797: LD_INT 47
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: IN
41805: IFFALSE 41822
// bpoints := bpoints * 1.2 ;
41807: LD_ADDR_VAR 0 10
41811: PUSH
41812: LD_VAR 0 10
41816: PUSH
41817: LD_REAL  1.20000000000000E+0000
41820: MUL
41821: ST_TO_ADDR
// end ; unit_building :
41822: GO 41836
41824: LD_INT 3
41826: DOUBLE
41827: EQUAL
41828: IFTRUE 41832
41830: GO 41835
41832: POP
// ; end ;
41833: GO 41836
41835: POP
// for j = 1 to 3 do
41836: LD_ADDR_VAR 0 7
41840: PUSH
41841: DOUBLE
41842: LD_INT 1
41844: DEC
41845: ST_TO_ADDR
41846: LD_INT 3
41848: PUSH
41849: FOR_TO
41850: IFFALSE 41903
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41852: LD_ADDR_VAR 0 5
41856: PUSH
41857: LD_VAR 0 5
41861: PPUSH
41862: LD_VAR 0 7
41866: PPUSH
41867: LD_VAR 0 5
41871: PUSH
41872: LD_VAR 0 7
41876: ARRAY
41877: PUSH
41878: LD_VAR 0 9
41882: PUSH
41883: LD_VAR 0 7
41887: ARRAY
41888: PUSH
41889: LD_VAR 0 10
41893: MUL
41894: PLUS
41895: PPUSH
41896: CALL_OW 1
41900: ST_TO_ADDR
41901: GO 41849
41903: POP
41904: POP
// end ;
41905: GO 40378
41907: POP
41908: POP
// result := Replace ( result , 4 , tmp ) ;
41909: LD_ADDR_VAR 0 5
41913: PUSH
41914: LD_VAR 0 5
41918: PPUSH
41919: LD_INT 4
41921: PPUSH
41922: LD_VAR 0 8
41926: PPUSH
41927: CALL_OW 1
41931: ST_TO_ADDR
// end ;
41932: LD_VAR 0 5
41936: RET
// export function DangerAtRange ( unit , range ) ; begin
41937: LD_INT 0
41939: PPUSH
// if not unit then
41940: LD_VAR 0 1
41944: NOT
41945: IFFALSE 41949
// exit ;
41947: GO 41994
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_VAR 0 1
41958: PPUSH
41959: CALL_OW 255
41963: PPUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 250
41973: PPUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 251
41983: PPUSH
41984: LD_VAR 0 2
41988: PPUSH
41989: CALL 40228 0 4
41993: ST_TO_ADDR
// end ;
41994: LD_VAR 0 3
41998: RET
// export function DangerInArea ( side , area ) ; begin
41999: LD_INT 0
42001: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_VAR 0 2
42011: PPUSH
42012: LD_INT 81
42014: PUSH
42015: LD_VAR 0 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PPUSH
42024: CALL_OW 70
42028: ST_TO_ADDR
// end ;
42029: LD_VAR 0 3
42033: RET
// export function IsExtension ( b ) ; begin
42034: LD_INT 0
42036: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42037: LD_ADDR_VAR 0 2
42041: PUSH
42042: LD_VAR 0 1
42046: PUSH
42047: LD_INT 23
42049: PUSH
42050: LD_INT 20
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_INT 17
42058: PUSH
42059: LD_INT 24
42061: PUSH
42062: LD_INT 21
42064: PUSH
42065: LD_INT 19
42067: PUSH
42068: LD_INT 16
42070: PUSH
42071: LD_INT 25
42073: PUSH
42074: LD_INT 18
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: IN
42089: ST_TO_ADDR
// end ;
42090: LD_VAR 0 2
42094: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42095: LD_INT 0
42097: PPUSH
42098: PPUSH
42099: PPUSH
// result := [ ] ;
42100: LD_ADDR_VAR 0 4
42104: PUSH
42105: EMPTY
42106: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: LD_INT 21
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PPUSH
42127: CALL_OW 70
42131: ST_TO_ADDR
// if not tmp then
42132: LD_VAR 0 5
42136: NOT
42137: IFFALSE 42141
// exit ;
42139: GO 42205
// if checkLink then
42141: LD_VAR 0 3
42145: IFFALSE 42195
// begin for i in tmp do
42147: LD_ADDR_VAR 0 6
42151: PUSH
42152: LD_VAR 0 5
42156: PUSH
42157: FOR_IN
42158: IFFALSE 42193
// if GetBase ( i ) <> base then
42160: LD_VAR 0 6
42164: PPUSH
42165: CALL_OW 274
42169: PUSH
42170: LD_VAR 0 1
42174: NONEQUAL
42175: IFFALSE 42191
// ComLinkToBase ( base , i ) ;
42177: LD_VAR 0 1
42181: PPUSH
42182: LD_VAR 0 6
42186: PPUSH
42187: CALL_OW 169
42191: GO 42157
42193: POP
42194: POP
// end ; result := tmp ;
42195: LD_ADDR_VAR 0 4
42199: PUSH
42200: LD_VAR 0 5
42204: ST_TO_ADDR
// end ;
42205: LD_VAR 0 4
42209: RET
// export function ComComplete ( units , b ) ; var i ; begin
42210: LD_INT 0
42212: PPUSH
42213: PPUSH
// if not units then
42214: LD_VAR 0 1
42218: NOT
42219: IFFALSE 42223
// exit ;
42221: GO 42313
// for i in units do
42223: LD_ADDR_VAR 0 4
42227: PUSH
42228: LD_VAR 0 1
42232: PUSH
42233: FOR_IN
42234: IFFALSE 42311
// if BuildingStatus ( b ) = bs_build then
42236: LD_VAR 0 2
42240: PPUSH
42241: CALL_OW 461
42245: PUSH
42246: LD_INT 1
42248: EQUAL
42249: IFFALSE 42309
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42251: LD_VAR 0 4
42255: PPUSH
42256: LD_STRING h
42258: PUSH
42259: LD_VAR 0 2
42263: PPUSH
42264: CALL_OW 250
42268: PUSH
42269: LD_VAR 0 2
42273: PPUSH
42274: CALL_OW 251
42278: PUSH
42279: LD_VAR 0 2
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: PPUSH
42305: CALL_OW 446
42309: GO 42233
42311: POP
42312: POP
// end ;
42313: LD_VAR 0 3
42317: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42318: LD_INT 0
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42326: LD_VAR 0 1
42330: NOT
42331: IFTRUE 42348
42333: PUSH
42334: LD_VAR 0 1
42338: PPUSH
42339: CALL_OW 263
42343: PUSH
42344: LD_INT 2
42346: NONEQUAL
42347: OR
42348: IFFALSE 42352
// exit ;
42350: GO 42668
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42352: LD_ADDR_VAR 0 6
42356: PUSH
42357: LD_INT 22
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 255
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 30
42379: PUSH
42380: LD_INT 36
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 34
42389: PUSH
42390: LD_INT 31
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PPUSH
42406: CALL_OW 69
42410: ST_TO_ADDR
// if not tmp then
42411: LD_VAR 0 6
42415: NOT
42416: IFFALSE 42420
// exit ;
42418: GO 42668
// result := [ ] ;
42420: LD_ADDR_VAR 0 2
42424: PUSH
42425: EMPTY
42426: ST_TO_ADDR
// for i in tmp do
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_VAR 0 6
42436: PUSH
42437: FOR_IN
42438: IFFALSE 42509
// begin t := UnitsInside ( i ) ;
42440: LD_ADDR_VAR 0 4
42444: PUSH
42445: LD_VAR 0 3
42449: PPUSH
42450: CALL_OW 313
42454: ST_TO_ADDR
// if t then
42455: LD_VAR 0 4
42459: IFFALSE 42507
// for j in t do
42461: LD_ADDR_VAR 0 7
42465: PUSH
42466: LD_VAR 0 4
42470: PUSH
42471: FOR_IN
42472: IFFALSE 42505
// result := Replace ( result , result + 1 , j ) ;
42474: LD_ADDR_VAR 0 2
42478: PUSH
42479: LD_VAR 0 2
42483: PPUSH
42484: LD_VAR 0 2
42488: PUSH
42489: LD_INT 1
42491: PLUS
42492: PPUSH
42493: LD_VAR 0 7
42497: PPUSH
42498: CALL_OW 1
42502: ST_TO_ADDR
42503: GO 42471
42505: POP
42506: POP
// end ;
42507: GO 42437
42509: POP
42510: POP
// if not result then
42511: LD_VAR 0 2
42515: NOT
42516: IFFALSE 42520
// exit ;
42518: GO 42668
// mech := result [ 1 ] ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_VAR 0 2
42529: PUSH
42530: LD_INT 1
42532: ARRAY
42533: ST_TO_ADDR
// if result > 1 then
42534: LD_VAR 0 2
42538: PUSH
42539: LD_INT 1
42541: GREATER
42542: IFFALSE 42654
// begin for i = 2 to result do
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: DOUBLE
42550: LD_INT 2
42552: DEC
42553: ST_TO_ADDR
42554: LD_VAR 0 2
42558: PUSH
42559: FOR_TO
42560: IFFALSE 42652
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_VAR 0 3
42576: ARRAY
42577: PPUSH
42578: LD_INT 3
42580: PPUSH
42581: CALL_OW 259
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_VAR 0 3
42595: ARRAY
42596: PPUSH
42597: CALL_OW 432
42601: MINUS
42602: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42603: LD_VAR 0 4
42607: PUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_INT 3
42615: PPUSH
42616: CALL_OW 259
42620: PUSH
42621: LD_VAR 0 5
42625: PPUSH
42626: CALL_OW 432
42630: MINUS
42631: GREATEREQUAL
42632: IFFALSE 42650
// mech := result [ i ] ;
42634: LD_ADDR_VAR 0 5
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_VAR 0 3
42648: ARRAY
42649: ST_TO_ADDR
// end ;
42650: GO 42559
42652: POP
42653: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42654: LD_VAR 0 1
42658: PPUSH
42659: LD_VAR 0 5
42663: PPUSH
42664: CALL_OW 135
// end ;
42668: LD_VAR 0 2
42672: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42673: LD_INT 0
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
// result := [ ] ;
42688: LD_ADDR_VAR 0 7
42692: PUSH
42693: EMPTY
42694: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 266
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: IN
42715: NOT
42716: IFFALSE 42720
// exit ;
42718: GO 44360
// if name then
42720: LD_VAR 0 3
42724: IFFALSE 42740
// SetBName ( base_dep , name ) ;
42726: LD_VAR 0 1
42730: PPUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: CALL_OW 500
// base := GetBase ( base_dep ) ;
42740: LD_ADDR_VAR 0 15
42744: PUSH
42745: LD_VAR 0 1
42749: PPUSH
42750: CALL_OW 274
42754: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42755: LD_ADDR_VAR 0 16
42759: PUSH
42760: LD_VAR 0 1
42764: PPUSH
42765: CALL_OW 255
42769: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42770: LD_ADDR_VAR 0 17
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: CALL_OW 248
42784: ST_TO_ADDR
// if sources then
42785: LD_VAR 0 5
42789: IFFALSE 42836
// for i = 1 to 3 do
42791: LD_ADDR_VAR 0 8
42795: PUSH
42796: DOUBLE
42797: LD_INT 1
42799: DEC
42800: ST_TO_ADDR
42801: LD_INT 3
42803: PUSH
42804: FOR_TO
42805: IFFALSE 42834
// AddResourceType ( base , i , sources [ i ] ) ;
42807: LD_VAR 0 15
42811: PPUSH
42812: LD_VAR 0 8
42816: PPUSH
42817: LD_VAR 0 5
42821: PUSH
42822: LD_VAR 0 8
42826: ARRAY
42827: PPUSH
42828: CALL_OW 276
42832: GO 42804
42834: POP
42835: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42836: LD_ADDR_VAR 0 18
42840: PUSH
42841: LD_VAR 0 15
42845: PPUSH
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_INT 1
42853: PPUSH
42854: CALL 42095 0 3
42858: ST_TO_ADDR
// InitHc ;
42859: CALL_OW 19
// InitUc ;
42863: CALL_OW 18
// uc_side := side ;
42867: LD_ADDR_OWVAR 20
42871: PUSH
42872: LD_VAR 0 16
42876: ST_TO_ADDR
// uc_nation := nation ;
42877: LD_ADDR_OWVAR 21
42881: PUSH
42882: LD_VAR 0 17
42886: ST_TO_ADDR
// if buildings then
42887: LD_VAR 0 18
42891: IFFALSE 44219
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42893: LD_ADDR_VAR 0 19
42897: PUSH
42898: LD_VAR 0 18
42902: PPUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 29
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 30
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PPUSH
42931: CALL_OW 72
42935: ST_TO_ADDR
// if tmp then
42936: LD_VAR 0 19
42940: IFFALSE 42988
// for i in tmp do
42942: LD_ADDR_VAR 0 8
42946: PUSH
42947: LD_VAR 0 19
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42986
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42955: LD_VAR 0 8
42959: PPUSH
42960: CALL_OW 250
42964: PPUSH
42965: LD_VAR 0 8
42969: PPUSH
42970: CALL_OW 251
42974: PPUSH
42975: LD_VAR 0 16
42979: PPUSH
42980: CALL_OW 441
42984: GO 42952
42986: POP
42987: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42988: LD_VAR 0 18
42992: PPUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 30
42998: PUSH
42999: LD_INT 32
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 30
43008: PUSH
43009: LD_INT 33
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PPUSH
43021: CALL_OW 72
43025: IFFALSE 43113
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43027: LD_ADDR_VAR 0 8
43031: PUSH
43032: LD_VAR 0 18
43036: PPUSH
43037: LD_INT 2
43039: PUSH
43040: LD_INT 30
43042: PUSH
43043: LD_INT 32
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 30
43052: PUSH
43053: LD_INT 33
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: PPUSH
43065: CALL_OW 72
43069: PUSH
43070: FOR_IN
43071: IFFALSE 43111
// begin if not GetBWeapon ( i ) then
43073: LD_VAR 0 8
43077: PPUSH
43078: CALL_OW 269
43082: NOT
43083: IFFALSE 43109
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43085: LD_VAR 0 8
43089: PPUSH
43090: LD_VAR 0 8
43094: PPUSH
43095: LD_VAR 0 2
43099: PPUSH
43100: CALL 44365 0 2
43104: PPUSH
43105: CALL_OW 431
// end ;
43109: GO 43070
43111: POP
43112: POP
// end ; for i = 1 to personel do
43113: LD_ADDR_VAR 0 8
43117: PUSH
43118: DOUBLE
43119: LD_INT 1
43121: DEC
43122: ST_TO_ADDR
43123: LD_VAR 0 6
43127: PUSH
43128: FOR_TO
43129: IFFALSE 44199
// begin if i > 4 then
43131: LD_VAR 0 8
43135: PUSH
43136: LD_INT 4
43138: GREATER
43139: IFFALSE 43143
// break ;
43141: GO 44199
// case i of 1 :
43143: LD_VAR 0 8
43147: PUSH
43148: LD_INT 1
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43236
43156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: LD_VAR 0 18
43166: PPUSH
43167: LD_INT 22
43169: PUSH
43170: LD_VAR 0 16
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 58
43181: PUSH
43182: EMPTY
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 30
43190: PUSH
43191: LD_INT 32
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 30
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 30
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: PPUSH
43229: CALL_OW 72
43233: ST_TO_ADDR
43234: GO 43458
43236: LD_INT 2
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43306
43244: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43245: LD_ADDR_VAR 0 12
43249: PUSH
43250: LD_VAR 0 18
43254: PPUSH
43255: LD_INT 22
43257: PUSH
43258: LD_VAR 0 16
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 30
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 30
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 72
43303: ST_TO_ADDR
43304: GO 43458
43306: LD_INT 3
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43376
43314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43315: LD_ADDR_VAR 0 12
43319: PUSH
43320: LD_VAR 0 18
43324: PPUSH
43325: LD_INT 22
43327: PUSH
43328: LD_VAR 0 16
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 30
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 30
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PPUSH
43369: CALL_OW 72
43373: ST_TO_ADDR
43374: GO 43458
43376: LD_INT 4
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43457
43384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43385: LD_ADDR_VAR 0 12
43389: PUSH
43390: LD_VAR 0 18
43394: PPUSH
43395: LD_INT 22
43397: PUSH
43398: LD_VAR 0 16
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 30
43412: PUSH
43413: LD_INT 6
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 30
43422: PUSH
43423: LD_INT 7
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 30
43432: PUSH
43433: LD_INT 8
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PPUSH
43450: CALL_OW 72
43454: ST_TO_ADDR
43455: GO 43458
43457: POP
// if i = 1 then
43458: LD_VAR 0 8
43462: PUSH
43463: LD_INT 1
43465: EQUAL
43466: IFFALSE 43577
// begin tmp := [ ] ;
43468: LD_ADDR_VAR 0 19
43472: PUSH
43473: EMPTY
43474: ST_TO_ADDR
// for j in f do
43475: LD_ADDR_VAR 0 9
43479: PUSH
43480: LD_VAR 0 12
43484: PUSH
43485: FOR_IN
43486: IFFALSE 43559
// if GetBType ( j ) = b_bunker then
43488: LD_VAR 0 9
43492: PPUSH
43493: CALL_OW 266
43497: PUSH
43498: LD_INT 32
43500: EQUAL
43501: IFFALSE 43528
// tmp := Insert ( tmp , 1 , j ) else
43503: LD_ADDR_VAR 0 19
43507: PUSH
43508: LD_VAR 0 19
43512: PPUSH
43513: LD_INT 1
43515: PPUSH
43516: LD_VAR 0 9
43520: PPUSH
43521: CALL_OW 2
43525: ST_TO_ADDR
43526: GO 43557
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43528: LD_ADDR_VAR 0 19
43532: PUSH
43533: LD_VAR 0 19
43537: PPUSH
43538: LD_VAR 0 19
43542: PUSH
43543: LD_INT 1
43545: PLUS
43546: PPUSH
43547: LD_VAR 0 9
43551: PPUSH
43552: CALL_OW 2
43556: ST_TO_ADDR
43557: GO 43485
43559: POP
43560: POP
// if tmp then
43561: LD_VAR 0 19
43565: IFFALSE 43577
// f := tmp ;
43567: LD_ADDR_VAR 0 12
43571: PUSH
43572: LD_VAR 0 19
43576: ST_TO_ADDR
// end ; x := personel [ i ] ;
43577: LD_ADDR_VAR 0 13
43581: PUSH
43582: LD_VAR 0 6
43586: PUSH
43587: LD_VAR 0 8
43591: ARRAY
43592: ST_TO_ADDR
// if x = - 1 then
43593: LD_VAR 0 13
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: EQUAL
43602: IFFALSE 43813
// begin for j in f do
43604: LD_ADDR_VAR 0 9
43608: PUSH
43609: LD_VAR 0 12
43613: PUSH
43614: FOR_IN
43615: IFFALSE 43809
// repeat InitHc ;
43617: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43621: LD_VAR 0 9
43625: PPUSH
43626: CALL_OW 266
43630: PUSH
43631: LD_INT 5
43633: EQUAL
43634: IFFALSE 43704
// begin if UnitsInside ( j ) < 3 then
43636: LD_VAR 0 9
43640: PPUSH
43641: CALL_OW 313
43645: PUSH
43646: LD_INT 3
43648: LESS
43649: IFFALSE 43685
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43651: LD_INT 0
43653: PPUSH
43654: LD_INT 5
43656: PUSH
43657: LD_INT 8
43659: PUSH
43660: LD_INT 9
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: PUSH
43668: LD_VAR 0 17
43672: ARRAY
43673: PPUSH
43674: LD_VAR 0 4
43678: PPUSH
43679: CALL_OW 380
43683: GO 43702
// PrepareHuman ( false , i , skill ) ;
43685: LD_INT 0
43687: PPUSH
43688: LD_VAR 0 8
43692: PPUSH
43693: LD_VAR 0 4
43697: PPUSH
43698: CALL_OW 380
// end else
43702: GO 43721
// PrepareHuman ( false , i , skill ) ;
43704: LD_INT 0
43706: PPUSH
43707: LD_VAR 0 8
43711: PPUSH
43712: LD_VAR 0 4
43716: PPUSH
43717: CALL_OW 380
// un := CreateHuman ;
43721: LD_ADDR_VAR 0 14
43725: PUSH
43726: CALL_OW 44
43730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: LD_VAR 0 7
43740: PPUSH
43741: LD_INT 1
43743: PPUSH
43744: LD_VAR 0 14
43748: PPUSH
43749: CALL_OW 2
43753: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43754: LD_VAR 0 14
43758: PPUSH
43759: LD_VAR 0 9
43763: PPUSH
43764: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43768: LD_VAR 0 9
43772: PPUSH
43773: CALL_OW 313
43777: PUSH
43778: LD_INT 6
43780: EQUAL
43781: IFTRUE 43805
43783: PUSH
43784: LD_VAR 0 9
43788: PPUSH
43789: CALL_OW 266
43793: PUSH
43794: LD_INT 32
43796: PUSH
43797: LD_INT 31
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: IN
43804: OR
43805: IFFALSE 43617
43807: GO 43614
43809: POP
43810: POP
// end else
43811: GO 44197
// for j = 1 to x do
43813: LD_ADDR_VAR 0 9
43817: PUSH
43818: DOUBLE
43819: LD_INT 1
43821: DEC
43822: ST_TO_ADDR
43823: LD_VAR 0 13
43827: PUSH
43828: FOR_TO
43829: IFFALSE 44195
// begin InitHc ;
43831: CALL_OW 19
// if not f then
43835: LD_VAR 0 12
43839: NOT
43840: IFFALSE 43929
// begin PrepareHuman ( false , i , skill ) ;
43842: LD_INT 0
43844: PPUSH
43845: LD_VAR 0 8
43849: PPUSH
43850: LD_VAR 0 4
43854: PPUSH
43855: CALL_OW 380
// un := CreateHuman ;
43859: LD_ADDR_VAR 0 14
43863: PUSH
43864: CALL_OW 44
43868: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43869: LD_ADDR_VAR 0 7
43873: PUSH
43874: LD_VAR 0 7
43878: PPUSH
43879: LD_INT 1
43881: PPUSH
43882: LD_VAR 0 14
43886: PPUSH
43887: CALL_OW 2
43891: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43892: LD_VAR 0 14
43896: PPUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 250
43906: PPUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 251
43916: PPUSH
43917: LD_INT 10
43919: PPUSH
43920: LD_INT 0
43922: PPUSH
43923: CALL_OW 50
// continue ;
43927: GO 43828
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43929: LD_VAR 0 12
43933: PUSH
43934: LD_INT 1
43936: ARRAY
43937: PPUSH
43938: CALL_OW 313
43942: IFFALSE 43970
43944: PUSH
43945: LD_VAR 0 12
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: PPUSH
43954: CALL_OW 266
43958: PUSH
43959: LD_INT 32
43961: PUSH
43962: LD_INT 31
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: IN
43969: AND
43970: IFTRUE 43991
43972: PUSH
43973: LD_VAR 0 12
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: PPUSH
43982: CALL_OW 313
43986: PUSH
43987: LD_INT 6
43989: EQUAL
43990: OR
43991: IFFALSE 44011
// f := Delete ( f , 1 ) ;
43993: LD_ADDR_VAR 0 12
43997: PUSH
43998: LD_VAR 0 12
44002: PPUSH
44003: LD_INT 1
44005: PPUSH
44006: CALL_OW 3
44010: ST_TO_ADDR
// if not f then
44011: LD_VAR 0 12
44015: NOT
44016: IFFALSE 44034
// begin x := x + 2 ;
44018: LD_ADDR_VAR 0 13
44022: PUSH
44023: LD_VAR 0 13
44027: PUSH
44028: LD_INT 2
44030: PLUS
44031: ST_TO_ADDR
// continue ;
44032: GO 43828
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44034: LD_VAR 0 12
44038: PUSH
44039: LD_INT 1
44041: ARRAY
44042: PPUSH
44043: CALL_OW 266
44047: PUSH
44048: LD_INT 5
44050: EQUAL
44051: IFFALSE 44125
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44053: LD_VAR 0 12
44057: PUSH
44058: LD_INT 1
44060: ARRAY
44061: PPUSH
44062: CALL_OW 313
44066: PUSH
44067: LD_INT 3
44069: LESS
44070: IFFALSE 44106
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44072: LD_INT 0
44074: PPUSH
44075: LD_INT 5
44077: PUSH
44078: LD_INT 8
44080: PUSH
44081: LD_INT 9
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: PUSH
44089: LD_VAR 0 17
44093: ARRAY
44094: PPUSH
44095: LD_VAR 0 4
44099: PPUSH
44100: CALL_OW 380
44104: GO 44123
// PrepareHuman ( false , i , skill ) ;
44106: LD_INT 0
44108: PPUSH
44109: LD_VAR 0 8
44113: PPUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: CALL_OW 380
// end else
44123: GO 44142
// PrepareHuman ( false , i , skill ) ;
44125: LD_INT 0
44127: PPUSH
44128: LD_VAR 0 8
44132: PPUSH
44133: LD_VAR 0 4
44137: PPUSH
44138: CALL_OW 380
// un := CreateHuman ;
44142: LD_ADDR_VAR 0 14
44146: PUSH
44147: CALL_OW 44
44151: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44152: LD_ADDR_VAR 0 7
44156: PUSH
44157: LD_VAR 0 7
44161: PPUSH
44162: LD_INT 1
44164: PPUSH
44165: LD_VAR 0 14
44169: PPUSH
44170: CALL_OW 2
44174: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44175: LD_VAR 0 14
44179: PPUSH
44180: LD_VAR 0 12
44184: PUSH
44185: LD_INT 1
44187: ARRAY
44188: PPUSH
44189: CALL_OW 52
// end ;
44193: GO 43828
44195: POP
44196: POP
// end ;
44197: GO 43128
44199: POP
44200: POP
// result := result ^ buildings ;
44201: LD_ADDR_VAR 0 7
44205: PUSH
44206: LD_VAR 0 7
44210: PUSH
44211: LD_VAR 0 18
44215: ADD
44216: ST_TO_ADDR
// end else
44217: GO 44360
// begin for i = 1 to personel do
44219: LD_ADDR_VAR 0 8
44223: PUSH
44224: DOUBLE
44225: LD_INT 1
44227: DEC
44228: ST_TO_ADDR
44229: LD_VAR 0 6
44233: PUSH
44234: FOR_TO
44235: IFFALSE 44358
// begin if i > 4 then
44237: LD_VAR 0 8
44241: PUSH
44242: LD_INT 4
44244: GREATER
44245: IFFALSE 44249
// break ;
44247: GO 44358
// x := personel [ i ] ;
44249: LD_ADDR_VAR 0 13
44253: PUSH
44254: LD_VAR 0 6
44258: PUSH
44259: LD_VAR 0 8
44263: ARRAY
44264: ST_TO_ADDR
// if x = - 1 then
44265: LD_VAR 0 13
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: EQUAL
44274: IFFALSE 44278
// continue ;
44276: GO 44234
// PrepareHuman ( false , i , skill ) ;
44278: LD_INT 0
44280: PPUSH
44281: LD_VAR 0 8
44285: PPUSH
44286: LD_VAR 0 4
44290: PPUSH
44291: CALL_OW 380
// un := CreateHuman ;
44295: LD_ADDR_VAR 0 14
44299: PUSH
44300: CALL_OW 44
44304: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44305: LD_VAR 0 14
44309: PPUSH
44310: LD_VAR 0 1
44314: PPUSH
44315: CALL_OW 250
44319: PPUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: CALL_OW 251
44329: PPUSH
44330: LD_INT 10
44332: PPUSH
44333: LD_INT 0
44335: PPUSH
44336: CALL_OW 50
// result := result ^ un ;
44340: LD_ADDR_VAR 0 7
44344: PUSH
44345: LD_VAR 0 7
44349: PUSH
44350: LD_VAR 0 14
44354: ADD
44355: ST_TO_ADDR
// end ;
44356: GO 44234
44358: POP
44359: POP
// end ; end ;
44360: LD_VAR 0 7
44364: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44365: LD_INT 0
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
// result := false ;
44383: LD_ADDR_VAR 0 3
44387: PUSH
44388: LD_INT 0
44390: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44391: LD_VAR 0 1
44395: NOT
44396: IFTRUE 44421
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 266
44408: PUSH
44409: LD_INT 32
44411: PUSH
44412: LD_INT 33
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: IN
44419: NOT
44420: OR
44421: IFFALSE 44425
// exit ;
44423: GO 45560
// nat := GetNation ( tower ) ;
44425: LD_ADDR_VAR 0 12
44429: PUSH
44430: LD_VAR 0 1
44434: PPUSH
44435: CALL_OW 248
44439: ST_TO_ADDR
// side := GetSide ( tower ) ;
44440: LD_ADDR_VAR 0 16
44444: PUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 255
44454: ST_TO_ADDR
// x := GetX ( tower ) ;
44455: LD_ADDR_VAR 0 10
44459: PUSH
44460: LD_VAR 0 1
44464: PPUSH
44465: CALL_OW 250
44469: ST_TO_ADDR
// y := GetY ( tower ) ;
44470: LD_ADDR_VAR 0 11
44474: PUSH
44475: LD_VAR 0 1
44479: PPUSH
44480: CALL_OW 251
44484: ST_TO_ADDR
// if not x or not y then
44485: LD_VAR 0 10
44489: NOT
44490: IFTRUE 44499
44492: PUSH
44493: LD_VAR 0 11
44497: NOT
44498: OR
44499: IFFALSE 44503
// exit ;
44501: GO 45560
// weapon := 0 ;
44503: LD_ADDR_VAR 0 18
44507: PUSH
44508: LD_INT 0
44510: ST_TO_ADDR
// fac_list := [ ] ;
44511: LD_ADDR_VAR 0 17
44515: PUSH
44516: EMPTY
44517: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44518: LD_ADDR_VAR 0 6
44522: PUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 274
44532: PPUSH
44533: LD_VAR 0 2
44537: PPUSH
44538: LD_INT 0
44540: PPUSH
44541: CALL 42095 0 3
44545: PPUSH
44546: LD_INT 30
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PPUSH
44556: CALL_OW 72
44560: ST_TO_ADDR
// if not factories then
44561: LD_VAR 0 6
44565: NOT
44566: IFFALSE 44570
// exit ;
44568: GO 45560
// for i in factories do
44570: LD_ADDR_VAR 0 8
44574: PUSH
44575: LD_VAR 0 6
44579: PUSH
44580: FOR_IN
44581: IFFALSE 44606
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44583: LD_ADDR_VAR 0 17
44587: PUSH
44588: LD_VAR 0 17
44592: PUSH
44593: LD_VAR 0 8
44597: PPUSH
44598: CALL_OW 478
44602: UNION
44603: ST_TO_ADDR
44604: GO 44580
44606: POP
44607: POP
// if not fac_list then
44608: LD_VAR 0 17
44612: NOT
44613: IFFALSE 44617
// exit ;
44615: GO 45560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44617: LD_ADDR_VAR 0 5
44621: PUSH
44622: LD_INT 4
44624: PUSH
44625: LD_INT 5
44627: PUSH
44628: LD_INT 9
44630: PUSH
44631: LD_INT 10
44633: PUSH
44634: LD_INT 6
44636: PUSH
44637: LD_INT 7
44639: PUSH
44640: LD_INT 11
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 27
44654: PUSH
44655: LD_INT 28
44657: PUSH
44658: LD_INT 26
44660: PUSH
44661: LD_INT 30
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 43
44672: PUSH
44673: LD_INT 44
44675: PUSH
44676: LD_INT 46
44678: PUSH
44679: LD_INT 45
44681: PUSH
44682: LD_INT 47
44684: PUSH
44685: LD_INT 49
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: PUSH
44701: LD_VAR 0 12
44705: ARRAY
44706: ST_TO_ADDR
// list := list isect fac_list ;
44707: LD_ADDR_VAR 0 5
44711: PUSH
44712: LD_VAR 0 5
44716: PUSH
44717: LD_VAR 0 17
44721: ISECT
44722: ST_TO_ADDR
// if not list then
44723: LD_VAR 0 5
44727: NOT
44728: IFFALSE 44732
// exit ;
44730: GO 45560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44732: LD_VAR 0 12
44736: PUSH
44737: LD_INT 3
44739: EQUAL
44740: IFFALSE 44752
44742: PUSH
44743: LD_INT 49
44745: PUSH
44746: LD_VAR 0 5
44750: IN
44751: AND
44752: IFFALSE 44772
44754: PUSH
44755: LD_INT 31
44757: PPUSH
44758: LD_VAR 0 16
44762: PPUSH
44763: CALL_OW 321
44767: PUSH
44768: LD_INT 2
44770: EQUAL
44771: AND
44772: IFFALSE 44832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44774: LD_INT 22
44776: PUSH
44777: LD_VAR 0 16
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 35
44788: PUSH
44789: LD_INT 49
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 91
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_INT 10
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 69
44821: NOT
44822: IFFALSE 44832
// weapon := ru_time_lapser ;
44824: LD_ADDR_VAR 0 18
44828: PUSH
44829: LD_INT 49
44831: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44832: LD_VAR 0 12
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: IN
44847: IFFALSE 44871
44849: PUSH
44850: LD_INT 11
44852: PUSH
44853: LD_VAR 0 5
44857: IN
44858: IFTRUE 44870
44860: PUSH
44861: LD_INT 30
44863: PUSH
44864: LD_VAR 0 5
44868: IN
44869: OR
44870: AND
44871: IFFALSE 44891
44873: PUSH
44874: LD_INT 6
44876: PPUSH
44877: LD_VAR 0 16
44881: PPUSH
44882: CALL_OW 321
44886: PUSH
44887: LD_INT 2
44889: EQUAL
44890: AND
44891: IFFALSE 45058
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44893: LD_INT 22
44895: PUSH
44896: LD_VAR 0 16
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 35
44910: PUSH
44911: LD_INT 11
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 35
44920: PUSH
44921: LD_INT 30
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 91
44935: PUSH
44936: LD_VAR 0 1
44940: PUSH
44941: LD_INT 18
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: PPUSH
44954: CALL_OW 69
44958: NOT
44959: IFFALSE 45035
44961: PUSH
44962: LD_INT 22
44964: PUSH
44965: LD_VAR 0 16
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 30
44979: PUSH
44980: LD_INT 32
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 30
44989: PUSH
44990: LD_INT 33
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 91
45004: PUSH
45005: LD_VAR 0 1
45009: PUSH
45010: LD_INT 12
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: PPUSH
45026: CALL_OW 69
45030: PUSH
45031: LD_INT 2
45033: GREATER
45034: AND
45035: IFFALSE 45058
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45037: LD_ADDR_VAR 0 18
45041: PUSH
45042: LD_INT 11
45044: PUSH
45045: LD_INT 30
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_VAR 0 12
45056: ARRAY
45057: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45058: LD_VAR 0 18
45062: NOT
45063: IFFALSE 45083
45065: PUSH
45066: LD_INT 40
45068: PPUSH
45069: LD_VAR 0 16
45073: PPUSH
45074: CALL_OW 321
45078: PUSH
45079: LD_INT 2
45081: EQUAL
45082: AND
45083: IFFALSE 45119
45085: PUSH
45086: LD_INT 7
45088: PUSH
45089: LD_VAR 0 5
45093: IN
45094: IFTRUE 45106
45096: PUSH
45097: LD_INT 28
45099: PUSH
45100: LD_VAR 0 5
45104: IN
45105: OR
45106: IFTRUE 45118
45108: PUSH
45109: LD_INT 45
45111: PUSH
45112: LD_VAR 0 5
45116: IN
45117: OR
45118: AND
45119: IFFALSE 45373
// begin hex := GetHexInfo ( x , y ) ;
45121: LD_ADDR_VAR 0 4
45125: PUSH
45126: LD_VAR 0 10
45130: PPUSH
45131: LD_VAR 0 11
45135: PPUSH
45136: CALL_OW 546
45140: ST_TO_ADDR
// if hex [ 1 ] then
45141: LD_VAR 0 4
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: IFFALSE 45153
// exit ;
45151: GO 45560
// height := hex [ 2 ] ;
45153: LD_ADDR_VAR 0 15
45157: PUSH
45158: LD_VAR 0 4
45162: PUSH
45163: LD_INT 2
45165: ARRAY
45166: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45167: LD_ADDR_VAR 0 14
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// for i in tmp do
45190: LD_ADDR_VAR 0 8
45194: PUSH
45195: LD_VAR 0 14
45199: PUSH
45200: FOR_IN
45201: IFFALSE 45371
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45203: LD_ADDR_VAR 0 9
45207: PUSH
45208: LD_VAR 0 10
45212: PPUSH
45213: LD_VAR 0 8
45217: PPUSH
45218: LD_INT 5
45220: PPUSH
45221: CALL_OW 272
45225: PUSH
45226: LD_VAR 0 11
45230: PPUSH
45231: LD_VAR 0 8
45235: PPUSH
45236: LD_INT 5
45238: PPUSH
45239: CALL_OW 273
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45248: LD_VAR 0 9
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PPUSH
45257: LD_VAR 0 9
45261: PUSH
45262: LD_INT 2
45264: ARRAY
45265: PPUSH
45266: CALL_OW 488
45270: IFFALSE 45369
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45272: LD_ADDR_VAR 0 4
45276: PUSH
45277: LD_VAR 0 9
45281: PUSH
45282: LD_INT 1
45284: ARRAY
45285: PPUSH
45286: LD_VAR 0 9
45290: PUSH
45291: LD_INT 2
45293: ARRAY
45294: PPUSH
45295: CALL_OW 546
45299: ST_TO_ADDR
// if hex [ 1 ] then
45300: LD_VAR 0 4
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: IFFALSE 45312
// continue ;
45310: GO 45200
// h := hex [ 2 ] ;
45312: LD_ADDR_VAR 0 13
45316: PUSH
45317: LD_VAR 0 4
45321: PUSH
45322: LD_INT 2
45324: ARRAY
45325: ST_TO_ADDR
// if h + 7 < height then
45326: LD_VAR 0 13
45330: PUSH
45331: LD_INT 7
45333: PLUS
45334: PUSH
45335: LD_VAR 0 15
45339: LESS
45340: IFFALSE 45369
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45342: LD_ADDR_VAR 0 18
45346: PUSH
45347: LD_INT 7
45349: PUSH
45350: LD_INT 28
45352: PUSH
45353: LD_INT 45
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: PUSH
45361: LD_VAR 0 12
45365: ARRAY
45366: ST_TO_ADDR
// break ;
45367: GO 45371
// end ; end ; end ;
45369: GO 45200
45371: POP
45372: POP
// end ; if not weapon then
45373: LD_VAR 0 18
45377: NOT
45378: IFFALSE 45438
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: LD_VAR 0 5
45389: PUSH
45390: LD_INT 11
45392: PUSH
45393: LD_INT 30
45395: PUSH
45396: LD_INT 49
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: DIFF
45404: ST_TO_ADDR
// if not list then
45405: LD_VAR 0 5
45409: NOT
45410: IFFALSE 45414
// exit ;
45412: GO 45560
// weapon := list [ rand ( 1 , list ) ] ;
45414: LD_ADDR_VAR 0 18
45418: PUSH
45419: LD_VAR 0 5
45423: PUSH
45424: LD_INT 1
45426: PPUSH
45427: LD_VAR 0 5
45431: PPUSH
45432: CALL_OW 12
45436: ARRAY
45437: ST_TO_ADDR
// end ; if weapon then
45438: LD_VAR 0 18
45442: IFFALSE 45560
// begin tmp := CostOfWeapon ( weapon ) ;
45444: LD_ADDR_VAR 0 14
45448: PUSH
45449: LD_VAR 0 18
45453: PPUSH
45454: CALL_OW 451
45458: ST_TO_ADDR
// j := GetBase ( tower ) ;
45459: LD_ADDR_VAR 0 9
45463: PUSH
45464: LD_VAR 0 1
45468: PPUSH
45469: CALL_OW 274
45473: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45474: LD_VAR 0 9
45478: PPUSH
45479: LD_INT 1
45481: PPUSH
45482: CALL_OW 275
45486: PUSH
45487: LD_VAR 0 14
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: GREATEREQUAL
45496: IFFALSE 45522
45498: PUSH
45499: LD_VAR 0 9
45503: PPUSH
45504: LD_INT 2
45506: PPUSH
45507: CALL_OW 275
45511: PUSH
45512: LD_VAR 0 14
45516: PUSH
45517: LD_INT 2
45519: ARRAY
45520: GREATEREQUAL
45521: AND
45522: IFFALSE 45548
45524: PUSH
45525: LD_VAR 0 9
45529: PPUSH
45530: LD_INT 3
45532: PPUSH
45533: CALL_OW 275
45537: PUSH
45538: LD_VAR 0 14
45542: PUSH
45543: LD_INT 3
45545: ARRAY
45546: GREATEREQUAL
45547: AND
45548: IFFALSE 45560
// result := weapon ;
45550: LD_ADDR_VAR 0 3
45554: PUSH
45555: LD_VAR 0 18
45559: ST_TO_ADDR
// end ; end ;
45560: LD_VAR 0 3
45564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45565: LD_INT 0
45567: PPUSH
45568: PPUSH
// result := true ;
45569: LD_ADDR_VAR 0 3
45573: PUSH
45574: LD_INT 1
45576: ST_TO_ADDR
// if array1 = array2 then
45577: LD_VAR 0 1
45581: PUSH
45582: LD_VAR 0 2
45586: EQUAL
45587: IFFALSE 45647
// begin for i = 1 to array1 do
45589: LD_ADDR_VAR 0 4
45593: PUSH
45594: DOUBLE
45595: LD_INT 1
45597: DEC
45598: ST_TO_ADDR
45599: LD_VAR 0 1
45603: PUSH
45604: FOR_TO
45605: IFFALSE 45643
// if array1 [ i ] <> array2 [ i ] then
45607: LD_VAR 0 1
45611: PUSH
45612: LD_VAR 0 4
45616: ARRAY
45617: PUSH
45618: LD_VAR 0 2
45622: PUSH
45623: LD_VAR 0 4
45627: ARRAY
45628: NONEQUAL
45629: IFFALSE 45641
// begin result := false ;
45631: LD_ADDR_VAR 0 3
45635: PUSH
45636: LD_INT 0
45638: ST_TO_ADDR
// break ;
45639: GO 45643
// end ;
45641: GO 45604
45643: POP
45644: POP
// end else
45645: GO 45655
// result := false ;
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_INT 0
45654: ST_TO_ADDR
// end ;
45655: LD_VAR 0 3
45659: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45660: LD_INT 0
45662: PPUSH
45663: PPUSH
// if not array1 or not array2 then
45664: LD_VAR 0 1
45668: NOT
45669: IFTRUE 45678
45671: PUSH
45672: LD_VAR 0 2
45676: NOT
45677: OR
45678: IFFALSE 45682
// exit ;
45680: GO 45746
// result := true ;
45682: LD_ADDR_VAR 0 3
45686: PUSH
45687: LD_INT 1
45689: ST_TO_ADDR
// for i = 1 to array1 do
45690: LD_ADDR_VAR 0 4
45694: PUSH
45695: DOUBLE
45696: LD_INT 1
45698: DEC
45699: ST_TO_ADDR
45700: LD_VAR 0 1
45704: PUSH
45705: FOR_TO
45706: IFFALSE 45744
// if array1 [ i ] <> array2 [ i ] then
45708: LD_VAR 0 1
45712: PUSH
45713: LD_VAR 0 4
45717: ARRAY
45718: PUSH
45719: LD_VAR 0 2
45723: PUSH
45724: LD_VAR 0 4
45728: ARRAY
45729: NONEQUAL
45730: IFFALSE 45742
// begin result := false ;
45732: LD_ADDR_VAR 0 3
45736: PUSH
45737: LD_INT 0
45739: ST_TO_ADDR
// break ;
45740: GO 45744
// end ;
45742: GO 45705
45744: POP
45745: POP
// end ;
45746: LD_VAR 0 3
45750: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45751: LD_INT 0
45753: PPUSH
45754: PPUSH
45755: PPUSH
// pom := GetBase ( fac ) ;
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: CALL_OW 274
45770: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45771: LD_ADDR_VAR 0 4
45775: PUSH
45776: LD_VAR 0 2
45780: PUSH
45781: LD_INT 1
45783: ARRAY
45784: PPUSH
45785: LD_VAR 0 2
45789: PUSH
45790: LD_INT 2
45792: ARRAY
45793: PPUSH
45794: LD_VAR 0 2
45798: PUSH
45799: LD_INT 3
45801: ARRAY
45802: PPUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_INT 4
45810: ARRAY
45811: PPUSH
45812: CALL_OW 449
45816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45817: LD_ADDR_VAR 0 3
45821: PUSH
45822: LD_VAR 0 5
45826: PPUSH
45827: LD_INT 1
45829: PPUSH
45830: CALL_OW 275
45834: PUSH
45835: LD_VAR 0 4
45839: PUSH
45840: LD_INT 1
45842: ARRAY
45843: GREATEREQUAL
45844: IFFALSE 45870
45846: PUSH
45847: LD_VAR 0 5
45851: PPUSH
45852: LD_INT 2
45854: PPUSH
45855: CALL_OW 275
45859: PUSH
45860: LD_VAR 0 4
45864: PUSH
45865: LD_INT 2
45867: ARRAY
45868: GREATEREQUAL
45869: AND
45870: IFFALSE 45896
45872: PUSH
45873: LD_VAR 0 5
45877: PPUSH
45878: LD_INT 3
45880: PPUSH
45881: CALL_OW 275
45885: PUSH
45886: LD_VAR 0 4
45890: PUSH
45891: LD_INT 3
45893: ARRAY
45894: GREATEREQUAL
45895: AND
45896: ST_TO_ADDR
// end ;
45897: LD_VAR 0 3
45901: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45902: LD_INT 0
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
// pom := GetBase ( building ) ;
45908: LD_ADDR_VAR 0 3
45912: PUSH
45913: LD_VAR 0 1
45917: PPUSH
45918: CALL_OW 274
45922: ST_TO_ADDR
// if not pom then
45923: LD_VAR 0 3
45927: NOT
45928: IFFALSE 45932
// exit ;
45930: GO 46106
// btype := GetBType ( building ) ;
45932: LD_ADDR_VAR 0 5
45936: PUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: CALL_OW 266
45946: ST_TO_ADDR
// if btype = b_armoury then
45947: LD_VAR 0 5
45951: PUSH
45952: LD_INT 4
45954: EQUAL
45955: IFFALSE 45965
// btype := b_barracks ;
45957: LD_ADDR_VAR 0 5
45961: PUSH
45962: LD_INT 5
45964: ST_TO_ADDR
// if btype = b_depot then
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 0
45972: EQUAL
45973: IFFALSE 45983
// btype := b_warehouse ;
45975: LD_ADDR_VAR 0 5
45979: PUSH
45980: LD_INT 1
45982: ST_TO_ADDR
// if btype = b_workshop then
45983: LD_VAR 0 5
45987: PUSH
45988: LD_INT 2
45990: EQUAL
45991: IFFALSE 46001
// btype := b_factory ;
45993: LD_ADDR_VAR 0 5
45997: PUSH
45998: LD_INT 3
46000: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46001: LD_ADDR_VAR 0 4
46005: PUSH
46006: LD_VAR 0 5
46010: PPUSH
46011: LD_VAR 0 1
46015: PPUSH
46016: CALL_OW 248
46020: PPUSH
46021: CALL_OW 450
46025: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46026: LD_ADDR_VAR 0 2
46030: PUSH
46031: LD_VAR 0 3
46035: PPUSH
46036: LD_INT 1
46038: PPUSH
46039: CALL_OW 275
46043: PUSH
46044: LD_VAR 0 4
46048: PUSH
46049: LD_INT 1
46051: ARRAY
46052: GREATEREQUAL
46053: IFFALSE 46079
46055: PUSH
46056: LD_VAR 0 3
46060: PPUSH
46061: LD_INT 2
46063: PPUSH
46064: CALL_OW 275
46068: PUSH
46069: LD_VAR 0 4
46073: PUSH
46074: LD_INT 2
46076: ARRAY
46077: GREATEREQUAL
46078: AND
46079: IFFALSE 46105
46081: PUSH
46082: LD_VAR 0 3
46086: PPUSH
46087: LD_INT 3
46089: PPUSH
46090: CALL_OW 275
46094: PUSH
46095: LD_VAR 0 4
46099: PUSH
46100: LD_INT 3
46102: ARRAY
46103: GREATEREQUAL
46104: AND
46105: ST_TO_ADDR
// end ;
46106: LD_VAR 0 2
46110: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46111: LD_INT 0
46113: PPUSH
46114: PPUSH
46115: PPUSH
// pom := GetBase ( building ) ;
46116: LD_ADDR_VAR 0 4
46120: PUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: CALL_OW 274
46130: ST_TO_ADDR
// if not pom then
46131: LD_VAR 0 4
46135: NOT
46136: IFFALSE 46140
// exit ;
46138: GO 46245
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46140: LD_ADDR_VAR 0 5
46144: PUSH
46145: LD_VAR 0 2
46149: PPUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: CALL_OW 248
46159: PPUSH
46160: CALL_OW 450
46164: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46165: LD_ADDR_VAR 0 3
46169: PUSH
46170: LD_VAR 0 4
46174: PPUSH
46175: LD_INT 1
46177: PPUSH
46178: CALL_OW 275
46182: PUSH
46183: LD_VAR 0 5
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: GREATEREQUAL
46192: IFFALSE 46218
46194: PUSH
46195: LD_VAR 0 4
46199: PPUSH
46200: LD_INT 2
46202: PPUSH
46203: CALL_OW 275
46207: PUSH
46208: LD_VAR 0 5
46212: PUSH
46213: LD_INT 2
46215: ARRAY
46216: GREATEREQUAL
46217: AND
46218: IFFALSE 46244
46220: PUSH
46221: LD_VAR 0 4
46225: PPUSH
46226: LD_INT 3
46228: PPUSH
46229: CALL_OW 275
46233: PUSH
46234: LD_VAR 0 5
46238: PUSH
46239: LD_INT 3
46241: ARRAY
46242: GREATEREQUAL
46243: AND
46244: ST_TO_ADDR
// end ;
46245: LD_VAR 0 3
46249: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46250: LD_INT 0
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
// result := false ;
46263: LD_ADDR_VAR 0 8
46267: PUSH
46268: LD_INT 0
46270: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46271: LD_VAR 0 5
46275: NOT
46276: IFTRUE 46285
46278: PUSH
46279: LD_VAR 0 1
46283: NOT
46284: OR
46285: IFTRUE 46294
46287: PUSH
46288: LD_VAR 0 2
46292: NOT
46293: OR
46294: IFTRUE 46303
46296: PUSH
46297: LD_VAR 0 3
46301: NOT
46302: OR
46303: IFFALSE 46307
// exit ;
46305: GO 47133
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46307: LD_ADDR_VAR 0 14
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 2
46321: PPUSH
46322: LD_VAR 0 3
46326: PPUSH
46327: LD_VAR 0 4
46331: PPUSH
46332: LD_VAR 0 5
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: CALL_OW 248
46345: PPUSH
46346: LD_INT 0
46348: PPUSH
46349: CALL 48414 0 6
46353: ST_TO_ADDR
// if not hexes then
46354: LD_VAR 0 14
46358: NOT
46359: IFFALSE 46363
// exit ;
46361: GO 47133
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46363: LD_ADDR_VAR 0 17
46367: PUSH
46368: LD_VAR 0 5
46372: PPUSH
46373: LD_INT 22
46375: PUSH
46376: LD_VAR 0 13
46380: PPUSH
46381: CALL_OW 255
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 30
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 30
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 72
46426: ST_TO_ADDR
// for i = 1 to hexes do
46427: LD_ADDR_VAR 0 9
46431: PUSH
46432: DOUBLE
46433: LD_INT 1
46435: DEC
46436: ST_TO_ADDR
46437: LD_VAR 0 14
46441: PUSH
46442: FOR_TO
46443: IFFALSE 47131
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46445: LD_ADDR_VAR 0 13
46449: PUSH
46450: LD_VAR 0 14
46454: PUSH
46455: LD_VAR 0 9
46459: ARRAY
46460: PUSH
46461: LD_INT 1
46463: ARRAY
46464: PPUSH
46465: LD_VAR 0 14
46469: PUSH
46470: LD_VAR 0 9
46474: ARRAY
46475: PUSH
46476: LD_INT 2
46478: ARRAY
46479: PPUSH
46480: CALL_OW 428
46484: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46485: LD_VAR 0 14
46489: PUSH
46490: LD_VAR 0 9
46494: ARRAY
46495: PUSH
46496: LD_INT 1
46498: ARRAY
46499: PPUSH
46500: LD_VAR 0 14
46504: PUSH
46505: LD_VAR 0 9
46509: ARRAY
46510: PUSH
46511: LD_INT 2
46513: ARRAY
46514: PPUSH
46515: CALL_OW 351
46519: IFTRUE 46558
46521: PUSH
46522: LD_VAR 0 14
46526: PUSH
46527: LD_VAR 0 9
46531: ARRAY
46532: PUSH
46533: LD_INT 1
46535: ARRAY
46536: PPUSH
46537: LD_VAR 0 14
46541: PUSH
46542: LD_VAR 0 9
46546: ARRAY
46547: PUSH
46548: LD_INT 2
46550: ARRAY
46551: PPUSH
46552: CALL_OW 488
46556: NOT
46557: OR
46558: IFTRUE 46575
46560: PUSH
46561: LD_VAR 0 13
46565: PPUSH
46566: CALL_OW 247
46570: PUSH
46571: LD_INT 3
46573: EQUAL
46574: OR
46575: IFFALSE 46581
// exit ;
46577: POP
46578: POP
46579: GO 47133
// if not tmp then
46581: LD_VAR 0 13
46585: NOT
46586: IFFALSE 46590
// continue ;
46588: GO 46442
// result := true ;
46590: LD_ADDR_VAR 0 8
46594: PUSH
46595: LD_INT 1
46597: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46598: LD_VAR 0 6
46602: IFFALSE 46619
46604: PUSH
46605: LD_VAR 0 13
46609: PPUSH
46610: CALL_OW 247
46614: PUSH
46615: LD_INT 2
46617: EQUAL
46618: AND
46619: IFFALSE 46636
46621: PUSH
46622: LD_VAR 0 13
46626: PPUSH
46627: CALL_OW 263
46631: PUSH
46632: LD_INT 1
46634: EQUAL
46635: AND
46636: IFFALSE 46800
// begin if IsDrivenBy ( tmp ) then
46638: LD_VAR 0 13
46642: PPUSH
46643: CALL_OW 311
46647: IFFALSE 46651
// continue ;
46649: GO 46442
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46651: LD_VAR 0 6
46655: PPUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 60
46661: PUSH
46662: EMPTY
46663: LIST
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 55
46674: PUSH
46675: EMPTY
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PPUSH
46686: CALL_OW 72
46690: IFFALSE 46798
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46692: LD_ADDR_VAR 0 18
46696: PUSH
46697: LD_VAR 0 6
46701: PPUSH
46702: LD_INT 3
46704: PUSH
46705: LD_INT 60
46707: PUSH
46708: EMPTY
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: LD_INT 55
46720: PUSH
46721: EMPTY
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PPUSH
46732: CALL_OW 72
46736: PUSH
46737: LD_INT 1
46739: ARRAY
46740: ST_TO_ADDR
// if IsInUnit ( driver ) then
46741: LD_VAR 0 18
46745: PPUSH
46746: CALL_OW 310
46750: IFFALSE 46761
// ComExit ( driver ) ;
46752: LD_VAR 0 18
46756: PPUSH
46757: CALL 72404 0 1
// AddComEnterUnit ( driver , tmp ) ;
46761: LD_VAR 0 18
46765: PPUSH
46766: LD_VAR 0 13
46770: PPUSH
46771: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46775: LD_VAR 0 18
46779: PPUSH
46780: LD_VAR 0 7
46784: PPUSH
46785: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46789: LD_VAR 0 18
46793: PPUSH
46794: CALL_OW 181
// end ; continue ;
46798: GO 46442
// end ; if not cleaners or not tmp in cleaners then
46800: LD_VAR 0 6
46804: NOT
46805: IFTRUE 46820
46807: PUSH
46808: LD_VAR 0 13
46812: PUSH
46813: LD_VAR 0 6
46817: IN
46818: NOT
46819: OR
46820: IFFALSE 47129
// begin if dep then
46822: LD_VAR 0 17
46826: IFFALSE 46962
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46828: LD_ADDR_VAR 0 16
46832: PUSH
46833: LD_VAR 0 17
46837: PUSH
46838: LD_INT 1
46840: ARRAY
46841: PPUSH
46842: CALL_OW 250
46846: PPUSH
46847: LD_VAR 0 17
46851: PUSH
46852: LD_INT 1
46854: ARRAY
46855: PPUSH
46856: CALL_OW 254
46860: PPUSH
46861: LD_INT 5
46863: PPUSH
46864: CALL_OW 272
46868: PUSH
46869: LD_VAR 0 17
46873: PUSH
46874: LD_INT 1
46876: ARRAY
46877: PPUSH
46878: CALL_OW 251
46882: PPUSH
46883: LD_VAR 0 17
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PPUSH
46892: CALL_OW 254
46896: PPUSH
46897: LD_INT 5
46899: PPUSH
46900: CALL_OW 273
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46909: LD_VAR 0 16
46913: PUSH
46914: LD_INT 1
46916: ARRAY
46917: PPUSH
46918: LD_VAR 0 16
46922: PUSH
46923: LD_INT 2
46925: ARRAY
46926: PPUSH
46927: CALL_OW 488
46931: IFFALSE 46962
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46933: LD_VAR 0 13
46937: PPUSH
46938: LD_VAR 0 16
46942: PUSH
46943: LD_INT 1
46945: ARRAY
46946: PPUSH
46947: LD_VAR 0 16
46951: PUSH
46952: LD_INT 2
46954: ARRAY
46955: PPUSH
46956: CALL_OW 111
// continue ;
46960: GO 46442
// end ; end ; r := GetDir ( tmp ) ;
46962: LD_ADDR_VAR 0 15
46966: PUSH
46967: LD_VAR 0 13
46971: PPUSH
46972: CALL_OW 254
46976: ST_TO_ADDR
// if r = 5 then
46977: LD_VAR 0 15
46981: PUSH
46982: LD_INT 5
46984: EQUAL
46985: IFFALSE 46995
// r := 0 ;
46987: LD_ADDR_VAR 0 15
46991: PUSH
46992: LD_INT 0
46994: ST_TO_ADDR
// for j = r to 5 do
46995: LD_ADDR_VAR 0 10
46999: PUSH
47000: DOUBLE
47001: LD_VAR 0 15
47005: DEC
47006: ST_TO_ADDR
47007: LD_INT 5
47009: PUSH
47010: FOR_TO
47011: IFFALSE 47127
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47013: LD_ADDR_VAR 0 11
47017: PUSH
47018: LD_VAR 0 13
47022: PPUSH
47023: CALL_OW 250
47027: PPUSH
47028: LD_VAR 0 10
47032: PPUSH
47033: LD_INT 2
47035: PPUSH
47036: CALL_OW 272
47040: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47041: LD_ADDR_VAR 0 12
47045: PUSH
47046: LD_VAR 0 13
47050: PPUSH
47051: CALL_OW 251
47055: PPUSH
47056: LD_VAR 0 10
47060: PPUSH
47061: LD_INT 2
47063: PPUSH
47064: CALL_OW 273
47068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47069: LD_VAR 0 11
47073: PPUSH
47074: LD_VAR 0 12
47078: PPUSH
47079: CALL_OW 488
47083: IFFALSE 47102
47085: PUSH
47086: LD_VAR 0 11
47090: PPUSH
47091: LD_VAR 0 12
47095: PPUSH
47096: CALL_OW 428
47100: NOT
47101: AND
47102: IFFALSE 47125
// begin ComMoveXY ( tmp , _x , _y ) ;
47104: LD_VAR 0 13
47108: PPUSH
47109: LD_VAR 0 11
47113: PPUSH
47114: LD_VAR 0 12
47118: PPUSH
47119: CALL_OW 111
// break ;
47123: GO 47127
// end ; end ;
47125: GO 47010
47127: POP
47128: POP
// end ; end ;
47129: GO 46442
47131: POP
47132: POP
// end ;
47133: LD_VAR 0 8
47137: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47138: LD_INT 0
47140: PPUSH
// result := true ;
47141: LD_ADDR_VAR 0 3
47145: PUSH
47146: LD_INT 1
47148: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47149: LD_VAR 0 2
47153: PUSH
47154: LD_INT 24
47156: DOUBLE
47157: EQUAL
47158: IFTRUE 47168
47160: LD_INT 33
47162: DOUBLE
47163: EQUAL
47164: IFTRUE 47168
47166: GO 47193
47168: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47169: LD_ADDR_VAR 0 3
47173: PUSH
47174: LD_INT 32
47176: PPUSH
47177: LD_VAR 0 1
47181: PPUSH
47182: CALL_OW 321
47186: PUSH
47187: LD_INT 2
47189: EQUAL
47190: ST_TO_ADDR
47191: GO 47509
47193: LD_INT 20
47195: DOUBLE
47196: EQUAL
47197: IFTRUE 47201
47199: GO 47226
47201: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47202: LD_ADDR_VAR 0 3
47206: PUSH
47207: LD_INT 6
47209: PPUSH
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 321
47219: PUSH
47220: LD_INT 2
47222: EQUAL
47223: ST_TO_ADDR
47224: GO 47509
47226: LD_INT 22
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47240
47232: LD_INT 36
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47265
47240: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47241: LD_ADDR_VAR 0 3
47245: PUSH
47246: LD_INT 15
47248: PPUSH
47249: LD_VAR 0 1
47253: PPUSH
47254: CALL_OW 321
47258: PUSH
47259: LD_INT 2
47261: EQUAL
47262: ST_TO_ADDR
47263: GO 47509
47265: LD_INT 30
47267: DOUBLE
47268: EQUAL
47269: IFTRUE 47273
47271: GO 47298
47273: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47274: LD_ADDR_VAR 0 3
47278: PUSH
47279: LD_INT 20
47281: PPUSH
47282: LD_VAR 0 1
47286: PPUSH
47287: CALL_OW 321
47291: PUSH
47292: LD_INT 2
47294: EQUAL
47295: ST_TO_ADDR
47296: GO 47509
47298: LD_INT 28
47300: DOUBLE
47301: EQUAL
47302: IFTRUE 47312
47304: LD_INT 21
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47312
47310: GO 47337
47312: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47313: LD_ADDR_VAR 0 3
47317: PUSH
47318: LD_INT 21
47320: PPUSH
47321: LD_VAR 0 1
47325: PPUSH
47326: CALL_OW 321
47330: PUSH
47331: LD_INT 2
47333: EQUAL
47334: ST_TO_ADDR
47335: GO 47509
47337: LD_INT 16
47339: DOUBLE
47340: EQUAL
47341: IFTRUE 47345
47343: GO 47370
47345: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47346: LD_ADDR_VAR 0 3
47350: PUSH
47351: LD_INT 84
47353: PPUSH
47354: LD_VAR 0 1
47358: PPUSH
47359: CALL_OW 321
47363: PUSH
47364: LD_INT 2
47366: EQUAL
47367: ST_TO_ADDR
47368: GO 47509
47370: LD_INT 19
47372: DOUBLE
47373: EQUAL
47374: IFTRUE 47384
47376: LD_INT 23
47378: DOUBLE
47379: EQUAL
47380: IFTRUE 47384
47382: GO 47409
47384: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47385: LD_ADDR_VAR 0 3
47389: PUSH
47390: LD_INT 83
47392: PPUSH
47393: LD_VAR 0 1
47397: PPUSH
47398: CALL_OW 321
47402: PUSH
47403: LD_INT 2
47405: EQUAL
47406: ST_TO_ADDR
47407: GO 47509
47409: LD_INT 17
47411: DOUBLE
47412: EQUAL
47413: IFTRUE 47417
47415: GO 47442
47417: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47418: LD_ADDR_VAR 0 3
47422: PUSH
47423: LD_INT 39
47425: PPUSH
47426: LD_VAR 0 1
47430: PPUSH
47431: CALL_OW 321
47435: PUSH
47436: LD_INT 2
47438: EQUAL
47439: ST_TO_ADDR
47440: GO 47509
47442: LD_INT 18
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47450
47448: GO 47475
47450: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47451: LD_ADDR_VAR 0 3
47455: PUSH
47456: LD_INT 40
47458: PPUSH
47459: LD_VAR 0 1
47463: PPUSH
47464: CALL_OW 321
47468: PUSH
47469: LD_INT 2
47471: EQUAL
47472: ST_TO_ADDR
47473: GO 47509
47475: LD_INT 27
47477: DOUBLE
47478: EQUAL
47479: IFTRUE 47483
47481: GO 47508
47483: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47484: LD_ADDR_VAR 0 3
47488: PUSH
47489: LD_INT 35
47491: PPUSH
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL_OW 321
47501: PUSH
47502: LD_INT 2
47504: EQUAL
47505: ST_TO_ADDR
47506: GO 47509
47508: POP
// end ;
47509: LD_VAR 0 3
47513: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47514: LD_INT 0
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
// result := false ;
47527: LD_ADDR_VAR 0 6
47531: PUSH
47532: LD_INT 0
47534: ST_TO_ADDR
// if btype = b_depot then
47535: LD_VAR 0 2
47539: PUSH
47540: LD_INT 0
47542: EQUAL
47543: IFFALSE 47555
// begin result := true ;
47545: LD_ADDR_VAR 0 6
47549: PUSH
47550: LD_INT 1
47552: ST_TO_ADDR
// exit ;
47553: GO 48409
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47555: LD_VAR 0 1
47559: NOT
47560: IFTRUE 47585
47562: PUSH
47563: LD_VAR 0 1
47567: PPUSH
47568: CALL_OW 266
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: IN
47583: NOT
47584: OR
47585: IFTRUE 47594
47587: PUSH
47588: LD_VAR 0 2
47592: NOT
47593: OR
47594: IFTRUE 47630
47596: PUSH
47597: LD_VAR 0 5
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: LD_INT 4
47616: PUSH
47617: LD_INT 5
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: IN
47628: NOT
47629: OR
47630: IFTRUE 47649
47632: PUSH
47633: LD_VAR 0 3
47637: PPUSH
47638: LD_VAR 0 4
47642: PPUSH
47643: CALL_OW 488
47647: NOT
47648: OR
47649: IFFALSE 47653
// exit ;
47651: GO 48409
// side := GetSide ( depot ) ;
47653: LD_ADDR_VAR 0 9
47657: PUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: CALL_OW 255
47667: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47668: LD_VAR 0 9
47672: PPUSH
47673: LD_VAR 0 2
47677: PPUSH
47678: CALL 47138 0 2
47682: NOT
47683: IFFALSE 47687
// exit ;
47685: GO 48409
// pom := GetBase ( depot ) ;
47687: LD_ADDR_VAR 0 10
47691: PUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 274
47701: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47702: LD_ADDR_VAR 0 11
47706: PUSH
47707: LD_VAR 0 2
47711: PPUSH
47712: LD_VAR 0 1
47716: PPUSH
47717: CALL_OW 248
47721: PPUSH
47722: CALL_OW 450
47726: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47727: LD_VAR 0 10
47731: PPUSH
47732: LD_INT 1
47734: PPUSH
47735: CALL_OW 275
47739: PUSH
47740: LD_VAR 0 11
47744: PUSH
47745: LD_INT 1
47747: ARRAY
47748: GREATEREQUAL
47749: IFFALSE 47775
47751: PUSH
47752: LD_VAR 0 10
47756: PPUSH
47757: LD_INT 2
47759: PPUSH
47760: CALL_OW 275
47764: PUSH
47765: LD_VAR 0 11
47769: PUSH
47770: LD_INT 2
47772: ARRAY
47773: GREATEREQUAL
47774: AND
47775: IFFALSE 47801
47777: PUSH
47778: LD_VAR 0 10
47782: PPUSH
47783: LD_INT 3
47785: PPUSH
47786: CALL_OW 275
47790: PUSH
47791: LD_VAR 0 11
47795: PUSH
47796: LD_INT 3
47798: ARRAY
47799: GREATEREQUAL
47800: AND
47801: NOT
47802: IFFALSE 47806
// exit ;
47804: GO 48409
// if GetBType ( depot ) = b_depot then
47806: LD_VAR 0 1
47810: PPUSH
47811: CALL_OW 266
47815: PUSH
47816: LD_INT 0
47818: EQUAL
47819: IFFALSE 47831
// dist := 28 else
47821: LD_ADDR_VAR 0 14
47825: PUSH
47826: LD_INT 28
47828: ST_TO_ADDR
47829: GO 47839
// dist := 36 ;
47831: LD_ADDR_VAR 0 14
47835: PUSH
47836: LD_INT 36
47838: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47839: LD_VAR 0 1
47843: PPUSH
47844: LD_VAR 0 3
47848: PPUSH
47849: LD_VAR 0 4
47853: PPUSH
47854: CALL_OW 297
47858: PUSH
47859: LD_VAR 0 14
47863: GREATER
47864: IFFALSE 47868
// exit ;
47866: GO 48409
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47868: LD_ADDR_VAR 0 12
47872: PUSH
47873: LD_VAR 0 2
47877: PPUSH
47878: LD_VAR 0 3
47882: PPUSH
47883: LD_VAR 0 4
47887: PPUSH
47888: LD_VAR 0 5
47892: PPUSH
47893: LD_VAR 0 1
47897: PPUSH
47898: CALL_OW 248
47902: PPUSH
47903: LD_INT 0
47905: PPUSH
47906: CALL 48414 0 6
47910: ST_TO_ADDR
// if not hexes then
47911: LD_VAR 0 12
47915: NOT
47916: IFFALSE 47920
// exit ;
47918: GO 48409
// hex := GetHexInfo ( x , y ) ;
47920: LD_ADDR_VAR 0 15
47924: PUSH
47925: LD_VAR 0 3
47929: PPUSH
47930: LD_VAR 0 4
47934: PPUSH
47935: CALL_OW 546
47939: ST_TO_ADDR
// if hex [ 1 ] then
47940: LD_VAR 0 15
47944: PUSH
47945: LD_INT 1
47947: ARRAY
47948: IFFALSE 47952
// exit ;
47950: GO 48409
// height := hex [ 2 ] ;
47952: LD_ADDR_VAR 0 13
47956: PUSH
47957: LD_VAR 0 15
47961: PUSH
47962: LD_INT 2
47964: ARRAY
47965: ST_TO_ADDR
// for i = 1 to hexes do
47966: LD_ADDR_VAR 0 7
47970: PUSH
47971: DOUBLE
47972: LD_INT 1
47974: DEC
47975: ST_TO_ADDR
47976: LD_VAR 0 12
47980: PUSH
47981: FOR_TO
47982: IFFALSE 48326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47984: LD_VAR 0 12
47988: PUSH
47989: LD_VAR 0 7
47993: ARRAY
47994: PUSH
47995: LD_INT 1
47997: ARRAY
47998: PPUSH
47999: LD_VAR 0 12
48003: PUSH
48004: LD_VAR 0 7
48008: ARRAY
48009: PUSH
48010: LD_INT 2
48012: ARRAY
48013: PPUSH
48014: CALL_OW 488
48018: NOT
48019: IFTRUE 48061
48021: PUSH
48022: LD_VAR 0 12
48026: PUSH
48027: LD_VAR 0 7
48031: ARRAY
48032: PUSH
48033: LD_INT 1
48035: ARRAY
48036: PPUSH
48037: LD_VAR 0 12
48041: PUSH
48042: LD_VAR 0 7
48046: ARRAY
48047: PUSH
48048: LD_INT 2
48050: ARRAY
48051: PPUSH
48052: CALL_OW 428
48056: PUSH
48057: LD_INT 0
48059: GREATER
48060: OR
48061: IFTRUE 48099
48063: PUSH
48064: LD_VAR 0 12
48068: PUSH
48069: LD_VAR 0 7
48073: ARRAY
48074: PUSH
48075: LD_INT 1
48077: ARRAY
48078: PPUSH
48079: LD_VAR 0 12
48083: PUSH
48084: LD_VAR 0 7
48088: ARRAY
48089: PUSH
48090: LD_INT 2
48092: ARRAY
48093: PPUSH
48094: CALL_OW 351
48098: OR
48099: IFFALSE 48105
// exit ;
48101: POP
48102: POP
48103: GO 48409
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48105: LD_ADDR_VAR 0 8
48109: PUSH
48110: LD_VAR 0 12
48114: PUSH
48115: LD_VAR 0 7
48119: ARRAY
48120: PUSH
48121: LD_INT 1
48123: ARRAY
48124: PPUSH
48125: LD_VAR 0 12
48129: PUSH
48130: LD_VAR 0 7
48134: ARRAY
48135: PUSH
48136: LD_INT 2
48138: ARRAY
48139: PPUSH
48140: CALL_OW 546
48144: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48145: LD_VAR 0 8
48149: PUSH
48150: LD_INT 1
48152: ARRAY
48153: IFTRUE 48175
48155: PUSH
48156: LD_VAR 0 8
48160: PUSH
48161: LD_INT 2
48163: ARRAY
48164: PUSH
48165: LD_VAR 0 13
48169: PUSH
48170: LD_INT 2
48172: PLUS
48173: GREATER
48174: OR
48175: IFTRUE 48197
48177: PUSH
48178: LD_VAR 0 8
48182: PUSH
48183: LD_INT 2
48185: ARRAY
48186: PUSH
48187: LD_VAR 0 13
48191: PUSH
48192: LD_INT 2
48194: MINUS
48195: LESS
48196: OR
48197: IFTRUE 48265
48199: PUSH
48200: LD_VAR 0 8
48204: PUSH
48205: LD_INT 3
48207: ARRAY
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 8
48214: PUSH
48215: LD_INT 9
48217: PUSH
48218: LD_INT 10
48220: PUSH
48221: LD_INT 11
48223: PUSH
48224: LD_INT 12
48226: PUSH
48227: LD_INT 13
48229: PUSH
48230: LD_INT 16
48232: PUSH
48233: LD_INT 17
48235: PUSH
48236: LD_INT 18
48238: PUSH
48239: LD_INT 19
48241: PUSH
48242: LD_INT 20
48244: PUSH
48245: LD_INT 21
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: IN
48263: NOT
48264: OR
48265: IFTRUE 48278
48267: PUSH
48268: LD_VAR 0 8
48272: PUSH
48273: LD_INT 5
48275: ARRAY
48276: NOT
48277: OR
48278: IFTRUE 48318
48280: PUSH
48281: LD_VAR 0 8
48285: PUSH
48286: LD_INT 6
48288: ARRAY
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 7
48298: PUSH
48299: LD_INT 9
48301: PUSH
48302: LD_INT 10
48304: PUSH
48305: LD_INT 11
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: IN
48316: NOT
48317: OR
48318: IFFALSE 48324
// exit ;
48320: POP
48321: POP
48322: GO 48409
// end ;
48324: GO 47981
48326: POP
48327: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48328: LD_VAR 0 9
48332: PPUSH
48333: LD_VAR 0 3
48337: PPUSH
48338: LD_VAR 0 4
48342: PPUSH
48343: LD_INT 20
48345: PPUSH
48346: CALL 40228 0 4
48350: PUSH
48351: LD_INT 4
48353: ARRAY
48354: IFFALSE 48358
// exit ;
48356: GO 48409
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48358: LD_VAR 0 2
48362: PUSH
48363: LD_INT 29
48365: PUSH
48366: LD_INT 30
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: IN
48373: IFFALSE 48397
48375: PUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_VAR 0 4
48385: PPUSH
48386: LD_VAR 0 9
48390: PPUSH
48391: CALL_OW 440
48395: NOT
48396: AND
48397: IFFALSE 48401
// exit ;
48399: GO 48409
// result := true ;
48401: LD_ADDR_VAR 0 6
48405: PUSH
48406: LD_INT 1
48408: ST_TO_ADDR
// end ;
48409: LD_VAR 0 6
48413: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48414: LD_INT 0
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
48439: PPUSH
48440: PPUSH
48441: PPUSH
48442: PPUSH
48443: PPUSH
48444: PPUSH
48445: PPUSH
48446: PPUSH
48447: PPUSH
48448: PPUSH
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
48468: PPUSH
48469: PPUSH
48470: PPUSH
48471: PPUSH
48472: PPUSH
48473: PPUSH
// result = [ ] ;
48474: LD_ADDR_VAR 0 7
48478: PUSH
48479: EMPTY
48480: ST_TO_ADDR
// temp_list = [ ] ;
48481: LD_ADDR_VAR 0 9
48485: PUSH
48486: EMPTY
48487: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48488: LD_VAR 0 4
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 4
48507: PUSH
48508: LD_INT 5
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: IN
48519: NOT
48520: IFTRUE 48563
48522: PUSH
48523: LD_VAR 0 1
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: IN
48538: IFFALSE 48562
48540: PUSH
48541: LD_VAR 0 5
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: IN
48560: NOT
48561: AND
48562: OR
48563: IFFALSE 48567
// exit ;
48565: GO 66966
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48567: LD_VAR 0 1
48571: PUSH
48572: LD_INT 6
48574: PUSH
48575: LD_INT 7
48577: PUSH
48578: LD_INT 8
48580: PUSH
48581: LD_INT 13
48583: PUSH
48584: LD_INT 12
48586: PUSH
48587: LD_INT 15
48589: PUSH
48590: LD_INT 11
48592: PUSH
48593: LD_INT 14
48595: PUSH
48596: LD_INT 10
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: IN
48610: IFFALSE 48620
// btype = b_lab ;
48612: LD_ADDR_VAR 0 1
48616: PUSH
48617: LD_INT 6
48619: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48620: LD_VAR 0 6
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: IN
48639: NOT
48640: IFTRUE 48708
48642: PUSH
48643: LD_VAR 0 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 6
48662: PUSH
48663: LD_INT 36
48665: PUSH
48666: LD_INT 4
48668: PUSH
48669: LD_INT 5
48671: PUSH
48672: LD_INT 31
48674: PUSH
48675: LD_INT 32
48677: PUSH
48678: LD_INT 33
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: IN
48694: NOT
48695: IFFALSE 48707
48697: PUSH
48698: LD_VAR 0 6
48702: PUSH
48703: LD_INT 1
48705: EQUAL
48706: AND
48707: OR
48708: IFTRUE 48740
48710: PUSH
48711: LD_VAR 0 1
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: IN
48726: NOT
48727: IFFALSE 48739
48729: PUSH
48730: LD_VAR 0 6
48734: PUSH
48735: LD_INT 2
48737: EQUAL
48738: AND
48739: OR
48740: IFFALSE 48750
// mode = 0 ;
48742: LD_ADDR_VAR 0 6
48746: PUSH
48747: LD_INT 0
48749: ST_TO_ADDR
// case mode of 0 :
48750: LD_VAR 0 6
48754: PUSH
48755: LD_INT 0
48757: DOUBLE
48758: EQUAL
48759: IFTRUE 48763
48761: GO 60216
48763: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48764: LD_ADDR_VAR 0 11
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48957: LD_ADDR_VAR 0 12
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49153: LD_ADDR_VAR 0 13
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 3
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49352: LD_ADDR_VAR 0 14
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49548: LD_ADDR_VAR 0 15
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49741: LD_ADDR_VAR 0 16
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49934: LD_ADDR_VAR 0 17
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50164: LD_ADDR_VAR 0 18
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50394: LD_ADDR_VAR 0 19
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50624: LD_ADDR_VAR 0 20
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 2
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50854: LD_ADDR_VAR 0 21
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51084: LD_ADDR_VAR 0 22
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51314: LD_ADDR_VAR 0 23
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51594: LD_ADDR_VAR 0 24
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51870: LD_ADDR_VAR 0 25
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52144: LD_ADDR_VAR 0 26
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52420: LD_ADDR_VAR 0 27
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52700: LD_ADDR_VAR 0 28
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52982: LD_ADDR_VAR 0 29
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53261: LD_ADDR_VAR 0 30
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53539: LD_ADDR_VAR 0 31
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53817: LD_ADDR_VAR 0 32
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54095: LD_ADDR_VAR 0 33
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: NEG
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54374: LD_ADDR_VAR 0 34
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54654: LD_ADDR_VAR 0 35
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54766: LD_ADDR_VAR 0 36
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54878: LD_ADDR_VAR 0 37
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54990: LD_ADDR_VAR 0 38
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55102: LD_ADDR_VAR 0 39
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55214: LD_ADDR_VAR 0 40
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55326: LD_ADDR_VAR 0 41
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55676: LD_ADDR_VAR 0 42
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56026: LD_ADDR_VAR 0 43
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 3
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56374: LD_ADDR_VAR 0 44
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56724: LD_ADDR_VAR 0 45
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 3
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 3
57033: NEG
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57074: LD_ADDR_VAR 0 46
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 47
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57573: LD_ADDR_VAR 0 48
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57720: LD_ADDR_VAR 0 49
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57864: LD_ADDR_VAR 0 50
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58008: LD_ADDR_VAR 0 51
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58155: LD_ADDR_VAR 0 52
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58306: LD_ADDR_VAR 0 53
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58536: LD_ADDR_VAR 0 54
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58766: LD_ADDR_VAR 0 55
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58996: LD_ADDR_VAR 0 56
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59226: LD_ADDR_VAR 0 57
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59456: LD_ADDR_VAR 0 58
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 1
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59686: LD_ADDR_VAR 0 59
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59774: LD_ADDR_VAR 0 60
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59862: LD_ADDR_VAR 0 61
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59950: LD_ADDR_VAR 0 62
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60038: LD_ADDR_VAR 0 63
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60126: LD_ADDR_VAR 0 64
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// end ; 1 :
60214: GO 66111
60216: LD_INT 1
60218: DOUBLE
60219: EQUAL
60220: IFTRUE 60224
60222: GO 62847
60224: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60225: LD_ADDR_VAR 0 11
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60269: LD_ADDR_VAR 0 12
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60310: LD_ADDR_VAR 0 13
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60350: LD_ADDR_VAR 0 14
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 3
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60391: LD_ADDR_VAR 0 15
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60435: LD_ADDR_VAR 0 16
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60481: LD_ADDR_VAR 0 17
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60525: LD_ADDR_VAR 0 18
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60566: LD_ADDR_VAR 0 19
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60606: LD_ADDR_VAR 0 20
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60647: LD_ADDR_VAR 0 21
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60691: LD_ADDR_VAR 0 22
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60737: LD_ADDR_VAR 0 23
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60781: LD_ADDR_VAR 0 24
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60822: LD_ADDR_VAR 0 25
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: LD_INT 4
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60862: LD_ADDR_VAR 0 26
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: LD_INT 3
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60903: LD_ADDR_VAR 0 27
60907: PUSH
60908: LD_INT 3
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60947: LD_ADDR_VAR 0 28
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: LD_INT 4
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: NEG
60979: PUSH
60980: LD_INT 3
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60993: LD_ADDR_VAR 0 29
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 4
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 5
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 5
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 4
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 6
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 6
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: LD_INT 5
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61148: LD_ADDR_VAR 0 30
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 5
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 5
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 5
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 6
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 6
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61291: LD_ADDR_VAR 0 31
61295: PUSH
61296: LD_INT 3
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: LD_INT 3
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 4
61338: PUSH
61339: LD_INT 4
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: PUSH
61349: LD_INT 4
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 5
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 4
61378: PUSH
61379: LD_INT 5
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 6
61388: PUSH
61389: LD_INT 5
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 6
61398: PUSH
61399: LD_INT 6
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 5
61408: PUSH
61409: LD_INT 6
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61430: LD_ADDR_VAR 0 32
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 5
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 6
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 6
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 5
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61573: LD_ADDR_VAR 0 33
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 4
61648: NEG
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 5
61659: NEG
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 5
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 5
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 6
61693: NEG
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 6
61704: NEG
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61728: LD_ADDR_VAR 0 34
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 4
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 4
61783: NEG
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: LD_INT 4
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 4
61807: NEG
61808: PUSH
61809: LD_INT 5
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 5
61819: NEG
61820: PUSH
61821: LD_INT 4
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 5
61831: NEG
61832: PUSH
61833: LD_INT 5
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: LD_INT 6
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 6
61855: NEG
61856: PUSH
61857: LD_INT 5
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 6
61867: NEG
61868: PUSH
61869: LD_INT 6
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61891: LD_ADDR_VAR 0 41
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61935: LD_ADDR_VAR 0 42
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61976: LD_ADDR_VAR 0 43
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 3
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62016: LD_ADDR_VAR 0 44
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62057: LD_ADDR_VAR 0 45
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: LIST
62100: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62101: LD_ADDR_VAR 0 46
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62147: LD_ADDR_VAR 0 47
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62180: LD_ADDR_VAR 0 48
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62211: LD_ADDR_VAR 0 49
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62240: LD_ADDR_VAR 0 50
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62269: LD_ADDR_VAR 0 51
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62300: LD_ADDR_VAR 0 52
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62333: LD_ADDR_VAR 0 53
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 3
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62377: LD_ADDR_VAR 0 54
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62418: LD_ADDR_VAR 0 55
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62458: LD_ADDR_VAR 0 56
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: LD_INT 3
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62499: LD_ADDR_VAR 0 57
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: NEG
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62543: LD_ADDR_VAR 0 58
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62589: LD_ADDR_VAR 0 59
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62633: LD_ADDR_VAR 0 60
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62674: LD_ADDR_VAR 0 61
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62714: LD_ADDR_VAR 0 62
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62755: LD_ADDR_VAR 0 63
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62799: LD_ADDR_VAR 0 64
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 2
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// end ; 2 :
62845: GO 66111
62847: LD_INT 2
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62855
62853: GO 66110
62855: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62856: LD_ADDR_VAR 0 29
62860: PUSH
62861: LD_INT 4
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 4
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 5
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: LD_INT 4
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 4
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 4
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 4
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 4
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 5
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 5
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 4
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 5
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 4
63195: NEG
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 4
63206: NEG
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 4
63218: NEG
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: LD_INT 4
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 4
63253: NEG
63254: PUSH
63255: LD_INT 5
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: LD_INT 4
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: LD_INT 3
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 4
63289: NEG
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 5
63301: NEG
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 5
63313: NEG
63314: PUSH
63315: LD_INT 5
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: LD_INT 5
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 5
63337: NEG
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63394: LD_ADDR_VAR 0 30
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 4
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 4
63411: PUSH
63412: LD_INT 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 5
63421: PUSH
63422: LD_INT 4
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 5
63431: PUSH
63432: LD_INT 5
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 4
63441: PUSH
63442: LD_INT 5
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: LD_INT 4
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 5
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: LD_INT 5
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 4
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 4
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: NEG
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 4
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 4
63629: NEG
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 5
63640: NEG
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 5
63651: NEG
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 5
63663: NEG
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: NEG
63699: PUSH
63700: LD_INT 4
63702: NEG
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 3
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 4
63746: NEG
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 4
63758: NEG
63759: PUSH
63760: LD_INT 4
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: NEG
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 4
63782: NEG
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 4
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 5
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 4
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 3
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 4
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: LD_INT 5
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 5
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63941: LD_ADDR_VAR 0 31
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 4
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 4
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 5
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 5
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 3
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: NEG
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 3
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 4
64097: NEG
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 4
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 4
64120: NEG
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 4
64143: NEG
64144: PUSH
64145: LD_INT 4
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 4
64155: NEG
64156: PUSH
64157: LD_INT 5
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: NEG
64168: PUSH
64169: LD_INT 4
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 3
64179: NEG
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 4
64191: NEG
64192: PUSH
64193: LD_INT 3
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 5
64203: NEG
64204: PUSH
64205: LD_INT 4
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 5
64215: NEG
64216: PUSH
64217: LD_INT 5
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: NEG
64228: PUSH
64229: LD_INT 5
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 5
64239: NEG
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 4
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: LD_INT 3
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 2
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 4
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: LD_INT 4
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 4
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 4
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 5
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 5
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 4
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 5
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64491: LD_ADDR_VAR 0 32
64495: PUSH
64496: LD_INT 4
64498: NEG
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 4
64509: NEG
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 4
64543: NEG
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 5
64554: NEG
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 5
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 5
64577: NEG
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: NEG
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: NEG
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 3
64612: NEG
64613: PUSH
64614: LD_INT 4
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: NEG
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 4
64660: NEG
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 4
64672: NEG
64673: PUSH
64674: LD_INT 4
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 4
64696: NEG
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: LD_INT 4
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 5
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 4
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 3
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_INT 3
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: LD_INT 4
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 5
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 5
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 4
64893: PUSH
64894: LD_INT 2
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 4
64903: PUSH
64904: LD_INT 4
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 4
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 5
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 5
64933: PUSH
64934: LD_INT 5
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 4
64943: PUSH
64944: LD_INT 5
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: LD_INT 4
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 5
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 3
64983: PUSH
64984: LD_INT 5
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65038: LD_ADDR_VAR 0 33
65042: PUSH
65043: LD_INT 4
65045: NEG
65046: PUSH
65047: LD_INT 4
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: LD_INT 5
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 3
65069: NEG
65070: PUSH
65071: LD_INT 4
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 3
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 4
65093: NEG
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 5
65105: NEG
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 5
65117: NEG
65118: PUSH
65119: LD_INT 5
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 3
65129: NEG
65130: PUSH
65131: LD_INT 5
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 5
65141: NEG
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 4
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 3
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: LD_INT 4
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 4
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 4
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 5
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 5
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 4
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 5
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 4
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 3
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 2
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 4
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: LD_INT 4
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 4
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 3
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 4
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: LD_INT 5
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: LD_INT 5
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: LD_INT 4
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: LD_INT 5
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65576: LD_ADDR_VAR 0 34
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 4
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 5
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: LD_INT 4
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: LD_INT 3
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 4
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: LD_INT 5
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 2
65673: NEG
65674: PUSH
65675: LD_INT 5
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 4
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 4
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 4
65778: PUSH
65779: LD_INT 4
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 5
65798: PUSH
65799: LD_INT 4
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 5
65808: PUSH
65809: LD_INT 5
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 4
65818: PUSH
65819: LD_INT 5
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 3
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 5
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: LD_INT 5
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 4
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 4
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: NEG
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: NEG
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 4
66006: NEG
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 5
66017: NEG
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 5
66028: NEG
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 5
66040: NEG
66041: PUSH
66042: LD_INT 2
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: ST_TO_ADDR
// end ; end ;
66108: GO 66111
66110: POP
// case btype of b_depot , b_warehouse :
66111: LD_VAR 0 1
66115: PUSH
66116: LD_INT 0
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66130
66122: LD_INT 1
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66130
66128: GO 66331
66130: POP
// case nation of nation_american :
66131: LD_VAR 0 5
66135: PUSH
66136: LD_INT 1
66138: DOUBLE
66139: EQUAL
66140: IFTRUE 66144
66142: GO 66200
66144: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66145: LD_ADDR_VAR 0 9
66149: PUSH
66150: LD_VAR 0 11
66154: PUSH
66155: LD_VAR 0 12
66159: PUSH
66160: LD_VAR 0 13
66164: PUSH
66165: LD_VAR 0 14
66169: PUSH
66170: LD_VAR 0 15
66174: PUSH
66175: LD_VAR 0 16
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: LD_VAR 0 4
66192: PUSH
66193: LD_INT 1
66195: PLUS
66196: ARRAY
66197: ST_TO_ADDR
66198: GO 66329
66200: LD_INT 2
66202: DOUBLE
66203: EQUAL
66204: IFTRUE 66208
66206: GO 66264
66208: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66209: LD_ADDR_VAR 0 9
66213: PUSH
66214: LD_VAR 0 17
66218: PUSH
66219: LD_VAR 0 18
66223: PUSH
66224: LD_VAR 0 19
66228: PUSH
66229: LD_VAR 0 20
66233: PUSH
66234: LD_VAR 0 21
66238: PUSH
66239: LD_VAR 0 22
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_VAR 0 4
66256: PUSH
66257: LD_INT 1
66259: PLUS
66260: ARRAY
66261: ST_TO_ADDR
66262: GO 66329
66264: LD_INT 3
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66272
66270: GO 66328
66272: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66273: LD_ADDR_VAR 0 9
66277: PUSH
66278: LD_VAR 0 23
66282: PUSH
66283: LD_VAR 0 24
66287: PUSH
66288: LD_VAR 0 25
66292: PUSH
66293: LD_VAR 0 26
66297: PUSH
66298: LD_VAR 0 27
66302: PUSH
66303: LD_VAR 0 28
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: LD_VAR 0 4
66320: PUSH
66321: LD_INT 1
66323: PLUS
66324: ARRAY
66325: ST_TO_ADDR
66326: GO 66329
66328: POP
66329: GO 66884
66331: LD_INT 2
66333: DOUBLE
66334: EQUAL
66335: IFTRUE 66345
66337: LD_INT 3
66339: DOUBLE
66340: EQUAL
66341: IFTRUE 66345
66343: GO 66401
66345: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66346: LD_ADDR_VAR 0 9
66350: PUSH
66351: LD_VAR 0 29
66355: PUSH
66356: LD_VAR 0 30
66360: PUSH
66361: LD_VAR 0 31
66365: PUSH
66366: LD_VAR 0 32
66370: PUSH
66371: LD_VAR 0 33
66375: PUSH
66376: LD_VAR 0 34
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 4
66393: PUSH
66394: LD_INT 1
66396: PLUS
66397: ARRAY
66398: ST_TO_ADDR
66399: GO 66884
66401: LD_INT 16
66403: DOUBLE
66404: EQUAL
66405: IFTRUE 66463
66407: LD_INT 17
66409: DOUBLE
66410: EQUAL
66411: IFTRUE 66463
66413: LD_INT 18
66415: DOUBLE
66416: EQUAL
66417: IFTRUE 66463
66419: LD_INT 19
66421: DOUBLE
66422: EQUAL
66423: IFTRUE 66463
66425: LD_INT 22
66427: DOUBLE
66428: EQUAL
66429: IFTRUE 66463
66431: LD_INT 20
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66463
66437: LD_INT 21
66439: DOUBLE
66440: EQUAL
66441: IFTRUE 66463
66443: LD_INT 23
66445: DOUBLE
66446: EQUAL
66447: IFTRUE 66463
66449: LD_INT 24
66451: DOUBLE
66452: EQUAL
66453: IFTRUE 66463
66455: LD_INT 25
66457: DOUBLE
66458: EQUAL
66459: IFTRUE 66463
66461: GO 66519
66463: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66464: LD_ADDR_VAR 0 9
66468: PUSH
66469: LD_VAR 0 35
66473: PUSH
66474: LD_VAR 0 36
66478: PUSH
66479: LD_VAR 0 37
66483: PUSH
66484: LD_VAR 0 38
66488: PUSH
66489: LD_VAR 0 39
66493: PUSH
66494: LD_VAR 0 40
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: PUSH
66507: LD_VAR 0 4
66511: PUSH
66512: LD_INT 1
66514: PLUS
66515: ARRAY
66516: ST_TO_ADDR
66517: GO 66884
66519: LD_INT 6
66521: DOUBLE
66522: EQUAL
66523: IFTRUE 66575
66525: LD_INT 7
66527: DOUBLE
66528: EQUAL
66529: IFTRUE 66575
66531: LD_INT 8
66533: DOUBLE
66534: EQUAL
66535: IFTRUE 66575
66537: LD_INT 13
66539: DOUBLE
66540: EQUAL
66541: IFTRUE 66575
66543: LD_INT 12
66545: DOUBLE
66546: EQUAL
66547: IFTRUE 66575
66549: LD_INT 15
66551: DOUBLE
66552: EQUAL
66553: IFTRUE 66575
66555: LD_INT 11
66557: DOUBLE
66558: EQUAL
66559: IFTRUE 66575
66561: LD_INT 14
66563: DOUBLE
66564: EQUAL
66565: IFTRUE 66575
66567: LD_INT 10
66569: DOUBLE
66570: EQUAL
66571: IFTRUE 66575
66573: GO 66631
66575: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66576: LD_ADDR_VAR 0 9
66580: PUSH
66581: LD_VAR 0 41
66585: PUSH
66586: LD_VAR 0 42
66590: PUSH
66591: LD_VAR 0 43
66595: PUSH
66596: LD_VAR 0 44
66600: PUSH
66601: LD_VAR 0 45
66605: PUSH
66606: LD_VAR 0 46
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_VAR 0 4
66623: PUSH
66624: LD_INT 1
66626: PLUS
66627: ARRAY
66628: ST_TO_ADDR
66629: GO 66884
66631: LD_INT 36
66633: DOUBLE
66634: EQUAL
66635: IFTRUE 66639
66637: GO 66695
66639: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66640: LD_ADDR_VAR 0 9
66644: PUSH
66645: LD_VAR 0 47
66649: PUSH
66650: LD_VAR 0 48
66654: PUSH
66655: LD_VAR 0 49
66659: PUSH
66660: LD_VAR 0 50
66664: PUSH
66665: LD_VAR 0 51
66669: PUSH
66670: LD_VAR 0 52
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 4
66687: PUSH
66688: LD_INT 1
66690: PLUS
66691: ARRAY
66692: ST_TO_ADDR
66693: GO 66884
66695: LD_INT 4
66697: DOUBLE
66698: EQUAL
66699: IFTRUE 66721
66701: LD_INT 5
66703: DOUBLE
66704: EQUAL
66705: IFTRUE 66721
66707: LD_INT 34
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66721
66713: LD_INT 37
66715: DOUBLE
66716: EQUAL
66717: IFTRUE 66721
66719: GO 66777
66721: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66722: LD_ADDR_VAR 0 9
66726: PUSH
66727: LD_VAR 0 53
66731: PUSH
66732: LD_VAR 0 54
66736: PUSH
66737: LD_VAR 0 55
66741: PUSH
66742: LD_VAR 0 56
66746: PUSH
66747: LD_VAR 0 57
66751: PUSH
66752: LD_VAR 0 58
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: PUSH
66765: LD_VAR 0 4
66769: PUSH
66770: LD_INT 1
66772: PLUS
66773: ARRAY
66774: ST_TO_ADDR
66775: GO 66884
66777: LD_INT 31
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66827
66783: LD_INT 32
66785: DOUBLE
66786: EQUAL
66787: IFTRUE 66827
66789: LD_INT 33
66791: DOUBLE
66792: EQUAL
66793: IFTRUE 66827
66795: LD_INT 27
66797: DOUBLE
66798: EQUAL
66799: IFTRUE 66827
66801: LD_INT 26
66803: DOUBLE
66804: EQUAL
66805: IFTRUE 66827
66807: LD_INT 28
66809: DOUBLE
66810: EQUAL
66811: IFTRUE 66827
66813: LD_INT 29
66815: DOUBLE
66816: EQUAL
66817: IFTRUE 66827
66819: LD_INT 30
66821: DOUBLE
66822: EQUAL
66823: IFTRUE 66827
66825: GO 66883
66827: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66828: LD_ADDR_VAR 0 9
66832: PUSH
66833: LD_VAR 0 59
66837: PUSH
66838: LD_VAR 0 60
66842: PUSH
66843: LD_VAR 0 61
66847: PUSH
66848: LD_VAR 0 62
66852: PUSH
66853: LD_VAR 0 63
66857: PUSH
66858: LD_VAR 0 64
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: PUSH
66871: LD_VAR 0 4
66875: PUSH
66876: LD_INT 1
66878: PLUS
66879: ARRAY
66880: ST_TO_ADDR
66881: GO 66884
66883: POP
// temp_list2 = [ ] ;
66884: LD_ADDR_VAR 0 10
66888: PUSH
66889: EMPTY
66890: ST_TO_ADDR
// for i in temp_list do
66891: LD_ADDR_VAR 0 8
66895: PUSH
66896: LD_VAR 0 9
66900: PUSH
66901: FOR_IN
66902: IFFALSE 66954
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66904: LD_ADDR_VAR 0 10
66908: PUSH
66909: LD_VAR 0 10
66913: PUSH
66914: LD_VAR 0 8
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PUSH
66923: LD_VAR 0 2
66927: PLUS
66928: PUSH
66929: LD_VAR 0 8
66933: PUSH
66934: LD_INT 2
66936: ARRAY
66937: PUSH
66938: LD_VAR 0 3
66942: PLUS
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: ADD
66951: ST_TO_ADDR
66952: GO 66901
66954: POP
66955: POP
// result = temp_list2 ;
66956: LD_ADDR_VAR 0 7
66960: PUSH
66961: LD_VAR 0 10
66965: ST_TO_ADDR
// end ;
66966: LD_VAR 0 7
66970: RET
// export function EnemyInRange ( unit , dist ) ; begin
66971: LD_INT 0
66973: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 255
66988: PPUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: CALL_OW 250
66998: PPUSH
66999: LD_VAR 0 1
67003: PPUSH
67004: CALL_OW 251
67008: PPUSH
67009: LD_VAR 0 2
67013: PPUSH
67014: CALL 40228 0 4
67018: PUSH
67019: LD_INT 4
67021: ARRAY
67022: ST_TO_ADDR
// end ;
67023: LD_VAR 0 3
67027: RET
// export function PlayerSeeMe ( unit ) ; begin
67028: LD_INT 0
67030: PPUSH
// result := See ( your_side , unit ) ;
67031: LD_ADDR_VAR 0 2
67035: PUSH
67036: LD_OWVAR 2
67040: PPUSH
67041: LD_VAR 0 1
67045: PPUSH
67046: CALL_OW 292
67050: ST_TO_ADDR
// end ;
67051: LD_VAR 0 2
67055: RET
// export function ReverseDir ( unit ) ; begin
67056: LD_INT 0
67058: PPUSH
// if not unit then
67059: LD_VAR 0 1
67063: NOT
67064: IFFALSE 67068
// exit ;
67066: GO 67091
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67068: LD_ADDR_VAR 0 2
67072: PUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 254
67082: PUSH
67083: LD_INT 3
67085: PLUS
67086: PUSH
67087: LD_INT 6
67089: MOD
67090: ST_TO_ADDR
// end ;
67091: LD_VAR 0 2
67095: RET
// export function ReverseArray ( array ) ; var i ; begin
67096: LD_INT 0
67098: PPUSH
67099: PPUSH
// if not array then
67100: LD_VAR 0 1
67104: NOT
67105: IFFALSE 67109
// exit ;
67107: GO 67164
// result := [ ] ;
67109: LD_ADDR_VAR 0 2
67113: PUSH
67114: EMPTY
67115: ST_TO_ADDR
// for i := array downto 1 do
67116: LD_ADDR_VAR 0 3
67120: PUSH
67121: DOUBLE
67122: LD_VAR 0 1
67126: INC
67127: ST_TO_ADDR
67128: LD_INT 1
67130: PUSH
67131: FOR_DOWNTO
67132: IFFALSE 67162
// result := Join ( result , array [ i ] ) ;
67134: LD_ADDR_VAR 0 2
67138: PUSH
67139: LD_VAR 0 2
67143: PPUSH
67144: LD_VAR 0 1
67148: PUSH
67149: LD_VAR 0 3
67153: ARRAY
67154: PPUSH
67155: CALL 72006 0 2
67159: ST_TO_ADDR
67160: GO 67131
67162: POP
67163: POP
// end ;
67164: LD_VAR 0 2
67168: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67169: LD_INT 0
67171: PPUSH
67172: PPUSH
67173: PPUSH
67174: PPUSH
67175: PPUSH
67176: PPUSH
// if not unit or not hexes then
67177: LD_VAR 0 1
67181: NOT
67182: IFTRUE 67191
67184: PUSH
67185: LD_VAR 0 2
67189: NOT
67190: OR
67191: IFFALSE 67195
// exit ;
67193: GO 67318
// dist := 9999 ;
67195: LD_ADDR_VAR 0 5
67199: PUSH
67200: LD_INT 9999
67202: ST_TO_ADDR
// for i = 1 to hexes do
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: DOUBLE
67209: LD_INT 1
67211: DEC
67212: ST_TO_ADDR
67213: LD_VAR 0 2
67217: PUSH
67218: FOR_TO
67219: IFFALSE 67306
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67221: LD_ADDR_VAR 0 6
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: LD_VAR 0 2
67235: PUSH
67236: LD_VAR 0 4
67240: ARRAY
67241: PUSH
67242: LD_INT 1
67244: ARRAY
67245: PPUSH
67246: LD_VAR 0 2
67250: PUSH
67251: LD_VAR 0 4
67255: ARRAY
67256: PUSH
67257: LD_INT 2
67259: ARRAY
67260: PPUSH
67261: CALL_OW 297
67265: ST_TO_ADDR
// if tdist < dist then
67266: LD_VAR 0 6
67270: PUSH
67271: LD_VAR 0 5
67275: LESS
67276: IFFALSE 67304
// begin hex := hexes [ i ] ;
67278: LD_ADDR_VAR 0 8
67282: PUSH
67283: LD_VAR 0 2
67287: PUSH
67288: LD_VAR 0 4
67292: ARRAY
67293: ST_TO_ADDR
// dist := tdist ;
67294: LD_ADDR_VAR 0 5
67298: PUSH
67299: LD_VAR 0 6
67303: ST_TO_ADDR
// end ; end ;
67304: GO 67218
67306: POP
67307: POP
// result := hex ;
67308: LD_ADDR_VAR 0 3
67312: PUSH
67313: LD_VAR 0 8
67317: ST_TO_ADDR
// end ;
67318: LD_VAR 0 3
67322: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67323: LD_INT 0
67325: PPUSH
67326: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67327: LD_VAR 0 1
67331: NOT
67332: IFTRUE 67371
67334: PUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 21
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 23
67352: PUSH
67353: LD_INT 2
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PPUSH
67364: CALL_OW 69
67368: IN
67369: NOT
67370: OR
67371: IFFALSE 67375
// exit ;
67373: GO 67422
// for i = 1 to 3 do
67375: LD_ADDR_VAR 0 3
67379: PUSH
67380: DOUBLE
67381: LD_INT 1
67383: DEC
67384: ST_TO_ADDR
67385: LD_INT 3
67387: PUSH
67388: FOR_TO
67389: IFFALSE 67420
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 250
67400: PPUSH
67401: LD_VAR 0 1
67405: PPUSH
67406: CALL_OW 251
67410: PPUSH
67411: LD_INT 1
67413: PPUSH
67414: CALL_OW 453
67418: GO 67388
67420: POP
67421: POP
// end ;
67422: LD_VAR 0 2
67426: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67427: LD_INT 0
67429: PPUSH
67430: PPUSH
67431: PPUSH
67432: PPUSH
67433: PPUSH
67434: PPUSH
// if not unit or not enemy_unit then
67435: LD_VAR 0 1
67439: NOT
67440: IFTRUE 67449
67442: PUSH
67443: LD_VAR 0 2
67447: NOT
67448: OR
67449: IFFALSE 67453
// exit ;
67451: GO 67924
// if GetLives ( i ) < 250 then
67453: LD_VAR 0 4
67457: PPUSH
67458: CALL_OW 256
67462: PUSH
67463: LD_INT 250
67465: LESS
67466: IFFALSE 67479
// begin ComAutodestruct ( i ) ;
67468: LD_VAR 0 4
67472: PPUSH
67473: CALL 67323 0 1
// exit ;
67477: GO 67924
// end ; x := GetX ( enemy_unit ) ;
67479: LD_ADDR_VAR 0 7
67483: PUSH
67484: LD_VAR 0 2
67488: PPUSH
67489: CALL_OW 250
67493: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67494: LD_ADDR_VAR 0 8
67498: PUSH
67499: LD_VAR 0 2
67503: PPUSH
67504: CALL_OW 251
67508: ST_TO_ADDR
// if not x or not y then
67509: LD_VAR 0 7
67513: NOT
67514: IFTRUE 67523
67516: PUSH
67517: LD_VAR 0 8
67521: NOT
67522: OR
67523: IFFALSE 67527
// exit ;
67525: GO 67924
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67527: LD_ADDR_VAR 0 6
67531: PUSH
67532: LD_VAR 0 7
67536: PPUSH
67537: LD_INT 0
67539: PPUSH
67540: LD_INT 4
67542: PPUSH
67543: CALL_OW 272
67547: PUSH
67548: LD_VAR 0 8
67552: PPUSH
67553: LD_INT 0
67555: PPUSH
67556: LD_INT 4
67558: PPUSH
67559: CALL_OW 273
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_VAR 0 7
67572: PPUSH
67573: LD_INT 1
67575: PPUSH
67576: LD_INT 4
67578: PPUSH
67579: CALL_OW 272
67583: PUSH
67584: LD_VAR 0 8
67588: PPUSH
67589: LD_INT 1
67591: PPUSH
67592: LD_INT 4
67594: PPUSH
67595: CALL_OW 273
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_VAR 0 7
67608: PPUSH
67609: LD_INT 2
67611: PPUSH
67612: LD_INT 4
67614: PPUSH
67615: CALL_OW 272
67619: PUSH
67620: LD_VAR 0 8
67624: PPUSH
67625: LD_INT 2
67627: PPUSH
67628: LD_INT 4
67630: PPUSH
67631: CALL_OW 273
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_VAR 0 7
67644: PPUSH
67645: LD_INT 3
67647: PPUSH
67648: LD_INT 4
67650: PPUSH
67651: CALL_OW 272
67655: PUSH
67656: LD_VAR 0 8
67660: PPUSH
67661: LD_INT 3
67663: PPUSH
67664: LD_INT 4
67666: PPUSH
67667: CALL_OW 273
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_VAR 0 7
67680: PPUSH
67681: LD_INT 4
67683: PPUSH
67684: LD_INT 4
67686: PPUSH
67687: CALL_OW 272
67691: PUSH
67692: LD_VAR 0 8
67696: PPUSH
67697: LD_INT 4
67699: PPUSH
67700: LD_INT 4
67702: PPUSH
67703: CALL_OW 273
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_VAR 0 7
67716: PPUSH
67717: LD_INT 5
67719: PPUSH
67720: LD_INT 4
67722: PPUSH
67723: CALL_OW 272
67727: PUSH
67728: LD_VAR 0 8
67732: PPUSH
67733: LD_INT 5
67735: PPUSH
67736: LD_INT 4
67738: PPUSH
67739: CALL_OW 273
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: ST_TO_ADDR
// for i = tmp downto 1 do
67756: LD_ADDR_VAR 0 4
67760: PUSH
67761: DOUBLE
67762: LD_VAR 0 6
67766: INC
67767: ST_TO_ADDR
67768: LD_INT 1
67770: PUSH
67771: FOR_DOWNTO
67772: IFFALSE 67875
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67774: LD_VAR 0 6
67778: PUSH
67779: LD_VAR 0 4
67783: ARRAY
67784: PUSH
67785: LD_INT 1
67787: ARRAY
67788: PPUSH
67789: LD_VAR 0 6
67793: PUSH
67794: LD_VAR 0 4
67798: ARRAY
67799: PUSH
67800: LD_INT 2
67802: ARRAY
67803: PPUSH
67804: CALL_OW 488
67808: NOT
67809: IFTRUE 67851
67811: PUSH
67812: LD_VAR 0 6
67816: PUSH
67817: LD_VAR 0 4
67821: ARRAY
67822: PUSH
67823: LD_INT 1
67825: ARRAY
67826: PPUSH
67827: LD_VAR 0 6
67831: PUSH
67832: LD_VAR 0 4
67836: ARRAY
67837: PUSH
67838: LD_INT 2
67840: ARRAY
67841: PPUSH
67842: CALL_OW 428
67846: PUSH
67847: LD_INT 0
67849: NONEQUAL
67850: OR
67851: IFFALSE 67873
// tmp := Delete ( tmp , i ) ;
67853: LD_ADDR_VAR 0 6
67857: PUSH
67858: LD_VAR 0 6
67862: PPUSH
67863: LD_VAR 0 4
67867: PPUSH
67868: CALL_OW 3
67872: ST_TO_ADDR
67873: GO 67771
67875: POP
67876: POP
// j := GetClosestHex ( unit , tmp ) ;
67877: LD_ADDR_VAR 0 5
67881: PUSH
67882: LD_VAR 0 1
67886: PPUSH
67887: LD_VAR 0 6
67891: PPUSH
67892: CALL 67169 0 2
67896: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67897: LD_VAR 0 1
67901: PPUSH
67902: LD_VAR 0 5
67906: PUSH
67907: LD_INT 1
67909: ARRAY
67910: PPUSH
67911: LD_VAR 0 5
67915: PUSH
67916: LD_INT 2
67918: ARRAY
67919: PPUSH
67920: CALL_OW 111
// end ;
67924: LD_VAR 0 3
67928: RET
// export function PrepareApemanSoldier ( ) ; begin
67929: LD_INT 0
67931: PPUSH
// uc_nation := 0 ;
67932: LD_ADDR_OWVAR 21
67936: PUSH
67937: LD_INT 0
67939: ST_TO_ADDR
// hc_sex := sex_male ;
67940: LD_ADDR_OWVAR 27
67944: PUSH
67945: LD_INT 1
67947: ST_TO_ADDR
// hc_name :=  ;
67948: LD_ADDR_OWVAR 26
67952: PUSH
67953: LD_STRING 
67955: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67956: LD_ADDR_OWVAR 28
67960: PUSH
67961: LD_INT 15
67963: ST_TO_ADDR
// hc_gallery :=  ;
67964: LD_ADDR_OWVAR 33
67968: PUSH
67969: LD_STRING 
67971: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67972: LD_ADDR_OWVAR 31
67976: PUSH
67977: LD_INT 0
67979: PPUSH
67980: LD_INT 3
67982: PPUSH
67983: CALL_OW 12
67987: PUSH
67988: LD_INT 0
67990: PPUSH
67991: LD_INT 3
67993: PPUSH
67994: CALL_OW 12
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68011: LD_ADDR_OWVAR 29
68015: PUSH
68016: LD_INT 12
68018: PUSH
68019: LD_INT 12
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: ST_TO_ADDR
// end ;
68026: LD_VAR 0 1
68030: RET
// export function PrepareApemanEngineer ( ) ; begin
68031: LD_INT 0
68033: PPUSH
// uc_nation := 0 ;
68034: LD_ADDR_OWVAR 21
68038: PUSH
68039: LD_INT 0
68041: ST_TO_ADDR
// hc_sex := sex_male ;
68042: LD_ADDR_OWVAR 27
68046: PUSH
68047: LD_INT 1
68049: ST_TO_ADDR
// hc_name :=  ;
68050: LD_ADDR_OWVAR 26
68054: PUSH
68055: LD_STRING 
68057: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68058: LD_ADDR_OWVAR 28
68062: PUSH
68063: LD_INT 16
68065: ST_TO_ADDR
// hc_gallery :=  ;
68066: LD_ADDR_OWVAR 33
68070: PUSH
68071: LD_STRING 
68073: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68074: LD_ADDR_OWVAR 31
68078: PUSH
68079: LD_INT 0
68081: PPUSH
68082: LD_INT 3
68084: PPUSH
68085: CALL_OW 12
68089: PUSH
68090: LD_INT 0
68092: PPUSH
68093: LD_INT 3
68095: PPUSH
68096: CALL_OW 12
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68113: LD_ADDR_OWVAR 29
68117: PUSH
68118: LD_INT 12
68120: PUSH
68121: LD_INT 12
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// end ;
68128: LD_VAR 0 1
68132: RET
// export function PrepareApeman ( agressivity ) ; begin
68133: LD_INT 0
68135: PPUSH
// uc_side := 0 ;
68136: LD_ADDR_OWVAR 20
68140: PUSH
68141: LD_INT 0
68143: ST_TO_ADDR
// uc_nation := 0 ;
68144: LD_ADDR_OWVAR 21
68148: PUSH
68149: LD_INT 0
68151: ST_TO_ADDR
// hc_sex := sex_male ;
68152: LD_ADDR_OWVAR 27
68156: PUSH
68157: LD_INT 1
68159: ST_TO_ADDR
// hc_class := class_apeman ;
68160: LD_ADDR_OWVAR 28
68164: PUSH
68165: LD_INT 12
68167: ST_TO_ADDR
// hc_gallery :=  ;
68168: LD_ADDR_OWVAR 33
68172: PUSH
68173: LD_STRING 
68175: ST_TO_ADDR
// hc_name :=  ;
68176: LD_ADDR_OWVAR 26
68180: PUSH
68181: LD_STRING 
68183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68184: LD_ADDR_OWVAR 29
68188: PUSH
68189: LD_INT 12
68191: PUSH
68192: LD_INT 12
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: ST_TO_ADDR
// if agressivity = 0 then
68199: LD_VAR 0 1
68203: PUSH
68204: LD_INT 0
68206: EQUAL
68207: IFFALSE 68219
// hc_agressivity := 0 else
68209: LD_ADDR_OWVAR 35
68213: PUSH
68214: LD_INT 0
68216: ST_TO_ADDR
68217: GO 68240
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68219: LD_ADDR_OWVAR 35
68223: PUSH
68224: LD_VAR 0 1
68228: NEG
68229: PPUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 12
68239: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68240: LD_ADDR_OWVAR 31
68244: PUSH
68245: LD_INT 0
68247: PPUSH
68248: LD_INT 3
68250: PPUSH
68251: CALL_OW 12
68255: PUSH
68256: LD_INT 0
68258: PPUSH
68259: LD_INT 3
68261: PPUSH
68262: CALL_OW 12
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: ST_TO_ADDR
// end ;
68279: LD_VAR 0 2
68283: RET
// export function PrepareTiger ( agressivity ) ; begin
68284: LD_INT 0
68286: PPUSH
// uc_side := 0 ;
68287: LD_ADDR_OWVAR 20
68291: PUSH
68292: LD_INT 0
68294: ST_TO_ADDR
// uc_nation := 0 ;
68295: LD_ADDR_OWVAR 21
68299: PUSH
68300: LD_INT 0
68302: ST_TO_ADDR
// InitHc ;
68303: CALL_OW 19
// hc_class := class_tiger ;
68307: LD_ADDR_OWVAR 28
68311: PUSH
68312: LD_INT 14
68314: ST_TO_ADDR
// hc_gallery :=  ;
68315: LD_ADDR_OWVAR 33
68319: PUSH
68320: LD_STRING 
68322: ST_TO_ADDR
// hc_name :=  ;
68323: LD_ADDR_OWVAR 26
68327: PUSH
68328: LD_STRING 
68330: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68331: LD_ADDR_OWVAR 35
68335: PUSH
68336: LD_VAR 0 1
68340: NEG
68341: PPUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 12
68351: ST_TO_ADDR
// end ;
68352: LD_VAR 0 2
68356: RET
// export function PrepareEnchidna ( ) ; begin
68357: LD_INT 0
68359: PPUSH
// uc_side := 0 ;
68360: LD_ADDR_OWVAR 20
68364: PUSH
68365: LD_INT 0
68367: ST_TO_ADDR
// uc_nation := 0 ;
68368: LD_ADDR_OWVAR 21
68372: PUSH
68373: LD_INT 0
68375: ST_TO_ADDR
// InitHc ;
68376: CALL_OW 19
// hc_class := class_baggie ;
68380: LD_ADDR_OWVAR 28
68384: PUSH
68385: LD_INT 13
68387: ST_TO_ADDR
// hc_gallery :=  ;
68388: LD_ADDR_OWVAR 33
68392: PUSH
68393: LD_STRING 
68395: ST_TO_ADDR
// hc_name :=  ;
68396: LD_ADDR_OWVAR 26
68400: PUSH
68401: LD_STRING 
68403: ST_TO_ADDR
// end ;
68404: LD_VAR 0 1
68408: RET
// export function PrepareFrog ( ) ; begin
68409: LD_INT 0
68411: PPUSH
// uc_side := 0 ;
68412: LD_ADDR_OWVAR 20
68416: PUSH
68417: LD_INT 0
68419: ST_TO_ADDR
// uc_nation := 0 ;
68420: LD_ADDR_OWVAR 21
68424: PUSH
68425: LD_INT 0
68427: ST_TO_ADDR
// InitHc ;
68428: CALL_OW 19
// hc_class := class_frog ;
68432: LD_ADDR_OWVAR 28
68436: PUSH
68437: LD_INT 19
68439: ST_TO_ADDR
// hc_gallery :=  ;
68440: LD_ADDR_OWVAR 33
68444: PUSH
68445: LD_STRING 
68447: ST_TO_ADDR
// hc_name :=  ;
68448: LD_ADDR_OWVAR 26
68452: PUSH
68453: LD_STRING 
68455: ST_TO_ADDR
// end ;
68456: LD_VAR 0 1
68460: RET
// export function PrepareFish ( ) ; begin
68461: LD_INT 0
68463: PPUSH
// uc_side := 0 ;
68464: LD_ADDR_OWVAR 20
68468: PUSH
68469: LD_INT 0
68471: ST_TO_ADDR
// uc_nation := 0 ;
68472: LD_ADDR_OWVAR 21
68476: PUSH
68477: LD_INT 0
68479: ST_TO_ADDR
// InitHc ;
68480: CALL_OW 19
// hc_class := class_fish ;
68484: LD_ADDR_OWVAR 28
68488: PUSH
68489: LD_INT 20
68491: ST_TO_ADDR
// hc_gallery :=  ;
68492: LD_ADDR_OWVAR 33
68496: PUSH
68497: LD_STRING 
68499: ST_TO_ADDR
// hc_name :=  ;
68500: LD_ADDR_OWVAR 26
68504: PUSH
68505: LD_STRING 
68507: ST_TO_ADDR
// end ;
68508: LD_VAR 0 1
68512: RET
// export function PrepareBird ( ) ; begin
68513: LD_INT 0
68515: PPUSH
// uc_side := 0 ;
68516: LD_ADDR_OWVAR 20
68520: PUSH
68521: LD_INT 0
68523: ST_TO_ADDR
// uc_nation := 0 ;
68524: LD_ADDR_OWVAR 21
68528: PUSH
68529: LD_INT 0
68531: ST_TO_ADDR
// InitHc ;
68532: CALL_OW 19
// hc_class := class_phororhacos ;
68536: LD_ADDR_OWVAR 28
68540: PUSH
68541: LD_INT 18
68543: ST_TO_ADDR
// hc_gallery :=  ;
68544: LD_ADDR_OWVAR 33
68548: PUSH
68549: LD_STRING 
68551: ST_TO_ADDR
// hc_name :=  ;
68552: LD_ADDR_OWVAR 26
68556: PUSH
68557: LD_STRING 
68559: ST_TO_ADDR
// end ;
68560: LD_VAR 0 1
68564: RET
// export function PrepareHorse ( ) ; begin
68565: LD_INT 0
68567: PPUSH
// uc_side := 0 ;
68568: LD_ADDR_OWVAR 20
68572: PUSH
68573: LD_INT 0
68575: ST_TO_ADDR
// uc_nation := 0 ;
68576: LD_ADDR_OWVAR 21
68580: PUSH
68581: LD_INT 0
68583: ST_TO_ADDR
// InitHc ;
68584: CALL_OW 19
// hc_class := class_horse ;
68588: LD_ADDR_OWVAR 28
68592: PUSH
68593: LD_INT 21
68595: ST_TO_ADDR
// hc_gallery :=  ;
68596: LD_ADDR_OWVAR 33
68600: PUSH
68601: LD_STRING 
68603: ST_TO_ADDR
// hc_name :=  ;
68604: LD_ADDR_OWVAR 26
68608: PUSH
68609: LD_STRING 
68611: ST_TO_ADDR
// end ;
68612: LD_VAR 0 1
68616: RET
// export function PrepareMastodont ( ) ; begin
68617: LD_INT 0
68619: PPUSH
// uc_side := 0 ;
68620: LD_ADDR_OWVAR 20
68624: PUSH
68625: LD_INT 0
68627: ST_TO_ADDR
// uc_nation := 0 ;
68628: LD_ADDR_OWVAR 21
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68636: LD_ADDR_OWVAR 37
68640: PUSH
68641: LD_INT 31
68643: ST_TO_ADDR
// vc_control := control_rider ;
68644: LD_ADDR_OWVAR 38
68648: PUSH
68649: LD_INT 4
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 1
68656: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68657: LD_INT 0
68659: PPUSH
68660: PPUSH
68661: PPUSH
// uc_side = 0 ;
68662: LD_ADDR_OWVAR 20
68666: PUSH
68667: LD_INT 0
68669: ST_TO_ADDR
// uc_nation = 0 ;
68670: LD_ADDR_OWVAR 21
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// InitHc_All ( ) ;
68678: CALL_OW 584
// InitVc ;
68682: CALL_OW 20
// if mastodonts then
68686: LD_VAR 0 6
68690: IFFALSE 68757
// for i = 1 to mastodonts do
68692: LD_ADDR_VAR 0 11
68696: PUSH
68697: DOUBLE
68698: LD_INT 1
68700: DEC
68701: ST_TO_ADDR
68702: LD_VAR 0 6
68706: PUSH
68707: FOR_TO
68708: IFFALSE 68755
// begin vc_chassis := 31 ;
68710: LD_ADDR_OWVAR 37
68714: PUSH
68715: LD_INT 31
68717: ST_TO_ADDR
// vc_control := control_rider ;
68718: LD_ADDR_OWVAR 38
68722: PUSH
68723: LD_INT 4
68725: ST_TO_ADDR
// animal := CreateVehicle ;
68726: LD_ADDR_VAR 0 12
68730: PUSH
68731: CALL_OW 45
68735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68736: LD_VAR 0 12
68740: PPUSH
68741: LD_VAR 0 8
68745: PPUSH
68746: LD_INT 0
68748: PPUSH
68749: CALL 70899 0 3
// end ;
68753: GO 68707
68755: POP
68756: POP
// if horses then
68757: LD_VAR 0 5
68761: IFFALSE 68828
// for i = 1 to horses do
68763: LD_ADDR_VAR 0 11
68767: PUSH
68768: DOUBLE
68769: LD_INT 1
68771: DEC
68772: ST_TO_ADDR
68773: LD_VAR 0 5
68777: PUSH
68778: FOR_TO
68779: IFFALSE 68826
// begin hc_class := 21 ;
68781: LD_ADDR_OWVAR 28
68785: PUSH
68786: LD_INT 21
68788: ST_TO_ADDR
// hc_gallery :=  ;
68789: LD_ADDR_OWVAR 33
68793: PUSH
68794: LD_STRING 
68796: ST_TO_ADDR
// animal := CreateHuman ;
68797: LD_ADDR_VAR 0 12
68801: PUSH
68802: CALL_OW 44
68806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68807: LD_VAR 0 12
68811: PPUSH
68812: LD_VAR 0 8
68816: PPUSH
68817: LD_INT 0
68819: PPUSH
68820: CALL 70899 0 3
// end ;
68824: GO 68778
68826: POP
68827: POP
// if birds then
68828: LD_VAR 0 1
68832: IFFALSE 68899
// for i = 1 to birds do
68834: LD_ADDR_VAR 0 11
68838: PUSH
68839: DOUBLE
68840: LD_INT 1
68842: DEC
68843: ST_TO_ADDR
68844: LD_VAR 0 1
68848: PUSH
68849: FOR_TO
68850: IFFALSE 68897
// begin hc_class := 18 ;
68852: LD_ADDR_OWVAR 28
68856: PUSH
68857: LD_INT 18
68859: ST_TO_ADDR
// hc_gallery =  ;
68860: LD_ADDR_OWVAR 33
68864: PUSH
68865: LD_STRING 
68867: ST_TO_ADDR
// animal := CreateHuman ;
68868: LD_ADDR_VAR 0 12
68872: PUSH
68873: CALL_OW 44
68877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68878: LD_VAR 0 12
68882: PPUSH
68883: LD_VAR 0 8
68887: PPUSH
68888: LD_INT 0
68890: PPUSH
68891: CALL 70899 0 3
// end ;
68895: GO 68849
68897: POP
68898: POP
// if tigers then
68899: LD_VAR 0 2
68903: IFFALSE 68987
// for i = 1 to tigers do
68905: LD_ADDR_VAR 0 11
68909: PUSH
68910: DOUBLE
68911: LD_INT 1
68913: DEC
68914: ST_TO_ADDR
68915: LD_VAR 0 2
68919: PUSH
68920: FOR_TO
68921: IFFALSE 68985
// begin hc_class = class_tiger ;
68923: LD_ADDR_OWVAR 28
68927: PUSH
68928: LD_INT 14
68930: ST_TO_ADDR
// hc_gallery =  ;
68931: LD_ADDR_OWVAR 33
68935: PUSH
68936: LD_STRING 
68938: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68939: LD_ADDR_OWVAR 35
68943: PUSH
68944: LD_INT 7
68946: NEG
68947: PPUSH
68948: LD_INT 7
68950: PPUSH
68951: CALL_OW 12
68955: ST_TO_ADDR
// animal := CreateHuman ;
68956: LD_ADDR_VAR 0 12
68960: PUSH
68961: CALL_OW 44
68965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68966: LD_VAR 0 12
68970: PPUSH
68971: LD_VAR 0 8
68975: PPUSH
68976: LD_INT 0
68978: PPUSH
68979: CALL 70899 0 3
// end ;
68983: GO 68920
68985: POP
68986: POP
// if apemans then
68987: LD_VAR 0 3
68991: IFFALSE 69114
// for i = 1 to apemans do
68993: LD_ADDR_VAR 0 11
68997: PUSH
68998: DOUBLE
68999: LD_INT 1
69001: DEC
69002: ST_TO_ADDR
69003: LD_VAR 0 3
69007: PUSH
69008: FOR_TO
69009: IFFALSE 69112
// begin hc_class = class_apeman ;
69011: LD_ADDR_OWVAR 28
69015: PUSH
69016: LD_INT 12
69018: ST_TO_ADDR
// hc_gallery =  ;
69019: LD_ADDR_OWVAR 33
69023: PUSH
69024: LD_STRING 
69026: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69027: LD_ADDR_OWVAR 35
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PPUSH
69036: LD_INT 2
69038: PPUSH
69039: CALL_OW 12
69043: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69044: LD_ADDR_OWVAR 31
69048: PUSH
69049: LD_INT 1
69051: PPUSH
69052: LD_INT 3
69054: PPUSH
69055: CALL_OW 12
69059: PUSH
69060: LD_INT 1
69062: PPUSH
69063: LD_INT 3
69065: PPUSH
69066: CALL_OW 12
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: ST_TO_ADDR
// animal := CreateHuman ;
69083: LD_ADDR_VAR 0 12
69087: PUSH
69088: CALL_OW 44
69092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69093: LD_VAR 0 12
69097: PPUSH
69098: LD_VAR 0 8
69102: PPUSH
69103: LD_INT 0
69105: PPUSH
69106: CALL 70899 0 3
// end ;
69110: GO 69008
69112: POP
69113: POP
// if enchidnas then
69114: LD_VAR 0 4
69118: IFFALSE 69185
// for i = 1 to enchidnas do
69120: LD_ADDR_VAR 0 11
69124: PUSH
69125: DOUBLE
69126: LD_INT 1
69128: DEC
69129: ST_TO_ADDR
69130: LD_VAR 0 4
69134: PUSH
69135: FOR_TO
69136: IFFALSE 69183
// begin hc_class = 13 ;
69138: LD_ADDR_OWVAR 28
69142: PUSH
69143: LD_INT 13
69145: ST_TO_ADDR
// hc_gallery =  ;
69146: LD_ADDR_OWVAR 33
69150: PUSH
69151: LD_STRING 
69153: ST_TO_ADDR
// animal := CreateHuman ;
69154: LD_ADDR_VAR 0 12
69158: PUSH
69159: CALL_OW 44
69163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69164: LD_VAR 0 12
69168: PPUSH
69169: LD_VAR 0 8
69173: PPUSH
69174: LD_INT 0
69176: PPUSH
69177: CALL 70899 0 3
// end ;
69181: GO 69135
69183: POP
69184: POP
// if fishes then
69185: LD_VAR 0 7
69189: IFFALSE 69256
// for i = 1 to fishes do
69191: LD_ADDR_VAR 0 11
69195: PUSH
69196: DOUBLE
69197: LD_INT 1
69199: DEC
69200: ST_TO_ADDR
69201: LD_VAR 0 7
69205: PUSH
69206: FOR_TO
69207: IFFALSE 69254
// begin hc_class = 20 ;
69209: LD_ADDR_OWVAR 28
69213: PUSH
69214: LD_INT 20
69216: ST_TO_ADDR
// hc_gallery =  ;
69217: LD_ADDR_OWVAR 33
69221: PUSH
69222: LD_STRING 
69224: ST_TO_ADDR
// animal := CreateHuman ;
69225: LD_ADDR_VAR 0 12
69229: PUSH
69230: CALL_OW 44
69234: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69235: LD_VAR 0 12
69239: PPUSH
69240: LD_VAR 0 9
69244: PPUSH
69245: LD_INT 0
69247: PPUSH
69248: CALL 70899 0 3
// end ;
69252: GO 69206
69254: POP
69255: POP
// end ;
69256: LD_VAR 0 10
69260: RET
// export function WantHeal ( sci , unit ) ; begin
69261: LD_INT 0
69263: PPUSH
// if GetTaskList ( sci ) > 0 then
69264: LD_VAR 0 1
69268: PPUSH
69269: CALL_OW 437
69273: PUSH
69274: LD_INT 0
69276: GREATER
69277: IFFALSE 69349
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69279: LD_VAR 0 1
69283: PPUSH
69284: CALL_OW 437
69288: PUSH
69289: LD_INT 1
69291: ARRAY
69292: PUSH
69293: LD_INT 1
69295: ARRAY
69296: PUSH
69297: LD_STRING l
69299: EQUAL
69300: IFFALSE 69327
69302: PUSH
69303: LD_VAR 0 1
69307: PPUSH
69308: CALL_OW 437
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PUSH
69317: LD_INT 4
69319: ARRAY
69320: PUSH
69321: LD_VAR 0 2
69325: EQUAL
69326: AND
69327: IFFALSE 69339
// result := true else
69329: LD_ADDR_VAR 0 3
69333: PUSH
69334: LD_INT 1
69336: ST_TO_ADDR
69337: GO 69347
// result := false ;
69339: LD_ADDR_VAR 0 3
69343: PUSH
69344: LD_INT 0
69346: ST_TO_ADDR
// end else
69347: GO 69357
// result := false ;
69349: LD_ADDR_VAR 0 3
69353: PUSH
69354: LD_INT 0
69356: ST_TO_ADDR
// end ;
69357: LD_VAR 0 3
69361: RET
// export function HealTarget ( sci ) ; begin
69362: LD_INT 0
69364: PPUSH
// if not sci then
69365: LD_VAR 0 1
69369: NOT
69370: IFFALSE 69374
// exit ;
69372: GO 69439
// result := 0 ;
69374: LD_ADDR_VAR 0 2
69378: PUSH
69379: LD_INT 0
69381: ST_TO_ADDR
// if GetTaskList ( sci ) then
69382: LD_VAR 0 1
69386: PPUSH
69387: CALL_OW 437
69391: IFFALSE 69439
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69393: LD_VAR 0 1
69397: PPUSH
69398: CALL_OW 437
69402: PUSH
69403: LD_INT 1
69405: ARRAY
69406: PUSH
69407: LD_INT 1
69409: ARRAY
69410: PUSH
69411: LD_STRING l
69413: EQUAL
69414: IFFALSE 69439
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69416: LD_ADDR_VAR 0 2
69420: PUSH
69421: LD_VAR 0 1
69425: PPUSH
69426: CALL_OW 437
69430: PUSH
69431: LD_INT 1
69433: ARRAY
69434: PUSH
69435: LD_INT 4
69437: ARRAY
69438: ST_TO_ADDR
// end ;
69439: LD_VAR 0 2
69443: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69444: LD_INT 0
69446: PPUSH
69447: PPUSH
69448: PPUSH
69449: PPUSH
// if not base_units then
69450: LD_VAR 0 1
69454: NOT
69455: IFFALSE 69459
// exit ;
69457: GO 69546
// result := false ;
69459: LD_ADDR_VAR 0 2
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69467: LD_ADDR_VAR 0 5
69471: PUSH
69472: LD_VAR 0 1
69476: PPUSH
69477: LD_INT 21
69479: PUSH
69480: LD_INT 3
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PPUSH
69487: CALL_OW 72
69491: ST_TO_ADDR
// if not tmp then
69492: LD_VAR 0 5
69496: NOT
69497: IFFALSE 69501
// exit ;
69499: GO 69546
// for i in tmp do
69501: LD_ADDR_VAR 0 3
69505: PUSH
69506: LD_VAR 0 5
69510: PUSH
69511: FOR_IN
69512: IFFALSE 69544
// begin result := EnemyInRange ( i , 22 ) ;
69514: LD_ADDR_VAR 0 2
69518: PUSH
69519: LD_VAR 0 3
69523: PPUSH
69524: LD_INT 22
69526: PPUSH
69527: CALL 66971 0 2
69531: ST_TO_ADDR
// if result then
69532: LD_VAR 0 2
69536: IFFALSE 69542
// exit ;
69538: POP
69539: POP
69540: GO 69546
// end ;
69542: GO 69511
69544: POP
69545: POP
// end ;
69546: LD_VAR 0 2
69550: RET
// export function FilterByTag ( units , tag ) ; begin
69551: LD_INT 0
69553: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69554: LD_ADDR_VAR 0 3
69558: PUSH
69559: LD_VAR 0 1
69563: PPUSH
69564: LD_INT 120
69566: PUSH
69567: LD_VAR 0 2
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PPUSH
69576: CALL_OW 72
69580: ST_TO_ADDR
// end ;
69581: LD_VAR 0 3
69585: RET
// export function IsDriver ( un ) ; begin
69586: LD_INT 0
69588: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69589: LD_ADDR_VAR 0 2
69593: PUSH
69594: LD_VAR 0 1
69598: PUSH
69599: LD_INT 55
69601: PUSH
69602: EMPTY
69603: LIST
69604: PPUSH
69605: CALL_OW 69
69609: IN
69610: ST_TO_ADDR
// end ;
69611: LD_VAR 0 2
69615: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69616: LD_INT 0
69618: PPUSH
69619: PPUSH
// list := [ ] ;
69620: LD_ADDR_VAR 0 5
69624: PUSH
69625: EMPTY
69626: ST_TO_ADDR
// case d of 0 :
69627: LD_VAR 0 3
69631: PUSH
69632: LD_INT 0
69634: DOUBLE
69635: EQUAL
69636: IFTRUE 69640
69638: GO 69773
69640: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69641: LD_ADDR_VAR 0 5
69645: PUSH
69646: LD_VAR 0 1
69650: PUSH
69651: LD_INT 4
69653: MINUS
69654: PUSH
69655: LD_VAR 0 2
69659: PUSH
69660: LD_INT 4
69662: MINUS
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: LD_VAR 0 1
69676: PUSH
69677: LD_INT 3
69679: MINUS
69680: PUSH
69681: LD_VAR 0 2
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: PUSH
69699: LD_INT 4
69701: PLUS
69702: PUSH
69703: LD_VAR 0 2
69707: PUSH
69708: LD_INT 4
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: LIST
69715: PUSH
69716: LD_VAR 0 1
69720: PUSH
69721: LD_INT 3
69723: PLUS
69724: PUSH
69725: LD_VAR 0 2
69729: PUSH
69730: LD_INT 3
69732: PLUS
69733: PUSH
69734: LD_INT 5
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: PUSH
69742: LD_VAR 0 1
69746: PUSH
69747: LD_VAR 0 2
69751: PUSH
69752: LD_INT 4
69754: PLUS
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: ST_TO_ADDR
// end ; 1 :
69771: GO 70471
69773: LD_INT 1
69775: DOUBLE
69776: EQUAL
69777: IFTRUE 69781
69779: GO 69914
69781: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69782: LD_ADDR_VAR 0 5
69786: PUSH
69787: LD_VAR 0 1
69791: PUSH
69792: LD_VAR 0 2
69796: PUSH
69797: LD_INT 4
69799: MINUS
69800: PUSH
69801: LD_INT 3
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: LIST
69808: PUSH
69809: LD_VAR 0 1
69813: PUSH
69814: LD_INT 3
69816: MINUS
69817: PUSH
69818: LD_VAR 0 2
69822: PUSH
69823: LD_INT 3
69825: MINUS
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: LIST
69834: PUSH
69835: LD_VAR 0 1
69839: PUSH
69840: LD_INT 4
69842: MINUS
69843: PUSH
69844: LD_VAR 0 2
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: PUSH
69857: LD_VAR 0 1
69861: PUSH
69862: LD_VAR 0 2
69866: PUSH
69867: LD_INT 3
69869: PLUS
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 1
69883: PUSH
69884: LD_INT 4
69886: PLUS
69887: PUSH
69888: LD_VAR 0 2
69892: PUSH
69893: LD_INT 4
69895: PLUS
69896: PUSH
69897: LD_INT 5
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: LIST
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// end ; 2 :
69912: GO 70471
69914: LD_INT 2
69916: DOUBLE
69917: EQUAL
69918: IFTRUE 69922
69920: GO 70051
69922: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69923: LD_ADDR_VAR 0 5
69927: PUSH
69928: LD_VAR 0 1
69932: PUSH
69933: LD_VAR 0 2
69937: PUSH
69938: LD_INT 3
69940: MINUS
69941: PUSH
69942: LD_INT 3
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: LIST
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_INT 4
69957: PLUS
69958: PUSH
69959: LD_VAR 0 2
69963: PUSH
69964: LD_INT 4
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: LD_VAR 0 1
69976: PUSH
69977: LD_VAR 0 2
69981: PUSH
69982: LD_INT 4
69984: PLUS
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_INT 3
70001: MINUS
70002: PUSH
70003: LD_VAR 0 2
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: LD_INT 4
70023: MINUS
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 4
70032: MINUS
70033: PUSH
70034: LD_INT 2
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: ST_TO_ADDR
// end ; 3 :
70049: GO 70471
70051: LD_INT 3
70053: DOUBLE
70054: EQUAL
70055: IFTRUE 70059
70057: GO 70192
70059: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70060: LD_ADDR_VAR 0 5
70064: PUSH
70065: LD_VAR 0 1
70069: PUSH
70070: LD_INT 3
70072: PLUS
70073: PUSH
70074: LD_VAR 0 2
70078: PUSH
70079: LD_INT 4
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: LIST
70086: PUSH
70087: LD_VAR 0 1
70091: PUSH
70092: LD_INT 4
70094: PLUS
70095: PUSH
70096: LD_VAR 0 2
70100: PUSH
70101: LD_INT 4
70103: PLUS
70104: PUSH
70105: LD_INT 5
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: PUSH
70113: LD_VAR 0 1
70117: PUSH
70118: LD_INT 4
70120: MINUS
70121: PUSH
70122: LD_VAR 0 2
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 1
70139: PUSH
70140: LD_VAR 0 2
70144: PUSH
70145: LD_INT 4
70147: MINUS
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_VAR 0 1
70161: PUSH
70162: LD_INT 3
70164: MINUS
70165: PUSH
70166: LD_VAR 0 2
70170: PUSH
70171: LD_INT 3
70173: MINUS
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: ST_TO_ADDR
// end ; 4 :
70190: GO 70471
70192: LD_INT 4
70194: DOUBLE
70195: EQUAL
70196: IFTRUE 70200
70198: GO 70333
70200: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70201: LD_ADDR_VAR 0 5
70205: PUSH
70206: LD_VAR 0 1
70210: PUSH
70211: LD_VAR 0 2
70215: PUSH
70216: LD_INT 4
70218: PLUS
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: LIST
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: LD_INT 3
70235: PLUS
70236: PUSH
70237: LD_VAR 0 2
70241: PUSH
70242: LD_INT 3
70244: PLUS
70245: PUSH
70246: LD_INT 5
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: PUSH
70254: LD_VAR 0 1
70258: PUSH
70259: LD_INT 4
70261: PLUS
70262: PUSH
70263: LD_VAR 0 2
70267: PUSH
70268: LD_INT 4
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: PUSH
70276: LD_VAR 0 1
70280: PUSH
70281: LD_VAR 0 2
70285: PUSH
70286: LD_INT 3
70288: MINUS
70289: PUSH
70290: LD_INT 3
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: LD_INT 4
70305: MINUS
70306: PUSH
70307: LD_VAR 0 2
70311: PUSH
70312: LD_INT 4
70314: MINUS
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: LIST
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: ST_TO_ADDR
// end ; 5 :
70331: GO 70471
70333: LD_INT 5
70335: DOUBLE
70336: EQUAL
70337: IFTRUE 70341
70339: GO 70470
70341: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70342: LD_ADDR_VAR 0 5
70346: PUSH
70347: LD_VAR 0 1
70351: PUSH
70352: LD_INT 4
70354: MINUS
70355: PUSH
70356: LD_VAR 0 2
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: LIST
70368: PUSH
70369: LD_VAR 0 1
70373: PUSH
70374: LD_VAR 0 2
70378: PUSH
70379: LD_INT 4
70381: MINUS
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: PUSH
70391: LD_VAR 0 1
70395: PUSH
70396: LD_INT 4
70398: PLUS
70399: PUSH
70400: LD_VAR 0 2
70404: PUSH
70405: LD_INT 4
70407: PLUS
70408: PUSH
70409: LD_INT 5
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: PUSH
70417: LD_VAR 0 1
70421: PUSH
70422: LD_INT 3
70424: PLUS
70425: PUSH
70426: LD_VAR 0 2
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: LIST
70438: PUSH
70439: LD_VAR 0 1
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: LD_INT 3
70451: PLUS
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// end ; end ;
70468: GO 70471
70470: POP
// result := list ;
70471: LD_ADDR_VAR 0 4
70475: PUSH
70476: LD_VAR 0 5
70480: ST_TO_ADDR
// end ;
70481: LD_VAR 0 4
70485: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
70490: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70491: LD_VAR 0 1
70495: NOT
70496: IFTRUE 70524
70498: PUSH
70499: LD_VAR 0 2
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 3
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: IN
70522: NOT
70523: OR
70524: IFFALSE 70528
// exit ;
70526: GO 70611
// tmp := [ ] ;
70528: LD_ADDR_VAR 0 5
70532: PUSH
70533: EMPTY
70534: ST_TO_ADDR
// for i in units do
70535: LD_ADDR_VAR 0 4
70539: PUSH
70540: LD_VAR 0 1
70544: PUSH
70545: FOR_IN
70546: IFFALSE 70580
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70548: LD_ADDR_VAR 0 5
70552: PUSH
70553: LD_VAR 0 5
70557: PPUSH
70558: LD_VAR 0 4
70562: PPUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: CALL_OW 259
70572: PPUSH
70573: CALL 72006 0 2
70577: ST_TO_ADDR
70578: GO 70545
70580: POP
70581: POP
// if not tmp then
70582: LD_VAR 0 5
70586: NOT
70587: IFFALSE 70591
// exit ;
70589: GO 70611
// result := SortListByListDesc ( units , tmp ) ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: LD_VAR 0 5
70605: PPUSH
70606: CALL_OW 77
70610: ST_TO_ADDR
// end ;
70611: LD_VAR 0 3
70615: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70616: LD_INT 0
70618: PPUSH
70619: PPUSH
70620: PPUSH
// result := false ;
70621: LD_ADDR_VAR 0 3
70625: PUSH
70626: LD_INT 0
70628: ST_TO_ADDR
// if not building then
70629: LD_VAR 0 2
70633: NOT
70634: IFFALSE 70638
// exit ;
70636: GO 70782
// x := GetX ( building ) ;
70638: LD_ADDR_VAR 0 4
70642: PUSH
70643: LD_VAR 0 2
70647: PPUSH
70648: CALL_OW 250
70652: ST_TO_ADDR
// y := GetY ( building ) ;
70653: LD_ADDR_VAR 0 5
70657: PUSH
70658: LD_VAR 0 2
70662: PPUSH
70663: CALL_OW 251
70667: ST_TO_ADDR
// if not x or not y then
70668: LD_VAR 0 4
70672: NOT
70673: IFTRUE 70682
70675: PUSH
70676: LD_VAR 0 5
70680: NOT
70681: OR
70682: IFFALSE 70686
// exit ;
70684: GO 70782
// if GetTaskList ( unit ) then
70686: LD_VAR 0 1
70690: PPUSH
70691: CALL_OW 437
70695: IFFALSE 70782
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70697: LD_STRING e
70699: PUSH
70700: LD_VAR 0 1
70704: PPUSH
70705: CALL_OW 437
70709: PUSH
70710: LD_INT 1
70712: ARRAY
70713: PUSH
70714: LD_INT 1
70716: ARRAY
70717: EQUAL
70718: IFFALSE 70745
70720: PUSH
70721: LD_VAR 0 4
70725: PUSH
70726: LD_VAR 0 1
70730: PPUSH
70731: CALL_OW 437
70735: PUSH
70736: LD_INT 1
70738: ARRAY
70739: PUSH
70740: LD_INT 2
70742: ARRAY
70743: EQUAL
70744: AND
70745: IFFALSE 70772
70747: PUSH
70748: LD_VAR 0 5
70752: PUSH
70753: LD_VAR 0 1
70757: PPUSH
70758: CALL_OW 437
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: PUSH
70767: LD_INT 3
70769: ARRAY
70770: EQUAL
70771: AND
70772: IFFALSE 70782
// result := true end ;
70774: LD_ADDR_VAR 0 3
70778: PUSH
70779: LD_INT 1
70781: ST_TO_ADDR
// end ;
70782: LD_VAR 0 3
70786: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70787: LD_INT 0
70789: PPUSH
// result := false ;
70790: LD_ADDR_VAR 0 4
70794: PUSH
70795: LD_INT 0
70797: ST_TO_ADDR
// if GetTaskList ( unit ) then
70798: LD_VAR 0 1
70802: PPUSH
70803: CALL_OW 437
70807: IFFALSE 70894
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70809: LD_STRING M
70811: PUSH
70812: LD_VAR 0 1
70816: PPUSH
70817: CALL_OW 437
70821: PUSH
70822: LD_INT 1
70824: ARRAY
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: EQUAL
70830: IFFALSE 70857
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: LD_VAR 0 1
70842: PPUSH
70843: CALL_OW 437
70847: PUSH
70848: LD_INT 1
70850: ARRAY
70851: PUSH
70852: LD_INT 2
70854: ARRAY
70855: EQUAL
70856: AND
70857: IFFALSE 70884
70859: PUSH
70860: LD_VAR 0 3
70864: PUSH
70865: LD_VAR 0 1
70869: PPUSH
70870: CALL_OW 437
70874: PUSH
70875: LD_INT 1
70877: ARRAY
70878: PUSH
70879: LD_INT 3
70881: ARRAY
70882: EQUAL
70883: AND
70884: IFFALSE 70894
// result := true ;
70886: LD_ADDR_VAR 0 4
70890: PUSH
70891: LD_INT 1
70893: ST_TO_ADDR
// end ; end ;
70894: LD_VAR 0 4
70898: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70899: LD_INT 0
70901: PPUSH
70902: PPUSH
70903: PPUSH
70904: PPUSH
// if not unit or not area then
70905: LD_VAR 0 1
70909: NOT
70910: IFTRUE 70919
70912: PUSH
70913: LD_VAR 0 2
70917: NOT
70918: OR
70919: IFFALSE 70923
// exit ;
70921: GO 71099
// tmp := AreaToList ( area , i ) ;
70923: LD_ADDR_VAR 0 6
70927: PUSH
70928: LD_VAR 0 2
70932: PPUSH
70933: LD_VAR 0 5
70937: PPUSH
70938: CALL_OW 517
70942: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: DOUBLE
70949: LD_INT 1
70951: DEC
70952: ST_TO_ADDR
70953: LD_VAR 0 6
70957: PUSH
70958: LD_INT 1
70960: ARRAY
70961: PUSH
70962: FOR_TO
70963: IFFALSE 71097
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70965: LD_ADDR_VAR 0 7
70969: PUSH
70970: LD_VAR 0 6
70974: PUSH
70975: LD_INT 1
70977: ARRAY
70978: PUSH
70979: LD_VAR 0 5
70983: ARRAY
70984: PUSH
70985: LD_VAR 0 6
70989: PUSH
70990: LD_INT 2
70992: ARRAY
70993: PUSH
70994: LD_VAR 0 5
70998: ARRAY
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71004: LD_INT 92
71006: PUSH
71007: LD_VAR 0 7
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PUSH
71016: LD_VAR 0 7
71020: PUSH
71021: LD_INT 2
71023: ARRAY
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: PPUSH
71034: CALL_OW 69
71038: PUSH
71039: LD_INT 0
71041: EQUAL
71042: IFFALSE 71095
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71044: LD_VAR 0 1
71048: PPUSH
71049: LD_VAR 0 7
71053: PUSH
71054: LD_INT 1
71056: ARRAY
71057: PPUSH
71058: LD_VAR 0 7
71062: PUSH
71063: LD_INT 2
71065: ARRAY
71066: PPUSH
71067: LD_VAR 0 3
71071: PPUSH
71072: CALL_OW 48
// result := IsPlaced ( unit ) ;
71076: LD_ADDR_VAR 0 4
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: CALL_OW 305
71090: ST_TO_ADDR
// exit ;
71091: POP
71092: POP
71093: GO 71099
// end ; end ;
71095: GO 70962
71097: POP
71098: POP
// end ;
71099: LD_VAR 0 4
71103: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71104: LD_INT 0
71106: PPUSH
71107: PPUSH
71108: PPUSH
// if not side or side > 8 then
71109: LD_VAR 0 1
71113: NOT
71114: IFTRUE 71126
71116: PUSH
71117: LD_VAR 0 1
71121: PUSH
71122: LD_INT 8
71124: GREATER
71125: OR
71126: IFFALSE 71130
// exit ;
71128: GO 71317
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71130: LD_ADDR_VAR 0 4
71134: PUSH
71135: LD_INT 22
71137: PUSH
71138: LD_VAR 0 1
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 21
71149: PUSH
71150: LD_INT 3
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PPUSH
71161: CALL_OW 69
71165: ST_TO_ADDR
// if not tmp then
71166: LD_VAR 0 4
71170: NOT
71171: IFFALSE 71175
// exit ;
71173: GO 71317
// enable_addtolog := true ;
71175: LD_ADDR_OWVAR 81
71179: PUSH
71180: LD_INT 1
71182: ST_TO_ADDR
// AddToLog ( [ ) ;
71183: LD_STRING [
71185: PPUSH
71186: CALL_OW 561
// for i in tmp do
71190: LD_ADDR_VAR 0 3
71194: PUSH
71195: LD_VAR 0 4
71199: PUSH
71200: FOR_IN
71201: IFFALSE 71308
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71203: LD_STRING [
71205: PUSH
71206: LD_VAR 0 3
71210: PPUSH
71211: CALL_OW 266
71215: STR
71216: PUSH
71217: LD_STRING , 
71219: STR
71220: PUSH
71221: LD_VAR 0 3
71225: PPUSH
71226: CALL_OW 250
71230: STR
71231: PUSH
71232: LD_STRING , 
71234: STR
71235: PUSH
71236: LD_VAR 0 3
71240: PPUSH
71241: CALL_OW 251
71245: STR
71246: PUSH
71247: LD_STRING , 
71249: STR
71250: PUSH
71251: LD_VAR 0 3
71255: PPUSH
71256: CALL_OW 254
71260: STR
71261: PUSH
71262: LD_STRING , 
71264: STR
71265: PUSH
71266: LD_VAR 0 3
71270: PPUSH
71271: LD_INT 1
71273: PPUSH
71274: CALL_OW 268
71278: STR
71279: PUSH
71280: LD_STRING , 
71282: STR
71283: PUSH
71284: LD_VAR 0 3
71288: PPUSH
71289: LD_INT 2
71291: PPUSH
71292: CALL_OW 268
71296: STR
71297: PUSH
71298: LD_STRING ],
71300: STR
71301: PPUSH
71302: CALL_OW 561
// end ;
71306: GO 71200
71308: POP
71309: POP
// AddToLog ( ]; ) ;
71310: LD_STRING ];
71312: PPUSH
71313: CALL_OW 561
// end ;
71317: LD_VAR 0 2
71321: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71322: LD_INT 0
71324: PPUSH
71325: PPUSH
71326: PPUSH
71327: PPUSH
71328: PPUSH
// if not area or not rate or not max then
71329: LD_VAR 0 1
71333: NOT
71334: IFTRUE 71343
71336: PUSH
71337: LD_VAR 0 2
71341: NOT
71342: OR
71343: IFTRUE 71352
71345: PUSH
71346: LD_VAR 0 4
71350: NOT
71351: OR
71352: IFFALSE 71356
// exit ;
71354: GO 71545
// while 1 do
71356: LD_INT 1
71358: IFFALSE 71545
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71360: LD_ADDR_VAR 0 9
71364: PUSH
71365: LD_VAR 0 1
71369: PPUSH
71370: LD_INT 1
71372: PPUSH
71373: CALL_OW 287
71377: PUSH
71378: LD_INT 10
71380: MUL
71381: ST_TO_ADDR
// r := rate / 10 ;
71382: LD_ADDR_VAR 0 7
71386: PUSH
71387: LD_VAR 0 2
71391: PUSH
71392: LD_INT 10
71394: DIVREAL
71395: ST_TO_ADDR
// time := 1 1$00 ;
71396: LD_ADDR_VAR 0 8
71400: PUSH
71401: LD_INT 2100
71403: ST_TO_ADDR
// if amount < min then
71404: LD_VAR 0 9
71408: PUSH
71409: LD_VAR 0 3
71413: LESS
71414: IFFALSE 71432
// r := r * 2 else
71416: LD_ADDR_VAR 0 7
71420: PUSH
71421: LD_VAR 0 7
71425: PUSH
71426: LD_INT 2
71428: MUL
71429: ST_TO_ADDR
71430: GO 71458
// if amount > max then
71432: LD_VAR 0 9
71436: PUSH
71437: LD_VAR 0 4
71441: GREATER
71442: IFFALSE 71458
// r := r / 2 ;
71444: LD_ADDR_VAR 0 7
71448: PUSH
71449: LD_VAR 0 7
71453: PUSH
71454: LD_INT 2
71456: DIVREAL
71457: ST_TO_ADDR
// time := time / r ;
71458: LD_ADDR_VAR 0 8
71462: PUSH
71463: LD_VAR 0 8
71467: PUSH
71468: LD_VAR 0 7
71472: DIVREAL
71473: ST_TO_ADDR
// if time < 0 then
71474: LD_VAR 0 8
71478: PUSH
71479: LD_INT 0
71481: LESS
71482: IFFALSE 71499
// time := time * - 1 ;
71484: LD_ADDR_VAR 0 8
71488: PUSH
71489: LD_VAR 0 8
71493: PUSH
71494: LD_INT 1
71496: NEG
71497: MUL
71498: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71499: LD_VAR 0 8
71503: PUSH
71504: LD_INT 35
71506: PPUSH
71507: LD_INT 875
71509: PPUSH
71510: CALL_OW 12
71514: PLUS
71515: PPUSH
71516: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71520: LD_INT 1
71522: PPUSH
71523: LD_INT 5
71525: PPUSH
71526: CALL_OW 12
71530: PPUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: LD_INT 1
71538: PPUSH
71539: CALL_OW 55
// end ;
71543: GO 71356
// end ;
71545: LD_VAR 0 5
71549: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71550: LD_INT 0
71552: PPUSH
71553: PPUSH
71554: PPUSH
71555: PPUSH
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
// if not turrets or not factories then
71560: LD_VAR 0 1
71564: NOT
71565: IFTRUE 71574
71567: PUSH
71568: LD_VAR 0 2
71572: NOT
71573: OR
71574: IFFALSE 71578
// exit ;
71576: GO 71885
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71578: LD_ADDR_VAR 0 10
71582: PUSH
71583: LD_INT 5
71585: PUSH
71586: LD_INT 6
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 4
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 3
71605: PUSH
71606: LD_INT 5
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 24
71620: PUSH
71621: LD_INT 25
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 23
71630: PUSH
71631: LD_INT 27
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 42
71644: PUSH
71645: LD_INT 43
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 44
71654: PUSH
71655: LD_INT 46
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 45
71664: PUSH
71665: LD_INT 47
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: LIST
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: LIST
71681: ST_TO_ADDR
// result := [ ] ;
71682: LD_ADDR_VAR 0 3
71686: PUSH
71687: EMPTY
71688: ST_TO_ADDR
// for i in turrets do
71689: LD_ADDR_VAR 0 4
71693: PUSH
71694: LD_VAR 0 1
71698: PUSH
71699: FOR_IN
71700: IFFALSE 71883
// begin nat := GetNation ( i ) ;
71702: LD_ADDR_VAR 0 7
71706: PUSH
71707: LD_VAR 0 4
71711: PPUSH
71712: CALL_OW 248
71716: ST_TO_ADDR
// weapon := 0 ;
71717: LD_ADDR_VAR 0 8
71721: PUSH
71722: LD_INT 0
71724: ST_TO_ADDR
// if not nat then
71725: LD_VAR 0 7
71729: NOT
71730: IFFALSE 71734
// continue ;
71732: GO 71699
// for j in list [ nat ] do
71734: LD_ADDR_VAR 0 5
71738: PUSH
71739: LD_VAR 0 10
71743: PUSH
71744: LD_VAR 0 7
71748: ARRAY
71749: PUSH
71750: FOR_IN
71751: IFFALSE 71792
// if GetBWeapon ( i ) = j [ 1 ] then
71753: LD_VAR 0 4
71757: PPUSH
71758: CALL_OW 269
71762: PUSH
71763: LD_VAR 0 5
71767: PUSH
71768: LD_INT 1
71770: ARRAY
71771: EQUAL
71772: IFFALSE 71790
// begin weapon := j [ 2 ] ;
71774: LD_ADDR_VAR 0 8
71778: PUSH
71779: LD_VAR 0 5
71783: PUSH
71784: LD_INT 2
71786: ARRAY
71787: ST_TO_ADDR
// break ;
71788: GO 71792
// end ;
71790: GO 71750
71792: POP
71793: POP
// if not weapon then
71794: LD_VAR 0 8
71798: NOT
71799: IFFALSE 71803
// continue ;
71801: GO 71699
// for k in factories do
71803: LD_ADDR_VAR 0 6
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: FOR_IN
71814: IFFALSE 71879
// begin weapons := AvailableWeaponList ( k ) ;
71816: LD_ADDR_VAR 0 9
71820: PUSH
71821: LD_VAR 0 6
71825: PPUSH
71826: CALL_OW 478
71830: ST_TO_ADDR
// if not weapons then
71831: LD_VAR 0 9
71835: NOT
71836: IFFALSE 71840
// continue ;
71838: GO 71813
// if weapon in weapons then
71840: LD_VAR 0 8
71844: PUSH
71845: LD_VAR 0 9
71849: IN
71850: IFFALSE 71877
// begin result := [ i , weapon ] ;
71852: LD_ADDR_VAR 0 3
71856: PUSH
71857: LD_VAR 0 4
71861: PUSH
71862: LD_VAR 0 8
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: ST_TO_ADDR
// exit ;
71871: POP
71872: POP
71873: POP
71874: POP
71875: GO 71885
// end ; end ;
71877: GO 71813
71879: POP
71880: POP
// end ;
71881: GO 71699
71883: POP
71884: POP
// end ;
71885: LD_VAR 0 3
71889: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71890: LD_INT 0
71892: PPUSH
// if not side or side > 8 then
71893: LD_VAR 0 3
71897: NOT
71898: IFTRUE 71910
71900: PUSH
71901: LD_VAR 0 3
71905: PUSH
71906: LD_INT 8
71908: GREATER
71909: OR
71910: IFFALSE 71914
// exit ;
71912: GO 71973
// if not range then
71914: LD_VAR 0 4
71918: NOT
71919: IFFALSE 71930
// range := - 12 ;
71921: LD_ADDR_VAR 0 4
71925: PUSH
71926: LD_INT 12
71928: NEG
71929: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71930: LD_VAR 0 1
71934: PPUSH
71935: LD_VAR 0 2
71939: PPUSH
71940: LD_VAR 0 3
71944: PPUSH
71945: LD_VAR 0 4
71949: PPUSH
71950: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71954: LD_VAR 0 1
71958: PPUSH
71959: LD_VAR 0 2
71963: PPUSH
71964: LD_VAR 0 3
71968: PPUSH
71969: CALL_OW 331
// end ;
71973: LD_VAR 0 5
71977: RET
// export function Video ( mode ) ; begin
71978: LD_INT 0
71980: PPUSH
// ingame_video = mode ;
71981: LD_ADDR_OWVAR 52
71985: PUSH
71986: LD_VAR 0 1
71990: ST_TO_ADDR
// interface_hidden = mode ;
71991: LD_ADDR_OWVAR 54
71995: PUSH
71996: LD_VAR 0 1
72000: ST_TO_ADDR
// end ;
72001: LD_VAR 0 2
72005: RET
// export function Join ( array , element ) ; begin
72006: LD_INT 0
72008: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: LD_VAR 0 1
72018: PPUSH
72019: LD_VAR 0 1
72023: PUSH
72024: LD_INT 1
72026: PLUS
72027: PPUSH
72028: LD_VAR 0 2
72032: PPUSH
72033: CALL_OW 1
72037: ST_TO_ADDR
// end ;
72038: LD_VAR 0 3
72042: RET
// export function JoinUnion ( array , element ) ; begin
72043: LD_INT 0
72045: PPUSH
// result := array union element ;
72046: LD_ADDR_VAR 0 3
72050: PUSH
72051: LD_VAR 0 1
72055: PUSH
72056: LD_VAR 0 2
72060: UNION
72061: ST_TO_ADDR
// end ;
72062: LD_VAR 0 3
72066: RET
// export function GetBehemoths ( side ) ; begin
72067: LD_INT 0
72069: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72070: LD_ADDR_VAR 0 2
72074: PUSH
72075: LD_INT 22
72077: PUSH
72078: LD_VAR 0 1
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 31
72089: PUSH
72090: LD_INT 25
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PPUSH
72101: CALL_OW 69
72105: ST_TO_ADDR
// end ;
72106: LD_VAR 0 2
72110: RET
// export function Shuffle ( array ) ; var i , index ; begin
72111: LD_INT 0
72113: PPUSH
72114: PPUSH
72115: PPUSH
// result := [ ] ;
72116: LD_ADDR_VAR 0 2
72120: PUSH
72121: EMPTY
72122: ST_TO_ADDR
// if not array then
72123: LD_VAR 0 1
72127: NOT
72128: IFFALSE 72132
// exit ;
72130: GO 72231
// Randomize ;
72132: CALL_OW 10
// for i = array downto 1 do
72136: LD_ADDR_VAR 0 3
72140: PUSH
72141: DOUBLE
72142: LD_VAR 0 1
72146: INC
72147: ST_TO_ADDR
72148: LD_INT 1
72150: PUSH
72151: FOR_DOWNTO
72152: IFFALSE 72229
// begin index := rand ( 1 , array ) ;
72154: LD_ADDR_VAR 0 4
72158: PUSH
72159: LD_INT 1
72161: PPUSH
72162: LD_VAR 0 1
72166: PPUSH
72167: CALL_OW 12
72171: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72172: LD_ADDR_VAR 0 2
72176: PUSH
72177: LD_VAR 0 2
72181: PPUSH
72182: LD_VAR 0 2
72186: PUSH
72187: LD_INT 1
72189: PLUS
72190: PPUSH
72191: LD_VAR 0 1
72195: PUSH
72196: LD_VAR 0 4
72200: ARRAY
72201: PPUSH
72202: CALL_OW 2
72206: ST_TO_ADDR
// array := Delete ( array , index ) ;
72207: LD_ADDR_VAR 0 1
72211: PUSH
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_VAR 0 4
72221: PPUSH
72222: CALL_OW 3
72226: ST_TO_ADDR
// end ;
72227: GO 72151
72229: POP
72230: POP
// end ;
72231: LD_VAR 0 2
72235: RET
// export function GetBaseMaterials ( base ) ; begin
72236: LD_INT 0
72238: PPUSH
// result := [ 0 , 0 , 0 ] ;
72239: LD_ADDR_VAR 0 2
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_INT 0
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: LIST
72257: ST_TO_ADDR
// if not base then
72258: LD_VAR 0 1
72262: NOT
72263: IFFALSE 72267
// exit ;
72265: GO 72316
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72267: LD_ADDR_VAR 0 2
72271: PUSH
72272: LD_VAR 0 1
72276: PPUSH
72277: LD_INT 1
72279: PPUSH
72280: CALL_OW 275
72284: PUSH
72285: LD_VAR 0 1
72289: PPUSH
72290: LD_INT 2
72292: PPUSH
72293: CALL_OW 275
72297: PUSH
72298: LD_VAR 0 1
72302: PPUSH
72303: LD_INT 3
72305: PPUSH
72306: CALL_OW 275
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: LIST
72315: ST_TO_ADDR
// end ;
72316: LD_VAR 0 2
72320: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72321: LD_INT 0
72323: PPUSH
72324: PPUSH
// result := array ;
72325: LD_ADDR_VAR 0 3
72329: PUSH
72330: LD_VAR 0 1
72334: ST_TO_ADDR
// if size >= result then
72335: LD_VAR 0 2
72339: PUSH
72340: LD_VAR 0 3
72344: GREATEREQUAL
72345: IFFALSE 72349
// exit ;
72347: GO 72399
// if size then
72349: LD_VAR 0 2
72353: IFFALSE 72399
// for i := array downto size do
72355: LD_ADDR_VAR 0 4
72359: PUSH
72360: DOUBLE
72361: LD_VAR 0 1
72365: INC
72366: ST_TO_ADDR
72367: LD_VAR 0 2
72371: PUSH
72372: FOR_DOWNTO
72373: IFFALSE 72397
// result := Delete ( result , result ) ;
72375: LD_ADDR_VAR 0 3
72379: PUSH
72380: LD_VAR 0 3
72384: PPUSH
72385: LD_VAR 0 3
72389: PPUSH
72390: CALL_OW 3
72394: ST_TO_ADDR
72395: GO 72372
72397: POP
72398: POP
// end ;
72399: LD_VAR 0 3
72403: RET
// export function ComExit ( unit ) ; var tmp ; begin
72404: LD_INT 0
72406: PPUSH
72407: PPUSH
// if not IsInUnit ( unit ) then
72408: LD_VAR 0 1
72412: PPUSH
72413: CALL_OW 310
72417: NOT
72418: IFFALSE 72422
// exit ;
72420: GO 72482
// tmp := IsInUnit ( unit ) ;
72422: LD_ADDR_VAR 0 3
72426: PUSH
72427: LD_VAR 0 1
72431: PPUSH
72432: CALL_OW 310
72436: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72437: LD_VAR 0 3
72441: PPUSH
72442: CALL_OW 247
72446: PUSH
72447: LD_INT 2
72449: EQUAL
72450: IFFALSE 72463
// ComExitVehicle ( unit ) else
72452: LD_VAR 0 1
72456: PPUSH
72457: CALL_OW 121
72461: GO 72472
// ComExitBuilding ( unit ) ;
72463: LD_VAR 0 1
72467: PPUSH
72468: CALL_OW 122
// result := tmp ;
72472: LD_ADDR_VAR 0 2
72476: PUSH
72477: LD_VAR 0 3
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 2
72486: RET
// export function ComExitAll ( units ) ; var i ; begin
72487: LD_INT 0
72489: PPUSH
72490: PPUSH
// if not units then
72491: LD_VAR 0 1
72495: NOT
72496: IFFALSE 72500
// exit ;
72498: GO 72526
// for i in units do
72500: LD_ADDR_VAR 0 3
72504: PUSH
72505: LD_VAR 0 1
72509: PUSH
72510: FOR_IN
72511: IFFALSE 72524
// ComExit ( i ) ;
72513: LD_VAR 0 3
72517: PPUSH
72518: CALL 72404 0 1
72522: GO 72510
72524: POP
72525: POP
// end ;
72526: LD_VAR 0 2
72530: RET
// export function ResetHc ; begin
72531: LD_INT 0
72533: PPUSH
// InitHc ;
72534: CALL_OW 19
// hc_importance := 0 ;
72538: LD_ADDR_OWVAR 32
72542: PUSH
72543: LD_INT 0
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 1
72550: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72551: LD_INT 0
72553: PPUSH
72554: PPUSH
72555: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72556: LD_ADDR_VAR 0 6
72560: PUSH
72561: LD_VAR 0 1
72565: PUSH
72566: LD_VAR 0 3
72570: PLUS
72571: PUSH
72572: LD_INT 2
72574: DIV
72575: ST_TO_ADDR
// if _x < 0 then
72576: LD_VAR 0 6
72580: PUSH
72581: LD_INT 0
72583: LESS
72584: IFFALSE 72601
// _x := _x * - 1 ;
72586: LD_ADDR_VAR 0 6
72590: PUSH
72591: LD_VAR 0 6
72595: PUSH
72596: LD_INT 1
72598: NEG
72599: MUL
72600: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72601: LD_ADDR_VAR 0 7
72605: PUSH
72606: LD_VAR 0 2
72610: PUSH
72611: LD_VAR 0 4
72615: PLUS
72616: PUSH
72617: LD_INT 2
72619: DIV
72620: ST_TO_ADDR
// if _y < 0 then
72621: LD_VAR 0 7
72625: PUSH
72626: LD_INT 0
72628: LESS
72629: IFFALSE 72646
// _y := _y * - 1 ;
72631: LD_ADDR_VAR 0 7
72635: PUSH
72636: LD_VAR 0 7
72640: PUSH
72641: LD_INT 1
72643: NEG
72644: MUL
72645: ST_TO_ADDR
// result := [ _x , _y ] ;
72646: LD_ADDR_VAR 0 5
72650: PUSH
72651: LD_VAR 0 6
72655: PUSH
72656: LD_VAR 0 7
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: ST_TO_ADDR
// end ;
72665: LD_VAR 0 5
72669: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72670: LD_INT 0
72672: PPUSH
72673: PPUSH
72674: PPUSH
72675: PPUSH
// task := GetTaskList ( unit ) ;
72676: LD_ADDR_VAR 0 7
72680: PUSH
72681: LD_VAR 0 1
72685: PPUSH
72686: CALL_OW 437
72690: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72691: LD_VAR 0 7
72695: NOT
72696: IFFALSE 72715
72698: PUSH
72699: LD_VAR 0 1
72703: PPUSH
72704: LD_VAR 0 2
72708: PPUSH
72709: CALL_OW 308
72713: NOT
72714: AND
72715: IFFALSE 72719
// exit ;
72717: GO 72837
// if IsInArea ( unit , area ) then
72719: LD_VAR 0 1
72723: PPUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: CALL_OW 308
72733: IFFALSE 72751
// begin ComMoveToArea ( unit , goAway ) ;
72735: LD_VAR 0 1
72739: PPUSH
72740: LD_VAR 0 3
72744: PPUSH
72745: CALL_OW 113
// exit ;
72749: GO 72837
// end ; if task [ 1 ] [ 1 ] <> M then
72751: LD_VAR 0 7
72755: PUSH
72756: LD_INT 1
72758: ARRAY
72759: PUSH
72760: LD_INT 1
72762: ARRAY
72763: PUSH
72764: LD_STRING M
72766: NONEQUAL
72767: IFFALSE 72771
// exit ;
72769: GO 72837
// x := task [ 1 ] [ 2 ] ;
72771: LD_ADDR_VAR 0 5
72775: PUSH
72776: LD_VAR 0 7
72780: PUSH
72781: LD_INT 1
72783: ARRAY
72784: PUSH
72785: LD_INT 2
72787: ARRAY
72788: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72789: LD_ADDR_VAR 0 6
72793: PUSH
72794: LD_VAR 0 7
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PUSH
72803: LD_INT 3
72805: ARRAY
72806: ST_TO_ADDR
// if InArea ( x , y , area ) then
72807: LD_VAR 0 5
72811: PPUSH
72812: LD_VAR 0 6
72816: PPUSH
72817: LD_VAR 0 2
72821: PPUSH
72822: CALL_OW 309
72826: IFFALSE 72837
// ComStop ( unit ) ;
72828: LD_VAR 0 1
72832: PPUSH
72833: CALL_OW 141
// end ;
72837: LD_VAR 0 4
72841: RET
// export function Abs ( value ) ; begin
72842: LD_INT 0
72844: PPUSH
// result := value ;
72845: LD_ADDR_VAR 0 2
72849: PUSH
72850: LD_VAR 0 1
72854: ST_TO_ADDR
// if value < 0 then
72855: LD_VAR 0 1
72859: PUSH
72860: LD_INT 0
72862: LESS
72863: IFFALSE 72880
// result := value * - 1 ;
72865: LD_ADDR_VAR 0 2
72869: PUSH
72870: LD_VAR 0 1
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: MUL
72879: ST_TO_ADDR
// end ;
72880: LD_VAR 0 2
72884: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72885: LD_INT 0
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
72893: PPUSH
72894: PPUSH
// if not unit or not building then
72895: LD_VAR 0 1
72899: NOT
72900: IFTRUE 72909
72902: PUSH
72903: LD_VAR 0 2
72907: NOT
72908: OR
72909: IFFALSE 72913
// exit ;
72911: GO 73141
// x := GetX ( building ) ;
72913: LD_ADDR_VAR 0 4
72917: PUSH
72918: LD_VAR 0 2
72922: PPUSH
72923: CALL_OW 250
72927: ST_TO_ADDR
// y := GetY ( building ) ;
72928: LD_ADDR_VAR 0 6
72932: PUSH
72933: LD_VAR 0 2
72937: PPUSH
72938: CALL_OW 251
72942: ST_TO_ADDR
// d := GetDir ( building ) ;
72943: LD_ADDR_VAR 0 8
72947: PUSH
72948: LD_VAR 0 2
72952: PPUSH
72953: CALL_OW 254
72957: ST_TO_ADDR
// r := 4 ;
72958: LD_ADDR_VAR 0 9
72962: PUSH
72963: LD_INT 4
72965: ST_TO_ADDR
// for i := 1 to 5 do
72966: LD_ADDR_VAR 0 10
72970: PUSH
72971: DOUBLE
72972: LD_INT 1
72974: DEC
72975: ST_TO_ADDR
72976: LD_INT 5
72978: PUSH
72979: FOR_TO
72980: IFFALSE 73139
// begin _x := ShiftX ( x , d , r + i ) ;
72982: LD_ADDR_VAR 0 5
72986: PUSH
72987: LD_VAR 0 4
72991: PPUSH
72992: LD_VAR 0 8
72996: PPUSH
72997: LD_VAR 0 9
73001: PUSH
73002: LD_VAR 0 10
73006: PLUS
73007: PPUSH
73008: CALL_OW 272
73012: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73013: LD_ADDR_VAR 0 7
73017: PUSH
73018: LD_VAR 0 6
73022: PPUSH
73023: LD_VAR 0 8
73027: PPUSH
73028: LD_VAR 0 9
73032: PUSH
73033: LD_VAR 0 10
73037: PLUS
73038: PPUSH
73039: CALL_OW 273
73043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73044: LD_VAR 0 5
73048: PPUSH
73049: LD_VAR 0 7
73053: PPUSH
73054: CALL_OW 488
73058: IFFALSE 73093
73060: PUSH
73061: LD_VAR 0 5
73065: PPUSH
73066: LD_VAR 0 7
73070: PPUSH
73071: CALL_OW 428
73075: PPUSH
73076: CALL_OW 247
73080: PUSH
73081: LD_INT 3
73083: PUSH
73084: LD_INT 2
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: IN
73091: NOT
73092: AND
73093: IFFALSE 73137
// begin ComMoveXY ( unit , _x , _y ) ;
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_VAR 0 5
73104: PPUSH
73105: LD_VAR 0 7
73109: PPUSH
73110: CALL_OW 111
// result := [ _x , _y ] ;
73114: LD_ADDR_VAR 0 3
73118: PUSH
73119: LD_VAR 0 5
73123: PUSH
73124: LD_VAR 0 7
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: ST_TO_ADDR
// exit ;
73133: POP
73134: POP
73135: GO 73141
// end ; end ;
73137: GO 72979
73139: POP
73140: POP
// end ;
73141: LD_VAR 0 3
73145: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73146: LD_INT 0
73148: PPUSH
73149: PPUSH
73150: PPUSH
// result := 0 ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_INT 0
73158: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73159: LD_VAR 0 1
73163: PUSH
73164: LD_INT 0
73166: LESS
73167: IFTRUE 73179
73169: PUSH
73170: LD_VAR 0 1
73174: PUSH
73175: LD_INT 8
73177: GREATER
73178: OR
73179: IFTRUE 73191
73181: PUSH
73182: LD_VAR 0 2
73186: PUSH
73187: LD_INT 0
73189: LESS
73190: OR
73191: IFTRUE 73203
73193: PUSH
73194: LD_VAR 0 2
73198: PUSH
73199: LD_INT 8
73201: GREATER
73202: OR
73203: IFFALSE 73207
// exit ;
73205: GO 73282
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73207: LD_ADDR_VAR 0 4
73211: PUSH
73212: LD_INT 22
73214: PUSH
73215: LD_VAR 0 2
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PPUSH
73224: CALL_OW 69
73228: PUSH
73229: FOR_IN
73230: IFFALSE 73280
// begin un := UnitShoot ( i ) ;
73232: LD_ADDR_VAR 0 5
73236: PUSH
73237: LD_VAR 0 4
73241: PPUSH
73242: CALL_OW 504
73246: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73247: LD_VAR 0 5
73251: PPUSH
73252: CALL_OW 255
73256: PUSH
73257: LD_VAR 0 1
73261: EQUAL
73262: IFFALSE 73278
// begin result := un ;
73264: LD_ADDR_VAR 0 3
73268: PUSH
73269: LD_VAR 0 5
73273: ST_TO_ADDR
// exit ;
73274: POP
73275: POP
73276: GO 73282
// end ; end ;
73278: GO 73229
73280: POP
73281: POP
// end ;
73282: LD_VAR 0 3
73286: RET
// export function GetCargoBay ( units ) ; begin
73287: LD_INT 0
73289: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73290: LD_ADDR_VAR 0 2
73294: PUSH
73295: LD_VAR 0 1
73299: PPUSH
73300: LD_INT 2
73302: PUSH
73303: LD_INT 34
73305: PUSH
73306: LD_INT 12
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 34
73315: PUSH
73316: LD_INT 51
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 34
73325: PUSH
73326: LD_INT 32
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 34
73335: PUSH
73336: LD_INT 89
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: PPUSH
73350: CALL_OW 72
73354: ST_TO_ADDR
// end ;
73355: LD_VAR 0 2
73359: RET
// export function Negate ( value ) ; begin
73360: LD_INT 0
73362: PPUSH
// result := not value ;
73363: LD_ADDR_VAR 0 2
73367: PUSH
73368: LD_VAR 0 1
73372: NOT
73373: ST_TO_ADDR
// end ;
73374: LD_VAR 0 2
73378: RET
// export function Inc ( value ) ; begin
73379: LD_INT 0
73381: PPUSH
// result := value + 1 ;
73382: LD_ADDR_VAR 0 2
73386: PUSH
73387: LD_VAR 0 1
73391: PUSH
73392: LD_INT 1
73394: PLUS
73395: ST_TO_ADDR
// end ;
73396: LD_VAR 0 2
73400: RET
// export function Dec ( value ) ; begin
73401: LD_INT 0
73403: PPUSH
// result := value - 1 ;
73404: LD_ADDR_VAR 0 2
73408: PUSH
73409: LD_VAR 0 1
73413: PUSH
73414: LD_INT 1
73416: MINUS
73417: ST_TO_ADDR
// end ;
73418: LD_VAR 0 2
73422: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73423: LD_INT 0
73425: PPUSH
73426: PPUSH
73427: PPUSH
73428: PPUSH
73429: PPUSH
73430: PPUSH
73431: PPUSH
73432: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73433: LD_VAR 0 1
73437: PPUSH
73438: LD_VAR 0 2
73442: PPUSH
73443: CALL_OW 488
73447: NOT
73448: IFTRUE 73467
73450: PUSH
73451: LD_VAR 0 3
73455: PPUSH
73456: LD_VAR 0 4
73460: PPUSH
73461: CALL_OW 488
73465: NOT
73466: OR
73467: IFFALSE 73480
// begin result := - 1 ;
73469: LD_ADDR_VAR 0 5
73473: PUSH
73474: LD_INT 1
73476: NEG
73477: ST_TO_ADDR
// exit ;
73478: GO 73715
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73480: LD_ADDR_VAR 0 12
73484: PUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: LD_VAR 0 2
73494: PPUSH
73495: LD_VAR 0 3
73499: PPUSH
73500: LD_VAR 0 4
73504: PPUSH
73505: CALL 72551 0 4
73509: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73510: LD_ADDR_VAR 0 11
73514: PUSH
73515: LD_VAR 0 1
73519: PPUSH
73520: LD_VAR 0 2
73524: PPUSH
73525: LD_VAR 0 12
73529: PUSH
73530: LD_INT 1
73532: ARRAY
73533: PPUSH
73534: LD_VAR 0 12
73538: PUSH
73539: LD_INT 2
73541: ARRAY
73542: PPUSH
73543: CALL_OW 298
73547: ST_TO_ADDR
// distance := 9999 ;
73548: LD_ADDR_VAR 0 10
73552: PUSH
73553: LD_INT 9999
73555: ST_TO_ADDR
// for i := 0 to 5 do
73556: LD_ADDR_VAR 0 6
73560: PUSH
73561: DOUBLE
73562: LD_INT 0
73564: DEC
73565: ST_TO_ADDR
73566: LD_INT 5
73568: PUSH
73569: FOR_TO
73570: IFFALSE 73713
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73572: LD_ADDR_VAR 0 7
73576: PUSH
73577: LD_VAR 0 1
73581: PPUSH
73582: LD_VAR 0 6
73586: PPUSH
73587: LD_VAR 0 11
73591: PPUSH
73592: CALL_OW 272
73596: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73597: LD_ADDR_VAR 0 8
73601: PUSH
73602: LD_VAR 0 2
73606: PPUSH
73607: LD_VAR 0 6
73611: PPUSH
73612: LD_VAR 0 11
73616: PPUSH
73617: CALL_OW 273
73621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73622: LD_VAR 0 7
73626: PPUSH
73627: LD_VAR 0 8
73631: PPUSH
73632: CALL_OW 488
73636: NOT
73637: IFFALSE 73641
// continue ;
73639: GO 73569
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73641: LD_ADDR_VAR 0 9
73645: PUSH
73646: LD_VAR 0 12
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: PPUSH
73655: LD_VAR 0 12
73659: PUSH
73660: LD_INT 2
73662: ARRAY
73663: PPUSH
73664: LD_VAR 0 7
73668: PPUSH
73669: LD_VAR 0 8
73673: PPUSH
73674: CALL_OW 298
73678: ST_TO_ADDR
// if tmp < distance then
73679: LD_VAR 0 9
73683: PUSH
73684: LD_VAR 0 10
73688: LESS
73689: IFFALSE 73711
// begin result := i ;
73691: LD_ADDR_VAR 0 5
73695: PUSH
73696: LD_VAR 0 6
73700: ST_TO_ADDR
// distance := tmp ;
73701: LD_ADDR_VAR 0 10
73705: PUSH
73706: LD_VAR 0 9
73710: ST_TO_ADDR
// end ; end ;
73711: GO 73569
73713: POP
73714: POP
// end ;
73715: LD_VAR 0 5
73719: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73720: LD_INT 0
73722: PPUSH
73723: PPUSH
// if not driver or not IsInUnit ( driver ) then
73724: LD_VAR 0 1
73728: NOT
73729: IFTRUE 73743
73731: PUSH
73732: LD_VAR 0 1
73736: PPUSH
73737: CALL_OW 310
73741: NOT
73742: OR
73743: IFFALSE 73747
// exit ;
73745: GO 73837
// vehicle := IsInUnit ( driver ) ;
73747: LD_ADDR_VAR 0 3
73751: PUSH
73752: LD_VAR 0 1
73756: PPUSH
73757: CALL_OW 310
73761: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73762: LD_VAR 0 1
73766: PPUSH
73767: LD_STRING \
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: LD_INT 0
73781: PUSH
73782: LD_INT 0
73784: PUSH
73785: LD_INT 0
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: PUSH
73797: LD_STRING E
73799: PUSH
73800: LD_INT 0
73802: PUSH
73803: LD_INT 0
73805: PUSH
73806: LD_VAR 0 3
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: LD_INT 0
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PPUSH
73833: CALL_OW 446
// end ;
73837: LD_VAR 0 2
73841: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73842: LD_INT 0
73844: PPUSH
73845: PPUSH
// if not driver or not IsInUnit ( driver ) then
73846: LD_VAR 0 1
73850: NOT
73851: IFTRUE 73865
73853: PUSH
73854: LD_VAR 0 1
73858: PPUSH
73859: CALL_OW 310
73863: NOT
73864: OR
73865: IFFALSE 73869
// exit ;
73867: GO 73959
// vehicle := IsInUnit ( driver ) ;
73869: LD_ADDR_VAR 0 3
73873: PUSH
73874: LD_VAR 0 1
73878: PPUSH
73879: CALL_OW 310
73883: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73884: LD_VAR 0 1
73888: PPUSH
73889: LD_STRING \
73891: PUSH
73892: LD_INT 0
73894: PUSH
73895: LD_INT 0
73897: PUSH
73898: LD_INT 0
73900: PUSH
73901: LD_INT 0
73903: PUSH
73904: LD_INT 0
73906: PUSH
73907: LD_INT 0
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: PUSH
73919: LD_STRING E
73921: PUSH
73922: LD_INT 0
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: LD_VAR 0 3
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PPUSH
73955: CALL_OW 447
// end ;
73959: LD_VAR 0 2
73963: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73964: LD_INT 0
73966: PPUSH
73967: PPUSH
73968: PPUSH
// tmp := [ ] ;
73969: LD_ADDR_VAR 0 5
73973: PUSH
73974: EMPTY
73975: ST_TO_ADDR
// for i in units do
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_VAR 0 1
73985: PUSH
73986: FOR_IN
73987: IFFALSE 74025
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73989: LD_ADDR_VAR 0 5
73993: PUSH
73994: LD_VAR 0 5
73998: PPUSH
73999: LD_VAR 0 5
74003: PUSH
74004: LD_INT 1
74006: PLUS
74007: PPUSH
74008: LD_VAR 0 4
74012: PPUSH
74013: CALL_OW 256
74017: PPUSH
74018: CALL_OW 2
74022: ST_TO_ADDR
74023: GO 73986
74025: POP
74026: POP
// if not tmp then
74027: LD_VAR 0 5
74031: NOT
74032: IFFALSE 74036
// exit ;
74034: GO 74084
// if asc then
74036: LD_VAR 0 2
74040: IFFALSE 74064
// result := SortListByListAsc ( units , tmp ) else
74042: LD_ADDR_VAR 0 3
74046: PUSH
74047: LD_VAR 0 1
74051: PPUSH
74052: LD_VAR 0 5
74056: PPUSH
74057: CALL_OW 76
74061: ST_TO_ADDR
74062: GO 74084
// result := SortListByListDesc ( units , tmp ) ;
74064: LD_ADDR_VAR 0 3
74068: PUSH
74069: LD_VAR 0 1
74073: PPUSH
74074: LD_VAR 0 5
74078: PPUSH
74079: CALL_OW 77
74083: ST_TO_ADDR
// end ;
74084: LD_VAR 0 3
74088: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74089: LD_INT 0
74091: PPUSH
74092: PPUSH
// task := GetTaskList ( mech ) ;
74093: LD_ADDR_VAR 0 4
74097: PUSH
74098: LD_VAR 0 1
74102: PPUSH
74103: CALL_OW 437
74107: ST_TO_ADDR
// if not task then
74108: LD_VAR 0 4
74112: NOT
74113: IFFALSE 74117
// exit ;
74115: GO 74161
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74117: LD_ADDR_VAR 0 3
74121: PUSH
74122: LD_VAR 0 4
74126: PUSH
74127: LD_INT 1
74129: ARRAY
74130: PUSH
74131: LD_INT 1
74133: ARRAY
74134: PUSH
74135: LD_STRING r
74137: EQUAL
74138: IFFALSE 74160
74140: PUSH
74141: LD_VAR 0 4
74145: PUSH
74146: LD_INT 1
74148: ARRAY
74149: PUSH
74150: LD_INT 4
74152: ARRAY
74153: PUSH
74154: LD_VAR 0 2
74158: EQUAL
74159: AND
74160: ST_TO_ADDR
// end ;
74161: LD_VAR 0 3
74165: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74166: LD_INT 0
74168: PPUSH
// SetDir ( unit , d ) ;
74169: LD_VAR 0 1
74173: PPUSH
74174: LD_VAR 0 4
74178: PPUSH
74179: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
74183: LD_ADDR_VAR 0 6
74187: PUSH
74188: LD_VAR 0 1
74192: PPUSH
74193: LD_VAR 0 2
74197: PPUSH
74198: LD_VAR 0 3
74202: PPUSH
74203: LD_VAR 0 5
74207: PPUSH
74208: CALL_OW 48
74212: ST_TO_ADDR
// end ;
74213: LD_VAR 0 6
74217: RET
// export function ToNaturalNumber ( number ) ; begin
74218: LD_INT 0
74220: PPUSH
// result := number div 1 ;
74221: LD_ADDR_VAR 0 2
74225: PUSH
74226: LD_VAR 0 1
74230: PUSH
74231: LD_INT 1
74233: DIV
74234: ST_TO_ADDR
// if number < 0 then
74235: LD_VAR 0 1
74239: PUSH
74240: LD_INT 0
74242: LESS
74243: IFFALSE 74253
// result := 0 ;
74245: LD_ADDR_VAR 0 2
74249: PUSH
74250: LD_INT 0
74252: ST_TO_ADDR
// end ;
74253: LD_VAR 0 2
74257: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74258: LD_INT 0
74260: PPUSH
74261: PPUSH
74262: PPUSH
// if not buildings then
74263: LD_VAR 0 1
74267: NOT
74268: IFFALSE 74272
// exit ;
74270: GO 74387
// tmp := [ ] ;
74272: LD_ADDR_VAR 0 5
74276: PUSH
74277: EMPTY
74278: ST_TO_ADDR
// for b in buildings do
74279: LD_ADDR_VAR 0 4
74283: PUSH
74284: LD_VAR 0 1
74288: PUSH
74289: FOR_IN
74290: IFFALSE 74328
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74292: LD_ADDR_VAR 0 5
74296: PUSH
74297: LD_VAR 0 5
74301: PPUSH
74302: LD_VAR 0 5
74306: PUSH
74307: LD_INT 1
74309: PLUS
74310: PPUSH
74311: LD_VAR 0 4
74315: PPUSH
74316: CALL_OW 266
74320: PPUSH
74321: CALL_OW 1
74325: ST_TO_ADDR
74326: GO 74289
74328: POP
74329: POP
// if not tmp then
74330: LD_VAR 0 5
74334: NOT
74335: IFFALSE 74339
// exit ;
74337: GO 74387
// if asc then
74339: LD_VAR 0 2
74343: IFFALSE 74367
// result := SortListByListAsc ( buildings , tmp ) else
74345: LD_ADDR_VAR 0 3
74349: PUSH
74350: LD_VAR 0 1
74354: PPUSH
74355: LD_VAR 0 5
74359: PPUSH
74360: CALL_OW 76
74364: ST_TO_ADDR
74365: GO 74387
// result := SortListByListDesc ( buildings , tmp ) ;
74367: LD_ADDR_VAR 0 3
74371: PUSH
74372: LD_VAR 0 1
74376: PPUSH
74377: LD_VAR 0 5
74381: PPUSH
74382: CALL_OW 77
74386: ST_TO_ADDR
// end ;
74387: LD_VAR 0 3
74391: RET
// export function SortByClass ( units , class ) ; var un ; begin
74392: LD_INT 0
74394: PPUSH
74395: PPUSH
// if not units or not class then
74396: LD_VAR 0 1
74400: NOT
74401: IFTRUE 74410
74403: PUSH
74404: LD_VAR 0 2
74408: NOT
74409: OR
74410: IFFALSE 74414
// exit ;
74412: GO 74509
// result := [ ] ;
74414: LD_ADDR_VAR 0 3
74418: PUSH
74419: EMPTY
74420: ST_TO_ADDR
// for un in units do
74421: LD_ADDR_VAR 0 4
74425: PUSH
74426: LD_VAR 0 1
74430: PUSH
74431: FOR_IN
74432: IFFALSE 74507
// if GetClass ( un ) = class then
74434: LD_VAR 0 4
74438: PPUSH
74439: CALL_OW 257
74443: PUSH
74444: LD_VAR 0 2
74448: EQUAL
74449: IFFALSE 74476
// result := Insert ( result , 1 , un ) else
74451: LD_ADDR_VAR 0 3
74455: PUSH
74456: LD_VAR 0 3
74460: PPUSH
74461: LD_INT 1
74463: PPUSH
74464: LD_VAR 0 4
74468: PPUSH
74469: CALL_OW 2
74473: ST_TO_ADDR
74474: GO 74505
// result := Replace ( result , result + 1 , un ) ;
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: LD_VAR 0 3
74485: PPUSH
74486: LD_VAR 0 3
74490: PUSH
74491: LD_INT 1
74493: PLUS
74494: PPUSH
74495: LD_VAR 0 4
74499: PPUSH
74500: CALL_OW 1
74504: ST_TO_ADDR
74505: GO 74431
74507: POP
74508: POP
// end ;
74509: LD_VAR 0 3
74513: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74514: LD_INT 0
74516: PPUSH
74517: PPUSH
74518: PPUSH
74519: PPUSH
74520: PPUSH
74521: PPUSH
74522: PPUSH
// result := [ ] ;
74523: LD_ADDR_VAR 0 4
74527: PUSH
74528: EMPTY
74529: ST_TO_ADDR
// if x - r < 0 then
74530: LD_VAR 0 1
74534: PUSH
74535: LD_VAR 0 3
74539: MINUS
74540: PUSH
74541: LD_INT 0
74543: LESS
74544: IFFALSE 74556
// min_x := 0 else
74546: LD_ADDR_VAR 0 8
74550: PUSH
74551: LD_INT 0
74553: ST_TO_ADDR
74554: GO 74572
// min_x := x - r ;
74556: LD_ADDR_VAR 0 8
74560: PUSH
74561: LD_VAR 0 1
74565: PUSH
74566: LD_VAR 0 3
74570: MINUS
74571: ST_TO_ADDR
// if y - r < 0 then
74572: LD_VAR 0 2
74576: PUSH
74577: LD_VAR 0 3
74581: MINUS
74582: PUSH
74583: LD_INT 0
74585: LESS
74586: IFFALSE 74598
// min_y := 0 else
74588: LD_ADDR_VAR 0 7
74592: PUSH
74593: LD_INT 0
74595: ST_TO_ADDR
74596: GO 74614
// min_y := y - r ;
74598: LD_ADDR_VAR 0 7
74602: PUSH
74603: LD_VAR 0 2
74607: PUSH
74608: LD_VAR 0 3
74612: MINUS
74613: ST_TO_ADDR
// max_x := x + r ;
74614: LD_ADDR_VAR 0 9
74618: PUSH
74619: LD_VAR 0 1
74623: PUSH
74624: LD_VAR 0 3
74628: PLUS
74629: ST_TO_ADDR
// max_y := y + r ;
74630: LD_ADDR_VAR 0 10
74634: PUSH
74635: LD_VAR 0 2
74639: PUSH
74640: LD_VAR 0 3
74644: PLUS
74645: ST_TO_ADDR
// for _x = min_x to max_x do
74646: LD_ADDR_VAR 0 5
74650: PUSH
74651: DOUBLE
74652: LD_VAR 0 8
74656: DEC
74657: ST_TO_ADDR
74658: LD_VAR 0 9
74662: PUSH
74663: FOR_TO
74664: IFFALSE 74765
// for _y = min_y to max_y do
74666: LD_ADDR_VAR 0 6
74670: PUSH
74671: DOUBLE
74672: LD_VAR 0 7
74676: DEC
74677: ST_TO_ADDR
74678: LD_VAR 0 10
74682: PUSH
74683: FOR_TO
74684: IFFALSE 74761
// begin if not ValidHex ( _x , _y ) then
74686: LD_VAR 0 5
74690: PPUSH
74691: LD_VAR 0 6
74695: PPUSH
74696: CALL_OW 488
74700: NOT
74701: IFFALSE 74705
// continue ;
74703: GO 74683
// if GetResourceTypeXY ( _x , _y ) then
74705: LD_VAR 0 5
74709: PPUSH
74710: LD_VAR 0 6
74714: PPUSH
74715: CALL_OW 283
74719: IFFALSE 74759
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74721: LD_ADDR_VAR 0 4
74725: PUSH
74726: LD_VAR 0 4
74730: PPUSH
74731: LD_VAR 0 4
74735: PUSH
74736: LD_INT 1
74738: PLUS
74739: PPUSH
74740: LD_VAR 0 5
74744: PUSH
74745: LD_VAR 0 6
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PPUSH
74754: CALL_OW 1
74758: ST_TO_ADDR
// end ;
74759: GO 74683
74761: POP
74762: POP
74763: GO 74663
74765: POP
74766: POP
// end ;
74767: LD_VAR 0 4
74771: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74772: LD_INT 0
74774: PPUSH
74775: PPUSH
74776: PPUSH
74777: PPUSH
74778: PPUSH
74779: PPUSH
74780: PPUSH
74781: PPUSH
// if not units then
74782: LD_VAR 0 1
74786: NOT
74787: IFFALSE 74791
// exit ;
74789: GO 75323
// result := UnitFilter ( units , [ f_ok ] ) ;
74791: LD_ADDR_VAR 0 3
74795: PUSH
74796: LD_VAR 0 1
74800: PPUSH
74801: LD_INT 50
74803: PUSH
74804: EMPTY
74805: LIST
74806: PPUSH
74807: CALL_OW 72
74811: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74812: LD_ADDR_VAR 0 8
74816: PUSH
74817: LD_VAR 0 1
74821: PUSH
74822: LD_INT 1
74824: ARRAY
74825: PPUSH
74826: CALL_OW 255
74830: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74831: LD_ADDR_VAR 0 10
74835: PUSH
74836: LD_INT 29
74838: PUSH
74839: LD_INT 91
74841: PUSH
74842: LD_INT 49
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: ST_TO_ADDR
// if not result then
74850: LD_VAR 0 3
74854: NOT
74855: IFFALSE 74859
// exit ;
74857: GO 75323
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74859: LD_ADDR_VAR 0 5
74863: PUSH
74864: LD_INT 81
74866: PUSH
74867: LD_VAR 0 8
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PPUSH
74876: CALL_OW 69
74880: ST_TO_ADDR
// for i in result do
74881: LD_ADDR_VAR 0 4
74885: PUSH
74886: LD_VAR 0 3
74890: PUSH
74891: FOR_IN
74892: IFFALSE 75321
// begin tag := GetTag ( i ) + 1 ;
74894: LD_ADDR_VAR 0 9
74898: PUSH
74899: LD_VAR 0 4
74903: PPUSH
74904: CALL_OW 110
74908: PUSH
74909: LD_INT 1
74911: PLUS
74912: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74913: LD_ADDR_VAR 0 7
74917: PUSH
74918: LD_VAR 0 4
74922: PPUSH
74923: CALL_OW 250
74927: PPUSH
74928: LD_VAR 0 4
74932: PPUSH
74933: CALL_OW 251
74937: PPUSH
74938: LD_INT 4
74940: PPUSH
74941: CALL 74514 0 3
74945: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74946: LD_VAR 0 4
74950: PPUSH
74951: CALL_OW 247
74955: PUSH
74956: LD_INT 2
74958: EQUAL
74959: IFFALSE 74971
74961: PUSH
74962: LD_VAR 0 7
74966: PUSH
74967: LD_INT 2
74969: GREATER
74970: AND
74971: IFFALSE 74991
74973: PUSH
74974: LD_VAR 0 4
74978: PPUSH
74979: CALL_OW 264
74983: PUSH
74984: LD_VAR 0 10
74988: IN
74989: NOT
74990: AND
74991: IFFALSE 75030
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74993: LD_VAR 0 4
74997: PPUSH
74998: LD_VAR 0 7
75002: PUSH
75003: LD_INT 1
75005: ARRAY
75006: PUSH
75007: LD_INT 1
75009: ARRAY
75010: PPUSH
75011: LD_VAR 0 7
75015: PUSH
75016: LD_INT 1
75018: ARRAY
75019: PUSH
75020: LD_INT 2
75022: ARRAY
75023: PPUSH
75024: CALL_OW 116
75028: GO 75319
// if path > tag then
75030: LD_VAR 0 2
75034: PUSH
75035: LD_VAR 0 9
75039: GREATER
75040: IFFALSE 75248
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75042: LD_ADDR_VAR 0 6
75046: PUSH
75047: LD_VAR 0 5
75051: PPUSH
75052: LD_INT 91
75054: PUSH
75055: LD_VAR 0 4
75059: PUSH
75060: LD_INT 8
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: LIST
75067: PPUSH
75068: CALL_OW 72
75072: ST_TO_ADDR
// if nearEnemy then
75073: LD_VAR 0 6
75077: IFFALSE 75146
// begin if GetWeapon ( i ) = ru_time_lapser then
75079: LD_VAR 0 4
75083: PPUSH
75084: CALL_OW 264
75088: PUSH
75089: LD_INT 49
75091: EQUAL
75092: IFFALSE 75120
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75094: LD_VAR 0 4
75098: PPUSH
75099: LD_VAR 0 6
75103: PPUSH
75104: LD_VAR 0 4
75108: PPUSH
75109: CALL_OW 74
75113: PPUSH
75114: CALL_OW 112
75118: GO 75144
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75120: LD_VAR 0 4
75124: PPUSH
75125: LD_VAR 0 6
75129: PPUSH
75130: LD_VAR 0 4
75134: PPUSH
75135: CALL_OW 74
75139: PPUSH
75140: CALL 76404 0 2
// end else
75144: GO 75246
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75146: LD_VAR 0 4
75150: PPUSH
75151: LD_VAR 0 2
75155: PUSH
75156: LD_VAR 0 9
75160: ARRAY
75161: PUSH
75162: LD_INT 1
75164: ARRAY
75165: PPUSH
75166: LD_VAR 0 2
75170: PUSH
75171: LD_VAR 0 9
75175: ARRAY
75176: PUSH
75177: LD_INT 2
75179: ARRAY
75180: PPUSH
75181: CALL_OW 297
75185: PUSH
75186: LD_INT 6
75188: GREATER
75189: IFFALSE 75232
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75191: LD_VAR 0 4
75195: PPUSH
75196: LD_VAR 0 2
75200: PUSH
75201: LD_VAR 0 9
75205: ARRAY
75206: PUSH
75207: LD_INT 1
75209: ARRAY
75210: PPUSH
75211: LD_VAR 0 2
75215: PUSH
75216: LD_VAR 0 9
75220: ARRAY
75221: PUSH
75222: LD_INT 2
75224: ARRAY
75225: PPUSH
75226: CALL_OW 114
75230: GO 75246
// SetTag ( i , tag ) ;
75232: LD_VAR 0 4
75236: PPUSH
75237: LD_VAR 0 9
75241: PPUSH
75242: CALL_OW 109
// end else
75246: GO 75319
// if enemy then
75248: LD_VAR 0 5
75252: IFFALSE 75319
// begin if GetWeapon ( i ) = ru_time_lapser then
75254: LD_VAR 0 4
75258: PPUSH
75259: CALL_OW 264
75263: PUSH
75264: LD_INT 49
75266: EQUAL
75267: IFFALSE 75295
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75269: LD_VAR 0 4
75273: PPUSH
75274: LD_VAR 0 5
75278: PPUSH
75279: LD_VAR 0 4
75283: PPUSH
75284: CALL_OW 74
75288: PPUSH
75289: CALL_OW 112
75293: GO 75319
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75295: LD_VAR 0 4
75299: PPUSH
75300: LD_VAR 0 5
75304: PPUSH
75305: LD_VAR 0 4
75309: PPUSH
75310: CALL_OW 74
75314: PPUSH
75315: CALL 76404 0 2
// end ; end ;
75319: GO 74891
75321: POP
75322: POP
// end ;
75323: LD_VAR 0 3
75327: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75328: LD_INT 0
75330: PPUSH
75331: PPUSH
75332: PPUSH
// if not unit or IsInUnit ( unit ) then
75333: LD_VAR 0 1
75337: NOT
75338: IFTRUE 75351
75340: PUSH
75341: LD_VAR 0 1
75345: PPUSH
75346: CALL_OW 310
75350: OR
75351: IFFALSE 75355
// exit ;
75353: GO 75446
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75355: LD_ADDR_VAR 0 4
75359: PUSH
75360: LD_VAR 0 1
75364: PPUSH
75365: CALL_OW 250
75369: PPUSH
75370: LD_VAR 0 2
75374: PPUSH
75375: LD_INT 1
75377: PPUSH
75378: CALL_OW 272
75382: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: LD_VAR 0 1
75392: PPUSH
75393: CALL_OW 251
75397: PPUSH
75398: LD_VAR 0 2
75402: PPUSH
75403: LD_INT 1
75405: PPUSH
75406: CALL_OW 273
75410: ST_TO_ADDR
// if ValidHex ( x , y ) then
75411: LD_VAR 0 4
75415: PPUSH
75416: LD_VAR 0 5
75420: PPUSH
75421: CALL_OW 488
75425: IFFALSE 75446
// ComTurnXY ( unit , x , y ) ;
75427: LD_VAR 0 1
75431: PPUSH
75432: LD_VAR 0 4
75436: PPUSH
75437: LD_VAR 0 5
75441: PPUSH
75442: CALL_OW 118
// end ;
75446: LD_VAR 0 3
75450: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75451: LD_INT 0
75453: PPUSH
75454: PPUSH
// result := false ;
75455: LD_ADDR_VAR 0 3
75459: PUSH
75460: LD_INT 0
75462: ST_TO_ADDR
// if not units then
75463: LD_VAR 0 2
75467: NOT
75468: IFFALSE 75472
// exit ;
75470: GO 75517
// for i in units do
75472: LD_ADDR_VAR 0 4
75476: PUSH
75477: LD_VAR 0 2
75481: PUSH
75482: FOR_IN
75483: IFFALSE 75515
// if See ( side , i ) then
75485: LD_VAR 0 1
75489: PPUSH
75490: LD_VAR 0 4
75494: PPUSH
75495: CALL_OW 292
75499: IFFALSE 75513
// begin result := true ;
75501: LD_ADDR_VAR 0 3
75505: PUSH
75506: LD_INT 1
75508: ST_TO_ADDR
// exit ;
75509: POP
75510: POP
75511: GO 75517
// end ;
75513: GO 75482
75515: POP
75516: POP
// end ;
75517: LD_VAR 0 3
75521: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75522: LD_INT 0
75524: PPUSH
75525: PPUSH
75526: PPUSH
75527: PPUSH
// if not unit or not points then
75528: LD_VAR 0 1
75532: NOT
75533: IFTRUE 75542
75535: PUSH
75536: LD_VAR 0 2
75540: NOT
75541: OR
75542: IFFALSE 75546
// exit ;
75544: GO 75636
// dist := 99999 ;
75546: LD_ADDR_VAR 0 5
75550: PUSH
75551: LD_INT 99999
75553: ST_TO_ADDR
// for i in points do
75554: LD_ADDR_VAR 0 4
75558: PUSH
75559: LD_VAR 0 2
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75634
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75567: LD_ADDR_VAR 0 6
75571: PUSH
75572: LD_VAR 0 1
75576: PPUSH
75577: LD_VAR 0 4
75581: PUSH
75582: LD_INT 1
75584: ARRAY
75585: PPUSH
75586: LD_VAR 0 4
75590: PUSH
75591: LD_INT 2
75593: ARRAY
75594: PPUSH
75595: CALL_OW 297
75599: ST_TO_ADDR
// if tmpDist < dist then
75600: LD_VAR 0 6
75604: PUSH
75605: LD_VAR 0 5
75609: LESS
75610: IFFALSE 75632
// begin result := i ;
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: LD_VAR 0 4
75621: ST_TO_ADDR
// dist := tmpDist ;
75622: LD_ADDR_VAR 0 5
75626: PUSH
75627: LD_VAR 0 6
75631: ST_TO_ADDR
// end ; end ;
75632: GO 75564
75634: POP
75635: POP
// end ;
75636: LD_VAR 0 3
75640: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75641: LD_INT 0
75643: PPUSH
// uc_side := side ;
75644: LD_ADDR_OWVAR 20
75648: PUSH
75649: LD_VAR 0 1
75653: ST_TO_ADDR
// uc_nation := 3 ;
75654: LD_ADDR_OWVAR 21
75658: PUSH
75659: LD_INT 3
75661: ST_TO_ADDR
// vc_chassis := 25 ;
75662: LD_ADDR_OWVAR 37
75666: PUSH
75667: LD_INT 25
75669: ST_TO_ADDR
// vc_engine := engine_siberite ;
75670: LD_ADDR_OWVAR 39
75674: PUSH
75675: LD_INT 3
75677: ST_TO_ADDR
// vc_control := control_computer ;
75678: LD_ADDR_OWVAR 38
75682: PUSH
75683: LD_INT 3
75685: ST_TO_ADDR
// vc_weapon := 59 ;
75686: LD_ADDR_OWVAR 40
75690: PUSH
75691: LD_INT 59
75693: ST_TO_ADDR
// result := CreateVehicle ;
75694: LD_ADDR_VAR 0 5
75698: PUSH
75699: CALL_OW 45
75703: ST_TO_ADDR
// SetDir ( result , d ) ;
75704: LD_VAR 0 5
75708: PPUSH
75709: LD_VAR 0 4
75713: PPUSH
75714: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75718: LD_VAR 0 5
75722: PPUSH
75723: LD_VAR 0 2
75727: PPUSH
75728: LD_VAR 0 3
75732: PPUSH
75733: LD_INT 0
75735: PPUSH
75736: CALL_OW 48
// end ;
75740: LD_VAR 0 5
75744: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75745: LD_INT 0
75747: PPUSH
75748: PPUSH
75749: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75750: LD_ADDR_VAR 0 2
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75773: LD_VAR 0 1
75777: NOT
75778: IFTRUE 75811
75780: PUSH
75781: LD_VAR 0 1
75785: PPUSH
75786: CALL_OW 264
75790: PUSH
75791: LD_INT 12
75793: PUSH
75794: LD_INT 51
75796: PUSH
75797: LD_INT 32
75799: PUSH
75800: LD_INT 89
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: IN
75809: NOT
75810: OR
75811: IFFALSE 75815
// exit ;
75813: GO 75913
// for i := 1 to 3 do
75815: LD_ADDR_VAR 0 3
75819: PUSH
75820: DOUBLE
75821: LD_INT 1
75823: DEC
75824: ST_TO_ADDR
75825: LD_INT 3
75827: PUSH
75828: FOR_TO
75829: IFFALSE 75911
// begin tmp := GetCargo ( cargo , i ) ;
75831: LD_ADDR_VAR 0 4
75835: PUSH
75836: LD_VAR 0 1
75840: PPUSH
75841: LD_VAR 0 3
75845: PPUSH
75846: CALL_OW 289
75850: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75851: LD_ADDR_VAR 0 2
75855: PUSH
75856: LD_VAR 0 2
75860: PPUSH
75861: LD_VAR 0 3
75865: PPUSH
75866: LD_VAR 0 4
75870: PPUSH
75871: CALL_OW 1
75875: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75876: LD_ADDR_VAR 0 2
75880: PUSH
75881: LD_VAR 0 2
75885: PPUSH
75886: LD_INT 4
75888: PPUSH
75889: LD_VAR 0 2
75893: PUSH
75894: LD_INT 4
75896: ARRAY
75897: PUSH
75898: LD_VAR 0 4
75902: PLUS
75903: PPUSH
75904: CALL_OW 1
75908: ST_TO_ADDR
// end ;
75909: GO 75828
75911: POP
75912: POP
// end ;
75913: LD_VAR 0 2
75917: RET
// export function Length ( array ) ; begin
75918: LD_INT 0
75920: PPUSH
// result := array + 0 ;
75921: LD_ADDR_VAR 0 2
75925: PUSH
75926: LD_VAR 0 1
75930: PUSH
75931: LD_INT 0
75933: PLUS
75934: ST_TO_ADDR
// end ;
75935: LD_VAR 0 2
75939: RET
// export function PrepareArray ( array ) ; begin
75940: LD_INT 0
75942: PPUSH
// result := array diff 0 ;
75943: LD_ADDR_VAR 0 2
75947: PUSH
75948: LD_VAR 0 1
75952: PUSH
75953: LD_INT 0
75955: DIFF
75956: ST_TO_ADDR
// if not result [ 1 ] then
75957: LD_VAR 0 2
75961: PUSH
75962: LD_INT 1
75964: ARRAY
75965: NOT
75966: IFFALSE 75986
// result := Delete ( result , 1 ) ;
75968: LD_ADDR_VAR 0 2
75972: PUSH
75973: LD_VAR 0 2
75977: PPUSH
75978: LD_INT 1
75980: PPUSH
75981: CALL_OW 3
75985: ST_TO_ADDR
// end ;
75986: LD_VAR 0 2
75990: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75991: LD_INT 0
75993: PPUSH
75994: PPUSH
75995: PPUSH
75996: PPUSH
// sibRocketRange := 25 ;
75997: LD_ADDR_VAR 0 6
76001: PUSH
76002: LD_INT 25
76004: ST_TO_ADDR
// result := false ;
76005: LD_ADDR_VAR 0 4
76009: PUSH
76010: LD_INT 0
76012: ST_TO_ADDR
// for i := 0 to 5 do
76013: LD_ADDR_VAR 0 5
76017: PUSH
76018: DOUBLE
76019: LD_INT 0
76021: DEC
76022: ST_TO_ADDR
76023: LD_INT 5
76025: PUSH
76026: FOR_TO
76027: IFFALSE 76094
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76029: LD_VAR 0 1
76033: PPUSH
76034: LD_VAR 0 5
76038: PPUSH
76039: LD_VAR 0 6
76043: PPUSH
76044: CALL_OW 272
76048: PPUSH
76049: LD_VAR 0 2
76053: PPUSH
76054: LD_VAR 0 5
76058: PPUSH
76059: LD_VAR 0 6
76063: PPUSH
76064: CALL_OW 273
76068: PPUSH
76069: LD_VAR 0 3
76073: PPUSH
76074: CALL_OW 309
76078: IFFALSE 76092
// begin result := true ;
76080: LD_ADDR_VAR 0 4
76084: PUSH
76085: LD_INT 1
76087: ST_TO_ADDR
// exit ;
76088: POP
76089: POP
76090: GO 76096
// end ;
76092: GO 76026
76094: POP
76095: POP
// end ;
76096: LD_VAR 0 4
76100: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76101: LD_INT 0
76103: PPUSH
76104: PPUSH
76105: PPUSH
// if btype = b_depot then
76106: LD_VAR 0 2
76110: PUSH
76111: LD_INT 0
76113: EQUAL
76114: IFFALSE 76126
// begin result := true ;
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: LD_INT 1
76123: ST_TO_ADDR
// exit ;
76124: GO 76246
// end ; pom := GetBase ( depot ) ;
76126: LD_ADDR_VAR 0 4
76130: PUSH
76131: LD_VAR 0 1
76135: PPUSH
76136: CALL_OW 274
76140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76141: LD_ADDR_VAR 0 5
76145: PUSH
76146: LD_VAR 0 2
76150: PPUSH
76151: LD_VAR 0 1
76155: PPUSH
76156: CALL_OW 248
76160: PPUSH
76161: CALL_OW 450
76165: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76166: LD_ADDR_VAR 0 3
76170: PUSH
76171: LD_VAR 0 4
76175: PPUSH
76176: LD_INT 1
76178: PPUSH
76179: CALL_OW 275
76183: PUSH
76184: LD_VAR 0 5
76188: PUSH
76189: LD_INT 1
76191: ARRAY
76192: GREATEREQUAL
76193: IFFALSE 76219
76195: PUSH
76196: LD_VAR 0 4
76200: PPUSH
76201: LD_INT 2
76203: PPUSH
76204: CALL_OW 275
76208: PUSH
76209: LD_VAR 0 5
76213: PUSH
76214: LD_INT 2
76216: ARRAY
76217: GREATEREQUAL
76218: AND
76219: IFFALSE 76245
76221: PUSH
76222: LD_VAR 0 4
76226: PPUSH
76227: LD_INT 3
76229: PPUSH
76230: CALL_OW 275
76234: PUSH
76235: LD_VAR 0 5
76239: PUSH
76240: LD_INT 3
76242: ARRAY
76243: GREATEREQUAL
76244: AND
76245: ST_TO_ADDR
// end ;
76246: LD_VAR 0 3
76250: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76251: LD_INT 0
76253: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76254: LD_VAR 0 1
76258: PPUSH
76259: LD_VAR 0 2
76263: PPUSH
76264: LD_INT 0
76266: PPUSH
76267: LD_INT 0
76269: PPUSH
76270: LD_INT 1
76272: PPUSH
76273: LD_INT 0
76275: PPUSH
76276: CALL_OW 587
// end ;
76280: LD_VAR 0 3
76284: RET
// export function CenterOnNow ( unit ) ; begin
76285: LD_INT 0
76287: PPUSH
// result := IsInUnit ( unit ) ;
76288: LD_ADDR_VAR 0 2
76292: PUSH
76293: LD_VAR 0 1
76297: PPUSH
76298: CALL_OW 310
76302: ST_TO_ADDR
// if not result then
76303: LD_VAR 0 2
76307: NOT
76308: IFFALSE 76320
// result := unit ;
76310: LD_ADDR_VAR 0 2
76314: PUSH
76315: LD_VAR 0 1
76319: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76320: LD_VAR 0 1
76324: PPUSH
76325: CALL_OW 87
// end ;
76329: LD_VAR 0 2
76333: RET
// export function ComMoveHex ( unit , hex ) ; begin
76334: LD_INT 0
76336: PPUSH
// if not hex then
76337: LD_VAR 0 2
76341: NOT
76342: IFFALSE 76346
// exit ;
76344: GO 76399
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76346: LD_VAR 0 2
76350: PUSH
76351: LD_INT 1
76353: ARRAY
76354: PPUSH
76355: LD_VAR 0 2
76359: PUSH
76360: LD_INT 2
76362: ARRAY
76363: PPUSH
76364: CALL_OW 428
76368: IFFALSE 76372
// exit ;
76370: GO 76399
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76372: LD_VAR 0 1
76376: PPUSH
76377: LD_VAR 0 2
76381: PUSH
76382: LD_INT 1
76384: ARRAY
76385: PPUSH
76386: LD_VAR 0 2
76390: PUSH
76391: LD_INT 2
76393: ARRAY
76394: PPUSH
76395: CALL_OW 111
// end ;
76399: LD_VAR 0 3
76403: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76404: LD_INT 0
76406: PPUSH
76407: PPUSH
76408: PPUSH
// if not unit or not enemy then
76409: LD_VAR 0 1
76413: NOT
76414: IFTRUE 76423
76416: PUSH
76417: LD_VAR 0 2
76421: NOT
76422: OR
76423: IFFALSE 76427
// exit ;
76425: GO 76553
// x := GetX ( enemy ) ;
76427: LD_ADDR_VAR 0 4
76431: PUSH
76432: LD_VAR 0 2
76436: PPUSH
76437: CALL_OW 250
76441: ST_TO_ADDR
// y := GetY ( enemy ) ;
76442: LD_ADDR_VAR 0 5
76446: PUSH
76447: LD_VAR 0 2
76451: PPUSH
76452: CALL_OW 251
76456: ST_TO_ADDR
// if ValidHex ( x , y ) then
76457: LD_VAR 0 4
76461: PPUSH
76462: LD_VAR 0 5
76466: PPUSH
76467: CALL_OW 488
76471: IFFALSE 76553
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76473: LD_VAR 0 2
76477: PPUSH
76478: CALL_OW 247
76482: PUSH
76483: LD_INT 3
76485: PUSH
76486: LD_INT 2
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: IN
76493: IFTRUE 76516
76495: PUSH
76496: LD_VAR 0 1
76500: PPUSH
76501: CALL_OW 255
76505: PPUSH
76506: LD_VAR 0 2
76510: PPUSH
76511: CALL_OW 292
76515: OR
76516: IFFALSE 76534
// ComAttackUnit ( unit , enemy ) else
76518: LD_VAR 0 1
76522: PPUSH
76523: LD_VAR 0 2
76527: PPUSH
76528: CALL_OW 115
76532: GO 76553
// ComAgressiveMove ( unit , x , y ) ;
76534: LD_VAR 0 1
76538: PPUSH
76539: LD_VAR 0 4
76543: PPUSH
76544: LD_VAR 0 5
76548: PPUSH
76549: CALL_OW 114
// end ;
76553: LD_VAR 0 3
76557: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76558: LD_INT 0
76560: PPUSH
76561: PPUSH
76562: PPUSH
// list := AreaToList ( area , 0 ) ;
76563: LD_ADDR_VAR 0 5
76567: PUSH
76568: LD_VAR 0 1
76572: PPUSH
76573: LD_INT 0
76575: PPUSH
76576: CALL_OW 517
76580: ST_TO_ADDR
// if not list then
76581: LD_VAR 0 5
76585: NOT
76586: IFFALSE 76590
// exit ;
76588: GO 76720
// if all then
76590: LD_VAR 0 2
76594: IFFALSE 76682
// begin for i := 1 to list [ 1 ] do
76596: LD_ADDR_VAR 0 4
76600: PUSH
76601: DOUBLE
76602: LD_INT 1
76604: DEC
76605: ST_TO_ADDR
76606: LD_VAR 0 5
76610: PUSH
76611: LD_INT 1
76613: ARRAY
76614: PUSH
76615: FOR_TO
76616: IFFALSE 76678
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76618: LD_ADDR_VAR 0 3
76622: PUSH
76623: LD_VAR 0 3
76627: PPUSH
76628: LD_VAR 0 3
76632: PUSH
76633: LD_INT 1
76635: PLUS
76636: PPUSH
76637: LD_VAR 0 5
76641: PUSH
76642: LD_INT 1
76644: ARRAY
76645: PUSH
76646: LD_VAR 0 4
76650: ARRAY
76651: PUSH
76652: LD_VAR 0 5
76656: PUSH
76657: LD_INT 2
76659: ARRAY
76660: PUSH
76661: LD_VAR 0 4
76665: ARRAY
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PPUSH
76671: CALL_OW 1
76675: ST_TO_ADDR
76676: GO 76615
76678: POP
76679: POP
// exit ;
76680: GO 76720
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76682: LD_ADDR_VAR 0 3
76686: PUSH
76687: LD_VAR 0 5
76691: PUSH
76692: LD_INT 1
76694: ARRAY
76695: PUSH
76696: LD_INT 1
76698: ARRAY
76699: PUSH
76700: LD_VAR 0 5
76704: PUSH
76705: LD_INT 2
76707: ARRAY
76708: PUSH
76709: LD_INT 1
76711: ARRAY
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: EMPTY
76718: LIST
76719: ST_TO_ADDR
// end ;
76720: LD_VAR 0 3
76724: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76725: LD_INT 0
76727: PPUSH
76728: PPUSH
// list := AreaToList ( area , 0 ) ;
76729: LD_ADDR_VAR 0 4
76733: PUSH
76734: LD_VAR 0 1
76738: PPUSH
76739: LD_INT 0
76741: PPUSH
76742: CALL_OW 517
76746: ST_TO_ADDR
// if not list then
76747: LD_VAR 0 4
76751: NOT
76752: IFFALSE 76756
// exit ;
76754: GO 76797
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76756: LD_ADDR_VAR 0 3
76760: PUSH
76761: LD_VAR 0 4
76765: PUSH
76766: LD_INT 1
76768: ARRAY
76769: PUSH
76770: LD_INT 1
76772: ARRAY
76773: PUSH
76774: LD_VAR 0 4
76778: PUSH
76779: LD_INT 2
76781: ARRAY
76782: PUSH
76783: LD_INT 1
76785: ARRAY
76786: PUSH
76787: LD_VAR 0 2
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: LIST
76796: ST_TO_ADDR
// end ;
76797: LD_VAR 0 3
76801: RET
// export function First ( array ) ; begin
76802: LD_INT 0
76804: PPUSH
// if not array then
76805: LD_VAR 0 1
76809: NOT
76810: IFFALSE 76814
// exit ;
76812: GO 76828
// result := array [ 1 ] ;
76814: LD_ADDR_VAR 0 2
76818: PUSH
76819: LD_VAR 0 1
76823: PUSH
76824: LD_INT 1
76826: ARRAY
76827: ST_TO_ADDR
// end ;
76828: LD_VAR 0 2
76832: RET
// export function Last ( array ) ; begin
76833: LD_INT 0
76835: PPUSH
// if not array then
76836: LD_VAR 0 1
76840: NOT
76841: IFFALSE 76845
// exit ;
76843: GO 76861
// result := array [ array ] ;
76845: LD_ADDR_VAR 0 2
76849: PUSH
76850: LD_VAR 0 1
76854: PUSH
76855: LD_VAR 0 1
76859: ARRAY
76860: ST_TO_ADDR
// end ;
76861: LD_VAR 0 2
76865: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76866: LD_INT 0
76868: PPUSH
76869: PPUSH
// result := [ ] ;
76870: LD_ADDR_VAR 0 5
76874: PUSH
76875: EMPTY
76876: ST_TO_ADDR
// if not array then
76877: LD_VAR 0 1
76881: NOT
76882: IFFALSE 76886
// exit ;
76884: GO 76998
// for i := 1 to array do
76886: LD_ADDR_VAR 0 6
76890: PUSH
76891: DOUBLE
76892: LD_INT 1
76894: DEC
76895: ST_TO_ADDR
76896: LD_VAR 0 1
76900: PUSH
76901: FOR_TO
76902: IFFALSE 76996
// if array [ i ] [ index ] = value then
76904: LD_VAR 0 1
76908: PUSH
76909: LD_VAR 0 6
76913: ARRAY
76914: PUSH
76915: LD_VAR 0 2
76919: ARRAY
76920: PUSH
76921: LD_VAR 0 3
76925: EQUAL
76926: IFFALSE 76994
// begin if indexColumn then
76928: LD_VAR 0 4
76932: IFFALSE 76968
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76934: LD_ADDR_VAR 0 5
76938: PUSH
76939: LD_VAR 0 5
76943: PPUSH
76944: LD_VAR 0 1
76948: PUSH
76949: LD_VAR 0 6
76953: ARRAY
76954: PUSH
76955: LD_VAR 0 4
76959: ARRAY
76960: PPUSH
76961: CALL 72006 0 2
76965: ST_TO_ADDR
76966: GO 76994
// result := Join ( result , array [ i ] ) ;
76968: LD_ADDR_VAR 0 5
76972: PUSH
76973: LD_VAR 0 5
76977: PPUSH
76978: LD_VAR 0 1
76982: PUSH
76983: LD_VAR 0 6
76987: ARRAY
76988: PPUSH
76989: CALL 72006 0 2
76993: ST_TO_ADDR
// end ;
76994: GO 76901
76996: POP
76997: POP
// end ;
76998: LD_VAR 0 5
77002: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77003: LD_INT 0
77005: PPUSH
// if not vehicles or not parkingPoint then
77006: LD_VAR 0 1
77010: NOT
77011: IFTRUE 77020
77013: PUSH
77014: LD_VAR 0 2
77018: NOT
77019: OR
77020: IFFALSE 77024
// exit ;
77022: GO 77122
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77024: LD_ADDR_VAR 0 1
77028: PUSH
77029: LD_VAR 0 1
77033: PPUSH
77034: LD_INT 50
77036: PUSH
77037: EMPTY
77038: LIST
77039: PUSH
77040: LD_INT 3
77042: PUSH
77043: LD_INT 92
77045: PUSH
77046: LD_VAR 0 2
77050: PUSH
77051: LD_INT 1
77053: ARRAY
77054: PUSH
77055: LD_VAR 0 2
77059: PUSH
77060: LD_INT 2
77062: ARRAY
77063: PUSH
77064: LD_INT 8
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PPUSH
77081: CALL_OW 72
77085: ST_TO_ADDR
// if not vehicles then
77086: LD_VAR 0 1
77090: NOT
77091: IFFALSE 77095
// exit ;
77093: GO 77122
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77095: LD_VAR 0 1
77099: PPUSH
77100: LD_VAR 0 2
77104: PUSH
77105: LD_INT 1
77107: ARRAY
77108: PPUSH
77109: LD_VAR 0 2
77113: PUSH
77114: LD_INT 2
77116: ARRAY
77117: PPUSH
77118: CALL_OW 111
// end ;
77122: LD_VAR 0 3
77126: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77127: LD_INT 0
77129: PPUSH
77130: PPUSH
77131: PPUSH
// if not side or not area then
77132: LD_VAR 0 1
77136: NOT
77137: IFTRUE 77146
77139: PUSH
77140: LD_VAR 0 2
77144: NOT
77145: OR
77146: IFFALSE 77150
// exit ;
77148: GO 77269
// tmp := AreaToList ( area , 0 ) ;
77150: LD_ADDR_VAR 0 5
77154: PUSH
77155: LD_VAR 0 2
77159: PPUSH
77160: LD_INT 0
77162: PPUSH
77163: CALL_OW 517
77167: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
77168: LD_ADDR_VAR 0 4
77172: PUSH
77173: DOUBLE
77174: LD_INT 1
77176: DEC
77177: ST_TO_ADDR
77178: LD_VAR 0 5
77182: PUSH
77183: LD_INT 1
77185: ARRAY
77186: PUSH
77187: FOR_TO
77188: IFFALSE 77267
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
77190: LD_VAR 0 5
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PUSH
77199: LD_VAR 0 4
77203: ARRAY
77204: PPUSH
77205: LD_VAR 0 5
77209: PUSH
77210: LD_INT 2
77212: ARRAY
77213: PUSH
77214: LD_VAR 0 4
77218: ARRAY
77219: PPUSH
77220: CALL_OW 351
77224: IFFALSE 77265
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77226: LD_VAR 0 5
77230: PUSH
77231: LD_INT 1
77233: ARRAY
77234: PUSH
77235: LD_VAR 0 4
77239: ARRAY
77240: PPUSH
77241: LD_VAR 0 5
77245: PUSH
77246: LD_INT 2
77248: ARRAY
77249: PUSH
77250: LD_VAR 0 4
77254: ARRAY
77255: PPUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL_OW 244
// end ;
77265: GO 77187
77267: POP
77268: POP
// end ;
77269: LD_VAR 0 3
77273: RET
// export function UniqueArray ( array ) ; var i ; begin
77274: LD_INT 0
77276: PPUSH
77277: PPUSH
// result := [ ] ;
77278: LD_ADDR_VAR 0 2
77282: PUSH
77283: EMPTY
77284: ST_TO_ADDR
// if not array then
77285: LD_VAR 0 1
77289: NOT
77290: IFFALSE 77294
// exit ;
77292: GO 77355
// for i := 1 to array do
77294: LD_ADDR_VAR 0 3
77298: PUSH
77299: DOUBLE
77300: LD_INT 1
77302: DEC
77303: ST_TO_ADDR
77304: LD_VAR 0 1
77308: PUSH
77309: FOR_TO
77310: IFFALSE 77353
// if not array [ i ] in result then
77312: LD_VAR 0 1
77316: PUSH
77317: LD_VAR 0 3
77321: ARRAY
77322: PUSH
77323: LD_VAR 0 2
77327: IN
77328: NOT
77329: IFFALSE 77351
// result := Join ( result , i ) ;
77331: LD_ADDR_VAR 0 2
77335: PUSH
77336: LD_VAR 0 2
77340: PPUSH
77341: LD_VAR 0 3
77345: PPUSH
77346: CALL 72006 0 2
77350: ST_TO_ADDR
77351: GO 77309
77353: POP
77354: POP
// end ; end_of_file
77355: LD_VAR 0 2
77359: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77360: LD_VAR 0 1
77364: PUSH
77365: LD_INT 200
77367: DOUBLE
77368: GREATEREQUAL
77369: IFFALSE 77377
77371: LD_INT 299
77373: DOUBLE
77374: LESSEQUAL
77375: IFTRUE 77379
77377: GO 77411
77379: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77380: LD_VAR 0 1
77384: PPUSH
77385: LD_VAR 0 2
77389: PPUSH
77390: LD_VAR 0 3
77394: PPUSH
77395: LD_VAR 0 4
77399: PPUSH
77400: LD_VAR 0 5
77404: PPUSH
77405: CALL 28316 0 5
77409: GO 77488
77411: LD_INT 300
77413: DOUBLE
77414: GREATEREQUAL
77415: IFFALSE 77423
77417: LD_INT 399
77419: DOUBLE
77420: LESSEQUAL
77421: IFTRUE 77425
77423: GO 77487
77425: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77426: LD_VAR 0 1
77430: PPUSH
77431: LD_VAR 0 2
77435: PPUSH
77436: LD_VAR 0 3
77440: PPUSH
77441: LD_VAR 0 4
77445: PPUSH
77446: LD_VAR 0 5
77450: PPUSH
77451: LD_VAR 0 6
77455: PPUSH
77456: LD_VAR 0 7
77460: PPUSH
77461: LD_VAR 0 8
77465: PPUSH
77466: LD_VAR 0 9
77470: PPUSH
77471: LD_VAR 0 10
77475: PPUSH
77476: LD_VAR 0 11
77480: PPUSH
77481: CALL 24200 0 11
77485: GO 77488
77487: POP
// end ;
77488: PPOPN 11
77490: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77491: LD_VAR 0 1
77495: PPUSH
77496: LD_VAR 0 2
77500: PPUSH
77501: LD_VAR 0 3
77505: PPUSH
77506: LD_VAR 0 4
77510: PPUSH
77511: LD_VAR 0 5
77515: PPUSH
77516: CALL 27697 0 5
// end ; end_of_file
77520: PPOPN 5
77522: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77523: LD_VAR 0 1
77527: PPUSH
77528: LD_VAR 0 2
77532: PPUSH
77533: LD_VAR 0 3
77537: PPUSH
77538: LD_VAR 0 4
77542: PPUSH
77543: LD_VAR 0 5
77547: PPUSH
77548: LD_VAR 0 6
77552: PPUSH
77553: CALL 11740 0 6
// end ;
77557: PPOPN 6
77559: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77560: LD_INT 0
77562: PPUSH
// begin if not units then
77563: LD_VAR 0 1
77567: NOT
77568: IFFALSE 77572
// exit ;
77570: GO 77606
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77572: LD_VAR 0 1
77576: PPUSH
77577: LD_VAR 0 2
77581: PPUSH
77582: LD_VAR 0 3
77586: PPUSH
77587: LD_VAR 0 4
77591: PPUSH
77592: LD_VAR 0 5
77596: PPUSH
77597: LD_VAR 0 6
77601: PPUSH
77602: CALL 33823 0 6
// end ;
77606: PPOPN 7
77608: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77609: CALL 11627 0 0
// end ;
77613: PPOPN 1
77615: END
