// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// PrepareNature ;
 111: CALL 1350 0 0
// PrepareDifficulty ;
 115: CALL 1703 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 873 0 0
// PrepareRussianBase ;
 127: CALL 1113 0 0
// PrepareCommander ;
 131: CALL 1058 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING 13f_JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 1496 0 2
 598: ST_TO_ADDR
// if debugMode then
 599: LD_EXP 16
 603: IFFALSE 618
// JMM := NewCharacter ( JMM ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING JMM
 612: PPUSH
 613: CALL_OW 25
 617: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 95
 625: PPUSH
 626: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 630: LD_EXP 1
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 642: LD_ADDR_EXP 5
 646: PUSH
 647: LD_STRING Powell
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL 1496 0 2
 657: ST_TO_ADDR
// uc_side = 4 ;
 658: LD_ADDR_OWVAR 20
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 666: LD_ADDR_EXP 2
 670: PUSH
 671: LD_STRING 10c_Joan
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 1496 0 2
 681: ST_TO_ADDR
// if Joan then
 682: LD_EXP 2
 686: IFFALSE 725
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 688: LD_EXP 2
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 703: LD_EXP 2
 707: PPUSH
 708: LD_INT 4
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 1 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// end else
 723: GO 782
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_STRING 13s_Lisa
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL 1496 0 2
 740: ST_TO_ADDR
// if Lisa then
 741: LD_EXP 3
 745: IFFALSE 782
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL_OW 336
// JMMGirl = 2 ;
 774: LD_ADDR_EXP 7
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 782: LD_EXP 2
 786: NOT
 787: PUSH
 788: LD_EXP 3
 792: NOT
 793: AND
 794: IFFALSE 844
// begin Connie = NewCharacter ( Coonie ) ;
 796: LD_ADDR_EXP 4
 800: PUSH
 801: LD_STRING Coonie
 803: PPUSH
 804: CALL_OW 25
 808: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 809: LD_EXP 4
 813: PPUSH
 814: LD_INT 4
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: CALL_OW 336
// JMMGirl = 3 ;
 836: LD_ADDR_EXP 7
 840: PUSH
 841: LD_INT 3
 843: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 844: LD_EXP 2
 848: PUSH
 849: LD_EXP 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 140
// end ;
 868: LD_VAR 0 1
 872: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 873: LD_INT 0
 875: PPUSH
 876: PPUSH
 877: PPUSH
// for i = 1 to 5 do
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 5
 890: PUSH
 891: FOR_TO
 892: IFFALSE 1051
// begin vc_engine = rand ( 1 , 3 ) ;
 894: LD_ADDR_OWVAR 39
 898: PUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 3
 904: PPUSH
 905: CALL_OW 12
 909: ST_TO_ADDR
// vc_control = control_remote ;
 910: LD_ADDR_OWVAR 38
 914: PUSH
 915: LD_INT 2
 917: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 918: LD_ADDR_OWVAR 40
 922: PUSH
 923: LD_INT 5
 925: PUSH
 926: LD_INT 12
 928: PUSH
 929: LD_INT 13
 931: PUSH
 932: LD_INT 7
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 4
 948: MOD
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 955: LD_ADDR_OWVAR 37
 959: PUSH
 960: LD_INT 3
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_VAR 0 2
 974: PUSH
 975: LD_INT 2
 977: MOD
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: ARRAY
 983: ST_TO_ADDR
// veh = CreateVehicle ;
 984: LD_ADDR_VAR 0 3
 988: PUSH
 989: CALL_OW 45
 993: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 994: LD_VAR 0 3
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: LD_INT 5
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1014: LD_VAR 0 3
1018: PPUSH
1019: LD_INT 500
1021: PPUSH
1022: LD_INT 1000
1024: PPUSH
1025: CALL_OW 12
1029: PPUSH
1030: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1034: LD_VAR 0 3
1038: PPUSH
1039: LD_INT 15
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end ;
1049: GO 891
1051: POP
1052: POP
// end ; end_of_file
1053: LD_VAR 0 1
1057: RET
// export function PrepareCommander ; begin
1058: LD_INT 0
1060: PPUSH
// uc_side = 3 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 3
1068: ST_TO_ADDR
// uc_nation = 3 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 3
1076: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
1077: LD_ADDR_EXP 6
1081: PUSH
1082: LD_STRING Eisenstein
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL 1496 0 2
1092: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1093: LD_EXP 6
1097: PPUSH
1098: LD_INT 11
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// end ;
1108: LD_VAR 0 1
1112: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1113: LD_INT 0
1115: PPUSH
// uc_nation := 3 ;
1116: LD_ADDR_OWVAR 21
1120: PUSH
1121: LD_INT 3
1123: ST_TO_ADDR
// uc_side := 3 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 3
1131: ST_TO_ADDR
// if Difficulty > 1 then
1132: LD_OWVAR 67
1136: PUSH
1137: LD_INT 1
1139: GREATER
1140: IFFALSE 1200
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PUSH
1151: LD_INT 8
1153: PUSH
1154: LD_INT 9
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// baseGuard := CreateHuman ;
1172: LD_ADDR_EXP 18
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1182: LD_EXP 18
1186: PPUSH
1187: LD_INT 39
1189: PPUSH
1190: LD_INT 67
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1200: LD_INT 116
1202: PPUSH
1203: LD_INT 50
1205: PPUSH
1206: LD_INT 74
1208: PPUSH
1209: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 3
1218: PPUSH
1219: LD_INT 45
1221: PPUSH
1222: LD_INT 10
1224: PPUSH
1225: LD_INT 9
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 10
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 10
1268: PPUSH
1269: LD_INT 3
1271: PPUSH
1272: LD_INT 3
1274: PPUSH
1275: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 3
1284: PPUSH
1285: LD_INT 40
1287: PPUSH
1288: LD_INT 10
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 14
1309: PPUSH
1310: LD_INT 10
1312: PPUSH
1313: LD_INT 4
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 15
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 1593 0 6
// end ; end_of_file
1345: LD_VAR 0 1
1349: RET
// export function PrepareNature ; var i ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
// uc_side := 0 ;
1354: LD_ADDR_OWVAR 20
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_nation := 0 ;
1362: LD_ADDR_OWVAR 21
1366: PUSH
1367: LD_INT 0
1369: ST_TO_ADDR
// hc_class := class_apeman ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 12
1377: ST_TO_ADDR
// hc_gallery :=  ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING 
1385: ST_TO_ADDR
// hc_name :=  ;
1386: LD_ADDR_OWVAR 26
1390: PUSH
1391: LD_STRING 
1393: ST_TO_ADDR
// for i = 1 to 7 do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_INT 7
1406: PUSH
1407: FOR_TO
1408: IFFALSE 1489
// begin hc_class := class_apeman ;
1410: LD_ADDR_OWVAR 28
1414: PUSH
1415: LD_INT 12
1417: ST_TO_ADDR
// hc_gallery :=  ;
1418: LD_ADDR_OWVAR 33
1422: PUSH
1423: LD_STRING 
1425: ST_TO_ADDR
// hc_name :=  ;
1426: LD_ADDR_OWVAR 26
1430: PUSH
1431: LD_STRING 
1433: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1434: LD_ADDR_OWVAR 31
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: LD_INT 0
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1457: LD_ADDR_OWVAR 29
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 10
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1472: CALL_OW 44
1476: PPUSH
1477: LD_INT 16
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ;
1487: GO 1407
1489: POP
1490: POP
// end ;
1491: LD_VAR 0 1
1495: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
// if exist_mode then
1500: LD_VAR 0 2
1504: IFFALSE 1523
// begin unit := CreateCharacter ( ident ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 1
1515: PPUSH
1516: CALL_OW 34
1520: ST_TO_ADDR
// end else
1521: GO 1538
// begin unit := NewCharacter ( ident ) ;
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 25
1537: ST_TO_ADDR
// end ; result := unit ;
1538: LD_ADDR_VAR 0 3
1542: PUSH
1543: LD_VAR 0 4
1547: ST_TO_ADDR
// end ;
1548: LD_VAR 0 3
1552: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
// for i in charactersList do
1557: LD_ADDR_VAR 0 4
1561: PUSH
1562: LD_VAR 0 1
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1586
// SaveCharacters ( i , ident ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 38
1584: GO 1567
1586: POP
1587: POP
// end ;
1588: LD_VAR 0 3
1592: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1593: LD_INT 0
1595: PPUSH
1596: PPUSH
1597: PPUSH
1598: PPUSH
// for i = 1 to count do
1599: LD_ADDR_VAR 0 8
1603: PUSH
1604: DOUBLE
1605: LD_INT 1
1607: DEC
1608: ST_TO_ADDR
1609: LD_VAR 0 6
1613: PUSH
1614: FOR_TO
1615: IFFALSE 1696
// begin uc_side = side ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_VAR 0 1
1626: ST_TO_ADDR
// uc_nation = nation ;
1627: LD_ADDR_OWVAR 21
1631: PUSH
1632: LD_VAR 0 2
1636: ST_TO_ADDR
// hc_gallery =  ;
1637: LD_ADDR_OWVAR 33
1641: PUSH
1642: LD_STRING 
1644: ST_TO_ADDR
// hc_name =  ;
1645: LD_ADDR_OWVAR 26
1649: PUSH
1650: LD_STRING 
1652: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1653: LD_INT 0
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: CALL_OW 380
// un = CreateHuman ;
1670: LD_ADDR_VAR 0 10
1674: PUSH
1675: CALL_OW 44
1679: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1680: LD_VAR 0 10
1684: PPUSH
1685: LD_VAR 0 3
1689: PPUSH
1690: CALL_OW 52
// end ;
1694: GO 1614
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 7
1702: RET
// export function PrepareDifficulty ; begin
1703: LD_INT 0
1705: PPUSH
// if difficulty = 1 then
1706: LD_OWVAR 67
1710: PUSH
1711: LD_INT 1
1713: EQUAL
1714: IFFALSE 1794
// begin SetTech ( 57 , 3 , state_disabled ) ;
1716: LD_INT 57
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1729: LD_INT 58
1731: PPUSH
1732: LD_INT 3
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1742: LD_INT 59
1744: PPUSH
1745: LD_INT 3
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1755: LD_INT 51
1757: PPUSH
1758: LD_INT 3
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1768: LD_INT 52
1770: PPUSH
1771: LD_INT 3
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1781: LD_INT 53
1783: PPUSH
1784: LD_INT 3
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 322
// end ; if difficulty = 2 then
1794: LD_OWVAR 67
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1882
// begin SetTech ( 57 , 3 , state_enabled ) ;
1804: LD_INT 57
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1817: LD_INT 58
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1830: LD_INT 59
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1843: LD_INT 51
1845: PPUSH
1846: LD_INT 3
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1856: LD_INT 52
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1869: LD_INT 53
1871: PPUSH
1872: LD_INT 3
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 322
// end ; if difficulty = 3 then
1882: LD_OWVAR 67
1886: PUSH
1887: LD_INT 3
1889: EQUAL
1890: IFFALSE 1970
// begin SetTech ( 57 , 3 , state_enabled ) ;
1892: LD_INT 57
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1905: LD_INT 58
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1918: LD_INT 59
1920: PPUSH
1921: LD_INT 3
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1931: LD_INT 51
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1944: LD_INT 52
1946: PPUSH
1947: LD_INT 3
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1957: LD_INT 53
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 322
// end ; end ;
1970: LD_VAR 0 1
1974: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1982: LD_ADDR_VAR 0 8
1986: PUSH
1987: LD_INT 48
1989: PUSH
1990: LD_INT 49
1992: PUSH
1993: LD_INT 50
1995: PUSH
1996: LD_INT 20
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 69
2004: PUSH
2005: LD_INT 39
2007: PUSH
2008: LD_INT 34
2010: PUSH
2011: LD_INT 40
2013: PUSH
2014: LD_INT 71
2016: PUSH
2017: LD_INT 57
2019: PUSH
2020: LD_INT 58
2022: PUSH
2023: LD_INT 44
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: LD_INT 27
2031: PUSH
2032: LD_INT 23
2034: PUSH
2035: LD_INT 33
2037: PUSH
2038: LD_INT 54
2040: PUSH
2041: LD_INT 55
2043: PUSH
2044: LD_INT 56
2046: PUSH
2047: LD_INT 63
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: LD_INT 65
2055: PUSH
2056: LD_INT 30
2058: PUSH
2059: LD_INT 31
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 25
2070: PUSH
2071: LD_INT 51
2073: PUSH
2074: LD_INT 52
2076: PUSH
2077: LD_INT 59
2079: PUSH
2080: LD_INT 53
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2117: LD_ADDR_VAR 0 5
2121: PUSH
2122: DOUBLE
2123: LD_INT 1
2125: DEC
2126: ST_TO_ADDR
2127: LD_VAR 0 8
2131: PUSH
2132: FOR_TO
2133: IFFALSE 2209
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2135: LD_VAR 0 8
2139: PUSH
2140: LD_VAR 0 5
2144: ARRAY
2145: PPUSH
2146: LD_VAR 0 1
2150: PPUSH
2151: CALL_OW 321
2155: PUSH
2156: LD_INT 1
2158: EQUAL
2159: PUSH
2160: LD_VAR 0 8
2164: PUSH
2165: LD_VAR 0 5
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 3
2175: PPUSH
2176: CALL_OW 482
2180: PUSH
2181: LD_INT 1
2183: EQUAL
2184: AND
2185: IFFALSE 2207
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 8
2196: PUSH
2197: LD_VAR 0 5
2201: ARRAY
2202: PPUSH
2203: CALL_OW 184
2207: GO 2132
2209: POP
2210: POP
// end ;
2211: LD_VAR 0 4
2215: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2216: LD_INT 0
2218: PPUSH
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_VAR 0 2
2233: PPUSH
2234: CALL_OW 313
2238: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 24
2273: PUSH
2274: LD_INT 750
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 54
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 70
2304: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 3
2314: PPUSH
2315: LD_INT 22
2317: PUSH
2318: LD_VAR 0 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 21
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 24
2342: PUSH
2343: LD_INT 1000
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: PPUSH
2362: CALL_OW 70
2366: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2367: LD_VAR 0 6
2371: NOT
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_VAR 0 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 2
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 24
2397: PUSH
2398: LD_INT 250
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PPUSH
2410: CALL_OW 69
2414: NOT
2415: AND
2416: IFFALSE 2420
// exit ;
2418: GO 2602
// if buildings_list > 0 and engineerOkInside then
2420: LD_VAR 0 6
2424: PUSH
2425: LD_INT 0
2427: GREATER
2428: PUSH
2429: LD_VAR 0 8
2433: AND
2434: IFFALSE 2445
// ComExitBuilding ( engineerOkInside ) ;
2436: LD_VAR 0 8
2440: PPUSH
2441: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2445: LD_VAR 0 6
2449: PUSH
2450: LD_INT 0
2452: GREATER
2453: PUSH
2454: LD_VAR 0 9
2458: PUSH
2459: LD_INT 0
2461: GREATER
2462: AND
2463: IFFALSE 2483
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2465: LD_VAR 0 9
2469: PPUSH
2470: LD_VAR 0 6
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2483: LD_VAR 0 6
2487: PUSH
2488: LD_INT 0
2490: EQUAL
2491: PUSH
2492: LD_VAR 0 4
2496: PUSH
2497: LD_INT 0
2499: EQUAL
2500: AND
2501: PUSH
2502: LD_VAR 0 9
2506: PUSH
2507: LD_INT 0
2509: GREATER
2510: AND
2511: IFFALSE 2527
// ComEnterUnit ( engineerOkOutside , building ) ;
2513: LD_VAR 0 9
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2527: LD_VAR 0 9
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_VAR 0 6
2540: PUSH
2541: LD_INT 0
2543: EQUAL
2544: AND
2545: PUSH
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 0
2553: GREATER
2554: AND
2555: IFFALSE 2602
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2557: LD_VAR 0 9
2561: PPUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 3
2587: ARRAY
2588: PPUSH
2589: LD_VAR 0 4
2593: PUSH
2594: LD_INT 4
2596: ARRAY
2597: PPUSH
2598: CALL_OW 145
// end ;
2602: LD_VAR 0 5
2606: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2607: LD_INT 0
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2618: LD_ADDR_VAR 0 6
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 4
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 23
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 24
2657: PUSH
2658: LD_INT 251
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2676: LD_ADDR_VAR 0 7
2680: PUSH
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 23
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 25
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 50
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 70
2734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2735: LD_ADDR_VAR 0 10
2739: PUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 22
2747: PUSH
2748: LD_VAR 0 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 21
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 25
2772: PUSH
2773: LD_INT 3
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 24
2789: PUSH
2790: LD_INT 750
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 70
2811: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2812: LD_ADDR_VAR 0 11
2816: PUSH
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 22
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 21
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 3
2846: PUSH
2847: LD_INT 25
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 24
2866: PUSH
2867: LD_INT 1000
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PPUSH
2884: CALL_OW 70
2888: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2889: LD_VAR 0 10
2893: NOT
2894: PUSH
2895: LD_VAR 0 11
2899: NOT
2900: AND
2901: PUSH
2902: LD_VAR 0 6
2906: NOT
2907: AND
2908: IFFALSE 2912
// exit ;
2910: GO 3146
// if damageUnits > 0 and sci_list > 0 then
2912: LD_VAR 0 10
2916: PUSH
2917: LD_INT 0
2919: GREATER
2920: PUSH
2921: LD_VAR 0 6
2925: PUSH
2926: LD_INT 0
2928: GREATER
2929: AND
2930: IFFALSE 2946
// ComMoveToArea ( damageUnits , healArea ) ;
2932: LD_VAR 0 10
2936: PPUSH
2937: LD_VAR 0 2
2941: PPUSH
2942: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2946: LD_VAR 0 11
2950: PUSH
2951: LD_INT 0
2953: GREATER
2954: PUSH
2955: LD_VAR 0 6
2959: PUSH
2960: LD_INT 0
2962: GREATER
2963: AND
2964: IFFALSE 2975
// ComExitBuilding ( sci_list ) ;
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2975: LD_VAR 0 11
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: PUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 0
2991: GREATER
2992: AND
2993: IFFALSE 3013
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2995: LD_VAR 0 7
2999: PPUSH
3000: LD_VAR 0 11
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3013: LD_VAR 0 10
3017: PUSH
3018: LD_INT 0
3020: EQUAL
3021: PUSH
3022: LD_VAR 0 11
3026: PUSH
3027: LD_INT 0
3029: EQUAL
3030: AND
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: LD_INT 0
3039: GREATER
3040: AND
3041: IFFALSE 3146
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3043: LD_ADDR_VAR 0 12
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_VAR 0 1
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 30
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3090: LD_ADDR_VAR 0 13
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 12
3102: PPUSH
3103: CALL_OW 12
3107: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3108: LD_VAR 0 7
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 60
3118: PUSH
3119: EMPTY
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 72
3130: PPUSH
3131: LD_VAR 0 12
3135: PUSH
3136: LD_VAR 0 13
3140: ARRAY
3141: PPUSH
3142: CALL_OW 120
// end ; end ;
3146: LD_VAR 0 5
3150: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// tmpTab = [ ] ;
3157: LD_ADDR_VAR 0 6
3161: PUSH
3162: EMPTY
3163: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3164: LD_INT 22
3166: PUSH
3167: LD_VAR 0 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 30
3178: PUSH
3179: LD_INT 32
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: PUSH
3195: LD_INT 0
3197: GREATER
3198: IFFALSE 3281
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_VAR 0 1
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 30
3219: PUSH
3220: LD_INT 32
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PPUSH
3231: CALL_OW 69
3235: PUSH
3236: FOR_IN
3237: IFFALSE 3279
// begin for j in UnitsInside ( i ) do
3239: LD_ADDR_VAR 0 5
3243: PUSH
3244: LD_VAR 0 4
3248: PPUSH
3249: CALL_OW 313
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3275
// tmpTab = tmpTab ^ j ;
3257: LD_ADDR_VAR 0 6
3261: PUSH
3262: LD_VAR 0 6
3266: PUSH
3267: LD_VAR 0 5
3271: ADD
3272: ST_TO_ADDR
3273: GO 3254
3275: POP
3276: POP
// end ;
3277: GO 3236
3279: POP
3280: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3281: LD_VAR 0 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL_OW 250
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: CALL_OW 251
3305: PPUSH
3306: CALL_OW 114
// end ;
3310: LD_VAR 0 3
3314: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3315: LD_INT 0
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// enable ;
3321: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3322: LD_ADDR_VAR 0 7
3326: PUSH
3327: LD_VAR 0 3
3331: PPUSH
3332: CALL_OW 435
3336: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_VAR 0 1
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 34
3356: PUSH
3357: LD_VAR 0 2
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3375: LD_VAR 0 6
3379: PUSH
3380: LD_INT 0
3382: GREATER
3383: PUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 435
3393: AND
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_INT 0
3402: GREATER
3403: AND
3404: IFFALSE 3453
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3406: LD_VAR 0 6
3410: PUSH
3411: LD_INT 1
3413: ARRAY
3414: PPUSH
3415: LD_VAR 0 7
3419: PUSH
3420: LD_INT 1
3422: ARRAY
3423: PPUSH
3424: LD_VAR 0 7
3428: PUSH
3429: LD_INT 2
3431: ARRAY
3432: PPUSH
3433: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3437: LD_VAR 0 6
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 100
3448: PPUSH
3449: CALL_OW 240
// end ; end ;
3453: LD_VAR 0 4
3457: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_VAR 0 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 31
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 32
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 30
3507: PUSH
3508: LD_INT 33
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 30
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3552: LD_ADDR_VAR 0 7
3556: PUSH
3557: LD_INT 22
3559: PUSH
3560: LD_VAR 0 2
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 21
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 58
3581: PUSH
3582: EMPTY
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3595: LD_VAR 0 6
3599: PUSH
3600: LD_INT 0
3602: GREATER
3603: PUSH
3604: LD_VAR 0 7
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: AND
3613: IFFALSE 3683
// begin for i in turretsList do
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_VAR 0 6
3624: PUSH
3625: FOR_IN
3626: IFFALSE 3681
// begin for j in enemyBuildings do
3628: LD_ADDR_VAR 0 5
3632: PUSH
3633: LD_VAR 0 7
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3677
// begin if GetDistUnits ( i , j ) < 20 then
3641: LD_VAR 0 4
3645: PPUSH
3646: LD_VAR 0 5
3650: PPUSH
3651: CALL_OW 296
3655: PUSH
3656: LD_INT 20
3658: LESS
3659: IFFALSE 3675
// begin ComAttackUnit ( i , j ) ;
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: CALL_OW 115
// end ; end ;
3675: GO 3638
3677: POP
3678: POP
// end ;
3679: GO 3625
3681: POP
3682: POP
// end ; end ;
3683: LD_VAR 0 3
3687: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
// for i = 1 to vehCount do
3692: LD_ADDR_VAR 0 9
3696: PUSH
3697: DOUBLE
3698: LD_INT 1
3700: DEC
3701: ST_TO_ADDR
3702: LD_VAR 0 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3755
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: LD_VAR 0 5
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: LD_VAR 0 4
3734: PUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_VAR 0 4
3742: PPUSH
3743: CALL_OW 12
3747: ARRAY
3748: PPUSH
3749: CALL_OW 185
3753: GO 3707
3755: POP
3756: POP
// end ;
3757: LD_VAR 0 8
3761: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3762: LD_INT 0
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
3770: PPUSH
// if russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
3771: LD_EXP 11
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: GREATEREQUAL
3796: PUSH
3797: LD_EXP 12
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_OWVAR 67
3820: ARRAY
3821: GREATEREQUAL
3822: AND
3823: IFFALSE 4191
// begin if IsOk ( ruTeleport ) then
3825: LD_INT 116
3827: PPUSH
3828: CALL_OW 302
3832: IFFALSE 3884
// begin for j in russianTanks do
3834: LD_ADDR_VAR 0 4
3838: PUSH
3839: LD_EXP 11
3843: PUSH
3844: FOR_IN
3845: IFFALSE 3875
// if j mod 3 = 0 then
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 3
3854: MOD
3855: PUSH
3856: LD_INT 0
3858: EQUAL
3859: IFFALSE 3873
// ComEnterUnit ( j , ruTeleport ) ;
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_INT 116
3868: PPUSH
3869: CALL_OW 120
3873: GO 3844
3875: POP
3876: POP
// wait ( 0 0$5 ) ;
3877: LD_INT 175
3879: PPUSH
3880: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// for j in russianTanks do
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 11
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4179
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3904: LD_ADDR_VAR 0 5
3908: PUSH
3909: LD_EXP 12
3913: PPUSH
3914: LD_INT 3
3916: PUSH
3917: LD_INT 60
3919: PUSH
3920: EMPTY
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 72
3931: ST_TO_ADDR
// if tmp then
3932: LD_VAR 0 5
3936: IFFALSE 3952
// ComMoveUnit ( tmp , j ) ;
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_VAR 0 4
3947: PPUSH
3948: CALL_OW 112
// if GetSide ( j ) <> side then
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL_OW 255
3961: PUSH
3962: LD_VAR 0 1
3966: NONEQUAL
3967: IFFALSE 3980
// begin ComStop ( j ) ;
3969: LD_VAR 0 4
3973: PPUSH
3974: CALL_OW 141
// continue ;
3978: GO 3901
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3980: LD_ADDR_VAR 0 7
3984: PUSH
3985: LD_INT 81
3987: PUSH
3988: LD_VAR 0 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 101
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: PPUSH
4016: LD_VAR 0 4
4020: PPUSH
4021: CALL_OW 74
4025: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: LD_INT 81
4033: PUSH
4034: LD_VAR 0 1
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 101
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 59
4058: PUSH
4059: EMPTY
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PPUSH
4101: LD_VAR 0 4
4105: PPUSH
4106: CALL_OW 74
4110: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 7
4120: PPUSH
4121: CALL_OW 296
4125: PUSH
4126: LD_INT 8
4128: PLUS
4129: PUSH
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_VAR 0 8
4139: PPUSH
4140: CALL_OW 296
4144: LESS
4145: IFFALSE 4163
// ComAttackUnit ( j , target1 ) else
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_VAR 0 7
4156: PPUSH
4157: CALL_OW 115
4161: GO 4177
// ComAttackUnit ( j , target2 ) ;
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 8
4172: PPUSH
4173: CALL_OW 115
// end ;
4177: GO 3901
4179: POP
4180: POP
// until russianTanks = 0 ;
4181: LD_EXP 11
4185: PUSH
4186: LD_INT 0
4188: EQUAL
4189: IFFALSE 3884
// end ; end ;
4191: LD_VAR 0 2
4195: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
4200: PPUSH
4201: PPUSH
4202: PPUSH
4203: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4204: LD_ADDR_VAR 0 6
4208: PUSH
4209: LD_INT 22
4211: PUSH
4212: LD_VAR 0 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 9
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4240: LD_ADDR_VAR 0 7
4244: PUSH
4245: LD_INT 81
4247: PUSH
4248: LD_VAR 0 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 3
4259: PUSH
4260: LD_INT 21
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PPUSH
4278: CALL_OW 69
4282: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: CALL_OW 12
4298: ST_TO_ADDR
// for i = 1 to list do
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: DOUBLE
4305: LD_INT 1
4307: DEC
4308: ST_TO_ADDR
4309: LD_VAR 0 6
4313: PUSH
4314: FOR_TO
4315: IFFALSE 4517
// for ta in filter do
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_VAR 0 7
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4513
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4330: LD_VAR 0 6
4334: PUSH
4335: LD_VAR 0 5
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 296
4350: PUSH
4351: LD_INT 15
4353: LESSEQUAL
4354: IFFALSE 4511
// begin case c of 1 :
4356: LD_VAR 0 4
4360: PUSH
4361: LD_INT 1
4363: DOUBLE
4364: EQUAL
4365: IFTRUE 4369
4367: GO 4407
4369: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4370: LD_VAR 0 6
4374: PUSH
4375: LD_VAR 0 5
4379: ARRAY
4380: PPUSH
4381: LD_VAR 0 3
4385: PPUSH
4386: CALL_OW 250
4390: PPUSH
4391: LD_VAR 0 3
4395: PPUSH
4396: CALL_OW 251
4400: PPUSH
4401: CALL_OW 154
4405: GO 4511
4407: LD_INT 2
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4479
4415: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4416: LD_VAR 0 6
4420: PUSH
4421: LD_VAR 0 5
4425: ARRAY
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 250
4436: PUSH
4437: LD_INT 1
4439: NEG
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: CALL_OW 12
4448: PLUS
4449: PPUSH
4450: LD_VAR 0 3
4454: PPUSH
4455: CALL_OW 251
4459: PUSH
4460: LD_INT 1
4462: NEG
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: CALL_OW 12
4471: PLUS
4472: PPUSH
4473: CALL_OW 153
4477: GO 4511
4479: LD_INT 3
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4510
4487: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4488: LD_VAR 0 6
4492: PUSH
4493: LD_VAR 0 5
4497: ARRAY
4498: PPUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: CALL_OW 115
4508: GO 4511
4510: POP
// end ; end ;
4511: GO 4327
4513: POP
4514: POP
4515: GO 4314
4517: POP
4518: POP
// end ;
4519: LD_VAR 0 2
4523: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4524: LD_INT 0
4526: PPUSH
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 2
4541: PPUSH
4542: LD_INT 22
4544: PUSH
4545: LD_VAR 0 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 21
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 52
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 70
4583: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4584: LD_ADDR_VAR 0 8
4588: PUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_INT 22
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 3
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: LD_INT 24
4621: PUSH
4622: LD_INT 1000
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: PPUSH
4641: CALL_OW 70
4645: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4646: LD_VAR 0 8
4650: PUSH
4651: LD_INT 0
4653: GREATER
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 750
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PPUSH
4670: CALL_OW 72
4674: PUSH
4675: LD_INT 0
4677: GREATER
4678: AND
4679: IFFALSE 4699
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4681: LD_VAR 0 7
4685: PPUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_INT 1
4693: ARRAY
4694: PPUSH
4695: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4699: LD_VAR 0 7
4703: PUSH
4704: LD_INT 0
4706: GREATER
4707: PUSH
4708: LD_VAR 0 8
4712: PUSH
4713: LD_INT 0
4715: EQUAL
4716: AND
4717: PUSH
4718: LD_EXP 10
4722: PUSH
4723: LD_INT 0
4725: GREATER
4726: AND
4727: IFFALSE 4774
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4729: LD_VAR 0 7
4733: PPUSH
4734: LD_EXP 10
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: LD_EXP 10
4747: PUSH
4748: LD_INT 2
4750: ARRAY
4751: PPUSH
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 3
4759: ARRAY
4760: PPUSH
4761: LD_EXP 10
4765: PUSH
4766: LD_INT 4
4768: ARRAY
4769: PPUSH
4770: CALL_OW 567
// end ; end_of_file
4774: LD_VAR 0 3
4778: RET
// every 0 0$1 do
4779: GO 4781
4781: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4782: LD_INT 3
4784: PPUSH
4785: LD_INT 14
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: CALL 1975 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 15
4800: PPUSH
4801: LD_INT 3
4803: PPUSH
4804: CALL 1975 0 3
// end ;
4808: END
// every 0 0$1 trigger russianAI = 1 do
4809: LD_EXP 13
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4923
4819: GO 4821
4821: DISABLE
// begin enable ;
4822: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PPUSH
4829: LD_INT 7
4831: PPUSH
4832: LD_EXP 10
4836: PPUSH
4837: CALL 2216 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4841: LD_INT 3
4843: PPUSH
4844: LD_INT 8
4846: PPUSH
4847: LD_INT 7
4849: PPUSH
4850: LD_INT 14
4852: PUSH
4853: LD_INT 15
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 1
4862: PPUSH
4863: LD_INT 2
4865: PPUSH
4866: CALL_OW 12
4870: ARRAY
4871: PPUSH
4872: CALL 2607 0 4
// AttackVehicles ( 3 ) ;
4876: LD_INT 3
4878: PPUSH
4879: CALL 3762 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4883: LD_INT 3
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 3458 0 2
// IntBazooka ( 3 ) ;
4893: LD_INT 3
4895: PPUSH
4896: CALL 4196 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 51
4905: PPUSH
4906: LD_INT 14
4908: PPUSH
4909: CALL 3315 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4913: LD_INT 3
4915: PPUSH
4916: LD_INT 7
4918: PPUSH
4919: CALL 4524 0 2
// end ;
4923: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4924: LD_INT 22
4926: PPUSH
4927: CALL_OW 303
4931: PUSH
4932: LD_INT 22
4934: PPUSH
4935: CALL_OW 255
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: OR
4944: IFFALSE 4959
4946: GO 4948
4948: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4949: LD_INT 3
4951: PPUSH
4952: LD_INT 22
4954: PPUSH
4955: CALL 3151 0 2
4959: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4960: LD_EXP 13
4964: PUSH
4965: LD_INT 1
4967: EQUAL
4968: PUSH
4969: LD_INT 22
4971: PUSH
4972: LD_INT 3
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 21
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 50
4991: PUSH
4992: EMPTY
4993: LIST
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 34
5010: PUSH
5011: LD_INT 46
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 34
5020: PUSH
5021: LD_INT 45
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 34
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 34
5040: PUSH
5041: LD_INT 49
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 34
5050: PUSH
5051: LD_INT 47
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: PUSH
5078: LD_INT 3
5080: LESS
5081: AND
5082: IFFALSE 5269
5084: GO 5086
5086: DISABLE
// begin enable ;
5087: ENABLE
// if russianRocketsAvalaible = 1 then
5088: LD_EXP 14
5092: PUSH
5093: LD_INT 1
5095: EQUAL
5096: IFFALSE 5153
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: LD_OWVAR 67
5122: ARRAY
5123: PPUSH
5124: LD_INT 46
5126: PUSH
5127: LD_INT 45
5129: PUSH
5130: LD_INT 44
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 3
5143: PPUSH
5144: LD_INT 24
5146: PPUSH
5147: CALL 3688 0 7
5151: GO 5210
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5153: LD_INT 3
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: LD_INT 3
5161: PUSH
5162: LD_INT 4
5164: PUSH
5165: LD_INT 5
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: LD_INT 46
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: LD_INT 44
5187: PUSH
5188: LD_INT 47
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: LD_INT 3
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: LD_INT 24
5205: PPUSH
5206: CALL 3688 0 7
// if russianTimeLapsers = 0 then
5210: LD_EXP 12
5214: PUSH
5215: LD_INT 0
5217: EQUAL
5218: IFFALSE 5269
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5220: LD_INT 3
5222: PPUSH
5223: LD_INT 40
5225: PPUSH
5226: LD_INT 1
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 3
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: PPUSH
5246: LD_INT 49
5248: PUSH
5249: LD_INT 49
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PPUSH
5256: LD_INT 3
5258: PPUSH
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 24
5264: PPUSH
5265: CALL 3688 0 7
// end ;
5269: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5270: LD_EXP 18
5274: PUSH
5275: LD_INT 22
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 58
5297: PUSH
5298: EMPTY
5299: LIST
5300: PUSH
5301: LD_INT 33
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 91
5313: PUSH
5314: LD_EXP 18
5318: PUSH
5319: LD_INT 45
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 69
5338: AND
5339: IFFALSE 5443
5341: GO 5343
5343: DISABLE
// begin wait ( 0 0$5 ) ;
5344: LD_INT 175
5346: PPUSH
5347: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5351: LD_EXP 18
5355: PPUSH
5356: LD_INT 22
5358: PUSH
5359: LD_INT 1
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 2
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 58
5378: PUSH
5379: EMPTY
5380: LIST
5381: PUSH
5382: LD_INT 33
5384: PUSH
5385: LD_INT 1
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 91
5394: PUSH
5395: LD_EXP 18
5399: PUSH
5400: LD_INT 45
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: PPUSH
5415: CALL_OW 69
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5428: LD_EXP 18
5432: PPUSH
5433: LD_INT 127
5435: PPUSH
5436: LD_INT 63
5438: PPUSH
5439: CALL_OW 171
// end ; end_of_file
5443: END
// every 1 do var dec1 , dec2 ;
5444: GO 5446
5446: DISABLE
5447: LD_INT 0
5449: PPUSH
5450: PPUSH
// begin InGameOn ;
5451: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5455: LD_INT 48
5457: PPUSH
5458: LD_STRING deltakappa
5460: PPUSH
5461: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5465: LD_INT 95
5467: PPUSH
5468: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5472: LD_INT 95
5474: PPUSH
5475: LD_INT 30
5477: PPUSH
5478: LD_INT 11
5480: PPUSH
5481: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5485: LD_INT 30
5487: PPUSH
5488: LD_INT 11
5490: PPUSH
5491: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5495: LD_EXP 5
5499: PPUSH
5500: LD_STRING D1-Pow-1
5502: PPUSH
5503: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5507: LD_EXP 1
5511: PPUSH
5512: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5516: LD_EXP 1
5520: PPUSH
5521: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_STRING D1-JMM-1
5532: PPUSH
5533: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5537: LD_EXP 5
5541: PPUSH
5542: LD_STRING D1-Pow-2
5544: PPUSH
5545: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5549: LD_EXP 1
5553: PPUSH
5554: LD_STRING D1-JMM-2
5556: PPUSH
5557: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5561: LD_EXP 1
5565: PPUSH
5566: LD_INT 95
5568: PPUSH
5569: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5573: LD_STRING M1
5575: PPUSH
5576: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5580: LD_INT 35
5582: PPUSH
5583: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_INT 95
5594: PPUSH
5595: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5599: LD_INT 95
5601: PPUSH
5602: LD_INT 51
5604: PPUSH
5605: LD_INT 21
5607: PPUSH
5608: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5612: LD_INT 95
5614: PPUSH
5615: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5619: LD_INT 95
5621: PPUSH
5622: LD_INT 5
5624: PPUSH
5625: CALL_OW 308
5629: IFFALSE 5580
// if JMMGirl = 1 then
5631: LD_EXP 7
5635: PUSH
5636: LD_INT 1
5638: EQUAL
5639: IFFALSE 5952
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5641: LD_EXP 2
5645: PPUSH
5646: LD_STRING D2J-Joan-1
5648: PPUSH
5649: CALL_OW 94
// dec1 = query ( Q1 ) ;
5653: LD_ADDR_VAR 0 1
5657: PUSH
5658: LD_STRING Q1
5660: PPUSH
5661: CALL_OW 97
5665: ST_TO_ADDR
// if dec1 = 1 then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_INT 1
5673: EQUAL
5674: IFFALSE 5928
// begin ComExitVehicle ( JMM ) ;
5676: LD_EXP 1
5680: PPUSH
5681: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2J-JMM-1
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5697: LD_EXP 2
5701: PPUSH
5702: LD_STRING D2J-Joan-2
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2J-JMM-2
5716: PPUSH
5717: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5721: LD_EXP 2
5725: PPUSH
5726: LD_STRING D2J-Joan-3
5728: PPUSH
5729: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5733: LD_EXP 5
5737: PPUSH
5738: LD_STRING DPowell-Pow-1
5740: PPUSH
5741: CALL_OW 94
// dec2 = query ( Q2J ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_STRING Q2J
5752: PPUSH
5753: CALL_OW 97
5757: ST_TO_ADDR
// if dec2 = 1 then
5758: LD_VAR 0 2
5762: PUSH
5763: LD_INT 1
5765: EQUAL
5766: IFFALSE 5808
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING D2Ja-JMM-1
5775: PPUSH
5776: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5780: LD_EXP 2
5784: PPUSH
5785: LD_STRING D2Ja-Joan-1
5787: PPUSH
5788: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5792: LD_EXP 1
5796: PPUSH
5797: LD_STRING D2Ja-JMM-2
5799: PPUSH
5800: CALL_OW 88
// InGameOff ;
5804: CALL_OW 9
// end ; if dec2 = 2 then
5808: LD_VAR 0 2
5812: PUSH
5813: LD_INT 2
5815: EQUAL
5816: IFFALSE 5892
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5818: LD_EXP 1
5822: PPUSH
5823: LD_STRING D2Jb-JMM-1
5825: PPUSH
5826: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5830: LD_EXP 2
5834: PPUSH
5835: LD_STRING D2Jb-Joan-1
5837: PPUSH
5838: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D2Jb-JMM-2
5849: PPUSH
5850: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5854: LD_EXP 2
5858: PPUSH
5859: LD_STRING D2Jb-Joan-2
5861: PPUSH
5862: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D2Jb-JMM-3
5873: PPUSH
5874: CALL_OW 88
// fastEnd = 1 ;
5878: LD_ADDR_EXP 15
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// FinishMission ;
5886: CALL 9826 0 0
// exit ;
5890: GO 6522
// end ; if dec2 = 3 then
5892: LD_VAR 0 2
5896: PUSH
5897: LD_INT 3
5899: EQUAL
5900: IFFALSE 5928
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5902: LD_EXP 2
5906: PPUSH
5907: LD_STRING D2Jc-Joan-1
5909: PPUSH
5910: CALL_OW 94
// fastEnd = 1 ;
5914: LD_ADDR_EXP 15
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// FinishMission ;
5922: CALL 9826 0 0
// exit ;
5926: GO 6522
// end ; end ; if dec1 = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 2
5935: EQUAL
5936: IFFALSE 5952
// begin fastEnd = 1 ;
5938: LD_ADDR_EXP 15
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// FinishMission ;
5946: CALL 9826 0 0
// exit ;
5950: GO 6522
// end ; end ; if JMMGirl = 2 then
5952: LD_EXP 7
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6285
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5962: LD_EXP 3
5966: PPUSH
5967: LD_STRING D2L-Lisa-1
5969: PPUSH
5970: CALL_OW 94
// dec1 = query ( Q1 ) ;
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_STRING Q1
5981: PPUSH
5982: CALL_OW 97
5986: ST_TO_ADDR
// if dec1 = 1 then
5987: LD_VAR 0 1
5991: PUSH
5992: LD_INT 1
5994: EQUAL
5995: IFFALSE 6261
// begin ComExitVehicle ( JMM ) ;
5997: LD_EXP 1
6001: PPUSH
6002: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6006: LD_EXP 1
6010: PPUSH
6011: LD_STRING D2L-JMM-1
6013: PPUSH
6014: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6018: LD_EXP 3
6022: PPUSH
6023: LD_STRING D2L-Lisa-2
6025: PPUSH
6026: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6030: LD_EXP 1
6034: PPUSH
6035: LD_STRING D2L-JMM-2
6037: PPUSH
6038: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6042: LD_EXP 3
6046: PPUSH
6047: LD_STRING D2L-Lisa-3
6049: PPUSH
6050: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6054: LD_EXP 5
6058: PPUSH
6059: LD_STRING DPowell-Pow-1
6061: PPUSH
6062: CALL_OW 94
// dec2 = query ( Q2L ) ;
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_STRING Q2L
6073: PPUSH
6074: CALL_OW 97
6078: ST_TO_ADDR
// if dec2 = 1 then
6079: LD_VAR 0 2
6083: PUSH
6084: LD_INT 1
6086: EQUAL
6087: IFFALSE 6153
// begin Say ( JMM , D2La-JMM-1 ) ;
6089: LD_EXP 1
6093: PPUSH
6094: LD_STRING D2La-JMM-1
6096: PPUSH
6097: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6101: LD_EXP 3
6105: PPUSH
6106: LD_STRING D2La-Lisa-1
6108: PPUSH
6109: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6113: LD_EXP 1
6117: PPUSH
6118: LD_STRING D2La-JMM-2
6120: PPUSH
6121: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6125: LD_EXP 3
6129: PPUSH
6130: LD_STRING D2La-Lisa-2
6132: PPUSH
6133: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D2La-JMM-3
6144: PPUSH
6145: CALL_OW 88
// InGameOff ;
6149: CALL_OW 9
// end ; if dec2 = 2 then
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 2
6160: EQUAL
6161: IFFALSE 6225
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6163: LD_EXP 1
6167: PPUSH
6168: LD_STRING D2Lb-JMM-1
6170: PPUSH
6171: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6175: LD_EXP 3
6179: PPUSH
6180: LD_STRING D2Lb-Lisa-1
6182: PPUSH
6183: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6187: LD_EXP 1
6191: PPUSH
6192: LD_STRING D2Lb-JMM-2
6194: PPUSH
6195: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6199: LD_EXP 3
6203: PPUSH
6204: LD_STRING D2Lb-Lisa-2
6206: PPUSH
6207: CALL_OW 94
// fastEnd = 1 ;
6211: LD_ADDR_EXP 15
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// FinishMission ;
6219: CALL 9826 0 0
// exit ;
6223: GO 6522
// end ; if dec2 = 3 then
6225: LD_VAR 0 2
6229: PUSH
6230: LD_INT 3
6232: EQUAL
6233: IFFALSE 6261
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6235: LD_EXP 3
6239: PPUSH
6240: LD_STRING D2Lc-Lisa-1
6242: PPUSH
6243: CALL_OW 94
// fastEnd = 1 ;
6247: LD_ADDR_EXP 15
6251: PUSH
6252: LD_INT 1
6254: ST_TO_ADDR
// FinishMission ;
6255: CALL 9826 0 0
// exit ;
6259: GO 6522
// end ; end ; if dec1 = 2 then
6261: LD_VAR 0 1
6265: PUSH
6266: LD_INT 2
6268: EQUAL
6269: IFFALSE 6285
// begin fastEnd = 1 ;
6271: LD_ADDR_EXP 15
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// FinishMission ;
6279: CALL 9826 0 0
// exit ;
6283: GO 6522
// end ; end ; if JMMGirl = 3 then
6285: LD_EXP 7
6289: PUSH
6290: LD_INT 3
6292: EQUAL
6293: IFFALSE 6522
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6295: LD_EXP 4
6299: PPUSH
6300: LD_STRING D2X-Con-1
6302: PPUSH
6303: CALL_OW 94
// dec1 = query ( Q1 ) ;
6307: LD_ADDR_VAR 0 1
6311: PUSH
6312: LD_STRING Q1
6314: PPUSH
6315: CALL_OW 97
6319: ST_TO_ADDR
// if dec1 = 1 then
6320: LD_VAR 0 1
6324: PUSH
6325: LD_INT 1
6327: EQUAL
6328: IFFALSE 6498
// begin ComExitVehicle ( JMM ) ;
6330: LD_EXP 1
6334: PPUSH
6335: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D2X-JMM-1
6346: PPUSH
6347: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6351: LD_EXP 4
6355: PPUSH
6356: LD_STRING D2X-Con-2
6358: PPUSH
6359: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6363: LD_EXP 5
6367: PPUSH
6368: LD_STRING DPowell-Pow-1
6370: PPUSH
6371: CALL_OW 94
// dec2 = query ( Q2X ) ;
6375: LD_ADDR_VAR 0 2
6379: PUSH
6380: LD_STRING Q2X
6382: PPUSH
6383: CALL_OW 97
6387: ST_TO_ADDR
// if dec2 = 1 then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 1
6395: EQUAL
6396: IFFALSE 6414
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6398: LD_EXP 1
6402: PPUSH
6403: LD_STRING D2Xa-JMM-1
6405: PPUSH
6406: CALL_OW 88
// InGameOff ;
6410: CALL_OW 9
// end ; if dec2 = 2 then
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: EQUAL
6422: IFFALSE 6462
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6424: LD_EXP 1
6428: PPUSH
6429: LD_STRING D2Xb-JMM-1
6431: PPUSH
6432: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_STRING D2Xb-Con-1
6443: PPUSH
6444: CALL_OW 94
// fastEnd = 1 ;
6448: LD_ADDR_EXP 15
6452: PUSH
6453: LD_INT 1
6455: ST_TO_ADDR
// FinishMission ;
6456: CALL 9826 0 0
// exit ;
6460: GO 6522
// end ; if dec2 = 3 then
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 3
6469: EQUAL
6470: IFFALSE 6498
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6472: LD_EXP 4
6476: PPUSH
6477: LD_STRING D2Xc-Con-1
6479: PPUSH
6480: CALL_OW 94
// fastEnd = 1 ;
6484: LD_ADDR_EXP 15
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// FinishMission ;
6492: CALL 9826 0 0
// exit ;
6496: GO 6522
// end ; end ; if dec1 = 2 then
6498: LD_VAR 0 1
6502: PUSH
6503: LD_INT 2
6505: EQUAL
6506: IFFALSE 6522
// begin fastEnd = 1 ;
6508: LD_ADDR_EXP 15
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// FinishMission ;
6516: CALL 9826 0 0
// exit ;
6520: GO 6522
// end ; end ; end ;
6522: PPOPN 2
6524: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6525: LD_EXP 1
6529: PPUSH
6530: LD_INT 6
6532: PPUSH
6533: CALL_OW 308
6537: IFFALSE 7279
6539: GO 6541
6541: DISABLE
// begin InGameOn ;
6542: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6546: LD_INT 35
6548: PPUSH
6549: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6553: LD_EXP 1
6557: PPUSH
6558: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_INT 62
6569: PPUSH
6570: LD_INT 104
6572: PPUSH
6573: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6577: LD_EXP 1
6581: PPUSH
6582: LD_EXP 2
6586: PPUSH
6587: CALL_OW 296
6591: PUSH
6592: LD_INT 4
6594: LESS
6595: PUSH
6596: LD_EXP 1
6600: PPUSH
6601: LD_EXP 3
6605: PPUSH
6606: CALL_OW 296
6610: PUSH
6611: LD_INT 4
6613: LESS
6614: OR
6615: PUSH
6616: LD_EXP 1
6620: PPUSH
6621: LD_EXP 4
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: OR
6635: IFFALSE 6546
// case JMMGirl of 1 :
6637: LD_EXP 7
6641: PUSH
6642: LD_INT 1
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6862
6650: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6651: LD_INT 22
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6673: LD_EXP 2
6677: PPUSH
6678: LD_EXP 1
6682: PPUSH
6683: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6687: LD_EXP 1
6691: PPUSH
6692: LD_EXP 2
6696: PPUSH
6697: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6701: LD_EXP 2
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PPUSH
6715: CALL_OW 87
// wait ( 0 0$1 ) ;
6719: LD_INT 35
6721: PPUSH
6722: CALL_OW 67
// DialogueOn ;
6726: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6730: LD_EXP 2
6734: PPUSH
6735: LD_STRING D3J-Joan-1
6737: PPUSH
6738: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6742: LD_EXP 1
6746: PPUSH
6747: LD_STRING D3J-JMM-1
6749: PPUSH
6750: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6754: LD_EXP 2
6758: PPUSH
6759: LD_STRING D3J-Joan-2
6761: PPUSH
6762: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6766: LD_EXP 1
6770: PPUSH
6771: LD_STRING D3J-JMM-2
6773: PPUSH
6774: CALL_OW 88
// wait ( 0 0$1 ) ;
6778: LD_INT 35
6780: PPUSH
6781: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D4-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D4-Joan-1
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D4-JMM-2
6816: PPUSH
6817: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6821: LD_EXP 2
6825: PPUSH
6826: LD_STRING D4-Joan-2
6828: PPUSH
6829: CALL_OW 88
// DialogueOff ;
6833: CALL_OW 7
// InGameOff ;
6837: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6841: LD_STRING M2J
6843: PPUSH
6844: CALL_OW 337
// SaveForQuickRestart ;
6848: CALL_OW 22
// russianAI = 1 ;
6852: LD_ADDR_EXP 13
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// end ; 2 :
6860: GO 7279
6862: LD_INT 2
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 7082
6870: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6871: LD_INT 22
6873: PUSH
6874: LD_INT 4
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6893: LD_EXP 3
6897: PPUSH
6898: LD_EXP 1
6902: PPUSH
6903: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6907: LD_EXP 1
6911: PPUSH
6912: LD_EXP 3
6916: PPUSH
6917: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6921: LD_EXP 3
6925: PUSH
6926: LD_EXP 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 87
// wait ( 0 0$1 ) ;
6939: LD_INT 35
6941: PPUSH
6942: CALL_OW 67
// DialogueOn ;
6946: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6950: LD_EXP 3
6954: PPUSH
6955: LD_STRING D3L-Lisa-1
6957: PPUSH
6958: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6962: LD_EXP 1
6966: PPUSH
6967: LD_STRING D3L-JMM-1
6969: PPUSH
6970: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6974: LD_EXP 3
6978: PPUSH
6979: LD_STRING D3L-Lisa-2
6981: PPUSH
6982: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6986: LD_EXP 1
6990: PPUSH
6991: LD_STRING D3L-JMM-2
6993: PPUSH
6994: CALL_OW 88
// wait ( 0 0$1 ) ;
6998: LD_INT 35
7000: PPUSH
7001: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D4-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D4-Lisa-1
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D4-JMM-1
7036: PPUSH
7037: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7041: LD_EXP 3
7045: PPUSH
7046: LD_STRING D4-Lisa-2
7048: PPUSH
7049: CALL_OW 88
// DialogueOff ;
7053: CALL_OW 7
// InGameOff ;
7057: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7061: LD_STRING M2L
7063: PPUSH
7064: CALL_OW 337
// SaveForQuickRestart ;
7068: CALL_OW 22
// russianAI = 1 ;
7072: LD_ADDR_EXP 13
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// end ; 3 :
7080: GO 7279
7082: LD_INT 3
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7278
7090: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7091: LD_INT 22
7093: PUSH
7094: LD_INT 4
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7113: LD_EXP 4
7117: PPUSH
7118: LD_EXP 1
7122: PPUSH
7123: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7127: LD_EXP 1
7131: PPUSH
7132: LD_EXP 4
7136: PPUSH
7137: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7141: LD_EXP 2
7145: PUSH
7146: LD_EXP 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PPUSH
7155: CALL_OW 87
// wait ( 0 0$1 ) ;
7159: LD_INT 35
7161: PPUSH
7162: CALL_OW 67
// DialogueOn ;
7166: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7170: LD_EXP 4
7174: PPUSH
7175: LD_STRING D3X-Con-1
7177: PPUSH
7178: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7182: LD_EXP 1
7186: PPUSH
7187: LD_STRING D3J-JMM-1
7189: PPUSH
7190: CALL_OW 88
// wait ( 0 0$1 ) ;
7194: LD_INT 35
7196: PPUSH
7197: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7201: LD_EXP 1
7205: PPUSH
7206: LD_STRING D4-JMM-1
7208: PPUSH
7209: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D4-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D4-JMM-2
7232: PPUSH
7233: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7237: LD_EXP 4
7241: PPUSH
7242: LD_STRING D4-Con-2
7244: PPUSH
7245: CALL_OW 88
// DialogueOff ;
7249: CALL_OW 7
// InGameOff ;
7253: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7257: LD_STRING M2X
7259: PPUSH
7260: CALL_OW 337
// SaveForQuickRestart ;
7264: CALL_OW 22
// russianAI = 1 ;
7268: LD_ADDR_EXP 13
7272: PUSH
7273: LD_INT 1
7275: ST_TO_ADDR
// end ; end ;
7276: GO 7279
7278: POP
// end ;
7279: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7280: LD_INT 32
7282: PPUSH
7283: CALL_OW 306
7287: IFFALSE 7620
7289: GO 7291
7291: DISABLE
// begin case JMMGirl of 1 :
7292: LD_EXP 7
7296: PUSH
7297: LD_INT 1
7299: DOUBLE
7300: EQUAL
7301: IFTRUE 7305
7303: GO 7427
7305: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7306: LD_EXP 1
7310: PPUSH
7311: LD_STRING D6J-JMM-1
7313: PPUSH
7314: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7318: LD_STRING 13f_Denis
7320: PPUSH
7321: CALL_OW 28
7325: PUSH
7326: LD_INT 1
7328: EQUAL
7329: PUSH
7330: LD_STRING 13s_Denis
7332: PPUSH
7333: CALL_OW 28
7337: PUSH
7338: LD_INT 1
7340: EQUAL
7341: OR
7342: IFFALSE 7382
// begin Say ( Joan , D6J-Joan-1 ) ;
7344: LD_EXP 2
7348: PPUSH
7349: LD_STRING D6J-Joan-1
7351: PPUSH
7352: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7356: LD_EXP 1
7360: PPUSH
7361: LD_STRING D6J-JMM-2
7363: PPUSH
7364: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7368: LD_EXP 2
7372: PPUSH
7373: LD_STRING D6J-Joan-2
7375: PPUSH
7376: CALL_OW 88
// end else
7380: GO 7394
// begin Say ( Joan , D6J-Joan-2a ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D6J-Joan-2a
7389: PPUSH
7390: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D6J-JMM-3
7401: PPUSH
7402: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7406: LD_EXP 2
7410: PPUSH
7411: LD_STRING D6J-Joan-3
7413: PPUSH
7414: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7418: LD_STRING M3
7420: PPUSH
7421: CALL_OW 337
// end ; 2 :
7425: GO 7620
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7493
7435: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D6L-JMM-1
7443: PPUSH
7444: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7448: LD_EXP 3
7452: PPUSH
7453: LD_STRING D6L-Lisa-1
7455: PPUSH
7456: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7460: LD_EXP 1
7464: PPUSH
7465: LD_STRING D6L-JMM-2
7467: PPUSH
7468: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7472: LD_EXP 3
7476: PPUSH
7477: LD_STRING D6L-Lisa-2
7479: PPUSH
7480: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7484: LD_STRING M3
7486: PPUSH
7487: CALL_OW 337
// end ; 3 :
7491: GO 7620
7493: LD_INT 3
7495: DOUBLE
7496: EQUAL
7497: IFTRUE 7501
7499: GO 7619
7501: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7502: LD_EXP 1
7506: PPUSH
7507: LD_STRING D6X-JMM-1
7509: PPUSH
7510: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7514: LD_EXP 4
7518: PPUSH
7519: LD_STRING D6X-Con-1
7521: PPUSH
7522: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7526: LD_EXP 1
7530: PPUSH
7531: LD_STRING D6X-JMM-2
7533: PPUSH
7534: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7538: LD_EXP 4
7542: PPUSH
7543: LD_STRING D6X-Con-2
7545: PPUSH
7546: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7550: LD_EXP 1
7554: PPUSH
7555: LD_STRING D6X-JMM-3
7557: PPUSH
7558: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7562: LD_EXP 4
7566: PPUSH
7567: LD_STRING D6X-Con-3
7569: PPUSH
7570: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7574: LD_EXP 1
7578: PPUSH
7579: LD_STRING D6X-JMM-4
7581: PPUSH
7582: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7586: LD_EXP 4
7590: PPUSH
7591: LD_STRING D6X-Con-4
7593: PPUSH
7594: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7598: LD_EXP 1
7602: PPUSH
7603: LD_STRING D6X-JMM-5
7605: PPUSH
7606: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7610: LD_STRING M3
7612: PPUSH
7613: CALL_OW 337
// end ; end ;
7617: GO 7620
7619: POP
// end ;
7620: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7621: LD_INT 22
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 33
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PPUSH
7650: CALL_OW 306
7654: IFFALSE 7800
7656: GO 7658
7658: DISABLE
// begin case JMMGirl of 1 :
7659: LD_EXP 7
7663: PUSH
7664: LD_INT 1
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7709
7672: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D5-JMM-1
7680: PPUSH
7681: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7685: LD_INT 77
7687: PPUSH
7688: LD_INT 87
7690: PPUSH
7691: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7695: LD_EXP 2
7699: PPUSH
7700: LD_STRING D5-Joan-1
7702: PPUSH
7703: CALL_OW 88
// end ; 2 :
7707: GO 7800
7709: LD_INT 2
7711: DOUBLE
7712: EQUAL
7713: IFTRUE 7717
7715: GO 7754
7717: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7718: LD_EXP 1
7722: PPUSH
7723: LD_STRING D5-JMM-1
7725: PPUSH
7726: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7730: LD_INT 77
7732: PPUSH
7733: LD_INT 87
7735: PPUSH
7736: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7740: LD_EXP 3
7744: PPUSH
7745: LD_STRING D5-Lisa-1
7747: PPUSH
7748: CALL_OW 88
// end ; 3 :
7752: GO 7800
7754: LD_INT 3
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7799
7762: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D5-JMM-1
7770: PPUSH
7771: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7775: LD_INT 77
7777: PPUSH
7778: LD_INT 87
7780: PPUSH
7781: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7785: LD_EXP 4
7789: PPUSH
7790: LD_STRING D5-Con-1
7792: PPUSH
7793: CALL_OW 88
// end ; end ;
7797: GO 7800
7799: POP
// end ;
7800: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7801: LD_INT 48
7803: PPUSH
7804: CALL_OW 255
7808: PUSH
7809: LD_INT 1
7811: EQUAL
7812: IFFALSE 7909
7814: GO 7816
7816: DISABLE
// begin DialogueOn ;
7817: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7821: LD_EXP 5
7825: PPUSH
7826: LD_STRING D7-Pow-1
7828: PPUSH
7829: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7833: LD_EXP 1
7837: PPUSH
7838: LD_STRING D7-JMM-1
7840: PPUSH
7841: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7845: LD_EXP 5
7849: PPUSH
7850: LD_STRING D7-Pow-2
7852: PPUSH
7853: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7857: LD_EXP 1
7861: PPUSH
7862: LD_STRING D7-JMM-2
7864: PPUSH
7865: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7869: LD_EXP 5
7873: PPUSH
7874: LD_STRING D7-Pow-3
7876: PPUSH
7877: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7881: LD_EXP 1
7885: PPUSH
7886: LD_STRING D7-JMM-3
7888: PPUSH
7889: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7893: LD_EXP 5
7897: PPUSH
7898: LD_STRING D7-Pow-4
7900: PPUSH
7901: CALL_OW 94
// DialogueOff ;
7905: CALL_OW 7
// end ; end_of_file
7909: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 255
7919: PUSH
7920: LD_INT 3
7922: EQUAL
7923: IFFALSE 7997
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7925: LD_ADDR_EXP 10
7929: PUSH
7930: LD_EXP 10
7934: PPUSH
7935: LD_INT 1
7937: PPUSH
7938: CALL_OW 3
7942: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7943: LD_ADDR_EXP 10
7947: PUSH
7948: LD_EXP 10
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 3
7960: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7961: LD_ADDR_EXP 10
7965: PUSH
7966: LD_EXP 10
7970: PPUSH
7971: LD_INT 1
7973: PPUSH
7974: CALL_OW 3
7978: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7979: LD_ADDR_EXP 10
7983: PUSH
7984: LD_EXP 10
7988: PPUSH
7989: LD_INT 1
7991: PPUSH
7992: CALL_OW 3
7996: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7997: LD_VAR 0 1
8001: PPUSH
8002: CALL_OW 255
8006: PUSH
8007: LD_INT 3
8009: EQUAL
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 266
8020: PUSH
8021: LD_INT 0
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 266
8034: PUSH
8035: LD_INT 2
8037: EQUAL
8038: OR
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 266
8049: PUSH
8050: LD_INT 4
8052: EQUAL
8053: OR
8054: PUSH
8055: EMPTY
8056: LIST
8057: AND
8058: IFFALSE 8069
// ComUpgrade ( building ) ;
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 255
8078: PUSH
8079: LD_INT 3
8081: EQUAL
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 32
8095: EQUAL
8096: AND
8097: IFFALSE 8138
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8099: LD_VAR 0 1
8103: PPUSH
8104: LD_INT 42
8106: PUSH
8107: LD_INT 43
8109: PUSH
8110: LD_INT 44
8112: PUSH
8113: LD_INT 46
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 1
8124: PPUSH
8125: LD_INT 4
8127: PPUSH
8128: CALL_OW 12
8132: ARRAY
8133: PPUSH
8134: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 255
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: PUSH
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 266
8161: PUSH
8162: LD_INT 33
8164: EQUAL
8165: AND
8166: IFFALSE 8207
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 42
8175: PUSH
8176: LD_INT 43
8178: PUSH
8179: LD_INT 44
8181: PUSH
8182: LD_INT 46
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_INT 4
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: CALL_OW 208
// end ;
8207: PPOPN 1
8209: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 255
8219: PUSH
8220: LD_INT 3
8222: EQUAL
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 247
8233: PUSH
8234: LD_INT 3
8236: EQUAL
8237: AND
8238: IFFALSE 8930
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: PUSH
8250: LD_INT 31
8252: EQUAL
8253: PUSH
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL_OW 266
8263: PUSH
8264: LD_INT 32
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 1
8273: PPUSH
8274: CALL_OW 266
8278: PUSH
8279: LD_INT 36
8281: EQUAL
8282: OR
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 266
8293: PUSH
8294: LD_INT 0
8296: EQUAL
8297: OR
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 266
8308: PUSH
8309: LD_INT 24
8311: EQUAL
8312: OR
8313: PUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 266
8323: PUSH
8324: LD_INT 17
8326: EQUAL
8327: OR
8328: PUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 266
8338: PUSH
8339: LD_INT 25
8341: EQUAL
8342: OR
8343: PUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 266
8353: PUSH
8354: LD_INT 19
8356: EQUAL
8357: OR
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 266
8368: PUSH
8369: LD_INT 20
8371: EQUAL
8372: OR
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 266
8383: PUSH
8384: LD_INT 18
8386: EQUAL
8387: OR
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 266
8398: PUSH
8399: LD_INT 21
8401: EQUAL
8402: OR
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 266
8413: PUSH
8414: LD_INT 23
8416: EQUAL
8417: OR
8418: PUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 266
8428: PUSH
8429: LD_INT 16
8431: EQUAL
8432: OR
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 266
8443: PUSH
8444: LD_INT 6
8446: EQUAL
8447: OR
8448: PUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 266
8458: PUSH
8459: LD_INT 29
8461: EQUAL
8462: OR
8463: PUSH
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 266
8473: PUSH
8474: LD_INT 26
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 266
8488: PUSH
8489: LD_INT 30
8491: EQUAL
8492: OR
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 266
8503: PUSH
8504: LD_INT 28
8506: EQUAL
8507: OR
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 266
8518: PUSH
8519: LD_INT 27
8521: EQUAL
8522: OR
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 266
8533: PUSH
8534: LD_INT 33
8536: EQUAL
8537: OR
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: OR
8553: PUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: CALL_OW 266
8563: PUSH
8564: LD_INT 4
8566: EQUAL
8567: OR
8568: IFFALSE 8654
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8570: LD_ADDR_EXP 10
8574: PUSH
8575: LD_EXP 10
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 266
8589: ADD
8590: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8591: LD_ADDR_EXP 10
8595: PUSH
8596: LD_EXP 10
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 250
8610: ADD
8611: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8612: LD_ADDR_EXP 10
8616: PUSH
8617: LD_EXP 10
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 251
8631: ADD
8632: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8633: LD_ADDR_EXP 10
8637: PUSH
8638: LD_EXP 10
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 254
8652: ADD
8653: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 266
8663: PUSH
8664: LD_INT 1
8666: EQUAL
8667: IFFALSE 8746
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8669: LD_ADDR_EXP 10
8673: PUSH
8674: LD_EXP 10
8678: PUSH
8679: LD_INT 0
8681: ADD
8682: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8683: LD_ADDR_EXP 10
8687: PUSH
8688: LD_EXP 10
8692: PUSH
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 250
8702: ADD
8703: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8704: LD_ADDR_EXP 10
8708: PUSH
8709: LD_EXP 10
8713: PUSH
8714: LD_VAR 0 1
8718: PPUSH
8719: CALL_OW 251
8723: ADD
8724: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8725: LD_ADDR_EXP 10
8729: PUSH
8730: LD_EXP 10
8734: PUSH
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 254
8744: ADD
8745: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 266
8755: PUSH
8756: LD_INT 3
8758: EQUAL
8759: IFFALSE 8838
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8761: LD_ADDR_EXP 10
8765: PUSH
8766: LD_EXP 10
8770: PUSH
8771: LD_INT 2
8773: ADD
8774: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8775: LD_ADDR_EXP 10
8779: PUSH
8780: LD_EXP 10
8784: PUSH
8785: LD_VAR 0 1
8789: PPUSH
8790: CALL_OW 250
8794: ADD
8795: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8796: LD_ADDR_EXP 10
8800: PUSH
8801: LD_EXP 10
8805: PUSH
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 251
8815: ADD
8816: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8817: LD_ADDR_EXP 10
8821: PUSH
8822: LD_EXP 10
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 254
8836: ADD
8837: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 266
8847: PUSH
8848: LD_INT 5
8850: EQUAL
8851: IFFALSE 8930
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8853: LD_ADDR_EXP 10
8857: PUSH
8858: LD_EXP 10
8862: PUSH
8863: LD_INT 4
8865: ADD
8866: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8867: LD_ADDR_EXP 10
8871: PUSH
8872: LD_EXP 10
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 250
8886: ADD
8887: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8888: LD_ADDR_EXP 10
8892: PUSH
8893: LD_EXP 10
8897: PUSH
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 251
8907: ADD
8908: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8909: LD_ADDR_EXP 10
8913: PUSH
8914: LD_EXP 10
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 254
8928: ADD
8929: ST_TO_ADDR
// end ; end ; end ;
8930: PPOPN 1
8932: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8933: LD_VAR 0 3
8937: PPUSH
8938: CALL_OW 264
8942: PUSH
8943: LD_INT 10
8945: EQUAL
8946: IFFALSE 8962
// destroyCounter := destroyCounter + 1 ;
8948: LD_ADDR_EXP 17
8952: PUSH
8953: LD_EXP 17
8957: PUSH
8958: LD_INT 1
8960: PLUS
8961: ST_TO_ADDR
// end ;
8962: PPOPN 3
8964: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8965: LD_VAR 0 2
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 2
8978: PUSH
8979: LD_INT 40
8981: EQUAL
8982: OR
8983: IFFALSE 9107
// if GetSide ( vehicle ) = 3 then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 255
8994: PUSH
8995: LD_INT 3
8997: EQUAL
8998: IFFALSE 9107
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 264
9009: PUSH
9010: LD_INT 47
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 264
9023: PUSH
9024: LD_INT 46
9026: EQUAL
9027: OR
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 264
9038: PUSH
9039: LD_INT 45
9041: EQUAL
9042: OR
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 264
9053: PUSH
9054: LD_INT 44
9056: EQUAL
9057: OR
9058: IFFALSE 9076
// russianTanks = russianTanks ^ vehicle ;
9060: LD_ADDR_EXP 11
9064: PUSH
9065: LD_EXP 11
9069: PUSH
9070: LD_VAR 0 1
9074: ADD
9075: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 264
9085: PUSH
9086: LD_INT 49
9088: EQUAL
9089: IFFALSE 9107
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
9091: LD_ADDR_EXP 12
9095: PUSH
9096: LD_EXP 12
9100: PUSH
9101: LD_VAR 0 1
9105: ADD
9106: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 255
9116: PUSH
9117: LD_INT 1
9119: EQUAL
9120: PUSH
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 264
9130: PUSH
9131: LD_INT 10
9133: EQUAL
9134: AND
9135: IFFALSE 9151
// amLaserCounter = amLaserCounter + 1 ;
9137: LD_ADDR_EXP 9
9141: PUSH
9142: LD_EXP 9
9146: PUSH
9147: LD_INT 1
9149: PLUS
9150: ST_TO_ADDR
// end ;
9151: PPOPN 2
9153: END
// on UnitGoesToRed ( unit ) do var i ;
9154: LD_INT 0
9156: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 3
9169: EQUAL
9170: PUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 247
9180: PUSH
9181: LD_INT 2
9183: EQUAL
9184: AND
9185: IFFALSE 9297
// begin if russianTanks > 0 then
9187: LD_EXP 11
9191: PUSH
9192: LD_INT 0
9194: GREATER
9195: IFFALSE 9242
// for i in russianTanks do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_EXP 11
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9240
// if i = unit then
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 1
9219: EQUAL
9220: IFFALSE 9238
// russianTanks = russianTanks diff unit ;
9222: LD_ADDR_EXP 11
9226: PUSH
9227: LD_EXP 11
9231: PUSH
9232: LD_VAR 0 1
9236: DIFF
9237: ST_TO_ADDR
9238: GO 9207
9240: POP
9241: POP
// if russianTimeLapsers > 0 then
9242: LD_EXP 12
9246: PUSH
9247: LD_INT 0
9249: GREATER
9250: IFFALSE 9297
// for i in russianTimeLapsers do
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: LD_EXP 12
9261: PUSH
9262: FOR_IN
9263: IFFALSE 9295
// if i = unit then
9265: LD_VAR 0 2
9269: PUSH
9270: LD_VAR 0 1
9274: EQUAL
9275: IFFALSE 9293
// russianTimeLapsers = russianTimeLapsers diff unit ;
9277: LD_ADDR_EXP 12
9281: PUSH
9282: LD_EXP 12
9286: PUSH
9287: LD_VAR 0 1
9291: DIFF
9292: ST_TO_ADDR
9293: GO 9262
9295: POP
9296: POP
// end ; end ;
9297: PPOPN 2
9299: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL 21856 0 1
// end ; end_of_file
9309: PPOPN 1
9311: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9312: LD_EXP 1
9316: PPUSH
9317: CALL_OW 310
9321: PPUSH
9322: LD_INT 12
9324: PPUSH
9325: CALL_OW 308
9329: PUSH
9330: LD_EXP 15
9334: PUSH
9335: LD_INT 0
9337: EQUAL
9338: AND
9339: IFFALSE 9685
9341: GO 9343
9343: DISABLE
9344: LD_INT 0
9346: PPUSH
9347: PPUSH
// begin enable ;
9348: ENABLE
// if JMMGirl = 1 then
9349: LD_EXP 7
9353: PUSH
9354: LD_INT 1
9356: EQUAL
9357: IFFALSE 9374
// JMMGirlVeh = IsInUnit ( Joan ) ;
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_EXP 2
9368: PPUSH
9369: CALL_OW 310
9373: ST_TO_ADDR
// if JMMGirl = 2 then
9374: LD_EXP 7
9378: PUSH
9379: LD_INT 2
9381: EQUAL
9382: IFFALSE 9399
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_EXP 3
9393: PPUSH
9394: CALL_OW 310
9398: ST_TO_ADDR
// if JMMGirl = 3 then
9399: LD_EXP 7
9403: PUSH
9404: LD_INT 3
9406: EQUAL
9407: IFFALSE 9424
// JMMGirlVeh = IsInUnit ( Connie ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_EXP 4
9418: PPUSH
9419: CALL_OW 310
9423: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9424: LD_EXP 1
9428: PPUSH
9429: CALL_OW 310
9433: PPUSH
9434: LD_EXP 2
9438: PPUSH
9439: CALL_OW 310
9443: PPUSH
9444: CALL_OW 296
9448: PUSH
9449: LD_INT 10
9451: LESS
9452: PUSH
9453: LD_EXP 1
9457: PPUSH
9458: CALL_OW 310
9462: PPUSH
9463: LD_EXP 3
9467: PPUSH
9468: CALL_OW 310
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 10
9480: LESS
9481: OR
9482: PUSH
9483: LD_EXP 1
9487: PPUSH
9488: CALL_OW 310
9492: PPUSH
9493: LD_EXP 4
9497: PPUSH
9498: CALL_OW 310
9502: PPUSH
9503: CALL_OW 296
9507: PUSH
9508: LD_INT 10
9510: LESS
9511: OR
9512: IFFALSE 9606
// begin case Query ( Q3b ) of 1 :
9514: LD_STRING Q3b
9516: PPUSH
9517: CALL_OW 97
9521: PUSH
9522: LD_INT 1
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9603
9530: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9531: LD_VAR 0 1
9535: PPUSH
9536: CALL_OW 265
9540: PUSH
9541: EMPTY
9542: LIST
9543: PUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 262
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 263
9566: PUSH
9567: EMPTY
9568: LIST
9569: PUSH
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 264
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: LD_STRING 14_JMMGirlVeh_1
9591: PPUSH
9592: CALL_OW 39
// FinishMission ;
9596: CALL 9826 0 0
// disable ;
9600: DISABLE
// end ; end ;
9601: GO 9604
9603: POP
// end else
9604: GO 9685
// begin if JMMGirl = 1 then
9606: LD_EXP 7
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: IFFALSE 9631
// dec := Query ( Q3bJ ) else
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_STRING Q3bJ
9623: PPUSH
9624: CALL_OW 97
9628: ST_TO_ADDR
9629: GO 9669
// if JMMGirl = 2 then
9631: LD_EXP 7
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: IFFALSE 9656
// dec := Query ( Q3bL ) else
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: LD_STRING Q3bL
9648: PPUSH
9649: CALL_OW 97
9653: ST_TO_ADDR
9654: GO 9669
// dec := Query ( Q3bX ) ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_STRING Q3bX
9663: PPUSH
9664: CALL_OW 97
9668: ST_TO_ADDR
// if dec = 1 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 1
9676: EQUAL
9677: IFFALSE 9685
// begin FinishMission ;
9679: CALL 9826 0 0
// exit ;
9683: GO 9685
// end ; end ; end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9688: LD_INT 22
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 0
9719: EQUAL
9720: PUSH
9721: LD_EXP 15
9725: PUSH
9726: LD_INT 0
9728: EQUAL
9729: AND
9730: IFFALSE 9825
9732: GO 9734
9734: DISABLE
// begin DialogueOn ;
9735: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9739: LD_EXP 1
9743: PPUSH
9744: LD_STRING DEnd-JMM-1
9746: PPUSH
9747: CALL_OW 88
// if JMMGirl = 1 then
9751: LD_EXP 7
9755: PUSH
9756: LD_INT 1
9758: EQUAL
9759: IFFALSE 9773
// Say ( Joan , DEnd-Joan-1 ) ;
9761: LD_EXP 2
9765: PPUSH
9766: LD_STRING DEnd-Joan-1
9768: PPUSH
9769: CALL_OW 88
// if JMMGirl = 2 then
9773: LD_EXP 7
9777: PUSH
9778: LD_INT 2
9780: EQUAL
9781: IFFALSE 9795
// Say ( Lisa , DEnd-Lisa-1 ) ;
9783: LD_EXP 3
9787: PPUSH
9788: LD_STRING DEnd-Lisa-1
9790: PPUSH
9791: CALL_OW 88
// if JMMGirl = 3 then
9795: LD_EXP 7
9799: PUSH
9800: LD_INT 3
9802: EQUAL
9803: IFFALSE 9817
// Say ( Connie , DEnd-Con-1 ) ;
9805: LD_EXP 4
9809: PPUSH
9810: LD_STRING DEnd-Con-1
9812: PPUSH
9813: CALL_OW 88
// DialogueOff ;
9817: CALL_OW 7
// FinishMission ;
9821: CALL 9826 0 0
// end ;
9825: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
// m1 := false ;
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_INT 0
9840: ST_TO_ADDR
// m2 := false ;
9841: LD_ADDR_VAR 0 4
9845: PUSH
9846: LD_INT 0
9848: ST_TO_ADDR
// m3 := false ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: LD_INT 0
9856: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9857: LD_EXP 1
9861: PPUSH
9862: LD_STRING 14_JMM
9864: PPUSH
9865: CALL_OW 38
// if tick <= 50 50$00 then
9869: LD_OWVAR 1
9873: PUSH
9874: LD_INT 105000
9876: LESSEQUAL
9877: IFFALSE 9886
// SetAchievement ( ACH_ASPEED_14 ) ;
9879: LD_STRING ACH_ASPEED_14
9881: PPUSH
9882: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9886: LD_EXP 1
9890: PPUSH
9891: CALL_OW 310
9895: PUSH
9896: LD_EXP 1
9900: PPUSH
9901: CALL_OW 310
9905: PPUSH
9906: CALL_OW 247
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: AND
9915: IFFALSE 9997
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_EXP 1
9926: PPUSH
9927: CALL_OW 310
9931: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9932: LD_VAR 0 2
9936: PPUSH
9937: CALL_OW 265
9941: PUSH
9942: EMPTY
9943: LIST
9944: PUSH
9945: LD_VAR 0 2
9949: PPUSH
9950: CALL_OW 262
9954: PUSH
9955: EMPTY
9956: LIST
9957: PUSH
9958: LD_VAR 0 2
9962: PPUSH
9963: CALL_OW 263
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_VAR 0 2
9975: PPUSH
9976: CALL_OW 264
9980: PUSH
9981: EMPTY
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PPUSH
9990: LD_STRING 14_JMMVeh_1
9992: PPUSH
9993: CALL_OW 39
// end ; if fastEnd = 1 then
9997: LD_EXP 15
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 10094
// begin AddMedal ( fastend , - 1 ) ;
10007: LD_STRING fastend
10009: PPUSH
10010: LD_INT 1
10012: NEG
10013: PPUSH
10014: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10018: LD_STRING fastend
10020: PPUSH
10021: LD_INT 1
10023: NEG
10024: PPUSH
10025: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10029: LD_STRING fastend
10031: PPUSH
10032: LD_INT 1
10034: NEG
10035: PPUSH
10036: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10040: LD_EXP 7
10044: PPUSH
10045: LD_STRING 14_JMMGirl_1
10047: PPUSH
10048: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10052: LD_INT 0
10054: PPUSH
10055: LD_STRING 14_JMMGirlStatus_1
10057: PPUSH
10058: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10062: LD_INT 0
10064: PPUSH
10065: LD_STRING 14_KappaStatus_1
10067: PPUSH
10068: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10072: LD_STRING Eliminate
10074: PPUSH
10075: CALL_OW 102
// RewardPeople ( JMM ) ;
10079: LD_EXP 1
10083: PPUSH
10084: CALL_OW 43
// YouWin ;
10088: CALL_OW 103
// exit ;
10092: GO 10919
// end ; if fastEnd = 0 then
10094: LD_EXP 15
10098: PUSH
10099: LD_INT 0
10101: EQUAL
10102: IFFALSE 10812
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10104: LD_EXP 7
10108: PPUSH
10109: LD_STRING 14_JMMGirl_1
10111: PPUSH
10112: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
10116: LD_INT 22
10118: PUSH
10119: LD_INT 3
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: PUSH
10145: LD_INT 0
10147: EQUAL
10148: PUSH
10149: LD_INT 48
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 1
10159: EQUAL
10160: AND
10161: IFFALSE 10175
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
10163: LD_INT 1
10165: PPUSH
10166: LD_STRING 14_KappaStatus_1
10168: PPUSH
10169: CALL_OW 39
10173: GO 10185
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10175: LD_INT 0
10177: PPUSH
10178: LD_STRING 14_KappaStatus_1
10180: PPUSH
10181: CALL_OW 39
// case JMMGirl of 1 :
10185: LD_EXP 7
10189: PUSH
10190: LD_INT 1
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10354
10198: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10199: LD_EXP 2
10203: PPUSH
10204: CALL_OW 302
10208: PUSH
10209: LD_EXP 2
10213: PPUSH
10214: CALL_OW 255
10218: PUSH
10219: LD_INT 1
10221: EQUAL
10222: AND
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 3
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 21
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: CALL_OW 69
10252: PUSH
10253: LD_INT 0
10255: EQUAL
10256: PUSH
10257: LD_EXP 1
10261: PPUSH
10262: CALL_OW 310
10266: PPUSH
10267: LD_EXP 2
10271: PPUSH
10272: CALL_OW 310
10276: PPUSH
10277: CALL_OW 296
10281: PUSH
10282: LD_INT 10
10284: LESS
10285: OR
10286: AND
10287: IFFALSE 10331
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10289: LD_INT 1
10291: PPUSH
10292: LD_STRING 14_JMMGirlStatus_1
10294: PPUSH
10295: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10299: LD_EXP 2
10303: PPUSH
10304: LD_STRING 14_Joan
10306: PPUSH
10307: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10311: LD_STRING protect
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 101
// m1 := true ;
10321: LD_ADDR_VAR 0 3
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// end else
10329: GO 10352
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10331: LD_INT 0
10333: PPUSH
10334: LD_STRING 14_JMMGirlStatus_1
10336: PPUSH
10337: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10341: LD_STRING protect
10343: PPUSH
10344: LD_INT 1
10346: NEG
10347: PPUSH
10348: CALL_OW 101
// end ; end ; 2 :
10352: GO 10683
10354: LD_INT 2
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10518
10362: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10363: LD_EXP 3
10367: PPUSH
10368: CALL_OW 302
10372: PUSH
10373: LD_EXP 3
10377: PPUSH
10378: CALL_OW 255
10382: PUSH
10383: LD_INT 1
10385: EQUAL
10386: AND
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: PUSH
10421: LD_EXP 1
10425: PPUSH
10426: CALL_OW 310
10430: PPUSH
10431: LD_EXP 3
10435: PPUSH
10436: CALL_OW 310
10440: PPUSH
10441: CALL_OW 296
10445: PUSH
10446: LD_INT 10
10448: LESS
10449: OR
10450: AND
10451: IFFALSE 10495
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10453: LD_INT 1
10455: PPUSH
10456: LD_STRING 14_JMMGirlStatus_1
10458: PPUSH
10459: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10463: LD_EXP 3
10467: PPUSH
10468: LD_STRING 14_Lisa
10470: PPUSH
10471: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10475: LD_STRING protect
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 101
// m1 := true ;
10485: LD_ADDR_VAR 0 3
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end else
10493: GO 10516
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10495: LD_INT 0
10497: PPUSH
10498: LD_STRING 14_JMMGirlStatus_1
10500: PPUSH
10501: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10505: LD_STRING protect
10507: PPUSH
10508: LD_INT 2
10510: NEG
10511: PPUSH
10512: CALL_OW 101
// end ; end ; 3 :
10516: GO 10683
10518: LD_INT 3
10520: DOUBLE
10521: EQUAL
10522: IFTRUE 10526
10524: GO 10682
10526: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10527: LD_EXP 4
10531: PPUSH
10532: CALL_OW 302
10536: PUSH
10537: LD_EXP 4
10541: PPUSH
10542: CALL_OW 255
10546: PUSH
10547: LD_INT 1
10549: EQUAL
10550: AND
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: PUSH
10581: LD_INT 0
10583: EQUAL
10584: PUSH
10585: LD_EXP 1
10589: PPUSH
10590: CALL_OW 310
10594: PPUSH
10595: LD_EXP 4
10599: PPUSH
10600: CALL_OW 310
10604: PPUSH
10605: CALL_OW 296
10609: PUSH
10610: LD_INT 10
10612: LESS
10613: OR
10614: AND
10615: IFFALSE 10659
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10617: LD_INT 1
10619: PPUSH
10620: LD_STRING 14_JMMGirlStatus_1
10622: PPUSH
10623: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10627: LD_EXP 4
10631: PPUSH
10632: LD_STRING 14_Connie
10634: PPUSH
10635: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10639: LD_STRING protect
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 101
// m1 := true ;
10649: LD_ADDR_VAR 0 3
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// end else
10657: GO 10680
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10659: LD_INT 0
10661: PPUSH
10662: LD_STRING 14_JMMGirlStatus_1
10664: PPUSH
10665: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10669: LD_STRING protect
10671: PPUSH
10672: LD_INT 3
10674: NEG
10675: PPUSH
10676: CALL_OW 101
// end ; end ; end ;
10680: GO 10683
10682: POP
// if amLaserCounter >= 2 then
10683: LD_EXP 9
10687: PUSH
10688: LD_INT 2
10690: GREATEREQUAL
10691: IFFALSE 10713
// begin AddMedal ( double , 1 ) ;
10693: LD_STRING double
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 101
// m2 := true ;
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// end else
10711: GO 10747
// begin if amLaserCounter = 1 then
10713: LD_EXP 9
10717: PUSH
10718: LD_INT 1
10720: EQUAL
10721: IFFALSE 10736
// AddMedal ( double , - 2 ) else
10723: LD_STRING double
10725: PPUSH
10726: LD_INT 2
10728: NEG
10729: PPUSH
10730: CALL_OW 101
10734: GO 10747
// AddMedal ( double , - 1 ) ;
10736: LD_STRING double
10738: PPUSH
10739: LD_INT 1
10741: NEG
10742: PPUSH
10743: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10747: LD_INT 22
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 21
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PUSH
10776: LD_INT 0
10778: EQUAL
10779: IFFALSE 10801
// begin AddMedal ( base , 1 ) ;
10781: LD_STRING base
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 101
// m3 := true ;
10791: LD_ADDR_VAR 0 5
10795: PUSH
10796: LD_INT 1
10798: ST_TO_ADDR
// end else
10799: GO 10812
// AddMedal ( base , - 1 ) ;
10801: LD_STRING base
10803: PPUSH
10804: LD_INT 1
10806: NEG
10807: PPUSH
10808: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_VAR 0 4
10821: AND
10822: PUSH
10823: LD_VAR 0 5
10827: AND
10828: PUSH
10829: LD_OWVAR 67
10833: PUSH
10834: LD_INT 3
10836: EQUAL
10837: AND
10838: IFFALSE 10850
// SetAchievementEX ( ACH_AMER , 14 ) ;
10840: LD_STRING ACH_AMER
10842: PPUSH
10843: LD_INT 14
10845: PPUSH
10846: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10850: LD_STRING Eliminate
10852: PPUSH
10853: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10857: LD_INT 22
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 3
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 12
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 25
10889: PUSH
10890: LD_INT 16
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: PPUSH
10911: CALL_OW 43
// YouWin ;
10915: CALL_OW 103
// end ; end_of_file
10919: LD_VAR 0 1
10923: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10924: LD_EXP 1
10928: PPUSH
10929: CALL_OW 301
10933: IFFALSE 10945
10935: GO 10937
10937: DISABLE
// YouLost ( JMM ) ; end_of_file
10938: LD_STRING JMM
10940: PPUSH
10941: CALL_OW 104
10945: END
// every 1 1$0 do
10946: GO 10948
10948: DISABLE
// begin enable ;
10949: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10950: LD_INT 3
10952: PPUSH
10953: LD_INT 5
10955: PPUSH
10956: CALL_OW 12
10960: PPUSH
10961: LD_INT 13
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 55
// end ; end_of_file
10971: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10972: GO 10974
10974: DISABLE
// begin ru_radar := 98 ;
10975: LD_ADDR_EXP 19
10979: PUSH
10980: LD_INT 98
10982: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10983: LD_ADDR_EXP 20
10987: PUSH
10988: LD_INT 89
10990: ST_TO_ADDR
// us_hack := 99 ;
10991: LD_ADDR_EXP 21
10995: PUSH
10996: LD_INT 99
10998: ST_TO_ADDR
// us_artillery := 97 ;
10999: LD_ADDR_EXP 22
11003: PUSH
11004: LD_INT 97
11006: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11007: LD_ADDR_EXP 23
11011: PUSH
11012: LD_INT 91
11014: ST_TO_ADDR
// end ; end_of_file end_of_file
11015: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11016: GO 11018
11018: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11019: LD_STRING initStreamRollete();
11021: PPUSH
11022: CALL_OW 559
// InitStreamMode ;
11026: CALL 11035 0 0
// DefineStreamItems ( ) ;
11030: CALL 11475 0 0
// end ;
11034: END
// function InitStreamMode ; begin
11035: LD_INT 0
11037: PPUSH
// streamModeActive := false ;
11038: LD_ADDR_EXP 24
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// normalCounter := 26 ;
11046: LD_ADDR_EXP 25
11050: PUSH
11051: LD_INT 26
11053: ST_TO_ADDR
// hardcoreCounter := 12 ;
11054: LD_ADDR_EXP 26
11058: PUSH
11059: LD_INT 12
11061: ST_TO_ADDR
// sRocket := false ;
11062: LD_ADDR_EXP 29
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// sSpeed := false ;
11070: LD_ADDR_EXP 28
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sEngine := false ;
11078: LD_ADDR_EXP 30
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sSpec := false ;
11086: LD_ADDR_EXP 27
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sLevel := false ;
11094: LD_ADDR_EXP 31
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sArmoury := false ;
11102: LD_ADDR_EXP 32
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sRadar := false ;
11110: LD_ADDR_EXP 33
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sBunker := false ;
11118: LD_ADDR_EXP 34
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sHack := false ;
11126: LD_ADDR_EXP 35
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sFire := false ;
11134: LD_ADDR_EXP 36
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sRefresh := false ;
11142: LD_ADDR_EXP 37
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sExp := false ;
11150: LD_ADDR_EXP 38
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sDepot := false ;
11158: LD_ADDR_EXP 39
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sFlag := false ;
11166: LD_ADDR_EXP 40
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sKamikadze := false ;
11174: LD_ADDR_EXP 48
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sTroll := false ;
11182: LD_ADDR_EXP 49
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sSlow := false ;
11190: LD_ADDR_EXP 50
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sLack := false ;
11198: LD_ADDR_EXP 51
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sTank := false ;
11206: LD_ADDR_EXP 53
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sRemote := false ;
11214: LD_ADDR_EXP 54
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sPowell := false ;
11222: LD_ADDR_EXP 55
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sTeleport := false ;
11230: LD_ADDR_EXP 58
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sOilTower := false ;
11238: LD_ADDR_EXP 60
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sShovel := false ;
11246: LD_ADDR_EXP 61
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sSheik := false ;
11254: LD_ADDR_EXP 62
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sEarthquake := false ;
11262: LD_ADDR_EXP 64
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sAI := false ;
11270: LD_ADDR_EXP 65
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sCargo := false ;
11278: LD_ADDR_EXP 68
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sDLaser := false ;
11286: LD_ADDR_EXP 69
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sExchange := false ;
11294: LD_ADDR_EXP 70
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sFac := false ;
11302: LD_ADDR_EXP 71
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sPower := false ;
11310: LD_ADDR_EXP 72
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sRandom := false ;
11318: LD_ADDR_EXP 73
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sShield := false ;
11326: LD_ADDR_EXP 74
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sTime := false ;
11334: LD_ADDR_EXP 75
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sTools := false ;
11342: LD_ADDR_EXP 76
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sSold := false ;
11350: LD_ADDR_EXP 41
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sDiff := false ;
11358: LD_ADDR_EXP 42
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sFog := false ;
11366: LD_ADDR_EXP 45
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sReset := false ;
11374: LD_ADDR_EXP 46
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sSun := false ;
11382: LD_ADDR_EXP 47
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sTiger := false ;
11390: LD_ADDR_EXP 43
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sBomb := false ;
11398: LD_ADDR_EXP 44
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sWound := false ;
11406: LD_ADDR_EXP 52
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sBetray := false ;
11414: LD_ADDR_EXP 56
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sContamin := false ;
11422: LD_ADDR_EXP 57
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sOil := false ;
11430: LD_ADDR_EXP 59
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sStu := false ;
11438: LD_ADDR_EXP 63
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sBazooka := false ;
11446: LD_ADDR_EXP 66
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sMortar := false ;
11454: LD_ADDR_EXP 67
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sRanger := false ;
11462: LD_ADDR_EXP 77
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// end ;
11470: LD_VAR 0 1
11474: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
// result := [ ] ;
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// if campaign_id = 1 then
11489: LD_OWVAR 69
11493: PUSH
11494: LD_INT 1
11496: EQUAL
11497: IFFALSE 14433
// begin case mission_number of 1 :
11499: LD_OWVAR 70
11503: PUSH
11504: LD_INT 1
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11576
11512: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11513: LD_ADDR_VAR 0 1
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: LD_INT 11
11526: PUSH
11527: LD_INT 12
11529: PUSH
11530: LD_INT 15
11532: PUSH
11533: LD_INT 16
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 23
11541: PUSH
11542: LD_INT 26
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 101
11558: PUSH
11559: LD_INT 102
11561: PUSH
11562: LD_INT 106
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: ST_TO_ADDR
11574: GO 14433
11576: LD_INT 2
11578: DOUBLE
11579: EQUAL
11580: IFTRUE 11584
11582: GO 11656
11584: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11585: LD_ADDR_VAR 0 1
11589: PUSH
11590: LD_INT 2
11592: PUSH
11593: LD_INT 4
11595: PUSH
11596: LD_INT 11
11598: PUSH
11599: LD_INT 12
11601: PUSH
11602: LD_INT 15
11604: PUSH
11605: LD_INT 16
11607: PUSH
11608: LD_INT 22
11610: PUSH
11611: LD_INT 23
11613: PUSH
11614: LD_INT 26
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 102
11633: PUSH
11634: LD_INT 105
11636: PUSH
11637: LD_INT 106
11639: PUSH
11640: LD_INT 108
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 14433
11656: LD_INT 3
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11740
11664: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 4
11675: PUSH
11676: LD_INT 5
11678: PUSH
11679: LD_INT 11
11681: PUSH
11682: LD_INT 12
11684: PUSH
11685: LD_INT 15
11687: PUSH
11688: LD_INT 16
11690: PUSH
11691: LD_INT 22
11693: PUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 36
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 101
11714: PUSH
11715: LD_INT 102
11717: PUSH
11718: LD_INT 105
11720: PUSH
11721: LD_INT 106
11723: PUSH
11724: LD_INT 108
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: ST_TO_ADDR
11738: GO 14433
11740: LD_INT 4
11742: DOUBLE
11743: EQUAL
11744: IFTRUE 11748
11746: GO 11832
11748: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11749: LD_ADDR_VAR 0 1
11753: PUSH
11754: LD_INT 2
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: LD_INT 5
11762: PUSH
11763: LD_INT 8
11765: PUSH
11766: LD_INT 11
11768: PUSH
11769: LD_INT 12
11771: PUSH
11772: LD_INT 15
11774: PUSH
11775: LD_INT 16
11777: PUSH
11778: LD_INT 22
11780: PUSH
11781: LD_INT 23
11783: PUSH
11784: LD_INT 26
11786: PUSH
11787: LD_INT 36
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 101
11806: PUSH
11807: LD_INT 102
11809: PUSH
11810: LD_INT 105
11812: PUSH
11813: LD_INT 106
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 14433
11832: LD_INT 5
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 11940
11840: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: LD_INT 5
11854: PUSH
11855: LD_INT 6
11857: PUSH
11858: LD_INT 8
11860: PUSH
11861: LD_INT 11
11863: PUSH
11864: LD_INT 12
11866: PUSH
11867: LD_INT 15
11869: PUSH
11870: LD_INT 16
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: LD_INT 23
11878: PUSH
11879: LD_INT 25
11881: PUSH
11882: LD_INT 26
11884: PUSH
11885: LD_INT 36
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 105
11912: PUSH
11913: LD_INT 106
11915: PUSH
11916: LD_INT 108
11918: PUSH
11919: LD_INT 109
11921: PUSH
11922: LD_INT 112
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: ST_TO_ADDR
11938: GO 14433
11940: LD_INT 6
11942: DOUBLE
11943: EQUAL
11944: IFTRUE 11948
11946: GO 12068
11948: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11949: LD_ADDR_VAR 0 1
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 4
11959: PUSH
11960: LD_INT 5
11962: PUSH
11963: LD_INT 6
11965: PUSH
11966: LD_INT 8
11968: PUSH
11969: LD_INT 11
11971: PUSH
11972: LD_INT 12
11974: PUSH
11975: LD_INT 15
11977: PUSH
11978: LD_INT 16
11980: PUSH
11981: LD_INT 20
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 23
11992: PUSH
11993: LD_INT 25
11995: PUSH
11996: LD_INT 26
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 31
12004: PUSH
12005: LD_INT 32
12007: PUSH
12008: LD_INT 36
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 101
12034: PUSH
12035: LD_INT 102
12037: PUSH
12038: LD_INT 105
12040: PUSH
12041: LD_INT 106
12043: PUSH
12044: LD_INT 108
12046: PUSH
12047: LD_INT 109
12049: PUSH
12050: LD_INT 112
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 14433
12068: LD_INT 7
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12176
12076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12077: LD_ADDR_VAR 0 1
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: LD_INT 7
12093: PUSH
12094: LD_INT 11
12096: PUSH
12097: LD_INT 12
12099: PUSH
12100: LD_INT 15
12102: PUSH
12103: LD_INT 16
12105: PUSH
12106: LD_INT 20
12108: PUSH
12109: LD_INT 21
12111: PUSH
12112: LD_INT 22
12114: PUSH
12115: LD_INT 23
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 26
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 101
12142: PUSH
12143: LD_INT 102
12145: PUSH
12146: LD_INT 103
12148: PUSH
12149: LD_INT 105
12151: PUSH
12152: LD_INT 106
12154: PUSH
12155: LD_INT 108
12157: PUSH
12158: LD_INT 112
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: ST_TO_ADDR
12174: GO 14433
12176: LD_INT 8
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12312
12184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: LD_INT 4
12195: PUSH
12196: LD_INT 5
12198: PUSH
12199: LD_INT 6
12201: PUSH
12202: LD_INT 7
12204: PUSH
12205: LD_INT 8
12207: PUSH
12208: LD_INT 11
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: LD_INT 15
12216: PUSH
12217: LD_INT 16
12219: PUSH
12220: LD_INT 20
12222: PUSH
12223: LD_INT 21
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_INT 23
12231: PUSH
12232: LD_INT 25
12234: PUSH
12235: LD_INT 26
12237: PUSH
12238: LD_INT 30
12240: PUSH
12241: LD_INT 31
12243: PUSH
12244: LD_INT 32
12246: PUSH
12247: LD_INT 36
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 101
12274: PUSH
12275: LD_INT 102
12277: PUSH
12278: LD_INT 103
12280: PUSH
12281: LD_INT 105
12283: PUSH
12284: LD_INT 106
12286: PUSH
12287: LD_INT 108
12289: PUSH
12290: LD_INT 109
12292: PUSH
12293: LD_INT 112
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: ST_TO_ADDR
12310: GO 14433
12312: LD_INT 9
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12456
12320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 4
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: LD_INT 6
12337: PUSH
12338: LD_INT 7
12340: PUSH
12341: LD_INT 8
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: LD_INT 12
12349: PUSH
12350: LD_INT 15
12352: PUSH
12353: LD_INT 16
12355: PUSH
12356: LD_INT 20
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_INT 23
12367: PUSH
12368: LD_INT 25
12370: PUSH
12371: LD_INT 26
12373: PUSH
12374: LD_INT 28
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 31
12382: PUSH
12383: LD_INT 32
12385: PUSH
12386: LD_INT 36
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 101
12414: PUSH
12415: LD_INT 102
12417: PUSH
12418: LD_INT 103
12420: PUSH
12421: LD_INT 105
12423: PUSH
12424: LD_INT 106
12426: PUSH
12427: LD_INT 108
12429: PUSH
12430: LD_INT 109
12432: PUSH
12433: LD_INT 112
12435: PUSH
12436: LD_INT 114
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
12454: GO 14433
12456: LD_INT 10
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12648
12464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 2
12472: PUSH
12473: LD_INT 4
12475: PUSH
12476: LD_INT 5
12478: PUSH
12479: LD_INT 6
12481: PUSH
12482: LD_INT 7
12484: PUSH
12485: LD_INT 8
12487: PUSH
12488: LD_INT 9
12490: PUSH
12491: LD_INT 10
12493: PUSH
12494: LD_INT 11
12496: PUSH
12497: LD_INT 12
12499: PUSH
12500: LD_INT 13
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 28
12544: PUSH
12545: LD_INT 30
12547: PUSH
12548: LD_INT 31
12550: PUSH
12551: LD_INT 32
12553: PUSH
12554: LD_INT 36
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 101
12590: PUSH
12591: LD_INT 102
12593: PUSH
12594: LD_INT 103
12596: PUSH
12597: LD_INT 104
12599: PUSH
12600: LD_INT 105
12602: PUSH
12603: LD_INT 106
12605: PUSH
12606: LD_INT 107
12608: PUSH
12609: LD_INT 108
12611: PUSH
12612: LD_INT 109
12614: PUSH
12615: LD_INT 110
12617: PUSH
12618: LD_INT 111
12620: PUSH
12621: LD_INT 112
12623: PUSH
12624: LD_INT 114
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: ST_TO_ADDR
12646: GO 14433
12648: LD_INT 11
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12848
12656: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: LD_INT 4
12670: PUSH
12671: LD_INT 5
12673: PUSH
12674: LD_INT 6
12676: PUSH
12677: LD_INT 7
12679: PUSH
12680: LD_INT 8
12682: PUSH
12683: LD_INT 9
12685: PUSH
12686: LD_INT 10
12688: PUSH
12689: LD_INT 11
12691: PUSH
12692: LD_INT 12
12694: PUSH
12695: LD_INT 13
12697: PUSH
12698: LD_INT 14
12700: PUSH
12701: LD_INT 15
12703: PUSH
12704: LD_INT 16
12706: PUSH
12707: LD_INT 17
12709: PUSH
12710: LD_INT 18
12712: PUSH
12713: LD_INT 19
12715: PUSH
12716: LD_INT 20
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: LD_INT 25
12733: PUSH
12734: LD_INT 26
12736: PUSH
12737: LD_INT 28
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 31
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 34
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 101
12790: PUSH
12791: LD_INT 102
12793: PUSH
12794: LD_INT 103
12796: PUSH
12797: LD_INT 104
12799: PUSH
12800: LD_INT 105
12802: PUSH
12803: LD_INT 106
12805: PUSH
12806: LD_INT 107
12808: PUSH
12809: LD_INT 108
12811: PUSH
12812: LD_INT 109
12814: PUSH
12815: LD_INT 110
12817: PUSH
12818: LD_INT 111
12820: PUSH
12821: LD_INT 112
12823: PUSH
12824: LD_INT 114
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
12846: GO 14433
12848: LD_INT 12
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 13064
12856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: LD_INT 2
12867: PUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 7
12882: PUSH
12883: LD_INT 8
12885: PUSH
12886: LD_INT 9
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 11
12894: PUSH
12895: LD_INT 12
12897: PUSH
12898: LD_INT 13
12900: PUSH
12901: LD_INT 14
12903: PUSH
12904: LD_INT 15
12906: PUSH
12907: LD_INT 16
12909: PUSH
12910: LD_INT 17
12912: PUSH
12913: LD_INT 18
12915: PUSH
12916: LD_INT 19
12918: PUSH
12919: LD_INT 20
12921: PUSH
12922: LD_INT 21
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 23
12930: PUSH
12931: LD_INT 24
12933: PUSH
12934: LD_INT 25
12936: PUSH
12937: LD_INT 26
12939: PUSH
12940: LD_INT 27
12942: PUSH
12943: LD_INT 28
12945: PUSH
12946: LD_INT 30
12948: PUSH
12949: LD_INT 31
12951: PUSH
12952: LD_INT 32
12954: PUSH
12955: LD_INT 33
12957: PUSH
12958: LD_INT 34
12960: PUSH
12961: LD_INT 36
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 101
13002: PUSH
13003: LD_INT 102
13005: PUSH
13006: LD_INT 103
13008: PUSH
13009: LD_INT 104
13011: PUSH
13012: LD_INT 105
13014: PUSH
13015: LD_INT 106
13017: PUSH
13018: LD_INT 107
13020: PUSH
13021: LD_INT 108
13023: PUSH
13024: LD_INT 109
13026: PUSH
13027: LD_INT 110
13029: PUSH
13030: LD_INT 111
13032: PUSH
13033: LD_INT 112
13035: PUSH
13036: LD_INT 113
13038: PUSH
13039: LD_INT 114
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: ST_TO_ADDR
13062: GO 14433
13064: LD_INT 13
13066: DOUBLE
13067: EQUAL
13068: IFTRUE 13072
13070: GO 13268
13072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13073: LD_ADDR_VAR 0 1
13077: PUSH
13078: LD_INT 1
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: LD_INT 3
13086: PUSH
13087: LD_INT 4
13089: PUSH
13090: LD_INT 5
13092: PUSH
13093: LD_INT 8
13095: PUSH
13096: LD_INT 9
13098: PUSH
13099: LD_INT 10
13101: PUSH
13102: LD_INT 11
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 14
13110: PUSH
13111: LD_INT 15
13113: PUSH
13114: LD_INT 16
13116: PUSH
13117: LD_INT 17
13119: PUSH
13120: LD_INT 18
13122: PUSH
13123: LD_INT 19
13125: PUSH
13126: LD_INT 20
13128: PUSH
13129: LD_INT 21
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_INT 23
13137: PUSH
13138: LD_INT 24
13140: PUSH
13141: LD_INT 25
13143: PUSH
13144: LD_INT 26
13146: PUSH
13147: LD_INT 27
13149: PUSH
13150: LD_INT 28
13152: PUSH
13153: LD_INT 30
13155: PUSH
13156: LD_INT 31
13158: PUSH
13159: LD_INT 32
13161: PUSH
13162: LD_INT 33
13164: PUSH
13165: LD_INT 34
13167: PUSH
13168: LD_INT 36
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 101
13206: PUSH
13207: LD_INT 102
13209: PUSH
13210: LD_INT 103
13212: PUSH
13213: LD_INT 104
13215: PUSH
13216: LD_INT 105
13218: PUSH
13219: LD_INT 106
13221: PUSH
13222: LD_INT 107
13224: PUSH
13225: LD_INT 108
13227: PUSH
13228: LD_INT 109
13230: PUSH
13231: LD_INT 110
13233: PUSH
13234: LD_INT 111
13236: PUSH
13237: LD_INT 112
13239: PUSH
13240: LD_INT 113
13242: PUSH
13243: LD_INT 114
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: ST_TO_ADDR
13266: GO 14433
13268: LD_INT 14
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 13488
13276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: LD_INT 4
13293: PUSH
13294: LD_INT 5
13296: PUSH
13297: LD_INT 6
13299: PUSH
13300: LD_INT 7
13302: PUSH
13303: LD_INT 8
13305: PUSH
13306: LD_INT 9
13308: PUSH
13309: LD_INT 10
13311: PUSH
13312: LD_INT 11
13314: PUSH
13315: LD_INT 12
13317: PUSH
13318: LD_INT 13
13320: PUSH
13321: LD_INT 14
13323: PUSH
13324: LD_INT 15
13326: PUSH
13327: LD_INT 16
13329: PUSH
13330: LD_INT 17
13332: PUSH
13333: LD_INT 18
13335: PUSH
13336: LD_INT 19
13338: PUSH
13339: LD_INT 20
13341: PUSH
13342: LD_INT 21
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_INT 23
13350: PUSH
13351: LD_INT 24
13353: PUSH
13354: LD_INT 25
13356: PUSH
13357: LD_INT 26
13359: PUSH
13360: LD_INT 27
13362: PUSH
13363: LD_INT 28
13365: PUSH
13366: LD_INT 29
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 31
13374: PUSH
13375: LD_INT 32
13377: PUSH
13378: LD_INT 33
13380: PUSH
13381: LD_INT 34
13383: PUSH
13384: LD_INT 36
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 101
13426: PUSH
13427: LD_INT 102
13429: PUSH
13430: LD_INT 103
13432: PUSH
13433: LD_INT 104
13435: PUSH
13436: LD_INT 105
13438: PUSH
13439: LD_INT 106
13441: PUSH
13442: LD_INT 107
13444: PUSH
13445: LD_INT 108
13447: PUSH
13448: LD_INT 109
13450: PUSH
13451: LD_INT 110
13453: PUSH
13454: LD_INT 111
13456: PUSH
13457: LD_INT 112
13459: PUSH
13460: LD_INT 113
13462: PUSH
13463: LD_INT 114
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: ST_TO_ADDR
13486: GO 14433
13488: LD_INT 15
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13708
13496: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13497: LD_ADDR_VAR 0 1
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: LD_INT 6
13519: PUSH
13520: LD_INT 7
13522: PUSH
13523: LD_INT 8
13525: PUSH
13526: LD_INT 9
13528: PUSH
13529: LD_INT 10
13531: PUSH
13532: LD_INT 11
13534: PUSH
13535: LD_INT 12
13537: PUSH
13538: LD_INT 13
13540: PUSH
13541: LD_INT 14
13543: PUSH
13544: LD_INT 15
13546: PUSH
13547: LD_INT 16
13549: PUSH
13550: LD_INT 17
13552: PUSH
13553: LD_INT 18
13555: PUSH
13556: LD_INT 19
13558: PUSH
13559: LD_INT 20
13561: PUSH
13562: LD_INT 21
13564: PUSH
13565: LD_INT 22
13567: PUSH
13568: LD_INT 23
13570: PUSH
13571: LD_INT 24
13573: PUSH
13574: LD_INT 25
13576: PUSH
13577: LD_INT 26
13579: PUSH
13580: LD_INT 27
13582: PUSH
13583: LD_INT 28
13585: PUSH
13586: LD_INT 29
13588: PUSH
13589: LD_INT 30
13591: PUSH
13592: LD_INT 31
13594: PUSH
13595: LD_INT 32
13597: PUSH
13598: LD_INT 33
13600: PUSH
13601: LD_INT 34
13603: PUSH
13604: LD_INT 36
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 101
13646: PUSH
13647: LD_INT 102
13649: PUSH
13650: LD_INT 103
13652: PUSH
13653: LD_INT 104
13655: PUSH
13656: LD_INT 105
13658: PUSH
13659: LD_INT 106
13661: PUSH
13662: LD_INT 107
13664: PUSH
13665: LD_INT 108
13667: PUSH
13668: LD_INT 109
13670: PUSH
13671: LD_INT 110
13673: PUSH
13674: LD_INT 111
13676: PUSH
13677: LD_INT 112
13679: PUSH
13680: LD_INT 113
13682: PUSH
13683: LD_INT 114
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: ST_TO_ADDR
13706: GO 14433
13708: LD_INT 16
13710: DOUBLE
13711: EQUAL
13712: IFTRUE 13716
13714: GO 13840
13716: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13717: LD_ADDR_VAR 0 1
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: LD_INT 4
13727: PUSH
13728: LD_INT 5
13730: PUSH
13731: LD_INT 7
13733: PUSH
13734: LD_INT 11
13736: PUSH
13737: LD_INT 12
13739: PUSH
13740: LD_INT 15
13742: PUSH
13743: LD_INT 16
13745: PUSH
13746: LD_INT 20
13748: PUSH
13749: LD_INT 21
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_INT 23
13757: PUSH
13758: LD_INT 25
13760: PUSH
13761: LD_INT 26
13763: PUSH
13764: LD_INT 30
13766: PUSH
13767: LD_INT 31
13769: PUSH
13770: LD_INT 32
13772: PUSH
13773: LD_INT 33
13775: PUSH
13776: LD_INT 34
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 101
13802: PUSH
13803: LD_INT 102
13805: PUSH
13806: LD_INT 103
13808: PUSH
13809: LD_INT 106
13811: PUSH
13812: LD_INT 108
13814: PUSH
13815: LD_INT 112
13817: PUSH
13818: LD_INT 113
13820: PUSH
13821: LD_INT 114
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: ST_TO_ADDR
13838: GO 14433
13840: LD_INT 17
13842: DOUBLE
13843: EQUAL
13844: IFTRUE 13848
13846: GO 14060
13848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: LD_INT 1
13856: PUSH
13857: LD_INT 2
13859: PUSH
13860: LD_INT 3
13862: PUSH
13863: LD_INT 4
13865: PUSH
13866: LD_INT 5
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: LD_INT 7
13874: PUSH
13875: LD_INT 8
13877: PUSH
13878: LD_INT 9
13880: PUSH
13881: LD_INT 10
13883: PUSH
13884: LD_INT 11
13886: PUSH
13887: LD_INT 12
13889: PUSH
13890: LD_INT 13
13892: PUSH
13893: LD_INT 14
13895: PUSH
13896: LD_INT 15
13898: PUSH
13899: LD_INT 16
13901: PUSH
13902: LD_INT 17
13904: PUSH
13905: LD_INT 18
13907: PUSH
13908: LD_INT 19
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: LD_INT 21
13916: PUSH
13917: LD_INT 22
13919: PUSH
13920: LD_INT 23
13922: PUSH
13923: LD_INT 24
13925: PUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 26
13931: PUSH
13932: LD_INT 27
13934: PUSH
13935: LD_INT 28
13937: PUSH
13938: LD_INT 29
13940: PUSH
13941: LD_INT 30
13943: PUSH
13944: LD_INT 31
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: LD_INT 33
13952: PUSH
13953: LD_INT 34
13955: PUSH
13956: LD_INT 36
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 101
13998: PUSH
13999: LD_INT 102
14001: PUSH
14002: LD_INT 103
14004: PUSH
14005: LD_INT 104
14007: PUSH
14008: LD_INT 105
14010: PUSH
14011: LD_INT 106
14013: PUSH
14014: LD_INT 107
14016: PUSH
14017: LD_INT 108
14019: PUSH
14020: LD_INT 109
14022: PUSH
14023: LD_INT 110
14025: PUSH
14026: LD_INT 111
14028: PUSH
14029: LD_INT 112
14031: PUSH
14032: LD_INT 113
14034: PUSH
14035: LD_INT 114
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: ST_TO_ADDR
14058: GO 14433
14060: LD_INT 18
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14204
14068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 4
14079: PUSH
14080: LD_INT 5
14082: PUSH
14083: LD_INT 7
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 15
14094: PUSH
14095: LD_INT 16
14097: PUSH
14098: LD_INT 20
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_INT 23
14109: PUSH
14110: LD_INT 25
14112: PUSH
14113: LD_INT 26
14115: PUSH
14116: LD_INT 30
14118: PUSH
14119: LD_INT 31
14121: PUSH
14122: LD_INT 32
14124: PUSH
14125: LD_INT 33
14127: PUSH
14128: LD_INT 34
14130: PUSH
14131: LD_INT 35
14133: PUSH
14134: LD_INT 36
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 106
14171: PUSH
14172: LD_INT 108
14174: PUSH
14175: LD_INT 112
14177: PUSH
14178: LD_INT 113
14180: PUSH
14181: LD_INT 114
14183: PUSH
14184: LD_INT 115
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
14202: GO 14433
14204: LD_INT 19
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14432
14212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14213: LD_ADDR_VAR 0 1
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: LD_INT 2
14223: PUSH
14224: LD_INT 3
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: LD_INT 5
14232: PUSH
14233: LD_INT 6
14235: PUSH
14236: LD_INT 7
14238: PUSH
14239: LD_INT 8
14241: PUSH
14242: LD_INT 9
14244: PUSH
14245: LD_INT 10
14247: PUSH
14248: LD_INT 11
14250: PUSH
14251: LD_INT 12
14253: PUSH
14254: LD_INT 13
14256: PUSH
14257: LD_INT 14
14259: PUSH
14260: LD_INT 15
14262: PUSH
14263: LD_INT 16
14265: PUSH
14266: LD_INT 17
14268: PUSH
14269: LD_INT 18
14271: PUSH
14272: LD_INT 19
14274: PUSH
14275: LD_INT 20
14277: PUSH
14278: LD_INT 21
14280: PUSH
14281: LD_INT 22
14283: PUSH
14284: LD_INT 23
14286: PUSH
14287: LD_INT 24
14289: PUSH
14290: LD_INT 25
14292: PUSH
14293: LD_INT 26
14295: PUSH
14296: LD_INT 27
14298: PUSH
14299: LD_INT 28
14301: PUSH
14302: LD_INT 29
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: LD_INT 31
14310: PUSH
14311: LD_INT 32
14313: PUSH
14314: LD_INT 33
14316: PUSH
14317: LD_INT 34
14319: PUSH
14320: LD_INT 35
14322: PUSH
14323: LD_INT 36
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 101
14366: PUSH
14367: LD_INT 102
14369: PUSH
14370: LD_INT 103
14372: PUSH
14373: LD_INT 104
14375: PUSH
14376: LD_INT 105
14378: PUSH
14379: LD_INT 106
14381: PUSH
14382: LD_INT 107
14384: PUSH
14385: LD_INT 108
14387: PUSH
14388: LD_INT 109
14390: PUSH
14391: LD_INT 110
14393: PUSH
14394: LD_INT 111
14396: PUSH
14397: LD_INT 112
14399: PUSH
14400: LD_INT 113
14402: PUSH
14403: LD_INT 114
14405: PUSH
14406: LD_INT 115
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: ST_TO_ADDR
14430: GO 14433
14432: POP
// end ; if result then
14433: LD_VAR 0 1
14437: IFFALSE 14726
// begin normal :=  ;
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_STRING 
14446: ST_TO_ADDR
// hardcore :=  ;
14447: LD_ADDR_VAR 0 4
14451: PUSH
14452: LD_STRING 
14454: ST_TO_ADDR
// for i = 1 to normalCounter do
14455: LD_ADDR_VAR 0 5
14459: PUSH
14460: DOUBLE
14461: LD_INT 1
14463: DEC
14464: ST_TO_ADDR
14465: LD_EXP 25
14469: PUSH
14470: FOR_TO
14471: IFFALSE 14572
// begin tmp := 0 ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_STRING 0
14480: ST_TO_ADDR
// if result [ 1 ] then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: IFFALSE 14554
// if result [ 1 ] [ 1 ] = i then
14491: LD_VAR 0 1
14495: PUSH
14496: LD_INT 1
14498: ARRAY
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PUSH
14504: LD_VAR 0 5
14508: EQUAL
14509: IFFALSE 14554
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: LD_INT 1
14523: PPUSH
14524: LD_VAR 0 1
14528: PUSH
14529: LD_INT 1
14531: ARRAY
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: CALL_OW 3
14540: PPUSH
14541: CALL_OW 1
14545: ST_TO_ADDR
// tmp := 1 ;
14546: LD_ADDR_VAR 0 2
14550: PUSH
14551: LD_STRING 1
14553: ST_TO_ADDR
// end ; normal := normal & tmp ;
14554: LD_ADDR_VAR 0 3
14558: PUSH
14559: LD_VAR 0 3
14563: PUSH
14564: LD_VAR 0 2
14568: STR
14569: ST_TO_ADDR
// end ;
14570: GO 14470
14572: POP
14573: POP
// for i = 1 to hardcoreCounter do
14574: LD_ADDR_VAR 0 5
14578: PUSH
14579: DOUBLE
14580: LD_INT 1
14582: DEC
14583: ST_TO_ADDR
14584: LD_EXP 26
14588: PUSH
14589: FOR_TO
14590: IFFALSE 14695
// begin tmp := 0 ;
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_STRING 0
14599: ST_TO_ADDR
// if result [ 2 ] then
14600: LD_VAR 0 1
14604: PUSH
14605: LD_INT 2
14607: ARRAY
14608: IFFALSE 14677
// if result [ 2 ] [ 1 ] = 100 + i then
14610: LD_VAR 0 1
14614: PUSH
14615: LD_INT 2
14617: ARRAY
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PUSH
14623: LD_INT 100
14625: PUSH
14626: LD_VAR 0 5
14630: PLUS
14631: EQUAL
14632: IFFALSE 14677
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14634: LD_ADDR_VAR 0 1
14638: PUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: LD_INT 2
14646: PPUSH
14647: LD_VAR 0 1
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 3
14663: PPUSH
14664: CALL_OW 1
14668: ST_TO_ADDR
// tmp := 1 ;
14669: LD_ADDR_VAR 0 2
14673: PUSH
14674: LD_STRING 1
14676: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14677: LD_ADDR_VAR 0 4
14681: PUSH
14682: LD_VAR 0 4
14686: PUSH
14687: LD_VAR 0 2
14691: STR
14692: ST_TO_ADDR
// end ;
14693: GO 14589
14695: POP
14696: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14697: LD_STRING getStreamItemsFromMission("
14699: PUSH
14700: LD_VAR 0 3
14704: STR
14705: PUSH
14706: LD_STRING ","
14708: STR
14709: PUSH
14710: LD_VAR 0 4
14714: STR
14715: PUSH
14716: LD_STRING ")
14718: STR
14719: PPUSH
14720: CALL_OW 559
// end else
14724: GO 14733
// ToLua ( getStreamItemsFromMission("","") ) ;
14726: LD_STRING getStreamItemsFromMission("","")
14728: PPUSH
14729: CALL_OW 559
// end ;
14733: LD_VAR 0 1
14737: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14738: LD_VAR 0 2
14742: PUSH
14743: LD_INT 100
14745: EQUAL
14746: IFFALSE 15695
// begin if not StreamModeActive then
14748: LD_EXP 24
14752: NOT
14753: IFFALSE 14763
// StreamModeActive := true ;
14755: LD_ADDR_EXP 24
14759: PUSH
14760: LD_INT 1
14762: ST_TO_ADDR
// if p3 = 0 then
14763: LD_VAR 0 3
14767: PUSH
14768: LD_INT 0
14770: EQUAL
14771: IFFALSE 14777
// InitStreamMode ;
14773: CALL 11035 0 0
// if p3 = 1 then
14777: LD_VAR 0 3
14781: PUSH
14782: LD_INT 1
14784: EQUAL
14785: IFFALSE 14795
// sRocket := true ;
14787: LD_ADDR_EXP 29
14791: PUSH
14792: LD_INT 1
14794: ST_TO_ADDR
// if p3 = 2 then
14795: LD_VAR 0 3
14799: PUSH
14800: LD_INT 2
14802: EQUAL
14803: IFFALSE 14813
// sSpeed := true ;
14805: LD_ADDR_EXP 28
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if p3 = 3 then
14813: LD_VAR 0 3
14817: PUSH
14818: LD_INT 3
14820: EQUAL
14821: IFFALSE 14831
// sEngine := true ;
14823: LD_ADDR_EXP 30
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// if p3 = 4 then
14831: LD_VAR 0 3
14835: PUSH
14836: LD_INT 4
14838: EQUAL
14839: IFFALSE 14849
// sSpec := true ;
14841: LD_ADDR_EXP 27
14845: PUSH
14846: LD_INT 1
14848: ST_TO_ADDR
// if p3 = 5 then
14849: LD_VAR 0 3
14853: PUSH
14854: LD_INT 5
14856: EQUAL
14857: IFFALSE 14867
// sLevel := true ;
14859: LD_ADDR_EXP 31
14863: PUSH
14864: LD_INT 1
14866: ST_TO_ADDR
// if p3 = 6 then
14867: LD_VAR 0 3
14871: PUSH
14872: LD_INT 6
14874: EQUAL
14875: IFFALSE 14885
// sArmoury := true ;
14877: LD_ADDR_EXP 32
14881: PUSH
14882: LD_INT 1
14884: ST_TO_ADDR
// if p3 = 7 then
14885: LD_VAR 0 3
14889: PUSH
14890: LD_INT 7
14892: EQUAL
14893: IFFALSE 14903
// sRadar := true ;
14895: LD_ADDR_EXP 33
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if p3 = 8 then
14903: LD_VAR 0 3
14907: PUSH
14908: LD_INT 8
14910: EQUAL
14911: IFFALSE 14921
// sBunker := true ;
14913: LD_ADDR_EXP 34
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// if p3 = 9 then
14921: LD_VAR 0 3
14925: PUSH
14926: LD_INT 9
14928: EQUAL
14929: IFFALSE 14939
// sHack := true ;
14931: LD_ADDR_EXP 35
14935: PUSH
14936: LD_INT 1
14938: ST_TO_ADDR
// if p3 = 10 then
14939: LD_VAR 0 3
14943: PUSH
14944: LD_INT 10
14946: EQUAL
14947: IFFALSE 14957
// sFire := true ;
14949: LD_ADDR_EXP 36
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// if p3 = 11 then
14957: LD_VAR 0 3
14961: PUSH
14962: LD_INT 11
14964: EQUAL
14965: IFFALSE 14975
// sRefresh := true ;
14967: LD_ADDR_EXP 37
14971: PUSH
14972: LD_INT 1
14974: ST_TO_ADDR
// if p3 = 12 then
14975: LD_VAR 0 3
14979: PUSH
14980: LD_INT 12
14982: EQUAL
14983: IFFALSE 14993
// sExp := true ;
14985: LD_ADDR_EXP 38
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// if p3 = 13 then
14993: LD_VAR 0 3
14997: PUSH
14998: LD_INT 13
15000: EQUAL
15001: IFFALSE 15011
// sDepot := true ;
15003: LD_ADDR_EXP 39
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// if p3 = 14 then
15011: LD_VAR 0 3
15015: PUSH
15016: LD_INT 14
15018: EQUAL
15019: IFFALSE 15029
// sFlag := true ;
15021: LD_ADDR_EXP 40
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// if p3 = 15 then
15029: LD_VAR 0 3
15033: PUSH
15034: LD_INT 15
15036: EQUAL
15037: IFFALSE 15047
// sKamikadze := true ;
15039: LD_ADDR_EXP 48
15043: PUSH
15044: LD_INT 1
15046: ST_TO_ADDR
// if p3 = 16 then
15047: LD_VAR 0 3
15051: PUSH
15052: LD_INT 16
15054: EQUAL
15055: IFFALSE 15065
// sTroll := true ;
15057: LD_ADDR_EXP 49
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// if p3 = 17 then
15065: LD_VAR 0 3
15069: PUSH
15070: LD_INT 17
15072: EQUAL
15073: IFFALSE 15083
// sSlow := true ;
15075: LD_ADDR_EXP 50
15079: PUSH
15080: LD_INT 1
15082: ST_TO_ADDR
// if p3 = 18 then
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 18
15090: EQUAL
15091: IFFALSE 15101
// sLack := true ;
15093: LD_ADDR_EXP 51
15097: PUSH
15098: LD_INT 1
15100: ST_TO_ADDR
// if p3 = 19 then
15101: LD_VAR 0 3
15105: PUSH
15106: LD_INT 19
15108: EQUAL
15109: IFFALSE 15119
// sTank := true ;
15111: LD_ADDR_EXP 53
15115: PUSH
15116: LD_INT 1
15118: ST_TO_ADDR
// if p3 = 20 then
15119: LD_VAR 0 3
15123: PUSH
15124: LD_INT 20
15126: EQUAL
15127: IFFALSE 15137
// sRemote := true ;
15129: LD_ADDR_EXP 54
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// if p3 = 21 then
15137: LD_VAR 0 3
15141: PUSH
15142: LD_INT 21
15144: EQUAL
15145: IFFALSE 15155
// sPowell := true ;
15147: LD_ADDR_EXP 55
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// if p3 = 22 then
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 22
15162: EQUAL
15163: IFFALSE 15173
// sTeleport := true ;
15165: LD_ADDR_EXP 58
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// if p3 = 23 then
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 23
15180: EQUAL
15181: IFFALSE 15191
// sOilTower := true ;
15183: LD_ADDR_EXP 60
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// if p3 = 24 then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 24
15198: EQUAL
15199: IFFALSE 15209
// sShovel := true ;
15201: LD_ADDR_EXP 61
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// if p3 = 25 then
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 25
15216: EQUAL
15217: IFFALSE 15227
// sSheik := true ;
15219: LD_ADDR_EXP 62
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// if p3 = 26 then
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 26
15234: EQUAL
15235: IFFALSE 15245
// sEarthquake := true ;
15237: LD_ADDR_EXP 64
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// if p3 = 27 then
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 27
15252: EQUAL
15253: IFFALSE 15263
// sAI := true ;
15255: LD_ADDR_EXP 65
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// if p3 = 28 then
15263: LD_VAR 0 3
15267: PUSH
15268: LD_INT 28
15270: EQUAL
15271: IFFALSE 15281
// sCargo := true ;
15273: LD_ADDR_EXP 68
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// if p3 = 29 then
15281: LD_VAR 0 3
15285: PUSH
15286: LD_INT 29
15288: EQUAL
15289: IFFALSE 15299
// sDLaser := true ;
15291: LD_ADDR_EXP 69
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// if p3 = 30 then
15299: LD_VAR 0 3
15303: PUSH
15304: LD_INT 30
15306: EQUAL
15307: IFFALSE 15317
// sExchange := true ;
15309: LD_ADDR_EXP 70
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// if p3 = 31 then
15317: LD_VAR 0 3
15321: PUSH
15322: LD_INT 31
15324: EQUAL
15325: IFFALSE 15335
// sFac := true ;
15327: LD_ADDR_EXP 71
15331: PUSH
15332: LD_INT 1
15334: ST_TO_ADDR
// if p3 = 32 then
15335: LD_VAR 0 3
15339: PUSH
15340: LD_INT 32
15342: EQUAL
15343: IFFALSE 15353
// sPower := true ;
15345: LD_ADDR_EXP 72
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// if p3 = 33 then
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 33
15360: EQUAL
15361: IFFALSE 15371
// sRandom := true ;
15363: LD_ADDR_EXP 73
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// if p3 = 34 then
15371: LD_VAR 0 3
15375: PUSH
15376: LD_INT 34
15378: EQUAL
15379: IFFALSE 15389
// sShield := true ;
15381: LD_ADDR_EXP 74
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// if p3 = 35 then
15389: LD_VAR 0 3
15393: PUSH
15394: LD_INT 35
15396: EQUAL
15397: IFFALSE 15407
// sTime := true ;
15399: LD_ADDR_EXP 75
15403: PUSH
15404: LD_INT 1
15406: ST_TO_ADDR
// if p3 = 36 then
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 36
15414: EQUAL
15415: IFFALSE 15425
// sTools := true ;
15417: LD_ADDR_EXP 76
15421: PUSH
15422: LD_INT 1
15424: ST_TO_ADDR
// if p3 = 101 then
15425: LD_VAR 0 3
15429: PUSH
15430: LD_INT 101
15432: EQUAL
15433: IFFALSE 15443
// sSold := true ;
15435: LD_ADDR_EXP 41
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// if p3 = 102 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 102
15450: EQUAL
15451: IFFALSE 15461
// sDiff := true ;
15453: LD_ADDR_EXP 42
15457: PUSH
15458: LD_INT 1
15460: ST_TO_ADDR
// if p3 = 103 then
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 103
15468: EQUAL
15469: IFFALSE 15479
// sFog := true ;
15471: LD_ADDR_EXP 45
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// if p3 = 104 then
15479: LD_VAR 0 3
15483: PUSH
15484: LD_INT 104
15486: EQUAL
15487: IFFALSE 15497
// sReset := true ;
15489: LD_ADDR_EXP 46
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// if p3 = 105 then
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 105
15504: EQUAL
15505: IFFALSE 15515
// sSun := true ;
15507: LD_ADDR_EXP 47
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// if p3 = 106 then
15515: LD_VAR 0 3
15519: PUSH
15520: LD_INT 106
15522: EQUAL
15523: IFFALSE 15533
// sTiger := true ;
15525: LD_ADDR_EXP 43
15529: PUSH
15530: LD_INT 1
15532: ST_TO_ADDR
// if p3 = 107 then
15533: LD_VAR 0 3
15537: PUSH
15538: LD_INT 107
15540: EQUAL
15541: IFFALSE 15551
// sBomb := true ;
15543: LD_ADDR_EXP 44
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// if p3 = 108 then
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 108
15558: EQUAL
15559: IFFALSE 15569
// sWound := true ;
15561: LD_ADDR_EXP 52
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// if p3 = 109 then
15569: LD_VAR 0 3
15573: PUSH
15574: LD_INT 109
15576: EQUAL
15577: IFFALSE 15587
// sBetray := true ;
15579: LD_ADDR_EXP 56
15583: PUSH
15584: LD_INT 1
15586: ST_TO_ADDR
// if p3 = 110 then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_INT 110
15594: EQUAL
15595: IFFALSE 15605
// sContamin := true ;
15597: LD_ADDR_EXP 57
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// if p3 = 111 then
15605: LD_VAR 0 3
15609: PUSH
15610: LD_INT 111
15612: EQUAL
15613: IFFALSE 15623
// sOil := true ;
15615: LD_ADDR_EXP 59
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// if p3 = 112 then
15623: LD_VAR 0 3
15627: PUSH
15628: LD_INT 112
15630: EQUAL
15631: IFFALSE 15641
// sStu := true ;
15633: LD_ADDR_EXP 63
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// if p3 = 113 then
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 113
15648: EQUAL
15649: IFFALSE 15659
// sBazooka := true ;
15651: LD_ADDR_EXP 66
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// if p3 = 114 then
15659: LD_VAR 0 3
15663: PUSH
15664: LD_INT 114
15666: EQUAL
15667: IFFALSE 15677
// sMortar := true ;
15669: LD_ADDR_EXP 67
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// if p3 = 115 then
15677: LD_VAR 0 3
15681: PUSH
15682: LD_INT 115
15684: EQUAL
15685: IFFALSE 15695
// sRanger := true ;
15687: LD_ADDR_EXP 77
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// end ; end ;
15695: PPOPN 6
15697: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15698: LD_EXP 24
15702: PUSH
15703: LD_EXP 29
15707: AND
15708: IFFALSE 15832
15710: GO 15712
15712: DISABLE
15713: LD_INT 0
15715: PPUSH
15716: PPUSH
// begin enable ;
15717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15718: LD_ADDR_VAR 0 2
15722: PUSH
15723: LD_INT 22
15725: PUSH
15726: LD_OWVAR 2
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: LD_INT 34
15740: PUSH
15741: LD_INT 7
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 34
15750: PUSH
15751: LD_INT 45
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 28
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 34
15770: PUSH
15771: LD_INT 47
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 69
15793: ST_TO_ADDR
// if not tmp then
15794: LD_VAR 0 2
15798: NOT
15799: IFFALSE 15803
// exit ;
15801: GO 15832
// for i in tmp do
15803: LD_ADDR_VAR 0 1
15807: PUSH
15808: LD_VAR 0 2
15812: PUSH
15813: FOR_IN
15814: IFFALSE 15830
// begin SetLives ( i , 0 ) ;
15816: LD_VAR 0 1
15820: PPUSH
15821: LD_INT 0
15823: PPUSH
15824: CALL_OW 234
// end ;
15828: GO 15813
15830: POP
15831: POP
// end ;
15832: PPOPN 2
15834: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15835: LD_EXP 24
15839: PUSH
15840: LD_EXP 30
15844: AND
15845: IFFALSE 15929
15847: GO 15849
15849: DISABLE
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
// begin enable ;
15854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15855: LD_ADDR_VAR 0 2
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_OWVAR 2
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 32
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: ST_TO_ADDR
// if not tmp then
15891: LD_VAR 0 2
15895: NOT
15896: IFFALSE 15900
// exit ;
15898: GO 15929
// for i in tmp do
15900: LD_ADDR_VAR 0 1
15904: PUSH
15905: LD_VAR 0 2
15909: PUSH
15910: FOR_IN
15911: IFFALSE 15927
// begin SetLives ( i , 0 ) ;
15913: LD_VAR 0 1
15917: PPUSH
15918: LD_INT 0
15920: PPUSH
15921: CALL_OW 234
// end ;
15925: GO 15910
15927: POP
15928: POP
// end ;
15929: PPOPN 2
15931: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15932: LD_EXP 24
15936: PUSH
15937: LD_EXP 27
15941: AND
15942: IFFALSE 16035
15944: GO 15946
15946: DISABLE
15947: LD_INT 0
15949: PPUSH
// begin enable ;
15950: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_INT 22
15958: PUSH
15959: LD_OWVAR 2
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: LD_INT 25
15973: PUSH
15974: LD_INT 5
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 9
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 25
15993: PUSH
15994: LD_INT 8
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16033
// begin SetClass ( i , 1 ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: CALL_OW 336
// end ;
16031: GO 16016
16033: POP
16034: POP
// end ;
16035: PPOPN 1
16037: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16038: LD_EXP 24
16042: PUSH
16043: LD_EXP 28
16047: AND
16048: PUSH
16049: LD_OWVAR 65
16053: PUSH
16054: LD_INT 7
16056: LESS
16057: AND
16058: IFFALSE 16072
16060: GO 16062
16062: DISABLE
// begin enable ;
16063: ENABLE
// game_speed := 7 ;
16064: LD_ADDR_OWVAR 65
16068: PUSH
16069: LD_INT 7
16071: ST_TO_ADDR
// end ;
16072: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16073: LD_EXP 24
16077: PUSH
16078: LD_EXP 31
16082: AND
16083: IFFALSE 16285
16085: GO 16087
16087: DISABLE
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16093: LD_ADDR_VAR 0 3
16097: PUSH
16098: LD_INT 81
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 21
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PPUSH
16124: CALL_OW 69
16128: ST_TO_ADDR
// if not tmp then
16129: LD_VAR 0 3
16133: NOT
16134: IFFALSE 16138
// exit ;
16136: GO 16285
// if tmp > 5 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 5
16145: GREATER
16146: IFFALSE 16158
// k := 5 else
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_INT 5
16155: ST_TO_ADDR
16156: GO 16168
// k := tmp ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: LD_VAR 0 3
16167: ST_TO_ADDR
// for i := 1 to k do
16168: LD_ADDR_VAR 0 1
16172: PUSH
16173: DOUBLE
16174: LD_INT 1
16176: DEC
16177: ST_TO_ADDR
16178: LD_VAR 0 2
16182: PUSH
16183: FOR_TO
16184: IFFALSE 16283
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16186: LD_VAR 0 3
16190: PUSH
16191: LD_VAR 0 1
16195: ARRAY
16196: PPUSH
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 4
16204: MOD
16205: PUSH
16206: LD_INT 1
16208: PLUS
16209: PPUSH
16210: CALL_OW 259
16214: PUSH
16215: LD_INT 10
16217: LESS
16218: IFFALSE 16281
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16220: LD_VAR 0 3
16224: PUSH
16225: LD_VAR 0 1
16229: ARRAY
16230: PPUSH
16231: LD_VAR 0 1
16235: PUSH
16236: LD_INT 4
16238: MOD
16239: PUSH
16240: LD_INT 1
16242: PLUS
16243: PPUSH
16244: LD_VAR 0 3
16248: PUSH
16249: LD_VAR 0 1
16253: ARRAY
16254: PPUSH
16255: LD_VAR 0 1
16259: PUSH
16260: LD_INT 4
16262: MOD
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: PPUSH
16268: CALL_OW 259
16272: PUSH
16273: LD_INT 1
16275: PLUS
16276: PPUSH
16277: CALL_OW 237
16281: GO 16183
16283: POP
16284: POP
// end ;
16285: PPOPN 3
16287: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16288: LD_EXP 24
16292: PUSH
16293: LD_EXP 32
16297: AND
16298: IFFALSE 16318
16300: GO 16302
16302: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16303: LD_INT 4
16305: PPUSH
16306: LD_OWVAR 2
16310: PPUSH
16311: LD_INT 0
16313: PPUSH
16314: CALL_OW 324
16318: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16319: LD_EXP 24
16323: PUSH
16324: LD_EXP 61
16328: AND
16329: IFFALSE 16349
16331: GO 16333
16333: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16334: LD_INT 19
16336: PPUSH
16337: LD_OWVAR 2
16341: PPUSH
16342: LD_INT 0
16344: PPUSH
16345: CALL_OW 324
16349: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16350: LD_EXP 24
16354: PUSH
16355: LD_EXP 33
16359: AND
16360: IFFALSE 16462
16362: GO 16364
16364: DISABLE
16365: LD_INT 0
16367: PPUSH
16368: PPUSH
// begin enable ;
16369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16370: LD_ADDR_VAR 0 2
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_OWVAR 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 11
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 34
16402: PUSH
16403: LD_INT 30
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 69
16423: ST_TO_ADDR
// if not tmp then
16424: LD_VAR 0 2
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 16462
// for i in tmp do
16433: LD_ADDR_VAR 0 1
16437: PUSH
16438: LD_VAR 0 2
16442: PUSH
16443: FOR_IN
16444: IFFALSE 16460
// begin SetLives ( i , 0 ) ;
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 0
16453: PPUSH
16454: CALL_OW 234
// end ;
16458: GO 16443
16460: POP
16461: POP
// end ;
16462: PPOPN 2
16464: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16465: LD_EXP 24
16469: PUSH
16470: LD_EXP 34
16474: AND
16475: IFFALSE 16495
16477: GO 16479
16479: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16480: LD_INT 32
16482: PPUSH
16483: LD_OWVAR 2
16487: PPUSH
16488: LD_INT 0
16490: PPUSH
16491: CALL_OW 324
16495: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16496: LD_EXP 24
16500: PUSH
16501: LD_EXP 35
16505: AND
16506: IFFALSE 16687
16508: GO 16510
16510: DISABLE
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: LD_INT 22
16523: PUSH
16524: LD_OWVAR 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 33
16535: PUSH
16536: LD_INT 3
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 69
16551: ST_TO_ADDR
// if not tmp then
16552: LD_VAR 0 2
16556: NOT
16557: IFFALSE 16561
// exit ;
16559: GO 16687
// side := 0 ;
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// for i := 1 to 8 do
16569: LD_ADDR_VAR 0 1
16573: PUSH
16574: DOUBLE
16575: LD_INT 1
16577: DEC
16578: ST_TO_ADDR
16579: LD_INT 8
16581: PUSH
16582: FOR_TO
16583: IFFALSE 16631
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16585: LD_OWVAR 2
16589: PUSH
16590: LD_VAR 0 1
16594: NONEQUAL
16595: PUSH
16596: LD_OWVAR 2
16600: PPUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 81
16610: PUSH
16611: LD_INT 2
16613: EQUAL
16614: AND
16615: IFFALSE 16629
// begin side := i ;
16617: LD_ADDR_VAR 0 3
16621: PUSH
16622: LD_VAR 0 1
16626: ST_TO_ADDR
// break ;
16627: GO 16631
// end ;
16629: GO 16582
16631: POP
16632: POP
// if not side then
16633: LD_VAR 0 3
16637: NOT
16638: IFFALSE 16642
// exit ;
16640: GO 16687
// for i := 1 to tmp do
16642: LD_ADDR_VAR 0 1
16646: PUSH
16647: DOUBLE
16648: LD_INT 1
16650: DEC
16651: ST_TO_ADDR
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_TO
16658: IFFALSE 16685
// if Prob ( 60 ) then
16660: LD_INT 60
16662: PPUSH
16663: CALL_OW 13
16667: IFFALSE 16683
// SetSide ( i , side ) ;
16669: LD_VAR 0 1
16673: PPUSH
16674: LD_VAR 0 3
16678: PPUSH
16679: CALL_OW 235
16683: GO 16657
16685: POP
16686: POP
// end ;
16687: PPOPN 3
16689: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16690: LD_EXP 24
16694: PUSH
16695: LD_EXP 37
16699: AND
16700: IFFALSE 16819
16702: GO 16704
16704: DISABLE
16705: LD_INT 0
16707: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16708: LD_ADDR_VAR 0 1
16712: PUSH
16713: LD_INT 22
16715: PUSH
16716: LD_OWVAR 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 23
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 69
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16817
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 257
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 4
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: IN
16793: IFFALSE 16815
// SetClass ( un , rand ( 1 , 4 ) ) ;
16795: LD_VAR 0 1
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: LD_INT 4
16805: PPUSH
16806: CALL_OW 12
16810: PPUSH
16811: CALL_OW 336
16815: GO 16762
16817: POP
16818: POP
// end ;
16819: PPOPN 1
16821: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16822: LD_EXP 24
16826: PUSH
16827: LD_EXP 36
16831: AND
16832: IFFALSE 16911
16834: GO 16836
16836: DISABLE
16837: LD_INT 0
16839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 21
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PPUSH
16871: CALL_OW 69
16875: ST_TO_ADDR
// if not tmp then
16876: LD_VAR 0 1
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 16911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16885: LD_VAR 0 1
16889: PUSH
16890: LD_INT 1
16892: PPUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 12
16902: ARRAY
16903: PPUSH
16904: LD_INT 100
16906: PPUSH
16907: CALL_OW 234
// end ;
16911: PPOPN 1
16913: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16914: LD_EXP 24
16918: PUSH
16919: LD_EXP 38
16923: AND
16924: IFFALSE 17022
16926: GO 16928
16928: DISABLE
16929: LD_INT 0
16931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16932: LD_ADDR_VAR 0 1
16936: PUSH
16937: LD_INT 22
16939: PUSH
16940: LD_OWVAR 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 21
16951: PUSH
16952: LD_INT 1
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: ST_TO_ADDR
// if not tmp then
16968: LD_VAR 0 1
16972: NOT
16973: IFFALSE 16977
// exit ;
16975: GO 17022
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16977: LD_VAR 0 1
16981: PUSH
16982: LD_INT 1
16984: PPUSH
16985: LD_VAR 0 1
16989: PPUSH
16990: CALL_OW 12
16994: ARRAY
16995: PPUSH
16996: LD_INT 1
16998: PPUSH
16999: LD_INT 4
17001: PPUSH
17002: CALL_OW 12
17006: PPUSH
17007: LD_INT 3000
17009: PPUSH
17010: LD_INT 9000
17012: PPUSH
17013: CALL_OW 12
17017: PPUSH
17018: CALL_OW 492
// end ;
17022: PPOPN 1
17024: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17025: LD_EXP 24
17029: PUSH
17030: LD_EXP 39
17034: AND
17035: IFFALSE 17055
17037: GO 17039
17039: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17040: LD_INT 1
17042: PPUSH
17043: LD_OWVAR 2
17047: PPUSH
17048: LD_INT 0
17050: PPUSH
17051: CALL_OW 324
17055: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17056: LD_EXP 24
17060: PUSH
17061: LD_EXP 40
17065: AND
17066: IFFALSE 17149
17068: GO 17070
17070: DISABLE
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17075: LD_ADDR_VAR 0 2
17079: PUSH
17080: LD_INT 22
17082: PUSH
17083: LD_OWVAR 2
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 21
17094: PUSH
17095: LD_INT 3
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 69
17110: ST_TO_ADDR
// if not tmp then
17111: LD_VAR 0 2
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17149
// for i in tmp do
17120: LD_ADDR_VAR 0 1
17124: PUSH
17125: LD_VAR 0 2
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17147
// SetBLevel ( i , 10 ) ;
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 241
17145: GO 17130
17147: POP
17148: POP
// end ;
17149: PPOPN 2
17151: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17152: LD_EXP 24
17156: PUSH
17157: LD_EXP 41
17161: AND
17162: IFFALSE 17273
17164: GO 17166
17166: DISABLE
17167: LD_INT 0
17169: PPUSH
17170: PPUSH
17171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_INT 22
17179: PUSH
17180: LD_OWVAR 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 25
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: ST_TO_ADDR
// if not tmp then
17208: LD_VAR 0 3
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17273
// un := tmp [ rand ( 1 , tmp ) ] ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_VAR 0 3
17226: PUSH
17227: LD_INT 1
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: CALL_OW 12
17239: ARRAY
17240: ST_TO_ADDR
// if Crawls ( un ) then
17241: LD_VAR 0 2
17245: PPUSH
17246: CALL_OW 318
17250: IFFALSE 17261
// ComWalk ( un ) ;
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17261: LD_VAR 0 2
17265: PPUSH
17266: LD_INT 5
17268: PPUSH
17269: CALL_OW 336
// end ;
17273: PPOPN 3
17275: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17276: LD_EXP 24
17280: PUSH
17281: LD_EXP 42
17285: AND
17286: PUSH
17287: LD_OWVAR 67
17291: PUSH
17292: LD_INT 3
17294: LESS
17295: AND
17296: IFFALSE 17315
17298: GO 17300
17300: DISABLE
// Difficulty := Difficulty + 1 ;
17301: LD_ADDR_OWVAR 67
17305: PUSH
17306: LD_OWVAR 67
17310: PUSH
17311: LD_INT 1
17313: PLUS
17314: ST_TO_ADDR
17315: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17316: LD_EXP 24
17320: PUSH
17321: LD_EXP 43
17325: AND
17326: IFFALSE 17429
17328: GO 17330
17330: DISABLE
17331: LD_INT 0
17333: PPUSH
// begin for i := 1 to 5 do
17334: LD_ADDR_VAR 0 1
17338: PUSH
17339: DOUBLE
17340: LD_INT 1
17342: DEC
17343: ST_TO_ADDR
17344: LD_INT 5
17346: PUSH
17347: FOR_TO
17348: IFFALSE 17427
// begin uc_nation := nation_nature ;
17350: LD_ADDR_OWVAR 21
17354: PUSH
17355: LD_INT 0
17357: ST_TO_ADDR
// uc_side := 0 ;
17358: LD_ADDR_OWVAR 20
17362: PUSH
17363: LD_INT 0
17365: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17366: LD_ADDR_OWVAR 29
17370: PUSH
17371: LD_INT 12
17373: PUSH
17374: LD_INT 12
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: ST_TO_ADDR
// hc_agressivity := 20 ;
17381: LD_ADDR_OWVAR 35
17385: PUSH
17386: LD_INT 20
17388: ST_TO_ADDR
// hc_class := class_tiger ;
17389: LD_ADDR_OWVAR 28
17393: PUSH
17394: LD_INT 14
17396: ST_TO_ADDR
// hc_gallery :=  ;
17397: LD_ADDR_OWVAR 33
17401: PUSH
17402: LD_STRING 
17404: ST_TO_ADDR
// hc_name :=  ;
17405: LD_ADDR_OWVAR 26
17409: PUSH
17410: LD_STRING 
17412: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17413: CALL_OW 44
17417: PPUSH
17418: LD_INT 0
17420: PPUSH
17421: CALL_OW 51
// end ;
17425: GO 17347
17427: POP
17428: POP
// end ;
17429: PPOPN 1
17431: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17432: LD_EXP 24
17436: PUSH
17437: LD_EXP 44
17441: AND
17442: IFFALSE 17451
17444: GO 17446
17446: DISABLE
// StreamSibBomb ;
17447: CALL 17452 0 0
17451: END
// export function StreamSibBomb ; var i , x , y ; begin
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
// result := false ;
17458: LD_ADDR_VAR 0 1
17462: PUSH
17463: LD_INT 0
17465: ST_TO_ADDR
// for i := 1 to 16 do
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: DOUBLE
17472: LD_INT 1
17474: DEC
17475: ST_TO_ADDR
17476: LD_INT 16
17478: PUSH
17479: FOR_TO
17480: IFFALSE 17679
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17482: LD_ADDR_VAR 0 3
17486: PUSH
17487: LD_INT 10
17489: PUSH
17490: LD_INT 20
17492: PUSH
17493: LD_INT 30
17495: PUSH
17496: LD_INT 40
17498: PUSH
17499: LD_INT 50
17501: PUSH
17502: LD_INT 60
17504: PUSH
17505: LD_INT 70
17507: PUSH
17508: LD_INT 80
17510: PUSH
17511: LD_INT 90
17513: PUSH
17514: LD_INT 100
17516: PUSH
17517: LD_INT 110
17519: PUSH
17520: LD_INT 120
17522: PUSH
17523: LD_INT 130
17525: PUSH
17526: LD_INT 140
17528: PUSH
17529: LD_INT 150
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: PPUSH
17552: LD_INT 15
17554: PPUSH
17555: CALL_OW 12
17559: ARRAY
17560: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17561: LD_ADDR_VAR 0 4
17565: PUSH
17566: LD_INT 10
17568: PUSH
17569: LD_INT 20
17571: PUSH
17572: LD_INT 30
17574: PUSH
17575: LD_INT 40
17577: PUSH
17578: LD_INT 50
17580: PUSH
17581: LD_INT 60
17583: PUSH
17584: LD_INT 70
17586: PUSH
17587: LD_INT 80
17589: PUSH
17590: LD_INT 90
17592: PUSH
17593: LD_INT 100
17595: PUSH
17596: LD_INT 110
17598: PUSH
17599: LD_INT 120
17601: PUSH
17602: LD_INT 130
17604: PUSH
17605: LD_INT 140
17607: PUSH
17608: LD_INT 150
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: PPUSH
17631: LD_INT 15
17633: PPUSH
17634: CALL_OW 12
17638: ARRAY
17639: ST_TO_ADDR
// if ValidHex ( x , y ) then
17640: LD_VAR 0 3
17644: PPUSH
17645: LD_VAR 0 4
17649: PPUSH
17650: CALL_OW 488
17654: IFFALSE 17677
// begin result := [ x , y ] ;
17656: LD_ADDR_VAR 0 1
17660: PUSH
17661: LD_VAR 0 3
17665: PUSH
17666: LD_VAR 0 4
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: ST_TO_ADDR
// break ;
17675: GO 17679
// end ; end ;
17677: GO 17479
17679: POP
17680: POP
// if result then
17681: LD_VAR 0 1
17685: IFFALSE 17745
// begin ToLua ( playSibBomb() ) ;
17687: LD_STRING playSibBomb()
17689: PPUSH
17690: CALL_OW 559
// wait ( 0 0$14 ) ;
17694: LD_INT 490
17696: PPUSH
17697: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17701: LD_VAR 0 1
17705: PUSH
17706: LD_INT 1
17708: ARRAY
17709: PPUSH
17710: LD_VAR 0 1
17714: PUSH
17715: LD_INT 2
17717: ARRAY
17718: PPUSH
17719: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17723: LD_VAR 0 1
17727: PUSH
17728: LD_INT 1
17730: ARRAY
17731: PPUSH
17732: LD_VAR 0 1
17736: PUSH
17737: LD_INT 2
17739: ARRAY
17740: PPUSH
17741: CALL_OW 429
// end ; end ;
17745: LD_VAR 0 1
17749: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17750: LD_EXP 24
17754: PUSH
17755: LD_EXP 46
17759: AND
17760: IFFALSE 17772
17762: GO 17764
17764: DISABLE
// YouLost (  ) ;
17765: LD_STRING 
17767: PPUSH
17768: CALL_OW 104
17772: END
// every 0 0$1 trigger StreamModeActive and sFog do
17773: LD_EXP 24
17777: PUSH
17778: LD_EXP 45
17782: AND
17783: IFFALSE 17797
17785: GO 17787
17787: DISABLE
// FogOff ( your_side ) ;
17788: LD_OWVAR 2
17792: PPUSH
17793: CALL_OW 344
17797: END
// every 0 0$1 trigger StreamModeActive and sSun do
17798: LD_EXP 24
17802: PUSH
17803: LD_EXP 47
17807: AND
17808: IFFALSE 17836
17810: GO 17812
17812: DISABLE
// begin solar_recharge_percent := 0 ;
17813: LD_ADDR_OWVAR 79
17817: PUSH
17818: LD_INT 0
17820: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17821: LD_INT 10500
17823: PPUSH
17824: CALL_OW 67
// solar_recharge_percent := 100 ;
17828: LD_ADDR_OWVAR 79
17832: PUSH
17833: LD_INT 100
17835: ST_TO_ADDR
// end ;
17836: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17837: LD_EXP 24
17841: PUSH
17842: LD_EXP 48
17846: AND
17847: IFFALSE 18086
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
17856: PPUSH
// begin tmp := [ ] ;
17857: LD_ADDR_VAR 0 3
17861: PUSH
17862: EMPTY
17863: ST_TO_ADDR
// for i := 1 to 6 do
17864: LD_ADDR_VAR 0 1
17868: PUSH
17869: DOUBLE
17870: LD_INT 1
17872: DEC
17873: ST_TO_ADDR
17874: LD_INT 6
17876: PUSH
17877: FOR_TO
17878: IFFALSE 17983
// begin uc_nation := nation_nature ;
17880: LD_ADDR_OWVAR 21
17884: PUSH
17885: LD_INT 0
17887: ST_TO_ADDR
// uc_side := 0 ;
17888: LD_ADDR_OWVAR 20
17892: PUSH
17893: LD_INT 0
17895: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17896: LD_ADDR_OWVAR 29
17900: PUSH
17901: LD_INT 12
17903: PUSH
17904: LD_INT 12
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: ST_TO_ADDR
// hc_agressivity := 20 ;
17911: LD_ADDR_OWVAR 35
17915: PUSH
17916: LD_INT 20
17918: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17919: LD_ADDR_OWVAR 28
17923: PUSH
17924: LD_INT 17
17926: ST_TO_ADDR
// hc_gallery :=  ;
17927: LD_ADDR_OWVAR 33
17931: PUSH
17932: LD_STRING 
17934: ST_TO_ADDR
// hc_name :=  ;
17935: LD_ADDR_OWVAR 26
17939: PUSH
17940: LD_STRING 
17942: ST_TO_ADDR
// un := CreateHuman ;
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: CALL_OW 44
17952: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17953: LD_VAR 0 2
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 51
// tmp := tmp ^ un ;
17965: LD_ADDR_VAR 0 3
17969: PUSH
17970: LD_VAR 0 3
17974: PUSH
17975: LD_VAR 0 2
17979: ADD
17980: ST_TO_ADDR
// end ;
17981: GO 17877
17983: POP
17984: POP
// repeat wait ( 0 0$1 ) ;
17985: LD_INT 35
17987: PPUSH
17988: CALL_OW 67
// for un in tmp do
17992: LD_ADDR_VAR 0 2
17996: PUSH
17997: LD_VAR 0 3
18001: PUSH
18002: FOR_IN
18003: IFFALSE 18077
// begin if IsDead ( un ) then
18005: LD_VAR 0 2
18009: PPUSH
18010: CALL_OW 301
18014: IFFALSE 18034
// begin tmp := tmp diff un ;
18016: LD_ADDR_VAR 0 3
18020: PUSH
18021: LD_VAR 0 3
18025: PUSH
18026: LD_VAR 0 2
18030: DIFF
18031: ST_TO_ADDR
// continue ;
18032: GO 18002
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 3
18041: PUSH
18042: LD_INT 22
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 69
18060: PPUSH
18061: LD_VAR 0 2
18065: PPUSH
18066: CALL_OW 74
18070: PPUSH
18071: CALL_OW 115
// end ;
18075: GO 18002
18077: POP
18078: POP
// until not tmp ;
18079: LD_VAR 0 3
18083: NOT
18084: IFFALSE 17985
// end ;
18086: PPOPN 3
18088: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18089: LD_EXP 24
18093: PUSH
18094: LD_EXP 49
18098: AND
18099: IFFALSE 18153
18101: GO 18103
18103: DISABLE
// begin ToLua ( displayTroll(); ) ;
18104: LD_STRING displayTroll();
18106: PPUSH
18107: CALL_OW 559
// wait ( 3 3$00 ) ;
18111: LD_INT 6300
18113: PPUSH
18114: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18118: LD_STRING hideTroll();
18120: PPUSH
18121: CALL_OW 559
// wait ( 1 1$00 ) ;
18125: LD_INT 2100
18127: PPUSH
18128: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18132: LD_STRING displayTroll();
18134: PPUSH
18135: CALL_OW 559
// wait ( 1 1$00 ) ;
18139: LD_INT 2100
18141: PPUSH
18142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18146: LD_STRING hideTroll();
18148: PPUSH
18149: CALL_OW 559
// end ;
18153: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18154: LD_EXP 24
18158: PUSH
18159: LD_EXP 50
18163: AND
18164: IFFALSE 18227
18166: GO 18168
18168: DISABLE
18169: LD_INT 0
18171: PPUSH
// begin p := 0 ;
18172: LD_ADDR_VAR 0 1
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// repeat game_speed := 1 ;
18180: LD_ADDR_OWVAR 65
18184: PUSH
18185: LD_INT 1
18187: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18188: LD_INT 35
18190: PPUSH
18191: CALL_OW 67
// p := p + 1 ;
18195: LD_ADDR_VAR 0 1
18199: PUSH
18200: LD_VAR 0 1
18204: PUSH
18205: LD_INT 1
18207: PLUS
18208: ST_TO_ADDR
// until p >= 60 ;
18209: LD_VAR 0 1
18213: PUSH
18214: LD_INT 60
18216: GREATEREQUAL
18217: IFFALSE 18180
// game_speed := 4 ;
18219: LD_ADDR_OWVAR 65
18223: PUSH
18224: LD_INT 4
18226: ST_TO_ADDR
// end ;
18227: PPOPN 1
18229: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18230: LD_EXP 24
18234: PUSH
18235: LD_EXP 51
18239: AND
18240: IFFALSE 18386
18242: GO 18244
18244: DISABLE
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: LD_INT 22
18256: PUSH
18257: LD_OWVAR 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 2
18268: PUSH
18269: LD_INT 30
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 30
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PPUSH
18298: CALL_OW 69
18302: ST_TO_ADDR
// if not depot then
18303: LD_VAR 0 1
18307: NOT
18308: IFFALSE 18312
// exit ;
18310: GO 18386
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 1
18324: PPUSH
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 12
18334: ARRAY
18335: PPUSH
18336: CALL_OW 274
18340: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18341: LD_VAR 0 2
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: LD_INT 0
18351: PPUSH
18352: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_INT 2
18363: PPUSH
18364: LD_INT 0
18366: PPUSH
18367: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_INT 3
18378: PPUSH
18379: LD_INT 0
18381: PPUSH
18382: CALL_OW 277
// end ;
18386: PPOPN 2
18388: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18389: LD_EXP 24
18393: PUSH
18394: LD_EXP 52
18398: AND
18399: IFFALSE 18496
18401: GO 18403
18403: DISABLE
18404: LD_INT 0
18406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18407: LD_ADDR_VAR 0 1
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_OWVAR 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: LD_INT 23
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: PPUSH
18456: CALL_OW 69
18460: ST_TO_ADDR
// if not tmp then
18461: LD_VAR 0 1
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18470: LD_VAR 0 1
18474: PUSH
18475: LD_INT 1
18477: PPUSH
18478: LD_VAR 0 1
18482: PPUSH
18483: CALL_OW 12
18487: ARRAY
18488: PPUSH
18489: LD_INT 200
18491: PPUSH
18492: CALL_OW 234
// end ;
18496: PPOPN 1
18498: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18499: LD_EXP 24
18503: PUSH
18504: LD_EXP 53
18508: AND
18509: IFFALSE 18588
18511: GO 18513
18513: DISABLE
18514: LD_INT 0
18516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18517: LD_ADDR_VAR 0 1
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_OWVAR 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 21
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: ST_TO_ADDR
// if not tmp then
18553: LD_VAR 0 1
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18562: LD_VAR 0 1
18566: PUSH
18567: LD_INT 1
18569: PPUSH
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL_OW 12
18579: ARRAY
18580: PPUSH
18581: LD_INT 60
18583: PPUSH
18584: CALL_OW 234
// end ;
18588: PPOPN 1
18590: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18591: LD_EXP 24
18595: PUSH
18596: LD_EXP 54
18600: AND
18601: IFFALSE 18700
18603: GO 18605
18605: DISABLE
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
// begin enable ;
18610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18611: LD_ADDR_VAR 0 1
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_OWVAR 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 61
18630: PUSH
18631: EMPTY
18632: LIST
18633: PUSH
18634: LD_INT 33
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: ST_TO_ADDR
// if not tmp then
18654: LD_VAR 0 1
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18700
// for i in tmp do
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_VAR 0 1
18672: PUSH
18673: FOR_IN
18674: IFFALSE 18698
// if IsControledBy ( i ) then
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 312
18685: IFFALSE 18696
// ComUnlink ( i ) ;
18687: LD_VAR 0 2
18691: PPUSH
18692: CALL_OW 136
18696: GO 18673
18698: POP
18699: POP
// end ;
18700: PPOPN 2
18702: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18703: LD_EXP 24
18707: PUSH
18708: LD_EXP 55
18712: AND
18713: IFFALSE 18853
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
// begin ToLua ( displayPowell(); ) ;
18722: LD_STRING displayPowell();
18724: PPUSH
18725: CALL_OW 559
// uc_side := 0 ;
18729: LD_ADDR_OWVAR 20
18733: PUSH
18734: LD_INT 0
18736: ST_TO_ADDR
// uc_nation := 2 ;
18737: LD_ADDR_OWVAR 21
18741: PUSH
18742: LD_INT 2
18744: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18745: LD_ADDR_OWVAR 37
18749: PUSH
18750: LD_INT 14
18752: ST_TO_ADDR
// vc_engine := engine_siberite ;
18753: LD_ADDR_OWVAR 39
18757: PUSH
18758: LD_INT 3
18760: ST_TO_ADDR
// vc_control := control_apeman ;
18761: LD_ADDR_OWVAR 38
18765: PUSH
18766: LD_INT 5
18768: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18769: LD_ADDR_OWVAR 40
18773: PUSH
18774: LD_INT 29
18776: ST_TO_ADDR
// un := CreateVehicle ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: CALL_OW 45
18786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18799: LD_INT 35
18801: PPUSH
18802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18806: LD_VAR 0 2
18810: PPUSH
18811: LD_INT 22
18813: PUSH
18814: LD_OWVAR 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 69
18827: PPUSH
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 74
18837: PPUSH
18838: CALL_OW 115
// until IsDead ( un ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: CALL_OW 301
18851: IFFALSE 18799
// end ;
18853: PPOPN 2
18855: END
// every 0 0$1 trigger StreamModeActive and sStu do
18856: LD_EXP 24
18860: PUSH
18861: LD_EXP 63
18865: AND
18866: IFFALSE 18882
18868: GO 18870
18870: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18871: LD_STRING displayStucuk();
18873: PPUSH
18874: CALL_OW 559
// ResetFog ;
18878: CALL_OW 335
// end ;
18882: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18883: LD_EXP 24
18887: PUSH
18888: LD_EXP 56
18892: AND
18893: IFFALSE 19034
18895: GO 18897
18897: DISABLE
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_OWVAR 2
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 21
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not tmp then
18938: LD_VAR 0 2
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 19034
// un := tmp [ rand ( 1 , tmp ) ] ;
18947: LD_ADDR_VAR 0 1
18951: PUSH
18952: LD_VAR 0 2
18956: PUSH
18957: LD_INT 1
18959: PPUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: CALL_OW 12
18969: ARRAY
18970: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_INT 0
18978: PPUSH
18979: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18983: LD_VAR 0 1
18987: PPUSH
18988: LD_OWVAR 3
18992: PUSH
18993: LD_VAR 0 1
18997: DIFF
18998: PPUSH
18999: LD_VAR 0 1
19003: PPUSH
19004: CALL_OW 74
19008: PPUSH
19009: CALL_OW 115
// wait ( 0 0$20 ) ;
19013: LD_INT 700
19015: PPUSH
19016: CALL_OW 67
// SetSide ( un , your_side ) ;
19020: LD_VAR 0 1
19024: PPUSH
19025: LD_OWVAR 2
19029: PPUSH
19030: CALL_OW 235
// end ;
19034: PPOPN 2
19036: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19037: LD_EXP 24
19041: PUSH
19042: LD_EXP 57
19046: AND
19047: IFFALSE 19153
19049: GO 19051
19051: DISABLE
19052: LD_INT 0
19054: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19055: LD_ADDR_VAR 0 1
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 30
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 30
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not depot then
19109: LD_VAR 0 1
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19153
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19118: LD_VAR 0 1
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: CALL_OW 250
19131: PPUSH
19132: LD_VAR 0 1
19136: PUSH
19137: LD_INT 1
19139: ARRAY
19140: PPUSH
19141: CALL_OW 251
19145: PPUSH
19146: LD_INT 70
19148: PPUSH
19149: CALL_OW 495
// end ;
19153: PPOPN 1
19155: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19156: LD_EXP 24
19160: PUSH
19161: LD_EXP 58
19165: AND
19166: IFFALSE 19377
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
19177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19178: LD_ADDR_VAR 0 5
19182: PUSH
19183: LD_INT 22
19185: PUSH
19186: LD_OWVAR 2
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 21
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: ST_TO_ADDR
// if not tmp then
19214: LD_VAR 0 5
19218: NOT
19219: IFFALSE 19223
// exit ;
19221: GO 19377
// for i in tmp do
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_VAR 0 5
19232: PUSH
19233: FOR_IN
19234: IFFALSE 19375
// begin d := rand ( 0 , 5 ) ;
19236: LD_ADDR_VAR 0 4
19240: PUSH
19241: LD_INT 0
19243: PPUSH
19244: LD_INT 5
19246: PPUSH
19247: CALL_OW 12
19251: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19252: LD_ADDR_VAR 0 2
19256: PUSH
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL_OW 250
19266: PPUSH
19267: LD_VAR 0 4
19271: PPUSH
19272: LD_INT 3
19274: PPUSH
19275: LD_INT 12
19277: PPUSH
19278: CALL_OW 12
19282: PPUSH
19283: CALL_OW 272
19287: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_VAR 0 1
19297: PPUSH
19298: CALL_OW 251
19302: PPUSH
19303: LD_VAR 0 4
19307: PPUSH
19308: LD_INT 3
19310: PPUSH
19311: LD_INT 12
19313: PPUSH
19314: CALL_OW 12
19318: PPUSH
19319: CALL_OW 273
19323: ST_TO_ADDR
// if ValidHex ( x , y ) then
19324: LD_VAR 0 2
19328: PPUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: CALL_OW 488
19338: IFFALSE 19373
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: LD_INT 6
19360: PPUSH
19361: CALL_OW 12
19365: PPUSH
19366: LD_INT 1
19368: PPUSH
19369: CALL_OW 483
// end ;
19373: GO 19233
19375: POP
19376: POP
// end ;
19377: PPOPN 5
19379: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19380: LD_EXP 24
19384: PUSH
19385: LD_EXP 59
19389: AND
19390: IFFALSE 19484
19392: GO 19394
19394: DISABLE
19395: LD_INT 0
19397: PPUSH
19398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_OWVAR 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 32
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PPUSH
19441: CALL_OW 69
19445: ST_TO_ADDR
// if not tmp then
19446: LD_VAR 0 2
19450: NOT
19451: IFFALSE 19455
// exit ;
19453: GO 19484
// for i in tmp do
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_VAR 0 2
19464: PUSH
19465: FOR_IN
19466: IFFALSE 19482
// SetFuel ( i , 0 ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 0
19475: PPUSH
19476: CALL_OW 240
19480: GO 19465
19482: POP
19483: POP
// end ;
19484: PPOPN 2
19486: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19487: LD_EXP 24
19491: PUSH
19492: LD_EXP 60
19496: AND
19497: IFFALSE 19563
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19505: LD_ADDR_VAR 0 1
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_OWVAR 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 30
19524: PUSH
19525: LD_INT 29
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 69
19540: ST_TO_ADDR
// if not tmp then
19541: LD_VAR 0 1
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 19563
// DestroyUnit ( tmp [ 1 ] ) ;
19550: LD_VAR 0 1
19554: PUSH
19555: LD_INT 1
19557: ARRAY
19558: PPUSH
19559: CALL_OW 65
// end ;
19563: PPOPN 1
19565: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19566: LD_EXP 24
19570: PUSH
19571: LD_EXP 62
19575: AND
19576: IFFALSE 19705
19578: GO 19580
19580: DISABLE
19581: LD_INT 0
19583: PPUSH
// begin uc_side := 0 ;
19584: LD_ADDR_OWVAR 20
19588: PUSH
19589: LD_INT 0
19591: ST_TO_ADDR
// uc_nation := nation_arabian ;
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 2
19599: ST_TO_ADDR
// hc_gallery :=  ;
19600: LD_ADDR_OWVAR 33
19604: PUSH
19605: LD_STRING 
19607: ST_TO_ADDR
// hc_name :=  ;
19608: LD_ADDR_OWVAR 26
19612: PUSH
19613: LD_STRING 
19615: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19616: LD_INT 1
19618: PPUSH
19619: LD_INT 11
19621: PPUSH
19622: LD_INT 10
19624: PPUSH
19625: CALL_OW 380
// un := CreateHuman ;
19629: LD_ADDR_VAR 0 1
19633: PUSH
19634: CALL_OW 44
19638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19651: LD_INT 35
19653: PPUSH
19654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: LD_INT 22
19665: PUSH
19666: LD_OWVAR 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: PPUSH
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 74
19689: PPUSH
19690: CALL_OW 115
// until IsDead ( un ) ;
19694: LD_VAR 0 1
19698: PPUSH
19699: CALL_OW 301
19703: IFFALSE 19651
// end ;
19705: PPOPN 1
19707: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19708: LD_EXP 24
19712: PUSH
19713: LD_EXP 64
19717: AND
19718: IFFALSE 19730
19720: GO 19722
19722: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19723: LD_STRING earthquake(getX(game), 0, 32)
19725: PPUSH
19726: CALL_OW 559
19730: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19731: LD_EXP 24
19735: PUSH
19736: LD_EXP 65
19740: AND
19741: IFFALSE 19832
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
// begin enable ;
19749: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_OWVAR 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 21
19769: PUSH
19770: LD_INT 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 33
19779: PUSH
19780: LD_INT 3
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 69
19796: ST_TO_ADDR
// if not tmp then
19797: LD_VAR 0 1
19801: NOT
19802: IFFALSE 19806
// exit ;
19804: GO 19832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19806: LD_VAR 0 1
19810: PUSH
19811: LD_INT 1
19813: PPUSH
19814: LD_VAR 0 1
19818: PPUSH
19819: CALL_OW 12
19823: ARRAY
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 234
// end ;
19832: PPOPN 1
19834: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19835: LD_EXP 24
19839: PUSH
19840: LD_EXP 66
19844: AND
19845: IFFALSE 19986
19847: GO 19849
19849: DISABLE
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_OWVAR 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 69
19890: ST_TO_ADDR
// if not tmp then
19891: LD_VAR 0 3
19895: NOT
19896: IFFALSE 19900
// exit ;
19898: GO 19986
// un := tmp [ rand ( 1 , tmp ) ] ;
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 1
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 12
19922: ARRAY
19923: ST_TO_ADDR
// if Crawls ( un ) then
19924: LD_VAR 0 2
19928: PPUSH
19929: CALL_OW 318
19933: IFFALSE 19944
// ComWalk ( un ) ;
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19944: LD_VAR 0 2
19948: PPUSH
19949: LD_INT 9
19951: PPUSH
19952: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19956: LD_INT 28
19958: PPUSH
19959: LD_OWVAR 2
19963: PPUSH
19964: LD_INT 2
19966: PPUSH
19967: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19971: LD_INT 29
19973: PPUSH
19974: LD_OWVAR 2
19978: PPUSH
19979: LD_INT 2
19981: PPUSH
19982: CALL_OW 322
// end ;
19986: PPOPN 3
19988: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19989: LD_EXP 24
19993: PUSH
19994: LD_EXP 67
19998: AND
19999: IFFALSE 20110
20001: GO 20003
20003: DISABLE
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 25
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PPUSH
20040: CALL_OW 69
20044: ST_TO_ADDR
// if not tmp then
20045: LD_VAR 0 3
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20110
// un := tmp [ rand ( 1 , tmp ) ] ;
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 1
20066: PPUSH
20067: LD_VAR 0 3
20071: PPUSH
20072: CALL_OW 12
20076: ARRAY
20077: ST_TO_ADDR
// if Crawls ( un ) then
20078: LD_VAR 0 2
20082: PPUSH
20083: CALL_OW 318
20087: IFFALSE 20098
// ComWalk ( un ) ;
20089: LD_VAR 0 2
20093: PPUSH
20094: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_INT 8
20105: PPUSH
20106: CALL_OW 336
// end ;
20110: PPOPN 3
20112: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20113: LD_EXP 24
20117: PUSH
20118: LD_EXP 68
20122: AND
20123: IFFALSE 20267
20125: GO 20127
20127: DISABLE
20128: LD_INT 0
20130: PPUSH
20131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20132: LD_ADDR_VAR 0 2
20136: PUSH
20137: LD_INT 22
20139: PUSH
20140: LD_OWVAR 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 21
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: LD_INT 34
20164: PUSH
20165: LD_INT 12
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 34
20174: PUSH
20175: LD_INT 51
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 34
20184: PUSH
20185: LD_INT 32
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: PPUSH
20203: CALL_OW 69
20207: ST_TO_ADDR
// if not tmp then
20208: LD_VAR 0 2
20212: NOT
20213: IFFALSE 20217
// exit ;
20215: GO 20267
// for i in tmp do
20217: LD_ADDR_VAR 0 1
20221: PUSH
20222: LD_VAR 0 2
20226: PUSH
20227: FOR_IN
20228: IFFALSE 20265
// if GetCargo ( i , mat_artifact ) = 0 then
20230: LD_VAR 0 1
20234: PPUSH
20235: LD_INT 4
20237: PPUSH
20238: CALL_OW 289
20242: PUSH
20243: LD_INT 0
20245: EQUAL
20246: IFFALSE 20263
// SetCargo ( i , mat_siberit , 100 ) ;
20248: LD_VAR 0 1
20252: PPUSH
20253: LD_INT 3
20255: PPUSH
20256: LD_INT 100
20258: PPUSH
20259: CALL_OW 290
20263: GO 20227
20265: POP
20266: POP
// end ;
20267: PPOPN 2
20269: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20270: LD_EXP 24
20274: PUSH
20275: LD_EXP 69
20279: AND
20280: IFFALSE 20433
20282: GO 20284
20284: DISABLE
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 22
20296: PUSH
20297: LD_OWVAR 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: ST_TO_ADDR
// if not tmp then
20311: LD_VAR 0 2
20315: NOT
20316: IFFALSE 20320
// exit ;
20318: GO 20433
// for i := 1 to 2 do
20320: LD_ADDR_VAR 0 1
20324: PUSH
20325: DOUBLE
20326: LD_INT 1
20328: DEC
20329: ST_TO_ADDR
20330: LD_INT 2
20332: PUSH
20333: FOR_TO
20334: IFFALSE 20431
// begin uc_side := your_side ;
20336: LD_ADDR_OWVAR 20
20340: PUSH
20341: LD_OWVAR 2
20345: ST_TO_ADDR
// uc_nation := nation_american ;
20346: LD_ADDR_OWVAR 21
20350: PUSH
20351: LD_INT 1
20353: ST_TO_ADDR
// vc_chassis := us_morphling ;
20354: LD_ADDR_OWVAR 37
20358: PUSH
20359: LD_INT 5
20361: ST_TO_ADDR
// vc_engine := engine_siberite ;
20362: LD_ADDR_OWVAR 39
20366: PUSH
20367: LD_INT 3
20369: ST_TO_ADDR
// vc_control := control_computer ;
20370: LD_ADDR_OWVAR 38
20374: PUSH
20375: LD_INT 3
20377: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20378: LD_ADDR_OWVAR 40
20382: PUSH
20383: LD_INT 10
20385: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20386: CALL_OW 45
20390: PPUSH
20391: LD_VAR 0 2
20395: PUSH
20396: LD_INT 1
20398: ARRAY
20399: PPUSH
20400: CALL_OW 250
20404: PPUSH
20405: LD_VAR 0 2
20409: PUSH
20410: LD_INT 1
20412: ARRAY
20413: PPUSH
20414: CALL_OW 251
20418: PPUSH
20419: LD_INT 12
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: CALL_OW 50
// end ;
20429: GO 20333
20431: POP
20432: POP
// end ;
20433: PPOPN 2
20435: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20436: LD_EXP 24
20440: PUSH
20441: LD_EXP 70
20445: AND
20446: IFFALSE 20668
20448: GO 20450
20450: DISABLE
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20459: LD_ADDR_VAR 0 6
20463: PUSH
20464: LD_INT 22
20466: PUSH
20467: LD_OWVAR 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 21
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 3
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 6
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20668
// s1 := rand ( 1 , 4 ) ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: LD_INT 1
20529: PPUSH
20530: LD_INT 4
20532: PPUSH
20533: CALL_OW 12
20537: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: LD_VAR 0 6
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: PPUSH
20552: LD_VAR 0 2
20556: PPUSH
20557: CALL_OW 259
20561: ST_TO_ADDR
// if s1 = 1 then
20562: LD_VAR 0 2
20566: PUSH
20567: LD_INT 1
20569: EQUAL
20570: IFFALSE 20590
// s2 := rand ( 2 , 4 ) else
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 2
20579: PPUSH
20580: LD_INT 4
20582: PPUSH
20583: CALL_OW 12
20587: ST_TO_ADDR
20588: GO 20598
// s2 := 1 ;
20590: LD_ADDR_VAR 0 3
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20598: LD_ADDR_VAR 0 5
20602: PUSH
20603: LD_VAR 0 6
20607: PUSH
20608: LD_INT 1
20610: ARRAY
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: CALL_OW 259
20621: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20622: LD_VAR 0 6
20626: PUSH
20627: LD_INT 1
20629: ARRAY
20630: PPUSH
20631: LD_VAR 0 2
20635: PPUSH
20636: LD_VAR 0 5
20640: PPUSH
20641: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20645: LD_VAR 0 6
20649: PUSH
20650: LD_INT 1
20652: ARRAY
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: CALL_OW 237
// end ;
20668: PPOPN 6
20670: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20671: LD_EXP 24
20675: PUSH
20676: LD_EXP 71
20680: AND
20681: IFFALSE 20760
20683: GO 20685
20685: DISABLE
20686: LD_INT 0
20688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20689: LD_ADDR_VAR 0 1
20693: PUSH
20694: LD_INT 22
20696: PUSH
20697: LD_OWVAR 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 30
20708: PUSH
20709: LD_INT 3
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: ST_TO_ADDR
// if not tmp then
20725: LD_VAR 0 1
20729: NOT
20730: IFFALSE 20734
// exit ;
20732: GO 20760
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 1
20741: PPUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 12
20751: ARRAY
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: CALL_OW 234
// end ;
20760: PPOPN 1
20762: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20763: LD_EXP 24
20767: PUSH
20768: LD_EXP 72
20772: AND
20773: IFFALSE 20885
20775: GO 20777
20777: DISABLE
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20782: LD_ADDR_VAR 0 2
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_OWVAR 2
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 27
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 30
20814: PUSH
20815: LD_INT 26
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 30
20824: PUSH
20825: LD_INT 28
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PPUSH
20842: CALL_OW 69
20846: ST_TO_ADDR
// if not tmp then
20847: LD_VAR 0 2
20851: NOT
20852: IFFALSE 20856
// exit ;
20854: GO 20885
// for i in tmp do
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_VAR 0 2
20865: PUSH
20866: FOR_IN
20867: IFFALSE 20883
// SetLives ( i , 1 ) ;
20869: LD_VAR 0 1
20873: PPUSH
20874: LD_INT 1
20876: PPUSH
20877: CALL_OW 234
20881: GO 20866
20883: POP
20884: POP
// end ;
20885: PPOPN 2
20887: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20888: LD_EXP 24
20892: PUSH
20893: LD_EXP 73
20897: AND
20898: IFFALSE 21172
20900: GO 20902
20902: DISABLE
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
20907: PPUSH
// begin i := rand ( 1 , 7 ) ;
20908: LD_ADDR_VAR 0 1
20912: PUSH
20913: LD_INT 1
20915: PPUSH
20916: LD_INT 7
20918: PPUSH
20919: CALL_OW 12
20923: ST_TO_ADDR
// case i of 1 :
20924: LD_VAR 0 1
20928: PUSH
20929: LD_INT 1
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20947
20937: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20938: LD_STRING earthquake(getX(game), 0, 32)
20940: PPUSH
20941: CALL_OW 559
20945: GO 21172
20947: LD_INT 2
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 20969
20955: POP
// begin ToLua ( displayStucuk(); ) ;
20956: LD_STRING displayStucuk();
20958: PPUSH
20959: CALL_OW 559
// ResetFog ;
20963: CALL_OW 335
// end ; 3 :
20967: GO 21172
20969: LD_INT 3
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 21081
20977: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_INT 22
20985: PUSH
20986: LD_OWVAR 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 25
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PPUSH
21009: CALL_OW 69
21013: ST_TO_ADDR
// if not tmp then
21014: LD_VAR 0 2
21018: NOT
21019: IFFALSE 21023
// exit ;
21021: GO 21172
// un := tmp [ rand ( 1 , tmp ) ] ;
21023: LD_ADDR_VAR 0 3
21027: PUSH
21028: LD_VAR 0 2
21032: PUSH
21033: LD_INT 1
21035: PPUSH
21036: LD_VAR 0 2
21040: PPUSH
21041: CALL_OW 12
21045: ARRAY
21046: ST_TO_ADDR
// if Crawls ( un ) then
21047: LD_VAR 0 3
21051: PPUSH
21052: CALL_OW 318
21056: IFFALSE 21067
// ComWalk ( un ) ;
21058: LD_VAR 0 3
21062: PPUSH
21063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21067: LD_VAR 0 3
21071: PPUSH
21072: LD_INT 8
21074: PPUSH
21075: CALL_OW 336
// end ; 4 :
21079: GO 21172
21081: LD_INT 4
21083: DOUBLE
21084: EQUAL
21085: IFTRUE 21089
21087: GO 21150
21089: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21090: LD_ADDR_VAR 0 2
21094: PUSH
21095: LD_INT 22
21097: PUSH
21098: LD_OWVAR 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 30
21109: PUSH
21110: LD_INT 29
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 69
21125: ST_TO_ADDR
// if not tmp then
21126: LD_VAR 0 2
21130: NOT
21131: IFFALSE 21135
// exit ;
21133: GO 21172
// DestroyUnit ( tmp [ 1 ] ) ;
21135: LD_VAR 0 2
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL_OW 65
// end ; 5 .. 7 :
21148: GO 21172
21150: LD_INT 5
21152: DOUBLE
21153: GREATEREQUAL
21154: IFFALSE 21162
21156: LD_INT 7
21158: DOUBLE
21159: LESSEQUAL
21160: IFTRUE 21164
21162: GO 21171
21164: POP
// StreamSibBomb ; end ;
21165: CALL 17452 0 0
21169: GO 21172
21171: POP
// end ;
21172: PPOPN 3
21174: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21175: LD_EXP 24
21179: PUSH
21180: LD_EXP 74
21184: AND
21185: IFFALSE 21341
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_INT 81
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PPUSH
21244: CALL_OW 69
21248: ST_TO_ADDR
// if not tmp then
21249: LD_VAR 0 2
21253: NOT
21254: IFFALSE 21258
// exit ;
21256: GO 21341
// p := 0 ;
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21266: LD_INT 35
21268: PPUSH
21269: CALL_OW 67
// p := p + 1 ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_VAR 0 3
21282: PUSH
21283: LD_INT 1
21285: PLUS
21286: ST_TO_ADDR
// for i in tmp do
21287: LD_ADDR_VAR 0 1
21291: PUSH
21292: LD_VAR 0 2
21296: PUSH
21297: FOR_IN
21298: IFFALSE 21329
// if GetLives ( i ) < 1000 then
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 256
21309: PUSH
21310: LD_INT 1000
21312: LESS
21313: IFFALSE 21327
// SetLives ( i , 1000 ) ;
21315: LD_VAR 0 1
21319: PPUSH
21320: LD_INT 1000
21322: PPUSH
21323: CALL_OW 234
21327: GO 21297
21329: POP
21330: POP
// until p > 20 ;
21331: LD_VAR 0 3
21335: PUSH
21336: LD_INT 20
21338: GREATER
21339: IFFALSE 21266
// end ;
21341: PPOPN 3
21343: END
// every 0 0$1 trigger StreamModeActive and sTime do
21344: LD_EXP 24
21348: PUSH
21349: LD_EXP 75
21353: AND
21354: IFFALSE 21389
21356: GO 21358
21358: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21359: LD_INT 28
21361: PPUSH
21362: LD_OWVAR 2
21366: PPUSH
21367: LD_INT 2
21369: PPUSH
21370: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21374: LD_INT 30
21376: PPUSH
21377: LD_OWVAR 2
21381: PPUSH
21382: LD_INT 2
21384: PPUSH
21385: CALL_OW 322
// end ;
21389: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21390: LD_EXP 24
21394: PUSH
21395: LD_EXP 76
21399: AND
21400: IFFALSE 21521
21402: GO 21404
21404: DISABLE
21405: LD_INT 0
21407: PPUSH
21408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_INT 22
21416: PUSH
21417: LD_OWVAR 2
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 21
21428: PUSH
21429: LD_INT 1
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 3
21438: PUSH
21439: LD_INT 23
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: ST_TO_ADDR
// if not tmp then
21463: LD_VAR 0 2
21467: NOT
21468: IFFALSE 21472
// exit ;
21470: GO 21521
// for i in tmp do
21472: LD_ADDR_VAR 0 1
21476: PUSH
21477: LD_VAR 0 2
21481: PUSH
21482: FOR_IN
21483: IFFALSE 21519
// begin if Crawls ( i ) then
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 318
21494: IFFALSE 21505
// ComWalk ( i ) ;
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 138
// SetClass ( i , 2 ) ;
21505: LD_VAR 0 1
21509: PPUSH
21510: LD_INT 2
21512: PPUSH
21513: CALL_OW 336
// end ;
21517: GO 21482
21519: POP
21520: POP
// end ;
21521: PPOPN 2
21523: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21524: LD_EXP 24
21528: PUSH
21529: LD_EXP 77
21533: AND
21534: IFFALSE 21755
21536: GO 21538
21538: DISABLE
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
21543: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21544: LD_OWVAR 2
21548: PPUSH
21549: LD_INT 9
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: LD_INT 1
21557: PPUSH
21558: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21562: LD_INT 9
21564: PPUSH
21565: LD_OWVAR 2
21569: PPUSH
21570: CALL_OW 343
// uc_side := 9 ;
21574: LD_ADDR_OWVAR 20
21578: PUSH
21579: LD_INT 9
21581: ST_TO_ADDR
// uc_nation := 2 ;
21582: LD_ADDR_OWVAR 21
21586: PUSH
21587: LD_INT 2
21589: ST_TO_ADDR
// hc_name := Dark Warrior ;
21590: LD_ADDR_OWVAR 26
21594: PUSH
21595: LD_STRING Dark Warrior
21597: ST_TO_ADDR
// hc_gallery :=  ;
21598: LD_ADDR_OWVAR 33
21602: PUSH
21603: LD_STRING 
21605: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
21606: LD_INT 1
21608: PPUSH
21609: LD_INT 1
21611: PPUSH
21612: LD_INT 10
21614: PPUSH
21615: CALL_OW 380
// un := CreateHuman ;
21619: LD_ADDR_VAR 0 3
21623: PUSH
21624: CALL_OW 44
21628: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21629: LD_VAR 0 3
21633: PPUSH
21634: LD_INT 1
21636: PPUSH
21637: CALL_OW 51
// p := 0 ;
21641: LD_ADDR_VAR 0 2
21645: PUSH
21646: LD_INT 0
21648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21649: LD_INT 35
21651: PPUSH
21652: CALL_OW 67
// if GetLives ( un ) < 1000 then
21656: LD_VAR 0 3
21660: PPUSH
21661: CALL_OW 256
21665: PUSH
21666: LD_INT 1000
21668: LESS
21669: IFFALSE 21683
// SetLives ( un , 1000 ) ;
21671: LD_VAR 0 3
21675: PPUSH
21676: LD_INT 1000
21678: PPUSH
21679: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
21683: LD_VAR 0 3
21687: PPUSH
21688: LD_INT 81
21690: PUSH
21691: LD_OWVAR 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: PPUSH
21705: LD_VAR 0 3
21709: PPUSH
21710: CALL_OW 74
21714: PPUSH
21715: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21719: LD_VAR 0 2
21723: PUSH
21724: LD_INT 60
21726: GREATER
21727: PUSH
21728: LD_VAR 0 3
21732: PPUSH
21733: CALL_OW 301
21737: OR
21738: IFFALSE 21649
// if un then
21740: LD_VAR 0 3
21744: IFFALSE 21755
// RemoveUnit ( un ) ;
21746: LD_VAR 0 3
21750: PPUSH
21751: CALL_OW 64
// end ; end_of_file
21755: PPOPN 3
21757: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
21758: LD_INT 0
21760: PPUSH
21761: PPUSH
21762: PPUSH
21763: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL_OW 264
21773: PUSH
21774: LD_EXP 23
21778: EQUAL
21779: IFFALSE 21851
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21781: LD_INT 68
21783: PPUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 255
21793: PPUSH
21794: CALL_OW 321
21798: PUSH
21799: LD_INT 2
21801: EQUAL
21802: IFFALSE 21814
// eff := 70 else
21804: LD_ADDR_VAR 0 6
21808: PUSH
21809: LD_INT 70
21811: ST_TO_ADDR
21812: GO 21822
// eff := 30 ;
21814: LD_ADDR_VAR 0 6
21818: PUSH
21819: LD_INT 30
21821: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21822: LD_VAR 0 1
21826: PPUSH
21827: CALL_OW 250
21831: PPUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 251
21841: PPUSH
21842: LD_VAR 0 6
21846: PPUSH
21847: CALL_OW 495
// end ; end ;
21851: LD_VAR 0 4
21855: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
// if cmd = 124 then
21864: LD_VAR 0 1
21868: PUSH
21869: LD_INT 124
21871: EQUAL
21872: IFFALSE 22078
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
21874: LD_ADDR_VAR 0 5
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: LD_INT 34
21884: PUSH
21885: LD_INT 53
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 34
21894: PUSH
21895: LD_INT 14
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: ST_TO_ADDR
// if not tmp then
21912: LD_VAR 0 5
21916: NOT
21917: IFFALSE 21921
// exit ;
21919: GO 22078
// for i in tmp do
21921: LD_ADDR_VAR 0 3
21925: PUSH
21926: LD_VAR 0 5
21930: PUSH
21931: FOR_IN
21932: IFFALSE 22076
// begin taskList := GetTaskList ( i ) ;
21934: LD_ADDR_VAR 0 6
21938: PUSH
21939: LD_VAR 0 3
21943: PPUSH
21944: CALL_OW 437
21948: ST_TO_ADDR
// if not taskList then
21949: LD_VAR 0 6
21953: NOT
21954: IFFALSE 21958
// continue ;
21956: GO 21931
// for j = 1 to taskList do
21958: LD_ADDR_VAR 0 4
21962: PUSH
21963: DOUBLE
21964: LD_INT 1
21966: DEC
21967: ST_TO_ADDR
21968: LD_VAR 0 6
21972: PUSH
21973: FOR_TO
21974: IFFALSE 22072
// if taskList [ j ] [ 1 ] = | then
21976: LD_VAR 0 6
21980: PUSH
21981: LD_VAR 0 4
21985: ARRAY
21986: PUSH
21987: LD_INT 1
21989: ARRAY
21990: PUSH
21991: LD_STRING |
21993: EQUAL
21994: IFFALSE 22070
// begin _taskList := Delete ( taskList , 1 ) ;
21996: LD_ADDR_VAR 0 7
22000: PUSH
22001: LD_VAR 0 6
22005: PPUSH
22006: LD_INT 1
22008: PPUSH
22009: CALL_OW 3
22013: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
22014: LD_VAR 0 3
22018: PPUSH
22019: LD_VAR 0 7
22023: PPUSH
22024: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
22028: LD_VAR 0 3
22032: PPUSH
22033: LD_VAR 0 6
22037: PUSH
22038: LD_VAR 0 4
22042: ARRAY
22043: PUSH
22044: LD_INT 2
22046: ARRAY
22047: PPUSH
22048: LD_VAR 0 6
22052: PUSH
22053: LD_VAR 0 4
22057: ARRAY
22058: PUSH
22059: LD_INT 3
22061: ARRAY
22062: PPUSH
22063: LD_INT 8
22065: PPUSH
22066: CALL 22083 0 4
// end ;
22070: GO 21973
22072: POP
22073: POP
// end ;
22074: GO 21931
22076: POP
22077: POP
// end ; end ;
22078: LD_VAR 0 2
22082: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22094: LD_VAR 0 1
22098: NOT
22099: PUSH
22100: LD_VAR 0 2
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL_OW 488
22114: NOT
22115: OR
22116: PUSH
22117: LD_VAR 0 4
22121: NOT
22122: OR
22123: IFFALSE 22127
// exit ;
22125: GO 22467
// list := [ ] ;
22127: LD_ADDR_VAR 0 13
22131: PUSH
22132: EMPTY
22133: ST_TO_ADDR
// if x - r < 0 then
22134: LD_VAR 0 2
22138: PUSH
22139: LD_VAR 0 4
22143: MINUS
22144: PUSH
22145: LD_INT 0
22147: LESS
22148: IFFALSE 22160
// min_x := 0 else
22150: LD_ADDR_VAR 0 7
22154: PUSH
22155: LD_INT 0
22157: ST_TO_ADDR
22158: GO 22176
// min_x := x - r ;
22160: LD_ADDR_VAR 0 7
22164: PUSH
22165: LD_VAR 0 2
22169: PUSH
22170: LD_VAR 0 4
22174: MINUS
22175: ST_TO_ADDR
// if y - r < 0 then
22176: LD_VAR 0 3
22180: PUSH
22181: LD_VAR 0 4
22185: MINUS
22186: PUSH
22187: LD_INT 0
22189: LESS
22190: IFFALSE 22202
// min_y := 0 else
22192: LD_ADDR_VAR 0 8
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
22200: GO 22218
// min_y := y - r ;
22202: LD_ADDR_VAR 0 8
22206: PUSH
22207: LD_VAR 0 3
22211: PUSH
22212: LD_VAR 0 4
22216: MINUS
22217: ST_TO_ADDR
// max_x := x + r ;
22218: LD_ADDR_VAR 0 9
22222: PUSH
22223: LD_VAR 0 2
22227: PUSH
22228: LD_VAR 0 4
22232: PLUS
22233: ST_TO_ADDR
// max_y := y + r ;
22234: LD_ADDR_VAR 0 10
22238: PUSH
22239: LD_VAR 0 3
22243: PUSH
22244: LD_VAR 0 4
22248: PLUS
22249: ST_TO_ADDR
// for _x = min_x to max_x do
22250: LD_ADDR_VAR 0 11
22254: PUSH
22255: DOUBLE
22256: LD_VAR 0 7
22260: DEC
22261: ST_TO_ADDR
22262: LD_VAR 0 9
22266: PUSH
22267: FOR_TO
22268: IFFALSE 22385
// for _y = min_y to max_y do
22270: LD_ADDR_VAR 0 12
22274: PUSH
22275: DOUBLE
22276: LD_VAR 0 8
22280: DEC
22281: ST_TO_ADDR
22282: LD_VAR 0 10
22286: PUSH
22287: FOR_TO
22288: IFFALSE 22381
// begin if not ValidHex ( _x , _y ) then
22290: LD_VAR 0 11
22294: PPUSH
22295: LD_VAR 0 12
22299: PPUSH
22300: CALL_OW 488
22304: NOT
22305: IFFALSE 22309
// continue ;
22307: GO 22287
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22309: LD_VAR 0 11
22313: PPUSH
22314: LD_VAR 0 12
22318: PPUSH
22319: CALL_OW 351
22323: PUSH
22324: LD_VAR 0 11
22328: PPUSH
22329: LD_VAR 0 12
22333: PPUSH
22334: CALL_OW 554
22338: AND
22339: IFFALSE 22379
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22341: LD_ADDR_VAR 0 13
22345: PUSH
22346: LD_VAR 0 13
22350: PPUSH
22351: LD_VAR 0 13
22355: PUSH
22356: LD_INT 1
22358: PLUS
22359: PPUSH
22360: LD_VAR 0 11
22364: PUSH
22365: LD_VAR 0 12
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PPUSH
22374: CALL_OW 2
22378: ST_TO_ADDR
// end ;
22379: GO 22287
22381: POP
22382: POP
22383: GO 22267
22385: POP
22386: POP
// if not list then
22387: LD_VAR 0 13
22391: NOT
22392: IFFALSE 22396
// exit ;
22394: GO 22467
// for i in list do
22396: LD_ADDR_VAR 0 6
22400: PUSH
22401: LD_VAR 0 13
22405: PUSH
22406: FOR_IN
22407: IFFALSE 22465
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22409: LD_VAR 0 1
22413: PPUSH
22414: LD_STRING M
22416: PUSH
22417: LD_VAR 0 6
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PUSH
22426: LD_VAR 0 6
22430: PUSH
22431: LD_INT 2
22433: ARRAY
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: PPUSH
22459: CALL_OW 447
22463: GO 22406
22465: POP
22466: POP
// end ;
22467: LD_VAR 0 5
22471: RET
