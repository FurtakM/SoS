// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// PrepareNature ;
 111: CALL 1350 0 0
// PrepareDifficulty ;
 115: CALL 1703 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 873 0 0
// PrepareRussianBase ;
 127: CALL 1113 0 0
// PrepareCommander ;
 131: CALL 1058 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING 13f_JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 1496 0 2
 598: ST_TO_ADDR
// if debugMode then
 599: LD_EXP 16
 603: IFFALSE 618
// JMM := NewCharacter ( JMM ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING JMM
 612: PPUSH
 613: CALL_OW 25
 617: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 95
 625: PPUSH
 626: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 630: LD_EXP 1
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 642: LD_ADDR_EXP 5
 646: PUSH
 647: LD_STRING Powell
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL 1496 0 2
 657: ST_TO_ADDR
// uc_side = 4 ;
 658: LD_ADDR_OWVAR 20
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 666: LD_ADDR_EXP 2
 670: PUSH
 671: LD_STRING 10c_Joan
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 1496 0 2
 681: ST_TO_ADDR
// if Joan then
 682: LD_EXP 2
 686: IFFALSE 725
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 688: LD_EXP 2
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 703: LD_EXP 2
 707: PPUSH
 708: LD_INT 4
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 1 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// end else
 723: GO 782
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_STRING 13s_Lisa
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL 1496 0 2
 740: ST_TO_ADDR
// if Lisa then
 741: LD_EXP 3
 745: IFFALSE 782
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL_OW 336
// JMMGirl = 2 ;
 774: LD_ADDR_EXP 7
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 782: LD_EXP 2
 786: NOT
 787: PUSH
 788: LD_EXP 3
 792: NOT
 793: AND
 794: IFFALSE 844
// begin Connie = NewCharacter ( Coonie ) ;
 796: LD_ADDR_EXP 4
 800: PUSH
 801: LD_STRING Coonie
 803: PPUSH
 804: CALL_OW 25
 808: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 809: LD_EXP 4
 813: PPUSH
 814: LD_INT 4
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: CALL_OW 336
// JMMGirl = 3 ;
 836: LD_ADDR_EXP 7
 840: PUSH
 841: LD_INT 3
 843: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 844: LD_EXP 2
 848: PUSH
 849: LD_EXP 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 140
// end ;
 868: LD_VAR 0 1
 872: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 873: LD_INT 0
 875: PPUSH
 876: PPUSH
 877: PPUSH
// for i = 1 to 5 do
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 5
 890: PUSH
 891: FOR_TO
 892: IFFALSE 1051
// begin vc_engine = rand ( 1 , 3 ) ;
 894: LD_ADDR_OWVAR 39
 898: PUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 3
 904: PPUSH
 905: CALL_OW 12
 909: ST_TO_ADDR
// vc_control = control_remote ;
 910: LD_ADDR_OWVAR 38
 914: PUSH
 915: LD_INT 2
 917: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 918: LD_ADDR_OWVAR 40
 922: PUSH
 923: LD_INT 5
 925: PUSH
 926: LD_INT 12
 928: PUSH
 929: LD_INT 13
 931: PUSH
 932: LD_INT 7
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 4
 948: MOD
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 955: LD_ADDR_OWVAR 37
 959: PUSH
 960: LD_INT 3
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_VAR 0 2
 974: PUSH
 975: LD_INT 2
 977: MOD
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: ARRAY
 983: ST_TO_ADDR
// veh = CreateVehicle ;
 984: LD_ADDR_VAR 0 3
 988: PUSH
 989: CALL_OW 45
 993: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 994: LD_VAR 0 3
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: LD_INT 5
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1014: LD_VAR 0 3
1018: PPUSH
1019: LD_INT 500
1021: PPUSH
1022: LD_INT 1000
1024: PPUSH
1025: CALL_OW 12
1029: PPUSH
1030: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1034: LD_VAR 0 3
1038: PPUSH
1039: LD_INT 15
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end ;
1049: GO 891
1051: POP
1052: POP
// end ; end_of_file
1053: LD_VAR 0 1
1057: RET
// export function PrepareCommander ; begin
1058: LD_INT 0
1060: PPUSH
// uc_side = 3 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 3
1068: ST_TO_ADDR
// uc_nation = 3 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 3
1076: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
1077: LD_ADDR_EXP 6
1081: PUSH
1082: LD_STRING Eisenstein
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL 1496 0 2
1092: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1093: LD_EXP 6
1097: PPUSH
1098: LD_INT 11
1100: PPUSH
1101: LD_INT 0
1103: PPUSH
1104: CALL_OW 49
// end ;
1108: LD_VAR 0 1
1112: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1113: LD_INT 0
1115: PPUSH
// uc_nation := 3 ;
1116: LD_ADDR_OWVAR 21
1120: PUSH
1121: LD_INT 3
1123: ST_TO_ADDR
// uc_side := 3 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 3
1131: ST_TO_ADDR
// if Difficulty > 1 then
1132: LD_OWVAR 67
1136: PUSH
1137: LD_INT 1
1139: GREATER
1140: IFFALSE 1200
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 ] [ Difficulty ] ) ;
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PUSH
1151: LD_INT 8
1153: PUSH
1154: LD_INT 9
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// baseGuard := CreateHuman ;
1172: LD_ADDR_EXP 18
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1182: LD_EXP 18
1186: PPUSH
1187: LD_INT 39
1189: PPUSH
1190: LD_INT 67
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1200: LD_INT 116
1202: PPUSH
1203: LD_INT 50
1205: PPUSH
1206: LD_INT 74
1208: PPUSH
1209: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 3
1218: PPUSH
1219: LD_INT 45
1221: PPUSH
1222: LD_INT 10
1224: PPUSH
1225: LD_INT 9
1227: PPUSH
1228: LD_INT 2
1230: PPUSH
1231: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: LD_INT 22
1243: PPUSH
1244: LD_INT 10
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 3
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 10
1268: PPUSH
1269: LD_INT 3
1271: PPUSH
1272: LD_INT 3
1274: PPUSH
1275: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 3
1284: PPUSH
1285: LD_INT 40
1287: PPUSH
1288: LD_INT 10
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 14
1309: PPUSH
1310: LD_INT 10
1312: PPUSH
1313: LD_INT 4
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL 1593 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 3
1328: PPUSH
1329: LD_INT 15
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: CALL 1593 0 6
// end ; end_of_file
1345: LD_VAR 0 1
1349: RET
// export function PrepareNature ; var i ; begin
1350: LD_INT 0
1352: PPUSH
1353: PPUSH
// uc_side := 0 ;
1354: LD_ADDR_OWVAR 20
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_nation := 0 ;
1362: LD_ADDR_OWVAR 21
1366: PUSH
1367: LD_INT 0
1369: ST_TO_ADDR
// hc_class := class_apeman ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 12
1377: ST_TO_ADDR
// hc_gallery :=  ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING 
1385: ST_TO_ADDR
// hc_name :=  ;
1386: LD_ADDR_OWVAR 26
1390: PUSH
1391: LD_STRING 
1393: ST_TO_ADDR
// for i = 1 to 7 do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_INT 7
1406: PUSH
1407: FOR_TO
1408: IFFALSE 1489
// begin hc_class := class_apeman ;
1410: LD_ADDR_OWVAR 28
1414: PUSH
1415: LD_INT 12
1417: ST_TO_ADDR
// hc_gallery :=  ;
1418: LD_ADDR_OWVAR 33
1422: PUSH
1423: LD_STRING 
1425: ST_TO_ADDR
// hc_name :=  ;
1426: LD_ADDR_OWVAR 26
1430: PUSH
1431: LD_STRING 
1433: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1434: LD_ADDR_OWVAR 31
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 0
1444: PUSH
1445: LD_INT 0
1447: PUSH
1448: LD_INT 0
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1457: LD_ADDR_OWVAR 29
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 10
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1472: CALL_OW 44
1476: PPUSH
1477: LD_INT 16
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL_OW 49
// end ;
1487: GO 1407
1489: POP
1490: POP
// end ;
1491: LD_VAR 0 1
1495: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
// if exist_mode then
1500: LD_VAR 0 2
1504: IFFALSE 1523
// begin unit := CreateCharacter ( ident ) ;
1506: LD_ADDR_VAR 0 4
1510: PUSH
1511: LD_VAR 0 1
1515: PPUSH
1516: CALL_OW 34
1520: ST_TO_ADDR
// end else
1521: GO 1538
// begin unit := NewCharacter ( ident ) ;
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 25
1537: ST_TO_ADDR
// end ; result := unit ;
1538: LD_ADDR_VAR 0 3
1542: PUSH
1543: LD_VAR 0 4
1547: ST_TO_ADDR
// end ;
1548: LD_VAR 0 3
1552: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
// for i in charactersList do
1557: LD_ADDR_VAR 0 4
1561: PUSH
1562: LD_VAR 0 1
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1586
// SaveCharacters ( i , ident ) ;
1570: LD_VAR 0 4
1574: PPUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 38
1584: GO 1567
1586: POP
1587: POP
// end ;
1588: LD_VAR 0 3
1592: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1593: LD_INT 0
1595: PPUSH
1596: PPUSH
1597: PPUSH
1598: PPUSH
// for i = 1 to count do
1599: LD_ADDR_VAR 0 8
1603: PUSH
1604: DOUBLE
1605: LD_INT 1
1607: DEC
1608: ST_TO_ADDR
1609: LD_VAR 0 6
1613: PUSH
1614: FOR_TO
1615: IFFALSE 1696
// begin uc_side = side ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_VAR 0 1
1626: ST_TO_ADDR
// uc_nation = nation ;
1627: LD_ADDR_OWVAR 21
1631: PUSH
1632: LD_VAR 0 2
1636: ST_TO_ADDR
// hc_gallery =  ;
1637: LD_ADDR_OWVAR 33
1641: PUSH
1642: LD_STRING 
1644: ST_TO_ADDR
// hc_name =  ;
1645: LD_ADDR_OWVAR 26
1649: PUSH
1650: LD_STRING 
1652: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1653: LD_INT 0
1655: PPUSH
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: CALL_OW 380
// un = CreateHuman ;
1670: LD_ADDR_VAR 0 10
1674: PUSH
1675: CALL_OW 44
1679: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1680: LD_VAR 0 10
1684: PPUSH
1685: LD_VAR 0 3
1689: PPUSH
1690: CALL_OW 52
// end ;
1694: GO 1614
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 7
1702: RET
// export function PrepareDifficulty ; begin
1703: LD_INT 0
1705: PPUSH
// if difficulty = 1 then
1706: LD_OWVAR 67
1710: PUSH
1711: LD_INT 1
1713: EQUAL
1714: IFFALSE 1794
// begin SetTech ( 57 , 3 , state_disabled ) ;
1716: LD_INT 57
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1729: LD_INT 58
1731: PPUSH
1732: LD_INT 3
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1742: LD_INT 59
1744: PPUSH
1745: LD_INT 3
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1755: LD_INT 51
1757: PPUSH
1758: LD_INT 3
1760: PPUSH
1761: LD_INT 0
1763: PPUSH
1764: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1768: LD_INT 52
1770: PPUSH
1771: LD_INT 3
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1781: LD_INT 53
1783: PPUSH
1784: LD_INT 3
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 322
// end ; if difficulty = 2 then
1794: LD_OWVAR 67
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1882
// begin SetTech ( 57 , 3 , state_enabled ) ;
1804: LD_INT 57
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: LD_INT 1
1812: PPUSH
1813: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1817: LD_INT 58
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1830: LD_INT 59
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1843: LD_INT 51
1845: PPUSH
1846: LD_INT 3
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1856: LD_INT 52
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1869: LD_INT 53
1871: PPUSH
1872: LD_INT 3
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 322
// end ; if difficulty = 3 then
1882: LD_OWVAR 67
1886: PUSH
1887: LD_INT 3
1889: EQUAL
1890: IFFALSE 1970
// begin SetTech ( 57 , 3 , state_enabled ) ;
1892: LD_INT 57
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1905: LD_INT 58
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1918: LD_INT 59
1920: PPUSH
1921: LD_INT 3
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1931: LD_INT 51
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1944: LD_INT 52
1946: PPUSH
1947: LD_INT 3
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1957: LD_INT 53
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: CALL_OW 322
// end ; end ;
1970: LD_VAR 0 1
1974: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1975: LD_INT 0
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1982: LD_ADDR_VAR 0 8
1986: PUSH
1987: LD_INT 48
1989: PUSH
1990: LD_INT 49
1992: PUSH
1993: LD_INT 50
1995: PUSH
1996: LD_INT 20
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 69
2004: PUSH
2005: LD_INT 39
2007: PUSH
2008: LD_INT 34
2010: PUSH
2011: LD_INT 40
2013: PUSH
2014: LD_INT 71
2016: PUSH
2017: LD_INT 57
2019: PUSH
2020: LD_INT 58
2022: PUSH
2023: LD_INT 44
2025: PUSH
2026: LD_INT 32
2028: PUSH
2029: LD_INT 27
2031: PUSH
2032: LD_INT 23
2034: PUSH
2035: LD_INT 33
2037: PUSH
2038: LD_INT 54
2040: PUSH
2041: LD_INT 55
2043: PUSH
2044: LD_INT 56
2046: PUSH
2047: LD_INT 63
2049: PUSH
2050: LD_INT 64
2052: PUSH
2053: LD_INT 65
2055: PUSH
2056: LD_INT 30
2058: PUSH
2059: LD_INT 31
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_INT 25
2070: PUSH
2071: LD_INT 51
2073: PUSH
2074: LD_INT 52
2076: PUSH
2077: LD_INT 59
2079: PUSH
2080: LD_INT 53
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2117: LD_ADDR_VAR 0 5
2121: PUSH
2122: DOUBLE
2123: LD_INT 1
2125: DEC
2126: ST_TO_ADDR
2127: LD_VAR 0 8
2131: PUSH
2132: FOR_TO
2133: IFFALSE 2209
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2135: LD_VAR 0 8
2139: PUSH
2140: LD_VAR 0 5
2144: ARRAY
2145: PPUSH
2146: LD_VAR 0 1
2150: PPUSH
2151: CALL_OW 321
2155: PUSH
2156: LD_INT 1
2158: EQUAL
2159: PUSH
2160: LD_VAR 0 8
2164: PUSH
2165: LD_VAR 0 5
2169: ARRAY
2170: PPUSH
2171: LD_VAR 0 3
2175: PPUSH
2176: CALL_OW 482
2180: PUSH
2181: LD_INT 1
2183: EQUAL
2184: AND
2185: IFFALSE 2207
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_VAR 0 8
2196: PUSH
2197: LD_VAR 0 5
2201: ARRAY
2202: PPUSH
2203: CALL_OW 184
2207: GO 2132
2209: POP
2210: POP
// end ;
2211: LD_VAR 0 4
2215: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2216: LD_INT 0
2218: PPUSH
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_VAR 0 2
2233: PPUSH
2234: CALL_OW 313
2238: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_VAR 0 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 25
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 24
2273: PUSH
2274: LD_INT 750
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 54
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 70
2304: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 3
2314: PPUSH
2315: LD_INT 22
2317: PUSH
2318: LD_VAR 0 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 21
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 24
2342: PUSH
2343: LD_INT 1000
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: PPUSH
2362: CALL_OW 70
2366: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2367: LD_VAR 0 6
2371: NOT
2372: PUSH
2373: LD_INT 22
2375: PUSH
2376: LD_VAR 0 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 2
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 24
2397: PUSH
2398: LD_INT 250
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PPUSH
2410: CALL_OW 69
2414: NOT
2415: AND
2416: IFFALSE 2420
// exit ;
2418: GO 2602
// if buildings_list > 0 and engineerOkInside then
2420: LD_VAR 0 6
2424: PUSH
2425: LD_INT 0
2427: GREATER
2428: PUSH
2429: LD_VAR 0 8
2433: AND
2434: IFFALSE 2445
// ComExitBuilding ( engineerOkInside ) ;
2436: LD_VAR 0 8
2440: PPUSH
2441: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2445: LD_VAR 0 6
2449: PUSH
2450: LD_INT 0
2452: GREATER
2453: PUSH
2454: LD_VAR 0 9
2458: PUSH
2459: LD_INT 0
2461: GREATER
2462: AND
2463: IFFALSE 2483
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2465: LD_VAR 0 9
2469: PPUSH
2470: LD_VAR 0 6
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2483: LD_VAR 0 6
2487: PUSH
2488: LD_INT 0
2490: EQUAL
2491: PUSH
2492: LD_VAR 0 4
2496: PUSH
2497: LD_INT 0
2499: EQUAL
2500: AND
2501: PUSH
2502: LD_VAR 0 9
2506: PUSH
2507: LD_INT 0
2509: GREATER
2510: AND
2511: IFFALSE 2527
// ComEnterUnit ( engineerOkOutside , building ) ;
2513: LD_VAR 0 9
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2527: LD_VAR 0 9
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_VAR 0 6
2540: PUSH
2541: LD_INT 0
2543: EQUAL
2544: AND
2545: PUSH
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 0
2553: GREATER
2554: AND
2555: IFFALSE 2602
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2557: LD_VAR 0 9
2561: PPUSH
2562: LD_VAR 0 4
2566: PUSH
2567: LD_INT 1
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 3
2587: ARRAY
2588: PPUSH
2589: LD_VAR 0 4
2593: PUSH
2594: LD_INT 4
2596: ARRAY
2597: PPUSH
2598: CALL_OW 145
// end ;
2602: LD_VAR 0 5
2606: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2607: LD_INT 0
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2618: LD_ADDR_VAR 0 6
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 4
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 23
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 24
2657: PUSH
2658: LD_INT 251
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL_OW 69
2675: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2676: LD_ADDR_VAR 0 7
2680: PUSH
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_INT 22
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 23
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 25
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 50
2720: PUSH
2721: EMPTY
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 70
2734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2735: LD_ADDR_VAR 0 10
2739: PUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 22
2747: PUSH
2748: LD_VAR 0 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 21
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 25
2772: PUSH
2773: LD_INT 3
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 24
2789: PUSH
2790: LD_INT 750
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 70
2811: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2812: LD_ADDR_VAR 0 11
2816: PUSH
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_INT 22
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 21
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 3
2846: PUSH
2847: LD_INT 25
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 3
2863: PUSH
2864: LD_INT 24
2866: PUSH
2867: LD_INT 1000
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PPUSH
2884: CALL_OW 70
2888: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2889: LD_VAR 0 10
2893: NOT
2894: PUSH
2895: LD_VAR 0 11
2899: NOT
2900: AND
2901: PUSH
2902: LD_VAR 0 6
2906: NOT
2907: AND
2908: IFFALSE 2912
// exit ;
2910: GO 3146
// if damageUnits > 0 and sci_list > 0 then
2912: LD_VAR 0 10
2916: PUSH
2917: LD_INT 0
2919: GREATER
2920: PUSH
2921: LD_VAR 0 6
2925: PUSH
2926: LD_INT 0
2928: GREATER
2929: AND
2930: IFFALSE 2946
// ComMoveToArea ( damageUnits , healArea ) ;
2932: LD_VAR 0 10
2936: PPUSH
2937: LD_VAR 0 2
2941: PPUSH
2942: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2946: LD_VAR 0 11
2950: PUSH
2951: LD_INT 0
2953: GREATER
2954: PUSH
2955: LD_VAR 0 6
2959: PUSH
2960: LD_INT 0
2962: GREATER
2963: AND
2964: IFFALSE 2975
// ComExitBuilding ( sci_list ) ;
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2975: LD_VAR 0 11
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: PUSH
2984: LD_VAR 0 7
2988: PUSH
2989: LD_INT 0
2991: GREATER
2992: AND
2993: IFFALSE 3013
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2995: LD_VAR 0 7
2999: PPUSH
3000: LD_VAR 0 11
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3013: LD_VAR 0 10
3017: PUSH
3018: LD_INT 0
3020: EQUAL
3021: PUSH
3022: LD_VAR 0 11
3026: PUSH
3027: LD_INT 0
3029: EQUAL
3030: AND
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: LD_INT 0
3039: GREATER
3040: AND
3041: IFFALSE 3146
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3043: LD_ADDR_VAR 0 12
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_VAR 0 1
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 30
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3090: LD_ADDR_VAR 0 13
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 12
3102: PPUSH
3103: CALL_OW 12
3107: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3108: LD_VAR 0 7
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 60
3118: PUSH
3119: EMPTY
3120: LIST
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: CALL_OW 72
3130: PPUSH
3131: LD_VAR 0 12
3135: PUSH
3136: LD_VAR 0 13
3140: ARRAY
3141: PPUSH
3142: CALL_OW 120
// end ; end ;
3146: LD_VAR 0 5
3150: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3151: LD_INT 0
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
// tmpTab = [ ] ;
3157: LD_ADDR_VAR 0 6
3161: PUSH
3162: EMPTY
3163: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3164: LD_INT 22
3166: PUSH
3167: LD_VAR 0 1
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 30
3178: PUSH
3179: LD_INT 32
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: PUSH
3195: LD_INT 0
3197: GREATER
3198: IFFALSE 3281
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 22
3207: PUSH
3208: LD_VAR 0 1
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 30
3219: PUSH
3220: LD_INT 32
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PPUSH
3231: CALL_OW 69
3235: PUSH
3236: FOR_IN
3237: IFFALSE 3279
// begin for j in UnitsInside ( i ) do
3239: LD_ADDR_VAR 0 5
3243: PUSH
3244: LD_VAR 0 4
3248: PPUSH
3249: CALL_OW 313
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3275
// tmpTab = tmpTab ^ j ;
3257: LD_ADDR_VAR 0 6
3261: PUSH
3262: LD_VAR 0 6
3266: PUSH
3267: LD_VAR 0 5
3271: ADD
3272: ST_TO_ADDR
3273: GO 3254
3275: POP
3276: POP
// end ;
3277: GO 3236
3279: POP
3280: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3281: LD_VAR 0 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL_OW 250
3295: PPUSH
3296: LD_VAR 0 2
3300: PPUSH
3301: CALL_OW 251
3305: PPUSH
3306: CALL_OW 114
// end ;
3310: LD_VAR 0 3
3314: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3315: LD_INT 0
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// enable ;
3321: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3322: LD_ADDR_VAR 0 7
3326: PUSH
3327: LD_VAR 0 3
3331: PPUSH
3332: CALL_OW 435
3336: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_VAR 0 1
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 34
3356: PUSH
3357: LD_VAR 0 2
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3375: LD_VAR 0 6
3379: PUSH
3380: LD_INT 0
3382: GREATER
3383: PUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 435
3393: AND
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_INT 0
3402: GREATER
3403: AND
3404: IFFALSE 3453
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3406: LD_VAR 0 6
3410: PUSH
3411: LD_INT 1
3413: ARRAY
3414: PPUSH
3415: LD_VAR 0 7
3419: PUSH
3420: LD_INT 1
3422: ARRAY
3423: PPUSH
3424: LD_VAR 0 7
3428: PUSH
3429: LD_INT 2
3431: ARRAY
3432: PPUSH
3433: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3437: LD_VAR 0 6
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 100
3448: PPUSH
3449: CALL_OW 240
// end ; end ;
3453: LD_VAR 0 4
3457: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_VAR 0 1
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 30
3487: PUSH
3488: LD_INT 31
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 30
3497: PUSH
3498: LD_INT 32
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 30
3507: PUSH
3508: LD_INT 33
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: LD_INT 30
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3552: LD_ADDR_VAR 0 7
3556: PUSH
3557: LD_INT 22
3559: PUSH
3560: LD_VAR 0 2
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 21
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 58
3581: PUSH
3582: EMPTY
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3595: LD_VAR 0 6
3599: PUSH
3600: LD_INT 0
3602: GREATER
3603: PUSH
3604: LD_VAR 0 7
3608: PUSH
3609: LD_INT 0
3611: GREATER
3612: AND
3613: IFFALSE 3683
// begin for i in turretsList do
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_VAR 0 6
3624: PUSH
3625: FOR_IN
3626: IFFALSE 3681
// begin for j in enemyBuildings do
3628: LD_ADDR_VAR 0 5
3632: PUSH
3633: LD_VAR 0 7
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3677
// begin if GetDistUnits ( i , j ) < 20 then
3641: LD_VAR 0 4
3645: PPUSH
3646: LD_VAR 0 5
3650: PPUSH
3651: CALL_OW 296
3655: PUSH
3656: LD_INT 20
3658: LESS
3659: IFFALSE 3675
// begin ComAttackUnit ( i , j ) ;
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: CALL_OW 115
// end ; end ;
3675: GO 3638
3677: POP
3678: POP
// end ;
3679: GO 3625
3681: POP
3682: POP
// end ; end ;
3683: LD_VAR 0 3
3687: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
// for i = 1 to vehCount do
3692: LD_ADDR_VAR 0 9
3696: PUSH
3697: DOUBLE
3698: LD_INT 1
3700: DEC
3701: ST_TO_ADDR
3702: LD_VAR 0 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3755
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: LD_VAR 0 5
3724: PPUSH
3725: LD_VAR 0 6
3729: PPUSH
3730: LD_VAR 0 4
3734: PUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_VAR 0 4
3742: PPUSH
3743: CALL_OW 12
3747: ARRAY
3748: PPUSH
3749: CALL_OW 185
3753: GO 3707
3755: POP
3756: POP
// end ;
3757: LD_VAR 0 8
3761: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3762: LD_INT 0
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
3770: PPUSH
// if russianTanks >= [ 3 , 4 , 5 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 ] [ Difficulty ] then
3771: LD_EXP 11
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: GREATEREQUAL
3796: PUSH
3797: LD_EXP 12
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 3
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_OWVAR 67
3820: ARRAY
3821: GREATEREQUAL
3822: AND
3823: IFFALSE 4191
// begin if IsOk ( ruTeleport ) then
3825: LD_INT 116
3827: PPUSH
3828: CALL_OW 302
3832: IFFALSE 3884
// begin for j in russianTanks do
3834: LD_ADDR_VAR 0 4
3838: PUSH
3839: LD_EXP 11
3843: PUSH
3844: FOR_IN
3845: IFFALSE 3875
// if j mod 3 = 0 then
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 3
3854: MOD
3855: PUSH
3856: LD_INT 0
3858: EQUAL
3859: IFFALSE 3873
// ComEnterUnit ( j , ruTeleport ) ;
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_INT 116
3868: PPUSH
3869: CALL_OW 120
3873: GO 3844
3875: POP
3876: POP
// wait ( 0 0$5 ) ;
3877: LD_INT 175
3879: PPUSH
3880: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// for j in russianTanks do
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 11
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4179
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3904: LD_ADDR_VAR 0 5
3908: PUSH
3909: LD_EXP 12
3913: PPUSH
3914: LD_INT 3
3916: PUSH
3917: LD_INT 60
3919: PUSH
3920: EMPTY
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PPUSH
3927: CALL_OW 72
3931: ST_TO_ADDR
// if tmp then
3932: LD_VAR 0 5
3936: IFFALSE 3952
// ComMoveUnit ( tmp , j ) ;
3938: LD_VAR 0 5
3942: PPUSH
3943: LD_VAR 0 4
3947: PPUSH
3948: CALL_OW 112
// if GetSide ( j ) <> side then
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL_OW 255
3961: PUSH
3962: LD_VAR 0 1
3966: NONEQUAL
3967: IFFALSE 3980
// begin ComStop ( j ) ;
3969: LD_VAR 0 4
3973: PPUSH
3974: CALL_OW 141
// continue ;
3978: GO 3901
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3980: LD_ADDR_VAR 0 7
3984: PUSH
3985: LD_INT 81
3987: PUSH
3988: LD_VAR 0 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 101
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: PPUSH
4016: LD_VAR 0 4
4020: PPUSH
4021: CALL_OW 74
4025: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: LD_INT 81
4033: PUSH
4034: LD_VAR 0 1
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 101
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 59
4058: PUSH
4059: EMPTY
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 21
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PPUSH
4101: LD_VAR 0 4
4105: PPUSH
4106: CALL_OW 74
4110: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 7
4120: PPUSH
4121: CALL_OW 296
4125: PUSH
4126: LD_INT 8
4128: PLUS
4129: PUSH
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_VAR 0 8
4139: PPUSH
4140: CALL_OW 296
4144: LESS
4145: IFFALSE 4163
// ComAttackUnit ( j , target1 ) else
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_VAR 0 7
4156: PPUSH
4157: CALL_OW 115
4161: GO 4177
// ComAttackUnit ( j , target2 ) ;
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 8
4172: PPUSH
4173: CALL_OW 115
// end ;
4177: GO 3901
4179: POP
4180: POP
// until russianTanks = 0 ;
4181: LD_EXP 11
4185: PUSH
4186: LD_INT 0
4188: EQUAL
4189: IFFALSE 3884
// end ; end ;
4191: LD_VAR 0 2
4195: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
4196: LD_INT 0
4198: PPUSH
4199: PPUSH
4200: PPUSH
4201: PPUSH
4202: PPUSH
4203: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
4204: LD_ADDR_VAR 0 6
4208: PUSH
4209: LD_INT 22
4211: PUSH
4212: LD_VAR 0 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 9
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4240: LD_ADDR_VAR 0 7
4244: PUSH
4245: LD_INT 81
4247: PUSH
4248: LD_VAR 0 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 3
4259: PUSH
4260: LD_INT 21
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PPUSH
4278: CALL_OW 69
4282: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 1
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: CALL_OW 12
4298: ST_TO_ADDR
// for i = 1 to list do
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: DOUBLE
4305: LD_INT 1
4307: DEC
4308: ST_TO_ADDR
4309: LD_VAR 0 6
4313: PUSH
4314: FOR_TO
4315: IFFALSE 4517
// for ta in filter do
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_VAR 0 7
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4513
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4330: LD_VAR 0 6
4334: PUSH
4335: LD_VAR 0 5
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 296
4350: PUSH
4351: LD_INT 15
4353: LESSEQUAL
4354: IFFALSE 4511
// begin case c of 1 :
4356: LD_VAR 0 4
4360: PUSH
4361: LD_INT 1
4363: DOUBLE
4364: EQUAL
4365: IFTRUE 4369
4367: GO 4407
4369: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4370: LD_VAR 0 6
4374: PUSH
4375: LD_VAR 0 5
4379: ARRAY
4380: PPUSH
4381: LD_VAR 0 3
4385: PPUSH
4386: CALL_OW 250
4390: PPUSH
4391: LD_VAR 0 3
4395: PPUSH
4396: CALL_OW 251
4400: PPUSH
4401: CALL_OW 154
4405: GO 4511
4407: LD_INT 2
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4479
4415: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4416: LD_VAR 0 6
4420: PUSH
4421: LD_VAR 0 5
4425: ARRAY
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 250
4436: PUSH
4437: LD_INT 1
4439: NEG
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: CALL_OW 12
4448: PLUS
4449: PPUSH
4450: LD_VAR 0 3
4454: PPUSH
4455: CALL_OW 251
4459: PUSH
4460: LD_INT 1
4462: NEG
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: CALL_OW 12
4471: PLUS
4472: PPUSH
4473: CALL_OW 153
4477: GO 4511
4479: LD_INT 3
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4510
4487: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4488: LD_VAR 0 6
4492: PUSH
4493: LD_VAR 0 5
4497: ARRAY
4498: PPUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: CALL_OW 115
4508: GO 4511
4510: POP
// end ; end ;
4511: GO 4327
4513: POP
4514: POP
4515: GO 4314
4517: POP
4518: POP
// end ;
4519: LD_VAR 0 2
4523: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4524: LD_INT 0
4526: PPUSH
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 2
4541: PPUSH
4542: LD_INT 22
4544: PUSH
4545: LD_VAR 0 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 21
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 52
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: PPUSH
4579: CALL_OW 70
4583: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4584: LD_ADDR_VAR 0 8
4588: PUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_INT 22
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 3
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: LD_INT 24
4621: PUSH
4622: LD_INT 1000
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: PPUSH
4641: CALL_OW 70
4645: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4646: LD_VAR 0 8
4650: PUSH
4651: LD_INT 0
4653: GREATER
4654: PUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 750
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PPUSH
4670: CALL_OW 72
4674: PUSH
4675: LD_INT 0
4677: GREATER
4678: AND
4679: IFFALSE 4699
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4681: LD_VAR 0 7
4685: PPUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_INT 1
4693: ARRAY
4694: PPUSH
4695: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4699: LD_VAR 0 7
4703: PUSH
4704: LD_INT 0
4706: GREATER
4707: PUSH
4708: LD_VAR 0 8
4712: PUSH
4713: LD_INT 0
4715: EQUAL
4716: AND
4717: PUSH
4718: LD_EXP 10
4722: PUSH
4723: LD_INT 0
4725: GREATER
4726: AND
4727: IFFALSE 4774
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4729: LD_VAR 0 7
4733: PPUSH
4734: LD_EXP 10
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: LD_EXP 10
4747: PUSH
4748: LD_INT 2
4750: ARRAY
4751: PPUSH
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 3
4759: ARRAY
4760: PPUSH
4761: LD_EXP 10
4765: PUSH
4766: LD_INT 4
4768: ARRAY
4769: PPUSH
4770: CALL_OW 567
// end ; end_of_file
4774: LD_VAR 0 3
4778: RET
// every 0 0$1 do
4779: GO 4781
4781: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4782: LD_INT 3
4784: PPUSH
4785: LD_INT 14
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: CALL 1975 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 15
4800: PPUSH
4801: LD_INT 3
4803: PPUSH
4804: CALL 1975 0 3
// end ;
4808: END
// every 0 0$1 trigger russianAI = 1 do
4809: LD_EXP 13
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4923
4819: GO 4821
4821: DISABLE
// begin enable ;
4822: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PPUSH
4829: LD_INT 7
4831: PPUSH
4832: LD_EXP 10
4836: PPUSH
4837: CALL 2216 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4841: LD_INT 3
4843: PPUSH
4844: LD_INT 8
4846: PPUSH
4847: LD_INT 7
4849: PPUSH
4850: LD_INT 14
4852: PUSH
4853: LD_INT 15
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 1
4862: PPUSH
4863: LD_INT 2
4865: PPUSH
4866: CALL_OW 12
4870: ARRAY
4871: PPUSH
4872: CALL 2607 0 4
// AttackVehicles ( 3 ) ;
4876: LD_INT 3
4878: PPUSH
4879: CALL 3762 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4883: LD_INT 3
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: CALL 3458 0 2
// IntBazooka ( 3 ) ;
4893: LD_INT 3
4895: PPUSH
4896: CALL 4196 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 51
4905: PPUSH
4906: LD_INT 14
4908: PPUSH
4909: CALL 3315 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4913: LD_INT 3
4915: PPUSH
4916: LD_INT 7
4918: PPUSH
4919: CALL 4524 0 2
// end ;
4923: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4924: LD_INT 22
4926: PPUSH
4927: CALL_OW 303
4931: PUSH
4932: LD_INT 22
4934: PPUSH
4935: CALL_OW 255
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: OR
4944: IFFALSE 4959
4946: GO 4948
4948: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4949: LD_INT 3
4951: PPUSH
4952: LD_INT 22
4954: PPUSH
4955: CALL 3151 0 2
4959: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4960: LD_EXP 13
4964: PUSH
4965: LD_INT 1
4967: EQUAL
4968: PUSH
4969: LD_INT 22
4971: PUSH
4972: LD_INT 3
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 21
4981: PUSH
4982: LD_INT 2
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 50
4991: PUSH
4992: EMPTY
4993: LIST
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: LD_INT 34
5010: PUSH
5011: LD_INT 46
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 34
5020: PUSH
5021: LD_INT 45
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 34
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 34
5040: PUSH
5041: LD_INT 49
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 34
5050: PUSH
5051: LD_INT 47
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: PUSH
5078: LD_INT 3
5080: LESS
5081: AND
5082: IFFALSE 5269
5084: GO 5086
5086: DISABLE
// begin enable ;
5087: ENABLE
// if russianRocketsAvalaible = 1 then
5088: LD_EXP 14
5092: PUSH
5093: LD_INT 1
5095: EQUAL
5096: IFFALSE 5153
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: LD_OWVAR 67
5122: ARRAY
5123: PPUSH
5124: LD_INT 46
5126: PUSH
5127: LD_INT 45
5129: PUSH
5130: LD_INT 44
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: PPUSH
5138: LD_INT 3
5140: PPUSH
5141: LD_INT 3
5143: PPUSH
5144: LD_INT 24
5146: PPUSH
5147: CALL 3688 0 7
5151: GO 5210
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5153: LD_INT 3
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: LD_INT 3
5161: PUSH
5162: LD_INT 4
5164: PUSH
5165: LD_INT 5
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: LD_INT 46
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: LD_INT 44
5187: PUSH
5188: LD_INT 47
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: LD_INT 3
5199: PPUSH
5200: LD_INT 3
5202: PPUSH
5203: LD_INT 24
5205: PPUSH
5206: CALL 3688 0 7
// if russianTimeLapsers = 0 then
5210: LD_EXP 12
5214: PUSH
5215: LD_INT 0
5217: EQUAL
5218: IFFALSE 5269
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5220: LD_INT 3
5222: PPUSH
5223: LD_INT 40
5225: PPUSH
5226: LD_INT 1
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 3
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: PPUSH
5246: LD_INT 49
5248: PUSH
5249: LD_INT 49
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PPUSH
5256: LD_INT 3
5258: PPUSH
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 24
5264: PPUSH
5265: CALL 3688 0 7
// end ;
5269: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5270: LD_EXP 18
5274: PUSH
5275: LD_INT 22
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 2
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 58
5297: PUSH
5298: EMPTY
5299: LIST
5300: PUSH
5301: LD_INT 33
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 91
5313: PUSH
5314: LD_EXP 18
5318: PUSH
5319: LD_INT 45
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 69
5338: AND
5339: IFFALSE 5443
5341: GO 5343
5343: DISABLE
// begin wait ( 0 0$5 ) ;
5344: LD_INT 175
5346: PPUSH
5347: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5351: LD_EXP 18
5355: PPUSH
5356: LD_INT 22
5358: PUSH
5359: LD_INT 1
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 2
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 58
5378: PUSH
5379: EMPTY
5380: LIST
5381: PUSH
5382: LD_INT 33
5384: PUSH
5385: LD_INT 1
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 91
5394: PUSH
5395: LD_EXP 18
5399: PUSH
5400: LD_INT 45
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: PPUSH
5415: CALL_OW 69
5419: PUSH
5420: LD_INT 1
5422: ARRAY
5423: PPUSH
5424: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5428: LD_EXP 18
5432: PPUSH
5433: LD_INT 127
5435: PPUSH
5436: LD_INT 63
5438: PPUSH
5439: CALL_OW 171
// end ; end_of_file
5443: END
// every 1 do var dec1 , dec2 ;
5444: GO 5446
5446: DISABLE
5447: LD_INT 0
5449: PPUSH
5450: PPUSH
// begin InGameOn ;
5451: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5455: LD_INT 48
5457: PPUSH
5458: LD_STRING deltakappa
5460: PPUSH
5461: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5465: LD_INT 95
5467: PPUSH
5468: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5472: LD_INT 95
5474: PPUSH
5475: LD_INT 30
5477: PPUSH
5478: LD_INT 11
5480: PPUSH
5481: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5485: LD_INT 30
5487: PPUSH
5488: LD_INT 11
5490: PPUSH
5491: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5495: LD_EXP 5
5499: PPUSH
5500: LD_STRING D1-Pow-1
5502: PPUSH
5503: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5507: LD_EXP 1
5511: PPUSH
5512: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5516: LD_EXP 1
5520: PPUSH
5521: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_STRING D1-JMM-1
5532: PPUSH
5533: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5537: LD_EXP 5
5541: PPUSH
5542: LD_STRING D1-Pow-2
5544: PPUSH
5545: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5549: LD_EXP 1
5553: PPUSH
5554: LD_STRING D1-JMM-2
5556: PPUSH
5557: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5561: LD_EXP 1
5565: PPUSH
5566: LD_INT 95
5568: PPUSH
5569: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5573: LD_STRING M1
5575: PPUSH
5576: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5580: LD_INT 35
5582: PPUSH
5583: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_INT 95
5594: PPUSH
5595: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5599: LD_INT 95
5601: PPUSH
5602: LD_INT 51
5604: PPUSH
5605: LD_INT 21
5607: PPUSH
5608: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5612: LD_INT 95
5614: PPUSH
5615: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5619: LD_INT 95
5621: PPUSH
5622: LD_INT 5
5624: PPUSH
5625: CALL_OW 308
5629: IFFALSE 5580
// if JMMGirl = 1 then
5631: LD_EXP 7
5635: PUSH
5636: LD_INT 1
5638: EQUAL
5639: IFFALSE 5952
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5641: LD_EXP 2
5645: PPUSH
5646: LD_STRING D2J-Joan-1
5648: PPUSH
5649: CALL_OW 94
// dec1 = query ( Q1 ) ;
5653: LD_ADDR_VAR 0 1
5657: PUSH
5658: LD_STRING Q1
5660: PPUSH
5661: CALL_OW 97
5665: ST_TO_ADDR
// if dec1 = 1 then
5666: LD_VAR 0 1
5670: PUSH
5671: LD_INT 1
5673: EQUAL
5674: IFFALSE 5928
// begin ComExitVehicle ( JMM ) ;
5676: LD_EXP 1
5680: PPUSH
5681: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5685: LD_EXP 1
5689: PPUSH
5690: LD_STRING D2J-JMM-1
5692: PPUSH
5693: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5697: LD_EXP 2
5701: PPUSH
5702: LD_STRING D2J-Joan-2
5704: PPUSH
5705: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5709: LD_EXP 1
5713: PPUSH
5714: LD_STRING D2J-JMM-2
5716: PPUSH
5717: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5721: LD_EXP 2
5725: PPUSH
5726: LD_STRING D2J-Joan-3
5728: PPUSH
5729: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5733: LD_EXP 5
5737: PPUSH
5738: LD_STRING DPowell-Pow-1
5740: PPUSH
5741: CALL_OW 94
// dec2 = query ( Q2J ) ;
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: LD_STRING Q2J
5752: PPUSH
5753: CALL_OW 97
5757: ST_TO_ADDR
// if dec2 = 1 then
5758: LD_VAR 0 2
5762: PUSH
5763: LD_INT 1
5765: EQUAL
5766: IFFALSE 5808
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5768: LD_EXP 1
5772: PPUSH
5773: LD_STRING D2Ja-JMM-1
5775: PPUSH
5776: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5780: LD_EXP 2
5784: PPUSH
5785: LD_STRING D2Ja-Joan-1
5787: PPUSH
5788: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5792: LD_EXP 1
5796: PPUSH
5797: LD_STRING D2Ja-JMM-2
5799: PPUSH
5800: CALL_OW 88
// InGameOff ;
5804: CALL_OW 9
// end ; if dec2 = 2 then
5808: LD_VAR 0 2
5812: PUSH
5813: LD_INT 2
5815: EQUAL
5816: IFFALSE 5892
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5818: LD_EXP 1
5822: PPUSH
5823: LD_STRING D2Jb-JMM-1
5825: PPUSH
5826: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5830: LD_EXP 2
5834: PPUSH
5835: LD_STRING D2Jb-Joan-1
5837: PPUSH
5838: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5842: LD_EXP 1
5846: PPUSH
5847: LD_STRING D2Jb-JMM-2
5849: PPUSH
5850: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5854: LD_EXP 2
5858: PPUSH
5859: LD_STRING D2Jb-Joan-2
5861: PPUSH
5862: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D2Jb-JMM-3
5873: PPUSH
5874: CALL_OW 88
// fastEnd = 1 ;
5878: LD_ADDR_EXP 15
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// FinishMission ;
5886: CALL 9826 0 0
// exit ;
5890: GO 6522
// end ; if dec2 = 3 then
5892: LD_VAR 0 2
5896: PUSH
5897: LD_INT 3
5899: EQUAL
5900: IFFALSE 5928
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5902: LD_EXP 2
5906: PPUSH
5907: LD_STRING D2Jc-Joan-1
5909: PPUSH
5910: CALL_OW 94
// fastEnd = 1 ;
5914: LD_ADDR_EXP 15
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// FinishMission ;
5922: CALL 9826 0 0
// exit ;
5926: GO 6522
// end ; end ; if dec1 = 2 then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_INT 2
5935: EQUAL
5936: IFFALSE 5952
// begin fastEnd = 1 ;
5938: LD_ADDR_EXP 15
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// FinishMission ;
5946: CALL 9826 0 0
// exit ;
5950: GO 6522
// end ; end ; if JMMGirl = 2 then
5952: LD_EXP 7
5956: PUSH
5957: LD_INT 2
5959: EQUAL
5960: IFFALSE 6285
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5962: LD_EXP 3
5966: PPUSH
5967: LD_STRING D2L-Lisa-1
5969: PPUSH
5970: CALL_OW 94
// dec1 = query ( Q1 ) ;
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_STRING Q1
5981: PPUSH
5982: CALL_OW 97
5986: ST_TO_ADDR
// if dec1 = 1 then
5987: LD_VAR 0 1
5991: PUSH
5992: LD_INT 1
5994: EQUAL
5995: IFFALSE 6261
// begin ComExitVehicle ( JMM ) ;
5997: LD_EXP 1
6001: PPUSH
6002: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6006: LD_EXP 1
6010: PPUSH
6011: LD_STRING D2L-JMM-1
6013: PPUSH
6014: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6018: LD_EXP 3
6022: PPUSH
6023: LD_STRING D2L-Lisa-2
6025: PPUSH
6026: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6030: LD_EXP 1
6034: PPUSH
6035: LD_STRING D2L-JMM-2
6037: PPUSH
6038: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6042: LD_EXP 3
6046: PPUSH
6047: LD_STRING D2L-Lisa-3
6049: PPUSH
6050: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6054: LD_EXP 5
6058: PPUSH
6059: LD_STRING DPowell-Pow-1
6061: PPUSH
6062: CALL_OW 94
// dec2 = query ( Q2L ) ;
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_STRING Q2L
6073: PPUSH
6074: CALL_OW 97
6078: ST_TO_ADDR
// if dec2 = 1 then
6079: LD_VAR 0 2
6083: PUSH
6084: LD_INT 1
6086: EQUAL
6087: IFFALSE 6153
// begin Say ( JMM , D2La-JMM-1 ) ;
6089: LD_EXP 1
6093: PPUSH
6094: LD_STRING D2La-JMM-1
6096: PPUSH
6097: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6101: LD_EXP 3
6105: PPUSH
6106: LD_STRING D2La-Lisa-1
6108: PPUSH
6109: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6113: LD_EXP 1
6117: PPUSH
6118: LD_STRING D2La-JMM-2
6120: PPUSH
6121: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6125: LD_EXP 3
6129: PPUSH
6130: LD_STRING D2La-Lisa-2
6132: PPUSH
6133: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6137: LD_EXP 1
6141: PPUSH
6142: LD_STRING D2La-JMM-3
6144: PPUSH
6145: CALL_OW 88
// InGameOff ;
6149: CALL_OW 9
// end ; if dec2 = 2 then
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 2
6160: EQUAL
6161: IFFALSE 6225
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6163: LD_EXP 1
6167: PPUSH
6168: LD_STRING D2Lb-JMM-1
6170: PPUSH
6171: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6175: LD_EXP 3
6179: PPUSH
6180: LD_STRING D2Lb-Lisa-1
6182: PPUSH
6183: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6187: LD_EXP 1
6191: PPUSH
6192: LD_STRING D2Lb-JMM-2
6194: PPUSH
6195: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6199: LD_EXP 3
6203: PPUSH
6204: LD_STRING D2Lb-Lisa-2
6206: PPUSH
6207: CALL_OW 94
// fastEnd = 1 ;
6211: LD_ADDR_EXP 15
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// FinishMission ;
6219: CALL 9826 0 0
// exit ;
6223: GO 6522
// end ; if dec2 = 3 then
6225: LD_VAR 0 2
6229: PUSH
6230: LD_INT 3
6232: EQUAL
6233: IFFALSE 6261
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6235: LD_EXP 3
6239: PPUSH
6240: LD_STRING D2Lc-Lisa-1
6242: PPUSH
6243: CALL_OW 94
// fastEnd = 1 ;
6247: LD_ADDR_EXP 15
6251: PUSH
6252: LD_INT 1
6254: ST_TO_ADDR
// FinishMission ;
6255: CALL 9826 0 0
// exit ;
6259: GO 6522
// end ; end ; if dec1 = 2 then
6261: LD_VAR 0 1
6265: PUSH
6266: LD_INT 2
6268: EQUAL
6269: IFFALSE 6285
// begin fastEnd = 1 ;
6271: LD_ADDR_EXP 15
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// FinishMission ;
6279: CALL 9826 0 0
// exit ;
6283: GO 6522
// end ; end ; if JMMGirl = 3 then
6285: LD_EXP 7
6289: PUSH
6290: LD_INT 3
6292: EQUAL
6293: IFFALSE 6522
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6295: LD_EXP 4
6299: PPUSH
6300: LD_STRING D2X-Con-1
6302: PPUSH
6303: CALL_OW 94
// dec1 = query ( Q1 ) ;
6307: LD_ADDR_VAR 0 1
6311: PUSH
6312: LD_STRING Q1
6314: PPUSH
6315: CALL_OW 97
6319: ST_TO_ADDR
// if dec1 = 1 then
6320: LD_VAR 0 1
6324: PUSH
6325: LD_INT 1
6327: EQUAL
6328: IFFALSE 6498
// begin ComExitVehicle ( JMM ) ;
6330: LD_EXP 1
6334: PPUSH
6335: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D2X-JMM-1
6346: PPUSH
6347: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6351: LD_EXP 4
6355: PPUSH
6356: LD_STRING D2X-Con-2
6358: PPUSH
6359: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6363: LD_EXP 5
6367: PPUSH
6368: LD_STRING DPowell-Pow-1
6370: PPUSH
6371: CALL_OW 94
// dec2 = query ( Q2X ) ;
6375: LD_ADDR_VAR 0 2
6379: PUSH
6380: LD_STRING Q2X
6382: PPUSH
6383: CALL_OW 97
6387: ST_TO_ADDR
// if dec2 = 1 then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 1
6395: EQUAL
6396: IFFALSE 6414
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6398: LD_EXP 1
6402: PPUSH
6403: LD_STRING D2Xa-JMM-1
6405: PPUSH
6406: CALL_OW 88
// InGameOff ;
6410: CALL_OW 9
// end ; if dec2 = 2 then
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: EQUAL
6422: IFFALSE 6462
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6424: LD_EXP 1
6428: PPUSH
6429: LD_STRING D2Xb-JMM-1
6431: PPUSH
6432: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_STRING D2Xb-Con-1
6443: PPUSH
6444: CALL_OW 94
// fastEnd = 1 ;
6448: LD_ADDR_EXP 15
6452: PUSH
6453: LD_INT 1
6455: ST_TO_ADDR
// FinishMission ;
6456: CALL 9826 0 0
// exit ;
6460: GO 6522
// end ; if dec2 = 3 then
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 3
6469: EQUAL
6470: IFFALSE 6498
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6472: LD_EXP 4
6476: PPUSH
6477: LD_STRING D2Xc-Con-1
6479: PPUSH
6480: CALL_OW 94
// fastEnd = 1 ;
6484: LD_ADDR_EXP 15
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// FinishMission ;
6492: CALL 9826 0 0
// exit ;
6496: GO 6522
// end ; end ; if dec1 = 2 then
6498: LD_VAR 0 1
6502: PUSH
6503: LD_INT 2
6505: EQUAL
6506: IFFALSE 6522
// begin fastEnd = 1 ;
6508: LD_ADDR_EXP 15
6512: PUSH
6513: LD_INT 1
6515: ST_TO_ADDR
// FinishMission ;
6516: CALL 9826 0 0
// exit ;
6520: GO 6522
// end ; end ; end ;
6522: PPOPN 2
6524: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6525: LD_EXP 1
6529: PPUSH
6530: LD_INT 6
6532: PPUSH
6533: CALL_OW 308
6537: IFFALSE 7279
6539: GO 6541
6541: DISABLE
// begin InGameOn ;
6542: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6546: LD_INT 35
6548: PPUSH
6549: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6553: LD_EXP 1
6557: PPUSH
6558: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_INT 62
6569: PPUSH
6570: LD_INT 104
6572: PPUSH
6573: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6577: LD_EXP 1
6581: PPUSH
6582: LD_EXP 2
6586: PPUSH
6587: CALL_OW 296
6591: PUSH
6592: LD_INT 4
6594: LESS
6595: PUSH
6596: LD_EXP 1
6600: PPUSH
6601: LD_EXP 3
6605: PPUSH
6606: CALL_OW 296
6610: PUSH
6611: LD_INT 4
6613: LESS
6614: OR
6615: PUSH
6616: LD_EXP 1
6620: PPUSH
6621: LD_EXP 4
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 4
6633: LESS
6634: OR
6635: IFFALSE 6546
// case JMMGirl of 1 :
6637: LD_EXP 7
6641: PUSH
6642: LD_INT 1
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6862
6650: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6651: LD_INT 22
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6673: LD_EXP 2
6677: PPUSH
6678: LD_EXP 1
6682: PPUSH
6683: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6687: LD_EXP 1
6691: PPUSH
6692: LD_EXP 2
6696: PPUSH
6697: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6701: LD_EXP 2
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PPUSH
6715: CALL_OW 87
// wait ( 0 0$1 ) ;
6719: LD_INT 35
6721: PPUSH
6722: CALL_OW 67
// DialogueOn ;
6726: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6730: LD_EXP 2
6734: PPUSH
6735: LD_STRING D3J-Joan-1
6737: PPUSH
6738: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6742: LD_EXP 1
6746: PPUSH
6747: LD_STRING D3J-JMM-1
6749: PPUSH
6750: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6754: LD_EXP 2
6758: PPUSH
6759: LD_STRING D3J-Joan-2
6761: PPUSH
6762: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6766: LD_EXP 1
6770: PPUSH
6771: LD_STRING D3J-JMM-2
6773: PPUSH
6774: CALL_OW 88
// wait ( 0 0$1 ) ;
6778: LD_INT 35
6780: PPUSH
6781: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D4-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D4-Joan-1
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D4-JMM-2
6816: PPUSH
6817: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6821: LD_EXP 2
6825: PPUSH
6826: LD_STRING D4-Joan-2
6828: PPUSH
6829: CALL_OW 88
// DialogueOff ;
6833: CALL_OW 7
// InGameOff ;
6837: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6841: LD_STRING M2J
6843: PPUSH
6844: CALL_OW 337
// SaveForQuickRestart ;
6848: CALL_OW 22
// russianAI = 1 ;
6852: LD_ADDR_EXP 13
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// end ; 2 :
6860: GO 7279
6862: LD_INT 2
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 7082
6870: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6871: LD_INT 22
6873: PUSH
6874: LD_INT 4
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6893: LD_EXP 3
6897: PPUSH
6898: LD_EXP 1
6902: PPUSH
6903: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6907: LD_EXP 1
6911: PPUSH
6912: LD_EXP 3
6916: PPUSH
6917: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6921: LD_EXP 3
6925: PUSH
6926: LD_EXP 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 87
// wait ( 0 0$1 ) ;
6939: LD_INT 35
6941: PPUSH
6942: CALL_OW 67
// DialogueOn ;
6946: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6950: LD_EXP 3
6954: PPUSH
6955: LD_STRING D3L-Lisa-1
6957: PPUSH
6958: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6962: LD_EXP 1
6966: PPUSH
6967: LD_STRING D3L-JMM-1
6969: PPUSH
6970: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6974: LD_EXP 3
6978: PPUSH
6979: LD_STRING D3L-Lisa-2
6981: PPUSH
6982: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6986: LD_EXP 1
6990: PPUSH
6991: LD_STRING D3L-JMM-2
6993: PPUSH
6994: CALL_OW 88
// wait ( 0 0$1 ) ;
6998: LD_INT 35
7000: PPUSH
7001: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D4-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D4-Lisa-1
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D4-JMM-1
7036: PPUSH
7037: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7041: LD_EXP 3
7045: PPUSH
7046: LD_STRING D4-Lisa-2
7048: PPUSH
7049: CALL_OW 88
// DialogueOff ;
7053: CALL_OW 7
// InGameOff ;
7057: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7061: LD_STRING M2L
7063: PPUSH
7064: CALL_OW 337
// SaveForQuickRestart ;
7068: CALL_OW 22
// russianAI = 1 ;
7072: LD_ADDR_EXP 13
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// end ; 3 :
7080: GO 7279
7082: LD_INT 3
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7278
7090: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7091: LD_INT 22
7093: PUSH
7094: LD_INT 4
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7113: LD_EXP 4
7117: PPUSH
7118: LD_EXP 1
7122: PPUSH
7123: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7127: LD_EXP 1
7131: PPUSH
7132: LD_EXP 4
7136: PPUSH
7137: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7141: LD_EXP 2
7145: PUSH
7146: LD_EXP 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PPUSH
7155: CALL_OW 87
// wait ( 0 0$1 ) ;
7159: LD_INT 35
7161: PPUSH
7162: CALL_OW 67
// DialogueOn ;
7166: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7170: LD_EXP 4
7174: PPUSH
7175: LD_STRING D3X-Con-1
7177: PPUSH
7178: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7182: LD_EXP 1
7186: PPUSH
7187: LD_STRING D3J-JMM-1
7189: PPUSH
7190: CALL_OW 88
// wait ( 0 0$1 ) ;
7194: LD_INT 35
7196: PPUSH
7197: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7201: LD_EXP 1
7205: PPUSH
7206: LD_STRING D4-JMM-1
7208: PPUSH
7209: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D4-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D4-JMM-2
7232: PPUSH
7233: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7237: LD_EXP 4
7241: PPUSH
7242: LD_STRING D4-Con-2
7244: PPUSH
7245: CALL_OW 88
// DialogueOff ;
7249: CALL_OW 7
// InGameOff ;
7253: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7257: LD_STRING M2X
7259: PPUSH
7260: CALL_OW 337
// SaveForQuickRestart ;
7264: CALL_OW 22
// russianAI = 1 ;
7268: LD_ADDR_EXP 13
7272: PUSH
7273: LD_INT 1
7275: ST_TO_ADDR
// end ; end ;
7276: GO 7279
7278: POP
// end ;
7279: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7280: LD_INT 32
7282: PPUSH
7283: CALL_OW 306
7287: IFFALSE 7620
7289: GO 7291
7291: DISABLE
// begin case JMMGirl of 1 :
7292: LD_EXP 7
7296: PUSH
7297: LD_INT 1
7299: DOUBLE
7300: EQUAL
7301: IFTRUE 7305
7303: GO 7427
7305: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7306: LD_EXP 1
7310: PPUSH
7311: LD_STRING D6J-JMM-1
7313: PPUSH
7314: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7318: LD_STRING 13f_Denis
7320: PPUSH
7321: CALL_OW 28
7325: PUSH
7326: LD_INT 1
7328: EQUAL
7329: PUSH
7330: LD_STRING 13s_Denis
7332: PPUSH
7333: CALL_OW 28
7337: PUSH
7338: LD_INT 1
7340: EQUAL
7341: OR
7342: IFFALSE 7382
// begin Say ( Joan , D6J-Joan-1 ) ;
7344: LD_EXP 2
7348: PPUSH
7349: LD_STRING D6J-Joan-1
7351: PPUSH
7352: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7356: LD_EXP 1
7360: PPUSH
7361: LD_STRING D6J-JMM-2
7363: PPUSH
7364: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7368: LD_EXP 2
7372: PPUSH
7373: LD_STRING D6J-Joan-2
7375: PPUSH
7376: CALL_OW 88
// end else
7380: GO 7394
// begin Say ( Joan , D6J-Joan-2a ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D6J-Joan-2a
7389: PPUSH
7390: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D6J-JMM-3
7401: PPUSH
7402: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7406: LD_EXP 2
7410: PPUSH
7411: LD_STRING D6J-Joan-3
7413: PPUSH
7414: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7418: LD_STRING M3
7420: PPUSH
7421: CALL_OW 337
// end ; 2 :
7425: GO 7620
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7493
7435: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7436: LD_EXP 1
7440: PPUSH
7441: LD_STRING D6L-JMM-1
7443: PPUSH
7444: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7448: LD_EXP 3
7452: PPUSH
7453: LD_STRING D6L-Lisa-1
7455: PPUSH
7456: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7460: LD_EXP 1
7464: PPUSH
7465: LD_STRING D6L-JMM-2
7467: PPUSH
7468: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7472: LD_EXP 3
7476: PPUSH
7477: LD_STRING D6L-Lisa-2
7479: PPUSH
7480: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7484: LD_STRING M3
7486: PPUSH
7487: CALL_OW 337
// end ; 3 :
7491: GO 7620
7493: LD_INT 3
7495: DOUBLE
7496: EQUAL
7497: IFTRUE 7501
7499: GO 7619
7501: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7502: LD_EXP 1
7506: PPUSH
7507: LD_STRING D6X-JMM-1
7509: PPUSH
7510: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7514: LD_EXP 4
7518: PPUSH
7519: LD_STRING D6X-Con-1
7521: PPUSH
7522: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7526: LD_EXP 1
7530: PPUSH
7531: LD_STRING D6X-JMM-2
7533: PPUSH
7534: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7538: LD_EXP 4
7542: PPUSH
7543: LD_STRING D6X-Con-2
7545: PPUSH
7546: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7550: LD_EXP 1
7554: PPUSH
7555: LD_STRING D6X-JMM-3
7557: PPUSH
7558: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7562: LD_EXP 4
7566: PPUSH
7567: LD_STRING D6X-Con-3
7569: PPUSH
7570: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7574: LD_EXP 1
7578: PPUSH
7579: LD_STRING D6X-JMM-4
7581: PPUSH
7582: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7586: LD_EXP 4
7590: PPUSH
7591: LD_STRING D6X-Con-4
7593: PPUSH
7594: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7598: LD_EXP 1
7602: PPUSH
7603: LD_STRING D6X-JMM-5
7605: PPUSH
7606: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7610: LD_STRING M3
7612: PPUSH
7613: CALL_OW 337
// end ; end ;
7617: GO 7620
7619: POP
// end ;
7620: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7621: LD_INT 22
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 33
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PPUSH
7650: CALL_OW 306
7654: IFFALSE 7800
7656: GO 7658
7658: DISABLE
// begin case JMMGirl of 1 :
7659: LD_EXP 7
7663: PUSH
7664: LD_INT 1
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7709
7672: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D5-JMM-1
7680: PPUSH
7681: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7685: LD_INT 77
7687: PPUSH
7688: LD_INT 87
7690: PPUSH
7691: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7695: LD_EXP 2
7699: PPUSH
7700: LD_STRING D5-Joan-1
7702: PPUSH
7703: CALL_OW 88
// end ; 2 :
7707: GO 7800
7709: LD_INT 2
7711: DOUBLE
7712: EQUAL
7713: IFTRUE 7717
7715: GO 7754
7717: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7718: LD_EXP 1
7722: PPUSH
7723: LD_STRING D5-JMM-1
7725: PPUSH
7726: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7730: LD_INT 77
7732: PPUSH
7733: LD_INT 87
7735: PPUSH
7736: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7740: LD_EXP 3
7744: PPUSH
7745: LD_STRING D5-Lisa-1
7747: PPUSH
7748: CALL_OW 88
// end ; 3 :
7752: GO 7800
7754: LD_INT 3
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7799
7762: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D5-JMM-1
7770: PPUSH
7771: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7775: LD_INT 77
7777: PPUSH
7778: LD_INT 87
7780: PPUSH
7781: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7785: LD_EXP 4
7789: PPUSH
7790: LD_STRING D5-Con-1
7792: PPUSH
7793: CALL_OW 88
// end ; end ;
7797: GO 7800
7799: POP
// end ;
7800: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7801: LD_INT 48
7803: PPUSH
7804: CALL_OW 255
7808: PUSH
7809: LD_INT 1
7811: EQUAL
7812: IFFALSE 7909
7814: GO 7816
7816: DISABLE
// begin DialogueOn ;
7817: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7821: LD_EXP 5
7825: PPUSH
7826: LD_STRING D7-Pow-1
7828: PPUSH
7829: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7833: LD_EXP 1
7837: PPUSH
7838: LD_STRING D7-JMM-1
7840: PPUSH
7841: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7845: LD_EXP 5
7849: PPUSH
7850: LD_STRING D7-Pow-2
7852: PPUSH
7853: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7857: LD_EXP 1
7861: PPUSH
7862: LD_STRING D7-JMM-2
7864: PPUSH
7865: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7869: LD_EXP 5
7873: PPUSH
7874: LD_STRING D7-Pow-3
7876: PPUSH
7877: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7881: LD_EXP 1
7885: PPUSH
7886: LD_STRING D7-JMM-3
7888: PPUSH
7889: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7893: LD_EXP 5
7897: PPUSH
7898: LD_STRING D7-Pow-4
7900: PPUSH
7901: CALL_OW 94
// DialogueOff ;
7905: CALL_OW 7
// end ; end_of_file
7909: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 255
7919: PUSH
7920: LD_INT 3
7922: EQUAL
7923: IFFALSE 7997
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7925: LD_ADDR_EXP 10
7929: PUSH
7930: LD_EXP 10
7934: PPUSH
7935: LD_INT 1
7937: PPUSH
7938: CALL_OW 3
7942: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7943: LD_ADDR_EXP 10
7947: PUSH
7948: LD_EXP 10
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 3
7960: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7961: LD_ADDR_EXP 10
7965: PUSH
7966: LD_EXP 10
7970: PPUSH
7971: LD_INT 1
7973: PPUSH
7974: CALL_OW 3
7978: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7979: LD_ADDR_EXP 10
7983: PUSH
7984: LD_EXP 10
7988: PPUSH
7989: LD_INT 1
7991: PPUSH
7992: CALL_OW 3
7996: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7997: LD_VAR 0 1
8001: PPUSH
8002: CALL_OW 255
8006: PUSH
8007: LD_INT 3
8009: EQUAL
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 266
8020: PUSH
8021: LD_INT 0
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 266
8034: PUSH
8035: LD_INT 2
8037: EQUAL
8038: OR
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 266
8049: PUSH
8050: LD_INT 4
8052: EQUAL
8053: OR
8054: PUSH
8055: EMPTY
8056: LIST
8057: AND
8058: IFFALSE 8069
// ComUpgrade ( building ) ;
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 255
8078: PUSH
8079: LD_INT 3
8081: EQUAL
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 32
8095: EQUAL
8096: AND
8097: IFFALSE 8138
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8099: LD_VAR 0 1
8103: PPUSH
8104: LD_INT 42
8106: PUSH
8107: LD_INT 43
8109: PUSH
8110: LD_INT 44
8112: PUSH
8113: LD_INT 46
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 1
8124: PPUSH
8125: LD_INT 4
8127: PPUSH
8128: CALL_OW 12
8132: ARRAY
8133: PPUSH
8134: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 255
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: PUSH
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 266
8161: PUSH
8162: LD_INT 33
8164: EQUAL
8165: AND
8166: IFFALSE 8207
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 42
8175: PUSH
8176: LD_INT 43
8178: PUSH
8179: LD_INT 44
8181: PUSH
8182: LD_INT 46
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_INT 4
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: CALL_OW 208
// end ;
8207: PPOPN 1
8209: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 255
8219: PUSH
8220: LD_INT 3
8222: EQUAL
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 247
8233: PUSH
8234: LD_INT 3
8236: EQUAL
8237: AND
8238: IFFALSE 8930
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: PUSH
8250: LD_INT 31
8252: EQUAL
8253: PUSH
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL_OW 266
8263: PUSH
8264: LD_INT 32
8266: EQUAL
8267: OR
8268: PUSH
8269: LD_VAR 0 1
8273: PPUSH
8274: CALL_OW 266
8278: PUSH
8279: LD_INT 36
8281: EQUAL
8282: OR
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 266
8293: PUSH
8294: LD_INT 0
8296: EQUAL
8297: OR
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 266
8308: PUSH
8309: LD_INT 24
8311: EQUAL
8312: OR
8313: PUSH
8314: LD_VAR 0 1
8318: PPUSH
8319: CALL_OW 266
8323: PUSH
8324: LD_INT 17
8326: EQUAL
8327: OR
8328: PUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 266
8338: PUSH
8339: LD_INT 25
8341: EQUAL
8342: OR
8343: PUSH
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 266
8353: PUSH
8354: LD_INT 19
8356: EQUAL
8357: OR
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 266
8368: PUSH
8369: LD_INT 20
8371: EQUAL
8372: OR
8373: PUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 266
8383: PUSH
8384: LD_INT 18
8386: EQUAL
8387: OR
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 266
8398: PUSH
8399: LD_INT 21
8401: EQUAL
8402: OR
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 266
8413: PUSH
8414: LD_INT 23
8416: EQUAL
8417: OR
8418: PUSH
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL_OW 266
8428: PUSH
8429: LD_INT 16
8431: EQUAL
8432: OR
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 266
8443: PUSH
8444: LD_INT 6
8446: EQUAL
8447: OR
8448: PUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: CALL_OW 266
8458: PUSH
8459: LD_INT 29
8461: EQUAL
8462: OR
8463: PUSH
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 266
8473: PUSH
8474: LD_INT 26
8476: EQUAL
8477: OR
8478: PUSH
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 266
8488: PUSH
8489: LD_INT 30
8491: EQUAL
8492: OR
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 266
8503: PUSH
8504: LD_INT 28
8506: EQUAL
8507: OR
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 266
8518: PUSH
8519: LD_INT 27
8521: EQUAL
8522: OR
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 266
8533: PUSH
8534: LD_INT 33
8536: EQUAL
8537: OR
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 2
8551: EQUAL
8552: OR
8553: PUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: CALL_OW 266
8563: PUSH
8564: LD_INT 4
8566: EQUAL
8567: OR
8568: IFFALSE 8654
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8570: LD_ADDR_EXP 10
8574: PUSH
8575: LD_EXP 10
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 266
8589: ADD
8590: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8591: LD_ADDR_EXP 10
8595: PUSH
8596: LD_EXP 10
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 250
8610: ADD
8611: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8612: LD_ADDR_EXP 10
8616: PUSH
8617: LD_EXP 10
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 251
8631: ADD
8632: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8633: LD_ADDR_EXP 10
8637: PUSH
8638: LD_EXP 10
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 254
8652: ADD
8653: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 266
8663: PUSH
8664: LD_INT 1
8666: EQUAL
8667: IFFALSE 8746
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8669: LD_ADDR_EXP 10
8673: PUSH
8674: LD_EXP 10
8678: PUSH
8679: LD_INT 0
8681: ADD
8682: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8683: LD_ADDR_EXP 10
8687: PUSH
8688: LD_EXP 10
8692: PUSH
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 250
8702: ADD
8703: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8704: LD_ADDR_EXP 10
8708: PUSH
8709: LD_EXP 10
8713: PUSH
8714: LD_VAR 0 1
8718: PPUSH
8719: CALL_OW 251
8723: ADD
8724: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8725: LD_ADDR_EXP 10
8729: PUSH
8730: LD_EXP 10
8734: PUSH
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 254
8744: ADD
8745: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 266
8755: PUSH
8756: LD_INT 3
8758: EQUAL
8759: IFFALSE 8838
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8761: LD_ADDR_EXP 10
8765: PUSH
8766: LD_EXP 10
8770: PUSH
8771: LD_INT 2
8773: ADD
8774: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8775: LD_ADDR_EXP 10
8779: PUSH
8780: LD_EXP 10
8784: PUSH
8785: LD_VAR 0 1
8789: PPUSH
8790: CALL_OW 250
8794: ADD
8795: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8796: LD_ADDR_EXP 10
8800: PUSH
8801: LD_EXP 10
8805: PUSH
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 251
8815: ADD
8816: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8817: LD_ADDR_EXP 10
8821: PUSH
8822: LD_EXP 10
8826: PUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 254
8836: ADD
8837: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 266
8847: PUSH
8848: LD_INT 5
8850: EQUAL
8851: IFFALSE 8930
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8853: LD_ADDR_EXP 10
8857: PUSH
8858: LD_EXP 10
8862: PUSH
8863: LD_INT 4
8865: ADD
8866: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8867: LD_ADDR_EXP 10
8871: PUSH
8872: LD_EXP 10
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 250
8886: ADD
8887: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8888: LD_ADDR_EXP 10
8892: PUSH
8893: LD_EXP 10
8897: PUSH
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 251
8907: ADD
8908: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8909: LD_ADDR_EXP 10
8913: PUSH
8914: LD_EXP 10
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 254
8928: ADD
8929: ST_TO_ADDR
// end ; end ; end ;
8930: PPOPN 1
8932: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8933: LD_VAR 0 3
8937: PPUSH
8938: CALL_OW 264
8942: PUSH
8943: LD_INT 10
8945: EQUAL
8946: IFFALSE 8962
// destroyCounter := destroyCounter + 1 ;
8948: LD_ADDR_EXP 17
8952: PUSH
8953: LD_EXP 17
8957: PUSH
8958: LD_INT 1
8960: PLUS
8961: ST_TO_ADDR
// end ;
8962: PPOPN 3
8964: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8965: LD_VAR 0 2
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 2
8978: PUSH
8979: LD_INT 40
8981: EQUAL
8982: OR
8983: IFFALSE 9107
// if GetSide ( vehicle ) = 3 then
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 255
8994: PUSH
8995: LD_INT 3
8997: EQUAL
8998: IFFALSE 9107
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 264
9009: PUSH
9010: LD_INT 47
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 264
9023: PUSH
9024: LD_INT 46
9026: EQUAL
9027: OR
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 264
9038: PUSH
9039: LD_INT 45
9041: EQUAL
9042: OR
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 264
9053: PUSH
9054: LD_INT 44
9056: EQUAL
9057: OR
9058: IFFALSE 9076
// russianTanks = russianTanks ^ vehicle ;
9060: LD_ADDR_EXP 11
9064: PUSH
9065: LD_EXP 11
9069: PUSH
9070: LD_VAR 0 1
9074: ADD
9075: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 264
9085: PUSH
9086: LD_INT 49
9088: EQUAL
9089: IFFALSE 9107
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
9091: LD_ADDR_EXP 12
9095: PUSH
9096: LD_EXP 12
9100: PUSH
9101: LD_VAR 0 1
9105: ADD
9106: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 255
9116: PUSH
9117: LD_INT 1
9119: EQUAL
9120: PUSH
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 264
9130: PUSH
9131: LD_INT 10
9133: EQUAL
9134: AND
9135: IFFALSE 9151
// amLaserCounter = amLaserCounter + 1 ;
9137: LD_ADDR_EXP 9
9141: PUSH
9142: LD_EXP 9
9146: PUSH
9147: LD_INT 1
9149: PLUS
9150: ST_TO_ADDR
// end ;
9151: PPOPN 2
9153: END
// on UnitGoesToRed ( unit ) do var i ;
9154: LD_INT 0
9156: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 3
9169: EQUAL
9170: PUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 247
9180: PUSH
9181: LD_INT 2
9183: EQUAL
9184: AND
9185: IFFALSE 9297
// begin if russianTanks > 0 then
9187: LD_EXP 11
9191: PUSH
9192: LD_INT 0
9194: GREATER
9195: IFFALSE 9242
// for i in russianTanks do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_EXP 11
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9240
// if i = unit then
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 1
9219: EQUAL
9220: IFFALSE 9238
// russianTanks = russianTanks diff unit ;
9222: LD_ADDR_EXP 11
9226: PUSH
9227: LD_EXP 11
9231: PUSH
9232: LD_VAR 0 1
9236: DIFF
9237: ST_TO_ADDR
9238: GO 9207
9240: POP
9241: POP
// if russianTimeLapsers > 0 then
9242: LD_EXP 12
9246: PUSH
9247: LD_INT 0
9249: GREATER
9250: IFFALSE 9297
// for i in russianTimeLapsers do
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: LD_EXP 12
9261: PUSH
9262: FOR_IN
9263: IFFALSE 9295
// if i = unit then
9265: LD_VAR 0 2
9269: PUSH
9270: LD_VAR 0 1
9274: EQUAL
9275: IFFALSE 9293
// russianTimeLapsers = russianTimeLapsers diff unit ;
9277: LD_ADDR_EXP 12
9281: PUSH
9282: LD_EXP 12
9286: PUSH
9287: LD_VAR 0 1
9291: DIFF
9292: ST_TO_ADDR
9293: GO 9262
9295: POP
9296: POP
// end ; end ;
9297: PPOPN 2
9299: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL 15872 0 1
// end ; end_of_file
9309: PPOPN 1
9311: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9312: LD_EXP 1
9316: PPUSH
9317: CALL_OW 310
9321: PPUSH
9322: LD_INT 12
9324: PPUSH
9325: CALL_OW 308
9329: PUSH
9330: LD_EXP 15
9334: PUSH
9335: LD_INT 0
9337: EQUAL
9338: AND
9339: IFFALSE 9685
9341: GO 9343
9343: DISABLE
9344: LD_INT 0
9346: PPUSH
9347: PPUSH
// begin enable ;
9348: ENABLE
// if JMMGirl = 1 then
9349: LD_EXP 7
9353: PUSH
9354: LD_INT 1
9356: EQUAL
9357: IFFALSE 9374
// JMMGirlVeh = IsInUnit ( Joan ) ;
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_EXP 2
9368: PPUSH
9369: CALL_OW 310
9373: ST_TO_ADDR
// if JMMGirl = 2 then
9374: LD_EXP 7
9378: PUSH
9379: LD_INT 2
9381: EQUAL
9382: IFFALSE 9399
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_EXP 3
9393: PPUSH
9394: CALL_OW 310
9398: ST_TO_ADDR
// if JMMGirl = 3 then
9399: LD_EXP 7
9403: PUSH
9404: LD_INT 3
9406: EQUAL
9407: IFFALSE 9424
// JMMGirlVeh = IsInUnit ( Connie ) ;
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_EXP 4
9418: PPUSH
9419: CALL_OW 310
9423: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9424: LD_EXP 1
9428: PPUSH
9429: CALL_OW 310
9433: PPUSH
9434: LD_EXP 2
9438: PPUSH
9439: CALL_OW 310
9443: PPUSH
9444: CALL_OW 296
9448: PUSH
9449: LD_INT 10
9451: LESS
9452: PUSH
9453: LD_EXP 1
9457: PPUSH
9458: CALL_OW 310
9462: PPUSH
9463: LD_EXP 3
9467: PPUSH
9468: CALL_OW 310
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 10
9480: LESS
9481: OR
9482: PUSH
9483: LD_EXP 1
9487: PPUSH
9488: CALL_OW 310
9492: PPUSH
9493: LD_EXP 4
9497: PPUSH
9498: CALL_OW 310
9502: PPUSH
9503: CALL_OW 296
9507: PUSH
9508: LD_INT 10
9510: LESS
9511: OR
9512: IFFALSE 9606
// begin case Query ( Q3b ) of 1 :
9514: LD_STRING Q3b
9516: PPUSH
9517: CALL_OW 97
9521: PUSH
9522: LD_INT 1
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9603
9530: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9531: LD_VAR 0 1
9535: PPUSH
9536: CALL_OW 265
9540: PUSH
9541: EMPTY
9542: LIST
9543: PUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 262
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 263
9566: PUSH
9567: EMPTY
9568: LIST
9569: PUSH
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 264
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: PPUSH
9589: LD_STRING 14_JMMGirlVeh_1
9591: PPUSH
9592: CALL_OW 39
// FinishMission ;
9596: CALL 9826 0 0
// disable ;
9600: DISABLE
// end ; end ;
9601: GO 9604
9603: POP
// end else
9604: GO 9685
// begin if JMMGirl = 1 then
9606: LD_EXP 7
9610: PUSH
9611: LD_INT 1
9613: EQUAL
9614: IFFALSE 9631
// dec := Query ( Q3bJ ) else
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_STRING Q3bJ
9623: PPUSH
9624: CALL_OW 97
9628: ST_TO_ADDR
9629: GO 9669
// if JMMGirl = 2 then
9631: LD_EXP 7
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: IFFALSE 9656
// dec := Query ( Q3bL ) else
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: LD_STRING Q3bL
9648: PPUSH
9649: CALL_OW 97
9653: ST_TO_ADDR
9654: GO 9669
// dec := Query ( Q3bX ) ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_STRING Q3bX
9663: PPUSH
9664: CALL_OW 97
9668: ST_TO_ADDR
// if dec = 1 then
9669: LD_VAR 0 2
9673: PUSH
9674: LD_INT 1
9676: EQUAL
9677: IFFALSE 9685
// begin FinishMission ;
9679: CALL 9826 0 0
// exit ;
9683: GO 9685
// end ; end ; end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9688: LD_INT 22
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 0
9719: EQUAL
9720: PUSH
9721: LD_EXP 15
9725: PUSH
9726: LD_INT 0
9728: EQUAL
9729: AND
9730: IFFALSE 9825
9732: GO 9734
9734: DISABLE
// begin DialogueOn ;
9735: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9739: LD_EXP 1
9743: PPUSH
9744: LD_STRING DEnd-JMM-1
9746: PPUSH
9747: CALL_OW 88
// if JMMGirl = 1 then
9751: LD_EXP 7
9755: PUSH
9756: LD_INT 1
9758: EQUAL
9759: IFFALSE 9773
// Say ( Joan , DEnd-Joan-1 ) ;
9761: LD_EXP 2
9765: PPUSH
9766: LD_STRING DEnd-Joan-1
9768: PPUSH
9769: CALL_OW 88
// if JMMGirl = 2 then
9773: LD_EXP 7
9777: PUSH
9778: LD_INT 2
9780: EQUAL
9781: IFFALSE 9795
// Say ( Lisa , DEnd-Lisa-1 ) ;
9783: LD_EXP 3
9787: PPUSH
9788: LD_STRING DEnd-Lisa-1
9790: PPUSH
9791: CALL_OW 88
// if JMMGirl = 3 then
9795: LD_EXP 7
9799: PUSH
9800: LD_INT 3
9802: EQUAL
9803: IFFALSE 9817
// Say ( Connie , DEnd-Con-1 ) ;
9805: LD_EXP 4
9809: PPUSH
9810: LD_STRING DEnd-Con-1
9812: PPUSH
9813: CALL_OW 88
// DialogueOff ;
9817: CALL_OW 7
// FinishMission ;
9821: CALL 9826 0 0
// end ;
9825: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
// m1 := false ;
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_INT 0
9840: ST_TO_ADDR
// m2 := false ;
9841: LD_ADDR_VAR 0 4
9845: PUSH
9846: LD_INT 0
9848: ST_TO_ADDR
// m3 := false ;
9849: LD_ADDR_VAR 0 5
9853: PUSH
9854: LD_INT 0
9856: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9857: LD_EXP 1
9861: PPUSH
9862: LD_STRING 14_JMM
9864: PPUSH
9865: CALL_OW 38
// if tick <= 50 50$00 then
9869: LD_OWVAR 1
9873: PUSH
9874: LD_INT 105000
9876: LESSEQUAL
9877: IFFALSE 9886
// SetAchievement ( ACH_ASPEED_14 ) ;
9879: LD_STRING ACH_ASPEED_14
9881: PPUSH
9882: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9886: LD_EXP 1
9890: PPUSH
9891: CALL_OW 310
9895: PUSH
9896: LD_EXP 1
9900: PPUSH
9901: CALL_OW 310
9905: PPUSH
9906: CALL_OW 247
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: AND
9915: IFFALSE 9997
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_EXP 1
9926: PPUSH
9927: CALL_OW 310
9931: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9932: LD_VAR 0 2
9936: PPUSH
9937: CALL_OW 265
9941: PUSH
9942: EMPTY
9943: LIST
9944: PUSH
9945: LD_VAR 0 2
9949: PPUSH
9950: CALL_OW 262
9954: PUSH
9955: EMPTY
9956: LIST
9957: PUSH
9958: LD_VAR 0 2
9962: PPUSH
9963: CALL_OW 263
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_VAR 0 2
9975: PPUSH
9976: CALL_OW 264
9980: PUSH
9981: EMPTY
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PPUSH
9990: LD_STRING 14_JMMVeh_1
9992: PPUSH
9993: CALL_OW 39
// end ; if fastEnd = 1 then
9997: LD_EXP 15
10001: PUSH
10002: LD_INT 1
10004: EQUAL
10005: IFFALSE 10094
// begin AddMedal ( fastend , - 1 ) ;
10007: LD_STRING fastend
10009: PPUSH
10010: LD_INT 1
10012: NEG
10013: PPUSH
10014: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10018: LD_STRING fastend
10020: PPUSH
10021: LD_INT 1
10023: NEG
10024: PPUSH
10025: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10029: LD_STRING fastend
10031: PPUSH
10032: LD_INT 1
10034: NEG
10035: PPUSH
10036: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10040: LD_EXP 7
10044: PPUSH
10045: LD_STRING 14_JMMGirl_1
10047: PPUSH
10048: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10052: LD_INT 0
10054: PPUSH
10055: LD_STRING 14_JMMGirlStatus_1
10057: PPUSH
10058: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10062: LD_INT 0
10064: PPUSH
10065: LD_STRING 14_KappaStatus_1
10067: PPUSH
10068: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10072: LD_STRING Eliminate
10074: PPUSH
10075: CALL_OW 102
// RewardPeople ( JMM ) ;
10079: LD_EXP 1
10083: PPUSH
10084: CALL_OW 43
// YouWin ;
10088: CALL_OW 103
// exit ;
10092: GO 10919
// end ; if fastEnd = 0 then
10094: LD_EXP 15
10098: PUSH
10099: LD_INT 0
10101: EQUAL
10102: IFFALSE 10812
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10104: LD_EXP 7
10108: PPUSH
10109: LD_STRING 14_JMMGirl_1
10111: PPUSH
10112: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
10116: LD_INT 22
10118: PUSH
10119: LD_INT 3
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: PUSH
10145: LD_INT 0
10147: EQUAL
10148: PUSH
10149: LD_INT 48
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 1
10159: EQUAL
10160: AND
10161: IFFALSE 10175
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
10163: LD_INT 1
10165: PPUSH
10166: LD_STRING 14_KappaStatus_1
10168: PPUSH
10169: CALL_OW 39
10173: GO 10185
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10175: LD_INT 0
10177: PPUSH
10178: LD_STRING 14_KappaStatus_1
10180: PPUSH
10181: CALL_OW 39
// case JMMGirl of 1 :
10185: LD_EXP 7
10189: PUSH
10190: LD_INT 1
10192: DOUBLE
10193: EQUAL
10194: IFTRUE 10198
10196: GO 10354
10198: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10199: LD_EXP 2
10203: PPUSH
10204: CALL_OW 302
10208: PUSH
10209: LD_EXP 2
10213: PPUSH
10214: CALL_OW 255
10218: PUSH
10219: LD_INT 1
10221: EQUAL
10222: AND
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 3
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 21
10236: PUSH
10237: LD_INT 1
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PPUSH
10248: CALL_OW 69
10252: PUSH
10253: LD_INT 0
10255: EQUAL
10256: PUSH
10257: LD_EXP 1
10261: PPUSH
10262: CALL_OW 310
10266: PPUSH
10267: LD_EXP 2
10271: PPUSH
10272: CALL_OW 310
10276: PPUSH
10277: CALL_OW 296
10281: PUSH
10282: LD_INT 10
10284: LESS
10285: OR
10286: AND
10287: IFFALSE 10331
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10289: LD_INT 1
10291: PPUSH
10292: LD_STRING 14_JMMGirlStatus_1
10294: PPUSH
10295: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10299: LD_EXP 2
10303: PPUSH
10304: LD_STRING 14_Joan
10306: PPUSH
10307: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10311: LD_STRING protect
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 101
// m1 := true ;
10321: LD_ADDR_VAR 0 3
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// end else
10329: GO 10352
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10331: LD_INT 0
10333: PPUSH
10334: LD_STRING 14_JMMGirlStatus_1
10336: PPUSH
10337: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10341: LD_STRING protect
10343: PPUSH
10344: LD_INT 1
10346: NEG
10347: PPUSH
10348: CALL_OW 101
// end ; end ; 2 :
10352: GO 10683
10354: LD_INT 2
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10518
10362: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10363: LD_EXP 3
10367: PPUSH
10368: CALL_OW 302
10372: PUSH
10373: LD_EXP 3
10377: PPUSH
10378: CALL_OW 255
10382: PUSH
10383: LD_INT 1
10385: EQUAL
10386: AND
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: PUSH
10421: LD_EXP 1
10425: PPUSH
10426: CALL_OW 310
10430: PPUSH
10431: LD_EXP 3
10435: PPUSH
10436: CALL_OW 310
10440: PPUSH
10441: CALL_OW 296
10445: PUSH
10446: LD_INT 10
10448: LESS
10449: OR
10450: AND
10451: IFFALSE 10495
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10453: LD_INT 1
10455: PPUSH
10456: LD_STRING 14_JMMGirlStatus_1
10458: PPUSH
10459: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10463: LD_EXP 3
10467: PPUSH
10468: LD_STRING 14_Lisa
10470: PPUSH
10471: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10475: LD_STRING protect
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 101
// m1 := true ;
10485: LD_ADDR_VAR 0 3
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end else
10493: GO 10516
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10495: LD_INT 0
10497: PPUSH
10498: LD_STRING 14_JMMGirlStatus_1
10500: PPUSH
10501: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10505: LD_STRING protect
10507: PPUSH
10508: LD_INT 2
10510: NEG
10511: PPUSH
10512: CALL_OW 101
// end ; end ; 3 :
10516: GO 10683
10518: LD_INT 3
10520: DOUBLE
10521: EQUAL
10522: IFTRUE 10526
10524: GO 10682
10526: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10527: LD_EXP 4
10531: PPUSH
10532: CALL_OW 302
10536: PUSH
10537: LD_EXP 4
10541: PPUSH
10542: CALL_OW 255
10546: PUSH
10547: LD_INT 1
10549: EQUAL
10550: AND
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: PUSH
10581: LD_INT 0
10583: EQUAL
10584: PUSH
10585: LD_EXP 1
10589: PPUSH
10590: CALL_OW 310
10594: PPUSH
10595: LD_EXP 4
10599: PPUSH
10600: CALL_OW 310
10604: PPUSH
10605: CALL_OW 296
10609: PUSH
10610: LD_INT 10
10612: LESS
10613: OR
10614: AND
10615: IFFALSE 10659
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10617: LD_INT 1
10619: PPUSH
10620: LD_STRING 14_JMMGirlStatus_1
10622: PPUSH
10623: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10627: LD_EXP 4
10631: PPUSH
10632: LD_STRING 14_Connie
10634: PPUSH
10635: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10639: LD_STRING protect
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 101
// m1 := true ;
10649: LD_ADDR_VAR 0 3
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// end else
10657: GO 10680
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10659: LD_INT 0
10661: PPUSH
10662: LD_STRING 14_JMMGirlStatus_1
10664: PPUSH
10665: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10669: LD_STRING protect
10671: PPUSH
10672: LD_INT 3
10674: NEG
10675: PPUSH
10676: CALL_OW 101
// end ; end ; end ;
10680: GO 10683
10682: POP
// if amLaserCounter >= 2 then
10683: LD_EXP 9
10687: PUSH
10688: LD_INT 2
10690: GREATEREQUAL
10691: IFFALSE 10713
// begin AddMedal ( double , 1 ) ;
10693: LD_STRING double
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 101
// m2 := true ;
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// end else
10711: GO 10747
// begin if amLaserCounter = 1 then
10713: LD_EXP 9
10717: PUSH
10718: LD_INT 1
10720: EQUAL
10721: IFFALSE 10736
// AddMedal ( double , - 2 ) else
10723: LD_STRING double
10725: PPUSH
10726: LD_INT 2
10728: NEG
10729: PPUSH
10730: CALL_OW 101
10734: GO 10747
// AddMedal ( double , - 1 ) ;
10736: LD_STRING double
10738: PPUSH
10739: LD_INT 1
10741: NEG
10742: PPUSH
10743: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10747: LD_INT 22
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 21
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PUSH
10776: LD_INT 0
10778: EQUAL
10779: IFFALSE 10801
// begin AddMedal ( base , 1 ) ;
10781: LD_STRING base
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 101
// m3 := true ;
10791: LD_ADDR_VAR 0 5
10795: PUSH
10796: LD_INT 1
10798: ST_TO_ADDR
// end else
10799: GO 10812
// AddMedal ( base , - 1 ) ;
10801: LD_STRING base
10803: PPUSH
10804: LD_INT 1
10806: NEG
10807: PPUSH
10808: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_VAR 0 4
10821: AND
10822: PUSH
10823: LD_VAR 0 5
10827: AND
10828: PUSH
10829: LD_OWVAR 67
10833: PUSH
10834: LD_INT 3
10836: EQUAL
10837: AND
10838: IFFALSE 10850
// SetAchievementEX ( ACH_AMER , 14 ) ;
10840: LD_STRING ACH_AMER
10842: PPUSH
10843: LD_INT 14
10845: PPUSH
10846: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10850: LD_STRING Eliminate
10852: PPUSH
10853: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10857: LD_INT 22
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 3
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 12
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 25
10889: PUSH
10890: LD_INT 16
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: PPUSH
10911: CALL_OW 43
// YouWin ;
10915: CALL_OW 103
// end ; end_of_file
10919: LD_VAR 0 1
10923: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10924: LD_EXP 1
10928: PPUSH
10929: CALL_OW 301
10933: IFFALSE 10945
10935: GO 10937
10937: DISABLE
// YouLost ( JMM ) ; end_of_file
10938: LD_STRING JMM
10940: PPUSH
10941: CALL_OW 104
10945: END
// every 1 1$0 do
10946: GO 10948
10948: DISABLE
// begin enable ;
10949: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10950: LD_INT 3
10952: PPUSH
10953: LD_INT 5
10955: PPUSH
10956: CALL_OW 12
10960: PPUSH
10961: LD_INT 13
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 55
// end ; end_of_file
10971: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10972: GO 10974
10974: DISABLE
// begin ru_radar := 98 ;
10975: LD_ADDR_EXP 19
10979: PUSH
10980: LD_INT 98
10982: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10983: LD_ADDR_EXP 20
10987: PUSH
10988: LD_INT 89
10990: ST_TO_ADDR
// us_hack := 99 ;
10991: LD_ADDR_EXP 21
10995: PUSH
10996: LD_INT 99
10998: ST_TO_ADDR
// us_artillery := 97 ;
10999: LD_ADDR_EXP 22
11003: PUSH
11004: LD_INT 97
11006: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11007: LD_ADDR_EXP 23
11011: PUSH
11012: LD_INT 91
11014: ST_TO_ADDR
// end ; end_of_file end_of_file
11015: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
11016: GO 11018
11018: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11019: LD_STRING initStreamRollete();
11021: PPUSH
11022: CALL_OW 559
// InitStreamMode ;
11026: CALL 11031 0 0
// end ;
11030: END
// function InitStreamMode ; begin
11031: LD_INT 0
11033: PPUSH
// streamModeActive := false ;
11034: LD_ADDR_EXP 24
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sRocket := false ;
11042: LD_ADDR_EXP 27
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sSpeed := false ;
11050: LD_ADDR_EXP 26
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sEngine := false ;
11058: LD_ADDR_EXP 28
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sSpec := false ;
11066: LD_ADDR_EXP 25
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sLevel := false ;
11074: LD_ADDR_EXP 29
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sArmoury := false ;
11082: LD_ADDR_EXP 30
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sRadar := false ;
11090: LD_ADDR_EXP 31
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sBunker := false ;
11098: LD_ADDR_EXP 32
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sHack := false ;
11106: LD_ADDR_EXP 33
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sFire := false ;
11114: LD_ADDR_EXP 34
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sRefresh := false ;
11122: LD_ADDR_EXP 35
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sExp := false ;
11130: LD_ADDR_EXP 36
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sDepot := false ;
11138: LD_ADDR_EXP 37
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sFlag := false ;
11146: LD_ADDR_EXP 38
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sKamikadze := false ;
11154: LD_ADDR_EXP 46
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sTroll := false ;
11162: LD_ADDR_EXP 47
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sSlow := false ;
11170: LD_ADDR_EXP 48
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// sLack := false ;
11178: LD_ADDR_EXP 49
11182: PUSH
11183: LD_INT 0
11185: ST_TO_ADDR
// sTank := false ;
11186: LD_ADDR_EXP 51
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// sRemote := false ;
11194: LD_ADDR_EXP 52
11198: PUSH
11199: LD_INT 0
11201: ST_TO_ADDR
// sPowell := false ;
11202: LD_ADDR_EXP 53
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// sTeleport := false ;
11210: LD_ADDR_EXP 56
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// sOilTower := false ;
11218: LD_ADDR_EXP 58
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// sShovel := false ;
11226: LD_ADDR_EXP 59
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// sSheik := false ;
11234: LD_ADDR_EXP 60
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// sSold := false ;
11242: LD_ADDR_EXP 39
11246: PUSH
11247: LD_INT 0
11249: ST_TO_ADDR
// sDiff := false ;
11250: LD_ADDR_EXP 40
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// sFog := false ;
11258: LD_ADDR_EXP 43
11262: PUSH
11263: LD_INT 0
11265: ST_TO_ADDR
// sReset := false ;
11266: LD_ADDR_EXP 44
11270: PUSH
11271: LD_INT 0
11273: ST_TO_ADDR
// sSun := false ;
11274: LD_ADDR_EXP 45
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// sTiger := false ;
11282: LD_ADDR_EXP 41
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// sBomb := false ;
11290: LD_ADDR_EXP 42
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// sWound := false ;
11298: LD_ADDR_EXP 50
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// sBetray := false ;
11306: LD_ADDR_EXP 54
11310: PUSH
11311: LD_INT 0
11313: ST_TO_ADDR
// sContamin := false ;
11314: LD_ADDR_EXP 55
11318: PUSH
11319: LD_INT 0
11321: ST_TO_ADDR
// sOil := false ;
11322: LD_ADDR_EXP 57
11326: PUSH
11327: LD_INT 0
11329: ST_TO_ADDR
// sStu := false ;
11330: LD_ADDR_EXP 61
11334: PUSH
11335: LD_INT 0
11337: ST_TO_ADDR
// end ;
11338: LD_VAR 0 1
11342: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11343: LD_VAR 0 2
11347: PUSH
11348: LD_INT 100
11350: EQUAL
11351: IFFALSE 12048
// begin if not StreamModeActive then
11353: LD_EXP 24
11357: NOT
11358: IFFALSE 11368
// StreamModeActive := true ;
11360: LD_ADDR_EXP 24
11364: PUSH
11365: LD_INT 1
11367: ST_TO_ADDR
// if p3 = 0 then
11368: LD_VAR 0 3
11372: PUSH
11373: LD_INT 0
11375: EQUAL
11376: IFFALSE 11382
// InitStreamMode ;
11378: CALL 11031 0 0
// if p3 = 1 then
11382: LD_VAR 0 3
11386: PUSH
11387: LD_INT 1
11389: EQUAL
11390: IFFALSE 11400
// sRocket := true ;
11392: LD_ADDR_EXP 27
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// if p3 = 2 then
11400: LD_VAR 0 3
11404: PUSH
11405: LD_INT 2
11407: EQUAL
11408: IFFALSE 11418
// sSpeed := true ;
11410: LD_ADDR_EXP 26
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// if p3 = 3 then
11418: LD_VAR 0 3
11422: PUSH
11423: LD_INT 3
11425: EQUAL
11426: IFFALSE 11436
// sEngine := true ;
11428: LD_ADDR_EXP 28
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// if p3 = 4 then
11436: LD_VAR 0 3
11440: PUSH
11441: LD_INT 4
11443: EQUAL
11444: IFFALSE 11454
// sSpec := true ;
11446: LD_ADDR_EXP 25
11450: PUSH
11451: LD_INT 1
11453: ST_TO_ADDR
// if p3 = 5 then
11454: LD_VAR 0 3
11458: PUSH
11459: LD_INT 5
11461: EQUAL
11462: IFFALSE 11472
// sLevel := true ;
11464: LD_ADDR_EXP 29
11468: PUSH
11469: LD_INT 1
11471: ST_TO_ADDR
// if p3 = 6 then
11472: LD_VAR 0 3
11476: PUSH
11477: LD_INT 6
11479: EQUAL
11480: IFFALSE 11490
// sArmoury := true ;
11482: LD_ADDR_EXP 30
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
// if p3 = 7 then
11490: LD_VAR 0 3
11494: PUSH
11495: LD_INT 7
11497: EQUAL
11498: IFFALSE 11508
// sRadar := true ;
11500: LD_ADDR_EXP 31
11504: PUSH
11505: LD_INT 1
11507: ST_TO_ADDR
// if p3 = 8 then
11508: LD_VAR 0 3
11512: PUSH
11513: LD_INT 8
11515: EQUAL
11516: IFFALSE 11526
// sBunker := true ;
11518: LD_ADDR_EXP 32
11522: PUSH
11523: LD_INT 1
11525: ST_TO_ADDR
// if p3 = 9 then
11526: LD_VAR 0 3
11530: PUSH
11531: LD_INT 9
11533: EQUAL
11534: IFFALSE 11544
// sHack := true ;
11536: LD_ADDR_EXP 33
11540: PUSH
11541: LD_INT 1
11543: ST_TO_ADDR
// if p3 = 10 then
11544: LD_VAR 0 3
11548: PUSH
11549: LD_INT 10
11551: EQUAL
11552: IFFALSE 11562
// sFire := true ;
11554: LD_ADDR_EXP 34
11558: PUSH
11559: LD_INT 1
11561: ST_TO_ADDR
// if p3 = 11 then
11562: LD_VAR 0 3
11566: PUSH
11567: LD_INT 11
11569: EQUAL
11570: IFFALSE 11580
// sRefresh := true ;
11572: LD_ADDR_EXP 35
11576: PUSH
11577: LD_INT 1
11579: ST_TO_ADDR
// if p3 = 12 then
11580: LD_VAR 0 3
11584: PUSH
11585: LD_INT 12
11587: EQUAL
11588: IFFALSE 11598
// sExp := true ;
11590: LD_ADDR_EXP 36
11594: PUSH
11595: LD_INT 1
11597: ST_TO_ADDR
// if p3 = 13 then
11598: LD_VAR 0 3
11602: PUSH
11603: LD_INT 13
11605: EQUAL
11606: IFFALSE 11616
// sDepot := true ;
11608: LD_ADDR_EXP 37
11612: PUSH
11613: LD_INT 1
11615: ST_TO_ADDR
// if p3 = 14 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 14
11623: EQUAL
11624: IFFALSE 11634
// sFlag := true ;
11626: LD_ADDR_EXP 38
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 15 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 15
11641: EQUAL
11642: IFFALSE 11652
// sKamikadze := true ;
11644: LD_ADDR_EXP 46
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 16 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 16
11659: EQUAL
11660: IFFALSE 11670
// sTroll := true ;
11662: LD_ADDR_EXP 47
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 17 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 17
11677: EQUAL
11678: IFFALSE 11688
// sSlow := true ;
11680: LD_ADDR_EXP 48
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 18 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 18
11695: EQUAL
11696: IFFALSE 11706
// sLack := true ;
11698: LD_ADDR_EXP 49
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 19 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 19
11713: EQUAL
11714: IFFALSE 11724
// sTank := true ;
11716: LD_ADDR_EXP 51
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 20 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 20
11731: EQUAL
11732: IFFALSE 11742
// sRemote := true ;
11734: LD_ADDR_EXP 52
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 21 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 21
11749: EQUAL
11750: IFFALSE 11760
// sPowell := true ;
11752: LD_ADDR_EXP 53
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 22 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 22
11767: EQUAL
11768: IFFALSE 11778
// sTeleport := true ;
11770: LD_ADDR_EXP 56
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 23 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 23
11785: EQUAL
11786: IFFALSE 11796
// sOilTower := true ;
11788: LD_ADDR_EXP 58
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 24 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 24
11803: EQUAL
11804: IFFALSE 11814
// sShovel := true ;
11806: LD_ADDR_EXP 59
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 25 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 25
11821: EQUAL
11822: IFFALSE 11832
// sSheik := true ;
11824: LD_ADDR_EXP 60
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 101 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 101
11839: EQUAL
11840: IFFALSE 11850
// sSold := true ;
11842: LD_ADDR_EXP 39
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 102 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 102
11857: EQUAL
11858: IFFALSE 11868
// sDiff := true ;
11860: LD_ADDR_EXP 40
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 103 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 103
11875: EQUAL
11876: IFFALSE 11886
// sFog := true ;
11878: LD_ADDR_EXP 43
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 104 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 104
11893: EQUAL
11894: IFFALSE 11904
// sReset := true ;
11896: LD_ADDR_EXP 44
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 105 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 105
11911: EQUAL
11912: IFFALSE 11922
// sSun := true ;
11914: LD_ADDR_EXP 45
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 106 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 106
11929: EQUAL
11930: IFFALSE 11940
// sTiger := true ;
11932: LD_ADDR_EXP 41
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 107 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 107
11947: EQUAL
11948: IFFALSE 11958
// sBomb := true ;
11950: LD_ADDR_EXP 42
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 108 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 108
11965: EQUAL
11966: IFFALSE 11976
// sWound := true ;
11968: LD_ADDR_EXP 50
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 109 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 109
11983: EQUAL
11984: IFFALSE 11994
// sBetray := true ;
11986: LD_ADDR_EXP 54
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 110 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 110
12001: EQUAL
12002: IFFALSE 12012
// sContamin := true ;
12004: LD_ADDR_EXP 55
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 111 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 111
12019: EQUAL
12020: IFFALSE 12030
// sOil := true ;
12022: LD_ADDR_EXP 57
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 112 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 112
12037: EQUAL
12038: IFFALSE 12048
// sStu := true ;
12040: LD_ADDR_EXP 61
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// end ; end ;
12048: PPOPN 6
12050: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12051: LD_EXP 24
12055: PUSH
12056: LD_EXP 27
12060: AND
12061: IFFALSE 12185
12063: GO 12065
12065: DISABLE
12066: LD_INT 0
12068: PPUSH
12069: PPUSH
// begin enable ;
12070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_OWVAR 2
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 34
12093: PUSH
12094: LD_INT 7
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 34
12103: PUSH
12104: LD_INT 45
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 34
12113: PUSH
12114: LD_INT 28
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 34
12123: PUSH
12124: LD_INT 47
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 2
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12185
// for i in tmp do
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: LD_VAR 0 2
12165: PUSH
12166: FOR_IN
12167: IFFALSE 12183
// begin SetLives ( i , 0 ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_INT 0
12176: PPUSH
12177: CALL_OW 234
// end ;
12181: GO 12166
12183: POP
12184: POP
// end ;
12185: PPOPN 2
12187: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12188: LD_EXP 24
12192: PUSH
12193: LD_EXP 28
12197: AND
12198: IFFALSE 12279
12200: GO 12202
12202: DISABLE
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
// begin enable ;
12207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12208: LD_ADDR_VAR 0 2
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_OWVAR 2
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 32
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 69
12243: ST_TO_ADDR
// if not tmp then
12244: LD_VAR 0 2
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12279
// for i in tmp do
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_VAR 0 2
12262: PUSH
12263: FOR_IN
12264: IFFALSE 12277
// begin DestroyUnit ( i ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: CALL_OW 65
// end ;
12275: GO 12263
12277: POP
12278: POP
// end ;
12279: PPOPN 2
12281: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12282: LD_EXP 24
12286: PUSH
12287: LD_EXP 25
12291: AND
12292: IFFALSE 12385
12294: GO 12296
12296: DISABLE
12297: LD_INT 0
12299: PPUSH
// begin enable ;
12300: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12301: LD_ADDR_VAR 0 1
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_OWVAR 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: LD_INT 25
12323: PUSH
12324: LD_INT 5
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 9
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 8
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: PUSH
12366: FOR_IN
12367: IFFALSE 12383
// begin SetClass ( i , 1 ) ;
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 336
// end ;
12381: GO 12366
12383: POP
12384: POP
// end ;
12385: PPOPN 1
12387: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12388: LD_EXP 24
12392: PUSH
12393: LD_EXP 26
12397: AND
12398: PUSH
12399: LD_OWVAR 65
12403: PUSH
12404: LD_INT 7
12406: LESS
12407: AND
12408: IFFALSE 12422
12410: GO 12412
12412: DISABLE
// begin enable ;
12413: ENABLE
// game_speed := 7 ;
12414: LD_ADDR_OWVAR 65
12418: PUSH
12419: LD_INT 7
12421: ST_TO_ADDR
// end ;
12422: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12423: LD_EXP 24
12427: PUSH
12428: LD_EXP 29
12432: AND
12433: IFFALSE 12635
12435: GO 12437
12437: DISABLE
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: LD_INT 81
12450: PUSH
12451: LD_OWVAR 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 21
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// if not tmp then
12479: LD_VAR 0 3
12483: NOT
12484: IFFALSE 12488
// exit ;
12486: GO 12635
// if tmp > 5 then
12488: LD_VAR 0 3
12492: PUSH
12493: LD_INT 5
12495: GREATER
12496: IFFALSE 12508
// k := 5 else
12498: LD_ADDR_VAR 0 2
12502: PUSH
12503: LD_INT 5
12505: ST_TO_ADDR
12506: GO 12518
// k := tmp ;
12508: LD_ADDR_VAR 0 2
12512: PUSH
12513: LD_VAR 0 3
12517: ST_TO_ADDR
// for i := 1 to k do
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: DOUBLE
12524: LD_INT 1
12526: DEC
12527: ST_TO_ADDR
12528: LD_VAR 0 2
12532: PUSH
12533: FOR_TO
12534: IFFALSE 12633
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12536: LD_VAR 0 3
12540: PUSH
12541: LD_VAR 0 1
12545: ARRAY
12546: PPUSH
12547: LD_VAR 0 1
12551: PUSH
12552: LD_INT 4
12554: MOD
12555: PUSH
12556: LD_INT 1
12558: PLUS
12559: PPUSH
12560: CALL_OW 259
12564: PUSH
12565: LD_INT 10
12567: LESS
12568: IFFALSE 12631
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12570: LD_VAR 0 3
12574: PUSH
12575: LD_VAR 0 1
12579: ARRAY
12580: PPUSH
12581: LD_VAR 0 1
12585: PUSH
12586: LD_INT 4
12588: MOD
12589: PUSH
12590: LD_INT 1
12592: PLUS
12593: PPUSH
12594: LD_VAR 0 3
12598: PUSH
12599: LD_VAR 0 1
12603: ARRAY
12604: PPUSH
12605: LD_VAR 0 1
12609: PUSH
12610: LD_INT 4
12612: MOD
12613: PUSH
12614: LD_INT 1
12616: PLUS
12617: PPUSH
12618: CALL_OW 259
12622: PUSH
12623: LD_INT 1
12625: PLUS
12626: PPUSH
12627: CALL_OW 237
12631: GO 12533
12633: POP
12634: POP
// end ;
12635: PPOPN 3
12637: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12638: LD_EXP 24
12642: PUSH
12643: LD_EXP 30
12647: AND
12648: IFFALSE 12668
12650: GO 12652
12652: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12653: LD_INT 4
12655: PPUSH
12656: LD_OWVAR 2
12660: PPUSH
12661: LD_INT 0
12663: PPUSH
12664: CALL_OW 324
12668: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12669: LD_EXP 24
12673: PUSH
12674: LD_EXP 59
12678: AND
12679: IFFALSE 12699
12681: GO 12683
12683: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12684: LD_INT 19
12686: PPUSH
12687: LD_OWVAR 2
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 324
12699: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12700: LD_EXP 24
12704: PUSH
12705: LD_EXP 31
12709: AND
12710: IFFALSE 12809
12712: GO 12714
12714: DISABLE
12715: LD_INT 0
12717: PPUSH
12718: PPUSH
// begin enable ;
12719: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_OWVAR 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: LD_INT 34
12742: PUSH
12743: LD_INT 11
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 34
12752: PUSH
12753: LD_INT 30
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PPUSH
12769: CALL_OW 69
12773: ST_TO_ADDR
// if not tmp then
12774: LD_VAR 0 2
12778: NOT
12779: IFFALSE 12783
// exit ;
12781: GO 12809
// for i in tmp do
12783: LD_ADDR_VAR 0 1
12787: PUSH
12788: LD_VAR 0 2
12792: PUSH
12793: FOR_IN
12794: IFFALSE 12807
// begin DestroyUnit ( i ) ;
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 65
// end ;
12805: GO 12793
12807: POP
12808: POP
// end ;
12809: PPOPN 2
12811: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12812: LD_EXP 24
12816: PUSH
12817: LD_EXP 32
12821: AND
12822: IFFALSE 12842
12824: GO 12826
12826: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12827: LD_INT 32
12829: PPUSH
12830: LD_OWVAR 2
12834: PPUSH
12835: LD_INT 0
12837: PPUSH
12838: CALL_OW 324
12842: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12843: LD_EXP 24
12847: PUSH
12848: LD_EXP 33
12852: AND
12853: IFFALSE 13034
12855: GO 12857
12857: DISABLE
12858: LD_INT 0
12860: PPUSH
12861: PPUSH
12862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12863: LD_ADDR_VAR 0 2
12867: PUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 33
12882: PUSH
12883: LD_INT 3
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PPUSH
12894: CALL_OW 69
12898: ST_TO_ADDR
// if not tmp then
12899: LD_VAR 0 2
12903: NOT
12904: IFFALSE 12908
// exit ;
12906: GO 13034
// side := 0 ;
12908: LD_ADDR_VAR 0 3
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// for i := 1 to 8 do
12916: LD_ADDR_VAR 0 1
12920: PUSH
12921: DOUBLE
12922: LD_INT 1
12924: DEC
12925: ST_TO_ADDR
12926: LD_INT 8
12928: PUSH
12929: FOR_TO
12930: IFFALSE 12978
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12932: LD_OWVAR 2
12936: PUSH
12937: LD_VAR 0 1
12941: NONEQUAL
12942: PUSH
12943: LD_OWVAR 2
12947: PPUSH
12948: LD_VAR 0 1
12952: PPUSH
12953: CALL_OW 81
12957: PUSH
12958: LD_INT 2
12960: EQUAL
12961: AND
12962: IFFALSE 12976
// begin side := i ;
12964: LD_ADDR_VAR 0 3
12968: PUSH
12969: LD_VAR 0 1
12973: ST_TO_ADDR
// break ;
12974: GO 12978
// end ;
12976: GO 12929
12978: POP
12979: POP
// if not side then
12980: LD_VAR 0 3
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13034
// for i := 1 to tmp do
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: DOUBLE
12995: LD_INT 1
12997: DEC
12998: ST_TO_ADDR
12999: LD_VAR 0 2
13003: PUSH
13004: FOR_TO
13005: IFFALSE 13032
// if Prob ( 30 ) then
13007: LD_INT 30
13009: PPUSH
13010: CALL_OW 13
13014: IFFALSE 13030
// SetSide ( i , side ) ;
13016: LD_VAR 0 1
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: CALL_OW 235
13030: GO 13004
13032: POP
13033: POP
// end ;
13034: PPOPN 3
13036: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13037: LD_EXP 24
13041: PUSH
13042: LD_EXP 35
13046: AND
13047: IFFALSE 13166
13049: GO 13051
13051: DISABLE
13052: LD_INT 0
13054: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_INT 22
13062: PUSH
13063: LD_OWVAR 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 21
13074: PUSH
13075: LD_INT 1
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 3
13084: PUSH
13085: LD_INT 23
13087: PUSH
13088: LD_INT 0
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: PUSH
13109: FOR_IN
13110: IFFALSE 13164
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13112: LD_VAR 0 1
13116: PPUSH
13117: CALL_OW 257
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: LD_INT 2
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: IN
13140: IFFALSE 13162
// SetClass ( un , rand ( 1 , 4 ) ) ;
13142: LD_VAR 0 1
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 4
13152: PPUSH
13153: CALL_OW 12
13157: PPUSH
13158: CALL_OW 336
13162: GO 13109
13164: POP
13165: POP
// end ;
13166: PPOPN 1
13168: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13169: LD_EXP 24
13173: PUSH
13174: LD_EXP 34
13178: AND
13179: IFFALSE 13258
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_OWVAR 2
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 3
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 69
13222: ST_TO_ADDR
// if not tmp then
13223: LD_VAR 0 1
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13232: LD_VAR 0 1
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: PPUSH
13251: LD_INT 100
13253: PPUSH
13254: CALL_OW 234
// end ;
13258: PPOPN 1
13260: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13261: LD_EXP 24
13265: PUSH
13266: LD_EXP 36
13270: AND
13271: IFFALSE 13369
13273: GO 13275
13275: DISABLE
13276: LD_INT 0
13278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_OWVAR 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
// if not tmp then
13315: LD_VAR 0 1
13319: NOT
13320: IFFALSE 13324
// exit ;
13322: GO 13369
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13324: LD_VAR 0 1
13328: PUSH
13329: LD_INT 1
13331: PPUSH
13332: LD_VAR 0 1
13336: PPUSH
13337: CALL_OW 12
13341: ARRAY
13342: PPUSH
13343: LD_INT 1
13345: PPUSH
13346: LD_INT 4
13348: PPUSH
13349: CALL_OW 12
13353: PPUSH
13354: LD_INT 3000
13356: PPUSH
13357: LD_INT 9000
13359: PPUSH
13360: CALL_OW 12
13364: PPUSH
13365: CALL_OW 492
// end ;
13369: PPOPN 1
13371: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13372: LD_EXP 24
13376: PUSH
13377: LD_EXP 37
13381: AND
13382: IFFALSE 13402
13384: GO 13386
13386: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13387: LD_INT 1
13389: PPUSH
13390: LD_OWVAR 2
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 324
13402: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13403: LD_EXP 24
13407: PUSH
13408: LD_EXP 38
13412: AND
13413: IFFALSE 13496
13415: GO 13417
13417: DISABLE
13418: LD_INT 0
13420: PPUSH
13421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_OWVAR 2
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 21
13441: PUSH
13442: LD_INT 3
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: ST_TO_ADDR
// if not tmp then
13458: LD_VAR 0 2
13462: NOT
13463: IFFALSE 13467
// exit ;
13465: GO 13496
// for i in tmp do
13467: LD_ADDR_VAR 0 1
13471: PUSH
13472: LD_VAR 0 2
13476: PUSH
13477: FOR_IN
13478: IFFALSE 13494
// SetBLevel ( i , 10 ) ;
13480: LD_VAR 0 1
13484: PPUSH
13485: LD_INT 10
13487: PPUSH
13488: CALL_OW 241
13492: GO 13477
13494: POP
13495: POP
// end ;
13496: PPOPN 2
13498: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13499: LD_EXP 24
13503: PUSH
13504: LD_EXP 39
13508: AND
13509: IFFALSE 13620
13511: GO 13513
13513: DISABLE
13514: LD_INT 0
13516: PPUSH
13517: PPUSH
13518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_OWVAR 2
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 25
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: ST_TO_ADDR
// if not tmp then
13555: LD_VAR 0 3
13559: NOT
13560: IFFALSE 13564
// exit ;
13562: GO 13620
// un := tmp [ rand ( 1 , tmp ) ] ;
13564: LD_ADDR_VAR 0 2
13568: PUSH
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 1
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: CALL_OW 12
13586: ARRAY
13587: ST_TO_ADDR
// if Crawls ( un ) then
13588: LD_VAR 0 2
13592: PPUSH
13593: CALL_OW 318
13597: IFFALSE 13608
// ComWalk ( un ) ;
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13608: LD_VAR 0 2
13612: PPUSH
13613: LD_INT 5
13615: PPUSH
13616: CALL_OW 336
// end ;
13620: PPOPN 3
13622: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13623: LD_EXP 24
13627: PUSH
13628: LD_EXP 40
13632: AND
13633: PUSH
13634: LD_OWVAR 67
13638: PUSH
13639: LD_INT 3
13641: LESS
13642: AND
13643: IFFALSE 13662
13645: GO 13647
13647: DISABLE
// Difficulty := Difficulty + 1 ;
13648: LD_ADDR_OWVAR 67
13652: PUSH
13653: LD_OWVAR 67
13657: PUSH
13658: LD_INT 1
13660: PLUS
13661: ST_TO_ADDR
13662: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13663: LD_EXP 24
13667: PUSH
13668: LD_EXP 41
13672: AND
13673: IFFALSE 13776
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
// begin for i := 1 to 5 do
13681: LD_ADDR_VAR 0 1
13685: PUSH
13686: DOUBLE
13687: LD_INT 1
13689: DEC
13690: ST_TO_ADDR
13691: LD_INT 5
13693: PUSH
13694: FOR_TO
13695: IFFALSE 13774
// begin uc_nation := nation_nature ;
13697: LD_ADDR_OWVAR 21
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// uc_side := 0 ;
13705: LD_ADDR_OWVAR 20
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13713: LD_ADDR_OWVAR 29
13717: PUSH
13718: LD_INT 12
13720: PUSH
13721: LD_INT 12
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: ST_TO_ADDR
// hc_agressivity := 20 ;
13728: LD_ADDR_OWVAR 35
13732: PUSH
13733: LD_INT 20
13735: ST_TO_ADDR
// hc_class := class_tiger ;
13736: LD_ADDR_OWVAR 28
13740: PUSH
13741: LD_INT 14
13743: ST_TO_ADDR
// hc_gallery :=  ;
13744: LD_ADDR_OWVAR 33
13748: PUSH
13749: LD_STRING 
13751: ST_TO_ADDR
// hc_name :=  ;
13752: LD_ADDR_OWVAR 26
13756: PUSH
13757: LD_STRING 
13759: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13760: CALL_OW 44
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 51
// end ;
13772: GO 13694
13774: POP
13775: POP
// end ;
13776: PPOPN 1
13778: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
13779: LD_EXP 24
13783: PUSH
13784: LD_EXP 42
13788: AND
13789: IFFALSE 13963
13791: GO 13793
13793: DISABLE
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
// begin result := false ;
13800: LD_ADDR_VAR 0 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// for i := 1 to 8 do
13808: LD_ADDR_VAR 0 1
13812: PUSH
13813: DOUBLE
13814: LD_INT 1
13816: DEC
13817: ST_TO_ADDR
13818: LD_INT 8
13820: PUSH
13821: FOR_TO
13822: IFFALSE 13933
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 10
13831: PUSH
13832: LD_INT 50
13834: PUSH
13835: LD_INT 90
13837: PUSH
13838: LD_INT 140
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
13859: LD_ADDR_VAR 0 3
13863: PUSH
13864: LD_INT 10
13866: PUSH
13867: LD_INT 50
13869: PUSH
13870: LD_INT 90
13872: PUSH
13873: LD_INT 140
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 1
13884: PPUSH
13885: LD_INT 4
13887: PPUSH
13888: CALL_OW 12
13892: ARRAY
13893: ST_TO_ADDR
// if ValidHex ( x , y ) then
13894: LD_VAR 0 2
13898: PPUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: CALL_OW 488
13908: IFFALSE 13931
// begin result := [ x , y ] ;
13910: LD_ADDR_VAR 0 4
13914: PUSH
13915: LD_VAR 0 2
13919: PUSH
13920: LD_VAR 0 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: ST_TO_ADDR
// break ;
13929: GO 13933
// end ; end ;
13931: GO 13821
13933: POP
13934: POP
// if result then
13935: LD_VAR 0 4
13939: IFFALSE 13963
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13941: LD_VAR 0 4
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: LD_VAR 0 4
13954: PUSH
13955: LD_INT 2
13957: ARRAY
13958: PPUSH
13959: CALL_OW 429
// end ;
13963: PPOPN 4
13965: END
// every 0 0$1 trigger StreamModeActive and sReset do
13966: LD_EXP 24
13970: PUSH
13971: LD_EXP 44
13975: AND
13976: IFFALSE 13988
13978: GO 13980
13980: DISABLE
// YouLost (  ) ;
13981: LD_STRING 
13983: PPUSH
13984: CALL_OW 104
13988: END
// every 0 0$1 trigger StreamModeActive and sFog do
13989: LD_EXP 24
13993: PUSH
13994: LD_EXP 43
13998: AND
13999: IFFALSE 14013
14001: GO 14003
14003: DISABLE
// FogOff ( your_side ) ;
14004: LD_OWVAR 2
14008: PPUSH
14009: CALL_OW 344
14013: END
// every 0 0$1 trigger StreamModeActive and sSun do
14014: LD_EXP 24
14018: PUSH
14019: LD_EXP 45
14023: AND
14024: IFFALSE 14052
14026: GO 14028
14028: DISABLE
// begin solar_recharge_percent := 0 ;
14029: LD_ADDR_OWVAR 79
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14037: LD_INT 10500
14039: PPUSH
14040: CALL_OW 67
// solar_recharge_percent := 100 ;
14044: LD_ADDR_OWVAR 79
14048: PUSH
14049: LD_INT 100
14051: ST_TO_ADDR
// end ;
14052: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14053: LD_EXP 24
14057: PUSH
14058: LD_EXP 46
14062: AND
14063: IFFALSE 14302
14065: GO 14067
14067: DISABLE
14068: LD_INT 0
14070: PPUSH
14071: PPUSH
14072: PPUSH
// begin tmp := [ ] ;
14073: LD_ADDR_VAR 0 3
14077: PUSH
14078: EMPTY
14079: ST_TO_ADDR
// for i := 1 to 6 do
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_INT 6
14092: PUSH
14093: FOR_TO
14094: IFFALSE 14199
// begin uc_nation := nation_nature ;
14096: LD_ADDR_OWVAR 21
14100: PUSH
14101: LD_INT 0
14103: ST_TO_ADDR
// uc_side := 0 ;
14104: LD_ADDR_OWVAR 20
14108: PUSH
14109: LD_INT 0
14111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14112: LD_ADDR_OWVAR 29
14116: PUSH
14117: LD_INT 12
14119: PUSH
14120: LD_INT 12
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: ST_TO_ADDR
// hc_agressivity := 20 ;
14127: LD_ADDR_OWVAR 35
14131: PUSH
14132: LD_INT 20
14134: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14135: LD_ADDR_OWVAR 28
14139: PUSH
14140: LD_INT 17
14142: ST_TO_ADDR
// hc_gallery :=  ;
14143: LD_ADDR_OWVAR 33
14147: PUSH
14148: LD_STRING 
14150: ST_TO_ADDR
// hc_name :=  ;
14151: LD_ADDR_OWVAR 26
14155: PUSH
14156: LD_STRING 
14158: ST_TO_ADDR
// un := CreateHuman ;
14159: LD_ADDR_VAR 0 2
14163: PUSH
14164: CALL_OW 44
14168: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14169: LD_VAR 0 2
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 51
// tmp := tmp * un ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_VAR 0 3
14190: PUSH
14191: LD_VAR 0 2
14195: MUL
14196: ST_TO_ADDR
// end ;
14197: GO 14093
14199: POP
14200: POP
// repeat wait ( 0 0$1 ) ;
14201: LD_INT 35
14203: PPUSH
14204: CALL_OW 67
// for un in tmp do
14208: LD_ADDR_VAR 0 2
14212: PUSH
14213: LD_VAR 0 3
14217: PUSH
14218: FOR_IN
14219: IFFALSE 14293
// begin if IsDead ( un ) then
14221: LD_VAR 0 2
14225: PPUSH
14226: CALL_OW 301
14230: IFFALSE 14250
// begin tmp := tmp diff un ;
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_VAR 0 3
14241: PUSH
14242: LD_VAR 0 2
14246: DIFF
14247: ST_TO_ADDR
// continue ;
14248: GO 14218
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14250: LD_VAR 0 2
14254: PPUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PPUSH
14277: LD_VAR 0 2
14281: PPUSH
14282: CALL_OW 74
14286: PPUSH
14287: CALL_OW 115
// end ;
14291: GO 14218
14293: POP
14294: POP
// until not tmp ;
14295: LD_VAR 0 3
14299: NOT
14300: IFFALSE 14201
// end ;
14302: PPOPN 3
14304: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14305: LD_EXP 24
14309: PUSH
14310: LD_EXP 47
14314: AND
14315: IFFALSE 14341
14317: GO 14319
14319: DISABLE
// begin ToLua ( displayTroll(); ) ;
14320: LD_STRING displayTroll();
14322: PPUSH
14323: CALL_OW 559
// wait ( 3 3$00 ) ;
14327: LD_INT 6300
14329: PPUSH
14330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14334: LD_STRING hideTroll();
14336: PPUSH
14337: CALL_OW 559
// end ;
14341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14342: LD_EXP 24
14346: PUSH
14347: LD_EXP 48
14351: AND
14352: IFFALSE 14415
14354: GO 14356
14356: DISABLE
14357: LD_INT 0
14359: PPUSH
// begin p := 0 ;
14360: LD_ADDR_VAR 0 1
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// repeat game_speed := 1 ;
14368: LD_ADDR_OWVAR 65
14372: PUSH
14373: LD_INT 1
14375: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14376: LD_INT 35
14378: PPUSH
14379: CALL_OW 67
// p := p + 1 ;
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: PLUS
14396: ST_TO_ADDR
// until p >= 60 ;
14397: LD_VAR 0 1
14401: PUSH
14402: LD_INT 60
14404: GREATEREQUAL
14405: IFFALSE 14368
// game_speed := 4 ;
14407: LD_ADDR_OWVAR 65
14411: PUSH
14412: LD_INT 4
14414: ST_TO_ADDR
// end ;
14415: PPOPN 1
14417: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14418: LD_EXP 24
14422: PUSH
14423: LD_EXP 49
14427: AND
14428: IFFALSE 14574
14430: GO 14432
14432: DISABLE
14433: LD_INT 0
14435: PPUSH
14436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14437: LD_ADDR_VAR 0 1
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_OWVAR 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: LD_INT 30
14459: PUSH
14460: LD_INT 0
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 30
14469: PUSH
14470: LD_INT 1
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 69
14490: ST_TO_ADDR
// if not depot then
14491: LD_VAR 0 1
14495: NOT
14496: IFFALSE 14500
// exit ;
14498: GO 14574
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 1
14512: PPUSH
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 12
14522: ARRAY
14523: PPUSH
14524: CALL_OW 274
14528: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14529: LD_VAR 0 2
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: LD_INT 0
14539: PPUSH
14540: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: LD_INT 0
14554: PPUSH
14555: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14559: LD_VAR 0 2
14563: PPUSH
14564: LD_INT 3
14566: PPUSH
14567: LD_INT 0
14569: PPUSH
14570: CALL_OW 277
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14577: LD_EXP 24
14581: PUSH
14582: LD_EXP 50
14586: AND
14587: IFFALSE 14684
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_INT 22
14602: PUSH
14603: LD_OWVAR 2
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: LD_INT 23
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: ST_TO_ADDR
// if not tmp then
14649: LD_VAR 0 1
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 14684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14658: LD_VAR 0 1
14662: PUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 12
14675: ARRAY
14676: PPUSH
14677: LD_INT 200
14679: PPUSH
14680: CALL_OW 234
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14687: LD_EXP 24
14691: PUSH
14692: LD_EXP 51
14696: AND
14697: IFFALSE 14776
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14705: LD_ADDR_VAR 0 1
14709: PUSH
14710: LD_INT 22
14712: PUSH
14713: LD_OWVAR 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// if not tmp then
14741: LD_VAR 0 1
14745: NOT
14746: IFFALSE 14750
// exit ;
14748: GO 14776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14750: LD_VAR 0 1
14754: PUSH
14755: LD_INT 1
14757: PPUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 12
14767: ARRAY
14768: PPUSH
14769: LD_INT 60
14771: PPUSH
14772: CALL_OW 234
// end ;
14776: PPOPN 1
14778: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14779: LD_EXP 24
14783: PUSH
14784: LD_EXP 52
14788: AND
14789: IFFALSE 14888
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
14797: PPUSH
// begin enable ;
14798: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14799: LD_ADDR_VAR 0 1
14803: PUSH
14804: LD_INT 22
14806: PUSH
14807: LD_OWVAR 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 61
14818: PUSH
14819: EMPTY
14820: LIST
14821: PUSH
14822: LD_INT 33
14824: PUSH
14825: LD_INT 2
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: ST_TO_ADDR
// if not tmp then
14842: LD_VAR 0 1
14846: NOT
14847: IFFALSE 14851
// exit ;
14849: GO 14888
// for i in tmp do
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_VAR 0 1
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14886
// if IsControledBy ( i ) then
14864: LD_VAR 0 2
14868: PPUSH
14869: CALL_OW 312
14873: IFFALSE 14884
// ComUnlink ( i ) ;
14875: LD_VAR 0 2
14879: PPUSH
14880: CALL_OW 136
14884: GO 14861
14886: POP
14887: POP
// end ;
14888: PPOPN 2
14890: END
// every 0 0$1 trigger StreamModeActive and sPowell do
14891: LD_EXP 24
14895: PUSH
14896: LD_EXP 53
14900: AND
14901: IFFALSE 14941
14903: GO 14905
14905: DISABLE
// begin ToLua ( displayPowell(); ) ;
14906: LD_STRING displayPowell();
14908: PPUSH
14909: CALL_OW 559
// wait ( 0 0$20 ) ;
14913: LD_INT 700
14915: PPUSH
14916: CALL_OW 67
// ToLua ( displayPowell(); ) ;
14920: LD_STRING displayPowell();
14922: PPUSH
14923: CALL_OW 559
// wait ( 0 0$40 ) ;
14927: LD_INT 1400
14929: PPUSH
14930: CALL_OW 67
// ToLua ( displayPowell(); ) ;
14934: LD_STRING displayPowell();
14936: PPUSH
14937: CALL_OW 559
// end ;
14941: END
// every 0 0$1 trigger StreamModeActive and sStu do
14942: LD_EXP 24
14946: PUSH
14947: LD_EXP 61
14951: AND
14952: IFFALSE 14964
14954: GO 14956
14956: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14957: LD_STRING displayStucuk();
14959: PPUSH
14960: CALL_OW 559
// end ;
14964: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14965: LD_EXP 24
14969: PUSH
14970: LD_EXP 54
14974: AND
14975: IFFALSE 15116
14977: GO 14979
14979: DISABLE
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_INT 22
14991: PUSH
14992: LD_OWVAR 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 21
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: ST_TO_ADDR
// if not tmp then
15020: LD_VAR 0 2
15024: NOT
15025: IFFALSE 15029
// exit ;
15027: GO 15116
// un := tmp [ rand ( 1 , tmp ) ] ;
15029: LD_ADDR_VAR 0 1
15033: PUSH
15034: LD_VAR 0 2
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 2
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15053: LD_VAR 0 1
15057: PPUSH
15058: LD_INT 0
15060: PPUSH
15061: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_OWVAR 3
15074: PUSH
15075: LD_VAR 0 1
15079: DIFF
15080: PPUSH
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 74
15090: PPUSH
15091: CALL_OW 115
// wait ( 0 0$20 ) ;
15095: LD_INT 700
15097: PPUSH
15098: CALL_OW 67
// SetSide ( un , your_side ) ;
15102: LD_VAR 0 1
15106: PPUSH
15107: LD_OWVAR 2
15111: PPUSH
15112: CALL_OW 235
// end ;
15116: PPOPN 2
15118: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15119: LD_EXP 24
15123: PUSH
15124: LD_EXP 55
15128: AND
15129: IFFALSE 15235
15131: GO 15133
15133: DISABLE
15134: LD_INT 0
15136: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15137: LD_ADDR_VAR 0 1
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: ST_TO_ADDR
// if not depot then
15191: LD_VAR 0 1
15195: NOT
15196: IFFALSE 15200
// exit ;
15198: GO 15235
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15200: LD_VAR 0 1
15204: PUSH
15205: LD_INT 1
15207: ARRAY
15208: PPUSH
15209: CALL_OW 250
15213: PPUSH
15214: LD_VAR 0 1
15218: PUSH
15219: LD_INT 1
15221: ARRAY
15222: PPUSH
15223: CALL_OW 251
15227: PPUSH
15228: LD_INT 70
15230: PPUSH
15231: CALL_OW 495
// end ;
15235: PPOPN 1
15237: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15238: LD_EXP 24
15242: PUSH
15243: LD_EXP 56
15247: AND
15248: IFFALSE 15459
15250: GO 15252
15252: DISABLE
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15260: LD_ADDR_VAR 0 5
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_OWVAR 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 21
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if not tmp then
15296: LD_VAR 0 5
15300: NOT
15301: IFFALSE 15305
// exit ;
15303: GO 15459
// for i in tmp do
15305: LD_ADDR_VAR 0 1
15309: PUSH
15310: LD_VAR 0 5
15314: PUSH
15315: FOR_IN
15316: IFFALSE 15457
// begin d := rand ( 0 , 5 ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 0
15325: PPUSH
15326: LD_INT 5
15328: PPUSH
15329: CALL_OW 12
15333: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15334: LD_ADDR_VAR 0 2
15338: PUSH
15339: LD_VAR 0 1
15343: PPUSH
15344: CALL_OW 250
15348: PPUSH
15349: LD_VAR 0 4
15353: PPUSH
15354: LD_INT 3
15356: PPUSH
15357: LD_INT 12
15359: PPUSH
15360: CALL_OW 12
15364: PPUSH
15365: CALL_OW 272
15369: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15370: LD_ADDR_VAR 0 3
15374: PUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 251
15384: PPUSH
15385: LD_VAR 0 4
15389: PPUSH
15390: LD_INT 3
15392: PPUSH
15393: LD_INT 12
15395: PPUSH
15396: CALL_OW 12
15400: PPUSH
15401: CALL_OW 273
15405: ST_TO_ADDR
// if ValidHex ( x , y ) then
15406: LD_VAR 0 2
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: CALL_OW 488
15420: IFFALSE 15455
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_VAR 0 2
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 3
15439: PPUSH
15440: LD_INT 6
15442: PPUSH
15443: CALL_OW 12
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 483
// end ;
15455: GO 15315
15457: POP
15458: POP
// end ;
15459: PPOPN 5
15461: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15462: LD_EXP 24
15466: PUSH
15467: LD_EXP 57
15471: AND
15472: IFFALSE 15566
15474: GO 15476
15476: DISABLE
15477: LD_INT 0
15479: PPUSH
15480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15481: LD_ADDR_VAR 0 2
15485: PUSH
15486: LD_INT 22
15488: PUSH
15489: LD_OWVAR 2
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 32
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 2
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15566
// for i in tmp do
15537: LD_ADDR_VAR 0 1
15541: PUSH
15542: LD_VAR 0 2
15546: PUSH
15547: FOR_IN
15548: IFFALSE 15564
// SetFuel ( i , 0 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 0
15557: PPUSH
15558: CALL_OW 240
15562: GO 15547
15564: POP
15565: POP
// end ;
15566: PPOPN 2
15568: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15569: LD_EXP 24
15573: PUSH
15574: LD_EXP 58
15578: AND
15579: IFFALSE 15645
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_OWVAR 2
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 29
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 1
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15645
// DestroyUnit ( tmp [ 1 ] ) ;
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: PPUSH
15641: CALL_OW 65
// end ;
15645: PPOPN 1
15647: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15648: LD_EXP 24
15652: PUSH
15653: LD_EXP 60
15657: AND
15658: IFFALSE 15771
15660: GO 15662
15662: DISABLE
15663: LD_INT 0
15665: PPUSH
// begin uc_side := 0 ;
15666: LD_ADDR_OWVAR 20
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// uc_nation := nation_arabian ;
15674: LD_ADDR_OWVAR 21
15678: PUSH
15679: LD_INT 2
15681: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
15682: LD_INT 1
15684: PPUSH
15685: LD_INT 10
15687: PPUSH
15688: LD_INT 11
15690: PPUSH
15691: CALL_OW 380
// un := CreateHuman ;
15695: LD_ADDR_VAR 0 1
15699: PUSH
15700: CALL_OW 44
15704: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15717: LD_INT 35
15719: PPUSH
15720: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 22
15731: PUSH
15732: LD_OWVAR 2
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: PPUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 74
15755: PPUSH
15756: CALL_OW 115
// until IsDead ( un ) ;
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 301
15769: IFFALSE 15717
// end ; end_of_file
15771: PPOPN 1
15773: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15774: LD_INT 0
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 264
15789: PUSH
15790: LD_EXP 23
15794: EQUAL
15795: IFFALSE 15867
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15797: LD_INT 68
15799: PPUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 255
15809: PPUSH
15810: CALL_OW 321
15814: PUSH
15815: LD_INT 2
15817: EQUAL
15818: IFFALSE 15830
// eff := 70 else
15820: LD_ADDR_VAR 0 6
15824: PUSH
15825: LD_INT 70
15827: ST_TO_ADDR
15828: GO 15838
// eff := 30 ;
15830: LD_ADDR_VAR 0 6
15834: PUSH
15835: LD_INT 30
15837: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: CALL_OW 250
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 251
15857: PPUSH
15858: LD_VAR 0 6
15862: PPUSH
15863: CALL_OW 495
// end ; end ;
15867: LD_VAR 0 4
15871: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15872: LD_INT 0
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
// if cmd = 124 then
15880: LD_VAR 0 1
15884: PUSH
15885: LD_INT 124
15887: EQUAL
15888: IFFALSE 16094
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15890: LD_ADDR_VAR 0 5
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 34
15900: PUSH
15901: LD_INT 53
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 34
15910: PUSH
15911: LD_INT 14
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: ST_TO_ADDR
// if not tmp then
15928: LD_VAR 0 5
15932: NOT
15933: IFFALSE 15937
// exit ;
15935: GO 16094
// for i in tmp do
15937: LD_ADDR_VAR 0 3
15941: PUSH
15942: LD_VAR 0 5
15946: PUSH
15947: FOR_IN
15948: IFFALSE 16092
// begin taskList := GetTaskList ( i ) ;
15950: LD_ADDR_VAR 0 6
15954: PUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: CALL_OW 437
15964: ST_TO_ADDR
// if not taskList then
15965: LD_VAR 0 6
15969: NOT
15970: IFFALSE 15974
// continue ;
15972: GO 15947
// for j = 1 to taskList do
15974: LD_ADDR_VAR 0 4
15978: PUSH
15979: DOUBLE
15980: LD_INT 1
15982: DEC
15983: ST_TO_ADDR
15984: LD_VAR 0 6
15988: PUSH
15989: FOR_TO
15990: IFFALSE 16088
// if taskList [ j ] [ 1 ] = | then
15992: LD_VAR 0 6
15996: PUSH
15997: LD_VAR 0 4
16001: ARRAY
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PUSH
16007: LD_STRING |
16009: EQUAL
16010: IFFALSE 16086
// begin _taskList := Delete ( taskList , 1 ) ;
16012: LD_ADDR_VAR 0 7
16016: PUSH
16017: LD_VAR 0 6
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 3
16029: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16030: LD_VAR 0 3
16034: PPUSH
16035: LD_VAR 0 7
16039: PPUSH
16040: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_VAR 0 6
16053: PUSH
16054: LD_VAR 0 4
16058: ARRAY
16059: PUSH
16060: LD_INT 2
16062: ARRAY
16063: PPUSH
16064: LD_VAR 0 6
16068: PUSH
16069: LD_VAR 0 4
16073: ARRAY
16074: PUSH
16075: LD_INT 3
16077: ARRAY
16078: PPUSH
16079: LD_INT 8
16081: PPUSH
16082: CALL 16099 0 4
// end ;
16086: GO 15989
16088: POP
16089: POP
// end ;
16090: GO 15947
16092: POP
16093: POP
// end ; end ;
16094: LD_VAR 0 2
16098: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16110: LD_VAR 0 1
16114: NOT
16115: PUSH
16116: LD_VAR 0 2
16120: PPUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: CALL_OW 488
16130: NOT
16131: OR
16132: PUSH
16133: LD_VAR 0 4
16137: NOT
16138: OR
16139: IFFALSE 16143
// exit ;
16141: GO 16483
// list := [ ] ;
16143: LD_ADDR_VAR 0 13
16147: PUSH
16148: EMPTY
16149: ST_TO_ADDR
// if x - r < 0 then
16150: LD_VAR 0 2
16154: PUSH
16155: LD_VAR 0 4
16159: MINUS
16160: PUSH
16161: LD_INT 0
16163: LESS
16164: IFFALSE 16176
// min_x := 0 else
16166: LD_ADDR_VAR 0 7
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
16174: GO 16192
// min_x := x - r ;
16176: LD_ADDR_VAR 0 7
16180: PUSH
16181: LD_VAR 0 2
16185: PUSH
16186: LD_VAR 0 4
16190: MINUS
16191: ST_TO_ADDR
// if y - r < 0 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_VAR 0 4
16201: MINUS
16202: PUSH
16203: LD_INT 0
16205: LESS
16206: IFFALSE 16218
// min_y := 0 else
16208: LD_ADDR_VAR 0 8
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
16216: GO 16234
// min_y := y - r ;
16218: LD_ADDR_VAR 0 8
16222: PUSH
16223: LD_VAR 0 3
16227: PUSH
16228: LD_VAR 0 4
16232: MINUS
16233: ST_TO_ADDR
// max_x := x + r ;
16234: LD_ADDR_VAR 0 9
16238: PUSH
16239: LD_VAR 0 2
16243: PUSH
16244: LD_VAR 0 4
16248: PLUS
16249: ST_TO_ADDR
// max_y := y + r ;
16250: LD_ADDR_VAR 0 10
16254: PUSH
16255: LD_VAR 0 3
16259: PUSH
16260: LD_VAR 0 4
16264: PLUS
16265: ST_TO_ADDR
// for _x = min_x to max_x do
16266: LD_ADDR_VAR 0 11
16270: PUSH
16271: DOUBLE
16272: LD_VAR 0 7
16276: DEC
16277: ST_TO_ADDR
16278: LD_VAR 0 9
16282: PUSH
16283: FOR_TO
16284: IFFALSE 16401
// for _y = min_y to max_y do
16286: LD_ADDR_VAR 0 12
16290: PUSH
16291: DOUBLE
16292: LD_VAR 0 8
16296: DEC
16297: ST_TO_ADDR
16298: LD_VAR 0 10
16302: PUSH
16303: FOR_TO
16304: IFFALSE 16397
// begin if not ValidHex ( _x , _y ) then
16306: LD_VAR 0 11
16310: PPUSH
16311: LD_VAR 0 12
16315: PPUSH
16316: CALL_OW 488
16320: NOT
16321: IFFALSE 16325
// continue ;
16323: GO 16303
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16325: LD_VAR 0 11
16329: PPUSH
16330: LD_VAR 0 12
16334: PPUSH
16335: CALL_OW 351
16339: PUSH
16340: LD_VAR 0 11
16344: PPUSH
16345: LD_VAR 0 12
16349: PPUSH
16350: CALL_OW 554
16354: AND
16355: IFFALSE 16395
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16357: LD_ADDR_VAR 0 13
16361: PUSH
16362: LD_VAR 0 13
16366: PPUSH
16367: LD_VAR 0 13
16371: PUSH
16372: LD_INT 1
16374: PLUS
16375: PPUSH
16376: LD_VAR 0 11
16380: PUSH
16381: LD_VAR 0 12
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PPUSH
16390: CALL_OW 2
16394: ST_TO_ADDR
// end ;
16395: GO 16303
16397: POP
16398: POP
16399: GO 16283
16401: POP
16402: POP
// if not list then
16403: LD_VAR 0 13
16407: NOT
16408: IFFALSE 16412
// exit ;
16410: GO 16483
// for i in list do
16412: LD_ADDR_VAR 0 6
16416: PUSH
16417: LD_VAR 0 13
16421: PUSH
16422: FOR_IN
16423: IFFALSE 16481
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_STRING M
16432: PUSH
16433: LD_VAR 0 6
16437: PUSH
16438: LD_INT 1
16440: ARRAY
16441: PUSH
16442: LD_VAR 0 6
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PUSH
16451: LD_INT 0
16453: PUSH
16454: LD_INT 0
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: PPUSH
16475: CALL_OW 447
16479: GO 16422
16481: POP
16482: POP
// end ;
16483: LD_VAR 0 5
16487: RET
