Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
begin
  unit := CreateCharacter(ident);
  end else
  begin
   unit := NewCharacter(ident);
  end; 

result := unit;
End;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin

    for i in charactersList do
        SaveCharacters(i, ident);
end;

Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

Export function PrepareDifficulty;
begin

     if difficulty = 1 then
     begin
       SetTech(57, 3, state_disabled);
       SetTech(58, 3, state_disabled);
       SetTech(59, 3, state_disabled);

       SetTech(51, 3, state_disabled);
       SetTech(52, 3, state_disabled);
       SetTech(53, 3, state_disabled);
     end;

     if difficulty = 2 then
     begin
       SetTech(57, 3, state_enabled);
       SetTech(58, 3, state_disabled);
       SetTech(59, 3, state_disabled);

       SetTech(51, 3, state_enabled);
       SetTech(52, 3, state_disabled);
       SetTech(53, 3, state_disabled);
     end;

     if difficulty = 3 then
     begin
       SetTech(57, 3, state_enabled);
       SetTech(58, 3, state_enabled);
       SetTech(59, 3, state_disabled);

       SetTech(51, 3, state_enabled);
       SetTech(52, 3, state_enabled);
       SetTech(53, 3, state_disabled);
     end;

end;

// AI functions

Export function ResAllTechs(side, lab, nation);
var i, tech, cout, ru_tech_list;
begin

  ru_tech_list := [48, 49, 50, 20, 1, 51, 52, 69, 39, 34, 40, 53, 71, 57, 58, 44, 32, 27, 23, 33, 59, 54, 55, 56, 63, 64, 65, 30, 31, 21, 22, 25];

  For i = 1 to ru_tech_list do
    If GetTech(ru_tech_list[i], side) = state_enabled and TechNationAvailable(ru_tech_list[i], nation) = true then AddComResearch(lab, ru_tech_list[i]);

end;

Export function RepairAndRebuildBase(side, building, area, destroyedBuildings);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

  engineerOkInside = UnitsInside(building);
  engineerOkOutside = FilterUnitsInArea(area,[[f_side, side], [f_class, 2], [f_lives, 750], [f_not, [f_inside]]]);
  buildings_list = FilterUnitsInArea(area,[[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 250]]) then exit;

  if buildings_list > 0 and engineerOkInside then ComExitBuilding(engineerOkInside);

  if buildings_list > 0  and engineerOkOutside > 0 then ComRepairBuilding(engineerOkOutside, buildings_list[1]);

  if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then ComEnterUnit(engineerOkOutside, building);

  if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0  then ComBuild(engineerOkOutside, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);


END;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_nation ,2], [f_lives, 251]]);
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_nation, 2], [f_class, 4], [f_ok]]);
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not unitsToHeal and not sci_list then exit;

  if damageUnits > 0 and sci_list > 0 then ComMoveToArea(damageUnits, healArea);

  if unitsToHeal > 0 and sci_list > 0 then ComExitBuilding(sci_list);

  if unitsToHeal > 0 and sci_listOutside > 0 then ComHeal(sci_listOutside, unitsToHeal[1]);

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
  begin
          tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
          rnd = rand(1, tmp);
          ComEnterUnit(UnitFilter(sci_listOutside, [f_not, [f_hastask]]), tmp[rnd]);
  end;

END;

Export function DefendDepot(side, build);
var i, j, tmpTab;
begin
     tmpTab = [];

     if FilterAllUnits([[f_side, side], [f_btype, b_bunker]]) > 0 then
     begin
       for i in FilterAllUnits([[f_side, side], [f_btype, b_bunker]]) do
       begin
            for j in UnitsInside(i) do tmpTab = tmpTab ^ j;
       end;
     end;

     ComAgressiveMove(tmpTab, GetX(build), GetY(build));
end;



Export function CollectCrates(side, cargoNation, enemyCratesArea);
var clear_crates, cargo_list, crate_list;
begin
    enable;
    crate_list = GetListOfCratesInArea(enemyCratesArea);
    cargo_list = FilterAllUnits([[f_side, side], [f_weapon, cargoNation]]);

    if cargo_list > 0 and GetListOfCratesInArea(enemyCratesArea) and crate_list > 0 then
    begin
        AddComCollect(cargo_list[1], crate_list[1], crate_list[2]);
        SetFuel(cargo_list[1], 100);
    end;
end;

Export function AttackNearBuildings(side, enemySide);
var i, j, turretsList, enemyBuildings;
begin
    turretsList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 31], [f_btype, 32], [f_btype, 33], [f_btype, 4], [f_btype, 5]]]);
    enemyBuildings = FilterAllUnits([[f_side, enemySide], [f_type, unit_building], [f_empty]]);

    if turretsList > 0 and enemyBuildings > 0 then
    begin
        for i in turretsList do
        begin
            for j in enemyBuildings do
            begin
                if GetDistUnits(i, j) < 20 then
                begin
                    ComAttackUnit(i, j);
                end;
            end;
        end;
    end;

END;

Export function BuildingVehicle(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin

        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);

END;

Export function AttackVehicles(side);
var i, j, vehiclesOK, target1, target2;
begin
    if russianTanks >= [2, 3, 4][Difficulty] and russianTimeLapsers >= [1, 1, 2][Difficulty] then
    begin

        repeat
            wait(0$1);
                for j in russianTanks do
                begin

                if GetSide(j) <> side then
                   begin
                   ComStop(j);
                   continue;
                   end;

                    target1 := NearestUnitToUnit(FilterAllUnits([[f_enemy, side], [f_see, 1]]), j);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_enemy, side], [f_see, 1], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), j);

                    If GetDistUnits(j, target1)+8 < GetDistUnits(j, target2) then ComAttackUnit(j, target1)
                    else ComAttackUnit(j, target2);
                end;

        until russianTanks = 0;
    end;
end;

Export Function IntBazooka(side);
var ta, c, i, list, filter;
begin

    list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
    filter := FilterAllUnits([[f_enemy, side], [f_not, [f_type, unit_building]]]);

    c := Rand(1, 3);

    for i = 1 to list do
    for ta in filter do
        begin

        if GetDistUnits(list[i], ta) <= 15 then
            begin
                Case c of
                1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                3: ComAttackUnit(list[i], ta);
                end;

            end;
        end;
End;


Export function TimeLapsersAI(side);
var j, nearUnit;
begin
    if russianTanks >= 1 and russianTimeLapsers >= [1, 2, 2][Difficulty] then
    repeat
        wait(0$3);
        if russianTimeLapsers > 0 then
            for j in UnitFilter(russianTimeLapsers, [f_not, [f_hastask]]) do
            begin
                nearUnit := NearestUnitToUnit(FilterAllUnits([[f_enemy, side], [f_see, 1]]), j);
                ComMoveXY(j, GetX(nearUnit), GetY(nearUnit));
            end;

    until russianTimeLapsers = 0;
end;

Export function CraneRepairBuild(side, baseArea);
var i, mechTmp, vehicleTmp, crane_list, buildings_list;
begin
    crane_list = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_vehicle], [f_weapon, ru_crane]]);
    buildings_list = FilterUnitsInArea(baseArea, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

    if buildings_list > 0 and UnitFilter(crane_list, [f_lives, 750]) > 0 then ComRepairBuilding(crane_list, buildings_list[1]);

    if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0  then AddComCraneBuild(crane_list, rudestroyedBuildings[1], rudestroyedBuildings[2], rudestroyedBuildings[3], rudestroyedBuildings[4]);
end;