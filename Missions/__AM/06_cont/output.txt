// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7922 0 0
// CreateNature ;
  57: CALL 21435 0 0
// PrepareRussian ;
  61: CALL 5806 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11241 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42691 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42691 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42691 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42691 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42691 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42691 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42691 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42691 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42691 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42691 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42691 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42691 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 4094
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3785: LD_EXP 1
3789: PPUSH
3790: LD_EXP 16
3794: PPUSH
3795: CALL_OW 296
3799: PUSH
3800: LD_INT 10
3802: GREATER
3803: IFFALSE 3886
// begin InGameOff ;
3805: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 16
3839: PPUSH
3840: CALL_OW 296
3844: PUSH
3845: LD_INT 8
3847: LESS
3848: PUSH
3849: LD_EXP 16
3853: PPUSH
3854: CALL_OW 301
3858: OR
3859: IFFALSE 3823
// if IsDead ( Joan ) then
3861: LD_EXP 16
3865: PPUSH
3866: CALL_OW 301
3870: IFFALSE 3882
// begin blockSpawn := false ;
3872: LD_ADDR_EXP 30
3876: PUSH
3877: LD_INT 0
3879: ST_TO_ADDR
// exit ;
3880: GO 4225
// end ; InGameOn ;
3882: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3886: LD_EXP 1
3890: PUSH
3891: LD_INT 55
3893: PUSH
3894: EMPTY
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: IN
3902: IFFALSE 3925
// begin ComMoveUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 112
// wait ( 0 0$05 ) ;
3918: LD_INT 175
3920: PPUSH
3921: CALL_OW 67
// end ; ComExit ( JMM ) ;
3925: LD_EXP 1
3929: PPUSH
3930: CALL 80780 0 1
// wait ( 0 0$1 ) ;
3934: LD_INT 35
3936: PPUSH
3937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3948: LD_EXP 16
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: LD_EXP 1
3966: PPUSH
3967: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_EXP 1
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 5
3988: LESS
3989: IFFALSE 3941
// ComTurnUnit ( Joan , JMM ) ;
3991: LD_EXP 16
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4005: LD_EXP 1
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 119
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// DialogueOn ;
4026: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4030: LD_EXP 16
4034: PPUSH
4035: LD_STRING D5a-Joan-4
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D5a-JMM-4
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_STRING D5a-Joan-5
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D5a-JMM-5
4073: PPUSH
4074: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4078: LD_EXP 16
4082: PPUSH
4083: LD_STRING D5a-Joan-6
4085: PPUSH
4086: CALL_OW 88
// DialogueOff ;
4090: CALL_OW 7
// end ; DialogueOn ;
4094: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_STRING D6-JMM-1
4105: PPUSH
4106: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4110: LD_EXP 16
4114: PPUSH
4115: LD_STRING D6-Joan-1
4117: PPUSH
4118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4122: LD_EXP 1
4126: PPUSH
4127: LD_STRING D6-JMM-2
4129: PPUSH
4130: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4134: LD_EXP 16
4138: PPUSH
4139: LD_STRING D6-Joan-2
4141: PPUSH
4142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_STRING D6-JMM-3
4153: PPUSH
4154: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_STRING D6-Joan-3
4165: PPUSH
4166: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4170: LD_EXP 1
4174: PPUSH
4175: LD_STRING D6-JMM-4
4177: PPUSH
4178: CALL_OW 88
// DialogueOff ;
4182: CALL_OW 7
// InGameOff ;
4186: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4202: LD_STRING MJ
4204: PPUSH
4205: CALL_OW 337
// joanStatus = 1 ;
4209: LD_ADDR_EXP 17
4213: PUSH
4214: LD_INT 1
4216: ST_TO_ADDR
// blockSpawn = 0 ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if not number or number > 8 then
4234: LD_VAR 0 1
4238: NOT
4239: PUSH
4240: LD_VAR 0 1
4244: PUSH
4245: LD_INT 8
4247: GREATER
4248: OR
4249: IFFALSE 4253
// exit ;
4251: GO 5801
// repeat wait ( 0 0$7 ) ;
4253: LD_INT 245
4255: PPUSH
4256: CALL_OW 67
// until blockSpawn = 0 ;
4260: LD_EXP 30
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4253
// uc_side := 1 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// uc_nation := 1 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// InitHc ;
4286: CALL_OW 19
// if number = 1 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4474
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_male ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 55 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 55
4331: ST_TO_ADDR
// hc_name := George McCarthy ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING George McCarthy
4339: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 11
4347: PUSH
4348: LD_INT 10
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 23
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11d-Sol4-1
4453: PPUSH
4454: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4458: LD_EXP 1
4462: PPUSH
4463: LD_STRING D11d-JMM-1
4465: PPUSH
4466: CALL_OW 88
// DialogueOff ;
4470: CALL_OW 7
// end ; if number = 2 then
4474: LD_VAR 0 1
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4658
// begin hc_class := 1 ;
4484: LD_ADDR_OWVAR 28
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// hc_sex := sex_male ;
4492: LD_ADDR_OWVAR 27
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4500: LD_ADDR_OWVAR 33
4504: PUSH
4505: LD_STRING AmGalRemake
4507: ST_TO_ADDR
// hc_face_number := 7 ;
4508: LD_ADDR_OWVAR 34
4512: PUSH
4513: LD_INT 7
4515: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4516: LD_ADDR_OWVAR 26
4520: PUSH
4521: LD_STRING Bobby Jordan
4523: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4524: LD_ADDR_OWVAR 29
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: LD_INT 11
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4539: LD_ADDR_OWVAR 30
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: LD_INT 0
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4562: LD_ADDR_OWVAR 31
4566: PUSH
4567: LD_INT 3
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL_OW 49
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: CALL_OW 87
// DialogueOn ;
4626: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_STRING D11b-Sol3-1
4637: PPUSH
4638: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_STRING D11b-JMM-1
4649: PPUSH
4650: CALL_OW 88
// DialogueOff ;
4654: CALL_OW 7
// end ; if number = 3 then
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 3
4665: EQUAL
4666: IFFALSE 4830
// begin hc_class := 1 ;
4668: LD_ADDR_OWVAR 28
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// hc_sex := sex_male ;
4676: LD_ADDR_OWVAR 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// hc_gallery := DJ ;
4684: LD_ADDR_OWVAR 33
4688: PUSH
4689: LD_STRING DJ
4691: ST_TO_ADDR
// hc_face_number := 1 ;
4692: LD_ADDR_OWVAR 34
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// hc_name := Darius Dajay ;
4700: LD_ADDR_OWVAR 26
4704: PUSH
4705: LD_STRING Darius Dajay
4707: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4708: LD_ADDR_OWVAR 29
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4723: LD_ADDR_OWVAR 30
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 1
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4746: LD_ADDR_OWVAR 31
4750: PUSH
4751: LD_INT 5
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 25
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4794: LD_VAR 0 3
4798: PPUSH
4799: CALL_OW 87
// wait ( 0 0$1 ) ;
4803: LD_INT 35
4805: PPUSH
4806: CALL_OW 67
// DialogueOn ;
4810: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_STRING D11f-Sol5-1
4821: PPUSH
4822: CALL_OW 88
// DialogueOff ;
4826: CALL_OW 7
// end ; if number = 4 then
4830: LD_VAR 0 1
4834: PUSH
4835: LD_INT 4
4837: EQUAL
4838: IFFALSE 4975
// begin hc_class := 2 ;
4840: LD_ADDR_OWVAR 28
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
// hc_sex := sex_female ;
4848: LD_ADDR_OWVAR 27
4852: PUSH
4853: LD_INT 2
4855: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING SecondCharsGal
4863: ST_TO_ADDR
// hc_face_number := 46 ;
4864: LD_ADDR_OWVAR 34
4868: PUSH
4869: LD_INT 46
4871: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4872: LD_ADDR_OWVAR 26
4876: PUSH
4877: LD_STRING Sylvia Creak
4879: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4880: LD_ADDR_OWVAR 29
4884: PUSH
4885: LD_INT 10
4887: PUSH
4888: LD_INT 9
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4895: LD_ADDR_OWVAR 30
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 1
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4918: LD_ADDR_OWVAR 31
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 26
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 87
// end ; if number = 5 then
4975: LD_VAR 0 1
4979: PUSH
4980: LD_INT 5
4982: EQUAL
4983: IFFALSE 5159
// begin hc_class := 1 ;
4985: LD_ADDR_OWVAR 28
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hc_sex := sex_female ;
4993: LD_ADDR_OWVAR 27
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5001: LD_ADDR_OWVAR 33
5005: PUSH
5006: LD_STRING SecondCharsGal
5008: ST_TO_ADDR
// hc_face_number := 37 ;
5009: LD_ADDR_OWVAR 34
5013: PUSH
5014: LD_INT 37
5016: ST_TO_ADDR
// hc_name := Malena Johnson ;
5017: LD_ADDR_OWVAR 26
5021: PUSH
5022: LD_STRING Malena Johnson
5024: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5025: LD_ADDR_OWVAR 29
5029: PUSH
5030: LD_INT 11
5032: PUSH
5033: LD_INT 10
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5040: LD_ADDR_OWVAR 30
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5063: LD_ADDR_OWVAR 31
5067: PUSH
5068: LD_INT 3
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: LD_INT 0
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
// un = CreateHuman ;
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: CALL_OW 44
5095: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 27
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5111: LD_VAR 0 3
5115: PPUSH
5116: CALL_OW 87
// wait ( 0 0$1 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// DialogueOn ;
5127: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_STRING D11c-FSol3-1
5138: PPUSH
5139: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D11c-JMM-1
5150: PPUSH
5151: CALL_OW 88
// DialogueOff ;
5155: CALL_OW 7
// end ; if number = 6 then
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 6
5166: EQUAL
5167: IFFALSE 5341
// begin hc_class := 1 ;
5169: LD_ADDR_OWVAR 28
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_sex := sex_male ;
5177: LD_ADDR_OWVAR 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING AmGalRemake
5192: ST_TO_ADDR
// hc_face_number := 1 ;
5193: LD_ADDR_OWVAR 34
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// hc_name := Charles Brown ;
5201: LD_ADDR_OWVAR 26
5205: PUSH
5206: LD_STRING Charles Brown
5208: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5209: LD_ADDR_OWVAR 29
5213: PUSH
5214: LD_INT 12
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5224: LD_ADDR_OWVAR 30
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5247: LD_ADDR_OWVAR 31
5251: PUSH
5252: LD_INT 3
5254: PUSH
5255: LD_INT 1
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: ST_TO_ADDR
// un = CreateHuman ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 28
5287: PPUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 87
// wait ( 0 0$1 ) ;
5304: LD_INT 35
5306: PPUSH
5307: CALL_OW 67
// DialogueOn ;
5311: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: LD_STRING D4-Sol1-5
5322: PPUSH
5323: CALL_OW 88
// DialogueOff ;
5327: CALL_OW 7
// tempCharles = un ;
5331: LD_ADDR_EXP 14
5335: PUSH
5336: LD_VAR 0 3
5340: ST_TO_ADDR
// end ; if number = 7 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 7
5348: EQUAL
5349: IFFALSE 5621
// begin hc_class := 1 ;
5351: LD_ADDR_OWVAR 28
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// hc_sex := sex_female ;
5359: LD_ADDR_OWVAR 27
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5367: LD_ADDR_OWVAR 33
5371: PUSH
5372: LD_STRING AmGalRemake
5374: ST_TO_ADDR
// hc_face_number := 2 ;
5375: LD_ADDR_OWVAR 34
5379: PUSH
5380: LD_INT 2
5382: ST_TO_ADDR
// hc_name := Johanna Holland ;
5383: LD_ADDR_OWVAR 26
5387: PUSH
5388: LD_STRING Johanna Holland
5390: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5391: LD_ADDR_OWVAR 29
5395: PUSH
5396: LD_INT 10
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5406: LD_ADDR_OWVAR 30
5410: PUSH
5411: LD_INT 2
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5429: LD_ADDR_OWVAR 31
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: LD_INT 2
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 29
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5493: LD_INT 30
5495: PPUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 70
5510: IFFALSE 5621
// begin DialogueOn ;
5512: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 250
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 251
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 15
5541: NEG
5542: PPUSH
5543: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_STRING D11a-FSol2-1
5581: PPUSH
5582: CALL_OW 88
// DialogueOff ;
5586: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5590: LD_INT 3
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL_OW 471
// wait ( 0 0$2 ) ;
5602: LD_INT 70
5604: PPUSH
5605: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5609: LD_INT 3
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 472
// end ; end ; if number = 8 then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: EQUAL
5629: IFFALSE 5785
// begin hc_class := 1 ;
5631: LD_ADDR_OWVAR 28
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// hc_sex := sex_female ;
5639: LD_ADDR_OWVAR 27
5643: PUSH
5644: LD_INT 2
5646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5647: LD_ADDR_OWVAR 33
5651: PUSH
5652: LD_STRING SecondCharsGal
5654: ST_TO_ADDR
// hc_face_number := 45 ;
5655: LD_ADDR_OWVAR 34
5659: PUSH
5660: LD_INT 45
5662: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5663: LD_ADDR_OWVAR 26
5667: PUSH
5668: LD_STRING Margherite Simpson
5670: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5671: LD_ADDR_OWVAR 29
5675: PUSH
5676: LD_INT 12
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5686: LD_ADDR_OWVAR 30
5690: PUSH
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5709: LD_ADDR_OWVAR 31
5713: PUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// un = CreateHuman ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: CALL_OW 44
5741: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 87
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_STRING D11e-FSol4-1
5780: PPUSH
5781: CALL_OW 88
// end ; arrivals := arrivals union un ;
5785: LD_ADDR_EXP 45
5789: PUSH
5790: LD_EXP 45
5794: PUSH
5795: LD_VAR 0 3
5799: UNION
5800: ST_TO_ADDR
// end ; end_of_file
5801: LD_VAR 0 2
5805: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
// ruAttackers := [ ] ;
5810: LD_ADDR_EXP 48
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5817: LD_ADDR_EXP 49
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if Difficulty < 3 then
5824: LD_OWVAR 67
5828: PUSH
5829: LD_INT 3
5831: LESS
5832: IFFALSE 5849
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5834: LD_INT 130
5836: PPUSH
5837: LD_INT 81
5839: PPUSH
5840: CALL_OW 428
5844: PPUSH
5845: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_EXP 35
5862: PPUSH
5863: LD_EXP 36
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: LD_INT 4
5878: PPUSH
5879: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: LD_EXP 35
5896: PPUSH
5897: LD_EXP 36
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 67
5925: PPUSH
5926: LD_EXP 35
5930: PPUSH
5931: LD_EXP 36
5935: PPUSH
5936: CALL_OW 12
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 21
5959: PPUSH
5960: LD_EXP 35
5964: PPUSH
5965: LD_EXP 36
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 17
5993: PPUSH
5994: LD_EXP 35
5998: PPUSH
5999: LD_EXP 36
6003: PPUSH
6004: CALL_OW 12
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 6
6014: PPUSH
6015: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 32
6027: PPUSH
6028: LD_EXP 35
6032: PPUSH
6033: LD_EXP 36
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_INT 4
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL 7676 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 32
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6139
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6101: LD_INT 3
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: LD_VAR 0 2
6111: PPUSH
6112: LD_EXP 35
6116: PPUSH
6117: LD_EXP 36
6121: PPUSH
6122: CALL_OW 12
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL 7676 0 6
6137: GO 6098
6139: POP
6140: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 31
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6215
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6189: LD_EXP 35
6193: PPUSH
6194: LD_EXP 36
6198: PPUSH
6199: CALL_OW 12
6203: PPUSH
6204: LD_VAR 0 2
6208: PPUSH
6209: CALL 7786 0 2
6213: GO 6186
6215: POP
6216: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 32
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: CALL 8065 0 3
// end ;
6230: LD_VAR 0 1
6234: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6235: LD_INT 22
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 32
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 69
6263: IFFALSE 6340
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin enable ;
6271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6272: LD_ADDR_VAR 0 1
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6338
// if GetFuel ( i ) < 3 then
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 261
6318: PUSH
6319: LD_INT 3
6321: LESS
6322: IFFALSE 6336
// SetFuel ( i , 3 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: CALL_OW 240
6336: GO 6306
6338: POP
6339: POP
// end ;
6340: PPOPN 1
6342: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6343: LD_OWVAR 67
6347: PUSH
6348: LD_INT 1
6350: GREATER
6351: IFFALSE 6920
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// begin uc_side := 3 ;
6362: LD_ADDR_OWVAR 20
6366: PUSH
6367: LD_INT 3
6369: ST_TO_ADDR
// uc_nation := 3 ;
6370: LD_ADDR_OWVAR 21
6374: PUSH
6375: LD_INT 3
6377: ST_TO_ADDR
// for i := 1 to 2 do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_INT 2
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6506
// begin InitHC_All ( ) ;
6394: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_OWVAR 67
6423: ARRAY
6424: PPUSH
6425: CALL_OW 381
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 91
6446: PPUSH
6447: LD_INT 87
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6460: LD_ADDR_EXP 49
6464: PUSH
6465: LD_EXP 49
6469: PPUSH
6470: LD_EXP 49
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 1
6488: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6489: LD_VAR 0 2
6493: PPUSH
6494: LD_INT 46
6496: PPUSH
6497: LD_INT 78
6499: PPUSH
6500: CALL_OW 114
// end ;
6504: GO 6391
6506: POP
6507: POP
// if Difficulty > 2 then
6508: LD_OWVAR 67
6512: PUSH
6513: LD_INT 2
6515: GREATER
6516: IFFALSE 6648
// begin for i := 1 to 3 do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6646
// begin InitHC_All ( ) ;
6534: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6538: LD_INT 0
6540: PPUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 6
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 381
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6579: LD_VAR 0 2
6583: PPUSH
6584: LD_INT 91
6586: PPUSH
6587: LD_INT 87
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6600: LD_ADDR_EXP 49
6604: PUSH
6605: LD_EXP 49
6609: PPUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 1
6628: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 89
6636: PPUSH
6637: LD_INT 148
6639: PPUSH
6640: CALL_OW 114
// end ;
6644: GO 6531
6646: POP
6647: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 49
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 76
6675: PUSH
6676: LD_INT 99
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 81
6685: PUSH
6686: LD_INT 135
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 111
6695: PUSH
6696: LD_INT 155
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 147
6705: PUSH
6706: LD_INT 158
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6721: LD_INT 1050
6723: PPUSH
6724: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 49
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6911
// begin un := ruAttackersInForest [ i ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 49
6755: PUSH
6756: LD_VAR 0 1
6760: ARRAY
6761: ST_TO_ADDR
// tag := GetTag ( un ) ;
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 110
6776: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 302
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 314
6796: NOT
6797: AND
6798: IFFALSE 6909
// begin if tag <> i then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: NONEQUAL
6810: IFFALSE 6838
// begin SetTag ( un , i ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 109
// tag := i ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_VAR 0 1
6835: ST_TO_ADDR
// end else
6836: GO 6870
// begin SetTag ( un , i + 1 ) ;
6838: LD_VAR 0 2
6842: PPUSH
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: PPUSH
6852: CALL_OW 109
// tag := i + 1 ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_VAR 0 3
6879: PUSH
6880: LD_VAR 0 4
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 3
6894: PUSH
6895: LD_VAR 0 4
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PPUSH
6905: CALL_OW 114
// end ; end ;
6909: GO 6743
6911: POP
6912: POP
// until not ruAttackersInForest ;
6913: LD_EXP 49
6917: NOT
6918: IFFALSE 6721
// end ;
6920: PPOPN 4
6922: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6923: LD_INT 10
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 70
6940: IFFALSE 7289
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
// begin enable ;
6951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 120
6979: PUSH
6980: LD_INT 111
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 50
7014: PUSH
7015: EMPTY
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: ST_TO_ADDR
// if not tmp then
7056: LD_VAR 0 2
7060: NOT
7061: IFFALSE 7159
// begin if not bar then
7063: LD_VAR 0 3
7067: NOT
7068: IFFALSE 7073
// begin disable ;
7070: DISABLE
// exit ;
7071: GO 7289
// end ; tmp := [ ] ;
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: EMPTY
7079: ST_TO_ADDR
// for i in bar do
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7116
// tmp := tmp union UnitsInside ( i ) ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 313
7112: UNION
7113: ST_TO_ADDR
7114: GO 7090
7116: POP
7117: POP
// if not tmp then
7118: LD_VAR 0 2
7122: NOT
7123: IFFALSE 7128
// begin disable ;
7125: DISABLE
// exit ;
7126: GO 7289
// end ; for i in tmp do
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: FOR_IN
7139: IFFALSE 7155
// SetTag ( i , 111 ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 111
7148: PPUSH
7149: CALL_OW 109
7153: GO 7138
7155: POP
7156: POP
// end else
7157: GO 7289
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_INT 10
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 70
7181: ST_TO_ADDR
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7287
// if IsOk ( i ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 302
7204: IFFALSE 7285
// begin if IsInUnit ( i ) then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 310
7215: IFFALSE 7226
// ComExitBuilding ( i ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 122
// wait ( 3 ) ;
7226: LD_INT 3
7228: PPUSH
7229: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: PPUSH
7281: CALL_OW 180
// end ;
7285: GO 7192
7287: POP
7288: POP
// end ; end ;
7289: PPOPN 4
7291: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7292: LD_OWVAR 1
7296: PUSH
7297: LD_INT 4200
7299: GREATER
7300: PUSH
7301: LD_INT 50
7303: PPUSH
7304: CALL_OW 13
7308: AND
7309: IFFALSE 7400
7311: GO 7313
7313: DISABLE
7314: LD_INT 0
7316: PPUSH
// begin uc_side := 3 ;
7317: LD_ADDR_OWVAR 20
7321: PUSH
7322: LD_INT 3
7324: ST_TO_ADDR
// uc_nation := nation_russian ;
7325: LD_ADDR_OWVAR 21
7329: PUSH
7330: LD_INT 3
7332: ST_TO_ADDR
// InitHC_All ( ) ;
7333: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7337: LD_INT 0
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: CALL_OW 382
// un := CreateHuman ;
7347: LD_ADDR_VAR 0 1
7351: PUSH
7352: CALL_OW 44
7356: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7357: LD_VAR 0 1
7361: PPUSH
7362: LD_INT 51
7364: PPUSH
7365: LD_INT 7
7367: PPUSH
7368: LD_INT 12
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 50
// wait ( 0 0$1 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7385: LD_VAR 0 1
7389: PPUSH
7390: LD_INT 106
7392: PPUSH
7393: LD_INT 83
7395: PPUSH
7396: CALL_OW 111
// end ;
7400: PPOPN 1
7402: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7403: LD_OWVAR 1
7407: PUSH
7408: LD_INT 21000
7410: GREATER
7411: PUSH
7412: LD_INT 45
7414: PPUSH
7415: CALL_OW 13
7419: AND
7420: IFFALSE 7535
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
// begin uc_side := 3 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 3
7435: ST_TO_ADDR
// uc_nation := nation_russian ;
7436: LD_ADDR_OWVAR 21
7440: PUSH
7441: LD_INT 3
7443: ST_TO_ADDR
// InitHC_All ( ) ;
7444: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7448: LD_INT 0
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 384
// un := CreateHuman ;
7458: LD_ADDR_VAR 0 1
7462: PUSH
7463: CALL_OW 44
7467: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_INT 91
7475: PPUSH
7476: LD_INT 18
7478: PPUSH
7479: LD_INT 15
7481: PPUSH
7482: LD_INT 1
7484: PPUSH
7485: CALL_OW 50
// wait ( 0 0$1 ) ;
7489: LD_INT 35
7491: PPUSH
7492: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 106
7503: PPUSH
7504: LD_INT 83
7506: PPUSH
7507: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_INT 67
7518: PPUSH
7519: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7523: LD_VAR 0 1
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 183
// end ; end_of_file
7535: PPOPN 1
7537: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
// if not characters then
7543: LD_VAR 0 1
7547: NOT
7548: IFFALSE 7552
// exit ;
7550: GO 7631
// speaker := characters [ rand ( 1 , characters ) ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 1
7561: PUSH
7562: LD_INT 1
7564: PPUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 12
7574: ARRAY
7575: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 258
7585: PUSH
7586: LD_INT 1
7588: EQUAL
7589: IFFALSE 7607
// Say ( speaker , dialogMID ) else
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 88
7605: GO 7621
// Say ( speaker , dialogFID ) ;
7607: LD_VAR 0 6
7611: PPUSH
7612: LD_VAR 0 3
7616: PPUSH
7617: CALL_OW 88
// result := speaker ;
7621: LD_ADDR_VAR 0 4
7625: PUSH
7626: LD_VAR 0 6
7630: ST_TO_ADDR
// end ;
7631: LD_VAR 0 4
7635: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for i in charactersList do
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: FOR_IN
7651: IFFALSE 7669
// SaveCharacters ( i , ident ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_VAR 0 2
7662: PPUSH
7663: CALL_OW 38
7667: GO 7650
7669: POP
7670: POP
// end ;
7671: LD_VAR 0 3
7675: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
// for i := 1 to count do
7682: LD_ADDR_VAR 0 8
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_VAR 0 6
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7779
// begin uc_side = side ;
7700: LD_ADDR_OWVAR 20
7704: PUSH
7705: LD_VAR 0 1
7709: ST_TO_ADDR
// uc_nation = nation ;
7710: LD_ADDR_OWVAR 21
7714: PUSH
7715: LD_VAR 0 2
7719: ST_TO_ADDR
// hc_gallery =  ;
7720: LD_ADDR_OWVAR 33
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// hc_name =  ;
7728: LD_ADDR_OWVAR 26
7732: PUSH
7733: LD_STRING 
7735: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_VAR 0 5
7743: PPUSH
7744: LD_VAR 0 4
7748: PPUSH
7749: CALL_OW 380
// un = CreateHuman ;
7753: LD_ADDR_VAR 0 10
7757: PUSH
7758: CALL_OW 44
7762: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7763: LD_VAR 0 10
7767: PPUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 52
// end ;
7777: GO 7697
7779: POP
7780: POP
// end ;
7781: LD_VAR 0 7
7785: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7786: LD_INT 0
7788: PPUSH
7789: PPUSH
7790: PPUSH
// uc_side := GetSide ( b ) ;
7791: LD_ADDR_OWVAR 20
7795: PUSH
7796: LD_VAR 0 2
7800: PPUSH
7801: CALL_OW 255
7805: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7806: LD_ADDR_OWVAR 21
7810: PUSH
7811: LD_VAR 0 2
7815: PPUSH
7816: CALL_OW 248
7820: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7821: LD_INT 0
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 2
7845: PPUSH
7846: CALL_OW 254
7850: PUSH
7851: LD_INT 3
7853: MINUS
7854: ST_TO_ADDR
// if dir < 0 then
7855: LD_VAR 0 5
7859: PUSH
7860: LD_INT 0
7862: LESS
7863: IFFALSE 7879
// dir := 6 + dir ;
7865: LD_ADDR_VAR 0 5
7869: PUSH
7870: LD_INT 6
7872: PUSH
7873: LD_VAR 0 5
7877: PLUS
7878: ST_TO_ADDR
// un := CreateHuman ;
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: CALL_OW 44
7888: ST_TO_ADDR
// SetDir ( un , dir ) ;
7889: LD_VAR 0 4
7893: PPUSH
7894: LD_VAR 0 5
7898: PPUSH
7899: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 52
// end ;
7917: LD_VAR 0 3
7921: RET
// export function PrepareDifficulty ; begin
7922: LD_INT 0
7924: PPUSH
// case Difficulty of 1 :
7925: LD_OWVAR 67
7929: PUSH
7930: LD_INT 1
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7957
7938: POP
// begin RuSolMinLevel = 2 ;
7939: LD_ADDR_EXP 35
7943: PUSH
7944: LD_INT 2
7946: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7947: LD_ADDR_EXP 36
7951: PUSH
7952: LD_INT 3
7954: ST_TO_ADDR
// end ; 2 :
7955: GO 8018
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7984
7965: POP
// begin RuSolMinLevel = 3 ;
7966: LD_ADDR_EXP 35
7970: PUSH
7971: LD_INT 3
7973: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7974: LD_ADDR_EXP 36
7978: PUSH
7979: LD_INT 5
7981: ST_TO_ADDR
// end ; 3 .. 4 :
7982: GO 8018
7984: LD_INT 3
7986: DOUBLE
7987: GREATEREQUAL
7988: IFFALSE 7996
7990: LD_INT 4
7992: DOUBLE
7993: LESSEQUAL
7994: IFTRUE 7998
7996: GO 8017
7998: POP
// begin RuSolMinLevel = 4 ;
7999: LD_ADDR_EXP 35
8003: PUSH
8004: LD_INT 4
8006: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8007: LD_ADDR_EXP 36
8011: PUSH
8012: LD_INT 6
8014: ST_TO_ADDR
// end ; end ;
8015: GO 8018
8017: POP
// end ;
8018: LD_VAR 0 1
8022: RET
// export function ShowQuery1 ; begin
8023: LD_INT 0
8025: PPUSH
// result := Query ( QKill ) ;
8026: LD_ADDR_VAR 0 1
8030: PUSH
8031: LD_STRING QKill
8033: PPUSH
8034: CALL_OW 97
8038: ST_TO_ADDR
// end ;
8039: LD_VAR 0 1
8043: RET
// export function ShowQuery2 ; begin
8044: LD_INT 0
8046: PPUSH
// result := Query ( QKill2 ) ;
8047: LD_ADDR_VAR 0 1
8051: PUSH
8052: LD_STRING QKill2
8054: PPUSH
8055: CALL_OW 97
8059: ST_TO_ADDR
// end ;
8060: LD_VAR 0 1
8064: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8071: LD_ADDR_VAR 0 7
8075: PUSH
8076: LD_INT 48
8078: PUSH
8079: LD_INT 49
8081: PUSH
8082: LD_INT 50
8084: PUSH
8085: LD_INT 20
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 51
8093: PUSH
8094: LD_INT 52
8096: PUSH
8097: LD_INT 69
8099: PUSH
8100: LD_INT 39
8102: PUSH
8103: LD_INT 34
8105: PUSH
8106: LD_INT 40
8108: PUSH
8109: LD_INT 53
8111: PUSH
8112: LD_INT 71
8114: PUSH
8115: LD_INT 57
8117: PUSH
8118: LD_INT 58
8120: PUSH
8121: LD_INT 44
8123: PUSH
8124: LD_INT 32
8126: PUSH
8127: LD_INT 27
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 59
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: LD_INT 55
8144: PUSH
8145: LD_INT 56
8147: PUSH
8148: LD_INT 63
8150: PUSH
8151: LD_INT 64
8153: PUSH
8154: LD_INT 65
8156: PUSH
8157: LD_INT 30
8159: PUSH
8160: LD_INT 31
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 82
8174: PUSH
8175: LD_INT 83
8177: PUSH
8178: LD_INT 84
8180: PUSH
8181: LD_INT 85
8183: PUSH
8184: LD_INT 86
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
// for i = 1 to list do
8226: LD_ADDR_VAR 0 5
8230: PUSH
8231: DOUBLE
8232: LD_INT 1
8234: DEC
8235: ST_TO_ADDR
8236: LD_VAR 0 7
8240: PUSH
8241: FOR_TO
8242: IFFALSE 8314
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8244: LD_VAR 0 7
8248: PUSH
8249: LD_VAR 0 5
8253: ARRAY
8254: PPUSH
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 321
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 7
8273: PUSH
8274: LD_VAR 0 5
8278: ARRAY
8279: PPUSH
8280: LD_VAR 0 3
8284: PPUSH
8285: CALL_OW 482
8289: AND
8290: IFFALSE 8312
// AddComResearch ( lab , list [ i ] ) ;
8292: LD_VAR 0 2
8296: PPUSH
8297: LD_VAR 0 7
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: PPUSH
8308: CALL_OW 184
8312: GO 8241
8314: POP
8315: POP
// end ;
8316: LD_VAR 0 4
8320: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8321: LD_INT 0
8323: PPUSH
8324: PPUSH
8325: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8326: LD_INT 22
8328: PUSH
8329: LD_VAR 0 1
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_VAR 0 3
8361: LESSEQUAL
8362: IFFALSE 8470
// begin for i = 1 to vehCount do
8364: LD_ADDR_VAR 0 9
8368: PUSH
8369: DOUBLE
8370: LD_INT 1
8372: DEC
8373: ST_TO_ADDR
8374: LD_VAR 0 3
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8468
// begin weapon := weaponTab [ i ] ;
8382: LD_ADDR_VAR 0 10
8386: PUSH
8387: LD_VAR 0 4
8391: PUSH
8392: LD_VAR 0 9
8396: ARRAY
8397: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8398: LD_VAR 0 10
8402: PUSH
8403: LD_INT 46
8405: EQUAL
8406: IFFALSE 8437
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 24
8415: PPUSH
8416: LD_VAR 0 5
8420: PPUSH
8421: LD_VAR 0 6
8425: PPUSH
8426: LD_VAR 0 10
8430: PPUSH
8431: CALL_OW 185
8435: GO 8466
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 7
8446: PPUSH
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_VAR 0 6
8456: PPUSH
8457: LD_VAR 0 10
8461: PPUSH
8462: CALL_OW 185
// end ;
8466: GO 8379
8468: POP
8469: POP
// end ; end ;
8470: LD_VAR 0 8
8474: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8475: LD_INT 0
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_VAR 0 2
8492: PPUSH
8493: CALL_OW 313
8497: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_VAR 0 3
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 750
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 3
8542: PUSH
8543: LD_INT 54
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 70
8563: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 3
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 24
8601: PUSH
8602: LD_INT 1000
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: PPUSH
8621: CALL_OW 70
8625: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8626: LD_VAR 0 6
8630: NOT
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_VAR 0 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 25
8646: PUSH
8647: LD_INT 2
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 250
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 69
8673: NOT
8674: AND
8675: IFFALSE 8679
// exit ;
8677: GO 8837
// if buildingsList and engineerOkInside then
8679: LD_VAR 0 6
8683: PUSH
8684: LD_VAR 0 8
8688: AND
8689: IFFALSE 8700
// ComExitBuilding ( engineerOkInside ) ;
8691: LD_VAR 0 8
8695: PPUSH
8696: CALL_OW 122
// if buildingsList and engineerOkOutside then
8700: LD_VAR 0 6
8704: PUSH
8705: LD_VAR 0 9
8709: AND
8710: IFFALSE 8730
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8712: LD_VAR 0 9
8716: PPUSH
8717: LD_VAR 0 6
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8730: LD_VAR 0 6
8734: PUSH
8735: LD_INT 0
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 4
8743: PUSH
8744: LD_INT 0
8746: EQUAL
8747: AND
8748: PUSH
8749: LD_VAR 0 9
8753: AND
8754: IFFALSE 8770
// ComEnterUnit ( engineerOkOutside , depot ) ;
8756: LD_VAR 0 9
8760: PPUSH
8761: LD_VAR 0 2
8765: PPUSH
8766: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8770: LD_VAR 0 9
8774: PUSH
8775: LD_VAR 0 6
8779: PUSH
8780: LD_INT 0
8782: EQUAL
8783: AND
8784: PUSH
8785: LD_VAR 0 4
8789: AND
8790: IFFALSE 8837
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8792: LD_VAR 0 9
8796: PPUSH
8797: LD_VAR 0 4
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: LD_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 4
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PPUSH
8824: LD_VAR 0 4
8828: PUSH
8829: LD_INT 4
8831: ARRAY
8832: PPUSH
8833: CALL_OW 145
// end ;
8837: LD_VAR 0 5
8841: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8842: LD_INT 0
8844: PPUSH
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8853: LD_ADDR_VAR 0 6
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 4
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 24
8892: PUSH
8893: LD_INT 251
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 69
8910: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8911: LD_ADDR_VAR 0 7
8915: PUSH
8916: LD_VAR 0 3
8920: PPUSH
8921: LD_INT 22
8923: PUSH
8924: LD_VAR 0 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 4
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 50
8955: PUSH
8956: EMPTY
8957: LIST
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 70
8969: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8970: LD_ADDR_VAR 0 10
8974: PUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 22
8982: PUSH
8983: LD_VAR 0 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 21
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 3
9004: PUSH
9005: LD_INT 25
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 3
9021: PUSH
9022: LD_INT 24
9024: PUSH
9025: LD_INT 750
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 70
9046: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_VAR 0 2
9056: PPUSH
9057: LD_INT 22
9059: PUSH
9060: LD_VAR 0 1
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: LD_INT 25
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 24
9101: PUSH
9102: LD_INT 1000
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 70
9123: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9124: LD_VAR 0 10
9128: NOT
9129: PUSH
9130: LD_VAR 0 11
9134: NOT
9135: AND
9136: PUSH
9137: LD_VAR 0 6
9141: NOT
9142: AND
9143: IFFALSE 9147
// exit ;
9145: GO 9353
// if damageUnits and sci_list then
9147: LD_VAR 0 10
9151: PUSH
9152: LD_VAR 0 6
9156: AND
9157: IFFALSE 9173
// ComMoveToArea ( damageUnits , healArea ) ;
9159: LD_VAR 0 10
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 113
// if unitsToHeal and sci_list then
9173: LD_VAR 0 11
9177: PUSH
9178: LD_VAR 0 6
9182: AND
9183: IFFALSE 9194
// ComExitBuilding ( sci_list ) ;
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9194: LD_VAR 0 11
9198: PUSH
9199: LD_VAR 0 7
9203: AND
9204: IFFALSE 9224
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9206: LD_VAR 0 7
9210: PPUSH
9211: LD_VAR 0 11
9215: PUSH
9216: LD_INT 1
9218: ARRAY
9219: PPUSH
9220: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9224: LD_VAR 0 10
9228: PUSH
9229: LD_INT 0
9231: EQUAL
9232: PUSH
9233: LD_VAR 0 11
9237: PUSH
9238: LD_INT 0
9240: EQUAL
9241: AND
9242: PUSH
9243: LD_VAR 0 7
9247: AND
9248: IFFALSE 9353
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9250: LD_ADDR_VAR 0 12
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_VAR 0 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 30
9279: PUSH
9280: LD_INT 8
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9297: LD_ADDR_VAR 0 13
9301: PUSH
9302: LD_INT 1
9304: PPUSH
9305: LD_VAR 0 12
9309: PPUSH
9310: CALL_OW 12
9314: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9315: LD_VAR 0 7
9319: PPUSH
9320: LD_INT 3
9322: PUSH
9323: LD_INT 60
9325: PUSH
9326: EMPTY
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 72
9337: PPUSH
9338: LD_VAR 0 12
9342: PUSH
9343: LD_VAR 0 13
9347: ARRAY
9348: PPUSH
9349: CALL_OW 120
// end ; end ;
9353: LD_VAR 0 5
9357: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9358: LD_INT 0
9360: PPUSH
9361: PPUSH
9362: PPUSH
9363: PPUSH
9364: PPUSH
// tmp := [ ] ;
9365: LD_ADDR_VAR 0 6
9369: PUSH
9370: EMPTY
9371: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9372: LD_ADDR_VAR 0 7
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 30
9391: PUSH
9392: LD_INT 32
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if bunkers then
9408: LD_VAR 0 7
9412: IFFALSE 9482
// for i in bunkers do
9414: LD_ADDR_VAR 0 4
9418: PUSH
9419: LD_VAR 0 7
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9480
// for j in UnitsInside ( i ) do
9427: LD_ADDR_VAR 0 5
9431: PUSH
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 313
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9476
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9445: LD_ADDR_VAR 0 6
9449: PUSH
9450: LD_VAR 0 6
9454: PPUSH
9455: LD_VAR 0 6
9459: PUSH
9460: LD_INT 1
9462: PLUS
9463: PPUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 1
9473: ST_TO_ADDR
9474: GO 9442
9476: POP
9477: POP
9478: GO 9424
9480: POP
9481: POP
// if tmp then
9482: LD_VAR 0 6
9486: IFFALSE 9526
// begin ComExitBuilding ( tmp ) ;
9488: LD_VAR 0 6
9492: PPUSH
9493: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9497: LD_VAR 0 6
9501: PPUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: CALL_OW 250
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 251
9521: PPUSH
9522: CALL_OW 174
// end ; end ;
9526: LD_VAR 0 3
9530: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9531: LD_INT 0
9533: PPUSH
9534: PPUSH
9535: PPUSH
// enable ;
9536: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_VAR 0 3
9546: PPUSH
9547: CALL_OW 435
9551: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_INT 22
9559: PUSH
9560: LD_VAR 0 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 34
9571: PUSH
9572: LD_VAR 0 2
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9590: LD_VAR 0 5
9594: PUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: CALL_OW 435
9604: AND
9605: PUSH
9606: LD_VAR 0 6
9610: AND
9611: IFFALSE 9644
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9613: LD_VAR 0 5
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 6
9626: PUSH
9627: LD_INT 1
9629: ARRAY
9630: PPUSH
9631: LD_VAR 0 6
9635: PUSH
9636: LD_INT 2
9638: ARRAY
9639: PPUSH
9640: CALL_OW 177
// end ;
9644: LD_VAR 0 4
9648: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_INT 22
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 56
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 700
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 60
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 8
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 9
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 70
9771: PUSH
9772: LD_EXP 48
9776: PUSH
9777: LD_EXP 49
9781: UNION
9782: DIFF
9783: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9784: LD_ADDR_VAR 0 7
9788: PUSH
9789: LD_VAR 0 2
9793: PPUSH
9794: LD_INT 22
9796: PUSH
9797: LD_VAR 0 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 32
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 58
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_INT 24
9824: PUSH
9825: LD_INT 251
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 70
9842: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_VAR 0 2
9852: PPUSH
9853: LD_INT 22
9855: PUSH
9856: LD_VAR 0 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 24
9895: PUSH
9896: LD_INT 251
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 70
9912: ST_TO_ADDR
// if barrackList then
9913: LD_VAR 0 9
9917: IFFALSE 10073
// begin if turretList = 0 then
9919: LD_VAR 0 7
9923: PUSH
9924: LD_INT 0
9926: EQUAL
9927: IFFALSE 9965
// begin if soldiersList then
9929: LD_VAR 0 6
9933: IFFALSE 9963
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9935: LD_VAR 0 6
9939: PPUSH
9940: LD_VAR 0 9
9944: PUSH
9945: LD_INT 1
9947: PPUSH
9948: LD_VAR 0 9
9952: PPUSH
9953: CALL_OW 12
9957: ARRAY
9958: PPUSH
9959: CALL_OW 120
// end else
9963: GO 10073
// begin for i in barrackList do
9965: LD_ADDR_VAR 0 4
9969: PUSH
9970: LD_VAR 0 9
9974: PUSH
9975: FOR_IN
9976: IFFALSE 10071
// begin if not turretList then
9978: LD_VAR 0 7
9982: NOT
9983: IFFALSE 9989
// exit ;
9985: POP
9986: POP
9987: GO 10073
// insideUnits = UnitsInside ( i ) ;
9989: LD_ADDR_VAR 0 10
9993: PUSH
9994: LD_VAR 0 4
9998: PPUSH
9999: CALL_OW 313
10003: ST_TO_ADDR
// if insideUnits then
10004: LD_VAR 0 10
10008: IFFALSE 10069
// begin tmp := insideUnits [ 1 ] ;
10010: LD_ADDR_VAR 0 8
10014: PUSH
10015: LD_VAR 0 10
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10024: LD_VAR 0 8
10028: PPUSH
10029: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10033: LD_VAR 0 8
10037: PPUSH
10038: LD_VAR 0 7
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10051: LD_ADDR_VAR 0 7
10055: PUSH
10056: LD_VAR 0 7
10060: PPUSH
10061: LD_INT 1
10063: PPUSH
10064: CALL_OW 3
10068: ST_TO_ADDR
// end ; end ;
10069: GO 9975
10071: POP
10072: POP
// end ; end ; end ;
10073: LD_VAR 0 3
10077: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10086: LD_ADDR_VAR 0 8
10090: PUSH
10091: LD_INT 22
10093: PUSH
10094: LD_VAR 0 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 21
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 34
10115: PUSH
10116: LD_INT 52
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: LIST
10127: PPUSH
10128: CALL_OW 69
10132: ST_TO_ADDR
// if not craneList then
10133: LD_VAR 0 8
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10576
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10142: LD_ADDR_VAR 0 9
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_VAR 0 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: LD_INT 24
10174: PUSH
10175: LD_INT 1000
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10199: LD_VAR 0 9
10203: PUSH
10204: LD_VAR 0 8
10208: PPUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 750
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 72
10223: AND
10224: IFFALSE 10259
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10226: LD_VAR 0 8
10230: PPUSH
10231: LD_INT 24
10233: PUSH
10234: LD_INT 750
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 72
10245: PPUSH
10246: LD_VAR 0 9
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: PPUSH
10255: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10259: LD_VAR 0 8
10263: PPUSH
10264: LD_INT 3
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 750
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: IFFALSE 10323
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10287: LD_VAR 0 8
10291: PPUSH
10292: LD_INT 3
10294: PUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 72
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10323: LD_VAR 0 8
10327: PUSH
10328: LD_VAR 0 9
10332: PUSH
10333: LD_INT 0
10335: EQUAL
10336: AND
10337: PUSH
10338: LD_VAR 0 3
10342: AND
10343: IFFALSE 10390
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10345: LD_VAR 0 8
10349: PPUSH
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 1
10357: ARRAY
10358: PPUSH
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 2
10366: ARRAY
10367: PPUSH
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 3
10375: ARRAY
10376: PPUSH
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 4
10384: ARRAY
10385: PPUSH
10386: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10390: LD_ADDR_VAR 0 7
10394: PUSH
10395: LD_VAR 0 2
10399: PPUSH
10400: LD_INT 22
10402: PUSH
10403: LD_VAR 0 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 52
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: LD_INT 24
10437: PUSH
10438: LD_INT 750
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 70
10459: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10460: LD_ADDR_VAR 0 6
10464: PUSH
10465: LD_VAR 0 2
10469: PPUSH
10470: LD_INT 22
10472: PUSH
10473: LD_VAR 0 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 0
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 70
10518: ST_TO_ADDR
// if crane then
10519: LD_VAR 0 7
10523: IFFALSE 10576
// for i in crane do
10525: LD_ADDR_VAR 0 5
10529: PUSH
10530: LD_VAR 0 7
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10574
// begin if dep then
10538: LD_VAR 0 6
10542: IFFALSE 10558
// ComMoveUnit ( i , dep ) ;
10544: LD_VAR 0 5
10548: PPUSH
10549: LD_VAR 0 6
10553: PPUSH
10554: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10558: LD_VAR 0 5
10562: PPUSH
10563: CALL_OW 311
10567: PPUSH
10568: CALL 82202 0 1
// end ;
10572: GO 10535
10574: POP
10575: POP
// end ;
10576: LD_VAR 0 4
10580: RET
// export function BuildBulldozer ; begin
10581: LD_INT 0
10583: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10584: LD_INT 17
10586: PPUSH
10587: CALL_OW 302
10591: NOT
10592: PUSH
10593: LD_INT 17
10595: PPUSH
10596: CALL_OW 255
10600: PUSH
10601: LD_INT 3
10603: NONEQUAL
10604: OR
10605: IFFALSE 10609
// exit ;
10607: GO 10628
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10609: LD_INT 17
10611: PPUSH
10612: LD_INT 24
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: LD_INT 53
10623: PPUSH
10624: CALL_OW 185
// end ;
10628: LD_VAR 0 1
10632: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
// if not bulldozer then
10640: LD_VAR 0 1
10644: NOT
10645: IFFALSE 10649
// exit ;
10647: GO 10931
// list := ListEnvironmentArea ( area ) ;
10649: LD_ADDR_VAR 0 5
10653: PUSH
10654: LD_VAR 0 2
10658: PPUSH
10659: CALL_OW 353
10663: ST_TO_ADDR
// tmp := [ ] ;
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: EMPTY
10670: ST_TO_ADDR
// for i = 1 to list do
10671: LD_ADDR_VAR 0 4
10675: PUSH
10676: DOUBLE
10677: LD_INT 1
10679: DEC
10680: ST_TO_ADDR
10681: LD_VAR 0 5
10685: PUSH
10686: FOR_TO
10687: IFFALSE 10785
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10689: LD_VAR 0 5
10693: PUSH
10694: LD_VAR 0 4
10698: ARRAY
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 5
10708: PUSH
10709: LD_VAR 0 4
10713: ARRAY
10714: PUSH
10715: LD_INT 2
10717: ARRAY
10718: PPUSH
10719: CALL_OW 554
10723: IFFALSE 10783
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_VAR 0 6
10734: PPUSH
10735: LD_VAR 0 6
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: LD_VAR 0 5
10748: PUSH
10749: LD_VAR 0 4
10753: ARRAY
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_VAR 0 5
10763: PUSH
10764: LD_VAR 0 4
10768: ARRAY
10769: PUSH
10770: LD_INT 2
10772: ARRAY
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 1
10782: ST_TO_ADDR
// end ;
10783: GO 10686
10785: POP
10786: POP
// ComStop ( bulldozer ) ;
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10796: LD_ADDR_VAR 0 7
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 250
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 251
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: ST_TO_ADDR
// for i = tmp downto 1 do
10825: LD_ADDR_VAR 0 4
10829: PUSH
10830: DOUBLE
10831: LD_VAR 0 6
10835: INC
10836: ST_TO_ADDR
10837: LD_INT 1
10839: PUSH
10840: FOR_DOWNTO
10841: IFFALSE 10929
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10843: LD_ADDR_VAR 0 7
10847: PUSH
10848: LD_VAR 0 7
10852: PUSH
10853: LD_INT 1
10855: ARRAY
10856: PPUSH
10857: LD_VAR 0 7
10861: PUSH
10862: LD_INT 2
10864: ARRAY
10865: PPUSH
10866: LD_VAR 0 6
10870: PPUSH
10871: CALL 11032 0 3
10875: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10876: LD_VAR 0 1
10880: PPUSH
10881: LD_VAR 0 7
10885: PUSH
10886: LD_INT 1
10888: ARRAY
10889: PPUSH
10890: LD_VAR 0 7
10894: PUSH
10895: LD_INT 2
10897: ARRAY
10898: PPUSH
10899: CALL 10936 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10903: LD_ADDR_VAR 0 6
10907: PUSH
10908: LD_VAR 0 6
10912: PPUSH
10913: LD_VAR 0 7
10917: PUSH
10918: LD_INT 3
10920: ARRAY
10921: PPUSH
10922: CALL_OW 3
10926: ST_TO_ADDR
// end ;
10927: GO 10840
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10936: LD_INT 0
10938: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: CALL_OW 351
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: CALL_OW 554
10968: AND
10969: PUSH
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: CALL_OW 488
10984: AND
10985: PUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: CALL_OW 428
11000: PUSH
11001: LD_INT 1
11003: NEG
11004: EQUAL
11005: AND
11006: IFFALSE 11027
// AddComMoveXY ( bulldozer , x , y ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_VAR 0 2
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: CALL_OW 171
// end ;
11027: LD_VAR 0 4
11031: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
// dist := 99999 ;
11041: LD_ADDR_VAR 0 6
11045: PUSH
11046: LD_INT 99999
11048: ST_TO_ADDR
// for i = 1 to list do
11049: LD_ADDR_VAR 0 5
11053: PUSH
11054: DOUBLE
11055: LD_INT 1
11057: DEC
11058: ST_TO_ADDR
11059: LD_VAR 0 3
11063: PUSH
11064: FOR_TO
11065: IFFALSE 11203
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11067: LD_ADDR_VAR 0 7
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_VAR 0 3
11086: PUSH
11087: LD_VAR 0 5
11091: ARRAY
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 3
11101: PUSH
11102: LD_VAR 0 5
11106: ARRAY
11107: PUSH
11108: LD_INT 2
11110: ARRAY
11111: PPUSH
11112: CALL_OW 298
11116: ST_TO_ADDR
// if d = 0 then
11117: LD_VAR 0 7
11121: PUSH
11122: LD_INT 0
11124: EQUAL
11125: IFFALSE 11129
// continue ;
11127: GO 11064
// if d < dist then
11129: LD_VAR 0 7
11133: PUSH
11134: LD_VAR 0 6
11138: LESS
11139: IFFALSE 11201
// begin _x := list [ i ] [ 1 ] ;
11141: LD_ADDR_VAR 0 8
11145: PUSH
11146: LD_VAR 0 3
11150: PUSH
11151: LD_VAR 0 5
11155: ARRAY
11156: PUSH
11157: LD_INT 1
11159: ARRAY
11160: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11161: LD_ADDR_VAR 0 9
11165: PUSH
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 5
11175: ARRAY
11176: PUSH
11177: LD_INT 2
11179: ARRAY
11180: ST_TO_ADDR
// _i := i ;
11181: LD_ADDR_VAR 0 10
11185: PUSH
11186: LD_VAR 0 5
11190: ST_TO_ADDR
// dist := d ;
11191: LD_ADDR_VAR 0 6
11195: PUSH
11196: LD_VAR 0 7
11200: ST_TO_ADDR
// end ; end ;
11201: GO 11064
11203: POP
11204: POP
// result := [ _x , _y , _i , dist ] ;
11205: LD_ADDR_VAR 0 4
11209: PUSH
11210: LD_VAR 0 8
11214: PUSH
11215: LD_VAR 0 9
11219: PUSH
11220: LD_VAR 0 10
11224: PUSH
11225: LD_VAR 0 6
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: ST_TO_ADDR
// end ; end_of_file
11236: LD_VAR 0 4
11240: RET
// export function Action ; begin
11241: LD_INT 0
11243: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11244: LD_INT 66
11246: PPUSH
11247: LD_INT 4
11249: PPUSH
11250: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11254: LD_INT 22
11256: PUSH
11257: LD_INT 1
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 2
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: PUSH
11283: LD_INT 0
11285: EQUAL
11286: IFFALSE 11300
// SetClass ( JMM , 2 ) ;
11288: LD_EXP 1
11292: PPUSH
11293: LD_INT 2
11295: PPUSH
11296: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11300: LD_STRING M1
11302: PPUSH
11303: CALL_OW 337
// case Difficulty of 1 :
11307: LD_OWVAR 67
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11330
11320: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11321: LD_STRING M1-1
11323: PPUSH
11324: CALL_OW 337
11328: GO 11385
11330: LD_INT 2
11332: DOUBLE
11333: EQUAL
11334: IFTRUE 11338
11336: GO 11348
11338: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11339: LD_STRING M1-2
11341: PPUSH
11342: CALL_OW 337
11346: GO 11385
11348: LD_INT 3
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11366
11356: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11357: LD_STRING M1-3
11359: PPUSH
11360: CALL_OW 337
11364: GO 11385
11366: LD_INT 4
11368: DOUBLE
11369: EQUAL
11370: IFTRUE 11374
11372: GO 11384
11374: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11375: LD_STRING M1-4
11377: PPUSH
11378: CALL_OW 337
11382: GO 11385
11384: POP
// ChangeMissionObjectives ( M1cont ) ;
11385: LD_STRING M1cont
11387: PPUSH
11388: CALL_OW 337
// SaveForQuickRestart ;
11392: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11396: LD_INT 525
11398: PPUSH
11399: LD_INT 700
11401: PPUSH
11402: CALL_OW 12
11406: PPUSH
11407: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11411: LD_INT 5
11413: PPUSH
11414: LD_INT 82
11416: PPUSH
11417: LD_INT 38
11419: PPUSH
11420: LD_INT 10
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 56
// wait ( 0 0$14 ) ;
11430: LD_INT 490
11432: PPUSH
11433: CALL_OW 67
// firstCrateSpawn := true ;
11437: LD_ADDR_EXP 41
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// end ;
11445: LD_VAR 0 1
11449: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11450: LD_EXP 41
11454: IFFALSE 11843
11456: GO 11458
11458: DISABLE
11459: LD_INT 0
11461: PPUSH
// begin if IsOk ( Lisa ) then
11462: LD_EXP 2
11466: PPUSH
11467: CALL_OW 302
11471: IFFALSE 11487
// Say ( Lisa , DR0-Lisa-1 ) else
11473: LD_EXP 2
11477: PPUSH
11478: LD_STRING DR0-Lisa-1
11480: PPUSH
11481: CALL_OW 88
11485: GO 11633
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11487: LD_INT 22
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 26
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: LD_INT 25
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 69
11577: PUSH
11578: LD_EXP 1
11582: PUSH
11583: LD_EXP 8
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 7
11602: PUSH
11603: LD_EXP 4
11607: PUSH
11608: LD_EXP 3
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: DIFF
11622: PPUSH
11623: LD_STRING DR0-Sol1-1
11625: PPUSH
11626: LD_STRING DR0-Sol1-1
11628: PPUSH
11629: CALL 7538 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 26
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: LD_INT 25
11673: PUSH
11674: LD_INT 1
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: PUSH
11729: LD_EXP 1
11733: PUSH
11734: LD_EXP 8
11738: PUSH
11739: LD_EXP 5
11743: PUSH
11744: LD_EXP 2
11748: PUSH
11749: LD_EXP 6
11753: PUSH
11754: LD_EXP 7
11758: PUSH
11759: LD_EXP 4
11763: PUSH
11764: LD_EXP 3
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: DIFF
11779: PPUSH
11780: LD_STRING DR0-Sol2-1
11782: PPUSH
11783: LD_STRING DR0-Sol2-1
11785: PPUSH
11786: CALL 7538 0 3
11790: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11791: LD_EXP 4
11795: PPUSH
11796: CALL_OW 302
11800: IFFALSE 11814
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11802: LD_EXP 4
11806: PPUSH
11807: LD_STRING DR0-Cyrus-1
11809: PPUSH
11810: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11814: LD_EXP 2
11818: PPUSH
11819: CALL_OW 302
11823: PUSH
11824: LD_VAR 0 1
11828: OR
11829: IFFALSE 11843
// Say ( JMM , DR0-JMM-1 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING DR0-JMM-1
11838: PPUSH
11839: CALL_OW 88
// end ;
11843: PPOPN 1
11845: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11846: LD_EXP 5
11850: PPUSH
11851: CALL_OW 302
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 1
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 16
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: PUSH
11885: LD_INT 0
11887: GREATER
11888: AND
11889: PUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 463
11897: NOT
11898: AND
11899: IFFALSE 12177
11901: GO 11903
11903: DISABLE
// begin DialogueOn ;
11904: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11908: LD_EXP 5
11912: PPUSH
11913: LD_STRING D10-Frank-1
11915: PPUSH
11916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: LD_EXP 1
12004: PUSH
12005: LD_EXP 5
12009: PUSH
12010: LD_EXP 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: DIFF
12020: PPUSH
12021: LD_STRING D10-Sol1-1
12023: PPUSH
12024: LD_STRING D10-FSol1-1
12026: PPUSH
12027: CALL 7538 0 3
// Say ( Frank , D10-Frank-2 ) ;
12031: LD_EXP 5
12035: PPUSH
12036: LD_STRING D10-Frank-2
12038: PPUSH
12039: CALL_OW 88
// if IsOk ( Lisa ) then
12043: LD_EXP 2
12047: PPUSH
12048: CALL_OW 302
12052: IFFALSE 12068
// Say ( Lisa , D10-Lisa-2 ) else
12054: LD_EXP 2
12058: PPUSH
12059: LD_STRING D10-Lisa-2
12061: PPUSH
12062: CALL_OW 88
12066: GO 12173
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12068: LD_INT 22
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 21
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: LD_EXP 1
12152: PUSH
12153: LD_EXP 5
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: DIFF
12162: PPUSH
12163: LD_STRING D10-Sol1-2
12165: PPUSH
12166: LD_STRING D10-FSol1-2
12168: PPUSH
12169: CALL 7538 0 3
// DialogueOff ;
12173: CALL_OW 7
// end ;
12177: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 463
12185: NOT
12186: IFFALSE 12469
12188: GO 12190
12190: DISABLE
// begin HarrisonSupport ;
12191: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12195: LD_EXP 18
12199: PPUSH
12200: CALL_OW 310
12204: PPUSH
12205: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12209: LD_EXP 18
12213: PPUSH
12214: LD_STRING DEng-Eng1-1
12216: PPUSH
12217: CALL_OW 88
// wait ( 1 1$0 ) ;
12221: LD_INT 2100
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12232: LD_EXP 15
12236: PPUSH
12237: LD_STRING DRem-Har-1
12239: PPUSH
12240: CALL_OW 94
// if contactWithRussian then
12244: LD_EXP 23
12248: IFFALSE 12264
// Say ( JMM , DRem-JMM-1 ) else
12250: LD_EXP 1
12254: PPUSH
12255: LD_STRING DRem-JMM-1
12257: PPUSH
12258: CALL_OW 88
12262: GO 12276
// Say ( JMM , DRem-JMM-1a ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DRem-JMM-1a
12271: PPUSH
12272: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12276: LD_EXP 15
12280: PPUSH
12281: LD_STRING DRem-Har-2
12283: PPUSH
12284: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12288: LD_STRING DenisInDelta
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL_OW 30
12298: IFFALSE 12314
// Say ( JMM , DRem-JMM-2 ) else
12300: LD_EXP 1
12304: PPUSH
12305: LD_STRING DRem-JMM-2
12307: PPUSH
12308: CALL_OW 88
12312: GO 12326
// Say ( JMM , DRem-JMM-2a ) ;
12314: LD_EXP 1
12318: PPUSH
12319: LD_STRING DRem-JMM-2a
12321: PPUSH
12322: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12326: LD_EXP 15
12330: PPUSH
12331: LD_STRING DRem-Har-3
12333: PPUSH
12334: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12338: LD_EXP 1
12342: PPUSH
12343: LD_STRING DRem-JMM-3
12345: PPUSH
12346: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12350: LD_EXP 15
12354: PPUSH
12355: LD_STRING DRem-Har-4
12357: PPUSH
12358: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12362: LD_STRING DenisInDelta
12364: PPUSH
12365: LD_INT 0
12367: PPUSH
12368: CALL_OW 30
12372: IFFALSE 12432
// begin Say ( JMM , DRem-JMM-4 ) ;
12374: LD_EXP 1
12378: PPUSH
12379: LD_STRING DRem-JMM-4
12381: PPUSH
12382: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12386: LD_EXP 15
12390: PPUSH
12391: LD_STRING DRem-Har-5
12393: PPUSH
12394: CALL_OW 94
// DialogueOff ;
12398: CALL_OW 7
// wait ( 4 4$00 ) ;
12402: LD_INT 8400
12404: PPUSH
12405: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12409: LD_INT 35
12411: PPUSH
12412: CALL_OW 67
// until not InBattle ( 1 ) ;
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 463
12423: NOT
12424: IFFALSE 12409
// SpawnDenis ;
12426: CALL 12470 0 0
// end else
12430: GO 12469
// begin DialogueOff ;
12432: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12436: LD_INT 36
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12449: LD_INT 15
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12462: LD_STRING MR
12464: PPUSH
12465: CALL_OW 337
// end ; end ;
12469: END
// export function SpawnDenis ; var tmp ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
// PrepareDenis ;
12474: CALL 2244 0 0
// if not Denis then
12478: LD_EXP 9
12482: NOT
12483: IFFALSE 12487
// exit ;
12485: GO 12708
// CenterNowOnUnits ( Denis ) ;
12487: LD_EXP 9
12491: PPUSH
12492: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 69
12515: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12516: LD_EXP 9
12520: PPUSH
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_EXP 9
12530: PPUSH
12531: CALL_OW 74
12535: PPUSH
12536: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12540: LD_INT 35
12542: PPUSH
12543: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12547: LD_INT 22
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 91
12559: PUSH
12560: LD_EXP 9
12564: PUSH
12565: LD_INT 10
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 69
12581: IFFALSE 12540
// SetSide ( Denis , 1 ) ;
12583: LD_EXP 9
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 235
// DialogueOn ;
12595: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12599: LD_EXP 9
12603: PPUSH
12604: LD_STRING DDen-Den-1
12606: PPUSH
12607: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12611: LD_EXP 1
12615: PPUSH
12616: LD_STRING DDen-JMM-1
12618: PPUSH
12619: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12623: LD_EXP 9
12627: PPUSH
12628: LD_STRING DDen-Den-2
12630: PPUSH
12631: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12635: LD_EXP 1
12639: PPUSH
12640: LD_STRING DDen-JMM-2
12642: PPUSH
12643: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12647: LD_EXP 9
12651: PPUSH
12652: LD_STRING DDen-Den-3
12654: PPUSH
12655: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING DDen-JMM-3
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12675: LD_INT 36
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12688: LD_INT 15
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12701: LD_STRING MR
12703: PPUSH
12704: CALL_OW 337
// end ;
12708: LD_VAR 0 1
12712: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12713: LD_INT 22
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 15
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 69
12741: PUSH
12742: LD_EXP 9
12746: PPUSH
12747: CALL_OW 302
12751: AND
12752: PUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 463
12760: NOT
12761: AND
12762: IFFALSE 12791
12764: GO 12766
12766: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12767: LD_EXP 9
12771: PPUSH
12772: LD_STRING DR1-Den-1
12774: PPUSH
12775: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12779: LD_EXP 1
12783: PPUSH
12784: LD_STRING DR1-JMM-1
12786: PPUSH
12787: CALL_OW 88
// end ;
12791: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12792: LD_INT 15
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 321
12802: PUSH
12803: LD_INT 2
12805: EQUAL
12806: PUSH
12807: LD_EXP 9
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 463
12825: NOT
12826: AND
12827: IFFALSE 13036
12829: GO 12831
12831: DISABLE
// begin DialogueOn ;
12832: CALL_OW 6
// if IsOK ( Denis ) then
12836: LD_EXP 9
12840: PPUSH
12841: CALL_OW 302
12845: IFFALSE 12861
// Say ( Denis , DR2-Den-1 ) else
12847: LD_EXP 9
12851: PPUSH
12852: LD_STRING DR2-Den-1
12854: PPUSH
12855: CALL_OW 88
12859: GO 12920
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12861: LD_INT 22
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 25
12883: PUSH
12884: LD_INT 4
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 69
12900: PUSH
12901: LD_EXP 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: DIFF
12909: PPUSH
12910: LD_STRING DR2-Sci1-1
12912: PPUSH
12913: LD_STRING DR2-FSci1-1
12915: PPUSH
12916: CALL 7538 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12920: LD_EXP 1
12924: PPUSH
12925: LD_STRING DR2-JMM-1
12927: PPUSH
12928: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12932: LD_INT 22
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: PUSH
12983: LD_EXP 1
12987: PUSH
12988: LD_EXP 9
12992: PUSH
12993: LD_EXP 8
12997: PUSH
12998: LD_EXP 5
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: DIFF
13009: PPUSH
13010: LD_STRING DR2-Sol1-1
13012: PPUSH
13013: LD_STRING 
13015: PPUSH
13016: CALL 7538 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING DR2-JMM-2
13027: PPUSH
13028: CALL_OW 88
// DialogueOff ;
13032: CALL_OW 7
// end ;
13036: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13037: LD_INT 22
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 36
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: PUSH
13070: LD_INT 22
13072: PUSH
13073: LD_INT 1
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 21
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 33
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: PUSH
13110: LD_INT 0
13112: GREATER
13113: AND
13114: PUSH
13115: LD_EXP 24
13119: PUSH
13120: LD_INT 0
13122: EQUAL
13123: AND
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 463
13132: NOT
13133: AND
13134: IFFALSE 13271
13136: GO 13138
13138: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 26
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PUSH
13190: LD_EXP 1
13194: PUSH
13195: LD_EXP 6
13199: PUSH
13200: LD_EXP 7
13204: PUSH
13205: LD_EXP 9
13209: PUSH
13210: LD_EXP 16
13214: PUSH
13215: LD_EXP 3
13219: PUSH
13220: LD_EXP 4
13224: PUSH
13225: LD_EXP 2
13229: PUSH
13230: LD_EXP 5
13234: PUSH
13235: LD_EXP 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: DIFF
13252: PPUSH
13253: LD_STRING D3a-Mech1-1
13255: PPUSH
13256: LD_STRING 
13258: PPUSH
13259: CALL 7538 0 3
// firstTower = 2 ;
13263: LD_ADDR_EXP 24
13267: PUSH
13268: LD_INT 2
13270: ST_TO_ADDR
// end ;
13271: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: PUSH
13301: LD_INT 0
13303: EQUAL
13304: IFFALSE 13435
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
// begin stop_talking := true ;
13312: LD_ADDR_OWVAR 56
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 1
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 4
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13425
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_INT 7500
13418: PPUSH
13419: CALL_OW 591
13423: GO 13405
13425: POP
13426: POP
// stop_talking := false ;
13427: LD_ADDR_OWVAR 56
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// end ;
13435: PPOPN 1
13437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13438: LD_INT 22
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 36
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: LD_INT 1
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 2
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 33
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: AND
13507: PUSH
13508: CALL 14060 0 0
13512: AND
13513: PUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 463
13521: NOT
13522: AND
13523: IFFALSE 14057
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 36
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13569: LD_ADDR_VAR 0 4
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 33
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PPUSH
13609: CALL_OW 69
13613: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13614: LD_ADDR_VAR 0 5
13618: PUSH
13619: EMPTY
13620: ST_TO_ADDR
// for i in tmpControlTowers do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 3
13630: PUSH
13631: FOR_IN
13632: IFFALSE 14055
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13634: LD_EXP 1
13638: PPUSH
13639: CALL_OW 310
13643: PUSH
13644: LD_VAR 0 1
13648: EQUAL
13649: PUSH
13650: LD_EXP 1
13654: PPUSH
13655: CALL_OW 257
13659: PUSH
13660: LD_INT 3
13662: EQUAL
13663: AND
13664: IFFALSE 13798
// begin InGameOn ;
13666: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING D4a-JMM-1
13690: PPUSH
13691: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13695: LD_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: LD_EXP 1
13708: PPUSH
13709: CALL_OW 53
// wait ( 0 0$1 ) ;
13713: LD_INT 35
13715: PPUSH
13716: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13720: LD_VAR 0 4
13724: PUSH
13725: LD_INT 1
13727: ARRAY
13728: PPUSH
13729: LD_VAR 0 4
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PPUSH
13738: CALL_OW 250
13742: PUSH
13743: LD_INT 3
13745: PLUS
13746: PPUSH
13747: LD_VAR 0 4
13751: PUSH
13752: LD_INT 1
13754: ARRAY
13755: PPUSH
13756: CALL_OW 251
13760: PUSH
13761: LD_INT 2
13763: MINUS
13764: PPUSH
13765: CALL_OW 111
// wait ( 0 0$2 ) ;
13769: LD_INT 70
13771: PPUSH
13772: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13776: LD_EXP 1
13780: PPUSH
13781: LD_STRING D4b-JMM-1
13783: PPUSH
13784: CALL_OW 88
// InGameOff ;
13788: CALL_OW 9
// exit ;
13792: POP
13793: POP
13794: GO 14057
// end else
13796: GO 14053
// begin InGameOn ;
13798: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13802: LD_ADDR_VAR 0 5
13806: PUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: CALL_OW 313
13816: PPUSH
13817: LD_INT 25
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 72
13831: ST_TO_ADDR
// if not tmpMechanicInside then
13832: LD_VAR 0 5
13836: NOT
13837: IFFALSE 13841
// continue ;
13839: GO 13631
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13841: LD_VAR 0 5
13845: PUSH
13846: LD_INT 1
13848: ARRAY
13849: PPUSH
13850: CALL_OW 258
13854: PUSH
13855: LD_INT 1
13857: EQUAL
13858: IFFALSE 13878
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13860: LD_VAR 0 5
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: LD_STRING D4a-Mech1-1
13871: PPUSH
13872: CALL_OW 88
13876: GO 13894
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13878: LD_VAR 0 5
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: LD_STRING D4a-FMech1-1
13889: PPUSH
13890: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13894: LD_VAR 0 4
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: PPUSH
13903: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13907: LD_VAR 0 4
13911: PUSH
13912: LD_INT 1
13914: ARRAY
13915: PPUSH
13916: LD_VAR 0 5
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 53
// wait ( 0 0$1 ) ;
13929: LD_INT 35
13931: PPUSH
13932: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13936: LD_VAR 0 4
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: LD_VAR 0 4
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: CALL_OW 250
13958: PUSH
13959: LD_INT 3
13961: PLUS
13962: PPUSH
13963: LD_VAR 0 4
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: CALL_OW 251
13976: PUSH
13977: LD_INT 2
13979: MINUS
13980: PPUSH
13981: CALL_OW 111
// wait ( 0 0$2 ) ;
13985: LD_INT 70
13987: PPUSH
13988: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: CALL_OW 258
14005: PUSH
14006: LD_INT 1
14008: EQUAL
14009: IFFALSE 14029
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14011: LD_VAR 0 5
14015: PUSH
14016: LD_INT 1
14018: ARRAY
14019: PPUSH
14020: LD_STRING D4b-Mech1-1
14022: PPUSH
14023: CALL_OW 88
14027: GO 14045
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: LD_STRING D4b-FMech1-1
14040: PPUSH
14041: CALL_OW 88
// InGameOff ;
14045: CALL_OW 9
// exit ;
14049: POP
14050: POP
14051: GO 14057
// end ; end ;
14053: GO 13631
14055: POP
14056: POP
// end ;
14057: PPOPN 5
14059: END
// function CheckMehInside ; var i , j , tmp ; begin
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
// result := false ;
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: LD_INT 36
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: ST_TO_ADDR
// if not tmp then
14108: LD_VAR 0 4
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14181
// for i in tmp do
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: LD_VAR 0 4
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14179
// for j in UnitsInside ( i ) do
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_VAR 0 2
14139: PPUSH
14140: CALL_OW 313
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14175
// if GetClass ( j ) = class_mechanic then
14148: LD_VAR 0 3
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 3
14160: EQUAL
14161: IFFALSE 14173
// begin result := true ;
14163: LD_ADDR_VAR 0 1
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// break ;
14171: GO 14175
// end ;
14173: GO 14145
14175: POP
14176: POP
14177: GO 14127
14179: POP
14180: POP
// end ;
14181: LD_VAR 0 1
14185: RET
// every 12 12$0 do
14186: GO 14188
14188: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14189: LD_INT 35
14191: PPUSH
14192: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 463
14203: NOT
14204: PUSH
14205: LD_INT 32
14207: PPUSH
14208: LD_INT 81
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 70
14222: NOT
14223: AND
14224: PUSH
14225: LD_EXP 27
14229: PUSH
14230: LD_INT 10500
14232: LESS
14233: OR
14234: IFFALSE 14189
// PrepareKurt ;
14236: CALL 16869 0 0
// end ;
14240: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14241: LD_EXP 16
14245: PPUSH
14246: CALL_OW 302
14250: PUSH
14251: LD_EXP 16
14255: PPUSH
14256: CALL_OW 255
14260: PUSH
14261: LD_INT 1
14263: EQUAL
14264: AND
14265: PUSH
14266: LD_EXP 2
14270: AND
14271: IFFALSE 14436
14273: GO 14275
14275: DISABLE
// begin wait ( 0 0$50 ) ;
14276: LD_INT 1750
14278: PPUSH
14279: CALL_OW 67
// if not IsOk ( Joan ) then
14283: LD_EXP 16
14287: PPUSH
14288: CALL_OW 302
14292: NOT
14293: IFFALSE 14297
// exit ;
14295: GO 14436
// if IsOK ( Lisa ) then
14297: LD_EXP 2
14301: PPUSH
14302: CALL_OW 302
14306: IFFALSE 14436
// begin DialogueOn ;
14308: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14312: LD_EXP 2
14316: PPUSH
14317: LD_STRING D7-Lisa-1
14319: PPUSH
14320: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14324: LD_EXP 1
14328: PPUSH
14329: LD_STRING D7-JMM-1
14331: PPUSH
14332: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14336: LD_EXP 2
14340: PPUSH
14341: LD_STRING D7-Lisa-2
14343: PPUSH
14344: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14348: LD_EXP 1
14352: PPUSH
14353: LD_STRING D7-JMM-2
14355: PPUSH
14356: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14360: LD_EXP 2
14364: PPUSH
14365: LD_STRING D7-Lisa-3
14367: PPUSH
14368: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14372: LD_EXP 1
14376: PPUSH
14377: LD_STRING D7-JMM-3
14379: PPUSH
14380: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14384: LD_EXP 2
14388: PPUSH
14389: LD_STRING D7-Lisa-4
14391: PPUSH
14392: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14396: LD_EXP 1
14400: PPUSH
14401: LD_STRING D7-JMM-4
14403: PPUSH
14404: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14408: LD_EXP 1
14412: PPUSH
14413: LD_STRING D7-JMM-4a
14415: PPUSH
14416: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14420: LD_EXP 2
14424: PPUSH
14425: LD_STRING D7-Lisa-5
14427: PPUSH
14428: CALL_OW 88
// DialogueOff ;
14432: CALL_OW 7
// end ; end ;
14436: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14437: LD_EXP 14
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 91
14454: PUSH
14455: LD_EXP 14
14459: PUSH
14460: LD_INT 10
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 25
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 1
14530: GREATER
14531: AND
14532: IFFALSE 14549
14534: GO 14536
14536: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14537: LD_EXP 14
14541: PPUSH
14542: LD_STRING D5-Sol1-1
14544: PPUSH
14545: CALL_OW 88
14549: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14550: LD_INT 22
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 33
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: PUSH
14579: LD_INT 2
14581: GREATEREQUAL
14582: IFFALSE 14602
14584: GO 14586
14586: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14587: LD_STRING MRa
14589: PPUSH
14590: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14594: LD_ADDR_EXP 29
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// end ;
14602: END
// every 2 2$00 do var i , last ;
14603: GO 14605
14605: DISABLE
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// begin last := 8 ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 8
14617: ST_TO_ADDR
// for i := 1 to last do
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: DOUBLE
14624: LD_INT 1
14626: DEC
14627: ST_TO_ADDR
14628: LD_VAR 0 2
14632: PUSH
14633: FOR_TO
14634: IFFALSE 14662
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14636: LD_INT 6300
14638: PPUSH
14639: LD_INT 12600
14641: PPUSH
14642: CALL_OW 12
14646: PPUSH
14647: CALL_OW 67
// PrepareRandoms ( i ) ;
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL 4230 0 1
// end ;
14660: GO 14633
14662: POP
14663: POP
// end ;
14664: PPOPN 2
14666: END
// every 5 5$20 do
14667: GO 14669
14669: DISABLE
// begin DialogueOn ;
14670: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14674: LD_EXP 10
14678: PPUSH
14679: LD_STRING D12a-Sci-1
14681: PPUSH
14682: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14686: LD_EXP 1
14690: PPUSH
14691: LD_STRING D12a-JMM-1
14693: PPUSH
14694: CALL_OW 88
// DialogueOff ;
14698: CALL_OW 7
// cratesStatus := 1 ;
14702: LD_ADDR_EXP 39
14706: PUSH
14707: LD_INT 1
14709: ST_TO_ADDR
// end ;
14710: END
// every 13 13$0 do
14711: GO 14713
14713: DISABLE
// begin DialogueOn ;
14714: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14718: LD_EXP 10
14722: PPUSH
14723: LD_STRING D12b-Sci-1
14725: PPUSH
14726: CALL_OW 94
// DialogueOff ;
14730: CALL_OW 7
// cratesStatus := 2 ;
14734: LD_ADDR_EXP 39
14738: PUSH
14739: LD_INT 2
14741: ST_TO_ADDR
// BuildBulldozer ;
14742: CALL 10581 0 0
// end ;
14746: END
// every 32 32$0 do
14747: GO 14749
14749: DISABLE
// begin DialogueOn ;
14750: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14754: LD_EXP 10
14758: PPUSH
14759: LD_STRING D12c-Sci-1
14761: PPUSH
14762: CALL_OW 94
// DialogueOff ;
14766: CALL_OW 7
// wait ( 3 3$0 ) ;
14770: LD_INT 6300
14772: PPUSH
14773: CALL_OW 67
// DialogueOn ;
14777: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14781: LD_EXP 10
14785: PPUSH
14786: LD_STRING D12d-Sci-1
14788: PPUSH
14789: CALL_OW 94
// DialogueOff ;
14793: CALL_OW 7
// cratesStatus = 1 ;
14797: LD_ADDR_EXP 39
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14805: CALL 21213 0 0
// wait ( 2 2$30 ) ;
14809: LD_INT 5250
14811: PPUSH
14812: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14816: LD_INT 35
14818: PPUSH
14819: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: PUSH
14832: LD_INT 32
14834: PPUSH
14835: LD_INT 81
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 70
14849: NOT
14850: AND
14851: PUSH
14852: LD_EXP 27
14856: PUSH
14857: LD_INT 6300
14859: LESS
14860: OR
14861: IFFALSE 14816
// PrepareJoan ;
14863: CALL 3085 0 0
// end ;
14867: END
// every 42 42$0 do
14868: GO 14870
14870: DISABLE
// begin DialogueOn ;
14871: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14875: LD_EXP 10
14879: PPUSH
14880: LD_STRING D12e-Sci-1
14882: PPUSH
14883: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14887: LD_EXP 1
14891: PPUSH
14892: LD_STRING D12e-JMM-1
14894: PPUSH
14895: CALL_OW 88
// DialogueOff ;
14899: CALL_OW 7
// cratesStatus := 2 ;
14903: LD_ADDR_EXP 39
14907: PUSH
14908: LD_INT 2
14910: ST_TO_ADDR
// end ; end_of_file
14911: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14912: LD_VAR 0 1
14916: PUSH
14917: LD_INT 1
14919: EQUAL
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 3
14928: EQUAL
14929: AND
14930: IFFALSE 14940
// contactWithRussian := 1 ;
14932: LD_ADDR_EXP 23
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// end ;
14940: PPOPN 2
14942: END
// on BuildingComplete ( building ) do var i ;
14943: LD_INT 0
14945: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 266
14955: PUSH
14956: LD_INT 36
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 255
14969: PUSH
14970: LD_INT 1
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_EXP 24
14979: PUSH
14980: LD_INT 0
14982: EQUAL
14983: AND
14984: IFFALSE 15064
// begin firstTower = 1 ;
14986: LD_ADDR_EXP 24
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14994: LD_INT 22
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 26
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_EXP 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: DIFF
15053: PPUSH
15054: LD_STRING D3b-Mech1-1
15056: PPUSH
15057: LD_STRING D3b-Mech1-1
15059: PPUSH
15060: CALL 7538 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL_OW 266
15073: PUSH
15074: LD_INT 0
15076: EQUAL
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 255
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: AND
15092: IFFALSE 15106
// SetBName ( building , theta ) ;
15094: LD_VAR 0 1
15098: PPUSH
15099: LD_STRING theta
15101: PPUSH
15102: CALL_OW 500
// if GetSide ( building ) = 3 then
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 255
15115: PUSH
15116: LD_INT 3
15118: EQUAL
15119: IFFALSE 15159
// begin for i := 1 to 4 do
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: DOUBLE
15127: LD_INT 1
15129: DEC
15130: ST_TO_ADDR
15131: LD_INT 4
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15157
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15137: LD_ADDR_EXP 32
15141: PUSH
15142: LD_EXP 32
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 3
15154: ST_TO_ADDR
15155: GO 15134
15157: POP
15158: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 255
15168: PUSH
15169: LD_INT 3
15171: EQUAL
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 266
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 266
15196: PUSH
15197: LD_INT 2
15199: EQUAL
15200: OR
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 266
15211: PUSH
15212: LD_INT 4
15214: EQUAL
15215: OR
15216: PUSH
15217: EMPTY
15218: LIST
15219: AND
15220: IFFALSE 15231
// ComUpgrade ( building ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 266
15254: PUSH
15255: LD_INT 32
15257: EQUAL
15258: AND
15259: IFFALSE 15300
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_INT 42
15268: PUSH
15269: LD_INT 43
15271: PUSH
15272: LD_INT 44
15274: PUSH
15275: LD_INT 46
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PPUSH
15287: LD_INT 4
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: PPUSH
15296: CALL_OW 208
// end ;
15300: PPOPN 2
15302: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL 37797 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15312: LD_VAR 0 1
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 23
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: IN
15357: IFFALSE 15373
// killCounter := killCounter + 1 ;
15359: LD_ADDR_EXP 46
15363: PUSH
15364: LD_EXP 46
15368: PUSH
15369: LD_INT 1
15371: PLUS
15372: ST_TO_ADDR
// if unit in ruAttackersInForest then
15373: LD_VAR 0 1
15377: PUSH
15378: LD_EXP 49
15382: IN
15383: IFFALSE 15401
// ruAttackersInForest := ruAttackersInForest diff unit ;
15385: LD_ADDR_EXP 49
15389: PUSH
15390: LD_EXP 49
15394: PUSH
15395: LD_VAR 0 1
15399: DIFF
15400: ST_TO_ADDR
// if unit in ruAttackers then
15401: LD_VAR 0 1
15405: PUSH
15406: LD_EXP 48
15410: IN
15411: IFFALSE 15429
// ruAttackers := ruAttackers diff unit ;
15413: LD_ADDR_EXP 48
15417: PUSH
15418: LD_EXP 48
15422: PUSH
15423: LD_VAR 0 1
15427: DIFF
15428: ST_TO_ADDR
// if unit = JMM then
15429: LD_VAR 0 1
15433: PUSH
15434: LD_EXP 1
15438: EQUAL
15439: IFFALSE 15448
// YouLost ( JMM ) ;
15441: LD_STRING JMM
15443: PPUSH
15444: CALL_OW 104
// if unit = Joan then
15448: LD_VAR 0 1
15452: PUSH
15453: LD_EXP 16
15457: EQUAL
15458: IFFALSE 15468
// JoanStatus := 0 ;
15460: LD_ADDR_EXP 17
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 255
15477: PUSH
15478: LD_INT 1
15480: EQUAL
15481: PUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 247
15491: PUSH
15492: LD_INT 1
15494: EQUAL
15495: AND
15496: PUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 248
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: IFFALSE 15527
// unitLost = unitLost + 1 ;
15513: LD_ADDR_EXP 31
15517: PUSH
15518: LD_EXP 31
15522: PUSH
15523: LD_INT 1
15525: PLUS
15526: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 255
15536: PUSH
15537: LD_INT 3
15539: EQUAL
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 247
15550: PUSH
15551: LD_INT 3
15553: EQUAL
15554: AND
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 266
15565: PUSH
15566: LD_INT 4
15568: PUSH
15569: LD_INT 5
15571: PUSH
15572: LD_INT 32
15574: PUSH
15575: LD_INT 31
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: IN
15584: AND
15585: IFFALSE 15671
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15587: LD_ADDR_EXP 32
15591: PUSH
15592: LD_EXP 32
15596: PUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 266
15606: ADD
15607: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15608: LD_ADDR_EXP 32
15612: PUSH
15613: LD_EXP 32
15617: PUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 250
15627: ADD
15628: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15629: LD_ADDR_EXP 32
15633: PUSH
15634: LD_EXP 32
15638: PUSH
15639: LD_VAR 0 1
15643: PPUSH
15644: CALL_OW 251
15648: ADD
15649: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15650: LD_ADDR_EXP 32
15654: PUSH
15655: LD_EXP 32
15659: PUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 254
15669: ADD
15670: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15671: LD_EXP 47
15675: PUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 257
15685: PUSH
15686: LD_INT 3
15688: EQUAL
15689: AND
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 255
15700: PUSH
15701: LD_INT 3
15703: EQUAL
15704: AND
15705: PUSH
15706: LD_INT 21
15708: PPUSH
15709: CALL_OW 302
15713: AND
15714: PUSH
15715: LD_INT 21
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: LD_INT 3
15725: EQUAL
15726: AND
15727: IFFALSE 15809
// begin ruMechCounter := ruMechCounter - 1 ;
15729: LD_ADDR_EXP 47
15733: PUSH
15734: LD_EXP 47
15738: PUSH
15739: LD_INT 1
15741: MINUS
15742: ST_TO_ADDR
// uc_side := 3 ;
15743: LD_ADDR_OWVAR 20
15747: PUSH
15748: LD_INT 3
15750: ST_TO_ADDR
// uc_nation := 3 ;
15751: LD_ADDR_OWVAR 21
15755: PUSH
15756: LD_INT 3
15758: ST_TO_ADDR
// hc_gallery :=  ;
15759: LD_ADDR_OWVAR 33
15763: PUSH
15764: LD_STRING 
15766: ST_TO_ADDR
// hc_name :=  ;
15767: LD_ADDR_OWVAR 26
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15775: LD_INT 0
15777: PPUSH
15778: LD_EXP 35
15782: PPUSH
15783: LD_EXP 36
15787: PPUSH
15788: CALL_OW 12
15792: PPUSH
15793: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15797: CALL_OW 44
15801: PPUSH
15802: LD_INT 21
15804: PPUSH
15805: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 255
15818: PUSH
15819: LD_INT 3
15821: EQUAL
15822: PUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 264
15832: PUSH
15833: LD_INT 52
15835: EQUAL
15836: AND
15837: PUSH
15838: LD_INT 21
15840: PPUSH
15841: CALL_OW 302
15845: AND
15846: PUSH
15847: LD_INT 21
15849: PPUSH
15850: CALL_OW 255
15854: PUSH
15855: LD_INT 3
15857: EQUAL
15858: AND
15859: IFFALSE 15880
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15861: LD_INT 21
15863: PPUSH
15864: LD_INT 22
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 1
15872: PPUSH
15873: LD_INT 52
15875: PPUSH
15876: CALL_OW 125
// end ;
15880: PPOPN 1
15882: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
15887: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL 37917 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 255
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 264
15925: PUSH
15926: LD_INT 51
15928: PUSH
15929: LD_INT 52
15931: PUSH
15932: LD_INT 53
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: IN
15940: NOT
15941: AND
15942: IFFALSE 15973
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15944: LD_ADDR_EXP 48
15948: PUSH
15949: LD_EXP 48
15953: PPUSH
15954: LD_EXP 48
15958: PUSH
15959: LD_INT 1
15961: PLUS
15962: PPUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 264
15982: PUSH
15983: LD_INT 53
15985: EQUAL
15986: IFFALSE 16141
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_INT 60
15995: PPUSH
15996: LD_INT 85
15998: PPUSH
15999: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_INT 43
16010: PPUSH
16011: LD_INT 69
16013: PPUSH
16014: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16018: LD_VAR 0 1
16022: PPUSH
16023: LD_INT 37
16025: PPUSH
16026: LD_INT 46
16028: PPUSH
16029: CALL_OW 171
// wait ( 0 0$1 ) ;
16033: LD_INT 35
16035: PPUSH
16036: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16040: LD_INT 35
16042: PPUSH
16043: CALL_OW 67
// until not HasTask ( vehicle ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 314
16056: NOT
16057: IFFALSE 16040
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16059: LD_VAR 0 1
16063: PPUSH
16064: LD_INT 34
16066: PPUSH
16067: CALL 10633 0 2
// repeat wait ( 0 0$1 ) ;
16071: LD_INT 35
16073: PPUSH
16074: CALL_OW 67
// until not HasTask ( vehicle ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 314
16087: NOT
16088: IFFALSE 16071
// un := IsDrivenBy ( vehicle ) ;
16090: LD_ADDR_VAR 0 4
16094: PUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 311
16104: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16105: LD_VAR 0 4
16109: PPUSH
16110: LD_INT 96
16112: PPUSH
16113: LD_INT 77
16115: PPUSH
16116: CALL_OW 171
// AddComExitVehicle ( un ) ;
16120: LD_VAR 0 4
16124: PPUSH
16125: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16129: LD_VAR 0 4
16133: PPUSH
16134: LD_INT 17
16136: PPUSH
16137: CALL_OW 180
// end ; end ;
16141: PPOPN 5
16143: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 255
16153: PUSH
16154: LD_INT 3
16156: EQUAL
16157: IFFALSE 16188
// begin tamedApemans = tamedApemans + 1 ;
16159: LD_ADDR_EXP 33
16163: PUSH
16164: LD_EXP 33
16168: PUSH
16169: LD_INT 1
16171: PLUS
16172: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16173: LD_VAR 0 1
16177: PPUSH
16178: LD_INT 106
16180: PPUSH
16181: LD_INT 85
16183: PPUSH
16184: CALL_OW 111
// end ; end ;
16188: PPOPN 2
16190: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 255
16200: PUSH
16201: LD_INT 3
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: AND
16219: PUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 302
16227: AND
16228: IFFALSE 16242
// ComEnterUnit ( human , rufab ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: LD_INT 21
16237: PPUSH
16238: CALL_OW 120
// end ;
16242: PPOPN 4
16244: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16245: LD_VAR 0 1
16249: PUSH
16250: LD_INT 21
16252: EQUAL
16253: PUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: CALL_OW 255
16263: PUSH
16264: LD_INT 3
16266: EQUAL
16267: AND
16268: IFFALSE 16282
// SetLives ( human , 1000 ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_INT 1000
16277: PPUSH
16278: CALL_OW 234
// end ;
16282: PPOPN 2
16284: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL 37901 0 1
// end ; end_of_file
16294: PPOPN 1
16296: END
// every 0 0$30 trigger cratesStatus = 1 do
16297: LD_EXP 39
16301: PUSH
16302: LD_INT 1
16304: EQUAL
16305: IFFALSE 16358
16307: GO 16309
16309: DISABLE
// begin enable ;
16310: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16311: LD_INT 350
16313: PUSH
16314: LD_INT 875
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PPUSH
16324: LD_INT 2
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: PPUSH
16333: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16337: LD_INT 1
16339: PPUSH
16340: LD_INT 5
16342: PPUSH
16343: CALL_OW 12
16347: PPUSH
16348: LD_INT 7
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 55
// end ;
16358: END
// every 1 1$0 trigger cratesStatus = 2 do
16359: LD_EXP 39
16363: PUSH
16364: LD_INT 2
16366: EQUAL
16367: IFFALSE 16450
16369: GO 16371
16371: DISABLE
// begin enable ;
16372: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16373: LD_INT 3150
16375: PUSH
16376: LD_INT 4550
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_INT 2
16388: PPUSH
16389: CALL_OW 12
16393: ARRAY
16394: PPUSH
16395: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16399: LD_INT 2
16401: PUSH
16402: LD_INT 5
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_INT 2
16414: PPUSH
16415: CALL_OW 12
16419: ARRAY
16420: PPUSH
16421: LD_INT 6
16423: PUSH
16424: LD_INT 7
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_INT 2
16436: PPUSH
16437: CALL_OW 12
16441: ARRAY
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 55
// end ;
16450: END
// every 0 0$30 + 0 0$10 do
16451: GO 16453
16453: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16454: LD_INT 4
16456: PUSH
16457: LD_INT 5
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_INT 2
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: PPUSH
16476: LD_INT 7
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 55
// Wait ( 0 0$15 ) ;
16486: LD_INT 525
16488: PPUSH
16489: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16493: LD_INT 4
16495: PUSH
16496: LD_INT 5
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: PPUSH
16515: LD_INT 7
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 55
// Wait ( 0 0$20 ) ;
16525: LD_INT 700
16527: PPUSH
16528: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16532: LD_INT 4
16534: PUSH
16535: LD_INT 5
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 2
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: PPUSH
16554: LD_INT 7
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 55
// end ; end_of_file
16564: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16565: LD_EXP 25
16569: PUSH
16570: LD_INT 1
16572: EQUAL
16573: IFFALSE 16866
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
16582: PPUSH
// begin enable ;
16583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 22
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 21
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 30
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: ST_TO_ADDR
// for i in tmp do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_IN
16658: IFFALSE 16691
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_VAR 0 3
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 274
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 275
16687: PLUS
16688: ST_TO_ADDR
16689: GO 16657
16691: POP
16692: POP
// strings = [ ] ;
16693: LD_ADDR_EXP 28
16697: PUSH
16698: EMPTY
16699: ST_TO_ADDR
// if tmp = 0 then
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 0
16707: EQUAL
16708: IFFALSE 16733
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16710: LD_ADDR_EXP 28
16714: PUSH
16715: LD_EXP 28
16719: PUSH
16720: LD_STRING #Am06-1
16722: PUSH
16723: LD_EXP 26
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ADD
16732: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16733: LD_VAR 0 2
16737: PUSH
16738: LD_EXP 26
16742: PUSH
16743: LD_VAR 0 3
16747: GREATER
16748: AND
16749: IFFALSE 16780
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16751: LD_ADDR_EXP 28
16755: PUSH
16756: LD_EXP 28
16760: PUSH
16761: LD_STRING #Am06-1
16763: PUSH
16764: LD_EXP 26
16768: PUSH
16769: LD_VAR 0 3
16773: MINUS
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: ADD
16779: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16780: LD_VAR 0 2
16784: PUSH
16785: LD_EXP 26
16789: PUSH
16790: LD_VAR 0 3
16794: LESSEQUAL
16795: AND
16796: IFFALSE 16819
// strings = strings ^ [ #Am06-1 , 0 ] ;
16798: LD_ADDR_EXP 28
16802: PUSH
16803: LD_EXP 28
16807: PUSH
16808: LD_STRING #Am06-1
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: ADD
16818: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16819: LD_ADDR_EXP 27
16823: PUSH
16824: LD_EXP 27
16828: PUSH
16829: LD_INT 35
16831: MINUS
16832: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16833: LD_ADDR_EXP 28
16837: PUSH
16838: LD_EXP 28
16842: PUSH
16843: LD_STRING #Am06-2
16845: PUSH
16846: LD_EXP 27
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: ADD
16855: ST_TO_ADDR
// display_strings = strings ;
16856: LD_ADDR_OWVAR 47
16860: PUSH
16861: LD_EXP 28
16865: ST_TO_ADDR
// end ; end_of_file
16866: PPOPN 3
16868: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16869: LD_INT 0
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 30
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16931: LD_INT 35
16933: PPUSH
16934: CALL_OW 67
// until depot ;
16938: LD_VAR 0 3
16942: IFFALSE 16879
// forceJMM := false ;
16944: LD_ADDR_VAR 0 8
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16952: LD_INT 35
16954: PPUSH
16955: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16959: LD_ADDR_VAR 0 4
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 91
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_INT 15
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 25
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 25
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 54
17059: PUSH
17060: EMPTY
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 55
17072: PUSH
17073: EMPTY
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_EXP 2
17097: PUSH
17098: LD_EXP 3
17102: PUSH
17103: LD_EXP 4
17107: PUSH
17108: LD_EXP 5
17112: PUSH
17113: LD_EXP 7
17117: PUSH
17118: LD_EXP 8
17122: PUSH
17123: LD_EXP 9
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: DIFF
17137: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17138: LD_EXP 27
17142: PUSH
17143: LD_INT 21000
17145: LESS
17146: IFFALSE 17158
// begin forceJMM := true ;
17148: LD_ADDR_VAR 0 8
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// break ;
17156: GO 17174
// end ; until tmp and not InBattle ( 1 ) ;
17158: LD_VAR 0 4
17162: PUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 463
17170: NOT
17171: AND
17172: IFFALSE 16952
// if not forceJMM then
17174: LD_VAR 0 8
17178: NOT
17179: IFFALSE 17207
// tmp := tmp [ rand ( 1 , tmp ) ] else
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: LD_VAR 0 4
17190: PUSH
17191: LD_INT 1
17193: PPUSH
17194: LD_VAR 0 4
17198: PPUSH
17199: CALL_OW 12
17203: ARRAY
17204: ST_TO_ADDR
17205: GO 17217
// tmp := JMM ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_EXP 1
17216: ST_TO_ADDR
// blockSpawn := 1 ;
17217: LD_ADDR_EXP 30
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// uc_side := 2 ;
17225: LD_ADDR_OWVAR 20
17229: PUSH
17230: LD_INT 2
17232: ST_TO_ADDR
// uc_nation := 2 ;
17233: LD_ADDR_OWVAR 21
17237: PUSH
17238: LD_INT 2
17240: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17241: LD_ADDR_EXP 20
17245: PUSH
17246: LD_STRING Kurt
17248: PPUSH
17249: LD_INT 0
17251: PPUSH
17252: LD_STRING 
17254: PPUSH
17255: CALL 42691 0 3
17259: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17260: LD_EXP 20
17264: PPUSH
17265: LD_VAR 0 4
17269: PPUSH
17270: CALL_OW 250
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 251
17284: PPUSH
17285: LD_INT 5
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: CALL_OW 50
// InGameOn ;
17295: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17299: LD_EXP 20
17303: PPUSH
17304: CALL_OW 87
// wait ( 0 0$2 ) ;
17308: LD_INT 70
17310: PPUSH
17311: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17315: LD_EXP 20
17319: PPUSH
17320: LD_VAR 0 4
17324: PPUSH
17325: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17329: LD_VAR 0 4
17333: PPUSH
17334: LD_EXP 20
17338: PPUSH
17339: CALL_OW 112
// wait ( 0 0$1 ) ;
17343: LD_INT 35
17345: PPUSH
17346: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_EXP 20
17359: PPUSH
17360: CALL_OW 119
// DialogueOn ;
17364: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17368: LD_EXP 20
17372: PPUSH
17373: LD_STRING D2-Kurt-1
17375: PPUSH
17376: CALL_OW 88
// if tmp = JMM then
17380: LD_VAR 0 4
17384: PUSH
17385: LD_EXP 1
17389: EQUAL
17390: IFFALSE 17482
// begin Say ( JMM , D2-JMM-1 ) ;
17392: LD_EXP 1
17396: PPUSH
17397: LD_STRING D2-JMM-1
17399: PPUSH
17400: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17404: LD_EXP 20
17408: PPUSH
17409: LD_STRING D2-Kurt-2
17411: PPUSH
17412: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17416: LD_EXP 1
17420: PPUSH
17421: LD_STRING D2-JMM-2
17423: PPUSH
17424: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17428: LD_EXP 20
17432: PPUSH
17433: LD_STRING D2-Kurt-3
17435: PPUSH
17436: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17440: LD_EXP 1
17444: PPUSH
17445: LD_STRING D2-JMM-3
17447: PPUSH
17448: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17452: LD_EXP 20
17456: PPUSH
17457: LD_STRING D2-Kurt-4
17459: PPUSH
17460: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17464: LD_EXP 1
17468: PPUSH
17469: LD_STRING D2-JMM-4
17471: PPUSH
17472: CALL_OW 88
// DialogueOff ;
17476: CALL_OW 7
// end else
17480: GO 17710
// begin if GetSex ( tmp ) = 1 then
17482: LD_VAR 0 4
17486: PPUSH
17487: CALL_OW 258
17491: PUSH
17492: LD_INT 1
17494: EQUAL
17495: IFFALSE 17511
// Say ( tmp , D2-Sol1-1 ) else
17497: LD_VAR 0 4
17501: PPUSH
17502: LD_STRING D2-Sol1-1
17504: PPUSH
17505: CALL_OW 88
17509: GO 17523
// Say ( tmp , D2-FSol1-1 ) ;
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_STRING D2-FSol1-1
17518: PPUSH
17519: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17523: LD_EXP 20
17527: PPUSH
17528: LD_STRING D2-Kurt-2
17530: PPUSH
17531: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17535: LD_VAR 0 4
17539: PPUSH
17540: CALL_OW 258
17544: PUSH
17545: LD_INT 1
17547: EQUAL
17548: IFFALSE 17564
// Say ( tmp , D2-Sol1-2 ) else
17550: LD_VAR 0 4
17554: PPUSH
17555: LD_STRING D2-Sol1-2
17557: PPUSH
17558: CALL_OW 88
17562: GO 17576
// Say ( tmp , D2-FSol1-2 ) ;
17564: LD_VAR 0 4
17568: PPUSH
17569: LD_STRING D2-FSol1-2
17571: PPUSH
17572: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17576: LD_EXP 20
17580: PPUSH
17581: LD_STRING D2-Kurt-3
17583: PPUSH
17584: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 258
17597: PUSH
17598: LD_INT 1
17600: EQUAL
17601: IFFALSE 17617
// Say ( tmp , D2-Sol1-3 ) else
17603: LD_VAR 0 4
17607: PPUSH
17608: LD_STRING D2-Sol1-3
17610: PPUSH
17611: CALL_OW 88
17615: GO 17629
// Say ( tmp , D2-FSol1-3 ) ;
17617: LD_VAR 0 4
17621: PPUSH
17622: LD_STRING D2-FSol1-3
17624: PPUSH
17625: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17629: LD_EXP 20
17633: PPUSH
17634: LD_STRING D2-Kurt-4
17636: PPUSH
17637: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17641: LD_VAR 0 4
17645: PPUSH
17646: CALL_OW 258
17650: PUSH
17651: LD_INT 1
17653: EQUAL
17654: IFFALSE 17682
// begin Say ( tmp , D2-Sol1-4 ) ;
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_STRING D2-Sol1-4
17663: PPUSH
17664: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17668: LD_VAR 0 4
17672: PPUSH
17673: LD_STRING D2-Sol1-5
17675: PPUSH
17676: CALL_OW 88
// end else
17680: GO 17706
// begin Say ( tmp , D2-FSol1-4 ) ;
17682: LD_VAR 0 4
17686: PPUSH
17687: LD_STRING D2-FSol1-4
17689: PPUSH
17690: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17694: LD_VAR 0 4
17698: PPUSH
17699: LD_STRING D2-FSol1-5
17701: PPUSH
17702: CALL_OW 88
// end ; DialogueOff ;
17706: CALL_OW 7
// end ; dec := ShowQuery1 ;
17710: LD_ADDR_VAR 0 6
17714: PUSH
17715: CALL 8023 0 0
17719: ST_TO_ADDR
// if dec = 1 then
17720: LD_VAR 0 6
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17790
// begin DialogueOn ;
17730: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_STRING D2a-Kurt-1
17741: PPUSH
17742: CALL_OW 88
// DialogueOff ;
17746: CALL_OW 7
// InGameOff ;
17750: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17754: LD_INT 1
17756: PPUSH
17757: LD_INT 2
17759: PPUSH
17760: LD_INT 2
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17770: LD_EXP 20
17774: PPUSH
17775: LD_INT 8
17777: PPUSH
17778: CALL_OW 113
// readyToEscape := 1 ;
17782: LD_ADDR_EXP 22
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// end ; if dec = 2 then
17790: LD_VAR 0 6
17794: PUSH
17795: LD_INT 2
17797: EQUAL
17798: IFFALSE 18266
// begin DialogueOn ;
17800: CALL_OW 6
// if tmp = JMM then
17804: LD_VAR 0 4
17808: PUSH
17809: LD_EXP 1
17813: EQUAL
17814: IFFALSE 17870
// begin Say ( JMM , D2b-JMM-1 ) ;
17816: LD_EXP 1
17820: PPUSH
17821: LD_STRING D2b-JMM-1
17823: PPUSH
17824: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17828: LD_EXP 20
17832: PPUSH
17833: LD_STRING D2b-Kurt-1
17835: PPUSH
17836: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17840: LD_EXP 1
17844: PPUSH
17845: LD_STRING D2b-JMM-2
17847: PPUSH
17848: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17852: LD_EXP 20
17856: PPUSH
17857: LD_STRING D2b-Kurt-2
17859: PPUSH
17860: CALL_OW 88
// DialogueOff ;
17864: CALL_OW 7
// end else
17868: GO 18021
// begin if GetSex ( tmp ) = 1 then
17870: LD_VAR 0 4
17874: PPUSH
17875: CALL_OW 258
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17899
// Say ( tmp , D2b-Sol1-1 ) else
17885: LD_VAR 0 4
17889: PPUSH
17890: LD_STRING D2b-Sol1-1
17892: PPUSH
17893: CALL_OW 88
17897: GO 17911
// Say ( tmp , D2b-FSol1-1 ) ;
17899: LD_VAR 0 4
17903: PPUSH
17904: LD_STRING D2b-FSol1-1
17906: PPUSH
17907: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17911: LD_EXP 20
17915: PPUSH
17916: LD_STRING D2b-Kurt-1
17918: PPUSH
17919: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17923: LD_VAR 0 4
17927: PPUSH
17928: CALL_OW 258
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: IFFALSE 17952
// Say ( tmp , D2b-Sol1-2 ) else
17938: LD_VAR 0 4
17942: PPUSH
17943: LD_STRING D2b-Sol1-2
17945: PPUSH
17946: CALL_OW 88
17950: GO 17964
// Say ( tmp , D2b-FSol1-2 ) ;
17952: LD_VAR 0 4
17956: PPUSH
17957: LD_STRING D2b-FSol1-2
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17964: LD_EXP 20
17968: PPUSH
17969: LD_STRING D2b-Kurt-2
17971: PPUSH
17972: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17976: LD_VAR 0 4
17980: PPUSH
17981: CALL_OW 258
17985: PUSH
17986: LD_INT 1
17988: EQUAL
17989: IFFALSE 18005
// Say ( tmp , D2c-Sol1-2 ) else
17991: LD_VAR 0 4
17995: PPUSH
17996: LD_STRING D2c-Sol1-2
17998: PPUSH
17999: CALL_OW 88
18003: GO 18017
// Say ( tmp , D2c-FSol1-2 ) ;
18005: LD_VAR 0 4
18009: PPUSH
18010: LD_STRING D2c-FSol1-2
18012: PPUSH
18013: CALL_OW 88
// DialogueOff ;
18017: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18021: LD_ADDR_VAR 0 7
18025: PUSH
18026: CALL 8044 0 0
18030: ST_TO_ADDR
// if dec2 = 1 then
18031: LD_VAR 0 7
18035: PUSH
18036: LD_INT 1
18038: EQUAL
18039: IFFALSE 18101
// begin DialogueOn ;
18041: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18045: LD_EXP 20
18049: PPUSH
18050: LD_STRING D2a-Kurt-1
18052: PPUSH
18053: CALL_OW 88
// DialogueOff ;
18057: CALL_OW 7
// InGameOff ;
18061: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 2
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18081: LD_EXP 20
18085: PPUSH
18086: LD_INT 8
18088: PPUSH
18089: CALL_OW 113
// readyToEscape := 1 ;
18093: LD_ADDR_EXP 22
18097: PUSH
18098: LD_INT 1
18100: ST_TO_ADDR
// end ; if dec2 = 2 then
18101: LD_VAR 0 7
18105: PUSH
18106: LD_INT 2
18108: EQUAL
18109: IFFALSE 18266
// begin if tmp = JMM then
18111: LD_VAR 0 4
18115: PUSH
18116: LD_EXP 1
18120: EQUAL
18121: IFFALSE 18181
// begin DialogueOn ;
18123: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18127: LD_EXP 1
18131: PPUSH
18132: LD_STRING D2c-JMM-1
18134: PPUSH
18135: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18139: LD_EXP 20
18143: PPUSH
18144: LD_STRING D2c-Kurt-1
18146: PPUSH
18147: CALL_OW 88
// DialogueOff ;
18151: CALL_OW 7
// InGameOff ;
18155: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18159: LD_EXP 20
18163: PPUSH
18164: LD_INT 8
18166: PPUSH
18167: CALL_OW 113
// readyToEscape := 1 ;
18171: LD_ADDR_EXP 22
18175: PUSH
18176: LD_INT 1
18178: ST_TO_ADDR
// end else
18179: GO 18266
// begin DialogueOn ;
18181: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18185: LD_VAR 0 4
18189: PPUSH
18190: CALL_OW 258
18194: PUSH
18195: LD_INT 1
18197: EQUAL
18198: IFFALSE 18214
// Say ( tmp , D2c-Sol1-1 ) else
18200: LD_VAR 0 4
18204: PPUSH
18205: LD_STRING D2c-Sol1-1
18207: PPUSH
18208: CALL_OW 88
18212: GO 18226
// Say ( tmp , D2c-FSol1-1 ) ;
18214: LD_VAR 0 4
18218: PPUSH
18219: LD_STRING D2c-FSol1-1
18221: PPUSH
18222: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18226: LD_EXP 20
18230: PPUSH
18231: LD_STRING D2c-Kurt-1
18233: PPUSH
18234: CALL_OW 88
// DialogueOff ;
18238: CALL_OW 7
// InGameOff ;
18242: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18246: LD_EXP 20
18250: PPUSH
18251: LD_INT 8
18253: PPUSH
18254: CALL_OW 113
// readyToEscape := 1 ;
18258: LD_ADDR_EXP 22
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18266: LD_VAR 0 6
18270: PUSH
18271: LD_INT 3
18273: EQUAL
18274: IFFALSE 18435
// begin DialogueOn ;
18276: CALL_OW 6
// if tmp = JMM then
18280: LD_VAR 0 4
18284: PUSH
18285: LD_EXP 1
18289: EQUAL
18290: IFFALSE 18350
// begin DialogueOn ;
18292: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18296: LD_EXP 1
18300: PPUSH
18301: LD_STRING D2c-JMM-1
18303: PPUSH
18304: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18308: LD_EXP 20
18312: PPUSH
18313: LD_STRING D2c-Kurt-1
18315: PPUSH
18316: CALL_OW 88
// DialogueOff ;
18320: CALL_OW 7
// InGameOff ;
18324: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18328: LD_EXP 20
18332: PPUSH
18333: LD_INT 8
18335: PPUSH
18336: CALL_OW 113
// readyToEscape := 1 ;
18340: LD_ADDR_EXP 22
18344: PUSH
18345: LD_INT 1
18347: ST_TO_ADDR
// end else
18348: GO 18435
// begin DialogueOn ;
18350: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18383
// Say ( tmp , D2c-Sol1-1 ) else
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2c-Sol1-1
18376: PPUSH
18377: CALL_OW 88
18381: GO 18395
// Say ( tmp , D2c-FSol1-1 ) ;
18383: LD_VAR 0 4
18387: PPUSH
18388: LD_STRING D2c-FSol1-1
18390: PPUSH
18391: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18395: LD_EXP 20
18399: PPUSH
18400: LD_STRING D2c-Kurt-1
18402: PPUSH
18403: CALL_OW 88
// DialogueOff ;
18407: CALL_OW 7
// InGameOff ;
18411: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18415: LD_EXP 20
18419: PPUSH
18420: LD_INT 8
18422: PPUSH
18423: CALL_OW 113
// readyToEscape := 1 ;
18427: LD_ADDR_EXP 22
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18435: LD_ADDR_EXP 30
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18443: LD_INT 35
18445: PPUSH
18446: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18450: LD_EXP 20
18454: PPUSH
18455: LD_INT 8
18457: PPUSH
18458: CALL_OW 308
18462: PUSH
18463: LD_EXP 22
18467: AND
18468: PUSH
18469: LD_EXP 20
18473: PPUSH
18474: CALL_OW 301
18478: OR
18479: IFFALSE 18443
// if IsDead ( Kurt ) then
18481: LD_EXP 20
18485: PPUSH
18486: CALL_OW 301
18490: IFFALSE 18494
// exit ;
18492: GO 18549
// RemoveUnit ( Kurt ) ;
18494: LD_EXP 20
18498: PPUSH
18499: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18503: LD_EXP 20
18507: PPUSH
18508: LD_STRING Kurt
18510: PPUSH
18511: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 2
18520: PPUSH
18521: CALL_OW 81
18525: PUSH
18526: LD_INT 0
18528: EQUAL
18529: IFFALSE 18541
// kurtStatus = 1 else
18531: LD_ADDR_EXP 21
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
18539: GO 18549
// kurtStatus = 2 ;
18541: LD_ADDR_EXP 21
18545: PUSH
18546: LD_INT 2
18548: ST_TO_ADDR
// end ; end_of_file
18549: LD_VAR 0 1
18553: RET
// every 0 0$2 do
18554: GO 18556
18556: DISABLE
// begin enable ;
18557: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18558: LD_INT 3
18560: PPUSH
18561: LD_INT 2
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: LD_EXP 32
18571: PPUSH
18572: CALL 8475 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18576: LD_INT 3
18578: PPUSH
18579: LD_INT 12
18581: PPUSH
18582: LD_EXP 32
18586: PPUSH
18587: CALL 10078 0 3
// if disableHealAI = 0 then
18591: LD_EXP 34
18595: PUSH
18596: LD_INT 0
18598: EQUAL
18599: IFFALSE 18620
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 9
18606: PPUSH
18607: LD_INT 10
18609: PPUSH
18610: LD_INT 32
18612: PUSH
18613: EMPTY
18614: LIST
18615: PPUSH
18616: CALL 8842 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18620: LD_INT 3
18622: PPUSH
18623: LD_INT 51
18625: PPUSH
18626: LD_INT 6
18628: PPUSH
18629: CALL 9531 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18633: LD_INT 2
18635: PPUSH
18636: CALL_OW 303
18640: PUSH
18641: LD_INT 2
18643: PPUSH
18644: CALL_OW 255
18648: PUSH
18649: LD_INT 1
18651: EQUAL
18652: OR
18653: IFFALSE 18667
// DefendDepot ( 3 , rudepo ) else
18655: LD_INT 3
18657: PPUSH
18658: LD_INT 2
18660: PPUSH
18661: CALL 9358 0 2
18665: GO 18677
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18667: LD_INT 3
18669: PPUSH
18670: LD_INT 10
18672: PPUSH
18673: CALL 9649 0 2
// end ;
18677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18678: LD_INT 22
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 55
18700: PUSH
18701: EMPTY
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 34
18709: PUSH
18710: LD_INT 51
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: LD_INT 0
18734: EQUAL
18735: PUSH
18736: LD_INT 21
18738: PPUSH
18739: CALL_OW 255
18743: PUSH
18744: LD_INT 3
18746: EQUAL
18747: AND
18748: PUSH
18749: LD_INT 21
18751: PPUSH
18752: CALL_OW 302
18756: AND
18757: PUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 255
18765: PUSH
18766: LD_INT 3
18768: EQUAL
18769: AND
18770: PUSH
18771: LD_INT 2
18773: PPUSH
18774: CALL_OW 302
18778: AND
18779: PUSH
18780: LD_INT 21
18782: PPUSH
18783: CALL_OW 313
18787: AND
18788: PUSH
18789: LD_EXP 48
18793: PUSH
18794: LD_INT 4
18796: PUSH
18797: LD_INT 5
18799: PUSH
18800: LD_INT 6
18802: PUSH
18803: LD_INT 6
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: LD_OWVAR 67
18816: ARRAY
18817: LESS
18818: AND
18819: IFFALSE 19040
18821: GO 18823
18823: DISABLE
// begin enable ;
18824: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 274
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2000
18838: PPUSH
18839: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18843: LD_INT 3
18845: PPUSH
18846: LD_INT 21
18848: PPUSH
18849: LD_INT 4
18851: PUSH
18852: LD_INT 5
18854: PUSH
18855: LD_INT 6
18857: PUSH
18858: LD_INT 6
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_OWVAR 67
18871: ARRAY
18872: PUSH
18873: LD_EXP 48
18877: MINUS
18878: PPUSH
18879: LD_INT 43
18881: PUSH
18882: LD_INT 43
18884: PUSH
18885: LD_INT 44
18887: PUSH
18888: LD_INT 44
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 43
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 43
18905: PUSH
18906: LD_INT 44
18908: PUSH
18909: LD_INT 44
18911: PUSH
18912: LD_INT 46
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 43
18925: PUSH
18926: LD_INT 43
18928: PUSH
18929: LD_INT 43
18931: PUSH
18932: LD_INT 44
18934: PUSH
18935: LD_INT 44
18937: PUSH
18938: LD_INT 46
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 43
18951: PUSH
18952: LD_INT 43
18954: PUSH
18955: LD_INT 44
18957: PUSH
18958: LD_INT 46
18960: PUSH
18961: LD_INT 46
18963: PUSH
18964: LD_INT 46
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: PUSH
18981: LD_OWVAR 67
18985: ARRAY
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_INT 22
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_INT 24
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 2
19011: PPUSH
19012: CALL_OW 12
19016: ARRAY
19017: PUSH
19018: LD_INT 24
19020: PUSH
19021: LD_INT 24
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: PUSH
19030: LD_OWVAR 67
19034: ARRAY
19035: PPUSH
19036: CALL 8321 0 7
// end ;
19040: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 255
19048: PUSH
19049: LD_INT 3
19051: EQUAL
19052: PUSH
19053: LD_INT 17
19055: PPUSH
19056: CALL_OW 302
19060: AND
19061: PUSH
19062: LD_INT 2
19064: PPUSH
19065: CALL_OW 255
19069: PUSH
19070: LD_INT 3
19072: EQUAL
19073: AND
19074: PUSH
19075: LD_INT 2
19077: PPUSH
19078: CALL_OW 302
19082: AND
19083: PUSH
19084: LD_EXP 48
19088: PUSH
19089: LD_INT 4
19091: PUSH
19092: LD_INT 5
19094: PUSH
19095: LD_INT 6
19097: PUSH
19098: LD_INT 7
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: PUSH
19107: LD_OWVAR 67
19111: ARRAY
19112: LESS
19113: AND
19114: IFFALSE 19162
19116: GO 19118
19118: DISABLE
// begin enable ;
19119: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19120: LD_INT 17
19122: PPUSH
19123: LD_INT 22
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: LD_INT 42
19134: PUSH
19135: LD_INT 43
19137: PUSH
19138: LD_INT 44
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 3
19151: PPUSH
19152: CALL_OW 12
19156: ARRAY
19157: PPUSH
19158: CALL_OW 185
// end ;
19162: END
// every 2 2$0 do var i , j ;
19163: GO 19165
19165: DISABLE
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19170: LD_INT 14700
19172: PUSH
19173: LD_INT 33600
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: CALL_OW 12
19190: ARRAY
19191: PPUSH
19192: CALL_OW 67
// disableHealAI = 1 ;
19196: LD_ADDR_EXP 34
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19204: LD_ADDR_VAR 0 1
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 4
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 69
19237: PUSH
19238: FOR_IN
19239: IFFALSE 19252
// ComExitBuilding ( i ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 122
19250: GO 19238
19252: POP
19253: POP
// wait ( 0 0$1 ) ;
19254: LD_INT 35
19256: PPUSH
19257: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19261: LD_INT 35
19263: PPUSH
19264: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 25
19285: PUSH
19286: LD_INT 4
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 69
19301: PUSH
19302: FOR_IN
19303: IFFALSE 19380
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_INT 17
19312: PPUSH
19313: LD_INT 22
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 25
19325: PUSH
19326: LD_INT 12
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 70
19341: PUSH
19342: FOR_IN
19343: IFFALSE 19376
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19345: LD_VAR 0 1
19349: PPUSH
19350: LD_VAR 0 2
19354: PPUSH
19355: CALL_OW 250
19359: PPUSH
19360: LD_VAR 0 2
19364: PPUSH
19365: CALL_OW 251
19369: PPUSH
19370: CALL_OW 191
19374: GO 19342
19376: POP
19377: POP
19378: GO 19302
19380: POP
19381: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19382: LD_INT 22
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 4
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 69
19410: PUSH
19411: LD_INT 0
19413: EQUAL
19414: PUSH
19415: LD_EXP 33
19419: PUSH
19420: LD_INT 6
19422: PUSH
19423: LD_INT 7
19425: PUSH
19426: LD_INT 8
19428: PUSH
19429: LD_INT 8
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_OWVAR 67
19442: ARRAY
19443: GREATEREQUAL
19444: OR
19445: PUSH
19446: LD_INT 17
19448: PPUSH
19449: LD_INT 22
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 25
19461: PUSH
19462: LD_INT 12
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 70
19477: PUSH
19478: LD_INT 0
19480: EQUAL
19481: OR
19482: IFFALSE 19261
// disableHealAI = 0 ;
19484: LD_ADDR_EXP 34
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19492: LD_ADDR_VAR 0 1
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: PUSH
19526: FOR_IN
19527: IFFALSE 19543
// SetClass ( i , 16 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 16
19536: PPUSH
19537: CALL_OW 336
19541: GO 19526
19543: POP
19544: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 22
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 25
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PPUSH
19574: CALL_OW 69
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19596
// ComEnterUnit ( i , rulab ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_INT 32
19589: PPUSH
19590: CALL_OW 120
19594: GO 19579
19596: POP
19597: POP
// end ; end_of_file
19598: PPOPN 2
19600: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19601: LD_EXP 27
19605: PUSH
19606: LD_INT 0
19608: LESSEQUAL
19609: IFFALSE 19763
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
19617: PPUSH
19618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_INT 22
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 30
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: ST_TO_ADDR
// for i in tmp do
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_VAR 0 2
19691: PUSH
19692: FOR_IN
19693: IFFALSE 19726
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_VAR 0 3
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 274
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 275
19722: PLUS
19723: ST_TO_ADDR
19724: GO 19692
19726: POP
19727: POP
// if yourCrates >= needCrates then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_EXP 26
19737: GREATEREQUAL
19738: IFFALSE 19756
// FinishMission ( yourCrates , needCrates ) else
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_EXP 26
19749: PPUSH
19750: CALL 19766 0 2
19754: GO 19763
// YouLost ( matmin ) ;
19756: LD_STRING matmin
19758: PPUSH
19759: CALL_OW 104
// end ;
19763: PPOPN 3
19765: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19772: LD_EXP 46
19776: PUSH
19777: LD_INT 8
19779: GREATEREQUAL
19780: PUSH
19781: LD_EXP 46
19785: PUSH
19786: LD_EXP 45
19790: PPUSH
19791: LD_INT 50
19793: PUSH
19794: EMPTY
19795: LIST
19796: PPUSH
19797: CALL_OW 72
19801: GREATEREQUAL
19802: OR
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 21
19816: PUSH
19817: LD_INT 1
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 23
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 50
19836: PUSH
19837: EMPTY
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: PUSH
19851: LD_INT 5
19853: LESS
19854: OR
19855: IFFALSE 19866
// begin YouLost ( Troops ) ;
19857: LD_STRING Troops
19859: PPUSH
19860: CALL_OW 104
// exit ;
19864: GO 20823
// end ; if killCounter = 0 then
19866: LD_EXP 46
19870: PUSH
19871: LD_INT 0
19873: EQUAL
19874: IFFALSE 19883
// SetAchievement ( ACH_SURV ) ;
19876: LD_STRING ACH_SURV
19878: PPUSH
19879: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19883: LD_INT 22
19885: PUSH
19886: LD_INT 3
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 21
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: PUSH
19912: LD_INT 0
19914: EQUAL
19915: IFFALSE 19931
// begin wait ( 3 ) ;
19917: LD_INT 3
19919: PPUSH
19920: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19924: LD_STRING ACH_BASEDESTROYER
19926: PPUSH
19927: CALL_OW 543
// end ; m1 := false ;
19931: LD_ADDR_VAR 0 4
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// m2 := false ;
19939: LD_ADDR_VAR 0 5
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// m3 := false ;
19947: LD_ADDR_VAR 0 6
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19955: LD_VAR 0 1
19959: PUSH
19960: LD_INT 100
19962: PUSH
19963: LD_INT 140
19965: PUSH
19966: LD_INT 180
19968: PUSH
19969: LD_INT 220
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: LD_OWVAR 67
19982: ARRAY
19983: PLUS
19984: PUSH
19985: LD_VAR 0 2
19989: GREATER
19990: IFFALSE 20022
// begin AddMedal ( cans , 1 ) ;
19992: LD_STRING cans
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20002: LD_INT 1
20004: PPUSH
20005: LD_STRING 06_crates_1
20007: PPUSH
20008: CALL_OW 39
// m1 := true ;
20012: LD_ADDR_VAR 0 4
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// end else
20020: GO 20043
// begin AddMedal ( cans , - 1 ) ;
20022: LD_STRING cans
20024: PPUSH
20025: LD_INT 1
20027: NEG
20028: PPUSH
20029: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20033: LD_INT 0
20035: PPUSH
20036: LD_STRING 06_crates_1
20038: PPUSH
20039: CALL_OW 39
// end ; if unitLost < 3 then
20043: LD_EXP 31
20047: PUSH
20048: LD_INT 3
20050: LESS
20051: IFFALSE 20073
// begin AddMedal ( people , 1 ) ;
20053: LD_STRING people
20055: PPUSH
20056: LD_INT 1
20058: PPUSH
20059: CALL_OW 101
// m2 := true ;
20063: LD_ADDR_VAR 0 5
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// end else
20071: GO 20084
// AddMedal ( people , - 1 ) ;
20073: LD_STRING people
20075: PPUSH
20076: LD_INT 1
20078: NEG
20079: PPUSH
20080: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20084: LD_EXP 29
20088: PPUSH
20089: LD_STRING 06_remoteVehs_1
20091: PPUSH
20092: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20096: LD_EXP 29
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: IFFALSE 20126
// begin AddMedal ( remote , 1 ) ;
20106: LD_STRING remote
20108: PPUSH
20109: LD_INT 1
20111: PPUSH
20112: CALL_OW 101
// m3 := true ;
20116: LD_ADDR_VAR 0 6
20120: PUSH
20121: LD_INT 1
20123: ST_TO_ADDR
// end else
20124: GO 20166
// begin if GetTech ( 18 , 1 ) = state_enabled then
20126: LD_INT 18
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 321
20136: PUSH
20137: LD_INT 1
20139: EQUAL
20140: IFFALSE 20155
// AddMedal ( remote , - 1 ) else
20142: LD_STRING remote
20144: PPUSH
20145: LD_INT 1
20147: NEG
20148: PPUSH
20149: CALL_OW 101
20153: GO 20166
// AddMedal ( remote , - 2 ) ;
20155: LD_STRING remote
20157: PPUSH
20158: LD_INT 2
20160: NEG
20161: PPUSH
20162: CALL_OW 101
// end ; if m1 and m2 and m3 then
20166: LD_VAR 0 4
20170: PUSH
20171: LD_VAR 0 5
20175: AND
20176: PUSH
20177: LD_VAR 0 6
20181: AND
20182: IFFALSE 20198
// begin wait ( 3 ) ;
20184: LD_INT 3
20186: PPUSH
20187: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20191: LD_STRING ACH_ASPEED_6
20193: PPUSH
20194: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20198: LD_OWVAR 67
20202: PUSH
20203: LD_INT 3
20205: GREATEREQUAL
20206: PUSH
20207: LD_VAR 0 4
20211: AND
20212: PUSH
20213: LD_VAR 0 5
20217: AND
20218: PUSH
20219: LD_VAR 0 6
20223: AND
20224: IFFALSE 20236
// SetAchievementEX ( ACH_AMER , 6 ) ;
20226: LD_STRING ACH_AMER
20228: PPUSH
20229: LD_INT 6
20231: PPUSH
20232: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20236: LD_EXP 21
20240: PPUSH
20241: LD_STRING 06_KurtStatus_1
20243: PPUSH
20244: CALL_OW 39
// GiveMedals ( Main ) ;
20248: LD_STRING Main
20250: PPUSH
20251: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20255: LD_INT 22
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 21
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 50
20277: PUSH
20278: EMPTY
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 25
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 25
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 25
20306: PUSH
20307: LD_INT 3
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 4
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: PPUSH
20337: CALL_OW 69
20341: PPUSH
20342: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20346: LD_EXP 1
20350: PPUSH
20351: LD_EXP 43
20355: PUSH
20356: LD_STRING JMM
20358: STR
20359: PPUSH
20360: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20364: LD_EXP 2
20368: PPUSH
20369: LD_EXP 43
20373: PUSH
20374: LD_STRING Lisa
20376: STR
20377: PPUSH
20378: CALL 7636 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20382: LD_EXP 3
20386: PPUSH
20387: LD_EXP 43
20391: PUSH
20392: LD_STRING Bobby
20394: STR
20395: PPUSH
20396: CALL 7636 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20400: LD_EXP 4
20404: PPUSH
20405: LD_EXP 43
20409: PUSH
20410: LD_STRING Cyrus
20412: STR
20413: PPUSH
20414: CALL 7636 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20418: LD_EXP 5
20422: PPUSH
20423: LD_EXP 43
20427: PUSH
20428: LD_STRING Frank
20430: STR
20431: PPUSH
20432: CALL 7636 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20436: LD_EXP 6
20440: PPUSH
20441: LD_EXP 43
20445: PUSH
20446: LD_STRING Brown
20448: STR
20449: PPUSH
20450: CALL 7636 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20454: LD_EXP 7
20458: PPUSH
20459: LD_EXP 43
20463: PUSH
20464: LD_STRING Donaldson
20466: STR
20467: PPUSH
20468: CALL 7636 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20472: LD_EXP 8
20476: PPUSH
20477: LD_EXP 43
20481: PUSH
20482: LD_STRING Gladstone
20484: STR
20485: PPUSH
20486: CALL 7636 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20490: LD_EXP 9
20494: PPUSH
20495: LD_EXP 43
20499: PUSH
20500: LD_STRING Denis
20502: STR
20503: PPUSH
20504: CALL 7636 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20508: LD_EXP 16
20512: PPUSH
20513: LD_EXP 43
20517: PUSH
20518: LD_STRING Joan
20520: STR
20521: PPUSH
20522: CALL 7636 0 2
// if IsLive ( Mike ) then
20526: LD_EXP 11
20530: PPUSH
20531: CALL_OW 300
20535: IFFALSE 20555
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20537: LD_EXP 11
20541: PPUSH
20542: LD_EXP 43
20546: PUSH
20547: LD_STRING Mike
20549: STR
20550: PPUSH
20551: CALL_OW 38
// if IsLive ( Joan ) then
20555: LD_EXP 16
20559: PPUSH
20560: CALL_OW 300
20564: IFFALSE 20578
// SaveCharacters ( Joan , Joan ) ;
20566: LD_EXP 16
20570: PPUSH
20571: LD_STRING Joan
20573: PPUSH
20574: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20578: LD_EXP 17
20582: PPUSH
20583: LD_STRING 06_JoanStatus_1
20585: PPUSH
20586: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20590: LD_INT 50
20592: PUSH
20593: EMPTY
20594: LIST
20595: PUSH
20596: LD_INT 22
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 21
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 25
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 25
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 25
20641: PUSH
20642: LD_INT 3
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 4
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: PPUSH
20672: CALL_OW 69
20676: PUSH
20677: LD_EXP 1
20681: PUSH
20682: LD_EXP 2
20686: PUSH
20687: LD_EXP 3
20691: PUSH
20692: LD_EXP 4
20696: PUSH
20697: LD_EXP 5
20701: PUSH
20702: LD_EXP 6
20706: PUSH
20707: LD_EXP 7
20711: PUSH
20712: LD_EXP 8
20716: PUSH
20717: LD_EXP 9
20721: PUSH
20722: LD_EXP 16
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: DIFF
20739: PPUSH
20740: LD_STRING 06_other_survivors
20742: PPUSH
20743: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20747: LD_INT 50
20749: PUSH
20750: EMPTY
20751: LIST
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 21
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 25
20778: PUSH
20779: LD_INT 12
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 25
20788: PUSH
20789: LD_INT 16
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: PPUSH
20812: LD_STRING 06_other_apemans
20814: PPUSH
20815: CALL_OW 38
// YouWin ;
20819: CALL_OW 103
// end ; end_of_file
20823: LD_VAR 0 3
20827: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20828: LD_EXP 48
20832: PUSH
20833: LD_OWVAR 1
20837: PUSH
20838: LD_INT 23100
20840: PUSH
20841: LD_INT 21000
20843: PUSH
20844: LD_INT 18900
20846: PUSH
20847: LD_INT 16800
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: PUSH
20856: LD_OWVAR 67
20860: ARRAY
20861: GREATER
20862: AND
20863: IFFALSE 21210
20865: GO 20867
20867: DISABLE
20868: LD_INT 0
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// begin enable ;
20874: ENABLE
// for i in ruAttackers do
20875: LD_ADDR_VAR 0 1
20879: PUSH
20880: LD_EXP 48
20884: PUSH
20885: FOR_IN
20886: IFFALSE 21208
// begin if not IsDrivenBy ( i ) then
20888: LD_VAR 0 1
20892: PPUSH
20893: CALL_OW 311
20897: NOT
20898: IFFALSE 20902
// continue ;
20900: GO 20885
// if i mod 2 = 0 then
20902: LD_VAR 0 1
20906: PUSH
20907: LD_INT 2
20909: MOD
20910: PUSH
20911: LD_INT 0
20913: EQUAL
20914: IFFALSE 20969
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20916: LD_ADDR_VAR 0 3
20920: PUSH
20921: LD_INT 91
20923: PUSH
20924: LD_INT 52
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 82
20933: PUSH
20934: LD_INT 34
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 90
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 86
20953: PUSH
20954: LD_INT 16
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: ST_TO_ADDR
20967: GO 21064
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20969: LD_ADDR_VAR 0 3
20973: PUSH
20974: LD_INT 91
20976: PUSH
20977: LD_INT 52
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 68
20986: PUSH
20987: LD_INT 46
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 48
20996: PUSH
20997: LD_INT 43
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 44
21006: PUSH
21007: LD_INT 42
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 33
21016: PUSH
21017: LD_INT 34
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 29
21026: PUSH
21027: LD_INT 23
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 30
21036: PUSH
21037: LD_INT 19
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 38
21046: PUSH
21047: LD_INT 16
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 256
21073: PUSH
21074: LD_INT 1000
21076: EQUAL
21077: IFFALSE 21095
// AgressiveMove ( i , path ) else
21079: LD_VAR 0 1
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: CALL 82986 0 2
21093: GO 21206
// if GetLives ( i ) < 650 then
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 256
21104: PUSH
21105: LD_INT 650
21107: LESS
21108: IFFALSE 21206
// begin if not IsInArea ( i , russianRepairArea ) then
21110: LD_VAR 0 1
21114: PPUSH
21115: LD_INT 12
21117: PPUSH
21118: CALL_OW 308
21122: NOT
21123: IFFALSE 21192
// begin SetTag ( i , 0 ) ;
21125: LD_VAR 0 1
21129: PPUSH
21130: LD_INT 0
21132: PPUSH
21133: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 261
21146: PUSH
21147: LD_INT 50
21149: LESS
21150: PUSH
21151: LD_INT 21
21153: PPUSH
21154: CALL_OW 302
21158: AND
21159: IFFALSE 21175
// ComMoveUnit ( i , rufab ) else
21161: LD_VAR 0 1
21165: PPUSH
21166: LD_INT 21
21168: PPUSH
21169: CALL_OW 112
21173: GO 21190
// ComMoveXY ( i , 121 , 99 ) ;
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_INT 121
21182: PPUSH
21183: LD_INT 99
21185: PPUSH
21186: CALL_OW 111
// end else
21190: GO 21206
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: CALL_OW 311
21201: PPUSH
21202: CALL 82082 0 1
// end ; end ;
21206: GO 20885
21208: POP
21209: POP
// end ;
21210: PPOPN 4
21212: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21213: LD_INT 0
21215: PPUSH
21216: PPUSH
21217: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: DOUBLE
21224: LD_INT 1
21226: DEC
21227: ST_TO_ADDR
21228: LD_INT 4
21230: PUSH
21231: LD_INT 5
21233: PUSH
21234: LD_INT 6
21236: PUSH
21237: LD_INT 6
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: PUSH
21246: LD_OWVAR 67
21250: ARRAY
21251: PUSH
21252: FOR_TO
21253: IFFALSE 21428
// begin uc_side := 3 ;
21255: LD_ADDR_OWVAR 20
21259: PUSH
21260: LD_INT 3
21262: ST_TO_ADDR
// uc_nation := 3 ;
21263: LD_ADDR_OWVAR 21
21267: PUSH
21268: LD_INT 3
21270: ST_TO_ADDR
// InitHC_All ( ) ;
21271: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21275: LD_INT 0
21277: PPUSH
21278: LD_INT 4
21280: PUSH
21281: LD_INT 5
21283: PUSH
21284: LD_INT 6
21286: PUSH
21287: LD_INT 6
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_OWVAR 67
21300: ARRAY
21301: PPUSH
21302: CALL_OW 381
// un := CreateHuman ;
21306: LD_ADDR_VAR 0 3
21310: PUSH
21311: CALL_OW 44
21315: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21316: LD_VAR 0 3
21320: PPUSH
21321: LD_INT 127
21323: PPUSH
21324: LD_INT 62
21326: PPUSH
21327: LD_INT 3
21329: PPUSH
21330: LD_INT 0
21332: PPUSH
21333: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21337: LD_ADDR_EXP 49
21341: PUSH
21342: LD_EXP 49
21346: PPUSH
21347: LD_EXP 49
21351: PUSH
21352: LD_INT 1
21354: PLUS
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: CALL_OW 1
21365: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21366: LD_VAR 0 3
21370: PPUSH
21371: LD_INT 83
21373: PPUSH
21374: LD_INT 49
21376: PPUSH
21377: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21381: LD_VAR 0 3
21385: PPUSH
21386: LD_INT 49
21388: PPUSH
21389: LD_INT 43
21391: PPUSH
21392: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21396: LD_VAR 0 3
21400: PPUSH
21401: LD_INT 31
21403: PPUSH
21404: LD_INT 15
21406: PPUSH
21407: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21411: LD_VAR 0 3
21415: PPUSH
21416: LD_INT 63
21418: PPUSH
21419: LD_INT 9
21421: PPUSH
21422: CALL_OW 174
// end ;
21426: GO 21252
21428: POP
21429: POP
// end ; end_of_file
21430: LD_VAR 0 1
21434: RET
// export function CreateNature ; var i , un ; begin
21435: LD_INT 0
21437: PPUSH
21438: PPUSH
21439: PPUSH
// for i := 1 to Difficulty + 2 do
21440: LD_ADDR_VAR 0 2
21444: PUSH
21445: DOUBLE
21446: LD_INT 1
21448: DEC
21449: ST_TO_ADDR
21450: LD_OWVAR 67
21454: PUSH
21455: LD_INT 2
21457: PLUS
21458: PUSH
21459: FOR_TO
21460: IFFALSE 21569
// begin hc_sex := sex_male ;
21462: LD_ADDR_OWVAR 27
21466: PUSH
21467: LD_INT 1
21469: ST_TO_ADDR
// uc_side := 0 ;
21470: LD_ADDR_OWVAR 20
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// uc_nation := nation_nature ;
21478: LD_ADDR_OWVAR 21
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// hc_class := class_tiger ;
21486: LD_ADDR_OWVAR 28
21490: PUSH
21491: LD_INT 14
21493: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21494: LD_ADDR_OWVAR 31
21498: PUSH
21499: LD_EXP 36
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21519: LD_ADDR_OWVAR 35
21523: PUSH
21524: LD_INT 5
21526: NEG
21527: PPUSH
21528: LD_INT 5
21530: PPUSH
21531: CALL_OW 12
21535: PUSH
21536: LD_OWVAR 67
21540: MUL
21541: ST_TO_ADDR
// un := CreateHuman ;
21542: LD_ADDR_VAR 0 3
21546: PUSH
21547: CALL_OW 44
21551: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21552: LD_VAR 0 3
21556: PPUSH
21557: LD_INT 18
21559: PPUSH
21560: LD_INT 0
21562: PPUSH
21563: CALL_OW 49
// end ;
21567: GO 21459
21569: POP
21570: POP
// for i = 1 to rand ( 3 , 4 ) do
21571: LD_ADDR_VAR 0 2
21575: PUSH
21576: DOUBLE
21577: LD_INT 1
21579: DEC
21580: ST_TO_ADDR
21581: LD_INT 3
21583: PPUSH
21584: LD_INT 4
21586: PPUSH
21587: CALL_OW 12
21591: PUSH
21592: FOR_TO
21593: IFFALSE 21663
// begin hc_class := class_phororhacos ;
21595: LD_ADDR_OWVAR 28
21599: PUSH
21600: LD_INT 18
21602: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21603: LD_ADDR_OWVAR 31
21607: PUSH
21608: LD_EXP 36
21612: PUSH
21613: LD_INT 0
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: ST_TO_ADDR
// hc_agressivity := 0 ;
21628: LD_ADDR_OWVAR 35
21632: PUSH
21633: LD_INT 0
21635: ST_TO_ADDR
// un = CreateHuman ;
21636: LD_ADDR_VAR 0 3
21640: PUSH
21641: CALL_OW 44
21645: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21646: LD_VAR 0 3
21650: PPUSH
21651: LD_INT 18
21653: PPUSH
21654: LD_INT 0
21656: PPUSH
21657: CALL_OW 49
// end ;
21661: GO 21592
21663: POP
21664: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21665: LD_ADDR_VAR 0 2
21669: PUSH
21670: DOUBLE
21671: LD_INT 1
21673: DEC
21674: ST_TO_ADDR
21675: LD_INT 3
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: LD_INT 4
21683: PUSH
21684: LD_INT 5
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: LD_OWVAR 67
21697: ARRAY
21698: PUSH
21699: FOR_TO
21700: IFFALSE 21841
// begin hc_class := class_apeman ;
21702: LD_ADDR_OWVAR 28
21706: PUSH
21707: LD_INT 12
21709: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21710: LD_ADDR_OWVAR 31
21714: PUSH
21715: LD_INT 2
21717: PPUSH
21718: LD_INT 5
21720: PPUSH
21721: CALL_OW 12
21725: PUSH
21726: LD_INT 0
21728: PPUSH
21729: LD_INT 2
21731: PPUSH
21732: CALL_OW 12
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21749: LD_ADDR_OWVAR 35
21753: PUSH
21754: LD_INT 5
21756: NEG
21757: PPUSH
21758: LD_INT 10
21760: PPUSH
21761: CALL_OW 12
21765: PUSH
21766: LD_INT 10
21768: NEG
21769: PPUSH
21770: LD_INT 20
21772: PPUSH
21773: CALL_OW 12
21777: PUSH
21778: LD_INT 20
21780: NEG
21781: PPUSH
21782: LD_INT 25
21784: PPUSH
21785: CALL_OW 12
21789: PUSH
21790: LD_INT 30
21792: NEG
21793: PPUSH
21794: LD_INT 30
21796: PPUSH
21797: CALL_OW 12
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: LD_OWVAR 67
21812: ARRAY
21813: ST_TO_ADDR
// un := CreateHuman ;
21814: LD_ADDR_VAR 0 3
21818: PUSH
21819: CALL_OW 44
21823: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21824: LD_VAR 0 3
21828: PPUSH
21829: LD_INT 19
21831: PPUSH
21832: LD_INT 0
21834: PPUSH
21835: CALL_OW 49
// end ;
21839: GO 21699
21841: POP
21842: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: DOUBLE
21849: LD_INT 1
21851: DEC
21852: ST_TO_ADDR
21853: LD_INT 3
21855: PUSH
21856: LD_INT 4
21858: PUSH
21859: LD_INT 5
21861: PUSH
21862: LD_INT 6
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: LD_OWVAR 67
21875: ARRAY
21876: PUSH
21877: FOR_TO
21878: IFFALSE 21971
// begin hc_class := class_apeman ;
21880: LD_ADDR_OWVAR 28
21884: PUSH
21885: LD_INT 12
21887: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21888: LD_ADDR_OWVAR 31
21892: PUSH
21893: LD_INT 2
21895: PPUSH
21896: LD_INT 5
21898: PPUSH
21899: CALL_OW 12
21903: PUSH
21904: LD_INT 0
21906: PPUSH
21907: LD_INT 2
21909: PPUSH
21910: CALL_OW 12
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21927: LD_ADDR_OWVAR 35
21931: PUSH
21932: LD_INT 15
21934: NEG
21935: PPUSH
21936: LD_INT 15
21938: PPUSH
21939: CALL_OW 12
21943: ST_TO_ADDR
// un = CreateHuman ;
21944: LD_ADDR_VAR 0 3
21948: PUSH
21949: CALL_OW 44
21953: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21954: LD_VAR 0 3
21958: PPUSH
21959: LD_INT 20
21961: PPUSH
21962: LD_INT 0
21964: PPUSH
21965: CALL_OW 49
// end ;
21969: GO 21877
21971: POP
21972: POP
// end ; end_of_file end_of_file
21973: LD_VAR 0 1
21977: RET
// export globalGameSaveCounter ; every 0 0$1 do
21978: GO 21980
21980: DISABLE
// begin enable ;
21981: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21982: LD_STRING updateTimer(
21984: PUSH
21985: LD_OWVAR 1
21989: STR
21990: PUSH
21991: LD_STRING );
21993: STR
21994: PPUSH
21995: CALL_OW 559
// end ;
21999: END
// every 0 0$1 do
22000: GO 22002
22002: DISABLE
// begin globalGameSaveCounter := 0 ;
22003: LD_ADDR_EXP 50
22007: PUSH
22008: LD_INT 0
22010: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22011: LD_STRING setGameSaveCounter(0)
22013: PPUSH
22014: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22018: LD_STRING initStreamRollete();
22020: PPUSH
22021: CALL_OW 559
// InitStreamMode ;
22025: CALL 23368 0 0
// DefineStreamItems ( false ) ;
22029: LD_INT 0
22031: PPUSH
22032: CALL 23832 0 1
// end ;
22036: END
// export function SOS_MapStart ( ) ; begin
22037: LD_INT 0
22039: PPUSH
// if streamModeActive then
22040: LD_EXP 51
22044: IFFALSE 22053
// DefineStreamItems ( true ) ;
22046: LD_INT 1
22048: PPUSH
22049: CALL 23832 0 1
// UpdateLuaVariables ( ) ;
22053: CALL 22070 0 0
// UpdateFactoryWaypoints ( ) ;
22057: CALL 36701 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22061: CALL 36958 0 0
// end ;
22065: LD_VAR 0 1
22069: RET
// function UpdateLuaVariables ( ) ; begin
22070: LD_INT 0
22072: PPUSH
// if globalGameSaveCounter then
22073: LD_EXP 50
22077: IFFALSE 22111
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22079: LD_ADDR_EXP 50
22083: PUSH
22084: LD_EXP 50
22088: PPUSH
22089: CALL 81743 0 1
22093: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22094: LD_STRING setGameSaveCounter(
22096: PUSH
22097: LD_EXP 50
22101: STR
22102: PUSH
22103: LD_STRING )
22105: STR
22106: PPUSH
22107: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22111: LD_STRING setGameDifficulty(
22113: PUSH
22114: LD_OWVAR 67
22118: STR
22119: PUSH
22120: LD_STRING )
22122: STR
22123: PPUSH
22124: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22128: LD_STRING displayDifficulty(
22130: PUSH
22131: LD_OWVAR 67
22135: STR
22136: PUSH
22137: LD_STRING )
22139: STR
22140: PPUSH
22141: CALL_OW 559
// end ;
22145: LD_VAR 0 1
22149: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22150: LD_INT 0
22152: PPUSH
// if p2 = stream_mode then
22153: LD_VAR 0 2
22157: PUSH
22158: LD_INT 100
22160: EQUAL
22161: IFFALSE 23164
// begin if not StreamModeActive then
22163: LD_EXP 51
22167: NOT
22168: IFFALSE 22178
// StreamModeActive := true ;
22170: LD_ADDR_EXP 51
22174: PUSH
22175: LD_INT 1
22177: ST_TO_ADDR
// if p3 = 0 then
22178: LD_VAR 0 3
22182: PUSH
22183: LD_INT 0
22185: EQUAL
22186: IFFALSE 22192
// InitStreamMode ;
22188: CALL 23368 0 0
// if p3 = 1 then
22192: LD_VAR 0 3
22196: PUSH
22197: LD_INT 1
22199: EQUAL
22200: IFFALSE 22210
// sRocket := true ;
22202: LD_ADDR_EXP 56
22206: PUSH
22207: LD_INT 1
22209: ST_TO_ADDR
// if p3 = 2 then
22210: LD_VAR 0 3
22214: PUSH
22215: LD_INT 2
22217: EQUAL
22218: IFFALSE 22228
// sSpeed := true ;
22220: LD_ADDR_EXP 55
22224: PUSH
22225: LD_INT 1
22227: ST_TO_ADDR
// if p3 = 3 then
22228: LD_VAR 0 3
22232: PUSH
22233: LD_INT 3
22235: EQUAL
22236: IFFALSE 22246
// sEngine := true ;
22238: LD_ADDR_EXP 57
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// if p3 = 4 then
22246: LD_VAR 0 3
22250: PUSH
22251: LD_INT 4
22253: EQUAL
22254: IFFALSE 22264
// sSpec := true ;
22256: LD_ADDR_EXP 54
22260: PUSH
22261: LD_INT 1
22263: ST_TO_ADDR
// if p3 = 5 then
22264: LD_VAR 0 3
22268: PUSH
22269: LD_INT 5
22271: EQUAL
22272: IFFALSE 22282
// sLevel := true ;
22274: LD_ADDR_EXP 58
22278: PUSH
22279: LD_INT 1
22281: ST_TO_ADDR
// if p3 = 6 then
22282: LD_VAR 0 3
22286: PUSH
22287: LD_INT 6
22289: EQUAL
22290: IFFALSE 22300
// sArmoury := true ;
22292: LD_ADDR_EXP 59
22296: PUSH
22297: LD_INT 1
22299: ST_TO_ADDR
// if p3 = 7 then
22300: LD_VAR 0 3
22304: PUSH
22305: LD_INT 7
22307: EQUAL
22308: IFFALSE 22318
// sRadar := true ;
22310: LD_ADDR_EXP 60
22314: PUSH
22315: LD_INT 1
22317: ST_TO_ADDR
// if p3 = 8 then
22318: LD_VAR 0 3
22322: PUSH
22323: LD_INT 8
22325: EQUAL
22326: IFFALSE 22336
// sBunker := true ;
22328: LD_ADDR_EXP 61
22332: PUSH
22333: LD_INT 1
22335: ST_TO_ADDR
// if p3 = 9 then
22336: LD_VAR 0 3
22340: PUSH
22341: LD_INT 9
22343: EQUAL
22344: IFFALSE 22354
// sHack := true ;
22346: LD_ADDR_EXP 62
22350: PUSH
22351: LD_INT 1
22353: ST_TO_ADDR
// if p3 = 10 then
22354: LD_VAR 0 3
22358: PUSH
22359: LD_INT 10
22361: EQUAL
22362: IFFALSE 22372
// sFire := true ;
22364: LD_ADDR_EXP 63
22368: PUSH
22369: LD_INT 1
22371: ST_TO_ADDR
// if p3 = 11 then
22372: LD_VAR 0 3
22376: PUSH
22377: LD_INT 11
22379: EQUAL
22380: IFFALSE 22390
// sRefresh := true ;
22382: LD_ADDR_EXP 64
22386: PUSH
22387: LD_INT 1
22389: ST_TO_ADDR
// if p3 = 12 then
22390: LD_VAR 0 3
22394: PUSH
22395: LD_INT 12
22397: EQUAL
22398: IFFALSE 22408
// sExp := true ;
22400: LD_ADDR_EXP 65
22404: PUSH
22405: LD_INT 1
22407: ST_TO_ADDR
// if p3 = 13 then
22408: LD_VAR 0 3
22412: PUSH
22413: LD_INT 13
22415: EQUAL
22416: IFFALSE 22426
// sDepot := true ;
22418: LD_ADDR_EXP 66
22422: PUSH
22423: LD_INT 1
22425: ST_TO_ADDR
// if p3 = 14 then
22426: LD_VAR 0 3
22430: PUSH
22431: LD_INT 14
22433: EQUAL
22434: IFFALSE 22444
// sFlag := true ;
22436: LD_ADDR_EXP 67
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
// if p3 = 15 then
22444: LD_VAR 0 3
22448: PUSH
22449: LD_INT 15
22451: EQUAL
22452: IFFALSE 22462
// sKamikadze := true ;
22454: LD_ADDR_EXP 75
22458: PUSH
22459: LD_INT 1
22461: ST_TO_ADDR
// if p3 = 16 then
22462: LD_VAR 0 3
22466: PUSH
22467: LD_INT 16
22469: EQUAL
22470: IFFALSE 22480
// sTroll := true ;
22472: LD_ADDR_EXP 76
22476: PUSH
22477: LD_INT 1
22479: ST_TO_ADDR
// if p3 = 17 then
22480: LD_VAR 0 3
22484: PUSH
22485: LD_INT 17
22487: EQUAL
22488: IFFALSE 22498
// sSlow := true ;
22490: LD_ADDR_EXP 77
22494: PUSH
22495: LD_INT 1
22497: ST_TO_ADDR
// if p3 = 18 then
22498: LD_VAR 0 3
22502: PUSH
22503: LD_INT 18
22505: EQUAL
22506: IFFALSE 22516
// sLack := true ;
22508: LD_ADDR_EXP 78
22512: PUSH
22513: LD_INT 1
22515: ST_TO_ADDR
// if p3 = 19 then
22516: LD_VAR 0 3
22520: PUSH
22521: LD_INT 19
22523: EQUAL
22524: IFFALSE 22534
// sTank := true ;
22526: LD_ADDR_EXP 80
22530: PUSH
22531: LD_INT 1
22533: ST_TO_ADDR
// if p3 = 20 then
22534: LD_VAR 0 3
22538: PUSH
22539: LD_INT 20
22541: EQUAL
22542: IFFALSE 22552
// sRemote := true ;
22544: LD_ADDR_EXP 81
22548: PUSH
22549: LD_INT 1
22551: ST_TO_ADDR
// if p3 = 21 then
22552: LD_VAR 0 3
22556: PUSH
22557: LD_INT 21
22559: EQUAL
22560: IFFALSE 22570
// sPowell := true ;
22562: LD_ADDR_EXP 82
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if p3 = 22 then
22570: LD_VAR 0 3
22574: PUSH
22575: LD_INT 22
22577: EQUAL
22578: IFFALSE 22588
// sTeleport := true ;
22580: LD_ADDR_EXP 85
22584: PUSH
22585: LD_INT 1
22587: ST_TO_ADDR
// if p3 = 23 then
22588: LD_VAR 0 3
22592: PUSH
22593: LD_INT 23
22595: EQUAL
22596: IFFALSE 22606
// sOilTower := true ;
22598: LD_ADDR_EXP 87
22602: PUSH
22603: LD_INT 1
22605: ST_TO_ADDR
// if p3 = 24 then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 24
22613: EQUAL
22614: IFFALSE 22624
// sShovel := true ;
22616: LD_ADDR_EXP 88
22620: PUSH
22621: LD_INT 1
22623: ST_TO_ADDR
// if p3 = 25 then
22624: LD_VAR 0 3
22628: PUSH
22629: LD_INT 25
22631: EQUAL
22632: IFFALSE 22642
// sSheik := true ;
22634: LD_ADDR_EXP 89
22638: PUSH
22639: LD_INT 1
22641: ST_TO_ADDR
// if p3 = 26 then
22642: LD_VAR 0 3
22646: PUSH
22647: LD_INT 26
22649: EQUAL
22650: IFFALSE 22660
// sEarthquake := true ;
22652: LD_ADDR_EXP 91
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// if p3 = 27 then
22660: LD_VAR 0 3
22664: PUSH
22665: LD_INT 27
22667: EQUAL
22668: IFFALSE 22678
// sAI := true ;
22670: LD_ADDR_EXP 92
22674: PUSH
22675: LD_INT 1
22677: ST_TO_ADDR
// if p3 = 28 then
22678: LD_VAR 0 3
22682: PUSH
22683: LD_INT 28
22685: EQUAL
22686: IFFALSE 22696
// sCargo := true ;
22688: LD_ADDR_EXP 95
22692: PUSH
22693: LD_INT 1
22695: ST_TO_ADDR
// if p3 = 29 then
22696: LD_VAR 0 3
22700: PUSH
22701: LD_INT 29
22703: EQUAL
22704: IFFALSE 22714
// sDLaser := true ;
22706: LD_ADDR_EXP 96
22710: PUSH
22711: LD_INT 1
22713: ST_TO_ADDR
// if p3 = 30 then
22714: LD_VAR 0 3
22718: PUSH
22719: LD_INT 30
22721: EQUAL
22722: IFFALSE 22732
// sExchange := true ;
22724: LD_ADDR_EXP 97
22728: PUSH
22729: LD_INT 1
22731: ST_TO_ADDR
// if p3 = 31 then
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 31
22739: EQUAL
22740: IFFALSE 22750
// sFac := true ;
22742: LD_ADDR_EXP 98
22746: PUSH
22747: LD_INT 1
22749: ST_TO_ADDR
// if p3 = 32 then
22750: LD_VAR 0 3
22754: PUSH
22755: LD_INT 32
22757: EQUAL
22758: IFFALSE 22768
// sPower := true ;
22760: LD_ADDR_EXP 99
22764: PUSH
22765: LD_INT 1
22767: ST_TO_ADDR
// if p3 = 33 then
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 33
22775: EQUAL
22776: IFFALSE 22786
// sRandom := true ;
22778: LD_ADDR_EXP 100
22782: PUSH
22783: LD_INT 1
22785: ST_TO_ADDR
// if p3 = 34 then
22786: LD_VAR 0 3
22790: PUSH
22791: LD_INT 34
22793: EQUAL
22794: IFFALSE 22804
// sShield := true ;
22796: LD_ADDR_EXP 101
22800: PUSH
22801: LD_INT 1
22803: ST_TO_ADDR
// if p3 = 35 then
22804: LD_VAR 0 3
22808: PUSH
22809: LD_INT 35
22811: EQUAL
22812: IFFALSE 22822
// sTime := true ;
22814: LD_ADDR_EXP 102
22818: PUSH
22819: LD_INT 1
22821: ST_TO_ADDR
// if p3 = 36 then
22822: LD_VAR 0 3
22826: PUSH
22827: LD_INT 36
22829: EQUAL
22830: IFFALSE 22840
// sTools := true ;
22832: LD_ADDR_EXP 103
22836: PUSH
22837: LD_INT 1
22839: ST_TO_ADDR
// if p3 = 101 then
22840: LD_VAR 0 3
22844: PUSH
22845: LD_INT 101
22847: EQUAL
22848: IFFALSE 22858
// sSold := true ;
22850: LD_ADDR_EXP 68
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// if p3 = 102 then
22858: LD_VAR 0 3
22862: PUSH
22863: LD_INT 102
22865: EQUAL
22866: IFFALSE 22876
// sDiff := true ;
22868: LD_ADDR_EXP 69
22872: PUSH
22873: LD_INT 1
22875: ST_TO_ADDR
// if p3 = 103 then
22876: LD_VAR 0 3
22880: PUSH
22881: LD_INT 103
22883: EQUAL
22884: IFFALSE 22894
// sFog := true ;
22886: LD_ADDR_EXP 72
22890: PUSH
22891: LD_INT 1
22893: ST_TO_ADDR
// if p3 = 104 then
22894: LD_VAR 0 3
22898: PUSH
22899: LD_INT 104
22901: EQUAL
22902: IFFALSE 22912
// sReset := true ;
22904: LD_ADDR_EXP 73
22908: PUSH
22909: LD_INT 1
22911: ST_TO_ADDR
// if p3 = 105 then
22912: LD_VAR 0 3
22916: PUSH
22917: LD_INT 105
22919: EQUAL
22920: IFFALSE 22930
// sSun := true ;
22922: LD_ADDR_EXP 74
22926: PUSH
22927: LD_INT 1
22929: ST_TO_ADDR
// if p3 = 106 then
22930: LD_VAR 0 3
22934: PUSH
22935: LD_INT 106
22937: EQUAL
22938: IFFALSE 22948
// sTiger := true ;
22940: LD_ADDR_EXP 70
22944: PUSH
22945: LD_INT 1
22947: ST_TO_ADDR
// if p3 = 107 then
22948: LD_VAR 0 3
22952: PUSH
22953: LD_INT 107
22955: EQUAL
22956: IFFALSE 22966
// sBomb := true ;
22958: LD_ADDR_EXP 71
22962: PUSH
22963: LD_INT 1
22965: ST_TO_ADDR
// if p3 = 108 then
22966: LD_VAR 0 3
22970: PUSH
22971: LD_INT 108
22973: EQUAL
22974: IFFALSE 22984
// sWound := true ;
22976: LD_ADDR_EXP 79
22980: PUSH
22981: LD_INT 1
22983: ST_TO_ADDR
// if p3 = 109 then
22984: LD_VAR 0 3
22988: PUSH
22989: LD_INT 109
22991: EQUAL
22992: IFFALSE 23002
// sBetray := true ;
22994: LD_ADDR_EXP 83
22998: PUSH
22999: LD_INT 1
23001: ST_TO_ADDR
// if p3 = 110 then
23002: LD_VAR 0 3
23006: PUSH
23007: LD_INT 110
23009: EQUAL
23010: IFFALSE 23020
// sContamin := true ;
23012: LD_ADDR_EXP 84
23016: PUSH
23017: LD_INT 1
23019: ST_TO_ADDR
// if p3 = 111 then
23020: LD_VAR 0 3
23024: PUSH
23025: LD_INT 111
23027: EQUAL
23028: IFFALSE 23038
// sOil := true ;
23030: LD_ADDR_EXP 86
23034: PUSH
23035: LD_INT 1
23037: ST_TO_ADDR
// if p3 = 112 then
23038: LD_VAR 0 3
23042: PUSH
23043: LD_INT 112
23045: EQUAL
23046: IFFALSE 23056
// sStu := true ;
23048: LD_ADDR_EXP 90
23052: PUSH
23053: LD_INT 1
23055: ST_TO_ADDR
// if p3 = 113 then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_INT 113
23063: EQUAL
23064: IFFALSE 23074
// sBazooka := true ;
23066: LD_ADDR_EXP 93
23070: PUSH
23071: LD_INT 1
23073: ST_TO_ADDR
// if p3 = 114 then
23074: LD_VAR 0 3
23078: PUSH
23079: LD_INT 114
23081: EQUAL
23082: IFFALSE 23092
// sMortar := true ;
23084: LD_ADDR_EXP 94
23088: PUSH
23089: LD_INT 1
23091: ST_TO_ADDR
// if p3 = 115 then
23092: LD_VAR 0 3
23096: PUSH
23097: LD_INT 115
23099: EQUAL
23100: IFFALSE 23110
// sRanger := true ;
23102: LD_ADDR_EXP 104
23106: PUSH
23107: LD_INT 1
23109: ST_TO_ADDR
// if p3 = 116 then
23110: LD_VAR 0 3
23114: PUSH
23115: LD_INT 116
23117: EQUAL
23118: IFFALSE 23128
// sComputer := true ;
23120: LD_ADDR_EXP 105
23124: PUSH
23125: LD_INT 1
23127: ST_TO_ADDR
// if p3 = 117 then
23128: LD_VAR 0 3
23132: PUSH
23133: LD_INT 117
23135: EQUAL
23136: IFFALSE 23146
// s30 := true ;
23138: LD_ADDR_EXP 106
23142: PUSH
23143: LD_INT 1
23145: ST_TO_ADDR
// if p3 = 118 then
23146: LD_VAR 0 3
23150: PUSH
23151: LD_INT 118
23153: EQUAL
23154: IFFALSE 23164
// s60 := true ;
23156: LD_ADDR_EXP 107
23160: PUSH
23161: LD_INT 1
23163: ST_TO_ADDR
// end ; if p2 = hack_mode then
23164: LD_VAR 0 2
23168: PUSH
23169: LD_INT 101
23171: EQUAL
23172: IFFALSE 23300
// begin case p3 of 1 :
23174: LD_VAR 0 3
23178: PUSH
23179: LD_INT 1
23181: DOUBLE
23182: EQUAL
23183: IFTRUE 23187
23185: GO 23194
23187: POP
// hHackUnlimitedResources ; 2 :
23188: CALL 35447 0 0
23192: GO 23300
23194: LD_INT 2
23196: DOUBLE
23197: EQUAL
23198: IFTRUE 23202
23200: GO 23209
23202: POP
// hHackSetLevel10 ; 3 :
23203: CALL 35580 0 0
23207: GO 23300
23209: LD_INT 3
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23217
23215: GO 23224
23217: POP
// hHackSetLevel10YourUnits ; 4 :
23218: CALL 35665 0 0
23222: GO 23300
23224: LD_INT 4
23226: DOUBLE
23227: EQUAL
23228: IFTRUE 23232
23230: GO 23239
23232: POP
// hHackInvincible ; 5 :
23233: CALL 36113 0 0
23237: GO 23300
23239: LD_INT 5
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23254
23247: POP
// hHackInvisible ; 6 :
23248: CALL 36224 0 0
23252: GO 23300
23254: LD_INT 6
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23269
23262: POP
// hHackChangeYourSide ; 7 :
23263: CALL 36281 0 0
23267: GO 23300
23269: LD_INT 7
23271: DOUBLE
23272: EQUAL
23273: IFTRUE 23277
23275: GO 23284
23277: POP
// hHackChangeUnitSide ; 8 :
23278: CALL 36323 0 0
23282: GO 23300
23284: LD_INT 8
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23299
23292: POP
// hHackFog ; end ;
23293: CALL 36424 0 0
23297: GO 23300
23299: POP
// end ; if p2 = game_save_mode then
23300: LD_VAR 0 2
23304: PUSH
23305: LD_INT 102
23307: EQUAL
23308: IFFALSE 23363
// begin if p3 = 1 then
23310: LD_VAR 0 3
23314: PUSH
23315: LD_INT 1
23317: EQUAL
23318: IFFALSE 23330
// globalGameSaveCounter := p4 ;
23320: LD_ADDR_EXP 50
23324: PUSH
23325: LD_VAR 0 4
23329: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23330: LD_VAR 0 3
23334: PUSH
23335: LD_INT 2
23337: EQUAL
23338: PUSH
23339: LD_EXP 50
23343: AND
23344: IFFALSE 23363
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23346: LD_STRING setGameSaveCounter(
23348: PUSH
23349: LD_EXP 50
23353: STR
23354: PUSH
23355: LD_STRING )
23357: STR
23358: PPUSH
23359: CALL_OW 559
// end ; end ;
23363: LD_VAR 0 7
23367: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23368: LD_INT 0
23370: PPUSH
// streamModeActive := false ;
23371: LD_ADDR_EXP 51
23375: PUSH
23376: LD_INT 0
23378: ST_TO_ADDR
// normalCounter := 36 ;
23379: LD_ADDR_EXP 52
23383: PUSH
23384: LD_INT 36
23386: ST_TO_ADDR
// hardcoreCounter := 18 ;
23387: LD_ADDR_EXP 53
23391: PUSH
23392: LD_INT 18
23394: ST_TO_ADDR
// sRocket := false ;
23395: LD_ADDR_EXP 56
23399: PUSH
23400: LD_INT 0
23402: ST_TO_ADDR
// sSpeed := false ;
23403: LD_ADDR_EXP 55
23407: PUSH
23408: LD_INT 0
23410: ST_TO_ADDR
// sEngine := false ;
23411: LD_ADDR_EXP 57
23415: PUSH
23416: LD_INT 0
23418: ST_TO_ADDR
// sSpec := false ;
23419: LD_ADDR_EXP 54
23423: PUSH
23424: LD_INT 0
23426: ST_TO_ADDR
// sLevel := false ;
23427: LD_ADDR_EXP 58
23431: PUSH
23432: LD_INT 0
23434: ST_TO_ADDR
// sArmoury := false ;
23435: LD_ADDR_EXP 59
23439: PUSH
23440: LD_INT 0
23442: ST_TO_ADDR
// sRadar := false ;
23443: LD_ADDR_EXP 60
23447: PUSH
23448: LD_INT 0
23450: ST_TO_ADDR
// sBunker := false ;
23451: LD_ADDR_EXP 61
23455: PUSH
23456: LD_INT 0
23458: ST_TO_ADDR
// sHack := false ;
23459: LD_ADDR_EXP 62
23463: PUSH
23464: LD_INT 0
23466: ST_TO_ADDR
// sFire := false ;
23467: LD_ADDR_EXP 63
23471: PUSH
23472: LD_INT 0
23474: ST_TO_ADDR
// sRefresh := false ;
23475: LD_ADDR_EXP 64
23479: PUSH
23480: LD_INT 0
23482: ST_TO_ADDR
// sExp := false ;
23483: LD_ADDR_EXP 65
23487: PUSH
23488: LD_INT 0
23490: ST_TO_ADDR
// sDepot := false ;
23491: LD_ADDR_EXP 66
23495: PUSH
23496: LD_INT 0
23498: ST_TO_ADDR
// sFlag := false ;
23499: LD_ADDR_EXP 67
23503: PUSH
23504: LD_INT 0
23506: ST_TO_ADDR
// sKamikadze := false ;
23507: LD_ADDR_EXP 75
23511: PUSH
23512: LD_INT 0
23514: ST_TO_ADDR
// sTroll := false ;
23515: LD_ADDR_EXP 76
23519: PUSH
23520: LD_INT 0
23522: ST_TO_ADDR
// sSlow := false ;
23523: LD_ADDR_EXP 77
23527: PUSH
23528: LD_INT 0
23530: ST_TO_ADDR
// sLack := false ;
23531: LD_ADDR_EXP 78
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// sTank := false ;
23539: LD_ADDR_EXP 80
23543: PUSH
23544: LD_INT 0
23546: ST_TO_ADDR
// sRemote := false ;
23547: LD_ADDR_EXP 81
23551: PUSH
23552: LD_INT 0
23554: ST_TO_ADDR
// sPowell := false ;
23555: LD_ADDR_EXP 82
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
// sTeleport := false ;
23563: LD_ADDR_EXP 85
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
// sOilTower := false ;
23571: LD_ADDR_EXP 87
23575: PUSH
23576: LD_INT 0
23578: ST_TO_ADDR
// sShovel := false ;
23579: LD_ADDR_EXP 88
23583: PUSH
23584: LD_INT 0
23586: ST_TO_ADDR
// sSheik := false ;
23587: LD_ADDR_EXP 89
23591: PUSH
23592: LD_INT 0
23594: ST_TO_ADDR
// sEarthquake := false ;
23595: LD_ADDR_EXP 91
23599: PUSH
23600: LD_INT 0
23602: ST_TO_ADDR
// sAI := false ;
23603: LD_ADDR_EXP 92
23607: PUSH
23608: LD_INT 0
23610: ST_TO_ADDR
// sCargo := false ;
23611: LD_ADDR_EXP 95
23615: PUSH
23616: LD_INT 0
23618: ST_TO_ADDR
// sDLaser := false ;
23619: LD_ADDR_EXP 96
23623: PUSH
23624: LD_INT 0
23626: ST_TO_ADDR
// sExchange := false ;
23627: LD_ADDR_EXP 97
23631: PUSH
23632: LD_INT 0
23634: ST_TO_ADDR
// sFac := false ;
23635: LD_ADDR_EXP 98
23639: PUSH
23640: LD_INT 0
23642: ST_TO_ADDR
// sPower := false ;
23643: LD_ADDR_EXP 99
23647: PUSH
23648: LD_INT 0
23650: ST_TO_ADDR
// sRandom := false ;
23651: LD_ADDR_EXP 100
23655: PUSH
23656: LD_INT 0
23658: ST_TO_ADDR
// sShield := false ;
23659: LD_ADDR_EXP 101
23663: PUSH
23664: LD_INT 0
23666: ST_TO_ADDR
// sTime := false ;
23667: LD_ADDR_EXP 102
23671: PUSH
23672: LD_INT 0
23674: ST_TO_ADDR
// sTools := false ;
23675: LD_ADDR_EXP 103
23679: PUSH
23680: LD_INT 0
23682: ST_TO_ADDR
// sSold := false ;
23683: LD_ADDR_EXP 68
23687: PUSH
23688: LD_INT 0
23690: ST_TO_ADDR
// sDiff := false ;
23691: LD_ADDR_EXP 69
23695: PUSH
23696: LD_INT 0
23698: ST_TO_ADDR
// sFog := false ;
23699: LD_ADDR_EXP 72
23703: PUSH
23704: LD_INT 0
23706: ST_TO_ADDR
// sReset := false ;
23707: LD_ADDR_EXP 73
23711: PUSH
23712: LD_INT 0
23714: ST_TO_ADDR
// sSun := false ;
23715: LD_ADDR_EXP 74
23719: PUSH
23720: LD_INT 0
23722: ST_TO_ADDR
// sTiger := false ;
23723: LD_ADDR_EXP 70
23727: PUSH
23728: LD_INT 0
23730: ST_TO_ADDR
// sBomb := false ;
23731: LD_ADDR_EXP 71
23735: PUSH
23736: LD_INT 0
23738: ST_TO_ADDR
// sWound := false ;
23739: LD_ADDR_EXP 79
23743: PUSH
23744: LD_INT 0
23746: ST_TO_ADDR
// sBetray := false ;
23747: LD_ADDR_EXP 83
23751: PUSH
23752: LD_INT 0
23754: ST_TO_ADDR
// sContamin := false ;
23755: LD_ADDR_EXP 84
23759: PUSH
23760: LD_INT 0
23762: ST_TO_ADDR
// sOil := false ;
23763: LD_ADDR_EXP 86
23767: PUSH
23768: LD_INT 0
23770: ST_TO_ADDR
// sStu := false ;
23771: LD_ADDR_EXP 90
23775: PUSH
23776: LD_INT 0
23778: ST_TO_ADDR
// sBazooka := false ;
23779: LD_ADDR_EXP 93
23783: PUSH
23784: LD_INT 0
23786: ST_TO_ADDR
// sMortar := false ;
23787: LD_ADDR_EXP 94
23791: PUSH
23792: LD_INT 0
23794: ST_TO_ADDR
// sRanger := false ;
23795: LD_ADDR_EXP 104
23799: PUSH
23800: LD_INT 0
23802: ST_TO_ADDR
// sComputer := false ;
23803: LD_ADDR_EXP 105
23807: PUSH
23808: LD_INT 0
23810: ST_TO_ADDR
// s30 := false ;
23811: LD_ADDR_EXP 106
23815: PUSH
23816: LD_INT 0
23818: ST_TO_ADDR
// s60 := false ;
23819: LD_ADDR_EXP 107
23823: PUSH
23824: LD_INT 0
23826: ST_TO_ADDR
// end ;
23827: LD_VAR 0 1
23831: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23832: LD_INT 0
23834: PPUSH
23835: PPUSH
23836: PPUSH
23837: PPUSH
23838: PPUSH
23839: PPUSH
23840: PPUSH
// result := [ ] ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: EMPTY
23847: ST_TO_ADDR
// if campaign_id = 1 then
23848: LD_OWVAR 69
23852: PUSH
23853: LD_INT 1
23855: EQUAL
23856: IFFALSE 27022
// begin case mission_number of 1 :
23858: LD_OWVAR 70
23862: PUSH
23863: LD_INT 1
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23947
23871: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23872: LD_ADDR_VAR 0 2
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 4
23882: PUSH
23883: LD_INT 11
23885: PUSH
23886: LD_INT 12
23888: PUSH
23889: LD_INT 15
23891: PUSH
23892: LD_INT 16
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_INT 23
23900: PUSH
23901: LD_INT 26
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 101
23917: PUSH
23918: LD_INT 102
23920: PUSH
23921: LD_INT 106
23923: PUSH
23924: LD_INT 116
23926: PUSH
23927: LD_INT 117
23929: PUSH
23930: LD_INT 118
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: ST_TO_ADDR
23945: GO 27020
23947: LD_INT 2
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 24039
23955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23956: LD_ADDR_VAR 0 2
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: LD_INT 4
23966: PUSH
23967: LD_INT 11
23969: PUSH
23970: LD_INT 12
23972: PUSH
23973: LD_INT 15
23975: PUSH
23976: LD_INT 16
23978: PUSH
23979: LD_INT 22
23981: PUSH
23982: LD_INT 23
23984: PUSH
23985: LD_INT 26
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 101
24001: PUSH
24002: LD_INT 102
24004: PUSH
24005: LD_INT 105
24007: PUSH
24008: LD_INT 106
24010: PUSH
24011: LD_INT 108
24013: PUSH
24014: LD_INT 116
24016: PUSH
24017: LD_INT 117
24019: PUSH
24020: LD_INT 118
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: ST_TO_ADDR
24037: GO 27020
24039: LD_INT 3
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24135
24047: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24048: LD_ADDR_VAR 0 2
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 4
24058: PUSH
24059: LD_INT 5
24061: PUSH
24062: LD_INT 11
24064: PUSH
24065: LD_INT 12
24067: PUSH
24068: LD_INT 15
24070: PUSH
24071: LD_INT 16
24073: PUSH
24074: LD_INT 22
24076: PUSH
24077: LD_INT 26
24079: PUSH
24080: LD_INT 36
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 101
24097: PUSH
24098: LD_INT 102
24100: PUSH
24101: LD_INT 105
24103: PUSH
24104: LD_INT 106
24106: PUSH
24107: LD_INT 108
24109: PUSH
24110: LD_INT 116
24112: PUSH
24113: LD_INT 117
24115: PUSH
24116: LD_INT 118
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: ST_TO_ADDR
24133: GO 27020
24135: LD_INT 4
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24239
24143: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24144: LD_ADDR_VAR 0 2
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 4
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: LD_INT 8
24160: PUSH
24161: LD_INT 11
24163: PUSH
24164: LD_INT 12
24166: PUSH
24167: LD_INT 15
24169: PUSH
24170: LD_INT 16
24172: PUSH
24173: LD_INT 22
24175: PUSH
24176: LD_INT 23
24178: PUSH
24179: LD_INT 26
24181: PUSH
24182: LD_INT 36
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 101
24201: PUSH
24202: LD_INT 102
24204: PUSH
24205: LD_INT 105
24207: PUSH
24208: LD_INT 106
24210: PUSH
24211: LD_INT 108
24213: PUSH
24214: LD_INT 116
24216: PUSH
24217: LD_INT 117
24219: PUSH
24220: LD_INT 118
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: ST_TO_ADDR
24237: GO 27020
24239: LD_INT 5
24241: DOUBLE
24242: EQUAL
24243: IFTRUE 24247
24245: GO 24359
24247: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24248: LD_ADDR_VAR 0 2
24252: PUSH
24253: LD_INT 2
24255: PUSH
24256: LD_INT 4
24258: PUSH
24259: LD_INT 5
24261: PUSH
24262: LD_INT 6
24264: PUSH
24265: LD_INT 8
24267: PUSH
24268: LD_INT 11
24270: PUSH
24271: LD_INT 12
24273: PUSH
24274: LD_INT 15
24276: PUSH
24277: LD_INT 16
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_INT 23
24285: PUSH
24286: LD_INT 25
24288: PUSH
24289: LD_INT 26
24291: PUSH
24292: LD_INT 36
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 101
24313: PUSH
24314: LD_INT 102
24316: PUSH
24317: LD_INT 105
24319: PUSH
24320: LD_INT 106
24322: PUSH
24323: LD_INT 108
24325: PUSH
24326: LD_INT 109
24328: PUSH
24329: LD_INT 112
24331: PUSH
24332: LD_INT 116
24334: PUSH
24335: LD_INT 117
24337: PUSH
24338: LD_INT 118
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: ST_TO_ADDR
24357: GO 27020
24359: LD_INT 6
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24499
24367: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24368: LD_ADDR_VAR 0 2
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 4
24378: PUSH
24379: LD_INT 5
24381: PUSH
24382: LD_INT 6
24384: PUSH
24385: LD_INT 8
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 12
24393: PUSH
24394: LD_INT 15
24396: PUSH
24397: LD_INT 16
24399: PUSH
24400: LD_INT 20
24402: PUSH
24403: LD_INT 21
24405: PUSH
24406: LD_INT 22
24408: PUSH
24409: LD_INT 23
24411: PUSH
24412: LD_INT 25
24414: PUSH
24415: LD_INT 26
24417: PUSH
24418: LD_INT 30
24420: PUSH
24421: LD_INT 31
24423: PUSH
24424: LD_INT 32
24426: PUSH
24427: LD_INT 36
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 101
24453: PUSH
24454: LD_INT 102
24456: PUSH
24457: LD_INT 105
24459: PUSH
24460: LD_INT 106
24462: PUSH
24463: LD_INT 108
24465: PUSH
24466: LD_INT 109
24468: PUSH
24469: LD_INT 112
24471: PUSH
24472: LD_INT 116
24474: PUSH
24475: LD_INT 117
24477: PUSH
24478: LD_INT 118
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: ST_TO_ADDR
24497: GO 27020
24499: LD_INT 7
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24619
24507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24508: LD_ADDR_VAR 0 2
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 4
24518: PUSH
24519: LD_INT 5
24521: PUSH
24522: LD_INT 7
24524: PUSH
24525: LD_INT 11
24527: PUSH
24528: LD_INT 12
24530: PUSH
24531: LD_INT 15
24533: PUSH
24534: LD_INT 16
24536: PUSH
24537: LD_INT 20
24539: PUSH
24540: LD_INT 21
24542: PUSH
24543: LD_INT 22
24545: PUSH
24546: LD_INT 23
24548: PUSH
24549: LD_INT 25
24551: PUSH
24552: LD_INT 26
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 101
24573: PUSH
24574: LD_INT 102
24576: PUSH
24577: LD_INT 103
24579: PUSH
24580: LD_INT 105
24582: PUSH
24583: LD_INT 106
24585: PUSH
24586: LD_INT 108
24588: PUSH
24589: LD_INT 112
24591: PUSH
24592: LD_INT 116
24594: PUSH
24595: LD_INT 117
24597: PUSH
24598: LD_INT 118
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: ST_TO_ADDR
24617: GO 27020
24619: LD_INT 8
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24767
24627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 4
24638: PUSH
24639: LD_INT 5
24641: PUSH
24642: LD_INT 6
24644: PUSH
24645: LD_INT 7
24647: PUSH
24648: LD_INT 8
24650: PUSH
24651: LD_INT 11
24653: PUSH
24654: LD_INT 12
24656: PUSH
24657: LD_INT 15
24659: PUSH
24660: LD_INT 16
24662: PUSH
24663: LD_INT 20
24665: PUSH
24666: LD_INT 21
24668: PUSH
24669: LD_INT 22
24671: PUSH
24672: LD_INT 23
24674: PUSH
24675: LD_INT 25
24677: PUSH
24678: LD_INT 26
24680: PUSH
24681: LD_INT 30
24683: PUSH
24684: LD_INT 31
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: LD_INT 36
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 101
24717: PUSH
24718: LD_INT 102
24720: PUSH
24721: LD_INT 103
24723: PUSH
24724: LD_INT 105
24726: PUSH
24727: LD_INT 106
24729: PUSH
24730: LD_INT 108
24732: PUSH
24733: LD_INT 109
24735: PUSH
24736: LD_INT 112
24738: PUSH
24739: LD_INT 116
24741: PUSH
24742: LD_INT 117
24744: PUSH
24745: LD_INT 118
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 27020
24767: LD_INT 9
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24923
24775: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24776: LD_ADDR_VAR 0 2
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 4
24786: PUSH
24787: LD_INT 5
24789: PUSH
24790: LD_INT 6
24792: PUSH
24793: LD_INT 7
24795: PUSH
24796: LD_INT 8
24798: PUSH
24799: LD_INT 11
24801: PUSH
24802: LD_INT 12
24804: PUSH
24805: LD_INT 15
24807: PUSH
24808: LD_INT 16
24810: PUSH
24811: LD_INT 20
24813: PUSH
24814: LD_INT 21
24816: PUSH
24817: LD_INT 22
24819: PUSH
24820: LD_INT 23
24822: PUSH
24823: LD_INT 25
24825: PUSH
24826: LD_INT 26
24828: PUSH
24829: LD_INT 28
24831: PUSH
24832: LD_INT 30
24834: PUSH
24835: LD_INT 31
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 36
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 101
24869: PUSH
24870: LD_INT 102
24872: PUSH
24873: LD_INT 103
24875: PUSH
24876: LD_INT 105
24878: PUSH
24879: LD_INT 106
24881: PUSH
24882: LD_INT 108
24884: PUSH
24885: LD_INT 109
24887: PUSH
24888: LD_INT 112
24890: PUSH
24891: LD_INT 114
24893: PUSH
24894: LD_INT 116
24896: PUSH
24897: LD_INT 117
24899: PUSH
24900: LD_INT 118
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: ST_TO_ADDR
24921: GO 27020
24923: LD_INT 10
24925: DOUBLE
24926: EQUAL
24927: IFTRUE 24931
24929: GO 25127
24931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 4
24942: PUSH
24943: LD_INT 5
24945: PUSH
24946: LD_INT 6
24948: PUSH
24949: LD_INT 7
24951: PUSH
24952: LD_INT 8
24954: PUSH
24955: LD_INT 9
24957: PUSH
24958: LD_INT 10
24960: PUSH
24961: LD_INT 11
24963: PUSH
24964: LD_INT 12
24966: PUSH
24967: LD_INT 13
24969: PUSH
24970: LD_INT 14
24972: PUSH
24973: LD_INT 15
24975: PUSH
24976: LD_INT 16
24978: PUSH
24979: LD_INT 17
24981: PUSH
24982: LD_INT 18
24984: PUSH
24985: LD_INT 19
24987: PUSH
24988: LD_INT 20
24990: PUSH
24991: LD_INT 21
24993: PUSH
24994: LD_INT 22
24996: PUSH
24997: LD_INT 23
24999: PUSH
25000: LD_INT 24
25002: PUSH
25003: LD_INT 25
25005: PUSH
25006: LD_INT 26
25008: PUSH
25009: LD_INT 28
25011: PUSH
25012: LD_INT 30
25014: PUSH
25015: LD_INT 31
25017: PUSH
25018: LD_INT 32
25020: PUSH
25021: LD_INT 36
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 101
25057: PUSH
25058: LD_INT 102
25060: PUSH
25061: LD_INT 103
25063: PUSH
25064: LD_INT 104
25066: PUSH
25067: LD_INT 105
25069: PUSH
25070: LD_INT 106
25072: PUSH
25073: LD_INT 107
25075: PUSH
25076: LD_INT 108
25078: PUSH
25079: LD_INT 109
25081: PUSH
25082: LD_INT 110
25084: PUSH
25085: LD_INT 111
25087: PUSH
25088: LD_INT 112
25090: PUSH
25091: LD_INT 114
25093: PUSH
25094: LD_INT 116
25096: PUSH
25097: LD_INT 117
25099: PUSH
25100: LD_INT 118
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: ST_TO_ADDR
25125: GO 27020
25127: LD_INT 11
25129: DOUBLE
25130: EQUAL
25131: IFTRUE 25135
25133: GO 25339
25135: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25136: LD_ADDR_VAR 0 2
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 4
25149: PUSH
25150: LD_INT 5
25152: PUSH
25153: LD_INT 6
25155: PUSH
25156: LD_INT 7
25158: PUSH
25159: LD_INT 8
25161: PUSH
25162: LD_INT 9
25164: PUSH
25165: LD_INT 10
25167: PUSH
25168: LD_INT 11
25170: PUSH
25171: LD_INT 12
25173: PUSH
25174: LD_INT 13
25176: PUSH
25177: LD_INT 14
25179: PUSH
25180: LD_INT 15
25182: PUSH
25183: LD_INT 16
25185: PUSH
25186: LD_INT 17
25188: PUSH
25189: LD_INT 18
25191: PUSH
25192: LD_INT 19
25194: PUSH
25195: LD_INT 20
25197: PUSH
25198: LD_INT 21
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_INT 23
25206: PUSH
25207: LD_INT 24
25209: PUSH
25210: LD_INT 25
25212: PUSH
25213: LD_INT 26
25215: PUSH
25216: LD_INT 28
25218: PUSH
25219: LD_INT 30
25221: PUSH
25222: LD_INT 31
25224: PUSH
25225: LD_INT 32
25227: PUSH
25228: LD_INT 34
25230: PUSH
25231: LD_INT 36
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 101
25269: PUSH
25270: LD_INT 102
25272: PUSH
25273: LD_INT 103
25275: PUSH
25276: LD_INT 104
25278: PUSH
25279: LD_INT 105
25281: PUSH
25282: LD_INT 106
25284: PUSH
25285: LD_INT 107
25287: PUSH
25288: LD_INT 108
25290: PUSH
25291: LD_INT 109
25293: PUSH
25294: LD_INT 110
25296: PUSH
25297: LD_INT 111
25299: PUSH
25300: LD_INT 112
25302: PUSH
25303: LD_INT 114
25305: PUSH
25306: LD_INT 116
25308: PUSH
25309: LD_INT 117
25311: PUSH
25312: LD_INT 118
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 27020
25339: LD_INT 12
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25567
25347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25348: LD_ADDR_VAR 0 2
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 4
25364: PUSH
25365: LD_INT 5
25367: PUSH
25368: LD_INT 6
25370: PUSH
25371: LD_INT 7
25373: PUSH
25374: LD_INT 8
25376: PUSH
25377: LD_INT 9
25379: PUSH
25380: LD_INT 10
25382: PUSH
25383: LD_INT 11
25385: PUSH
25386: LD_INT 12
25388: PUSH
25389: LD_INT 13
25391: PUSH
25392: LD_INT 14
25394: PUSH
25395: LD_INT 15
25397: PUSH
25398: LD_INT 16
25400: PUSH
25401: LD_INT 17
25403: PUSH
25404: LD_INT 18
25406: PUSH
25407: LD_INT 19
25409: PUSH
25410: LD_INT 20
25412: PUSH
25413: LD_INT 21
25415: PUSH
25416: LD_INT 22
25418: PUSH
25419: LD_INT 23
25421: PUSH
25422: LD_INT 24
25424: PUSH
25425: LD_INT 25
25427: PUSH
25428: LD_INT 26
25430: PUSH
25431: LD_INT 27
25433: PUSH
25434: LD_INT 28
25436: PUSH
25437: LD_INT 30
25439: PUSH
25440: LD_INT 31
25442: PUSH
25443: LD_INT 32
25445: PUSH
25446: LD_INT 33
25448: PUSH
25449: LD_INT 34
25451: PUSH
25452: LD_INT 36
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 101
25493: PUSH
25494: LD_INT 102
25496: PUSH
25497: LD_INT 103
25499: PUSH
25500: LD_INT 104
25502: PUSH
25503: LD_INT 105
25505: PUSH
25506: LD_INT 106
25508: PUSH
25509: LD_INT 107
25511: PUSH
25512: LD_INT 108
25514: PUSH
25515: LD_INT 109
25517: PUSH
25518: LD_INT 110
25520: PUSH
25521: LD_INT 111
25523: PUSH
25524: LD_INT 112
25526: PUSH
25527: LD_INT 113
25529: PUSH
25530: LD_INT 114
25532: PUSH
25533: LD_INT 116
25535: PUSH
25536: LD_INT 117
25538: PUSH
25539: LD_INT 118
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: ST_TO_ADDR
25565: GO 27020
25567: LD_INT 13
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25575
25573: GO 25783
25575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: LD_INT 3
25589: PUSH
25590: LD_INT 4
25592: PUSH
25593: LD_INT 5
25595: PUSH
25596: LD_INT 8
25598: PUSH
25599: LD_INT 9
25601: PUSH
25602: LD_INT 10
25604: PUSH
25605: LD_INT 11
25607: PUSH
25608: LD_INT 12
25610: PUSH
25611: LD_INT 14
25613: PUSH
25614: LD_INT 15
25616: PUSH
25617: LD_INT 16
25619: PUSH
25620: LD_INT 17
25622: PUSH
25623: LD_INT 18
25625: PUSH
25626: LD_INT 19
25628: PUSH
25629: LD_INT 20
25631: PUSH
25632: LD_INT 21
25634: PUSH
25635: LD_INT 22
25637: PUSH
25638: LD_INT 23
25640: PUSH
25641: LD_INT 24
25643: PUSH
25644: LD_INT 25
25646: PUSH
25647: LD_INT 26
25649: PUSH
25650: LD_INT 27
25652: PUSH
25653: LD_INT 28
25655: PUSH
25656: LD_INT 30
25658: PUSH
25659: LD_INT 31
25661: PUSH
25662: LD_INT 32
25664: PUSH
25665: LD_INT 33
25667: PUSH
25668: LD_INT 34
25670: PUSH
25671: LD_INT 36
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 101
25709: PUSH
25710: LD_INT 102
25712: PUSH
25713: LD_INT 103
25715: PUSH
25716: LD_INT 104
25718: PUSH
25719: LD_INT 105
25721: PUSH
25722: LD_INT 106
25724: PUSH
25725: LD_INT 107
25727: PUSH
25728: LD_INT 108
25730: PUSH
25731: LD_INT 109
25733: PUSH
25734: LD_INT 110
25736: PUSH
25737: LD_INT 111
25739: PUSH
25740: LD_INT 112
25742: PUSH
25743: LD_INT 113
25745: PUSH
25746: LD_INT 114
25748: PUSH
25749: LD_INT 116
25751: PUSH
25752: LD_INT 117
25754: PUSH
25755: LD_INT 118
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: ST_TO_ADDR
25781: GO 27020
25783: LD_INT 14
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 26015
25791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25792: LD_ADDR_VAR 0 2
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: LD_INT 5
25811: PUSH
25812: LD_INT 6
25814: PUSH
25815: LD_INT 7
25817: PUSH
25818: LD_INT 8
25820: PUSH
25821: LD_INT 9
25823: PUSH
25824: LD_INT 10
25826: PUSH
25827: LD_INT 11
25829: PUSH
25830: LD_INT 12
25832: PUSH
25833: LD_INT 13
25835: PUSH
25836: LD_INT 14
25838: PUSH
25839: LD_INT 15
25841: PUSH
25842: LD_INT 16
25844: PUSH
25845: LD_INT 17
25847: PUSH
25848: LD_INT 18
25850: PUSH
25851: LD_INT 19
25853: PUSH
25854: LD_INT 20
25856: PUSH
25857: LD_INT 21
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 23
25865: PUSH
25866: LD_INT 24
25868: PUSH
25869: LD_INT 25
25871: PUSH
25872: LD_INT 26
25874: PUSH
25875: LD_INT 27
25877: PUSH
25878: LD_INT 28
25880: PUSH
25881: LD_INT 29
25883: PUSH
25884: LD_INT 30
25886: PUSH
25887: LD_INT 31
25889: PUSH
25890: LD_INT 32
25892: PUSH
25893: LD_INT 33
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 36
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 101
25941: PUSH
25942: LD_INT 102
25944: PUSH
25945: LD_INT 103
25947: PUSH
25948: LD_INT 104
25950: PUSH
25951: LD_INT 105
25953: PUSH
25954: LD_INT 106
25956: PUSH
25957: LD_INT 107
25959: PUSH
25960: LD_INT 108
25962: PUSH
25963: LD_INT 109
25965: PUSH
25966: LD_INT 110
25968: PUSH
25969: LD_INT 111
25971: PUSH
25972: LD_INT 112
25974: PUSH
25975: LD_INT 113
25977: PUSH
25978: LD_INT 114
25980: PUSH
25981: LD_INT 116
25983: PUSH
25984: LD_INT 117
25986: PUSH
25987: LD_INT 118
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: ST_TO_ADDR
26013: GO 27020
26015: LD_INT 15
26017: DOUBLE
26018: EQUAL
26019: IFTRUE 26023
26021: GO 26247
26023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26024: LD_ADDR_VAR 0 2
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 3
26037: PUSH
26038: LD_INT 4
26040: PUSH
26041: LD_INT 5
26043: PUSH
26044: LD_INT 6
26046: PUSH
26047: LD_INT 7
26049: PUSH
26050: LD_INT 8
26052: PUSH
26053: LD_INT 9
26055: PUSH
26056: LD_INT 10
26058: PUSH
26059: LD_INT 11
26061: PUSH
26062: LD_INT 12
26064: PUSH
26065: LD_INT 13
26067: PUSH
26068: LD_INT 14
26070: PUSH
26071: LD_INT 15
26073: PUSH
26074: LD_INT 16
26076: PUSH
26077: LD_INT 17
26079: PUSH
26080: LD_INT 18
26082: PUSH
26083: LD_INT 19
26085: PUSH
26086: LD_INT 20
26088: PUSH
26089: LD_INT 21
26091: PUSH
26092: LD_INT 22
26094: PUSH
26095: LD_INT 23
26097: PUSH
26098: LD_INT 24
26100: PUSH
26101: LD_INT 25
26103: PUSH
26104: LD_INT 26
26106: PUSH
26107: LD_INT 27
26109: PUSH
26110: LD_INT 28
26112: PUSH
26113: LD_INT 29
26115: PUSH
26116: LD_INT 30
26118: PUSH
26119: LD_INT 31
26121: PUSH
26122: LD_INT 32
26124: PUSH
26125: LD_INT 33
26127: PUSH
26128: LD_INT 34
26130: PUSH
26131: LD_INT 36
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 101
26173: PUSH
26174: LD_INT 102
26176: PUSH
26177: LD_INT 103
26179: PUSH
26180: LD_INT 104
26182: PUSH
26183: LD_INT 105
26185: PUSH
26186: LD_INT 106
26188: PUSH
26189: LD_INT 107
26191: PUSH
26192: LD_INT 108
26194: PUSH
26195: LD_INT 109
26197: PUSH
26198: LD_INT 110
26200: PUSH
26201: LD_INT 111
26203: PUSH
26204: LD_INT 112
26206: PUSH
26207: LD_INT 113
26209: PUSH
26210: LD_INT 114
26212: PUSH
26213: LD_INT 116
26215: PUSH
26216: LD_INT 117
26218: PUSH
26219: LD_INT 118
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: ST_TO_ADDR
26245: GO 27020
26247: LD_INT 16
26249: DOUBLE
26250: EQUAL
26251: IFTRUE 26255
26253: GO 26391
26255: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 4
26266: PUSH
26267: LD_INT 5
26269: PUSH
26270: LD_INT 7
26272: PUSH
26273: LD_INT 11
26275: PUSH
26276: LD_INT 12
26278: PUSH
26279: LD_INT 15
26281: PUSH
26282: LD_INT 16
26284: PUSH
26285: LD_INT 20
26287: PUSH
26288: LD_INT 21
26290: PUSH
26291: LD_INT 22
26293: PUSH
26294: LD_INT 23
26296: PUSH
26297: LD_INT 25
26299: PUSH
26300: LD_INT 26
26302: PUSH
26303: LD_INT 30
26305: PUSH
26306: LD_INT 31
26308: PUSH
26309: LD_INT 32
26311: PUSH
26312: LD_INT 33
26314: PUSH
26315: LD_INT 34
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 101
26341: PUSH
26342: LD_INT 102
26344: PUSH
26345: LD_INT 103
26347: PUSH
26348: LD_INT 106
26350: PUSH
26351: LD_INT 108
26353: PUSH
26354: LD_INT 112
26356: PUSH
26357: LD_INT 113
26359: PUSH
26360: LD_INT 114
26362: PUSH
26363: LD_INT 116
26365: PUSH
26366: LD_INT 117
26368: PUSH
26369: LD_INT 118
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: ST_TO_ADDR
26389: GO 27020
26391: LD_INT 17
26393: DOUBLE
26394: EQUAL
26395: IFTRUE 26399
26397: GO 26623
26399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26400: LD_ADDR_VAR 0 2
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 3
26413: PUSH
26414: LD_INT 4
26416: PUSH
26417: LD_INT 5
26419: PUSH
26420: LD_INT 6
26422: PUSH
26423: LD_INT 7
26425: PUSH
26426: LD_INT 8
26428: PUSH
26429: LD_INT 9
26431: PUSH
26432: LD_INT 10
26434: PUSH
26435: LD_INT 11
26437: PUSH
26438: LD_INT 12
26440: PUSH
26441: LD_INT 13
26443: PUSH
26444: LD_INT 14
26446: PUSH
26447: LD_INT 15
26449: PUSH
26450: LD_INT 16
26452: PUSH
26453: LD_INT 17
26455: PUSH
26456: LD_INT 18
26458: PUSH
26459: LD_INT 19
26461: PUSH
26462: LD_INT 20
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_INT 23
26473: PUSH
26474: LD_INT 24
26476: PUSH
26477: LD_INT 25
26479: PUSH
26480: LD_INT 26
26482: PUSH
26483: LD_INT 27
26485: PUSH
26486: LD_INT 28
26488: PUSH
26489: LD_INT 29
26491: PUSH
26492: LD_INT 30
26494: PUSH
26495: LD_INT 31
26497: PUSH
26498: LD_INT 32
26500: PUSH
26501: LD_INT 33
26503: PUSH
26504: LD_INT 34
26506: PUSH
26507: LD_INT 36
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 101
26549: PUSH
26550: LD_INT 102
26552: PUSH
26553: LD_INT 103
26555: PUSH
26556: LD_INT 104
26558: PUSH
26559: LD_INT 105
26561: PUSH
26562: LD_INT 106
26564: PUSH
26565: LD_INT 107
26567: PUSH
26568: LD_INT 108
26570: PUSH
26571: LD_INT 109
26573: PUSH
26574: LD_INT 110
26576: PUSH
26577: LD_INT 111
26579: PUSH
26580: LD_INT 112
26582: PUSH
26583: LD_INT 113
26585: PUSH
26586: LD_INT 114
26588: PUSH
26589: LD_INT 116
26591: PUSH
26592: LD_INT 117
26594: PUSH
26595: LD_INT 118
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: ST_TO_ADDR
26621: GO 27020
26623: LD_INT 18
26625: DOUBLE
26626: EQUAL
26627: IFTRUE 26631
26629: GO 26779
26631: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 4
26642: PUSH
26643: LD_INT 5
26645: PUSH
26646: LD_INT 7
26648: PUSH
26649: LD_INT 11
26651: PUSH
26652: LD_INT 12
26654: PUSH
26655: LD_INT 15
26657: PUSH
26658: LD_INT 16
26660: PUSH
26661: LD_INT 20
26663: PUSH
26664: LD_INT 21
26666: PUSH
26667: LD_INT 22
26669: PUSH
26670: LD_INT 23
26672: PUSH
26673: LD_INT 25
26675: PUSH
26676: LD_INT 26
26678: PUSH
26679: LD_INT 30
26681: PUSH
26682: LD_INT 31
26684: PUSH
26685: LD_INT 32
26687: PUSH
26688: LD_INT 33
26690: PUSH
26691: LD_INT 34
26693: PUSH
26694: LD_INT 35
26696: PUSH
26697: LD_INT 36
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 101
26725: PUSH
26726: LD_INT 102
26728: PUSH
26729: LD_INT 103
26731: PUSH
26732: LD_INT 106
26734: PUSH
26735: LD_INT 108
26737: PUSH
26738: LD_INT 112
26740: PUSH
26741: LD_INT 113
26743: PUSH
26744: LD_INT 114
26746: PUSH
26747: LD_INT 115
26749: PUSH
26750: LD_INT 116
26752: PUSH
26753: LD_INT 117
26755: PUSH
26756: LD_INT 118
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: ST_TO_ADDR
26777: GO 27020
26779: LD_INT 19
26781: DOUBLE
26782: EQUAL
26783: IFTRUE 26787
26785: GO 27019
26787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26788: LD_ADDR_VAR 0 2
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 3
26801: PUSH
26802: LD_INT 4
26804: PUSH
26805: LD_INT 5
26807: PUSH
26808: LD_INT 6
26810: PUSH
26811: LD_INT 7
26813: PUSH
26814: LD_INT 8
26816: PUSH
26817: LD_INT 9
26819: PUSH
26820: LD_INT 10
26822: PUSH
26823: LD_INT 11
26825: PUSH
26826: LD_INT 12
26828: PUSH
26829: LD_INT 13
26831: PUSH
26832: LD_INT 14
26834: PUSH
26835: LD_INT 15
26837: PUSH
26838: LD_INT 16
26840: PUSH
26841: LD_INT 17
26843: PUSH
26844: LD_INT 18
26846: PUSH
26847: LD_INT 19
26849: PUSH
26850: LD_INT 20
26852: PUSH
26853: LD_INT 21
26855: PUSH
26856: LD_INT 22
26858: PUSH
26859: LD_INT 23
26861: PUSH
26862: LD_INT 24
26864: PUSH
26865: LD_INT 25
26867: PUSH
26868: LD_INT 26
26870: PUSH
26871: LD_INT 27
26873: PUSH
26874: LD_INT 28
26876: PUSH
26877: LD_INT 29
26879: PUSH
26880: LD_INT 30
26882: PUSH
26883: LD_INT 31
26885: PUSH
26886: LD_INT 32
26888: PUSH
26889: LD_INT 33
26891: PUSH
26892: LD_INT 34
26894: PUSH
26895: LD_INT 35
26897: PUSH
26898: LD_INT 36
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 101
26941: PUSH
26942: LD_INT 102
26944: PUSH
26945: LD_INT 103
26947: PUSH
26948: LD_INT 104
26950: PUSH
26951: LD_INT 105
26953: PUSH
26954: LD_INT 106
26956: PUSH
26957: LD_INT 107
26959: PUSH
26960: LD_INT 108
26962: PUSH
26963: LD_INT 109
26965: PUSH
26966: LD_INT 110
26968: PUSH
26969: LD_INT 111
26971: PUSH
26972: LD_INT 112
26974: PUSH
26975: LD_INT 113
26977: PUSH
26978: LD_INT 114
26980: PUSH
26981: LD_INT 115
26983: PUSH
26984: LD_INT 116
26986: PUSH
26987: LD_INT 117
26989: PUSH
26990: LD_INT 118
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: ST_TO_ADDR
27017: GO 27020
27019: POP
// end else
27020: GO 27251
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27022: LD_ADDR_VAR 0 2
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: LD_INT 3
27035: PUSH
27036: LD_INT 4
27038: PUSH
27039: LD_INT 5
27041: PUSH
27042: LD_INT 6
27044: PUSH
27045: LD_INT 7
27047: PUSH
27048: LD_INT 8
27050: PUSH
27051: LD_INT 9
27053: PUSH
27054: LD_INT 10
27056: PUSH
27057: LD_INT 11
27059: PUSH
27060: LD_INT 12
27062: PUSH
27063: LD_INT 13
27065: PUSH
27066: LD_INT 14
27068: PUSH
27069: LD_INT 15
27071: PUSH
27072: LD_INT 16
27074: PUSH
27075: LD_INT 17
27077: PUSH
27078: LD_INT 18
27080: PUSH
27081: LD_INT 19
27083: PUSH
27084: LD_INT 20
27086: PUSH
27087: LD_INT 21
27089: PUSH
27090: LD_INT 22
27092: PUSH
27093: LD_INT 23
27095: PUSH
27096: LD_INT 24
27098: PUSH
27099: LD_INT 25
27101: PUSH
27102: LD_INT 26
27104: PUSH
27105: LD_INT 27
27107: PUSH
27108: LD_INT 28
27110: PUSH
27111: LD_INT 29
27113: PUSH
27114: LD_INT 30
27116: PUSH
27117: LD_INT 31
27119: PUSH
27120: LD_INT 32
27122: PUSH
27123: LD_INT 33
27125: PUSH
27126: LD_INT 34
27128: PUSH
27129: LD_INT 35
27131: PUSH
27132: LD_INT 36
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 101
27175: PUSH
27176: LD_INT 102
27178: PUSH
27179: LD_INT 103
27181: PUSH
27182: LD_INT 104
27184: PUSH
27185: LD_INT 105
27187: PUSH
27188: LD_INT 106
27190: PUSH
27191: LD_INT 107
27193: PUSH
27194: LD_INT 108
27196: PUSH
27197: LD_INT 109
27199: PUSH
27200: LD_INT 110
27202: PUSH
27203: LD_INT 111
27205: PUSH
27206: LD_INT 112
27208: PUSH
27209: LD_INT 113
27211: PUSH
27212: LD_INT 114
27214: PUSH
27215: LD_INT 115
27217: PUSH
27218: LD_INT 116
27220: PUSH
27221: LD_INT 117
27223: PUSH
27224: LD_INT 118
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: ST_TO_ADDR
// if result then
27251: LD_VAR 0 2
27255: IFFALSE 28041
// begin normal :=  ;
27257: LD_ADDR_VAR 0 5
27261: PUSH
27262: LD_STRING 
27264: ST_TO_ADDR
// hardcore :=  ;
27265: LD_ADDR_VAR 0 6
27269: PUSH
27270: LD_STRING 
27272: ST_TO_ADDR
// active :=  ;
27273: LD_ADDR_VAR 0 7
27277: PUSH
27278: LD_STRING 
27280: ST_TO_ADDR
// for i = 1 to normalCounter do
27281: LD_ADDR_VAR 0 8
27285: PUSH
27286: DOUBLE
27287: LD_INT 1
27289: DEC
27290: ST_TO_ADDR
27291: LD_EXP 52
27295: PUSH
27296: FOR_TO
27297: IFFALSE 27398
// begin tmp := 0 ;
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_STRING 0
27306: ST_TO_ADDR
// if result [ 1 ] then
27307: LD_VAR 0 2
27311: PUSH
27312: LD_INT 1
27314: ARRAY
27315: IFFALSE 27380
// if result [ 1 ] [ 1 ] = i then
27317: LD_VAR 0 2
27321: PUSH
27322: LD_INT 1
27324: ARRAY
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: PUSH
27330: LD_VAR 0 8
27334: EQUAL
27335: IFFALSE 27380
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27337: LD_ADDR_VAR 0 2
27341: PUSH
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_INT 1
27349: PPUSH
27350: LD_VAR 0 2
27354: PUSH
27355: LD_INT 1
27357: ARRAY
27358: PPUSH
27359: LD_INT 1
27361: PPUSH
27362: CALL_OW 3
27366: PPUSH
27367: CALL_OW 1
27371: ST_TO_ADDR
// tmp := 1 ;
27372: LD_ADDR_VAR 0 3
27376: PUSH
27377: LD_STRING 1
27379: ST_TO_ADDR
// end ; normal := normal & tmp ;
27380: LD_ADDR_VAR 0 5
27384: PUSH
27385: LD_VAR 0 5
27389: PUSH
27390: LD_VAR 0 3
27394: STR
27395: ST_TO_ADDR
// end ;
27396: GO 27296
27398: POP
27399: POP
// for i = 1 to hardcoreCounter do
27400: LD_ADDR_VAR 0 8
27404: PUSH
27405: DOUBLE
27406: LD_INT 1
27408: DEC
27409: ST_TO_ADDR
27410: LD_EXP 53
27414: PUSH
27415: FOR_TO
27416: IFFALSE 27521
// begin tmp := 0 ;
27418: LD_ADDR_VAR 0 3
27422: PUSH
27423: LD_STRING 0
27425: ST_TO_ADDR
// if result [ 2 ] then
27426: LD_VAR 0 2
27430: PUSH
27431: LD_INT 2
27433: ARRAY
27434: IFFALSE 27503
// if result [ 2 ] [ 1 ] = 100 + i then
27436: LD_VAR 0 2
27440: PUSH
27441: LD_INT 2
27443: ARRAY
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PUSH
27449: LD_INT 100
27451: PUSH
27452: LD_VAR 0 8
27456: PLUS
27457: EQUAL
27458: IFFALSE 27503
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27460: LD_ADDR_VAR 0 2
27464: PUSH
27465: LD_VAR 0 2
27469: PPUSH
27470: LD_INT 2
27472: PPUSH
27473: LD_VAR 0 2
27477: PUSH
27478: LD_INT 2
27480: ARRAY
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 3
27489: PPUSH
27490: CALL_OW 1
27494: ST_TO_ADDR
// tmp := 1 ;
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_STRING 1
27502: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27503: LD_ADDR_VAR 0 6
27507: PUSH
27508: LD_VAR 0 6
27512: PUSH
27513: LD_VAR 0 3
27517: STR
27518: ST_TO_ADDR
// end ;
27519: GO 27415
27521: POP
27522: POP
// if isGameLoad then
27523: LD_VAR 0 1
27527: IFFALSE 28002
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27529: LD_ADDR_VAR 0 4
27533: PUSH
27534: LD_EXP 56
27538: PUSH
27539: LD_EXP 55
27543: PUSH
27544: LD_EXP 57
27548: PUSH
27549: LD_EXP 54
27553: PUSH
27554: LD_EXP 58
27558: PUSH
27559: LD_EXP 59
27563: PUSH
27564: LD_EXP 60
27568: PUSH
27569: LD_EXP 61
27573: PUSH
27574: LD_EXP 62
27578: PUSH
27579: LD_EXP 63
27583: PUSH
27584: LD_EXP 64
27588: PUSH
27589: LD_EXP 65
27593: PUSH
27594: LD_EXP 66
27598: PUSH
27599: LD_EXP 67
27603: PUSH
27604: LD_EXP 75
27608: PUSH
27609: LD_EXP 76
27613: PUSH
27614: LD_EXP 77
27618: PUSH
27619: LD_EXP 78
27623: PUSH
27624: LD_EXP 80
27628: PUSH
27629: LD_EXP 81
27633: PUSH
27634: LD_EXP 82
27638: PUSH
27639: LD_EXP 85
27643: PUSH
27644: LD_EXP 87
27648: PUSH
27649: LD_EXP 88
27653: PUSH
27654: LD_EXP 89
27658: PUSH
27659: LD_EXP 91
27663: PUSH
27664: LD_EXP 92
27668: PUSH
27669: LD_EXP 95
27673: PUSH
27674: LD_EXP 96
27678: PUSH
27679: LD_EXP 97
27683: PUSH
27684: LD_EXP 98
27688: PUSH
27689: LD_EXP 99
27693: PUSH
27694: LD_EXP 100
27698: PUSH
27699: LD_EXP 101
27703: PUSH
27704: LD_EXP 102
27708: PUSH
27709: LD_EXP 103
27713: PUSH
27714: LD_EXP 68
27718: PUSH
27719: LD_EXP 69
27723: PUSH
27724: LD_EXP 72
27728: PUSH
27729: LD_EXP 73
27733: PUSH
27734: LD_EXP 74
27738: PUSH
27739: LD_EXP 70
27743: PUSH
27744: LD_EXP 71
27748: PUSH
27749: LD_EXP 79
27753: PUSH
27754: LD_EXP 83
27758: PUSH
27759: LD_EXP 84
27763: PUSH
27764: LD_EXP 86
27768: PUSH
27769: LD_EXP 90
27773: PUSH
27774: LD_EXP 93
27778: PUSH
27779: LD_EXP 94
27783: PUSH
27784: LD_EXP 104
27788: PUSH
27789: LD_EXP 105
27793: PUSH
27794: LD_EXP 106
27798: PUSH
27799: LD_EXP 107
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: ST_TO_ADDR
// tmp :=  ;
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_STRING 
27867: ST_TO_ADDR
// for i = 1 to normalCounter do
27868: LD_ADDR_VAR 0 8
27872: PUSH
27873: DOUBLE
27874: LD_INT 1
27876: DEC
27877: ST_TO_ADDR
27878: LD_EXP 52
27882: PUSH
27883: FOR_TO
27884: IFFALSE 27920
// begin if flags [ i ] then
27886: LD_VAR 0 4
27890: PUSH
27891: LD_VAR 0 8
27895: ARRAY
27896: IFFALSE 27918
// tmp := tmp & i & ; ;
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_VAR 0 3
27907: PUSH
27908: LD_VAR 0 8
27912: STR
27913: PUSH
27914: LD_STRING ;
27916: STR
27917: ST_TO_ADDR
// end ;
27918: GO 27883
27920: POP
27921: POP
// for i = 1 to hardcoreCounter do
27922: LD_ADDR_VAR 0 8
27926: PUSH
27927: DOUBLE
27928: LD_INT 1
27930: DEC
27931: ST_TO_ADDR
27932: LD_EXP 53
27936: PUSH
27937: FOR_TO
27938: IFFALSE 27984
// begin if flags [ normalCounter + i ] then
27940: LD_VAR 0 4
27944: PUSH
27945: LD_EXP 52
27949: PUSH
27950: LD_VAR 0 8
27954: PLUS
27955: ARRAY
27956: IFFALSE 27982
// tmp := tmp & ( 100 + i ) & ; ;
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_VAR 0 3
27967: PUSH
27968: LD_INT 100
27970: PUSH
27971: LD_VAR 0 8
27975: PLUS
27976: STR
27977: PUSH
27978: LD_STRING ;
27980: STR
27981: ST_TO_ADDR
// end ;
27982: GO 27937
27984: POP
27985: POP
// if tmp then
27986: LD_VAR 0 3
27990: IFFALSE 28002
// active := tmp ;
27992: LD_ADDR_VAR 0 7
27996: PUSH
27997: LD_VAR 0 3
28001: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28002: LD_STRING getStreamItemsFromMission("
28004: PUSH
28005: LD_VAR 0 5
28009: STR
28010: PUSH
28011: LD_STRING ","
28013: STR
28014: PUSH
28015: LD_VAR 0 6
28019: STR
28020: PUSH
28021: LD_STRING ","
28023: STR
28024: PUSH
28025: LD_VAR 0 7
28029: STR
28030: PUSH
28031: LD_STRING ")
28033: STR
28034: PPUSH
28035: CALL_OW 559
// end else
28039: GO 28048
// ToLua ( getStreamItemsFromMission("","","") ) ;
28041: LD_STRING getStreamItemsFromMission("","","")
28043: PPUSH
28044: CALL_OW 559
// end ;
28048: LD_VAR 0 2
28052: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28053: LD_EXP 51
28057: PUSH
28058: LD_EXP 56
28062: AND
28063: IFFALSE 28187
28065: GO 28067
28067: DISABLE
28068: LD_INT 0
28070: PPUSH
28071: PPUSH
// begin enable ;
28072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28073: LD_ADDR_VAR 0 2
28077: PUSH
28078: LD_INT 22
28080: PUSH
28081: LD_OWVAR 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 34
28095: PUSH
28096: LD_INT 7
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 45
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 34
28115: PUSH
28116: LD_INT 28
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 34
28125: PUSH
28126: LD_INT 47
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PPUSH
28144: CALL_OW 69
28148: ST_TO_ADDR
// if not tmp then
28149: LD_VAR 0 2
28153: NOT
28154: IFFALSE 28158
// exit ;
28156: GO 28187
// for i in tmp do
28158: LD_ADDR_VAR 0 1
28162: PUSH
28163: LD_VAR 0 2
28167: PUSH
28168: FOR_IN
28169: IFFALSE 28185
// begin SetLives ( i , 0 ) ;
28171: LD_VAR 0 1
28175: PPUSH
28176: LD_INT 0
28178: PPUSH
28179: CALL_OW 234
// end ;
28183: GO 28168
28185: POP
28186: POP
// end ;
28187: PPOPN 2
28189: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28190: LD_EXP 51
28194: PUSH
28195: LD_EXP 57
28199: AND
28200: IFFALSE 28284
28202: GO 28204
28204: DISABLE
28205: LD_INT 0
28207: PPUSH
28208: PPUSH
// begin enable ;
28209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 32
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PPUSH
28241: CALL_OW 69
28245: ST_TO_ADDR
// if not tmp then
28246: LD_VAR 0 2
28250: NOT
28251: IFFALSE 28255
// exit ;
28253: GO 28284
// for i in tmp do
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_VAR 0 2
28264: PUSH
28265: FOR_IN
28266: IFFALSE 28282
// begin SetLives ( i , 0 ) ;
28268: LD_VAR 0 1
28272: PPUSH
28273: LD_INT 0
28275: PPUSH
28276: CALL_OW 234
// end ;
28280: GO 28265
28282: POP
28283: POP
// end ;
28284: PPOPN 2
28286: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28287: LD_EXP 51
28291: PUSH
28292: LD_EXP 54
28296: AND
28297: IFFALSE 28390
28299: GO 28301
28301: DISABLE
28302: LD_INT 0
28304: PPUSH
// begin enable ;
28305: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_INT 22
28313: PUSH
28314: LD_OWVAR 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: LD_INT 25
28328: PUSH
28329: LD_INT 5
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 25
28338: PUSH
28339: LD_INT 9
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 8
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PPUSH
28366: CALL_OW 69
28370: PUSH
28371: FOR_IN
28372: IFFALSE 28388
// begin SetClass ( i , 1 ) ;
28374: LD_VAR 0 1
28378: PPUSH
28379: LD_INT 1
28381: PPUSH
28382: CALL_OW 336
// end ;
28386: GO 28371
28388: POP
28389: POP
// end ;
28390: PPOPN 1
28392: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28393: LD_EXP 51
28397: PUSH
28398: LD_EXP 55
28402: AND
28403: PUSH
28404: LD_OWVAR 65
28408: PUSH
28409: LD_INT 7
28411: LESS
28412: AND
28413: IFFALSE 28427
28415: GO 28417
28417: DISABLE
// begin enable ;
28418: ENABLE
// game_speed := 7 ;
28419: LD_ADDR_OWVAR 65
28423: PUSH
28424: LD_INT 7
28426: ST_TO_ADDR
// end ;
28427: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28428: LD_EXP 51
28432: PUSH
28433: LD_EXP 58
28437: AND
28438: IFFALSE 28640
28440: GO 28442
28442: DISABLE
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
28447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_INT 81
28455: PUSH
28456: LD_OWVAR 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 21
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PPUSH
28479: CALL_OW 69
28483: ST_TO_ADDR
// if not tmp then
28484: LD_VAR 0 3
28488: NOT
28489: IFFALSE 28493
// exit ;
28491: GO 28640
// if tmp > 5 then
28493: LD_VAR 0 3
28497: PUSH
28498: LD_INT 5
28500: GREATER
28501: IFFALSE 28513
// k := 5 else
28503: LD_ADDR_VAR 0 2
28507: PUSH
28508: LD_INT 5
28510: ST_TO_ADDR
28511: GO 28523
// k := tmp ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_VAR 0 3
28522: ST_TO_ADDR
// for i := 1 to k do
28523: LD_ADDR_VAR 0 1
28527: PUSH
28528: DOUBLE
28529: LD_INT 1
28531: DEC
28532: ST_TO_ADDR
28533: LD_VAR 0 2
28537: PUSH
28538: FOR_TO
28539: IFFALSE 28638
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28541: LD_VAR 0 3
28545: PUSH
28546: LD_VAR 0 1
28550: ARRAY
28551: PPUSH
28552: LD_VAR 0 1
28556: PUSH
28557: LD_INT 4
28559: MOD
28560: PUSH
28561: LD_INT 1
28563: PLUS
28564: PPUSH
28565: CALL_OW 259
28569: PUSH
28570: LD_INT 10
28572: LESS
28573: IFFALSE 28636
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28575: LD_VAR 0 3
28579: PUSH
28580: LD_VAR 0 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 1
28590: PUSH
28591: LD_INT 4
28593: MOD
28594: PUSH
28595: LD_INT 1
28597: PLUS
28598: PPUSH
28599: LD_VAR 0 3
28603: PUSH
28604: LD_VAR 0 1
28608: ARRAY
28609: PPUSH
28610: LD_VAR 0 1
28614: PUSH
28615: LD_INT 4
28617: MOD
28618: PUSH
28619: LD_INT 1
28621: PLUS
28622: PPUSH
28623: CALL_OW 259
28627: PUSH
28628: LD_INT 1
28630: PLUS
28631: PPUSH
28632: CALL_OW 237
28636: GO 28538
28638: POP
28639: POP
// end ;
28640: PPOPN 3
28642: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28643: LD_EXP 51
28647: PUSH
28648: LD_EXP 59
28652: AND
28653: IFFALSE 28673
28655: GO 28657
28657: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28658: LD_INT 4
28660: PPUSH
28661: LD_OWVAR 2
28665: PPUSH
28666: LD_INT 0
28668: PPUSH
28669: CALL_OW 324
28673: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28674: LD_EXP 51
28678: PUSH
28679: LD_EXP 88
28683: AND
28684: IFFALSE 28704
28686: GO 28688
28688: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28689: LD_INT 19
28691: PPUSH
28692: LD_OWVAR 2
28696: PPUSH
28697: LD_INT 0
28699: PPUSH
28700: CALL_OW 324
28704: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28705: LD_EXP 51
28709: PUSH
28710: LD_EXP 60
28714: AND
28715: IFFALSE 28817
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
// begin enable ;
28724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28725: LD_ADDR_VAR 0 2
28729: PUSH
28730: LD_INT 22
28732: PUSH
28733: LD_OWVAR 2
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: LD_INT 34
28747: PUSH
28748: LD_INT 11
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 34
28757: PUSH
28758: LD_INT 30
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: ST_TO_ADDR
// if not tmp then
28779: LD_VAR 0 2
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 28817
// for i in tmp do
28788: LD_ADDR_VAR 0 1
28792: PUSH
28793: LD_VAR 0 2
28797: PUSH
28798: FOR_IN
28799: IFFALSE 28815
// begin SetLives ( i , 0 ) ;
28801: LD_VAR 0 1
28805: PPUSH
28806: LD_INT 0
28808: PPUSH
28809: CALL_OW 234
// end ;
28813: GO 28798
28815: POP
28816: POP
// end ;
28817: PPOPN 2
28819: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28820: LD_EXP 51
28824: PUSH
28825: LD_EXP 61
28829: AND
28830: IFFALSE 28850
28832: GO 28834
28834: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28835: LD_INT 32
28837: PPUSH
28838: LD_OWVAR 2
28842: PPUSH
28843: LD_INT 0
28845: PPUSH
28846: CALL_OW 324
28850: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28851: LD_EXP 51
28855: PUSH
28856: LD_EXP 62
28860: AND
28861: IFFALSE 29042
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
28870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28871: LD_ADDR_VAR 0 2
28875: PUSH
28876: LD_INT 22
28878: PUSH
28879: LD_OWVAR 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 33
28890: PUSH
28891: LD_INT 3
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PPUSH
28902: CALL_OW 69
28906: ST_TO_ADDR
// if not tmp then
28907: LD_VAR 0 2
28911: NOT
28912: IFFALSE 28916
// exit ;
28914: GO 29042
// side := 0 ;
28916: LD_ADDR_VAR 0 3
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
// for i := 1 to 8 do
28924: LD_ADDR_VAR 0 1
28928: PUSH
28929: DOUBLE
28930: LD_INT 1
28932: DEC
28933: ST_TO_ADDR
28934: LD_INT 8
28936: PUSH
28937: FOR_TO
28938: IFFALSE 28986
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28940: LD_OWVAR 2
28944: PUSH
28945: LD_VAR 0 1
28949: NONEQUAL
28950: PUSH
28951: LD_OWVAR 2
28955: PPUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 81
28965: PUSH
28966: LD_INT 2
28968: EQUAL
28969: AND
28970: IFFALSE 28984
// begin side := i ;
28972: LD_ADDR_VAR 0 3
28976: PUSH
28977: LD_VAR 0 1
28981: ST_TO_ADDR
// break ;
28982: GO 28986
// end ;
28984: GO 28937
28986: POP
28987: POP
// if not side then
28988: LD_VAR 0 3
28992: NOT
28993: IFFALSE 28997
// exit ;
28995: GO 29042
// for i := 1 to tmp do
28997: LD_ADDR_VAR 0 1
29001: PUSH
29002: DOUBLE
29003: LD_INT 1
29005: DEC
29006: ST_TO_ADDR
29007: LD_VAR 0 2
29011: PUSH
29012: FOR_TO
29013: IFFALSE 29040
// if Prob ( 60 ) then
29015: LD_INT 60
29017: PPUSH
29018: CALL_OW 13
29022: IFFALSE 29038
// SetSide ( i , side ) ;
29024: LD_VAR 0 1
29028: PPUSH
29029: LD_VAR 0 3
29033: PPUSH
29034: CALL_OW 235
29038: GO 29012
29040: POP
29041: POP
// end ;
29042: PPOPN 3
29044: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29045: LD_EXP 51
29049: PUSH
29050: LD_EXP 64
29054: AND
29055: IFFALSE 29174
29057: GO 29059
29059: DISABLE
29060: LD_INT 0
29062: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29063: LD_ADDR_VAR 0 1
29067: PUSH
29068: LD_INT 22
29070: PUSH
29071: LD_OWVAR 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 21
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: LD_INT 23
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: PPUSH
29112: CALL_OW 69
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29172
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29120: LD_VAR 0 1
29124: PPUSH
29125: CALL_OW 257
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: LD_INT 4
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: IN
29148: IFFALSE 29170
// SetClass ( un , rand ( 1 , 4 ) ) ;
29150: LD_VAR 0 1
29154: PPUSH
29155: LD_INT 1
29157: PPUSH
29158: LD_INT 4
29160: PPUSH
29161: CALL_OW 12
29165: PPUSH
29166: CALL_OW 336
29170: GO 29117
29172: POP
29173: POP
// end ;
29174: PPOPN 1
29176: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29177: LD_EXP 51
29181: PUSH
29182: LD_EXP 63
29186: AND
29187: IFFALSE 29266
29189: GO 29191
29191: DISABLE
29192: LD_INT 0
29194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29195: LD_ADDR_VAR 0 1
29199: PUSH
29200: LD_INT 22
29202: PUSH
29203: LD_OWVAR 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 21
29214: PUSH
29215: LD_INT 3
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PPUSH
29226: CALL_OW 69
29230: ST_TO_ADDR
// if not tmp then
29231: LD_VAR 0 1
29235: NOT
29236: IFFALSE 29240
// exit ;
29238: GO 29266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29240: LD_VAR 0 1
29244: PUSH
29245: LD_INT 1
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 12
29257: ARRAY
29258: PPUSH
29259: LD_INT 100
29261: PPUSH
29262: CALL_OW 234
// end ;
29266: PPOPN 1
29268: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29269: LD_EXP 51
29273: PUSH
29274: LD_EXP 65
29278: AND
29279: IFFALSE 29377
29281: GO 29283
29283: DISABLE
29284: LD_INT 0
29286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29287: LD_ADDR_VAR 0 1
29291: PUSH
29292: LD_INT 22
29294: PUSH
29295: LD_OWVAR 2
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: ST_TO_ADDR
// if not tmp then
29323: LD_VAR 0 1
29327: NOT
29328: IFFALSE 29332
// exit ;
29330: GO 29377
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29332: LD_VAR 0 1
29336: PUSH
29337: LD_INT 1
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 12
29349: ARRAY
29350: PPUSH
29351: LD_INT 1
29353: PPUSH
29354: LD_INT 4
29356: PPUSH
29357: CALL_OW 12
29361: PPUSH
29362: LD_INT 3000
29364: PPUSH
29365: LD_INT 9000
29367: PPUSH
29368: CALL_OW 12
29372: PPUSH
29373: CALL_OW 492
// end ;
29377: PPOPN 1
29379: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29380: LD_EXP 51
29384: PUSH
29385: LD_EXP 66
29389: AND
29390: IFFALSE 29410
29392: GO 29394
29394: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29395: LD_INT 1
29397: PPUSH
29398: LD_OWVAR 2
29402: PPUSH
29403: LD_INT 0
29405: PPUSH
29406: CALL_OW 324
29410: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29411: LD_EXP 51
29415: PUSH
29416: LD_EXP 67
29420: AND
29421: IFFALSE 29504
29423: GO 29425
29425: DISABLE
29426: LD_INT 0
29428: PPUSH
29429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29430: LD_ADDR_VAR 0 2
29434: PUSH
29435: LD_INT 22
29437: PUSH
29438: LD_OWVAR 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 21
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PPUSH
29461: CALL_OW 69
29465: ST_TO_ADDR
// if not tmp then
29466: LD_VAR 0 2
29470: NOT
29471: IFFALSE 29475
// exit ;
29473: GO 29504
// for i in tmp do
29475: LD_ADDR_VAR 0 1
29479: PUSH
29480: LD_VAR 0 2
29484: PUSH
29485: FOR_IN
29486: IFFALSE 29502
// SetBLevel ( i , 10 ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_INT 10
29495: PPUSH
29496: CALL_OW 241
29500: GO 29485
29502: POP
29503: POP
// end ;
29504: PPOPN 2
29506: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29507: LD_EXP 51
29511: PUSH
29512: LD_EXP 68
29516: AND
29517: IFFALSE 29628
29519: GO 29521
29521: DISABLE
29522: LD_INT 0
29524: PPUSH
29525: PPUSH
29526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_INT 22
29534: PUSH
29535: LD_OWVAR 2
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 25
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PPUSH
29558: CALL_OW 69
29562: ST_TO_ADDR
// if not tmp then
29563: LD_VAR 0 3
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 29628
// un := tmp [ rand ( 1 , tmp ) ] ;
29572: LD_ADDR_VAR 0 2
29576: PUSH
29577: LD_VAR 0 3
29581: PUSH
29582: LD_INT 1
29584: PPUSH
29585: LD_VAR 0 3
29589: PPUSH
29590: CALL_OW 12
29594: ARRAY
29595: ST_TO_ADDR
// if Crawls ( un ) then
29596: LD_VAR 0 2
29600: PPUSH
29601: CALL_OW 318
29605: IFFALSE 29616
// ComWalk ( un ) ;
29607: LD_VAR 0 2
29611: PPUSH
29612: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29616: LD_VAR 0 2
29620: PPUSH
29621: LD_INT 5
29623: PPUSH
29624: CALL_OW 336
// end ;
29628: PPOPN 3
29630: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29631: LD_EXP 51
29635: PUSH
29636: LD_EXP 69
29640: AND
29641: PUSH
29642: LD_OWVAR 67
29646: PUSH
29647: LD_INT 4
29649: LESS
29650: AND
29651: IFFALSE 29670
29653: GO 29655
29655: DISABLE
// begin Difficulty := Difficulty + 1 ;
29656: LD_ADDR_OWVAR 67
29660: PUSH
29661: LD_OWVAR 67
29665: PUSH
29666: LD_INT 1
29668: PLUS
29669: ST_TO_ADDR
// end ;
29670: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29671: LD_EXP 51
29675: PUSH
29676: LD_EXP 70
29680: AND
29681: IFFALSE 29784
29683: GO 29685
29685: DISABLE
29686: LD_INT 0
29688: PPUSH
// begin for i := 1 to 5 do
29689: LD_ADDR_VAR 0 1
29693: PUSH
29694: DOUBLE
29695: LD_INT 1
29697: DEC
29698: ST_TO_ADDR
29699: LD_INT 5
29701: PUSH
29702: FOR_TO
29703: IFFALSE 29782
// begin uc_nation := nation_nature ;
29705: LD_ADDR_OWVAR 21
29709: PUSH
29710: LD_INT 0
29712: ST_TO_ADDR
// uc_side := 0 ;
29713: LD_ADDR_OWVAR 20
29717: PUSH
29718: LD_INT 0
29720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29721: LD_ADDR_OWVAR 29
29725: PUSH
29726: LD_INT 12
29728: PUSH
29729: LD_INT 12
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// hc_agressivity := 20 ;
29736: LD_ADDR_OWVAR 35
29740: PUSH
29741: LD_INT 20
29743: ST_TO_ADDR
// hc_class := class_tiger ;
29744: LD_ADDR_OWVAR 28
29748: PUSH
29749: LD_INT 14
29751: ST_TO_ADDR
// hc_gallery :=  ;
29752: LD_ADDR_OWVAR 33
29756: PUSH
29757: LD_STRING 
29759: ST_TO_ADDR
// hc_name :=  ;
29760: LD_ADDR_OWVAR 26
29764: PUSH
29765: LD_STRING 
29767: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29768: CALL_OW 44
29772: PPUSH
29773: LD_INT 0
29775: PPUSH
29776: CALL_OW 51
// end ;
29780: GO 29702
29782: POP
29783: POP
// end ;
29784: PPOPN 1
29786: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29787: LD_EXP 51
29791: PUSH
29792: LD_EXP 71
29796: AND
29797: IFFALSE 29806
29799: GO 29801
29801: DISABLE
// StreamSibBomb ;
29802: CALL 29807 0 0
29806: END
// export function StreamSibBomb ; var i , x , y ; begin
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
// result := false ;
29813: LD_ADDR_VAR 0 1
29817: PUSH
29818: LD_INT 0
29820: ST_TO_ADDR
// for i := 1 to 16 do
29821: LD_ADDR_VAR 0 2
29825: PUSH
29826: DOUBLE
29827: LD_INT 1
29829: DEC
29830: ST_TO_ADDR
29831: LD_INT 16
29833: PUSH
29834: FOR_TO
29835: IFFALSE 30034
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_INT 10
29844: PUSH
29845: LD_INT 20
29847: PUSH
29848: LD_INT 30
29850: PUSH
29851: LD_INT 40
29853: PUSH
29854: LD_INT 50
29856: PUSH
29857: LD_INT 60
29859: PUSH
29860: LD_INT 70
29862: PUSH
29863: LD_INT 80
29865: PUSH
29866: LD_INT 90
29868: PUSH
29869: LD_INT 100
29871: PUSH
29872: LD_INT 110
29874: PUSH
29875: LD_INT 120
29877: PUSH
29878: LD_INT 130
29880: PUSH
29881: LD_INT 140
29883: PUSH
29884: LD_INT 150
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PPUSH
29907: LD_INT 15
29909: PPUSH
29910: CALL_OW 12
29914: ARRAY
29915: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29916: LD_ADDR_VAR 0 4
29920: PUSH
29921: LD_INT 10
29923: PUSH
29924: LD_INT 20
29926: PUSH
29927: LD_INT 30
29929: PUSH
29930: LD_INT 40
29932: PUSH
29933: LD_INT 50
29935: PUSH
29936: LD_INT 60
29938: PUSH
29939: LD_INT 70
29941: PUSH
29942: LD_INT 80
29944: PUSH
29945: LD_INT 90
29947: PUSH
29948: LD_INT 100
29950: PUSH
29951: LD_INT 110
29953: PUSH
29954: LD_INT 120
29956: PUSH
29957: LD_INT 130
29959: PUSH
29960: LD_INT 140
29962: PUSH
29963: LD_INT 150
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 15
29988: PPUSH
29989: CALL_OW 12
29993: ARRAY
29994: ST_TO_ADDR
// if ValidHex ( x , y ) then
29995: LD_VAR 0 3
29999: PPUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: CALL_OW 488
30009: IFFALSE 30032
// begin result := [ x , y ] ;
30011: LD_ADDR_VAR 0 1
30015: PUSH
30016: LD_VAR 0 3
30020: PUSH
30021: LD_VAR 0 4
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// break ;
30030: GO 30034
// end ; end ;
30032: GO 29834
30034: POP
30035: POP
// if result then
30036: LD_VAR 0 1
30040: IFFALSE 30100
// begin ToLua ( playSibBomb() ) ;
30042: LD_STRING playSibBomb()
30044: PPUSH
30045: CALL_OW 559
// wait ( 0 0$14 ) ;
30049: LD_INT 490
30051: PPUSH
30052: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30056: LD_VAR 0 1
30060: PUSH
30061: LD_INT 1
30063: ARRAY
30064: PPUSH
30065: LD_VAR 0 1
30069: PUSH
30070: LD_INT 2
30072: ARRAY
30073: PPUSH
30074: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30078: LD_VAR 0 1
30082: PUSH
30083: LD_INT 1
30085: ARRAY
30086: PPUSH
30087: LD_VAR 0 1
30091: PUSH
30092: LD_INT 2
30094: ARRAY
30095: PPUSH
30096: CALL_OW 429
// end ; end ;
30100: LD_VAR 0 1
30104: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30105: LD_EXP 51
30109: PUSH
30110: LD_EXP 73
30114: AND
30115: IFFALSE 30127
30117: GO 30119
30119: DISABLE
// YouLost (  ) ;
30120: LD_STRING 
30122: PPUSH
30123: CALL_OW 104
30127: END
// every 0 0$1 trigger StreamModeActive and sFog do
30128: LD_EXP 51
30132: PUSH
30133: LD_EXP 72
30137: AND
30138: IFFALSE 30152
30140: GO 30142
30142: DISABLE
// FogOff ( your_side ) ;
30143: LD_OWVAR 2
30147: PPUSH
30148: CALL_OW 344
30152: END
// every 0 0$1 trigger StreamModeActive and sSun do
30153: LD_EXP 51
30157: PUSH
30158: LD_EXP 74
30162: AND
30163: IFFALSE 30191
30165: GO 30167
30167: DISABLE
// begin solar_recharge_percent := 0 ;
30168: LD_ADDR_OWVAR 79
30172: PUSH
30173: LD_INT 0
30175: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30176: LD_INT 10500
30178: PPUSH
30179: CALL_OW 67
// solar_recharge_percent := 100 ;
30183: LD_ADDR_OWVAR 79
30187: PUSH
30188: LD_INT 100
30190: ST_TO_ADDR
// end ;
30191: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30192: LD_EXP 51
30196: PUSH
30197: LD_EXP 75
30201: AND
30202: IFFALSE 30441
30204: GO 30206
30206: DISABLE
30207: LD_INT 0
30209: PPUSH
30210: PPUSH
30211: PPUSH
// begin tmp := [ ] ;
30212: LD_ADDR_VAR 0 3
30216: PUSH
30217: EMPTY
30218: ST_TO_ADDR
// for i := 1 to 6 do
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: DOUBLE
30225: LD_INT 1
30227: DEC
30228: ST_TO_ADDR
30229: LD_INT 6
30231: PUSH
30232: FOR_TO
30233: IFFALSE 30338
// begin uc_nation := nation_nature ;
30235: LD_ADDR_OWVAR 21
30239: PUSH
30240: LD_INT 0
30242: ST_TO_ADDR
// uc_side := 0 ;
30243: LD_ADDR_OWVAR 20
30247: PUSH
30248: LD_INT 0
30250: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30251: LD_ADDR_OWVAR 29
30255: PUSH
30256: LD_INT 12
30258: PUSH
30259: LD_INT 12
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: ST_TO_ADDR
// hc_agressivity := 20 ;
30266: LD_ADDR_OWVAR 35
30270: PUSH
30271: LD_INT 20
30273: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30274: LD_ADDR_OWVAR 28
30278: PUSH
30279: LD_INT 17
30281: ST_TO_ADDR
// hc_gallery :=  ;
30282: LD_ADDR_OWVAR 33
30286: PUSH
30287: LD_STRING 
30289: ST_TO_ADDR
// hc_name :=  ;
30290: LD_ADDR_OWVAR 26
30294: PUSH
30295: LD_STRING 
30297: ST_TO_ADDR
// un := CreateHuman ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: CALL_OW 44
30307: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30308: LD_VAR 0 2
30312: PPUSH
30313: LD_INT 1
30315: PPUSH
30316: CALL_OW 51
// tmp := tmp ^ un ;
30320: LD_ADDR_VAR 0 3
30324: PUSH
30325: LD_VAR 0 3
30329: PUSH
30330: LD_VAR 0 2
30334: ADD
30335: ST_TO_ADDR
// end ;
30336: GO 30232
30338: POP
30339: POP
// repeat wait ( 0 0$1 ) ;
30340: LD_INT 35
30342: PPUSH
30343: CALL_OW 67
// for un in tmp do
30347: LD_ADDR_VAR 0 2
30351: PUSH
30352: LD_VAR 0 3
30356: PUSH
30357: FOR_IN
30358: IFFALSE 30432
// begin if IsDead ( un ) then
30360: LD_VAR 0 2
30364: PPUSH
30365: CALL_OW 301
30369: IFFALSE 30389
// begin tmp := tmp diff un ;
30371: LD_ADDR_VAR 0 3
30375: PUSH
30376: LD_VAR 0 3
30380: PUSH
30381: LD_VAR 0 2
30385: DIFF
30386: ST_TO_ADDR
// continue ;
30387: GO 30357
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30389: LD_VAR 0 2
30393: PPUSH
30394: LD_INT 3
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PPUSH
30411: CALL_OW 69
30415: PPUSH
30416: LD_VAR 0 2
30420: PPUSH
30421: CALL_OW 74
30425: PPUSH
30426: CALL_OW 115
// end ;
30430: GO 30357
30432: POP
30433: POP
// until not tmp ;
30434: LD_VAR 0 3
30438: NOT
30439: IFFALSE 30340
// end ;
30441: PPOPN 3
30443: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30444: LD_EXP 51
30448: PUSH
30449: LD_EXP 76
30453: AND
30454: IFFALSE 30508
30456: GO 30458
30458: DISABLE
// begin ToLua ( displayTroll(); ) ;
30459: LD_STRING displayTroll();
30461: PPUSH
30462: CALL_OW 559
// wait ( 3 3$00 ) ;
30466: LD_INT 6300
30468: PPUSH
30469: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30473: LD_STRING hideTroll();
30475: PPUSH
30476: CALL_OW 559
// wait ( 1 1$00 ) ;
30480: LD_INT 2100
30482: PPUSH
30483: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30487: LD_STRING displayTroll();
30489: PPUSH
30490: CALL_OW 559
// wait ( 1 1$00 ) ;
30494: LD_INT 2100
30496: PPUSH
30497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30501: LD_STRING hideTroll();
30503: PPUSH
30504: CALL_OW 559
// end ;
30508: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30509: LD_EXP 51
30513: PUSH
30514: LD_EXP 77
30518: AND
30519: IFFALSE 30582
30521: GO 30523
30523: DISABLE
30524: LD_INT 0
30526: PPUSH
// begin p := 0 ;
30527: LD_ADDR_VAR 0 1
30531: PUSH
30532: LD_INT 0
30534: ST_TO_ADDR
// repeat game_speed := 1 ;
30535: LD_ADDR_OWVAR 65
30539: PUSH
30540: LD_INT 1
30542: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30543: LD_INT 35
30545: PPUSH
30546: CALL_OW 67
// p := p + 1 ;
30550: LD_ADDR_VAR 0 1
30554: PUSH
30555: LD_VAR 0 1
30559: PUSH
30560: LD_INT 1
30562: PLUS
30563: ST_TO_ADDR
// until p >= 60 ;
30564: LD_VAR 0 1
30568: PUSH
30569: LD_INT 60
30571: GREATEREQUAL
30572: IFFALSE 30535
// game_speed := 4 ;
30574: LD_ADDR_OWVAR 65
30578: PUSH
30579: LD_INT 4
30581: ST_TO_ADDR
// end ;
30582: PPOPN 1
30584: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30585: LD_EXP 51
30589: PUSH
30590: LD_EXP 78
30594: AND
30595: IFFALSE 30741
30597: GO 30599
30599: DISABLE
30600: LD_INT 0
30602: PPUSH
30603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30604: LD_ADDR_VAR 0 1
30608: PUSH
30609: LD_INT 22
30611: PUSH
30612: LD_OWVAR 2
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 69
30657: ST_TO_ADDR
// if not depot then
30658: LD_VAR 0 1
30662: NOT
30663: IFFALSE 30667
// exit ;
30665: GO 30741
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30667: LD_ADDR_VAR 0 2
30671: PUSH
30672: LD_VAR 0 1
30676: PUSH
30677: LD_INT 1
30679: PPUSH
30680: LD_VAR 0 1
30684: PPUSH
30685: CALL_OW 12
30689: ARRAY
30690: PPUSH
30691: CALL_OW 274
30695: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30696: LD_VAR 0 2
30700: PPUSH
30701: LD_INT 1
30703: PPUSH
30704: LD_INT 0
30706: PPUSH
30707: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30711: LD_VAR 0 2
30715: PPUSH
30716: LD_INT 2
30718: PPUSH
30719: LD_INT 0
30721: PPUSH
30722: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30726: LD_VAR 0 2
30730: PPUSH
30731: LD_INT 3
30733: PPUSH
30734: LD_INT 0
30736: PPUSH
30737: CALL_OW 277
// end ;
30741: PPOPN 2
30743: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30744: LD_EXP 51
30748: PUSH
30749: LD_EXP 79
30753: AND
30754: IFFALSE 30851
30756: GO 30758
30758: DISABLE
30759: LD_INT 0
30761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30762: LD_ADDR_VAR 0 1
30766: PUSH
30767: LD_INT 22
30769: PUSH
30770: LD_OWVAR 2
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 21
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: LD_INT 23
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: PPUSH
30811: CALL_OW 69
30815: ST_TO_ADDR
// if not tmp then
30816: LD_VAR 0 1
30820: NOT
30821: IFFALSE 30825
// exit ;
30823: GO 30851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30825: LD_VAR 0 1
30829: PUSH
30830: LD_INT 1
30832: PPUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 12
30842: ARRAY
30843: PPUSH
30844: LD_INT 200
30846: PPUSH
30847: CALL_OW 234
// end ;
30851: PPOPN 1
30853: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30854: LD_EXP 51
30858: PUSH
30859: LD_EXP 80
30863: AND
30864: IFFALSE 30943
30866: GO 30868
30868: DISABLE
30869: LD_INT 0
30871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30872: LD_ADDR_VAR 0 1
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PPUSH
30903: CALL_OW 69
30907: ST_TO_ADDR
// if not tmp then
30908: LD_VAR 0 1
30912: NOT
30913: IFFALSE 30917
// exit ;
30915: GO 30943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30917: LD_VAR 0 1
30921: PUSH
30922: LD_INT 1
30924: PPUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 12
30934: ARRAY
30935: PPUSH
30936: LD_INT 60
30938: PPUSH
30939: CALL_OW 234
// end ;
30943: PPOPN 1
30945: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30946: LD_EXP 51
30950: PUSH
30951: LD_EXP 81
30955: AND
30956: IFFALSE 31055
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
30964: PPUSH
// begin enable ;
30965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30966: LD_ADDR_VAR 0 1
30970: PUSH
30971: LD_INT 22
30973: PUSH
30974: LD_OWVAR 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 61
30985: PUSH
30986: EMPTY
30987: LIST
30988: PUSH
30989: LD_INT 33
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: PPUSH
31004: CALL_OW 69
31008: ST_TO_ADDR
// if not tmp then
31009: LD_VAR 0 1
31013: NOT
31014: IFFALSE 31018
// exit ;
31016: GO 31055
// for i in tmp do
31018: LD_ADDR_VAR 0 2
31022: PUSH
31023: LD_VAR 0 1
31027: PUSH
31028: FOR_IN
31029: IFFALSE 31053
// if IsControledBy ( i ) then
31031: LD_VAR 0 2
31035: PPUSH
31036: CALL_OW 312
31040: IFFALSE 31051
// ComUnlink ( i ) ;
31042: LD_VAR 0 2
31046: PPUSH
31047: CALL_OW 136
31051: GO 31028
31053: POP
31054: POP
// end ;
31055: PPOPN 2
31057: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31058: LD_EXP 51
31062: PUSH
31063: LD_EXP 82
31067: AND
31068: IFFALSE 31208
31070: GO 31072
31072: DISABLE
31073: LD_INT 0
31075: PPUSH
31076: PPUSH
// begin ToLua ( displayPowell(); ) ;
31077: LD_STRING displayPowell();
31079: PPUSH
31080: CALL_OW 559
// uc_side := 0 ;
31084: LD_ADDR_OWVAR 20
31088: PUSH
31089: LD_INT 0
31091: ST_TO_ADDR
// uc_nation := 2 ;
31092: LD_ADDR_OWVAR 21
31096: PUSH
31097: LD_INT 2
31099: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31100: LD_ADDR_OWVAR 37
31104: PUSH
31105: LD_INT 14
31107: ST_TO_ADDR
// vc_engine := engine_siberite ;
31108: LD_ADDR_OWVAR 39
31112: PUSH
31113: LD_INT 3
31115: ST_TO_ADDR
// vc_control := control_apeman ;
31116: LD_ADDR_OWVAR 38
31120: PUSH
31121: LD_INT 5
31123: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31124: LD_ADDR_OWVAR 40
31128: PUSH
31129: LD_INT 29
31131: ST_TO_ADDR
// un := CreateVehicle ;
31132: LD_ADDR_VAR 0 2
31136: PUSH
31137: CALL_OW 45
31141: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31142: LD_VAR 0 2
31146: PPUSH
31147: LD_INT 1
31149: PPUSH
31150: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31154: LD_INT 35
31156: PPUSH
31157: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31161: LD_VAR 0 2
31165: PPUSH
31166: LD_INT 22
31168: PUSH
31169: LD_OWVAR 2
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PPUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL_OW 74
31192: PPUSH
31193: CALL_OW 115
// until IsDead ( un ) ;
31197: LD_VAR 0 2
31201: PPUSH
31202: CALL_OW 301
31206: IFFALSE 31154
// end ;
31208: PPOPN 2
31210: END
// every 0 0$1 trigger StreamModeActive and sStu do
31211: LD_EXP 51
31215: PUSH
31216: LD_EXP 90
31220: AND
31221: IFFALSE 31237
31223: GO 31225
31225: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31226: LD_STRING displayStucuk();
31228: PPUSH
31229: CALL_OW 559
// ResetFog ;
31233: CALL_OW 335
// end ;
31237: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31238: LD_EXP 51
31242: PUSH
31243: LD_EXP 83
31247: AND
31248: IFFALSE 31389
31250: GO 31252
31252: DISABLE
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31257: LD_ADDR_VAR 0 2
31261: PUSH
31262: LD_INT 22
31264: PUSH
31265: LD_OWVAR 2
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 21
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PPUSH
31288: CALL_OW 69
31292: ST_TO_ADDR
// if not tmp then
31293: LD_VAR 0 2
31297: NOT
31298: IFFALSE 31302
// exit ;
31300: GO 31389
// un := tmp [ rand ( 1 , tmp ) ] ;
31302: LD_ADDR_VAR 0 1
31306: PUSH
31307: LD_VAR 0 2
31311: PUSH
31312: LD_INT 1
31314: PPUSH
31315: LD_VAR 0 2
31319: PPUSH
31320: CALL_OW 12
31324: ARRAY
31325: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31326: LD_VAR 0 1
31330: PPUSH
31331: LD_INT 0
31333: PPUSH
31334: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_OWVAR 3
31347: PUSH
31348: LD_VAR 0 1
31352: DIFF
31353: PPUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 74
31363: PPUSH
31364: CALL_OW 115
// wait ( 0 0$20 ) ;
31368: LD_INT 700
31370: PPUSH
31371: CALL_OW 67
// SetSide ( un , your_side ) ;
31375: LD_VAR 0 1
31379: PPUSH
31380: LD_OWVAR 2
31384: PPUSH
31385: CALL_OW 235
// end ;
31389: PPOPN 2
31391: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31392: LD_EXP 51
31396: PUSH
31397: LD_EXP 84
31401: AND
31402: IFFALSE 31508
31404: GO 31406
31406: DISABLE
31407: LD_INT 0
31409: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31410: LD_ADDR_VAR 0 1
31414: PUSH
31415: LD_INT 22
31417: PUSH
31418: LD_OWVAR 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 30
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 30
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: CALL_OW 69
31463: ST_TO_ADDR
// if not depot then
31464: LD_VAR 0 1
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31508
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31473: LD_VAR 0 1
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: CALL_OW 250
31486: PPUSH
31487: LD_VAR 0 1
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: PPUSH
31496: CALL_OW 251
31500: PPUSH
31501: LD_INT 70
31503: PPUSH
31504: CALL_OW 495
// end ;
31508: PPOPN 1
31510: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31511: LD_EXP 51
31515: PUSH
31516: LD_EXP 85
31520: AND
31521: IFFALSE 31732
31523: GO 31525
31525: DISABLE
31526: LD_INT 0
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31533: LD_ADDR_VAR 0 5
31537: PUSH
31538: LD_INT 22
31540: PUSH
31541: LD_OWVAR 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 21
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PPUSH
31564: CALL_OW 69
31568: ST_TO_ADDR
// if not tmp then
31569: LD_VAR 0 5
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31732
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 5
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31730
// begin d := rand ( 0 , 5 ) ;
31591: LD_ADDR_VAR 0 4
31595: PUSH
31596: LD_INT 0
31598: PPUSH
31599: LD_INT 5
31601: PPUSH
31602: CALL_OW 12
31606: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31607: LD_ADDR_VAR 0 2
31611: PUSH
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 250
31621: PPUSH
31622: LD_VAR 0 4
31626: PPUSH
31627: LD_INT 3
31629: PPUSH
31630: LD_INT 12
31632: PPUSH
31633: CALL_OW 12
31637: PPUSH
31638: CALL_OW 272
31642: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31643: LD_ADDR_VAR 0 3
31647: PUSH
31648: LD_VAR 0 1
31652: PPUSH
31653: CALL_OW 251
31657: PPUSH
31658: LD_VAR 0 4
31662: PPUSH
31663: LD_INT 3
31665: PPUSH
31666: LD_INT 12
31668: PPUSH
31669: CALL_OW 12
31673: PPUSH
31674: CALL_OW 273
31678: ST_TO_ADDR
// if ValidHex ( x , y ) then
31679: LD_VAR 0 2
31683: PPUSH
31684: LD_VAR 0 3
31688: PPUSH
31689: CALL_OW 488
31693: IFFALSE 31728
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31695: LD_VAR 0 1
31699: PPUSH
31700: LD_VAR 0 2
31704: PPUSH
31705: LD_VAR 0 3
31709: PPUSH
31710: LD_INT 3
31712: PPUSH
31713: LD_INT 6
31715: PPUSH
31716: CALL_OW 12
31720: PPUSH
31721: LD_INT 1
31723: PPUSH
31724: CALL_OW 483
// end ;
31728: GO 31588
31730: POP
31731: POP
// end ;
31732: PPOPN 5
31734: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31735: LD_EXP 51
31739: PUSH
31740: LD_EXP 86
31744: AND
31745: IFFALSE 31839
31747: GO 31749
31749: DISABLE
31750: LD_INT 0
31752: PPUSH
31753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31754: LD_ADDR_VAR 0 2
31758: PUSH
31759: LD_INT 22
31761: PUSH
31762: LD_OWVAR 2
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 32
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 21
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 69
31800: ST_TO_ADDR
// if not tmp then
31801: LD_VAR 0 2
31805: NOT
31806: IFFALSE 31810
// exit ;
31808: GO 31839
// for i in tmp do
31810: LD_ADDR_VAR 0 1
31814: PUSH
31815: LD_VAR 0 2
31819: PUSH
31820: FOR_IN
31821: IFFALSE 31837
// SetFuel ( i , 0 ) ;
31823: LD_VAR 0 1
31827: PPUSH
31828: LD_INT 0
31830: PPUSH
31831: CALL_OW 240
31835: GO 31820
31837: POP
31838: POP
// end ;
31839: PPOPN 2
31841: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31842: LD_EXP 51
31846: PUSH
31847: LD_EXP 87
31851: AND
31852: IFFALSE 31918
31854: GO 31856
31856: DISABLE
31857: LD_INT 0
31859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31860: LD_ADDR_VAR 0 1
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_OWVAR 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 30
31879: PUSH
31880: LD_INT 29
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PPUSH
31891: CALL_OW 69
31895: ST_TO_ADDR
// if not tmp then
31896: LD_VAR 0 1
31900: NOT
31901: IFFALSE 31905
// exit ;
31903: GO 31918
// DestroyUnit ( tmp [ 1 ] ) ;
31905: LD_VAR 0 1
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: CALL_OW 65
// end ;
31918: PPOPN 1
31920: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31921: LD_EXP 51
31925: PUSH
31926: LD_EXP 89
31930: AND
31931: IFFALSE 32060
31933: GO 31935
31935: DISABLE
31936: LD_INT 0
31938: PPUSH
// begin uc_side := 0 ;
31939: LD_ADDR_OWVAR 20
31943: PUSH
31944: LD_INT 0
31946: ST_TO_ADDR
// uc_nation := nation_arabian ;
31947: LD_ADDR_OWVAR 21
31951: PUSH
31952: LD_INT 2
31954: ST_TO_ADDR
// hc_gallery :=  ;
31955: LD_ADDR_OWVAR 33
31959: PUSH
31960: LD_STRING 
31962: ST_TO_ADDR
// hc_name :=  ;
31963: LD_ADDR_OWVAR 26
31967: PUSH
31968: LD_STRING 
31970: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31971: LD_INT 1
31973: PPUSH
31974: LD_INT 11
31976: PPUSH
31977: LD_INT 10
31979: PPUSH
31980: CALL_OW 380
// un := CreateHuman ;
31984: LD_ADDR_VAR 0 1
31988: PUSH
31989: CALL_OW 44
31993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31994: LD_VAR 0 1
31998: PPUSH
31999: LD_INT 1
32001: PPUSH
32002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32006: LD_INT 35
32008: PPUSH
32009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32013: LD_VAR 0 1
32017: PPUSH
32018: LD_INT 22
32020: PUSH
32021: LD_OWVAR 2
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PPUSH
32030: CALL_OW 69
32034: PPUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 74
32044: PPUSH
32045: CALL_OW 115
// until IsDead ( un ) ;
32049: LD_VAR 0 1
32053: PPUSH
32054: CALL_OW 301
32058: IFFALSE 32006
// end ;
32060: PPOPN 1
32062: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32063: LD_EXP 51
32067: PUSH
32068: LD_EXP 91
32072: AND
32073: IFFALSE 32085
32075: GO 32077
32077: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32078: LD_STRING earthquake(getX(game), 0, 32)
32080: PPUSH
32081: CALL_OW 559
32085: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32086: LD_EXP 51
32090: PUSH
32091: LD_EXP 92
32095: AND
32096: IFFALSE 32187
32098: GO 32100
32100: DISABLE
32101: LD_INT 0
32103: PPUSH
// begin enable ;
32104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32105: LD_ADDR_VAR 0 1
32109: PUSH
32110: LD_INT 22
32112: PUSH
32113: LD_OWVAR 2
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 21
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 33
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: PPUSH
32147: CALL_OW 69
32151: ST_TO_ADDR
// if not tmp then
32152: LD_VAR 0 1
32156: NOT
32157: IFFALSE 32161
// exit ;
32159: GO 32187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32161: LD_VAR 0 1
32165: PUSH
32166: LD_INT 1
32168: PPUSH
32169: LD_VAR 0 1
32173: PPUSH
32174: CALL_OW 12
32178: ARRAY
32179: PPUSH
32180: LD_INT 1
32182: PPUSH
32183: CALL_OW 234
// end ;
32187: PPOPN 1
32189: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32190: LD_EXP 51
32194: PUSH
32195: LD_EXP 93
32199: AND
32200: IFFALSE 32341
32202: GO 32204
32204: DISABLE
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
32209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 22
32217: PUSH
32218: LD_OWVAR 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 25
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PPUSH
32241: CALL_OW 69
32245: ST_TO_ADDR
// if not tmp then
32246: LD_VAR 0 3
32250: NOT
32251: IFFALSE 32255
// exit ;
32253: GO 32341
// un := tmp [ rand ( 1 , tmp ) ] ;
32255: LD_ADDR_VAR 0 2
32259: PUSH
32260: LD_VAR 0 3
32264: PUSH
32265: LD_INT 1
32267: PPUSH
32268: LD_VAR 0 3
32272: PPUSH
32273: CALL_OW 12
32277: ARRAY
32278: ST_TO_ADDR
// if Crawls ( un ) then
32279: LD_VAR 0 2
32283: PPUSH
32284: CALL_OW 318
32288: IFFALSE 32299
// ComWalk ( un ) ;
32290: LD_VAR 0 2
32294: PPUSH
32295: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_INT 9
32306: PPUSH
32307: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32311: LD_INT 28
32313: PPUSH
32314: LD_OWVAR 2
32318: PPUSH
32319: LD_INT 2
32321: PPUSH
32322: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32326: LD_INT 29
32328: PPUSH
32329: LD_OWVAR 2
32333: PPUSH
32334: LD_INT 2
32336: PPUSH
32337: CALL_OW 322
// end ;
32341: PPOPN 3
32343: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32344: LD_EXP 51
32348: PUSH
32349: LD_EXP 94
32353: AND
32354: IFFALSE 32465
32356: GO 32358
32358: DISABLE
32359: LD_INT 0
32361: PPUSH
32362: PPUSH
32363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32364: LD_ADDR_VAR 0 3
32368: PUSH
32369: LD_INT 22
32371: PUSH
32372: LD_OWVAR 2
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 25
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PPUSH
32395: CALL_OW 69
32399: ST_TO_ADDR
// if not tmp then
32400: LD_VAR 0 3
32404: NOT
32405: IFFALSE 32409
// exit ;
32407: GO 32465
// un := tmp [ rand ( 1 , tmp ) ] ;
32409: LD_ADDR_VAR 0 2
32413: PUSH
32414: LD_VAR 0 3
32418: PUSH
32419: LD_INT 1
32421: PPUSH
32422: LD_VAR 0 3
32426: PPUSH
32427: CALL_OW 12
32431: ARRAY
32432: ST_TO_ADDR
// if Crawls ( un ) then
32433: LD_VAR 0 2
32437: PPUSH
32438: CALL_OW 318
32442: IFFALSE 32453
// ComWalk ( un ) ;
32444: LD_VAR 0 2
32448: PPUSH
32449: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32453: LD_VAR 0 2
32457: PPUSH
32458: LD_INT 8
32460: PPUSH
32461: CALL_OW 336
// end ;
32465: PPOPN 3
32467: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32468: LD_EXP 51
32472: PUSH
32473: LD_EXP 95
32477: AND
32478: IFFALSE 32622
32480: GO 32482
32482: DISABLE
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32487: LD_ADDR_VAR 0 2
32491: PUSH
32492: LD_INT 22
32494: PUSH
32495: LD_OWVAR 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 21
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 34
32519: PUSH
32520: LD_INT 12
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 34
32529: PUSH
32530: LD_INT 51
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 34
32539: PUSH
32540: LD_INT 32
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: PPUSH
32558: CALL_OW 69
32562: ST_TO_ADDR
// if not tmp then
32563: LD_VAR 0 2
32567: NOT
32568: IFFALSE 32572
// exit ;
32570: GO 32622
// for i in tmp do
32572: LD_ADDR_VAR 0 1
32576: PUSH
32577: LD_VAR 0 2
32581: PUSH
32582: FOR_IN
32583: IFFALSE 32620
// if GetCargo ( i , mat_artifact ) = 0 then
32585: LD_VAR 0 1
32589: PPUSH
32590: LD_INT 4
32592: PPUSH
32593: CALL_OW 289
32597: PUSH
32598: LD_INT 0
32600: EQUAL
32601: IFFALSE 32618
// SetCargo ( i , mat_siberit , 100 ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_INT 3
32610: PPUSH
32611: LD_INT 100
32613: PPUSH
32614: CALL_OW 290
32618: GO 32582
32620: POP
32621: POP
// end ;
32622: PPOPN 2
32624: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32625: LD_EXP 51
32629: PUSH
32630: LD_EXP 96
32634: AND
32635: IFFALSE 32818
32637: GO 32639
32639: DISABLE
32640: LD_INT 0
32642: PPUSH
32643: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32644: LD_ADDR_VAR 0 2
32648: PUSH
32649: LD_INT 22
32651: PUSH
32652: LD_OWVAR 2
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PPUSH
32661: CALL_OW 69
32665: ST_TO_ADDR
// if not tmp then
32666: LD_VAR 0 2
32670: NOT
32671: IFFALSE 32675
// exit ;
32673: GO 32818
// for i := 1 to 2 do
32675: LD_ADDR_VAR 0 1
32679: PUSH
32680: DOUBLE
32681: LD_INT 1
32683: DEC
32684: ST_TO_ADDR
32685: LD_INT 2
32687: PUSH
32688: FOR_TO
32689: IFFALSE 32816
// begin uc_side := your_side ;
32691: LD_ADDR_OWVAR 20
32695: PUSH
32696: LD_OWVAR 2
32700: ST_TO_ADDR
// uc_nation := nation_american ;
32701: LD_ADDR_OWVAR 21
32705: PUSH
32706: LD_INT 1
32708: ST_TO_ADDR
// vc_chassis := us_morphling ;
32709: LD_ADDR_OWVAR 37
32713: PUSH
32714: LD_INT 5
32716: ST_TO_ADDR
// vc_engine := engine_siberite ;
32717: LD_ADDR_OWVAR 39
32721: PUSH
32722: LD_INT 3
32724: ST_TO_ADDR
// vc_control := control_computer ;
32725: LD_ADDR_OWVAR 38
32729: PUSH
32730: LD_INT 3
32732: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32733: LD_ADDR_OWVAR 40
32737: PUSH
32738: LD_INT 10
32740: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32741: LD_VAR 0 2
32745: PUSH
32746: LD_INT 1
32748: ARRAY
32749: PPUSH
32750: CALL_OW 310
32754: NOT
32755: IFFALSE 32802
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32757: CALL_OW 45
32761: PPUSH
32762: LD_VAR 0 2
32766: PUSH
32767: LD_INT 1
32769: ARRAY
32770: PPUSH
32771: CALL_OW 250
32775: PPUSH
32776: LD_VAR 0 2
32780: PUSH
32781: LD_INT 1
32783: ARRAY
32784: PPUSH
32785: CALL_OW 251
32789: PPUSH
32790: LD_INT 12
32792: PPUSH
32793: LD_INT 1
32795: PPUSH
32796: CALL_OW 50
32800: GO 32814
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32802: CALL_OW 45
32806: PPUSH
32807: LD_INT 1
32809: PPUSH
32810: CALL_OW 51
// end ;
32814: GO 32688
32816: POP
32817: POP
// end ;
32818: PPOPN 2
32820: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32821: LD_EXP 51
32825: PUSH
32826: LD_EXP 97
32830: AND
32831: IFFALSE 33053
32833: GO 32835
32835: DISABLE
32836: LD_INT 0
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
32843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32844: LD_ADDR_VAR 0 6
32848: PUSH
32849: LD_INT 22
32851: PUSH
32852: LD_OWVAR 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 21
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 23
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 69
32897: ST_TO_ADDR
// if not tmp then
32898: LD_VAR 0 6
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 33053
// s1 := rand ( 1 , 4 ) ;
32907: LD_ADDR_VAR 0 2
32911: PUSH
32912: LD_INT 1
32914: PPUSH
32915: LD_INT 4
32917: PPUSH
32918: CALL_OW 12
32922: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32923: LD_ADDR_VAR 0 4
32927: PUSH
32928: LD_VAR 0 6
32932: PUSH
32933: LD_INT 1
32935: ARRAY
32936: PPUSH
32937: LD_VAR 0 2
32941: PPUSH
32942: CALL_OW 259
32946: ST_TO_ADDR
// if s1 = 1 then
32947: LD_VAR 0 2
32951: PUSH
32952: LD_INT 1
32954: EQUAL
32955: IFFALSE 32975
// s2 := rand ( 2 , 4 ) else
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 2
32964: PPUSH
32965: LD_INT 4
32967: PPUSH
32968: CALL_OW 12
32972: ST_TO_ADDR
32973: GO 32983
// s2 := 1 ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 1
32982: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32983: LD_ADDR_VAR 0 5
32987: PUSH
32988: LD_VAR 0 6
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: PPUSH
32997: LD_VAR 0 3
33001: PPUSH
33002: CALL_OW 259
33006: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33007: LD_VAR 0 6
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PPUSH
33016: LD_VAR 0 2
33020: PPUSH
33021: LD_VAR 0 5
33025: PPUSH
33026: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33030: LD_VAR 0 6
33034: PUSH
33035: LD_INT 1
33037: ARRAY
33038: PPUSH
33039: LD_VAR 0 3
33043: PPUSH
33044: LD_VAR 0 4
33048: PPUSH
33049: CALL_OW 237
// end ;
33053: PPOPN 6
33055: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33056: LD_EXP 51
33060: PUSH
33061: LD_EXP 98
33065: AND
33066: IFFALSE 33145
33068: GO 33070
33070: DISABLE
33071: LD_INT 0
33073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33074: LD_ADDR_VAR 0 1
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_OWVAR 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 30
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: ST_TO_ADDR
// if not tmp then
33110: LD_VAR 0 1
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33119: LD_VAR 0 1
33123: PUSH
33124: LD_INT 1
33126: PPUSH
33127: LD_VAR 0 1
33131: PPUSH
33132: CALL_OW 12
33136: ARRAY
33137: PPUSH
33138: LD_INT 1
33140: PPUSH
33141: CALL_OW 234
// end ;
33145: PPOPN 1
33147: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33148: LD_EXP 51
33152: PUSH
33153: LD_EXP 99
33157: AND
33158: IFFALSE 33270
33160: GO 33162
33162: DISABLE
33163: LD_INT 0
33165: PPUSH
33166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33167: LD_ADDR_VAR 0 2
33171: PUSH
33172: LD_INT 22
33174: PUSH
33175: LD_OWVAR 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 30
33189: PUSH
33190: LD_INT 27
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 30
33199: PUSH
33200: LD_INT 26
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 28
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PPUSH
33227: CALL_OW 69
33231: ST_TO_ADDR
// if not tmp then
33232: LD_VAR 0 2
33236: NOT
33237: IFFALSE 33241
// exit ;
33239: GO 33270
// for i in tmp do
33241: LD_ADDR_VAR 0 1
33245: PUSH
33246: LD_VAR 0 2
33250: PUSH
33251: FOR_IN
33252: IFFALSE 33268
// SetLives ( i , 1 ) ;
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_INT 1
33261: PPUSH
33262: CALL_OW 234
33266: GO 33251
33268: POP
33269: POP
// end ;
33270: PPOPN 2
33272: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33273: LD_EXP 51
33277: PUSH
33278: LD_EXP 100
33282: AND
33283: IFFALSE 33570
33285: GO 33287
33287: DISABLE
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
33292: PPUSH
// begin i := rand ( 1 , 7 ) ;
33293: LD_ADDR_VAR 0 1
33297: PUSH
33298: LD_INT 1
33300: PPUSH
33301: LD_INT 7
33303: PPUSH
33304: CALL_OW 12
33308: ST_TO_ADDR
// case i of 1 :
33309: LD_VAR 0 1
33313: PUSH
33314: LD_INT 1
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33332
33322: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33323: LD_STRING earthquake(getX(game), 0, 32)
33325: PPUSH
33326: CALL_OW 559
33330: GO 33570
33332: LD_INT 2
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33340
33338: GO 33354
33340: POP
// begin ToLua ( displayStucuk(); ) ;
33341: LD_STRING displayStucuk();
33343: PPUSH
33344: CALL_OW 559
// ResetFog ;
33348: CALL_OW 335
// end ; 3 :
33352: GO 33570
33354: LD_INT 3
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33362
33360: GO 33466
33362: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_INT 22
33370: PUSH
33371: LD_OWVAR 2
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 25
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PPUSH
33394: CALL_OW 69
33398: ST_TO_ADDR
// if not tmp then
33399: LD_VAR 0 2
33403: NOT
33404: IFFALSE 33408
// exit ;
33406: GO 33570
// un := tmp [ rand ( 1 , tmp ) ] ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_VAR 0 2
33417: PUSH
33418: LD_INT 1
33420: PPUSH
33421: LD_VAR 0 2
33425: PPUSH
33426: CALL_OW 12
33430: ARRAY
33431: ST_TO_ADDR
// if Crawls ( un ) then
33432: LD_VAR 0 3
33436: PPUSH
33437: CALL_OW 318
33441: IFFALSE 33452
// ComWalk ( un ) ;
33443: LD_VAR 0 3
33447: PPUSH
33448: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33452: LD_VAR 0 3
33456: PPUSH
33457: LD_INT 8
33459: PPUSH
33460: CALL_OW 336
// end ; 4 :
33464: GO 33570
33466: LD_INT 4
33468: DOUBLE
33469: EQUAL
33470: IFTRUE 33474
33472: GO 33548
33474: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33475: LD_ADDR_VAR 0 2
33479: PUSH
33480: LD_INT 22
33482: PUSH
33483: LD_OWVAR 2
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 30
33494: PUSH
33495: LD_INT 29
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 69
33510: ST_TO_ADDR
// if not tmp then
33511: LD_VAR 0 2
33515: NOT
33516: IFFALSE 33520
// exit ;
33518: GO 33570
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33520: LD_VAR 0 2
33524: PUSH
33525: LD_INT 1
33527: ARRAY
33528: PPUSH
33529: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33533: LD_VAR 0 2
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: PPUSH
33542: CALL_OW 65
// end ; 5 .. 7 :
33546: GO 33570
33548: LD_INT 5
33550: DOUBLE
33551: GREATEREQUAL
33552: IFFALSE 33560
33554: LD_INT 7
33556: DOUBLE
33557: LESSEQUAL
33558: IFTRUE 33562
33560: GO 33569
33562: POP
// StreamSibBomb ; end ;
33563: CALL 29807 0 0
33567: GO 33570
33569: POP
// end ;
33570: PPOPN 3
33572: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33573: LD_EXP 51
33577: PUSH
33578: LD_EXP 101
33582: AND
33583: IFFALSE 33739
33585: GO 33587
33587: DISABLE
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
33592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33593: LD_ADDR_VAR 0 2
33597: PUSH
33598: LD_INT 81
33600: PUSH
33601: LD_OWVAR 2
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 21
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 21
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PPUSH
33642: CALL_OW 69
33646: ST_TO_ADDR
// if not tmp then
33647: LD_VAR 0 2
33651: NOT
33652: IFFALSE 33656
// exit ;
33654: GO 33739
// p := 0 ;
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 0
33663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33664: LD_INT 35
33666: PPUSH
33667: CALL_OW 67
// p := p + 1 ;
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_VAR 0 3
33680: PUSH
33681: LD_INT 1
33683: PLUS
33684: ST_TO_ADDR
// for i in tmp do
33685: LD_ADDR_VAR 0 1
33689: PUSH
33690: LD_VAR 0 2
33694: PUSH
33695: FOR_IN
33696: IFFALSE 33727
// if GetLives ( i ) < 1000 then
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 256
33707: PUSH
33708: LD_INT 1000
33710: LESS
33711: IFFALSE 33725
// SetLives ( i , 1000 ) ;
33713: LD_VAR 0 1
33717: PPUSH
33718: LD_INT 1000
33720: PPUSH
33721: CALL_OW 234
33725: GO 33695
33727: POP
33728: POP
// until p > 20 ;
33729: LD_VAR 0 3
33733: PUSH
33734: LD_INT 20
33736: GREATER
33737: IFFALSE 33664
// end ;
33739: PPOPN 3
33741: END
// every 0 0$1 trigger StreamModeActive and sTime do
33742: LD_EXP 51
33746: PUSH
33747: LD_EXP 102
33751: AND
33752: IFFALSE 33787
33754: GO 33756
33756: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33757: LD_INT 28
33759: PPUSH
33760: LD_OWVAR 2
33764: PPUSH
33765: LD_INT 2
33767: PPUSH
33768: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33772: LD_INT 30
33774: PPUSH
33775: LD_OWVAR 2
33779: PPUSH
33780: LD_INT 2
33782: PPUSH
33783: CALL_OW 322
// end ;
33787: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33788: LD_EXP 51
33792: PUSH
33793: LD_EXP 103
33797: AND
33798: IFFALSE 33919
33800: GO 33802
33802: DISABLE
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33807: LD_ADDR_VAR 0 2
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_OWVAR 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 21
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 23
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: PPUSH
33856: CALL_OW 69
33860: ST_TO_ADDR
// if not tmp then
33861: LD_VAR 0 2
33865: NOT
33866: IFFALSE 33870
// exit ;
33868: GO 33919
// for i in tmp do
33870: LD_ADDR_VAR 0 1
33874: PUSH
33875: LD_VAR 0 2
33879: PUSH
33880: FOR_IN
33881: IFFALSE 33917
// begin if Crawls ( i ) then
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 318
33892: IFFALSE 33903
// ComWalk ( i ) ;
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 138
// SetClass ( i , 2 ) ;
33903: LD_VAR 0 1
33907: PPUSH
33908: LD_INT 2
33910: PPUSH
33911: CALL_OW 336
// end ;
33915: GO 33880
33917: POP
33918: POP
// end ;
33919: PPOPN 2
33921: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33922: LD_EXP 51
33926: PUSH
33927: LD_EXP 104
33931: AND
33932: IFFALSE 34220
33934: GO 33936
33936: DISABLE
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
33941: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33942: LD_OWVAR 2
33946: PPUSH
33947: LD_INT 9
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: LD_INT 1
33955: PPUSH
33956: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33960: LD_INT 9
33962: PPUSH
33963: LD_OWVAR 2
33967: PPUSH
33968: CALL_OW 343
// uc_side := 9 ;
33972: LD_ADDR_OWVAR 20
33976: PUSH
33977: LD_INT 9
33979: ST_TO_ADDR
// uc_nation := 2 ;
33980: LD_ADDR_OWVAR 21
33984: PUSH
33985: LD_INT 2
33987: ST_TO_ADDR
// hc_name := Dark Warrior ;
33988: LD_ADDR_OWVAR 26
33992: PUSH
33993: LD_STRING Dark Warrior
33995: ST_TO_ADDR
// hc_gallery :=  ;
33996: LD_ADDR_OWVAR 33
34000: PUSH
34001: LD_STRING 
34003: ST_TO_ADDR
// hc_noskilllimit := true ;
34004: LD_ADDR_OWVAR 76
34008: PUSH
34009: LD_INT 1
34011: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34012: LD_ADDR_OWVAR 31
34016: PUSH
34017: LD_INT 30
34019: PUSH
34020: LD_INT 30
34022: PUSH
34023: LD_INT 30
34025: PUSH
34026: LD_INT 30
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// un := CreateHuman ;
34035: LD_ADDR_VAR 0 3
34039: PUSH
34040: CALL_OW 44
34044: ST_TO_ADDR
// hc_noskilllimit := false ;
34045: LD_ADDR_OWVAR 76
34049: PUSH
34050: LD_INT 0
34052: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34053: LD_VAR 0 3
34057: PPUSH
34058: LD_INT 1
34060: PPUSH
34061: CALL_OW 51
// ToLua ( playRanger() ) ;
34065: LD_STRING playRanger()
34067: PPUSH
34068: CALL_OW 559
// p := 0 ;
34072: LD_ADDR_VAR 0 2
34076: PUSH
34077: LD_INT 0
34079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34080: LD_INT 35
34082: PPUSH
34083: CALL_OW 67
// p := p + 1 ;
34087: LD_ADDR_VAR 0 2
34091: PUSH
34092: LD_VAR 0 2
34096: PUSH
34097: LD_INT 1
34099: PLUS
34100: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34101: LD_VAR 0 3
34105: PPUSH
34106: CALL_OW 256
34110: PUSH
34111: LD_INT 1000
34113: LESS
34114: IFFALSE 34128
// SetLives ( un , 1000 ) ;
34116: LD_VAR 0 3
34120: PPUSH
34121: LD_INT 1000
34123: PPUSH
34124: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34128: LD_VAR 0 3
34132: PPUSH
34133: LD_INT 81
34135: PUSH
34136: LD_OWVAR 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 91
34147: PUSH
34148: LD_VAR 0 3
34152: PUSH
34153: LD_INT 30
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PPUSH
34165: CALL_OW 69
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: CALL_OW 74
34179: PPUSH
34180: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34184: LD_VAR 0 2
34188: PUSH
34189: LD_INT 80
34191: GREATER
34192: PUSH
34193: LD_VAR 0 3
34197: PPUSH
34198: CALL_OW 301
34202: OR
34203: IFFALSE 34080
// if un then
34205: LD_VAR 0 3
34209: IFFALSE 34220
// RemoveUnit ( un ) ;
34211: LD_VAR 0 3
34215: PPUSH
34216: CALL_OW 64
// end ;
34220: PPOPN 3
34222: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34223: LD_EXP 105
34227: IFFALSE 34343
34229: GO 34231
34231: DISABLE
34232: LD_INT 0
34234: PPUSH
34235: PPUSH
34236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34237: LD_ADDR_VAR 0 2
34241: PUSH
34242: LD_INT 81
34244: PUSH
34245: LD_OWVAR 2
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 21
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PPUSH
34268: CALL_OW 69
34272: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34273: LD_STRING playComputer()
34275: PPUSH
34276: CALL_OW 559
// if not tmp then
34280: LD_VAR 0 2
34284: NOT
34285: IFFALSE 34289
// exit ;
34287: GO 34343
// for i in tmp do
34289: LD_ADDR_VAR 0 1
34293: PUSH
34294: LD_VAR 0 2
34298: PUSH
34299: FOR_IN
34300: IFFALSE 34341
// for j := 1 to 4 do
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: DOUBLE
34308: LD_INT 1
34310: DEC
34311: ST_TO_ADDR
34312: LD_INT 4
34314: PUSH
34315: FOR_TO
34316: IFFALSE 34337
// SetSkill ( i , j , 10 ) ;
34318: LD_VAR 0 1
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: LD_INT 10
34330: PPUSH
34331: CALL_OW 237
34335: GO 34315
34337: POP
34338: POP
34339: GO 34299
34341: POP
34342: POP
// end ;
34343: PPOPN 3
34345: END
// every 0 0$1 trigger s30 do var i , tmp ;
34346: LD_EXP 106
34350: IFFALSE 34419
34352: GO 34354
34354: DISABLE
34355: LD_INT 0
34357: PPUSH
34358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34359: LD_ADDR_VAR 0 2
34363: PUSH
34364: LD_INT 22
34366: PUSH
34367: LD_OWVAR 2
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PPUSH
34376: CALL_OW 69
34380: ST_TO_ADDR
// if not tmp then
34381: LD_VAR 0 2
34385: NOT
34386: IFFALSE 34390
// exit ;
34388: GO 34419
// for i in tmp do
34390: LD_ADDR_VAR 0 1
34394: PUSH
34395: LD_VAR 0 2
34399: PUSH
34400: FOR_IN
34401: IFFALSE 34417
// SetLives ( i , 300 ) ;
34403: LD_VAR 0 1
34407: PPUSH
34408: LD_INT 300
34410: PPUSH
34411: CALL_OW 234
34415: GO 34400
34417: POP
34418: POP
// end ;
34419: PPOPN 2
34421: END
// every 0 0$1 trigger s60 do var i , tmp ;
34422: LD_EXP 107
34426: IFFALSE 34495
34428: GO 34430
34430: DISABLE
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34435: LD_ADDR_VAR 0 2
34439: PUSH
34440: LD_INT 22
34442: PUSH
34443: LD_OWVAR 2
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 69
34456: ST_TO_ADDR
// if not tmp then
34457: LD_VAR 0 2
34461: NOT
34462: IFFALSE 34466
// exit ;
34464: GO 34495
// for i in tmp do
34466: LD_ADDR_VAR 0 1
34470: PUSH
34471: LD_VAR 0 2
34475: PUSH
34476: FOR_IN
34477: IFFALSE 34493
// SetLives ( i , 600 ) ;
34479: LD_VAR 0 1
34483: PPUSH
34484: LD_INT 600
34486: PPUSH
34487: CALL_OW 234
34491: GO 34476
34493: POP
34494: POP
// end ;
34495: PPOPN 2
34497: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34498: LD_INT 0
34500: PPUSH
// case cmd of 301 :
34501: LD_VAR 0 1
34505: PUSH
34506: LD_INT 301
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34546
34514: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34515: LD_VAR 0 6
34519: PPUSH
34520: LD_VAR 0 7
34524: PPUSH
34525: LD_VAR 0 8
34529: PPUSH
34530: LD_VAR 0 4
34534: PPUSH
34535: LD_VAR 0 5
34539: PPUSH
34540: CALL 35755 0 5
34544: GO 34667
34546: LD_INT 302
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34554
34552: GO 34591
34554: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34555: LD_VAR 0 6
34559: PPUSH
34560: LD_VAR 0 7
34564: PPUSH
34565: LD_VAR 0 8
34569: PPUSH
34570: LD_VAR 0 9
34574: PPUSH
34575: LD_VAR 0 4
34579: PPUSH
34580: LD_VAR 0 5
34584: PPUSH
34585: CALL 35846 0 6
34589: GO 34667
34591: LD_INT 303
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34636
34599: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34600: LD_VAR 0 6
34604: PPUSH
34605: LD_VAR 0 7
34609: PPUSH
34610: LD_VAR 0 8
34614: PPUSH
34615: LD_VAR 0 9
34619: PPUSH
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: CALL 34672 0 6
34634: GO 34667
34636: LD_INT 304
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34666
34644: POP
// hHackTeleport ( unit , x , y ) ; end ;
34645: LD_VAR 0 2
34649: PPUSH
34650: LD_VAR 0 4
34654: PPUSH
34655: LD_VAR 0 5
34659: PPUSH
34660: CALL 36439 0 3
34664: GO 34667
34666: POP
// end ;
34667: LD_VAR 0 12
34671: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34672: LD_INT 0
34674: PPUSH
34675: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34676: LD_VAR 0 1
34680: PUSH
34681: LD_INT 1
34683: LESS
34684: PUSH
34685: LD_VAR 0 1
34689: PUSH
34690: LD_INT 3
34692: GREATER
34693: OR
34694: PUSH
34695: LD_VAR 0 5
34699: PPUSH
34700: LD_VAR 0 6
34704: PPUSH
34705: CALL_OW 428
34709: OR
34710: IFFALSE 34714
// exit ;
34712: GO 35442
// uc_side := your_side ;
34714: LD_ADDR_OWVAR 20
34718: PUSH
34719: LD_OWVAR 2
34723: ST_TO_ADDR
// uc_nation := nation ;
34724: LD_ADDR_OWVAR 21
34728: PUSH
34729: LD_VAR 0 1
34733: ST_TO_ADDR
// bc_level = 1 ;
34734: LD_ADDR_OWVAR 43
34738: PUSH
34739: LD_INT 1
34741: ST_TO_ADDR
// case btype of 1 :
34742: LD_VAR 0 2
34746: PUSH
34747: LD_INT 1
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34766
34755: POP
// bc_type := b_depot ; 2 :
34756: LD_ADDR_OWVAR 42
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
34764: GO 35386
34766: LD_INT 2
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34785
34774: POP
// bc_type := b_warehouse ; 3 :
34775: LD_ADDR_OWVAR 42
34779: PUSH
34780: LD_INT 1
34782: ST_TO_ADDR
34783: GO 35386
34785: LD_INT 3
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34804
34793: POP
// bc_type := b_lab ; 4 .. 9 :
34794: LD_ADDR_OWVAR 42
34798: PUSH
34799: LD_INT 6
34801: ST_TO_ADDR
34802: GO 35386
34804: LD_INT 4
34806: DOUBLE
34807: GREATEREQUAL
34808: IFFALSE 34816
34810: LD_INT 9
34812: DOUBLE
34813: LESSEQUAL
34814: IFTRUE 34818
34816: GO 34878
34818: POP
// begin bc_type := b_lab_half ;
34819: LD_ADDR_OWVAR 42
34823: PUSH
34824: LD_INT 7
34826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34827: LD_ADDR_OWVAR 44
34831: PUSH
34832: LD_INT 10
34834: PUSH
34835: LD_INT 11
34837: PUSH
34838: LD_INT 12
34840: PUSH
34841: LD_INT 15
34843: PUSH
34844: LD_INT 14
34846: PUSH
34847: LD_INT 13
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: PUSH
34858: LD_VAR 0 2
34862: PUSH
34863: LD_INT 3
34865: MINUS
34866: ARRAY
34867: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34868: LD_ADDR_OWVAR 45
34872: PUSH
34873: LD_INT 9
34875: ST_TO_ADDR
// end ; 10 .. 13 :
34876: GO 35386
34878: LD_INT 10
34880: DOUBLE
34881: GREATEREQUAL
34882: IFFALSE 34890
34884: LD_INT 13
34886: DOUBLE
34887: LESSEQUAL
34888: IFTRUE 34892
34890: GO 34969
34892: POP
// begin bc_type := b_lab_full ;
34893: LD_ADDR_OWVAR 42
34897: PUSH
34898: LD_INT 8
34900: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34901: LD_ADDR_OWVAR 44
34905: PUSH
34906: LD_INT 10
34908: PUSH
34909: LD_INT 12
34911: PUSH
34912: LD_INT 14
34914: PUSH
34915: LD_INT 13
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: PUSH
34924: LD_VAR 0 2
34928: PUSH
34929: LD_INT 9
34931: MINUS
34932: ARRAY
34933: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34934: LD_ADDR_OWVAR 45
34938: PUSH
34939: LD_INT 11
34941: PUSH
34942: LD_INT 15
34944: PUSH
34945: LD_INT 12
34947: PUSH
34948: LD_INT 15
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: PUSH
34957: LD_VAR 0 2
34961: PUSH
34962: LD_INT 9
34964: MINUS
34965: ARRAY
34966: ST_TO_ADDR
// end ; 14 :
34967: GO 35386
34969: LD_INT 14
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 34988
34977: POP
// bc_type := b_workshop ; 15 :
34978: LD_ADDR_OWVAR 42
34982: PUSH
34983: LD_INT 2
34985: ST_TO_ADDR
34986: GO 35386
34988: LD_INT 15
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35007
34996: POP
// bc_type := b_factory ; 16 :
34997: LD_ADDR_OWVAR 42
35001: PUSH
35002: LD_INT 3
35004: ST_TO_ADDR
35005: GO 35386
35007: LD_INT 16
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35026
35015: POP
// bc_type := b_ext_gun ; 17 :
35016: LD_ADDR_OWVAR 42
35020: PUSH
35021: LD_INT 17
35023: ST_TO_ADDR
35024: GO 35386
35026: LD_INT 17
35028: DOUBLE
35029: EQUAL
35030: IFTRUE 35034
35032: GO 35062
35034: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35035: LD_ADDR_OWVAR 42
35039: PUSH
35040: LD_INT 19
35042: PUSH
35043: LD_INT 23
35045: PUSH
35046: LD_INT 19
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: PUSH
35054: LD_VAR 0 1
35058: ARRAY
35059: ST_TO_ADDR
35060: GO 35386
35062: LD_INT 18
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35081
35070: POP
// bc_type := b_ext_radar ; 19 :
35071: LD_ADDR_OWVAR 42
35075: PUSH
35076: LD_INT 20
35078: ST_TO_ADDR
35079: GO 35386
35081: LD_INT 19
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35100
35089: POP
// bc_type := b_ext_radio ; 20 :
35090: LD_ADDR_OWVAR 42
35094: PUSH
35095: LD_INT 22
35097: ST_TO_ADDR
35098: GO 35386
35100: LD_INT 20
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35119
35108: POP
// bc_type := b_ext_siberium ; 21 :
35109: LD_ADDR_OWVAR 42
35113: PUSH
35114: LD_INT 21
35116: ST_TO_ADDR
35117: GO 35386
35119: LD_INT 21
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35138
35127: POP
// bc_type := b_ext_computer ; 22 :
35128: LD_ADDR_OWVAR 42
35132: PUSH
35133: LD_INT 24
35135: ST_TO_ADDR
35136: GO 35386
35138: LD_INT 22
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35157
35146: POP
// bc_type := b_ext_track ; 23 :
35147: LD_ADDR_OWVAR 42
35151: PUSH
35152: LD_INT 16
35154: ST_TO_ADDR
35155: GO 35386
35157: LD_INT 23
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35165
35163: GO 35176
35165: POP
// bc_type := b_ext_laser ; 24 :
35166: LD_ADDR_OWVAR 42
35170: PUSH
35171: LD_INT 25
35173: ST_TO_ADDR
35174: GO 35386
35176: LD_INT 24
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35195
35184: POP
// bc_type := b_control_tower ; 25 :
35185: LD_ADDR_OWVAR 42
35189: PUSH
35190: LD_INT 36
35192: ST_TO_ADDR
35193: GO 35386
35195: LD_INT 25
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35214
35203: POP
// bc_type := b_breastwork ; 26 :
35204: LD_ADDR_OWVAR 42
35208: PUSH
35209: LD_INT 31
35211: ST_TO_ADDR
35212: GO 35386
35214: LD_INT 26
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35233
35222: POP
// bc_type := b_bunker ; 27 :
35223: LD_ADDR_OWVAR 42
35227: PUSH
35228: LD_INT 32
35230: ST_TO_ADDR
35231: GO 35386
35233: LD_INT 27
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35241
35239: GO 35252
35241: POP
// bc_type := b_turret ; 28 :
35242: LD_ADDR_OWVAR 42
35246: PUSH
35247: LD_INT 33
35249: ST_TO_ADDR
35250: GO 35386
35252: LD_INT 28
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35260
35258: GO 35271
35260: POP
// bc_type := b_armoury ; 29 :
35261: LD_ADDR_OWVAR 42
35265: PUSH
35266: LD_INT 4
35268: ST_TO_ADDR
35269: GO 35386
35271: LD_INT 29
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35290
35279: POP
// bc_type := b_barracks ; 30 :
35280: LD_ADDR_OWVAR 42
35284: PUSH
35285: LD_INT 5
35287: ST_TO_ADDR
35288: GO 35386
35290: LD_INT 30
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35298
35296: GO 35309
35298: POP
// bc_type := b_solar_power ; 31 :
35299: LD_ADDR_OWVAR 42
35303: PUSH
35304: LD_INT 27
35306: ST_TO_ADDR
35307: GO 35386
35309: LD_INT 31
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35317
35315: GO 35328
35317: POP
// bc_type := b_oil_power ; 32 :
35318: LD_ADDR_OWVAR 42
35322: PUSH
35323: LD_INT 26
35325: ST_TO_ADDR
35326: GO 35386
35328: LD_INT 32
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35347
35336: POP
// bc_type := b_siberite_power ; 33 :
35337: LD_ADDR_OWVAR 42
35341: PUSH
35342: LD_INT 28
35344: ST_TO_ADDR
35345: GO 35386
35347: LD_INT 33
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35366
35355: POP
// bc_type := b_oil_mine ; 34 :
35356: LD_ADDR_OWVAR 42
35360: PUSH
35361: LD_INT 29
35363: ST_TO_ADDR
35364: GO 35386
35366: LD_INT 34
35368: DOUBLE
35369: EQUAL
35370: IFTRUE 35374
35372: GO 35385
35374: POP
// bc_type := b_siberite_mine ; end ;
35375: LD_ADDR_OWVAR 42
35379: PUSH
35380: LD_INT 30
35382: ST_TO_ADDR
35383: GO 35386
35385: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35386: LD_ADDR_VAR 0 8
35390: PUSH
35391: LD_VAR 0 5
35395: PPUSH
35396: LD_VAR 0 6
35400: PPUSH
35401: LD_VAR 0 3
35405: PPUSH
35406: CALL_OW 47
35410: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35411: LD_OWVAR 42
35415: PUSH
35416: LD_INT 32
35418: PUSH
35419: LD_INT 33
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: IN
35426: IFFALSE 35442
// PlaceWeaponTurret ( b , weapon ) ;
35428: LD_VAR 0 8
35432: PPUSH
35433: LD_VAR 0 4
35437: PPUSH
35438: CALL_OW 431
// end ;
35442: LD_VAR 0 7
35446: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35447: LD_INT 0
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35453: LD_ADDR_VAR 0 4
35457: PUSH
35458: LD_INT 22
35460: PUSH
35461: LD_OWVAR 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 30
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 30
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PPUSH
35502: CALL_OW 69
35506: ST_TO_ADDR
// if not tmp then
35507: LD_VAR 0 4
35511: NOT
35512: IFFALSE 35516
// exit ;
35514: GO 35575
// for i in tmp do
35516: LD_ADDR_VAR 0 2
35520: PUSH
35521: LD_VAR 0 4
35525: PUSH
35526: FOR_IN
35527: IFFALSE 35573
// for j = 1 to 3 do
35529: LD_ADDR_VAR 0 3
35533: PUSH
35534: DOUBLE
35535: LD_INT 1
35537: DEC
35538: ST_TO_ADDR
35539: LD_INT 3
35541: PUSH
35542: FOR_TO
35543: IFFALSE 35569
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35545: LD_VAR 0 2
35549: PPUSH
35550: CALL_OW 274
35554: PPUSH
35555: LD_VAR 0 3
35559: PPUSH
35560: LD_INT 99999
35562: PPUSH
35563: CALL_OW 277
35567: GO 35542
35569: POP
35570: POP
35571: GO 35526
35573: POP
35574: POP
// end ;
35575: LD_VAR 0 1
35579: RET
// export function hHackSetLevel10 ; var i , j ; begin
35580: LD_INT 0
35582: PPUSH
35583: PPUSH
35584: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35585: LD_ADDR_VAR 0 2
35589: PUSH
35590: LD_INT 21
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PPUSH
35600: CALL_OW 69
35604: PUSH
35605: FOR_IN
35606: IFFALSE 35658
// if IsSelected ( i ) then
35608: LD_VAR 0 2
35612: PPUSH
35613: CALL_OW 306
35617: IFFALSE 35656
// begin for j := 1 to 4 do
35619: LD_ADDR_VAR 0 3
35623: PUSH
35624: DOUBLE
35625: LD_INT 1
35627: DEC
35628: ST_TO_ADDR
35629: LD_INT 4
35631: PUSH
35632: FOR_TO
35633: IFFALSE 35654
// SetSkill ( i , j , 10 ) ;
35635: LD_VAR 0 2
35639: PPUSH
35640: LD_VAR 0 3
35644: PPUSH
35645: LD_INT 10
35647: PPUSH
35648: CALL_OW 237
35652: GO 35632
35654: POP
35655: POP
// end ;
35656: GO 35605
35658: POP
35659: POP
// end ;
35660: LD_VAR 0 1
35664: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35670: LD_ADDR_VAR 0 2
35674: PUSH
35675: LD_INT 22
35677: PUSH
35678: LD_OWVAR 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 21
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PPUSH
35701: CALL_OW 69
35705: PUSH
35706: FOR_IN
35707: IFFALSE 35748
// begin for j := 1 to 4 do
35709: LD_ADDR_VAR 0 3
35713: PUSH
35714: DOUBLE
35715: LD_INT 1
35717: DEC
35718: ST_TO_ADDR
35719: LD_INT 4
35721: PUSH
35722: FOR_TO
35723: IFFALSE 35744
// SetSkill ( i , j , 10 ) ;
35725: LD_VAR 0 2
35729: PPUSH
35730: LD_VAR 0 3
35734: PPUSH
35735: LD_INT 10
35737: PPUSH
35738: CALL_OW 237
35742: GO 35722
35744: POP
35745: POP
// end ;
35746: GO 35706
35748: POP
35749: POP
// end ;
35750: LD_VAR 0 1
35754: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35755: LD_INT 0
35757: PPUSH
// uc_side := your_side ;
35758: LD_ADDR_OWVAR 20
35762: PUSH
35763: LD_OWVAR 2
35767: ST_TO_ADDR
// uc_nation := nation ;
35768: LD_ADDR_OWVAR 21
35772: PUSH
35773: LD_VAR 0 1
35777: ST_TO_ADDR
// InitHc ;
35778: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35782: LD_INT 0
35784: PPUSH
35785: LD_VAR 0 2
35789: PPUSH
35790: LD_VAR 0 3
35794: PPUSH
35795: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35799: LD_VAR 0 4
35803: PPUSH
35804: LD_VAR 0 5
35808: PPUSH
35809: CALL_OW 428
35813: PUSH
35814: LD_INT 0
35816: EQUAL
35817: IFFALSE 35841
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35819: CALL_OW 44
35823: PPUSH
35824: LD_VAR 0 4
35828: PPUSH
35829: LD_VAR 0 5
35833: PPUSH
35834: LD_INT 1
35836: PPUSH
35837: CALL_OW 48
// end ;
35841: LD_VAR 0 6
35845: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35846: LD_INT 0
35848: PPUSH
35849: PPUSH
// uc_side := your_side ;
35850: LD_ADDR_OWVAR 20
35854: PUSH
35855: LD_OWVAR 2
35859: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35860: LD_VAR 0 1
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: LD_INT 4
35876: PUSH
35877: LD_INT 5
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: IN
35887: IFFALSE 35899
// uc_nation := nation_american else
35889: LD_ADDR_OWVAR 21
35893: PUSH
35894: LD_INT 1
35896: ST_TO_ADDR
35897: GO 35942
// if chassis in [ 11 , 12 , 13 , 14 ] then
35899: LD_VAR 0 1
35903: PUSH
35904: LD_INT 11
35906: PUSH
35907: LD_INT 12
35909: PUSH
35910: LD_INT 13
35912: PUSH
35913: LD_INT 14
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: IN
35922: IFFALSE 35934
// uc_nation := nation_arabian else
35924: LD_ADDR_OWVAR 21
35928: PUSH
35929: LD_INT 2
35931: ST_TO_ADDR
35932: GO 35942
// uc_nation := nation_russian ;
35934: LD_ADDR_OWVAR 21
35938: PUSH
35939: LD_INT 3
35941: ST_TO_ADDR
// vc_chassis := chassis ;
35942: LD_ADDR_OWVAR 37
35946: PUSH
35947: LD_VAR 0 1
35951: ST_TO_ADDR
// vc_engine := engine ;
35952: LD_ADDR_OWVAR 39
35956: PUSH
35957: LD_VAR 0 2
35961: ST_TO_ADDR
// vc_control := control ;
35962: LD_ADDR_OWVAR 38
35966: PUSH
35967: LD_VAR 0 3
35971: ST_TO_ADDR
// vc_weapon := weapon ;
35972: LD_ADDR_OWVAR 40
35976: PUSH
35977: LD_VAR 0 4
35981: ST_TO_ADDR
// un := CreateVehicle ;
35982: LD_ADDR_VAR 0 8
35986: PUSH
35987: CALL_OW 45
35991: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35992: LD_VAR 0 8
35996: PPUSH
35997: LD_INT 0
35999: PPUSH
36000: LD_INT 5
36002: PPUSH
36003: CALL_OW 12
36007: PPUSH
36008: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36012: LD_VAR 0 8
36016: PPUSH
36017: LD_VAR 0 5
36021: PPUSH
36022: LD_VAR 0 6
36026: PPUSH
36027: LD_INT 1
36029: PPUSH
36030: CALL_OW 48
// end ;
36034: LD_VAR 0 7
36038: RET
// export hInvincible ; every 1 do
36039: GO 36041
36041: DISABLE
// hInvincible := [ ] ;
36042: LD_ADDR_EXP 108
36046: PUSH
36047: EMPTY
36048: ST_TO_ADDR
36049: END
// every 10 do var i ;
36050: GO 36052
36052: DISABLE
36053: LD_INT 0
36055: PPUSH
// begin enable ;
36056: ENABLE
// if not hInvincible then
36057: LD_EXP 108
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 36110
// for i in hInvincible do
36066: LD_ADDR_VAR 0 1
36070: PUSH
36071: LD_EXP 108
36075: PUSH
36076: FOR_IN
36077: IFFALSE 36108
// if GetLives ( i ) < 1000 then
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 256
36088: PUSH
36089: LD_INT 1000
36091: LESS
36092: IFFALSE 36106
// SetLives ( i , 1000 ) ;
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_INT 1000
36101: PPUSH
36102: CALL_OW 234
36106: GO 36076
36108: POP
36109: POP
// end ;
36110: PPOPN 1
36112: END
// export function hHackInvincible ; var i ; begin
36113: LD_INT 0
36115: PPUSH
36116: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36117: LD_ADDR_VAR 0 2
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: LD_INT 21
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 21
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: PPUSH
36150: CALL_OW 69
36154: PUSH
36155: FOR_IN
36156: IFFALSE 36217
// if IsSelected ( i ) then
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 306
36167: IFFALSE 36215
// begin if i in hInvincible then
36169: LD_VAR 0 2
36173: PUSH
36174: LD_EXP 108
36178: IN
36179: IFFALSE 36199
// hInvincible := hInvincible diff i else
36181: LD_ADDR_EXP 108
36185: PUSH
36186: LD_EXP 108
36190: PUSH
36191: LD_VAR 0 2
36195: DIFF
36196: ST_TO_ADDR
36197: GO 36215
// hInvincible := hInvincible union i ;
36199: LD_ADDR_EXP 108
36203: PUSH
36204: LD_EXP 108
36208: PUSH
36209: LD_VAR 0 2
36213: UNION
36214: ST_TO_ADDR
// end ;
36215: GO 36155
36217: POP
36218: POP
// end ;
36219: LD_VAR 0 1
36223: RET
// export function hHackInvisible ; var i , j ; begin
36224: LD_INT 0
36226: PPUSH
36227: PPUSH
36228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36229: LD_ADDR_VAR 0 2
36233: PUSH
36234: LD_INT 21
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PPUSH
36244: CALL_OW 69
36248: PUSH
36249: FOR_IN
36250: IFFALSE 36274
// if IsSelected ( i ) then
36252: LD_VAR 0 2
36256: PPUSH
36257: CALL_OW 306
36261: IFFALSE 36272
// ComForceInvisible ( i ) ;
36263: LD_VAR 0 2
36267: PPUSH
36268: CALL_OW 496
36272: GO 36249
36274: POP
36275: POP
// end ;
36276: LD_VAR 0 1
36280: RET
// export function hHackChangeYourSide ; begin
36281: LD_INT 0
36283: PPUSH
// if your_side = 8 then
36284: LD_OWVAR 2
36288: PUSH
36289: LD_INT 8
36291: EQUAL
36292: IFFALSE 36304
// your_side := 0 else
36294: LD_ADDR_OWVAR 2
36298: PUSH
36299: LD_INT 0
36301: ST_TO_ADDR
36302: GO 36318
// your_side := your_side + 1 ;
36304: LD_ADDR_OWVAR 2
36308: PUSH
36309: LD_OWVAR 2
36313: PUSH
36314: LD_INT 1
36316: PLUS
36317: ST_TO_ADDR
// end ;
36318: LD_VAR 0 1
36322: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36323: LD_INT 0
36325: PPUSH
36326: PPUSH
36327: PPUSH
// for i in all_units do
36328: LD_ADDR_VAR 0 2
36332: PUSH
36333: LD_OWVAR 3
36337: PUSH
36338: FOR_IN
36339: IFFALSE 36417
// if IsSelected ( i ) then
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 306
36350: IFFALSE 36415
// begin j := GetSide ( i ) ;
36352: LD_ADDR_VAR 0 3
36356: PUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL_OW 255
36366: ST_TO_ADDR
// if j = 8 then
36367: LD_VAR 0 3
36371: PUSH
36372: LD_INT 8
36374: EQUAL
36375: IFFALSE 36387
// j := 0 else
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_INT 0
36384: ST_TO_ADDR
36385: GO 36401
// j := j + 1 ;
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_VAR 0 3
36396: PUSH
36397: LD_INT 1
36399: PLUS
36400: ST_TO_ADDR
// SetSide ( i , j ) ;
36401: LD_VAR 0 2
36405: PPUSH
36406: LD_VAR 0 3
36410: PPUSH
36411: CALL_OW 235
// end ;
36415: GO 36338
36417: POP
36418: POP
// end ;
36419: LD_VAR 0 1
36423: RET
// export function hHackFog ; begin
36424: LD_INT 0
36426: PPUSH
// FogOff ( true ) ;
36427: LD_INT 1
36429: PPUSH
36430: CALL_OW 344
// end ;
36434: LD_VAR 0 1
36438: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36439: LD_INT 0
36441: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36442: LD_VAR 0 1
36446: PPUSH
36447: LD_VAR 0 2
36451: PPUSH
36452: LD_VAR 0 3
36456: PPUSH
36457: LD_INT 1
36459: PPUSH
36460: LD_INT 1
36462: PPUSH
36463: CALL_OW 483
// CenterOnXY ( x , y ) ;
36467: LD_VAR 0 2
36471: PPUSH
36472: LD_VAR 0 3
36476: PPUSH
36477: CALL_OW 84
// end ;
36481: LD_VAR 0 4
36485: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36486: LD_INT 0
36488: PPUSH
36489: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36490: LD_VAR 0 1
36494: NOT
36495: PUSH
36496: LD_VAR 0 2
36500: PPUSH
36501: LD_VAR 0 3
36505: PPUSH
36506: CALL_OW 488
36510: NOT
36511: OR
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 266
36522: PUSH
36523: LD_INT 3
36525: NONEQUAL
36526: PUSH
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 247
36536: PUSH
36537: LD_INT 1
36539: EQUAL
36540: NOT
36541: AND
36542: OR
36543: IFFALSE 36547
// exit ;
36545: GO 36696
// if GetType ( factory ) = unit_human then
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 247
36556: PUSH
36557: LD_INT 1
36559: EQUAL
36560: IFFALSE 36577
// factory := IsInUnit ( factory ) ;
36562: LD_ADDR_VAR 0 1
36566: PUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 310
36576: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 266
36586: PUSH
36587: LD_INT 3
36589: NONEQUAL
36590: IFFALSE 36594
// exit ;
36592: GO 36696
// if HexInfo ( x , y ) = factory then
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 3
36603: PPUSH
36604: CALL_OW 428
36608: PUSH
36609: LD_VAR 0 1
36613: EQUAL
36614: IFFALSE 36641
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36616: LD_ADDR_EXP 109
36620: PUSH
36621: LD_EXP 109
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: LD_INT 0
36633: PPUSH
36634: CALL_OW 1
36638: ST_TO_ADDR
36639: GO 36692
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36641: LD_ADDR_EXP 109
36645: PUSH
36646: LD_EXP 109
36650: PPUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 255
36665: PUSH
36666: LD_VAR 0 1
36670: PUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_VAR 0 3
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: PPUSH
36687: CALL_OW 1
36691: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36692: CALL 36701 0 0
// end ;
36696: LD_VAR 0 4
36700: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36706: LD_STRING resetFactoryWaypoint();
36708: PPUSH
36709: CALL_OW 559
// if factoryWaypoints then
36713: LD_EXP 109
36717: IFFALSE 36843
// begin list := PrepareArray ( factoryWaypoints ) ;
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_EXP 109
36728: PPUSH
36729: CALL 84140 0 1
36733: ST_TO_ADDR
// for i := 1 to list do
36734: LD_ADDR_VAR 0 2
36738: PUSH
36739: DOUBLE
36740: LD_INT 1
36742: DEC
36743: ST_TO_ADDR
36744: LD_VAR 0 3
36748: PUSH
36749: FOR_TO
36750: IFFALSE 36841
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36752: LD_STRING setFactoryWaypointXY(
36754: PUSH
36755: LD_VAR 0 3
36759: PUSH
36760: LD_VAR 0 2
36764: ARRAY
36765: PUSH
36766: LD_INT 1
36768: ARRAY
36769: STR
36770: PUSH
36771: LD_STRING ,
36773: STR
36774: PUSH
36775: LD_VAR 0 3
36779: PUSH
36780: LD_VAR 0 2
36784: ARRAY
36785: PUSH
36786: LD_INT 2
36788: ARRAY
36789: STR
36790: PUSH
36791: LD_STRING ,
36793: STR
36794: PUSH
36795: LD_VAR 0 3
36799: PUSH
36800: LD_VAR 0 2
36804: ARRAY
36805: PUSH
36806: LD_INT 3
36808: ARRAY
36809: STR
36810: PUSH
36811: LD_STRING ,
36813: STR
36814: PUSH
36815: LD_VAR 0 3
36819: PUSH
36820: LD_VAR 0 2
36824: ARRAY
36825: PUSH
36826: LD_INT 4
36828: ARRAY
36829: STR
36830: PUSH
36831: LD_STRING )
36833: STR
36834: PPUSH
36835: CALL_OW 559
36839: GO 36749
36841: POP
36842: POP
// end ; end ;
36843: LD_VAR 0 1
36847: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36848: LD_INT 0
36850: PPUSH
// if HexInfo ( x , y ) = warehouse then
36851: LD_VAR 0 2
36855: PPUSH
36856: LD_VAR 0 3
36860: PPUSH
36861: CALL_OW 428
36865: PUSH
36866: LD_VAR 0 1
36870: EQUAL
36871: IFFALSE 36898
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36873: LD_ADDR_EXP 110
36877: PUSH
36878: LD_EXP 110
36882: PPUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: LD_INT 0
36890: PPUSH
36891: CALL_OW 1
36895: ST_TO_ADDR
36896: GO 36949
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36898: LD_ADDR_EXP 110
36902: PUSH
36903: LD_EXP 110
36907: PPUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 255
36922: PUSH
36923: LD_VAR 0 1
36927: PUSH
36928: LD_VAR 0 2
36932: PUSH
36933: LD_VAR 0 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 1
36948: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36949: CALL 36958 0 0
// end ;
36953: LD_VAR 0 4
36957: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36963: LD_STRING resetWarehouseGatheringPoints();
36965: PPUSH
36966: CALL_OW 559
// if warehouseGatheringPoints then
36970: LD_EXP 110
36974: IFFALSE 37100
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36976: LD_ADDR_VAR 0 3
36980: PUSH
36981: LD_EXP 110
36985: PPUSH
36986: CALL 84140 0 1
36990: ST_TO_ADDR
// for i := 1 to list do
36991: LD_ADDR_VAR 0 2
36995: PUSH
36996: DOUBLE
36997: LD_INT 1
36999: DEC
37000: ST_TO_ADDR
37001: LD_VAR 0 3
37005: PUSH
37006: FOR_TO
37007: IFFALSE 37098
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37009: LD_STRING setWarehouseGatheringPointXY(
37011: PUSH
37012: LD_VAR 0 3
37016: PUSH
37017: LD_VAR 0 2
37021: ARRAY
37022: PUSH
37023: LD_INT 1
37025: ARRAY
37026: STR
37027: PUSH
37028: LD_STRING ,
37030: STR
37031: PUSH
37032: LD_VAR 0 3
37036: PUSH
37037: LD_VAR 0 2
37041: ARRAY
37042: PUSH
37043: LD_INT 2
37045: ARRAY
37046: STR
37047: PUSH
37048: LD_STRING ,
37050: STR
37051: PUSH
37052: LD_VAR 0 3
37056: PUSH
37057: LD_VAR 0 2
37061: ARRAY
37062: PUSH
37063: LD_INT 3
37065: ARRAY
37066: STR
37067: PUSH
37068: LD_STRING ,
37070: STR
37071: PUSH
37072: LD_VAR 0 3
37076: PUSH
37077: LD_VAR 0 2
37081: ARRAY
37082: PUSH
37083: LD_INT 4
37085: ARRAY
37086: STR
37087: PUSH
37088: LD_STRING )
37090: STR
37091: PPUSH
37092: CALL_OW 559
37096: GO 37006
37098: POP
37099: POP
// end ; end ;
37100: LD_VAR 0 1
37104: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37105: LD_EXP 110
37109: IFFALSE 37794
37111: GO 37113
37113: DISABLE
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
// begin enable ;
37125: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_EXP 110
37135: PPUSH
37136: CALL 84140 0 1
37140: ST_TO_ADDR
// if not list then
37141: LD_VAR 0 3
37145: NOT
37146: IFFALSE 37150
// exit ;
37148: GO 37794
// for i := 1 to list do
37150: LD_ADDR_VAR 0 1
37154: PUSH
37155: DOUBLE
37156: LD_INT 1
37158: DEC
37159: ST_TO_ADDR
37160: LD_VAR 0 3
37164: PUSH
37165: FOR_TO
37166: IFFALSE 37792
// begin depot := list [ i ] [ 2 ] ;
37168: LD_ADDR_VAR 0 8
37172: PUSH
37173: LD_VAR 0 3
37177: PUSH
37178: LD_VAR 0 1
37182: ARRAY
37183: PUSH
37184: LD_INT 2
37186: ARRAY
37187: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37188: LD_ADDR_VAR 0 5
37192: PUSH
37193: LD_VAR 0 3
37197: PUSH
37198: LD_VAR 0 1
37202: ARRAY
37203: PUSH
37204: LD_INT 1
37206: ARRAY
37207: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37208: LD_VAR 0 8
37212: PPUSH
37213: CALL_OW 301
37217: PUSH
37218: LD_VAR 0 5
37222: PUSH
37223: LD_VAR 0 8
37227: PPUSH
37228: CALL_OW 255
37232: NONEQUAL
37233: OR
37234: IFFALSE 37263
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37236: LD_ADDR_EXP 110
37240: PUSH
37241: LD_EXP 110
37245: PPUSH
37246: LD_VAR 0 8
37250: PPUSH
37251: LD_INT 0
37253: PPUSH
37254: CALL_OW 1
37258: ST_TO_ADDR
// exit ;
37259: POP
37260: POP
37261: GO 37794
// end ; x := list [ i ] [ 3 ] ;
37263: LD_ADDR_VAR 0 6
37267: PUSH
37268: LD_VAR 0 3
37272: PUSH
37273: LD_VAR 0 1
37277: ARRAY
37278: PUSH
37279: LD_INT 3
37281: ARRAY
37282: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37283: LD_ADDR_VAR 0 7
37287: PUSH
37288: LD_VAR 0 3
37292: PUSH
37293: LD_VAR 0 1
37297: ARRAY
37298: PUSH
37299: LD_INT 4
37301: ARRAY
37302: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37303: LD_ADDR_VAR 0 9
37307: PUSH
37308: LD_VAR 0 6
37312: PPUSH
37313: LD_VAR 0 7
37317: PPUSH
37318: LD_INT 16
37320: PPUSH
37321: CALL 82728 0 3
37325: ST_TO_ADDR
// if not cratesNearbyPoint then
37326: LD_VAR 0 9
37330: NOT
37331: IFFALSE 37337
// exit ;
37333: POP
37334: POP
37335: GO 37794
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37337: LD_ADDR_VAR 0 4
37341: PUSH
37342: LD_INT 22
37344: PUSH
37345: LD_VAR 0 5
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 60
37359: PUSH
37360: EMPTY
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 91
37369: PUSH
37370: LD_VAR 0 8
37374: PUSH
37375: LD_INT 6
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 25
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 25
37398: PUSH
37399: LD_INT 16
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL_OW 69
37421: PUSH
37422: LD_VAR 0 8
37426: PPUSH
37427: CALL_OW 313
37431: PPUSH
37432: LD_INT 3
37434: PUSH
37435: LD_INT 60
37437: PUSH
37438: EMPTY
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 25
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 25
37460: PUSH
37461: LD_INT 16
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 72
37481: UNION
37482: ST_TO_ADDR
// if tmp then
37483: LD_VAR 0 4
37487: IFFALSE 37567
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37489: LD_ADDR_VAR 0 4
37493: PUSH
37494: LD_VAR 0 4
37498: PPUSH
37499: LD_INT 3
37501: PPUSH
37502: CALL 80697 0 2
37506: ST_TO_ADDR
// for j in tmp do
37507: LD_ADDR_VAR 0 2
37511: PUSH
37512: LD_VAR 0 4
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37561
// begin if IsInUnit ( j ) then
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 310
37529: IFFALSE 37540
// ComExit ( j ) ;
37531: LD_VAR 0 2
37535: PPUSH
37536: CALL 80780 0 1
// AddComCollect ( j , x , y ) ;
37540: LD_VAR 0 2
37544: PPUSH
37545: LD_VAR 0 6
37549: PPUSH
37550: LD_VAR 0 7
37554: PPUSH
37555: CALL_OW 177
// end ;
37559: GO 37517
37561: POP
37562: POP
// exit ;
37563: POP
37564: POP
37565: GO 37794
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37567: LD_ADDR_VAR 0 4
37571: PUSH
37572: LD_INT 22
37574: PUSH
37575: LD_VAR 0 5
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 91
37586: PUSH
37587: LD_VAR 0 8
37591: PUSH
37592: LD_INT 8
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 34
37605: PUSH
37606: LD_INT 12
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 34
37615: PUSH
37616: LD_INT 51
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 34
37625: PUSH
37626: LD_INT 32
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 34
37635: PUSH
37636: LD_INT 89
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: PPUSH
37655: CALL_OW 69
37659: ST_TO_ADDR
// if tmp then
37660: LD_VAR 0 4
37664: IFFALSE 37790
// begin for j in tmp do
37666: LD_ADDR_VAR 0 2
37670: PUSH
37671: LD_VAR 0 4
37675: PUSH
37676: FOR_IN
37677: IFFALSE 37788
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL_OW 262
37688: PUSH
37689: LD_INT 3
37691: EQUAL
37692: PUSH
37693: LD_VAR 0 2
37697: PPUSH
37698: CALL_OW 261
37702: PUSH
37703: LD_INT 20
37705: GREATER
37706: OR
37707: PUSH
37708: LD_VAR 0 2
37712: PPUSH
37713: CALL_OW 314
37717: NOT
37718: AND
37719: PUSH
37720: LD_VAR 0 2
37724: PPUSH
37725: CALL_OW 263
37729: PUSH
37730: LD_INT 1
37732: NONEQUAL
37733: PUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: CALL_OW 311
37743: OR
37744: AND
37745: IFFALSE 37786
// begin ComCollect ( j , x , y ) ;
37747: LD_VAR 0 2
37751: PPUSH
37752: LD_VAR 0 6
37756: PPUSH
37757: LD_VAR 0 7
37761: PPUSH
37762: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37766: LD_VAR 0 2
37770: PPUSH
37771: LD_VAR 0 8
37775: PPUSH
37776: CALL_OW 172
// exit ;
37780: POP
37781: POP
37782: POP
37783: POP
37784: GO 37794
// end ;
37786: GO 37676
37788: POP
37789: POP
// end ; end ;
37790: GO 37165
37792: POP
37793: POP
// end ; end_of_file
37794: PPOPN 9
37796: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37797: LD_INT 0
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 264
37812: PUSH
37813: LD_INT 91
37815: EQUAL
37816: IFFALSE 37888
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37818: LD_INT 68
37820: PPUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: CALL_OW 255
37830: PPUSH
37831: CALL_OW 321
37835: PUSH
37836: LD_INT 2
37838: EQUAL
37839: IFFALSE 37851
// eff := 70 else
37841: LD_ADDR_VAR 0 4
37845: PUSH
37846: LD_INT 70
37848: ST_TO_ADDR
37849: GO 37859
// eff := 30 ;
37851: LD_ADDR_VAR 0 4
37855: PUSH
37856: LD_INT 30
37858: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 250
37868: PPUSH
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 251
37878: PPUSH
37879: LD_VAR 0 4
37883: PPUSH
37884: CALL_OW 495
// end ; end ;
37888: LD_VAR 0 2
37892: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37893: LD_INT 0
37895: PPUSH
// end ;
37896: LD_VAR 0 4
37900: RET
// export function SOS_Command ( cmd ) ; begin
37901: LD_INT 0
37903: PPUSH
// end ;
37904: LD_VAR 0 2
37908: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37909: LD_INT 0
37911: PPUSH
// end ;
37912: LD_VAR 0 6
37916: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37917: LD_INT 0
37919: PPUSH
37920: PPUSH
// if not vehicle or not factory then
37921: LD_VAR 0 1
37925: NOT
37926: PUSH
37927: LD_VAR 0 2
37931: NOT
37932: OR
37933: IFFALSE 37937
// exit ;
37935: GO 38168
// if factoryWaypoints >= factory then
37937: LD_EXP 109
37941: PUSH
37942: LD_VAR 0 2
37946: GREATEREQUAL
37947: IFFALSE 38168
// if factoryWaypoints [ factory ] then
37949: LD_EXP 109
37953: PUSH
37954: LD_VAR 0 2
37958: ARRAY
37959: IFFALSE 38168
// begin if GetControl ( vehicle ) = control_manual then
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 263
37970: PUSH
37971: LD_INT 1
37973: EQUAL
37974: IFFALSE 38055
// begin driver := IsDrivenBy ( vehicle ) ;
37976: LD_ADDR_VAR 0 4
37980: PUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 311
37990: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37991: LD_VAR 0 4
37995: PPUSH
37996: LD_EXP 109
38000: PUSH
38001: LD_VAR 0 2
38005: ARRAY
38006: PUSH
38007: LD_INT 3
38009: ARRAY
38010: PPUSH
38011: LD_EXP 109
38015: PUSH
38016: LD_VAR 0 2
38020: ARRAY
38021: PUSH
38022: LD_INT 4
38024: ARRAY
38025: PPUSH
38026: CALL_OW 171
// AddComExitVehicle ( driver ) ;
38030: LD_VAR 0 4
38034: PPUSH
38035: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
38039: LD_VAR 0 4
38043: PPUSH
38044: LD_VAR 0 2
38048: PPUSH
38049: CALL_OW 180
// end else
38053: GO 38168
// if GetControl ( vehicle ) = control_remote then
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 263
38064: PUSH
38065: LD_INT 2
38067: EQUAL
38068: IFFALSE 38129
// begin wait ( 0 0$2 ) ;
38070: LD_INT 70
38072: PPUSH
38073: CALL_OW 67
// if Connect ( vehicle ) then
38077: LD_VAR 0 1
38081: PPUSH
38082: CALL 50999 0 1
38086: IFFALSE 38127
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38088: LD_VAR 0 1
38092: PPUSH
38093: LD_EXP 109
38097: PUSH
38098: LD_VAR 0 2
38102: ARRAY
38103: PUSH
38104: LD_INT 3
38106: ARRAY
38107: PPUSH
38108: LD_EXP 109
38112: PUSH
38113: LD_VAR 0 2
38117: ARRAY
38118: PUSH
38119: LD_INT 4
38121: ARRAY
38122: PPUSH
38123: CALL_OW 171
// end else
38127: GO 38168
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38129: LD_VAR 0 1
38133: PPUSH
38134: LD_EXP 109
38138: PUSH
38139: LD_VAR 0 2
38143: ARRAY
38144: PUSH
38145: LD_INT 3
38147: ARRAY
38148: PPUSH
38149: LD_EXP 109
38153: PUSH
38154: LD_VAR 0 2
38158: ARRAY
38159: PUSH
38160: LD_INT 4
38162: ARRAY
38163: PPUSH
38164: CALL_OW 171
// end ; end ;
38168: LD_VAR 0 3
38172: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38173: LD_INT 0
38175: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38176: LD_VAR 0 1
38180: PUSH
38181: LD_INT 250
38183: EQUAL
38184: PUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: CALL_OW 264
38194: PUSH
38195: LD_INT 81
38197: EQUAL
38198: AND
38199: IFFALSE 38220
// MinerPlaceMine ( unit , x , y ) ;
38201: LD_VAR 0 2
38205: PPUSH
38206: LD_VAR 0 4
38210: PPUSH
38211: LD_VAR 0 5
38215: PPUSH
38216: CALL 41210 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38220: LD_VAR 0 1
38224: PUSH
38225: LD_INT 251
38227: EQUAL
38228: PUSH
38229: LD_VAR 0 2
38233: PPUSH
38234: CALL_OW 264
38238: PUSH
38239: LD_INT 81
38241: EQUAL
38242: AND
38243: IFFALSE 38264
// MinerDetonateMine ( unit , x , y ) ;
38245: LD_VAR 0 2
38249: PPUSH
38250: LD_VAR 0 4
38254: PPUSH
38255: LD_VAR 0 5
38259: PPUSH
38260: CALL 41485 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38264: LD_VAR 0 1
38268: PUSH
38269: LD_INT 252
38271: EQUAL
38272: PUSH
38273: LD_VAR 0 2
38277: PPUSH
38278: CALL_OW 264
38282: PUSH
38283: LD_INT 81
38285: EQUAL
38286: AND
38287: IFFALSE 38308
// MinerCreateMinefield ( unit , x , y ) ;
38289: LD_VAR 0 2
38293: PPUSH
38294: LD_VAR 0 4
38298: PPUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: CALL 41902 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38308: LD_VAR 0 1
38312: PUSH
38313: LD_INT 253
38315: EQUAL
38316: PUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: CALL_OW 257
38326: PUSH
38327: LD_INT 5
38329: EQUAL
38330: AND
38331: IFFALSE 38352
// ComBinocular ( unit , x , y ) ;
38333: LD_VAR 0 2
38337: PPUSH
38338: LD_VAR 0 4
38342: PPUSH
38343: LD_VAR 0 5
38347: PPUSH
38348: CALL 42271 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38352: LD_VAR 0 1
38356: PUSH
38357: LD_INT 254
38359: EQUAL
38360: PUSH
38361: LD_VAR 0 2
38365: PPUSH
38366: CALL_OW 264
38370: PUSH
38371: LD_INT 99
38373: EQUAL
38374: AND
38375: PUSH
38376: LD_VAR 0 3
38380: PPUSH
38381: CALL_OW 263
38385: PUSH
38386: LD_INT 3
38388: EQUAL
38389: AND
38390: IFFALSE 38406
// HackDestroyVehicle ( unit , selectedUnit ) ;
38392: LD_VAR 0 2
38396: PPUSH
38397: LD_VAR 0 3
38401: PPUSH
38402: CALL 40574 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38406: LD_VAR 0 1
38410: PUSH
38411: LD_INT 255
38413: EQUAL
38414: PUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: CALL_OW 264
38424: PUSH
38425: LD_INT 14
38427: PUSH
38428: LD_INT 53
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: IN
38435: AND
38436: PUSH
38437: LD_VAR 0 4
38441: PPUSH
38442: LD_VAR 0 5
38446: PPUSH
38447: CALL_OW 488
38451: AND
38452: IFFALSE 38476
// CutTreeXYR ( unit , x , y , 12 ) ;
38454: LD_VAR 0 2
38458: PPUSH
38459: LD_VAR 0 4
38463: PPUSH
38464: LD_VAR 0 5
38468: PPUSH
38469: LD_INT 12
38471: PPUSH
38472: CALL 38571 0 4
// if cmd = 256 then
38476: LD_VAR 0 1
38480: PUSH
38481: LD_INT 256
38483: EQUAL
38484: IFFALSE 38505
// SetFactoryWaypoint ( unit , x , y ) ;
38486: LD_VAR 0 2
38490: PPUSH
38491: LD_VAR 0 4
38495: PPUSH
38496: LD_VAR 0 5
38500: PPUSH
38501: CALL 36486 0 3
// if cmd = 257 then
38505: LD_VAR 0 1
38509: PUSH
38510: LD_INT 257
38512: EQUAL
38513: IFFALSE 38534
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38515: LD_VAR 0 2
38519: PPUSH
38520: LD_VAR 0 4
38524: PPUSH
38525: LD_VAR 0 5
38529: PPUSH
38530: CALL 36848 0 3
// if cmd = 258 then
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 258
38541: EQUAL
38542: IFFALSE 38566
// BurnTreeXYR ( unit , x , y , 8 ) ;
38544: LD_VAR 0 2
38548: PPUSH
38549: LD_VAR 0 4
38553: PPUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: LD_INT 8
38561: PPUSH
38562: CALL 38965 0 4
// end ;
38566: LD_VAR 0 6
38570: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38571: LD_INT 0
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL_OW 302
38591: NOT
38592: PUSH
38593: LD_VAR 0 2
38597: PPUSH
38598: LD_VAR 0 3
38602: PPUSH
38603: CALL_OW 488
38607: NOT
38608: OR
38609: PUSH
38610: LD_VAR 0 4
38614: NOT
38615: OR
38616: IFFALSE 38620
// exit ;
38618: GO 38960
// list := [ ] ;
38620: LD_ADDR_VAR 0 13
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// if x - r < 0 then
38627: LD_VAR 0 2
38631: PUSH
38632: LD_VAR 0 4
38636: MINUS
38637: PUSH
38638: LD_INT 0
38640: LESS
38641: IFFALSE 38653
// min_x := 0 else
38643: LD_ADDR_VAR 0 7
38647: PUSH
38648: LD_INT 0
38650: ST_TO_ADDR
38651: GO 38669
// min_x := x - r ;
38653: LD_ADDR_VAR 0 7
38657: PUSH
38658: LD_VAR 0 2
38662: PUSH
38663: LD_VAR 0 4
38667: MINUS
38668: ST_TO_ADDR
// if y - r < 0 then
38669: LD_VAR 0 3
38673: PUSH
38674: LD_VAR 0 4
38678: MINUS
38679: PUSH
38680: LD_INT 0
38682: LESS
38683: IFFALSE 38695
// min_y := 0 else
38685: LD_ADDR_VAR 0 8
38689: PUSH
38690: LD_INT 0
38692: ST_TO_ADDR
38693: GO 38711
// min_y := y - r ;
38695: LD_ADDR_VAR 0 8
38699: PUSH
38700: LD_VAR 0 3
38704: PUSH
38705: LD_VAR 0 4
38709: MINUS
38710: ST_TO_ADDR
// max_x := x + r ;
38711: LD_ADDR_VAR 0 9
38715: PUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_VAR 0 4
38725: PLUS
38726: ST_TO_ADDR
// max_y := y + r ;
38727: LD_ADDR_VAR 0 10
38731: PUSH
38732: LD_VAR 0 3
38736: PUSH
38737: LD_VAR 0 4
38741: PLUS
38742: ST_TO_ADDR
// for _x = min_x to max_x do
38743: LD_ADDR_VAR 0 11
38747: PUSH
38748: DOUBLE
38749: LD_VAR 0 7
38753: DEC
38754: ST_TO_ADDR
38755: LD_VAR 0 9
38759: PUSH
38760: FOR_TO
38761: IFFALSE 38878
// for _y = min_y to max_y do
38763: LD_ADDR_VAR 0 12
38767: PUSH
38768: DOUBLE
38769: LD_VAR 0 8
38773: DEC
38774: ST_TO_ADDR
38775: LD_VAR 0 10
38779: PUSH
38780: FOR_TO
38781: IFFALSE 38874
// begin if not ValidHex ( _x , _y ) then
38783: LD_VAR 0 11
38787: PPUSH
38788: LD_VAR 0 12
38792: PPUSH
38793: CALL_OW 488
38797: NOT
38798: IFFALSE 38802
// continue ;
38800: GO 38780
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38802: LD_VAR 0 11
38806: PPUSH
38807: LD_VAR 0 12
38811: PPUSH
38812: CALL_OW 351
38816: PUSH
38817: LD_VAR 0 11
38821: PPUSH
38822: LD_VAR 0 12
38826: PPUSH
38827: CALL_OW 554
38831: AND
38832: IFFALSE 38872
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38834: LD_ADDR_VAR 0 13
38838: PUSH
38839: LD_VAR 0 13
38843: PPUSH
38844: LD_VAR 0 13
38848: PUSH
38849: LD_INT 1
38851: PLUS
38852: PPUSH
38853: LD_VAR 0 11
38857: PUSH
38858: LD_VAR 0 12
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PPUSH
38867: CALL_OW 2
38871: ST_TO_ADDR
// end ;
38872: GO 38780
38874: POP
38875: POP
38876: GO 38760
38878: POP
38879: POP
// if not list then
38880: LD_VAR 0 13
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 38960
// for i in list do
38889: LD_ADDR_VAR 0 6
38893: PUSH
38894: LD_VAR 0 13
38898: PUSH
38899: FOR_IN
38900: IFFALSE 38958
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38902: LD_VAR 0 1
38906: PPUSH
38907: LD_STRING M
38909: PUSH
38910: LD_VAR 0 6
38914: PUSH
38915: LD_INT 1
38917: ARRAY
38918: PUSH
38919: LD_VAR 0 6
38923: PUSH
38924: LD_INT 2
38926: ARRAY
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: PPUSH
38952: CALL_OW 447
38956: GO 38899
38958: POP
38959: POP
// end ;
38960: LD_VAR 0 5
38964: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38965: LD_INT 0
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 302
38986: NOT
38987: PUSH
38988: LD_VAR 0 2
38992: PPUSH
38993: LD_VAR 0 3
38997: PPUSH
38998: CALL_OW 488
39002: NOT
39003: OR
39004: PUSH
39005: LD_VAR 0 4
39009: NOT
39010: OR
39011: IFFALSE 39015
// exit ;
39013: GO 39528
// list := [ ] ;
39015: LD_ADDR_VAR 0 13
39019: PUSH
39020: EMPTY
39021: ST_TO_ADDR
// if x - r < 0 then
39022: LD_VAR 0 2
39026: PUSH
39027: LD_VAR 0 4
39031: MINUS
39032: PUSH
39033: LD_INT 0
39035: LESS
39036: IFFALSE 39048
// min_x := 0 else
39038: LD_ADDR_VAR 0 7
39042: PUSH
39043: LD_INT 0
39045: ST_TO_ADDR
39046: GO 39064
// min_x := x - r ;
39048: LD_ADDR_VAR 0 7
39052: PUSH
39053: LD_VAR 0 2
39057: PUSH
39058: LD_VAR 0 4
39062: MINUS
39063: ST_TO_ADDR
// if y - r < 0 then
39064: LD_VAR 0 3
39068: PUSH
39069: LD_VAR 0 4
39073: MINUS
39074: PUSH
39075: LD_INT 0
39077: LESS
39078: IFFALSE 39090
// min_y := 0 else
39080: LD_ADDR_VAR 0 8
39084: PUSH
39085: LD_INT 0
39087: ST_TO_ADDR
39088: GO 39106
// min_y := y - r ;
39090: LD_ADDR_VAR 0 8
39094: PUSH
39095: LD_VAR 0 3
39099: PUSH
39100: LD_VAR 0 4
39104: MINUS
39105: ST_TO_ADDR
// max_x := x + r ;
39106: LD_ADDR_VAR 0 9
39110: PUSH
39111: LD_VAR 0 2
39115: PUSH
39116: LD_VAR 0 4
39120: PLUS
39121: ST_TO_ADDR
// max_y := y + r ;
39122: LD_ADDR_VAR 0 10
39126: PUSH
39127: LD_VAR 0 3
39131: PUSH
39132: LD_VAR 0 4
39136: PLUS
39137: ST_TO_ADDR
// for _x = min_x to max_x do
39138: LD_ADDR_VAR 0 11
39142: PUSH
39143: DOUBLE
39144: LD_VAR 0 7
39148: DEC
39149: ST_TO_ADDR
39150: LD_VAR 0 9
39154: PUSH
39155: FOR_TO
39156: IFFALSE 39273
// for _y = min_y to max_y do
39158: LD_ADDR_VAR 0 12
39162: PUSH
39163: DOUBLE
39164: LD_VAR 0 8
39168: DEC
39169: ST_TO_ADDR
39170: LD_VAR 0 10
39174: PUSH
39175: FOR_TO
39176: IFFALSE 39269
// begin if not ValidHex ( _x , _y ) then
39178: LD_VAR 0 11
39182: PPUSH
39183: LD_VAR 0 12
39187: PPUSH
39188: CALL_OW 488
39192: NOT
39193: IFFALSE 39197
// continue ;
39195: GO 39175
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39197: LD_VAR 0 11
39201: PPUSH
39202: LD_VAR 0 12
39206: PPUSH
39207: CALL_OW 351
39211: PUSH
39212: LD_VAR 0 11
39216: PPUSH
39217: LD_VAR 0 12
39221: PPUSH
39222: CALL_OW 554
39226: AND
39227: IFFALSE 39267
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39229: LD_ADDR_VAR 0 13
39233: PUSH
39234: LD_VAR 0 13
39238: PPUSH
39239: LD_VAR 0 13
39243: PUSH
39244: LD_INT 1
39246: PLUS
39247: PPUSH
39248: LD_VAR 0 11
39252: PUSH
39253: LD_VAR 0 12
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PPUSH
39262: CALL_OW 2
39266: ST_TO_ADDR
// end ;
39267: GO 39175
39269: POP
39270: POP
39271: GO 39155
39273: POP
39274: POP
// if not list then
39275: LD_VAR 0 13
39279: NOT
39280: IFFALSE 39284
// exit ;
39282: GO 39528
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39284: LD_ADDR_VAR 0 13
39288: PUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: LD_VAR 0 13
39298: PPUSH
39299: LD_INT 1
39301: PPUSH
39302: LD_INT 1
39304: PPUSH
39305: CALL 48141 0 4
39309: ST_TO_ADDR
// ComStop ( flame ) ;
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 141
// for i in list do
39319: LD_ADDR_VAR 0 6
39323: PUSH
39324: LD_VAR 0 13
39328: PUSH
39329: FOR_IN
39330: IFFALSE 39361
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39332: LD_VAR 0 1
39336: PPUSH
39337: LD_VAR 0 6
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_VAR 0 6
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 176
39359: GO 39329
39361: POP
39362: POP
// repeat wait ( 0 0$1 ) ;
39363: LD_INT 35
39365: PPUSH
39366: CALL_OW 67
// task := GetTaskList ( flame ) ;
39370: LD_ADDR_VAR 0 14
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 437
39384: ST_TO_ADDR
// if not task then
39385: LD_VAR 0 14
39389: NOT
39390: IFFALSE 39394
// exit ;
39392: GO 39528
// if task [ 1 ] [ 1 ] <> | then
39394: LD_VAR 0 14
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PUSH
39403: LD_INT 1
39405: ARRAY
39406: PUSH
39407: LD_STRING |
39409: NONEQUAL
39410: IFFALSE 39414
// exit ;
39412: GO 39528
// _x := task [ 1 ] [ 2 ] ;
39414: LD_ADDR_VAR 0 11
39418: PUSH
39419: LD_VAR 0 14
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PUSH
39428: LD_INT 2
39430: ARRAY
39431: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39432: LD_ADDR_VAR 0 12
39436: PUSH
39437: LD_VAR 0 14
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PUSH
39446: LD_INT 3
39448: ARRAY
39449: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39450: LD_VAR 0 11
39454: PPUSH
39455: LD_VAR 0 12
39459: PPUSH
39460: CALL_OW 351
39464: NOT
39465: PUSH
39466: LD_VAR 0 11
39470: PPUSH
39471: LD_VAR 0 12
39475: PPUSH
39476: CALL_OW 554
39480: NOT
39481: OR
39482: IFFALSE 39516
// begin task := Delete ( task , 1 ) ;
39484: LD_ADDR_VAR 0 14
39488: PUSH
39489: LD_VAR 0 14
39493: PPUSH
39494: LD_INT 1
39496: PPUSH
39497: CALL_OW 3
39501: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39502: LD_VAR 0 1
39506: PPUSH
39507: LD_VAR 0 14
39511: PPUSH
39512: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL_OW 314
39525: NOT
39526: IFFALSE 39363
// end ;
39528: LD_VAR 0 5
39532: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39533: LD_EXP 112
39537: NOT
39538: IFFALSE 39588
39540: GO 39542
39542: DISABLE
// begin initHack := true ;
39543: LD_ADDR_EXP 112
39547: PUSH
39548: LD_INT 1
39550: ST_TO_ADDR
// hackTanks := [ ] ;
39551: LD_ADDR_EXP 113
39555: PUSH
39556: EMPTY
39557: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39558: LD_ADDR_EXP 114
39562: PUSH
39563: EMPTY
39564: ST_TO_ADDR
// hackLimit := 3 ;
39565: LD_ADDR_EXP 115
39569: PUSH
39570: LD_INT 3
39572: ST_TO_ADDR
// hackDist := 12 ;
39573: LD_ADDR_EXP 116
39577: PUSH
39578: LD_INT 12
39580: ST_TO_ADDR
// hackCounter := [ ] ;
39581: LD_ADDR_EXP 117
39585: PUSH
39586: EMPTY
39587: ST_TO_ADDR
// end ;
39588: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39589: LD_EXP 112
39593: PUSH
39594: LD_INT 34
39596: PUSH
39597: LD_INT 99
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PPUSH
39604: CALL_OW 69
39608: AND
39609: IFFALSE 39862
39611: GO 39613
39613: DISABLE
39614: LD_INT 0
39616: PPUSH
39617: PPUSH
// begin enable ;
39618: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39619: LD_ADDR_VAR 0 1
39623: PUSH
39624: LD_INT 34
39626: PUSH
39627: LD_INT 99
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PPUSH
39634: CALL_OW 69
39638: PUSH
39639: FOR_IN
39640: IFFALSE 39860
// begin if not i in hackTanks then
39642: LD_VAR 0 1
39646: PUSH
39647: LD_EXP 113
39651: IN
39652: NOT
39653: IFFALSE 39736
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39655: LD_ADDR_EXP 113
39659: PUSH
39660: LD_EXP 113
39664: PPUSH
39665: LD_EXP 113
39669: PUSH
39670: LD_INT 1
39672: PLUS
39673: PPUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 1
39683: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39684: LD_ADDR_EXP 114
39688: PUSH
39689: LD_EXP 114
39693: PPUSH
39694: LD_EXP 114
39698: PUSH
39699: LD_INT 1
39701: PLUS
39702: PPUSH
39703: EMPTY
39704: PPUSH
39705: CALL_OW 1
39709: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39710: LD_ADDR_EXP 117
39714: PUSH
39715: LD_EXP 117
39719: PPUSH
39720: LD_EXP 117
39724: PUSH
39725: LD_INT 1
39727: PLUS
39728: PPUSH
39729: EMPTY
39730: PPUSH
39731: CALL_OW 1
39735: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 302
39745: NOT
39746: IFFALSE 39759
// begin HackUnlinkAll ( i ) ;
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL 39865 0 1
// continue ;
39757: GO 39639
// end ; HackCheckCapturedStatus ( i ) ;
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL 40308 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39768: LD_ADDR_VAR 0 2
39772: PUSH
39773: LD_INT 81
39775: PUSH
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 255
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 33
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 91
39802: PUSH
39803: LD_VAR 0 1
39807: PUSH
39808: LD_EXP 116
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 50
39820: PUSH
39821: EMPTY
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: PPUSH
39830: CALL_OW 69
39834: ST_TO_ADDR
// if not tmp then
39835: LD_VAR 0 2
39839: NOT
39840: IFFALSE 39844
// continue ;
39842: GO 39639
// HackLink ( i , tmp ) ;
39844: LD_VAR 0 1
39848: PPUSH
39849: LD_VAR 0 2
39853: PPUSH
39854: CALL 40001 0 2
// end ;
39858: GO 39639
39860: POP
39861: POP
// end ;
39862: PPOPN 2
39864: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
// if not hack in hackTanks then
39870: LD_VAR 0 1
39874: PUSH
39875: LD_EXP 113
39879: IN
39880: NOT
39881: IFFALSE 39885
// exit ;
39883: GO 39996
// index := GetElementIndex ( hackTanks , hack ) ;
39885: LD_ADDR_VAR 0 4
39889: PUSH
39890: LD_EXP 113
39894: PPUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL 47438 0 2
39904: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39905: LD_EXP 114
39909: PUSH
39910: LD_VAR 0 4
39914: ARRAY
39915: IFFALSE 39996
// begin for i in hackTanksCaptured [ index ] do
39917: LD_ADDR_VAR 0 3
39921: PUSH
39922: LD_EXP 114
39926: PUSH
39927: LD_VAR 0 4
39931: ARRAY
39932: PUSH
39933: FOR_IN
39934: IFFALSE 39960
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39936: LD_VAR 0 3
39940: PUSH
39941: LD_INT 1
39943: ARRAY
39944: PPUSH
39945: LD_VAR 0 3
39949: PUSH
39950: LD_INT 2
39952: ARRAY
39953: PPUSH
39954: CALL_OW 235
39958: GO 39933
39960: POP
39961: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39962: LD_ADDR_EXP 114
39966: PUSH
39967: LD_EXP 114
39971: PPUSH
39972: LD_VAR 0 4
39976: PPUSH
39977: EMPTY
39978: PPUSH
39979: CALL_OW 1
39983: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39984: LD_VAR 0 1
39988: PPUSH
39989: LD_INT 0
39991: PPUSH
39992: CALL_OW 505
// end ; end ;
39996: LD_VAR 0 2
40000: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40001: LD_INT 0
40003: PPUSH
40004: PPUSH
40005: PPUSH
// if not hack in hackTanks or not vehicles then
40006: LD_VAR 0 1
40010: PUSH
40011: LD_EXP 113
40015: IN
40016: NOT
40017: PUSH
40018: LD_VAR 0 2
40022: NOT
40023: OR
40024: IFFALSE 40028
// exit ;
40026: GO 40303
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40028: LD_ADDR_VAR 0 2
40032: PUSH
40033: LD_VAR 0 1
40037: PPUSH
40038: LD_VAR 0 2
40042: PPUSH
40043: LD_INT 1
40045: PPUSH
40046: LD_INT 1
40048: PPUSH
40049: CALL 48088 0 4
40053: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40054: LD_ADDR_VAR 0 5
40058: PUSH
40059: LD_EXP 113
40063: PPUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL 47438 0 2
40073: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40074: LD_EXP 114
40078: PUSH
40079: LD_VAR 0 5
40083: ARRAY
40084: PUSH
40085: LD_EXP 115
40089: LESS
40090: IFFALSE 40279
// begin for i := 1 to vehicles do
40092: LD_ADDR_VAR 0 4
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_VAR 0 2
40106: PUSH
40107: FOR_TO
40108: IFFALSE 40277
// begin if hackTanksCaptured [ index ] = hackLimit then
40110: LD_EXP 114
40114: PUSH
40115: LD_VAR 0 5
40119: ARRAY
40120: PUSH
40121: LD_EXP 115
40125: EQUAL
40126: IFFALSE 40130
// break ;
40128: GO 40277
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40130: LD_ADDR_EXP 117
40134: PUSH
40135: LD_EXP 117
40139: PPUSH
40140: LD_VAR 0 5
40144: PPUSH
40145: LD_EXP 117
40149: PUSH
40150: LD_VAR 0 5
40154: ARRAY
40155: PUSH
40156: LD_INT 1
40158: PLUS
40159: PPUSH
40160: CALL_OW 1
40164: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40165: LD_ADDR_EXP 114
40169: PUSH
40170: LD_EXP 114
40174: PPUSH
40175: LD_VAR 0 5
40179: PUSH
40180: LD_EXP 114
40184: PUSH
40185: LD_VAR 0 5
40189: ARRAY
40190: PUSH
40191: LD_INT 1
40193: PLUS
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PPUSH
40199: LD_VAR 0 2
40203: PUSH
40204: LD_VAR 0 4
40208: ARRAY
40209: PUSH
40210: LD_VAR 0 2
40214: PUSH
40215: LD_VAR 0 4
40219: ARRAY
40220: PPUSH
40221: CALL_OW 255
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PPUSH
40230: CALL 47653 0 3
40234: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40235: LD_VAR 0 2
40239: PUSH
40240: LD_VAR 0 4
40244: ARRAY
40245: PPUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 255
40255: PPUSH
40256: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40260: LD_VAR 0 2
40264: PUSH
40265: LD_VAR 0 4
40269: ARRAY
40270: PPUSH
40271: CALL_OW 141
// end ;
40275: GO 40107
40277: POP
40278: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40279: LD_VAR 0 1
40283: PPUSH
40284: LD_EXP 114
40288: PUSH
40289: LD_VAR 0 5
40293: ARRAY
40294: PUSH
40295: LD_INT 0
40297: PLUS
40298: PPUSH
40299: CALL_OW 505
// end ;
40303: LD_VAR 0 3
40307: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40308: LD_INT 0
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
// if not hack in hackTanks then
40314: LD_VAR 0 1
40318: PUSH
40319: LD_EXP 113
40323: IN
40324: NOT
40325: IFFALSE 40329
// exit ;
40327: GO 40569
// index := GetElementIndex ( hackTanks , hack ) ;
40329: LD_ADDR_VAR 0 4
40333: PUSH
40334: LD_EXP 113
40338: PPUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL 47438 0 2
40348: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: DOUBLE
40355: LD_EXP 114
40359: PUSH
40360: LD_VAR 0 4
40364: ARRAY
40365: INC
40366: ST_TO_ADDR
40367: LD_INT 1
40369: PUSH
40370: FOR_DOWNTO
40371: IFFALSE 40543
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40373: LD_ADDR_VAR 0 5
40377: PUSH
40378: LD_EXP 114
40382: PUSH
40383: LD_VAR 0 4
40387: ARRAY
40388: PUSH
40389: LD_VAR 0 3
40393: ARRAY
40394: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40395: LD_VAR 0 5
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: PPUSH
40404: CALL_OW 302
40408: NOT
40409: PUSH
40410: LD_VAR 0 5
40414: PUSH
40415: LD_INT 1
40417: ARRAY
40418: PPUSH
40419: CALL_OW 255
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: CALL_OW 255
40433: NONEQUAL
40434: OR
40435: IFFALSE 40541
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40437: LD_VAR 0 5
40441: PUSH
40442: LD_INT 1
40444: ARRAY
40445: PPUSH
40446: CALL_OW 305
40450: PUSH
40451: LD_VAR 0 5
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: PPUSH
40460: CALL_OW 255
40464: PUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: CALL_OW 255
40474: EQUAL
40475: AND
40476: IFFALSE 40500
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40478: LD_VAR 0 5
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: PPUSH
40487: LD_VAR 0 5
40491: PUSH
40492: LD_INT 2
40494: ARRAY
40495: PPUSH
40496: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40500: LD_ADDR_EXP 114
40504: PUSH
40505: LD_EXP 114
40509: PPUSH
40510: LD_VAR 0 4
40514: PPUSH
40515: LD_EXP 114
40519: PUSH
40520: LD_VAR 0 4
40524: ARRAY
40525: PPUSH
40526: LD_VAR 0 3
40530: PPUSH
40531: CALL_OW 3
40535: PPUSH
40536: CALL_OW 1
40540: ST_TO_ADDR
// end ; end ;
40541: GO 40370
40543: POP
40544: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40545: LD_VAR 0 1
40549: PPUSH
40550: LD_EXP 114
40554: PUSH
40555: LD_VAR 0 4
40559: ARRAY
40560: PUSH
40561: LD_INT 0
40563: PLUS
40564: PPUSH
40565: CALL_OW 505
// end ;
40569: LD_VAR 0 2
40573: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
// if not hack in hackTanks then
40580: LD_VAR 0 1
40584: PUSH
40585: LD_EXP 113
40589: IN
40590: NOT
40591: IFFALSE 40595
// exit ;
40593: GO 40680
// index := GetElementIndex ( hackTanks , hack ) ;
40595: LD_ADDR_VAR 0 5
40599: PUSH
40600: LD_EXP 113
40604: PPUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL 47438 0 2
40614: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: DOUBLE
40621: LD_INT 1
40623: DEC
40624: ST_TO_ADDR
40625: LD_EXP 114
40629: PUSH
40630: LD_VAR 0 5
40634: ARRAY
40635: PUSH
40636: FOR_TO
40637: IFFALSE 40678
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40639: LD_EXP 114
40643: PUSH
40644: LD_VAR 0 5
40648: ARRAY
40649: PUSH
40650: LD_VAR 0 4
40654: ARRAY
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PUSH
40660: LD_VAR 0 2
40664: EQUAL
40665: IFFALSE 40676
// KillUnit ( vehicle ) ;
40667: LD_VAR 0 2
40671: PPUSH
40672: CALL_OW 66
40676: GO 40636
40678: POP
40679: POP
// end ;
40680: LD_VAR 0 3
40684: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40685: LD_EXP 118
40689: NOT
40690: IFFALSE 40725
40692: GO 40694
40694: DISABLE
// begin initMiner := true ;
40695: LD_ADDR_EXP 118
40699: PUSH
40700: LD_INT 1
40702: ST_TO_ADDR
// minersList := [ ] ;
40703: LD_ADDR_EXP 119
40707: PUSH
40708: EMPTY
40709: ST_TO_ADDR
// minerMinesList := [ ] ;
40710: LD_ADDR_EXP 120
40714: PUSH
40715: EMPTY
40716: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40717: LD_ADDR_EXP 121
40721: PUSH
40722: LD_INT 5
40724: ST_TO_ADDR
// end ;
40725: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40726: LD_EXP 118
40730: PUSH
40731: LD_INT 34
40733: PUSH
40734: LD_INT 81
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PPUSH
40741: CALL_OW 69
40745: AND
40746: IFFALSE 41207
40748: GO 40750
40750: DISABLE
40751: LD_INT 0
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
// begin enable ;
40757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40758: LD_ADDR_VAR 0 1
40762: PUSH
40763: LD_INT 34
40765: PUSH
40766: LD_INT 81
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PPUSH
40773: CALL_OW 69
40777: PUSH
40778: FOR_IN
40779: IFFALSE 40851
// begin if not i in minersList then
40781: LD_VAR 0 1
40785: PUSH
40786: LD_EXP 119
40790: IN
40791: NOT
40792: IFFALSE 40849
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40794: LD_ADDR_EXP 119
40798: PUSH
40799: LD_EXP 119
40803: PPUSH
40804: LD_EXP 119
40808: PUSH
40809: LD_INT 1
40811: PLUS
40812: PPUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 1
40822: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40823: LD_ADDR_EXP 120
40827: PUSH
40828: LD_EXP 120
40832: PPUSH
40833: LD_EXP 120
40837: PUSH
40838: LD_INT 1
40840: PLUS
40841: PPUSH
40842: EMPTY
40843: PPUSH
40844: CALL_OW 1
40848: ST_TO_ADDR
// end end ;
40849: GO 40778
40851: POP
40852: POP
// for i := minerMinesList downto 1 do
40853: LD_ADDR_VAR 0 1
40857: PUSH
40858: DOUBLE
40859: LD_EXP 120
40863: INC
40864: ST_TO_ADDR
40865: LD_INT 1
40867: PUSH
40868: FOR_DOWNTO
40869: IFFALSE 41205
// begin if IsLive ( minersList [ i ] ) then
40871: LD_EXP 119
40875: PUSH
40876: LD_VAR 0 1
40880: ARRAY
40881: PPUSH
40882: CALL_OW 300
40886: IFFALSE 40914
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40888: LD_EXP 119
40892: PUSH
40893: LD_VAR 0 1
40897: ARRAY
40898: PPUSH
40899: LD_EXP 120
40903: PUSH
40904: LD_VAR 0 1
40908: ARRAY
40909: PPUSH
40910: CALL_OW 505
// if not minerMinesList [ i ] then
40914: LD_EXP 120
40918: PUSH
40919: LD_VAR 0 1
40923: ARRAY
40924: NOT
40925: IFFALSE 40929
// continue ;
40927: GO 40868
// for j := minerMinesList [ i ] downto 1 do
40929: LD_ADDR_VAR 0 2
40933: PUSH
40934: DOUBLE
40935: LD_EXP 120
40939: PUSH
40940: LD_VAR 0 1
40944: ARRAY
40945: INC
40946: ST_TO_ADDR
40947: LD_INT 1
40949: PUSH
40950: FOR_DOWNTO
40951: IFFALSE 41201
// begin side := GetSide ( minersList [ i ] ) ;
40953: LD_ADDR_VAR 0 3
40957: PUSH
40958: LD_EXP 119
40962: PUSH
40963: LD_VAR 0 1
40967: ARRAY
40968: PPUSH
40969: CALL_OW 255
40973: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40974: LD_ADDR_VAR 0 4
40978: PUSH
40979: LD_EXP 120
40983: PUSH
40984: LD_VAR 0 1
40988: ARRAY
40989: PUSH
40990: LD_VAR 0 2
40994: ARRAY
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: LD_EXP 120
41004: PUSH
41005: LD_VAR 0 1
41009: ARRAY
41010: PUSH
41011: LD_VAR 0 2
41015: ARRAY
41016: PUSH
41017: LD_INT 2
41019: ARRAY
41020: PPUSH
41021: CALL_OW 428
41025: ST_TO_ADDR
// if not tmp then
41026: LD_VAR 0 4
41030: NOT
41031: IFFALSE 41035
// continue ;
41033: GO 40950
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41035: LD_VAR 0 4
41039: PUSH
41040: LD_INT 81
41042: PUSH
41043: LD_VAR 0 3
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PPUSH
41052: CALL_OW 69
41056: IN
41057: PUSH
41058: LD_EXP 120
41062: PUSH
41063: LD_VAR 0 1
41067: ARRAY
41068: PUSH
41069: LD_VAR 0 2
41073: ARRAY
41074: PUSH
41075: LD_INT 1
41077: ARRAY
41078: PPUSH
41079: LD_EXP 120
41083: PUSH
41084: LD_VAR 0 1
41088: ARRAY
41089: PUSH
41090: LD_VAR 0 2
41094: ARRAY
41095: PUSH
41096: LD_INT 2
41098: ARRAY
41099: PPUSH
41100: CALL_OW 458
41104: AND
41105: IFFALSE 41199
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41107: LD_EXP 120
41111: PUSH
41112: LD_VAR 0 1
41116: ARRAY
41117: PUSH
41118: LD_VAR 0 2
41122: ARRAY
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_EXP 120
41132: PUSH
41133: LD_VAR 0 1
41137: ARRAY
41138: PUSH
41139: LD_VAR 0 2
41143: ARRAY
41144: PUSH
41145: LD_INT 2
41147: ARRAY
41148: PPUSH
41149: LD_VAR 0 3
41153: PPUSH
41154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41158: LD_ADDR_EXP 120
41162: PUSH
41163: LD_EXP 120
41167: PPUSH
41168: LD_VAR 0 1
41172: PPUSH
41173: LD_EXP 120
41177: PUSH
41178: LD_VAR 0 1
41182: ARRAY
41183: PPUSH
41184: LD_VAR 0 2
41188: PPUSH
41189: CALL_OW 3
41193: PPUSH
41194: CALL_OW 1
41198: ST_TO_ADDR
// end ; end ;
41199: GO 40950
41201: POP
41202: POP
// end ;
41203: GO 40868
41205: POP
41206: POP
// end ;
41207: PPOPN 4
41209: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41210: LD_INT 0
41212: PPUSH
41213: PPUSH
// result := false ;
41214: LD_ADDR_VAR 0 4
41218: PUSH
41219: LD_INT 0
41221: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL_OW 264
41231: PUSH
41232: LD_INT 81
41234: EQUAL
41235: NOT
41236: IFFALSE 41240
// exit ;
41238: GO 41480
// index := GetElementIndex ( minersList , unit ) ;
41240: LD_ADDR_VAR 0 5
41244: PUSH
41245: LD_EXP 119
41249: PPUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL 47438 0 2
41259: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41260: LD_EXP 120
41264: PUSH
41265: LD_VAR 0 5
41269: ARRAY
41270: PUSH
41271: LD_EXP 121
41275: GREATEREQUAL
41276: IFFALSE 41280
// exit ;
41278: GO 41480
// ComMoveXY ( unit , x , y ) ;
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_VAR 0 2
41289: PPUSH
41290: LD_VAR 0 3
41294: PPUSH
41295: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41299: LD_INT 35
41301: PPUSH
41302: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_VAR 0 2
41315: PPUSH
41316: LD_VAR 0 3
41320: PPUSH
41321: CALL 79179 0 3
41325: NOT
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 314
41336: AND
41337: IFFALSE 41341
// exit ;
41339: GO 41480
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41341: LD_VAR 0 2
41345: PPUSH
41346: LD_VAR 0 3
41350: PPUSH
41351: CALL_OW 428
41355: PUSH
41356: LD_VAR 0 1
41360: EQUAL
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: CALL_OW 314
41371: NOT
41372: AND
41373: IFFALSE 41299
// PlaySoundXY ( x , y , PlantMine ) ;
41375: LD_VAR 0 2
41379: PPUSH
41380: LD_VAR 0 3
41384: PPUSH
41385: LD_STRING PlantMine
41387: PPUSH
41388: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41392: LD_VAR 0 2
41396: PPUSH
41397: LD_VAR 0 3
41401: PPUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 255
41411: PPUSH
41412: LD_INT 0
41414: PPUSH
41415: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41419: LD_ADDR_EXP 120
41423: PUSH
41424: LD_EXP 120
41428: PPUSH
41429: LD_VAR 0 5
41433: PUSH
41434: LD_EXP 120
41438: PUSH
41439: LD_VAR 0 5
41443: ARRAY
41444: PUSH
41445: LD_INT 1
41447: PLUS
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PPUSH
41453: LD_VAR 0 2
41457: PUSH
41458: LD_VAR 0 3
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PPUSH
41467: CALL 47653 0 3
41471: ST_TO_ADDR
// result := true ;
41472: LD_ADDR_VAR 0 4
41476: PUSH
41477: LD_INT 1
41479: ST_TO_ADDR
// end ;
41480: LD_VAR 0 4
41484: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41485: LD_INT 0
41487: PPUSH
41488: PPUSH
41489: PPUSH
// if not unit in minersList then
41490: LD_VAR 0 1
41494: PUSH
41495: LD_EXP 119
41499: IN
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 41897
// index := GetElementIndex ( minersList , unit ) ;
41505: LD_ADDR_VAR 0 6
41509: PUSH
41510: LD_EXP 119
41514: PPUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL 47438 0 2
41524: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41525: LD_ADDR_VAR 0 5
41529: PUSH
41530: DOUBLE
41531: LD_EXP 120
41535: PUSH
41536: LD_VAR 0 6
41540: ARRAY
41541: INC
41542: ST_TO_ADDR
41543: LD_INT 1
41545: PUSH
41546: FOR_DOWNTO
41547: IFFALSE 41708
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41549: LD_EXP 120
41553: PUSH
41554: LD_VAR 0 6
41558: ARRAY
41559: PUSH
41560: LD_VAR 0 5
41564: ARRAY
41565: PUSH
41566: LD_INT 1
41568: ARRAY
41569: PUSH
41570: LD_VAR 0 2
41574: EQUAL
41575: PUSH
41576: LD_EXP 120
41580: PUSH
41581: LD_VAR 0 6
41585: ARRAY
41586: PUSH
41587: LD_VAR 0 5
41591: ARRAY
41592: PUSH
41593: LD_INT 2
41595: ARRAY
41596: PUSH
41597: LD_VAR 0 3
41601: EQUAL
41602: AND
41603: IFFALSE 41706
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41605: LD_EXP 120
41609: PUSH
41610: LD_VAR 0 6
41614: ARRAY
41615: PUSH
41616: LD_VAR 0 5
41620: ARRAY
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PPUSH
41626: LD_EXP 120
41630: PUSH
41631: LD_VAR 0 6
41635: ARRAY
41636: PUSH
41637: LD_VAR 0 5
41641: ARRAY
41642: PUSH
41643: LD_INT 2
41645: ARRAY
41646: PPUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 255
41656: PPUSH
41657: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41661: LD_ADDR_EXP 120
41665: PUSH
41666: LD_EXP 120
41670: PPUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: LD_EXP 120
41680: PUSH
41681: LD_VAR 0 6
41685: ARRAY
41686: PPUSH
41687: LD_VAR 0 5
41691: PPUSH
41692: CALL_OW 3
41696: PPUSH
41697: CALL_OW 1
41701: ST_TO_ADDR
// exit ;
41702: POP
41703: POP
41704: GO 41897
// end ; end ;
41706: GO 41546
41708: POP
41709: POP
// for i := minerMinesList [ index ] downto 1 do
41710: LD_ADDR_VAR 0 5
41714: PUSH
41715: DOUBLE
41716: LD_EXP 120
41720: PUSH
41721: LD_VAR 0 6
41725: ARRAY
41726: INC
41727: ST_TO_ADDR
41728: LD_INT 1
41730: PUSH
41731: FOR_DOWNTO
41732: IFFALSE 41895
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41734: LD_EXP 120
41738: PUSH
41739: LD_VAR 0 6
41743: ARRAY
41744: PUSH
41745: LD_VAR 0 5
41749: ARRAY
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: LD_EXP 120
41759: PUSH
41760: LD_VAR 0 6
41764: ARRAY
41765: PUSH
41766: LD_VAR 0 5
41770: ARRAY
41771: PUSH
41772: LD_INT 2
41774: ARRAY
41775: PPUSH
41776: LD_VAR 0 2
41780: PPUSH
41781: LD_VAR 0 3
41785: PPUSH
41786: CALL_OW 298
41790: PUSH
41791: LD_INT 6
41793: LESS
41794: IFFALSE 41893
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41796: LD_EXP 120
41800: PUSH
41801: LD_VAR 0 6
41805: ARRAY
41806: PUSH
41807: LD_VAR 0 5
41811: ARRAY
41812: PUSH
41813: LD_INT 1
41815: ARRAY
41816: PPUSH
41817: LD_EXP 120
41821: PUSH
41822: LD_VAR 0 6
41826: ARRAY
41827: PUSH
41828: LD_VAR 0 5
41832: ARRAY
41833: PUSH
41834: LD_INT 2
41836: ARRAY
41837: PPUSH
41838: LD_VAR 0 1
41842: PPUSH
41843: CALL_OW 255
41847: PPUSH
41848: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41852: LD_ADDR_EXP 120
41856: PUSH
41857: LD_EXP 120
41861: PPUSH
41862: LD_VAR 0 6
41866: PPUSH
41867: LD_EXP 120
41871: PUSH
41872: LD_VAR 0 6
41876: ARRAY
41877: PPUSH
41878: LD_VAR 0 5
41882: PPUSH
41883: CALL_OW 3
41887: PPUSH
41888: CALL_OW 1
41892: ST_TO_ADDR
// end ; end ;
41893: GO 41731
41895: POP
41896: POP
// end ;
41897: LD_VAR 0 4
41901: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41902: LD_INT 0
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41913: LD_VAR 0 1
41917: PPUSH
41918: CALL_OW 264
41922: PUSH
41923: LD_INT 81
41925: EQUAL
41926: NOT
41927: PUSH
41928: LD_VAR 0 1
41932: PUSH
41933: LD_EXP 119
41937: IN
41938: NOT
41939: OR
41940: IFFALSE 41944
// exit ;
41942: GO 42266
// index := GetElementIndex ( minersList , unit ) ;
41944: LD_ADDR_VAR 0 6
41948: PUSH
41949: LD_EXP 119
41953: PPUSH
41954: LD_VAR 0 1
41958: PPUSH
41959: CALL 47438 0 2
41963: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41964: LD_ADDR_VAR 0 8
41968: PUSH
41969: LD_EXP 121
41973: PUSH
41974: LD_EXP 120
41978: PUSH
41979: LD_VAR 0 6
41983: ARRAY
41984: MINUS
41985: ST_TO_ADDR
// if not minesFreeAmount then
41986: LD_VAR 0 8
41990: NOT
41991: IFFALSE 41995
// exit ;
41993: GO 42266
// tmp := [ ] ;
41995: LD_ADDR_VAR 0 7
41999: PUSH
42000: EMPTY
42001: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42002: LD_ADDR_VAR 0 5
42006: PUSH
42007: DOUBLE
42008: LD_INT 1
42010: DEC
42011: ST_TO_ADDR
42012: LD_VAR 0 8
42016: PUSH
42017: FOR_TO
42018: IFFALSE 42213
// begin _d := rand ( 0 , 5 ) ;
42020: LD_ADDR_VAR 0 11
42024: PUSH
42025: LD_INT 0
42027: PPUSH
42028: LD_INT 5
42030: PPUSH
42031: CALL_OW 12
42035: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42036: LD_ADDR_VAR 0 12
42040: PUSH
42041: LD_INT 2
42043: PPUSH
42044: LD_INT 6
42046: PPUSH
42047: CALL_OW 12
42051: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42052: LD_ADDR_VAR 0 9
42056: PUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: LD_VAR 0 11
42066: PPUSH
42067: LD_VAR 0 12
42071: PPUSH
42072: CALL_OW 272
42076: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42077: LD_ADDR_VAR 0 10
42081: PUSH
42082: LD_VAR 0 3
42086: PPUSH
42087: LD_VAR 0 11
42091: PPUSH
42092: LD_VAR 0 12
42096: PPUSH
42097: CALL_OW 273
42101: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42102: LD_VAR 0 9
42106: PPUSH
42107: LD_VAR 0 10
42111: PPUSH
42112: CALL_OW 488
42116: PUSH
42117: LD_VAR 0 9
42121: PUSH
42122: LD_VAR 0 10
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_VAR 0 7
42135: IN
42136: NOT
42137: AND
42138: PUSH
42139: LD_VAR 0 9
42143: PPUSH
42144: LD_VAR 0 10
42148: PPUSH
42149: CALL_OW 458
42153: NOT
42154: AND
42155: IFFALSE 42197
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42157: LD_ADDR_VAR 0 7
42161: PUSH
42162: LD_VAR 0 7
42166: PPUSH
42167: LD_VAR 0 7
42171: PUSH
42172: LD_INT 1
42174: PLUS
42175: PPUSH
42176: LD_VAR 0 9
42180: PUSH
42181: LD_VAR 0 10
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PPUSH
42190: CALL_OW 1
42194: ST_TO_ADDR
42195: GO 42211
// i := i - 1 ;
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_VAR 0 5
42206: PUSH
42207: LD_INT 1
42209: MINUS
42210: ST_TO_ADDR
// end ;
42211: GO 42017
42213: POP
42214: POP
// for i in tmp do
42215: LD_ADDR_VAR 0 5
42219: PUSH
42220: LD_VAR 0 7
42224: PUSH
42225: FOR_IN
42226: IFFALSE 42264
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42228: LD_VAR 0 1
42232: PPUSH
42233: LD_VAR 0 5
42237: PUSH
42238: LD_INT 1
42240: ARRAY
42241: PPUSH
42242: LD_VAR 0 5
42246: PUSH
42247: LD_INT 2
42249: ARRAY
42250: PPUSH
42251: CALL 41210 0 3
42255: NOT
42256: IFFALSE 42262
// exit ;
42258: POP
42259: POP
42260: GO 42266
42262: GO 42225
42264: POP
42265: POP
// end ;
42266: LD_VAR 0 4
42270: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
42271: LD_INT 0
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
// if not GetClass ( unit ) = class_sniper then
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 257
42289: PUSH
42290: LD_INT 5
42292: EQUAL
42293: NOT
42294: IFFALSE 42298
// exit ;
42296: GO 42686
// dist := 8 ;
42298: LD_ADDR_VAR 0 5
42302: PUSH
42303: LD_INT 8
42305: ST_TO_ADDR
// viewRange := 12 ;
42306: LD_ADDR_VAR 0 7
42310: PUSH
42311: LD_INT 12
42313: ST_TO_ADDR
// side := GetSide ( unit ) ;
42314: LD_ADDR_VAR 0 6
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 255
42328: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42329: LD_INT 61
42331: PPUSH
42332: LD_VAR 0 6
42336: PPUSH
42337: CALL_OW 321
42341: PUSH
42342: LD_INT 2
42344: EQUAL
42345: IFFALSE 42355
// viewRange := 16 ;
42347: LD_ADDR_VAR 0 7
42351: PUSH
42352: LD_INT 16
42354: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42355: LD_VAR 0 1
42359: PPUSH
42360: LD_VAR 0 2
42364: PPUSH
42365: LD_VAR 0 3
42369: PPUSH
42370: CALL_OW 297
42374: PUSH
42375: LD_VAR 0 5
42379: GREATER
42380: IFFALSE 42459
// begin ComMoveXY ( unit , x , y ) ;
42382: LD_VAR 0 1
42386: PPUSH
42387: LD_VAR 0 2
42391: PPUSH
42392: LD_VAR 0 3
42396: PPUSH
42397: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42401: LD_INT 35
42403: PPUSH
42404: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42408: LD_VAR 0 1
42412: PPUSH
42413: LD_VAR 0 2
42417: PPUSH
42418: LD_VAR 0 3
42422: PPUSH
42423: CALL 79179 0 3
42427: NOT
42428: IFFALSE 42432
// exit ;
42430: GO 42686
// until GetDistUnitXY ( unit , x , y ) < dist ;
42432: LD_VAR 0 1
42436: PPUSH
42437: LD_VAR 0 2
42441: PPUSH
42442: LD_VAR 0 3
42446: PPUSH
42447: CALL_OW 297
42451: PUSH
42452: LD_VAR 0 5
42456: LESS
42457: IFFALSE 42401
// end ; ComTurnXY ( unit , x , y ) ;
42459: LD_VAR 0 1
42463: PPUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: LD_VAR 0 3
42473: PPUSH
42474: CALL_OW 118
// wait ( 5 ) ;
42478: LD_INT 5
42480: PPUSH
42481: CALL_OW 67
// _d := GetDir ( unit ) ;
42485: LD_ADDR_VAR 0 10
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: CALL_OW 254
42499: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42500: LD_ADDR_VAR 0 8
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 250
42514: PPUSH
42515: LD_VAR 0 10
42519: PPUSH
42520: LD_VAR 0 5
42524: PPUSH
42525: CALL_OW 272
42529: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42530: LD_ADDR_VAR 0 9
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 251
42544: PPUSH
42545: LD_VAR 0 10
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL_OW 273
42559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42560: LD_VAR 0 8
42564: PPUSH
42565: LD_VAR 0 9
42569: PPUSH
42570: CALL_OW 488
42574: NOT
42575: IFFALSE 42579
// exit ;
42577: GO 42686
// ComAnimCustom ( unit , 1 ) ;
42579: LD_VAR 0 1
42583: PPUSH
42584: LD_INT 1
42586: PPUSH
42587: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42591: LD_VAR 0 8
42595: PPUSH
42596: LD_VAR 0 9
42600: PPUSH
42601: LD_VAR 0 6
42605: PPUSH
42606: LD_VAR 0 7
42610: PPUSH
42611: CALL_OW 330
// repeat wait ( 1 ) ;
42615: LD_INT 1
42617: PPUSH
42618: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 316
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: CALL_OW 314
42641: OR
42642: PUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 302
42652: NOT
42653: OR
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 301
42664: OR
42665: IFFALSE 42615
// RemoveSeeing ( _x , _y , side ) ;
42667: LD_VAR 0 8
42671: PPUSH
42672: LD_VAR 0 9
42676: PPUSH
42677: LD_VAR 0 6
42681: PPUSH
42682: CALL_OW 331
// end ; end_of_file
42686: LD_VAR 0 4
42690: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42691: LD_INT 0
42693: PPUSH
42694: PPUSH
// if exist_mode then
42695: LD_VAR 0 2
42699: IFFALSE 42724
// unit := CreateCharacter ( prefix & ident ) else
42701: LD_ADDR_VAR 0 5
42705: PUSH
42706: LD_VAR 0 3
42710: PUSH
42711: LD_VAR 0 1
42715: STR
42716: PPUSH
42717: CALL_OW 34
42721: ST_TO_ADDR
42722: GO 42739
// unit := NewCharacter ( ident ) ;
42724: LD_ADDR_VAR 0 5
42728: PUSH
42729: LD_VAR 0 1
42733: PPUSH
42734: CALL_OW 25
42738: ST_TO_ADDR
// result := unit ;
42739: LD_ADDR_VAR 0 4
42743: PUSH
42744: LD_VAR 0 5
42748: ST_TO_ADDR
// end ;
42749: LD_VAR 0 4
42753: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
// if not side or not nation then
42758: LD_VAR 0 1
42762: NOT
42763: PUSH
42764: LD_VAR 0 2
42768: NOT
42769: OR
42770: IFFALSE 42774
// exit ;
42772: GO 43542
// case nation of nation_american :
42774: LD_VAR 0 2
42778: PUSH
42779: LD_INT 1
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 43001
42787: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42788: LD_ADDR_VAR 0 4
42792: PUSH
42793: LD_INT 35
42795: PUSH
42796: LD_INT 45
42798: PUSH
42799: LD_INT 46
42801: PUSH
42802: LD_INT 47
42804: PUSH
42805: LD_INT 82
42807: PUSH
42808: LD_INT 83
42810: PUSH
42811: LD_INT 84
42813: PUSH
42814: LD_INT 85
42816: PUSH
42817: LD_INT 86
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 6
42828: PUSH
42829: LD_INT 15
42831: PUSH
42832: LD_INT 16
42834: PUSH
42835: LD_INT 7
42837: PUSH
42838: LD_INT 12
42840: PUSH
42841: LD_INT 13
42843: PUSH
42844: LD_INT 10
42846: PUSH
42847: LD_INT 14
42849: PUSH
42850: LD_INT 20
42852: PUSH
42853: LD_INT 21
42855: PUSH
42856: LD_INT 22
42858: PUSH
42859: LD_INT 25
42861: PUSH
42862: LD_INT 32
42864: PUSH
42865: LD_INT 27
42867: PUSH
42868: LD_INT 36
42870: PUSH
42871: LD_INT 69
42873: PUSH
42874: LD_INT 39
42876: PUSH
42877: LD_INT 34
42879: PUSH
42880: LD_INT 40
42882: PUSH
42883: LD_INT 48
42885: PUSH
42886: LD_INT 49
42888: PUSH
42889: LD_INT 50
42891: PUSH
42892: LD_INT 51
42894: PUSH
42895: LD_INT 52
42897: PUSH
42898: LD_INT 53
42900: PUSH
42901: LD_INT 54
42903: PUSH
42904: LD_INT 55
42906: PUSH
42907: LD_INT 56
42909: PUSH
42910: LD_INT 57
42912: PUSH
42913: LD_INT 58
42915: PUSH
42916: LD_INT 59
42918: PUSH
42919: LD_INT 60
42921: PUSH
42922: LD_INT 61
42924: PUSH
42925: LD_INT 62
42927: PUSH
42928: LD_INT 80
42930: PUSH
42931: LD_INT 82
42933: PUSH
42934: LD_INT 83
42936: PUSH
42937: LD_INT 84
42939: PUSH
42940: LD_INT 85
42942: PUSH
42943: LD_INT 86
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
42999: GO 43466
43001: LD_INT 2
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43009
43007: GO 43235
43009: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43010: LD_ADDR_VAR 0 4
43014: PUSH
43015: LD_INT 35
43017: PUSH
43018: LD_INT 45
43020: PUSH
43021: LD_INT 46
43023: PUSH
43024: LD_INT 47
43026: PUSH
43027: LD_INT 82
43029: PUSH
43030: LD_INT 83
43032: PUSH
43033: LD_INT 84
43035: PUSH
43036: LD_INT 85
43038: PUSH
43039: LD_INT 87
43041: PUSH
43042: LD_INT 70
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 11
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: LD_INT 4
43056: PUSH
43057: LD_INT 5
43059: PUSH
43060: LD_INT 6
43062: PUSH
43063: LD_INT 15
43065: PUSH
43066: LD_INT 18
43068: PUSH
43069: LD_INT 7
43071: PUSH
43072: LD_INT 17
43074: PUSH
43075: LD_INT 8
43077: PUSH
43078: LD_INT 20
43080: PUSH
43081: LD_INT 21
43083: PUSH
43084: LD_INT 22
43086: PUSH
43087: LD_INT 72
43089: PUSH
43090: LD_INT 26
43092: PUSH
43093: LD_INT 69
43095: PUSH
43096: LD_INT 39
43098: PUSH
43099: LD_INT 40
43101: PUSH
43102: LD_INT 41
43104: PUSH
43105: LD_INT 42
43107: PUSH
43108: LD_INT 43
43110: PUSH
43111: LD_INT 48
43113: PUSH
43114: LD_INT 49
43116: PUSH
43117: LD_INT 50
43119: PUSH
43120: LD_INT 51
43122: PUSH
43123: LD_INT 52
43125: PUSH
43126: LD_INT 53
43128: PUSH
43129: LD_INT 54
43131: PUSH
43132: LD_INT 55
43134: PUSH
43135: LD_INT 56
43137: PUSH
43138: LD_INT 60
43140: PUSH
43141: LD_INT 61
43143: PUSH
43144: LD_INT 62
43146: PUSH
43147: LD_INT 66
43149: PUSH
43150: LD_INT 67
43152: PUSH
43153: LD_INT 68
43155: PUSH
43156: LD_INT 81
43158: PUSH
43159: LD_INT 82
43161: PUSH
43162: LD_INT 83
43164: PUSH
43165: LD_INT 84
43167: PUSH
43168: LD_INT 85
43170: PUSH
43171: LD_INT 87
43173: PUSH
43174: LD_INT 88
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: ST_TO_ADDR
43233: GO 43466
43235: LD_INT 3
43237: DOUBLE
43238: EQUAL
43239: IFTRUE 43243
43241: GO 43465
43243: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43244: LD_ADDR_VAR 0 4
43248: PUSH
43249: LD_INT 46
43251: PUSH
43252: LD_INT 47
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 82
43263: PUSH
43264: LD_INT 83
43266: PUSH
43267: LD_INT 84
43269: PUSH
43270: LD_INT 85
43272: PUSH
43273: LD_INT 86
43275: PUSH
43276: LD_INT 11
43278: PUSH
43279: LD_INT 9
43281: PUSH
43282: LD_INT 20
43284: PUSH
43285: LD_INT 19
43287: PUSH
43288: LD_INT 21
43290: PUSH
43291: LD_INT 24
43293: PUSH
43294: LD_INT 22
43296: PUSH
43297: LD_INT 25
43299: PUSH
43300: LD_INT 28
43302: PUSH
43303: LD_INT 29
43305: PUSH
43306: LD_INT 30
43308: PUSH
43309: LD_INT 31
43311: PUSH
43312: LD_INT 37
43314: PUSH
43315: LD_INT 38
43317: PUSH
43318: LD_INT 32
43320: PUSH
43321: LD_INT 27
43323: PUSH
43324: LD_INT 33
43326: PUSH
43327: LD_INT 69
43329: PUSH
43330: LD_INT 39
43332: PUSH
43333: LD_INT 34
43335: PUSH
43336: LD_INT 40
43338: PUSH
43339: LD_INT 71
43341: PUSH
43342: LD_INT 23
43344: PUSH
43345: LD_INT 44
43347: PUSH
43348: LD_INT 48
43350: PUSH
43351: LD_INT 49
43353: PUSH
43354: LD_INT 50
43356: PUSH
43357: LD_INT 51
43359: PUSH
43360: LD_INT 52
43362: PUSH
43363: LD_INT 53
43365: PUSH
43366: LD_INT 54
43368: PUSH
43369: LD_INT 55
43371: PUSH
43372: LD_INT 56
43374: PUSH
43375: LD_INT 57
43377: PUSH
43378: LD_INT 58
43380: PUSH
43381: LD_INT 59
43383: PUSH
43384: LD_INT 63
43386: PUSH
43387: LD_INT 64
43389: PUSH
43390: LD_INT 65
43392: PUSH
43393: LD_INT 82
43395: PUSH
43396: LD_INT 83
43398: PUSH
43399: LD_INT 84
43401: PUSH
43402: LD_INT 85
43404: PUSH
43405: LD_INT 86
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
43463: GO 43466
43465: POP
// if state > - 1 and state < 3 then
43466: LD_VAR 0 3
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: GREATER
43475: PUSH
43476: LD_VAR 0 3
43480: PUSH
43481: LD_INT 3
43483: LESS
43484: AND
43485: IFFALSE 43542
// for i in result do
43487: LD_ADDR_VAR 0 5
43491: PUSH
43492: LD_VAR 0 4
43496: PUSH
43497: FOR_IN
43498: IFFALSE 43540
// if GetTech ( i , side ) <> state then
43500: LD_VAR 0 5
43504: PPUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 321
43514: PUSH
43515: LD_VAR 0 3
43519: NONEQUAL
43520: IFFALSE 43538
// result := result diff i ;
43522: LD_ADDR_VAR 0 4
43526: PUSH
43527: LD_VAR 0 4
43531: PUSH
43532: LD_VAR 0 5
43536: DIFF
43537: ST_TO_ADDR
43538: GO 43497
43540: POP
43541: POP
// end ;
43542: LD_VAR 0 4
43546: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43547: LD_INT 0
43549: PPUSH
43550: PPUSH
43551: PPUSH
// result := true ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_INT 1
43559: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43560: LD_ADDR_VAR 0 5
43564: PUSH
43565: LD_VAR 0 2
43569: PPUSH
43570: CALL_OW 480
43574: ST_TO_ADDR
// if not tmp then
43575: LD_VAR 0 5
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 43633
// for i in tmp do
43584: LD_ADDR_VAR 0 4
43588: PUSH
43589: LD_VAR 0 5
43593: PUSH
43594: FOR_IN
43595: IFFALSE 43631
// if GetTech ( i , side ) <> state_researched then
43597: LD_VAR 0 4
43601: PPUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 321
43611: PUSH
43612: LD_INT 2
43614: NONEQUAL
43615: IFFALSE 43629
// begin result := false ;
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_INT 0
43624: ST_TO_ADDR
// exit ;
43625: POP
43626: POP
43627: GO 43633
// end ;
43629: GO 43594
43631: POP
43632: POP
// end ;
43633: LD_VAR 0 3
43637: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43638: LD_INT 0
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43653: LD_VAR 0 1
43657: NOT
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 257
43668: PUSH
43669: LD_INT 9
43671: NONEQUAL
43672: OR
43673: IFFALSE 43677
// exit ;
43675: GO 44250
// side := GetSide ( unit ) ;
43677: LD_ADDR_VAR 0 9
43681: PUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: CALL_OW 255
43691: ST_TO_ADDR
// tech_space := tech_spacanom ;
43692: LD_ADDR_VAR 0 12
43696: PUSH
43697: LD_INT 29
43699: ST_TO_ADDR
// tech_time := tech_taurad ;
43700: LD_ADDR_VAR 0 13
43704: PUSH
43705: LD_INT 28
43707: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43708: LD_ADDR_VAR 0 11
43712: PUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 310
43722: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43723: LD_VAR 0 11
43727: PPUSH
43728: CALL_OW 247
43732: PUSH
43733: LD_INT 2
43735: EQUAL
43736: IFFALSE 43740
// exit ;
43738: GO 44250
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43740: LD_ADDR_VAR 0 8
43744: PUSH
43745: LD_INT 81
43747: PUSH
43748: LD_VAR 0 9
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: LD_INT 21
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PPUSH
43778: CALL_OW 69
43782: ST_TO_ADDR
// if not tmp then
43783: LD_VAR 0 8
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 44250
// if in_unit then
43792: LD_VAR 0 11
43796: IFFALSE 43820
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43798: LD_ADDR_VAR 0 10
43802: PUSH
43803: LD_VAR 0 8
43807: PPUSH
43808: LD_VAR 0 11
43812: PPUSH
43813: CALL_OW 74
43817: ST_TO_ADDR
43818: GO 43840
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43820: LD_ADDR_VAR 0 10
43824: PUSH
43825: LD_VAR 0 8
43829: PPUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: CALL_OW 74
43839: ST_TO_ADDR
// if not enemy then
43840: LD_VAR 0 10
43844: NOT
43845: IFFALSE 43849
// exit ;
43847: GO 44250
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43849: LD_VAR 0 11
43853: PUSH
43854: LD_VAR 0 11
43858: PPUSH
43859: LD_VAR 0 10
43863: PPUSH
43864: CALL_OW 296
43868: PUSH
43869: LD_INT 13
43871: GREATER
43872: AND
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: LD_VAR 0 10
43883: PPUSH
43884: CALL_OW 296
43888: PUSH
43889: LD_INT 12
43891: GREATER
43892: OR
43893: IFFALSE 43897
// exit ;
43895: GO 44250
// missile := [ 1 ] ;
43897: LD_ADDR_VAR 0 14
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43908: LD_VAR 0 9
43912: PPUSH
43913: LD_VAR 0 12
43917: PPUSH
43918: CALL_OW 325
43922: IFFALSE 43951
// missile := Replace ( missile , missile + 1 , 2 ) ;
43924: LD_ADDR_VAR 0 14
43928: PUSH
43929: LD_VAR 0 14
43933: PPUSH
43934: LD_VAR 0 14
43938: PUSH
43939: LD_INT 1
43941: PLUS
43942: PPUSH
43943: LD_INT 2
43945: PPUSH
43946: CALL_OW 1
43950: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43951: LD_VAR 0 9
43955: PPUSH
43956: LD_VAR 0 13
43960: PPUSH
43961: CALL_OW 325
43965: PUSH
43966: LD_VAR 0 10
43970: PPUSH
43971: CALL_OW 255
43975: PPUSH
43976: LD_VAR 0 13
43980: PPUSH
43981: CALL_OW 325
43985: NOT
43986: AND
43987: IFFALSE 44016
// missile := Replace ( missile , missile + 1 , 3 ) ;
43989: LD_ADDR_VAR 0 14
43993: PUSH
43994: LD_VAR 0 14
43998: PPUSH
43999: LD_VAR 0 14
44003: PUSH
44004: LD_INT 1
44006: PLUS
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: CALL_OW 1
44015: ST_TO_ADDR
// if missile < 2 then
44016: LD_VAR 0 14
44020: PUSH
44021: LD_INT 2
44023: LESS
44024: IFFALSE 44028
// exit ;
44026: GO 44250
// x := GetX ( enemy ) ;
44028: LD_ADDR_VAR 0 4
44032: PUSH
44033: LD_VAR 0 10
44037: PPUSH
44038: CALL_OW 250
44042: ST_TO_ADDR
// y := GetY ( enemy ) ;
44043: LD_ADDR_VAR 0 5
44047: PUSH
44048: LD_VAR 0 10
44052: PPUSH
44053: CALL_OW 251
44057: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44058: LD_ADDR_VAR 0 6
44062: PUSH
44063: LD_VAR 0 4
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PPUSH
44072: LD_INT 1
44074: PPUSH
44075: CALL_OW 12
44079: PLUS
44080: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44081: LD_ADDR_VAR 0 7
44085: PUSH
44086: LD_VAR 0 5
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PPUSH
44095: LD_INT 1
44097: PPUSH
44098: CALL_OW 12
44102: PLUS
44103: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44104: LD_VAR 0 6
44108: PPUSH
44109: LD_VAR 0 7
44113: PPUSH
44114: CALL_OW 488
44118: NOT
44119: IFFALSE 44141
// begin _x := x ;
44121: LD_ADDR_VAR 0 6
44125: PUSH
44126: LD_VAR 0 4
44130: ST_TO_ADDR
// _y := y ;
44131: LD_ADDR_VAR 0 7
44135: PUSH
44136: LD_VAR 0 5
44140: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_INT 1
44148: PPUSH
44149: LD_VAR 0 14
44153: PPUSH
44154: CALL_OW 12
44158: ST_TO_ADDR
// case i of 1 :
44159: LD_VAR 0 3
44163: PUSH
44164: LD_INT 1
44166: DOUBLE
44167: EQUAL
44168: IFTRUE 44172
44170: GO 44189
44172: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44173: LD_VAR 0 1
44177: PPUSH
44178: LD_VAR 0 10
44182: PPUSH
44183: CALL_OW 115
44187: GO 44250
44189: LD_INT 2
44191: DOUBLE
44192: EQUAL
44193: IFTRUE 44197
44195: GO 44219
44197: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_VAR 0 6
44207: PPUSH
44208: LD_VAR 0 7
44212: PPUSH
44213: CALL_OW 153
44217: GO 44250
44219: LD_INT 3
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 44249
44227: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44228: LD_VAR 0 1
44232: PPUSH
44233: LD_VAR 0 6
44237: PPUSH
44238: LD_VAR 0 7
44242: PPUSH
44243: CALL_OW 154
44247: GO 44250
44249: POP
// end ;
44250: LD_VAR 0 2
44254: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44255: LD_INT 0
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
// if not unit or not building then
44263: LD_VAR 0 1
44267: NOT
44268: PUSH
44269: LD_VAR 0 2
44273: NOT
44274: OR
44275: IFFALSE 44279
// exit ;
44277: GO 44437
// x := GetX ( building ) ;
44279: LD_ADDR_VAR 0 5
44283: PUSH
44284: LD_VAR 0 2
44288: PPUSH
44289: CALL_OW 250
44293: ST_TO_ADDR
// y := GetY ( building ) ;
44294: LD_ADDR_VAR 0 6
44298: PUSH
44299: LD_VAR 0 2
44303: PPUSH
44304: CALL_OW 251
44308: ST_TO_ADDR
// for i = 0 to 5 do
44309: LD_ADDR_VAR 0 4
44313: PUSH
44314: DOUBLE
44315: LD_INT 0
44317: DEC
44318: ST_TO_ADDR
44319: LD_INT 5
44321: PUSH
44322: FOR_TO
44323: IFFALSE 44435
// begin _x := ShiftX ( x , i , 3 ) ;
44325: LD_ADDR_VAR 0 7
44329: PUSH
44330: LD_VAR 0 5
44334: PPUSH
44335: LD_VAR 0 4
44339: PPUSH
44340: LD_INT 3
44342: PPUSH
44343: CALL_OW 272
44347: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44348: LD_ADDR_VAR 0 8
44352: PUSH
44353: LD_VAR 0 6
44357: PPUSH
44358: LD_VAR 0 4
44362: PPUSH
44363: LD_INT 3
44365: PPUSH
44366: CALL_OW 273
44370: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44371: LD_VAR 0 7
44375: PPUSH
44376: LD_VAR 0 8
44380: PPUSH
44381: CALL_OW 488
44385: NOT
44386: IFFALSE 44390
// continue ;
44388: GO 44322
// if HexInfo ( _x , _y ) = 0 then
44390: LD_VAR 0 7
44394: PPUSH
44395: LD_VAR 0 8
44399: PPUSH
44400: CALL_OW 428
44404: PUSH
44405: LD_INT 0
44407: EQUAL
44408: IFFALSE 44433
// begin ComMoveXY ( unit , _x , _y ) ;
44410: LD_VAR 0 1
44414: PPUSH
44415: LD_VAR 0 7
44419: PPUSH
44420: LD_VAR 0 8
44424: PPUSH
44425: CALL_OW 111
// exit ;
44429: POP
44430: POP
44431: GO 44437
// end ; end ;
44433: GO 44322
44435: POP
44436: POP
// end ;
44437: LD_VAR 0 3
44441: RET
// export function ScanBase ( side , base_area ) ; begin
44442: LD_INT 0
44444: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44445: LD_ADDR_VAR 0 3
44449: PUSH
44450: LD_VAR 0 2
44454: PPUSH
44455: LD_INT 81
44457: PUSH
44458: LD_VAR 0 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PPUSH
44467: CALL_OW 70
44471: ST_TO_ADDR
// end ;
44472: LD_VAR 0 3
44476: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44477: LD_INT 0
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
// result := false ;
44483: LD_ADDR_VAR 0 2
44487: PUSH
44488: LD_INT 0
44490: ST_TO_ADDR
// side := GetSide ( unit ) ;
44491: LD_ADDR_VAR 0 3
44495: PUSH
44496: LD_VAR 0 1
44500: PPUSH
44501: CALL_OW 255
44505: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44506: LD_ADDR_VAR 0 4
44510: PUSH
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 248
44520: ST_TO_ADDR
// case nat of 1 :
44521: LD_VAR 0 4
44525: PUSH
44526: LD_INT 1
44528: DOUBLE
44529: EQUAL
44530: IFTRUE 44534
44532: GO 44545
44534: POP
// tech := tech_lassight ; 2 :
44535: LD_ADDR_VAR 0 5
44539: PUSH
44540: LD_INT 12
44542: ST_TO_ADDR
44543: GO 44584
44545: LD_INT 2
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44564
44553: POP
// tech := tech_mortar ; 3 :
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_INT 41
44561: ST_TO_ADDR
44562: GO 44584
44564: LD_INT 3
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44572
44570: GO 44583
44572: POP
// tech := tech_bazooka ; end ;
44573: LD_ADDR_VAR 0 5
44577: PUSH
44578: LD_INT 44
44580: ST_TO_ADDR
44581: GO 44584
44583: POP
// if Researched ( side , tech ) then
44584: LD_VAR 0 3
44588: PPUSH
44589: LD_VAR 0 5
44593: PPUSH
44594: CALL_OW 325
44598: IFFALSE 44625
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_INT 5
44607: PUSH
44608: LD_INT 8
44610: PUSH
44611: LD_INT 9
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: PUSH
44619: LD_VAR 0 4
44623: ARRAY
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 2
44629: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
44634: PPUSH
// if not mines then
44635: LD_VAR 0 2
44639: NOT
44640: IFFALSE 44644
// exit ;
44642: GO 44788
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44644: LD_ADDR_VAR 0 5
44648: PUSH
44649: LD_INT 81
44651: PUSH
44652: LD_VAR 0 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 21
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PPUSH
44682: CALL_OW 69
44686: ST_TO_ADDR
// for i in mines do
44687: LD_ADDR_VAR 0 4
44691: PUSH
44692: LD_VAR 0 2
44696: PUSH
44697: FOR_IN
44698: IFFALSE 44786
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44700: LD_VAR 0 4
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: LD_VAR 0 4
44713: PUSH
44714: LD_INT 2
44716: ARRAY
44717: PPUSH
44718: CALL_OW 458
44722: NOT
44723: IFFALSE 44727
// continue ;
44725: GO 44697
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44727: LD_VAR 0 4
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: LD_VAR 0 4
44740: PUSH
44741: LD_INT 2
44743: ARRAY
44744: PPUSH
44745: CALL_OW 428
44749: PUSH
44750: LD_VAR 0 5
44754: IN
44755: IFFALSE 44784
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44757: LD_VAR 0 4
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PPUSH
44766: LD_VAR 0 4
44770: PUSH
44771: LD_INT 2
44773: ARRAY
44774: PPUSH
44775: LD_VAR 0 1
44779: PPUSH
44780: CALL_OW 456
// end ;
44784: GO 44697
44786: POP
44787: POP
// end ;
44788: LD_VAR 0 3
44792: RET
// export function Count ( array ) ; begin
44793: LD_INT 0
44795: PPUSH
// result := array + 0 ;
44796: LD_ADDR_VAR 0 2
44800: PUSH
44801: LD_VAR 0 1
44805: PUSH
44806: LD_INT 0
44808: PLUS
44809: ST_TO_ADDR
// end ;
44810: LD_VAR 0 2
44814: RET
// export function IsEmpty ( building ) ; begin
44815: LD_INT 0
44817: PPUSH
// if not building then
44818: LD_VAR 0 1
44822: NOT
44823: IFFALSE 44827
// exit ;
44825: GO 44870
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44827: LD_ADDR_VAR 0 2
44831: PUSH
44832: LD_VAR 0 1
44836: PUSH
44837: LD_INT 22
44839: PUSH
44840: LD_VAR 0 1
44844: PPUSH
44845: CALL_OW 255
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 58
44856: PUSH
44857: EMPTY
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PPUSH
44864: CALL_OW 69
44868: IN
44869: ST_TO_ADDR
// end ;
44870: LD_VAR 0 2
44874: RET
// export function IsNotFull ( building ) ; var places ; begin
44875: LD_INT 0
44877: PPUSH
44878: PPUSH
// if not building then
44879: LD_VAR 0 1
44883: NOT
44884: IFFALSE 44888
// exit ;
44886: GO 44916
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44888: LD_ADDR_VAR 0 2
44892: PUSH
44893: LD_VAR 0 1
44897: PPUSH
44898: LD_INT 3
44900: PUSH
44901: LD_INT 62
44903: PUSH
44904: EMPTY
44905: LIST
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PPUSH
44911: CALL_OW 72
44915: ST_TO_ADDR
// end ;
44916: LD_VAR 0 2
44920: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44921: LD_INT 0
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
// tmp := [ ] ;
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: EMPTY
44933: ST_TO_ADDR
// list := [ ] ;
44934: LD_ADDR_VAR 0 5
44938: PUSH
44939: EMPTY
44940: ST_TO_ADDR
// for i = 16 to 25 do
44941: LD_ADDR_VAR 0 4
44945: PUSH
44946: DOUBLE
44947: LD_INT 16
44949: DEC
44950: ST_TO_ADDR
44951: LD_INT 25
44953: PUSH
44954: FOR_TO
44955: IFFALSE 45028
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_VAR 0 3
44966: PUSH
44967: LD_INT 22
44969: PUSH
44970: LD_VAR 0 1
44974: PPUSH
44975: CALL_OW 255
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 91
44986: PUSH
44987: LD_VAR 0 1
44991: PUSH
44992: LD_INT 6
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 30
45002: PUSH
45003: LD_VAR 0 4
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: PPUSH
45020: CALL_OW 69
45024: ADD
45025: ST_TO_ADDR
45026: GO 44954
45028: POP
45029: POP
// for i = 1 to tmp do
45030: LD_ADDR_VAR 0 4
45034: PUSH
45035: DOUBLE
45036: LD_INT 1
45038: DEC
45039: ST_TO_ADDR
45040: LD_VAR 0 3
45044: PUSH
45045: FOR_TO
45046: IFFALSE 45134
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 5
45057: PUSH
45058: LD_VAR 0 3
45062: PUSH
45063: LD_VAR 0 4
45067: ARRAY
45068: PPUSH
45069: CALL_OW 266
45073: PUSH
45074: LD_VAR 0 3
45078: PUSH
45079: LD_VAR 0 4
45083: ARRAY
45084: PPUSH
45085: CALL_OW 250
45089: PUSH
45090: LD_VAR 0 3
45094: PUSH
45095: LD_VAR 0 4
45099: ARRAY
45100: PPUSH
45101: CALL_OW 251
45105: PUSH
45106: LD_VAR 0 3
45110: PUSH
45111: LD_VAR 0 4
45115: ARRAY
45116: PPUSH
45117: CALL_OW 254
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: ADD
45131: ST_TO_ADDR
45132: GO 45045
45134: POP
45135: POP
// result := list ;
45136: LD_ADDR_VAR 0 2
45140: PUSH
45141: LD_VAR 0 5
45145: ST_TO_ADDR
// end ;
45146: LD_VAR 0 2
45150: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45151: LD_INT 0
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
// if not factory then
45160: LD_VAR 0 1
45164: NOT
45165: IFFALSE 45169
// exit ;
45167: GO 45762
// if control = control_apeman then
45169: LD_VAR 0 4
45173: PUSH
45174: LD_INT 5
45176: EQUAL
45177: IFFALSE 45286
// begin tmp := UnitsInside ( factory ) ;
45179: LD_ADDR_VAR 0 8
45183: PUSH
45184: LD_VAR 0 1
45188: PPUSH
45189: CALL_OW 313
45193: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45194: LD_VAR 0 8
45198: PPUSH
45199: LD_INT 25
45201: PUSH
45202: LD_INT 12
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PPUSH
45209: CALL_OW 72
45213: NOT
45214: IFFALSE 45224
// control := control_manual ;
45216: LD_ADDR_VAR 0 4
45220: PUSH
45221: LD_INT 1
45223: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45224: LD_ADDR_VAR 0 8
45228: PUSH
45229: LD_VAR 0 1
45233: PPUSH
45234: CALL 44921 0 1
45238: ST_TO_ADDR
// if tmp then
45239: LD_VAR 0 8
45243: IFFALSE 45286
// begin for i in tmp do
45245: LD_ADDR_VAR 0 7
45249: PUSH
45250: LD_VAR 0 8
45254: PUSH
45255: FOR_IN
45256: IFFALSE 45284
// if i [ 1 ] = b_ext_radio then
45258: LD_VAR 0 7
45262: PUSH
45263: LD_INT 1
45265: ARRAY
45266: PUSH
45267: LD_INT 22
45269: EQUAL
45270: IFFALSE 45282
// begin control := control_remote ;
45272: LD_ADDR_VAR 0 4
45276: PUSH
45277: LD_INT 2
45279: ST_TO_ADDR
// break ;
45280: GO 45284
// end ;
45282: GO 45255
45284: POP
45285: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45286: LD_VAR 0 1
45290: PPUSH
45291: LD_VAR 0 2
45295: PPUSH
45296: LD_VAR 0 3
45300: PPUSH
45301: LD_VAR 0 4
45305: PPUSH
45306: LD_VAR 0 5
45310: PPUSH
45311: CALL_OW 448
45315: IFFALSE 45350
// begin result := [ chassis , engine , control , weapon ] ;
45317: LD_ADDR_VAR 0 6
45321: PUSH
45322: LD_VAR 0 2
45326: PUSH
45327: LD_VAR 0 3
45331: PUSH
45332: LD_VAR 0 4
45336: PUSH
45337: LD_VAR 0 5
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// exit ;
45348: GO 45762
// end ; _chassis := AvailableChassisList ( factory ) ;
45350: LD_ADDR_VAR 0 9
45354: PUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: CALL_OW 475
45364: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45365: LD_ADDR_VAR 0 11
45369: PUSH
45370: LD_VAR 0 1
45374: PPUSH
45375: CALL_OW 476
45379: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45380: LD_ADDR_VAR 0 12
45384: PUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL_OW 477
45394: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45395: LD_ADDR_VAR 0 10
45399: PUSH
45400: LD_VAR 0 1
45404: PPUSH
45405: CALL_OW 478
45409: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45410: LD_VAR 0 9
45414: NOT
45415: PUSH
45416: LD_VAR 0 11
45420: NOT
45421: OR
45422: PUSH
45423: LD_VAR 0 12
45427: NOT
45428: OR
45429: PUSH
45430: LD_VAR 0 10
45434: NOT
45435: OR
45436: IFFALSE 45471
// begin result := [ chassis , engine , control , weapon ] ;
45438: LD_ADDR_VAR 0 6
45442: PUSH
45443: LD_VAR 0 2
45447: PUSH
45448: LD_VAR 0 3
45452: PUSH
45453: LD_VAR 0 4
45457: PUSH
45458: LD_VAR 0 5
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// exit ;
45469: GO 45762
// end ; if not chassis in _chassis then
45471: LD_VAR 0 2
45475: PUSH
45476: LD_VAR 0 9
45480: IN
45481: NOT
45482: IFFALSE 45508
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45484: LD_ADDR_VAR 0 2
45488: PUSH
45489: LD_VAR 0 9
45493: PUSH
45494: LD_INT 1
45496: PPUSH
45497: LD_VAR 0 9
45501: PPUSH
45502: CALL_OW 12
45506: ARRAY
45507: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45508: LD_VAR 0 2
45512: PPUSH
45513: LD_VAR 0 3
45517: PPUSH
45518: CALL 45767 0 2
45522: NOT
45523: IFFALSE 45582
// repeat engine := _engine [ 1 ] ;
45525: LD_ADDR_VAR 0 3
45529: PUSH
45530: LD_VAR 0 11
45534: PUSH
45535: LD_INT 1
45537: ARRAY
45538: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45539: LD_ADDR_VAR 0 11
45543: PUSH
45544: LD_VAR 0 11
45548: PPUSH
45549: LD_INT 1
45551: PPUSH
45552: CALL_OW 3
45556: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45557: LD_VAR 0 2
45561: PPUSH
45562: LD_VAR 0 3
45566: PPUSH
45567: CALL 45767 0 2
45571: PUSH
45572: LD_VAR 0 11
45576: PUSH
45577: EMPTY
45578: EQUAL
45579: OR
45580: IFFALSE 45525
// if not control in _control then
45582: LD_VAR 0 4
45586: PUSH
45587: LD_VAR 0 12
45591: IN
45592: NOT
45593: IFFALSE 45619
// control := _control [ rand ( 1 , _control ) ] ;
45595: LD_ADDR_VAR 0 4
45599: PUSH
45600: LD_VAR 0 12
45604: PUSH
45605: LD_INT 1
45607: PPUSH
45608: LD_VAR 0 12
45612: PPUSH
45613: CALL_OW 12
45617: ARRAY
45618: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45619: LD_VAR 0 2
45623: PPUSH
45624: LD_VAR 0 5
45628: PPUSH
45629: CALL 45987 0 2
45633: NOT
45634: IFFALSE 45693
// repeat weapon := _weapon [ 1 ] ;
45636: LD_ADDR_VAR 0 5
45640: PUSH
45641: LD_VAR 0 10
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45650: LD_ADDR_VAR 0 10
45654: PUSH
45655: LD_VAR 0 10
45659: PPUSH
45660: LD_INT 1
45662: PPUSH
45663: CALL_OW 3
45667: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45668: LD_VAR 0 2
45672: PPUSH
45673: LD_VAR 0 5
45677: PPUSH
45678: CALL 45987 0 2
45682: PUSH
45683: LD_VAR 0 10
45687: PUSH
45688: EMPTY
45689: EQUAL
45690: OR
45691: IFFALSE 45636
// result := [ ] ;
45693: LD_ADDR_VAR 0 6
45697: PUSH
45698: EMPTY
45699: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45700: LD_VAR 0 1
45704: PPUSH
45705: LD_VAR 0 2
45709: PPUSH
45710: LD_VAR 0 3
45714: PPUSH
45715: LD_VAR 0 4
45719: PPUSH
45720: LD_VAR 0 5
45724: PPUSH
45725: CALL_OW 448
45729: IFFALSE 45762
// result := [ chassis , engine , control , weapon ] ;
45731: LD_ADDR_VAR 0 6
45735: PUSH
45736: LD_VAR 0 2
45740: PUSH
45741: LD_VAR 0 3
45745: PUSH
45746: LD_VAR 0 4
45750: PUSH
45751: LD_VAR 0 5
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// end ;
45762: LD_VAR 0 6
45766: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45767: LD_INT 0
45769: PPUSH
// if not chassis or not engine then
45770: LD_VAR 0 1
45774: NOT
45775: PUSH
45776: LD_VAR 0 2
45780: NOT
45781: OR
45782: IFFALSE 45786
// exit ;
45784: GO 45982
// case engine of engine_solar :
45786: LD_VAR 0 2
45790: PUSH
45791: LD_INT 2
45793: DOUBLE
45794: EQUAL
45795: IFTRUE 45799
45797: GO 45837
45799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45800: LD_ADDR_VAR 0 3
45804: PUSH
45805: LD_INT 11
45807: PUSH
45808: LD_INT 12
45810: PUSH
45811: LD_INT 13
45813: PUSH
45814: LD_INT 14
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
45835: GO 45966
45837: LD_INT 1
45839: DOUBLE
45840: EQUAL
45841: IFTRUE 45845
45843: GO 45907
45845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45846: LD_ADDR_VAR 0 3
45850: PUSH
45851: LD_INT 11
45853: PUSH
45854: LD_INT 12
45856: PUSH
45857: LD_INT 13
45859: PUSH
45860: LD_INT 14
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: LD_INT 4
45874: PUSH
45875: LD_INT 5
45877: PUSH
45878: LD_INT 21
45880: PUSH
45881: LD_INT 23
45883: PUSH
45884: LD_INT 22
45886: PUSH
45887: LD_INT 24
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
45905: GO 45966
45907: LD_INT 3
45909: DOUBLE
45910: EQUAL
45911: IFTRUE 45915
45913: GO 45965
45915: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45916: LD_ADDR_VAR 0 3
45920: PUSH
45921: LD_INT 13
45923: PUSH
45924: LD_INT 14
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 4
45935: PUSH
45936: LD_INT 5
45938: PUSH
45939: LD_INT 21
45941: PUSH
45942: LD_INT 22
45944: PUSH
45945: LD_INT 23
45947: PUSH
45948: LD_INT 24
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
45963: GO 45966
45965: POP
// result := ( chassis in result ) ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_VAR 0 1
45975: PUSH
45976: LD_VAR 0 3
45980: IN
45981: ST_TO_ADDR
// end ;
45982: LD_VAR 0 3
45986: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45987: LD_INT 0
45989: PPUSH
// if not chassis or not weapon then
45990: LD_VAR 0 1
45994: NOT
45995: PUSH
45996: LD_VAR 0 2
46000: NOT
46001: OR
46002: IFFALSE 46006
// exit ;
46004: GO 47066
// case weapon of us_machine_gun :
46006: LD_VAR 0 2
46010: PUSH
46011: LD_INT 2
46013: DOUBLE
46014: EQUAL
46015: IFTRUE 46019
46017: GO 46049
46019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46020: LD_ADDR_VAR 0 3
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 4
46036: PUSH
46037: LD_INT 5
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: ST_TO_ADDR
46047: GO 47050
46049: LD_INT 3
46051: DOUBLE
46052: EQUAL
46053: IFTRUE 46057
46055: GO 46087
46057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46058: LD_ADDR_VAR 0 3
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 4
46074: PUSH
46075: LD_INT 5
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
46085: GO 47050
46087: LD_INT 11
46089: DOUBLE
46090: EQUAL
46091: IFTRUE 46095
46093: GO 46125
46095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46096: LD_ADDR_VAR 0 3
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: LD_INT 4
46112: PUSH
46113: LD_INT 5
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: ST_TO_ADDR
46123: GO 47050
46125: LD_INT 4
46127: DOUBLE
46128: EQUAL
46129: IFTRUE 46133
46131: GO 46159
46133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46134: LD_ADDR_VAR 0 3
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 4
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
46157: GO 47050
46159: LD_INT 5
46161: DOUBLE
46162: EQUAL
46163: IFTRUE 46167
46165: GO 46193
46167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46168: LD_ADDR_VAR 0 3
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 3
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: ST_TO_ADDR
46191: GO 47050
46193: LD_INT 9
46195: DOUBLE
46196: EQUAL
46197: IFTRUE 46201
46199: GO 46227
46201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46202: LD_ADDR_VAR 0 3
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: LD_INT 4
46215: PUSH
46216: LD_INT 5
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: ST_TO_ADDR
46225: GO 47050
46227: LD_INT 7
46229: DOUBLE
46230: EQUAL
46231: IFTRUE 46235
46233: GO 46261
46235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46236: LD_ADDR_VAR 0 3
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 3
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: LD_INT 5
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
46259: GO 47050
46261: LD_INT 12
46263: DOUBLE
46264: EQUAL
46265: IFTRUE 46269
46267: GO 46295
46269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46270: LD_ADDR_VAR 0 3
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 4
46283: PUSH
46284: LD_INT 5
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
46293: GO 47050
46295: LD_INT 13
46297: DOUBLE
46298: EQUAL
46299: IFTRUE 46303
46301: GO 46329
46303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46304: LD_ADDR_VAR 0 3
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 4
46317: PUSH
46318: LD_INT 5
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: ST_TO_ADDR
46327: GO 47050
46329: LD_INT 14
46331: DOUBLE
46332: EQUAL
46333: IFTRUE 46337
46335: GO 46355
46337: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46338: LD_ADDR_VAR 0 3
46342: PUSH
46343: LD_INT 4
46345: PUSH
46346: LD_INT 5
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: ST_TO_ADDR
46353: GO 47050
46355: LD_INT 6
46357: DOUBLE
46358: EQUAL
46359: IFTRUE 46363
46361: GO 46381
46363: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46364: LD_ADDR_VAR 0 3
46368: PUSH
46369: LD_INT 4
46371: PUSH
46372: LD_INT 5
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: ST_TO_ADDR
46379: GO 47050
46381: LD_INT 10
46383: DOUBLE
46384: EQUAL
46385: IFTRUE 46389
46387: GO 46407
46389: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46390: LD_ADDR_VAR 0 3
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: LD_INT 5
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: ST_TO_ADDR
46405: GO 47050
46407: LD_INT 22
46409: DOUBLE
46410: EQUAL
46411: IFTRUE 46415
46413: GO 46441
46415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46416: LD_ADDR_VAR 0 3
46420: PUSH
46421: LD_INT 11
46423: PUSH
46424: LD_INT 12
46426: PUSH
46427: LD_INT 13
46429: PUSH
46430: LD_INT 14
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
46439: GO 47050
46441: LD_INT 23
46443: DOUBLE
46444: EQUAL
46445: IFTRUE 46449
46447: GO 46475
46449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46450: LD_ADDR_VAR 0 3
46454: PUSH
46455: LD_INT 11
46457: PUSH
46458: LD_INT 12
46460: PUSH
46461: LD_INT 13
46463: PUSH
46464: LD_INT 14
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
46473: GO 47050
46475: LD_INT 24
46477: DOUBLE
46478: EQUAL
46479: IFTRUE 46483
46481: GO 46509
46483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46484: LD_ADDR_VAR 0 3
46488: PUSH
46489: LD_INT 11
46491: PUSH
46492: LD_INT 12
46494: PUSH
46495: LD_INT 13
46497: PUSH
46498: LD_INT 14
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
46507: GO 47050
46509: LD_INT 30
46511: DOUBLE
46512: EQUAL
46513: IFTRUE 46517
46515: GO 46543
46517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_INT 11
46525: PUSH
46526: LD_INT 12
46528: PUSH
46529: LD_INT 13
46531: PUSH
46532: LD_INT 14
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
46541: GO 47050
46543: LD_INT 25
46545: DOUBLE
46546: EQUAL
46547: IFTRUE 46551
46549: GO 46569
46551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46552: LD_ADDR_VAR 0 3
46556: PUSH
46557: LD_INT 13
46559: PUSH
46560: LD_INT 14
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: ST_TO_ADDR
46567: GO 47050
46569: LD_INT 27
46571: DOUBLE
46572: EQUAL
46573: IFTRUE 46577
46575: GO 46595
46577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46578: LD_ADDR_VAR 0 3
46582: PUSH
46583: LD_INT 13
46585: PUSH
46586: LD_INT 14
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: ST_TO_ADDR
46593: GO 47050
46595: LD_INT 92
46597: DOUBLE
46598: EQUAL
46599: IFTRUE 46603
46601: GO 46629
46603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46604: LD_ADDR_VAR 0 3
46608: PUSH
46609: LD_INT 11
46611: PUSH
46612: LD_INT 12
46614: PUSH
46615: LD_INT 13
46617: PUSH
46618: LD_INT 14
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
46627: GO 47050
46629: LD_INT 28
46631: DOUBLE
46632: EQUAL
46633: IFTRUE 46637
46635: GO 46655
46637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46638: LD_ADDR_VAR 0 3
46642: PUSH
46643: LD_INT 13
46645: PUSH
46646: LD_INT 14
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: ST_TO_ADDR
46653: GO 47050
46655: LD_INT 29
46657: DOUBLE
46658: EQUAL
46659: IFTRUE 46663
46661: GO 46681
46663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46664: LD_ADDR_VAR 0 3
46668: PUSH
46669: LD_INT 13
46671: PUSH
46672: LD_INT 14
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: ST_TO_ADDR
46679: GO 47050
46681: LD_INT 31
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46689
46687: GO 46707
46689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46690: LD_ADDR_VAR 0 3
46694: PUSH
46695: LD_INT 13
46697: PUSH
46698: LD_INT 14
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: ST_TO_ADDR
46705: GO 47050
46707: LD_INT 26
46709: DOUBLE
46710: EQUAL
46711: IFTRUE 46715
46713: GO 46733
46715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46716: LD_ADDR_VAR 0 3
46720: PUSH
46721: LD_INT 13
46723: PUSH
46724: LD_INT 14
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: ST_TO_ADDR
46731: GO 47050
46733: LD_INT 42
46735: DOUBLE
46736: EQUAL
46737: IFTRUE 46741
46739: GO 46767
46741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46742: LD_ADDR_VAR 0 3
46746: PUSH
46747: LD_INT 21
46749: PUSH
46750: LD_INT 22
46752: PUSH
46753: LD_INT 23
46755: PUSH
46756: LD_INT 24
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
46765: GO 47050
46767: LD_INT 43
46769: DOUBLE
46770: EQUAL
46771: IFTRUE 46775
46773: GO 46801
46775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46776: LD_ADDR_VAR 0 3
46780: PUSH
46781: LD_INT 21
46783: PUSH
46784: LD_INT 22
46786: PUSH
46787: LD_INT 23
46789: PUSH
46790: LD_INT 24
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
46799: GO 47050
46801: LD_INT 44
46803: DOUBLE
46804: EQUAL
46805: IFTRUE 46809
46807: GO 46835
46809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46810: LD_ADDR_VAR 0 3
46814: PUSH
46815: LD_INT 21
46817: PUSH
46818: LD_INT 22
46820: PUSH
46821: LD_INT 23
46823: PUSH
46824: LD_INT 24
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: ST_TO_ADDR
46833: GO 47050
46835: LD_INT 45
46837: DOUBLE
46838: EQUAL
46839: IFTRUE 46843
46841: GO 46869
46843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46844: LD_ADDR_VAR 0 3
46848: PUSH
46849: LD_INT 21
46851: PUSH
46852: LD_INT 22
46854: PUSH
46855: LD_INT 23
46857: PUSH
46858: LD_INT 24
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
46867: GO 47050
46869: LD_INT 49
46871: DOUBLE
46872: EQUAL
46873: IFTRUE 46877
46875: GO 46903
46877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46878: LD_ADDR_VAR 0 3
46882: PUSH
46883: LD_INT 21
46885: PUSH
46886: LD_INT 22
46888: PUSH
46889: LD_INT 23
46891: PUSH
46892: LD_INT 24
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
46901: GO 47050
46903: LD_INT 51
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46911
46909: GO 46937
46911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46912: LD_ADDR_VAR 0 3
46916: PUSH
46917: LD_INT 21
46919: PUSH
46920: LD_INT 22
46922: PUSH
46923: LD_INT 23
46925: PUSH
46926: LD_INT 24
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
46935: GO 47050
46937: LD_INT 52
46939: DOUBLE
46940: EQUAL
46941: IFTRUE 46945
46943: GO 46971
46945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46946: LD_ADDR_VAR 0 3
46950: PUSH
46951: LD_INT 21
46953: PUSH
46954: LD_INT 22
46956: PUSH
46957: LD_INT 23
46959: PUSH
46960: LD_INT 24
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
46969: GO 47050
46971: LD_INT 53
46973: DOUBLE
46974: EQUAL
46975: IFTRUE 46979
46977: GO 46997
46979: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46980: LD_ADDR_VAR 0 3
46984: PUSH
46985: LD_INT 23
46987: PUSH
46988: LD_INT 24
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: ST_TO_ADDR
46995: GO 47050
46997: LD_INT 46
46999: DOUBLE
47000: EQUAL
47001: IFTRUE 47005
47003: GO 47023
47005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_INT 23
47013: PUSH
47014: LD_INT 24
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: ST_TO_ADDR
47021: GO 47050
47023: LD_INT 47
47025: DOUBLE
47026: EQUAL
47027: IFTRUE 47031
47029: GO 47049
47031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47032: LD_ADDR_VAR 0 3
47036: PUSH
47037: LD_INT 23
47039: PUSH
47040: LD_INT 24
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: ST_TO_ADDR
47047: GO 47050
47049: POP
// result := ( chassis in result ) ;
47050: LD_ADDR_VAR 0 3
47054: PUSH
47055: LD_VAR 0 1
47059: PUSH
47060: LD_VAR 0 3
47064: IN
47065: ST_TO_ADDR
// end ;
47066: LD_VAR 0 3
47070: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47071: LD_INT 0
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
47079: PPUSH
// result := array ;
47080: LD_ADDR_VAR 0 5
47084: PUSH
47085: LD_VAR 0 1
47089: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47090: LD_VAR 0 1
47094: NOT
47095: PUSH
47096: LD_VAR 0 2
47100: NOT
47101: OR
47102: PUSH
47103: LD_VAR 0 3
47107: NOT
47108: OR
47109: PUSH
47110: LD_VAR 0 2
47114: PUSH
47115: LD_VAR 0 1
47119: GREATER
47120: OR
47121: PUSH
47122: LD_VAR 0 3
47126: PUSH
47127: LD_VAR 0 1
47131: GREATER
47132: OR
47133: IFFALSE 47137
// exit ;
47135: GO 47433
// if direction then
47137: LD_VAR 0 4
47141: IFFALSE 47205
// begin d := 1 ;
47143: LD_ADDR_VAR 0 9
47147: PUSH
47148: LD_INT 1
47150: ST_TO_ADDR
// if i_from > i_to then
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 3
47160: GREATER
47161: IFFALSE 47187
// length := ( array - i_from ) + i_to else
47163: LD_ADDR_VAR 0 11
47167: PUSH
47168: LD_VAR 0 1
47172: PUSH
47173: LD_VAR 0 2
47177: MINUS
47178: PUSH
47179: LD_VAR 0 3
47183: PLUS
47184: ST_TO_ADDR
47185: GO 47203
// length := i_to - i_from ;
47187: LD_ADDR_VAR 0 11
47191: PUSH
47192: LD_VAR 0 3
47196: PUSH
47197: LD_VAR 0 2
47201: MINUS
47202: ST_TO_ADDR
// end else
47203: GO 47266
// begin d := - 1 ;
47205: LD_ADDR_VAR 0 9
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: ST_TO_ADDR
// if i_from > i_to then
47214: LD_VAR 0 2
47218: PUSH
47219: LD_VAR 0 3
47223: GREATER
47224: IFFALSE 47244
// length := i_from - i_to else
47226: LD_ADDR_VAR 0 11
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_VAR 0 3
47240: MINUS
47241: ST_TO_ADDR
47242: GO 47266
// length := ( array - i_to ) + i_from ;
47244: LD_ADDR_VAR 0 11
47248: PUSH
47249: LD_VAR 0 1
47253: PUSH
47254: LD_VAR 0 3
47258: MINUS
47259: PUSH
47260: LD_VAR 0 2
47264: PLUS
47265: ST_TO_ADDR
// end ; if not length then
47266: LD_VAR 0 11
47270: NOT
47271: IFFALSE 47275
// exit ;
47273: GO 47433
// tmp := array ;
47275: LD_ADDR_VAR 0 10
47279: PUSH
47280: LD_VAR 0 1
47284: ST_TO_ADDR
// for i = 1 to length do
47285: LD_ADDR_VAR 0 6
47289: PUSH
47290: DOUBLE
47291: LD_INT 1
47293: DEC
47294: ST_TO_ADDR
47295: LD_VAR 0 11
47299: PUSH
47300: FOR_TO
47301: IFFALSE 47421
// begin for j = 1 to array do
47303: LD_ADDR_VAR 0 7
47307: PUSH
47308: DOUBLE
47309: LD_INT 1
47311: DEC
47312: ST_TO_ADDR
47313: LD_VAR 0 1
47317: PUSH
47318: FOR_TO
47319: IFFALSE 47407
// begin k := j + d ;
47321: LD_ADDR_VAR 0 8
47325: PUSH
47326: LD_VAR 0 7
47330: PUSH
47331: LD_VAR 0 9
47335: PLUS
47336: ST_TO_ADDR
// if k > array then
47337: LD_VAR 0 8
47341: PUSH
47342: LD_VAR 0 1
47346: GREATER
47347: IFFALSE 47357
// k := 1 ;
47349: LD_ADDR_VAR 0 8
47353: PUSH
47354: LD_INT 1
47356: ST_TO_ADDR
// if not k then
47357: LD_VAR 0 8
47361: NOT
47362: IFFALSE 47374
// k := array ;
47364: LD_ADDR_VAR 0 8
47368: PUSH
47369: LD_VAR 0 1
47373: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47374: LD_ADDR_VAR 0 10
47378: PUSH
47379: LD_VAR 0 10
47383: PPUSH
47384: LD_VAR 0 8
47388: PPUSH
47389: LD_VAR 0 1
47393: PUSH
47394: LD_VAR 0 7
47398: ARRAY
47399: PPUSH
47400: CALL_OW 1
47404: ST_TO_ADDR
// end ;
47405: GO 47318
47407: POP
47408: POP
// array := tmp ;
47409: LD_ADDR_VAR 0 1
47413: PUSH
47414: LD_VAR 0 10
47418: ST_TO_ADDR
// end ;
47419: GO 47300
47421: POP
47422: POP
// result := array ;
47423: LD_ADDR_VAR 0 5
47427: PUSH
47428: LD_VAR 0 1
47432: ST_TO_ADDR
// end ;
47433: LD_VAR 0 5
47437: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47438: LD_INT 0
47440: PPUSH
47441: PPUSH
// result := 0 ;
47442: LD_ADDR_VAR 0 3
47446: PUSH
47447: LD_INT 0
47449: ST_TO_ADDR
// if not array or not value in array then
47450: LD_VAR 0 1
47454: NOT
47455: PUSH
47456: LD_VAR 0 2
47460: PUSH
47461: LD_VAR 0 1
47465: IN
47466: NOT
47467: OR
47468: IFFALSE 47472
// exit ;
47470: GO 47526
// for i = 1 to array do
47472: LD_ADDR_VAR 0 4
47476: PUSH
47477: DOUBLE
47478: LD_INT 1
47480: DEC
47481: ST_TO_ADDR
47482: LD_VAR 0 1
47486: PUSH
47487: FOR_TO
47488: IFFALSE 47524
// if value = array [ i ] then
47490: LD_VAR 0 2
47494: PUSH
47495: LD_VAR 0 1
47499: PUSH
47500: LD_VAR 0 4
47504: ARRAY
47505: EQUAL
47506: IFFALSE 47522
// begin result := i ;
47508: LD_ADDR_VAR 0 3
47512: PUSH
47513: LD_VAR 0 4
47517: ST_TO_ADDR
// exit ;
47518: POP
47519: POP
47520: GO 47526
// end ;
47522: GO 47487
47524: POP
47525: POP
// end ;
47526: LD_VAR 0 3
47530: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47531: LD_INT 0
47533: PPUSH
// vc_chassis := chassis ;
47534: LD_ADDR_OWVAR 37
47538: PUSH
47539: LD_VAR 0 1
47543: ST_TO_ADDR
// vc_engine := engine ;
47544: LD_ADDR_OWVAR 39
47548: PUSH
47549: LD_VAR 0 2
47553: ST_TO_ADDR
// vc_control := control ;
47554: LD_ADDR_OWVAR 38
47558: PUSH
47559: LD_VAR 0 3
47563: ST_TO_ADDR
// vc_weapon := weapon ;
47564: LD_ADDR_OWVAR 40
47568: PUSH
47569: LD_VAR 0 4
47573: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47574: LD_ADDR_OWVAR 41
47578: PUSH
47579: LD_VAR 0 5
47583: ST_TO_ADDR
// end ;
47584: LD_VAR 0 6
47588: RET
// export function WantPlant ( unit ) ; var task ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
// result := false ;
47593: LD_ADDR_VAR 0 2
47597: PUSH
47598: LD_INT 0
47600: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47601: LD_ADDR_VAR 0 3
47605: PUSH
47606: LD_VAR 0 1
47610: PPUSH
47611: CALL_OW 437
47615: ST_TO_ADDR
// if task then
47616: LD_VAR 0 3
47620: IFFALSE 47648
// if task [ 1 ] [ 1 ] = p then
47622: LD_VAR 0 3
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: PUSH
47631: LD_INT 1
47633: ARRAY
47634: PUSH
47635: LD_STRING p
47637: EQUAL
47638: IFFALSE 47648
// result := true ;
47640: LD_ADDR_VAR 0 2
47644: PUSH
47645: LD_INT 1
47647: ST_TO_ADDR
// end ;
47648: LD_VAR 0 2
47652: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47653: LD_INT 0
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
// if pos < 1 then
47659: LD_VAR 0 2
47663: PUSH
47664: LD_INT 1
47666: LESS
47667: IFFALSE 47671
// exit ;
47669: GO 47974
// if pos = 1 then
47671: LD_VAR 0 2
47675: PUSH
47676: LD_INT 1
47678: EQUAL
47679: IFFALSE 47712
// result := Replace ( arr , pos [ 1 ] , value ) else
47681: LD_ADDR_VAR 0 4
47685: PUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: LD_VAR 0 2
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PPUSH
47700: LD_VAR 0 3
47704: PPUSH
47705: CALL_OW 1
47709: ST_TO_ADDR
47710: GO 47974
// begin tmp := arr ;
47712: LD_ADDR_VAR 0 6
47716: PUSH
47717: LD_VAR 0 1
47721: ST_TO_ADDR
// s_arr := [ tmp ] ;
47722: LD_ADDR_VAR 0 7
47726: PUSH
47727: LD_VAR 0 6
47731: PUSH
47732: EMPTY
47733: LIST
47734: ST_TO_ADDR
// for i = 1 to pos - 1 do
47735: LD_ADDR_VAR 0 5
47739: PUSH
47740: DOUBLE
47741: LD_INT 1
47743: DEC
47744: ST_TO_ADDR
47745: LD_VAR 0 2
47749: PUSH
47750: LD_INT 1
47752: MINUS
47753: PUSH
47754: FOR_TO
47755: IFFALSE 47800
// begin tmp := tmp [ pos [ i ] ] ;
47757: LD_ADDR_VAR 0 6
47761: PUSH
47762: LD_VAR 0 6
47766: PUSH
47767: LD_VAR 0 2
47771: PUSH
47772: LD_VAR 0 5
47776: ARRAY
47777: ARRAY
47778: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47779: LD_ADDR_VAR 0 7
47783: PUSH
47784: LD_VAR 0 7
47788: PUSH
47789: LD_VAR 0 6
47793: PUSH
47794: EMPTY
47795: LIST
47796: ADD
47797: ST_TO_ADDR
// end ;
47798: GO 47754
47800: POP
47801: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47802: LD_ADDR_VAR 0 6
47806: PUSH
47807: LD_VAR 0 6
47811: PPUSH
47812: LD_VAR 0 2
47816: PUSH
47817: LD_VAR 0 2
47821: ARRAY
47822: PPUSH
47823: LD_VAR 0 3
47827: PPUSH
47828: CALL_OW 1
47832: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47833: LD_ADDR_VAR 0 7
47837: PUSH
47838: LD_VAR 0 7
47842: PPUSH
47843: LD_VAR 0 7
47847: PPUSH
47848: LD_VAR 0 6
47852: PPUSH
47853: CALL_OW 1
47857: ST_TO_ADDR
// for i = s_arr downto 2 do
47858: LD_ADDR_VAR 0 5
47862: PUSH
47863: DOUBLE
47864: LD_VAR 0 7
47868: INC
47869: ST_TO_ADDR
47870: LD_INT 2
47872: PUSH
47873: FOR_DOWNTO
47874: IFFALSE 47958
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47876: LD_ADDR_VAR 0 6
47880: PUSH
47881: LD_VAR 0 7
47885: PUSH
47886: LD_VAR 0 5
47890: PUSH
47891: LD_INT 1
47893: MINUS
47894: ARRAY
47895: PPUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_VAR 0 5
47905: PUSH
47906: LD_INT 1
47908: MINUS
47909: ARRAY
47910: PPUSH
47911: LD_VAR 0 7
47915: PUSH
47916: LD_VAR 0 5
47920: ARRAY
47921: PPUSH
47922: CALL_OW 1
47926: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47927: LD_ADDR_VAR 0 7
47931: PUSH
47932: LD_VAR 0 7
47936: PPUSH
47937: LD_VAR 0 5
47941: PUSH
47942: LD_INT 1
47944: MINUS
47945: PPUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: CALL_OW 1
47955: ST_TO_ADDR
// end ;
47956: GO 47873
47958: POP
47959: POP
// result := s_arr [ 1 ] ;
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: LD_VAR 0 7
47969: PUSH
47970: LD_INT 1
47972: ARRAY
47973: ST_TO_ADDR
// end ; end ;
47974: LD_VAR 0 4
47978: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47979: LD_INT 0
47981: PPUSH
47982: PPUSH
// if not list then
47983: LD_VAR 0 1
47987: NOT
47988: IFFALSE 47992
// exit ;
47990: GO 48083
// i := list [ pos1 ] ;
47992: LD_ADDR_VAR 0 5
47996: PUSH
47997: LD_VAR 0 1
48001: PUSH
48002: LD_VAR 0 2
48006: ARRAY
48007: ST_TO_ADDR
// if not i then
48008: LD_VAR 0 5
48012: NOT
48013: IFFALSE 48017
// exit ;
48015: GO 48083
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48017: LD_ADDR_VAR 0 1
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: LD_VAR 0 2
48031: PPUSH
48032: LD_VAR 0 1
48036: PUSH
48037: LD_VAR 0 3
48041: ARRAY
48042: PPUSH
48043: CALL_OW 1
48047: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48048: LD_ADDR_VAR 0 1
48052: PUSH
48053: LD_VAR 0 1
48057: PPUSH
48058: LD_VAR 0 3
48062: PPUSH
48063: LD_VAR 0 5
48067: PPUSH
48068: CALL_OW 1
48072: ST_TO_ADDR
// result := list ;
48073: LD_ADDR_VAR 0 4
48077: PUSH
48078: LD_VAR 0 1
48082: ST_TO_ADDR
// end ;
48083: LD_VAR 0 4
48087: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48088: LD_INT 0
48090: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48091: LD_ADDR_VAR 0 5
48095: PUSH
48096: LD_VAR 0 1
48100: PPUSH
48101: CALL_OW 250
48105: PPUSH
48106: LD_VAR 0 1
48110: PPUSH
48111: CALL_OW 251
48115: PPUSH
48116: LD_VAR 0 2
48120: PPUSH
48121: LD_VAR 0 3
48125: PPUSH
48126: LD_VAR 0 4
48130: PPUSH
48131: CALL 48509 0 5
48135: ST_TO_ADDR
// end ;
48136: LD_VAR 0 5
48140: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48141: LD_INT 0
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
// if not list or not unit then
48147: LD_VAR 0 2
48151: NOT
48152: PUSH
48153: LD_VAR 0 1
48157: NOT
48158: OR
48159: IFFALSE 48163
// exit ;
48161: GO 48504
// result := [ ] ;
48163: LD_ADDR_VAR 0 5
48167: PUSH
48168: EMPTY
48169: ST_TO_ADDR
// for i in list do
48170: LD_ADDR_VAR 0 6
48174: PUSH
48175: LD_VAR 0 2
48179: PUSH
48180: FOR_IN
48181: IFFALSE 48399
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48183: LD_ADDR_VAR 0 8
48187: PUSH
48188: LD_VAR 0 1
48192: PPUSH
48193: LD_VAR 0 6
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PPUSH
48202: LD_VAR 0 6
48206: PUSH
48207: LD_INT 2
48209: ARRAY
48210: PPUSH
48211: CALL_OW 297
48215: ST_TO_ADDR
// if not Count ( result ) then
48216: LD_VAR 0 5
48220: PPUSH
48221: CALL 44793 0 1
48225: NOT
48226: IFFALSE 48259
// begin result := Join ( result , [ i , tmp ] ) ;
48228: LD_ADDR_VAR 0 5
48232: PUSH
48233: LD_VAR 0 5
48237: PPUSH
48238: LD_VAR 0 6
48242: PUSH
48243: LD_VAR 0 8
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PPUSH
48252: CALL 80382 0 2
48256: ST_TO_ADDR
// continue ;
48257: GO 48180
// end ; if result [ result ] [ 2 ] <= tmp then
48259: LD_VAR 0 5
48263: PUSH
48264: LD_VAR 0 5
48268: ARRAY
48269: PUSH
48270: LD_INT 2
48272: ARRAY
48273: PUSH
48274: LD_VAR 0 8
48278: LESSEQUAL
48279: IFFALSE 48312
// result := Join ( result , [ i , tmp ] ) else
48281: LD_ADDR_VAR 0 5
48285: PUSH
48286: LD_VAR 0 5
48290: PPUSH
48291: LD_VAR 0 6
48295: PUSH
48296: LD_VAR 0 8
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PPUSH
48305: CALL 80382 0 2
48309: ST_TO_ADDR
48310: GO 48397
// begin for j := 1 to Count ( result ) do
48312: LD_ADDR_VAR 0 7
48316: PUSH
48317: DOUBLE
48318: LD_INT 1
48320: DEC
48321: ST_TO_ADDR
48322: LD_VAR 0 5
48326: PPUSH
48327: CALL 44793 0 1
48331: PUSH
48332: FOR_TO
48333: IFFALSE 48395
// begin if tmp < result [ j ] [ 2 ] then
48335: LD_VAR 0 8
48339: PUSH
48340: LD_VAR 0 5
48344: PUSH
48345: LD_VAR 0 7
48349: ARRAY
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: LESS
48355: IFFALSE 48393
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48357: LD_ADDR_VAR 0 5
48361: PUSH
48362: LD_VAR 0 5
48366: PPUSH
48367: LD_VAR 0 7
48371: PPUSH
48372: LD_VAR 0 6
48376: PUSH
48377: LD_VAR 0 8
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 2
48390: ST_TO_ADDR
// break ;
48391: GO 48395
// end ; end ;
48393: GO 48332
48395: POP
48396: POP
// end ; end ;
48397: GO 48180
48399: POP
48400: POP
// if result and not asc then
48401: LD_VAR 0 5
48405: PUSH
48406: LD_VAR 0 3
48410: NOT
48411: AND
48412: IFFALSE 48429
// result := ReverseArray ( result ) ;
48414: LD_ADDR_VAR 0 5
48418: PUSH
48419: LD_VAR 0 5
48423: PPUSH
48424: CALL 75669 0 1
48428: ST_TO_ADDR
// tmp := [ ] ;
48429: LD_ADDR_VAR 0 8
48433: PUSH
48434: EMPTY
48435: ST_TO_ADDR
// if mode then
48436: LD_VAR 0 4
48440: IFFALSE 48504
// begin for i := 1 to result do
48442: LD_ADDR_VAR 0 6
48446: PUSH
48447: DOUBLE
48448: LD_INT 1
48450: DEC
48451: ST_TO_ADDR
48452: LD_VAR 0 5
48456: PUSH
48457: FOR_TO
48458: IFFALSE 48492
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48460: LD_ADDR_VAR 0 8
48464: PUSH
48465: LD_VAR 0 8
48469: PPUSH
48470: LD_VAR 0 5
48474: PUSH
48475: LD_VAR 0 6
48479: ARRAY
48480: PUSH
48481: LD_INT 1
48483: ARRAY
48484: PPUSH
48485: CALL 80382 0 2
48489: ST_TO_ADDR
48490: GO 48457
48492: POP
48493: POP
// result := tmp ;
48494: LD_ADDR_VAR 0 5
48498: PUSH
48499: LD_VAR 0 8
48503: ST_TO_ADDR
// end ; end ;
48504: LD_VAR 0 5
48508: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48509: LD_INT 0
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
// if not list then
48515: LD_VAR 0 3
48519: NOT
48520: IFFALSE 48524
// exit ;
48522: GO 48912
// result := [ ] ;
48524: LD_ADDR_VAR 0 6
48528: PUSH
48529: EMPTY
48530: ST_TO_ADDR
// for i in list do
48531: LD_ADDR_VAR 0 7
48535: PUSH
48536: LD_VAR 0 3
48540: PUSH
48541: FOR_IN
48542: IFFALSE 48744
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48544: LD_ADDR_VAR 0 9
48548: PUSH
48549: LD_VAR 0 7
48553: PPUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: CALL_OW 297
48568: ST_TO_ADDR
// if not result then
48569: LD_VAR 0 6
48573: NOT
48574: IFFALSE 48600
// result := [ [ i , tmp ] ] else
48576: LD_ADDR_VAR 0 6
48580: PUSH
48581: LD_VAR 0 7
48585: PUSH
48586: LD_VAR 0 9
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: ST_TO_ADDR
48598: GO 48742
// begin if result [ result ] [ 2 ] < tmp then
48600: LD_VAR 0 6
48604: PUSH
48605: LD_VAR 0 6
48609: ARRAY
48610: PUSH
48611: LD_INT 2
48613: ARRAY
48614: PUSH
48615: LD_VAR 0 9
48619: LESS
48620: IFFALSE 48662
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48622: LD_ADDR_VAR 0 6
48626: PUSH
48627: LD_VAR 0 6
48631: PPUSH
48632: LD_VAR 0 6
48636: PUSH
48637: LD_INT 1
48639: PLUS
48640: PPUSH
48641: LD_VAR 0 7
48645: PUSH
48646: LD_VAR 0 9
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PPUSH
48655: CALL_OW 2
48659: ST_TO_ADDR
48660: GO 48742
// for j = 1 to result do
48662: LD_ADDR_VAR 0 8
48666: PUSH
48667: DOUBLE
48668: LD_INT 1
48670: DEC
48671: ST_TO_ADDR
48672: LD_VAR 0 6
48676: PUSH
48677: FOR_TO
48678: IFFALSE 48740
// begin if tmp < result [ j ] [ 2 ] then
48680: LD_VAR 0 9
48684: PUSH
48685: LD_VAR 0 6
48689: PUSH
48690: LD_VAR 0 8
48694: ARRAY
48695: PUSH
48696: LD_INT 2
48698: ARRAY
48699: LESS
48700: IFFALSE 48738
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48702: LD_ADDR_VAR 0 6
48706: PUSH
48707: LD_VAR 0 6
48711: PPUSH
48712: LD_VAR 0 8
48716: PPUSH
48717: LD_VAR 0 7
48721: PUSH
48722: LD_VAR 0 9
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PPUSH
48731: CALL_OW 2
48735: ST_TO_ADDR
// break ;
48736: GO 48740
// end ; end ;
48738: GO 48677
48740: POP
48741: POP
// end ; end ;
48742: GO 48541
48744: POP
48745: POP
// if result and not asc then
48746: LD_VAR 0 6
48750: PUSH
48751: LD_VAR 0 4
48755: NOT
48756: AND
48757: IFFALSE 48832
// begin tmp := result ;
48759: LD_ADDR_VAR 0 9
48763: PUSH
48764: LD_VAR 0 6
48768: ST_TO_ADDR
// for i = tmp downto 1 do
48769: LD_ADDR_VAR 0 7
48773: PUSH
48774: DOUBLE
48775: LD_VAR 0 9
48779: INC
48780: ST_TO_ADDR
48781: LD_INT 1
48783: PUSH
48784: FOR_DOWNTO
48785: IFFALSE 48830
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48787: LD_ADDR_VAR 0 6
48791: PUSH
48792: LD_VAR 0 6
48796: PPUSH
48797: LD_VAR 0 9
48801: PUSH
48802: LD_VAR 0 7
48806: MINUS
48807: PUSH
48808: LD_INT 1
48810: PLUS
48811: PPUSH
48812: LD_VAR 0 9
48816: PUSH
48817: LD_VAR 0 7
48821: ARRAY
48822: PPUSH
48823: CALL_OW 1
48827: ST_TO_ADDR
48828: GO 48784
48830: POP
48831: POP
// end ; tmp := [ ] ;
48832: LD_ADDR_VAR 0 9
48836: PUSH
48837: EMPTY
48838: ST_TO_ADDR
// if mode then
48839: LD_VAR 0 5
48843: IFFALSE 48912
// begin for i = 1 to result do
48845: LD_ADDR_VAR 0 7
48849: PUSH
48850: DOUBLE
48851: LD_INT 1
48853: DEC
48854: ST_TO_ADDR
48855: LD_VAR 0 6
48859: PUSH
48860: FOR_TO
48861: IFFALSE 48900
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48863: LD_ADDR_VAR 0 9
48867: PUSH
48868: LD_VAR 0 9
48872: PPUSH
48873: LD_VAR 0 7
48877: PPUSH
48878: LD_VAR 0 6
48882: PUSH
48883: LD_VAR 0 7
48887: ARRAY
48888: PUSH
48889: LD_INT 1
48891: ARRAY
48892: PPUSH
48893: CALL_OW 1
48897: ST_TO_ADDR
48898: GO 48860
48900: POP
48901: POP
// result := tmp ;
48902: LD_ADDR_VAR 0 6
48906: PUSH
48907: LD_VAR 0 9
48911: ST_TO_ADDR
// end ; end ;
48912: LD_VAR 0 6
48916: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
48921: PPUSH
48922: PPUSH
48923: PPUSH
48924: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48925: LD_ADDR_VAR 0 5
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// if not x or not y then
48947: LD_VAR 0 2
48951: NOT
48952: PUSH
48953: LD_VAR 0 3
48957: NOT
48958: OR
48959: IFFALSE 48963
// exit ;
48961: GO 50613
// if not range then
48963: LD_VAR 0 4
48967: NOT
48968: IFFALSE 48978
// range := 10 ;
48970: LD_ADDR_VAR 0 4
48974: PUSH
48975: LD_INT 10
48977: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48978: LD_ADDR_VAR 0 8
48982: PUSH
48983: LD_INT 81
48985: PUSH
48986: LD_VAR 0 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 92
48997: PUSH
48998: LD_VAR 0 2
49002: PUSH
49003: LD_VAR 0 3
49007: PUSH
49008: LD_VAR 0 4
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 21
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: LIST
49040: PPUSH
49041: CALL_OW 69
49045: ST_TO_ADDR
// if not tmp then
49046: LD_VAR 0 8
49050: NOT
49051: IFFALSE 49055
// exit ;
49053: GO 50613
// for i in tmp do
49055: LD_ADDR_VAR 0 6
49059: PUSH
49060: LD_VAR 0 8
49064: PUSH
49065: FOR_IN
49066: IFFALSE 50588
// begin points := [ 0 , 0 , 0 ] ;
49068: LD_ADDR_VAR 0 9
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// bpoints := 1 ;
49087: LD_ADDR_VAR 0 10
49091: PUSH
49092: LD_INT 1
49094: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49095: LD_VAR 0 6
49099: PPUSH
49100: CALL_OW 247
49104: PUSH
49105: LD_INT 1
49107: DOUBLE
49108: EQUAL
49109: IFTRUE 49113
49111: GO 49691
49113: POP
// begin if GetClass ( i ) = 1 then
49114: LD_VAR 0 6
49118: PPUSH
49119: CALL_OW 257
49123: PUSH
49124: LD_INT 1
49126: EQUAL
49127: IFFALSE 49148
// points := [ 10 , 5 , 3 ] ;
49129: LD_ADDR_VAR 0 9
49133: PUSH
49134: LD_INT 10
49136: PUSH
49137: LD_INT 5
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49148: LD_VAR 0 6
49152: PPUSH
49153: CALL_OW 257
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 4
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: IN
49172: IFFALSE 49193
// points := [ 3 , 2 , 1 ] ;
49174: LD_ADDR_VAR 0 9
49178: PUSH
49179: LD_INT 3
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49193: LD_VAR 0 6
49197: PPUSH
49198: CALL_OW 257
49202: PUSH
49203: LD_INT 5
49205: EQUAL
49206: IFFALSE 49227
// points := [ 130 , 5 , 2 ] ;
49208: LD_ADDR_VAR 0 9
49212: PUSH
49213: LD_INT 130
49215: PUSH
49216: LD_INT 5
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49227: LD_VAR 0 6
49231: PPUSH
49232: CALL_OW 257
49236: PUSH
49237: LD_INT 8
49239: EQUAL
49240: IFFALSE 49261
// points := [ 35 , 35 , 30 ] ;
49242: LD_ADDR_VAR 0 9
49246: PUSH
49247: LD_INT 35
49249: PUSH
49250: LD_INT 35
49252: PUSH
49253: LD_INT 30
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49261: LD_VAR 0 6
49265: PPUSH
49266: CALL_OW 257
49270: PUSH
49271: LD_INT 9
49273: EQUAL
49274: IFFALSE 49295
// points := [ 20 , 55 , 40 ] ;
49276: LD_ADDR_VAR 0 9
49280: PUSH
49281: LD_INT 20
49283: PUSH
49284: LD_INT 55
49286: PUSH
49287: LD_INT 40
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49295: LD_VAR 0 6
49299: PPUSH
49300: CALL_OW 257
49304: PUSH
49305: LD_INT 12
49307: PUSH
49308: LD_INT 16
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: IN
49315: IFFALSE 49336
// points := [ 5 , 3 , 2 ] ;
49317: LD_ADDR_VAR 0 9
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49336: LD_VAR 0 6
49340: PPUSH
49341: CALL_OW 257
49345: PUSH
49346: LD_INT 17
49348: EQUAL
49349: IFFALSE 49370
// points := [ 100 , 50 , 75 ] ;
49351: LD_ADDR_VAR 0 9
49355: PUSH
49356: LD_INT 100
49358: PUSH
49359: LD_INT 50
49361: PUSH
49362: LD_INT 75
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49370: LD_VAR 0 6
49374: PPUSH
49375: CALL_OW 257
49379: PUSH
49380: LD_INT 15
49382: EQUAL
49383: IFFALSE 49404
// points := [ 10 , 5 , 3 ] ;
49385: LD_ADDR_VAR 0 9
49389: PUSH
49390: LD_INT 10
49392: PUSH
49393: LD_INT 5
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49404: LD_VAR 0 6
49408: PPUSH
49409: CALL_OW 257
49413: PUSH
49414: LD_INT 14
49416: EQUAL
49417: IFFALSE 49438
// points := [ 10 , 0 , 0 ] ;
49419: LD_ADDR_VAR 0 9
49423: PUSH
49424: LD_INT 10
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49438: LD_VAR 0 6
49442: PPUSH
49443: CALL_OW 257
49447: PUSH
49448: LD_INT 11
49450: EQUAL
49451: IFFALSE 49472
// points := [ 30 , 10 , 5 ] ;
49453: LD_ADDR_VAR 0 9
49457: PUSH
49458: LD_INT 30
49460: PUSH
49461: LD_INT 10
49463: PUSH
49464: LD_INT 5
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49472: LD_VAR 0 1
49476: PPUSH
49477: LD_INT 5
49479: PPUSH
49480: CALL_OW 321
49484: PUSH
49485: LD_INT 2
49487: EQUAL
49488: IFFALSE 49505
// bpoints := bpoints * 1.8 ;
49490: LD_ADDR_VAR 0 10
49494: PUSH
49495: LD_VAR 0 10
49499: PUSH
49500: LD_REAL  1.80000000000000E+0000
49503: MUL
49504: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49505: LD_VAR 0 6
49509: PPUSH
49510: CALL_OW 257
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: LD_INT 4
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: IN
49533: PUSH
49534: LD_VAR 0 1
49538: PPUSH
49539: LD_INT 51
49541: PPUSH
49542: CALL_OW 321
49546: PUSH
49547: LD_INT 2
49549: EQUAL
49550: AND
49551: IFFALSE 49568
// bpoints := bpoints * 1.2 ;
49553: LD_ADDR_VAR 0 10
49557: PUSH
49558: LD_VAR 0 10
49562: PUSH
49563: LD_REAL  1.20000000000000E+0000
49566: MUL
49567: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49568: LD_VAR 0 6
49572: PPUSH
49573: CALL_OW 257
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: LD_INT 7
49583: PUSH
49584: LD_INT 9
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: IN
49592: PUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: LD_INT 52
49600: PPUSH
49601: CALL_OW 321
49605: PUSH
49606: LD_INT 2
49608: EQUAL
49609: AND
49610: IFFALSE 49627
// bpoints := bpoints * 1.5 ;
49612: LD_ADDR_VAR 0 10
49616: PUSH
49617: LD_VAR 0 10
49621: PUSH
49622: LD_REAL  1.50000000000000E+0000
49625: MUL
49626: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_INT 66
49634: PPUSH
49635: CALL_OW 321
49639: PUSH
49640: LD_INT 2
49642: EQUAL
49643: IFFALSE 49660
// bpoints := bpoints * 1.1 ;
49645: LD_ADDR_VAR 0 10
49649: PUSH
49650: LD_VAR 0 10
49654: PUSH
49655: LD_REAL  1.10000000000000E+0000
49658: MUL
49659: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49660: LD_ADDR_VAR 0 10
49664: PUSH
49665: LD_VAR 0 10
49669: PUSH
49670: LD_VAR 0 6
49674: PPUSH
49675: LD_INT 1
49677: PPUSH
49678: CALL_OW 259
49682: PUSH
49683: LD_REAL  1.15000000000000E+0000
49686: MUL
49687: MUL
49688: ST_TO_ADDR
// end ; unit_vehicle :
49689: GO 50517
49691: LD_INT 2
49693: DOUBLE
49694: EQUAL
49695: IFTRUE 49699
49697: GO 50505
49699: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49700: LD_VAR 0 6
49704: PPUSH
49705: CALL_OW 264
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 42
49715: PUSH
49716: LD_INT 24
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: IN
49724: IFFALSE 49745
// points := [ 25 , 5 , 3 ] ;
49726: LD_ADDR_VAR 0 9
49730: PUSH
49731: LD_INT 25
49733: PUSH
49734: LD_INT 5
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49745: LD_VAR 0 6
49749: PPUSH
49750: CALL_OW 264
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: LD_INT 43
49760: PUSH
49761: LD_INT 25
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: IN
49769: IFFALSE 49790
// points := [ 40 , 15 , 5 ] ;
49771: LD_ADDR_VAR 0 9
49775: PUSH
49776: LD_INT 40
49778: PUSH
49779: LD_INT 15
49781: PUSH
49782: LD_INT 5
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49790: LD_VAR 0 6
49794: PPUSH
49795: CALL_OW 264
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: LD_INT 23
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: IN
49810: IFFALSE 49831
// points := [ 7 , 25 , 8 ] ;
49812: LD_ADDR_VAR 0 9
49816: PUSH
49817: LD_INT 7
49819: PUSH
49820: LD_INT 25
49822: PUSH
49823: LD_INT 8
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49831: LD_VAR 0 6
49835: PPUSH
49836: CALL_OW 264
49840: PUSH
49841: LD_INT 5
49843: PUSH
49844: LD_INT 27
49846: PUSH
49847: LD_INT 44
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: IN
49855: IFFALSE 49876
// points := [ 14 , 50 , 16 ] ;
49857: LD_ADDR_VAR 0 9
49861: PUSH
49862: LD_INT 14
49864: PUSH
49865: LD_INT 50
49867: PUSH
49868: LD_INT 16
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49876: LD_VAR 0 6
49880: PPUSH
49881: CALL_OW 264
49885: PUSH
49886: LD_INT 6
49888: PUSH
49889: LD_INT 46
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: IN
49896: IFFALSE 49917
// points := [ 32 , 120 , 70 ] ;
49898: LD_ADDR_VAR 0 9
49902: PUSH
49903: LD_INT 32
49905: PUSH
49906: LD_INT 120
49908: PUSH
49909: LD_INT 70
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49917: LD_VAR 0 6
49921: PPUSH
49922: CALL_OW 264
49926: PUSH
49927: LD_INT 7
49929: PUSH
49930: LD_INT 28
49932: PUSH
49933: LD_INT 45
49935: PUSH
49936: LD_INT 92
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: IN
49945: IFFALSE 49966
// points := [ 35 , 20 , 45 ] ;
49947: LD_ADDR_VAR 0 9
49951: PUSH
49952: LD_INT 35
49954: PUSH
49955: LD_INT 20
49957: PUSH
49958: LD_INT 45
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49966: LD_VAR 0 6
49970: PPUSH
49971: CALL_OW 264
49975: PUSH
49976: LD_INT 47
49978: PUSH
49979: EMPTY
49980: LIST
49981: IN
49982: IFFALSE 50003
// points := [ 67 , 45 , 75 ] ;
49984: LD_ADDR_VAR 0 9
49988: PUSH
49989: LD_INT 67
49991: PUSH
49992: LD_INT 45
49994: PUSH
49995: LD_INT 75
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50003: LD_VAR 0 6
50007: PPUSH
50008: CALL_OW 264
50012: PUSH
50013: LD_INT 26
50015: PUSH
50016: EMPTY
50017: LIST
50018: IN
50019: IFFALSE 50040
// points := [ 120 , 30 , 80 ] ;
50021: LD_ADDR_VAR 0 9
50025: PUSH
50026: LD_INT 120
50028: PUSH
50029: LD_INT 30
50031: PUSH
50032: LD_INT 80
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50040: LD_VAR 0 6
50044: PPUSH
50045: CALL_OW 264
50049: PUSH
50050: LD_INT 22
50052: PUSH
50053: EMPTY
50054: LIST
50055: IN
50056: IFFALSE 50077
// points := [ 40 , 1 , 1 ] ;
50058: LD_ADDR_VAR 0 9
50062: PUSH
50063: LD_INT 40
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50077: LD_VAR 0 6
50081: PPUSH
50082: CALL_OW 264
50086: PUSH
50087: LD_INT 29
50089: PUSH
50090: EMPTY
50091: LIST
50092: IN
50093: IFFALSE 50114
// points := [ 70 , 200 , 400 ] ;
50095: LD_ADDR_VAR 0 9
50099: PUSH
50100: LD_INT 70
50102: PUSH
50103: LD_INT 200
50105: PUSH
50106: LD_INT 400
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50114: LD_VAR 0 6
50118: PPUSH
50119: CALL_OW 264
50123: PUSH
50124: LD_INT 14
50126: PUSH
50127: LD_INT 53
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: IN
50134: IFFALSE 50155
// points := [ 40 , 10 , 20 ] ;
50136: LD_ADDR_VAR 0 9
50140: PUSH
50141: LD_INT 40
50143: PUSH
50144: LD_INT 10
50146: PUSH
50147: LD_INT 20
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50155: LD_VAR 0 6
50159: PPUSH
50160: CALL_OW 264
50164: PUSH
50165: LD_INT 9
50167: PUSH
50168: EMPTY
50169: LIST
50170: IN
50171: IFFALSE 50192
// points := [ 5 , 70 , 20 ] ;
50173: LD_ADDR_VAR 0 9
50177: PUSH
50178: LD_INT 5
50180: PUSH
50181: LD_INT 70
50183: PUSH
50184: LD_INT 20
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50192: LD_VAR 0 6
50196: PPUSH
50197: CALL_OW 264
50201: PUSH
50202: LD_INT 10
50204: PUSH
50205: EMPTY
50206: LIST
50207: IN
50208: IFFALSE 50229
// points := [ 35 , 110 , 70 ] ;
50210: LD_ADDR_VAR 0 9
50214: PUSH
50215: LD_INT 35
50217: PUSH
50218: LD_INT 110
50220: PUSH
50221: LD_INT 70
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50229: LD_VAR 0 6
50233: PPUSH
50234: CALL_OW 265
50238: PUSH
50239: LD_INT 25
50241: EQUAL
50242: IFFALSE 50263
// points := [ 80 , 65 , 100 ] ;
50244: LD_ADDR_VAR 0 9
50248: PUSH
50249: LD_INT 80
50251: PUSH
50252: LD_INT 65
50254: PUSH
50255: LD_INT 100
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50263: LD_VAR 0 6
50267: PPUSH
50268: CALL_OW 263
50272: PUSH
50273: LD_INT 1
50275: EQUAL
50276: IFFALSE 50311
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50278: LD_ADDR_VAR 0 10
50282: PUSH
50283: LD_VAR 0 10
50287: PUSH
50288: LD_VAR 0 6
50292: PPUSH
50293: CALL_OW 311
50297: PPUSH
50298: LD_INT 3
50300: PPUSH
50301: CALL_OW 259
50305: PUSH
50306: LD_INT 4
50308: MUL
50309: MUL
50310: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50311: LD_VAR 0 6
50315: PPUSH
50316: CALL_OW 263
50320: PUSH
50321: LD_INT 2
50323: EQUAL
50324: IFFALSE 50375
// begin j := IsControledBy ( i ) ;
50326: LD_ADDR_VAR 0 7
50330: PUSH
50331: LD_VAR 0 6
50335: PPUSH
50336: CALL_OW 312
50340: ST_TO_ADDR
// if j then
50341: LD_VAR 0 7
50345: IFFALSE 50375
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50347: LD_ADDR_VAR 0 10
50351: PUSH
50352: LD_VAR 0 10
50356: PUSH
50357: LD_VAR 0 7
50361: PPUSH
50362: LD_INT 3
50364: PPUSH
50365: CALL_OW 259
50369: PUSH
50370: LD_INT 3
50372: MUL
50373: MUL
50374: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50375: LD_VAR 0 6
50379: PPUSH
50380: CALL_OW 264
50384: PUSH
50385: LD_INT 5
50387: PUSH
50388: LD_INT 6
50390: PUSH
50391: LD_INT 46
50393: PUSH
50394: LD_INT 44
50396: PUSH
50397: LD_INT 47
50399: PUSH
50400: LD_INT 45
50402: PUSH
50403: LD_INT 28
50405: PUSH
50406: LD_INT 7
50408: PUSH
50409: LD_INT 27
50411: PUSH
50412: LD_INT 29
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: IN
50427: PUSH
50428: LD_VAR 0 1
50432: PPUSH
50433: LD_INT 52
50435: PPUSH
50436: CALL_OW 321
50440: PUSH
50441: LD_INT 2
50443: EQUAL
50444: AND
50445: IFFALSE 50462
// bpoints := bpoints * 1.2 ;
50447: LD_ADDR_VAR 0 10
50451: PUSH
50452: LD_VAR 0 10
50456: PUSH
50457: LD_REAL  1.20000000000000E+0000
50460: MUL
50461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50462: LD_VAR 0 6
50466: PPUSH
50467: CALL_OW 264
50471: PUSH
50472: LD_INT 6
50474: PUSH
50475: LD_INT 46
50477: PUSH
50478: LD_INT 47
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: IN
50486: IFFALSE 50503
// bpoints := bpoints * 1.2 ;
50488: LD_ADDR_VAR 0 10
50492: PUSH
50493: LD_VAR 0 10
50497: PUSH
50498: LD_REAL  1.20000000000000E+0000
50501: MUL
50502: ST_TO_ADDR
// end ; unit_building :
50503: GO 50517
50505: LD_INT 3
50507: DOUBLE
50508: EQUAL
50509: IFTRUE 50513
50511: GO 50516
50513: POP
// ; end ;
50514: GO 50517
50516: POP
// for j = 1 to 3 do
50517: LD_ADDR_VAR 0 7
50521: PUSH
50522: DOUBLE
50523: LD_INT 1
50525: DEC
50526: ST_TO_ADDR
50527: LD_INT 3
50529: PUSH
50530: FOR_TO
50531: IFFALSE 50584
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50533: LD_ADDR_VAR 0 5
50537: PUSH
50538: LD_VAR 0 5
50542: PPUSH
50543: LD_VAR 0 7
50547: PPUSH
50548: LD_VAR 0 5
50552: PUSH
50553: LD_VAR 0 7
50557: ARRAY
50558: PUSH
50559: LD_VAR 0 9
50563: PUSH
50564: LD_VAR 0 7
50568: ARRAY
50569: PUSH
50570: LD_VAR 0 10
50574: MUL
50575: PLUS
50576: PPUSH
50577: CALL_OW 1
50581: ST_TO_ADDR
50582: GO 50530
50584: POP
50585: POP
// end ;
50586: GO 49065
50588: POP
50589: POP
// result := Replace ( result , 4 , tmp ) ;
50590: LD_ADDR_VAR 0 5
50594: PUSH
50595: LD_VAR 0 5
50599: PPUSH
50600: LD_INT 4
50602: PPUSH
50603: LD_VAR 0 8
50607: PPUSH
50608: CALL_OW 1
50612: ST_TO_ADDR
// end ;
50613: LD_VAR 0 5
50617: RET
// export function DangerAtRange ( unit , range ) ; begin
50618: LD_INT 0
50620: PPUSH
// if not unit then
50621: LD_VAR 0 1
50625: NOT
50626: IFFALSE 50630
// exit ;
50628: GO 50675
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50630: LD_ADDR_VAR 0 3
50634: PUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 255
50644: PPUSH
50645: LD_VAR 0 1
50649: PPUSH
50650: CALL_OW 250
50654: PPUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: CALL_OW 251
50664: PPUSH
50665: LD_VAR 0 2
50669: PPUSH
50670: CALL 48917 0 4
50674: ST_TO_ADDR
// end ;
50675: LD_VAR 0 3
50679: RET
// export function DangerInArea ( side , area ) ; begin
50680: LD_INT 0
50682: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50683: LD_ADDR_VAR 0 3
50687: PUSH
50688: LD_VAR 0 2
50692: PPUSH
50693: LD_INT 81
50695: PUSH
50696: LD_VAR 0 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PPUSH
50705: CALL_OW 70
50709: ST_TO_ADDR
// end ;
50710: LD_VAR 0 3
50714: RET
// export function IsExtension ( b ) ; begin
50715: LD_INT 0
50717: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50718: LD_ADDR_VAR 0 2
50722: PUSH
50723: LD_VAR 0 1
50727: PUSH
50728: LD_INT 23
50730: PUSH
50731: LD_INT 20
50733: PUSH
50734: LD_INT 22
50736: PUSH
50737: LD_INT 17
50739: PUSH
50740: LD_INT 24
50742: PUSH
50743: LD_INT 21
50745: PUSH
50746: LD_INT 19
50748: PUSH
50749: LD_INT 16
50751: PUSH
50752: LD_INT 25
50754: PUSH
50755: LD_INT 18
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: IN
50770: ST_TO_ADDR
// end ;
50771: LD_VAR 0 2
50775: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50776: LD_INT 0
50778: PPUSH
50779: PPUSH
50780: PPUSH
// result := [ ] ;
50781: LD_ADDR_VAR 0 4
50785: PUSH
50786: EMPTY
50787: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50788: LD_ADDR_VAR 0 5
50792: PUSH
50793: LD_VAR 0 2
50797: PPUSH
50798: LD_INT 21
50800: PUSH
50801: LD_INT 3
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PPUSH
50808: CALL_OW 70
50812: ST_TO_ADDR
// if not tmp then
50813: LD_VAR 0 5
50817: NOT
50818: IFFALSE 50822
// exit ;
50820: GO 50886
// if checkLink then
50822: LD_VAR 0 3
50826: IFFALSE 50876
// begin for i in tmp do
50828: LD_ADDR_VAR 0 6
50832: PUSH
50833: LD_VAR 0 5
50837: PUSH
50838: FOR_IN
50839: IFFALSE 50874
// if GetBase ( i ) <> base then
50841: LD_VAR 0 6
50845: PPUSH
50846: CALL_OW 274
50850: PUSH
50851: LD_VAR 0 1
50855: NONEQUAL
50856: IFFALSE 50872
// ComLinkToBase ( base , i ) ;
50858: LD_VAR 0 1
50862: PPUSH
50863: LD_VAR 0 6
50867: PPUSH
50868: CALL_OW 169
50872: GO 50838
50874: POP
50875: POP
// end ; result := tmp ;
50876: LD_ADDR_VAR 0 4
50880: PUSH
50881: LD_VAR 0 5
50885: ST_TO_ADDR
// end ;
50886: LD_VAR 0 4
50890: RET
// export function ComComplete ( units , b ) ; var i ; begin
50891: LD_INT 0
50893: PPUSH
50894: PPUSH
// if not units then
50895: LD_VAR 0 1
50899: NOT
50900: IFFALSE 50904
// exit ;
50902: GO 50994
// for i in units do
50904: LD_ADDR_VAR 0 4
50908: PUSH
50909: LD_VAR 0 1
50913: PUSH
50914: FOR_IN
50915: IFFALSE 50992
// if BuildingStatus ( b ) = bs_build then
50917: LD_VAR 0 2
50921: PPUSH
50922: CALL_OW 461
50926: PUSH
50927: LD_INT 1
50929: EQUAL
50930: IFFALSE 50990
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50932: LD_VAR 0 4
50936: PPUSH
50937: LD_STRING h
50939: PUSH
50940: LD_VAR 0 2
50944: PPUSH
50945: CALL_OW 250
50949: PUSH
50950: LD_VAR 0 2
50954: PPUSH
50955: CALL_OW 251
50959: PUSH
50960: LD_VAR 0 2
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: PPUSH
50986: CALL_OW 446
50990: GO 50914
50992: POP
50993: POP
// end ;
50994: LD_VAR 0 3
50998: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50999: LD_INT 0
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
51006: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51007: LD_VAR 0 1
51011: NOT
51012: PUSH
51013: LD_VAR 0 1
51017: PPUSH
51018: CALL_OW 263
51022: PUSH
51023: LD_INT 2
51025: NONEQUAL
51026: OR
51027: IFFALSE 51031
// exit ;
51029: GO 51347
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51031: LD_ADDR_VAR 0 6
51035: PUSH
51036: LD_INT 22
51038: PUSH
51039: LD_VAR 0 1
51043: PPUSH
51044: CALL_OW 255
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: LD_INT 30
51058: PUSH
51059: LD_INT 36
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 34
51068: PUSH
51069: LD_INT 31
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PPUSH
51085: CALL_OW 69
51089: ST_TO_ADDR
// if not tmp then
51090: LD_VAR 0 6
51094: NOT
51095: IFFALSE 51099
// exit ;
51097: GO 51347
// result := [ ] ;
51099: LD_ADDR_VAR 0 2
51103: PUSH
51104: EMPTY
51105: ST_TO_ADDR
// for i in tmp do
51106: LD_ADDR_VAR 0 3
51110: PUSH
51111: LD_VAR 0 6
51115: PUSH
51116: FOR_IN
51117: IFFALSE 51188
// begin t := UnitsInside ( i ) ;
51119: LD_ADDR_VAR 0 4
51123: PUSH
51124: LD_VAR 0 3
51128: PPUSH
51129: CALL_OW 313
51133: ST_TO_ADDR
// if t then
51134: LD_VAR 0 4
51138: IFFALSE 51186
// for j in t do
51140: LD_ADDR_VAR 0 7
51144: PUSH
51145: LD_VAR 0 4
51149: PUSH
51150: FOR_IN
51151: IFFALSE 51184
// result := Replace ( result , result + 1 , j ) ;
51153: LD_ADDR_VAR 0 2
51157: PUSH
51158: LD_VAR 0 2
51162: PPUSH
51163: LD_VAR 0 2
51167: PUSH
51168: LD_INT 1
51170: PLUS
51171: PPUSH
51172: LD_VAR 0 7
51176: PPUSH
51177: CALL_OW 1
51181: ST_TO_ADDR
51182: GO 51150
51184: POP
51185: POP
// end ;
51186: GO 51116
51188: POP
51189: POP
// if not result then
51190: LD_VAR 0 2
51194: NOT
51195: IFFALSE 51199
// exit ;
51197: GO 51347
// mech := result [ 1 ] ;
51199: LD_ADDR_VAR 0 5
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: ST_TO_ADDR
// if result > 1 then
51213: LD_VAR 0 2
51217: PUSH
51218: LD_INT 1
51220: GREATER
51221: IFFALSE 51333
// begin for i = 2 to result do
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: DOUBLE
51229: LD_INT 2
51231: DEC
51232: ST_TO_ADDR
51233: LD_VAR 0 2
51237: PUSH
51238: FOR_TO
51239: IFFALSE 51331
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51241: LD_ADDR_VAR 0 4
51245: PUSH
51246: LD_VAR 0 2
51250: PUSH
51251: LD_VAR 0 3
51255: ARRAY
51256: PPUSH
51257: LD_INT 3
51259: PPUSH
51260: CALL_OW 259
51264: PUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_VAR 0 3
51274: ARRAY
51275: PPUSH
51276: CALL_OW 432
51280: MINUS
51281: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51282: LD_VAR 0 4
51286: PUSH
51287: LD_VAR 0 5
51291: PPUSH
51292: LD_INT 3
51294: PPUSH
51295: CALL_OW 259
51299: PUSH
51300: LD_VAR 0 5
51304: PPUSH
51305: CALL_OW 432
51309: MINUS
51310: GREATEREQUAL
51311: IFFALSE 51329
// mech := result [ i ] ;
51313: LD_ADDR_VAR 0 5
51317: PUSH
51318: LD_VAR 0 2
51322: PUSH
51323: LD_VAR 0 3
51327: ARRAY
51328: ST_TO_ADDR
// end ;
51329: GO 51238
51331: POP
51332: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51333: LD_VAR 0 1
51337: PPUSH
51338: LD_VAR 0 5
51342: PPUSH
51343: CALL_OW 135
// end ;
51347: LD_VAR 0 2
51351: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51352: LD_INT 0
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
// result := [ ] ;
51367: LD_ADDR_VAR 0 7
51371: PUSH
51372: EMPTY
51373: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51374: LD_VAR 0 1
51378: PPUSH
51379: CALL_OW 266
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: IN
51394: NOT
51395: IFFALSE 51399
// exit ;
51397: GO 53033
// if name then
51399: LD_VAR 0 3
51403: IFFALSE 51419
// SetBName ( base_dep , name ) ;
51405: LD_VAR 0 1
51409: PPUSH
51410: LD_VAR 0 3
51414: PPUSH
51415: CALL_OW 500
// base := GetBase ( base_dep ) ;
51419: LD_ADDR_VAR 0 15
51423: PUSH
51424: LD_VAR 0 1
51428: PPUSH
51429: CALL_OW 274
51433: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51434: LD_ADDR_VAR 0 16
51438: PUSH
51439: LD_VAR 0 1
51443: PPUSH
51444: CALL_OW 255
51448: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51449: LD_ADDR_VAR 0 17
51453: PUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 248
51463: ST_TO_ADDR
// if sources then
51464: LD_VAR 0 5
51468: IFFALSE 51515
// for i = 1 to 3 do
51470: LD_ADDR_VAR 0 8
51474: PUSH
51475: DOUBLE
51476: LD_INT 1
51478: DEC
51479: ST_TO_ADDR
51480: LD_INT 3
51482: PUSH
51483: FOR_TO
51484: IFFALSE 51513
// AddResourceType ( base , i , sources [ i ] ) ;
51486: LD_VAR 0 15
51490: PPUSH
51491: LD_VAR 0 8
51495: PPUSH
51496: LD_VAR 0 5
51500: PUSH
51501: LD_VAR 0 8
51505: ARRAY
51506: PPUSH
51507: CALL_OW 276
51511: GO 51483
51513: POP
51514: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51515: LD_ADDR_VAR 0 18
51519: PUSH
51520: LD_VAR 0 15
51524: PPUSH
51525: LD_VAR 0 2
51529: PPUSH
51530: LD_INT 1
51532: PPUSH
51533: CALL 50776 0 3
51537: ST_TO_ADDR
// InitHc ;
51538: CALL_OW 19
// InitUc ;
51542: CALL_OW 18
// uc_side := side ;
51546: LD_ADDR_OWVAR 20
51550: PUSH
51551: LD_VAR 0 16
51555: ST_TO_ADDR
// uc_nation := nation ;
51556: LD_ADDR_OWVAR 21
51560: PUSH
51561: LD_VAR 0 17
51565: ST_TO_ADDR
// if buildings then
51566: LD_VAR 0 18
51570: IFFALSE 52892
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51572: LD_ADDR_VAR 0 19
51576: PUSH
51577: LD_VAR 0 18
51581: PPUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 30
51587: PUSH
51588: LD_INT 29
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 30
51597: PUSH
51598: LD_INT 30
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: PPUSH
51610: CALL_OW 72
51614: ST_TO_ADDR
// if tmp then
51615: LD_VAR 0 19
51619: IFFALSE 51667
// for i in tmp do
51621: LD_ADDR_VAR 0 8
51625: PUSH
51626: LD_VAR 0 19
51630: PUSH
51631: FOR_IN
51632: IFFALSE 51665
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51634: LD_VAR 0 8
51638: PPUSH
51639: CALL_OW 250
51643: PPUSH
51644: LD_VAR 0 8
51648: PPUSH
51649: CALL_OW 251
51653: PPUSH
51654: LD_VAR 0 16
51658: PPUSH
51659: CALL_OW 441
51663: GO 51631
51665: POP
51666: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51667: LD_VAR 0 18
51671: PPUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 30
51677: PUSH
51678: LD_INT 32
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 30
51687: PUSH
51688: LD_INT 33
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: PPUSH
51700: CALL_OW 72
51704: IFFALSE 51792
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51706: LD_ADDR_VAR 0 8
51710: PUSH
51711: LD_VAR 0 18
51715: PPUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 30
51721: PUSH
51722: LD_INT 32
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 30
51731: PUSH
51732: LD_INT 33
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: PPUSH
51744: CALL_OW 72
51748: PUSH
51749: FOR_IN
51750: IFFALSE 51790
// begin if not GetBWeapon ( i ) then
51752: LD_VAR 0 8
51756: PPUSH
51757: CALL_OW 269
51761: NOT
51762: IFFALSE 51788
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51764: LD_VAR 0 8
51768: PPUSH
51769: LD_VAR 0 8
51773: PPUSH
51774: LD_VAR 0 2
51778: PPUSH
51779: CALL 53038 0 2
51783: PPUSH
51784: CALL_OW 431
// end ;
51788: GO 51749
51790: POP
51791: POP
// end ; for i = 1 to personel do
51792: LD_ADDR_VAR 0 8
51796: PUSH
51797: DOUBLE
51798: LD_INT 1
51800: DEC
51801: ST_TO_ADDR
51802: LD_VAR 0 6
51806: PUSH
51807: FOR_TO
51808: IFFALSE 52872
// begin if i > 4 then
51810: LD_VAR 0 8
51814: PUSH
51815: LD_INT 4
51817: GREATER
51818: IFFALSE 51822
// break ;
51820: GO 52872
// case i of 1 :
51822: LD_VAR 0 8
51826: PUSH
51827: LD_INT 1
51829: DOUBLE
51830: EQUAL
51831: IFTRUE 51835
51833: GO 51915
51835: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51836: LD_ADDR_VAR 0 12
51840: PUSH
51841: LD_VAR 0 18
51845: PPUSH
51846: LD_INT 22
51848: PUSH
51849: LD_VAR 0 16
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 58
51860: PUSH
51861: EMPTY
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 30
51869: PUSH
51870: LD_INT 32
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 30
51879: PUSH
51880: LD_INT 4
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 30
51889: PUSH
51890: LD_INT 5
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PPUSH
51908: CALL_OW 72
51912: ST_TO_ADDR
51913: GO 52137
51915: LD_INT 2
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51923
51921: GO 51985
51923: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51924: LD_ADDR_VAR 0 12
51928: PUSH
51929: LD_VAR 0 18
51933: PPUSH
51934: LD_INT 22
51936: PUSH
51937: LD_VAR 0 16
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 30
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 30
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PPUSH
51978: CALL_OW 72
51982: ST_TO_ADDR
51983: GO 52137
51985: LD_INT 3
51987: DOUBLE
51988: EQUAL
51989: IFTRUE 51993
51991: GO 52055
51993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51994: LD_ADDR_VAR 0 12
51998: PUSH
51999: LD_VAR 0 18
52003: PPUSH
52004: LD_INT 22
52006: PUSH
52007: LD_VAR 0 16
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 30
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 30
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PPUSH
52048: CALL_OW 72
52052: ST_TO_ADDR
52053: GO 52137
52055: LD_INT 4
52057: DOUBLE
52058: EQUAL
52059: IFTRUE 52063
52061: GO 52136
52063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52064: LD_ADDR_VAR 0 12
52068: PUSH
52069: LD_VAR 0 18
52073: PPUSH
52074: LD_INT 22
52076: PUSH
52077: LD_VAR 0 16
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 30
52091: PUSH
52092: LD_INT 6
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 30
52101: PUSH
52102: LD_INT 7
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 30
52111: PUSH
52112: LD_INT 8
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PPUSH
52129: CALL_OW 72
52133: ST_TO_ADDR
52134: GO 52137
52136: POP
// if i = 1 then
52137: LD_VAR 0 8
52141: PUSH
52142: LD_INT 1
52144: EQUAL
52145: IFFALSE 52256
// begin tmp := [ ] ;
52147: LD_ADDR_VAR 0 19
52151: PUSH
52152: EMPTY
52153: ST_TO_ADDR
// for j in f do
52154: LD_ADDR_VAR 0 9
52158: PUSH
52159: LD_VAR 0 12
52163: PUSH
52164: FOR_IN
52165: IFFALSE 52238
// if GetBType ( j ) = b_bunker then
52167: LD_VAR 0 9
52171: PPUSH
52172: CALL_OW 266
52176: PUSH
52177: LD_INT 32
52179: EQUAL
52180: IFFALSE 52207
// tmp := Insert ( tmp , 1 , j ) else
52182: LD_ADDR_VAR 0 19
52186: PUSH
52187: LD_VAR 0 19
52191: PPUSH
52192: LD_INT 1
52194: PPUSH
52195: LD_VAR 0 9
52199: PPUSH
52200: CALL_OW 2
52204: ST_TO_ADDR
52205: GO 52236
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52207: LD_ADDR_VAR 0 19
52211: PUSH
52212: LD_VAR 0 19
52216: PPUSH
52217: LD_VAR 0 19
52221: PUSH
52222: LD_INT 1
52224: PLUS
52225: PPUSH
52226: LD_VAR 0 9
52230: PPUSH
52231: CALL_OW 2
52235: ST_TO_ADDR
52236: GO 52164
52238: POP
52239: POP
// if tmp then
52240: LD_VAR 0 19
52244: IFFALSE 52256
// f := tmp ;
52246: LD_ADDR_VAR 0 12
52250: PUSH
52251: LD_VAR 0 19
52255: ST_TO_ADDR
// end ; x := personel [ i ] ;
52256: LD_ADDR_VAR 0 13
52260: PUSH
52261: LD_VAR 0 6
52265: PUSH
52266: LD_VAR 0 8
52270: ARRAY
52271: ST_TO_ADDR
// if x = - 1 then
52272: LD_VAR 0 13
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: EQUAL
52281: IFFALSE 52490
// begin for j in f do
52283: LD_ADDR_VAR 0 9
52287: PUSH
52288: LD_VAR 0 12
52292: PUSH
52293: FOR_IN
52294: IFFALSE 52486
// repeat InitHc ;
52296: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52300: LD_VAR 0 9
52304: PPUSH
52305: CALL_OW 266
52309: PUSH
52310: LD_INT 5
52312: EQUAL
52313: IFFALSE 52383
// begin if UnitsInside ( j ) < 3 then
52315: LD_VAR 0 9
52319: PPUSH
52320: CALL_OW 313
52324: PUSH
52325: LD_INT 3
52327: LESS
52328: IFFALSE 52364
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52330: LD_INT 0
52332: PPUSH
52333: LD_INT 5
52335: PUSH
52336: LD_INT 8
52338: PUSH
52339: LD_INT 9
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: PUSH
52347: LD_VAR 0 17
52351: ARRAY
52352: PPUSH
52353: LD_VAR 0 4
52357: PPUSH
52358: CALL_OW 380
52362: GO 52381
// PrepareHuman ( false , i , skill ) ;
52364: LD_INT 0
52366: PPUSH
52367: LD_VAR 0 8
52371: PPUSH
52372: LD_VAR 0 4
52376: PPUSH
52377: CALL_OW 380
// end else
52381: GO 52400
// PrepareHuman ( false , i , skill ) ;
52383: LD_INT 0
52385: PPUSH
52386: LD_VAR 0 8
52390: PPUSH
52391: LD_VAR 0 4
52395: PPUSH
52396: CALL_OW 380
// un := CreateHuman ;
52400: LD_ADDR_VAR 0 14
52404: PUSH
52405: CALL_OW 44
52409: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52410: LD_ADDR_VAR 0 7
52414: PUSH
52415: LD_VAR 0 7
52419: PPUSH
52420: LD_INT 1
52422: PPUSH
52423: LD_VAR 0 14
52427: PPUSH
52428: CALL_OW 2
52432: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52433: LD_VAR 0 14
52437: PPUSH
52438: LD_VAR 0 9
52442: PPUSH
52443: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52447: LD_VAR 0 9
52451: PPUSH
52452: CALL_OW 313
52456: PUSH
52457: LD_INT 6
52459: EQUAL
52460: PUSH
52461: LD_VAR 0 9
52465: PPUSH
52466: CALL_OW 266
52470: PUSH
52471: LD_INT 32
52473: PUSH
52474: LD_INT 31
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: IN
52481: OR
52482: IFFALSE 52296
52484: GO 52293
52486: POP
52487: POP
// end else
52488: GO 52870
// for j = 1 to x do
52490: LD_ADDR_VAR 0 9
52494: PUSH
52495: DOUBLE
52496: LD_INT 1
52498: DEC
52499: ST_TO_ADDR
52500: LD_VAR 0 13
52504: PUSH
52505: FOR_TO
52506: IFFALSE 52868
// begin InitHc ;
52508: CALL_OW 19
// if not f then
52512: LD_VAR 0 12
52516: NOT
52517: IFFALSE 52606
// begin PrepareHuman ( false , i , skill ) ;
52519: LD_INT 0
52521: PPUSH
52522: LD_VAR 0 8
52526: PPUSH
52527: LD_VAR 0 4
52531: PPUSH
52532: CALL_OW 380
// un := CreateHuman ;
52536: LD_ADDR_VAR 0 14
52540: PUSH
52541: CALL_OW 44
52545: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52546: LD_ADDR_VAR 0 7
52550: PUSH
52551: LD_VAR 0 7
52555: PPUSH
52556: LD_INT 1
52558: PPUSH
52559: LD_VAR 0 14
52563: PPUSH
52564: CALL_OW 2
52568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52569: LD_VAR 0 14
52573: PPUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 250
52583: PPUSH
52584: LD_VAR 0 1
52588: PPUSH
52589: CALL_OW 251
52593: PPUSH
52594: LD_INT 10
52596: PPUSH
52597: LD_INT 0
52599: PPUSH
52600: CALL_OW 50
// continue ;
52604: GO 52505
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52606: LD_VAR 0 12
52610: PUSH
52611: LD_INT 1
52613: ARRAY
52614: PPUSH
52615: CALL_OW 313
52619: PUSH
52620: LD_VAR 0 12
52624: PUSH
52625: LD_INT 1
52627: ARRAY
52628: PPUSH
52629: CALL_OW 266
52633: PUSH
52634: LD_INT 32
52636: PUSH
52637: LD_INT 31
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: IN
52644: AND
52645: PUSH
52646: LD_VAR 0 12
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: PPUSH
52655: CALL_OW 313
52659: PUSH
52660: LD_INT 6
52662: EQUAL
52663: OR
52664: IFFALSE 52684
// f := Delete ( f , 1 ) ;
52666: LD_ADDR_VAR 0 12
52670: PUSH
52671: LD_VAR 0 12
52675: PPUSH
52676: LD_INT 1
52678: PPUSH
52679: CALL_OW 3
52683: ST_TO_ADDR
// if not f then
52684: LD_VAR 0 12
52688: NOT
52689: IFFALSE 52707
// begin x := x + 2 ;
52691: LD_ADDR_VAR 0 13
52695: PUSH
52696: LD_VAR 0 13
52700: PUSH
52701: LD_INT 2
52703: PLUS
52704: ST_TO_ADDR
// continue ;
52705: GO 52505
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52707: LD_VAR 0 12
52711: PUSH
52712: LD_INT 1
52714: ARRAY
52715: PPUSH
52716: CALL_OW 266
52720: PUSH
52721: LD_INT 5
52723: EQUAL
52724: IFFALSE 52798
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52726: LD_VAR 0 12
52730: PUSH
52731: LD_INT 1
52733: ARRAY
52734: PPUSH
52735: CALL_OW 313
52739: PUSH
52740: LD_INT 3
52742: LESS
52743: IFFALSE 52779
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52745: LD_INT 0
52747: PPUSH
52748: LD_INT 5
52750: PUSH
52751: LD_INT 8
52753: PUSH
52754: LD_INT 9
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: PUSH
52762: LD_VAR 0 17
52766: ARRAY
52767: PPUSH
52768: LD_VAR 0 4
52772: PPUSH
52773: CALL_OW 380
52777: GO 52796
// PrepareHuman ( false , i , skill ) ;
52779: LD_INT 0
52781: PPUSH
52782: LD_VAR 0 8
52786: PPUSH
52787: LD_VAR 0 4
52791: PPUSH
52792: CALL_OW 380
// end else
52796: GO 52815
// PrepareHuman ( false , i , skill ) ;
52798: LD_INT 0
52800: PPUSH
52801: LD_VAR 0 8
52805: PPUSH
52806: LD_VAR 0 4
52810: PPUSH
52811: CALL_OW 380
// un := CreateHuman ;
52815: LD_ADDR_VAR 0 14
52819: PUSH
52820: CALL_OW 44
52824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52825: LD_ADDR_VAR 0 7
52829: PUSH
52830: LD_VAR 0 7
52834: PPUSH
52835: LD_INT 1
52837: PPUSH
52838: LD_VAR 0 14
52842: PPUSH
52843: CALL_OW 2
52847: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52848: LD_VAR 0 14
52852: PPUSH
52853: LD_VAR 0 12
52857: PUSH
52858: LD_INT 1
52860: ARRAY
52861: PPUSH
52862: CALL_OW 52
// end ;
52866: GO 52505
52868: POP
52869: POP
// end ;
52870: GO 51807
52872: POP
52873: POP
// result := result ^ buildings ;
52874: LD_ADDR_VAR 0 7
52878: PUSH
52879: LD_VAR 0 7
52883: PUSH
52884: LD_VAR 0 18
52888: ADD
52889: ST_TO_ADDR
// end else
52890: GO 53033
// begin for i = 1 to personel do
52892: LD_ADDR_VAR 0 8
52896: PUSH
52897: DOUBLE
52898: LD_INT 1
52900: DEC
52901: ST_TO_ADDR
52902: LD_VAR 0 6
52906: PUSH
52907: FOR_TO
52908: IFFALSE 53031
// begin if i > 4 then
52910: LD_VAR 0 8
52914: PUSH
52915: LD_INT 4
52917: GREATER
52918: IFFALSE 52922
// break ;
52920: GO 53031
// x := personel [ i ] ;
52922: LD_ADDR_VAR 0 13
52926: PUSH
52927: LD_VAR 0 6
52931: PUSH
52932: LD_VAR 0 8
52936: ARRAY
52937: ST_TO_ADDR
// if x = - 1 then
52938: LD_VAR 0 13
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: EQUAL
52947: IFFALSE 52951
// continue ;
52949: GO 52907
// PrepareHuman ( false , i , skill ) ;
52951: LD_INT 0
52953: PPUSH
52954: LD_VAR 0 8
52958: PPUSH
52959: LD_VAR 0 4
52963: PPUSH
52964: CALL_OW 380
// un := CreateHuman ;
52968: LD_ADDR_VAR 0 14
52972: PUSH
52973: CALL_OW 44
52977: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52978: LD_VAR 0 14
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: CALL_OW 250
52992: PPUSH
52993: LD_VAR 0 1
52997: PPUSH
52998: CALL_OW 251
53002: PPUSH
53003: LD_INT 10
53005: PPUSH
53006: LD_INT 0
53008: PPUSH
53009: CALL_OW 50
// result := result ^ un ;
53013: LD_ADDR_VAR 0 7
53017: PUSH
53018: LD_VAR 0 7
53022: PUSH
53023: LD_VAR 0 14
53027: ADD
53028: ST_TO_ADDR
// end ;
53029: GO 52907
53031: POP
53032: POP
// end ; end ;
53033: LD_VAR 0 7
53037: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53038: LD_INT 0
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
// result := false ;
53056: LD_ADDR_VAR 0 3
53060: PUSH
53061: LD_INT 0
53063: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53064: LD_VAR 0 1
53068: NOT
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 266
53079: PUSH
53080: LD_INT 32
53082: PUSH
53083: LD_INT 33
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: IN
53090: NOT
53091: OR
53092: IFFALSE 53096
// exit ;
53094: GO 54205
// nat := GetNation ( tower ) ;
53096: LD_ADDR_VAR 0 12
53100: PUSH
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 248
53110: ST_TO_ADDR
// side := GetSide ( tower ) ;
53111: LD_ADDR_VAR 0 16
53115: PUSH
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 255
53125: ST_TO_ADDR
// x := GetX ( tower ) ;
53126: LD_ADDR_VAR 0 10
53130: PUSH
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 250
53140: ST_TO_ADDR
// y := GetY ( tower ) ;
53141: LD_ADDR_VAR 0 11
53145: PUSH
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 251
53155: ST_TO_ADDR
// if not x or not y then
53156: LD_VAR 0 10
53160: NOT
53161: PUSH
53162: LD_VAR 0 11
53166: NOT
53167: OR
53168: IFFALSE 53172
// exit ;
53170: GO 54205
// weapon := 0 ;
53172: LD_ADDR_VAR 0 18
53176: PUSH
53177: LD_INT 0
53179: ST_TO_ADDR
// fac_list := [ ] ;
53180: LD_ADDR_VAR 0 17
53184: PUSH
53185: EMPTY
53186: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53187: LD_ADDR_VAR 0 6
53191: PUSH
53192: LD_VAR 0 1
53196: PPUSH
53197: CALL_OW 274
53201: PPUSH
53202: LD_VAR 0 2
53206: PPUSH
53207: LD_INT 0
53209: PPUSH
53210: CALL 50776 0 3
53214: PPUSH
53215: LD_INT 30
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PPUSH
53225: CALL_OW 72
53229: ST_TO_ADDR
// if not factories then
53230: LD_VAR 0 6
53234: NOT
53235: IFFALSE 53239
// exit ;
53237: GO 54205
// for i in factories do
53239: LD_ADDR_VAR 0 8
53243: PUSH
53244: LD_VAR 0 6
53248: PUSH
53249: FOR_IN
53250: IFFALSE 53275
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53252: LD_ADDR_VAR 0 17
53256: PUSH
53257: LD_VAR 0 17
53261: PUSH
53262: LD_VAR 0 8
53266: PPUSH
53267: CALL_OW 478
53271: UNION
53272: ST_TO_ADDR
53273: GO 53249
53275: POP
53276: POP
// if not fac_list then
53277: LD_VAR 0 17
53281: NOT
53282: IFFALSE 53286
// exit ;
53284: GO 54205
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53286: LD_ADDR_VAR 0 5
53290: PUSH
53291: LD_INT 4
53293: PUSH
53294: LD_INT 5
53296: PUSH
53297: LD_INT 9
53299: PUSH
53300: LD_INT 10
53302: PUSH
53303: LD_INT 6
53305: PUSH
53306: LD_INT 7
53308: PUSH
53309: LD_INT 11
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 27
53323: PUSH
53324: LD_INT 28
53326: PUSH
53327: LD_INT 26
53329: PUSH
53330: LD_INT 30
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 43
53341: PUSH
53342: LD_INT 44
53344: PUSH
53345: LD_INT 46
53347: PUSH
53348: LD_INT 45
53350: PUSH
53351: LD_INT 47
53353: PUSH
53354: LD_INT 49
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: PUSH
53370: LD_VAR 0 12
53374: ARRAY
53375: ST_TO_ADDR
// list := list isect fac_list ;
53376: LD_ADDR_VAR 0 5
53380: PUSH
53381: LD_VAR 0 5
53385: PUSH
53386: LD_VAR 0 17
53390: ISECT
53391: ST_TO_ADDR
// if not list then
53392: LD_VAR 0 5
53396: NOT
53397: IFFALSE 53401
// exit ;
53399: GO 54205
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53401: LD_VAR 0 12
53405: PUSH
53406: LD_INT 3
53408: EQUAL
53409: PUSH
53410: LD_INT 49
53412: PUSH
53413: LD_VAR 0 5
53417: IN
53418: AND
53419: PUSH
53420: LD_INT 31
53422: PPUSH
53423: LD_VAR 0 16
53427: PPUSH
53428: CALL_OW 321
53432: PUSH
53433: LD_INT 2
53435: EQUAL
53436: AND
53437: IFFALSE 53497
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53439: LD_INT 22
53441: PUSH
53442: LD_VAR 0 16
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 35
53453: PUSH
53454: LD_INT 49
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 91
53463: PUSH
53464: LD_VAR 0 1
53468: PUSH
53469: LD_INT 10
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: PPUSH
53482: CALL_OW 69
53486: NOT
53487: IFFALSE 53497
// weapon := ru_time_lapser ;
53489: LD_ADDR_VAR 0 18
53493: PUSH
53494: LD_INT 49
53496: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53497: LD_VAR 0 12
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: IN
53512: PUSH
53513: LD_INT 11
53515: PUSH
53516: LD_VAR 0 5
53520: IN
53521: PUSH
53522: LD_INT 30
53524: PUSH
53525: LD_VAR 0 5
53529: IN
53530: OR
53531: AND
53532: PUSH
53533: LD_INT 6
53535: PPUSH
53536: LD_VAR 0 16
53540: PPUSH
53541: CALL_OW 321
53545: PUSH
53546: LD_INT 2
53548: EQUAL
53549: AND
53550: IFFALSE 53715
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53552: LD_INT 22
53554: PUSH
53555: LD_VAR 0 16
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 35
53569: PUSH
53570: LD_INT 11
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 35
53579: PUSH
53580: LD_INT 30
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 91
53594: PUSH
53595: LD_VAR 0 1
53599: PUSH
53600: LD_INT 18
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: PPUSH
53613: CALL_OW 69
53617: NOT
53618: PUSH
53619: LD_INT 22
53621: PUSH
53622: LD_VAR 0 16
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 30
53636: PUSH
53637: LD_INT 32
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 30
53646: PUSH
53647: LD_INT 33
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 91
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_INT 12
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: PPUSH
53683: CALL_OW 69
53687: PUSH
53688: LD_INT 2
53690: GREATER
53691: AND
53692: IFFALSE 53715
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53694: LD_ADDR_VAR 0 18
53698: PUSH
53699: LD_INT 11
53701: PUSH
53702: LD_INT 30
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_VAR 0 12
53713: ARRAY
53714: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53715: LD_VAR 0 18
53719: NOT
53720: PUSH
53721: LD_INT 40
53723: PPUSH
53724: LD_VAR 0 16
53728: PPUSH
53729: CALL_OW 321
53733: PUSH
53734: LD_INT 2
53736: EQUAL
53737: AND
53738: PUSH
53739: LD_INT 7
53741: PUSH
53742: LD_VAR 0 5
53746: IN
53747: PUSH
53748: LD_INT 28
53750: PUSH
53751: LD_VAR 0 5
53755: IN
53756: OR
53757: PUSH
53758: LD_INT 45
53760: PUSH
53761: LD_VAR 0 5
53765: IN
53766: OR
53767: AND
53768: IFFALSE 54022
// begin hex := GetHexInfo ( x , y ) ;
53770: LD_ADDR_VAR 0 4
53774: PUSH
53775: LD_VAR 0 10
53779: PPUSH
53780: LD_VAR 0 11
53784: PPUSH
53785: CALL_OW 546
53789: ST_TO_ADDR
// if hex [ 1 ] then
53790: LD_VAR 0 4
53794: PUSH
53795: LD_INT 1
53797: ARRAY
53798: IFFALSE 53802
// exit ;
53800: GO 54205
// height := hex [ 2 ] ;
53802: LD_ADDR_VAR 0 15
53806: PUSH
53807: LD_VAR 0 4
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53816: LD_ADDR_VAR 0 14
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 5
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// for i in tmp do
53839: LD_ADDR_VAR 0 8
53843: PUSH
53844: LD_VAR 0 14
53848: PUSH
53849: FOR_IN
53850: IFFALSE 54020
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53852: LD_ADDR_VAR 0 9
53856: PUSH
53857: LD_VAR 0 10
53861: PPUSH
53862: LD_VAR 0 8
53866: PPUSH
53867: LD_INT 5
53869: PPUSH
53870: CALL_OW 272
53874: PUSH
53875: LD_VAR 0 11
53879: PPUSH
53880: LD_VAR 0 8
53884: PPUSH
53885: LD_INT 5
53887: PPUSH
53888: CALL_OW 273
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53897: LD_VAR 0 9
53901: PUSH
53902: LD_INT 1
53904: ARRAY
53905: PPUSH
53906: LD_VAR 0 9
53910: PUSH
53911: LD_INT 2
53913: ARRAY
53914: PPUSH
53915: CALL_OW 488
53919: IFFALSE 54018
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53921: LD_ADDR_VAR 0 4
53925: PUSH
53926: LD_VAR 0 9
53930: PUSH
53931: LD_INT 1
53933: ARRAY
53934: PPUSH
53935: LD_VAR 0 9
53939: PUSH
53940: LD_INT 2
53942: ARRAY
53943: PPUSH
53944: CALL_OW 546
53948: ST_TO_ADDR
// if hex [ 1 ] then
53949: LD_VAR 0 4
53953: PUSH
53954: LD_INT 1
53956: ARRAY
53957: IFFALSE 53961
// continue ;
53959: GO 53849
// h := hex [ 2 ] ;
53961: LD_ADDR_VAR 0 13
53965: PUSH
53966: LD_VAR 0 4
53970: PUSH
53971: LD_INT 2
53973: ARRAY
53974: ST_TO_ADDR
// if h + 7 < height then
53975: LD_VAR 0 13
53979: PUSH
53980: LD_INT 7
53982: PLUS
53983: PUSH
53984: LD_VAR 0 15
53988: LESS
53989: IFFALSE 54018
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53991: LD_ADDR_VAR 0 18
53995: PUSH
53996: LD_INT 7
53998: PUSH
53999: LD_INT 28
54001: PUSH
54002: LD_INT 45
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: PUSH
54010: LD_VAR 0 12
54014: ARRAY
54015: ST_TO_ADDR
// break ;
54016: GO 54020
// end ; end ; end ;
54018: GO 53849
54020: POP
54021: POP
// end ; if not weapon then
54022: LD_VAR 0 18
54026: NOT
54027: IFFALSE 54087
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54029: LD_ADDR_VAR 0 5
54033: PUSH
54034: LD_VAR 0 5
54038: PUSH
54039: LD_INT 11
54041: PUSH
54042: LD_INT 30
54044: PUSH
54045: LD_INT 49
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: DIFF
54053: ST_TO_ADDR
// if not list then
54054: LD_VAR 0 5
54058: NOT
54059: IFFALSE 54063
// exit ;
54061: GO 54205
// weapon := list [ rand ( 1 , list ) ] ;
54063: LD_ADDR_VAR 0 18
54067: PUSH
54068: LD_VAR 0 5
54072: PUSH
54073: LD_INT 1
54075: PPUSH
54076: LD_VAR 0 5
54080: PPUSH
54081: CALL_OW 12
54085: ARRAY
54086: ST_TO_ADDR
// end ; if weapon then
54087: LD_VAR 0 18
54091: IFFALSE 54205
// begin tmp := CostOfWeapon ( weapon ) ;
54093: LD_ADDR_VAR 0 14
54097: PUSH
54098: LD_VAR 0 18
54102: PPUSH
54103: CALL_OW 451
54107: ST_TO_ADDR
// j := GetBase ( tower ) ;
54108: LD_ADDR_VAR 0 9
54112: PUSH
54113: LD_VAR 0 1
54117: PPUSH
54118: CALL_OW 274
54122: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54123: LD_VAR 0 9
54127: PPUSH
54128: LD_INT 1
54130: PPUSH
54131: CALL_OW 275
54135: PUSH
54136: LD_VAR 0 14
54140: PUSH
54141: LD_INT 1
54143: ARRAY
54144: GREATEREQUAL
54145: PUSH
54146: LD_VAR 0 9
54150: PPUSH
54151: LD_INT 2
54153: PPUSH
54154: CALL_OW 275
54158: PUSH
54159: LD_VAR 0 14
54163: PUSH
54164: LD_INT 2
54166: ARRAY
54167: GREATEREQUAL
54168: AND
54169: PUSH
54170: LD_VAR 0 9
54174: PPUSH
54175: LD_INT 3
54177: PPUSH
54178: CALL_OW 275
54182: PUSH
54183: LD_VAR 0 14
54187: PUSH
54188: LD_INT 3
54190: ARRAY
54191: GREATEREQUAL
54192: AND
54193: IFFALSE 54205
// result := weapon ;
54195: LD_ADDR_VAR 0 3
54199: PUSH
54200: LD_VAR 0 18
54204: ST_TO_ADDR
// end ; end ;
54205: LD_VAR 0 3
54209: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54210: LD_INT 0
54212: PPUSH
54213: PPUSH
// result := true ;
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_INT 1
54221: ST_TO_ADDR
// if array1 = array2 then
54222: LD_VAR 0 1
54226: PUSH
54227: LD_VAR 0 2
54231: EQUAL
54232: IFFALSE 54292
// begin for i = 1 to array1 do
54234: LD_ADDR_VAR 0 4
54238: PUSH
54239: DOUBLE
54240: LD_INT 1
54242: DEC
54243: ST_TO_ADDR
54244: LD_VAR 0 1
54248: PUSH
54249: FOR_TO
54250: IFFALSE 54288
// if array1 [ i ] <> array2 [ i ] then
54252: LD_VAR 0 1
54256: PUSH
54257: LD_VAR 0 4
54261: ARRAY
54262: PUSH
54263: LD_VAR 0 2
54267: PUSH
54268: LD_VAR 0 4
54272: ARRAY
54273: NONEQUAL
54274: IFFALSE 54286
// begin result := false ;
54276: LD_ADDR_VAR 0 3
54280: PUSH
54281: LD_INT 0
54283: ST_TO_ADDR
// break ;
54284: GO 54288
// end ;
54286: GO 54249
54288: POP
54289: POP
// end else
54290: GO 54300
// result := false ;
54292: LD_ADDR_VAR 0 3
54296: PUSH
54297: LD_INT 0
54299: ST_TO_ADDR
// end ;
54300: LD_VAR 0 3
54304: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
// if not array1 or not array2 then
54309: LD_VAR 0 1
54313: NOT
54314: PUSH
54315: LD_VAR 0 2
54319: NOT
54320: OR
54321: IFFALSE 54325
// exit ;
54323: GO 54389
// result := true ;
54325: LD_ADDR_VAR 0 3
54329: PUSH
54330: LD_INT 1
54332: ST_TO_ADDR
// for i = 1 to array1 do
54333: LD_ADDR_VAR 0 4
54337: PUSH
54338: DOUBLE
54339: LD_INT 1
54341: DEC
54342: ST_TO_ADDR
54343: LD_VAR 0 1
54347: PUSH
54348: FOR_TO
54349: IFFALSE 54387
// if array1 [ i ] <> array2 [ i ] then
54351: LD_VAR 0 1
54355: PUSH
54356: LD_VAR 0 4
54360: ARRAY
54361: PUSH
54362: LD_VAR 0 2
54366: PUSH
54367: LD_VAR 0 4
54371: ARRAY
54372: NONEQUAL
54373: IFFALSE 54385
// begin result := false ;
54375: LD_ADDR_VAR 0 3
54379: PUSH
54380: LD_INT 0
54382: ST_TO_ADDR
// break ;
54383: GO 54387
// end ;
54385: GO 54348
54387: POP
54388: POP
// end ;
54389: LD_VAR 0 3
54393: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54394: LD_INT 0
54396: PPUSH
54397: PPUSH
54398: PPUSH
// pom := GetBase ( fac ) ;
54399: LD_ADDR_VAR 0 5
54403: PUSH
54404: LD_VAR 0 1
54408: PPUSH
54409: CALL_OW 274
54413: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54414: LD_ADDR_VAR 0 4
54418: PUSH
54419: LD_VAR 0 2
54423: PUSH
54424: LD_INT 1
54426: ARRAY
54427: PPUSH
54428: LD_VAR 0 2
54432: PUSH
54433: LD_INT 2
54435: ARRAY
54436: PPUSH
54437: LD_VAR 0 2
54441: PUSH
54442: LD_INT 3
54444: ARRAY
54445: PPUSH
54446: LD_VAR 0 2
54450: PUSH
54451: LD_INT 4
54453: ARRAY
54454: PPUSH
54455: CALL_OW 449
54459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54460: LD_ADDR_VAR 0 3
54464: PUSH
54465: LD_VAR 0 5
54469: PPUSH
54470: LD_INT 1
54472: PPUSH
54473: CALL_OW 275
54477: PUSH
54478: LD_VAR 0 4
54482: PUSH
54483: LD_INT 1
54485: ARRAY
54486: GREATEREQUAL
54487: PUSH
54488: LD_VAR 0 5
54492: PPUSH
54493: LD_INT 2
54495: PPUSH
54496: CALL_OW 275
54500: PUSH
54501: LD_VAR 0 4
54505: PUSH
54506: LD_INT 2
54508: ARRAY
54509: GREATEREQUAL
54510: AND
54511: PUSH
54512: LD_VAR 0 5
54516: PPUSH
54517: LD_INT 3
54519: PPUSH
54520: CALL_OW 275
54524: PUSH
54525: LD_VAR 0 4
54529: PUSH
54530: LD_INT 3
54532: ARRAY
54533: GREATEREQUAL
54534: AND
54535: ST_TO_ADDR
// end ;
54536: LD_VAR 0 3
54540: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54541: LD_INT 0
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
// pom := GetBase ( building ) ;
54547: LD_ADDR_VAR 0 3
54551: PUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 274
54561: ST_TO_ADDR
// if not pom then
54562: LD_VAR 0 3
54566: NOT
54567: IFFALSE 54571
// exit ;
54569: GO 54741
// btype := GetBType ( building ) ;
54571: LD_ADDR_VAR 0 5
54575: PUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: CALL_OW 266
54585: ST_TO_ADDR
// if btype = b_armoury then
54586: LD_VAR 0 5
54590: PUSH
54591: LD_INT 4
54593: EQUAL
54594: IFFALSE 54604
// btype := b_barracks ;
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_INT 5
54603: ST_TO_ADDR
// if btype = b_depot then
54604: LD_VAR 0 5
54608: PUSH
54609: LD_INT 0
54611: EQUAL
54612: IFFALSE 54622
// btype := b_warehouse ;
54614: LD_ADDR_VAR 0 5
54618: PUSH
54619: LD_INT 1
54621: ST_TO_ADDR
// if btype = b_workshop then
54622: LD_VAR 0 5
54626: PUSH
54627: LD_INT 2
54629: EQUAL
54630: IFFALSE 54640
// btype := b_factory ;
54632: LD_ADDR_VAR 0 5
54636: PUSH
54637: LD_INT 3
54639: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54640: LD_ADDR_VAR 0 4
54644: PUSH
54645: LD_VAR 0 5
54649: PPUSH
54650: LD_VAR 0 1
54654: PPUSH
54655: CALL_OW 248
54659: PPUSH
54660: CALL_OW 450
54664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54665: LD_ADDR_VAR 0 2
54669: PUSH
54670: LD_VAR 0 3
54674: PPUSH
54675: LD_INT 1
54677: PPUSH
54678: CALL_OW 275
54682: PUSH
54683: LD_VAR 0 4
54687: PUSH
54688: LD_INT 1
54690: ARRAY
54691: GREATEREQUAL
54692: PUSH
54693: LD_VAR 0 3
54697: PPUSH
54698: LD_INT 2
54700: PPUSH
54701: CALL_OW 275
54705: PUSH
54706: LD_VAR 0 4
54710: PUSH
54711: LD_INT 2
54713: ARRAY
54714: GREATEREQUAL
54715: AND
54716: PUSH
54717: LD_VAR 0 3
54721: PPUSH
54722: LD_INT 3
54724: PPUSH
54725: CALL_OW 275
54729: PUSH
54730: LD_VAR 0 4
54734: PUSH
54735: LD_INT 3
54737: ARRAY
54738: GREATEREQUAL
54739: AND
54740: ST_TO_ADDR
// end ;
54741: LD_VAR 0 2
54745: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54746: LD_INT 0
54748: PPUSH
54749: PPUSH
54750: PPUSH
// pom := GetBase ( building ) ;
54751: LD_ADDR_VAR 0 4
54755: PUSH
54756: LD_VAR 0 1
54760: PPUSH
54761: CALL_OW 274
54765: ST_TO_ADDR
// if not pom then
54766: LD_VAR 0 4
54770: NOT
54771: IFFALSE 54775
// exit ;
54773: GO 54876
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54775: LD_ADDR_VAR 0 5
54779: PUSH
54780: LD_VAR 0 2
54784: PPUSH
54785: LD_VAR 0 1
54789: PPUSH
54790: CALL_OW 248
54794: PPUSH
54795: CALL_OW 450
54799: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54800: LD_ADDR_VAR 0 3
54804: PUSH
54805: LD_VAR 0 4
54809: PPUSH
54810: LD_INT 1
54812: PPUSH
54813: CALL_OW 275
54817: PUSH
54818: LD_VAR 0 5
54822: PUSH
54823: LD_INT 1
54825: ARRAY
54826: GREATEREQUAL
54827: PUSH
54828: LD_VAR 0 4
54832: PPUSH
54833: LD_INT 2
54835: PPUSH
54836: CALL_OW 275
54840: PUSH
54841: LD_VAR 0 5
54845: PUSH
54846: LD_INT 2
54848: ARRAY
54849: GREATEREQUAL
54850: AND
54851: PUSH
54852: LD_VAR 0 4
54856: PPUSH
54857: LD_INT 3
54859: PPUSH
54860: CALL_OW 275
54864: PUSH
54865: LD_VAR 0 5
54869: PUSH
54870: LD_INT 3
54872: ARRAY
54873: GREATEREQUAL
54874: AND
54875: ST_TO_ADDR
// end ;
54876: LD_VAR 0 3
54880: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54881: LD_INT 0
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
54893: PPUSH
// result := false ;
54894: LD_ADDR_VAR 0 8
54898: PUSH
54899: LD_INT 0
54901: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54902: LD_VAR 0 5
54906: NOT
54907: PUSH
54908: LD_VAR 0 1
54912: NOT
54913: OR
54914: PUSH
54915: LD_VAR 0 2
54919: NOT
54920: OR
54921: PUSH
54922: LD_VAR 0 3
54926: NOT
54927: OR
54928: IFFALSE 54932
// exit ;
54930: GO 55746
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54932: LD_ADDR_VAR 0 14
54936: PUSH
54937: LD_VAR 0 1
54941: PPUSH
54942: LD_VAR 0 2
54946: PPUSH
54947: LD_VAR 0 3
54951: PPUSH
54952: LD_VAR 0 4
54956: PPUSH
54957: LD_VAR 0 5
54961: PUSH
54962: LD_INT 1
54964: ARRAY
54965: PPUSH
54966: CALL_OW 248
54970: PPUSH
54971: LD_INT 0
54973: PPUSH
54974: CALL 56999 0 6
54978: ST_TO_ADDR
// if not hexes then
54979: LD_VAR 0 14
54983: NOT
54984: IFFALSE 54988
// exit ;
54986: GO 55746
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54988: LD_ADDR_VAR 0 17
54992: PUSH
54993: LD_VAR 0 5
54997: PPUSH
54998: LD_INT 22
55000: PUSH
55001: LD_VAR 0 13
55005: PPUSH
55006: CALL_OW 255
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 30
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 30
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PPUSH
55047: CALL_OW 72
55051: ST_TO_ADDR
// for i = 1 to hexes do
55052: LD_ADDR_VAR 0 9
55056: PUSH
55057: DOUBLE
55058: LD_INT 1
55060: DEC
55061: ST_TO_ADDR
55062: LD_VAR 0 14
55066: PUSH
55067: FOR_TO
55068: IFFALSE 55744
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55070: LD_ADDR_VAR 0 13
55074: PUSH
55075: LD_VAR 0 14
55079: PUSH
55080: LD_VAR 0 9
55084: ARRAY
55085: PUSH
55086: LD_INT 1
55088: ARRAY
55089: PPUSH
55090: LD_VAR 0 14
55094: PUSH
55095: LD_VAR 0 9
55099: ARRAY
55100: PUSH
55101: LD_INT 2
55103: ARRAY
55104: PPUSH
55105: CALL_OW 428
55109: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55110: LD_VAR 0 14
55114: PUSH
55115: LD_VAR 0 9
55119: ARRAY
55120: PUSH
55121: LD_INT 1
55123: ARRAY
55124: PPUSH
55125: LD_VAR 0 14
55129: PUSH
55130: LD_VAR 0 9
55134: ARRAY
55135: PUSH
55136: LD_INT 2
55138: ARRAY
55139: PPUSH
55140: CALL_OW 351
55144: PUSH
55145: LD_VAR 0 14
55149: PUSH
55150: LD_VAR 0 9
55154: ARRAY
55155: PUSH
55156: LD_INT 1
55158: ARRAY
55159: PPUSH
55160: LD_VAR 0 14
55164: PUSH
55165: LD_VAR 0 9
55169: ARRAY
55170: PUSH
55171: LD_INT 2
55173: ARRAY
55174: PPUSH
55175: CALL_OW 488
55179: NOT
55180: OR
55181: PUSH
55182: LD_VAR 0 13
55186: PPUSH
55187: CALL_OW 247
55191: PUSH
55192: LD_INT 3
55194: EQUAL
55195: OR
55196: IFFALSE 55202
// exit ;
55198: POP
55199: POP
55200: GO 55746
// if not tmp then
55202: LD_VAR 0 13
55206: NOT
55207: IFFALSE 55211
// continue ;
55209: GO 55067
// result := true ;
55211: LD_ADDR_VAR 0 8
55215: PUSH
55216: LD_INT 1
55218: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55219: LD_VAR 0 6
55223: PUSH
55224: LD_VAR 0 13
55228: PPUSH
55229: CALL_OW 247
55233: PUSH
55234: LD_INT 2
55236: EQUAL
55237: AND
55238: PUSH
55239: LD_VAR 0 13
55243: PPUSH
55244: CALL_OW 263
55248: PUSH
55249: LD_INT 1
55251: EQUAL
55252: AND
55253: IFFALSE 55417
// begin if IsDrivenBy ( tmp ) then
55255: LD_VAR 0 13
55259: PPUSH
55260: CALL_OW 311
55264: IFFALSE 55268
// continue ;
55266: GO 55067
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55268: LD_VAR 0 6
55272: PPUSH
55273: LD_INT 3
55275: PUSH
55276: LD_INT 60
55278: PUSH
55279: EMPTY
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 55
55291: PUSH
55292: EMPTY
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PPUSH
55303: CALL_OW 72
55307: IFFALSE 55415
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55309: LD_ADDR_VAR 0 18
55313: PUSH
55314: LD_VAR 0 6
55318: PPUSH
55319: LD_INT 3
55321: PUSH
55322: LD_INT 60
55324: PUSH
55325: EMPTY
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: LD_INT 55
55337: PUSH
55338: EMPTY
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PPUSH
55349: CALL_OW 72
55353: PUSH
55354: LD_INT 1
55356: ARRAY
55357: ST_TO_ADDR
// if IsInUnit ( driver ) then
55358: LD_VAR 0 18
55362: PPUSH
55363: CALL_OW 310
55367: IFFALSE 55378
// ComExit ( driver ) ;
55369: LD_VAR 0 18
55373: PPUSH
55374: CALL 80780 0 1
// AddComEnterUnit ( driver , tmp ) ;
55378: LD_VAR 0 18
55382: PPUSH
55383: LD_VAR 0 13
55387: PPUSH
55388: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55392: LD_VAR 0 18
55396: PPUSH
55397: LD_VAR 0 7
55401: PPUSH
55402: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55406: LD_VAR 0 18
55410: PPUSH
55411: CALL_OW 181
// end ; continue ;
55415: GO 55067
// end ; if not cleaners or not tmp in cleaners then
55417: LD_VAR 0 6
55421: NOT
55422: PUSH
55423: LD_VAR 0 13
55427: PUSH
55428: LD_VAR 0 6
55432: IN
55433: NOT
55434: OR
55435: IFFALSE 55742
// begin if dep then
55437: LD_VAR 0 17
55441: IFFALSE 55577
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55443: LD_ADDR_VAR 0 16
55447: PUSH
55448: LD_VAR 0 17
55452: PUSH
55453: LD_INT 1
55455: ARRAY
55456: PPUSH
55457: CALL_OW 250
55461: PPUSH
55462: LD_VAR 0 17
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: PPUSH
55471: CALL_OW 254
55475: PPUSH
55476: LD_INT 5
55478: PPUSH
55479: CALL_OW 272
55483: PUSH
55484: LD_VAR 0 17
55488: PUSH
55489: LD_INT 1
55491: ARRAY
55492: PPUSH
55493: CALL_OW 251
55497: PPUSH
55498: LD_VAR 0 17
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PPUSH
55507: CALL_OW 254
55511: PPUSH
55512: LD_INT 5
55514: PPUSH
55515: CALL_OW 273
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55524: LD_VAR 0 16
55528: PUSH
55529: LD_INT 1
55531: ARRAY
55532: PPUSH
55533: LD_VAR 0 16
55537: PUSH
55538: LD_INT 2
55540: ARRAY
55541: PPUSH
55542: CALL_OW 488
55546: IFFALSE 55577
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55548: LD_VAR 0 13
55552: PPUSH
55553: LD_VAR 0 16
55557: PUSH
55558: LD_INT 1
55560: ARRAY
55561: PPUSH
55562: LD_VAR 0 16
55566: PUSH
55567: LD_INT 2
55569: ARRAY
55570: PPUSH
55571: CALL_OW 111
// continue ;
55575: GO 55067
// end ; end ; r := GetDir ( tmp ) ;
55577: LD_ADDR_VAR 0 15
55581: PUSH
55582: LD_VAR 0 13
55586: PPUSH
55587: CALL_OW 254
55591: ST_TO_ADDR
// if r = 5 then
55592: LD_VAR 0 15
55596: PUSH
55597: LD_INT 5
55599: EQUAL
55600: IFFALSE 55610
// r := 0 ;
55602: LD_ADDR_VAR 0 15
55606: PUSH
55607: LD_INT 0
55609: ST_TO_ADDR
// for j = r to 5 do
55610: LD_ADDR_VAR 0 10
55614: PUSH
55615: DOUBLE
55616: LD_VAR 0 15
55620: DEC
55621: ST_TO_ADDR
55622: LD_INT 5
55624: PUSH
55625: FOR_TO
55626: IFFALSE 55740
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55628: LD_ADDR_VAR 0 11
55632: PUSH
55633: LD_VAR 0 13
55637: PPUSH
55638: CALL_OW 250
55642: PPUSH
55643: LD_VAR 0 10
55647: PPUSH
55648: LD_INT 2
55650: PPUSH
55651: CALL_OW 272
55655: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55656: LD_ADDR_VAR 0 12
55660: PUSH
55661: LD_VAR 0 13
55665: PPUSH
55666: CALL_OW 251
55670: PPUSH
55671: LD_VAR 0 10
55675: PPUSH
55676: LD_INT 2
55678: PPUSH
55679: CALL_OW 273
55683: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55684: LD_VAR 0 11
55688: PPUSH
55689: LD_VAR 0 12
55693: PPUSH
55694: CALL_OW 488
55698: PUSH
55699: LD_VAR 0 11
55703: PPUSH
55704: LD_VAR 0 12
55708: PPUSH
55709: CALL_OW 428
55713: NOT
55714: AND
55715: IFFALSE 55738
// begin ComMoveXY ( tmp , _x , _y ) ;
55717: LD_VAR 0 13
55721: PPUSH
55722: LD_VAR 0 11
55726: PPUSH
55727: LD_VAR 0 12
55731: PPUSH
55732: CALL_OW 111
// break ;
55736: GO 55740
// end ; end ;
55738: GO 55625
55740: POP
55741: POP
// end ; end ;
55742: GO 55067
55744: POP
55745: POP
// end ;
55746: LD_VAR 0 8
55750: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55751: LD_INT 0
55753: PPUSH
// result := true ;
55754: LD_ADDR_VAR 0 3
55758: PUSH
55759: LD_INT 1
55761: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55762: LD_VAR 0 2
55766: PUSH
55767: LD_INT 24
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55781
55773: LD_INT 33
55775: DOUBLE
55776: EQUAL
55777: IFTRUE 55781
55779: GO 55806
55781: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55782: LD_ADDR_VAR 0 3
55786: PUSH
55787: LD_INT 32
55789: PPUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 321
55799: PUSH
55800: LD_INT 2
55802: EQUAL
55803: ST_TO_ADDR
55804: GO 56122
55806: LD_INT 20
55808: DOUBLE
55809: EQUAL
55810: IFTRUE 55814
55812: GO 55839
55814: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55815: LD_ADDR_VAR 0 3
55819: PUSH
55820: LD_INT 6
55822: PPUSH
55823: LD_VAR 0 1
55827: PPUSH
55828: CALL_OW 321
55832: PUSH
55833: LD_INT 2
55835: EQUAL
55836: ST_TO_ADDR
55837: GO 56122
55839: LD_INT 22
55841: DOUBLE
55842: EQUAL
55843: IFTRUE 55853
55845: LD_INT 36
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55853
55851: GO 55878
55853: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55854: LD_ADDR_VAR 0 3
55858: PUSH
55859: LD_INT 15
55861: PPUSH
55862: LD_VAR 0 1
55866: PPUSH
55867: CALL_OW 321
55871: PUSH
55872: LD_INT 2
55874: EQUAL
55875: ST_TO_ADDR
55876: GO 56122
55878: LD_INT 30
55880: DOUBLE
55881: EQUAL
55882: IFTRUE 55886
55884: GO 55911
55886: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55887: LD_ADDR_VAR 0 3
55891: PUSH
55892: LD_INT 20
55894: PPUSH
55895: LD_VAR 0 1
55899: PPUSH
55900: CALL_OW 321
55904: PUSH
55905: LD_INT 2
55907: EQUAL
55908: ST_TO_ADDR
55909: GO 56122
55911: LD_INT 28
55913: DOUBLE
55914: EQUAL
55915: IFTRUE 55925
55917: LD_INT 21
55919: DOUBLE
55920: EQUAL
55921: IFTRUE 55925
55923: GO 55950
55925: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55926: LD_ADDR_VAR 0 3
55930: PUSH
55931: LD_INT 21
55933: PPUSH
55934: LD_VAR 0 1
55938: PPUSH
55939: CALL_OW 321
55943: PUSH
55944: LD_INT 2
55946: EQUAL
55947: ST_TO_ADDR
55948: GO 56122
55950: LD_INT 16
55952: DOUBLE
55953: EQUAL
55954: IFTRUE 55958
55956: GO 55983
55958: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55959: LD_ADDR_VAR 0 3
55963: PUSH
55964: LD_INT 84
55966: PPUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 321
55976: PUSH
55977: LD_INT 2
55979: EQUAL
55980: ST_TO_ADDR
55981: GO 56122
55983: LD_INT 19
55985: DOUBLE
55986: EQUAL
55987: IFTRUE 55997
55989: LD_INT 23
55991: DOUBLE
55992: EQUAL
55993: IFTRUE 55997
55995: GO 56022
55997: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55998: LD_ADDR_VAR 0 3
56002: PUSH
56003: LD_INT 83
56005: PPUSH
56006: LD_VAR 0 1
56010: PPUSH
56011: CALL_OW 321
56015: PUSH
56016: LD_INT 2
56018: EQUAL
56019: ST_TO_ADDR
56020: GO 56122
56022: LD_INT 17
56024: DOUBLE
56025: EQUAL
56026: IFTRUE 56030
56028: GO 56055
56030: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56031: LD_ADDR_VAR 0 3
56035: PUSH
56036: LD_INT 39
56038: PPUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL_OW 321
56048: PUSH
56049: LD_INT 2
56051: EQUAL
56052: ST_TO_ADDR
56053: GO 56122
56055: LD_INT 18
56057: DOUBLE
56058: EQUAL
56059: IFTRUE 56063
56061: GO 56088
56063: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56064: LD_ADDR_VAR 0 3
56068: PUSH
56069: LD_INT 40
56071: PPUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL_OW 321
56081: PUSH
56082: LD_INT 2
56084: EQUAL
56085: ST_TO_ADDR
56086: GO 56122
56088: LD_INT 27
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56096
56094: GO 56121
56096: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56097: LD_ADDR_VAR 0 3
56101: PUSH
56102: LD_INT 35
56104: PPUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 321
56114: PUSH
56115: LD_INT 2
56117: EQUAL
56118: ST_TO_ADDR
56119: GO 56122
56121: POP
// end ;
56122: LD_VAR 0 3
56126: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56127: LD_INT 0
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
56138: PPUSH
56139: PPUSH
// result := false ;
56140: LD_ADDR_VAR 0 6
56144: PUSH
56145: LD_INT 0
56147: ST_TO_ADDR
// if btype = b_depot then
56148: LD_VAR 0 2
56152: PUSH
56153: LD_INT 0
56155: EQUAL
56156: IFFALSE 56168
// begin result := true ;
56158: LD_ADDR_VAR 0 6
56162: PUSH
56163: LD_INT 1
56165: ST_TO_ADDR
// exit ;
56166: GO 56994
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56168: LD_VAR 0 1
56172: NOT
56173: PUSH
56174: LD_VAR 0 1
56178: PPUSH
56179: CALL_OW 266
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: IN
56194: NOT
56195: OR
56196: PUSH
56197: LD_VAR 0 2
56201: NOT
56202: OR
56203: PUSH
56204: LD_VAR 0 5
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: LD_INT 5
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: IN
56235: NOT
56236: OR
56237: PUSH
56238: LD_VAR 0 3
56242: PPUSH
56243: LD_VAR 0 4
56247: PPUSH
56248: CALL_OW 488
56252: NOT
56253: OR
56254: IFFALSE 56258
// exit ;
56256: GO 56994
// side := GetSide ( depot ) ;
56258: LD_ADDR_VAR 0 9
56262: PUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: CALL_OW 255
56272: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56273: LD_VAR 0 9
56277: PPUSH
56278: LD_VAR 0 2
56282: PPUSH
56283: CALL 55751 0 2
56287: NOT
56288: IFFALSE 56292
// exit ;
56290: GO 56994
// pom := GetBase ( depot ) ;
56292: LD_ADDR_VAR 0 10
56296: PUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: CALL_OW 274
56306: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56307: LD_ADDR_VAR 0 11
56311: PUSH
56312: LD_VAR 0 2
56316: PPUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 248
56326: PPUSH
56327: CALL_OW 450
56331: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56332: LD_VAR 0 10
56336: PPUSH
56337: LD_INT 1
56339: PPUSH
56340: CALL_OW 275
56344: PUSH
56345: LD_VAR 0 11
56349: PUSH
56350: LD_INT 1
56352: ARRAY
56353: GREATEREQUAL
56354: PUSH
56355: LD_VAR 0 10
56359: PPUSH
56360: LD_INT 2
56362: PPUSH
56363: CALL_OW 275
56367: PUSH
56368: LD_VAR 0 11
56372: PUSH
56373: LD_INT 2
56375: ARRAY
56376: GREATEREQUAL
56377: AND
56378: PUSH
56379: LD_VAR 0 10
56383: PPUSH
56384: LD_INT 3
56386: PPUSH
56387: CALL_OW 275
56391: PUSH
56392: LD_VAR 0 11
56396: PUSH
56397: LD_INT 3
56399: ARRAY
56400: GREATEREQUAL
56401: AND
56402: NOT
56403: IFFALSE 56407
// exit ;
56405: GO 56994
// if GetBType ( depot ) = b_depot then
56407: LD_VAR 0 1
56411: PPUSH
56412: CALL_OW 266
56416: PUSH
56417: LD_INT 0
56419: EQUAL
56420: IFFALSE 56432
// dist := 28 else
56422: LD_ADDR_VAR 0 14
56426: PUSH
56427: LD_INT 28
56429: ST_TO_ADDR
56430: GO 56440
// dist := 36 ;
56432: LD_ADDR_VAR 0 14
56436: PUSH
56437: LD_INT 36
56439: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56440: LD_VAR 0 1
56444: PPUSH
56445: LD_VAR 0 3
56449: PPUSH
56450: LD_VAR 0 4
56454: PPUSH
56455: CALL_OW 297
56459: PUSH
56460: LD_VAR 0 14
56464: GREATER
56465: IFFALSE 56469
// exit ;
56467: GO 56994
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56469: LD_ADDR_VAR 0 12
56473: PUSH
56474: LD_VAR 0 2
56478: PPUSH
56479: LD_VAR 0 3
56483: PPUSH
56484: LD_VAR 0 4
56488: PPUSH
56489: LD_VAR 0 5
56493: PPUSH
56494: LD_VAR 0 1
56498: PPUSH
56499: CALL_OW 248
56503: PPUSH
56504: LD_INT 0
56506: PPUSH
56507: CALL 56999 0 6
56511: ST_TO_ADDR
// if not hexes then
56512: LD_VAR 0 12
56516: NOT
56517: IFFALSE 56521
// exit ;
56519: GO 56994
// hex := GetHexInfo ( x , y ) ;
56521: LD_ADDR_VAR 0 15
56525: PUSH
56526: LD_VAR 0 3
56530: PPUSH
56531: LD_VAR 0 4
56535: PPUSH
56536: CALL_OW 546
56540: ST_TO_ADDR
// if hex [ 1 ] then
56541: LD_VAR 0 15
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: IFFALSE 56553
// exit ;
56551: GO 56994
// height := hex [ 2 ] ;
56553: LD_ADDR_VAR 0 13
56557: PUSH
56558: LD_VAR 0 15
56562: PUSH
56563: LD_INT 2
56565: ARRAY
56566: ST_TO_ADDR
// for i = 1 to hexes do
56567: LD_ADDR_VAR 0 7
56571: PUSH
56572: DOUBLE
56573: LD_INT 1
56575: DEC
56576: ST_TO_ADDR
56577: LD_VAR 0 12
56581: PUSH
56582: FOR_TO
56583: IFFALSE 56913
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56585: LD_VAR 0 12
56589: PUSH
56590: LD_VAR 0 7
56594: ARRAY
56595: PUSH
56596: LD_INT 1
56598: ARRAY
56599: PPUSH
56600: LD_VAR 0 12
56604: PUSH
56605: LD_VAR 0 7
56609: ARRAY
56610: PUSH
56611: LD_INT 2
56613: ARRAY
56614: PPUSH
56615: CALL_OW 488
56619: NOT
56620: PUSH
56621: LD_VAR 0 12
56625: PUSH
56626: LD_VAR 0 7
56630: ARRAY
56631: PUSH
56632: LD_INT 1
56634: ARRAY
56635: PPUSH
56636: LD_VAR 0 12
56640: PUSH
56641: LD_VAR 0 7
56645: ARRAY
56646: PUSH
56647: LD_INT 2
56649: ARRAY
56650: PPUSH
56651: CALL_OW 428
56655: PUSH
56656: LD_INT 0
56658: GREATER
56659: OR
56660: PUSH
56661: LD_VAR 0 12
56665: PUSH
56666: LD_VAR 0 7
56670: ARRAY
56671: PUSH
56672: LD_INT 1
56674: ARRAY
56675: PPUSH
56676: LD_VAR 0 12
56680: PUSH
56681: LD_VAR 0 7
56685: ARRAY
56686: PUSH
56687: LD_INT 2
56689: ARRAY
56690: PPUSH
56691: CALL_OW 351
56695: OR
56696: IFFALSE 56702
// exit ;
56698: POP
56699: POP
56700: GO 56994
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56702: LD_ADDR_VAR 0 8
56706: PUSH
56707: LD_VAR 0 12
56711: PUSH
56712: LD_VAR 0 7
56716: ARRAY
56717: PUSH
56718: LD_INT 1
56720: ARRAY
56721: PPUSH
56722: LD_VAR 0 12
56726: PUSH
56727: LD_VAR 0 7
56731: ARRAY
56732: PUSH
56733: LD_INT 2
56735: ARRAY
56736: PPUSH
56737: CALL_OW 546
56741: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56742: LD_VAR 0 8
56746: PUSH
56747: LD_INT 1
56749: ARRAY
56750: PUSH
56751: LD_VAR 0 8
56755: PUSH
56756: LD_INT 2
56758: ARRAY
56759: PUSH
56760: LD_VAR 0 13
56764: PUSH
56765: LD_INT 2
56767: PLUS
56768: GREATER
56769: OR
56770: PUSH
56771: LD_VAR 0 8
56775: PUSH
56776: LD_INT 2
56778: ARRAY
56779: PUSH
56780: LD_VAR 0 13
56784: PUSH
56785: LD_INT 2
56787: MINUS
56788: LESS
56789: OR
56790: PUSH
56791: LD_VAR 0 8
56795: PUSH
56796: LD_INT 3
56798: ARRAY
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 8
56805: PUSH
56806: LD_INT 9
56808: PUSH
56809: LD_INT 10
56811: PUSH
56812: LD_INT 11
56814: PUSH
56815: LD_INT 12
56817: PUSH
56818: LD_INT 13
56820: PUSH
56821: LD_INT 16
56823: PUSH
56824: LD_INT 17
56826: PUSH
56827: LD_INT 18
56829: PUSH
56830: LD_INT 19
56832: PUSH
56833: LD_INT 20
56835: PUSH
56836: LD_INT 21
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: IN
56854: NOT
56855: OR
56856: PUSH
56857: LD_VAR 0 8
56861: PUSH
56862: LD_INT 5
56864: ARRAY
56865: NOT
56866: OR
56867: PUSH
56868: LD_VAR 0 8
56872: PUSH
56873: LD_INT 6
56875: ARRAY
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 7
56885: PUSH
56886: LD_INT 9
56888: PUSH
56889: LD_INT 10
56891: PUSH
56892: LD_INT 11
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: IN
56903: NOT
56904: OR
56905: IFFALSE 56911
// exit ;
56907: POP
56908: POP
56909: GO 56994
// end ;
56911: GO 56582
56913: POP
56914: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56915: LD_VAR 0 9
56919: PPUSH
56920: LD_VAR 0 3
56924: PPUSH
56925: LD_VAR 0 4
56929: PPUSH
56930: LD_INT 20
56932: PPUSH
56933: CALL 48917 0 4
56937: PUSH
56938: LD_INT 4
56940: ARRAY
56941: IFFALSE 56945
// exit ;
56943: GO 56994
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56945: LD_VAR 0 2
56949: PUSH
56950: LD_INT 29
56952: PUSH
56953: LD_INT 30
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: IN
56960: PUSH
56961: LD_VAR 0 3
56965: PPUSH
56966: LD_VAR 0 4
56970: PPUSH
56971: LD_VAR 0 9
56975: PPUSH
56976: CALL_OW 440
56980: NOT
56981: AND
56982: IFFALSE 56986
// exit ;
56984: GO 56994
// result := true ;
56986: LD_ADDR_VAR 0 6
56990: PUSH
56991: LD_INT 1
56993: ST_TO_ADDR
// end ;
56994: LD_VAR 0 6
56998: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56999: LD_INT 0
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
57049: PPUSH
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
57056: PPUSH
57057: PPUSH
57058: PPUSH
// result = [ ] ;
57059: LD_ADDR_VAR 0 7
57063: PUSH
57064: EMPTY
57065: ST_TO_ADDR
// temp_list = [ ] ;
57066: LD_ADDR_VAR 0 9
57070: PUSH
57071: EMPTY
57072: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57073: LD_VAR 0 4
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: LD_INT 4
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: IN
57104: NOT
57105: PUSH
57106: LD_VAR 0 1
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: IN
57121: PUSH
57122: LD_VAR 0 5
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: IN
57141: NOT
57142: AND
57143: OR
57144: IFFALSE 57148
// exit ;
57146: GO 75539
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57148: LD_VAR 0 1
57152: PUSH
57153: LD_INT 6
57155: PUSH
57156: LD_INT 7
57158: PUSH
57159: LD_INT 8
57161: PUSH
57162: LD_INT 13
57164: PUSH
57165: LD_INT 12
57167: PUSH
57168: LD_INT 15
57170: PUSH
57171: LD_INT 11
57173: PUSH
57174: LD_INT 14
57176: PUSH
57177: LD_INT 10
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: IN
57191: IFFALSE 57201
// btype = b_lab ;
57193: LD_ADDR_VAR 0 1
57197: PUSH
57198: LD_INT 6
57200: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57201: LD_VAR 0 6
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: IN
57220: NOT
57221: PUSH
57222: LD_VAR 0 1
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 6
57241: PUSH
57242: LD_INT 36
57244: PUSH
57245: LD_INT 4
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 31
57253: PUSH
57254: LD_INT 32
57256: PUSH
57257: LD_INT 33
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: IN
57273: NOT
57274: PUSH
57275: LD_VAR 0 6
57279: PUSH
57280: LD_INT 1
57282: EQUAL
57283: AND
57284: OR
57285: PUSH
57286: LD_VAR 0 1
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: IN
57301: NOT
57302: PUSH
57303: LD_VAR 0 6
57307: PUSH
57308: LD_INT 2
57310: EQUAL
57311: AND
57312: OR
57313: IFFALSE 57323
// mode = 0 ;
57315: LD_ADDR_VAR 0 6
57319: PUSH
57320: LD_INT 0
57322: ST_TO_ADDR
// case mode of 0 :
57323: LD_VAR 0 6
57327: PUSH
57328: LD_INT 0
57330: DOUBLE
57331: EQUAL
57332: IFTRUE 57336
57334: GO 68789
57336: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57337: LD_ADDR_VAR 0 11
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57530: LD_ADDR_VAR 0 12
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57726: LD_ADDR_VAR 0 13
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57925: LD_ADDR_VAR 0 14
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58121: LD_ADDR_VAR 0 15
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58314: LD_ADDR_VAR 0 16
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58507: LD_ADDR_VAR 0 17
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58737: LD_ADDR_VAR 0 18
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58967: LD_ADDR_VAR 0 19
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 20
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59427: LD_ADDR_VAR 0 21
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59657: LD_ADDR_VAR 0 22
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59887: LD_ADDR_VAR 0 23
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60167: LD_ADDR_VAR 0 24
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60443: LD_ADDR_VAR 0 25
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 3
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60717: LD_ADDR_VAR 0 26
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60993: LD_ADDR_VAR 0 27
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: NEG
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61273: LD_ADDR_VAR 0 28
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61555: LD_ADDR_VAR 0 29
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61834: LD_ADDR_VAR 0 30
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62112: LD_ADDR_VAR 0 31
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62390: LD_ADDR_VAR 0 32
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 2
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62668: LD_ADDR_VAR 0 33
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62947: LD_ADDR_VAR 0 34
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63227: LD_ADDR_VAR 0 35
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63339: LD_ADDR_VAR 0 36
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63451: LD_ADDR_VAR 0 37
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63563: LD_ADDR_VAR 0 38
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63675: LD_ADDR_VAR 0 39
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63787: LD_ADDR_VAR 0 40
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63899: LD_ADDR_VAR 0 41
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: NEG
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: NEG
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64249: LD_ADDR_VAR 0 42
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: LD_INT 3
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: NEG
64559: PUSH
64560: LD_INT 3
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64599: LD_ADDR_VAR 0 43
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64947: LD_ADDR_VAR 0 44
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65297: LD_ADDR_VAR 0 45
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: LD_INT 3
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65647: LD_ADDR_VAR 0 46
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 3
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: NEG
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65995: LD_ADDR_VAR 0 47
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 2
66122: NEG
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66146: LD_ADDR_VAR 0 48
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 1
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66293: LD_ADDR_VAR 0 49
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 2
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66437: LD_ADDR_VAR 0 50
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 2
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66581: LD_ADDR_VAR 0 51
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66728: LD_ADDR_VAR 0 52
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66879: LD_ADDR_VAR 0 53
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 2
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 2
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: LD_INT 2
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67109: LD_ADDR_VAR 0 54
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 1
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 2
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: NEG
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67339: LD_ADDR_VAR 0 55
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: LD_INT 1
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: LD_INT 2
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67569: LD_ADDR_VAR 0 56
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 1
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 2
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: NEG
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67799: LD_ADDR_VAR 0 57
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 2
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68029: LD_ADDR_VAR 0 58
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 0
68122: PUSH
68123: LD_INT 2
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 2
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: LD_INT 2
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68259: LD_ADDR_VAR 0 59
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68347: LD_ADDR_VAR 0 60
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: LD_INT 1
68420: NEG
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68435: LD_ADDR_VAR 0 61
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68523: LD_ADDR_VAR 0 62
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68611: LD_ADDR_VAR 0 63
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68699: LD_ADDR_VAR 0 64
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: ST_TO_ADDR
// end ; 1 :
68787: GO 74684
68789: LD_INT 1
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68797
68795: GO 71420
68797: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68798: LD_ADDR_VAR 0 11
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68842: LD_ADDR_VAR 0 12
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 3
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68883: LD_ADDR_VAR 0 13
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68923: LD_ADDR_VAR 0 14
68927: PUSH
68928: LD_INT 1
68930: PUSH
68931: LD_INT 3
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68964: LD_ADDR_VAR 0 15
68968: PUSH
68969: LD_INT 2
68971: NEG
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 3
68982: NEG
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69008: LD_ADDR_VAR 0 16
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69054: LD_ADDR_VAR 0 17
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69098: LD_ADDR_VAR 0 18
69102: PUSH
69103: LD_INT 2
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: LIST
69138: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69139: LD_ADDR_VAR 0 19
69143: PUSH
69144: LD_INT 3
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 3
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: PUSH
69167: LD_INT 3
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69179: LD_ADDR_VAR 0 20
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: LD_INT 3
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69220: LD_ADDR_VAR 0 21
69224: PUSH
69225: LD_INT 2
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 3
69238: NEG
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: NEG
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69264: LD_ADDR_VAR 0 22
69268: PUSH
69269: LD_INT 2
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 3
69295: NEG
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: LIST
69309: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69310: LD_ADDR_VAR 0 23
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 3
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69354: LD_ADDR_VAR 0 24
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: LIST
69394: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69395: LD_ADDR_VAR 0 25
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 4
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 3
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69435: LD_ADDR_VAR 0 26
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69476: LD_ADDR_VAR 0 27
69480: PUSH
69481: LD_INT 3
69483: NEG
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: NEG
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 4
69505: NEG
69506: PUSH
69507: LD_INT 1
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69520: LD_ADDR_VAR 0 28
69524: PUSH
69525: LD_INT 3
69527: NEG
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: NEG
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: NEG
69552: PUSH
69553: LD_INT 3
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69566: LD_ADDR_VAR 0 29
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 2
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: LD_INT 4
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 4
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: LD_INT 5
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: PUSH
69665: LD_INT 4
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 6
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: LD_INT 6
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 5
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69721: LD_ADDR_VAR 0 30
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: LD_INT 1
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 1
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 5
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 5
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 5
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 6
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 6
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69864: LD_ADDR_VAR 0 31
69868: PUSH
69869: LD_INT 3
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 3
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: LD_INT 3
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: LD_INT 3
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: LD_INT 4
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 5
69941: PUSH
69942: LD_INT 5
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 4
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 6
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 6
69971: PUSH
69972: LD_INT 6
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: PUSH
69982: LD_INT 6
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70003: LD_ADDR_VAR 0 32
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: LD_INT 3
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 2
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: LD_INT 4
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: NEG
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: LD_INT 5
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: LD_INT 5
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: LD_INT 4
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 6
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 6
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70146: LD_ADDR_VAR 0 33
70150: PUSH
70151: LD_INT 2
70153: NEG
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 3
70175: NEG
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 3
70187: NEG
70188: PUSH
70189: LD_INT 1
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: NEG
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: NEG
70222: PUSH
70223: LD_INT 1
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 5
70232: NEG
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 5
70243: NEG
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 5
70255: NEG
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 6
70266: NEG
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 6
70277: NEG
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70301: LD_ADDR_VAR 0 34
70305: PUSH
70306: LD_INT 2
70308: NEG
70309: PUSH
70310: LD_INT 3
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: NEG
70381: PUSH
70382: LD_INT 5
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: LD_INT 4
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: NEG
70405: PUSH
70406: LD_INT 5
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 5
70416: NEG
70417: PUSH
70418: LD_INT 6
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 6
70428: NEG
70429: PUSH
70430: LD_INT 5
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 6
70440: NEG
70441: PUSH
70442: LD_INT 6
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70464: LD_ADDR_VAR 0 41
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: NEG
70483: PUSH
70484: LD_INT 3
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: LD_INT 2
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70508: LD_ADDR_VAR 0 42
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 3
70536: PUSH
70537: LD_INT 1
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70549: LD_ADDR_VAR 0 43
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: LD_INT 3
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70589: LD_ADDR_VAR 0 44
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_INT 2
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70630: LD_ADDR_VAR 0 45
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 2
70648: NEG
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: LIST
70673: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70674: LD_ADDR_VAR 0 46
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 2
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: LD_INT 3
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: NEG
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70720: LD_ADDR_VAR 0 47
70724: PUSH
70725: LD_INT 2
70727: NEG
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70753: LD_ADDR_VAR 0 48
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: LD_INT 2
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70784: LD_ADDR_VAR 0 49
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70813: LD_ADDR_VAR 0 50
70817: PUSH
70818: LD_INT 2
70820: PUSH
70821: LD_INT 3
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70842: LD_ADDR_VAR 0 51
70846: PUSH
70847: LD_INT 1
70849: NEG
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: NEG
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70873: LD_ADDR_VAR 0 52
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: LD_INT 1
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 3
70892: NEG
70893: PUSH
70894: LD_INT 2
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70906: LD_ADDR_VAR 0 53
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 3
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: LD_INT 2
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: LIST
70949: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70950: LD_ADDR_VAR 0 54
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 3
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: LIST
70990: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70991: LD_ADDR_VAR 0 55
70995: PUSH
70996: LD_INT 3
70998: PUSH
70999: LD_INT 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: LD_INT 3
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71031: LD_ADDR_VAR 0 56
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: LD_INT 3
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: LD_INT 3
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: LD_INT 2
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: LIST
71071: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71072: LD_ADDR_VAR 0 57
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 3
71101: NEG
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71116: LD_ADDR_VAR 0 58
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: LD_INT 2
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 3
71147: NEG
71148: PUSH
71149: LD_INT 3
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71162: LD_ADDR_VAR 0 59
71166: PUSH
71167: LD_INT 1
71169: NEG
71170: PUSH
71171: LD_INT 2
71173: NEG
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: PUSH
71193: LD_INT 1
71195: NEG
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: LIST
71205: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71206: LD_ADDR_VAR 0 60
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 2
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: LD_INT 1
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: LIST
71246: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71247: LD_ADDR_VAR 0 61
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: LD_INT 1
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 2
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71287: LD_ADDR_VAR 0 62
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: LIST
71327: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71328: LD_ADDR_VAR 0 63
71332: PUSH
71333: LD_INT 1
71335: NEG
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: NEG
71347: PUSH
71348: LD_INT 0
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71372: LD_ADDR_VAR 0 64
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 2
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: LD_INT 2
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: ST_TO_ADDR
// end ; 2 :
71418: GO 74684
71420: LD_INT 2
71422: DOUBLE
71423: EQUAL
71424: IFTRUE 71428
71426: GO 74683
71428: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71429: LD_ADDR_VAR 0 29
71433: PUSH
71434: LD_INT 4
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 4
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 5
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 5
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 4
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 3
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: LD_INT 1
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 3
71508: PUSH
71509: LD_INT 2
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 5
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 3
71529: PUSH
71530: LD_INT 3
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 3
71539: PUSH
71540: LD_INT 2
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 4
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 3
71569: PUSH
71570: LD_INT 4
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 2
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 4
71599: PUSH
71600: LD_INT 2
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 4
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 4
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: LD_INT 4
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 1
71649: PUSH
71650: LD_INT 5
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 5
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 4
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: LD_INT 3
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 5
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 2
71701: NEG
71702: PUSH
71703: LD_INT 3
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 3
71712: NEG
71713: PUSH
71714: LD_INT 0
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 3
71723: NEG
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 2
71735: NEG
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 2
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 4
71791: NEG
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 2
71803: NEG
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: NEG
71815: PUSH
71816: LD_INT 4
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 4
71826: NEG
71827: PUSH
71828: LD_INT 5
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 3
71838: NEG
71839: PUSH
71840: LD_INT 4
71842: NEG
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 3
71850: NEG
71851: PUSH
71852: LD_INT 3
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 4
71862: NEG
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 5
71874: NEG
71875: PUSH
71876: LD_INT 4
71878: NEG
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 5
71886: NEG
71887: PUSH
71888: LD_INT 5
71890: NEG
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 3
71898: NEG
71899: PUSH
71900: LD_INT 5
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 5
71910: NEG
71911: PUSH
71912: LD_INT 3
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71967: LD_ADDR_VAR 0 30
71971: PUSH
71972: LD_INT 4
71974: PUSH
71975: LD_INT 4
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 4
71984: PUSH
71985: LD_INT 3
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 5
71994: PUSH
71995: LD_INT 4
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 5
72004: PUSH
72005: LD_INT 5
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 4
72014: PUSH
72015: LD_INT 5
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: LD_INT 4
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 5
72044: PUSH
72045: LD_INT 3
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 5
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 1
72084: PUSH
72085: LD_INT 3
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 1
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 1
72114: NEG
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: LD_INT 2
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 2
72136: PUSH
72137: LD_INT 4
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 4
72157: NEG
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: LD_INT 1
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 3
72180: NEG
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 3
72191: NEG
72192: PUSH
72193: LD_INT 1
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: LD_INT 1
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 5
72213: NEG
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 5
72224: NEG
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 5
72236: NEG
72237: PUSH
72238: LD_INT 2
72240: NEG
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 3
72248: NEG
72249: PUSH
72250: LD_INT 2
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: NEG
72260: PUSH
72261: LD_INT 3
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: LD_INT 4
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 2
72283: NEG
72284: PUSH
72285: LD_INT 3
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 2
72295: NEG
72296: PUSH
72297: LD_INT 2
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 3
72307: NEG
72308: PUSH
72309: LD_INT 2
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 4
72319: NEG
72320: PUSH
72321: LD_INT 3
72323: NEG
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 4
72331: NEG
72332: PUSH
72333: LD_INT 4
72335: NEG
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 2
72343: NEG
72344: PUSH
72345: LD_INT 4
72347: NEG
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 4
72355: NEG
72356: PUSH
72357: LD_INT 2
72359: NEG
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 4
72370: NEG
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: LD_INT 5
72381: NEG
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 1
72389: PUSH
72390: LD_INT 4
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 3
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 1
72422: NEG
72423: PUSH
72424: LD_INT 4
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: LD_INT 5
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 3
72449: NEG
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 2
72457: NEG
72458: PUSH
72459: LD_INT 5
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72514: LD_ADDR_VAR 0 31
72518: PUSH
72519: LD_INT 0
72521: PUSH
72522: LD_INT 4
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: LD_INT 4
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: LD_INT 5
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: LD_INT 5
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: LD_INT 4
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 1
72582: NEG
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: LD_INT 5
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 2
72603: NEG
72604: PUSH
72605: LD_INT 3
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 3
72614: NEG
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 3
72625: NEG
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 2
72637: NEG
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 2
72648: NEG
72649: PUSH
72650: LD_INT 1
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 3
72659: NEG
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 4
72670: NEG
72671: PUSH
72672: LD_INT 0
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 4
72681: NEG
72682: PUSH
72683: LD_INT 1
72685: NEG
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 4
72693: NEG
72694: PUSH
72695: LD_INT 2
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 2
72705: NEG
72706: PUSH
72707: LD_INT 2
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 4
72716: NEG
72717: PUSH
72718: LD_INT 4
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 4
72728: NEG
72729: PUSH
72730: LD_INT 5
72732: NEG
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 3
72740: NEG
72741: PUSH
72742: LD_INT 4
72744: NEG
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 3
72752: NEG
72753: PUSH
72754: LD_INT 3
72756: NEG
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: NEG
72765: PUSH
72766: LD_INT 3
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 5
72776: NEG
72777: PUSH
72778: LD_INT 4
72780: NEG
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 5
72788: NEG
72789: PUSH
72790: LD_INT 5
72792: NEG
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 3
72800: NEG
72801: PUSH
72802: LD_INT 5
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 5
72812: NEG
72813: PUSH
72814: LD_INT 3
72816: NEG
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 3
72827: NEG
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 4
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 1
72846: PUSH
72847: LD_INT 3
72849: NEG
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: PUSH
72858: LD_INT 2
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: LD_INT 2
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: LD_INT 3
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: LD_INT 4
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 2
72903: PUSH
72904: LD_INT 2
72906: NEG
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: LD_INT 4
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 4
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 5
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 5
72957: PUSH
72958: LD_INT 1
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 4
72967: PUSH
72968: LD_INT 1
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 3
72977: PUSH
72978: LD_INT 0
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 3
72987: PUSH
72988: LD_INT 1
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 3
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 5
73009: PUSH
73010: LD_INT 2
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73064: LD_ADDR_VAR 0 32
73068: PUSH
73069: LD_INT 4
73071: NEG
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 4
73082: NEG
73083: PUSH
73084: LD_INT 1
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 3
73094: NEG
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 3
73105: NEG
73106: PUSH
73107: LD_INT 1
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 4
73116: NEG
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 5
73127: NEG
73128: PUSH
73129: LD_INT 0
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 5
73138: NEG
73139: PUSH
73140: LD_INT 1
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 5
73150: NEG
73151: PUSH
73152: LD_INT 2
73154: NEG
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 3
73162: NEG
73163: PUSH
73164: LD_INT 2
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 3
73173: NEG
73174: PUSH
73175: LD_INT 3
73177: NEG
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 3
73185: NEG
73186: PUSH
73187: LD_INT 4
73189: NEG
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 2
73197: NEG
73198: PUSH
73199: LD_INT 3
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: NEG
73210: PUSH
73211: LD_INT 2
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 3
73221: NEG
73222: PUSH
73223: LD_INT 2
73225: NEG
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 4
73233: NEG
73234: PUSH
73235: LD_INT 3
73237: NEG
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 4
73245: NEG
73246: PUSH
73247: LD_INT 4
73249: NEG
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 2
73257: NEG
73258: PUSH
73259: LD_INT 4
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 4
73269: NEG
73270: PUSH
73271: LD_INT 2
73273: NEG
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: LD_INT 4
73284: NEG
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: LD_INT 5
73295: NEG
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 1
73303: PUSH
73304: LD_INT 4
73306: NEG
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: LD_INT 3
73317: NEG
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 0
73325: PUSH
73326: LD_INT 3
73328: NEG
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 1
73336: NEG
73337: PUSH
73338: LD_INT 4
73340: NEG
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 1
73348: NEG
73349: PUSH
73350: LD_INT 5
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 3
73363: NEG
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 2
73371: NEG
73372: PUSH
73373: LD_INT 5
73375: NEG
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 3
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: LD_INT 1
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 4
73404: PUSH
73405: LD_INT 0
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 4
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 3
73424: PUSH
73425: LD_INT 1
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 2
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 2
73444: PUSH
73445: LD_INT 1
73447: NEG
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 2
73455: PUSH
73456: LD_INT 2
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 4
73466: PUSH
73467: LD_INT 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 4
73476: PUSH
73477: LD_INT 4
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: PUSH
73487: LD_INT 3
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 5
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 5
73506: PUSH
73507: LD_INT 5
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: LD_INT 5
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: LD_INT 4
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 3
73536: PUSH
73537: LD_INT 3
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 5
73546: PUSH
73547: LD_INT 3
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 3
73556: PUSH
73557: LD_INT 5
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73611: LD_ADDR_VAR 0 33
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: LD_INT 4
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 4
73630: NEG
73631: PUSH
73632: LD_INT 5
73634: NEG
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 3
73642: NEG
73643: PUSH
73644: LD_INT 4
73646: NEG
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 3
73654: NEG
73655: PUSH
73656: LD_INT 3
73658: NEG
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 4
73666: NEG
73667: PUSH
73668: LD_INT 3
73670: NEG
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 5
73678: NEG
73679: PUSH
73680: LD_INT 4
73682: NEG
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 5
73690: NEG
73691: PUSH
73692: LD_INT 5
73694: NEG
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 3
73702: NEG
73703: PUSH
73704: LD_INT 5
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 5
73714: NEG
73715: PUSH
73716: LD_INT 3
73718: NEG
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: LD_INT 3
73729: NEG
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: LD_INT 4
73740: NEG
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 1
73748: PUSH
73749: LD_INT 3
73751: NEG
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 2
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 0
73770: PUSH
73771: LD_INT 2
73773: NEG
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 1
73781: NEG
73782: PUSH
73783: LD_INT 3
73785: NEG
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: NEG
73794: PUSH
73795: LD_INT 4
73797: NEG
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: LD_INT 2
73808: NEG
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 2
73816: NEG
73817: PUSH
73818: LD_INT 4
73820: NEG
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 4
73828: PUSH
73829: LD_INT 0
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: LD_INT 1
73841: NEG
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 5
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 5
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 4
73869: PUSH
73870: LD_INT 1
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 3
73879: PUSH
73880: LD_INT 0
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 3
73889: PUSH
73890: LD_INT 1
73892: NEG
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: LD_INT 2
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 5
73911: PUSH
73912: LD_INT 2
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 3
73921: PUSH
73922: LD_INT 3
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 3
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 4
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 4
73951: PUSH
73952: LD_INT 4
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: LD_INT 4
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: LD_INT 2
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 4
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 2
74001: PUSH
74002: LD_INT 4
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 0
74011: PUSH
74012: LD_INT 4
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: LD_INT 3
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 1
74031: PUSH
74032: LD_INT 4
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 1
74041: PUSH
74042: LD_INT 5
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 5
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 1
74061: NEG
74062: PUSH
74063: LD_INT 4
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 1
74072: NEG
74073: PUSH
74074: LD_INT 3
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 2
74083: PUSH
74084: LD_INT 5
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 2
74093: NEG
74094: PUSH
74095: LD_INT 3
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74149: LD_ADDR_VAR 0 34
74153: PUSH
74154: LD_INT 0
74156: PUSH
74157: LD_INT 4
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 0
74167: PUSH
74168: LD_INT 5
74170: NEG
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: LD_INT 4
74181: NEG
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: LD_INT 3
74192: NEG
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 0
74200: PUSH
74201: LD_INT 3
74203: NEG
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 1
74211: NEG
74212: PUSH
74213: LD_INT 4
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: LD_INT 5
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: LD_INT 3
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 2
74246: NEG
74247: PUSH
74248: LD_INT 5
74250: NEG
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 3
74268: PUSH
74269: LD_INT 1
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 4
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 4
74289: PUSH
74290: LD_INT 1
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 3
74299: PUSH
74300: LD_INT 1
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 2
74309: PUSH
74310: LD_INT 0
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 2
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: PUSH
74331: LD_INT 2
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 4
74341: PUSH
74342: LD_INT 2
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 4
74351: PUSH
74352: LD_INT 4
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 4
74361: PUSH
74362: LD_INT 3
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 5
74371: PUSH
74372: LD_INT 4
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 5
74381: PUSH
74382: LD_INT 5
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 4
74391: PUSH
74392: LD_INT 5
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 3
74401: PUSH
74402: LD_INT 4
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 3
74411: PUSH
74412: LD_INT 3
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 5
74421: PUSH
74422: LD_INT 3
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 3
74431: PUSH
74432: LD_INT 5
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: LD_INT 3
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: LD_INT 2
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 1
74461: PUSH
74462: LD_INT 3
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: LD_INT 4
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 0
74481: PUSH
74482: LD_INT 4
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 1
74491: NEG
74492: PUSH
74493: LD_INT 3
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 1
74502: NEG
74503: PUSH
74504: LD_INT 2
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 2
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 2
74523: NEG
74524: PUSH
74525: LD_INT 2
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 4
74534: NEG
74535: PUSH
74536: LD_INT 0
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 4
74545: NEG
74546: PUSH
74547: LD_INT 1
74549: NEG
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 3
74557: NEG
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 3
74568: NEG
74569: PUSH
74570: LD_INT 1
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 4
74579: NEG
74580: PUSH
74581: LD_INT 1
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 5
74590: NEG
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 5
74601: NEG
74602: PUSH
74603: LD_INT 1
74605: NEG
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 5
74613: NEG
74614: PUSH
74615: LD_INT 2
74617: NEG
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 3
74625: NEG
74626: PUSH
74627: LD_INT 2
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: ST_TO_ADDR
// end ; end ;
74681: GO 74684
74683: POP
// case btype of b_depot , b_warehouse :
74684: LD_VAR 0 1
74688: PUSH
74689: LD_INT 0
74691: DOUBLE
74692: EQUAL
74693: IFTRUE 74703
74695: LD_INT 1
74697: DOUBLE
74698: EQUAL
74699: IFTRUE 74703
74701: GO 74904
74703: POP
// case nation of nation_american :
74704: LD_VAR 0 5
74708: PUSH
74709: LD_INT 1
74711: DOUBLE
74712: EQUAL
74713: IFTRUE 74717
74715: GO 74773
74717: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74718: LD_ADDR_VAR 0 9
74722: PUSH
74723: LD_VAR 0 11
74727: PUSH
74728: LD_VAR 0 12
74732: PUSH
74733: LD_VAR 0 13
74737: PUSH
74738: LD_VAR 0 14
74742: PUSH
74743: LD_VAR 0 15
74747: PUSH
74748: LD_VAR 0 16
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: PUSH
74761: LD_VAR 0 4
74765: PUSH
74766: LD_INT 1
74768: PLUS
74769: ARRAY
74770: ST_TO_ADDR
74771: GO 74902
74773: LD_INT 2
74775: DOUBLE
74776: EQUAL
74777: IFTRUE 74781
74779: GO 74837
74781: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74782: LD_ADDR_VAR 0 9
74786: PUSH
74787: LD_VAR 0 17
74791: PUSH
74792: LD_VAR 0 18
74796: PUSH
74797: LD_VAR 0 19
74801: PUSH
74802: LD_VAR 0 20
74806: PUSH
74807: LD_VAR 0 21
74811: PUSH
74812: LD_VAR 0 22
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: PUSH
74825: LD_VAR 0 4
74829: PUSH
74830: LD_INT 1
74832: PLUS
74833: ARRAY
74834: ST_TO_ADDR
74835: GO 74902
74837: LD_INT 3
74839: DOUBLE
74840: EQUAL
74841: IFTRUE 74845
74843: GO 74901
74845: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74846: LD_ADDR_VAR 0 9
74850: PUSH
74851: LD_VAR 0 23
74855: PUSH
74856: LD_VAR 0 24
74860: PUSH
74861: LD_VAR 0 25
74865: PUSH
74866: LD_VAR 0 26
74870: PUSH
74871: LD_VAR 0 27
74875: PUSH
74876: LD_VAR 0 28
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: PUSH
74889: LD_VAR 0 4
74893: PUSH
74894: LD_INT 1
74896: PLUS
74897: ARRAY
74898: ST_TO_ADDR
74899: GO 74902
74901: POP
74902: GO 75457
74904: LD_INT 2
74906: DOUBLE
74907: EQUAL
74908: IFTRUE 74918
74910: LD_INT 3
74912: DOUBLE
74913: EQUAL
74914: IFTRUE 74918
74916: GO 74974
74918: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74919: LD_ADDR_VAR 0 9
74923: PUSH
74924: LD_VAR 0 29
74928: PUSH
74929: LD_VAR 0 30
74933: PUSH
74934: LD_VAR 0 31
74938: PUSH
74939: LD_VAR 0 32
74943: PUSH
74944: LD_VAR 0 33
74948: PUSH
74949: LD_VAR 0 34
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: PUSH
74962: LD_VAR 0 4
74966: PUSH
74967: LD_INT 1
74969: PLUS
74970: ARRAY
74971: ST_TO_ADDR
74972: GO 75457
74974: LD_INT 16
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 75036
74980: LD_INT 17
74982: DOUBLE
74983: EQUAL
74984: IFTRUE 75036
74986: LD_INT 18
74988: DOUBLE
74989: EQUAL
74990: IFTRUE 75036
74992: LD_INT 19
74994: DOUBLE
74995: EQUAL
74996: IFTRUE 75036
74998: LD_INT 22
75000: DOUBLE
75001: EQUAL
75002: IFTRUE 75036
75004: LD_INT 20
75006: DOUBLE
75007: EQUAL
75008: IFTRUE 75036
75010: LD_INT 21
75012: DOUBLE
75013: EQUAL
75014: IFTRUE 75036
75016: LD_INT 23
75018: DOUBLE
75019: EQUAL
75020: IFTRUE 75036
75022: LD_INT 24
75024: DOUBLE
75025: EQUAL
75026: IFTRUE 75036
75028: LD_INT 25
75030: DOUBLE
75031: EQUAL
75032: IFTRUE 75036
75034: GO 75092
75036: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75037: LD_ADDR_VAR 0 9
75041: PUSH
75042: LD_VAR 0 35
75046: PUSH
75047: LD_VAR 0 36
75051: PUSH
75052: LD_VAR 0 37
75056: PUSH
75057: LD_VAR 0 38
75061: PUSH
75062: LD_VAR 0 39
75066: PUSH
75067: LD_VAR 0 40
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: LD_VAR 0 4
75084: PUSH
75085: LD_INT 1
75087: PLUS
75088: ARRAY
75089: ST_TO_ADDR
75090: GO 75457
75092: LD_INT 6
75094: DOUBLE
75095: EQUAL
75096: IFTRUE 75148
75098: LD_INT 7
75100: DOUBLE
75101: EQUAL
75102: IFTRUE 75148
75104: LD_INT 8
75106: DOUBLE
75107: EQUAL
75108: IFTRUE 75148
75110: LD_INT 13
75112: DOUBLE
75113: EQUAL
75114: IFTRUE 75148
75116: LD_INT 12
75118: DOUBLE
75119: EQUAL
75120: IFTRUE 75148
75122: LD_INT 15
75124: DOUBLE
75125: EQUAL
75126: IFTRUE 75148
75128: LD_INT 11
75130: DOUBLE
75131: EQUAL
75132: IFTRUE 75148
75134: LD_INT 14
75136: DOUBLE
75137: EQUAL
75138: IFTRUE 75148
75140: LD_INT 10
75142: DOUBLE
75143: EQUAL
75144: IFTRUE 75148
75146: GO 75204
75148: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75149: LD_ADDR_VAR 0 9
75153: PUSH
75154: LD_VAR 0 41
75158: PUSH
75159: LD_VAR 0 42
75163: PUSH
75164: LD_VAR 0 43
75168: PUSH
75169: LD_VAR 0 44
75173: PUSH
75174: LD_VAR 0 45
75178: PUSH
75179: LD_VAR 0 46
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: PUSH
75192: LD_VAR 0 4
75196: PUSH
75197: LD_INT 1
75199: PLUS
75200: ARRAY
75201: ST_TO_ADDR
75202: GO 75457
75204: LD_INT 36
75206: DOUBLE
75207: EQUAL
75208: IFTRUE 75212
75210: GO 75268
75212: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75213: LD_ADDR_VAR 0 9
75217: PUSH
75218: LD_VAR 0 47
75222: PUSH
75223: LD_VAR 0 48
75227: PUSH
75228: LD_VAR 0 49
75232: PUSH
75233: LD_VAR 0 50
75237: PUSH
75238: LD_VAR 0 51
75242: PUSH
75243: LD_VAR 0 52
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: PUSH
75256: LD_VAR 0 4
75260: PUSH
75261: LD_INT 1
75263: PLUS
75264: ARRAY
75265: ST_TO_ADDR
75266: GO 75457
75268: LD_INT 4
75270: DOUBLE
75271: EQUAL
75272: IFTRUE 75294
75274: LD_INT 5
75276: DOUBLE
75277: EQUAL
75278: IFTRUE 75294
75280: LD_INT 34
75282: DOUBLE
75283: EQUAL
75284: IFTRUE 75294
75286: LD_INT 37
75288: DOUBLE
75289: EQUAL
75290: IFTRUE 75294
75292: GO 75350
75294: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75295: LD_ADDR_VAR 0 9
75299: PUSH
75300: LD_VAR 0 53
75304: PUSH
75305: LD_VAR 0 54
75309: PUSH
75310: LD_VAR 0 55
75314: PUSH
75315: LD_VAR 0 56
75319: PUSH
75320: LD_VAR 0 57
75324: PUSH
75325: LD_VAR 0 58
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: PUSH
75338: LD_VAR 0 4
75342: PUSH
75343: LD_INT 1
75345: PLUS
75346: ARRAY
75347: ST_TO_ADDR
75348: GO 75457
75350: LD_INT 31
75352: DOUBLE
75353: EQUAL
75354: IFTRUE 75400
75356: LD_INT 32
75358: DOUBLE
75359: EQUAL
75360: IFTRUE 75400
75362: LD_INT 33
75364: DOUBLE
75365: EQUAL
75366: IFTRUE 75400
75368: LD_INT 27
75370: DOUBLE
75371: EQUAL
75372: IFTRUE 75400
75374: LD_INT 26
75376: DOUBLE
75377: EQUAL
75378: IFTRUE 75400
75380: LD_INT 28
75382: DOUBLE
75383: EQUAL
75384: IFTRUE 75400
75386: LD_INT 29
75388: DOUBLE
75389: EQUAL
75390: IFTRUE 75400
75392: LD_INT 30
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75456
75400: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75401: LD_ADDR_VAR 0 9
75405: PUSH
75406: LD_VAR 0 59
75410: PUSH
75411: LD_VAR 0 60
75415: PUSH
75416: LD_VAR 0 61
75420: PUSH
75421: LD_VAR 0 62
75425: PUSH
75426: LD_VAR 0 63
75430: PUSH
75431: LD_VAR 0 64
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: LD_VAR 0 4
75448: PUSH
75449: LD_INT 1
75451: PLUS
75452: ARRAY
75453: ST_TO_ADDR
75454: GO 75457
75456: POP
// temp_list2 = [ ] ;
75457: LD_ADDR_VAR 0 10
75461: PUSH
75462: EMPTY
75463: ST_TO_ADDR
// for i in temp_list do
75464: LD_ADDR_VAR 0 8
75468: PUSH
75469: LD_VAR 0 9
75473: PUSH
75474: FOR_IN
75475: IFFALSE 75527
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75477: LD_ADDR_VAR 0 10
75481: PUSH
75482: LD_VAR 0 10
75486: PUSH
75487: LD_VAR 0 8
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: PUSH
75496: LD_VAR 0 2
75500: PLUS
75501: PUSH
75502: LD_VAR 0 8
75506: PUSH
75507: LD_INT 2
75509: ARRAY
75510: PUSH
75511: LD_VAR 0 3
75515: PLUS
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: EMPTY
75522: LIST
75523: ADD
75524: ST_TO_ADDR
75525: GO 75474
75527: POP
75528: POP
// result = temp_list2 ;
75529: LD_ADDR_VAR 0 7
75533: PUSH
75534: LD_VAR 0 10
75538: ST_TO_ADDR
// end ;
75539: LD_VAR 0 7
75543: RET
// export function EnemyInRange ( unit , dist ) ; begin
75544: LD_INT 0
75546: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75547: LD_ADDR_VAR 0 3
75551: PUSH
75552: LD_VAR 0 1
75556: PPUSH
75557: CALL_OW 255
75561: PPUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: CALL_OW 250
75571: PPUSH
75572: LD_VAR 0 1
75576: PPUSH
75577: CALL_OW 251
75581: PPUSH
75582: LD_VAR 0 2
75586: PPUSH
75587: CALL 48917 0 4
75591: PUSH
75592: LD_INT 4
75594: ARRAY
75595: ST_TO_ADDR
// end ;
75596: LD_VAR 0 3
75600: RET
// export function PlayerSeeMe ( unit ) ; begin
75601: LD_INT 0
75603: PPUSH
// result := See ( your_side , unit ) ;
75604: LD_ADDR_VAR 0 2
75608: PUSH
75609: LD_OWVAR 2
75613: PPUSH
75614: LD_VAR 0 1
75618: PPUSH
75619: CALL_OW 292
75623: ST_TO_ADDR
// end ;
75624: LD_VAR 0 2
75628: RET
// export function ReverseDir ( unit ) ; begin
75629: LD_INT 0
75631: PPUSH
// if not unit then
75632: LD_VAR 0 1
75636: NOT
75637: IFFALSE 75641
// exit ;
75639: GO 75664
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75641: LD_ADDR_VAR 0 2
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: CALL_OW 254
75655: PUSH
75656: LD_INT 3
75658: PLUS
75659: PUSH
75660: LD_INT 6
75662: MOD
75663: ST_TO_ADDR
// end ;
75664: LD_VAR 0 2
75668: RET
// export function ReverseArray ( array ) ; var i ; begin
75669: LD_INT 0
75671: PPUSH
75672: PPUSH
// if not array then
75673: LD_VAR 0 1
75677: NOT
75678: IFFALSE 75682
// exit ;
75680: GO 75737
// result := [ ] ;
75682: LD_ADDR_VAR 0 2
75686: PUSH
75687: EMPTY
75688: ST_TO_ADDR
// for i := array downto 1 do
75689: LD_ADDR_VAR 0 3
75693: PUSH
75694: DOUBLE
75695: LD_VAR 0 1
75699: INC
75700: ST_TO_ADDR
75701: LD_INT 1
75703: PUSH
75704: FOR_DOWNTO
75705: IFFALSE 75735
// result := Join ( result , array [ i ] ) ;
75707: LD_ADDR_VAR 0 2
75711: PUSH
75712: LD_VAR 0 2
75716: PPUSH
75717: LD_VAR 0 1
75721: PUSH
75722: LD_VAR 0 3
75726: ARRAY
75727: PPUSH
75728: CALL 80382 0 2
75732: ST_TO_ADDR
75733: GO 75704
75735: POP
75736: POP
// end ;
75737: LD_VAR 0 2
75741: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75742: LD_INT 0
75744: PPUSH
75745: PPUSH
75746: PPUSH
75747: PPUSH
75748: PPUSH
75749: PPUSH
// if not unit or not hexes then
75750: LD_VAR 0 1
75754: NOT
75755: PUSH
75756: LD_VAR 0 2
75760: NOT
75761: OR
75762: IFFALSE 75766
// exit ;
75764: GO 75889
// dist := 9999 ;
75766: LD_ADDR_VAR 0 5
75770: PUSH
75771: LD_INT 9999
75773: ST_TO_ADDR
// for i = 1 to hexes do
75774: LD_ADDR_VAR 0 4
75778: PUSH
75779: DOUBLE
75780: LD_INT 1
75782: DEC
75783: ST_TO_ADDR
75784: LD_VAR 0 2
75788: PUSH
75789: FOR_TO
75790: IFFALSE 75877
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75792: LD_ADDR_VAR 0 6
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: LD_VAR 0 2
75806: PUSH
75807: LD_VAR 0 4
75811: ARRAY
75812: PUSH
75813: LD_INT 1
75815: ARRAY
75816: PPUSH
75817: LD_VAR 0 2
75821: PUSH
75822: LD_VAR 0 4
75826: ARRAY
75827: PUSH
75828: LD_INT 2
75830: ARRAY
75831: PPUSH
75832: CALL_OW 297
75836: ST_TO_ADDR
// if tdist < dist then
75837: LD_VAR 0 6
75841: PUSH
75842: LD_VAR 0 5
75846: LESS
75847: IFFALSE 75875
// begin hex := hexes [ i ] ;
75849: LD_ADDR_VAR 0 8
75853: PUSH
75854: LD_VAR 0 2
75858: PUSH
75859: LD_VAR 0 4
75863: ARRAY
75864: ST_TO_ADDR
// dist := tdist ;
75865: LD_ADDR_VAR 0 5
75869: PUSH
75870: LD_VAR 0 6
75874: ST_TO_ADDR
// end ; end ;
75875: GO 75789
75877: POP
75878: POP
// result := hex ;
75879: LD_ADDR_VAR 0 3
75883: PUSH
75884: LD_VAR 0 8
75888: ST_TO_ADDR
// end ;
75889: LD_VAR 0 3
75893: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75894: LD_INT 0
75896: PPUSH
75897: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75898: LD_VAR 0 1
75902: NOT
75903: PUSH
75904: LD_VAR 0 1
75908: PUSH
75909: LD_INT 21
75911: PUSH
75912: LD_INT 2
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 23
75921: PUSH
75922: LD_INT 2
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PPUSH
75933: CALL_OW 69
75937: IN
75938: NOT
75939: OR
75940: IFFALSE 75944
// exit ;
75942: GO 75991
// for i = 1 to 3 do
75944: LD_ADDR_VAR 0 3
75948: PUSH
75949: DOUBLE
75950: LD_INT 1
75952: DEC
75953: ST_TO_ADDR
75954: LD_INT 3
75956: PUSH
75957: FOR_TO
75958: IFFALSE 75989
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75960: LD_VAR 0 1
75964: PPUSH
75965: CALL_OW 250
75969: PPUSH
75970: LD_VAR 0 1
75974: PPUSH
75975: CALL_OW 251
75979: PPUSH
75980: LD_INT 1
75982: PPUSH
75983: CALL_OW 453
75987: GO 75957
75989: POP
75990: POP
// end ;
75991: LD_VAR 0 2
75995: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75996: LD_INT 0
75998: PPUSH
75999: PPUSH
76000: PPUSH
76001: PPUSH
76002: PPUSH
76003: PPUSH
// if not unit or not enemy_unit then
76004: LD_VAR 0 1
76008: NOT
76009: PUSH
76010: LD_VAR 0 2
76014: NOT
76015: OR
76016: IFFALSE 76020
// exit ;
76018: GO 76487
// if GetLives ( i ) < 250 then
76020: LD_VAR 0 4
76024: PPUSH
76025: CALL_OW 256
76029: PUSH
76030: LD_INT 250
76032: LESS
76033: IFFALSE 76046
// begin ComAutodestruct ( i ) ;
76035: LD_VAR 0 4
76039: PPUSH
76040: CALL 75894 0 1
// exit ;
76044: GO 76487
// end ; x := GetX ( enemy_unit ) ;
76046: LD_ADDR_VAR 0 7
76050: PUSH
76051: LD_VAR 0 2
76055: PPUSH
76056: CALL_OW 250
76060: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76061: LD_ADDR_VAR 0 8
76065: PUSH
76066: LD_VAR 0 2
76070: PPUSH
76071: CALL_OW 251
76075: ST_TO_ADDR
// if not x or not y then
76076: LD_VAR 0 7
76080: NOT
76081: PUSH
76082: LD_VAR 0 8
76086: NOT
76087: OR
76088: IFFALSE 76092
// exit ;
76090: GO 76487
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76092: LD_ADDR_VAR 0 6
76096: PUSH
76097: LD_VAR 0 7
76101: PPUSH
76102: LD_INT 0
76104: PPUSH
76105: LD_INT 4
76107: PPUSH
76108: CALL_OW 272
76112: PUSH
76113: LD_VAR 0 8
76117: PPUSH
76118: LD_INT 0
76120: PPUSH
76121: LD_INT 4
76123: PPUSH
76124: CALL_OW 273
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_VAR 0 7
76137: PPUSH
76138: LD_INT 1
76140: PPUSH
76141: LD_INT 4
76143: PPUSH
76144: CALL_OW 272
76148: PUSH
76149: LD_VAR 0 8
76153: PPUSH
76154: LD_INT 1
76156: PPUSH
76157: LD_INT 4
76159: PPUSH
76160: CALL_OW 273
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_VAR 0 7
76173: PPUSH
76174: LD_INT 2
76176: PPUSH
76177: LD_INT 4
76179: PPUSH
76180: CALL_OW 272
76184: PUSH
76185: LD_VAR 0 8
76189: PPUSH
76190: LD_INT 2
76192: PPUSH
76193: LD_INT 4
76195: PPUSH
76196: CALL_OW 273
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_VAR 0 7
76209: PPUSH
76210: LD_INT 3
76212: PPUSH
76213: LD_INT 4
76215: PPUSH
76216: CALL_OW 272
76220: PUSH
76221: LD_VAR 0 8
76225: PPUSH
76226: LD_INT 3
76228: PPUSH
76229: LD_INT 4
76231: PPUSH
76232: CALL_OW 273
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_VAR 0 7
76245: PPUSH
76246: LD_INT 4
76248: PPUSH
76249: LD_INT 4
76251: PPUSH
76252: CALL_OW 272
76256: PUSH
76257: LD_VAR 0 8
76261: PPUSH
76262: LD_INT 4
76264: PPUSH
76265: LD_INT 4
76267: PPUSH
76268: CALL_OW 273
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: LD_VAR 0 7
76281: PPUSH
76282: LD_INT 5
76284: PPUSH
76285: LD_INT 4
76287: PPUSH
76288: CALL_OW 272
76292: PUSH
76293: LD_VAR 0 8
76297: PPUSH
76298: LD_INT 5
76300: PPUSH
76301: LD_INT 4
76303: PPUSH
76304: CALL_OW 273
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: ST_TO_ADDR
// for i = tmp downto 1 do
76321: LD_ADDR_VAR 0 4
76325: PUSH
76326: DOUBLE
76327: LD_VAR 0 6
76331: INC
76332: ST_TO_ADDR
76333: LD_INT 1
76335: PUSH
76336: FOR_DOWNTO
76337: IFFALSE 76438
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76339: LD_VAR 0 6
76343: PUSH
76344: LD_VAR 0 4
76348: ARRAY
76349: PUSH
76350: LD_INT 1
76352: ARRAY
76353: PPUSH
76354: LD_VAR 0 6
76358: PUSH
76359: LD_VAR 0 4
76363: ARRAY
76364: PUSH
76365: LD_INT 2
76367: ARRAY
76368: PPUSH
76369: CALL_OW 488
76373: NOT
76374: PUSH
76375: LD_VAR 0 6
76379: PUSH
76380: LD_VAR 0 4
76384: ARRAY
76385: PUSH
76386: LD_INT 1
76388: ARRAY
76389: PPUSH
76390: LD_VAR 0 6
76394: PUSH
76395: LD_VAR 0 4
76399: ARRAY
76400: PUSH
76401: LD_INT 2
76403: ARRAY
76404: PPUSH
76405: CALL_OW 428
76409: PUSH
76410: LD_INT 0
76412: NONEQUAL
76413: OR
76414: IFFALSE 76436
// tmp := Delete ( tmp , i ) ;
76416: LD_ADDR_VAR 0 6
76420: PUSH
76421: LD_VAR 0 6
76425: PPUSH
76426: LD_VAR 0 4
76430: PPUSH
76431: CALL_OW 3
76435: ST_TO_ADDR
76436: GO 76336
76438: POP
76439: POP
// j := GetClosestHex ( unit , tmp ) ;
76440: LD_ADDR_VAR 0 5
76444: PUSH
76445: LD_VAR 0 1
76449: PPUSH
76450: LD_VAR 0 6
76454: PPUSH
76455: CALL 75742 0 2
76459: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76460: LD_VAR 0 1
76464: PPUSH
76465: LD_VAR 0 5
76469: PUSH
76470: LD_INT 1
76472: ARRAY
76473: PPUSH
76474: LD_VAR 0 5
76478: PUSH
76479: LD_INT 2
76481: ARRAY
76482: PPUSH
76483: CALL_OW 111
// end ;
76487: LD_VAR 0 3
76491: RET
// export function PrepareApemanSoldier ( ) ; begin
76492: LD_INT 0
76494: PPUSH
// uc_nation := 0 ;
76495: LD_ADDR_OWVAR 21
76499: PUSH
76500: LD_INT 0
76502: ST_TO_ADDR
// hc_sex := sex_male ;
76503: LD_ADDR_OWVAR 27
76507: PUSH
76508: LD_INT 1
76510: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76511: LD_ADDR_OWVAR 28
76515: PUSH
76516: LD_INT 15
76518: ST_TO_ADDR
// hc_gallery :=  ;
76519: LD_ADDR_OWVAR 33
76523: PUSH
76524: LD_STRING 
76526: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76527: LD_ADDR_OWVAR 31
76531: PUSH
76532: LD_INT 0
76534: PPUSH
76535: LD_INT 3
76537: PPUSH
76538: CALL_OW 12
76542: PUSH
76543: LD_INT 0
76545: PPUSH
76546: LD_INT 3
76548: PPUSH
76549: CALL_OW 12
76553: PUSH
76554: LD_INT 0
76556: PUSH
76557: LD_INT 0
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: ST_TO_ADDR
// end ;
76566: LD_VAR 0 1
76570: RET
// export function PrepareApemanEngineer ( ) ; begin
76571: LD_INT 0
76573: PPUSH
// uc_nation := 0 ;
76574: LD_ADDR_OWVAR 21
76578: PUSH
76579: LD_INT 0
76581: ST_TO_ADDR
// hc_sex := sex_male ;
76582: LD_ADDR_OWVAR 27
76586: PUSH
76587: LD_INT 1
76589: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76590: LD_ADDR_OWVAR 28
76594: PUSH
76595: LD_INT 16
76597: ST_TO_ADDR
// hc_gallery :=  ;
76598: LD_ADDR_OWVAR 33
76602: PUSH
76603: LD_STRING 
76605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76606: LD_ADDR_OWVAR 31
76610: PUSH
76611: LD_INT 0
76613: PPUSH
76614: LD_INT 3
76616: PPUSH
76617: CALL_OW 12
76621: PUSH
76622: LD_INT 0
76624: PPUSH
76625: LD_INT 3
76627: PPUSH
76628: CALL_OW 12
76632: PUSH
76633: LD_INT 0
76635: PUSH
76636: LD_INT 0
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: ST_TO_ADDR
// end ;
76645: LD_VAR 0 1
76649: RET
// export function PrepareApeman ( agressivity ) ; begin
76650: LD_INT 0
76652: PPUSH
// uc_side := 0 ;
76653: LD_ADDR_OWVAR 20
76657: PUSH
76658: LD_INT 0
76660: ST_TO_ADDR
// uc_nation := 0 ;
76661: LD_ADDR_OWVAR 21
76665: PUSH
76666: LD_INT 0
76668: ST_TO_ADDR
// hc_sex := sex_male ;
76669: LD_ADDR_OWVAR 27
76673: PUSH
76674: LD_INT 1
76676: ST_TO_ADDR
// hc_class := class_apeman ;
76677: LD_ADDR_OWVAR 28
76681: PUSH
76682: LD_INT 12
76684: ST_TO_ADDR
// hc_gallery :=  ;
76685: LD_ADDR_OWVAR 33
76689: PUSH
76690: LD_STRING 
76692: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76693: LD_ADDR_OWVAR 35
76697: PUSH
76698: LD_VAR 0 1
76702: NEG
76703: PPUSH
76704: LD_VAR 0 1
76708: PPUSH
76709: CALL_OW 12
76713: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76714: LD_ADDR_OWVAR 31
76718: PUSH
76719: LD_INT 0
76721: PPUSH
76722: LD_INT 3
76724: PPUSH
76725: CALL_OW 12
76729: PUSH
76730: LD_INT 0
76732: PPUSH
76733: LD_INT 3
76735: PPUSH
76736: CALL_OW 12
76740: PUSH
76741: LD_INT 0
76743: PUSH
76744: LD_INT 0
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: ST_TO_ADDR
// end ;
76753: LD_VAR 0 2
76757: RET
// export function PrepareTiger ( agressivity ) ; begin
76758: LD_INT 0
76760: PPUSH
// uc_side := 0 ;
76761: LD_ADDR_OWVAR 20
76765: PUSH
76766: LD_INT 0
76768: ST_TO_ADDR
// uc_nation := 0 ;
76769: LD_ADDR_OWVAR 21
76773: PUSH
76774: LD_INT 0
76776: ST_TO_ADDR
// hc_class := class_tiger ;
76777: LD_ADDR_OWVAR 28
76781: PUSH
76782: LD_INT 14
76784: ST_TO_ADDR
// hc_gallery :=  ;
76785: LD_ADDR_OWVAR 33
76789: PUSH
76790: LD_STRING 
76792: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76793: LD_ADDR_OWVAR 35
76797: PUSH
76798: LD_VAR 0 1
76802: NEG
76803: PPUSH
76804: LD_VAR 0 1
76808: PPUSH
76809: CALL_OW 12
76813: ST_TO_ADDR
// end ;
76814: LD_VAR 0 2
76818: RET
// export function PrepareEnchidna ( ) ; begin
76819: LD_INT 0
76821: PPUSH
// uc_side := 0 ;
76822: LD_ADDR_OWVAR 20
76826: PUSH
76827: LD_INT 0
76829: ST_TO_ADDR
// uc_nation := 0 ;
76830: LD_ADDR_OWVAR 21
76834: PUSH
76835: LD_INT 0
76837: ST_TO_ADDR
// hc_class := class_baggie ;
76838: LD_ADDR_OWVAR 28
76842: PUSH
76843: LD_INT 13
76845: ST_TO_ADDR
// hc_gallery :=  ;
76846: LD_ADDR_OWVAR 33
76850: PUSH
76851: LD_STRING 
76853: ST_TO_ADDR
// end ;
76854: LD_VAR 0 1
76858: RET
// export function PrepareFrog ( ) ; begin
76859: LD_INT 0
76861: PPUSH
// uc_side := 0 ;
76862: LD_ADDR_OWVAR 20
76866: PUSH
76867: LD_INT 0
76869: ST_TO_ADDR
// uc_nation := 0 ;
76870: LD_ADDR_OWVAR 21
76874: PUSH
76875: LD_INT 0
76877: ST_TO_ADDR
// hc_class := class_frog ;
76878: LD_ADDR_OWVAR 28
76882: PUSH
76883: LD_INT 19
76885: ST_TO_ADDR
// hc_gallery :=  ;
76886: LD_ADDR_OWVAR 33
76890: PUSH
76891: LD_STRING 
76893: ST_TO_ADDR
// end ;
76894: LD_VAR 0 1
76898: RET
// export function PrepareFish ( ) ; begin
76899: LD_INT 0
76901: PPUSH
// uc_side := 0 ;
76902: LD_ADDR_OWVAR 20
76906: PUSH
76907: LD_INT 0
76909: ST_TO_ADDR
// uc_nation := 0 ;
76910: LD_ADDR_OWVAR 21
76914: PUSH
76915: LD_INT 0
76917: ST_TO_ADDR
// hc_class := class_fish ;
76918: LD_ADDR_OWVAR 28
76922: PUSH
76923: LD_INT 20
76925: ST_TO_ADDR
// hc_gallery :=  ;
76926: LD_ADDR_OWVAR 33
76930: PUSH
76931: LD_STRING 
76933: ST_TO_ADDR
// end ;
76934: LD_VAR 0 1
76938: RET
// export function PrepareBird ( ) ; begin
76939: LD_INT 0
76941: PPUSH
// uc_side := 0 ;
76942: LD_ADDR_OWVAR 20
76946: PUSH
76947: LD_INT 0
76949: ST_TO_ADDR
// uc_nation := 0 ;
76950: LD_ADDR_OWVAR 21
76954: PUSH
76955: LD_INT 0
76957: ST_TO_ADDR
// hc_class := class_phororhacos ;
76958: LD_ADDR_OWVAR 28
76962: PUSH
76963: LD_INT 18
76965: ST_TO_ADDR
// hc_gallery :=  ;
76966: LD_ADDR_OWVAR 33
76970: PUSH
76971: LD_STRING 
76973: ST_TO_ADDR
// end ;
76974: LD_VAR 0 1
76978: RET
// export function PrepareHorse ( ) ; begin
76979: LD_INT 0
76981: PPUSH
// uc_side := 0 ;
76982: LD_ADDR_OWVAR 20
76986: PUSH
76987: LD_INT 0
76989: ST_TO_ADDR
// uc_nation := 0 ;
76990: LD_ADDR_OWVAR 21
76994: PUSH
76995: LD_INT 0
76997: ST_TO_ADDR
// hc_class := class_horse ;
76998: LD_ADDR_OWVAR 28
77002: PUSH
77003: LD_INT 21
77005: ST_TO_ADDR
// hc_gallery :=  ;
77006: LD_ADDR_OWVAR 33
77010: PUSH
77011: LD_STRING 
77013: ST_TO_ADDR
// end ;
77014: LD_VAR 0 1
77018: RET
// export function PrepareMastodont ( ) ; begin
77019: LD_INT 0
77021: PPUSH
// uc_side := 0 ;
77022: LD_ADDR_OWVAR 20
77026: PUSH
77027: LD_INT 0
77029: ST_TO_ADDR
// uc_nation := 0 ;
77030: LD_ADDR_OWVAR 21
77034: PUSH
77035: LD_INT 0
77037: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77038: LD_ADDR_OWVAR 37
77042: PUSH
77043: LD_INT 31
77045: ST_TO_ADDR
// vc_control := control_rider ;
77046: LD_ADDR_OWVAR 38
77050: PUSH
77051: LD_INT 4
77053: ST_TO_ADDR
// end ;
77054: LD_VAR 0 1
77058: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77059: LD_INT 0
77061: PPUSH
77062: PPUSH
77063: PPUSH
// uc_side = 0 ;
77064: LD_ADDR_OWVAR 20
77068: PUSH
77069: LD_INT 0
77071: ST_TO_ADDR
// uc_nation = 0 ;
77072: LD_ADDR_OWVAR 21
77076: PUSH
77077: LD_INT 0
77079: ST_TO_ADDR
// InitHc_All ( ) ;
77080: CALL_OW 584
// InitVc ;
77084: CALL_OW 20
// if mastodonts then
77088: LD_VAR 0 6
77092: IFFALSE 77159
// for i = 1 to mastodonts do
77094: LD_ADDR_VAR 0 11
77098: PUSH
77099: DOUBLE
77100: LD_INT 1
77102: DEC
77103: ST_TO_ADDR
77104: LD_VAR 0 6
77108: PUSH
77109: FOR_TO
77110: IFFALSE 77157
// begin vc_chassis := 31 ;
77112: LD_ADDR_OWVAR 37
77116: PUSH
77117: LD_INT 31
77119: ST_TO_ADDR
// vc_control := control_rider ;
77120: LD_ADDR_OWVAR 38
77124: PUSH
77125: LD_INT 4
77127: ST_TO_ADDR
// animal := CreateVehicle ;
77128: LD_ADDR_VAR 0 12
77132: PUSH
77133: CALL_OW 45
77137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77138: LD_VAR 0 12
77142: PPUSH
77143: LD_VAR 0 8
77147: PPUSH
77148: LD_INT 0
77150: PPUSH
77151: CALL 79287 0 3
// end ;
77155: GO 77109
77157: POP
77158: POP
// if horses then
77159: LD_VAR 0 5
77163: IFFALSE 77230
// for i = 1 to horses do
77165: LD_ADDR_VAR 0 11
77169: PUSH
77170: DOUBLE
77171: LD_INT 1
77173: DEC
77174: ST_TO_ADDR
77175: LD_VAR 0 5
77179: PUSH
77180: FOR_TO
77181: IFFALSE 77228
// begin hc_class := 21 ;
77183: LD_ADDR_OWVAR 28
77187: PUSH
77188: LD_INT 21
77190: ST_TO_ADDR
// hc_gallery :=  ;
77191: LD_ADDR_OWVAR 33
77195: PUSH
77196: LD_STRING 
77198: ST_TO_ADDR
// animal := CreateHuman ;
77199: LD_ADDR_VAR 0 12
77203: PUSH
77204: CALL_OW 44
77208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77209: LD_VAR 0 12
77213: PPUSH
77214: LD_VAR 0 8
77218: PPUSH
77219: LD_INT 0
77221: PPUSH
77222: CALL 79287 0 3
// end ;
77226: GO 77180
77228: POP
77229: POP
// if birds then
77230: LD_VAR 0 1
77234: IFFALSE 77301
// for i = 1 to birds do
77236: LD_ADDR_VAR 0 11
77240: PUSH
77241: DOUBLE
77242: LD_INT 1
77244: DEC
77245: ST_TO_ADDR
77246: LD_VAR 0 1
77250: PUSH
77251: FOR_TO
77252: IFFALSE 77299
// begin hc_class := 18 ;
77254: LD_ADDR_OWVAR 28
77258: PUSH
77259: LD_INT 18
77261: ST_TO_ADDR
// hc_gallery =  ;
77262: LD_ADDR_OWVAR 33
77266: PUSH
77267: LD_STRING 
77269: ST_TO_ADDR
// animal := CreateHuman ;
77270: LD_ADDR_VAR 0 12
77274: PUSH
77275: CALL_OW 44
77279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77280: LD_VAR 0 12
77284: PPUSH
77285: LD_VAR 0 8
77289: PPUSH
77290: LD_INT 0
77292: PPUSH
77293: CALL 79287 0 3
// end ;
77297: GO 77251
77299: POP
77300: POP
// if tigers then
77301: LD_VAR 0 2
77305: IFFALSE 77389
// for i = 1 to tigers do
77307: LD_ADDR_VAR 0 11
77311: PUSH
77312: DOUBLE
77313: LD_INT 1
77315: DEC
77316: ST_TO_ADDR
77317: LD_VAR 0 2
77321: PUSH
77322: FOR_TO
77323: IFFALSE 77387
// begin hc_class = class_tiger ;
77325: LD_ADDR_OWVAR 28
77329: PUSH
77330: LD_INT 14
77332: ST_TO_ADDR
// hc_gallery =  ;
77333: LD_ADDR_OWVAR 33
77337: PUSH
77338: LD_STRING 
77340: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77341: LD_ADDR_OWVAR 35
77345: PUSH
77346: LD_INT 7
77348: NEG
77349: PPUSH
77350: LD_INT 7
77352: PPUSH
77353: CALL_OW 12
77357: ST_TO_ADDR
// animal := CreateHuman ;
77358: LD_ADDR_VAR 0 12
77362: PUSH
77363: CALL_OW 44
77367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77368: LD_VAR 0 12
77372: PPUSH
77373: LD_VAR 0 8
77377: PPUSH
77378: LD_INT 0
77380: PPUSH
77381: CALL 79287 0 3
// end ;
77385: GO 77322
77387: POP
77388: POP
// if apemans then
77389: LD_VAR 0 3
77393: IFFALSE 77516
// for i = 1 to apemans do
77395: LD_ADDR_VAR 0 11
77399: PUSH
77400: DOUBLE
77401: LD_INT 1
77403: DEC
77404: ST_TO_ADDR
77405: LD_VAR 0 3
77409: PUSH
77410: FOR_TO
77411: IFFALSE 77514
// begin hc_class = class_apeman ;
77413: LD_ADDR_OWVAR 28
77417: PUSH
77418: LD_INT 12
77420: ST_TO_ADDR
// hc_gallery =  ;
77421: LD_ADDR_OWVAR 33
77425: PUSH
77426: LD_STRING 
77428: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77429: LD_ADDR_OWVAR 35
77433: PUSH
77434: LD_INT 2
77436: NEG
77437: PPUSH
77438: LD_INT 2
77440: PPUSH
77441: CALL_OW 12
77445: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77446: LD_ADDR_OWVAR 31
77450: PUSH
77451: LD_INT 1
77453: PPUSH
77454: LD_INT 3
77456: PPUSH
77457: CALL_OW 12
77461: PUSH
77462: LD_INT 1
77464: PPUSH
77465: LD_INT 3
77467: PPUSH
77468: CALL_OW 12
77472: PUSH
77473: LD_INT 0
77475: PUSH
77476: LD_INT 0
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: ST_TO_ADDR
// animal := CreateHuman ;
77485: LD_ADDR_VAR 0 12
77489: PUSH
77490: CALL_OW 44
77494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77495: LD_VAR 0 12
77499: PPUSH
77500: LD_VAR 0 8
77504: PPUSH
77505: LD_INT 0
77507: PPUSH
77508: CALL 79287 0 3
// end ;
77512: GO 77410
77514: POP
77515: POP
// if enchidnas then
77516: LD_VAR 0 4
77520: IFFALSE 77587
// for i = 1 to enchidnas do
77522: LD_ADDR_VAR 0 11
77526: PUSH
77527: DOUBLE
77528: LD_INT 1
77530: DEC
77531: ST_TO_ADDR
77532: LD_VAR 0 4
77536: PUSH
77537: FOR_TO
77538: IFFALSE 77585
// begin hc_class = 13 ;
77540: LD_ADDR_OWVAR 28
77544: PUSH
77545: LD_INT 13
77547: ST_TO_ADDR
// hc_gallery =  ;
77548: LD_ADDR_OWVAR 33
77552: PUSH
77553: LD_STRING 
77555: ST_TO_ADDR
// animal := CreateHuman ;
77556: LD_ADDR_VAR 0 12
77560: PUSH
77561: CALL_OW 44
77565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77566: LD_VAR 0 12
77570: PPUSH
77571: LD_VAR 0 8
77575: PPUSH
77576: LD_INT 0
77578: PPUSH
77579: CALL 79287 0 3
// end ;
77583: GO 77537
77585: POP
77586: POP
// if fishes then
77587: LD_VAR 0 7
77591: IFFALSE 77658
// for i = 1 to fishes do
77593: LD_ADDR_VAR 0 11
77597: PUSH
77598: DOUBLE
77599: LD_INT 1
77601: DEC
77602: ST_TO_ADDR
77603: LD_VAR 0 7
77607: PUSH
77608: FOR_TO
77609: IFFALSE 77656
// begin hc_class = 20 ;
77611: LD_ADDR_OWVAR 28
77615: PUSH
77616: LD_INT 20
77618: ST_TO_ADDR
// hc_gallery =  ;
77619: LD_ADDR_OWVAR 33
77623: PUSH
77624: LD_STRING 
77626: ST_TO_ADDR
// animal := CreateHuman ;
77627: LD_ADDR_VAR 0 12
77631: PUSH
77632: CALL_OW 44
77636: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77637: LD_VAR 0 12
77641: PPUSH
77642: LD_VAR 0 9
77646: PPUSH
77647: LD_INT 0
77649: PPUSH
77650: CALL 79287 0 3
// end ;
77654: GO 77608
77656: POP
77657: POP
// end ;
77658: LD_VAR 0 10
77662: RET
// export function WantHeal ( sci , unit ) ; begin
77663: LD_INT 0
77665: PPUSH
// if GetTaskList ( sci ) > 0 then
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 437
77675: PUSH
77676: LD_INT 0
77678: GREATER
77679: IFFALSE 77749
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77681: LD_VAR 0 1
77685: PPUSH
77686: CALL_OW 437
77690: PUSH
77691: LD_INT 1
77693: ARRAY
77694: PUSH
77695: LD_INT 1
77697: ARRAY
77698: PUSH
77699: LD_STRING l
77701: EQUAL
77702: PUSH
77703: LD_VAR 0 1
77707: PPUSH
77708: CALL_OW 437
77712: PUSH
77713: LD_INT 1
77715: ARRAY
77716: PUSH
77717: LD_INT 4
77719: ARRAY
77720: PUSH
77721: LD_VAR 0 2
77725: EQUAL
77726: AND
77727: IFFALSE 77739
// result := true else
77729: LD_ADDR_VAR 0 3
77733: PUSH
77734: LD_INT 1
77736: ST_TO_ADDR
77737: GO 77747
// result := false ;
77739: LD_ADDR_VAR 0 3
77743: PUSH
77744: LD_INT 0
77746: ST_TO_ADDR
// end else
77747: GO 77757
// result := false ;
77749: LD_ADDR_VAR 0 3
77753: PUSH
77754: LD_INT 0
77756: ST_TO_ADDR
// end ;
77757: LD_VAR 0 3
77761: RET
// export function HealTarget ( sci ) ; begin
77762: LD_INT 0
77764: PPUSH
// if not sci then
77765: LD_VAR 0 1
77769: NOT
77770: IFFALSE 77774
// exit ;
77772: GO 77839
// result := 0 ;
77774: LD_ADDR_VAR 0 2
77778: PUSH
77779: LD_INT 0
77781: ST_TO_ADDR
// if GetTaskList ( sci ) then
77782: LD_VAR 0 1
77786: PPUSH
77787: CALL_OW 437
77791: IFFALSE 77839
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77793: LD_VAR 0 1
77797: PPUSH
77798: CALL_OW 437
77802: PUSH
77803: LD_INT 1
77805: ARRAY
77806: PUSH
77807: LD_INT 1
77809: ARRAY
77810: PUSH
77811: LD_STRING l
77813: EQUAL
77814: IFFALSE 77839
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77816: LD_ADDR_VAR 0 2
77820: PUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 437
77830: PUSH
77831: LD_INT 1
77833: ARRAY
77834: PUSH
77835: LD_INT 4
77837: ARRAY
77838: ST_TO_ADDR
// end ;
77839: LD_VAR 0 2
77843: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77844: LD_INT 0
77846: PPUSH
77847: PPUSH
77848: PPUSH
77849: PPUSH
// if not base_units then
77850: LD_VAR 0 1
77854: NOT
77855: IFFALSE 77859
// exit ;
77857: GO 77946
// result := false ;
77859: LD_ADDR_VAR 0 2
77863: PUSH
77864: LD_INT 0
77866: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77867: LD_ADDR_VAR 0 5
77871: PUSH
77872: LD_VAR 0 1
77876: PPUSH
77877: LD_INT 21
77879: PUSH
77880: LD_INT 3
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PPUSH
77887: CALL_OW 72
77891: ST_TO_ADDR
// if not tmp then
77892: LD_VAR 0 5
77896: NOT
77897: IFFALSE 77901
// exit ;
77899: GO 77946
// for i in tmp do
77901: LD_ADDR_VAR 0 3
77905: PUSH
77906: LD_VAR 0 5
77910: PUSH
77911: FOR_IN
77912: IFFALSE 77944
// begin result := EnemyInRange ( i , 22 ) ;
77914: LD_ADDR_VAR 0 2
77918: PUSH
77919: LD_VAR 0 3
77923: PPUSH
77924: LD_INT 22
77926: PPUSH
77927: CALL 75544 0 2
77931: ST_TO_ADDR
// if result then
77932: LD_VAR 0 2
77936: IFFALSE 77942
// exit ;
77938: POP
77939: POP
77940: GO 77946
// end ;
77942: GO 77911
77944: POP
77945: POP
// end ;
77946: LD_VAR 0 2
77950: RET
// export function FilterByTag ( units , tag ) ; begin
77951: LD_INT 0
77953: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77954: LD_ADDR_VAR 0 3
77958: PUSH
77959: LD_VAR 0 1
77963: PPUSH
77964: LD_INT 120
77966: PUSH
77967: LD_VAR 0 2
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: PPUSH
77976: CALL_OW 72
77980: ST_TO_ADDR
// end ;
77981: LD_VAR 0 3
77985: RET
// export function IsDriver ( un ) ; begin
77986: LD_INT 0
77988: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77989: LD_ADDR_VAR 0 2
77993: PUSH
77994: LD_VAR 0 1
77998: PUSH
77999: LD_INT 55
78001: PUSH
78002: EMPTY
78003: LIST
78004: PPUSH
78005: CALL_OW 69
78009: IN
78010: ST_TO_ADDR
// end ;
78011: LD_VAR 0 2
78015: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78016: LD_INT 0
78018: PPUSH
78019: PPUSH
// list := [ ] ;
78020: LD_ADDR_VAR 0 5
78024: PUSH
78025: EMPTY
78026: ST_TO_ADDR
// case d of 0 :
78027: LD_VAR 0 3
78031: PUSH
78032: LD_INT 0
78034: DOUBLE
78035: EQUAL
78036: IFTRUE 78040
78038: GO 78173
78040: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78041: LD_ADDR_VAR 0 5
78045: PUSH
78046: LD_VAR 0 1
78050: PUSH
78051: LD_INT 4
78053: MINUS
78054: PUSH
78055: LD_VAR 0 2
78059: PUSH
78060: LD_INT 4
78062: MINUS
78063: PUSH
78064: LD_INT 2
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: PUSH
78072: LD_VAR 0 1
78076: PUSH
78077: LD_INT 3
78079: MINUS
78080: PUSH
78081: LD_VAR 0 2
78085: PUSH
78086: LD_INT 1
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: LIST
78093: PUSH
78094: LD_VAR 0 1
78098: PUSH
78099: LD_INT 4
78101: PLUS
78102: PUSH
78103: LD_VAR 0 2
78107: PUSH
78108: LD_INT 4
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: LIST
78115: PUSH
78116: LD_VAR 0 1
78120: PUSH
78121: LD_INT 3
78123: PLUS
78124: PUSH
78125: LD_VAR 0 2
78129: PUSH
78130: LD_INT 3
78132: PLUS
78133: PUSH
78134: LD_INT 5
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: LIST
78141: PUSH
78142: LD_VAR 0 1
78146: PUSH
78147: LD_VAR 0 2
78151: PUSH
78152: LD_INT 4
78154: PLUS
78155: PUSH
78156: LD_INT 0
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: ST_TO_ADDR
// end ; 1 :
78171: GO 78871
78173: LD_INT 1
78175: DOUBLE
78176: EQUAL
78177: IFTRUE 78181
78179: GO 78314
78181: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78182: LD_ADDR_VAR 0 5
78186: PUSH
78187: LD_VAR 0 1
78191: PUSH
78192: LD_VAR 0 2
78196: PUSH
78197: LD_INT 4
78199: MINUS
78200: PUSH
78201: LD_INT 3
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: LIST
78208: PUSH
78209: LD_VAR 0 1
78213: PUSH
78214: LD_INT 3
78216: MINUS
78217: PUSH
78218: LD_VAR 0 2
78222: PUSH
78223: LD_INT 3
78225: MINUS
78226: PUSH
78227: LD_INT 2
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: LIST
78234: PUSH
78235: LD_VAR 0 1
78239: PUSH
78240: LD_INT 4
78242: MINUS
78243: PUSH
78244: LD_VAR 0 2
78248: PUSH
78249: LD_INT 1
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: LIST
78256: PUSH
78257: LD_VAR 0 1
78261: PUSH
78262: LD_VAR 0 2
78266: PUSH
78267: LD_INT 3
78269: PLUS
78270: PUSH
78271: LD_INT 0
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: LIST
78278: PUSH
78279: LD_VAR 0 1
78283: PUSH
78284: LD_INT 4
78286: PLUS
78287: PUSH
78288: LD_VAR 0 2
78292: PUSH
78293: LD_INT 4
78295: PLUS
78296: PUSH
78297: LD_INT 5
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: ST_TO_ADDR
// end ; 2 :
78312: GO 78871
78314: LD_INT 2
78316: DOUBLE
78317: EQUAL
78318: IFTRUE 78322
78320: GO 78451
78322: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78323: LD_ADDR_VAR 0 5
78327: PUSH
78328: LD_VAR 0 1
78332: PUSH
78333: LD_VAR 0 2
78337: PUSH
78338: LD_INT 3
78340: MINUS
78341: PUSH
78342: LD_INT 3
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: LIST
78349: PUSH
78350: LD_VAR 0 1
78354: PUSH
78355: LD_INT 4
78357: PLUS
78358: PUSH
78359: LD_VAR 0 2
78363: PUSH
78364: LD_INT 4
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: LIST
78371: PUSH
78372: LD_VAR 0 1
78376: PUSH
78377: LD_VAR 0 2
78381: PUSH
78382: LD_INT 4
78384: PLUS
78385: PUSH
78386: LD_INT 0
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: LIST
78393: PUSH
78394: LD_VAR 0 1
78398: PUSH
78399: LD_INT 3
78401: MINUS
78402: PUSH
78403: LD_VAR 0 2
78407: PUSH
78408: LD_INT 1
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: LIST
78415: PUSH
78416: LD_VAR 0 1
78420: PUSH
78421: LD_INT 4
78423: MINUS
78424: PUSH
78425: LD_VAR 0 2
78429: PUSH
78430: LD_INT 4
78432: MINUS
78433: PUSH
78434: LD_INT 2
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: ST_TO_ADDR
// end ; 3 :
78449: GO 78871
78451: LD_INT 3
78453: DOUBLE
78454: EQUAL
78455: IFTRUE 78459
78457: GO 78592
78459: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78460: LD_ADDR_VAR 0 5
78464: PUSH
78465: LD_VAR 0 1
78469: PUSH
78470: LD_INT 3
78472: PLUS
78473: PUSH
78474: LD_VAR 0 2
78478: PUSH
78479: LD_INT 4
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: LIST
78486: PUSH
78487: LD_VAR 0 1
78491: PUSH
78492: LD_INT 4
78494: PLUS
78495: PUSH
78496: LD_VAR 0 2
78500: PUSH
78501: LD_INT 4
78503: PLUS
78504: PUSH
78505: LD_INT 5
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: LIST
78512: PUSH
78513: LD_VAR 0 1
78517: PUSH
78518: LD_INT 4
78520: MINUS
78521: PUSH
78522: LD_VAR 0 2
78526: PUSH
78527: LD_INT 1
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: LIST
78534: PUSH
78535: LD_VAR 0 1
78539: PUSH
78540: LD_VAR 0 2
78544: PUSH
78545: LD_INT 4
78547: MINUS
78548: PUSH
78549: LD_INT 3
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: LIST
78556: PUSH
78557: LD_VAR 0 1
78561: PUSH
78562: LD_INT 3
78564: MINUS
78565: PUSH
78566: LD_VAR 0 2
78570: PUSH
78571: LD_INT 3
78573: MINUS
78574: PUSH
78575: LD_INT 2
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: LIST
78582: PUSH
78583: EMPTY
78584: LIST
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: ST_TO_ADDR
// end ; 4 :
78590: GO 78871
78592: LD_INT 4
78594: DOUBLE
78595: EQUAL
78596: IFTRUE 78600
78598: GO 78733
78600: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78601: LD_ADDR_VAR 0 5
78605: PUSH
78606: LD_VAR 0 1
78610: PUSH
78611: LD_VAR 0 2
78615: PUSH
78616: LD_INT 4
78618: PLUS
78619: PUSH
78620: LD_INT 0
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: LIST
78627: PUSH
78628: LD_VAR 0 1
78632: PUSH
78633: LD_INT 3
78635: PLUS
78636: PUSH
78637: LD_VAR 0 2
78641: PUSH
78642: LD_INT 3
78644: PLUS
78645: PUSH
78646: LD_INT 5
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: LIST
78653: PUSH
78654: LD_VAR 0 1
78658: PUSH
78659: LD_INT 4
78661: PLUS
78662: PUSH
78663: LD_VAR 0 2
78667: PUSH
78668: LD_INT 4
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: LIST
78675: PUSH
78676: LD_VAR 0 1
78680: PUSH
78681: LD_VAR 0 2
78685: PUSH
78686: LD_INT 3
78688: MINUS
78689: PUSH
78690: LD_INT 3
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: LIST
78697: PUSH
78698: LD_VAR 0 1
78702: PUSH
78703: LD_INT 4
78705: MINUS
78706: PUSH
78707: LD_VAR 0 2
78711: PUSH
78712: LD_INT 4
78714: MINUS
78715: PUSH
78716: LD_INT 2
78718: PUSH
78719: EMPTY
78720: LIST
78721: LIST
78722: LIST
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: ST_TO_ADDR
// end ; 5 :
78731: GO 78871
78733: LD_INT 5
78735: DOUBLE
78736: EQUAL
78737: IFTRUE 78741
78739: GO 78870
78741: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78742: LD_ADDR_VAR 0 5
78746: PUSH
78747: LD_VAR 0 1
78751: PUSH
78752: LD_INT 4
78754: MINUS
78755: PUSH
78756: LD_VAR 0 2
78760: PUSH
78761: LD_INT 1
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: LIST
78768: PUSH
78769: LD_VAR 0 1
78773: PUSH
78774: LD_VAR 0 2
78778: PUSH
78779: LD_INT 4
78781: MINUS
78782: PUSH
78783: LD_INT 3
78785: PUSH
78786: EMPTY
78787: LIST
78788: LIST
78789: LIST
78790: PUSH
78791: LD_VAR 0 1
78795: PUSH
78796: LD_INT 4
78798: PLUS
78799: PUSH
78800: LD_VAR 0 2
78804: PUSH
78805: LD_INT 4
78807: PLUS
78808: PUSH
78809: LD_INT 5
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: LIST
78816: PUSH
78817: LD_VAR 0 1
78821: PUSH
78822: LD_INT 3
78824: PLUS
78825: PUSH
78826: LD_VAR 0 2
78830: PUSH
78831: LD_INT 4
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: LIST
78838: PUSH
78839: LD_VAR 0 1
78843: PUSH
78844: LD_VAR 0 2
78848: PUSH
78849: LD_INT 3
78851: PLUS
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: LIST
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: LIST
78865: LIST
78866: LIST
78867: ST_TO_ADDR
// end ; end ;
78868: GO 78871
78870: POP
// result := list ;
78871: LD_ADDR_VAR 0 4
78875: PUSH
78876: LD_VAR 0 5
78880: ST_TO_ADDR
// end ;
78881: LD_VAR 0 4
78885: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78886: LD_INT 0
78888: PPUSH
78889: PPUSH
78890: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78891: LD_VAR 0 1
78895: NOT
78896: PUSH
78897: LD_VAR 0 2
78901: PUSH
78902: LD_INT 1
78904: PUSH
78905: LD_INT 2
78907: PUSH
78908: LD_INT 3
78910: PUSH
78911: LD_INT 4
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: LIST
78918: LIST
78919: IN
78920: NOT
78921: OR
78922: IFFALSE 78926
// exit ;
78924: GO 79009
// tmp := [ ] ;
78926: LD_ADDR_VAR 0 5
78930: PUSH
78931: EMPTY
78932: ST_TO_ADDR
// for i in units do
78933: LD_ADDR_VAR 0 4
78937: PUSH
78938: LD_VAR 0 1
78942: PUSH
78943: FOR_IN
78944: IFFALSE 78978
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78946: LD_ADDR_VAR 0 5
78950: PUSH
78951: LD_VAR 0 5
78955: PPUSH
78956: LD_VAR 0 4
78960: PPUSH
78961: LD_VAR 0 2
78965: PPUSH
78966: CALL_OW 259
78970: PPUSH
78971: CALL 80382 0 2
78975: ST_TO_ADDR
78976: GO 78943
78978: POP
78979: POP
// if not tmp then
78980: LD_VAR 0 5
78984: NOT
78985: IFFALSE 78989
// exit ;
78987: GO 79009
// result := SortListByListDesc ( units , tmp ) ;
78989: LD_ADDR_VAR 0 3
78993: PUSH
78994: LD_VAR 0 1
78998: PPUSH
78999: LD_VAR 0 5
79003: PPUSH
79004: CALL_OW 77
79008: ST_TO_ADDR
// end ;
79009: LD_VAR 0 3
79013: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79014: LD_INT 0
79016: PPUSH
79017: PPUSH
79018: PPUSH
// result := false ;
79019: LD_ADDR_VAR 0 3
79023: PUSH
79024: LD_INT 0
79026: ST_TO_ADDR
// if not building then
79027: LD_VAR 0 2
79031: NOT
79032: IFFALSE 79036
// exit ;
79034: GO 79174
// x := GetX ( building ) ;
79036: LD_ADDR_VAR 0 4
79040: PUSH
79041: LD_VAR 0 2
79045: PPUSH
79046: CALL_OW 250
79050: ST_TO_ADDR
// y := GetY ( building ) ;
79051: LD_ADDR_VAR 0 5
79055: PUSH
79056: LD_VAR 0 2
79060: PPUSH
79061: CALL_OW 251
79065: ST_TO_ADDR
// if not x or not y then
79066: LD_VAR 0 4
79070: NOT
79071: PUSH
79072: LD_VAR 0 5
79076: NOT
79077: OR
79078: IFFALSE 79082
// exit ;
79080: GO 79174
// if GetTaskList ( unit ) then
79082: LD_VAR 0 1
79086: PPUSH
79087: CALL_OW 437
79091: IFFALSE 79174
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79093: LD_STRING e
79095: PUSH
79096: LD_VAR 0 1
79100: PPUSH
79101: CALL_OW 437
79105: PUSH
79106: LD_INT 1
79108: ARRAY
79109: PUSH
79110: LD_INT 1
79112: ARRAY
79113: EQUAL
79114: PUSH
79115: LD_VAR 0 4
79119: PUSH
79120: LD_VAR 0 1
79124: PPUSH
79125: CALL_OW 437
79129: PUSH
79130: LD_INT 1
79132: ARRAY
79133: PUSH
79134: LD_INT 2
79136: ARRAY
79137: EQUAL
79138: AND
79139: PUSH
79140: LD_VAR 0 5
79144: PUSH
79145: LD_VAR 0 1
79149: PPUSH
79150: CALL_OW 437
79154: PUSH
79155: LD_INT 1
79157: ARRAY
79158: PUSH
79159: LD_INT 3
79161: ARRAY
79162: EQUAL
79163: AND
79164: IFFALSE 79174
// result := true end ;
79166: LD_ADDR_VAR 0 3
79170: PUSH
79171: LD_INT 1
79173: ST_TO_ADDR
// end ;
79174: LD_VAR 0 3
79178: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79179: LD_INT 0
79181: PPUSH
// result := false ;
79182: LD_ADDR_VAR 0 4
79186: PUSH
79187: LD_INT 0
79189: ST_TO_ADDR
// if GetTaskList ( unit ) then
79190: LD_VAR 0 1
79194: PPUSH
79195: CALL_OW 437
79199: IFFALSE 79282
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79201: LD_STRING M
79203: PUSH
79204: LD_VAR 0 1
79208: PPUSH
79209: CALL_OW 437
79213: PUSH
79214: LD_INT 1
79216: ARRAY
79217: PUSH
79218: LD_INT 1
79220: ARRAY
79221: EQUAL
79222: PUSH
79223: LD_VAR 0 2
79227: PUSH
79228: LD_VAR 0 1
79232: PPUSH
79233: CALL_OW 437
79237: PUSH
79238: LD_INT 1
79240: ARRAY
79241: PUSH
79242: LD_INT 2
79244: ARRAY
79245: EQUAL
79246: AND
79247: PUSH
79248: LD_VAR 0 3
79252: PUSH
79253: LD_VAR 0 1
79257: PPUSH
79258: CALL_OW 437
79262: PUSH
79263: LD_INT 1
79265: ARRAY
79266: PUSH
79267: LD_INT 3
79269: ARRAY
79270: EQUAL
79271: AND
79272: IFFALSE 79282
// result := true ;
79274: LD_ADDR_VAR 0 4
79278: PUSH
79279: LD_INT 1
79281: ST_TO_ADDR
// end ; end ;
79282: LD_VAR 0 4
79286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79287: LD_INT 0
79289: PPUSH
79290: PPUSH
79291: PPUSH
79292: PPUSH
// if not unit or not area then
79293: LD_VAR 0 1
79297: NOT
79298: PUSH
79299: LD_VAR 0 2
79303: NOT
79304: OR
79305: IFFALSE 79309
// exit ;
79307: GO 79485
// tmp := AreaToList ( area , i ) ;
79309: LD_ADDR_VAR 0 6
79313: PUSH
79314: LD_VAR 0 2
79318: PPUSH
79319: LD_VAR 0 5
79323: PPUSH
79324: CALL_OW 517
79328: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79329: LD_ADDR_VAR 0 5
79333: PUSH
79334: DOUBLE
79335: LD_INT 1
79337: DEC
79338: ST_TO_ADDR
79339: LD_VAR 0 6
79343: PUSH
79344: LD_INT 1
79346: ARRAY
79347: PUSH
79348: FOR_TO
79349: IFFALSE 79483
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79351: LD_ADDR_VAR 0 7
79355: PUSH
79356: LD_VAR 0 6
79360: PUSH
79361: LD_INT 1
79363: ARRAY
79364: PUSH
79365: LD_VAR 0 5
79369: ARRAY
79370: PUSH
79371: LD_VAR 0 6
79375: PUSH
79376: LD_INT 2
79378: ARRAY
79379: PUSH
79380: LD_VAR 0 5
79384: ARRAY
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79390: LD_INT 92
79392: PUSH
79393: LD_VAR 0 7
79397: PUSH
79398: LD_INT 1
79400: ARRAY
79401: PUSH
79402: LD_VAR 0 7
79406: PUSH
79407: LD_INT 2
79409: ARRAY
79410: PUSH
79411: LD_INT 2
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: LIST
79418: LIST
79419: PPUSH
79420: CALL_OW 69
79424: PUSH
79425: LD_INT 0
79427: EQUAL
79428: IFFALSE 79481
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79430: LD_VAR 0 1
79434: PPUSH
79435: LD_VAR 0 7
79439: PUSH
79440: LD_INT 1
79442: ARRAY
79443: PPUSH
79444: LD_VAR 0 7
79448: PUSH
79449: LD_INT 2
79451: ARRAY
79452: PPUSH
79453: LD_VAR 0 3
79457: PPUSH
79458: CALL_OW 48
// result := IsPlaced ( unit ) ;
79462: LD_ADDR_VAR 0 4
79466: PUSH
79467: LD_VAR 0 1
79471: PPUSH
79472: CALL_OW 305
79476: ST_TO_ADDR
// exit ;
79477: POP
79478: POP
79479: GO 79485
// end ; end ;
79481: GO 79348
79483: POP
79484: POP
// end ;
79485: LD_VAR 0 4
79489: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79490: LD_INT 0
79492: PPUSH
79493: PPUSH
79494: PPUSH
// if not side or side > 8 then
79495: LD_VAR 0 1
79499: NOT
79500: PUSH
79501: LD_VAR 0 1
79505: PUSH
79506: LD_INT 8
79508: GREATER
79509: OR
79510: IFFALSE 79514
// exit ;
79512: GO 79701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79514: LD_ADDR_VAR 0 4
79518: PUSH
79519: LD_INT 22
79521: PUSH
79522: LD_VAR 0 1
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: PUSH
79531: LD_INT 21
79533: PUSH
79534: LD_INT 3
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: PPUSH
79545: CALL_OW 69
79549: ST_TO_ADDR
// if not tmp then
79550: LD_VAR 0 4
79554: NOT
79555: IFFALSE 79559
// exit ;
79557: GO 79701
// enable_addtolog := true ;
79559: LD_ADDR_OWVAR 81
79563: PUSH
79564: LD_INT 1
79566: ST_TO_ADDR
// AddToLog ( [ ) ;
79567: LD_STRING [
79569: PPUSH
79570: CALL_OW 561
// for i in tmp do
79574: LD_ADDR_VAR 0 3
79578: PUSH
79579: LD_VAR 0 4
79583: PUSH
79584: FOR_IN
79585: IFFALSE 79692
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79587: LD_STRING [
79589: PUSH
79590: LD_VAR 0 3
79594: PPUSH
79595: CALL_OW 266
79599: STR
79600: PUSH
79601: LD_STRING , 
79603: STR
79604: PUSH
79605: LD_VAR 0 3
79609: PPUSH
79610: CALL_OW 250
79614: STR
79615: PUSH
79616: LD_STRING , 
79618: STR
79619: PUSH
79620: LD_VAR 0 3
79624: PPUSH
79625: CALL_OW 251
79629: STR
79630: PUSH
79631: LD_STRING , 
79633: STR
79634: PUSH
79635: LD_VAR 0 3
79639: PPUSH
79640: CALL_OW 254
79644: STR
79645: PUSH
79646: LD_STRING , 
79648: STR
79649: PUSH
79650: LD_VAR 0 3
79654: PPUSH
79655: LD_INT 1
79657: PPUSH
79658: CALL_OW 268
79662: STR
79663: PUSH
79664: LD_STRING , 
79666: STR
79667: PUSH
79668: LD_VAR 0 3
79672: PPUSH
79673: LD_INT 2
79675: PPUSH
79676: CALL_OW 268
79680: STR
79681: PUSH
79682: LD_STRING ],
79684: STR
79685: PPUSH
79686: CALL_OW 561
// end ;
79690: GO 79584
79692: POP
79693: POP
// AddToLog ( ]; ) ;
79694: LD_STRING ];
79696: PPUSH
79697: CALL_OW 561
// end ;
79701: LD_VAR 0 2
79705: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79706: LD_INT 0
79708: PPUSH
79709: PPUSH
79710: PPUSH
79711: PPUSH
79712: PPUSH
// if not area or not rate or not max then
79713: LD_VAR 0 1
79717: NOT
79718: PUSH
79719: LD_VAR 0 2
79723: NOT
79724: OR
79725: PUSH
79726: LD_VAR 0 4
79730: NOT
79731: OR
79732: IFFALSE 79736
// exit ;
79734: GO 79925
// while 1 do
79736: LD_INT 1
79738: IFFALSE 79925
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79740: LD_ADDR_VAR 0 9
79744: PUSH
79745: LD_VAR 0 1
79749: PPUSH
79750: LD_INT 1
79752: PPUSH
79753: CALL_OW 287
79757: PUSH
79758: LD_INT 10
79760: MUL
79761: ST_TO_ADDR
// r := rate / 10 ;
79762: LD_ADDR_VAR 0 7
79766: PUSH
79767: LD_VAR 0 2
79771: PUSH
79772: LD_INT 10
79774: DIVREAL
79775: ST_TO_ADDR
// time := 1 1$00 ;
79776: LD_ADDR_VAR 0 8
79780: PUSH
79781: LD_INT 2100
79783: ST_TO_ADDR
// if amount < min then
79784: LD_VAR 0 9
79788: PUSH
79789: LD_VAR 0 3
79793: LESS
79794: IFFALSE 79812
// r := r * 2 else
79796: LD_ADDR_VAR 0 7
79800: PUSH
79801: LD_VAR 0 7
79805: PUSH
79806: LD_INT 2
79808: MUL
79809: ST_TO_ADDR
79810: GO 79838
// if amount > max then
79812: LD_VAR 0 9
79816: PUSH
79817: LD_VAR 0 4
79821: GREATER
79822: IFFALSE 79838
// r := r / 2 ;
79824: LD_ADDR_VAR 0 7
79828: PUSH
79829: LD_VAR 0 7
79833: PUSH
79834: LD_INT 2
79836: DIVREAL
79837: ST_TO_ADDR
// time := time / r ;
79838: LD_ADDR_VAR 0 8
79842: PUSH
79843: LD_VAR 0 8
79847: PUSH
79848: LD_VAR 0 7
79852: DIVREAL
79853: ST_TO_ADDR
// if time < 0 then
79854: LD_VAR 0 8
79858: PUSH
79859: LD_INT 0
79861: LESS
79862: IFFALSE 79879
// time := time * - 1 ;
79864: LD_ADDR_VAR 0 8
79868: PUSH
79869: LD_VAR 0 8
79873: PUSH
79874: LD_INT 1
79876: NEG
79877: MUL
79878: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79879: LD_VAR 0 8
79883: PUSH
79884: LD_INT 35
79886: PPUSH
79887: LD_INT 875
79889: PPUSH
79890: CALL_OW 12
79894: PLUS
79895: PPUSH
79896: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79900: LD_INT 1
79902: PPUSH
79903: LD_INT 5
79905: PPUSH
79906: CALL_OW 12
79910: PPUSH
79911: LD_VAR 0 1
79915: PPUSH
79916: LD_INT 1
79918: PPUSH
79919: CALL_OW 55
// end ;
79923: GO 79736
// end ;
79925: LD_VAR 0 5
79929: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79930: LD_INT 0
79932: PPUSH
79933: PPUSH
79934: PPUSH
79935: PPUSH
79936: PPUSH
79937: PPUSH
79938: PPUSH
79939: PPUSH
// if not turrets or not factories then
79940: LD_VAR 0 1
79944: NOT
79945: PUSH
79946: LD_VAR 0 2
79950: NOT
79951: OR
79952: IFFALSE 79956
// exit ;
79954: GO 80263
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79956: LD_ADDR_VAR 0 10
79960: PUSH
79961: LD_INT 5
79963: PUSH
79964: LD_INT 6
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: LD_INT 2
79973: PUSH
79974: LD_INT 4
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 3
79983: PUSH
79984: LD_INT 5
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: LIST
79995: PUSH
79996: LD_INT 24
79998: PUSH
79999: LD_INT 25
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: PUSH
80006: LD_INT 23
80008: PUSH
80009: LD_INT 27
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 42
80022: PUSH
80023: LD_INT 43
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: PUSH
80030: LD_INT 44
80032: PUSH
80033: LD_INT 46
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: PUSH
80040: LD_INT 45
80042: PUSH
80043: LD_INT 47
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: LIST
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: LIST
80059: ST_TO_ADDR
// result := [ ] ;
80060: LD_ADDR_VAR 0 3
80064: PUSH
80065: EMPTY
80066: ST_TO_ADDR
// for i in turrets do
80067: LD_ADDR_VAR 0 4
80071: PUSH
80072: LD_VAR 0 1
80076: PUSH
80077: FOR_IN
80078: IFFALSE 80261
// begin nat := GetNation ( i ) ;
80080: LD_ADDR_VAR 0 7
80084: PUSH
80085: LD_VAR 0 4
80089: PPUSH
80090: CALL_OW 248
80094: ST_TO_ADDR
// weapon := 0 ;
80095: LD_ADDR_VAR 0 8
80099: PUSH
80100: LD_INT 0
80102: ST_TO_ADDR
// if not nat then
80103: LD_VAR 0 7
80107: NOT
80108: IFFALSE 80112
// continue ;
80110: GO 80077
// for j in list [ nat ] do
80112: LD_ADDR_VAR 0 5
80116: PUSH
80117: LD_VAR 0 10
80121: PUSH
80122: LD_VAR 0 7
80126: ARRAY
80127: PUSH
80128: FOR_IN
80129: IFFALSE 80170
// if GetBWeapon ( i ) = j [ 1 ] then
80131: LD_VAR 0 4
80135: PPUSH
80136: CALL_OW 269
80140: PUSH
80141: LD_VAR 0 5
80145: PUSH
80146: LD_INT 1
80148: ARRAY
80149: EQUAL
80150: IFFALSE 80168
// begin weapon := j [ 2 ] ;
80152: LD_ADDR_VAR 0 8
80156: PUSH
80157: LD_VAR 0 5
80161: PUSH
80162: LD_INT 2
80164: ARRAY
80165: ST_TO_ADDR
// break ;
80166: GO 80170
// end ;
80168: GO 80128
80170: POP
80171: POP
// if not weapon then
80172: LD_VAR 0 8
80176: NOT
80177: IFFALSE 80181
// continue ;
80179: GO 80077
// for k in factories do
80181: LD_ADDR_VAR 0 6
80185: PUSH
80186: LD_VAR 0 2
80190: PUSH
80191: FOR_IN
80192: IFFALSE 80257
// begin weapons := AvailableWeaponList ( k ) ;
80194: LD_ADDR_VAR 0 9
80198: PUSH
80199: LD_VAR 0 6
80203: PPUSH
80204: CALL_OW 478
80208: ST_TO_ADDR
// if not weapons then
80209: LD_VAR 0 9
80213: NOT
80214: IFFALSE 80218
// continue ;
80216: GO 80191
// if weapon in weapons then
80218: LD_VAR 0 8
80222: PUSH
80223: LD_VAR 0 9
80227: IN
80228: IFFALSE 80255
// begin result := [ i , weapon ] ;
80230: LD_ADDR_VAR 0 3
80234: PUSH
80235: LD_VAR 0 4
80239: PUSH
80240: LD_VAR 0 8
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: ST_TO_ADDR
// exit ;
80249: POP
80250: POP
80251: POP
80252: POP
80253: GO 80263
// end ; end ;
80255: GO 80191
80257: POP
80258: POP
// end ;
80259: GO 80077
80261: POP
80262: POP
// end ;
80263: LD_VAR 0 3
80267: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80268: LD_INT 0
80270: PPUSH
// if not side or side > 8 then
80271: LD_VAR 0 3
80275: NOT
80276: PUSH
80277: LD_VAR 0 3
80281: PUSH
80282: LD_INT 8
80284: GREATER
80285: OR
80286: IFFALSE 80290
// exit ;
80288: GO 80349
// if not range then
80290: LD_VAR 0 4
80294: NOT
80295: IFFALSE 80306
// range := - 12 ;
80297: LD_ADDR_VAR 0 4
80301: PUSH
80302: LD_INT 12
80304: NEG
80305: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80306: LD_VAR 0 1
80310: PPUSH
80311: LD_VAR 0 2
80315: PPUSH
80316: LD_VAR 0 3
80320: PPUSH
80321: LD_VAR 0 4
80325: PPUSH
80326: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80330: LD_VAR 0 1
80334: PPUSH
80335: LD_VAR 0 2
80339: PPUSH
80340: LD_VAR 0 3
80344: PPUSH
80345: CALL_OW 331
// end ;
80349: LD_VAR 0 5
80353: RET
// export function Video ( mode ) ; begin
80354: LD_INT 0
80356: PPUSH
// ingame_video = mode ;
80357: LD_ADDR_OWVAR 52
80361: PUSH
80362: LD_VAR 0 1
80366: ST_TO_ADDR
// interface_hidden = mode ;
80367: LD_ADDR_OWVAR 54
80371: PUSH
80372: LD_VAR 0 1
80376: ST_TO_ADDR
// end ;
80377: LD_VAR 0 2
80381: RET
// export function Join ( array , element ) ; begin
80382: LD_INT 0
80384: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80385: LD_ADDR_VAR 0 3
80389: PUSH
80390: LD_VAR 0 1
80394: PPUSH
80395: LD_VAR 0 1
80399: PUSH
80400: LD_INT 1
80402: PLUS
80403: PPUSH
80404: LD_VAR 0 2
80408: PPUSH
80409: CALL_OW 1
80413: ST_TO_ADDR
// end ;
80414: LD_VAR 0 3
80418: RET
// export function JoinUnion ( array , element ) ; begin
80419: LD_INT 0
80421: PPUSH
// result := array union element ;
80422: LD_ADDR_VAR 0 3
80426: PUSH
80427: LD_VAR 0 1
80431: PUSH
80432: LD_VAR 0 2
80436: UNION
80437: ST_TO_ADDR
// end ;
80438: LD_VAR 0 3
80442: RET
// export function GetBehemoths ( side ) ; begin
80443: LD_INT 0
80445: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80446: LD_ADDR_VAR 0 2
80450: PUSH
80451: LD_INT 22
80453: PUSH
80454: LD_VAR 0 1
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: PUSH
80463: LD_INT 31
80465: PUSH
80466: LD_INT 25
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PPUSH
80477: CALL_OW 69
80481: ST_TO_ADDR
// end ;
80482: LD_VAR 0 2
80486: RET
// export function Shuffle ( array ) ; var i , index ; begin
80487: LD_INT 0
80489: PPUSH
80490: PPUSH
80491: PPUSH
// result := [ ] ;
80492: LD_ADDR_VAR 0 2
80496: PUSH
80497: EMPTY
80498: ST_TO_ADDR
// if not array then
80499: LD_VAR 0 1
80503: NOT
80504: IFFALSE 80508
// exit ;
80506: GO 80607
// Randomize ;
80508: CALL_OW 10
// for i = array downto 1 do
80512: LD_ADDR_VAR 0 3
80516: PUSH
80517: DOUBLE
80518: LD_VAR 0 1
80522: INC
80523: ST_TO_ADDR
80524: LD_INT 1
80526: PUSH
80527: FOR_DOWNTO
80528: IFFALSE 80605
// begin index := rand ( 1 , array ) ;
80530: LD_ADDR_VAR 0 4
80534: PUSH
80535: LD_INT 1
80537: PPUSH
80538: LD_VAR 0 1
80542: PPUSH
80543: CALL_OW 12
80547: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80548: LD_ADDR_VAR 0 2
80552: PUSH
80553: LD_VAR 0 2
80557: PPUSH
80558: LD_VAR 0 2
80562: PUSH
80563: LD_INT 1
80565: PLUS
80566: PPUSH
80567: LD_VAR 0 1
80571: PUSH
80572: LD_VAR 0 4
80576: ARRAY
80577: PPUSH
80578: CALL_OW 2
80582: ST_TO_ADDR
// array := Delete ( array , index ) ;
80583: LD_ADDR_VAR 0 1
80587: PUSH
80588: LD_VAR 0 1
80592: PPUSH
80593: LD_VAR 0 4
80597: PPUSH
80598: CALL_OW 3
80602: ST_TO_ADDR
// end ;
80603: GO 80527
80605: POP
80606: POP
// end ;
80607: LD_VAR 0 2
80611: RET
// export function GetBaseMaterials ( base ) ; begin
80612: LD_INT 0
80614: PPUSH
// result := [ 0 , 0 , 0 ] ;
80615: LD_ADDR_VAR 0 2
80619: PUSH
80620: LD_INT 0
80622: PUSH
80623: LD_INT 0
80625: PUSH
80626: LD_INT 0
80628: PUSH
80629: EMPTY
80630: LIST
80631: LIST
80632: LIST
80633: ST_TO_ADDR
// if not base then
80634: LD_VAR 0 1
80638: NOT
80639: IFFALSE 80643
// exit ;
80641: GO 80692
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80643: LD_ADDR_VAR 0 2
80647: PUSH
80648: LD_VAR 0 1
80652: PPUSH
80653: LD_INT 1
80655: PPUSH
80656: CALL_OW 275
80660: PUSH
80661: LD_VAR 0 1
80665: PPUSH
80666: LD_INT 2
80668: PPUSH
80669: CALL_OW 275
80673: PUSH
80674: LD_VAR 0 1
80678: PPUSH
80679: LD_INT 3
80681: PPUSH
80682: CALL_OW 275
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: LIST
80691: ST_TO_ADDR
// end ;
80692: LD_VAR 0 2
80696: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80697: LD_INT 0
80699: PPUSH
80700: PPUSH
// result := array ;
80701: LD_ADDR_VAR 0 3
80705: PUSH
80706: LD_VAR 0 1
80710: ST_TO_ADDR
// if size >= result then
80711: LD_VAR 0 2
80715: PUSH
80716: LD_VAR 0 3
80720: GREATEREQUAL
80721: IFFALSE 80725
// exit ;
80723: GO 80775
// if size then
80725: LD_VAR 0 2
80729: IFFALSE 80775
// for i := array downto size do
80731: LD_ADDR_VAR 0 4
80735: PUSH
80736: DOUBLE
80737: LD_VAR 0 1
80741: INC
80742: ST_TO_ADDR
80743: LD_VAR 0 2
80747: PUSH
80748: FOR_DOWNTO
80749: IFFALSE 80773
// result := Delete ( result , result ) ;
80751: LD_ADDR_VAR 0 3
80755: PUSH
80756: LD_VAR 0 3
80760: PPUSH
80761: LD_VAR 0 3
80765: PPUSH
80766: CALL_OW 3
80770: ST_TO_ADDR
80771: GO 80748
80773: POP
80774: POP
// end ;
80775: LD_VAR 0 3
80779: RET
// export function ComExit ( unit ) ; var tmp ; begin
80780: LD_INT 0
80782: PPUSH
80783: PPUSH
// if not IsInUnit ( unit ) then
80784: LD_VAR 0 1
80788: PPUSH
80789: CALL_OW 310
80793: NOT
80794: IFFALSE 80798
// exit ;
80796: GO 80858
// tmp := IsInUnit ( unit ) ;
80798: LD_ADDR_VAR 0 3
80802: PUSH
80803: LD_VAR 0 1
80807: PPUSH
80808: CALL_OW 310
80812: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80813: LD_VAR 0 3
80817: PPUSH
80818: CALL_OW 247
80822: PUSH
80823: LD_INT 2
80825: EQUAL
80826: IFFALSE 80839
// ComExitVehicle ( unit ) else
80828: LD_VAR 0 1
80832: PPUSH
80833: CALL_OW 121
80837: GO 80848
// ComExitBuilding ( unit ) ;
80839: LD_VAR 0 1
80843: PPUSH
80844: CALL_OW 122
// result := tmp ;
80848: LD_ADDR_VAR 0 2
80852: PUSH
80853: LD_VAR 0 3
80857: ST_TO_ADDR
// end ;
80858: LD_VAR 0 2
80862: RET
// export function ComExitAll ( units ) ; var i ; begin
80863: LD_INT 0
80865: PPUSH
80866: PPUSH
// if not units then
80867: LD_VAR 0 1
80871: NOT
80872: IFFALSE 80876
// exit ;
80874: GO 80902
// for i in units do
80876: LD_ADDR_VAR 0 3
80880: PUSH
80881: LD_VAR 0 1
80885: PUSH
80886: FOR_IN
80887: IFFALSE 80900
// ComExit ( i ) ;
80889: LD_VAR 0 3
80893: PPUSH
80894: CALL 80780 0 1
80898: GO 80886
80900: POP
80901: POP
// end ;
80902: LD_VAR 0 2
80906: RET
// export function ResetHc ; begin
80907: LD_INT 0
80909: PPUSH
// InitHc ;
80910: CALL_OW 19
// hc_importance := 0 ;
80914: LD_ADDR_OWVAR 32
80918: PUSH
80919: LD_INT 0
80921: ST_TO_ADDR
// end ;
80922: LD_VAR 0 1
80926: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80927: LD_INT 0
80929: PPUSH
80930: PPUSH
80931: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80932: LD_ADDR_VAR 0 6
80936: PUSH
80937: LD_VAR 0 1
80941: PUSH
80942: LD_VAR 0 3
80946: PLUS
80947: PUSH
80948: LD_INT 2
80950: DIV
80951: ST_TO_ADDR
// if _x < 0 then
80952: LD_VAR 0 6
80956: PUSH
80957: LD_INT 0
80959: LESS
80960: IFFALSE 80977
// _x := _x * - 1 ;
80962: LD_ADDR_VAR 0 6
80966: PUSH
80967: LD_VAR 0 6
80971: PUSH
80972: LD_INT 1
80974: NEG
80975: MUL
80976: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80977: LD_ADDR_VAR 0 7
80981: PUSH
80982: LD_VAR 0 2
80986: PUSH
80987: LD_VAR 0 4
80991: PLUS
80992: PUSH
80993: LD_INT 2
80995: DIV
80996: ST_TO_ADDR
// if _y < 0 then
80997: LD_VAR 0 7
81001: PUSH
81002: LD_INT 0
81004: LESS
81005: IFFALSE 81022
// _y := _y * - 1 ;
81007: LD_ADDR_VAR 0 7
81011: PUSH
81012: LD_VAR 0 7
81016: PUSH
81017: LD_INT 1
81019: NEG
81020: MUL
81021: ST_TO_ADDR
// result := [ _x , _y ] ;
81022: LD_ADDR_VAR 0 5
81026: PUSH
81027: LD_VAR 0 6
81031: PUSH
81032: LD_VAR 0 7
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: ST_TO_ADDR
// end ;
81041: LD_VAR 0 5
81045: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81046: LD_INT 0
81048: PPUSH
81049: PPUSH
81050: PPUSH
81051: PPUSH
// task := GetTaskList ( unit ) ;
81052: LD_ADDR_VAR 0 7
81056: PUSH
81057: LD_VAR 0 1
81061: PPUSH
81062: CALL_OW 437
81066: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81067: LD_VAR 0 7
81071: NOT
81072: PUSH
81073: LD_VAR 0 1
81077: PPUSH
81078: LD_VAR 0 2
81082: PPUSH
81083: CALL_OW 308
81087: NOT
81088: AND
81089: IFFALSE 81093
// exit ;
81091: GO 81211
// if IsInArea ( unit , area ) then
81093: LD_VAR 0 1
81097: PPUSH
81098: LD_VAR 0 2
81102: PPUSH
81103: CALL_OW 308
81107: IFFALSE 81125
// begin ComMoveToArea ( unit , goAway ) ;
81109: LD_VAR 0 1
81113: PPUSH
81114: LD_VAR 0 3
81118: PPUSH
81119: CALL_OW 113
// exit ;
81123: GO 81211
// end ; if task [ 1 ] [ 1 ] <> M then
81125: LD_VAR 0 7
81129: PUSH
81130: LD_INT 1
81132: ARRAY
81133: PUSH
81134: LD_INT 1
81136: ARRAY
81137: PUSH
81138: LD_STRING M
81140: NONEQUAL
81141: IFFALSE 81145
// exit ;
81143: GO 81211
// x := task [ 1 ] [ 2 ] ;
81145: LD_ADDR_VAR 0 5
81149: PUSH
81150: LD_VAR 0 7
81154: PUSH
81155: LD_INT 1
81157: ARRAY
81158: PUSH
81159: LD_INT 2
81161: ARRAY
81162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81163: LD_ADDR_VAR 0 6
81167: PUSH
81168: LD_VAR 0 7
81172: PUSH
81173: LD_INT 1
81175: ARRAY
81176: PUSH
81177: LD_INT 3
81179: ARRAY
81180: ST_TO_ADDR
// if InArea ( x , y , area ) then
81181: LD_VAR 0 5
81185: PPUSH
81186: LD_VAR 0 6
81190: PPUSH
81191: LD_VAR 0 2
81195: PPUSH
81196: CALL_OW 309
81200: IFFALSE 81211
// ComStop ( unit ) ;
81202: LD_VAR 0 1
81206: PPUSH
81207: CALL_OW 141
// end ;
81211: LD_VAR 0 4
81215: RET
// export function Abs ( value ) ; begin
81216: LD_INT 0
81218: PPUSH
// result := value ;
81219: LD_ADDR_VAR 0 2
81223: PUSH
81224: LD_VAR 0 1
81228: ST_TO_ADDR
// if value < 0 then
81229: LD_VAR 0 1
81233: PUSH
81234: LD_INT 0
81236: LESS
81237: IFFALSE 81254
// result := value * - 1 ;
81239: LD_ADDR_VAR 0 2
81243: PUSH
81244: LD_VAR 0 1
81248: PUSH
81249: LD_INT 1
81251: NEG
81252: MUL
81253: ST_TO_ADDR
// end ;
81254: LD_VAR 0 2
81258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81259: LD_INT 0
81261: PPUSH
81262: PPUSH
81263: PPUSH
81264: PPUSH
81265: PPUSH
81266: PPUSH
81267: PPUSH
81268: PPUSH
// if not unit or not building then
81269: LD_VAR 0 1
81273: NOT
81274: PUSH
81275: LD_VAR 0 2
81279: NOT
81280: OR
81281: IFFALSE 81285
// exit ;
81283: GO 81511
// x := GetX ( building ) ;
81285: LD_ADDR_VAR 0 4
81289: PUSH
81290: LD_VAR 0 2
81294: PPUSH
81295: CALL_OW 250
81299: ST_TO_ADDR
// y := GetY ( building ) ;
81300: LD_ADDR_VAR 0 6
81304: PUSH
81305: LD_VAR 0 2
81309: PPUSH
81310: CALL_OW 251
81314: ST_TO_ADDR
// d := GetDir ( building ) ;
81315: LD_ADDR_VAR 0 8
81319: PUSH
81320: LD_VAR 0 2
81324: PPUSH
81325: CALL_OW 254
81329: ST_TO_ADDR
// r := 4 ;
81330: LD_ADDR_VAR 0 9
81334: PUSH
81335: LD_INT 4
81337: ST_TO_ADDR
// for i := 1 to 5 do
81338: LD_ADDR_VAR 0 10
81342: PUSH
81343: DOUBLE
81344: LD_INT 1
81346: DEC
81347: ST_TO_ADDR
81348: LD_INT 5
81350: PUSH
81351: FOR_TO
81352: IFFALSE 81509
// begin _x := ShiftX ( x , d , r + i ) ;
81354: LD_ADDR_VAR 0 5
81358: PUSH
81359: LD_VAR 0 4
81363: PPUSH
81364: LD_VAR 0 8
81368: PPUSH
81369: LD_VAR 0 9
81373: PUSH
81374: LD_VAR 0 10
81378: PLUS
81379: PPUSH
81380: CALL_OW 272
81384: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81385: LD_ADDR_VAR 0 7
81389: PUSH
81390: LD_VAR 0 6
81394: PPUSH
81395: LD_VAR 0 8
81399: PPUSH
81400: LD_VAR 0 9
81404: PUSH
81405: LD_VAR 0 10
81409: PLUS
81410: PPUSH
81411: CALL_OW 273
81415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81416: LD_VAR 0 5
81420: PPUSH
81421: LD_VAR 0 7
81425: PPUSH
81426: CALL_OW 488
81430: PUSH
81431: LD_VAR 0 5
81435: PPUSH
81436: LD_VAR 0 7
81440: PPUSH
81441: CALL_OW 428
81445: PPUSH
81446: CALL_OW 247
81450: PUSH
81451: LD_INT 3
81453: PUSH
81454: LD_INT 2
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: IN
81461: NOT
81462: AND
81463: IFFALSE 81507
// begin ComMoveXY ( unit , _x , _y ) ;
81465: LD_VAR 0 1
81469: PPUSH
81470: LD_VAR 0 5
81474: PPUSH
81475: LD_VAR 0 7
81479: PPUSH
81480: CALL_OW 111
// result := [ _x , _y ] ;
81484: LD_ADDR_VAR 0 3
81488: PUSH
81489: LD_VAR 0 5
81493: PUSH
81494: LD_VAR 0 7
81498: PUSH
81499: EMPTY
81500: LIST
81501: LIST
81502: ST_TO_ADDR
// exit ;
81503: POP
81504: POP
81505: GO 81511
// end ; end ;
81507: GO 81351
81509: POP
81510: POP
// end ;
81511: LD_VAR 0 3
81515: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81516: LD_INT 0
81518: PPUSH
81519: PPUSH
81520: PPUSH
// result := 0 ;
81521: LD_ADDR_VAR 0 3
81525: PUSH
81526: LD_INT 0
81528: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81529: LD_VAR 0 1
81533: PUSH
81534: LD_INT 0
81536: LESS
81537: PUSH
81538: LD_VAR 0 1
81542: PUSH
81543: LD_INT 8
81545: GREATER
81546: OR
81547: PUSH
81548: LD_VAR 0 2
81552: PUSH
81553: LD_INT 0
81555: LESS
81556: OR
81557: PUSH
81558: LD_VAR 0 2
81562: PUSH
81563: LD_INT 8
81565: GREATER
81566: OR
81567: IFFALSE 81571
// exit ;
81569: GO 81646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81571: LD_ADDR_VAR 0 4
81575: PUSH
81576: LD_INT 22
81578: PUSH
81579: LD_VAR 0 2
81583: PUSH
81584: EMPTY
81585: LIST
81586: LIST
81587: PPUSH
81588: CALL_OW 69
81592: PUSH
81593: FOR_IN
81594: IFFALSE 81644
// begin un := UnitShoot ( i ) ;
81596: LD_ADDR_VAR 0 5
81600: PUSH
81601: LD_VAR 0 4
81605: PPUSH
81606: CALL_OW 504
81610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81611: LD_VAR 0 5
81615: PPUSH
81616: CALL_OW 255
81620: PUSH
81621: LD_VAR 0 1
81625: EQUAL
81626: IFFALSE 81642
// begin result := un ;
81628: LD_ADDR_VAR 0 3
81632: PUSH
81633: LD_VAR 0 5
81637: ST_TO_ADDR
// exit ;
81638: POP
81639: POP
81640: GO 81646
// end ; end ;
81642: GO 81593
81644: POP
81645: POP
// end ;
81646: LD_VAR 0 3
81650: RET
// export function GetCargoBay ( units ) ; begin
81651: LD_INT 0
81653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81654: LD_ADDR_VAR 0 2
81658: PUSH
81659: LD_VAR 0 1
81663: PPUSH
81664: LD_INT 2
81666: PUSH
81667: LD_INT 34
81669: PUSH
81670: LD_INT 12
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: PUSH
81677: LD_INT 34
81679: PUSH
81680: LD_INT 51
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PUSH
81687: LD_INT 34
81689: PUSH
81690: LD_INT 32
81692: PUSH
81693: EMPTY
81694: LIST
81695: LIST
81696: PUSH
81697: LD_INT 34
81699: PUSH
81700: LD_INT 89
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: PUSH
81707: EMPTY
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: PPUSH
81714: CALL_OW 72
81718: ST_TO_ADDR
// end ;
81719: LD_VAR 0 2
81723: RET
// export function Negate ( value ) ; begin
81724: LD_INT 0
81726: PPUSH
// result := not value ;
81727: LD_ADDR_VAR 0 2
81731: PUSH
81732: LD_VAR 0 1
81736: NOT
81737: ST_TO_ADDR
// end ;
81738: LD_VAR 0 2
81742: RET
// export function Inc ( value ) ; begin
81743: LD_INT 0
81745: PPUSH
// result := value + 1 ;
81746: LD_ADDR_VAR 0 2
81750: PUSH
81751: LD_VAR 0 1
81755: PUSH
81756: LD_INT 1
81758: PLUS
81759: ST_TO_ADDR
// end ;
81760: LD_VAR 0 2
81764: RET
// export function Dec ( value ) ; begin
81765: LD_INT 0
81767: PPUSH
// result := value - 1 ;
81768: LD_ADDR_VAR 0 2
81772: PUSH
81773: LD_VAR 0 1
81777: PUSH
81778: LD_INT 1
81780: MINUS
81781: ST_TO_ADDR
// end ;
81782: LD_VAR 0 2
81786: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81787: LD_INT 0
81789: PPUSH
81790: PPUSH
81791: PPUSH
81792: PPUSH
81793: PPUSH
81794: PPUSH
81795: PPUSH
81796: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81797: LD_VAR 0 1
81801: PPUSH
81802: LD_VAR 0 2
81806: PPUSH
81807: CALL_OW 488
81811: NOT
81812: PUSH
81813: LD_VAR 0 3
81817: PPUSH
81818: LD_VAR 0 4
81822: PPUSH
81823: CALL_OW 488
81827: NOT
81828: OR
81829: IFFALSE 81842
// begin result := - 1 ;
81831: LD_ADDR_VAR 0 5
81835: PUSH
81836: LD_INT 1
81838: NEG
81839: ST_TO_ADDR
// exit ;
81840: GO 82077
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81842: LD_ADDR_VAR 0 12
81846: PUSH
81847: LD_VAR 0 1
81851: PPUSH
81852: LD_VAR 0 2
81856: PPUSH
81857: LD_VAR 0 3
81861: PPUSH
81862: LD_VAR 0 4
81866: PPUSH
81867: CALL 80927 0 4
81871: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81872: LD_ADDR_VAR 0 11
81876: PUSH
81877: LD_VAR 0 1
81881: PPUSH
81882: LD_VAR 0 2
81886: PPUSH
81887: LD_VAR 0 12
81891: PUSH
81892: LD_INT 1
81894: ARRAY
81895: PPUSH
81896: LD_VAR 0 12
81900: PUSH
81901: LD_INT 2
81903: ARRAY
81904: PPUSH
81905: CALL_OW 298
81909: ST_TO_ADDR
// distance := 9999 ;
81910: LD_ADDR_VAR 0 10
81914: PUSH
81915: LD_INT 9999
81917: ST_TO_ADDR
// for i := 0 to 5 do
81918: LD_ADDR_VAR 0 6
81922: PUSH
81923: DOUBLE
81924: LD_INT 0
81926: DEC
81927: ST_TO_ADDR
81928: LD_INT 5
81930: PUSH
81931: FOR_TO
81932: IFFALSE 82075
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81934: LD_ADDR_VAR 0 7
81938: PUSH
81939: LD_VAR 0 1
81943: PPUSH
81944: LD_VAR 0 6
81948: PPUSH
81949: LD_VAR 0 11
81953: PPUSH
81954: CALL_OW 272
81958: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81959: LD_ADDR_VAR 0 8
81963: PUSH
81964: LD_VAR 0 2
81968: PPUSH
81969: LD_VAR 0 6
81973: PPUSH
81974: LD_VAR 0 11
81978: PPUSH
81979: CALL_OW 273
81983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81984: LD_VAR 0 7
81988: PPUSH
81989: LD_VAR 0 8
81993: PPUSH
81994: CALL_OW 488
81998: NOT
81999: IFFALSE 82003
// continue ;
82001: GO 81931
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82003: LD_ADDR_VAR 0 9
82007: PUSH
82008: LD_VAR 0 12
82012: PUSH
82013: LD_INT 1
82015: ARRAY
82016: PPUSH
82017: LD_VAR 0 12
82021: PUSH
82022: LD_INT 2
82024: ARRAY
82025: PPUSH
82026: LD_VAR 0 7
82030: PPUSH
82031: LD_VAR 0 8
82035: PPUSH
82036: CALL_OW 298
82040: ST_TO_ADDR
// if tmp < distance then
82041: LD_VAR 0 9
82045: PUSH
82046: LD_VAR 0 10
82050: LESS
82051: IFFALSE 82073
// begin result := i ;
82053: LD_ADDR_VAR 0 5
82057: PUSH
82058: LD_VAR 0 6
82062: ST_TO_ADDR
// distance := tmp ;
82063: LD_ADDR_VAR 0 10
82067: PUSH
82068: LD_VAR 0 9
82072: ST_TO_ADDR
// end ; end ;
82073: GO 81931
82075: POP
82076: POP
// end ;
82077: LD_VAR 0 5
82081: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82082: LD_INT 0
82084: PPUSH
82085: PPUSH
// if not driver or not IsInUnit ( driver ) then
82086: LD_VAR 0 1
82090: NOT
82091: PUSH
82092: LD_VAR 0 1
82096: PPUSH
82097: CALL_OW 310
82101: NOT
82102: OR
82103: IFFALSE 82107
// exit ;
82105: GO 82197
// vehicle := IsInUnit ( driver ) ;
82107: LD_ADDR_VAR 0 3
82111: PUSH
82112: LD_VAR 0 1
82116: PPUSH
82117: CALL_OW 310
82121: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82122: LD_VAR 0 1
82126: PPUSH
82127: LD_STRING \
82129: PUSH
82130: LD_INT 0
82132: PUSH
82133: LD_INT 0
82135: PUSH
82136: LD_INT 0
82138: PUSH
82139: LD_INT 0
82141: PUSH
82142: LD_INT 0
82144: PUSH
82145: LD_INT 0
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: LIST
82155: LIST
82156: PUSH
82157: LD_STRING E
82159: PUSH
82160: LD_INT 0
82162: PUSH
82163: LD_INT 0
82165: PUSH
82166: LD_VAR 0 3
82170: PUSH
82171: LD_INT 0
82173: PUSH
82174: LD_INT 0
82176: PUSH
82177: LD_INT 0
82179: PUSH
82180: EMPTY
82181: LIST
82182: LIST
82183: LIST
82184: LIST
82185: LIST
82186: LIST
82187: LIST
82188: PUSH
82189: EMPTY
82190: LIST
82191: LIST
82192: PPUSH
82193: CALL_OW 446
// end ;
82197: LD_VAR 0 2
82201: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82202: LD_INT 0
82204: PPUSH
82205: PPUSH
// if not driver or not IsInUnit ( driver ) then
82206: LD_VAR 0 1
82210: NOT
82211: PUSH
82212: LD_VAR 0 1
82216: PPUSH
82217: CALL_OW 310
82221: NOT
82222: OR
82223: IFFALSE 82227
// exit ;
82225: GO 82317
// vehicle := IsInUnit ( driver ) ;
82227: LD_ADDR_VAR 0 3
82231: PUSH
82232: LD_VAR 0 1
82236: PPUSH
82237: CALL_OW 310
82241: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82242: LD_VAR 0 1
82246: PPUSH
82247: LD_STRING \
82249: PUSH
82250: LD_INT 0
82252: PUSH
82253: LD_INT 0
82255: PUSH
82256: LD_INT 0
82258: PUSH
82259: LD_INT 0
82261: PUSH
82262: LD_INT 0
82264: PUSH
82265: LD_INT 0
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: PUSH
82277: LD_STRING E
82279: PUSH
82280: LD_INT 0
82282: PUSH
82283: LD_INT 0
82285: PUSH
82286: LD_VAR 0 3
82290: PUSH
82291: LD_INT 0
82293: PUSH
82294: LD_INT 0
82296: PUSH
82297: LD_INT 0
82299: PUSH
82300: EMPTY
82301: LIST
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: LIST
82307: LIST
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: PPUSH
82313: CALL_OW 447
// end ;
82317: LD_VAR 0 2
82321: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82322: LD_INT 0
82324: PPUSH
82325: PPUSH
82326: PPUSH
// tmp := [ ] ;
82327: LD_ADDR_VAR 0 5
82331: PUSH
82332: EMPTY
82333: ST_TO_ADDR
// for i in units do
82334: LD_ADDR_VAR 0 4
82338: PUSH
82339: LD_VAR 0 1
82343: PUSH
82344: FOR_IN
82345: IFFALSE 82383
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82347: LD_ADDR_VAR 0 5
82351: PUSH
82352: LD_VAR 0 5
82356: PPUSH
82357: LD_VAR 0 5
82361: PUSH
82362: LD_INT 1
82364: PLUS
82365: PPUSH
82366: LD_VAR 0 4
82370: PPUSH
82371: CALL_OW 256
82375: PPUSH
82376: CALL_OW 2
82380: ST_TO_ADDR
82381: GO 82344
82383: POP
82384: POP
// if not tmp then
82385: LD_VAR 0 5
82389: NOT
82390: IFFALSE 82394
// exit ;
82392: GO 82442
// if asc then
82394: LD_VAR 0 2
82398: IFFALSE 82422
// result := SortListByListAsc ( units , tmp ) else
82400: LD_ADDR_VAR 0 3
82404: PUSH
82405: LD_VAR 0 1
82409: PPUSH
82410: LD_VAR 0 5
82414: PPUSH
82415: CALL_OW 76
82419: ST_TO_ADDR
82420: GO 82442
// result := SortListByListDesc ( units , tmp ) ;
82422: LD_ADDR_VAR 0 3
82426: PUSH
82427: LD_VAR 0 1
82431: PPUSH
82432: LD_VAR 0 5
82436: PPUSH
82437: CALL_OW 77
82441: ST_TO_ADDR
// end ;
82442: LD_VAR 0 3
82446: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82447: LD_INT 0
82449: PPUSH
82450: PPUSH
// task := GetTaskList ( mech ) ;
82451: LD_ADDR_VAR 0 4
82455: PUSH
82456: LD_VAR 0 1
82460: PPUSH
82461: CALL_OW 437
82465: ST_TO_ADDR
// if not task then
82466: LD_VAR 0 4
82470: NOT
82471: IFFALSE 82475
// exit ;
82473: GO 82517
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82475: LD_ADDR_VAR 0 3
82479: PUSH
82480: LD_VAR 0 4
82484: PUSH
82485: LD_INT 1
82487: ARRAY
82488: PUSH
82489: LD_INT 1
82491: ARRAY
82492: PUSH
82493: LD_STRING r
82495: EQUAL
82496: PUSH
82497: LD_VAR 0 4
82501: PUSH
82502: LD_INT 1
82504: ARRAY
82505: PUSH
82506: LD_INT 4
82508: ARRAY
82509: PUSH
82510: LD_VAR 0 2
82514: EQUAL
82515: AND
82516: ST_TO_ADDR
// end ;
82517: LD_VAR 0 3
82521: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82522: LD_INT 0
82524: PPUSH
// SetDir ( unit , d ) ;
82525: LD_VAR 0 1
82529: PPUSH
82530: LD_VAR 0 4
82534: PPUSH
82535: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82539: LD_VAR 0 1
82543: PPUSH
82544: LD_VAR 0 2
82548: PPUSH
82549: LD_VAR 0 3
82553: PPUSH
82554: LD_VAR 0 5
82558: PPUSH
82559: CALL_OW 48
// end ;
82563: LD_VAR 0 6
82567: RET
// export function ToNaturalNumber ( number ) ; begin
82568: LD_INT 0
82570: PPUSH
// result := number div 1 ;
82571: LD_ADDR_VAR 0 2
82575: PUSH
82576: LD_VAR 0 1
82580: PUSH
82581: LD_INT 1
82583: DIV
82584: ST_TO_ADDR
// if number < 0 then
82585: LD_VAR 0 1
82589: PUSH
82590: LD_INT 0
82592: LESS
82593: IFFALSE 82603
// result := 0 ;
82595: LD_ADDR_VAR 0 2
82599: PUSH
82600: LD_INT 0
82602: ST_TO_ADDR
// end ;
82603: LD_VAR 0 2
82607: RET
// export function SortByClass ( units , class ) ; var un ; begin
82608: LD_INT 0
82610: PPUSH
82611: PPUSH
// if not units or not class then
82612: LD_VAR 0 1
82616: NOT
82617: PUSH
82618: LD_VAR 0 2
82622: NOT
82623: OR
82624: IFFALSE 82628
// exit ;
82626: GO 82723
// result := [ ] ;
82628: LD_ADDR_VAR 0 3
82632: PUSH
82633: EMPTY
82634: ST_TO_ADDR
// for un in units do
82635: LD_ADDR_VAR 0 4
82639: PUSH
82640: LD_VAR 0 1
82644: PUSH
82645: FOR_IN
82646: IFFALSE 82721
// if GetClass ( un ) = class then
82648: LD_VAR 0 4
82652: PPUSH
82653: CALL_OW 257
82657: PUSH
82658: LD_VAR 0 2
82662: EQUAL
82663: IFFALSE 82690
// result := Insert ( result , 1 , un ) else
82665: LD_ADDR_VAR 0 3
82669: PUSH
82670: LD_VAR 0 3
82674: PPUSH
82675: LD_INT 1
82677: PPUSH
82678: LD_VAR 0 4
82682: PPUSH
82683: CALL_OW 2
82687: ST_TO_ADDR
82688: GO 82719
// result := Replace ( result , result + 1 , un ) ;
82690: LD_ADDR_VAR 0 3
82694: PUSH
82695: LD_VAR 0 3
82699: PPUSH
82700: LD_VAR 0 3
82704: PUSH
82705: LD_INT 1
82707: PLUS
82708: PPUSH
82709: LD_VAR 0 4
82713: PPUSH
82714: CALL_OW 1
82718: ST_TO_ADDR
82719: GO 82645
82721: POP
82722: POP
// end ;
82723: LD_VAR 0 3
82727: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82728: LD_INT 0
82730: PPUSH
82731: PPUSH
82732: PPUSH
82733: PPUSH
82734: PPUSH
82735: PPUSH
82736: PPUSH
// result := [ ] ;
82737: LD_ADDR_VAR 0 4
82741: PUSH
82742: EMPTY
82743: ST_TO_ADDR
// if x - r < 0 then
82744: LD_VAR 0 1
82748: PUSH
82749: LD_VAR 0 3
82753: MINUS
82754: PUSH
82755: LD_INT 0
82757: LESS
82758: IFFALSE 82770
// min_x := 0 else
82760: LD_ADDR_VAR 0 8
82764: PUSH
82765: LD_INT 0
82767: ST_TO_ADDR
82768: GO 82786
// min_x := x - r ;
82770: LD_ADDR_VAR 0 8
82774: PUSH
82775: LD_VAR 0 1
82779: PUSH
82780: LD_VAR 0 3
82784: MINUS
82785: ST_TO_ADDR
// if y - r < 0 then
82786: LD_VAR 0 2
82790: PUSH
82791: LD_VAR 0 3
82795: MINUS
82796: PUSH
82797: LD_INT 0
82799: LESS
82800: IFFALSE 82812
// min_y := 0 else
82802: LD_ADDR_VAR 0 7
82806: PUSH
82807: LD_INT 0
82809: ST_TO_ADDR
82810: GO 82828
// min_y := y - r ;
82812: LD_ADDR_VAR 0 7
82816: PUSH
82817: LD_VAR 0 2
82821: PUSH
82822: LD_VAR 0 3
82826: MINUS
82827: ST_TO_ADDR
// max_x := x + r ;
82828: LD_ADDR_VAR 0 9
82832: PUSH
82833: LD_VAR 0 1
82837: PUSH
82838: LD_VAR 0 3
82842: PLUS
82843: ST_TO_ADDR
// max_y := y + r ;
82844: LD_ADDR_VAR 0 10
82848: PUSH
82849: LD_VAR 0 2
82853: PUSH
82854: LD_VAR 0 3
82858: PLUS
82859: ST_TO_ADDR
// for _x = min_x to max_x do
82860: LD_ADDR_VAR 0 5
82864: PUSH
82865: DOUBLE
82866: LD_VAR 0 8
82870: DEC
82871: ST_TO_ADDR
82872: LD_VAR 0 9
82876: PUSH
82877: FOR_TO
82878: IFFALSE 82979
// for _y = min_y to max_y do
82880: LD_ADDR_VAR 0 6
82884: PUSH
82885: DOUBLE
82886: LD_VAR 0 7
82890: DEC
82891: ST_TO_ADDR
82892: LD_VAR 0 10
82896: PUSH
82897: FOR_TO
82898: IFFALSE 82975
// begin if not ValidHex ( _x , _y ) then
82900: LD_VAR 0 5
82904: PPUSH
82905: LD_VAR 0 6
82909: PPUSH
82910: CALL_OW 488
82914: NOT
82915: IFFALSE 82919
// continue ;
82917: GO 82897
// if GetResourceTypeXY ( _x , _y ) then
82919: LD_VAR 0 5
82923: PPUSH
82924: LD_VAR 0 6
82928: PPUSH
82929: CALL_OW 283
82933: IFFALSE 82973
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82935: LD_ADDR_VAR 0 4
82939: PUSH
82940: LD_VAR 0 4
82944: PPUSH
82945: LD_VAR 0 4
82949: PUSH
82950: LD_INT 1
82952: PLUS
82953: PPUSH
82954: LD_VAR 0 5
82958: PUSH
82959: LD_VAR 0 6
82963: PUSH
82964: EMPTY
82965: LIST
82966: LIST
82967: PPUSH
82968: CALL_OW 1
82972: ST_TO_ADDR
// end ;
82973: GO 82897
82975: POP
82976: POP
82977: GO 82877
82979: POP
82980: POP
// end ;
82981: LD_VAR 0 4
82985: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82986: LD_INT 0
82988: PPUSH
82989: PPUSH
82990: PPUSH
82991: PPUSH
82992: PPUSH
82993: PPUSH
82994: PPUSH
82995: PPUSH
// if not units then
82996: LD_VAR 0 1
83000: NOT
83001: IFFALSE 83005
// exit ;
83003: GO 83529
// result := UnitFilter ( units , [ f_ok ] ) ;
83005: LD_ADDR_VAR 0 3
83009: PUSH
83010: LD_VAR 0 1
83014: PPUSH
83015: LD_INT 50
83017: PUSH
83018: EMPTY
83019: LIST
83020: PPUSH
83021: CALL_OW 72
83025: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83026: LD_ADDR_VAR 0 8
83030: PUSH
83031: LD_VAR 0 1
83035: PUSH
83036: LD_INT 1
83038: ARRAY
83039: PPUSH
83040: CALL_OW 255
83044: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83045: LD_ADDR_VAR 0 10
83049: PUSH
83050: LD_INT 29
83052: PUSH
83053: LD_INT 91
83055: PUSH
83056: LD_INT 49
83058: PUSH
83059: EMPTY
83060: LIST
83061: LIST
83062: LIST
83063: ST_TO_ADDR
// if not result then
83064: LD_VAR 0 3
83068: NOT
83069: IFFALSE 83073
// exit ;
83071: GO 83529
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83073: LD_ADDR_VAR 0 5
83077: PUSH
83078: LD_INT 81
83080: PUSH
83081: LD_VAR 0 8
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: PPUSH
83090: CALL_OW 69
83094: ST_TO_ADDR
// for i in result do
83095: LD_ADDR_VAR 0 4
83099: PUSH
83100: LD_VAR 0 3
83104: PUSH
83105: FOR_IN
83106: IFFALSE 83527
// begin tag := GetTag ( i ) + 1 ;
83108: LD_ADDR_VAR 0 9
83112: PUSH
83113: LD_VAR 0 4
83117: PPUSH
83118: CALL_OW 110
83122: PUSH
83123: LD_INT 1
83125: PLUS
83126: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83127: LD_ADDR_VAR 0 7
83131: PUSH
83132: LD_VAR 0 4
83136: PPUSH
83137: CALL_OW 250
83141: PPUSH
83142: LD_VAR 0 4
83146: PPUSH
83147: CALL_OW 251
83151: PPUSH
83152: LD_INT 6
83154: PPUSH
83155: CALL 82728 0 3
83159: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83160: LD_VAR 0 4
83164: PPUSH
83165: CALL_OW 247
83169: PUSH
83170: LD_INT 2
83172: EQUAL
83173: PUSH
83174: LD_VAR 0 7
83178: AND
83179: PUSH
83180: LD_VAR 0 4
83184: PPUSH
83185: CALL_OW 264
83189: PUSH
83190: LD_VAR 0 10
83194: IN
83195: NOT
83196: AND
83197: IFFALSE 83236
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83199: LD_VAR 0 4
83203: PPUSH
83204: LD_VAR 0 7
83208: PUSH
83209: LD_INT 1
83211: ARRAY
83212: PUSH
83213: LD_INT 1
83215: ARRAY
83216: PPUSH
83217: LD_VAR 0 7
83221: PUSH
83222: LD_INT 1
83224: ARRAY
83225: PUSH
83226: LD_INT 2
83228: ARRAY
83229: PPUSH
83230: CALL_OW 116
83234: GO 83525
// if path > tag then
83236: LD_VAR 0 2
83240: PUSH
83241: LD_VAR 0 9
83245: GREATER
83246: IFFALSE 83454
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83248: LD_ADDR_VAR 0 6
83252: PUSH
83253: LD_VAR 0 5
83257: PPUSH
83258: LD_INT 91
83260: PUSH
83261: LD_VAR 0 4
83265: PUSH
83266: LD_INT 8
83268: PUSH
83269: EMPTY
83270: LIST
83271: LIST
83272: LIST
83273: PPUSH
83274: CALL_OW 72
83278: ST_TO_ADDR
// if nearEnemy then
83279: LD_VAR 0 6
83283: IFFALSE 83352
// begin if GetWeapon ( i ) = ru_time_lapser then
83285: LD_VAR 0 4
83289: PPUSH
83290: CALL_OW 264
83294: PUSH
83295: LD_INT 49
83297: EQUAL
83298: IFFALSE 83326
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83300: LD_VAR 0 4
83304: PPUSH
83305: LD_VAR 0 6
83309: PPUSH
83310: LD_VAR 0 4
83314: PPUSH
83315: CALL_OW 74
83319: PPUSH
83320: CALL_OW 112
83324: GO 83350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83326: LD_VAR 0 4
83330: PPUSH
83331: LD_VAR 0 6
83335: PPUSH
83336: LD_VAR 0 4
83340: PPUSH
83341: CALL_OW 74
83345: PPUSH
83346: CALL 84600 0 2
// end else
83350: GO 83452
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83352: LD_VAR 0 4
83356: PPUSH
83357: LD_VAR 0 2
83361: PUSH
83362: LD_VAR 0 9
83366: ARRAY
83367: PUSH
83368: LD_INT 1
83370: ARRAY
83371: PPUSH
83372: LD_VAR 0 2
83376: PUSH
83377: LD_VAR 0 9
83381: ARRAY
83382: PUSH
83383: LD_INT 2
83385: ARRAY
83386: PPUSH
83387: CALL_OW 297
83391: PUSH
83392: LD_INT 6
83394: GREATER
83395: IFFALSE 83438
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83397: LD_VAR 0 4
83401: PPUSH
83402: LD_VAR 0 2
83406: PUSH
83407: LD_VAR 0 9
83411: ARRAY
83412: PUSH
83413: LD_INT 1
83415: ARRAY
83416: PPUSH
83417: LD_VAR 0 2
83421: PUSH
83422: LD_VAR 0 9
83426: ARRAY
83427: PUSH
83428: LD_INT 2
83430: ARRAY
83431: PPUSH
83432: CALL_OW 114
83436: GO 83452
// SetTag ( i , tag ) ;
83438: LD_VAR 0 4
83442: PPUSH
83443: LD_VAR 0 9
83447: PPUSH
83448: CALL_OW 109
// end else
83452: GO 83525
// if enemy then
83454: LD_VAR 0 5
83458: IFFALSE 83525
// begin if GetWeapon ( i ) = ru_time_lapser then
83460: LD_VAR 0 4
83464: PPUSH
83465: CALL_OW 264
83469: PUSH
83470: LD_INT 49
83472: EQUAL
83473: IFFALSE 83501
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83475: LD_VAR 0 4
83479: PPUSH
83480: LD_VAR 0 5
83484: PPUSH
83485: LD_VAR 0 4
83489: PPUSH
83490: CALL_OW 74
83494: PPUSH
83495: CALL_OW 112
83499: GO 83525
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83501: LD_VAR 0 4
83505: PPUSH
83506: LD_VAR 0 5
83510: PPUSH
83511: LD_VAR 0 4
83515: PPUSH
83516: CALL_OW 74
83520: PPUSH
83521: CALL 84600 0 2
// end ; end ;
83525: GO 83105
83527: POP
83528: POP
// end ;
83529: LD_VAR 0 3
83533: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83534: LD_INT 0
83536: PPUSH
83537: PPUSH
83538: PPUSH
// if not unit or IsInUnit ( unit ) then
83539: LD_VAR 0 1
83543: NOT
83544: PUSH
83545: LD_VAR 0 1
83549: PPUSH
83550: CALL_OW 310
83554: OR
83555: IFFALSE 83559
// exit ;
83557: GO 83650
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83559: LD_ADDR_VAR 0 4
83563: PUSH
83564: LD_VAR 0 1
83568: PPUSH
83569: CALL_OW 250
83573: PPUSH
83574: LD_VAR 0 2
83578: PPUSH
83579: LD_INT 1
83581: PPUSH
83582: CALL_OW 272
83586: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83587: LD_ADDR_VAR 0 5
83591: PUSH
83592: LD_VAR 0 1
83596: PPUSH
83597: CALL_OW 251
83601: PPUSH
83602: LD_VAR 0 2
83606: PPUSH
83607: LD_INT 1
83609: PPUSH
83610: CALL_OW 273
83614: ST_TO_ADDR
// if ValidHex ( x , y ) then
83615: LD_VAR 0 4
83619: PPUSH
83620: LD_VAR 0 5
83624: PPUSH
83625: CALL_OW 488
83629: IFFALSE 83650
// ComTurnXY ( unit , x , y ) ;
83631: LD_VAR 0 1
83635: PPUSH
83636: LD_VAR 0 4
83640: PPUSH
83641: LD_VAR 0 5
83645: PPUSH
83646: CALL_OW 118
// end ;
83650: LD_VAR 0 3
83654: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83655: LD_INT 0
83657: PPUSH
83658: PPUSH
// result := false ;
83659: LD_ADDR_VAR 0 3
83663: PUSH
83664: LD_INT 0
83666: ST_TO_ADDR
// if not units then
83667: LD_VAR 0 2
83671: NOT
83672: IFFALSE 83676
// exit ;
83674: GO 83721
// for i in units do
83676: LD_ADDR_VAR 0 4
83680: PUSH
83681: LD_VAR 0 2
83685: PUSH
83686: FOR_IN
83687: IFFALSE 83719
// if See ( side , i ) then
83689: LD_VAR 0 1
83693: PPUSH
83694: LD_VAR 0 4
83698: PPUSH
83699: CALL_OW 292
83703: IFFALSE 83717
// begin result := true ;
83705: LD_ADDR_VAR 0 3
83709: PUSH
83710: LD_INT 1
83712: ST_TO_ADDR
// exit ;
83713: POP
83714: POP
83715: GO 83721
// end ;
83717: GO 83686
83719: POP
83720: POP
// end ;
83721: LD_VAR 0 3
83725: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83726: LD_INT 0
83728: PPUSH
83729: PPUSH
83730: PPUSH
83731: PPUSH
// if not unit or not points then
83732: LD_VAR 0 1
83736: NOT
83737: PUSH
83738: LD_VAR 0 2
83742: NOT
83743: OR
83744: IFFALSE 83748
// exit ;
83746: GO 83838
// dist := 99999 ;
83748: LD_ADDR_VAR 0 5
83752: PUSH
83753: LD_INT 99999
83755: ST_TO_ADDR
// for i in points do
83756: LD_ADDR_VAR 0 4
83760: PUSH
83761: LD_VAR 0 2
83765: PUSH
83766: FOR_IN
83767: IFFALSE 83836
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83769: LD_ADDR_VAR 0 6
83773: PUSH
83774: LD_VAR 0 1
83778: PPUSH
83779: LD_VAR 0 4
83783: PUSH
83784: LD_INT 1
83786: ARRAY
83787: PPUSH
83788: LD_VAR 0 4
83792: PUSH
83793: LD_INT 2
83795: ARRAY
83796: PPUSH
83797: CALL_OW 297
83801: ST_TO_ADDR
// if tmpDist < dist then
83802: LD_VAR 0 6
83806: PUSH
83807: LD_VAR 0 5
83811: LESS
83812: IFFALSE 83834
// begin result := i ;
83814: LD_ADDR_VAR 0 3
83818: PUSH
83819: LD_VAR 0 4
83823: ST_TO_ADDR
// dist := tmpDist ;
83824: LD_ADDR_VAR 0 5
83828: PUSH
83829: LD_VAR 0 6
83833: ST_TO_ADDR
// end ; end ;
83834: GO 83766
83836: POP
83837: POP
// end ;
83838: LD_VAR 0 3
83842: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83843: LD_INT 0
83845: PPUSH
// uc_side := side ;
83846: LD_ADDR_OWVAR 20
83850: PUSH
83851: LD_VAR 0 1
83855: ST_TO_ADDR
// uc_nation := 3 ;
83856: LD_ADDR_OWVAR 21
83860: PUSH
83861: LD_INT 3
83863: ST_TO_ADDR
// vc_chassis := 25 ;
83864: LD_ADDR_OWVAR 37
83868: PUSH
83869: LD_INT 25
83871: ST_TO_ADDR
// vc_engine := engine_siberite ;
83872: LD_ADDR_OWVAR 39
83876: PUSH
83877: LD_INT 3
83879: ST_TO_ADDR
// vc_control := control_computer ;
83880: LD_ADDR_OWVAR 38
83884: PUSH
83885: LD_INT 3
83887: ST_TO_ADDR
// vc_weapon := 59 ;
83888: LD_ADDR_OWVAR 40
83892: PUSH
83893: LD_INT 59
83895: ST_TO_ADDR
// result := CreateVehicle ;
83896: LD_ADDR_VAR 0 5
83900: PUSH
83901: CALL_OW 45
83905: ST_TO_ADDR
// SetDir ( result , d ) ;
83906: LD_VAR 0 5
83910: PPUSH
83911: LD_VAR 0 4
83915: PPUSH
83916: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83920: LD_VAR 0 5
83924: PPUSH
83925: LD_VAR 0 2
83929: PPUSH
83930: LD_VAR 0 3
83934: PPUSH
83935: LD_INT 0
83937: PPUSH
83938: CALL_OW 48
// end ;
83942: LD_VAR 0 5
83946: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83947: LD_INT 0
83949: PPUSH
83950: PPUSH
83951: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83952: LD_ADDR_VAR 0 2
83956: PUSH
83957: LD_INT 0
83959: PUSH
83960: LD_INT 0
83962: PUSH
83963: LD_INT 0
83965: PUSH
83966: LD_INT 0
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: LIST
83973: LIST
83974: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83975: LD_VAR 0 1
83979: NOT
83980: PUSH
83981: LD_VAR 0 1
83985: PPUSH
83986: CALL_OW 264
83990: PUSH
83991: LD_INT 12
83993: PUSH
83994: LD_INT 51
83996: PUSH
83997: LD_INT 32
83999: PUSH
84000: LD_INT 89
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: LIST
84007: LIST
84008: IN
84009: NOT
84010: OR
84011: IFFALSE 84015
// exit ;
84013: GO 84113
// for i := 1 to 3 do
84015: LD_ADDR_VAR 0 3
84019: PUSH
84020: DOUBLE
84021: LD_INT 1
84023: DEC
84024: ST_TO_ADDR
84025: LD_INT 3
84027: PUSH
84028: FOR_TO
84029: IFFALSE 84111
// begin tmp := GetCargo ( cargo , i ) ;
84031: LD_ADDR_VAR 0 4
84035: PUSH
84036: LD_VAR 0 1
84040: PPUSH
84041: LD_VAR 0 3
84045: PPUSH
84046: CALL_OW 289
84050: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84051: LD_ADDR_VAR 0 2
84055: PUSH
84056: LD_VAR 0 2
84060: PPUSH
84061: LD_VAR 0 3
84065: PPUSH
84066: LD_VAR 0 4
84070: PPUSH
84071: CALL_OW 1
84075: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84076: LD_ADDR_VAR 0 2
84080: PUSH
84081: LD_VAR 0 2
84085: PPUSH
84086: LD_INT 4
84088: PPUSH
84089: LD_VAR 0 2
84093: PUSH
84094: LD_INT 4
84096: ARRAY
84097: PUSH
84098: LD_VAR 0 4
84102: PLUS
84103: PPUSH
84104: CALL_OW 1
84108: ST_TO_ADDR
// end ;
84109: GO 84028
84111: POP
84112: POP
// end ;
84113: LD_VAR 0 2
84117: RET
// export function Length ( array ) ; begin
84118: LD_INT 0
84120: PPUSH
// result := array + 0 ;
84121: LD_ADDR_VAR 0 2
84125: PUSH
84126: LD_VAR 0 1
84130: PUSH
84131: LD_INT 0
84133: PLUS
84134: ST_TO_ADDR
// end ;
84135: LD_VAR 0 2
84139: RET
// export function PrepareArray ( array ) ; begin
84140: LD_INT 0
84142: PPUSH
// result := array diff 0 ;
84143: LD_ADDR_VAR 0 2
84147: PUSH
84148: LD_VAR 0 1
84152: PUSH
84153: LD_INT 0
84155: DIFF
84156: ST_TO_ADDR
// if not result [ 1 ] then
84157: LD_VAR 0 2
84161: PUSH
84162: LD_INT 1
84164: ARRAY
84165: NOT
84166: IFFALSE 84186
// result := Delete ( result , 1 ) ;
84168: LD_ADDR_VAR 0 2
84172: PUSH
84173: LD_VAR 0 2
84177: PPUSH
84178: LD_INT 1
84180: PPUSH
84181: CALL_OW 3
84185: ST_TO_ADDR
// end ;
84186: LD_VAR 0 2
84190: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84191: LD_INT 0
84193: PPUSH
84194: PPUSH
84195: PPUSH
84196: PPUSH
// sibRocketRange := 25 ;
84197: LD_ADDR_VAR 0 6
84201: PUSH
84202: LD_INT 25
84204: ST_TO_ADDR
// result := false ;
84205: LD_ADDR_VAR 0 4
84209: PUSH
84210: LD_INT 0
84212: ST_TO_ADDR
// for i := 0 to 5 do
84213: LD_ADDR_VAR 0 5
84217: PUSH
84218: DOUBLE
84219: LD_INT 0
84221: DEC
84222: ST_TO_ADDR
84223: LD_INT 5
84225: PUSH
84226: FOR_TO
84227: IFFALSE 84294
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84229: LD_VAR 0 1
84233: PPUSH
84234: LD_VAR 0 5
84238: PPUSH
84239: LD_VAR 0 6
84243: PPUSH
84244: CALL_OW 272
84248: PPUSH
84249: LD_VAR 0 2
84253: PPUSH
84254: LD_VAR 0 5
84258: PPUSH
84259: LD_VAR 0 6
84263: PPUSH
84264: CALL_OW 273
84268: PPUSH
84269: LD_VAR 0 3
84273: PPUSH
84274: CALL_OW 309
84278: IFFALSE 84292
// begin result := true ;
84280: LD_ADDR_VAR 0 4
84284: PUSH
84285: LD_INT 1
84287: ST_TO_ADDR
// exit ;
84288: POP
84289: POP
84290: GO 84296
// end ;
84292: GO 84226
84294: POP
84295: POP
// end ;
84296: LD_VAR 0 4
84300: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84301: LD_INT 0
84303: PPUSH
84304: PPUSH
84305: PPUSH
// if btype = b_depot then
84306: LD_VAR 0 2
84310: PUSH
84311: LD_INT 0
84313: EQUAL
84314: IFFALSE 84326
// begin result := true ;
84316: LD_ADDR_VAR 0 3
84320: PUSH
84321: LD_INT 1
84323: ST_TO_ADDR
// exit ;
84324: GO 84442
// end ; pom := GetBase ( depot ) ;
84326: LD_ADDR_VAR 0 4
84330: PUSH
84331: LD_VAR 0 1
84335: PPUSH
84336: CALL_OW 274
84340: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84341: LD_ADDR_VAR 0 5
84345: PUSH
84346: LD_VAR 0 2
84350: PPUSH
84351: LD_VAR 0 1
84355: PPUSH
84356: CALL_OW 248
84360: PPUSH
84361: CALL_OW 450
84365: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84366: LD_ADDR_VAR 0 3
84370: PUSH
84371: LD_VAR 0 4
84375: PPUSH
84376: LD_INT 1
84378: PPUSH
84379: CALL_OW 275
84383: PUSH
84384: LD_VAR 0 5
84388: PUSH
84389: LD_INT 1
84391: ARRAY
84392: GREATEREQUAL
84393: PUSH
84394: LD_VAR 0 4
84398: PPUSH
84399: LD_INT 2
84401: PPUSH
84402: CALL_OW 275
84406: PUSH
84407: LD_VAR 0 5
84411: PUSH
84412: LD_INT 2
84414: ARRAY
84415: GREATEREQUAL
84416: AND
84417: PUSH
84418: LD_VAR 0 4
84422: PPUSH
84423: LD_INT 3
84425: PPUSH
84426: CALL_OW 275
84430: PUSH
84431: LD_VAR 0 5
84435: PUSH
84436: LD_INT 3
84438: ARRAY
84439: GREATEREQUAL
84440: AND
84441: ST_TO_ADDR
// end ;
84442: LD_VAR 0 3
84446: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84447: LD_INT 0
84449: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84450: LD_VAR 0 1
84454: PPUSH
84455: LD_VAR 0 2
84459: PPUSH
84460: LD_INT 0
84462: PPUSH
84463: LD_INT 0
84465: PPUSH
84466: LD_INT 1
84468: PPUSH
84469: LD_INT 0
84471: PPUSH
84472: CALL_OW 587
// end ;
84476: LD_VAR 0 3
84480: RET
// export function CenterOnNow ( unit ) ; begin
84481: LD_INT 0
84483: PPUSH
// result := IsInUnit ( unit ) ;
84484: LD_ADDR_VAR 0 2
84488: PUSH
84489: LD_VAR 0 1
84493: PPUSH
84494: CALL_OW 310
84498: ST_TO_ADDR
// if not result then
84499: LD_VAR 0 2
84503: NOT
84504: IFFALSE 84516
// result := unit ;
84506: LD_ADDR_VAR 0 2
84510: PUSH
84511: LD_VAR 0 1
84515: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84516: LD_VAR 0 1
84520: PPUSH
84521: CALL_OW 87
// end ;
84525: LD_VAR 0 2
84529: RET
// export function ComMoveHex ( unit , hex ) ; begin
84530: LD_INT 0
84532: PPUSH
// if not hex then
84533: LD_VAR 0 2
84537: NOT
84538: IFFALSE 84542
// exit ;
84540: GO 84595
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84542: LD_VAR 0 2
84546: PUSH
84547: LD_INT 1
84549: ARRAY
84550: PPUSH
84551: LD_VAR 0 2
84555: PUSH
84556: LD_INT 2
84558: ARRAY
84559: PPUSH
84560: CALL_OW 428
84564: IFFALSE 84568
// exit ;
84566: GO 84595
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84568: LD_VAR 0 1
84572: PPUSH
84573: LD_VAR 0 2
84577: PUSH
84578: LD_INT 1
84580: ARRAY
84581: PPUSH
84582: LD_VAR 0 2
84586: PUSH
84587: LD_INT 2
84589: ARRAY
84590: PPUSH
84591: CALL_OW 111
// end ;
84595: LD_VAR 0 3
84599: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84600: LD_INT 0
84602: PPUSH
84603: PPUSH
84604: PPUSH
// if not unit or not enemy then
84605: LD_VAR 0 1
84609: NOT
84610: PUSH
84611: LD_VAR 0 2
84615: NOT
84616: OR
84617: IFFALSE 84621
// exit ;
84619: GO 84745
// x := GetX ( enemy ) ;
84621: LD_ADDR_VAR 0 4
84625: PUSH
84626: LD_VAR 0 2
84630: PPUSH
84631: CALL_OW 250
84635: ST_TO_ADDR
// y := GetY ( enemy ) ;
84636: LD_ADDR_VAR 0 5
84640: PUSH
84641: LD_VAR 0 2
84645: PPUSH
84646: CALL_OW 251
84650: ST_TO_ADDR
// if ValidHex ( x , y ) then
84651: LD_VAR 0 4
84655: PPUSH
84656: LD_VAR 0 5
84660: PPUSH
84661: CALL_OW 488
84665: IFFALSE 84745
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84667: LD_VAR 0 2
84671: PPUSH
84672: CALL_OW 247
84676: PUSH
84677: LD_INT 3
84679: PUSH
84680: LD_INT 2
84682: PUSH
84683: EMPTY
84684: LIST
84685: LIST
84686: IN
84687: PUSH
84688: LD_VAR 0 1
84692: PPUSH
84693: CALL_OW 255
84697: PPUSH
84698: LD_VAR 0 2
84702: PPUSH
84703: CALL_OW 292
84707: OR
84708: IFFALSE 84726
// ComAttackUnit ( unit , enemy ) else
84710: LD_VAR 0 1
84714: PPUSH
84715: LD_VAR 0 2
84719: PPUSH
84720: CALL_OW 115
84724: GO 84745
// ComAgressiveMove ( unit , x , y ) ;
84726: LD_VAR 0 1
84730: PPUSH
84731: LD_VAR 0 4
84735: PPUSH
84736: LD_VAR 0 5
84740: PPUSH
84741: CALL_OW 114
// end ;
84745: LD_VAR 0 3
84749: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84750: LD_INT 0
84752: PPUSH
84753: PPUSH
84754: PPUSH
// list := AreaToList ( area , 0 ) ;
84755: LD_ADDR_VAR 0 5
84759: PUSH
84760: LD_VAR 0 1
84764: PPUSH
84765: LD_INT 0
84767: PPUSH
84768: CALL_OW 517
84772: ST_TO_ADDR
// if not list then
84773: LD_VAR 0 5
84777: NOT
84778: IFFALSE 84782
// exit ;
84780: GO 84912
// if all then
84782: LD_VAR 0 2
84786: IFFALSE 84874
// begin for i := 1 to list [ 1 ] do
84788: LD_ADDR_VAR 0 4
84792: PUSH
84793: DOUBLE
84794: LD_INT 1
84796: DEC
84797: ST_TO_ADDR
84798: LD_VAR 0 5
84802: PUSH
84803: LD_INT 1
84805: ARRAY
84806: PUSH
84807: FOR_TO
84808: IFFALSE 84870
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84810: LD_ADDR_VAR 0 3
84814: PUSH
84815: LD_VAR 0 3
84819: PPUSH
84820: LD_VAR 0 3
84824: PUSH
84825: LD_INT 1
84827: PLUS
84828: PPUSH
84829: LD_VAR 0 5
84833: PUSH
84834: LD_INT 1
84836: ARRAY
84837: PUSH
84838: LD_VAR 0 4
84842: ARRAY
84843: PUSH
84844: LD_VAR 0 5
84848: PUSH
84849: LD_INT 2
84851: ARRAY
84852: PUSH
84853: LD_VAR 0 4
84857: ARRAY
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: PPUSH
84863: CALL_OW 1
84867: ST_TO_ADDR
84868: GO 84807
84870: POP
84871: POP
// exit ;
84872: GO 84912
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84874: LD_ADDR_VAR 0 3
84878: PUSH
84879: LD_VAR 0 5
84883: PUSH
84884: LD_INT 1
84886: ARRAY
84887: PUSH
84888: LD_INT 1
84890: ARRAY
84891: PUSH
84892: LD_VAR 0 5
84896: PUSH
84897: LD_INT 2
84899: ARRAY
84900: PUSH
84901: LD_INT 1
84903: ARRAY
84904: PUSH
84905: EMPTY
84906: LIST
84907: LIST
84908: PUSH
84909: EMPTY
84910: LIST
84911: ST_TO_ADDR
// end ;
84912: LD_VAR 0 3
84916: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84917: LD_INT 0
84919: PPUSH
84920: PPUSH
// list := AreaToList ( area , 0 ) ;
84921: LD_ADDR_VAR 0 4
84925: PUSH
84926: LD_VAR 0 1
84930: PPUSH
84931: LD_INT 0
84933: PPUSH
84934: CALL_OW 517
84938: ST_TO_ADDR
// if not list then
84939: LD_VAR 0 4
84943: NOT
84944: IFFALSE 84948
// exit ;
84946: GO 84989
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84948: LD_ADDR_VAR 0 3
84952: PUSH
84953: LD_VAR 0 4
84957: PUSH
84958: LD_INT 1
84960: ARRAY
84961: PUSH
84962: LD_INT 1
84964: ARRAY
84965: PUSH
84966: LD_VAR 0 4
84970: PUSH
84971: LD_INT 2
84973: ARRAY
84974: PUSH
84975: LD_INT 1
84977: ARRAY
84978: PUSH
84979: LD_VAR 0 2
84983: PUSH
84984: EMPTY
84985: LIST
84986: LIST
84987: LIST
84988: ST_TO_ADDR
// end ;
84989: LD_VAR 0 3
84993: RET
// export function First ( array ) ; begin
84994: LD_INT 0
84996: PPUSH
// if not array then
84997: LD_VAR 0 1
85001: NOT
85002: IFFALSE 85006
// exit ;
85004: GO 85020
// result := array [ 1 ] ;
85006: LD_ADDR_VAR 0 2
85010: PUSH
85011: LD_VAR 0 1
85015: PUSH
85016: LD_INT 1
85018: ARRAY
85019: ST_TO_ADDR
// end ;
85020: LD_VAR 0 2
85024: RET
// export function Last ( array ) ; begin
85025: LD_INT 0
85027: PPUSH
// if not array then
85028: LD_VAR 0 1
85032: NOT
85033: IFFALSE 85037
// exit ;
85035: GO 85053
// result := array [ array ] ;
85037: LD_ADDR_VAR 0 2
85041: PUSH
85042: LD_VAR 0 1
85046: PUSH
85047: LD_VAR 0 1
85051: ARRAY
85052: ST_TO_ADDR
// end ;
85053: LD_VAR 0 2
85057: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85058: LD_INT 0
85060: PPUSH
85061: PPUSH
// result := [ ] ;
85062: LD_ADDR_VAR 0 5
85066: PUSH
85067: EMPTY
85068: ST_TO_ADDR
// if not array then
85069: LD_VAR 0 1
85073: NOT
85074: IFFALSE 85078
// exit ;
85076: GO 85190
// for i := 1 to array do
85078: LD_ADDR_VAR 0 6
85082: PUSH
85083: DOUBLE
85084: LD_INT 1
85086: DEC
85087: ST_TO_ADDR
85088: LD_VAR 0 1
85092: PUSH
85093: FOR_TO
85094: IFFALSE 85188
// if array [ i ] [ index ] = value then
85096: LD_VAR 0 1
85100: PUSH
85101: LD_VAR 0 6
85105: ARRAY
85106: PUSH
85107: LD_VAR 0 2
85111: ARRAY
85112: PUSH
85113: LD_VAR 0 3
85117: EQUAL
85118: IFFALSE 85186
// begin if indexColumn then
85120: LD_VAR 0 4
85124: IFFALSE 85160
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85126: LD_ADDR_VAR 0 5
85130: PUSH
85131: LD_VAR 0 5
85135: PPUSH
85136: LD_VAR 0 1
85140: PUSH
85141: LD_VAR 0 6
85145: ARRAY
85146: PUSH
85147: LD_VAR 0 4
85151: ARRAY
85152: PPUSH
85153: CALL 80382 0 2
85157: ST_TO_ADDR
85158: GO 85186
// result := Join ( result , array [ i ] ) ;
85160: LD_ADDR_VAR 0 5
85164: PUSH
85165: LD_VAR 0 5
85169: PPUSH
85170: LD_VAR 0 1
85174: PUSH
85175: LD_VAR 0 6
85179: ARRAY
85180: PPUSH
85181: CALL 80382 0 2
85185: ST_TO_ADDR
// end ;
85186: GO 85093
85188: POP
85189: POP
// end ;
85190: LD_VAR 0 5
85194: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85195: LD_INT 0
85197: PPUSH
// if not vehicles or not parkingPoint then
85198: LD_VAR 0 1
85202: NOT
85203: PUSH
85204: LD_VAR 0 2
85208: NOT
85209: OR
85210: IFFALSE 85214
// exit ;
85212: GO 85312
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85214: LD_ADDR_VAR 0 1
85218: PUSH
85219: LD_VAR 0 1
85223: PPUSH
85224: LD_INT 50
85226: PUSH
85227: EMPTY
85228: LIST
85229: PUSH
85230: LD_INT 3
85232: PUSH
85233: LD_INT 92
85235: PUSH
85236: LD_VAR 0 2
85240: PUSH
85241: LD_INT 1
85243: ARRAY
85244: PUSH
85245: LD_VAR 0 2
85249: PUSH
85250: LD_INT 2
85252: ARRAY
85253: PUSH
85254: LD_INT 8
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: LIST
85261: LIST
85262: PUSH
85263: EMPTY
85264: LIST
85265: LIST
85266: PUSH
85267: EMPTY
85268: LIST
85269: LIST
85270: PPUSH
85271: CALL_OW 72
85275: ST_TO_ADDR
// if not vehicles then
85276: LD_VAR 0 1
85280: NOT
85281: IFFALSE 85285
// exit ;
85283: GO 85312
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85285: LD_VAR 0 1
85289: PPUSH
85290: LD_VAR 0 2
85294: PUSH
85295: LD_INT 1
85297: ARRAY
85298: PPUSH
85299: LD_VAR 0 2
85303: PUSH
85304: LD_INT 2
85306: ARRAY
85307: PPUSH
85308: CALL_OW 111
// end ;
85312: LD_VAR 0 3
85316: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85317: LD_INT 0
85319: PPUSH
85320: PPUSH
85321: PPUSH
// if not side or not area then
85322: LD_VAR 0 1
85326: NOT
85327: PUSH
85328: LD_VAR 0 2
85332: NOT
85333: OR
85334: IFFALSE 85338
// exit ;
85336: GO 85457
// tmp := AreaToList ( area , 0 ) ;
85338: LD_ADDR_VAR 0 5
85342: PUSH
85343: LD_VAR 0 2
85347: PPUSH
85348: LD_INT 0
85350: PPUSH
85351: CALL_OW 517
85355: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85356: LD_ADDR_VAR 0 4
85360: PUSH
85361: DOUBLE
85362: LD_INT 1
85364: DEC
85365: ST_TO_ADDR
85366: LD_VAR 0 5
85370: PUSH
85371: LD_INT 1
85373: ARRAY
85374: PUSH
85375: FOR_TO
85376: IFFALSE 85455
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85378: LD_VAR 0 5
85382: PUSH
85383: LD_INT 1
85385: ARRAY
85386: PUSH
85387: LD_VAR 0 4
85391: ARRAY
85392: PPUSH
85393: LD_VAR 0 5
85397: PUSH
85398: LD_INT 2
85400: ARRAY
85401: PUSH
85402: LD_VAR 0 4
85406: ARRAY
85407: PPUSH
85408: CALL_OW 351
85412: IFFALSE 85453
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85414: LD_VAR 0 5
85418: PUSH
85419: LD_INT 1
85421: ARRAY
85422: PUSH
85423: LD_VAR 0 4
85427: ARRAY
85428: PPUSH
85429: LD_VAR 0 5
85433: PUSH
85434: LD_INT 2
85436: ARRAY
85437: PUSH
85438: LD_VAR 0 4
85442: ARRAY
85443: PPUSH
85444: LD_VAR 0 1
85448: PPUSH
85449: CALL_OW 244
// end ;
85453: GO 85375
85455: POP
85456: POP
// end ; end_of_file
85457: LD_VAR 0 3
85461: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85462: LD_VAR 0 1
85466: PUSH
85467: LD_INT 200
85469: DOUBLE
85470: GREATEREQUAL
85471: IFFALSE 85479
85473: LD_INT 299
85475: DOUBLE
85476: LESSEQUAL
85477: IFTRUE 85481
85479: GO 85513
85481: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85482: LD_VAR 0 1
85486: PPUSH
85487: LD_VAR 0 2
85491: PPUSH
85492: LD_VAR 0 3
85496: PPUSH
85497: LD_VAR 0 4
85501: PPUSH
85502: LD_VAR 0 5
85506: PPUSH
85507: CALL 38173 0 5
85511: GO 85590
85513: LD_INT 300
85515: DOUBLE
85516: GREATEREQUAL
85517: IFFALSE 85525
85519: LD_INT 399
85521: DOUBLE
85522: LESSEQUAL
85523: IFTRUE 85527
85525: GO 85589
85527: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85528: LD_VAR 0 1
85532: PPUSH
85533: LD_VAR 0 2
85537: PPUSH
85538: LD_VAR 0 3
85542: PPUSH
85543: LD_VAR 0 4
85547: PPUSH
85548: LD_VAR 0 5
85552: PPUSH
85553: LD_VAR 0 6
85557: PPUSH
85558: LD_VAR 0 7
85562: PPUSH
85563: LD_VAR 0 8
85567: PPUSH
85568: LD_VAR 0 9
85572: PPUSH
85573: LD_VAR 0 10
85577: PPUSH
85578: LD_VAR 0 11
85582: PPUSH
85583: CALL 34498 0 11
85587: GO 85590
85589: POP
// end ;
85590: PPOPN 11
85592: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85593: LD_VAR 0 1
85597: PPUSH
85598: LD_VAR 0 2
85602: PPUSH
85603: LD_VAR 0 3
85607: PPUSH
85608: LD_VAR 0 4
85612: PPUSH
85613: LD_VAR 0 5
85617: PPUSH
85618: CALL 37909 0 5
// end ; end_of_file
85622: PPOPN 5
85624: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85625: LD_VAR 0 1
85629: PPUSH
85630: LD_VAR 0 2
85634: PPUSH
85635: LD_VAR 0 3
85639: PPUSH
85640: LD_VAR 0 4
85644: PPUSH
85645: LD_VAR 0 5
85649: PPUSH
85650: LD_VAR 0 6
85654: PPUSH
85655: CALL 22150 0 6
// end ;
85659: PPOPN 6
85661: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85662: LD_INT 0
85664: PPUSH
// begin if not units then
85665: LD_VAR 0 1
85669: NOT
85670: IFFALSE 85674
// exit ;
85672: GO 85674
// end ;
85674: PPOPN 7
85676: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85677: CALL 22037 0 0
// end ;
85681: PPOPN 1
85683: END
