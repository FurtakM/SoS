// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 20493 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 10474 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 40159 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 40159 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 40159 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 40159 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 40159 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 40159 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 40159 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 40159 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 40159 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 40159 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 40159 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 77381 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 82
7407: PUSH
7408: LD_INT 83
7410: PUSH
7411: LD_INT 84
7413: PUSH
7414: LD_INT 85
7416: PUSH
7417: LD_INT 86
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// for i = 1 to list do
7459: LD_ADDR_VAR 0 5
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 7
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7547
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7477: LD_VAR 0 7
7481: PUSH
7482: LD_VAR 0 5
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 1
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_VAR 0 5
7511: ARRAY
7512: PPUSH
7513: LD_VAR 0 3
7517: PPUSH
7518: CALL_OW 482
7522: AND
7523: IFFALSE 7545
// AddComResearch ( lab , list [ i ] ) ;
7525: LD_VAR 0 2
7529: PPUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: CALL_OW 184
7545: GO 7474
7547: POP
7548: POP
// end ;
7549: LD_VAR 0 4
7553: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7554: LD_INT 0
7556: PPUSH
7557: PPUSH
7558: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_VAR 0 3
7594: LESSEQUAL
7595: IFFALSE 7703
// begin for i = 1 to vehCount do
7597: LD_ADDR_VAR 0 9
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_VAR 0 3
7611: PUSH
7612: FOR_TO
7613: IFFALSE 7701
// begin weapon := weaponTab [ i ] ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 9
7629: ARRAY
7630: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 46
7638: EQUAL
7639: IFFALSE 7670
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 24
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: LD_VAR 0 6
7658: PPUSH
7659: LD_VAR 0 10
7663: PPUSH
7664: CALL_OW 185
7668: GO 7699
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 7
7679: PPUSH
7680: LD_VAR 0 5
7684: PPUSH
7685: LD_VAR 0 6
7689: PPUSH
7690: LD_VAR 0 10
7694: PPUSH
7695: CALL_OW 185
// end ;
7699: GO 7612
7701: POP
7702: POP
// end ; end ;
7703: LD_VAR 0 8
7707: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7716: LD_ADDR_VAR 0 8
7720: PUSH
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL_OW 313
7730: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7731: LD_ADDR_VAR 0 9
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 24
7765: PUSH
7766: LD_INT 750
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 54
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7797: LD_ADDR_VAR 0 6
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: LD_INT 1000
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: PPUSH
7854: CALL_OW 70
7858: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7859: LD_VAR 0 6
7863: NOT
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: NOT
7907: AND
7908: IFFALSE 7912
// exit ;
7910: GO 8070
// if buildingsList and engineerOkInside then
7912: LD_VAR 0 6
7916: PUSH
7917: LD_VAR 0 8
7921: AND
7922: IFFALSE 7933
// ComExitBuilding ( engineerOkInside ) ;
7924: LD_VAR 0 8
7928: PPUSH
7929: CALL_OW 122
// if buildingsList and engineerOkOutside then
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 9
7942: AND
7943: IFFALSE 7963
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7945: LD_VAR 0 9
7949: PPUSH
7950: LD_VAR 0 6
7954: PUSH
7955: LD_INT 1
7957: ARRAY
7958: PPUSH
7959: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_INT 0
7970: EQUAL
7971: PUSH
7972: LD_VAR 0 4
7976: PUSH
7977: LD_INT 0
7979: EQUAL
7980: AND
7981: PUSH
7982: LD_VAR 0 9
7986: AND
7987: IFFALSE 8003
// ComEnterUnit ( engineerOkOutside , depot ) ;
7989: LD_VAR 0 9
7993: PPUSH
7994: LD_VAR 0 2
7998: PPUSH
7999: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8003: LD_VAR 0 9
8007: PUSH
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: EQUAL
8016: AND
8017: PUSH
8018: LD_VAR 0 4
8022: AND
8023: IFFALSE 8070
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8025: LD_VAR 0 9
8029: PPUSH
8030: LD_VAR 0 4
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_VAR 0 4
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: LD_VAR 0 4
8052: PUSH
8053: LD_INT 3
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 4
8064: ARRAY
8065: PPUSH
8066: CALL_OW 145
// end ;
8070: LD_VAR 0 5
8074: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
8084: PPUSH
8085: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8086: LD_ADDR_VAR 0 6
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_VAR 0 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: LD_INT 4
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 24
8125: PUSH
8126: LD_INT 251
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 23
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 25
8178: PUSH
8179: LD_INT 4
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 50
8188: PUSH
8189: EMPTY
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 70
8202: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8203: LD_ADDR_VAR 0 10
8207: PUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: LD_INT 24
8257: PUSH
8258: LD_INT 750
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8280: LD_ADDR_VAR 0 11
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 22
8292: PUSH
8293: LD_VAR 0 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 21
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 24
8334: PUSH
8335: LD_INT 1000
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8357: LD_VAR 0 10
8361: NOT
8362: PUSH
8363: LD_VAR 0 11
8367: NOT
8368: AND
8369: PUSH
8370: LD_VAR 0 6
8374: NOT
8375: AND
8376: IFFALSE 8380
// exit ;
8378: GO 8586
// if damageUnits and sci_list then
8380: LD_VAR 0 10
8384: PUSH
8385: LD_VAR 0 6
8389: AND
8390: IFFALSE 8406
// ComMoveToArea ( damageUnits , healArea ) ;
8392: LD_VAR 0 10
8396: PPUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 113
// if unitsToHeal and sci_list then
8406: LD_VAR 0 11
8410: PUSH
8411: LD_VAR 0 6
8415: AND
8416: IFFALSE 8427
// ComExitBuilding ( sci_list ) ;
8418: LD_VAR 0 6
8422: PPUSH
8423: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8427: LD_VAR 0 11
8431: PUSH
8432: LD_VAR 0 7
8436: AND
8437: IFFALSE 8457
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_VAR 0 11
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8457: LD_VAR 0 10
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: PUSH
8466: LD_VAR 0 11
8470: PUSH
8471: LD_INT 0
8473: EQUAL
8474: AND
8475: PUSH
8476: LD_VAR 0 7
8480: AND
8481: IFFALSE 8586
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8483: LD_ADDR_VAR 0 12
8487: PUSH
8488: LD_INT 22
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 30
8512: PUSH
8513: LD_INT 8
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8530: LD_ADDR_VAR 0 13
8534: PUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_VAR 0 12
8542: PPUSH
8543: CALL_OW 12
8547: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8548: LD_VAR 0 7
8552: PPUSH
8553: LD_INT 3
8555: PUSH
8556: LD_INT 60
8558: PUSH
8559: EMPTY
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 72
8570: PPUSH
8571: LD_VAR 0 12
8575: PUSH
8576: LD_VAR 0 13
8580: ARRAY
8581: PPUSH
8582: CALL_OW 120
// end ; end ;
8586: LD_VAR 0 5
8590: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
// tmp := [ ] ;
8598: LD_ADDR_VAR 0 6
8602: PUSH
8603: EMPTY
8604: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8605: LD_ADDR_VAR 0 7
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_VAR 0 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 69
8640: ST_TO_ADDR
// if bunkers then
8641: LD_VAR 0 7
8645: IFFALSE 8715
// for i in bunkers do
8647: LD_ADDR_VAR 0 4
8651: PUSH
8652: LD_VAR 0 7
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8713
// for j in UnitsInside ( i ) do
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: LD_VAR 0 4
8669: PPUSH
8670: CALL_OW 313
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8709
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8678: LD_ADDR_VAR 0 6
8682: PUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: LD_VAR 0 6
8692: PUSH
8693: LD_INT 1
8695: PLUS
8696: PPUSH
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL_OW 1
8706: ST_TO_ADDR
8707: GO 8675
8709: POP
8710: POP
8711: GO 8657
8713: POP
8714: POP
// if tmp then
8715: LD_VAR 0 6
8719: IFFALSE 8759
// begin ComExitBuilding ( tmp ) ;
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8730: LD_VAR 0 6
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 250
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 251
8754: PPUSH
8755: CALL_OW 174
// end ; end ;
8759: LD_VAR 0 3
8763: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
// enable ;
8769: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8770: LD_ADDR_VAR 0 6
8774: PUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: CALL_OW 435
8784: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8785: LD_ADDR_VAR 0 5
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: LD_VAR 0 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 3
8832: PPUSH
8833: CALL_OW 435
8837: AND
8838: PUSH
8839: LD_VAR 0 6
8843: AND
8844: IFFALSE 8877
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8846: LD_VAR 0 5
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_INT 2
8871: ARRAY
8872: PPUSH
8873: CALL_OW 177
// end ;
8877: LD_VAR 0 4
8881: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 56
8916: PUSH
8917: EMPTY
8918: LIST
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 700
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 60
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL_OW 70
9004: PUSH
9005: LD_EXP 47
9009: PUSH
9010: LD_EXP 48
9014: UNION
9015: DIFF
9016: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_INT 22
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 58
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: LD_INT 24
9057: PUSH
9058: LD_INT 251
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 70
9075: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 30
9113: PUSH
9114: LD_INT 5
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 24
9128: PUSH
9129: LD_INT 251
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 70
9145: ST_TO_ADDR
// if barrackList then
9146: LD_VAR 0 9
9150: IFFALSE 9306
// begin if turretList = 0 then
9152: LD_VAR 0 7
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9198
// begin if soldiersList then
9162: LD_VAR 0 6
9166: IFFALSE 9196
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9168: LD_VAR 0 6
9172: PPUSH
9173: LD_VAR 0 9
9177: PUSH
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 9
9185: PPUSH
9186: CALL_OW 12
9190: ARRAY
9191: PPUSH
9192: CALL_OW 120
// end else
9196: GO 9306
// begin for i in barrackList do
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: FOR_IN
9209: IFFALSE 9304
// begin if not turretList then
9211: LD_VAR 0 7
9215: NOT
9216: IFFALSE 9222
// exit ;
9218: POP
9219: POP
9220: GO 9306
// insideUnits = UnitsInside ( i ) ;
9222: LD_ADDR_VAR 0 10
9226: PUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 313
9236: ST_TO_ADDR
// if insideUnits then
9237: LD_VAR 0 10
9241: IFFALSE 9302
// begin tmp := insideUnits [ 1 ] ;
9243: LD_ADDR_VAR 0 8
9247: PUSH
9248: LD_VAR 0 10
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9257: LD_VAR 0 8
9261: PPUSH
9262: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9266: LD_VAR 0 8
9270: PPUSH
9271: LD_VAR 0 7
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9284: LD_ADDR_VAR 0 7
9288: PUSH
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 3
9301: ST_TO_ADDR
// end ; end ;
9302: GO 9208
9304: POP
9305: POP
// end ; end ; end ;
9306: LD_VAR 0 3
9310: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9319: LD_ADDR_VAR 0 8
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 52
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: ST_TO_ADDR
// if not craneList then
9366: LD_VAR 0 8
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9809
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9375: LD_ADDR_VAR 0 9
9379: PUSH
9380: LD_INT 22
9382: PUSH
9383: LD_VAR 0 1
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 1000
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9432: LD_VAR 0 9
9436: PUSH
9437: LD_VAR 0 8
9441: PPUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 750
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: AND
9457: IFFALSE 9492
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: LD_INT 24
9466: PUSH
9467: LD_INT 750
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 72
9478: PPUSH
9479: LD_VAR 0 9
9483: PUSH
9484: LD_INT 1
9486: ARRAY
9487: PPUSH
9488: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_INT 3
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 750
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: IFFALSE 9556
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: PPUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9556: LD_VAR 0 8
9560: PUSH
9561: LD_VAR 0 9
9565: PUSH
9566: LD_INT 0
9568: EQUAL
9569: AND
9570: PUSH
9571: LD_VAR 0 3
9575: AND
9576: IFFALSE 9623
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9578: LD_VAR 0 8
9582: PPUSH
9583: LD_VAR 0 3
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 3
9596: PUSH
9597: LD_INT 2
9599: ARRAY
9600: PPUSH
9601: LD_VAR 0 3
9605: PUSH
9606: LD_INT 3
9608: ARRAY
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_INT 4
9617: ARRAY
9618: PPUSH
9619: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9623: LD_ADDR_VAR 0 7
9627: PUSH
9628: LD_VAR 0 2
9632: PPUSH
9633: LD_INT 22
9635: PUSH
9636: LD_VAR 0 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 52
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 24
9670: PUSH
9671: LD_INT 750
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 70
9692: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 2
9702: PPUSH
9703: LD_INT 22
9705: PUSH
9706: LD_VAR 0 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 0
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 70
9751: ST_TO_ADDR
// if crane then
9752: LD_VAR 0 7
9756: IFFALSE 9809
// for i in crane do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 7
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9807
// begin if dep then
9771: LD_VAR 0 6
9775: IFFALSE 9791
// ComMoveUnit ( i , dep ) ;
9777: LD_VAR 0 5
9781: PPUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9791: LD_VAR 0 5
9795: PPUSH
9796: CALL_OW 311
9800: PPUSH
9801: CALL 78805 0 1
// end ;
9805: GO 9768
9807: POP
9808: POP
// end ;
9809: LD_VAR 0 4
9813: RET
// export function BuildBulldozer ; begin
9814: LD_INT 0
9816: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9817: LD_INT 17
9819: PPUSH
9820: CALL_OW 302
9824: NOT
9825: PUSH
9826: LD_INT 17
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 3
9836: NONEQUAL
9837: OR
9838: IFFALSE 9842
// exit ;
9840: GO 9861
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9842: LD_INT 17
9844: PPUSH
9845: LD_INT 24
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_INT 53
9856: PPUSH
9857: CALL_OW 185
// end ;
9861: LD_VAR 0 1
9865: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9866: LD_INT 0
9868: PPUSH
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
// if not bulldozer then
9873: LD_VAR 0 1
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10164
// list := ListEnvironmentArea ( area ) ;
9882: LD_ADDR_VAR 0 5
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 353
9896: ST_TO_ADDR
// tmp := [ ] ;
9897: LD_ADDR_VAR 0 6
9901: PUSH
9902: EMPTY
9903: ST_TO_ADDR
// for i = 1 to list do
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_VAR 0 5
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10018
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9922: LD_VAR 0 5
9926: PUSH
9927: LD_VAR 0 4
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 5
9941: PUSH
9942: LD_VAR 0 4
9946: ARRAY
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: CALL_OW 554
9956: IFFALSE 10016
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
9958: LD_ADDR_VAR 0 6
9962: PUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: LD_VAR 0 6
9972: PUSH
9973: LD_INT 1
9975: PLUS
9976: PPUSH
9977: LD_VAR 0 5
9981: PUSH
9982: LD_VAR 0 4
9986: ARRAY
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PUSH
9992: LD_VAR 0 5
9996: PUSH
9997: LD_VAR 0 4
10001: ARRAY
10002: PUSH
10003: LD_INT 2
10005: ARRAY
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// end ;
10016: GO 9919
10018: POP
10019: POP
// ComStop ( bulldozer ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// for i = tmp downto 1 do
10058: LD_ADDR_VAR 0 4
10062: PUSH
10063: DOUBLE
10064: LD_VAR 0 6
10068: INC
10069: ST_TO_ADDR
10070: LD_INT 1
10072: PUSH
10073: FOR_DOWNTO
10074: IFFALSE 10162
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10076: LD_ADDR_VAR 0 7
10080: PUSH
10081: LD_VAR 0 7
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 7
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL 10265 0 3
10108: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 7
10118: PUSH
10119: LD_INT 1
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 7
10127: PUSH
10128: LD_INT 2
10130: ARRAY
10131: PPUSH
10132: CALL 10169 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10136: LD_ADDR_VAR 0 6
10140: PUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PUSH
10151: LD_INT 3
10153: ARRAY
10154: PPUSH
10155: CALL_OW 3
10159: ST_TO_ADDR
// end ;
10160: GO 10073
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 3
10168: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10169: LD_INT 0
10171: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: CALL_OW 351
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: CALL_OW 554
10201: AND
10202: PUSH
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: CALL_OW 488
10217: AND
10218: PUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: CALL_OW 428
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: EQUAL
10238: AND
10239: IFFALSE 10260
// AddComMoveXY ( bulldozer , x , y ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: CALL_OW 171
// end ;
10260: LD_VAR 0 4
10264: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// dist := 99999 ;
10274: LD_ADDR_VAR 0 6
10278: PUSH
10279: LD_INT 99999
10281: ST_TO_ADDR
// for i = 1 to list do
10282: LD_ADDR_VAR 0 5
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_VAR 0 3
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10436
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10300: LD_ADDR_VAR 0 7
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 5
10324: ARRAY
10325: PUSH
10326: LD_INT 1
10328: ARRAY
10329: PPUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_VAR 0 5
10339: ARRAY
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: CALL_OW 298
10349: ST_TO_ADDR
// if d = 0 then
10350: LD_VAR 0 7
10354: PUSH
10355: LD_INT 0
10357: EQUAL
10358: IFFALSE 10362
// continue ;
10360: GO 10297
// if d < dist then
10362: LD_VAR 0 7
10366: PUSH
10367: LD_VAR 0 6
10371: LESS
10372: IFFALSE 10434
// begin _x := list [ i ] [ 1 ] ;
10374: LD_ADDR_VAR 0 8
10378: PUSH
10379: LD_VAR 0 3
10383: PUSH
10384: LD_VAR 0 5
10388: ARRAY
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10394: LD_ADDR_VAR 0 9
10398: PUSH
10399: LD_VAR 0 3
10403: PUSH
10404: LD_VAR 0 5
10408: ARRAY
10409: PUSH
10410: LD_INT 2
10412: ARRAY
10413: ST_TO_ADDR
// _i := i ;
10414: LD_ADDR_VAR 0 10
10418: PUSH
10419: LD_VAR 0 5
10423: ST_TO_ADDR
// dist := d ;
10424: LD_ADDR_VAR 0 6
10428: PUSH
10429: LD_VAR 0 7
10433: ST_TO_ADDR
// end ; end ;
10434: GO 10297
10436: POP
10437: POP
// result := [ _x , _y , _i , dist ] ;
10438: LD_ADDR_VAR 0 4
10442: PUSH
10443: LD_VAR 0 8
10447: PUSH
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 10
10457: PUSH
10458: LD_VAR 0 6
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// end ; end_of_file
10469: LD_VAR 0 4
10473: RET
// export function Action ; begin
10474: LD_INT 0
10476: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10477: LD_INT 66
10479: PPUSH
10480: LD_INT 4
10482: PPUSH
10483: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10487: LD_INT 22
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: PUSH
10516: LD_INT 0
10518: EQUAL
10519: IFFALSE 10533
// SetClass ( JMM , 2 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_INT 2
10528: PPUSH
10529: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10533: LD_STRING M1
10535: PPUSH
10536: CALL_OW 337
// case Difficulty of 1 :
10540: LD_OWVAR 67
10544: PUSH
10545: LD_INT 1
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10563
10553: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10554: LD_STRING M1-1
10556: PPUSH
10557: CALL_OW 337
10561: GO 10606
10563: LD_INT 2
10565: DOUBLE
10566: EQUAL
10567: IFTRUE 10571
10569: GO 10581
10571: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10572: LD_STRING M1-2
10574: PPUSH
10575: CALL_OW 337
10579: GO 10606
10581: LD_INT 3
10583: DOUBLE
10584: GREATEREQUAL
10585: IFFALSE 10593
10587: LD_INT 4
10589: DOUBLE
10590: LESSEQUAL
10591: IFTRUE 10595
10593: GO 10605
10595: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10596: LD_STRING M1-3
10598: PPUSH
10599: CALL_OW 337
10603: GO 10606
10605: POP
// ChangeMissionObjectives ( M1cont ) ;
10606: LD_STRING M1cont
10608: PPUSH
10609: CALL_OW 337
// SaveForQuickRestart ;
10613: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10617: LD_INT 525
10619: PPUSH
10620: LD_INT 700
10622: PPUSH
10623: CALL_OW 12
10627: PPUSH
10628: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10632: LD_INT 5
10634: PPUSH
10635: LD_INT 82
10637: PPUSH
10638: LD_INT 38
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 56
// wait ( 0 0$14 ) ;
10651: LD_INT 490
10653: PPUSH
10654: CALL_OW 67
// firstCrateSpawn := true ;
10658: LD_ADDR_EXP 40
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// end ;
10666: LD_VAR 0 1
10670: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10671: LD_EXP 40
10675: IFFALSE 11064
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
// begin if IsOk ( Lisa ) then
10683: LD_EXP 2
10687: PPUSH
10688: CALL_OW 302
10692: IFFALSE 10708
// Say ( Lisa , DR0-Lisa-1 ) else
10694: LD_EXP 2
10698: PPUSH
10699: LD_STRING DR0-Lisa-1
10701: PPUSH
10702: CALL_OW 88
10706: GO 10854
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10708: LD_INT 22
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PUSH
10799: LD_EXP 1
10803: PUSH
10804: LD_EXP 8
10808: PUSH
10809: LD_EXP 5
10813: PUSH
10814: LD_EXP 6
10818: PUSH
10819: LD_EXP 7
10823: PUSH
10824: LD_EXP 4
10828: PUSH
10829: LD_EXP 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: DIFF
10843: PPUSH
10844: LD_STRING DR0-Sol1-1
10846: PPUSH
10847: LD_STRING DR0-Sol1-1
10849: PPUSH
10850: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PPUSH
10945: CALL_OW 69
10949: PUSH
10950: LD_EXP 1
10954: PUSH
10955: LD_EXP 8
10959: PUSH
10960: LD_EXP 5
10964: PUSH
10965: LD_EXP 2
10969: PUSH
10970: LD_EXP 6
10974: PUSH
10975: LD_EXP 7
10979: PUSH
10980: LD_EXP 4
10984: PUSH
10985: LD_EXP 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: DIFF
11000: PPUSH
11001: LD_STRING DR0-Sol2-1
11003: PPUSH
11004: LD_STRING DR0-Sol2-1
11006: PPUSH
11007: CALL 6771 0 3
11011: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11012: LD_EXP 4
11016: PPUSH
11017: CALL_OW 302
11021: IFFALSE 11035
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11023: LD_EXP 4
11027: PPUSH
11028: LD_STRING DR0-Cyrus-1
11030: PPUSH
11031: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11035: LD_EXP 2
11039: PPUSH
11040: CALL_OW 302
11044: PUSH
11045: LD_VAR 0 1
11049: OR
11050: IFFALSE 11064
// Say ( JMM , DR0-JMM-1 ) ;
11052: LD_EXP 1
11056: PPUSH
11057: LD_STRING DR0-JMM-1
11059: PPUSH
11060: CALL_OW 88
// end ;
11064: PPOPN 1
11066: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11067: LD_EXP 5
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: LD_INT 0
11108: GREATER
11109: AND
11110: PUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 463
11118: NOT
11119: AND
11120: IFFALSE 11398
11122: GO 11124
11124: DISABLE
// begin DialogueOn ;
11125: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11129: LD_EXP 5
11133: PPUSH
11134: LD_STRING D10-Frank-1
11136: PPUSH
11137: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11141: LD_INT 22
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 25
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 4
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: PUSH
11221: LD_EXP 1
11225: PUSH
11226: LD_EXP 5
11230: PUSH
11231: LD_EXP 2
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: DIFF
11241: PPUSH
11242: LD_STRING D10-Sol1-1
11244: PPUSH
11245: LD_STRING D10-FSol1-1
11247: PPUSH
11248: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
11252: LD_EXP 5
11256: PPUSH
11257: LD_STRING D10-Frank-2
11259: PPUSH
11260: CALL_OW 88
// if IsOk ( Lisa ) then
11264: LD_EXP 2
11268: PPUSH
11269: CALL_OW 302
11273: IFFALSE 11289
// Say ( Lisa , D10-Lisa-2 ) else
11275: LD_EXP 2
11279: PPUSH
11280: LD_STRING D10-Lisa-2
11282: PPUSH
11283: CALL_OW 88
11287: GO 11394
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11289: LD_INT 22
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 21
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 25
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 4
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: LD_EXP 1
11373: PUSH
11374: LD_EXP 5
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: DIFF
11383: PPUSH
11384: LD_STRING D10-Sol1-2
11386: PPUSH
11387: LD_STRING D10-FSol1-2
11389: PPUSH
11390: CALL 6771 0 3
// DialogueOff ;
11394: CALL_OW 7
// end ;
11398: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 463
11406: NOT
11407: IFFALSE 11690
11409: GO 11411
11411: DISABLE
// begin HarrisonSupport ;
11412: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11416: LD_EXP 17
11420: PPUSH
11421: CALL_OW 310
11425: PPUSH
11426: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11430: LD_EXP 17
11434: PPUSH
11435: LD_STRING DEng-Eng1-1
11437: PPUSH
11438: CALL_OW 88
// wait ( 1 1$0 ) ;
11442: LD_INT 2100
11444: PPUSH
11445: CALL_OW 67
// DialogueOn ;
11449: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11453: LD_EXP 14
11457: PPUSH
11458: LD_STRING DRem-Har-1
11460: PPUSH
11461: CALL_OW 94
// if contactWithRussian then
11465: LD_EXP 22
11469: IFFALSE 11485
// Say ( JMM , DRem-JMM-1 ) else
11471: LD_EXP 1
11475: PPUSH
11476: LD_STRING DRem-JMM-1
11478: PPUSH
11479: CALL_OW 88
11483: GO 11497
// Say ( JMM , DRem-JMM-1a ) ;
11485: LD_EXP 1
11489: PPUSH
11490: LD_STRING DRem-JMM-1a
11492: PPUSH
11493: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11497: LD_EXP 14
11501: PPUSH
11502: LD_STRING DRem-Har-2
11504: PPUSH
11505: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11509: LD_STRING DenisInDelta
11511: PPUSH
11512: LD_INT 0
11514: PPUSH
11515: CALL_OW 30
11519: IFFALSE 11535
// Say ( JMM , DRem-JMM-2 ) else
11521: LD_EXP 1
11525: PPUSH
11526: LD_STRING DRem-JMM-2
11528: PPUSH
11529: CALL_OW 88
11533: GO 11547
// Say ( JMM , DRem-JMM-2a ) ;
11535: LD_EXP 1
11539: PPUSH
11540: LD_STRING DRem-JMM-2a
11542: PPUSH
11543: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11547: LD_EXP 14
11551: PPUSH
11552: LD_STRING DRem-Har-3
11554: PPUSH
11555: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DRem-JMM-3
11566: PPUSH
11567: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11571: LD_EXP 14
11575: PPUSH
11576: LD_STRING DRem-Har-4
11578: PPUSH
11579: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11583: LD_STRING DenisInDelta
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 30
11593: IFFALSE 11653
// begin Say ( JMM , DRem-JMM-4 ) ;
11595: LD_EXP 1
11599: PPUSH
11600: LD_STRING DRem-JMM-4
11602: PPUSH
11603: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11607: LD_EXP 14
11611: PPUSH
11612: LD_STRING DRem-Har-5
11614: PPUSH
11615: CALL_OW 94
// DialogueOff ;
11619: CALL_OW 7
// wait ( 4 4$00 ) ;
11623: LD_INT 8400
11625: PPUSH
11626: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// until not InBattle ( 1 ) ;
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 463
11644: NOT
11645: IFFALSE 11630
// SpawnDenis ;
11647: CALL 11691 0 0
// end else
11651: GO 11690
// begin DialogueOff ;
11653: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11657: LD_INT 36
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11670: LD_INT 15
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11683: LD_STRING MR
11685: PPUSH
11686: CALL_OW 337
// end ; end ;
11690: END
// export function SpawnDenis ; var tmp ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// PrepareDenis ;
11695: CALL 2199 0 0
// if not Denis then
11699: LD_EXP 9
11703: NOT
11704: IFFALSE 11708
// exit ;
11706: GO 11929
// CenterNowOnUnits ( Denis ) ;
11708: LD_EXP 9
11712: PPUSH
11713: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 69
11736: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11737: LD_EXP 9
11741: PPUSH
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_EXP 9
11751: PPUSH
11752: CALL_OW 74
11756: PPUSH
11757: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11761: LD_INT 35
11763: PPUSH
11764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11768: LD_INT 22
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 91
11780: PUSH
11781: LD_EXP 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: IFFALSE 11761
// SetSide ( Denis , 1 ) ;
11804: LD_EXP 9
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 235
// DialogueOn ;
11816: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11820: LD_EXP 9
11824: PPUSH
11825: LD_STRING DDen-Den-1
11827: PPUSH
11828: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11832: LD_EXP 1
11836: PPUSH
11837: LD_STRING DDen-JMM-1
11839: PPUSH
11840: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11844: LD_EXP 9
11848: PPUSH
11849: LD_STRING DDen-Den-2
11851: PPUSH
11852: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING DDen-JMM-2
11863: PPUSH
11864: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11868: LD_EXP 9
11872: PPUSH
11873: LD_STRING DDen-Den-3
11875: PPUSH
11876: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11880: LD_EXP 1
11884: PPUSH
11885: LD_STRING DDen-JMM-3
11887: PPUSH
11888: CALL_OW 88
// DialogueOff ;
11892: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11896: LD_INT 36
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11909: LD_INT 15
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11922: LD_STRING MR
11924: PPUSH
11925: CALL_OW 337
// end ;
11929: LD_VAR 0 1
11933: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 30
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_EXP 9
11967: PPUSH
11968: CALL_OW 302
11972: AND
11973: PUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 463
11981: NOT
11982: AND
11983: IFFALSE 12012
11985: GO 11987
11987: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11988: LD_EXP 9
11992: PPUSH
11993: LD_STRING DR1-Den-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_STRING DR1-JMM-1
12007: PPUSH
12008: CALL_OW 88
// end ;
12012: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12013: LD_INT 15
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 321
12023: PUSH
12024: LD_INT 2
12026: EQUAL
12027: PUSH
12028: LD_EXP 9
12032: PPUSH
12033: CALL_OW 302
12037: AND
12038: PUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 463
12046: NOT
12047: AND
12048: IFFALSE 12280
12050: GO 12052
12052: DISABLE
// begin DialogueOn ;
12053: CALL_OW 6
// if IsOK ( Denis ) then
12057: LD_EXP 9
12061: PPUSH
12062: CALL_OW 302
12066: IFFALSE 12082
// Say ( Denis , DR2-Den-1 ) else
12068: LD_EXP 9
12072: PPUSH
12073: LD_STRING DR2-Den-1
12075: PPUSH
12076: CALL_OW 88
12080: GO 12141
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12082: LD_INT 22
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: PUSH
12122: LD_EXP 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: DIFF
12130: PPUSH
12131: LD_STRING DR2-Sci1-1
12133: PPUSH
12134: LD_STRING DR2-FSci1-1
12136: PPUSH
12137: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DR2-JMM-1
12148: PPUSH
12149: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12153: LD_INT 22
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 25
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 3
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 25
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: PUSH
12233: LD_EXP 1
12237: PUSH
12238: LD_EXP 9
12242: PUSH
12243: LD_EXP 8
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: DIFF
12253: PPUSH
12254: LD_STRING DR2-Sol1-1
12256: PPUSH
12257: LD_STRING DR2-Sol1-11
12259: PPUSH
12260: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DR2-JMM-2
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// end ;
12280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 36
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: PUSH
12310: LD_INT 0
12312: EQUAL
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: PUSH
12354: LD_INT 0
12356: GREATER
12357: AND
12358: PUSH
12359: LD_EXP 23
12363: PUSH
12364: LD_INT 0
12366: EQUAL
12367: AND
12368: PUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 463
12376: NOT
12377: AND
12378: IFFALSE 12515
12380: GO 12382
12382: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12383: LD_INT 22
12385: PUSH
12386: LD_INT 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 3
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_EXP 1
12438: PUSH
12439: LD_EXP 6
12443: PUSH
12444: LD_EXP 7
12448: PUSH
12449: LD_EXP 9
12453: PUSH
12454: LD_EXP 15
12458: PUSH
12459: LD_EXP 3
12463: PUSH
12464: LD_EXP 4
12468: PUSH
12469: LD_EXP 2
12473: PUSH
12474: LD_EXP 5
12478: PUSH
12479: LD_EXP 8
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: DIFF
12496: PPUSH
12497: LD_STRING D3a-Mech1-1
12499: PPUSH
12500: LD_STRING D3a-Mech1-1
12502: PPUSH
12503: CALL 6771 0 3
// firstTower = 2 ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_INT 2
12514: ST_TO_ADDR
// end ;
12515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12516: LD_INT 22
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PUSH
12545: LD_INT 0
12547: EQUAL
12548: IFFALSE 12679
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
// begin stop_talking := true ;
12556: LD_ADDR_OWVAR 56
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12564: LD_ADDR_VAR 0 1
12568: PUSH
12569: LD_INT 22
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 25
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: FOR_IN
12650: IFFALSE 12669
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_INT 7500
12662: PPUSH
12663: CALL_OW 591
12667: GO 12649
12669: POP
12670: POP
// stop_talking := false ;
12671: LD_ADDR_OWVAR 56
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// end ;
12679: PPOPN 1
12681: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12682: LD_INT 22
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 36
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: PUSH
12711: LD_INT 22
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 33
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: AND
12751: PUSH
12752: CALL 13304 0 0
12756: AND
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 463
12765: NOT
12766: AND
12767: IFFALSE 13301
12769: GO 12771
12771: DISABLE
12772: LD_INT 0
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 30
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 33
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12858: LD_ADDR_VAR 0 5
12862: PUSH
12863: EMPTY
12864: ST_TO_ADDR
// for i in tmpControlTowers do
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: FOR_IN
12876: IFFALSE 13299
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12878: LD_EXP 1
12882: PPUSH
12883: CALL_OW 310
12887: PUSH
12888: LD_VAR 0 1
12892: EQUAL
12893: PUSH
12894: LD_EXP 1
12898: PPUSH
12899: CALL_OW 257
12903: PUSH
12904: LD_INT 3
12906: EQUAL
12907: AND
12908: IFFALSE 13042
// begin InGameOn ;
12910: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12914: LD_VAR 0 4
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12927: LD_EXP 1
12931: PPUSH
12932: LD_STRING D4a-JMM-1
12934: PPUSH
12935: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12939: LD_VAR 0 4
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: LD_EXP 1
12952: PPUSH
12953: CALL_OW 53
// wait ( 0 0$1 ) ;
12957: LD_INT 35
12959: PPUSH
12960: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12964: LD_VAR 0 4
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 4
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 250
12986: PUSH
12987: LD_INT 3
12989: PLUS
12990: PPUSH
12991: LD_VAR 0 4
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: CALL_OW 251
13004: PUSH
13005: LD_INT 2
13007: MINUS
13008: PPUSH
13009: CALL_OW 111
// wait ( 0 0$2 ) ;
13013: LD_INT 70
13015: PPUSH
13016: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING D4b-JMM-1
13027: PPUSH
13028: CALL_OW 88
// InGameOff ;
13032: CALL_OW 9
// exit ;
13036: POP
13037: POP
13038: GO 13301
// end else
13040: GO 13297
// begin InGameOn ;
13042: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13046: LD_ADDR_VAR 0 5
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 313
13060: PPUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 72
13075: ST_TO_ADDR
// if not tmpMechanicInside then
13076: LD_VAR 0 5
13080: NOT
13081: IFFALSE 13085
// continue ;
13083: GO 12875
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13085: LD_VAR 0 5
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: CALL_OW 258
13098: PUSH
13099: LD_INT 1
13101: EQUAL
13102: IFFALSE 13122
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13104: LD_VAR 0 5
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: LD_STRING D4a-Mech1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13138
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13122: LD_VAR 0 5
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: LD_STRING D4a-FMech1-1
13133: PPUSH
13134: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13138: LD_VAR 0 4
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13151: LD_VAR 0 4
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PPUSH
13160: LD_VAR 0 5
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 53
// wait ( 0 0$1 ) ;
13173: LD_INT 35
13175: PPUSH
13176: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13180: LD_VAR 0 4
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PPUSH
13189: LD_VAR 0 4
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: CALL_OW 250
13202: PUSH
13203: LD_INT 3
13205: PLUS
13206: PPUSH
13207: LD_VAR 0 4
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: CALL_OW 251
13220: PUSH
13221: LD_INT 2
13223: MINUS
13224: PPUSH
13225: CALL_OW 111
// wait ( 0 0$2 ) ;
13229: LD_INT 70
13231: PPUSH
13232: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13236: LD_VAR 0 5
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING D4b-Mech1-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING D4b-FMech1-1
13284: PPUSH
13285: CALL_OW 88
// InGameOff ;
13289: CALL_OW 9
// exit ;
13293: POP
13294: POP
13295: GO 13301
// end ; end ;
13297: GO 12875
13299: POP
13300: POP
// end ;
13301: PPOPN 5
13303: END
// function CheckMehInside ; var i , j , tmp ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
// result := false ;
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_INT 1
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 36
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: ST_TO_ADDR
// if not tmp then
13352: LD_VAR 0 4
13356: NOT
13357: IFFALSE 13361
// exit ;
13359: GO 13425
// for i in tmp do
13361: LD_ADDR_VAR 0 2
13365: PUSH
13366: LD_VAR 0 4
13370: PUSH
13371: FOR_IN
13372: IFFALSE 13423
// for j in UnitsInside ( i ) do
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: LD_VAR 0 2
13383: PPUSH
13384: CALL_OW 313
13388: PUSH
13389: FOR_IN
13390: IFFALSE 13419
// if GetClass ( j ) = class_mechanic then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 257
13401: PUSH
13402: LD_INT 3
13404: EQUAL
13405: IFFALSE 13417
// begin result := true ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// break ;
13415: GO 13419
// end ;
13417: GO 13389
13419: POP
13420: POP
13421: GO 13371
13423: POP
13424: POP
// end ;
13425: LD_VAR 0 1
13429: RET
// every 12 12$0 do
13430: GO 13432
13432: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13433: LD_INT 35
13435: PPUSH
13436: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 463
13447: NOT
13448: PUSH
13449: LD_INT 32
13451: PPUSH
13452: LD_INT 81
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 70
13466: NOT
13467: AND
13468: IFFALSE 13433
// PrepareKurt ;
13470: CALL 16103 0 0
// end ;
13474: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13475: LD_EXP 15
13479: PPUSH
13480: CALL_OW 302
13484: PUSH
13485: LD_EXP 15
13489: PPUSH
13490: CALL_OW 255
13494: PUSH
13495: LD_INT 1
13497: EQUAL
13498: AND
13499: PUSH
13500: LD_EXP 2
13504: AND
13505: IFFALSE 13670
13507: GO 13509
13509: DISABLE
// begin wait ( 0 0$50 ) ;
13510: LD_INT 1750
13512: PPUSH
13513: CALL_OW 67
// if not IsOk ( Joan ) then
13517: LD_EXP 15
13521: PPUSH
13522: CALL_OW 302
13526: NOT
13527: IFFALSE 13531
// exit ;
13529: GO 13670
// if IsOK ( Lisa ) then
13531: LD_EXP 2
13535: PPUSH
13536: CALL_OW 302
13540: IFFALSE 13670
// begin DialogueOn ;
13542: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13546: LD_EXP 2
13550: PPUSH
13551: LD_STRING D7-Lisa-1
13553: PPUSH
13554: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13558: LD_EXP 1
13562: PPUSH
13563: LD_STRING D7-JMM-1
13565: PPUSH
13566: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13570: LD_EXP 2
13574: PPUSH
13575: LD_STRING D7-Lisa-2
13577: PPUSH
13578: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13582: LD_EXP 1
13586: PPUSH
13587: LD_STRING D7-JMM-2
13589: PPUSH
13590: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13594: LD_EXP 2
13598: PPUSH
13599: LD_STRING D7-Lisa-3
13601: PPUSH
13602: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13606: LD_EXP 1
13610: PPUSH
13611: LD_STRING D7-JMM-3
13613: PPUSH
13614: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13618: LD_EXP 2
13622: PPUSH
13623: LD_STRING D7-Lisa-4
13625: PPUSH
13626: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13630: LD_EXP 1
13634: PPUSH
13635: LD_STRING D7-JMM-4
13637: PPUSH
13638: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13642: LD_EXP 1
13646: PPUSH
13647: LD_STRING D7-JMM-4a
13649: PPUSH
13650: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13654: LD_EXP 2
13658: PPUSH
13659: LD_STRING D7-Lisa-5
13661: PPUSH
13662: CALL_OW 88
// DialogueOff ;
13666: CALL_OW 7
// end ; end ;
13670: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13671: LD_EXP 13
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 91
13688: PUSH
13689: LD_EXP 13
13693: PUSH
13694: LD_INT 10
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 25
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 25
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 25
13727: PUSH
13728: LD_INT 3
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 25
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 69
13761: PUSH
13762: LD_INT 1
13764: GREATER
13765: AND
13766: IFFALSE 13783
13768: GO 13770
13770: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13771: LD_EXP 13
13775: PPUSH
13776: LD_STRING D5-Sol1-1
13778: PPUSH
13779: CALL_OW 88
13783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13784: LD_INT 22
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 33
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: PUSH
13813: LD_INT 2
13815: GREATEREQUAL
13816: IFFALSE 13836
13818: GO 13820
13820: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13821: LD_STRING MRa
13823: PPUSH
13824: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13828: LD_ADDR_EXP 28
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// end ;
13836: END
// every 2 2$00 do var i , last ;
13837: GO 13839
13839: DISABLE
13840: LD_INT 0
13842: PPUSH
13843: PPUSH
// begin last := 8 ;
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_INT 8
13851: ST_TO_ADDR
// for i = 1 to last do
13852: LD_ADDR_VAR 0 1
13856: PUSH
13857: DOUBLE
13858: LD_INT 1
13860: DEC
13861: ST_TO_ADDR
13862: LD_VAR 0 2
13866: PUSH
13867: FOR_TO
13868: IFFALSE 13896
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13870: LD_INT 6300
13872: PPUSH
13873: LD_INT 12600
13875: PPUSH
13876: CALL_OW 12
13880: PPUSH
13881: CALL_OW 67
// PrepareRandoms ( i ) ;
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL 4078 0 1
// end ;
13894: GO 13867
13896: POP
13897: POP
// end ;
13898: PPOPN 2
13900: END
// every 5 5$20 do
13901: GO 13903
13903: DISABLE
// begin DialogueOn ;
13904: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13908: LD_EXP 10
13912: PPUSH
13913: LD_STRING D12a-Sci-1
13915: PPUSH
13916: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13920: LD_EXP 1
13924: PPUSH
13925: LD_STRING D12a-JMM-1
13927: PPUSH
13928: CALL_OW 88
// DialogueOff ;
13932: CALL_OW 7
// cratesStatus := 1 ;
13936: LD_ADDR_EXP 38
13940: PUSH
13941: LD_INT 1
13943: ST_TO_ADDR
// end ;
13944: END
// every 13 13$0 do
13945: GO 13947
13947: DISABLE
// begin DialogueOn ;
13948: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13952: LD_EXP 10
13956: PPUSH
13957: LD_STRING D12b-Sci-1
13959: PPUSH
13960: CALL_OW 94
// DialogueOff ;
13964: CALL_OW 7
// cratesStatus := 2 ;
13968: LD_ADDR_EXP 38
13972: PUSH
13973: LD_INT 2
13975: ST_TO_ADDR
// BuildBulldozer ;
13976: CALL 9814 0 0
// end ;
13980: END
// every 32 32$0 do
13981: GO 13983
13983: DISABLE
// begin DialogueOn ;
13984: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13988: LD_EXP 10
13992: PPUSH
13993: LD_STRING D12c-Sci-1
13995: PPUSH
13996: CALL_OW 94
// DialogueOff ;
14000: CALL_OW 7
// wait ( 3 3$0 ) ;
14004: LD_INT 6300
14006: PPUSH
14007: CALL_OW 67
// DialogueOn ;
14011: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14015: LD_EXP 10
14019: PPUSH
14020: LD_STRING D12d-Sci-1
14022: PPUSH
14023: CALL_OW 94
// DialogueOff ;
14027: CALL_OW 7
// cratesStatus = 1 ;
14031: LD_ADDR_EXP 38
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14039: CALL 20271 0 0
// wait ( 2 2$30 ) ;
14043: LD_INT 5250
14045: PPUSH
14046: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14050: LD_INT 35
14052: PPUSH
14053: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 463
14064: NOT
14065: PUSH
14066: LD_INT 32
14068: PPUSH
14069: LD_INT 81
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 70
14083: NOT
14084: AND
14085: PUSH
14086: LD_EXP 26
14090: PUSH
14091: LD_INT 6300
14093: LESS
14094: OR
14095: IFFALSE 14050
// PrepareJoan ;
14097: CALL 3034 0 0
// end ;
14101: END
// every 42 42$0 do
14102: GO 14104
14104: DISABLE
// begin DialogueOn ;
14105: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14109: LD_EXP 10
14113: PPUSH
14114: LD_STRING D12e-Sci-1
14116: PPUSH
14117: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14121: LD_EXP 1
14125: PPUSH
14126: LD_STRING D12e-JMM-1
14128: PPUSH
14129: CALL_OW 88
// DialogueOff ;
14133: CALL_OW 7
// cratesStatus := 2 ;
14137: LD_ADDR_EXP 38
14141: PUSH
14142: LD_INT 2
14144: ST_TO_ADDR
// end ; end_of_file
14145: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14146: LD_VAR 0 1
14150: PUSH
14151: LD_INT 1
14153: EQUAL
14154: PUSH
14155: LD_VAR 0 2
14159: PUSH
14160: LD_INT 3
14162: EQUAL
14163: AND
14164: IFFALSE 14174
// contactWithRussian := 1 ;
14166: LD_ADDR_EXP 22
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// end ;
14174: PPOPN 2
14176: END
// on BuildingComplete ( building ) do var i ;
14177: LD_INT 0
14179: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 266
14189: PUSH
14190: LD_INT 36
14192: EQUAL
14193: PUSH
14194: LD_VAR 0 1
14198: PPUSH
14199: CALL_OW 255
14203: PUSH
14204: LD_INT 1
14206: EQUAL
14207: AND
14208: PUSH
14209: LD_EXP 23
14213: PUSH
14214: LD_INT 0
14216: EQUAL
14217: AND
14218: IFFALSE 14298
// begin firstTower = 1 ;
14220: LD_ADDR_EXP 23
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14228: LD_INT 22
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 25
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 26
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: LD_EXP 1
14283: PUSH
14284: EMPTY
14285: LIST
14286: DIFF
14287: PPUSH
14288: LD_STRING D3b-Mech1-1
14290: PPUSH
14291: LD_STRING D3b-Mech1-1
14293: PPUSH
14294: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 266
14307: PUSH
14308: LD_INT 0
14310: EQUAL
14311: PUSH
14312: LD_VAR 0 1
14316: PPUSH
14317: CALL_OW 255
14321: PUSH
14322: LD_INT 1
14324: EQUAL
14325: AND
14326: IFFALSE 14340
// SetBName ( building , theta ) ;
14328: LD_VAR 0 1
14332: PPUSH
14333: LD_STRING theta
14335: PPUSH
14336: CALL_OW 500
// if GetSide ( building ) = 3 then
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 255
14349: PUSH
14350: LD_INT 3
14352: EQUAL
14353: IFFALSE 14393
// begin for i := 1 to 4 do
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: DOUBLE
14361: LD_INT 1
14363: DEC
14364: ST_TO_ADDR
14365: LD_INT 4
14367: PUSH
14368: FOR_TO
14369: IFFALSE 14391
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14371: LD_ADDR_EXP 31
14375: PUSH
14376: LD_EXP 31
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 3
14388: ST_TO_ADDR
14389: GO 14368
14391: POP
14392: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 255
14402: PUSH
14403: LD_INT 3
14405: EQUAL
14406: PUSH
14407: LD_VAR 0 1
14411: PPUSH
14412: CALL_OW 266
14416: PUSH
14417: LD_INT 0
14419: EQUAL
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 266
14430: PUSH
14431: LD_INT 2
14433: EQUAL
14434: OR
14435: PUSH
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 266
14445: PUSH
14446: LD_INT 4
14448: EQUAL
14449: OR
14450: PUSH
14451: EMPTY
14452: LIST
14453: AND
14454: IFFALSE 14465
// ComUpgrade ( building ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 3
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 32
14491: EQUAL
14492: AND
14493: IFFALSE 14534
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14495: LD_VAR 0 1
14499: PPUSH
14500: LD_INT 42
14502: PUSH
14503: LD_INT 43
14505: PUSH
14506: LD_INT 44
14508: PUSH
14509: LD_INT 46
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 1
14520: PPUSH
14521: LD_INT 4
14523: PPUSH
14524: CALL_OW 12
14528: ARRAY
14529: PPUSH
14530: CALL_OW 208
// end ;
14534: PPOPN 2
14536: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL 35519 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14546: LD_VAR 0 1
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 23
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 69
14590: IN
14591: IFFALSE 14607
// killCounter := killCounter + 1 ;
14593: LD_ADDR_EXP 45
14597: PUSH
14598: LD_EXP 45
14602: PUSH
14603: LD_INT 1
14605: PLUS
14606: ST_TO_ADDR
// if unit in ruAttackersInForest then
14607: LD_VAR 0 1
14611: PUSH
14612: LD_EXP 48
14616: IN
14617: IFFALSE 14635
// ruAttackersInForest := ruAttackersInForest diff unit ;
14619: LD_ADDR_EXP 48
14623: PUSH
14624: LD_EXP 48
14628: PUSH
14629: LD_VAR 0 1
14633: DIFF
14634: ST_TO_ADDR
// if unit in ruAttackers then
14635: LD_VAR 0 1
14639: PUSH
14640: LD_EXP 47
14644: IN
14645: IFFALSE 14663
// ruAttackers := ruAttackers diff unit ;
14647: LD_ADDR_EXP 47
14651: PUSH
14652: LD_EXP 47
14656: PUSH
14657: LD_VAR 0 1
14661: DIFF
14662: ST_TO_ADDR
// if unit = JMM then
14663: LD_VAR 0 1
14667: PUSH
14668: LD_EXP 1
14672: EQUAL
14673: IFFALSE 14682
// YouLost ( JMM ) ;
14675: LD_STRING JMM
14677: PPUSH
14678: CALL_OW 104
// if unit = Joan then
14682: LD_VAR 0 1
14686: PUSH
14687: LD_EXP 15
14691: EQUAL
14692: IFFALSE 14702
// JoanStatus := 0 ;
14694: LD_ADDR_EXP 16
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 255
14711: PUSH
14712: LD_INT 1
14714: EQUAL
14715: PUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 247
14725: PUSH
14726: LD_INT 1
14728: EQUAL
14729: AND
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 248
14740: PUSH
14741: LD_INT 1
14743: EQUAL
14744: AND
14745: IFFALSE 14761
// unitLost = unitLost + 1 ;
14747: LD_ADDR_EXP 30
14751: PUSH
14752: LD_EXP 30
14756: PUSH
14757: LD_INT 1
14759: PLUS
14760: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 3
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 266
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 32
14808: PUSH
14809: LD_INT 31
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: IN
14818: AND
14819: IFFALSE 14905
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14821: LD_ADDR_EXP 31
14825: PUSH
14826: LD_EXP 31
14830: PUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 266
14840: ADD
14841: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14842: LD_ADDR_EXP 31
14846: PUSH
14847: LD_EXP 31
14851: PUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 250
14861: ADD
14862: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14863: LD_ADDR_EXP 31
14867: PUSH
14868: LD_EXP 31
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 251
14882: ADD
14883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14884: LD_ADDR_EXP 31
14888: PUSH
14889: LD_EXP 31
14893: PUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 254
14903: ADD
14904: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14905: LD_EXP 46
14909: PUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 257
14919: PUSH
14920: LD_INT 3
14922: EQUAL
14923: AND
14924: PUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 255
14934: PUSH
14935: LD_INT 3
14937: EQUAL
14938: AND
14939: PUSH
14940: LD_INT 21
14942: PPUSH
14943: CALL_OW 302
14947: AND
14948: PUSH
14949: LD_INT 21
14951: PPUSH
14952: CALL_OW 255
14956: PUSH
14957: LD_INT 3
14959: EQUAL
14960: AND
14961: IFFALSE 15043
// begin ruMechCounter := ruMechCounter - 1 ;
14963: LD_ADDR_EXP 46
14967: PUSH
14968: LD_EXP 46
14972: PUSH
14973: LD_INT 1
14975: MINUS
14976: ST_TO_ADDR
// uc_side := 3 ;
14977: LD_ADDR_OWVAR 20
14981: PUSH
14982: LD_INT 3
14984: ST_TO_ADDR
// uc_nation := 3 ;
14985: LD_ADDR_OWVAR 21
14989: PUSH
14990: LD_INT 3
14992: ST_TO_ADDR
// hc_gallery :=  ;
14993: LD_ADDR_OWVAR 33
14997: PUSH
14998: LD_STRING 
15000: ST_TO_ADDR
// hc_name :=  ;
15001: LD_ADDR_OWVAR 26
15005: PUSH
15006: LD_STRING 
15008: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15009: LD_INT 0
15011: PPUSH
15012: LD_EXP 34
15016: PPUSH
15017: LD_EXP 35
15021: PPUSH
15022: CALL_OW 12
15026: PPUSH
15027: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15031: CALL_OW 44
15035: PPUSH
15036: LD_INT 21
15038: PPUSH
15039: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15043: LD_VAR 0 1
15047: PPUSH
15048: CALL_OW 255
15052: PUSH
15053: LD_INT 3
15055: EQUAL
15056: PUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 264
15066: PUSH
15067: LD_INT 52
15069: EQUAL
15070: AND
15071: PUSH
15072: LD_INT 21
15074: PPUSH
15075: CALL_OW 302
15079: AND
15080: PUSH
15081: LD_INT 21
15083: PPUSH
15084: CALL_OW 255
15088: PUSH
15089: LD_INT 3
15091: EQUAL
15092: AND
15093: IFFALSE 15114
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15095: LD_INT 21
15097: PPUSH
15098: LD_INT 22
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: LD_INT 52
15109: PPUSH
15110: CALL_OW 125
// end ;
15114: PPOPN 1
15116: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15117: LD_INT 0
15119: PPUSH
15120: PPUSH
15121: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15122: LD_VAR 0 1
15126: PPUSH
15127: LD_VAR 0 2
15131: PPUSH
15132: CALL 35641 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 255
15145: PUSH
15146: LD_INT 3
15148: EQUAL
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 264
15159: PUSH
15160: LD_INT 51
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: LD_INT 53
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15207
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15178: LD_ADDR_EXP 47
15182: PUSH
15183: LD_EXP 47
15187: PPUSH
15188: LD_EXP 47
15192: PUSH
15193: LD_INT 1
15195: PLUS
15196: PPUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 1
15206: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 264
15216: PUSH
15217: LD_INT 53
15219: EQUAL
15220: IFFALSE 15375
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_INT 60
15229: PPUSH
15230: LD_INT 85
15232: PPUSH
15233: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15237: LD_VAR 0 1
15241: PPUSH
15242: LD_INT 43
15244: PPUSH
15245: LD_INT 69
15247: PPUSH
15248: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_INT 37
15259: PPUSH
15260: LD_INT 46
15262: PPUSH
15263: CALL_OW 171
// wait ( 0 0$1 ) ;
15267: LD_INT 35
15269: PPUSH
15270: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15274: LD_INT 35
15276: PPUSH
15277: CALL_OW 67
// until not HasTask ( vehicle ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 314
15290: NOT
15291: IFFALSE 15274
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15293: LD_VAR 0 1
15297: PPUSH
15298: LD_INT 34
15300: PPUSH
15301: CALL 9866 0 2
// repeat wait ( 0 0$1 ) ;
15305: LD_INT 35
15307: PPUSH
15308: CALL_OW 67
// until not HasTask ( vehicle ) ;
15312: LD_VAR 0 1
15316: PPUSH
15317: CALL_OW 314
15321: NOT
15322: IFFALSE 15305
// un := IsDrivenBy ( vehicle ) ;
15324: LD_ADDR_VAR 0 4
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 311
15338: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_INT 96
15346: PPUSH
15347: LD_INT 77
15349: PPUSH
15350: CALL_OW 171
// AddComExitVehicle ( un ) ;
15354: LD_VAR 0 4
15358: PPUSH
15359: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 17
15370: PPUSH
15371: CALL_OW 180
// end ; end ;
15375: PPOPN 5
15377: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 255
15387: PUSH
15388: LD_INT 3
15390: EQUAL
15391: IFFALSE 15422
// begin tamedApemans = tamedApemans + 1 ;
15393: LD_ADDR_EXP 32
15397: PUSH
15398: LD_EXP 32
15402: PUSH
15403: LD_INT 1
15405: PLUS
15406: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_INT 106
15414: PPUSH
15415: LD_INT 85
15417: PPUSH
15418: CALL_OW 111
// end ; end ;
15422: PPOPN 2
15424: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15425: LD_VAR 0 2
15429: PPUSH
15430: CALL_OW 255
15434: PUSH
15435: LD_INT 3
15437: EQUAL
15438: PUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: CALL_OW 255
15448: PUSH
15449: LD_INT 3
15451: EQUAL
15452: AND
15453: PUSH
15454: LD_INT 21
15456: PPUSH
15457: CALL_OW 302
15461: AND
15462: IFFALSE 15476
// ComEnterUnit ( human , rufab ) ;
15464: LD_VAR 0 1
15468: PPUSH
15469: LD_INT 21
15471: PPUSH
15472: CALL_OW 120
// end ;
15476: PPOPN 4
15478: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 21
15486: EQUAL
15487: PUSH
15488: LD_VAR 0 2
15492: PPUSH
15493: CALL_OW 255
15497: PUSH
15498: LD_INT 3
15500: EQUAL
15501: AND
15502: IFFALSE 15516
// SetLives ( human , 1000 ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_INT 1000
15511: PPUSH
15512: CALL_OW 234
// end ;
15516: PPOPN 2
15518: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15519: LD_VAR 0 1
15523: PPUSH
15524: CALL 35625 0 1
// end ; end_of_file
15528: PPOPN 1
15530: END
// every 0 0$30 trigger cratesStatus = 1 do
15531: LD_EXP 38
15535: PUSH
15536: LD_INT 1
15538: EQUAL
15539: IFFALSE 15592
15541: GO 15543
15543: DISABLE
// begin enable ;
15544: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15545: LD_INT 350
15547: PUSH
15548: LD_INT 875
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 1
15557: PPUSH
15558: LD_INT 2
15560: PPUSH
15561: CALL_OW 12
15565: ARRAY
15566: PPUSH
15567: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 5
15576: PPUSH
15577: CALL_OW 12
15581: PPUSH
15582: LD_INT 7
15584: PPUSH
15585: LD_INT 1
15587: PPUSH
15588: CALL_OW 55
// end ;
15592: END
// every 1 1$0 trigger cratesStatus = 2 do
15593: LD_EXP 38
15597: PUSH
15598: LD_INT 2
15600: EQUAL
15601: IFFALSE 15684
15603: GO 15605
15605: DISABLE
// begin enable ;
15606: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15607: LD_INT 3150
15609: PUSH
15610: LD_INT 4550
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 2
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15633: LD_INT 2
15635: PUSH
15636: LD_INT 5
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: PPUSH
15646: LD_INT 2
15648: PPUSH
15649: CALL_OW 12
15653: ARRAY
15654: PPUSH
15655: LD_INT 6
15657: PUSH
15658: LD_INT 7
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_INT 2
15670: PPUSH
15671: CALL_OW 12
15675: ARRAY
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 55
// end ;
15684: END
// every 0 0$30 + 0 0$10 do
15685: GO 15687
15687: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: PPUSH
15710: LD_INT 7
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 55
// Wait ( 0 0$15 ) ;
15720: LD_INT 525
15722: PPUSH
15723: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_INT 2
15742: PPUSH
15743: CALL_OW 12
15747: ARRAY
15748: PPUSH
15749: LD_INT 7
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 55
// Wait ( 0 0$20 ) ;
15759: LD_INT 700
15761: PPUSH
15762: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 2
15781: PPUSH
15782: CALL_OW 12
15786: ARRAY
15787: PPUSH
15788: LD_INT 7
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 55
// end ; end_of_file
15798: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15799: LD_EXP 24
15803: PUSH
15804: LD_INT 1
15806: EQUAL
15807: IFFALSE 16100
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin enable ;
15817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15818: LD_ADDR_VAR 0 2
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 30
15848: PUSH
15849: LD_INT 0
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: ST_TO_ADDR
// for i in tmp do
15881: LD_ADDR_VAR 0 1
15885: PUSH
15886: LD_VAR 0 2
15890: PUSH
15891: FOR_IN
15892: IFFALSE 15925
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 274
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 275
15921: PLUS
15922: ST_TO_ADDR
15923: GO 15891
15925: POP
15926: POP
// strings = [ ] ;
15927: LD_ADDR_EXP 27
15931: PUSH
15932: EMPTY
15933: ST_TO_ADDR
// if tmp = 0 then
15934: LD_VAR 0 2
15938: PUSH
15939: LD_INT 0
15941: EQUAL
15942: IFFALSE 15967
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15944: LD_ADDR_EXP 27
15948: PUSH
15949: LD_EXP 27
15953: PUSH
15954: LD_STRING #Am06-1
15956: PUSH
15957: LD_EXP 25
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: ADD
15966: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15967: LD_VAR 0 2
15971: PUSH
15972: LD_EXP 25
15976: PUSH
15977: LD_VAR 0 3
15981: GREATER
15982: AND
15983: IFFALSE 16014
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15985: LD_ADDR_EXP 27
15989: PUSH
15990: LD_EXP 27
15994: PUSH
15995: LD_STRING #Am06-1
15997: PUSH
15998: LD_EXP 25
16002: PUSH
16003: LD_VAR 0 3
16007: MINUS
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: ADD
16013: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16014: LD_VAR 0 2
16018: PUSH
16019: LD_EXP 25
16023: PUSH
16024: LD_VAR 0 3
16028: LESSEQUAL
16029: AND
16030: IFFALSE 16053
// strings = strings ^ [ #Am06-1 , 0 ] ;
16032: LD_ADDR_EXP 27
16036: PUSH
16037: LD_EXP 27
16041: PUSH
16042: LD_STRING #Am06-1
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: ADD
16052: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16053: LD_ADDR_EXP 26
16057: PUSH
16058: LD_EXP 26
16062: PUSH
16063: LD_INT 35
16065: MINUS
16066: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16067: LD_ADDR_EXP 27
16071: PUSH
16072: LD_EXP 27
16076: PUSH
16077: LD_STRING #Am06-2
16079: PUSH
16080: LD_EXP 26
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: ADD
16089: ST_TO_ADDR
// display_strings = strings ;
16090: LD_ADDR_OWVAR 47
16094: PUSH
16095: LD_EXP 27
16099: ST_TO_ADDR
// end ; end_of_file
16100: PPOPN 3
16102: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_INT 22
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: LD_INT 30
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 30
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16164: LD_INT 35
16166: PPUSH
16167: CALL_OW 67
// until depot ;
16171: LD_VAR 0 3
16175: IFFALSE 16112
// repeat wait ( 0 0$1 ) ;
16177: LD_INT 35
16179: PPUSH
16180: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16184: LD_ADDR_VAR 0 4
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 91
16201: PUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_INT 1
16209: ARRAY
16210: PUSH
16211: LD_INT 15
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 25
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 4
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: LD_INT 54
16284: PUSH
16285: EMPTY
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: LD_INT 55
16297: PUSH
16298: EMPTY
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: PPUSH
16313: CALL_OW 69
16317: PUSH
16318: LD_EXP 2
16322: PUSH
16323: LD_EXP 3
16327: PUSH
16328: LD_EXP 4
16332: PUSH
16333: LD_EXP 5
16337: PUSH
16338: LD_EXP 7
16342: PUSH
16343: LD_EXP 8
16347: PUSH
16348: LD_EXP 9
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: PUSH
16362: LD_EXP 44
16366: ADD
16367: DIFF
16368: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16369: LD_VAR 0 4
16373: PUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 463
16381: NOT
16382: AND
16383: IFFALSE 16177
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16385: LD_ADDR_VAR 0 4
16389: PUSH
16390: LD_VAR 0 4
16394: PUSH
16395: LD_INT 1
16397: PPUSH
16398: LD_VAR 0 4
16402: PPUSH
16403: CALL_OW 12
16407: ARRAY
16408: ST_TO_ADDR
// blockSpawn := 1 ;
16409: LD_ADDR_EXP 29
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// uc_side := 2 ;
16417: LD_ADDR_OWVAR 20
16421: PUSH
16422: LD_INT 2
16424: ST_TO_ADDR
// uc_nation := 2 ;
16425: LD_ADDR_OWVAR 21
16429: PUSH
16430: LD_INT 2
16432: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16433: LD_ADDR_EXP 19
16437: PUSH
16438: LD_STRING Kurt
16440: PPUSH
16441: LD_INT 0
16443: PPUSH
16444: LD_STRING 
16446: PPUSH
16447: CALL 40159 0 3
16451: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16452: LD_EXP 19
16456: PPUSH
16457: LD_VAR 0 4
16461: PPUSH
16462: CALL_OW 250
16466: PPUSH
16467: LD_VAR 0 4
16471: PPUSH
16472: CALL_OW 251
16476: PPUSH
16477: LD_INT 5
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 50
// InGameOn ;
16487: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16491: LD_EXP 19
16495: PPUSH
16496: CALL_OW 87
// wait ( 0 0$2 ) ;
16500: LD_INT 70
16502: PPUSH
16503: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16507: LD_EXP 19
16511: PPUSH
16512: LD_VAR 0 4
16516: PPUSH
16517: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16521: LD_VAR 0 4
16525: PPUSH
16526: LD_EXP 19
16530: PPUSH
16531: CALL_OW 112
// wait ( 0 0$1 ) ;
16535: LD_INT 35
16537: PPUSH
16538: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16542: LD_VAR 0 4
16546: PPUSH
16547: LD_EXP 19
16551: PPUSH
16552: CALL_OW 119
// DialogueOn ;
16556: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16560: LD_EXP 19
16564: PPUSH
16565: LD_STRING D2-Kurt-1
16567: PPUSH
16568: CALL_OW 88
// if tmp = JMM then
16572: LD_VAR 0 4
16576: PUSH
16577: LD_EXP 1
16581: EQUAL
16582: IFFALSE 16674
// begin Say ( JMM , D2-JMM-1 ) ;
16584: LD_EXP 1
16588: PPUSH
16589: LD_STRING D2-JMM-1
16591: PPUSH
16592: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16596: LD_EXP 19
16600: PPUSH
16601: LD_STRING D2-Kurt-2
16603: PPUSH
16604: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16608: LD_EXP 1
16612: PPUSH
16613: LD_STRING D2-JMM-2
16615: PPUSH
16616: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16620: LD_EXP 19
16624: PPUSH
16625: LD_STRING D2-Kurt-3
16627: PPUSH
16628: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16632: LD_EXP 1
16636: PPUSH
16637: LD_STRING D2-JMM-3
16639: PPUSH
16640: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16644: LD_EXP 19
16648: PPUSH
16649: LD_STRING D2-Kurt-4
16651: PPUSH
16652: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16656: LD_EXP 1
16660: PPUSH
16661: LD_STRING D2-JMM-4
16663: PPUSH
16664: CALL_OW 88
// DialogueOff ;
16668: CALL_OW 7
// end else
16672: GO 16902
// begin if GetSex ( tmp ) = 1 then
16674: LD_VAR 0 4
16678: PPUSH
16679: CALL_OW 258
16683: PUSH
16684: LD_INT 1
16686: EQUAL
16687: IFFALSE 16703
// Say ( tmp , D2-Sol1-1 ) else
16689: LD_VAR 0 4
16693: PPUSH
16694: LD_STRING D2-Sol1-1
16696: PPUSH
16697: CALL_OW 88
16701: GO 16715
// Say ( tmp , D2-FSol1-1 ) ;
16703: LD_VAR 0 4
16707: PPUSH
16708: LD_STRING D2-FSol1-1
16710: PPUSH
16711: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16715: LD_EXP 19
16719: PPUSH
16720: LD_STRING D2-Kurt-2
16722: PPUSH
16723: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16727: LD_VAR 0 4
16731: PPUSH
16732: CALL_OW 258
16736: PUSH
16737: LD_INT 1
16739: EQUAL
16740: IFFALSE 16756
// Say ( tmp , D2-Sol1-2 ) else
16742: LD_VAR 0 4
16746: PPUSH
16747: LD_STRING D2-Sol1-2
16749: PPUSH
16750: CALL_OW 88
16754: GO 16768
// Say ( tmp , D2-FSol1-2 ) ;
16756: LD_VAR 0 4
16760: PPUSH
16761: LD_STRING D2-FSol1-2
16763: PPUSH
16764: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16768: LD_EXP 19
16772: PPUSH
16773: LD_STRING D2-Kurt-3
16775: PPUSH
16776: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16780: LD_VAR 0 4
16784: PPUSH
16785: CALL_OW 258
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: IFFALSE 16809
// Say ( tmp , D2-Sol1-3 ) else
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_STRING D2-Sol1-3
16802: PPUSH
16803: CALL_OW 88
16807: GO 16821
// Say ( tmp , D2-FSol1-3 ) ;
16809: LD_VAR 0 4
16813: PPUSH
16814: LD_STRING D2-FSol1-3
16816: PPUSH
16817: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16821: LD_EXP 19
16825: PPUSH
16826: LD_STRING D2-Kurt-4
16828: PPUSH
16829: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16833: LD_VAR 0 4
16837: PPUSH
16838: CALL_OW 258
16842: PUSH
16843: LD_INT 1
16845: EQUAL
16846: IFFALSE 16874
// begin Say ( tmp , D2-Sol1-4 ) ;
16848: LD_VAR 0 4
16852: PPUSH
16853: LD_STRING D2-Sol1-4
16855: PPUSH
16856: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_STRING D2-Sol1-5
16867: PPUSH
16868: CALL_OW 88
// end else
16872: GO 16898
// begin Say ( tmp , D2-FSol1-4 ) ;
16874: LD_VAR 0 4
16878: PPUSH
16879: LD_STRING D2-FSol1-4
16881: PPUSH
16882: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_STRING D2-FSol1-5
16893: PPUSH
16894: CALL_OW 88
// end ; DialogueOff ;
16898: CALL_OW 7
// end ; dec := ShowQuery1 ;
16902: LD_ADDR_VAR 0 6
16906: PUSH
16907: CALL 7256 0 0
16911: ST_TO_ADDR
// if dec = 1 then
16912: LD_VAR 0 6
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: IFFALSE 16982
// begin DialogueOn ;
16922: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16926: LD_EXP 19
16930: PPUSH
16931: LD_STRING D2a-Kurt-1
16933: PPUSH
16934: CALL_OW 88
// DialogueOff ;
16938: CALL_OW 7
// InGameOff ;
16942: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16946: LD_INT 1
16948: PPUSH
16949: LD_INT 2
16951: PPUSH
16952: LD_INT 2
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16962: LD_EXP 19
16966: PPUSH
16967: LD_INT 8
16969: PPUSH
16970: CALL_OW 113
// readyToEscape := 1 ;
16974: LD_ADDR_EXP 21
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// end ; if dec = 2 then
16982: LD_VAR 0 6
16986: PUSH
16987: LD_INT 2
16989: EQUAL
16990: IFFALSE 17458
// begin DialogueOn ;
16992: CALL_OW 6
// if tmp = JMM then
16996: LD_VAR 0 4
17000: PUSH
17001: LD_EXP 1
17005: EQUAL
17006: IFFALSE 17062
// begin Say ( JMM , D2b-JMM-1 ) ;
17008: LD_EXP 1
17012: PPUSH
17013: LD_STRING D2b-JMM-1
17015: PPUSH
17016: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17020: LD_EXP 19
17024: PPUSH
17025: LD_STRING D2b-Kurt-1
17027: PPUSH
17028: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17032: LD_EXP 1
17036: PPUSH
17037: LD_STRING D2b-JMM-2
17039: PPUSH
17040: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17044: LD_EXP 19
17048: PPUSH
17049: LD_STRING D2b-Kurt-2
17051: PPUSH
17052: CALL_OW 88
// DialogueOff ;
17056: CALL_OW 7
// end else
17060: GO 17213
// begin if GetSex ( tmp ) = 1 then
17062: LD_VAR 0 4
17066: PPUSH
17067: CALL_OW 258
17071: PUSH
17072: LD_INT 1
17074: EQUAL
17075: IFFALSE 17091
// Say ( tmp , D2b-Sol1-1 ) else
17077: LD_VAR 0 4
17081: PPUSH
17082: LD_STRING D2b-Sol1-1
17084: PPUSH
17085: CALL_OW 88
17089: GO 17103
// Say ( tmp , D2b-FSol1-1 ) ;
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_STRING D2b-FSol1-1
17098: PPUSH
17099: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17103: LD_EXP 19
17107: PPUSH
17108: LD_STRING D2b-Kurt-1
17110: PPUSH
17111: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17115: LD_VAR 0 4
17119: PPUSH
17120: CALL_OW 258
17124: PUSH
17125: LD_INT 1
17127: EQUAL
17128: IFFALSE 17144
// Say ( tmp , D2b-Sol1-2 ) else
17130: LD_VAR 0 4
17134: PPUSH
17135: LD_STRING D2b-Sol1-2
17137: PPUSH
17138: CALL_OW 88
17142: GO 17156
// Say ( tmp , D2b-FSol1-2 ) ;
17144: LD_VAR 0 4
17148: PPUSH
17149: LD_STRING D2b-FSol1-2
17151: PPUSH
17152: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17156: LD_EXP 19
17160: PPUSH
17161: LD_STRING D2b-Kurt-2
17163: PPUSH
17164: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17168: LD_VAR 0 4
17172: PPUSH
17173: CALL_OW 258
17177: PUSH
17178: LD_INT 1
17180: EQUAL
17181: IFFALSE 17197
// Say ( tmp , D2c-Sol1-2 ) else
17183: LD_VAR 0 4
17187: PPUSH
17188: LD_STRING D2c-Sol1-2
17190: PPUSH
17191: CALL_OW 88
17195: GO 17209
// Say ( tmp , D2c-FSol1-2 ) ;
17197: LD_VAR 0 4
17201: PPUSH
17202: LD_STRING D2c-FSol1-2
17204: PPUSH
17205: CALL_OW 88
// DialogueOff ;
17209: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17213: LD_ADDR_VAR 0 7
17217: PUSH
17218: CALL 7277 0 0
17222: ST_TO_ADDR
// if dec2 = 1 then
17223: LD_VAR 0 7
17227: PUSH
17228: LD_INT 1
17230: EQUAL
17231: IFFALSE 17293
// begin DialogueOn ;
17233: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17237: LD_EXP 19
17241: PPUSH
17242: LD_STRING D2a-Kurt-1
17244: PPUSH
17245: CALL_OW 88
// DialogueOff ;
17249: CALL_OW 7
// InGameOff ;
17253: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 2
17262: PPUSH
17263: LD_INT 2
17265: PPUSH
17266: LD_INT 1
17268: PPUSH
17269: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17273: LD_EXP 19
17277: PPUSH
17278: LD_INT 8
17280: PPUSH
17281: CALL_OW 113
// readyToEscape := 1 ;
17285: LD_ADDR_EXP 21
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// end ; if dec2 = 2 then
17293: LD_VAR 0 7
17297: PUSH
17298: LD_INT 2
17300: EQUAL
17301: IFFALSE 17458
// begin if tmp = JMM then
17303: LD_VAR 0 4
17307: PUSH
17308: LD_EXP 1
17312: EQUAL
17313: IFFALSE 17373
// begin DialogueOn ;
17315: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17319: LD_EXP 1
17323: PPUSH
17324: LD_STRING D2c-JMM-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17331: LD_EXP 19
17335: PPUSH
17336: LD_STRING D2c-Kurt-1
17338: PPUSH
17339: CALL_OW 88
// DialogueOff ;
17343: CALL_OW 7
// InGameOff ;
17347: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17351: LD_EXP 19
17355: PPUSH
17356: LD_INT 8
17358: PPUSH
17359: CALL_OW 113
// readyToEscape := 1 ;
17363: LD_ADDR_EXP 21
17367: PUSH
17368: LD_INT 1
17370: ST_TO_ADDR
// end else
17371: GO 17458
// begin DialogueOn ;
17373: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17377: LD_VAR 0 4
17381: PPUSH
17382: CALL_OW 258
17386: PUSH
17387: LD_INT 1
17389: EQUAL
17390: IFFALSE 17406
// Say ( tmp , D2c-Sol1-1 ) else
17392: LD_VAR 0 4
17396: PPUSH
17397: LD_STRING D2c-Sol1-1
17399: PPUSH
17400: CALL_OW 88
17404: GO 17418
// Say ( tmp , D2c-FSol1-1 ) ;
17406: LD_VAR 0 4
17410: PPUSH
17411: LD_STRING D2c-FSol1-1
17413: PPUSH
17414: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17418: LD_EXP 19
17422: PPUSH
17423: LD_STRING D2c-Kurt-1
17425: PPUSH
17426: CALL_OW 88
// DialogueOff ;
17430: CALL_OW 7
// InGameOff ;
17434: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17438: LD_EXP 19
17442: PPUSH
17443: LD_INT 8
17445: PPUSH
17446: CALL_OW 113
// readyToEscape := 1 ;
17450: LD_ADDR_EXP 21
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17458: LD_VAR 0 6
17462: PUSH
17463: LD_INT 3
17465: EQUAL
17466: IFFALSE 17627
// begin DialogueOn ;
17468: CALL_OW 6
// if tmp = JMM then
17472: LD_VAR 0 4
17476: PUSH
17477: LD_EXP 1
17481: EQUAL
17482: IFFALSE 17542
// begin DialogueOn ;
17484: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17488: LD_EXP 1
17492: PPUSH
17493: LD_STRING D2c-JMM-1
17495: PPUSH
17496: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17500: LD_EXP 19
17504: PPUSH
17505: LD_STRING D2c-Kurt-1
17507: PPUSH
17508: CALL_OW 88
// DialogueOff ;
17512: CALL_OW 7
// InGameOff ;
17516: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17520: LD_EXP 19
17524: PPUSH
17525: LD_INT 8
17527: PPUSH
17528: CALL_OW 113
// readyToEscape := 1 ;
17532: LD_ADDR_EXP 21
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// end else
17540: GO 17627
// begin DialogueOn ;
17542: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17546: LD_VAR 0 4
17550: PPUSH
17551: CALL_OW 258
17555: PUSH
17556: LD_INT 1
17558: EQUAL
17559: IFFALSE 17575
// Say ( tmp , D2c-Sol1-1 ) else
17561: LD_VAR 0 4
17565: PPUSH
17566: LD_STRING D2c-Sol1-1
17568: PPUSH
17569: CALL_OW 88
17573: GO 17587
// Say ( tmp , D2c-FSol1-1 ) ;
17575: LD_VAR 0 4
17579: PPUSH
17580: LD_STRING D2c-FSol1-1
17582: PPUSH
17583: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17587: LD_EXP 19
17591: PPUSH
17592: LD_STRING D2c-Kurt-1
17594: PPUSH
17595: CALL_OW 88
// DialogueOff ;
17599: CALL_OW 7
// InGameOff ;
17603: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17607: LD_EXP 19
17611: PPUSH
17612: LD_INT 8
17614: PPUSH
17615: CALL_OW 113
// readyToEscape := 1 ;
17619: LD_ADDR_EXP 21
17623: PUSH
17624: LD_INT 1
17626: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17627: LD_ADDR_EXP 29
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17635: LD_INT 35
17637: PPUSH
17638: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17642: LD_EXP 19
17646: PPUSH
17647: LD_INT 8
17649: PPUSH
17650: CALL_OW 308
17654: PUSH
17655: LD_EXP 21
17659: AND
17660: PUSH
17661: LD_EXP 19
17665: PPUSH
17666: CALL_OW 301
17670: OR
17671: IFFALSE 17635
// if IsDead ( Kurt ) then
17673: LD_EXP 19
17677: PPUSH
17678: CALL_OW 301
17682: IFFALSE 17686
// exit ;
17684: GO 17741
// RemoveUnit ( Kurt ) ;
17686: LD_EXP 19
17690: PPUSH
17691: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17695: LD_EXP 19
17699: PPUSH
17700: LD_STRING Kurt
17702: PPUSH
17703: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17707: LD_INT 1
17709: PPUSH
17710: LD_INT 2
17712: PPUSH
17713: CALL_OW 81
17717: PUSH
17718: LD_INT 0
17720: EQUAL
17721: IFFALSE 17733
// kurtStatus = 1 else
17723: LD_ADDR_EXP 20
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
17731: GO 17741
// kurtStatus = 2 ;
17733: LD_ADDR_EXP 20
17737: PUSH
17738: LD_INT 2
17740: ST_TO_ADDR
// end ; end_of_file
17741: LD_VAR 0 1
17745: RET
// every 0 0$2 do
17746: GO 17748
17748: DISABLE
// begin enable ;
17749: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17750: LD_INT 3
17752: PPUSH
17753: LD_INT 2
17755: PPUSH
17756: LD_INT 10
17758: PPUSH
17759: LD_EXP 31
17763: PPUSH
17764: CALL 7708 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17768: LD_INT 3
17770: PPUSH
17771: LD_INT 12
17773: PPUSH
17774: LD_EXP 31
17778: PPUSH
17779: CALL 9311 0 3
// if disableHealAI = 0 then
17783: LD_EXP 33
17787: PUSH
17788: LD_INT 0
17790: EQUAL
17791: IFFALSE 17812
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17793: LD_INT 3
17795: PPUSH
17796: LD_INT 9
17798: PPUSH
17799: LD_INT 10
17801: PPUSH
17802: LD_INT 32
17804: PUSH
17805: EMPTY
17806: LIST
17807: PPUSH
17808: CALL 8075 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17812: LD_INT 3
17814: PPUSH
17815: LD_INT 51
17817: PPUSH
17818: LD_INT 6
17820: PPUSH
17821: CALL 8764 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17825: LD_INT 2
17827: PPUSH
17828: CALL_OW 303
17832: PUSH
17833: LD_INT 2
17835: PPUSH
17836: CALL_OW 255
17840: PUSH
17841: LD_INT 1
17843: EQUAL
17844: OR
17845: IFFALSE 17859
// DefendDepot ( 3 , rudepo ) else
17847: LD_INT 3
17849: PPUSH
17850: LD_INT 2
17852: PPUSH
17853: CALL 8591 0 2
17857: GO 17869
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17859: LD_INT 3
17861: PPUSH
17862: LD_INT 10
17864: PPUSH
17865: CALL 8882 0 2
// end ;
17869: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17870: LD_INT 22
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 21
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 55
17892: PUSH
17893: EMPTY
17894: LIST
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: LD_INT 34
17901: PUSH
17902: LD_INT 51
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: PUSH
17924: LD_INT 0
17926: EQUAL
17927: PUSH
17928: LD_INT 21
17930: PPUSH
17931: CALL_OW 255
17935: PUSH
17936: LD_INT 3
17938: EQUAL
17939: AND
17940: PUSH
17941: LD_INT 21
17943: PPUSH
17944: CALL_OW 302
17948: AND
17949: PUSH
17950: LD_INT 2
17952: PPUSH
17953: CALL_OW 255
17957: PUSH
17958: LD_INT 3
17960: EQUAL
17961: AND
17962: PUSH
17963: LD_INT 2
17965: PPUSH
17966: CALL_OW 302
17970: AND
17971: PUSH
17972: LD_INT 21
17974: PPUSH
17975: CALL_OW 313
17979: AND
17980: PUSH
17981: LD_EXP 47
17985: PUSH
17986: LD_INT 4
17988: PUSH
17989: LD_INT 5
17991: PUSH
17992: LD_INT 6
17994: PUSH
17995: LD_INT 6
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: LD_OWVAR 67
18008: ARRAY
18009: LESS
18010: AND
18011: IFFALSE 18232
18013: GO 18015
18015: DISABLE
// begin enable ;
18016: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18017: LD_INT 2
18019: PPUSH
18020: CALL_OW 274
18024: PPUSH
18025: LD_INT 1
18027: PPUSH
18028: LD_INT 2000
18030: PPUSH
18031: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18035: LD_INT 3
18037: PPUSH
18038: LD_INT 21
18040: PPUSH
18041: LD_INT 4
18043: PUSH
18044: LD_INT 5
18046: PUSH
18047: LD_INT 6
18049: PUSH
18050: LD_INT 6
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: LD_OWVAR 67
18063: ARRAY
18064: PUSH
18065: LD_EXP 47
18069: MINUS
18070: PPUSH
18071: LD_INT 43
18073: PUSH
18074: LD_INT 43
18076: PUSH
18077: LD_INT 44
18079: PUSH
18080: LD_INT 44
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 43
18091: PUSH
18092: LD_INT 43
18094: PUSH
18095: LD_INT 43
18097: PUSH
18098: LD_INT 44
18100: PUSH
18101: LD_INT 44
18103: PUSH
18104: LD_INT 46
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 43
18117: PUSH
18118: LD_INT 43
18120: PUSH
18121: LD_INT 43
18123: PUSH
18124: LD_INT 44
18126: PUSH
18127: LD_INT 44
18129: PUSH
18130: LD_INT 46
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 43
18143: PUSH
18144: LD_INT 43
18146: PUSH
18147: LD_INT 44
18149: PUSH
18150: LD_INT 46
18152: PUSH
18153: LD_INT 46
18155: PUSH
18156: LD_INT 46
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: PUSH
18173: LD_OWVAR 67
18177: ARRAY
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_INT 24
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: PPUSH
18201: LD_INT 2
18203: PPUSH
18204: CALL_OW 12
18208: ARRAY
18209: PUSH
18210: LD_INT 24
18212: PUSH
18213: LD_INT 24
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_OWVAR 67
18226: ARRAY
18227: PPUSH
18228: CALL 7554 0 7
// end ;
18232: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18233: LD_INT 17
18235: PPUSH
18236: CALL_OW 255
18240: PUSH
18241: LD_INT 3
18243: EQUAL
18244: PUSH
18245: LD_INT 17
18247: PPUSH
18248: CALL_OW 302
18252: AND
18253: PUSH
18254: LD_INT 2
18256: PPUSH
18257: CALL_OW 255
18261: PUSH
18262: LD_INT 3
18264: EQUAL
18265: AND
18266: PUSH
18267: LD_INT 2
18269: PPUSH
18270: CALL_OW 302
18274: AND
18275: PUSH
18276: LD_EXP 47
18280: PUSH
18281: LD_INT 4
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: LD_INT 6
18289: PUSH
18290: LD_INT 7
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: LD_OWVAR 67
18303: ARRAY
18304: LESS
18305: AND
18306: IFFALSE 18354
18308: GO 18310
18310: DISABLE
// begin enable ;
18311: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18312: LD_INT 17
18314: PPUSH
18315: LD_INT 22
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 42
18326: PUSH
18327: LD_INT 43
18329: PUSH
18330: LD_INT 44
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PPUSH
18341: LD_INT 3
18343: PPUSH
18344: CALL_OW 12
18348: ARRAY
18349: PPUSH
18350: CALL_OW 185
// end ;
18354: END
// every 2 2$0 do var i , j ;
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18362: LD_INT 14700
18364: PUSH
18365: LD_INT 33600
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PPUSH
18375: LD_INT 2
18377: PPUSH
18378: CALL_OW 12
18382: ARRAY
18383: PPUSH
18384: CALL_OW 67
// disableHealAI = 1 ;
18388: LD_ADDR_EXP 33
18392: PUSH
18393: LD_INT 1
18395: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 25
18413: PUSH
18414: LD_INT 4
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PPUSH
18425: CALL_OW 69
18429: PUSH
18430: FOR_IN
18431: IFFALSE 18444
// ComExitBuilding ( i ) ;
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 122
18442: GO 18430
18444: POP
18445: POP
// wait ( 0 0$1 ) ;
18446: LD_INT 35
18448: PPUSH
18449: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18453: LD_INT 35
18455: PPUSH
18456: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: LD_INT 22
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 4
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18572
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_INT 17
18504: PPUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 25
18517: PUSH
18518: LD_INT 12
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 70
18533: PUSH
18534: FOR_IN
18535: IFFALSE 18568
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: LD_VAR 0 2
18546: PPUSH
18547: CALL_OW 250
18551: PPUSH
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL_OW 251
18561: PPUSH
18562: CALL_OW 191
18566: GO 18534
18568: POP
18569: POP
18570: GO 18494
18572: POP
18573: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18574: LD_INT 22
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 4
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: CALL_OW 69
18602: PUSH
18603: LD_INT 0
18605: EQUAL
18606: PUSH
18607: LD_EXP 32
18611: PUSH
18612: LD_INT 6
18614: PUSH
18615: LD_INT 7
18617: PUSH
18618: LD_INT 8
18620: PUSH
18621: LD_INT 8
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: LD_OWVAR 67
18634: ARRAY
18635: GREATEREQUAL
18636: OR
18637: PUSH
18638: LD_INT 17
18640: PPUSH
18641: LD_INT 22
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 25
18653: PUSH
18654: LD_INT 12
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 70
18669: PUSH
18670: LD_INT 0
18672: EQUAL
18673: OR
18674: IFFALSE 18453
// disableHealAI = 0 ;
18676: LD_ADDR_EXP 33
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: LD_INT 22
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 12
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18735
// SetClass ( i , 16 ) ;
18721: LD_VAR 0 1
18725: PPUSH
18726: LD_INT 16
18728: PPUSH
18729: CALL_OW 336
18733: GO 18718
18735: POP
18736: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 25
18754: PUSH
18755: LD_INT 4
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PPUSH
18766: CALL_OW 69
18770: PUSH
18771: FOR_IN
18772: IFFALSE 18788
// ComEnterUnit ( i , rulab ) ;
18774: LD_VAR 0 1
18778: PPUSH
18779: LD_INT 32
18781: PPUSH
18782: CALL_OW 120
18786: GO 18771
18788: POP
18789: POP
// end ; end_of_file
18790: PPOPN 2
18792: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18793: LD_EXP 26
18797: PUSH
18798: LD_INT 0
18800: LESSEQUAL
18801: IFFALSE 18955
18803: GO 18805
18805: DISABLE
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18811: LD_ADDR_VAR 0 2
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 21
18828: PUSH
18829: LD_INT 3
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 30
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ST_TO_ADDR
// for i in tmp do
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: FOR_IN
18885: IFFALSE 18918
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18887: LD_ADDR_VAR 0 3
18891: PUSH
18892: LD_VAR 0 3
18896: PUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 274
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 275
18914: PLUS
18915: ST_TO_ADDR
18916: GO 18884
18918: POP
18919: POP
// if yourCrates >= needCrates then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_EXP 25
18929: GREATEREQUAL
18930: IFFALSE 18948
// FinishMission ( yourCrates , needCrates ) else
18932: LD_VAR 0 3
18936: PPUSH
18937: LD_EXP 25
18941: PPUSH
18942: CALL 18958 0 2
18946: GO 18955
// YouLost ( matmin ) ;
18948: LD_STRING matmin
18950: PPUSH
18951: CALL_OW 104
// end ;
18955: PPOPN 3
18957: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18958: LD_INT 0
18960: PPUSH
18961: PPUSH
18962: PPUSH
18963: PPUSH
// if killCounter = 0 then
18964: LD_EXP 45
18968: PUSH
18969: LD_INT 0
18971: EQUAL
18972: IFFALSE 18981
// SetAchievement ( ACH_SURV ) ;
18974: LD_STRING ACH_SURV
18976: PPUSH
18977: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18981: LD_INT 22
18983: PUSH
18984: LD_INT 3
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: PUSH
19010: LD_INT 0
19012: EQUAL
19013: IFFALSE 19029
// begin wait ( 3 ) ;
19015: LD_INT 3
19017: PPUSH
19018: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19022: LD_STRING ACH_BASEDESTROYER
19024: PPUSH
19025: CALL_OW 543
// end ; m1 := false ;
19029: LD_ADDR_VAR 0 4
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// m2 := false ;
19037: LD_ADDR_VAR 0 5
19041: PUSH
19042: LD_INT 0
19044: ST_TO_ADDR
// m3 := false ;
19045: LD_ADDR_VAR 0 6
19049: PUSH
19050: LD_INT 0
19052: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 100
19060: PUSH
19061: LD_INT 140
19063: PUSH
19064: LD_INT 180
19066: PUSH
19067: LD_INT 220
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: LD_OWVAR 67
19080: ARRAY
19081: PLUS
19082: PUSH
19083: LD_VAR 0 2
19087: GREATER
19088: IFFALSE 19120
// begin AddMedal ( cans , 1 ) ;
19090: LD_STRING cans
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19100: LD_INT 1
19102: PPUSH
19103: LD_STRING 06_crates_1
19105: PPUSH
19106: CALL_OW 39
// m1 := true ;
19110: LD_ADDR_VAR 0 4
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// end else
19118: GO 19141
// begin AddMedal ( cans , - 1 ) ;
19120: LD_STRING cans
19122: PPUSH
19123: LD_INT 1
19125: NEG
19126: PPUSH
19127: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19131: LD_INT 0
19133: PPUSH
19134: LD_STRING 06_crates_1
19136: PPUSH
19137: CALL_OW 39
// end ; if unitLost < 3 then
19141: LD_EXP 30
19145: PUSH
19146: LD_INT 3
19148: LESS
19149: IFFALSE 19171
// begin AddMedal ( people , 1 ) ;
19151: LD_STRING people
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 101
// m2 := true ;
19161: LD_ADDR_VAR 0 5
19165: PUSH
19166: LD_INT 1
19168: ST_TO_ADDR
// end else
19169: GO 19182
// AddMedal ( people , - 1 ) ;
19171: LD_STRING people
19173: PPUSH
19174: LD_INT 1
19176: NEG
19177: PPUSH
19178: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19182: LD_EXP 28
19186: PPUSH
19187: LD_STRING 06_remoteVehs_1
19189: PPUSH
19190: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19194: LD_EXP 28
19198: PUSH
19199: LD_INT 1
19201: EQUAL
19202: IFFALSE 19224
// begin AddMedal ( remote , 1 ) ;
19204: LD_STRING remote
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 101
// m3 := true ;
19214: LD_ADDR_VAR 0 6
19218: PUSH
19219: LD_INT 1
19221: ST_TO_ADDR
// end else
19222: GO 19264
// begin if GetTech ( 18 , 1 ) = state_enabled then
19224: LD_INT 18
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 321
19234: PUSH
19235: LD_INT 1
19237: EQUAL
19238: IFFALSE 19253
// AddMedal ( remote , - 1 ) else
19240: LD_STRING remote
19242: PPUSH
19243: LD_INT 1
19245: NEG
19246: PPUSH
19247: CALL_OW 101
19251: GO 19264
// AddMedal ( remote , - 2 ) ;
19253: LD_STRING remote
19255: PPUSH
19256: LD_INT 2
19258: NEG
19259: PPUSH
19260: CALL_OW 101
// end ; if m1 and m2 and m3 then
19264: LD_VAR 0 4
19268: PUSH
19269: LD_VAR 0 5
19273: AND
19274: PUSH
19275: LD_VAR 0 6
19279: AND
19280: IFFALSE 19296
// begin wait ( 3 ) ;
19282: LD_INT 3
19284: PPUSH
19285: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19289: LD_STRING ACH_ASPEED_6
19291: PPUSH
19292: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19296: LD_OWVAR 67
19300: PUSH
19301: LD_INT 3
19303: GREATEREQUAL
19304: PUSH
19305: LD_VAR 0 4
19309: AND
19310: PUSH
19311: LD_VAR 0 5
19315: AND
19316: PUSH
19317: LD_VAR 0 6
19321: AND
19322: IFFALSE 19334
// SetAchievementEX ( ACH_AMER , 6 ) ;
19324: LD_STRING ACH_AMER
19326: PPUSH
19327: LD_INT 6
19329: PPUSH
19330: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19334: LD_EXP 20
19338: PPUSH
19339: LD_STRING 06_KurtStatus_1
19341: PPUSH
19342: CALL_OW 39
// GiveMedals ( Main ) ;
19346: LD_STRING Main
19348: PPUSH
19349: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19353: LD_INT 22
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 21
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 50
19375: PUSH
19376: EMPTY
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: LD_INT 25
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PPUSH
19440: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19444: LD_EXP 1
19448: PPUSH
19449: LD_EXP 42
19453: PUSH
19454: LD_STRING JMM
19456: STR
19457: PPUSH
19458: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19462: LD_EXP 2
19466: PPUSH
19467: LD_EXP 42
19471: PUSH
19472: LD_STRING Lisa
19474: STR
19475: PPUSH
19476: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19480: LD_EXP 3
19484: PPUSH
19485: LD_EXP 42
19489: PUSH
19490: LD_STRING Bobby
19492: STR
19493: PPUSH
19494: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19498: LD_EXP 4
19502: PPUSH
19503: LD_EXP 42
19507: PUSH
19508: LD_STRING Cyrus
19510: STR
19511: PPUSH
19512: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19516: LD_EXP 5
19520: PPUSH
19521: LD_EXP 42
19525: PUSH
19526: LD_STRING Frank
19528: STR
19529: PPUSH
19530: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19534: LD_EXP 6
19538: PPUSH
19539: LD_EXP 42
19543: PUSH
19544: LD_STRING Brown
19546: STR
19547: PPUSH
19548: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19552: LD_EXP 7
19556: PPUSH
19557: LD_EXP 42
19561: PUSH
19562: LD_STRING Donaldson
19564: STR
19565: PPUSH
19566: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19570: LD_EXP 8
19574: PPUSH
19575: LD_EXP 42
19579: PUSH
19580: LD_STRING Gladstone
19582: STR
19583: PPUSH
19584: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19588: LD_EXP 9
19592: PPUSH
19593: LD_EXP 42
19597: PUSH
19598: LD_STRING Denis
19600: STR
19601: PPUSH
19602: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19606: LD_EXP 15
19610: PPUSH
19611: LD_EXP 42
19615: PUSH
19616: LD_STRING Joan
19618: STR
19619: PPUSH
19620: CALL 6869 0 2
// if IsLive ( Joan ) then
19624: LD_EXP 15
19628: PPUSH
19629: CALL_OW 300
19633: IFFALSE 19647
// SaveCharacters ( Joan , Joan ) ;
19635: LD_EXP 15
19639: PPUSH
19640: LD_STRING Joan
19642: PPUSH
19643: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19647: LD_EXP 16
19651: PPUSH
19652: LD_STRING 06_JoanStatus_1
19654: PPUSH
19655: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19659: LD_INT 50
19661: PUSH
19662: EMPTY
19663: LIST
19664: PUSH
19665: LD_INT 22
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 25
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 25
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 4
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: PPUSH
19741: CALL_OW 69
19745: PUSH
19746: LD_EXP 1
19750: PUSH
19751: LD_EXP 2
19755: PUSH
19756: LD_EXP 3
19760: PUSH
19761: LD_EXP 4
19765: PUSH
19766: LD_EXP 5
19770: PUSH
19771: LD_EXP 6
19775: PUSH
19776: LD_EXP 7
19780: PUSH
19781: LD_EXP 8
19785: PUSH
19786: LD_EXP 9
19790: PUSH
19791: LD_EXP 15
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: DIFF
19808: PPUSH
19809: LD_STRING 06_other_survivors
19811: PPUSH
19812: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19816: LD_INT 50
19818: PUSH
19819: EMPTY
19820: LIST
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 21
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 12
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 16
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: PPUSH
19881: LD_STRING 06_other_apemans
19883: PPUSH
19884: CALL_OW 38
// YouWin ;
19888: CALL_OW 103
// end ; end_of_file
19892: LD_VAR 0 3
19896: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19897: LD_EXP 47
19901: PUSH
19902: LD_OWVAR 1
19906: PUSH
19907: LD_INT 23100
19909: PUSH
19910: LD_INT 21000
19912: PUSH
19913: LD_INT 18900
19915: PUSH
19916: LD_INT 16800
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: PUSH
19925: LD_OWVAR 67
19929: ARRAY
19930: GREATER
19931: AND
19932: IFFALSE 20268
19934: GO 19936
19936: DISABLE
19937: LD_INT 0
19939: PPUSH
19940: PPUSH
19941: PPUSH
19942: PPUSH
// begin enable ;
19943: ENABLE
// for i in ruAttackers do
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_EXP 47
19953: PUSH
19954: FOR_IN
19955: IFFALSE 20266
// begin if not IsDrivenBy ( i ) then
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 311
19966: NOT
19967: IFFALSE 19971
// continue ;
19969: GO 19954
// if i mod 2 = 0 then
19971: LD_VAR 0 1
19975: PUSH
19976: LD_INT 2
19978: MOD
19979: PUSH
19980: LD_INT 0
19982: EQUAL
19983: IFFALSE 20049
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
19985: LD_ADDR_VAR 0 3
19989: PUSH
19990: LD_INT 91
19992: PUSH
19993: LD_INT 52
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 82
20002: PUSH
20003: LD_INT 34
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 90
20012: PUSH
20013: LD_INT 26
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 86
20022: PUSH
20023: LD_INT 16
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 80
20032: PUSH
20033: LD_INT 12
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
20047: GO 20122
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20049: LD_ADDR_VAR 0 3
20053: PUSH
20054: LD_INT 91
20056: PUSH
20057: LD_INT 52
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 68
20066: PUSH
20067: LD_INT 46
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 48
20076: PUSH
20077: LD_INT 43
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 33
20086: PUSH
20087: LD_INT 34
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 30
20096: PUSH
20097: LD_INT 19
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 38
20106: PUSH
20107: LD_INT 16
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 256
20131: PUSH
20132: LD_INT 1000
20134: EQUAL
20135: IFFALSE 20153
// AgressiveMove ( i , path ) else
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_VAR 0 3
20146: PPUSH
20147: CALL 79589 0 2
20151: GO 20264
// if GetLives ( i ) < 650 then
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 256
20162: PUSH
20163: LD_INT 650
20165: LESS
20166: IFFALSE 20264
// begin if not IsInArea ( i , russianRepairArea ) then
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 12
20175: PPUSH
20176: CALL_OW 308
20180: NOT
20181: IFFALSE 20250
// begin SetTag ( i , 0 ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: LD_INT 0
20190: PPUSH
20191: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20195: LD_VAR 0 1
20199: PPUSH
20200: CALL_OW 261
20204: PUSH
20205: LD_INT 50
20207: LESS
20208: PUSH
20209: LD_INT 21
20211: PPUSH
20212: CALL_OW 302
20216: AND
20217: IFFALSE 20233
// ComMoveUnit ( i , rufab ) else
20219: LD_VAR 0 1
20223: PPUSH
20224: LD_INT 21
20226: PPUSH
20227: CALL_OW 112
20231: GO 20248
// ComMoveXY ( i , 121 , 99 ) ;
20233: LD_VAR 0 1
20237: PPUSH
20238: LD_INT 121
20240: PPUSH
20241: LD_INT 99
20243: PPUSH
20244: CALL_OW 111
// end else
20248: GO 20264
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 311
20259: PPUSH
20260: CALL 78685 0 1
// end ; end ;
20264: GO 19954
20266: POP
20267: POP
// end ;
20268: PPOPN 4
20270: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
20275: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: DOUBLE
20282: LD_INT 1
20284: DEC
20285: ST_TO_ADDR
20286: LD_INT 4
20288: PUSH
20289: LD_INT 5
20291: PUSH
20292: LD_INT 6
20294: PUSH
20295: LD_INT 6
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: LD_OWVAR 67
20308: ARRAY
20309: PUSH
20310: FOR_TO
20311: IFFALSE 20486
// begin uc_side := 3 ;
20313: LD_ADDR_OWVAR 20
20317: PUSH
20318: LD_INT 3
20320: ST_TO_ADDR
// uc_nation := 3 ;
20321: LD_ADDR_OWVAR 21
20325: PUSH
20326: LD_INT 3
20328: ST_TO_ADDR
// InitHC_All ( ) ;
20329: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20333: LD_INT 0
20335: PPUSH
20336: LD_INT 4
20338: PUSH
20339: LD_INT 5
20341: PUSH
20342: LD_INT 6
20344: PUSH
20345: LD_INT 6
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_OWVAR 67
20358: ARRAY
20359: PPUSH
20360: CALL_OW 381
// un := CreateHuman ;
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: CALL_OW 44
20373: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20374: LD_VAR 0 3
20378: PPUSH
20379: LD_INT 127
20381: PPUSH
20382: LD_INT 62
20384: PPUSH
20385: LD_INT 3
20387: PPUSH
20388: LD_INT 0
20390: PPUSH
20391: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20395: LD_ADDR_EXP 48
20399: PUSH
20400: LD_EXP 48
20404: PPUSH
20405: LD_EXP 48
20409: PUSH
20410: LD_INT 1
20412: PLUS
20413: PPUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 1
20423: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_INT 83
20431: PPUSH
20432: LD_INT 49
20434: PPUSH
20435: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_INT 49
20446: PPUSH
20447: LD_INT 43
20449: PPUSH
20450: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20454: LD_VAR 0 3
20458: PPUSH
20459: LD_INT 31
20461: PPUSH
20462: LD_INT 15
20464: PPUSH
20465: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20469: LD_VAR 0 3
20473: PPUSH
20474: LD_INT 63
20476: PPUSH
20477: LD_INT 9
20479: PPUSH
20480: CALL_OW 174
// end ;
20484: GO 20310
20486: POP
20487: POP
// end ; end_of_file
20488: LD_VAR 0 1
20492: RET
// export function CreateNature ; var i , un ; begin
20493: LD_INT 0
20495: PPUSH
20496: PPUSH
20497: PPUSH
// for i := 1 to Difficulty + 2 do
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: DOUBLE
20504: LD_INT 1
20506: DEC
20507: ST_TO_ADDR
20508: LD_OWVAR 67
20512: PUSH
20513: LD_INT 2
20515: PLUS
20516: PUSH
20517: FOR_TO
20518: IFFALSE 20627
// begin hc_sex := sex_male ;
20520: LD_ADDR_OWVAR 27
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// uc_side := 0 ;
20528: LD_ADDR_OWVAR 20
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// uc_nation := nation_nature ;
20536: LD_ADDR_OWVAR 21
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// hc_class := class_tiger ;
20544: LD_ADDR_OWVAR 28
20548: PUSH
20549: LD_INT 14
20551: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20552: LD_ADDR_OWVAR 31
20556: PUSH
20557: LD_EXP 35
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20577: LD_ADDR_OWVAR 35
20581: PUSH
20582: LD_INT 5
20584: NEG
20585: PPUSH
20586: LD_INT 5
20588: PPUSH
20589: CALL_OW 12
20593: PUSH
20594: LD_OWVAR 67
20598: MUL
20599: ST_TO_ADDR
// un := CreateHuman ;
20600: LD_ADDR_VAR 0 3
20604: PUSH
20605: CALL_OW 44
20609: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20610: LD_VAR 0 3
20614: PPUSH
20615: LD_INT 18
20617: PPUSH
20618: LD_INT 0
20620: PPUSH
20621: CALL_OW 49
// end ;
20625: GO 20517
20627: POP
20628: POP
// for i = 1 to rand ( 3 , 4 ) do
20629: LD_ADDR_VAR 0 2
20633: PUSH
20634: DOUBLE
20635: LD_INT 1
20637: DEC
20638: ST_TO_ADDR
20639: LD_INT 3
20641: PPUSH
20642: LD_INT 4
20644: PPUSH
20645: CALL_OW 12
20649: PUSH
20650: FOR_TO
20651: IFFALSE 20721
// begin hc_class := class_phororhacos ;
20653: LD_ADDR_OWVAR 28
20657: PUSH
20658: LD_INT 18
20660: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20661: LD_ADDR_OWVAR 31
20665: PUSH
20666: LD_EXP 35
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: ST_TO_ADDR
// hc_agressivity := 0 ;
20686: LD_ADDR_OWVAR 35
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// un = CreateHuman ;
20694: LD_ADDR_VAR 0 3
20698: PUSH
20699: CALL_OW 44
20703: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20704: LD_VAR 0 3
20708: PPUSH
20709: LD_INT 18
20711: PPUSH
20712: LD_INT 0
20714: PPUSH
20715: CALL_OW 49
// end ;
20719: GO 20650
20721: POP
20722: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: DOUBLE
20729: LD_INT 1
20731: DEC
20732: ST_TO_ADDR
20733: LD_INT 1
20735: PPUSH
20736: LD_INT 3
20738: PPUSH
20739: CALL_OW 12
20743: PUSH
20744: LD_OWVAR 67
20748: PLUS
20749: PUSH
20750: FOR_TO
20751: IFFALSE 20888
// begin hc_class := class_apeman ;
20753: LD_ADDR_OWVAR 28
20757: PUSH
20758: LD_INT 12
20760: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20761: LD_ADDR_OWVAR 31
20765: PUSH
20766: LD_INT 2
20768: PPUSH
20769: LD_INT 5
20771: PPUSH
20772: CALL_OW 12
20776: PUSH
20777: LD_INT 0
20779: PPUSH
20780: LD_INT 2
20782: PPUSH
20783: CALL_OW 12
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20800: LD_ADDR_OWVAR 35
20804: PUSH
20805: LD_INT 0
20807: PPUSH
20808: LD_INT 10
20810: PPUSH
20811: CALL_OW 12
20815: PUSH
20816: LD_INT 10
20818: PPUSH
20819: LD_INT 20
20821: PPUSH
20822: CALL_OW 12
20826: PUSH
20827: LD_INT 20
20829: PPUSH
20830: LD_INT 25
20832: PPUSH
20833: CALL_OW 12
20837: PUSH
20838: LD_INT 20
20840: PPUSH
20841: LD_INT 30
20843: PPUSH
20844: CALL_OW 12
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_OWVAR 67
20859: ARRAY
20860: ST_TO_ADDR
// un := CreateHuman ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: CALL_OW 44
20870: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20871: LD_VAR 0 3
20875: PPUSH
20876: LD_INT 19
20878: PPUSH
20879: LD_INT 0
20881: PPUSH
20882: CALL_OW 49
// end ;
20886: GO 20750
20888: POP
20889: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20890: LD_ADDR_VAR 0 2
20894: PUSH
20895: DOUBLE
20896: LD_INT 1
20898: DEC
20899: ST_TO_ADDR
20900: LD_INT 5
20902: PPUSH
20903: LD_INT 6
20905: PPUSH
20906: CALL_OW 12
20910: PUSH
20911: LD_OWVAR 67
20915: PLUS
20916: PUSH
20917: FOR_TO
20918: IFFALSE 21002
// begin hc_class := class_apeman ;
20920: LD_ADDR_OWVAR 28
20924: PUSH
20925: LD_INT 12
20927: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20928: LD_ADDR_OWVAR 31
20932: PUSH
20933: LD_INT 2
20935: PPUSH
20936: LD_INT 5
20938: PPUSH
20939: CALL_OW 12
20943: PUSH
20944: LD_INT 0
20946: PPUSH
20947: LD_INT 2
20949: PPUSH
20950: CALL_OW 12
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: ST_TO_ADDR
// hc_agressivity := 0 ;
20967: LD_ADDR_OWVAR 35
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// un = CreateHuman ;
20975: LD_ADDR_VAR 0 3
20979: PUSH
20980: CALL_OW 44
20984: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 20
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 49
// end ;
21000: GO 20917
21002: POP
21003: POP
// end ; end_of_file
21004: LD_VAR 0 1
21008: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21009: LD_INT 0
21011: PPUSH
// ar_miner := 81 ;
21012: LD_ADDR_EXP 56
21016: PUSH
21017: LD_INT 81
21019: ST_TO_ADDR
// ar_crane := 88 ;
21020: LD_ADDR_EXP 55
21024: PUSH
21025: LD_INT 88
21027: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21028: LD_ADDR_EXP 50
21032: PUSH
21033: LD_INT 89
21035: ST_TO_ADDR
// us_hack := 99 ;
21036: LD_ADDR_EXP 51
21040: PUSH
21041: LD_INT 99
21043: ST_TO_ADDR
// us_artillery := 97 ;
21044: LD_ADDR_EXP 52
21048: PUSH
21049: LD_INT 97
21051: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21052: LD_ADDR_EXP 53
21056: PUSH
21057: LD_INT 91
21059: ST_TO_ADDR
// ar_mortar := 92 ;
21060: LD_ADDR_EXP 54
21064: PUSH
21065: LD_INT 92
21067: ST_TO_ADDR
// ru_flamethrower := 93 ;
21068: LD_ADDR_EXP 57
21072: PUSH
21073: LD_INT 93
21075: ST_TO_ADDR
// ru_radar := 98 ;
21076: LD_ADDR_EXP 49
21080: PUSH
21081: LD_INT 98
21083: ST_TO_ADDR
// tech_Artillery := 80 ;
21084: LD_ADDR_EXP 58
21088: PUSH
21089: LD_INT 80
21091: ST_TO_ADDR
// tech_RadMat := 81 ;
21092: LD_ADDR_EXP 59
21096: PUSH
21097: LD_INT 81
21099: ST_TO_ADDR
// tech_BasicTools := 82 ;
21100: LD_ADDR_EXP 60
21104: PUSH
21105: LD_INT 82
21107: ST_TO_ADDR
// tech_Cargo := 83 ;
21108: LD_ADDR_EXP 61
21112: PUSH
21113: LD_INT 83
21115: ST_TO_ADDR
// tech_Track := 84 ;
21116: LD_ADDR_EXP 62
21120: PUSH
21121: LD_INT 84
21123: ST_TO_ADDR
// tech_Crane := 85 ;
21124: LD_ADDR_EXP 63
21128: PUSH
21129: LD_INT 85
21131: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21132: LD_ADDR_EXP 64
21136: PUSH
21137: LD_INT 86
21139: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21140: LD_ADDR_EXP 65
21144: PUSH
21145: LD_INT 87
21147: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21148: LD_ADDR_EXP 66
21152: PUSH
21153: LD_INT 88
21155: ST_TO_ADDR
// class_mastodont := 31 ;
21156: LD_ADDR_EXP 67
21160: PUSH
21161: LD_INT 31
21163: ST_TO_ADDR
// class_horse := 21 ;
21164: LD_ADDR_EXP 68
21168: PUSH
21169: LD_INT 21
21171: ST_TO_ADDR
// end ;
21172: LD_VAR 0 1
21176: RET
// every 1 do
21177: GO 21179
21179: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21180: CALL 21009 0 0
21184: END
// every 0 0$1 do
21185: GO 21187
21187: DISABLE
// begin enable ;
21188: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21189: LD_STRING updateTimer(
21191: PUSH
21192: LD_OWVAR 1
21196: STR
21197: PUSH
21198: LD_STRING );
21200: STR
21201: PPUSH
21202: CALL_OW 559
// end ;
21206: END
// export function SOS_MapStart ( ) ; begin
21207: LD_INT 0
21209: PPUSH
// if streamModeActive then
21210: LD_EXP 69
21214: IFFALSE 21223
// DefineStreamItems ( true ) ;
21216: LD_INT 1
21218: PPUSH
21219: CALL 22873 0 1
// UpdateFactoryWaypoints ( ) ;
21223: CALL 36457 0 0
// end ;
21227: LD_VAR 0 1
21231: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21232: LD_INT 0
21234: PPUSH
// if p2 = 100 then
21235: LD_VAR 0 2
21239: PUSH
21240: LD_INT 100
21242: EQUAL
21243: IFFALSE 22246
// begin if not StreamModeActive then
21245: LD_EXP 69
21249: NOT
21250: IFFALSE 21260
// StreamModeActive := true ;
21252: LD_ADDR_EXP 69
21256: PUSH
21257: LD_INT 1
21259: ST_TO_ADDR
// if p3 = 0 then
21260: LD_VAR 0 3
21264: PUSH
21265: LD_INT 0
21267: EQUAL
21268: IFFALSE 21274
// InitStreamMode ;
21270: CALL 22409 0 0
// if p3 = 1 then
21274: LD_VAR 0 3
21278: PUSH
21279: LD_INT 1
21281: EQUAL
21282: IFFALSE 21292
// sRocket := true ;
21284: LD_ADDR_EXP 74
21288: PUSH
21289: LD_INT 1
21291: ST_TO_ADDR
// if p3 = 2 then
21292: LD_VAR 0 3
21296: PUSH
21297: LD_INT 2
21299: EQUAL
21300: IFFALSE 21310
// sSpeed := true ;
21302: LD_ADDR_EXP 73
21306: PUSH
21307: LD_INT 1
21309: ST_TO_ADDR
// if p3 = 3 then
21310: LD_VAR 0 3
21314: PUSH
21315: LD_INT 3
21317: EQUAL
21318: IFFALSE 21328
// sEngine := true ;
21320: LD_ADDR_EXP 75
21324: PUSH
21325: LD_INT 1
21327: ST_TO_ADDR
// if p3 = 4 then
21328: LD_VAR 0 3
21332: PUSH
21333: LD_INT 4
21335: EQUAL
21336: IFFALSE 21346
// sSpec := true ;
21338: LD_ADDR_EXP 72
21342: PUSH
21343: LD_INT 1
21345: ST_TO_ADDR
// if p3 = 5 then
21346: LD_VAR 0 3
21350: PUSH
21351: LD_INT 5
21353: EQUAL
21354: IFFALSE 21364
// sLevel := true ;
21356: LD_ADDR_EXP 76
21360: PUSH
21361: LD_INT 1
21363: ST_TO_ADDR
// if p3 = 6 then
21364: LD_VAR 0 3
21368: PUSH
21369: LD_INT 6
21371: EQUAL
21372: IFFALSE 21382
// sArmoury := true ;
21374: LD_ADDR_EXP 77
21378: PUSH
21379: LD_INT 1
21381: ST_TO_ADDR
// if p3 = 7 then
21382: LD_VAR 0 3
21386: PUSH
21387: LD_INT 7
21389: EQUAL
21390: IFFALSE 21400
// sRadar := true ;
21392: LD_ADDR_EXP 78
21396: PUSH
21397: LD_INT 1
21399: ST_TO_ADDR
// if p3 = 8 then
21400: LD_VAR 0 3
21404: PUSH
21405: LD_INT 8
21407: EQUAL
21408: IFFALSE 21418
// sBunker := true ;
21410: LD_ADDR_EXP 79
21414: PUSH
21415: LD_INT 1
21417: ST_TO_ADDR
// if p3 = 9 then
21418: LD_VAR 0 3
21422: PUSH
21423: LD_INT 9
21425: EQUAL
21426: IFFALSE 21436
// sHack := true ;
21428: LD_ADDR_EXP 80
21432: PUSH
21433: LD_INT 1
21435: ST_TO_ADDR
// if p3 = 10 then
21436: LD_VAR 0 3
21440: PUSH
21441: LD_INT 10
21443: EQUAL
21444: IFFALSE 21454
// sFire := true ;
21446: LD_ADDR_EXP 81
21450: PUSH
21451: LD_INT 1
21453: ST_TO_ADDR
// if p3 = 11 then
21454: LD_VAR 0 3
21458: PUSH
21459: LD_INT 11
21461: EQUAL
21462: IFFALSE 21472
// sRefresh := true ;
21464: LD_ADDR_EXP 82
21468: PUSH
21469: LD_INT 1
21471: ST_TO_ADDR
// if p3 = 12 then
21472: LD_VAR 0 3
21476: PUSH
21477: LD_INT 12
21479: EQUAL
21480: IFFALSE 21490
// sExp := true ;
21482: LD_ADDR_EXP 83
21486: PUSH
21487: LD_INT 1
21489: ST_TO_ADDR
// if p3 = 13 then
21490: LD_VAR 0 3
21494: PUSH
21495: LD_INT 13
21497: EQUAL
21498: IFFALSE 21508
// sDepot := true ;
21500: LD_ADDR_EXP 84
21504: PUSH
21505: LD_INT 1
21507: ST_TO_ADDR
// if p3 = 14 then
21508: LD_VAR 0 3
21512: PUSH
21513: LD_INT 14
21515: EQUAL
21516: IFFALSE 21526
// sFlag := true ;
21518: LD_ADDR_EXP 85
21522: PUSH
21523: LD_INT 1
21525: ST_TO_ADDR
// if p3 = 15 then
21526: LD_VAR 0 3
21530: PUSH
21531: LD_INT 15
21533: EQUAL
21534: IFFALSE 21544
// sKamikadze := true ;
21536: LD_ADDR_EXP 93
21540: PUSH
21541: LD_INT 1
21543: ST_TO_ADDR
// if p3 = 16 then
21544: LD_VAR 0 3
21548: PUSH
21549: LD_INT 16
21551: EQUAL
21552: IFFALSE 21562
// sTroll := true ;
21554: LD_ADDR_EXP 94
21558: PUSH
21559: LD_INT 1
21561: ST_TO_ADDR
// if p3 = 17 then
21562: LD_VAR 0 3
21566: PUSH
21567: LD_INT 17
21569: EQUAL
21570: IFFALSE 21580
// sSlow := true ;
21572: LD_ADDR_EXP 95
21576: PUSH
21577: LD_INT 1
21579: ST_TO_ADDR
// if p3 = 18 then
21580: LD_VAR 0 3
21584: PUSH
21585: LD_INT 18
21587: EQUAL
21588: IFFALSE 21598
// sLack := true ;
21590: LD_ADDR_EXP 96
21594: PUSH
21595: LD_INT 1
21597: ST_TO_ADDR
// if p3 = 19 then
21598: LD_VAR 0 3
21602: PUSH
21603: LD_INT 19
21605: EQUAL
21606: IFFALSE 21616
// sTank := true ;
21608: LD_ADDR_EXP 98
21612: PUSH
21613: LD_INT 1
21615: ST_TO_ADDR
// if p3 = 20 then
21616: LD_VAR 0 3
21620: PUSH
21621: LD_INT 20
21623: EQUAL
21624: IFFALSE 21634
// sRemote := true ;
21626: LD_ADDR_EXP 99
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// if p3 = 21 then
21634: LD_VAR 0 3
21638: PUSH
21639: LD_INT 21
21641: EQUAL
21642: IFFALSE 21652
// sPowell := true ;
21644: LD_ADDR_EXP 100
21648: PUSH
21649: LD_INT 1
21651: ST_TO_ADDR
// if p3 = 22 then
21652: LD_VAR 0 3
21656: PUSH
21657: LD_INT 22
21659: EQUAL
21660: IFFALSE 21670
// sTeleport := true ;
21662: LD_ADDR_EXP 103
21666: PUSH
21667: LD_INT 1
21669: ST_TO_ADDR
// if p3 = 23 then
21670: LD_VAR 0 3
21674: PUSH
21675: LD_INT 23
21677: EQUAL
21678: IFFALSE 21688
// sOilTower := true ;
21680: LD_ADDR_EXP 105
21684: PUSH
21685: LD_INT 1
21687: ST_TO_ADDR
// if p3 = 24 then
21688: LD_VAR 0 3
21692: PUSH
21693: LD_INT 24
21695: EQUAL
21696: IFFALSE 21706
// sShovel := true ;
21698: LD_ADDR_EXP 106
21702: PUSH
21703: LD_INT 1
21705: ST_TO_ADDR
// if p3 = 25 then
21706: LD_VAR 0 3
21710: PUSH
21711: LD_INT 25
21713: EQUAL
21714: IFFALSE 21724
// sSheik := true ;
21716: LD_ADDR_EXP 107
21720: PUSH
21721: LD_INT 1
21723: ST_TO_ADDR
// if p3 = 26 then
21724: LD_VAR 0 3
21728: PUSH
21729: LD_INT 26
21731: EQUAL
21732: IFFALSE 21742
// sEarthquake := true ;
21734: LD_ADDR_EXP 109
21738: PUSH
21739: LD_INT 1
21741: ST_TO_ADDR
// if p3 = 27 then
21742: LD_VAR 0 3
21746: PUSH
21747: LD_INT 27
21749: EQUAL
21750: IFFALSE 21760
// sAI := true ;
21752: LD_ADDR_EXP 110
21756: PUSH
21757: LD_INT 1
21759: ST_TO_ADDR
// if p3 = 28 then
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 28
21767: EQUAL
21768: IFFALSE 21778
// sCargo := true ;
21770: LD_ADDR_EXP 113
21774: PUSH
21775: LD_INT 1
21777: ST_TO_ADDR
// if p3 = 29 then
21778: LD_VAR 0 3
21782: PUSH
21783: LD_INT 29
21785: EQUAL
21786: IFFALSE 21796
// sDLaser := true ;
21788: LD_ADDR_EXP 114
21792: PUSH
21793: LD_INT 1
21795: ST_TO_ADDR
// if p3 = 30 then
21796: LD_VAR 0 3
21800: PUSH
21801: LD_INT 30
21803: EQUAL
21804: IFFALSE 21814
// sExchange := true ;
21806: LD_ADDR_EXP 115
21810: PUSH
21811: LD_INT 1
21813: ST_TO_ADDR
// if p3 = 31 then
21814: LD_VAR 0 3
21818: PUSH
21819: LD_INT 31
21821: EQUAL
21822: IFFALSE 21832
// sFac := true ;
21824: LD_ADDR_EXP 116
21828: PUSH
21829: LD_INT 1
21831: ST_TO_ADDR
// if p3 = 32 then
21832: LD_VAR 0 3
21836: PUSH
21837: LD_INT 32
21839: EQUAL
21840: IFFALSE 21850
// sPower := true ;
21842: LD_ADDR_EXP 117
21846: PUSH
21847: LD_INT 1
21849: ST_TO_ADDR
// if p3 = 33 then
21850: LD_VAR 0 3
21854: PUSH
21855: LD_INT 33
21857: EQUAL
21858: IFFALSE 21868
// sRandom := true ;
21860: LD_ADDR_EXP 118
21864: PUSH
21865: LD_INT 1
21867: ST_TO_ADDR
// if p3 = 34 then
21868: LD_VAR 0 3
21872: PUSH
21873: LD_INT 34
21875: EQUAL
21876: IFFALSE 21886
// sShield := true ;
21878: LD_ADDR_EXP 119
21882: PUSH
21883: LD_INT 1
21885: ST_TO_ADDR
// if p3 = 35 then
21886: LD_VAR 0 3
21890: PUSH
21891: LD_INT 35
21893: EQUAL
21894: IFFALSE 21904
// sTime := true ;
21896: LD_ADDR_EXP 120
21900: PUSH
21901: LD_INT 1
21903: ST_TO_ADDR
// if p3 = 36 then
21904: LD_VAR 0 3
21908: PUSH
21909: LD_INT 36
21911: EQUAL
21912: IFFALSE 21922
// sTools := true ;
21914: LD_ADDR_EXP 121
21918: PUSH
21919: LD_INT 1
21921: ST_TO_ADDR
// if p3 = 101 then
21922: LD_VAR 0 3
21926: PUSH
21927: LD_INT 101
21929: EQUAL
21930: IFFALSE 21940
// sSold := true ;
21932: LD_ADDR_EXP 86
21936: PUSH
21937: LD_INT 1
21939: ST_TO_ADDR
// if p3 = 102 then
21940: LD_VAR 0 3
21944: PUSH
21945: LD_INT 102
21947: EQUAL
21948: IFFALSE 21958
// sDiff := true ;
21950: LD_ADDR_EXP 87
21954: PUSH
21955: LD_INT 1
21957: ST_TO_ADDR
// if p3 = 103 then
21958: LD_VAR 0 3
21962: PUSH
21963: LD_INT 103
21965: EQUAL
21966: IFFALSE 21976
// sFog := true ;
21968: LD_ADDR_EXP 90
21972: PUSH
21973: LD_INT 1
21975: ST_TO_ADDR
// if p3 = 104 then
21976: LD_VAR 0 3
21980: PUSH
21981: LD_INT 104
21983: EQUAL
21984: IFFALSE 21994
// sReset := true ;
21986: LD_ADDR_EXP 91
21990: PUSH
21991: LD_INT 1
21993: ST_TO_ADDR
// if p3 = 105 then
21994: LD_VAR 0 3
21998: PUSH
21999: LD_INT 105
22001: EQUAL
22002: IFFALSE 22012
// sSun := true ;
22004: LD_ADDR_EXP 92
22008: PUSH
22009: LD_INT 1
22011: ST_TO_ADDR
// if p3 = 106 then
22012: LD_VAR 0 3
22016: PUSH
22017: LD_INT 106
22019: EQUAL
22020: IFFALSE 22030
// sTiger := true ;
22022: LD_ADDR_EXP 88
22026: PUSH
22027: LD_INT 1
22029: ST_TO_ADDR
// if p3 = 107 then
22030: LD_VAR 0 3
22034: PUSH
22035: LD_INT 107
22037: EQUAL
22038: IFFALSE 22048
// sBomb := true ;
22040: LD_ADDR_EXP 89
22044: PUSH
22045: LD_INT 1
22047: ST_TO_ADDR
// if p3 = 108 then
22048: LD_VAR 0 3
22052: PUSH
22053: LD_INT 108
22055: EQUAL
22056: IFFALSE 22066
// sWound := true ;
22058: LD_ADDR_EXP 97
22062: PUSH
22063: LD_INT 1
22065: ST_TO_ADDR
// if p3 = 109 then
22066: LD_VAR 0 3
22070: PUSH
22071: LD_INT 109
22073: EQUAL
22074: IFFALSE 22084
// sBetray := true ;
22076: LD_ADDR_EXP 101
22080: PUSH
22081: LD_INT 1
22083: ST_TO_ADDR
// if p3 = 110 then
22084: LD_VAR 0 3
22088: PUSH
22089: LD_INT 110
22091: EQUAL
22092: IFFALSE 22102
// sContamin := true ;
22094: LD_ADDR_EXP 102
22098: PUSH
22099: LD_INT 1
22101: ST_TO_ADDR
// if p3 = 111 then
22102: LD_VAR 0 3
22106: PUSH
22107: LD_INT 111
22109: EQUAL
22110: IFFALSE 22120
// sOil := true ;
22112: LD_ADDR_EXP 104
22116: PUSH
22117: LD_INT 1
22119: ST_TO_ADDR
// if p3 = 112 then
22120: LD_VAR 0 3
22124: PUSH
22125: LD_INT 112
22127: EQUAL
22128: IFFALSE 22138
// sStu := true ;
22130: LD_ADDR_EXP 108
22134: PUSH
22135: LD_INT 1
22137: ST_TO_ADDR
// if p3 = 113 then
22138: LD_VAR 0 3
22142: PUSH
22143: LD_INT 113
22145: EQUAL
22146: IFFALSE 22156
// sBazooka := true ;
22148: LD_ADDR_EXP 111
22152: PUSH
22153: LD_INT 1
22155: ST_TO_ADDR
// if p3 = 114 then
22156: LD_VAR 0 3
22160: PUSH
22161: LD_INT 114
22163: EQUAL
22164: IFFALSE 22174
// sMortar := true ;
22166: LD_ADDR_EXP 112
22170: PUSH
22171: LD_INT 1
22173: ST_TO_ADDR
// if p3 = 115 then
22174: LD_VAR 0 3
22178: PUSH
22179: LD_INT 115
22181: EQUAL
22182: IFFALSE 22192
// sRanger := true ;
22184: LD_ADDR_EXP 122
22188: PUSH
22189: LD_INT 1
22191: ST_TO_ADDR
// if p3 = 116 then
22192: LD_VAR 0 3
22196: PUSH
22197: LD_INT 116
22199: EQUAL
22200: IFFALSE 22210
// sComputer := true ;
22202: LD_ADDR_EXP 123
22206: PUSH
22207: LD_INT 1
22209: ST_TO_ADDR
// if p3 = 117 then
22210: LD_VAR 0 3
22214: PUSH
22215: LD_INT 117
22217: EQUAL
22218: IFFALSE 22228
// s30 := true ;
22220: LD_ADDR_EXP 124
22224: PUSH
22225: LD_INT 1
22227: ST_TO_ADDR
// if p3 = 118 then
22228: LD_VAR 0 3
22232: PUSH
22233: LD_INT 118
22235: EQUAL
22236: IFFALSE 22246
// s60 := true ;
22238: LD_ADDR_EXP 125
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// end ; if p2 = 101 then
22246: LD_VAR 0 2
22250: PUSH
22251: LD_INT 101
22253: EQUAL
22254: IFFALSE 22382
// begin case p3 of 1 :
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 1
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22276
22269: POP
// hHackUnlimitedResources ; 2 :
22270: CALL 34480 0 0
22274: GO 22382
22276: LD_INT 2
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22291
22284: POP
// hHackSetLevel10 ; 3 :
22285: CALL 34613 0 0
22289: GO 22382
22291: LD_INT 3
22293: DOUBLE
22294: EQUAL
22295: IFTRUE 22299
22297: GO 22306
22299: POP
// hHackSetLevel10YourUnits ; 4 :
22300: CALL 34698 0 0
22304: GO 22382
22306: LD_INT 4
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22321
22314: POP
// hHackInvincible ; 5 :
22315: CALL 35146 0 0
22319: GO 22382
22321: LD_INT 5
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22336
22329: POP
// hHackInvisible ; 6 :
22330: CALL 35257 0 0
22334: GO 22382
22336: LD_INT 6
22338: DOUBLE
22339: EQUAL
22340: IFTRUE 22344
22342: GO 22351
22344: POP
// hHackChangeYourSide ; 7 :
22345: CALL 35314 0 0
22349: GO 22382
22351: LD_INT 7
22353: DOUBLE
22354: EQUAL
22355: IFTRUE 22359
22357: GO 22366
22359: POP
// hHackChangeUnitSide ; 8 :
22360: CALL 35356 0 0
22364: GO 22382
22366: LD_INT 8
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22381
22374: POP
// hHackFog ; end ;
22375: CALL 35457 0 0
22379: GO 22382
22381: POP
// end ; end ;
22382: LD_VAR 0 7
22386: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22387: GO 22389
22389: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22390: LD_STRING initStreamRollete();
22392: PPUSH
22393: CALL_OW 559
// InitStreamMode ;
22397: CALL 22409 0 0
// DefineStreamItems ( false ) ;
22401: LD_INT 0
22403: PPUSH
22404: CALL 22873 0 1
// end ;
22408: END
// function InitStreamMode ; begin
22409: LD_INT 0
22411: PPUSH
// streamModeActive := false ;
22412: LD_ADDR_EXP 69
22416: PUSH
22417: LD_INT 0
22419: ST_TO_ADDR
// normalCounter := 36 ;
22420: LD_ADDR_EXP 70
22424: PUSH
22425: LD_INT 36
22427: ST_TO_ADDR
// hardcoreCounter := 18 ;
22428: LD_ADDR_EXP 71
22432: PUSH
22433: LD_INT 18
22435: ST_TO_ADDR
// sRocket := false ;
22436: LD_ADDR_EXP 74
22440: PUSH
22441: LD_INT 0
22443: ST_TO_ADDR
// sSpeed := false ;
22444: LD_ADDR_EXP 73
22448: PUSH
22449: LD_INT 0
22451: ST_TO_ADDR
// sEngine := false ;
22452: LD_ADDR_EXP 75
22456: PUSH
22457: LD_INT 0
22459: ST_TO_ADDR
// sSpec := false ;
22460: LD_ADDR_EXP 72
22464: PUSH
22465: LD_INT 0
22467: ST_TO_ADDR
// sLevel := false ;
22468: LD_ADDR_EXP 76
22472: PUSH
22473: LD_INT 0
22475: ST_TO_ADDR
// sArmoury := false ;
22476: LD_ADDR_EXP 77
22480: PUSH
22481: LD_INT 0
22483: ST_TO_ADDR
// sRadar := false ;
22484: LD_ADDR_EXP 78
22488: PUSH
22489: LD_INT 0
22491: ST_TO_ADDR
// sBunker := false ;
22492: LD_ADDR_EXP 79
22496: PUSH
22497: LD_INT 0
22499: ST_TO_ADDR
// sHack := false ;
22500: LD_ADDR_EXP 80
22504: PUSH
22505: LD_INT 0
22507: ST_TO_ADDR
// sFire := false ;
22508: LD_ADDR_EXP 81
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// sRefresh := false ;
22516: LD_ADDR_EXP 82
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// sExp := false ;
22524: LD_ADDR_EXP 83
22528: PUSH
22529: LD_INT 0
22531: ST_TO_ADDR
// sDepot := false ;
22532: LD_ADDR_EXP 84
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
// sFlag := false ;
22540: LD_ADDR_EXP 85
22544: PUSH
22545: LD_INT 0
22547: ST_TO_ADDR
// sKamikadze := false ;
22548: LD_ADDR_EXP 93
22552: PUSH
22553: LD_INT 0
22555: ST_TO_ADDR
// sTroll := false ;
22556: LD_ADDR_EXP 94
22560: PUSH
22561: LD_INT 0
22563: ST_TO_ADDR
// sSlow := false ;
22564: LD_ADDR_EXP 95
22568: PUSH
22569: LD_INT 0
22571: ST_TO_ADDR
// sLack := false ;
22572: LD_ADDR_EXP 96
22576: PUSH
22577: LD_INT 0
22579: ST_TO_ADDR
// sTank := false ;
22580: LD_ADDR_EXP 98
22584: PUSH
22585: LD_INT 0
22587: ST_TO_ADDR
// sRemote := false ;
22588: LD_ADDR_EXP 99
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// sPowell := false ;
22596: LD_ADDR_EXP 100
22600: PUSH
22601: LD_INT 0
22603: ST_TO_ADDR
// sTeleport := false ;
22604: LD_ADDR_EXP 103
22608: PUSH
22609: LD_INT 0
22611: ST_TO_ADDR
// sOilTower := false ;
22612: LD_ADDR_EXP 105
22616: PUSH
22617: LD_INT 0
22619: ST_TO_ADDR
// sShovel := false ;
22620: LD_ADDR_EXP 106
22624: PUSH
22625: LD_INT 0
22627: ST_TO_ADDR
// sSheik := false ;
22628: LD_ADDR_EXP 107
22632: PUSH
22633: LD_INT 0
22635: ST_TO_ADDR
// sEarthquake := false ;
22636: LD_ADDR_EXP 109
22640: PUSH
22641: LD_INT 0
22643: ST_TO_ADDR
// sAI := false ;
22644: LD_ADDR_EXP 110
22648: PUSH
22649: LD_INT 0
22651: ST_TO_ADDR
// sCargo := false ;
22652: LD_ADDR_EXP 113
22656: PUSH
22657: LD_INT 0
22659: ST_TO_ADDR
// sDLaser := false ;
22660: LD_ADDR_EXP 114
22664: PUSH
22665: LD_INT 0
22667: ST_TO_ADDR
// sExchange := false ;
22668: LD_ADDR_EXP 115
22672: PUSH
22673: LD_INT 0
22675: ST_TO_ADDR
// sFac := false ;
22676: LD_ADDR_EXP 116
22680: PUSH
22681: LD_INT 0
22683: ST_TO_ADDR
// sPower := false ;
22684: LD_ADDR_EXP 117
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// sRandom := false ;
22692: LD_ADDR_EXP 118
22696: PUSH
22697: LD_INT 0
22699: ST_TO_ADDR
// sShield := false ;
22700: LD_ADDR_EXP 119
22704: PUSH
22705: LD_INT 0
22707: ST_TO_ADDR
// sTime := false ;
22708: LD_ADDR_EXP 120
22712: PUSH
22713: LD_INT 0
22715: ST_TO_ADDR
// sTools := false ;
22716: LD_ADDR_EXP 121
22720: PUSH
22721: LD_INT 0
22723: ST_TO_ADDR
// sSold := false ;
22724: LD_ADDR_EXP 86
22728: PUSH
22729: LD_INT 0
22731: ST_TO_ADDR
// sDiff := false ;
22732: LD_ADDR_EXP 87
22736: PUSH
22737: LD_INT 0
22739: ST_TO_ADDR
// sFog := false ;
22740: LD_ADDR_EXP 90
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// sReset := false ;
22748: LD_ADDR_EXP 91
22752: PUSH
22753: LD_INT 0
22755: ST_TO_ADDR
// sSun := false ;
22756: LD_ADDR_EXP 92
22760: PUSH
22761: LD_INT 0
22763: ST_TO_ADDR
// sTiger := false ;
22764: LD_ADDR_EXP 88
22768: PUSH
22769: LD_INT 0
22771: ST_TO_ADDR
// sBomb := false ;
22772: LD_ADDR_EXP 89
22776: PUSH
22777: LD_INT 0
22779: ST_TO_ADDR
// sWound := false ;
22780: LD_ADDR_EXP 97
22784: PUSH
22785: LD_INT 0
22787: ST_TO_ADDR
// sBetray := false ;
22788: LD_ADDR_EXP 101
22792: PUSH
22793: LD_INT 0
22795: ST_TO_ADDR
// sContamin := false ;
22796: LD_ADDR_EXP 102
22800: PUSH
22801: LD_INT 0
22803: ST_TO_ADDR
// sOil := false ;
22804: LD_ADDR_EXP 104
22808: PUSH
22809: LD_INT 0
22811: ST_TO_ADDR
// sStu := false ;
22812: LD_ADDR_EXP 108
22816: PUSH
22817: LD_INT 0
22819: ST_TO_ADDR
// sBazooka := false ;
22820: LD_ADDR_EXP 111
22824: PUSH
22825: LD_INT 0
22827: ST_TO_ADDR
// sMortar := false ;
22828: LD_ADDR_EXP 112
22832: PUSH
22833: LD_INT 0
22835: ST_TO_ADDR
// sRanger := false ;
22836: LD_ADDR_EXP 122
22840: PUSH
22841: LD_INT 0
22843: ST_TO_ADDR
// sComputer := false ;
22844: LD_ADDR_EXP 123
22848: PUSH
22849: LD_INT 0
22851: ST_TO_ADDR
// s30 := false ;
22852: LD_ADDR_EXP 124
22856: PUSH
22857: LD_INT 0
22859: ST_TO_ADDR
// s60 := false ;
22860: LD_ADDR_EXP 125
22864: PUSH
22865: LD_INT 0
22867: ST_TO_ADDR
// end ;
22868: LD_VAR 0 1
22872: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22873: LD_INT 0
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
// result := [ ] ;
22882: LD_ADDR_VAR 0 2
22886: PUSH
22887: EMPTY
22888: ST_TO_ADDR
// if campaign_id = 1 then
22889: LD_OWVAR 69
22893: PUSH
22894: LD_INT 1
22896: EQUAL
22897: IFFALSE 26063
// begin case mission_number of 1 :
22899: LD_OWVAR 70
22903: PUSH
22904: LD_INT 1
22906: DOUBLE
22907: EQUAL
22908: IFTRUE 22912
22910: GO 22988
22912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22913: LD_ADDR_VAR 0 2
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: LD_INT 4
22923: PUSH
22924: LD_INT 11
22926: PUSH
22927: LD_INT 12
22929: PUSH
22930: LD_INT 15
22932: PUSH
22933: LD_INT 16
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_INT 23
22941: PUSH
22942: LD_INT 26
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 101
22958: PUSH
22959: LD_INT 102
22961: PUSH
22962: LD_INT 106
22964: PUSH
22965: LD_INT 116
22967: PUSH
22968: LD_INT 117
22970: PUSH
22971: LD_INT 118
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: ST_TO_ADDR
22986: GO 26061
22988: LD_INT 2
22990: DOUBLE
22991: EQUAL
22992: IFTRUE 22996
22994: GO 23080
22996: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22997: LD_ADDR_VAR 0 2
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 4
23007: PUSH
23008: LD_INT 11
23010: PUSH
23011: LD_INT 12
23013: PUSH
23014: LD_INT 15
23016: PUSH
23017: LD_INT 16
23019: PUSH
23020: LD_INT 22
23022: PUSH
23023: LD_INT 23
23025: PUSH
23026: LD_INT 26
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 101
23042: PUSH
23043: LD_INT 102
23045: PUSH
23046: LD_INT 105
23048: PUSH
23049: LD_INT 106
23051: PUSH
23052: LD_INT 108
23054: PUSH
23055: LD_INT 116
23057: PUSH
23058: LD_INT 117
23060: PUSH
23061: LD_INT 118
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: ST_TO_ADDR
23078: GO 26061
23080: LD_INT 3
23082: DOUBLE
23083: EQUAL
23084: IFTRUE 23088
23086: GO 23176
23088: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23089: LD_ADDR_VAR 0 2
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 4
23099: PUSH
23100: LD_INT 5
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 12
23108: PUSH
23109: LD_INT 15
23111: PUSH
23112: LD_INT 16
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 26
23120: PUSH
23121: LD_INT 36
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 101
23138: PUSH
23139: LD_INT 102
23141: PUSH
23142: LD_INT 105
23144: PUSH
23145: LD_INT 106
23147: PUSH
23148: LD_INT 108
23150: PUSH
23151: LD_INT 116
23153: PUSH
23154: LD_INT 117
23156: PUSH
23157: LD_INT 118
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: ST_TO_ADDR
23174: GO 26061
23176: LD_INT 4
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23280
23184: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23185: LD_ADDR_VAR 0 2
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 4
23195: PUSH
23196: LD_INT 5
23198: PUSH
23199: LD_INT 8
23201: PUSH
23202: LD_INT 11
23204: PUSH
23205: LD_INT 12
23207: PUSH
23208: LD_INT 15
23210: PUSH
23211: LD_INT 16
23213: PUSH
23214: LD_INT 22
23216: PUSH
23217: LD_INT 23
23219: PUSH
23220: LD_INT 26
23222: PUSH
23223: LD_INT 36
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 101
23242: PUSH
23243: LD_INT 102
23245: PUSH
23246: LD_INT 105
23248: PUSH
23249: LD_INT 106
23251: PUSH
23252: LD_INT 108
23254: PUSH
23255: LD_INT 116
23257: PUSH
23258: LD_INT 117
23260: PUSH
23261: LD_INT 118
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: ST_TO_ADDR
23278: GO 26061
23280: LD_INT 5
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23400
23288: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 4
23299: PUSH
23300: LD_INT 5
23302: PUSH
23303: LD_INT 6
23305: PUSH
23306: LD_INT 8
23308: PUSH
23309: LD_INT 11
23311: PUSH
23312: LD_INT 12
23314: PUSH
23315: LD_INT 15
23317: PUSH
23318: LD_INT 16
23320: PUSH
23321: LD_INT 22
23323: PUSH
23324: LD_INT 23
23326: PUSH
23327: LD_INT 25
23329: PUSH
23330: LD_INT 26
23332: PUSH
23333: LD_INT 36
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 101
23354: PUSH
23355: LD_INT 102
23357: PUSH
23358: LD_INT 105
23360: PUSH
23361: LD_INT 106
23363: PUSH
23364: LD_INT 108
23366: PUSH
23367: LD_INT 109
23369: PUSH
23370: LD_INT 112
23372: PUSH
23373: LD_INT 116
23375: PUSH
23376: LD_INT 117
23378: PUSH
23379: LD_INT 118
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: ST_TO_ADDR
23398: GO 26061
23400: LD_INT 6
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23540
23408: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23409: LD_ADDR_VAR 0 2
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 4
23419: PUSH
23420: LD_INT 5
23422: PUSH
23423: LD_INT 6
23425: PUSH
23426: LD_INT 8
23428: PUSH
23429: LD_INT 11
23431: PUSH
23432: LD_INT 12
23434: PUSH
23435: LD_INT 15
23437: PUSH
23438: LD_INT 16
23440: PUSH
23441: LD_INT 20
23443: PUSH
23444: LD_INT 21
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_INT 23
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 26
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 31
23464: PUSH
23465: LD_INT 32
23467: PUSH
23468: LD_INT 36
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 101
23494: PUSH
23495: LD_INT 102
23497: PUSH
23498: LD_INT 105
23500: PUSH
23501: LD_INT 106
23503: PUSH
23504: LD_INT 108
23506: PUSH
23507: LD_INT 109
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 116
23515: PUSH
23516: LD_INT 117
23518: PUSH
23519: LD_INT 118
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: ST_TO_ADDR
23538: GO 26061
23540: LD_INT 7
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23660
23548: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23549: LD_ADDR_VAR 0 2
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: LD_INT 7
23565: PUSH
23566: LD_INT 11
23568: PUSH
23569: LD_INT 12
23571: PUSH
23572: LD_INT 15
23574: PUSH
23575: LD_INT 16
23577: PUSH
23578: LD_INT 20
23580: PUSH
23581: LD_INT 21
23583: PUSH
23584: LD_INT 22
23586: PUSH
23587: LD_INT 23
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 26
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 101
23614: PUSH
23615: LD_INT 102
23617: PUSH
23618: LD_INT 103
23620: PUSH
23621: LD_INT 105
23623: PUSH
23624: LD_INT 106
23626: PUSH
23627: LD_INT 108
23629: PUSH
23630: LD_INT 112
23632: PUSH
23633: LD_INT 116
23635: PUSH
23636: LD_INT 117
23638: PUSH
23639: LD_INT 118
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 26061
23660: LD_INT 8
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23808
23668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: LD_INT 4
23679: PUSH
23680: LD_INT 5
23682: PUSH
23683: LD_INT 6
23685: PUSH
23686: LD_INT 7
23688: PUSH
23689: LD_INT 8
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 20
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_INT 23
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: LD_INT 26
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 36
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 101
23758: PUSH
23759: LD_INT 102
23761: PUSH
23762: LD_INT 103
23764: PUSH
23765: LD_INT 105
23767: PUSH
23768: LD_INT 106
23770: PUSH
23771: LD_INT 108
23773: PUSH
23774: LD_INT 109
23776: PUSH
23777: LD_INT 112
23779: PUSH
23780: LD_INT 116
23782: PUSH
23783: LD_INT 117
23785: PUSH
23786: LD_INT 118
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: ST_TO_ADDR
23806: GO 26061
23808: LD_INT 9
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23816
23814: GO 23964
23816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23817: LD_ADDR_VAR 0 2
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 4
23827: PUSH
23828: LD_INT 5
23830: PUSH
23831: LD_INT 6
23833: PUSH
23834: LD_INT 7
23836: PUSH
23837: LD_INT 8
23839: PUSH
23840: LD_INT 11
23842: PUSH
23843: LD_INT 12
23845: PUSH
23846: LD_INT 15
23848: PUSH
23849: LD_INT 16
23851: PUSH
23852: LD_INT 20
23854: PUSH
23855: LD_INT 21
23857: PUSH
23858: LD_INT 22
23860: PUSH
23861: LD_INT 23
23863: PUSH
23864: LD_INT 25
23866: PUSH
23867: LD_INT 26
23869: PUSH
23870: LD_INT 28
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 31
23878: PUSH
23879: LD_INT 32
23881: PUSH
23882: LD_INT 36
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 101
23910: PUSH
23911: LD_INT 102
23913: PUSH
23914: LD_INT 103
23916: PUSH
23917: LD_INT 105
23919: PUSH
23920: LD_INT 106
23922: PUSH
23923: LD_INT 108
23925: PUSH
23926: LD_INT 109
23928: PUSH
23929: LD_INT 112
23931: PUSH
23932: LD_INT 114
23934: PUSH
23935: LD_INT 116
23937: PUSH
23938: LD_INT 117
23940: PUSH
23941: LD_INT 118
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: ST_TO_ADDR
23962: GO 26061
23964: LD_INT 10
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 24168
23972: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 4
23983: PUSH
23984: LD_INT 5
23986: PUSH
23987: LD_INT 6
23989: PUSH
23990: LD_INT 7
23992: PUSH
23993: LD_INT 8
23995: PUSH
23996: LD_INT 9
23998: PUSH
23999: LD_INT 10
24001: PUSH
24002: LD_INT 11
24004: PUSH
24005: LD_INT 12
24007: PUSH
24008: LD_INT 13
24010: PUSH
24011: LD_INT 14
24013: PUSH
24014: LD_INT 15
24016: PUSH
24017: LD_INT 16
24019: PUSH
24020: LD_INT 17
24022: PUSH
24023: LD_INT 18
24025: PUSH
24026: LD_INT 19
24028: PUSH
24029: LD_INT 20
24031: PUSH
24032: LD_INT 21
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_INT 23
24040: PUSH
24041: LD_INT 24
24043: PUSH
24044: LD_INT 25
24046: PUSH
24047: LD_INT 26
24049: PUSH
24050: LD_INT 28
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 31
24058: PUSH
24059: LD_INT 32
24061: PUSH
24062: LD_INT 36
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 101
24098: PUSH
24099: LD_INT 102
24101: PUSH
24102: LD_INT 103
24104: PUSH
24105: LD_INT 104
24107: PUSH
24108: LD_INT 105
24110: PUSH
24111: LD_INT 106
24113: PUSH
24114: LD_INT 107
24116: PUSH
24117: LD_INT 108
24119: PUSH
24120: LD_INT 109
24122: PUSH
24123: LD_INT 110
24125: PUSH
24126: LD_INT 111
24128: PUSH
24129: LD_INT 112
24131: PUSH
24132: LD_INT 114
24134: PUSH
24135: LD_INT 116
24137: PUSH
24138: LD_INT 117
24140: PUSH
24141: LD_INT 118
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: ST_TO_ADDR
24166: GO 26061
24168: LD_INT 11
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24380
24176: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: LD_INT 3
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: LD_INT 5
24193: PUSH
24194: LD_INT 6
24196: PUSH
24197: LD_INT 7
24199: PUSH
24200: LD_INT 8
24202: PUSH
24203: LD_INT 9
24205: PUSH
24206: LD_INT 10
24208: PUSH
24209: LD_INT 11
24211: PUSH
24212: LD_INT 12
24214: PUSH
24215: LD_INT 13
24217: PUSH
24218: LD_INT 14
24220: PUSH
24221: LD_INT 15
24223: PUSH
24224: LD_INT 16
24226: PUSH
24227: LD_INT 17
24229: PUSH
24230: LD_INT 18
24232: PUSH
24233: LD_INT 19
24235: PUSH
24236: LD_INT 20
24238: PUSH
24239: LD_INT 21
24241: PUSH
24242: LD_INT 22
24244: PUSH
24245: LD_INT 23
24247: PUSH
24248: LD_INT 24
24250: PUSH
24251: LD_INT 25
24253: PUSH
24254: LD_INT 26
24256: PUSH
24257: LD_INT 28
24259: PUSH
24260: LD_INT 30
24262: PUSH
24263: LD_INT 31
24265: PUSH
24266: LD_INT 32
24268: PUSH
24269: LD_INT 34
24271: PUSH
24272: LD_INT 36
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 101
24310: PUSH
24311: LD_INT 102
24313: PUSH
24314: LD_INT 103
24316: PUSH
24317: LD_INT 104
24319: PUSH
24320: LD_INT 105
24322: PUSH
24323: LD_INT 106
24325: PUSH
24326: LD_INT 107
24328: PUSH
24329: LD_INT 108
24331: PUSH
24332: LD_INT 109
24334: PUSH
24335: LD_INT 110
24337: PUSH
24338: LD_INT 111
24340: PUSH
24341: LD_INT 112
24343: PUSH
24344: LD_INT 114
24346: PUSH
24347: LD_INT 116
24349: PUSH
24350: LD_INT 117
24352: PUSH
24353: LD_INT 118
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: ST_TO_ADDR
24378: GO 26061
24380: LD_INT 12
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24608
24388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24389: LD_ADDR_VAR 0 2
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: LD_INT 6
24411: PUSH
24412: LD_INT 7
24414: PUSH
24415: LD_INT 8
24417: PUSH
24418: LD_INT 9
24420: PUSH
24421: LD_INT 10
24423: PUSH
24424: LD_INT 11
24426: PUSH
24427: LD_INT 12
24429: PUSH
24430: LD_INT 13
24432: PUSH
24433: LD_INT 14
24435: PUSH
24436: LD_INT 15
24438: PUSH
24439: LD_INT 16
24441: PUSH
24442: LD_INT 17
24444: PUSH
24445: LD_INT 18
24447: PUSH
24448: LD_INT 19
24450: PUSH
24451: LD_INT 20
24453: PUSH
24454: LD_INT 21
24456: PUSH
24457: LD_INT 22
24459: PUSH
24460: LD_INT 23
24462: PUSH
24463: LD_INT 24
24465: PUSH
24466: LD_INT 25
24468: PUSH
24469: LD_INT 26
24471: PUSH
24472: LD_INT 27
24474: PUSH
24475: LD_INT 28
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 101
24534: PUSH
24535: LD_INT 102
24537: PUSH
24538: LD_INT 103
24540: PUSH
24541: LD_INT 104
24543: PUSH
24544: LD_INT 105
24546: PUSH
24547: LD_INT 106
24549: PUSH
24550: LD_INT 107
24552: PUSH
24553: LD_INT 108
24555: PUSH
24556: LD_INT 109
24558: PUSH
24559: LD_INT 110
24561: PUSH
24562: LD_INT 111
24564: PUSH
24565: LD_INT 112
24567: PUSH
24568: LD_INT 113
24570: PUSH
24571: LD_INT 114
24573: PUSH
24574: LD_INT 116
24576: PUSH
24577: LD_INT 117
24579: PUSH
24580: LD_INT 118
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: ST_TO_ADDR
24606: GO 26061
24608: LD_INT 13
24610: DOUBLE
24611: EQUAL
24612: IFTRUE 24616
24614: GO 24824
24616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24617: LD_ADDR_VAR 0 2
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 4
24633: PUSH
24634: LD_INT 5
24636: PUSH
24637: LD_INT 8
24639: PUSH
24640: LD_INT 9
24642: PUSH
24643: LD_INT 10
24645: PUSH
24646: LD_INT 11
24648: PUSH
24649: LD_INT 12
24651: PUSH
24652: LD_INT 14
24654: PUSH
24655: LD_INT 15
24657: PUSH
24658: LD_INT 16
24660: PUSH
24661: LD_INT 17
24663: PUSH
24664: LD_INT 18
24666: PUSH
24667: LD_INT 19
24669: PUSH
24670: LD_INT 20
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 22
24678: PUSH
24679: LD_INT 23
24681: PUSH
24682: LD_INT 24
24684: PUSH
24685: LD_INT 25
24687: PUSH
24688: LD_INT 26
24690: PUSH
24691: LD_INT 27
24693: PUSH
24694: LD_INT 28
24696: PUSH
24697: LD_INT 30
24699: PUSH
24700: LD_INT 31
24702: PUSH
24703: LD_INT 32
24705: PUSH
24706: LD_INT 33
24708: PUSH
24709: LD_INT 34
24711: PUSH
24712: LD_INT 36
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 101
24750: PUSH
24751: LD_INT 102
24753: PUSH
24754: LD_INT 103
24756: PUSH
24757: LD_INT 104
24759: PUSH
24760: LD_INT 105
24762: PUSH
24763: LD_INT 106
24765: PUSH
24766: LD_INT 107
24768: PUSH
24769: LD_INT 108
24771: PUSH
24772: LD_INT 109
24774: PUSH
24775: LD_INT 110
24777: PUSH
24778: LD_INT 111
24780: PUSH
24781: LD_INT 112
24783: PUSH
24784: LD_INT 113
24786: PUSH
24787: LD_INT 114
24789: PUSH
24790: LD_INT 116
24792: PUSH
24793: LD_INT 117
24795: PUSH
24796: LD_INT 118
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: ST_TO_ADDR
24822: GO 26061
24824: LD_INT 14
24826: DOUBLE
24827: EQUAL
24828: IFTRUE 24832
24830: GO 25056
24832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: LD_INT 3
24846: PUSH
24847: LD_INT 4
24849: PUSH
24850: LD_INT 5
24852: PUSH
24853: LD_INT 6
24855: PUSH
24856: LD_INT 7
24858: PUSH
24859: LD_INT 8
24861: PUSH
24862: LD_INT 9
24864: PUSH
24865: LD_INT 10
24867: PUSH
24868: LD_INT 11
24870: PUSH
24871: LD_INT 12
24873: PUSH
24874: LD_INT 13
24876: PUSH
24877: LD_INT 14
24879: PUSH
24880: LD_INT 15
24882: PUSH
24883: LD_INT 16
24885: PUSH
24886: LD_INT 17
24888: PUSH
24889: LD_INT 18
24891: PUSH
24892: LD_INT 19
24894: PUSH
24895: LD_INT 20
24897: PUSH
24898: LD_INT 21
24900: PUSH
24901: LD_INT 22
24903: PUSH
24904: LD_INT 23
24906: PUSH
24907: LD_INT 24
24909: PUSH
24910: LD_INT 25
24912: PUSH
24913: LD_INT 26
24915: PUSH
24916: LD_INT 27
24918: PUSH
24919: LD_INT 28
24921: PUSH
24922: LD_INT 29
24924: PUSH
24925: LD_INT 30
24927: PUSH
24928: LD_INT 31
24930: PUSH
24931: LD_INT 32
24933: PUSH
24934: LD_INT 33
24936: PUSH
24937: LD_INT 34
24939: PUSH
24940: LD_INT 36
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 101
24982: PUSH
24983: LD_INT 102
24985: PUSH
24986: LD_INT 103
24988: PUSH
24989: LD_INT 104
24991: PUSH
24992: LD_INT 105
24994: PUSH
24995: LD_INT 106
24997: PUSH
24998: LD_INT 107
25000: PUSH
25001: LD_INT 108
25003: PUSH
25004: LD_INT 109
25006: PUSH
25007: LD_INT 110
25009: PUSH
25010: LD_INT 111
25012: PUSH
25013: LD_INT 112
25015: PUSH
25016: LD_INT 113
25018: PUSH
25019: LD_INT 114
25021: PUSH
25022: LD_INT 116
25024: PUSH
25025: LD_INT 117
25027: PUSH
25028: LD_INT 118
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: ST_TO_ADDR
25054: GO 26061
25056: LD_INT 15
25058: DOUBLE
25059: EQUAL
25060: IFTRUE 25064
25062: GO 25288
25064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 6
25087: PUSH
25088: LD_INT 7
25090: PUSH
25091: LD_INT 8
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: LD_INT 10
25099: PUSH
25100: LD_INT 11
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 17
25120: PUSH
25121: LD_INT 18
25123: PUSH
25124: LD_INT 19
25126: PUSH
25127: LD_INT 20
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 24
25141: PUSH
25142: LD_INT 25
25144: PUSH
25145: LD_INT 26
25147: PUSH
25148: LD_INT 27
25150: PUSH
25151: LD_INT 28
25153: PUSH
25154: LD_INT 29
25156: PUSH
25157: LD_INT 30
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 36
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 101
25214: PUSH
25215: LD_INT 102
25217: PUSH
25218: LD_INT 103
25220: PUSH
25221: LD_INT 104
25223: PUSH
25224: LD_INT 105
25226: PUSH
25227: LD_INT 106
25229: PUSH
25230: LD_INT 107
25232: PUSH
25233: LD_INT 108
25235: PUSH
25236: LD_INT 109
25238: PUSH
25239: LD_INT 110
25241: PUSH
25242: LD_INT 111
25244: PUSH
25245: LD_INT 112
25247: PUSH
25248: LD_INT 113
25250: PUSH
25251: LD_INT 114
25253: PUSH
25254: LD_INT 116
25256: PUSH
25257: LD_INT 117
25259: PUSH
25260: LD_INT 118
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: ST_TO_ADDR
25286: GO 26061
25288: LD_INT 16
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25432
25296: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25297: LD_ADDR_VAR 0 2
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: LD_INT 4
25307: PUSH
25308: LD_INT 5
25310: PUSH
25311: LD_INT 7
25313: PUSH
25314: LD_INT 11
25316: PUSH
25317: LD_INT 12
25319: PUSH
25320: LD_INT 15
25322: PUSH
25323: LD_INT 16
25325: PUSH
25326: LD_INT 20
25328: PUSH
25329: LD_INT 21
25331: PUSH
25332: LD_INT 22
25334: PUSH
25335: LD_INT 23
25337: PUSH
25338: LD_INT 25
25340: PUSH
25341: LD_INT 26
25343: PUSH
25344: LD_INT 30
25346: PUSH
25347: LD_INT 31
25349: PUSH
25350: LD_INT 32
25352: PUSH
25353: LD_INT 33
25355: PUSH
25356: LD_INT 34
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 101
25382: PUSH
25383: LD_INT 102
25385: PUSH
25386: LD_INT 103
25388: PUSH
25389: LD_INT 106
25391: PUSH
25392: LD_INT 108
25394: PUSH
25395: LD_INT 112
25397: PUSH
25398: LD_INT 113
25400: PUSH
25401: LD_INT 114
25403: PUSH
25404: LD_INT 116
25406: PUSH
25407: LD_INT 117
25409: PUSH
25410: LD_INT 118
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: ST_TO_ADDR
25430: GO 26061
25432: LD_INT 17
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25664
25440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 4
25457: PUSH
25458: LD_INT 5
25460: PUSH
25461: LD_INT 6
25463: PUSH
25464: LD_INT 7
25466: PUSH
25467: LD_INT 8
25469: PUSH
25470: LD_INT 9
25472: PUSH
25473: LD_INT 10
25475: PUSH
25476: LD_INT 11
25478: PUSH
25479: LD_INT 12
25481: PUSH
25482: LD_INT 13
25484: PUSH
25485: LD_INT 14
25487: PUSH
25488: LD_INT 15
25490: PUSH
25491: LD_INT 16
25493: PUSH
25494: LD_INT 17
25496: PUSH
25497: LD_INT 18
25499: PUSH
25500: LD_INT 19
25502: PUSH
25503: LD_INT 20
25505: PUSH
25506: LD_INT 21
25508: PUSH
25509: LD_INT 22
25511: PUSH
25512: LD_INT 23
25514: PUSH
25515: LD_INT 24
25517: PUSH
25518: LD_INT 25
25520: PUSH
25521: LD_INT 26
25523: PUSH
25524: LD_INT 27
25526: PUSH
25527: LD_INT 28
25529: PUSH
25530: LD_INT 29
25532: PUSH
25533: LD_INT 30
25535: PUSH
25536: LD_INT 31
25538: PUSH
25539: LD_INT 32
25541: PUSH
25542: LD_INT 33
25544: PUSH
25545: LD_INT 34
25547: PUSH
25548: LD_INT 36
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 101
25590: PUSH
25591: LD_INT 102
25593: PUSH
25594: LD_INT 103
25596: PUSH
25597: LD_INT 104
25599: PUSH
25600: LD_INT 105
25602: PUSH
25603: LD_INT 106
25605: PUSH
25606: LD_INT 107
25608: PUSH
25609: LD_INT 108
25611: PUSH
25612: LD_INT 109
25614: PUSH
25615: LD_INT 110
25617: PUSH
25618: LD_INT 111
25620: PUSH
25621: LD_INT 112
25623: PUSH
25624: LD_INT 113
25626: PUSH
25627: LD_INT 114
25629: PUSH
25630: LD_INT 116
25632: PUSH
25633: LD_INT 117
25635: PUSH
25636: LD_INT 118
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: ST_TO_ADDR
25662: GO 26061
25664: LD_INT 18
25666: DOUBLE
25667: EQUAL
25668: IFTRUE 25672
25670: GO 25820
25672: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: LD_INT 4
25683: PUSH
25684: LD_INT 5
25686: PUSH
25687: LD_INT 7
25689: PUSH
25690: LD_INT 11
25692: PUSH
25693: LD_INT 12
25695: PUSH
25696: LD_INT 15
25698: PUSH
25699: LD_INT 16
25701: PUSH
25702: LD_INT 20
25704: PUSH
25705: LD_INT 21
25707: PUSH
25708: LD_INT 22
25710: PUSH
25711: LD_INT 23
25713: PUSH
25714: LD_INT 25
25716: PUSH
25717: LD_INT 26
25719: PUSH
25720: LD_INT 30
25722: PUSH
25723: LD_INT 31
25725: PUSH
25726: LD_INT 32
25728: PUSH
25729: LD_INT 33
25731: PUSH
25732: LD_INT 34
25734: PUSH
25735: LD_INT 35
25737: PUSH
25738: LD_INT 36
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 101
25766: PUSH
25767: LD_INT 102
25769: PUSH
25770: LD_INT 103
25772: PUSH
25773: LD_INT 106
25775: PUSH
25776: LD_INT 108
25778: PUSH
25779: LD_INT 112
25781: PUSH
25782: LD_INT 113
25784: PUSH
25785: LD_INT 114
25787: PUSH
25788: LD_INT 115
25790: PUSH
25791: LD_INT 116
25793: PUSH
25794: LD_INT 117
25796: PUSH
25797: LD_INT 118
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: ST_TO_ADDR
25818: GO 26061
25820: LD_INT 19
25822: DOUBLE
25823: EQUAL
25824: IFTRUE 25828
25826: GO 26060
25828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25829: LD_ADDR_VAR 0 2
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 4
25845: PUSH
25846: LD_INT 5
25848: PUSH
25849: LD_INT 6
25851: PUSH
25852: LD_INT 7
25854: PUSH
25855: LD_INT 8
25857: PUSH
25858: LD_INT 9
25860: PUSH
25861: LD_INT 10
25863: PUSH
25864: LD_INT 11
25866: PUSH
25867: LD_INT 12
25869: PUSH
25870: LD_INT 13
25872: PUSH
25873: LD_INT 14
25875: PUSH
25876: LD_INT 15
25878: PUSH
25879: LD_INT 16
25881: PUSH
25882: LD_INT 17
25884: PUSH
25885: LD_INT 18
25887: PUSH
25888: LD_INT 19
25890: PUSH
25891: LD_INT 20
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_INT 23
25902: PUSH
25903: LD_INT 24
25905: PUSH
25906: LD_INT 25
25908: PUSH
25909: LD_INT 26
25911: PUSH
25912: LD_INT 27
25914: PUSH
25915: LD_INT 28
25917: PUSH
25918: LD_INT 29
25920: PUSH
25921: LD_INT 30
25923: PUSH
25924: LD_INT 31
25926: PUSH
25927: LD_INT 32
25929: PUSH
25930: LD_INT 33
25932: PUSH
25933: LD_INT 34
25935: PUSH
25936: LD_INT 35
25938: PUSH
25939: LD_INT 36
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 101
25982: PUSH
25983: LD_INT 102
25985: PUSH
25986: LD_INT 103
25988: PUSH
25989: LD_INT 104
25991: PUSH
25992: LD_INT 105
25994: PUSH
25995: LD_INT 106
25997: PUSH
25998: LD_INT 107
26000: PUSH
26001: LD_INT 108
26003: PUSH
26004: LD_INT 109
26006: PUSH
26007: LD_INT 110
26009: PUSH
26010: LD_INT 111
26012: PUSH
26013: LD_INT 112
26015: PUSH
26016: LD_INT 113
26018: PUSH
26019: LD_INT 114
26021: PUSH
26022: LD_INT 115
26024: PUSH
26025: LD_INT 116
26027: PUSH
26028: LD_INT 117
26030: PUSH
26031: LD_INT 118
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26061
26060: POP
// end else
26061: GO 26292
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26063: LD_ADDR_VAR 0 2
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: LD_INT 4
26079: PUSH
26080: LD_INT 5
26082: PUSH
26083: LD_INT 6
26085: PUSH
26086: LD_INT 7
26088: PUSH
26089: LD_INT 8
26091: PUSH
26092: LD_INT 9
26094: PUSH
26095: LD_INT 10
26097: PUSH
26098: LD_INT 11
26100: PUSH
26101: LD_INT 12
26103: PUSH
26104: LD_INT 13
26106: PUSH
26107: LD_INT 14
26109: PUSH
26110: LD_INT 15
26112: PUSH
26113: LD_INT 16
26115: PUSH
26116: LD_INT 17
26118: PUSH
26119: LD_INT 18
26121: PUSH
26122: LD_INT 19
26124: PUSH
26125: LD_INT 20
26127: PUSH
26128: LD_INT 21
26130: PUSH
26131: LD_INT 22
26133: PUSH
26134: LD_INT 23
26136: PUSH
26137: LD_INT 24
26139: PUSH
26140: LD_INT 25
26142: PUSH
26143: LD_INT 26
26145: PUSH
26146: LD_INT 27
26148: PUSH
26149: LD_INT 28
26151: PUSH
26152: LD_INT 29
26154: PUSH
26155: LD_INT 30
26157: PUSH
26158: LD_INT 31
26160: PUSH
26161: LD_INT 32
26163: PUSH
26164: LD_INT 33
26166: PUSH
26167: LD_INT 34
26169: PUSH
26170: LD_INT 35
26172: PUSH
26173: LD_INT 36
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 101
26216: PUSH
26217: LD_INT 102
26219: PUSH
26220: LD_INT 103
26222: PUSH
26223: LD_INT 104
26225: PUSH
26226: LD_INT 105
26228: PUSH
26229: LD_INT 106
26231: PUSH
26232: LD_INT 107
26234: PUSH
26235: LD_INT 108
26237: PUSH
26238: LD_INT 109
26240: PUSH
26241: LD_INT 110
26243: PUSH
26244: LD_INT 111
26246: PUSH
26247: LD_INT 112
26249: PUSH
26250: LD_INT 113
26252: PUSH
26253: LD_INT 114
26255: PUSH
26256: LD_INT 115
26258: PUSH
26259: LD_INT 116
26261: PUSH
26262: LD_INT 117
26264: PUSH
26265: LD_INT 118
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// if result then
26292: LD_VAR 0 2
26296: IFFALSE 27082
// begin normal :=  ;
26298: LD_ADDR_VAR 0 5
26302: PUSH
26303: LD_STRING 
26305: ST_TO_ADDR
// hardcore :=  ;
26306: LD_ADDR_VAR 0 6
26310: PUSH
26311: LD_STRING 
26313: ST_TO_ADDR
// active :=  ;
26314: LD_ADDR_VAR 0 7
26318: PUSH
26319: LD_STRING 
26321: ST_TO_ADDR
// for i = 1 to normalCounter do
26322: LD_ADDR_VAR 0 8
26326: PUSH
26327: DOUBLE
26328: LD_INT 1
26330: DEC
26331: ST_TO_ADDR
26332: LD_EXP 70
26336: PUSH
26337: FOR_TO
26338: IFFALSE 26439
// begin tmp := 0 ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_STRING 0
26347: ST_TO_ADDR
// if result [ 1 ] then
26348: LD_VAR 0 2
26352: PUSH
26353: LD_INT 1
26355: ARRAY
26356: IFFALSE 26421
// if result [ 1 ] [ 1 ] = i then
26358: LD_VAR 0 2
26362: PUSH
26363: LD_INT 1
26365: ARRAY
26366: PUSH
26367: LD_INT 1
26369: ARRAY
26370: PUSH
26371: LD_VAR 0 8
26375: EQUAL
26376: IFFALSE 26421
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26378: LD_ADDR_VAR 0 2
26382: PUSH
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_INT 1
26390: PPUSH
26391: LD_VAR 0 2
26395: PUSH
26396: LD_INT 1
26398: ARRAY
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: CALL_OW 3
26407: PPUSH
26408: CALL_OW 1
26412: ST_TO_ADDR
// tmp := 1 ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_STRING 1
26420: ST_TO_ADDR
// end ; normal := normal & tmp ;
26421: LD_ADDR_VAR 0 5
26425: PUSH
26426: LD_VAR 0 5
26430: PUSH
26431: LD_VAR 0 3
26435: STR
26436: ST_TO_ADDR
// end ;
26437: GO 26337
26439: POP
26440: POP
// for i = 1 to hardcoreCounter do
26441: LD_ADDR_VAR 0 8
26445: PUSH
26446: DOUBLE
26447: LD_INT 1
26449: DEC
26450: ST_TO_ADDR
26451: LD_EXP 71
26455: PUSH
26456: FOR_TO
26457: IFFALSE 26562
// begin tmp := 0 ;
26459: LD_ADDR_VAR 0 3
26463: PUSH
26464: LD_STRING 0
26466: ST_TO_ADDR
// if result [ 2 ] then
26467: LD_VAR 0 2
26471: PUSH
26472: LD_INT 2
26474: ARRAY
26475: IFFALSE 26544
// if result [ 2 ] [ 1 ] = 100 + i then
26477: LD_VAR 0 2
26481: PUSH
26482: LD_INT 2
26484: ARRAY
26485: PUSH
26486: LD_INT 1
26488: ARRAY
26489: PUSH
26490: LD_INT 100
26492: PUSH
26493: LD_VAR 0 8
26497: PLUS
26498: EQUAL
26499: IFFALSE 26544
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26501: LD_ADDR_VAR 0 2
26505: PUSH
26506: LD_VAR 0 2
26510: PPUSH
26511: LD_INT 2
26513: PPUSH
26514: LD_VAR 0 2
26518: PUSH
26519: LD_INT 2
26521: ARRAY
26522: PPUSH
26523: LD_INT 1
26525: PPUSH
26526: CALL_OW 3
26530: PPUSH
26531: CALL_OW 1
26535: ST_TO_ADDR
// tmp := 1 ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_STRING 1
26543: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: LD_VAR 0 6
26553: PUSH
26554: LD_VAR 0 3
26558: STR
26559: ST_TO_ADDR
// end ;
26560: GO 26456
26562: POP
26563: POP
// if isGameLoad then
26564: LD_VAR 0 1
26568: IFFALSE 27043
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26570: LD_ADDR_VAR 0 4
26574: PUSH
26575: LD_EXP 74
26579: PUSH
26580: LD_EXP 73
26584: PUSH
26585: LD_EXP 75
26589: PUSH
26590: LD_EXP 72
26594: PUSH
26595: LD_EXP 76
26599: PUSH
26600: LD_EXP 77
26604: PUSH
26605: LD_EXP 78
26609: PUSH
26610: LD_EXP 79
26614: PUSH
26615: LD_EXP 80
26619: PUSH
26620: LD_EXP 81
26624: PUSH
26625: LD_EXP 82
26629: PUSH
26630: LD_EXP 83
26634: PUSH
26635: LD_EXP 84
26639: PUSH
26640: LD_EXP 85
26644: PUSH
26645: LD_EXP 93
26649: PUSH
26650: LD_EXP 94
26654: PUSH
26655: LD_EXP 95
26659: PUSH
26660: LD_EXP 96
26664: PUSH
26665: LD_EXP 98
26669: PUSH
26670: LD_EXP 99
26674: PUSH
26675: LD_EXP 100
26679: PUSH
26680: LD_EXP 103
26684: PUSH
26685: LD_EXP 105
26689: PUSH
26690: LD_EXP 106
26694: PUSH
26695: LD_EXP 107
26699: PUSH
26700: LD_EXP 109
26704: PUSH
26705: LD_EXP 110
26709: PUSH
26710: LD_EXP 113
26714: PUSH
26715: LD_EXP 114
26719: PUSH
26720: LD_EXP 115
26724: PUSH
26725: LD_EXP 116
26729: PUSH
26730: LD_EXP 117
26734: PUSH
26735: LD_EXP 118
26739: PUSH
26740: LD_EXP 119
26744: PUSH
26745: LD_EXP 120
26749: PUSH
26750: LD_EXP 121
26754: PUSH
26755: LD_EXP 86
26759: PUSH
26760: LD_EXP 87
26764: PUSH
26765: LD_EXP 90
26769: PUSH
26770: LD_EXP 91
26774: PUSH
26775: LD_EXP 92
26779: PUSH
26780: LD_EXP 88
26784: PUSH
26785: LD_EXP 89
26789: PUSH
26790: LD_EXP 97
26794: PUSH
26795: LD_EXP 101
26799: PUSH
26800: LD_EXP 102
26804: PUSH
26805: LD_EXP 104
26809: PUSH
26810: LD_EXP 108
26814: PUSH
26815: LD_EXP 111
26819: PUSH
26820: LD_EXP 112
26824: PUSH
26825: LD_EXP 122
26829: PUSH
26830: LD_EXP 123
26834: PUSH
26835: LD_EXP 124
26839: PUSH
26840: LD_EXP 125
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// tmp :=  ;
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: LD_STRING 
26908: ST_TO_ADDR
// for i = 1 to normalCounter do
26909: LD_ADDR_VAR 0 8
26913: PUSH
26914: DOUBLE
26915: LD_INT 1
26917: DEC
26918: ST_TO_ADDR
26919: LD_EXP 70
26923: PUSH
26924: FOR_TO
26925: IFFALSE 26961
// begin if flags [ i ] then
26927: LD_VAR 0 4
26931: PUSH
26932: LD_VAR 0 8
26936: ARRAY
26937: IFFALSE 26959
// tmp := tmp & i & ; ;
26939: LD_ADDR_VAR 0 3
26943: PUSH
26944: LD_VAR 0 3
26948: PUSH
26949: LD_VAR 0 8
26953: STR
26954: PUSH
26955: LD_STRING ;
26957: STR
26958: ST_TO_ADDR
// end ;
26959: GO 26924
26961: POP
26962: POP
// for i = 1 to hardcoreCounter do
26963: LD_ADDR_VAR 0 8
26967: PUSH
26968: DOUBLE
26969: LD_INT 1
26971: DEC
26972: ST_TO_ADDR
26973: LD_EXP 71
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27025
// begin if flags [ normalCounter + i ] then
26981: LD_VAR 0 4
26985: PUSH
26986: LD_EXP 70
26990: PUSH
26991: LD_VAR 0 8
26995: PLUS
26996: ARRAY
26997: IFFALSE 27023
// tmp := tmp & ( 100 + i ) & ; ;
26999: LD_ADDR_VAR 0 3
27003: PUSH
27004: LD_VAR 0 3
27008: PUSH
27009: LD_INT 100
27011: PUSH
27012: LD_VAR 0 8
27016: PLUS
27017: STR
27018: PUSH
27019: LD_STRING ;
27021: STR
27022: ST_TO_ADDR
// end ;
27023: GO 26978
27025: POP
27026: POP
// if tmp then
27027: LD_VAR 0 3
27031: IFFALSE 27043
// active := tmp ;
27033: LD_ADDR_VAR 0 7
27037: PUSH
27038: LD_VAR 0 3
27042: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27043: LD_STRING getStreamItemsFromMission("
27045: PUSH
27046: LD_VAR 0 5
27050: STR
27051: PUSH
27052: LD_STRING ","
27054: STR
27055: PUSH
27056: LD_VAR 0 6
27060: STR
27061: PUSH
27062: LD_STRING ","
27064: STR
27065: PUSH
27066: LD_VAR 0 7
27070: STR
27071: PUSH
27072: LD_STRING ")
27074: STR
27075: PPUSH
27076: CALL_OW 559
// end else
27080: GO 27089
// ToLua ( getStreamItemsFromMission("","","") ) ;
27082: LD_STRING getStreamItemsFromMission("","","")
27084: PPUSH
27085: CALL_OW 559
// end ;
27089: LD_VAR 0 2
27093: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27094: LD_EXP 69
27098: PUSH
27099: LD_EXP 74
27103: AND
27104: IFFALSE 27228
27106: GO 27108
27108: DISABLE
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
// begin enable ;
27113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27114: LD_ADDR_VAR 0 2
27118: PUSH
27119: LD_INT 22
27121: PUSH
27122: LD_OWVAR 2
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 34
27136: PUSH
27137: LD_INT 7
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 34
27146: PUSH
27147: LD_INT 45
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 34
27156: PUSH
27157: LD_INT 28
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 34
27166: PUSH
27167: LD_INT 47
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PPUSH
27185: CALL_OW 69
27189: ST_TO_ADDR
// if not tmp then
27190: LD_VAR 0 2
27194: NOT
27195: IFFALSE 27199
// exit ;
27197: GO 27228
// for i in tmp do
27199: LD_ADDR_VAR 0 1
27203: PUSH
27204: LD_VAR 0 2
27208: PUSH
27209: FOR_IN
27210: IFFALSE 27226
// begin SetLives ( i , 0 ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_INT 0
27219: PPUSH
27220: CALL_OW 234
// end ;
27224: GO 27209
27226: POP
27227: POP
// end ;
27228: PPOPN 2
27230: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27231: LD_EXP 69
27235: PUSH
27236: LD_EXP 75
27240: AND
27241: IFFALSE 27325
27243: GO 27245
27245: DISABLE
27246: LD_INT 0
27248: PPUSH
27249: PPUSH
// begin enable ;
27250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27251: LD_ADDR_VAR 0 2
27255: PUSH
27256: LD_INT 22
27258: PUSH
27259: LD_OWVAR 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 32
27270: PUSH
27271: LD_INT 3
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PPUSH
27282: CALL_OW 69
27286: ST_TO_ADDR
// if not tmp then
27287: LD_VAR 0 2
27291: NOT
27292: IFFALSE 27296
// exit ;
27294: GO 27325
// for i in tmp do
27296: LD_ADDR_VAR 0 1
27300: PUSH
27301: LD_VAR 0 2
27305: PUSH
27306: FOR_IN
27307: IFFALSE 27323
// begin SetLives ( i , 0 ) ;
27309: LD_VAR 0 1
27313: PPUSH
27314: LD_INT 0
27316: PPUSH
27317: CALL_OW 234
// end ;
27321: GO 27306
27323: POP
27324: POP
// end ;
27325: PPOPN 2
27327: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27328: LD_EXP 69
27332: PUSH
27333: LD_EXP 72
27337: AND
27338: IFFALSE 27431
27340: GO 27342
27342: DISABLE
27343: LD_INT 0
27345: PPUSH
// begin enable ;
27346: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27347: LD_ADDR_VAR 0 1
27351: PUSH
27352: LD_INT 22
27354: PUSH
27355: LD_OWVAR 2
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: LD_INT 25
27369: PUSH
27370: LD_INT 5
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 25
27379: PUSH
27380: LD_INT 9
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 25
27389: PUSH
27390: LD_INT 8
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL_OW 69
27411: PUSH
27412: FOR_IN
27413: IFFALSE 27429
// begin SetClass ( i , 1 ) ;
27415: LD_VAR 0 1
27419: PPUSH
27420: LD_INT 1
27422: PPUSH
27423: CALL_OW 336
// end ;
27427: GO 27412
27429: POP
27430: POP
// end ;
27431: PPOPN 1
27433: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27434: LD_EXP 69
27438: PUSH
27439: LD_EXP 73
27443: AND
27444: PUSH
27445: LD_OWVAR 65
27449: PUSH
27450: LD_INT 7
27452: LESS
27453: AND
27454: IFFALSE 27468
27456: GO 27458
27458: DISABLE
// begin enable ;
27459: ENABLE
// game_speed := 7 ;
27460: LD_ADDR_OWVAR 65
27464: PUSH
27465: LD_INT 7
27467: ST_TO_ADDR
// end ;
27468: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27469: LD_EXP 69
27473: PUSH
27474: LD_EXP 76
27478: AND
27479: IFFALSE 27681
27481: GO 27483
27483: DISABLE
27484: LD_INT 0
27486: PPUSH
27487: PPUSH
27488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27489: LD_ADDR_VAR 0 3
27493: PUSH
27494: LD_INT 81
27496: PUSH
27497: LD_OWVAR 2
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 21
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: ST_TO_ADDR
// if not tmp then
27525: LD_VAR 0 3
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27681
// if tmp > 5 then
27534: LD_VAR 0 3
27538: PUSH
27539: LD_INT 5
27541: GREATER
27542: IFFALSE 27554
// k := 5 else
27544: LD_ADDR_VAR 0 2
27548: PUSH
27549: LD_INT 5
27551: ST_TO_ADDR
27552: GO 27564
// k := tmp ;
27554: LD_ADDR_VAR 0 2
27558: PUSH
27559: LD_VAR 0 3
27563: ST_TO_ADDR
// for i := 1 to k do
27564: LD_ADDR_VAR 0 1
27568: PUSH
27569: DOUBLE
27570: LD_INT 1
27572: DEC
27573: ST_TO_ADDR
27574: LD_VAR 0 2
27578: PUSH
27579: FOR_TO
27580: IFFALSE 27679
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27582: LD_VAR 0 3
27586: PUSH
27587: LD_VAR 0 1
27591: ARRAY
27592: PPUSH
27593: LD_VAR 0 1
27597: PUSH
27598: LD_INT 4
27600: MOD
27601: PUSH
27602: LD_INT 1
27604: PLUS
27605: PPUSH
27606: CALL_OW 259
27610: PUSH
27611: LD_INT 10
27613: LESS
27614: IFFALSE 27677
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27616: LD_VAR 0 3
27620: PUSH
27621: LD_VAR 0 1
27625: ARRAY
27626: PPUSH
27627: LD_VAR 0 1
27631: PUSH
27632: LD_INT 4
27634: MOD
27635: PUSH
27636: LD_INT 1
27638: PLUS
27639: PPUSH
27640: LD_VAR 0 3
27644: PUSH
27645: LD_VAR 0 1
27649: ARRAY
27650: PPUSH
27651: LD_VAR 0 1
27655: PUSH
27656: LD_INT 4
27658: MOD
27659: PUSH
27660: LD_INT 1
27662: PLUS
27663: PPUSH
27664: CALL_OW 259
27668: PUSH
27669: LD_INT 1
27671: PLUS
27672: PPUSH
27673: CALL_OW 237
27677: GO 27579
27679: POP
27680: POP
// end ;
27681: PPOPN 3
27683: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27684: LD_EXP 69
27688: PUSH
27689: LD_EXP 77
27693: AND
27694: IFFALSE 27714
27696: GO 27698
27698: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27699: LD_INT 4
27701: PPUSH
27702: LD_OWVAR 2
27706: PPUSH
27707: LD_INT 0
27709: PPUSH
27710: CALL_OW 324
27714: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27715: LD_EXP 69
27719: PUSH
27720: LD_EXP 106
27724: AND
27725: IFFALSE 27745
27727: GO 27729
27729: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27730: LD_INT 19
27732: PPUSH
27733: LD_OWVAR 2
27737: PPUSH
27738: LD_INT 0
27740: PPUSH
27741: CALL_OW 324
27745: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27746: LD_EXP 69
27750: PUSH
27751: LD_EXP 78
27755: AND
27756: IFFALSE 27858
27758: GO 27760
27760: DISABLE
27761: LD_INT 0
27763: PPUSH
27764: PPUSH
// begin enable ;
27765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_OWVAR 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 34
27788: PUSH
27789: LD_INT 11
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 34
27798: PUSH
27799: LD_INT 30
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 69
27819: ST_TO_ADDR
// if not tmp then
27820: LD_VAR 0 2
27824: NOT
27825: IFFALSE 27829
// exit ;
27827: GO 27858
// for i in tmp do
27829: LD_ADDR_VAR 0 1
27833: PUSH
27834: LD_VAR 0 2
27838: PUSH
27839: FOR_IN
27840: IFFALSE 27856
// begin SetLives ( i , 0 ) ;
27842: LD_VAR 0 1
27846: PPUSH
27847: LD_INT 0
27849: PPUSH
27850: CALL_OW 234
// end ;
27854: GO 27839
27856: POP
27857: POP
// end ;
27858: PPOPN 2
27860: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27861: LD_EXP 69
27865: PUSH
27866: LD_EXP 79
27870: AND
27871: IFFALSE 27891
27873: GO 27875
27875: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27876: LD_INT 32
27878: PPUSH
27879: LD_OWVAR 2
27883: PPUSH
27884: LD_INT 0
27886: PPUSH
27887: CALL_OW 324
27891: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27892: LD_EXP 69
27896: PUSH
27897: LD_EXP 80
27901: AND
27902: IFFALSE 28083
27904: GO 27906
27906: DISABLE
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
27911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27912: LD_ADDR_VAR 0 2
27916: PUSH
27917: LD_INT 22
27919: PUSH
27920: LD_OWVAR 2
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 33
27931: PUSH
27932: LD_INT 3
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 69
27947: ST_TO_ADDR
// if not tmp then
27948: LD_VAR 0 2
27952: NOT
27953: IFFALSE 27957
// exit ;
27955: GO 28083
// side := 0 ;
27957: LD_ADDR_VAR 0 3
27961: PUSH
27962: LD_INT 0
27964: ST_TO_ADDR
// for i := 1 to 8 do
27965: LD_ADDR_VAR 0 1
27969: PUSH
27970: DOUBLE
27971: LD_INT 1
27973: DEC
27974: ST_TO_ADDR
27975: LD_INT 8
27977: PUSH
27978: FOR_TO
27979: IFFALSE 28027
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27981: LD_OWVAR 2
27985: PUSH
27986: LD_VAR 0 1
27990: NONEQUAL
27991: PUSH
27992: LD_OWVAR 2
27996: PPUSH
27997: LD_VAR 0 1
28001: PPUSH
28002: CALL_OW 81
28006: PUSH
28007: LD_INT 2
28009: EQUAL
28010: AND
28011: IFFALSE 28025
// begin side := i ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_VAR 0 1
28022: ST_TO_ADDR
// break ;
28023: GO 28027
// end ;
28025: GO 27978
28027: POP
28028: POP
// if not side then
28029: LD_VAR 0 3
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28083
// for i := 1 to tmp do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: DOUBLE
28044: LD_INT 1
28046: DEC
28047: ST_TO_ADDR
28048: LD_VAR 0 2
28052: PUSH
28053: FOR_TO
28054: IFFALSE 28081
// if Prob ( 60 ) then
28056: LD_INT 60
28058: PPUSH
28059: CALL_OW 13
28063: IFFALSE 28079
// SetSide ( i , side ) ;
28065: LD_VAR 0 1
28069: PPUSH
28070: LD_VAR 0 3
28074: PPUSH
28075: CALL_OW 235
28079: GO 28053
28081: POP
28082: POP
// end ;
28083: PPOPN 3
28085: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28086: LD_EXP 69
28090: PUSH
28091: LD_EXP 82
28095: AND
28096: IFFALSE 28215
28098: GO 28100
28100: DISABLE
28101: LD_INT 0
28103: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28104: LD_ADDR_VAR 0 1
28108: PUSH
28109: LD_INT 22
28111: PUSH
28112: LD_OWVAR 2
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 21
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: LD_INT 23
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: PPUSH
28153: CALL_OW 69
28157: PUSH
28158: FOR_IN
28159: IFFALSE 28213
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28161: LD_VAR 0 1
28165: PPUSH
28166: CALL_OW 257
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: LD_INT 4
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: IN
28189: IFFALSE 28211
// SetClass ( un , rand ( 1 , 4 ) ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_INT 1
28198: PPUSH
28199: LD_INT 4
28201: PPUSH
28202: CALL_OW 12
28206: PPUSH
28207: CALL_OW 336
28211: GO 28158
28213: POP
28214: POP
// end ;
28215: PPOPN 1
28217: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28218: LD_EXP 69
28222: PUSH
28223: LD_EXP 81
28227: AND
28228: IFFALSE 28307
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: LD_INT 22
28243: PUSH
28244: LD_OWVAR 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 21
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 69
28271: ST_TO_ADDR
// if not tmp then
28272: LD_VAR 0 1
28276: NOT
28277: IFFALSE 28281
// exit ;
28279: GO 28307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28281: LD_VAR 0 1
28285: PUSH
28286: LD_INT 1
28288: PPUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 12
28298: ARRAY
28299: PPUSH
28300: LD_INT 100
28302: PPUSH
28303: CALL_OW 234
// end ;
28307: PPOPN 1
28309: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28310: LD_EXP 69
28314: PUSH
28315: LD_EXP 83
28319: AND
28320: IFFALSE 28418
28322: GO 28324
28324: DISABLE
28325: LD_INT 0
28327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_INT 22
28335: PUSH
28336: LD_OWVAR 2
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 21
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PPUSH
28359: CALL_OW 69
28363: ST_TO_ADDR
// if not tmp then
28364: LD_VAR 0 1
28368: NOT
28369: IFFALSE 28373
// exit ;
28371: GO 28418
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28373: LD_VAR 0 1
28377: PUSH
28378: LD_INT 1
28380: PPUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 12
28390: ARRAY
28391: PPUSH
28392: LD_INT 1
28394: PPUSH
28395: LD_INT 4
28397: PPUSH
28398: CALL_OW 12
28402: PPUSH
28403: LD_INT 3000
28405: PPUSH
28406: LD_INT 9000
28408: PPUSH
28409: CALL_OW 12
28413: PPUSH
28414: CALL_OW 492
// end ;
28418: PPOPN 1
28420: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28421: LD_EXP 69
28425: PUSH
28426: LD_EXP 84
28430: AND
28431: IFFALSE 28451
28433: GO 28435
28435: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28436: LD_INT 1
28438: PPUSH
28439: LD_OWVAR 2
28443: PPUSH
28444: LD_INT 0
28446: PPUSH
28447: CALL_OW 324
28451: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28452: LD_EXP 69
28456: PUSH
28457: LD_EXP 85
28461: AND
28462: IFFALSE 28545
28464: GO 28466
28466: DISABLE
28467: LD_INT 0
28469: PPUSH
28470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28471: LD_ADDR_VAR 0 2
28475: PUSH
28476: LD_INT 22
28478: PUSH
28479: LD_OWVAR 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 21
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not tmp then
28507: LD_VAR 0 2
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28545
// for i in tmp do
28516: LD_ADDR_VAR 0 1
28520: PUSH
28521: LD_VAR 0 2
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28543
// SetBLevel ( i , 10 ) ;
28529: LD_VAR 0 1
28533: PPUSH
28534: LD_INT 10
28536: PPUSH
28537: CALL_OW 241
28541: GO 28526
28543: POP
28544: POP
// end ;
28545: PPOPN 2
28547: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28548: LD_EXP 69
28552: PUSH
28553: LD_EXP 86
28557: AND
28558: IFFALSE 28669
28560: GO 28562
28562: DISABLE
28563: LD_INT 0
28565: PPUSH
28566: PPUSH
28567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_INT 22
28575: PUSH
28576: LD_OWVAR 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 25
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: ST_TO_ADDR
// if not tmp then
28604: LD_VAR 0 3
28608: NOT
28609: IFFALSE 28613
// exit ;
28611: GO 28669
// un := tmp [ rand ( 1 , tmp ) ] ;
28613: LD_ADDR_VAR 0 2
28617: PUSH
28618: LD_VAR 0 3
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 3
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: ST_TO_ADDR
// if Crawls ( un ) then
28637: LD_VAR 0 2
28641: PPUSH
28642: CALL_OW 318
28646: IFFALSE 28657
// ComWalk ( un ) ;
28648: LD_VAR 0 2
28652: PPUSH
28653: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28657: LD_VAR 0 2
28661: PPUSH
28662: LD_INT 5
28664: PPUSH
28665: CALL_OW 336
// end ;
28669: PPOPN 3
28671: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28672: LD_EXP 69
28676: PUSH
28677: LD_EXP 87
28681: AND
28682: PUSH
28683: LD_OWVAR 67
28687: PUSH
28688: LD_INT 4
28690: LESS
28691: AND
28692: IFFALSE 28711
28694: GO 28696
28696: DISABLE
// begin Difficulty := Difficulty + 1 ;
28697: LD_ADDR_OWVAR 67
28701: PUSH
28702: LD_OWVAR 67
28706: PUSH
28707: LD_INT 1
28709: PLUS
28710: ST_TO_ADDR
// end ;
28711: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28712: LD_EXP 69
28716: PUSH
28717: LD_EXP 88
28721: AND
28722: IFFALSE 28825
28724: GO 28726
28726: DISABLE
28727: LD_INT 0
28729: PPUSH
// begin for i := 1 to 5 do
28730: LD_ADDR_VAR 0 1
28734: PUSH
28735: DOUBLE
28736: LD_INT 1
28738: DEC
28739: ST_TO_ADDR
28740: LD_INT 5
28742: PUSH
28743: FOR_TO
28744: IFFALSE 28823
// begin uc_nation := nation_nature ;
28746: LD_ADDR_OWVAR 21
28750: PUSH
28751: LD_INT 0
28753: ST_TO_ADDR
// uc_side := 0 ;
28754: LD_ADDR_OWVAR 20
28758: PUSH
28759: LD_INT 0
28761: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28762: LD_ADDR_OWVAR 29
28766: PUSH
28767: LD_INT 12
28769: PUSH
28770: LD_INT 12
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// hc_agressivity := 20 ;
28777: LD_ADDR_OWVAR 35
28781: PUSH
28782: LD_INT 20
28784: ST_TO_ADDR
// hc_class := class_tiger ;
28785: LD_ADDR_OWVAR 28
28789: PUSH
28790: LD_INT 14
28792: ST_TO_ADDR
// hc_gallery :=  ;
28793: LD_ADDR_OWVAR 33
28797: PUSH
28798: LD_STRING 
28800: ST_TO_ADDR
// hc_name :=  ;
28801: LD_ADDR_OWVAR 26
28805: PUSH
28806: LD_STRING 
28808: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28809: CALL_OW 44
28813: PPUSH
28814: LD_INT 0
28816: PPUSH
28817: CALL_OW 51
// end ;
28821: GO 28743
28823: POP
28824: POP
// end ;
28825: PPOPN 1
28827: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28828: LD_EXP 69
28832: PUSH
28833: LD_EXP 89
28837: AND
28838: IFFALSE 28847
28840: GO 28842
28842: DISABLE
// StreamSibBomb ;
28843: CALL 28848 0 0
28847: END
// export function StreamSibBomb ; var i , x , y ; begin
28848: LD_INT 0
28850: PPUSH
28851: PPUSH
28852: PPUSH
28853: PPUSH
// result := false ;
28854: LD_ADDR_VAR 0 1
28858: PUSH
28859: LD_INT 0
28861: ST_TO_ADDR
// for i := 1 to 16 do
28862: LD_ADDR_VAR 0 2
28866: PUSH
28867: DOUBLE
28868: LD_INT 1
28870: DEC
28871: ST_TO_ADDR
28872: LD_INT 16
28874: PUSH
28875: FOR_TO
28876: IFFALSE 29075
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28878: LD_ADDR_VAR 0 3
28882: PUSH
28883: LD_INT 10
28885: PUSH
28886: LD_INT 20
28888: PUSH
28889: LD_INT 30
28891: PUSH
28892: LD_INT 40
28894: PUSH
28895: LD_INT 50
28897: PUSH
28898: LD_INT 60
28900: PUSH
28901: LD_INT 70
28903: PUSH
28904: LD_INT 80
28906: PUSH
28907: LD_INT 90
28909: PUSH
28910: LD_INT 100
28912: PUSH
28913: LD_INT 110
28915: PUSH
28916: LD_INT 120
28918: PUSH
28919: LD_INT 130
28921: PUSH
28922: LD_INT 140
28924: PUSH
28925: LD_INT 150
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PPUSH
28948: LD_INT 15
28950: PPUSH
28951: CALL_OW 12
28955: ARRAY
28956: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28957: LD_ADDR_VAR 0 4
28961: PUSH
28962: LD_INT 10
28964: PUSH
28965: LD_INT 20
28967: PUSH
28968: LD_INT 30
28970: PUSH
28971: LD_INT 40
28973: PUSH
28974: LD_INT 50
28976: PUSH
28977: LD_INT 60
28979: PUSH
28980: LD_INT 70
28982: PUSH
28983: LD_INT 80
28985: PUSH
28986: LD_INT 90
28988: PUSH
28989: LD_INT 100
28991: PUSH
28992: LD_INT 110
28994: PUSH
28995: LD_INT 120
28997: PUSH
28998: LD_INT 130
29000: PUSH
29001: LD_INT 140
29003: PUSH
29004: LD_INT 150
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: PPUSH
29027: LD_INT 15
29029: PPUSH
29030: CALL_OW 12
29034: ARRAY
29035: ST_TO_ADDR
// if ValidHex ( x , y ) then
29036: LD_VAR 0 3
29040: PPUSH
29041: LD_VAR 0 4
29045: PPUSH
29046: CALL_OW 488
29050: IFFALSE 29073
// begin result := [ x , y ] ;
29052: LD_ADDR_VAR 0 1
29056: PUSH
29057: LD_VAR 0 3
29061: PUSH
29062: LD_VAR 0 4
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: ST_TO_ADDR
// break ;
29071: GO 29075
// end ; end ;
29073: GO 28875
29075: POP
29076: POP
// if result then
29077: LD_VAR 0 1
29081: IFFALSE 29141
// begin ToLua ( playSibBomb() ) ;
29083: LD_STRING playSibBomb()
29085: PPUSH
29086: CALL_OW 559
// wait ( 0 0$14 ) ;
29090: LD_INT 490
29092: PPUSH
29093: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29097: LD_VAR 0 1
29101: PUSH
29102: LD_INT 1
29104: ARRAY
29105: PPUSH
29106: LD_VAR 0 1
29110: PUSH
29111: LD_INT 2
29113: ARRAY
29114: PPUSH
29115: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29119: LD_VAR 0 1
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 1
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 429
// end ; end ;
29141: LD_VAR 0 1
29145: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29146: LD_EXP 69
29150: PUSH
29151: LD_EXP 91
29155: AND
29156: IFFALSE 29168
29158: GO 29160
29160: DISABLE
// YouLost (  ) ;
29161: LD_STRING 
29163: PPUSH
29164: CALL_OW 104
29168: END
// every 0 0$1 trigger StreamModeActive and sFog do
29169: LD_EXP 69
29173: PUSH
29174: LD_EXP 90
29178: AND
29179: IFFALSE 29193
29181: GO 29183
29183: DISABLE
// FogOff ( your_side ) ;
29184: LD_OWVAR 2
29188: PPUSH
29189: CALL_OW 344
29193: END
// every 0 0$1 trigger StreamModeActive and sSun do
29194: LD_EXP 69
29198: PUSH
29199: LD_EXP 92
29203: AND
29204: IFFALSE 29232
29206: GO 29208
29208: DISABLE
// begin solar_recharge_percent := 0 ;
29209: LD_ADDR_OWVAR 79
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29217: LD_INT 10500
29219: PPUSH
29220: CALL_OW 67
// solar_recharge_percent := 100 ;
29224: LD_ADDR_OWVAR 79
29228: PUSH
29229: LD_INT 100
29231: ST_TO_ADDR
// end ;
29232: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29233: LD_EXP 69
29237: PUSH
29238: LD_EXP 93
29242: AND
29243: IFFALSE 29482
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
29252: PPUSH
// begin tmp := [ ] ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: EMPTY
29259: ST_TO_ADDR
// for i := 1 to 6 do
29260: LD_ADDR_VAR 0 1
29264: PUSH
29265: DOUBLE
29266: LD_INT 1
29268: DEC
29269: ST_TO_ADDR
29270: LD_INT 6
29272: PUSH
29273: FOR_TO
29274: IFFALSE 29379
// begin uc_nation := nation_nature ;
29276: LD_ADDR_OWVAR 21
29280: PUSH
29281: LD_INT 0
29283: ST_TO_ADDR
// uc_side := 0 ;
29284: LD_ADDR_OWVAR 20
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29292: LD_ADDR_OWVAR 29
29296: PUSH
29297: LD_INT 12
29299: PUSH
29300: LD_INT 12
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// hc_agressivity := 20 ;
29307: LD_ADDR_OWVAR 35
29311: PUSH
29312: LD_INT 20
29314: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29315: LD_ADDR_OWVAR 28
29319: PUSH
29320: LD_INT 17
29322: ST_TO_ADDR
// hc_gallery :=  ;
29323: LD_ADDR_OWVAR 33
29327: PUSH
29328: LD_STRING 
29330: ST_TO_ADDR
// hc_name :=  ;
29331: LD_ADDR_OWVAR 26
29335: PUSH
29336: LD_STRING 
29338: ST_TO_ADDR
// un := CreateHuman ;
29339: LD_ADDR_VAR 0 2
29343: PUSH
29344: CALL_OW 44
29348: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29349: LD_VAR 0 2
29353: PPUSH
29354: LD_INT 1
29356: PPUSH
29357: CALL_OW 51
// tmp := tmp ^ un ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_VAR 0 3
29370: PUSH
29371: LD_VAR 0 2
29375: ADD
29376: ST_TO_ADDR
// end ;
29377: GO 29273
29379: POP
29380: POP
// repeat wait ( 0 0$1 ) ;
29381: LD_INT 35
29383: PPUSH
29384: CALL_OW 67
// for un in tmp do
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_VAR 0 3
29397: PUSH
29398: FOR_IN
29399: IFFALSE 29473
// begin if IsDead ( un ) then
29401: LD_VAR 0 2
29405: PPUSH
29406: CALL_OW 301
29410: IFFALSE 29430
// begin tmp := tmp diff un ;
29412: LD_ADDR_VAR 0 3
29416: PUSH
29417: LD_VAR 0 3
29421: PUSH
29422: LD_VAR 0 2
29426: DIFF
29427: ST_TO_ADDR
// continue ;
29428: GO 29398
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29430: LD_VAR 0 2
29434: PPUSH
29435: LD_INT 3
29437: PUSH
29438: LD_INT 22
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PPUSH
29452: CALL_OW 69
29456: PPUSH
29457: LD_VAR 0 2
29461: PPUSH
29462: CALL_OW 74
29466: PPUSH
29467: CALL_OW 115
// end ;
29471: GO 29398
29473: POP
29474: POP
// until not tmp ;
29475: LD_VAR 0 3
29479: NOT
29480: IFFALSE 29381
// end ;
29482: PPOPN 3
29484: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29485: LD_EXP 69
29489: PUSH
29490: LD_EXP 94
29494: AND
29495: IFFALSE 29549
29497: GO 29499
29499: DISABLE
// begin ToLua ( displayTroll(); ) ;
29500: LD_STRING displayTroll();
29502: PPUSH
29503: CALL_OW 559
// wait ( 3 3$00 ) ;
29507: LD_INT 6300
29509: PPUSH
29510: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29514: LD_STRING hideTroll();
29516: PPUSH
29517: CALL_OW 559
// wait ( 1 1$00 ) ;
29521: LD_INT 2100
29523: PPUSH
29524: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29528: LD_STRING displayTroll();
29530: PPUSH
29531: CALL_OW 559
// wait ( 1 1$00 ) ;
29535: LD_INT 2100
29537: PPUSH
29538: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29542: LD_STRING hideTroll();
29544: PPUSH
29545: CALL_OW 559
// end ;
29549: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29550: LD_EXP 69
29554: PUSH
29555: LD_EXP 95
29559: AND
29560: IFFALSE 29623
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
// begin p := 0 ;
29568: LD_ADDR_VAR 0 1
29572: PUSH
29573: LD_INT 0
29575: ST_TO_ADDR
// repeat game_speed := 1 ;
29576: LD_ADDR_OWVAR 65
29580: PUSH
29581: LD_INT 1
29583: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29584: LD_INT 35
29586: PPUSH
29587: CALL_OW 67
// p := p + 1 ;
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_VAR 0 1
29600: PUSH
29601: LD_INT 1
29603: PLUS
29604: ST_TO_ADDR
// until p >= 60 ;
29605: LD_VAR 0 1
29609: PUSH
29610: LD_INT 60
29612: GREATEREQUAL
29613: IFFALSE 29576
// game_speed := 4 ;
29615: LD_ADDR_OWVAR 65
29619: PUSH
29620: LD_INT 4
29622: ST_TO_ADDR
// end ;
29623: PPOPN 1
29625: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29626: LD_EXP 69
29630: PUSH
29631: LD_EXP 96
29635: AND
29636: IFFALSE 29782
29638: GO 29640
29640: DISABLE
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: LD_INT 22
29652: PUSH
29653: LD_OWVAR 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 69
29698: ST_TO_ADDR
// if not depot then
29699: LD_VAR 0 1
29703: NOT
29704: IFFALSE 29708
// exit ;
29706: GO 29782
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29708: LD_ADDR_VAR 0 2
29712: PUSH
29713: LD_VAR 0 1
29717: PUSH
29718: LD_INT 1
29720: PPUSH
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 12
29730: ARRAY
29731: PPUSH
29732: CALL_OW 274
29736: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29737: LD_VAR 0 2
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: LD_INT 0
29747: PPUSH
29748: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29752: LD_VAR 0 2
29756: PPUSH
29757: LD_INT 2
29759: PPUSH
29760: LD_INT 0
29762: PPUSH
29763: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29767: LD_VAR 0 2
29771: PPUSH
29772: LD_INT 3
29774: PPUSH
29775: LD_INT 0
29777: PPUSH
29778: CALL_OW 277
// end ;
29782: PPOPN 2
29784: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29785: LD_EXP 69
29789: PUSH
29790: LD_EXP 97
29794: AND
29795: IFFALSE 29892
29797: GO 29799
29799: DISABLE
29800: LD_INT 0
29802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29803: LD_ADDR_VAR 0 1
29807: PUSH
29808: LD_INT 22
29810: PUSH
29811: LD_OWVAR 2
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 21
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: LD_INT 23
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: PPUSH
29852: CALL_OW 69
29856: ST_TO_ADDR
// if not tmp then
29857: LD_VAR 0 1
29861: NOT
29862: IFFALSE 29866
// exit ;
29864: GO 29892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29866: LD_VAR 0 1
29870: PUSH
29871: LD_INT 1
29873: PPUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 12
29883: ARRAY
29884: PPUSH
29885: LD_INT 200
29887: PPUSH
29888: CALL_OW 234
// end ;
29892: PPOPN 1
29894: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29895: LD_EXP 69
29899: PUSH
29900: LD_EXP 98
29904: AND
29905: IFFALSE 29984
29907: GO 29909
29909: DISABLE
29910: LD_INT 0
29912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29913: LD_ADDR_VAR 0 1
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_OWVAR 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 21
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PPUSH
29944: CALL_OW 69
29948: ST_TO_ADDR
// if not tmp then
29949: LD_VAR 0 1
29953: NOT
29954: IFFALSE 29958
// exit ;
29956: GO 29984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29958: LD_VAR 0 1
29962: PUSH
29963: LD_INT 1
29965: PPUSH
29966: LD_VAR 0 1
29970: PPUSH
29971: CALL_OW 12
29975: ARRAY
29976: PPUSH
29977: LD_INT 60
29979: PPUSH
29980: CALL_OW 234
// end ;
29984: PPOPN 1
29986: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29987: LD_EXP 69
29991: PUSH
29992: LD_EXP 99
29996: AND
29997: IFFALSE 30096
29999: GO 30001
30001: DISABLE
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
// begin enable ;
30006: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30007: LD_ADDR_VAR 0 1
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_OWVAR 2
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 61
30026: PUSH
30027: EMPTY
30028: LIST
30029: PUSH
30030: LD_INT 33
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: PPUSH
30045: CALL_OW 69
30049: ST_TO_ADDR
// if not tmp then
30050: LD_VAR 0 1
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30096
// for i in tmp do
30059: LD_ADDR_VAR 0 2
30063: PUSH
30064: LD_VAR 0 1
30068: PUSH
30069: FOR_IN
30070: IFFALSE 30094
// if IsControledBy ( i ) then
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 312
30081: IFFALSE 30092
// ComUnlink ( i ) ;
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 136
30092: GO 30069
30094: POP
30095: POP
// end ;
30096: PPOPN 2
30098: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30099: LD_EXP 69
30103: PUSH
30104: LD_EXP 100
30108: AND
30109: IFFALSE 30249
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
30117: PPUSH
// begin ToLua ( displayPowell(); ) ;
30118: LD_STRING displayPowell();
30120: PPUSH
30121: CALL_OW 559
// uc_side := 0 ;
30125: LD_ADDR_OWVAR 20
30129: PUSH
30130: LD_INT 0
30132: ST_TO_ADDR
// uc_nation := 2 ;
30133: LD_ADDR_OWVAR 21
30137: PUSH
30138: LD_INT 2
30140: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30141: LD_ADDR_OWVAR 37
30145: PUSH
30146: LD_INT 14
30148: ST_TO_ADDR
// vc_engine := engine_siberite ;
30149: LD_ADDR_OWVAR 39
30153: PUSH
30154: LD_INT 3
30156: ST_TO_ADDR
// vc_control := control_apeman ;
30157: LD_ADDR_OWVAR 38
30161: PUSH
30162: LD_INT 5
30164: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30165: LD_ADDR_OWVAR 40
30169: PUSH
30170: LD_INT 29
30172: ST_TO_ADDR
// un := CreateVehicle ;
30173: LD_ADDR_VAR 0 2
30177: PUSH
30178: CALL_OW 45
30182: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30183: LD_VAR 0 2
30187: PPUSH
30188: LD_INT 1
30190: PPUSH
30191: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30195: LD_INT 35
30197: PPUSH
30198: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_INT 22
30209: PUSH
30210: LD_OWVAR 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PPUSH
30219: CALL_OW 69
30223: PPUSH
30224: LD_VAR 0 2
30228: PPUSH
30229: CALL_OW 74
30233: PPUSH
30234: CALL_OW 115
// until IsDead ( un ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 301
30247: IFFALSE 30195
// end ;
30249: PPOPN 2
30251: END
// every 0 0$1 trigger StreamModeActive and sStu do
30252: LD_EXP 69
30256: PUSH
30257: LD_EXP 108
30261: AND
30262: IFFALSE 30278
30264: GO 30266
30266: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30267: LD_STRING displayStucuk();
30269: PPUSH
30270: CALL_OW 559
// ResetFog ;
30274: CALL_OW 335
// end ;
30278: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30279: LD_EXP 69
30283: PUSH
30284: LD_EXP 101
30288: AND
30289: IFFALSE 30430
30291: GO 30293
30293: DISABLE
30294: LD_INT 0
30296: PPUSH
30297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_INT 22
30305: PUSH
30306: LD_OWVAR 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 21
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 69
30333: ST_TO_ADDR
// if not tmp then
30334: LD_VAR 0 2
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30430
// un := tmp [ rand ( 1 , tmp ) ] ;
30343: LD_ADDR_VAR 0 1
30347: PUSH
30348: LD_VAR 0 2
30352: PUSH
30353: LD_INT 1
30355: PPUSH
30356: LD_VAR 0 2
30360: PPUSH
30361: CALL_OW 12
30365: ARRAY
30366: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_INT 0
30374: PPUSH
30375: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30379: LD_VAR 0 1
30383: PPUSH
30384: LD_OWVAR 3
30388: PUSH
30389: LD_VAR 0 1
30393: DIFF
30394: PPUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 74
30404: PPUSH
30405: CALL_OW 115
// wait ( 0 0$20 ) ;
30409: LD_INT 700
30411: PPUSH
30412: CALL_OW 67
// SetSide ( un , your_side ) ;
30416: LD_VAR 0 1
30420: PPUSH
30421: LD_OWVAR 2
30425: PPUSH
30426: CALL_OW 235
// end ;
30430: PPOPN 2
30432: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30433: LD_EXP 69
30437: PUSH
30438: LD_EXP 102
30442: AND
30443: IFFALSE 30549
30445: GO 30447
30447: DISABLE
30448: LD_INT 0
30450: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30451: LD_ADDR_VAR 0 1
30455: PUSH
30456: LD_INT 22
30458: PUSH
30459: LD_OWVAR 2
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 30
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 30
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PPUSH
30500: CALL_OW 69
30504: ST_TO_ADDR
// if not depot then
30505: LD_VAR 0 1
30509: NOT
30510: IFFALSE 30514
// exit ;
30512: GO 30549
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30514: LD_VAR 0 1
30518: PUSH
30519: LD_INT 1
30521: ARRAY
30522: PPUSH
30523: CALL_OW 250
30527: PPUSH
30528: LD_VAR 0 1
30532: PUSH
30533: LD_INT 1
30535: ARRAY
30536: PPUSH
30537: CALL_OW 251
30541: PPUSH
30542: LD_INT 70
30544: PPUSH
30545: CALL_OW 495
// end ;
30549: PPOPN 1
30551: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30552: LD_EXP 69
30556: PUSH
30557: LD_EXP 103
30561: AND
30562: IFFALSE 30773
30564: GO 30566
30566: DISABLE
30567: LD_INT 0
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30574: LD_ADDR_VAR 0 5
30578: PUSH
30579: LD_INT 22
30581: PUSH
30582: LD_OWVAR 2
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 21
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PPUSH
30605: CALL_OW 69
30609: ST_TO_ADDR
// if not tmp then
30610: LD_VAR 0 5
30614: NOT
30615: IFFALSE 30619
// exit ;
30617: GO 30773
// for i in tmp do
30619: LD_ADDR_VAR 0 1
30623: PUSH
30624: LD_VAR 0 5
30628: PUSH
30629: FOR_IN
30630: IFFALSE 30771
// begin d := rand ( 0 , 5 ) ;
30632: LD_ADDR_VAR 0 4
30636: PUSH
30637: LD_INT 0
30639: PPUSH
30640: LD_INT 5
30642: PPUSH
30643: CALL_OW 12
30647: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 250
30662: PPUSH
30663: LD_VAR 0 4
30667: PPUSH
30668: LD_INT 3
30670: PPUSH
30671: LD_INT 12
30673: PPUSH
30674: CALL_OW 12
30678: PPUSH
30679: CALL_OW 272
30683: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_VAR 0 1
30693: PPUSH
30694: CALL_OW 251
30698: PPUSH
30699: LD_VAR 0 4
30703: PPUSH
30704: LD_INT 3
30706: PPUSH
30707: LD_INT 12
30709: PPUSH
30710: CALL_OW 12
30714: PPUSH
30715: CALL_OW 273
30719: ST_TO_ADDR
// if ValidHex ( x , y ) then
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_VAR 0 3
30729: PPUSH
30730: CALL_OW 488
30734: IFFALSE 30769
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30736: LD_VAR 0 1
30740: PPUSH
30741: LD_VAR 0 2
30745: PPUSH
30746: LD_VAR 0 3
30750: PPUSH
30751: LD_INT 3
30753: PPUSH
30754: LD_INT 6
30756: PPUSH
30757: CALL_OW 12
30761: PPUSH
30762: LD_INT 1
30764: PPUSH
30765: CALL_OW 483
// end ;
30769: GO 30629
30771: POP
30772: POP
// end ;
30773: PPOPN 5
30775: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30776: LD_EXP 69
30780: PUSH
30781: LD_EXP 104
30785: AND
30786: IFFALSE 30880
30788: GO 30790
30790: DISABLE
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30795: LD_ADDR_VAR 0 2
30799: PUSH
30800: LD_INT 22
30802: PUSH
30803: LD_OWVAR 2
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 32
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 21
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: PPUSH
30837: CALL_OW 69
30841: ST_TO_ADDR
// if not tmp then
30842: LD_VAR 0 2
30846: NOT
30847: IFFALSE 30851
// exit ;
30849: GO 30880
// for i in tmp do
30851: LD_ADDR_VAR 0 1
30855: PUSH
30856: LD_VAR 0 2
30860: PUSH
30861: FOR_IN
30862: IFFALSE 30878
// SetFuel ( i , 0 ) ;
30864: LD_VAR 0 1
30868: PPUSH
30869: LD_INT 0
30871: PPUSH
30872: CALL_OW 240
30876: GO 30861
30878: POP
30879: POP
// end ;
30880: PPOPN 2
30882: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30883: LD_EXP 69
30887: PUSH
30888: LD_EXP 105
30892: AND
30893: IFFALSE 30959
30895: GO 30897
30897: DISABLE
30898: LD_INT 0
30900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30901: LD_ADDR_VAR 0 1
30905: PUSH
30906: LD_INT 22
30908: PUSH
30909: LD_OWVAR 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: LD_INT 29
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PPUSH
30932: CALL_OW 69
30936: ST_TO_ADDR
// if not tmp then
30937: LD_VAR 0 1
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 30959
// DestroyUnit ( tmp [ 1 ] ) ;
30946: LD_VAR 0 1
30950: PUSH
30951: LD_INT 1
30953: ARRAY
30954: PPUSH
30955: CALL_OW 65
// end ;
30959: PPOPN 1
30961: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30962: LD_EXP 69
30966: PUSH
30967: LD_EXP 107
30971: AND
30972: IFFALSE 31101
30974: GO 30976
30976: DISABLE
30977: LD_INT 0
30979: PPUSH
// begin uc_side := 0 ;
30980: LD_ADDR_OWVAR 20
30984: PUSH
30985: LD_INT 0
30987: ST_TO_ADDR
// uc_nation := nation_arabian ;
30988: LD_ADDR_OWVAR 21
30992: PUSH
30993: LD_INT 2
30995: ST_TO_ADDR
// hc_gallery :=  ;
30996: LD_ADDR_OWVAR 33
31000: PUSH
31001: LD_STRING 
31003: ST_TO_ADDR
// hc_name :=  ;
31004: LD_ADDR_OWVAR 26
31008: PUSH
31009: LD_STRING 
31011: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31012: LD_INT 1
31014: PPUSH
31015: LD_INT 11
31017: PPUSH
31018: LD_INT 10
31020: PPUSH
31021: CALL_OW 380
// un := CreateHuman ;
31025: LD_ADDR_VAR 0 1
31029: PUSH
31030: CALL_OW 44
31034: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31035: LD_VAR 0 1
31039: PPUSH
31040: LD_INT 1
31042: PPUSH
31043: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31047: LD_INT 35
31049: PPUSH
31050: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31054: LD_VAR 0 1
31058: PPUSH
31059: LD_INT 22
31061: PUSH
31062: LD_OWVAR 2
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PPUSH
31071: CALL_OW 69
31075: PPUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 74
31085: PPUSH
31086: CALL_OW 115
// until IsDead ( un ) ;
31090: LD_VAR 0 1
31094: PPUSH
31095: CALL_OW 301
31099: IFFALSE 31047
// end ;
31101: PPOPN 1
31103: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31104: LD_EXP 69
31108: PUSH
31109: LD_EXP 109
31113: AND
31114: IFFALSE 31126
31116: GO 31118
31118: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31119: LD_STRING earthquake(getX(game), 0, 32)
31121: PPUSH
31122: CALL_OW 559
31126: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31127: LD_EXP 69
31131: PUSH
31132: LD_EXP 110
31136: AND
31137: IFFALSE 31228
31139: GO 31141
31141: DISABLE
31142: LD_INT 0
31144: PPUSH
// begin enable ;
31145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31146: LD_ADDR_VAR 0 1
31150: PUSH
31151: LD_INT 22
31153: PUSH
31154: LD_OWVAR 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 21
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 33
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: ST_TO_ADDR
// if not tmp then
31193: LD_VAR 0 1
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31202: LD_VAR 0 1
31206: PUSH
31207: LD_INT 1
31209: PPUSH
31210: LD_VAR 0 1
31214: PPUSH
31215: CALL_OW 12
31219: ARRAY
31220: PPUSH
31221: LD_INT 1
31223: PPUSH
31224: CALL_OW 234
// end ;
31228: PPOPN 1
31230: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31231: LD_EXP 69
31235: PUSH
31236: LD_EXP 111
31240: AND
31241: IFFALSE 31382
31243: GO 31245
31245: DISABLE
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 25
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: ST_TO_ADDR
// if not tmp then
31287: LD_VAR 0 3
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31382
// un := tmp [ rand ( 1 , tmp ) ] ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_VAR 0 3
31305: PUSH
31306: LD_INT 1
31308: PPUSH
31309: LD_VAR 0 3
31313: PPUSH
31314: CALL_OW 12
31318: ARRAY
31319: ST_TO_ADDR
// if Crawls ( un ) then
31320: LD_VAR 0 2
31324: PPUSH
31325: CALL_OW 318
31329: IFFALSE 31340
// ComWalk ( un ) ;
31331: LD_VAR 0 2
31335: PPUSH
31336: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31340: LD_VAR 0 2
31344: PPUSH
31345: LD_INT 9
31347: PPUSH
31348: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31352: LD_INT 28
31354: PPUSH
31355: LD_OWVAR 2
31359: PPUSH
31360: LD_INT 2
31362: PPUSH
31363: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31367: LD_INT 29
31369: PPUSH
31370: LD_OWVAR 2
31374: PPUSH
31375: LD_INT 2
31377: PPUSH
31378: CALL_OW 322
// end ;
31382: PPOPN 3
31384: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31385: LD_EXP 69
31389: PUSH
31390: LD_EXP 112
31394: AND
31395: IFFALSE 31506
31397: GO 31399
31399: DISABLE
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31405: LD_ADDR_VAR 0 3
31409: PUSH
31410: LD_INT 22
31412: PUSH
31413: LD_OWVAR 2
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 25
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PPUSH
31436: CALL_OW 69
31440: ST_TO_ADDR
// if not tmp then
31441: LD_VAR 0 3
31445: NOT
31446: IFFALSE 31450
// exit ;
31448: GO 31506
// un := tmp [ rand ( 1 , tmp ) ] ;
31450: LD_ADDR_VAR 0 2
31454: PUSH
31455: LD_VAR 0 3
31459: PUSH
31460: LD_INT 1
31462: PPUSH
31463: LD_VAR 0 3
31467: PPUSH
31468: CALL_OW 12
31472: ARRAY
31473: ST_TO_ADDR
// if Crawls ( un ) then
31474: LD_VAR 0 2
31478: PPUSH
31479: CALL_OW 318
31483: IFFALSE 31494
// ComWalk ( un ) ;
31485: LD_VAR 0 2
31489: PPUSH
31490: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31494: LD_VAR 0 2
31498: PPUSH
31499: LD_INT 8
31501: PPUSH
31502: CALL_OW 336
// end ;
31506: PPOPN 3
31508: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31509: LD_EXP 69
31513: PUSH
31514: LD_EXP 113
31518: AND
31519: IFFALSE 31663
31521: GO 31523
31523: DISABLE
31524: LD_INT 0
31526: PPUSH
31527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31528: LD_ADDR_VAR 0 2
31532: PUSH
31533: LD_INT 22
31535: PUSH
31536: LD_OWVAR 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 21
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 34
31560: PUSH
31561: LD_INT 12
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 34
31570: PUSH
31571: LD_INT 51
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 34
31580: PUSH
31581: LD_INT 32
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: PPUSH
31599: CALL_OW 69
31603: ST_TO_ADDR
// if not tmp then
31604: LD_VAR 0 2
31608: NOT
31609: IFFALSE 31613
// exit ;
31611: GO 31663
// for i in tmp do
31613: LD_ADDR_VAR 0 1
31617: PUSH
31618: LD_VAR 0 2
31622: PUSH
31623: FOR_IN
31624: IFFALSE 31661
// if GetCargo ( i , mat_artifact ) = 0 then
31626: LD_VAR 0 1
31630: PPUSH
31631: LD_INT 4
31633: PPUSH
31634: CALL_OW 289
31638: PUSH
31639: LD_INT 0
31641: EQUAL
31642: IFFALSE 31659
// SetCargo ( i , mat_siberit , 100 ) ;
31644: LD_VAR 0 1
31648: PPUSH
31649: LD_INT 3
31651: PPUSH
31652: LD_INT 100
31654: PPUSH
31655: CALL_OW 290
31659: GO 31623
31661: POP
31662: POP
// end ;
31663: PPOPN 2
31665: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31666: LD_EXP 69
31670: PUSH
31671: LD_EXP 114
31675: AND
31676: IFFALSE 31859
31678: GO 31680
31680: DISABLE
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_INT 22
31692: PUSH
31693: LD_OWVAR 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PPUSH
31702: CALL_OW 69
31706: ST_TO_ADDR
// if not tmp then
31707: LD_VAR 0 2
31711: NOT
31712: IFFALSE 31716
// exit ;
31714: GO 31859
// for i := 1 to 2 do
31716: LD_ADDR_VAR 0 1
31720: PUSH
31721: DOUBLE
31722: LD_INT 1
31724: DEC
31725: ST_TO_ADDR
31726: LD_INT 2
31728: PUSH
31729: FOR_TO
31730: IFFALSE 31857
// begin uc_side := your_side ;
31732: LD_ADDR_OWVAR 20
31736: PUSH
31737: LD_OWVAR 2
31741: ST_TO_ADDR
// uc_nation := nation_american ;
31742: LD_ADDR_OWVAR 21
31746: PUSH
31747: LD_INT 1
31749: ST_TO_ADDR
// vc_chassis := us_morphling ;
31750: LD_ADDR_OWVAR 37
31754: PUSH
31755: LD_INT 5
31757: ST_TO_ADDR
// vc_engine := engine_siberite ;
31758: LD_ADDR_OWVAR 39
31762: PUSH
31763: LD_INT 3
31765: ST_TO_ADDR
// vc_control := control_computer ;
31766: LD_ADDR_OWVAR 38
31770: PUSH
31771: LD_INT 3
31773: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31774: LD_ADDR_OWVAR 40
31778: PUSH
31779: LD_INT 10
31781: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31782: LD_VAR 0 2
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: PPUSH
31791: CALL_OW 310
31795: NOT
31796: IFFALSE 31843
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31798: CALL_OW 45
31802: PPUSH
31803: LD_VAR 0 2
31807: PUSH
31808: LD_INT 1
31810: ARRAY
31811: PPUSH
31812: CALL_OW 250
31816: PPUSH
31817: LD_VAR 0 2
31821: PUSH
31822: LD_INT 1
31824: ARRAY
31825: PPUSH
31826: CALL_OW 251
31830: PPUSH
31831: LD_INT 12
31833: PPUSH
31834: LD_INT 1
31836: PPUSH
31837: CALL_OW 50
31841: GO 31855
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31843: CALL_OW 45
31847: PPUSH
31848: LD_INT 1
31850: PPUSH
31851: CALL_OW 51
// end ;
31855: GO 31729
31857: POP
31858: POP
// end ;
31859: PPOPN 2
31861: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31862: LD_EXP 69
31866: PUSH
31867: LD_EXP 115
31871: AND
31872: IFFALSE 32094
31874: GO 31876
31876: DISABLE
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
31884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31885: LD_ADDR_VAR 0 6
31889: PUSH
31890: LD_INT 22
31892: PUSH
31893: LD_OWVAR 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 21
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: PUSH
31915: LD_INT 23
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 69
31938: ST_TO_ADDR
// if not tmp then
31939: LD_VAR 0 6
31943: NOT
31944: IFFALSE 31948
// exit ;
31946: GO 32094
// s1 := rand ( 1 , 4 ) ;
31948: LD_ADDR_VAR 0 2
31952: PUSH
31953: LD_INT 1
31955: PPUSH
31956: LD_INT 4
31958: PPUSH
31959: CALL_OW 12
31963: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31964: LD_ADDR_VAR 0 4
31968: PUSH
31969: LD_VAR 0 6
31973: PUSH
31974: LD_INT 1
31976: ARRAY
31977: PPUSH
31978: LD_VAR 0 2
31982: PPUSH
31983: CALL_OW 259
31987: ST_TO_ADDR
// if s1 = 1 then
31988: LD_VAR 0 2
31992: PUSH
31993: LD_INT 1
31995: EQUAL
31996: IFFALSE 32016
// s2 := rand ( 2 , 4 ) else
31998: LD_ADDR_VAR 0 3
32002: PUSH
32003: LD_INT 2
32005: PPUSH
32006: LD_INT 4
32008: PPUSH
32009: CALL_OW 12
32013: ST_TO_ADDR
32014: GO 32024
// s2 := 1 ;
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 1
32023: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32024: LD_ADDR_VAR 0 5
32028: PUSH
32029: LD_VAR 0 6
32033: PUSH
32034: LD_INT 1
32036: ARRAY
32037: PPUSH
32038: LD_VAR 0 3
32042: PPUSH
32043: CALL_OW 259
32047: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32048: LD_VAR 0 6
32052: PUSH
32053: LD_INT 1
32055: ARRAY
32056: PPUSH
32057: LD_VAR 0 2
32061: PPUSH
32062: LD_VAR 0 5
32066: PPUSH
32067: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32071: LD_VAR 0 6
32075: PUSH
32076: LD_INT 1
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: LD_VAR 0 4
32089: PPUSH
32090: CALL_OW 237
// end ;
32094: PPOPN 6
32096: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32097: LD_EXP 69
32101: PUSH
32102: LD_EXP 116
32106: AND
32107: IFFALSE 32186
32109: GO 32111
32111: DISABLE
32112: LD_INT 0
32114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32115: LD_ADDR_VAR 0 1
32119: PUSH
32120: LD_INT 22
32122: PUSH
32123: LD_OWVAR 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 30
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PPUSH
32146: CALL_OW 69
32150: ST_TO_ADDR
// if not tmp then
32151: LD_VAR 0 1
32155: NOT
32156: IFFALSE 32160
// exit ;
32158: GO 32186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32160: LD_VAR 0 1
32164: PUSH
32165: LD_INT 1
32167: PPUSH
32168: LD_VAR 0 1
32172: PPUSH
32173: CALL_OW 12
32177: ARRAY
32178: PPUSH
32179: LD_INT 1
32181: PPUSH
32182: CALL_OW 234
// end ;
32186: PPOPN 1
32188: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32189: LD_EXP 69
32193: PUSH
32194: LD_EXP 117
32198: AND
32199: IFFALSE 32311
32201: GO 32203
32203: DISABLE
32204: LD_INT 0
32206: PPUSH
32207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32208: LD_ADDR_VAR 0 2
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_OWVAR 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 30
32230: PUSH
32231: LD_INT 27
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 30
32240: PUSH
32241: LD_INT 26
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 30
32250: PUSH
32251: LD_INT 28
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 69
32272: ST_TO_ADDR
// if not tmp then
32273: LD_VAR 0 2
32277: NOT
32278: IFFALSE 32282
// exit ;
32280: GO 32311
// for i in tmp do
32282: LD_ADDR_VAR 0 1
32286: PUSH
32287: LD_VAR 0 2
32291: PUSH
32292: FOR_IN
32293: IFFALSE 32309
// SetLives ( i , 1 ) ;
32295: LD_VAR 0 1
32299: PPUSH
32300: LD_INT 1
32302: PPUSH
32303: CALL_OW 234
32307: GO 32292
32309: POP
32310: POP
// end ;
32311: PPOPN 2
32313: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32314: LD_EXP 69
32318: PUSH
32319: LD_EXP 118
32323: AND
32324: IFFALSE 32611
32326: GO 32328
32328: DISABLE
32329: LD_INT 0
32331: PPUSH
32332: PPUSH
32333: PPUSH
// begin i := rand ( 1 , 7 ) ;
32334: LD_ADDR_VAR 0 1
32338: PUSH
32339: LD_INT 1
32341: PPUSH
32342: LD_INT 7
32344: PPUSH
32345: CALL_OW 12
32349: ST_TO_ADDR
// case i of 1 :
32350: LD_VAR 0 1
32354: PUSH
32355: LD_INT 1
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32373
32363: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32364: LD_STRING earthquake(getX(game), 0, 32)
32366: PPUSH
32367: CALL_OW 559
32371: GO 32611
32373: LD_INT 2
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32381
32379: GO 32395
32381: POP
// begin ToLua ( displayStucuk(); ) ;
32382: LD_STRING displayStucuk();
32384: PPUSH
32385: CALL_OW 559
// ResetFog ;
32389: CALL_OW 335
// end ; 3 :
32393: GO 32611
32395: LD_INT 3
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32507
32403: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32404: LD_ADDR_VAR 0 2
32408: PUSH
32409: LD_INT 22
32411: PUSH
32412: LD_OWVAR 2
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 25
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PPUSH
32435: CALL_OW 69
32439: ST_TO_ADDR
// if not tmp then
32440: LD_VAR 0 2
32444: NOT
32445: IFFALSE 32449
// exit ;
32447: GO 32611
// un := tmp [ rand ( 1 , tmp ) ] ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_VAR 0 2
32458: PUSH
32459: LD_INT 1
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: CALL_OW 12
32471: ARRAY
32472: ST_TO_ADDR
// if Crawls ( un ) then
32473: LD_VAR 0 3
32477: PPUSH
32478: CALL_OW 318
32482: IFFALSE 32493
// ComWalk ( un ) ;
32484: LD_VAR 0 3
32488: PPUSH
32489: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32493: LD_VAR 0 3
32497: PPUSH
32498: LD_INT 8
32500: PPUSH
32501: CALL_OW 336
// end ; 4 :
32505: GO 32611
32507: LD_INT 4
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32589
32515: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32516: LD_ADDR_VAR 0 2
32520: PUSH
32521: LD_INT 22
32523: PUSH
32524: LD_OWVAR 2
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 30
32535: PUSH
32536: LD_INT 29
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PPUSH
32547: CALL_OW 69
32551: ST_TO_ADDR
// if not tmp then
32552: LD_VAR 0 2
32556: NOT
32557: IFFALSE 32561
// exit ;
32559: GO 32611
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32561: LD_VAR 0 2
32565: PUSH
32566: LD_INT 1
32568: ARRAY
32569: PPUSH
32570: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32574: LD_VAR 0 2
32578: PUSH
32579: LD_INT 1
32581: ARRAY
32582: PPUSH
32583: CALL_OW 65
// end ; 5 .. 7 :
32587: GO 32611
32589: LD_INT 5
32591: DOUBLE
32592: GREATEREQUAL
32593: IFFALSE 32601
32595: LD_INT 7
32597: DOUBLE
32598: LESSEQUAL
32599: IFTRUE 32603
32601: GO 32610
32603: POP
// StreamSibBomb ; end ;
32604: CALL 28848 0 0
32608: GO 32611
32610: POP
// end ;
32611: PPOPN 3
32613: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32614: LD_EXP 69
32618: PUSH
32619: LD_EXP 119
32623: AND
32624: IFFALSE 32780
32626: GO 32628
32628: DISABLE
32629: LD_INT 0
32631: PPUSH
32632: PPUSH
32633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32634: LD_ADDR_VAR 0 2
32638: PUSH
32639: LD_INT 81
32641: PUSH
32642: LD_OWVAR 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 21
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 21
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PPUSH
32683: CALL_OW 69
32687: ST_TO_ADDR
// if not tmp then
32688: LD_VAR 0 2
32692: NOT
32693: IFFALSE 32697
// exit ;
32695: GO 32780
// p := 0 ;
32697: LD_ADDR_VAR 0 3
32701: PUSH
32702: LD_INT 0
32704: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32705: LD_INT 35
32707: PPUSH
32708: CALL_OW 67
// p := p + 1 ;
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: LD_VAR 0 3
32721: PUSH
32722: LD_INT 1
32724: PLUS
32725: ST_TO_ADDR
// for i in tmp do
32726: LD_ADDR_VAR 0 1
32730: PUSH
32731: LD_VAR 0 2
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32768
// if GetLives ( i ) < 1000 then
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL_OW 256
32748: PUSH
32749: LD_INT 1000
32751: LESS
32752: IFFALSE 32766
// SetLives ( i , 1000 ) ;
32754: LD_VAR 0 1
32758: PPUSH
32759: LD_INT 1000
32761: PPUSH
32762: CALL_OW 234
32766: GO 32736
32768: POP
32769: POP
// until p > 20 ;
32770: LD_VAR 0 3
32774: PUSH
32775: LD_INT 20
32777: GREATER
32778: IFFALSE 32705
// end ;
32780: PPOPN 3
32782: END
// every 0 0$1 trigger StreamModeActive and sTime do
32783: LD_EXP 69
32787: PUSH
32788: LD_EXP 120
32792: AND
32793: IFFALSE 32828
32795: GO 32797
32797: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32798: LD_INT 28
32800: PPUSH
32801: LD_OWVAR 2
32805: PPUSH
32806: LD_INT 2
32808: PPUSH
32809: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32813: LD_INT 30
32815: PPUSH
32816: LD_OWVAR 2
32820: PPUSH
32821: LD_INT 2
32823: PPUSH
32824: CALL_OW 322
// end ;
32828: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32829: LD_EXP 69
32833: PUSH
32834: LD_EXP 121
32838: AND
32839: IFFALSE 32960
32841: GO 32843
32843: DISABLE
32844: LD_INT 0
32846: PPUSH
32847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32848: LD_ADDR_VAR 0 2
32852: PUSH
32853: LD_INT 22
32855: PUSH
32856: LD_OWVAR 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 21
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: LD_INT 23
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: PPUSH
32897: CALL_OW 69
32901: ST_TO_ADDR
// if not tmp then
32902: LD_VAR 0 2
32906: NOT
32907: IFFALSE 32911
// exit ;
32909: GO 32960
// for i in tmp do
32911: LD_ADDR_VAR 0 1
32915: PUSH
32916: LD_VAR 0 2
32920: PUSH
32921: FOR_IN
32922: IFFALSE 32958
// begin if Crawls ( i ) then
32924: LD_VAR 0 1
32928: PPUSH
32929: CALL_OW 318
32933: IFFALSE 32944
// ComWalk ( i ) ;
32935: LD_VAR 0 1
32939: PPUSH
32940: CALL_OW 138
// SetClass ( i , 2 ) ;
32944: LD_VAR 0 1
32948: PPUSH
32949: LD_INT 2
32951: PPUSH
32952: CALL_OW 336
// end ;
32956: GO 32921
32958: POP
32959: POP
// end ;
32960: PPOPN 2
32962: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32963: LD_EXP 69
32967: PUSH
32968: LD_EXP 122
32972: AND
32973: IFFALSE 33261
32975: GO 32977
32977: DISABLE
32978: LD_INT 0
32980: PPUSH
32981: PPUSH
32982: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32983: LD_OWVAR 2
32987: PPUSH
32988: LD_INT 9
32990: PPUSH
32991: LD_INT 1
32993: PPUSH
32994: LD_INT 1
32996: PPUSH
32997: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33001: LD_INT 9
33003: PPUSH
33004: LD_OWVAR 2
33008: PPUSH
33009: CALL_OW 343
// uc_side := 9 ;
33013: LD_ADDR_OWVAR 20
33017: PUSH
33018: LD_INT 9
33020: ST_TO_ADDR
// uc_nation := 2 ;
33021: LD_ADDR_OWVAR 21
33025: PUSH
33026: LD_INT 2
33028: ST_TO_ADDR
// hc_name := Dark Warrior ;
33029: LD_ADDR_OWVAR 26
33033: PUSH
33034: LD_STRING Dark Warrior
33036: ST_TO_ADDR
// hc_gallery :=  ;
33037: LD_ADDR_OWVAR 33
33041: PUSH
33042: LD_STRING 
33044: ST_TO_ADDR
// hc_noskilllimit := true ;
33045: LD_ADDR_OWVAR 76
33049: PUSH
33050: LD_INT 1
33052: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33053: LD_ADDR_OWVAR 31
33057: PUSH
33058: LD_INT 30
33060: PUSH
33061: LD_INT 30
33063: PUSH
33064: LD_INT 30
33066: PUSH
33067: LD_INT 30
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// un := CreateHuman ;
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: CALL_OW 44
33085: ST_TO_ADDR
// hc_noskilllimit := false ;
33086: LD_ADDR_OWVAR 76
33090: PUSH
33091: LD_INT 0
33093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33094: LD_VAR 0 3
33098: PPUSH
33099: LD_INT 1
33101: PPUSH
33102: CALL_OW 51
// ToLua ( playRanger() ) ;
33106: LD_STRING playRanger()
33108: PPUSH
33109: CALL_OW 559
// p := 0 ;
33113: LD_ADDR_VAR 0 2
33117: PUSH
33118: LD_INT 0
33120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33121: LD_INT 35
33123: PPUSH
33124: CALL_OW 67
// p := p + 1 ;
33128: LD_ADDR_VAR 0 2
33132: PUSH
33133: LD_VAR 0 2
33137: PUSH
33138: LD_INT 1
33140: PLUS
33141: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33142: LD_VAR 0 3
33146: PPUSH
33147: CALL_OW 256
33151: PUSH
33152: LD_INT 1000
33154: LESS
33155: IFFALSE 33169
// SetLives ( un , 1000 ) ;
33157: LD_VAR 0 3
33161: PPUSH
33162: LD_INT 1000
33164: PPUSH
33165: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33169: LD_VAR 0 3
33173: PPUSH
33174: LD_INT 81
33176: PUSH
33177: LD_OWVAR 2
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 91
33188: PUSH
33189: LD_VAR 0 3
33193: PUSH
33194: LD_INT 30
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 69
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: CALL_OW 74
33220: PPUSH
33221: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33225: LD_VAR 0 2
33229: PUSH
33230: LD_INT 80
33232: GREATER
33233: PUSH
33234: LD_VAR 0 3
33238: PPUSH
33239: CALL_OW 301
33243: OR
33244: IFFALSE 33121
// if un then
33246: LD_VAR 0 3
33250: IFFALSE 33261
// RemoveUnit ( un ) ;
33252: LD_VAR 0 3
33256: PPUSH
33257: CALL_OW 64
// end ;
33261: PPOPN 3
33263: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33264: LD_EXP 123
33268: IFFALSE 33384
33270: GO 33272
33272: DISABLE
33273: LD_INT 0
33275: PPUSH
33276: PPUSH
33277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33278: LD_ADDR_VAR 0 2
33282: PUSH
33283: LD_INT 81
33285: PUSH
33286: LD_OWVAR 2
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 21
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PPUSH
33309: CALL_OW 69
33313: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33314: LD_STRING playComputer()
33316: PPUSH
33317: CALL_OW 559
// if not tmp then
33321: LD_VAR 0 2
33325: NOT
33326: IFFALSE 33330
// exit ;
33328: GO 33384
// for i in tmp do
33330: LD_ADDR_VAR 0 1
33334: PUSH
33335: LD_VAR 0 2
33339: PUSH
33340: FOR_IN
33341: IFFALSE 33382
// for j := 1 to 4 do
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_INT 4
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33378
// SetSkill ( i , j , 10 ) ;
33359: LD_VAR 0 1
33363: PPUSH
33364: LD_VAR 0 3
33368: PPUSH
33369: LD_INT 10
33371: PPUSH
33372: CALL_OW 237
33376: GO 33356
33378: POP
33379: POP
33380: GO 33340
33382: POP
33383: POP
// end ;
33384: PPOPN 3
33386: END
// every 0 0$1 trigger s30 do var i , tmp ;
33387: LD_EXP 124
33391: IFFALSE 33460
33393: GO 33395
33395: DISABLE
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: LD_OWVAR 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PPUSH
33417: CALL_OW 69
33421: ST_TO_ADDR
// if not tmp then
33422: LD_VAR 0 2
33426: NOT
33427: IFFALSE 33431
// exit ;
33429: GO 33460
// for i in tmp do
33431: LD_ADDR_VAR 0 1
33435: PUSH
33436: LD_VAR 0 2
33440: PUSH
33441: FOR_IN
33442: IFFALSE 33458
// SetLives ( i , 300 ) ;
33444: LD_VAR 0 1
33448: PPUSH
33449: LD_INT 300
33451: PPUSH
33452: CALL_OW 234
33456: GO 33441
33458: POP
33459: POP
// end ;
33460: PPOPN 2
33462: END
// every 0 0$1 trigger s60 do var i , tmp ;
33463: LD_EXP 125
33467: IFFALSE 33536
33469: GO 33471
33471: DISABLE
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33476: LD_ADDR_VAR 0 2
33480: PUSH
33481: LD_INT 22
33483: PUSH
33484: LD_OWVAR 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PPUSH
33493: CALL_OW 69
33497: ST_TO_ADDR
// if not tmp then
33498: LD_VAR 0 2
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33536
// for i in tmp do
33507: LD_ADDR_VAR 0 1
33511: PUSH
33512: LD_VAR 0 2
33516: PUSH
33517: FOR_IN
33518: IFFALSE 33534
// SetLives ( i , 600 ) ;
33520: LD_VAR 0 1
33524: PPUSH
33525: LD_INT 600
33527: PPUSH
33528: CALL_OW 234
33532: GO 33517
33534: POP
33535: POP
// end ;
33536: PPOPN 2
33538: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33539: LD_INT 0
33541: PPUSH
// case cmd of 301 :
33542: LD_VAR 0 1
33546: PUSH
33547: LD_INT 301
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33587
33555: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33556: LD_VAR 0 6
33560: PPUSH
33561: LD_VAR 0 7
33565: PPUSH
33566: LD_VAR 0 8
33570: PPUSH
33571: LD_VAR 0 4
33575: PPUSH
33576: LD_VAR 0 5
33580: PPUSH
33581: CALL 34788 0 5
33585: GO 33708
33587: LD_INT 302
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33632
33595: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33596: LD_VAR 0 6
33600: PPUSH
33601: LD_VAR 0 7
33605: PPUSH
33606: LD_VAR 0 8
33610: PPUSH
33611: LD_VAR 0 9
33615: PPUSH
33616: LD_VAR 0 4
33620: PPUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL 34879 0 6
33630: GO 33708
33632: LD_INT 303
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33677
33640: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33641: LD_VAR 0 6
33645: PPUSH
33646: LD_VAR 0 7
33650: PPUSH
33651: LD_VAR 0 8
33655: PPUSH
33656: LD_VAR 0 9
33660: PPUSH
33661: LD_VAR 0 4
33665: PPUSH
33666: LD_VAR 0 5
33670: PPUSH
33671: CALL 33713 0 6
33675: GO 33708
33677: LD_INT 304
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33707
33685: POP
// hHackTeleport ( unit , x , y ) ; end ;
33686: LD_VAR 0 2
33690: PPUSH
33691: LD_VAR 0 4
33695: PPUSH
33696: LD_VAR 0 5
33700: PPUSH
33701: CALL 35472 0 3
33705: GO 33708
33707: POP
// end ;
33708: LD_VAR 0 12
33712: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33713: LD_INT 0
33715: PPUSH
33716: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33717: LD_VAR 0 1
33721: PUSH
33722: LD_INT 1
33724: LESS
33725: PUSH
33726: LD_VAR 0 1
33730: PUSH
33731: LD_INT 3
33733: GREATER
33734: OR
33735: PUSH
33736: LD_VAR 0 5
33740: PPUSH
33741: LD_VAR 0 6
33745: PPUSH
33746: CALL_OW 428
33750: OR
33751: IFFALSE 33755
// exit ;
33753: GO 34475
// uc_side := your_side ;
33755: LD_ADDR_OWVAR 20
33759: PUSH
33760: LD_OWVAR 2
33764: ST_TO_ADDR
// uc_nation := nation ;
33765: LD_ADDR_OWVAR 21
33769: PUSH
33770: LD_VAR 0 1
33774: ST_TO_ADDR
// bc_level = 1 ;
33775: LD_ADDR_OWVAR 43
33779: PUSH
33780: LD_INT 1
33782: ST_TO_ADDR
// case btype of 1 :
33783: LD_VAR 0 2
33787: PUSH
33788: LD_INT 1
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33807
33796: POP
// bc_type := b_depot ; 2 :
33797: LD_ADDR_OWVAR 42
33801: PUSH
33802: LD_INT 0
33804: ST_TO_ADDR
33805: GO 34419
33807: LD_INT 2
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33826
33815: POP
// bc_type := b_warehouse ; 3 :
33816: LD_ADDR_OWVAR 42
33820: PUSH
33821: LD_INT 1
33823: ST_TO_ADDR
33824: GO 34419
33826: LD_INT 3
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33845
33834: POP
// bc_type := b_lab ; 4 .. 9 :
33835: LD_ADDR_OWVAR 42
33839: PUSH
33840: LD_INT 6
33842: ST_TO_ADDR
33843: GO 34419
33845: LD_INT 4
33847: DOUBLE
33848: GREATEREQUAL
33849: IFFALSE 33857
33851: LD_INT 9
33853: DOUBLE
33854: LESSEQUAL
33855: IFTRUE 33859
33857: GO 33911
33859: POP
// begin bc_type := b_lab_half ;
33860: LD_ADDR_OWVAR 42
33864: PUSH
33865: LD_INT 7
33867: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33868: LD_ADDR_OWVAR 44
33872: PUSH
33873: LD_INT 10
33875: PUSH
33876: LD_INT 11
33878: PUSH
33879: LD_INT 12
33881: PUSH
33882: LD_INT 15
33884: PUSH
33885: LD_INT 14
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: PUSH
33899: LD_VAR 0 2
33903: PUSH
33904: LD_INT 3
33906: MINUS
33907: ARRAY
33908: ST_TO_ADDR
// end ; 10 .. 13 :
33909: GO 34419
33911: LD_INT 10
33913: DOUBLE
33914: GREATEREQUAL
33915: IFFALSE 33923
33917: LD_INT 13
33919: DOUBLE
33920: LESSEQUAL
33921: IFTRUE 33925
33923: GO 34002
33925: POP
// begin bc_type := b_lab_full ;
33926: LD_ADDR_OWVAR 42
33930: PUSH
33931: LD_INT 8
33933: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33934: LD_ADDR_OWVAR 44
33938: PUSH
33939: LD_INT 10
33941: PUSH
33942: LD_INT 12
33944: PUSH
33945: LD_INT 14
33947: PUSH
33948: LD_INT 13
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: PUSH
33957: LD_VAR 0 2
33961: PUSH
33962: LD_INT 9
33964: MINUS
33965: ARRAY
33966: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33967: LD_ADDR_OWVAR 45
33971: PUSH
33972: LD_INT 11
33974: PUSH
33975: LD_INT 15
33977: PUSH
33978: LD_INT 12
33980: PUSH
33981: LD_INT 15
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: PUSH
33990: LD_VAR 0 2
33994: PUSH
33995: LD_INT 9
33997: MINUS
33998: ARRAY
33999: ST_TO_ADDR
// end ; 14 :
34000: GO 34419
34002: LD_INT 14
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34021
34010: POP
// bc_type := b_workshop ; 15 :
34011: LD_ADDR_OWVAR 42
34015: PUSH
34016: LD_INT 2
34018: ST_TO_ADDR
34019: GO 34419
34021: LD_INT 15
34023: DOUBLE
34024: EQUAL
34025: IFTRUE 34029
34027: GO 34040
34029: POP
// bc_type := b_factory ; 16 :
34030: LD_ADDR_OWVAR 42
34034: PUSH
34035: LD_INT 3
34037: ST_TO_ADDR
34038: GO 34419
34040: LD_INT 16
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34059
34048: POP
// bc_type := b_ext_gun ; 17 :
34049: LD_ADDR_OWVAR 42
34053: PUSH
34054: LD_INT 17
34056: ST_TO_ADDR
34057: GO 34419
34059: LD_INT 17
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34095
34067: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34068: LD_ADDR_OWVAR 42
34072: PUSH
34073: LD_INT 19
34075: PUSH
34076: LD_INT 23
34078: PUSH
34079: LD_INT 19
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: LD_VAR 0 1
34091: ARRAY
34092: ST_TO_ADDR
34093: GO 34419
34095: LD_INT 18
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34114
34103: POP
// bc_type := b_ext_radar ; 19 :
34104: LD_ADDR_OWVAR 42
34108: PUSH
34109: LD_INT 20
34111: ST_TO_ADDR
34112: GO 34419
34114: LD_INT 19
34116: DOUBLE
34117: EQUAL
34118: IFTRUE 34122
34120: GO 34133
34122: POP
// bc_type := b_ext_radio ; 20 :
34123: LD_ADDR_OWVAR 42
34127: PUSH
34128: LD_INT 22
34130: ST_TO_ADDR
34131: GO 34419
34133: LD_INT 20
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34152
34141: POP
// bc_type := b_ext_siberium ; 21 :
34142: LD_ADDR_OWVAR 42
34146: PUSH
34147: LD_INT 21
34149: ST_TO_ADDR
34150: GO 34419
34152: LD_INT 21
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34171
34160: POP
// bc_type := b_ext_computer ; 22 :
34161: LD_ADDR_OWVAR 42
34165: PUSH
34166: LD_INT 24
34168: ST_TO_ADDR
34169: GO 34419
34171: LD_INT 22
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34190
34179: POP
// bc_type := b_ext_track ; 23 :
34180: LD_ADDR_OWVAR 42
34184: PUSH
34185: LD_INT 16
34187: ST_TO_ADDR
34188: GO 34419
34190: LD_INT 23
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34209
34198: POP
// bc_type := b_ext_laser ; 24 :
34199: LD_ADDR_OWVAR 42
34203: PUSH
34204: LD_INT 25
34206: ST_TO_ADDR
34207: GO 34419
34209: LD_INT 24
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34217
34215: GO 34228
34217: POP
// bc_type := b_control_tower ; 25 :
34218: LD_ADDR_OWVAR 42
34222: PUSH
34223: LD_INT 36
34225: ST_TO_ADDR
34226: GO 34419
34228: LD_INT 25
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34236
34234: GO 34247
34236: POP
// bc_type := b_breastwork ; 26 :
34237: LD_ADDR_OWVAR 42
34241: PUSH
34242: LD_INT 31
34244: ST_TO_ADDR
34245: GO 34419
34247: LD_INT 26
34249: DOUBLE
34250: EQUAL
34251: IFTRUE 34255
34253: GO 34266
34255: POP
// bc_type := b_bunker ; 27 :
34256: LD_ADDR_OWVAR 42
34260: PUSH
34261: LD_INT 32
34263: ST_TO_ADDR
34264: GO 34419
34266: LD_INT 27
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34285
34274: POP
// bc_type := b_turret ; 28 :
34275: LD_ADDR_OWVAR 42
34279: PUSH
34280: LD_INT 33
34282: ST_TO_ADDR
34283: GO 34419
34285: LD_INT 28
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34304
34293: POP
// bc_type := b_armoury ; 29 :
34294: LD_ADDR_OWVAR 42
34298: PUSH
34299: LD_INT 4
34301: ST_TO_ADDR
34302: GO 34419
34304: LD_INT 29
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34312
34310: GO 34323
34312: POP
// bc_type := b_barracks ; 30 :
34313: LD_ADDR_OWVAR 42
34317: PUSH
34318: LD_INT 5
34320: ST_TO_ADDR
34321: GO 34419
34323: LD_INT 30
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34342
34331: POP
// bc_type := b_solar_power ; 31 :
34332: LD_ADDR_OWVAR 42
34336: PUSH
34337: LD_INT 27
34339: ST_TO_ADDR
34340: GO 34419
34342: LD_INT 31
34344: DOUBLE
34345: EQUAL
34346: IFTRUE 34350
34348: GO 34361
34350: POP
// bc_type := b_oil_power ; 32 :
34351: LD_ADDR_OWVAR 42
34355: PUSH
34356: LD_INT 26
34358: ST_TO_ADDR
34359: GO 34419
34361: LD_INT 32
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34380
34369: POP
// bc_type := b_siberite_power ; 33 :
34370: LD_ADDR_OWVAR 42
34374: PUSH
34375: LD_INT 28
34377: ST_TO_ADDR
34378: GO 34419
34380: LD_INT 33
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34399
34388: POP
// bc_type := b_oil_mine ; 34 :
34389: LD_ADDR_OWVAR 42
34393: PUSH
34394: LD_INT 29
34396: ST_TO_ADDR
34397: GO 34419
34399: LD_INT 34
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34418
34407: POP
// bc_type := b_siberite_mine ; end ;
34408: LD_ADDR_OWVAR 42
34412: PUSH
34413: LD_INT 30
34415: ST_TO_ADDR
34416: GO 34419
34418: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34419: LD_ADDR_VAR 0 8
34423: PUSH
34424: LD_VAR 0 5
34428: PPUSH
34429: LD_VAR 0 6
34433: PPUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 47
34443: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34444: LD_OWVAR 42
34448: PUSH
34449: LD_INT 32
34451: PUSH
34452: LD_INT 33
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: IN
34459: IFFALSE 34475
// PlaceWeaponTurret ( b , weapon ) ;
34461: LD_VAR 0 8
34465: PPUSH
34466: LD_VAR 0 4
34470: PPUSH
34471: CALL_OW 431
// end ;
34475: LD_VAR 0 7
34479: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34480: LD_INT 0
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34486: LD_ADDR_VAR 0 4
34490: PUSH
34491: LD_INT 22
34493: PUSH
34494: LD_OWVAR 2
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 30
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 30
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PPUSH
34535: CALL_OW 69
34539: ST_TO_ADDR
// if not tmp then
34540: LD_VAR 0 4
34544: NOT
34545: IFFALSE 34549
// exit ;
34547: GO 34608
// for i in tmp do
34549: LD_ADDR_VAR 0 2
34553: PUSH
34554: LD_VAR 0 4
34558: PUSH
34559: FOR_IN
34560: IFFALSE 34606
// for j = 1 to 3 do
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: DOUBLE
34568: LD_INT 1
34570: DEC
34571: ST_TO_ADDR
34572: LD_INT 3
34574: PUSH
34575: FOR_TO
34576: IFFALSE 34602
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34578: LD_VAR 0 2
34582: PPUSH
34583: CALL_OW 274
34587: PPUSH
34588: LD_VAR 0 3
34592: PPUSH
34593: LD_INT 99999
34595: PPUSH
34596: CALL_OW 277
34600: GO 34575
34602: POP
34603: POP
34604: GO 34559
34606: POP
34607: POP
// end ;
34608: LD_VAR 0 1
34612: RET
// export function hHackSetLevel10 ; var i , j ; begin
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
34617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34618: LD_ADDR_VAR 0 2
34622: PUSH
34623: LD_INT 21
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PPUSH
34633: CALL_OW 69
34637: PUSH
34638: FOR_IN
34639: IFFALSE 34691
// if IsSelected ( i ) then
34641: LD_VAR 0 2
34645: PPUSH
34646: CALL_OW 306
34650: IFFALSE 34689
// begin for j := 1 to 4 do
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: DOUBLE
34658: LD_INT 1
34660: DEC
34661: ST_TO_ADDR
34662: LD_INT 4
34664: PUSH
34665: FOR_TO
34666: IFFALSE 34687
// SetSkill ( i , j , 10 ) ;
34668: LD_VAR 0 2
34672: PPUSH
34673: LD_VAR 0 3
34677: PPUSH
34678: LD_INT 10
34680: PPUSH
34681: CALL_OW 237
34685: GO 34665
34687: POP
34688: POP
// end ;
34689: GO 34638
34691: POP
34692: POP
// end ;
34693: LD_VAR 0 1
34697: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34703: LD_ADDR_VAR 0 2
34707: PUSH
34708: LD_INT 22
34710: PUSH
34711: LD_OWVAR 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 21
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PPUSH
34734: CALL_OW 69
34738: PUSH
34739: FOR_IN
34740: IFFALSE 34781
// begin for j := 1 to 4 do
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: DOUBLE
34748: LD_INT 1
34750: DEC
34751: ST_TO_ADDR
34752: LD_INT 4
34754: PUSH
34755: FOR_TO
34756: IFFALSE 34777
// SetSkill ( i , j , 10 ) ;
34758: LD_VAR 0 2
34762: PPUSH
34763: LD_VAR 0 3
34767: PPUSH
34768: LD_INT 10
34770: PPUSH
34771: CALL_OW 237
34775: GO 34755
34777: POP
34778: POP
// end ;
34779: GO 34739
34781: POP
34782: POP
// end ;
34783: LD_VAR 0 1
34787: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34788: LD_INT 0
34790: PPUSH
// uc_side := your_side ;
34791: LD_ADDR_OWVAR 20
34795: PUSH
34796: LD_OWVAR 2
34800: ST_TO_ADDR
// uc_nation := nation ;
34801: LD_ADDR_OWVAR 21
34805: PUSH
34806: LD_VAR 0 1
34810: ST_TO_ADDR
// InitHc ;
34811: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34815: LD_INT 0
34817: PPUSH
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 3
34827: PPUSH
34828: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34832: LD_VAR 0 4
34836: PPUSH
34837: LD_VAR 0 5
34841: PPUSH
34842: CALL_OW 428
34846: PUSH
34847: LD_INT 0
34849: EQUAL
34850: IFFALSE 34874
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34852: CALL_OW 44
34856: PPUSH
34857: LD_VAR 0 4
34861: PPUSH
34862: LD_VAR 0 5
34866: PPUSH
34867: LD_INT 1
34869: PPUSH
34870: CALL_OW 48
// end ;
34874: LD_VAR 0 6
34878: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34879: LD_INT 0
34881: PPUSH
34882: PPUSH
// uc_side := your_side ;
34883: LD_ADDR_OWVAR 20
34887: PUSH
34888: LD_OWVAR 2
34892: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 5
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: IN
34920: IFFALSE 34932
// uc_nation := nation_american else
34922: LD_ADDR_OWVAR 21
34926: PUSH
34927: LD_INT 1
34929: ST_TO_ADDR
34930: GO 34975
// if chassis in [ 11 , 12 , 13 , 14 ] then
34932: LD_VAR 0 1
34936: PUSH
34937: LD_INT 11
34939: PUSH
34940: LD_INT 12
34942: PUSH
34943: LD_INT 13
34945: PUSH
34946: LD_INT 14
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: IN
34955: IFFALSE 34967
// uc_nation := nation_arabian else
34957: LD_ADDR_OWVAR 21
34961: PUSH
34962: LD_INT 2
34964: ST_TO_ADDR
34965: GO 34975
// uc_nation := nation_russian ;
34967: LD_ADDR_OWVAR 21
34971: PUSH
34972: LD_INT 3
34974: ST_TO_ADDR
// vc_chassis := chassis ;
34975: LD_ADDR_OWVAR 37
34979: PUSH
34980: LD_VAR 0 1
34984: ST_TO_ADDR
// vc_engine := engine ;
34985: LD_ADDR_OWVAR 39
34989: PUSH
34990: LD_VAR 0 2
34994: ST_TO_ADDR
// vc_control := control ;
34995: LD_ADDR_OWVAR 38
34999: PUSH
35000: LD_VAR 0 3
35004: ST_TO_ADDR
// vc_weapon := weapon ;
35005: LD_ADDR_OWVAR 40
35009: PUSH
35010: LD_VAR 0 4
35014: ST_TO_ADDR
// un := CreateVehicle ;
35015: LD_ADDR_VAR 0 8
35019: PUSH
35020: CALL_OW 45
35024: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35025: LD_VAR 0 8
35029: PPUSH
35030: LD_INT 0
35032: PPUSH
35033: LD_INT 5
35035: PPUSH
35036: CALL_OW 12
35040: PPUSH
35041: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35045: LD_VAR 0 8
35049: PPUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: LD_VAR 0 6
35059: PPUSH
35060: LD_INT 1
35062: PPUSH
35063: CALL_OW 48
// end ;
35067: LD_VAR 0 7
35071: RET
// export hInvincible ; every 1 do
35072: GO 35074
35074: DISABLE
// hInvincible := [ ] ;
35075: LD_ADDR_EXP 126
35079: PUSH
35080: EMPTY
35081: ST_TO_ADDR
35082: END
// every 10 do var i ;
35083: GO 35085
35085: DISABLE
35086: LD_INT 0
35088: PPUSH
// begin enable ;
35089: ENABLE
// if not hInvincible then
35090: LD_EXP 126
35094: NOT
35095: IFFALSE 35099
// exit ;
35097: GO 35143
// for i in hInvincible do
35099: LD_ADDR_VAR 0 1
35103: PUSH
35104: LD_EXP 126
35108: PUSH
35109: FOR_IN
35110: IFFALSE 35141
// if GetLives ( i ) < 1000 then
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 256
35121: PUSH
35122: LD_INT 1000
35124: LESS
35125: IFFALSE 35139
// SetLives ( i , 1000 ) ;
35127: LD_VAR 0 1
35131: PPUSH
35132: LD_INT 1000
35134: PPUSH
35135: CALL_OW 234
35139: GO 35109
35141: POP
35142: POP
// end ;
35143: PPOPN 1
35145: END
// export function hHackInvincible ; var i ; begin
35146: LD_INT 0
35148: PPUSH
35149: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35150: LD_ADDR_VAR 0 2
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 21
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 21
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PPUSH
35183: CALL_OW 69
35187: PUSH
35188: FOR_IN
35189: IFFALSE 35250
// if IsSelected ( i ) then
35191: LD_VAR 0 2
35195: PPUSH
35196: CALL_OW 306
35200: IFFALSE 35248
// begin if i in hInvincible then
35202: LD_VAR 0 2
35206: PUSH
35207: LD_EXP 126
35211: IN
35212: IFFALSE 35232
// hInvincible := hInvincible diff i else
35214: LD_ADDR_EXP 126
35218: PUSH
35219: LD_EXP 126
35223: PUSH
35224: LD_VAR 0 2
35228: DIFF
35229: ST_TO_ADDR
35230: GO 35248
// hInvincible := hInvincible union i ;
35232: LD_ADDR_EXP 126
35236: PUSH
35237: LD_EXP 126
35241: PUSH
35242: LD_VAR 0 2
35246: UNION
35247: ST_TO_ADDR
// end ;
35248: GO 35188
35250: POP
35251: POP
// end ;
35252: LD_VAR 0 1
35256: RET
// export function hHackInvisible ; var i , j ; begin
35257: LD_INT 0
35259: PPUSH
35260: PPUSH
35261: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35262: LD_ADDR_VAR 0 2
35266: PUSH
35267: LD_INT 21
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PPUSH
35277: CALL_OW 69
35281: PUSH
35282: FOR_IN
35283: IFFALSE 35307
// if IsSelected ( i ) then
35285: LD_VAR 0 2
35289: PPUSH
35290: CALL_OW 306
35294: IFFALSE 35305
// ComForceInvisible ( i ) ;
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 496
35305: GO 35282
35307: POP
35308: POP
// end ;
35309: LD_VAR 0 1
35313: RET
// export function hHackChangeYourSide ; begin
35314: LD_INT 0
35316: PPUSH
// if your_side = 8 then
35317: LD_OWVAR 2
35321: PUSH
35322: LD_INT 8
35324: EQUAL
35325: IFFALSE 35337
// your_side := 0 else
35327: LD_ADDR_OWVAR 2
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
35335: GO 35351
// your_side := your_side + 1 ;
35337: LD_ADDR_OWVAR 2
35341: PUSH
35342: LD_OWVAR 2
35346: PUSH
35347: LD_INT 1
35349: PLUS
35350: ST_TO_ADDR
// end ;
35351: LD_VAR 0 1
35355: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35356: LD_INT 0
35358: PPUSH
35359: PPUSH
35360: PPUSH
// for i in all_units do
35361: LD_ADDR_VAR 0 2
35365: PUSH
35366: LD_OWVAR 3
35370: PUSH
35371: FOR_IN
35372: IFFALSE 35450
// if IsSelected ( i ) then
35374: LD_VAR 0 2
35378: PPUSH
35379: CALL_OW 306
35383: IFFALSE 35448
// begin j := GetSide ( i ) ;
35385: LD_ADDR_VAR 0 3
35389: PUSH
35390: LD_VAR 0 2
35394: PPUSH
35395: CALL_OW 255
35399: ST_TO_ADDR
// if j = 8 then
35400: LD_VAR 0 3
35404: PUSH
35405: LD_INT 8
35407: EQUAL
35408: IFFALSE 35420
// j := 0 else
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
35418: GO 35434
// j := j + 1 ;
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_VAR 0 3
35429: PUSH
35430: LD_INT 1
35432: PLUS
35433: ST_TO_ADDR
// SetSide ( i , j ) ;
35434: LD_VAR 0 2
35438: PPUSH
35439: LD_VAR 0 3
35443: PPUSH
35444: CALL_OW 235
// end ;
35448: GO 35371
35450: POP
35451: POP
// end ;
35452: LD_VAR 0 1
35456: RET
// export function hHackFog ; begin
35457: LD_INT 0
35459: PPUSH
// FogOff ( true ) ;
35460: LD_INT 1
35462: PPUSH
35463: CALL_OW 344
// end ;
35467: LD_VAR 0 1
35471: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35472: LD_INT 0
35474: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35475: LD_VAR 0 1
35479: PPUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_VAR 0 3
35489: PPUSH
35490: LD_INT 1
35492: PPUSH
35493: LD_INT 1
35495: PPUSH
35496: CALL_OW 483
// CenterOnXY ( x , y ) ;
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_VAR 0 3
35509: PPUSH
35510: CALL_OW 84
// end ; end_of_file
35514: LD_VAR 0 4
35518: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35519: LD_INT 0
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 264
35534: PUSH
35535: LD_EXP 53
35539: EQUAL
35540: IFFALSE 35612
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35542: LD_INT 68
35544: PPUSH
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 255
35554: PPUSH
35555: CALL_OW 321
35559: PUSH
35560: LD_INT 2
35562: EQUAL
35563: IFFALSE 35575
// eff := 70 else
35565: LD_ADDR_VAR 0 4
35569: PUSH
35570: LD_INT 70
35572: ST_TO_ADDR
35573: GO 35583
// eff := 30 ;
35575: LD_ADDR_VAR 0 4
35579: PUSH
35580: LD_INT 30
35582: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL_OW 250
35592: PPUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 251
35602: PPUSH
35603: LD_VAR 0 4
35607: PPUSH
35608: CALL_OW 495
// end ; end ;
35612: LD_VAR 0 2
35616: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35617: LD_INT 0
35619: PPUSH
// end ;
35620: LD_VAR 0 4
35624: RET
// export function SOS_Command ( cmd ) ; begin
35625: LD_INT 0
35627: PPUSH
// end ;
35628: LD_VAR 0 2
35632: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35633: LD_INT 0
35635: PPUSH
// end ;
35636: LD_VAR 0 6
35640: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35641: LD_INT 0
35643: PPUSH
35644: PPUSH
// if not vehicle or not factory then
35645: LD_VAR 0 1
35649: NOT
35650: PUSH
35651: LD_VAR 0 2
35655: NOT
35656: OR
35657: IFFALSE 35661
// exit ;
35659: GO 35892
// if factoryWaypoints >= factory then
35661: LD_EXP 127
35665: PUSH
35666: LD_VAR 0 2
35670: GREATEREQUAL
35671: IFFALSE 35892
// if factoryWaypoints [ factory ] then
35673: LD_EXP 127
35677: PUSH
35678: LD_VAR 0 2
35682: ARRAY
35683: IFFALSE 35892
// begin if GetControl ( vehicle ) = control_manual then
35685: LD_VAR 0 1
35689: PPUSH
35690: CALL_OW 263
35694: PUSH
35695: LD_INT 1
35697: EQUAL
35698: IFFALSE 35779
// begin driver := IsDrivenBy ( vehicle ) ;
35700: LD_ADDR_VAR 0 4
35704: PUSH
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 311
35714: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35715: LD_VAR 0 4
35719: PPUSH
35720: LD_EXP 127
35724: PUSH
35725: LD_VAR 0 2
35729: ARRAY
35730: PUSH
35731: LD_INT 3
35733: ARRAY
35734: PPUSH
35735: LD_EXP 127
35739: PUSH
35740: LD_VAR 0 2
35744: ARRAY
35745: PUSH
35746: LD_INT 4
35748: ARRAY
35749: PPUSH
35750: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35754: LD_VAR 0 4
35758: PPUSH
35759: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35763: LD_VAR 0 4
35767: PPUSH
35768: LD_VAR 0 2
35772: PPUSH
35773: CALL_OW 180
// end else
35777: GO 35892
// if GetControl ( vehicle ) = control_remote then
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 263
35788: PUSH
35789: LD_INT 2
35791: EQUAL
35792: IFFALSE 35853
// begin wait ( 0 0$2 ) ;
35794: LD_INT 70
35796: PPUSH
35797: CALL_OW 67
// if Connect ( vehicle ) then
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL 48269 0 1
35810: IFFALSE 35851
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35812: LD_VAR 0 1
35816: PPUSH
35817: LD_EXP 127
35821: PUSH
35822: LD_VAR 0 2
35826: ARRAY
35827: PUSH
35828: LD_INT 3
35830: ARRAY
35831: PPUSH
35832: LD_EXP 127
35836: PUSH
35837: LD_VAR 0 2
35841: ARRAY
35842: PUSH
35843: LD_INT 4
35845: ARRAY
35846: PPUSH
35847: CALL_OW 171
// end else
35851: GO 35892
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35853: LD_VAR 0 1
35857: PPUSH
35858: LD_EXP 127
35862: PUSH
35863: LD_VAR 0 2
35867: ARRAY
35868: PUSH
35869: LD_INT 3
35871: ARRAY
35872: PPUSH
35873: LD_EXP 127
35877: PUSH
35878: LD_VAR 0 2
35882: ARRAY
35883: PUSH
35884: LD_INT 4
35886: ARRAY
35887: PPUSH
35888: CALL_OW 171
// end ; end ;
35892: LD_VAR 0 3
35896: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35897: LD_INT 0
35899: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35900: LD_VAR 0 1
35904: PUSH
35905: LD_INT 250
35907: EQUAL
35908: PUSH
35909: LD_VAR 0 2
35913: PPUSH
35914: CALL_OW 264
35918: PUSH
35919: LD_EXP 56
35923: EQUAL
35924: AND
35925: IFFALSE 35946
// MinerPlaceMine ( unit , x , y ) ;
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 4
35936: PPUSH
35937: LD_VAR 0 5
35941: PPUSH
35942: CALL 38674 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35946: LD_VAR 0 1
35950: PUSH
35951: LD_INT 251
35953: EQUAL
35954: PUSH
35955: LD_VAR 0 2
35959: PPUSH
35960: CALL_OW 264
35964: PUSH
35965: LD_EXP 56
35969: EQUAL
35970: AND
35971: IFFALSE 35992
// MinerDetonateMine ( unit , x , y ) ;
35973: LD_VAR 0 2
35977: PPUSH
35978: LD_VAR 0 4
35982: PPUSH
35983: LD_VAR 0 5
35987: PPUSH
35988: CALL 38951 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35992: LD_VAR 0 1
35996: PUSH
35997: LD_INT 252
35999: EQUAL
36000: PUSH
36001: LD_VAR 0 2
36005: PPUSH
36006: CALL_OW 264
36010: PUSH
36011: LD_EXP 56
36015: EQUAL
36016: AND
36017: IFFALSE 36038
// MinerCreateMinefield ( unit , x , y ) ;
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_VAR 0 4
36028: PPUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: CALL 39368 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_INT 253
36045: EQUAL
36046: PUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: CALL_OW 257
36056: PUSH
36057: LD_INT 5
36059: EQUAL
36060: AND
36061: IFFALSE 36082
// ComBinocular ( unit , x , y ) ;
36063: LD_VAR 0 2
36067: PPUSH
36068: LD_VAR 0 4
36072: PPUSH
36073: LD_VAR 0 5
36077: PPUSH
36078: CALL 39739 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36082: LD_VAR 0 1
36086: PUSH
36087: LD_INT 254
36089: EQUAL
36090: PUSH
36091: LD_VAR 0 2
36095: PPUSH
36096: CALL_OW 264
36100: PUSH
36101: LD_EXP 51
36105: EQUAL
36106: AND
36107: PUSH
36108: LD_VAR 0 3
36112: PPUSH
36113: CALL_OW 263
36117: PUSH
36118: LD_INT 3
36120: EQUAL
36121: AND
36122: IFFALSE 36138
// HackDestroyVehicle ( unit , selectedUnit ) ;
36124: LD_VAR 0 2
36128: PPUSH
36129: LD_VAR 0 3
36133: PPUSH
36134: CALL 38034 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 255
36145: EQUAL
36146: PUSH
36147: LD_VAR 0 2
36151: PPUSH
36152: CALL_OW 264
36156: PUSH
36157: LD_INT 14
36159: PUSH
36160: LD_INT 53
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: IN
36167: AND
36168: PUSH
36169: LD_VAR 0 4
36173: PPUSH
36174: LD_VAR 0 5
36178: PPUSH
36179: CALL_OW 488
36183: AND
36184: IFFALSE 36208
// CutTreeXYR ( unit , x , y , 12 ) ;
36186: LD_VAR 0 2
36190: PPUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: LD_VAR 0 5
36200: PPUSH
36201: LD_INT 12
36203: PPUSH
36204: CALL 36600 0 4
// if cmd = 256 then
36208: LD_VAR 0 1
36212: PUSH
36213: LD_INT 256
36215: EQUAL
36216: IFFALSE 36237
// SetFactoryWaypoint ( unit , x , y ) ;
36218: LD_VAR 0 2
36222: PPUSH
36223: LD_VAR 0 4
36227: PPUSH
36228: LD_VAR 0 5
36232: PPUSH
36233: CALL 36242 0 3
// end ;
36237: LD_VAR 0 6
36241: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36242: LD_INT 0
36244: PPUSH
36245: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36246: LD_VAR 0 1
36250: NOT
36251: PUSH
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_VAR 0 3
36261: PPUSH
36262: CALL_OW 488
36266: NOT
36267: OR
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 266
36278: PUSH
36279: LD_INT 3
36281: NONEQUAL
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 247
36292: PUSH
36293: LD_INT 1
36295: EQUAL
36296: NOT
36297: AND
36298: OR
36299: IFFALSE 36303
// exit ;
36301: GO 36452
// if GetType ( factory ) = unit_human then
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 247
36312: PUSH
36313: LD_INT 1
36315: EQUAL
36316: IFFALSE 36333
// factory := IsInUnit ( factory ) ;
36318: LD_ADDR_VAR 0 1
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL_OW 310
36332: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL_OW 266
36342: PUSH
36343: LD_INT 3
36345: NONEQUAL
36346: IFFALSE 36350
// exit ;
36348: GO 36452
// if HexInfo ( x , y ) = factory then
36350: LD_VAR 0 2
36354: PPUSH
36355: LD_VAR 0 3
36359: PPUSH
36360: CALL_OW 428
36364: PUSH
36365: LD_VAR 0 1
36369: EQUAL
36370: IFFALSE 36397
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36372: LD_ADDR_EXP 127
36376: PUSH
36377: LD_EXP 127
36381: PPUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: LD_INT 0
36389: PPUSH
36390: CALL_OW 1
36394: ST_TO_ADDR
36395: GO 36448
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36397: LD_ADDR_EXP 127
36401: PUSH
36402: LD_EXP 127
36406: PPUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 255
36421: PUSH
36422: LD_VAR 0 1
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: LD_VAR 0 3
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: PPUSH
36443: CALL_OW 1
36447: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36448: CALL 36457 0 0
// end ;
36452: LD_VAR 0 4
36456: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
36457: LD_INT 0
36459: PPUSH
36460: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36461: LD_STRING resetFactoryWaypoint();
36463: PPUSH
36464: CALL_OW 559
// if factoryWaypoints then
36468: LD_EXP 127
36472: IFFALSE 36595
// begin for i := 1 to factoryWaypoints do
36474: LD_ADDR_VAR 0 2
36478: PUSH
36479: DOUBLE
36480: LD_INT 1
36482: DEC
36483: ST_TO_ADDR
36484: LD_EXP 127
36488: PUSH
36489: FOR_TO
36490: IFFALSE 36593
// if factoryWaypoints [ i ] then
36492: LD_EXP 127
36496: PUSH
36497: LD_VAR 0 2
36501: ARRAY
36502: IFFALSE 36591
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
36504: LD_STRING setFactoryWaypointXY(
36506: PUSH
36507: LD_EXP 127
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PUSH
36518: LD_INT 1
36520: ARRAY
36521: STR
36522: PUSH
36523: LD_STRING ,
36525: STR
36526: PUSH
36527: LD_EXP 127
36531: PUSH
36532: LD_VAR 0 2
36536: ARRAY
36537: PUSH
36538: LD_INT 2
36540: ARRAY
36541: STR
36542: PUSH
36543: LD_STRING ,
36545: STR
36546: PUSH
36547: LD_EXP 127
36551: PUSH
36552: LD_VAR 0 2
36556: ARRAY
36557: PUSH
36558: LD_INT 3
36560: ARRAY
36561: STR
36562: PUSH
36563: LD_STRING ,
36565: STR
36566: PUSH
36567: LD_EXP 127
36571: PUSH
36572: LD_VAR 0 2
36576: ARRAY
36577: PUSH
36578: LD_INT 4
36580: ARRAY
36581: STR
36582: PUSH
36583: LD_STRING )
36585: STR
36586: PPUSH
36587: CALL_OW 559
36591: GO 36489
36593: POP
36594: POP
// end ; end ;
36595: LD_VAR 0 1
36599: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36600: LD_INT 0
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
36610: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36611: LD_VAR 0 1
36615: NOT
36616: PUSH
36617: LD_VAR 0 2
36621: PPUSH
36622: LD_VAR 0 3
36626: PPUSH
36627: CALL_OW 488
36631: NOT
36632: OR
36633: PUSH
36634: LD_VAR 0 4
36638: NOT
36639: OR
36640: IFFALSE 36644
// exit ;
36642: GO 36984
// list := [ ] ;
36644: LD_ADDR_VAR 0 13
36648: PUSH
36649: EMPTY
36650: ST_TO_ADDR
// if x - r < 0 then
36651: LD_VAR 0 2
36655: PUSH
36656: LD_VAR 0 4
36660: MINUS
36661: PUSH
36662: LD_INT 0
36664: LESS
36665: IFFALSE 36677
// min_x := 0 else
36667: LD_ADDR_VAR 0 7
36671: PUSH
36672: LD_INT 0
36674: ST_TO_ADDR
36675: GO 36693
// min_x := x - r ;
36677: LD_ADDR_VAR 0 7
36681: PUSH
36682: LD_VAR 0 2
36686: PUSH
36687: LD_VAR 0 4
36691: MINUS
36692: ST_TO_ADDR
// if y - r < 0 then
36693: LD_VAR 0 3
36697: PUSH
36698: LD_VAR 0 4
36702: MINUS
36703: PUSH
36704: LD_INT 0
36706: LESS
36707: IFFALSE 36719
// min_y := 0 else
36709: LD_ADDR_VAR 0 8
36713: PUSH
36714: LD_INT 0
36716: ST_TO_ADDR
36717: GO 36735
// min_y := y - r ;
36719: LD_ADDR_VAR 0 8
36723: PUSH
36724: LD_VAR 0 3
36728: PUSH
36729: LD_VAR 0 4
36733: MINUS
36734: ST_TO_ADDR
// max_x := x + r ;
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_VAR 0 4
36749: PLUS
36750: ST_TO_ADDR
// max_y := y + r ;
36751: LD_ADDR_VAR 0 10
36755: PUSH
36756: LD_VAR 0 3
36760: PUSH
36761: LD_VAR 0 4
36765: PLUS
36766: ST_TO_ADDR
// for _x = min_x to max_x do
36767: LD_ADDR_VAR 0 11
36771: PUSH
36772: DOUBLE
36773: LD_VAR 0 7
36777: DEC
36778: ST_TO_ADDR
36779: LD_VAR 0 9
36783: PUSH
36784: FOR_TO
36785: IFFALSE 36902
// for _y = min_y to max_y do
36787: LD_ADDR_VAR 0 12
36791: PUSH
36792: DOUBLE
36793: LD_VAR 0 8
36797: DEC
36798: ST_TO_ADDR
36799: LD_VAR 0 10
36803: PUSH
36804: FOR_TO
36805: IFFALSE 36898
// begin if not ValidHex ( _x , _y ) then
36807: LD_VAR 0 11
36811: PPUSH
36812: LD_VAR 0 12
36816: PPUSH
36817: CALL_OW 488
36821: NOT
36822: IFFALSE 36826
// continue ;
36824: GO 36804
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36826: LD_VAR 0 11
36830: PPUSH
36831: LD_VAR 0 12
36835: PPUSH
36836: CALL_OW 351
36840: PUSH
36841: LD_VAR 0 11
36845: PPUSH
36846: LD_VAR 0 12
36850: PPUSH
36851: CALL_OW 554
36855: AND
36856: IFFALSE 36896
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36858: LD_ADDR_VAR 0 13
36862: PUSH
36863: LD_VAR 0 13
36867: PPUSH
36868: LD_VAR 0 13
36872: PUSH
36873: LD_INT 1
36875: PLUS
36876: PPUSH
36877: LD_VAR 0 11
36881: PUSH
36882: LD_VAR 0 12
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PPUSH
36891: CALL_OW 2
36895: ST_TO_ADDR
// end ;
36896: GO 36804
36898: POP
36899: POP
36900: GO 36784
36902: POP
36903: POP
// if not list then
36904: LD_VAR 0 13
36908: NOT
36909: IFFALSE 36913
// exit ;
36911: GO 36984
// for i in list do
36913: LD_ADDR_VAR 0 6
36917: PUSH
36918: LD_VAR 0 13
36922: PUSH
36923: FOR_IN
36924: IFFALSE 36982
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36926: LD_VAR 0 1
36930: PPUSH
36931: LD_STRING M
36933: PUSH
36934: LD_VAR 0 6
36938: PUSH
36939: LD_INT 1
36941: ARRAY
36942: PUSH
36943: LD_VAR 0 6
36947: PUSH
36948: LD_INT 2
36950: ARRAY
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: PPUSH
36976: CALL_OW 447
36980: GO 36923
36982: POP
36983: POP
// end ;
36984: LD_VAR 0 5
36988: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36989: LD_EXP 128
36993: NOT
36994: IFFALSE 37044
36996: GO 36998
36998: DISABLE
// begin initHack := true ;
36999: LD_ADDR_EXP 128
37003: PUSH
37004: LD_INT 1
37006: ST_TO_ADDR
// hackTanks := [ ] ;
37007: LD_ADDR_EXP 129
37011: PUSH
37012: EMPTY
37013: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37014: LD_ADDR_EXP 130
37018: PUSH
37019: EMPTY
37020: ST_TO_ADDR
// hackLimit := 3 ;
37021: LD_ADDR_EXP 131
37025: PUSH
37026: LD_INT 3
37028: ST_TO_ADDR
// hackDist := 12 ;
37029: LD_ADDR_EXP 132
37033: PUSH
37034: LD_INT 12
37036: ST_TO_ADDR
// hackCounter := [ ] ;
37037: LD_ADDR_EXP 133
37041: PUSH
37042: EMPTY
37043: ST_TO_ADDR
// end ;
37044: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37045: LD_EXP 128
37049: PUSH
37050: LD_INT 34
37052: PUSH
37053: LD_EXP 51
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PPUSH
37062: CALL_OW 69
37066: AND
37067: IFFALSE 37322
37069: GO 37071
37071: DISABLE
37072: LD_INT 0
37074: PPUSH
37075: PPUSH
// begin enable ;
37076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37077: LD_ADDR_VAR 0 1
37081: PUSH
37082: LD_INT 34
37084: PUSH
37085: LD_EXP 51
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PPUSH
37094: CALL_OW 69
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37320
// begin if not i in hackTanks then
37102: LD_VAR 0 1
37106: PUSH
37107: LD_EXP 129
37111: IN
37112: NOT
37113: IFFALSE 37196
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37115: LD_ADDR_EXP 129
37119: PUSH
37120: LD_EXP 129
37124: PPUSH
37125: LD_EXP 129
37129: PUSH
37130: LD_INT 1
37132: PLUS
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 1
37143: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37144: LD_ADDR_EXP 130
37148: PUSH
37149: LD_EXP 130
37153: PPUSH
37154: LD_EXP 130
37158: PUSH
37159: LD_INT 1
37161: PLUS
37162: PPUSH
37163: EMPTY
37164: PPUSH
37165: CALL_OW 1
37169: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37170: LD_ADDR_EXP 133
37174: PUSH
37175: LD_EXP 133
37179: PPUSH
37180: LD_EXP 133
37184: PUSH
37185: LD_INT 1
37187: PLUS
37188: PPUSH
37189: EMPTY
37190: PPUSH
37191: CALL_OW 1
37195: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 302
37205: NOT
37206: IFFALSE 37219
// begin HackUnlinkAll ( i ) ;
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL 37325 0 1
// continue ;
37217: GO 37099
// end ; HackCheckCapturedStatus ( i ) ;
37219: LD_VAR 0 1
37223: PPUSH
37224: CALL 37768 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37228: LD_ADDR_VAR 0 2
37232: PUSH
37233: LD_INT 81
37235: PUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 255
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 33
37252: PUSH
37253: LD_INT 3
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 91
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_EXP 132
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 50
37280: PUSH
37281: EMPTY
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: ST_TO_ADDR
// if not tmp then
37295: LD_VAR 0 2
37299: NOT
37300: IFFALSE 37304
// continue ;
37302: GO 37099
// HackLink ( i , tmp ) ;
37304: LD_VAR 0 1
37308: PPUSH
37309: LD_VAR 0 2
37313: PPUSH
37314: CALL 37461 0 2
// end ;
37318: GO 37099
37320: POP
37321: POP
// end ;
37322: PPOPN 2
37324: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37325: LD_INT 0
37327: PPUSH
37328: PPUSH
37329: PPUSH
// if not hack in hackTanks then
37330: LD_VAR 0 1
37334: PUSH
37335: LD_EXP 129
37339: IN
37340: NOT
37341: IFFALSE 37345
// exit ;
37343: GO 37456
// index := GetElementIndex ( hackTanks , hack ) ;
37345: LD_ADDR_VAR 0 4
37349: PUSH
37350: LD_EXP 129
37354: PPUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL 45083 0 2
37364: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37365: LD_EXP 130
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: IFFALSE 37456
// begin for i in hackTanksCaptured [ index ] do
37377: LD_ADDR_VAR 0 3
37381: PUSH
37382: LD_EXP 130
37386: PUSH
37387: LD_VAR 0 4
37391: ARRAY
37392: PUSH
37393: FOR_IN
37394: IFFALSE 37420
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37396: LD_VAR 0 3
37400: PUSH
37401: LD_INT 1
37403: ARRAY
37404: PPUSH
37405: LD_VAR 0 3
37409: PUSH
37410: LD_INT 2
37412: ARRAY
37413: PPUSH
37414: CALL_OW 235
37418: GO 37393
37420: POP
37421: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37422: LD_ADDR_EXP 130
37426: PUSH
37427: LD_EXP 130
37431: PPUSH
37432: LD_VAR 0 4
37436: PPUSH
37437: EMPTY
37438: PPUSH
37439: CALL_OW 1
37443: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_INT 0
37451: PPUSH
37452: CALL_OW 505
// end ; end ;
37456: LD_VAR 0 2
37460: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
37465: PPUSH
// if not hack in hackTanks or not vehicles then
37466: LD_VAR 0 1
37470: PUSH
37471: LD_EXP 129
37475: IN
37476: NOT
37477: PUSH
37478: LD_VAR 0 2
37482: NOT
37483: OR
37484: IFFALSE 37488
// exit ;
37486: GO 37763
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37488: LD_ADDR_VAR 0 2
37492: PUSH
37493: LD_VAR 0 1
37497: PPUSH
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_INT 1
37505: PPUSH
37506: LD_INT 1
37508: PPUSH
37509: CALL 45733 0 4
37513: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37514: LD_ADDR_VAR 0 5
37518: PUSH
37519: LD_EXP 129
37523: PPUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL 45083 0 2
37533: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37534: LD_EXP 130
37538: PUSH
37539: LD_VAR 0 5
37543: ARRAY
37544: PUSH
37545: LD_EXP 131
37549: LESS
37550: IFFALSE 37739
// begin for i := 1 to vehicles do
37552: LD_ADDR_VAR 0 4
37556: PUSH
37557: DOUBLE
37558: LD_INT 1
37560: DEC
37561: ST_TO_ADDR
37562: LD_VAR 0 2
37566: PUSH
37567: FOR_TO
37568: IFFALSE 37737
// begin if hackTanksCaptured [ index ] = hackLimit then
37570: LD_EXP 130
37574: PUSH
37575: LD_VAR 0 5
37579: ARRAY
37580: PUSH
37581: LD_EXP 131
37585: EQUAL
37586: IFFALSE 37590
// break ;
37588: GO 37737
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37590: LD_ADDR_EXP 133
37594: PUSH
37595: LD_EXP 133
37599: PPUSH
37600: LD_VAR 0 5
37604: PPUSH
37605: LD_EXP 133
37609: PUSH
37610: LD_VAR 0 5
37614: ARRAY
37615: PUSH
37616: LD_INT 1
37618: PLUS
37619: PPUSH
37620: CALL_OW 1
37624: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37625: LD_ADDR_EXP 130
37629: PUSH
37630: LD_EXP 130
37634: PPUSH
37635: LD_VAR 0 5
37639: PUSH
37640: LD_EXP 130
37644: PUSH
37645: LD_VAR 0 5
37649: ARRAY
37650: PUSH
37651: LD_INT 1
37653: PLUS
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PPUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_VAR 0 4
37668: ARRAY
37669: PUSH
37670: LD_VAR 0 2
37674: PUSH
37675: LD_VAR 0 4
37679: ARRAY
37680: PPUSH
37681: CALL_OW 255
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PPUSH
37690: CALL 45298 0 3
37694: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37695: LD_VAR 0 2
37699: PUSH
37700: LD_VAR 0 4
37704: ARRAY
37705: PPUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: CALL_OW 255
37715: PPUSH
37716: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37720: LD_VAR 0 2
37724: PUSH
37725: LD_VAR 0 4
37729: ARRAY
37730: PPUSH
37731: CALL_OW 141
// end ;
37735: GO 37567
37737: POP
37738: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_EXP 130
37748: PUSH
37749: LD_VAR 0 5
37753: ARRAY
37754: PUSH
37755: LD_INT 0
37757: PLUS
37758: PPUSH
37759: CALL_OW 505
// end ;
37763: LD_VAR 0 3
37767: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
// if not hack in hackTanks then
37774: LD_VAR 0 1
37778: PUSH
37779: LD_EXP 129
37783: IN
37784: NOT
37785: IFFALSE 37789
// exit ;
37787: GO 38029
// index := GetElementIndex ( hackTanks , hack ) ;
37789: LD_ADDR_VAR 0 4
37793: PUSH
37794: LD_EXP 129
37798: PPUSH
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL 45083 0 2
37808: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: DOUBLE
37815: LD_EXP 130
37819: PUSH
37820: LD_VAR 0 4
37824: ARRAY
37825: INC
37826: ST_TO_ADDR
37827: LD_INT 1
37829: PUSH
37830: FOR_DOWNTO
37831: IFFALSE 38003
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37833: LD_ADDR_VAR 0 5
37837: PUSH
37838: LD_EXP 130
37842: PUSH
37843: LD_VAR 0 4
37847: ARRAY
37848: PUSH
37849: LD_VAR 0 3
37853: ARRAY
37854: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37855: LD_VAR 0 5
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: CALL_OW 302
37868: NOT
37869: PUSH
37870: LD_VAR 0 5
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: PPUSH
37879: CALL_OW 255
37883: PUSH
37884: LD_VAR 0 1
37888: PPUSH
37889: CALL_OW 255
37893: NONEQUAL
37894: OR
37895: IFFALSE 38001
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37897: LD_VAR 0 5
37901: PUSH
37902: LD_INT 1
37904: ARRAY
37905: PPUSH
37906: CALL_OW 305
37910: PUSH
37911: LD_VAR 0 5
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PPUSH
37920: CALL_OW 255
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 255
37934: EQUAL
37935: AND
37936: IFFALSE 37960
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37938: LD_VAR 0 5
37942: PUSH
37943: LD_INT 1
37945: ARRAY
37946: PPUSH
37947: LD_VAR 0 5
37951: PUSH
37952: LD_INT 2
37954: ARRAY
37955: PPUSH
37956: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37960: LD_ADDR_EXP 130
37964: PUSH
37965: LD_EXP 130
37969: PPUSH
37970: LD_VAR 0 4
37974: PPUSH
37975: LD_EXP 130
37979: PUSH
37980: LD_VAR 0 4
37984: ARRAY
37985: PPUSH
37986: LD_VAR 0 3
37990: PPUSH
37991: CALL_OW 3
37995: PPUSH
37996: CALL_OW 1
38000: ST_TO_ADDR
// end ; end ;
38001: GO 37830
38003: POP
38004: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38005: LD_VAR 0 1
38009: PPUSH
38010: LD_EXP 130
38014: PUSH
38015: LD_VAR 0 4
38019: ARRAY
38020: PUSH
38021: LD_INT 0
38023: PLUS
38024: PPUSH
38025: CALL_OW 505
// end ;
38029: LD_VAR 0 2
38033: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38034: LD_INT 0
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
// if not hack in hackTanks then
38040: LD_VAR 0 1
38044: PUSH
38045: LD_EXP 129
38049: IN
38050: NOT
38051: IFFALSE 38055
// exit ;
38053: GO 38140
// index := GetElementIndex ( hackTanks , hack ) ;
38055: LD_ADDR_VAR 0 5
38059: PUSH
38060: LD_EXP 129
38064: PPUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL 45083 0 2
38074: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38075: LD_ADDR_VAR 0 4
38079: PUSH
38080: DOUBLE
38081: LD_INT 1
38083: DEC
38084: ST_TO_ADDR
38085: LD_EXP 130
38089: PUSH
38090: LD_VAR 0 5
38094: ARRAY
38095: PUSH
38096: FOR_TO
38097: IFFALSE 38138
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38099: LD_EXP 130
38103: PUSH
38104: LD_VAR 0 5
38108: ARRAY
38109: PUSH
38110: LD_VAR 0 4
38114: ARRAY
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: PUSH
38120: LD_VAR 0 2
38124: EQUAL
38125: IFFALSE 38136
// KillUnit ( vehicle ) ;
38127: LD_VAR 0 2
38131: PPUSH
38132: CALL_OW 66
38136: GO 38096
38138: POP
38139: POP
// end ;
38140: LD_VAR 0 3
38144: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38145: LD_EXP 134
38149: NOT
38150: IFFALSE 38185
38152: GO 38154
38154: DISABLE
// begin initMiner := true ;
38155: LD_ADDR_EXP 134
38159: PUSH
38160: LD_INT 1
38162: ST_TO_ADDR
// minersList := [ ] ;
38163: LD_ADDR_EXP 135
38167: PUSH
38168: EMPTY
38169: ST_TO_ADDR
// minerMinesList := [ ] ;
38170: LD_ADDR_EXP 136
38174: PUSH
38175: EMPTY
38176: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38177: LD_ADDR_EXP 137
38181: PUSH
38182: LD_INT 5
38184: ST_TO_ADDR
// end ;
38185: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38186: LD_EXP 134
38190: PUSH
38191: LD_INT 34
38193: PUSH
38194: LD_EXP 56
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL_OW 69
38207: AND
38208: IFFALSE 38671
38210: GO 38212
38212: DISABLE
38213: LD_INT 0
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
// begin enable ;
38219: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38220: LD_ADDR_VAR 0 1
38224: PUSH
38225: LD_INT 34
38227: PUSH
38228: LD_EXP 56
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 69
38241: PUSH
38242: FOR_IN
38243: IFFALSE 38315
// begin if not i in minersList then
38245: LD_VAR 0 1
38249: PUSH
38250: LD_EXP 135
38254: IN
38255: NOT
38256: IFFALSE 38313
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38258: LD_ADDR_EXP 135
38262: PUSH
38263: LD_EXP 135
38267: PPUSH
38268: LD_EXP 135
38272: PUSH
38273: LD_INT 1
38275: PLUS
38276: PPUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 1
38286: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38287: LD_ADDR_EXP 136
38291: PUSH
38292: LD_EXP 136
38296: PPUSH
38297: LD_EXP 136
38301: PUSH
38302: LD_INT 1
38304: PLUS
38305: PPUSH
38306: EMPTY
38307: PPUSH
38308: CALL_OW 1
38312: ST_TO_ADDR
// end end ;
38313: GO 38242
38315: POP
38316: POP
// for i := minerMinesList downto 1 do
38317: LD_ADDR_VAR 0 1
38321: PUSH
38322: DOUBLE
38323: LD_EXP 136
38327: INC
38328: ST_TO_ADDR
38329: LD_INT 1
38331: PUSH
38332: FOR_DOWNTO
38333: IFFALSE 38669
// begin if IsLive ( minersList [ i ] ) then
38335: LD_EXP 135
38339: PUSH
38340: LD_VAR 0 1
38344: ARRAY
38345: PPUSH
38346: CALL_OW 300
38350: IFFALSE 38378
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38352: LD_EXP 135
38356: PUSH
38357: LD_VAR 0 1
38361: ARRAY
38362: PPUSH
38363: LD_EXP 136
38367: PUSH
38368: LD_VAR 0 1
38372: ARRAY
38373: PPUSH
38374: CALL_OW 505
// if not minerMinesList [ i ] then
38378: LD_EXP 136
38382: PUSH
38383: LD_VAR 0 1
38387: ARRAY
38388: NOT
38389: IFFALSE 38393
// continue ;
38391: GO 38332
// for j := minerMinesList [ i ] downto 1 do
38393: LD_ADDR_VAR 0 2
38397: PUSH
38398: DOUBLE
38399: LD_EXP 136
38403: PUSH
38404: LD_VAR 0 1
38408: ARRAY
38409: INC
38410: ST_TO_ADDR
38411: LD_INT 1
38413: PUSH
38414: FOR_DOWNTO
38415: IFFALSE 38665
// begin side := GetSide ( minersList [ i ] ) ;
38417: LD_ADDR_VAR 0 3
38421: PUSH
38422: LD_EXP 135
38426: PUSH
38427: LD_VAR 0 1
38431: ARRAY
38432: PPUSH
38433: CALL_OW 255
38437: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38438: LD_ADDR_VAR 0 4
38442: PUSH
38443: LD_EXP 136
38447: PUSH
38448: LD_VAR 0 1
38452: ARRAY
38453: PUSH
38454: LD_VAR 0 2
38458: ARRAY
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: PPUSH
38464: LD_EXP 136
38468: PUSH
38469: LD_VAR 0 1
38473: ARRAY
38474: PUSH
38475: LD_VAR 0 2
38479: ARRAY
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: PPUSH
38485: CALL_OW 428
38489: ST_TO_ADDR
// if not tmp then
38490: LD_VAR 0 4
38494: NOT
38495: IFFALSE 38499
// continue ;
38497: GO 38414
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38499: LD_VAR 0 4
38503: PUSH
38504: LD_INT 81
38506: PUSH
38507: LD_VAR 0 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PPUSH
38516: CALL_OW 69
38520: IN
38521: PUSH
38522: LD_EXP 136
38526: PUSH
38527: LD_VAR 0 1
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 2
38537: ARRAY
38538: PUSH
38539: LD_INT 1
38541: ARRAY
38542: PPUSH
38543: LD_EXP 136
38547: PUSH
38548: LD_VAR 0 1
38552: ARRAY
38553: PUSH
38554: LD_VAR 0 2
38558: ARRAY
38559: PUSH
38560: LD_INT 2
38562: ARRAY
38563: PPUSH
38564: CALL_OW 458
38568: AND
38569: IFFALSE 38663
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38571: LD_EXP 136
38575: PUSH
38576: LD_VAR 0 1
38580: ARRAY
38581: PUSH
38582: LD_VAR 0 2
38586: ARRAY
38587: PUSH
38588: LD_INT 1
38590: ARRAY
38591: PPUSH
38592: LD_EXP 136
38596: PUSH
38597: LD_VAR 0 1
38601: ARRAY
38602: PUSH
38603: LD_VAR 0 2
38607: ARRAY
38608: PUSH
38609: LD_INT 2
38611: ARRAY
38612: PPUSH
38613: LD_VAR 0 3
38617: PPUSH
38618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38622: LD_ADDR_EXP 136
38626: PUSH
38627: LD_EXP 136
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_EXP 136
38641: PUSH
38642: LD_VAR 0 1
38646: ARRAY
38647: PPUSH
38648: LD_VAR 0 2
38652: PPUSH
38653: CALL_OW 3
38657: PPUSH
38658: CALL_OW 1
38662: ST_TO_ADDR
// end ; end ;
38663: GO 38414
38665: POP
38666: POP
// end ;
38667: GO 38332
38669: POP
38670: POP
// end ;
38671: PPOPN 4
38673: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38674: LD_INT 0
38676: PPUSH
38677: PPUSH
// result := false ;
38678: LD_ADDR_VAR 0 4
38682: PUSH
38683: LD_INT 0
38685: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 264
38695: PUSH
38696: LD_EXP 56
38700: EQUAL
38701: NOT
38702: IFFALSE 38706
// exit ;
38704: GO 38946
// index := GetElementIndex ( minersList , unit ) ;
38706: LD_ADDR_VAR 0 5
38710: PUSH
38711: LD_EXP 135
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL 45083 0 2
38725: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38726: LD_EXP 136
38730: PUSH
38731: LD_VAR 0 5
38735: ARRAY
38736: PUSH
38737: LD_EXP 137
38741: GREATEREQUAL
38742: IFFALSE 38746
// exit ;
38744: GO 38946
// ComMoveXY ( unit , x , y ) ;
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: LD_VAR 0 3
38760: PPUSH
38761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38765: LD_INT 35
38767: PPUSH
38768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38772: LD_VAR 0 1
38776: PPUSH
38777: LD_VAR 0 2
38781: PPUSH
38782: LD_VAR 0 3
38786: PPUSH
38787: CALL 75802 0 3
38791: NOT
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 314
38802: AND
38803: IFFALSE 38807
// exit ;
38805: GO 38946
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38807: LD_VAR 0 2
38811: PPUSH
38812: LD_VAR 0 3
38816: PPUSH
38817: CALL_OW 428
38821: PUSH
38822: LD_VAR 0 1
38826: EQUAL
38827: PUSH
38828: LD_VAR 0 1
38832: PPUSH
38833: CALL_OW 314
38837: NOT
38838: AND
38839: IFFALSE 38765
// PlaySoundXY ( x , y , PlantMine ) ;
38841: LD_VAR 0 2
38845: PPUSH
38846: LD_VAR 0 3
38850: PPUSH
38851: LD_STRING PlantMine
38853: PPUSH
38854: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38858: LD_VAR 0 2
38862: PPUSH
38863: LD_VAR 0 3
38867: PPUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 255
38877: PPUSH
38878: LD_INT 0
38880: PPUSH
38881: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38885: LD_ADDR_EXP 136
38889: PUSH
38890: LD_EXP 136
38894: PPUSH
38895: LD_VAR 0 5
38899: PUSH
38900: LD_EXP 136
38904: PUSH
38905: LD_VAR 0 5
38909: ARRAY
38910: PUSH
38911: LD_INT 1
38913: PLUS
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PPUSH
38919: LD_VAR 0 2
38923: PUSH
38924: LD_VAR 0 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PPUSH
38933: CALL 45298 0 3
38937: ST_TO_ADDR
// result := true ;
38938: LD_ADDR_VAR 0 4
38942: PUSH
38943: LD_INT 1
38945: ST_TO_ADDR
// end ;
38946: LD_VAR 0 4
38950: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38951: LD_INT 0
38953: PPUSH
38954: PPUSH
38955: PPUSH
// if not unit in minersList then
38956: LD_VAR 0 1
38960: PUSH
38961: LD_EXP 135
38965: IN
38966: NOT
38967: IFFALSE 38971
// exit ;
38969: GO 39363
// index := GetElementIndex ( minersList , unit ) ;
38971: LD_ADDR_VAR 0 6
38975: PUSH
38976: LD_EXP 135
38980: PPUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: CALL 45083 0 2
38990: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38991: LD_ADDR_VAR 0 5
38995: PUSH
38996: DOUBLE
38997: LD_EXP 136
39001: PUSH
39002: LD_VAR 0 6
39006: ARRAY
39007: INC
39008: ST_TO_ADDR
39009: LD_INT 1
39011: PUSH
39012: FOR_DOWNTO
39013: IFFALSE 39174
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39015: LD_EXP 136
39019: PUSH
39020: LD_VAR 0 6
39024: ARRAY
39025: PUSH
39026: LD_VAR 0 5
39030: ARRAY
39031: PUSH
39032: LD_INT 1
39034: ARRAY
39035: PUSH
39036: LD_VAR 0 2
39040: EQUAL
39041: PUSH
39042: LD_EXP 136
39046: PUSH
39047: LD_VAR 0 6
39051: ARRAY
39052: PUSH
39053: LD_VAR 0 5
39057: ARRAY
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: PUSH
39063: LD_VAR 0 3
39067: EQUAL
39068: AND
39069: IFFALSE 39172
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39071: LD_EXP 136
39075: PUSH
39076: LD_VAR 0 6
39080: ARRAY
39081: PUSH
39082: LD_VAR 0 5
39086: ARRAY
39087: PUSH
39088: LD_INT 1
39090: ARRAY
39091: PPUSH
39092: LD_EXP 136
39096: PUSH
39097: LD_VAR 0 6
39101: ARRAY
39102: PUSH
39103: LD_VAR 0 5
39107: ARRAY
39108: PUSH
39109: LD_INT 2
39111: ARRAY
39112: PPUSH
39113: LD_VAR 0 1
39117: PPUSH
39118: CALL_OW 255
39122: PPUSH
39123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39127: LD_ADDR_EXP 136
39131: PUSH
39132: LD_EXP 136
39136: PPUSH
39137: LD_VAR 0 6
39141: PPUSH
39142: LD_EXP 136
39146: PUSH
39147: LD_VAR 0 6
39151: ARRAY
39152: PPUSH
39153: LD_VAR 0 5
39157: PPUSH
39158: CALL_OW 3
39162: PPUSH
39163: CALL_OW 1
39167: ST_TO_ADDR
// exit ;
39168: POP
39169: POP
39170: GO 39363
// end ; end ;
39172: GO 39012
39174: POP
39175: POP
// for i := minerMinesList [ index ] downto 1 do
39176: LD_ADDR_VAR 0 5
39180: PUSH
39181: DOUBLE
39182: LD_EXP 136
39186: PUSH
39187: LD_VAR 0 6
39191: ARRAY
39192: INC
39193: ST_TO_ADDR
39194: LD_INT 1
39196: PUSH
39197: FOR_DOWNTO
39198: IFFALSE 39361
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39200: LD_EXP 136
39204: PUSH
39205: LD_VAR 0 6
39209: ARRAY
39210: PUSH
39211: LD_VAR 0 5
39215: ARRAY
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: PPUSH
39221: LD_EXP 136
39225: PUSH
39226: LD_VAR 0 6
39230: ARRAY
39231: PUSH
39232: LD_VAR 0 5
39236: ARRAY
39237: PUSH
39238: LD_INT 2
39240: ARRAY
39241: PPUSH
39242: LD_VAR 0 2
39246: PPUSH
39247: LD_VAR 0 3
39251: PPUSH
39252: CALL_OW 298
39256: PUSH
39257: LD_INT 6
39259: LESS
39260: IFFALSE 39359
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39262: LD_EXP 136
39266: PUSH
39267: LD_VAR 0 6
39271: ARRAY
39272: PUSH
39273: LD_VAR 0 5
39277: ARRAY
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_EXP 136
39287: PUSH
39288: LD_VAR 0 6
39292: ARRAY
39293: PUSH
39294: LD_VAR 0 5
39298: ARRAY
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: PPUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: CALL_OW 255
39313: PPUSH
39314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39318: LD_ADDR_EXP 136
39322: PUSH
39323: LD_EXP 136
39327: PPUSH
39328: LD_VAR 0 6
39332: PPUSH
39333: LD_EXP 136
39337: PUSH
39338: LD_VAR 0 6
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 5
39348: PPUSH
39349: CALL_OW 3
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// end ; end ;
39359: GO 39197
39361: POP
39362: POP
// end ;
39363: LD_VAR 0 4
39367: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39368: LD_INT 0
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39379: LD_VAR 0 1
39383: PPUSH
39384: CALL_OW 264
39388: PUSH
39389: LD_EXP 56
39393: EQUAL
39394: NOT
39395: PUSH
39396: LD_VAR 0 1
39400: PUSH
39401: LD_EXP 135
39405: IN
39406: NOT
39407: OR
39408: IFFALSE 39412
// exit ;
39410: GO 39734
// index := GetElementIndex ( minersList , unit ) ;
39412: LD_ADDR_VAR 0 6
39416: PUSH
39417: LD_EXP 135
39421: PPUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: CALL 45083 0 2
39431: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39432: LD_ADDR_VAR 0 8
39436: PUSH
39437: LD_EXP 137
39441: PUSH
39442: LD_EXP 136
39446: PUSH
39447: LD_VAR 0 6
39451: ARRAY
39452: MINUS
39453: ST_TO_ADDR
// if not minesFreeAmount then
39454: LD_VAR 0 8
39458: NOT
39459: IFFALSE 39463
// exit ;
39461: GO 39734
// tmp := [ ] ;
39463: LD_ADDR_VAR 0 7
39467: PUSH
39468: EMPTY
39469: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: DOUBLE
39476: LD_INT 1
39478: DEC
39479: ST_TO_ADDR
39480: LD_VAR 0 8
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39681
// begin _d := rand ( 0 , 5 ) ;
39488: LD_ADDR_VAR 0 11
39492: PUSH
39493: LD_INT 0
39495: PPUSH
39496: LD_INT 5
39498: PPUSH
39499: CALL_OW 12
39503: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39504: LD_ADDR_VAR 0 12
39508: PUSH
39509: LD_INT 2
39511: PPUSH
39512: LD_INT 6
39514: PPUSH
39515: CALL_OW 12
39519: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39520: LD_ADDR_VAR 0 9
39524: PUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: LD_VAR 0 11
39534: PPUSH
39535: LD_VAR 0 12
39539: PPUSH
39540: CALL_OW 272
39544: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39545: LD_ADDR_VAR 0 10
39549: PUSH
39550: LD_VAR 0 3
39554: PPUSH
39555: LD_VAR 0 11
39559: PPUSH
39560: LD_VAR 0 12
39564: PPUSH
39565: CALL_OW 273
39569: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39570: LD_VAR 0 9
39574: PPUSH
39575: LD_VAR 0 10
39579: PPUSH
39580: CALL_OW 488
39584: PUSH
39585: LD_VAR 0 9
39589: PUSH
39590: LD_VAR 0 10
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_VAR 0 7
39603: IN
39604: NOT
39605: AND
39606: PUSH
39607: LD_VAR 0 9
39611: PPUSH
39612: LD_VAR 0 10
39616: PPUSH
39617: CALL_OW 458
39621: NOT
39622: AND
39623: IFFALSE 39665
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39625: LD_ADDR_VAR 0 7
39629: PUSH
39630: LD_VAR 0 7
39634: PPUSH
39635: LD_VAR 0 7
39639: PUSH
39640: LD_INT 1
39642: PLUS
39643: PPUSH
39644: LD_VAR 0 9
39648: PUSH
39649: LD_VAR 0 10
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PPUSH
39658: CALL_OW 1
39662: ST_TO_ADDR
39663: GO 39679
// i := i - 1 ;
39665: LD_ADDR_VAR 0 5
39669: PUSH
39670: LD_VAR 0 5
39674: PUSH
39675: LD_INT 1
39677: MINUS
39678: ST_TO_ADDR
// end ;
39679: GO 39485
39681: POP
39682: POP
// for i in tmp do
39683: LD_ADDR_VAR 0 5
39687: PUSH
39688: LD_VAR 0 7
39692: PUSH
39693: FOR_IN
39694: IFFALSE 39732
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39696: LD_VAR 0 1
39700: PPUSH
39701: LD_VAR 0 5
39705: PUSH
39706: LD_INT 1
39708: ARRAY
39709: PPUSH
39710: LD_VAR 0 5
39714: PUSH
39715: LD_INT 2
39717: ARRAY
39718: PPUSH
39719: CALL 38674 0 3
39723: NOT
39724: IFFALSE 39730
// exit ;
39726: POP
39727: POP
39728: GO 39734
39730: GO 39693
39732: POP
39733: POP
// end ;
39734: LD_VAR 0 4
39738: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39739: LD_INT 0
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
// if not GetClass ( unit ) = class_sniper then
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 257
39757: PUSH
39758: LD_INT 5
39760: EQUAL
39761: NOT
39762: IFFALSE 39766
// exit ;
39764: GO 40154
// dist := 8 ;
39766: LD_ADDR_VAR 0 5
39770: PUSH
39771: LD_INT 8
39773: ST_TO_ADDR
// viewRange := 12 ;
39774: LD_ADDR_VAR 0 7
39778: PUSH
39779: LD_INT 12
39781: ST_TO_ADDR
// side := GetSide ( unit ) ;
39782: LD_ADDR_VAR 0 6
39786: PUSH
39787: LD_VAR 0 1
39791: PPUSH
39792: CALL_OW 255
39796: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39797: LD_INT 61
39799: PPUSH
39800: LD_VAR 0 6
39804: PPUSH
39805: CALL_OW 321
39809: PUSH
39810: LD_INT 2
39812: EQUAL
39813: IFFALSE 39823
// viewRange := 16 ;
39815: LD_ADDR_VAR 0 7
39819: PUSH
39820: LD_INT 16
39822: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39823: LD_VAR 0 1
39827: PPUSH
39828: LD_VAR 0 2
39832: PPUSH
39833: LD_VAR 0 3
39837: PPUSH
39838: CALL_OW 297
39842: PUSH
39843: LD_VAR 0 5
39847: GREATER
39848: IFFALSE 39927
// begin ComMoveXY ( unit , x , y ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_VAR 0 2
39859: PPUSH
39860: LD_VAR 0 3
39864: PPUSH
39865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39869: LD_INT 35
39871: PPUSH
39872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39876: LD_VAR 0 1
39880: PPUSH
39881: LD_VAR 0 2
39885: PPUSH
39886: LD_VAR 0 3
39890: PPUSH
39891: CALL 75802 0 3
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 40154
// until GetDistUnitXY ( unit , x , y ) < dist ;
39900: LD_VAR 0 1
39904: PPUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: LD_VAR 0 3
39914: PPUSH
39915: CALL_OW 297
39919: PUSH
39920: LD_VAR 0 5
39924: LESS
39925: IFFALSE 39869
// end ; ComTurnXY ( unit , x , y ) ;
39927: LD_VAR 0 1
39931: PPUSH
39932: LD_VAR 0 2
39936: PPUSH
39937: LD_VAR 0 3
39941: PPUSH
39942: CALL_OW 118
// wait ( 5 ) ;
39946: LD_INT 5
39948: PPUSH
39949: CALL_OW 67
// _d := GetDir ( unit ) ;
39953: LD_ADDR_VAR 0 10
39957: PUSH
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 254
39967: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39968: LD_ADDR_VAR 0 8
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 250
39982: PPUSH
39983: LD_VAR 0 10
39987: PPUSH
39988: LD_VAR 0 5
39992: PPUSH
39993: CALL_OW 272
39997: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 251
40012: PPUSH
40013: LD_VAR 0 10
40017: PPUSH
40018: LD_VAR 0 5
40022: PPUSH
40023: CALL_OW 273
40027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40028: LD_VAR 0 8
40032: PPUSH
40033: LD_VAR 0 9
40037: PPUSH
40038: CALL_OW 488
40042: NOT
40043: IFFALSE 40047
// exit ;
40045: GO 40154
// ComAnimCustom ( unit , 1 ) ;
40047: LD_VAR 0 1
40051: PPUSH
40052: LD_INT 1
40054: PPUSH
40055: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40059: LD_VAR 0 8
40063: PPUSH
40064: LD_VAR 0 9
40068: PPUSH
40069: LD_VAR 0 6
40073: PPUSH
40074: LD_VAR 0 7
40078: PPUSH
40079: CALL_OW 330
// repeat wait ( 1 ) ;
40083: LD_INT 1
40085: PPUSH
40086: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40090: LD_VAR 0 1
40094: PPUSH
40095: CALL_OW 316
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: CALL_OW 314
40109: OR
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 302
40120: NOT
40121: OR
40122: PUSH
40123: LD_VAR 0 1
40127: PPUSH
40128: CALL_OW 301
40132: OR
40133: IFFALSE 40083
// RemoveSeeing ( _x , _y , side ) ;
40135: LD_VAR 0 8
40139: PPUSH
40140: LD_VAR 0 9
40144: PPUSH
40145: LD_VAR 0 6
40149: PPUSH
40150: CALL_OW 331
// end ; end_of_file
40154: LD_VAR 0 4
40158: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40159: LD_INT 0
40161: PPUSH
40162: PPUSH
// if exist_mode then
40163: LD_VAR 0 2
40167: IFFALSE 40192
// unit := CreateCharacter ( prefix & ident ) else
40169: LD_ADDR_VAR 0 5
40173: PUSH
40174: LD_VAR 0 3
40178: PUSH
40179: LD_VAR 0 1
40183: STR
40184: PPUSH
40185: CALL_OW 34
40189: ST_TO_ADDR
40190: GO 40207
// unit := NewCharacter ( ident ) ;
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 25
40206: ST_TO_ADDR
// result := unit ;
40207: LD_ADDR_VAR 0 4
40211: PUSH
40212: LD_VAR 0 5
40216: ST_TO_ADDR
// end ;
40217: LD_VAR 0 4
40221: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
// if not side or not nation then
40226: LD_VAR 0 1
40230: NOT
40231: PUSH
40232: LD_VAR 0 2
40236: NOT
40237: OR
40238: IFFALSE 40242
// exit ;
40240: GO 41010
// case nation of nation_american :
40242: LD_VAR 0 2
40246: PUSH
40247: LD_INT 1
40249: DOUBLE
40250: EQUAL
40251: IFTRUE 40255
40253: GO 40469
40255: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40256: LD_ADDR_VAR 0 4
40260: PUSH
40261: LD_INT 35
40263: PUSH
40264: LD_INT 45
40266: PUSH
40267: LD_INT 46
40269: PUSH
40270: LD_INT 47
40272: PUSH
40273: LD_INT 82
40275: PUSH
40276: LD_INT 83
40278: PUSH
40279: LD_INT 84
40281: PUSH
40282: LD_INT 85
40284: PUSH
40285: LD_INT 86
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 6
40296: PUSH
40297: LD_INT 15
40299: PUSH
40300: LD_INT 16
40302: PUSH
40303: LD_INT 7
40305: PUSH
40306: LD_INT 12
40308: PUSH
40309: LD_INT 13
40311: PUSH
40312: LD_INT 10
40314: PUSH
40315: LD_INT 14
40317: PUSH
40318: LD_INT 20
40320: PUSH
40321: LD_INT 21
40323: PUSH
40324: LD_INT 22
40326: PUSH
40327: LD_INT 25
40329: PUSH
40330: LD_INT 32
40332: PUSH
40333: LD_INT 27
40335: PUSH
40336: LD_INT 36
40338: PUSH
40339: LD_INT 69
40341: PUSH
40342: LD_INT 39
40344: PUSH
40345: LD_INT 34
40347: PUSH
40348: LD_INT 40
40350: PUSH
40351: LD_INT 48
40353: PUSH
40354: LD_INT 49
40356: PUSH
40357: LD_INT 50
40359: PUSH
40360: LD_INT 51
40362: PUSH
40363: LD_INT 52
40365: PUSH
40366: LD_INT 53
40368: PUSH
40369: LD_INT 54
40371: PUSH
40372: LD_INT 55
40374: PUSH
40375: LD_INT 56
40377: PUSH
40378: LD_INT 57
40380: PUSH
40381: LD_INT 58
40383: PUSH
40384: LD_INT 59
40386: PUSH
40387: LD_INT 60
40389: PUSH
40390: LD_INT 61
40392: PUSH
40393: LD_INT 62
40395: PUSH
40396: LD_INT 80
40398: PUSH
40399: LD_INT 82
40401: PUSH
40402: LD_INT 83
40404: PUSH
40405: LD_INT 84
40407: PUSH
40408: LD_INT 85
40410: PUSH
40411: LD_INT 86
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
40467: GO 40934
40469: LD_INT 2
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40477
40475: GO 40703
40477: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40478: LD_ADDR_VAR 0 4
40482: PUSH
40483: LD_INT 35
40485: PUSH
40486: LD_INT 45
40488: PUSH
40489: LD_INT 46
40491: PUSH
40492: LD_INT 47
40494: PUSH
40495: LD_INT 82
40497: PUSH
40498: LD_INT 83
40500: PUSH
40501: LD_INT 84
40503: PUSH
40504: LD_INT 85
40506: PUSH
40507: LD_INT 87
40509: PUSH
40510: LD_INT 70
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 11
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: LD_INT 4
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: LD_INT 6
40530: PUSH
40531: LD_INT 15
40533: PUSH
40534: LD_INT 18
40536: PUSH
40537: LD_INT 7
40539: PUSH
40540: LD_INT 17
40542: PUSH
40543: LD_INT 8
40545: PUSH
40546: LD_INT 20
40548: PUSH
40549: LD_INT 21
40551: PUSH
40552: LD_INT 22
40554: PUSH
40555: LD_INT 72
40557: PUSH
40558: LD_INT 26
40560: PUSH
40561: LD_INT 69
40563: PUSH
40564: LD_INT 39
40566: PUSH
40567: LD_INT 40
40569: PUSH
40570: LD_INT 41
40572: PUSH
40573: LD_INT 42
40575: PUSH
40576: LD_INT 43
40578: PUSH
40579: LD_INT 48
40581: PUSH
40582: LD_INT 49
40584: PUSH
40585: LD_INT 50
40587: PUSH
40588: LD_INT 51
40590: PUSH
40591: LD_INT 52
40593: PUSH
40594: LD_INT 53
40596: PUSH
40597: LD_INT 54
40599: PUSH
40600: LD_INT 55
40602: PUSH
40603: LD_INT 56
40605: PUSH
40606: LD_INT 60
40608: PUSH
40609: LD_INT 61
40611: PUSH
40612: LD_INT 62
40614: PUSH
40615: LD_INT 66
40617: PUSH
40618: LD_INT 67
40620: PUSH
40621: LD_INT 68
40623: PUSH
40624: LD_INT 81
40626: PUSH
40627: LD_INT 82
40629: PUSH
40630: LD_INT 83
40632: PUSH
40633: LD_INT 84
40635: PUSH
40636: LD_INT 85
40638: PUSH
40639: LD_INT 87
40641: PUSH
40642: LD_INT 88
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
40701: GO 40934
40703: LD_INT 3
40705: DOUBLE
40706: EQUAL
40707: IFTRUE 40711
40709: GO 40933
40711: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40712: LD_ADDR_VAR 0 4
40716: PUSH
40717: LD_INT 46
40719: PUSH
40720: LD_INT 47
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 82
40731: PUSH
40732: LD_INT 83
40734: PUSH
40735: LD_INT 84
40737: PUSH
40738: LD_INT 85
40740: PUSH
40741: LD_INT 86
40743: PUSH
40744: LD_INT 11
40746: PUSH
40747: LD_INT 9
40749: PUSH
40750: LD_INT 20
40752: PUSH
40753: LD_INT 19
40755: PUSH
40756: LD_INT 21
40758: PUSH
40759: LD_INT 24
40761: PUSH
40762: LD_INT 22
40764: PUSH
40765: LD_INT 25
40767: PUSH
40768: LD_INT 28
40770: PUSH
40771: LD_INT 29
40773: PUSH
40774: LD_INT 30
40776: PUSH
40777: LD_INT 31
40779: PUSH
40780: LD_INT 37
40782: PUSH
40783: LD_INT 38
40785: PUSH
40786: LD_INT 32
40788: PUSH
40789: LD_INT 27
40791: PUSH
40792: LD_INT 33
40794: PUSH
40795: LD_INT 69
40797: PUSH
40798: LD_INT 39
40800: PUSH
40801: LD_INT 34
40803: PUSH
40804: LD_INT 40
40806: PUSH
40807: LD_INT 71
40809: PUSH
40810: LD_INT 23
40812: PUSH
40813: LD_INT 44
40815: PUSH
40816: LD_INT 48
40818: PUSH
40819: LD_INT 49
40821: PUSH
40822: LD_INT 50
40824: PUSH
40825: LD_INT 51
40827: PUSH
40828: LD_INT 52
40830: PUSH
40831: LD_INT 53
40833: PUSH
40834: LD_INT 54
40836: PUSH
40837: LD_INT 55
40839: PUSH
40840: LD_INT 56
40842: PUSH
40843: LD_INT 57
40845: PUSH
40846: LD_INT 58
40848: PUSH
40849: LD_INT 59
40851: PUSH
40852: LD_INT 63
40854: PUSH
40855: LD_INT 64
40857: PUSH
40858: LD_INT 65
40860: PUSH
40861: LD_INT 82
40863: PUSH
40864: LD_INT 83
40866: PUSH
40867: LD_INT 84
40869: PUSH
40870: LD_INT 85
40872: PUSH
40873: LD_INT 86
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
40931: GO 40934
40933: POP
// if state > - 1 and state < 3 then
40934: LD_VAR 0 3
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: GREATER
40943: PUSH
40944: LD_VAR 0 3
40948: PUSH
40949: LD_INT 3
40951: LESS
40952: AND
40953: IFFALSE 41010
// for i in result do
40955: LD_ADDR_VAR 0 5
40959: PUSH
40960: LD_VAR 0 4
40964: PUSH
40965: FOR_IN
40966: IFFALSE 41008
// if GetTech ( i , side ) <> state then
40968: LD_VAR 0 5
40972: PPUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 321
40982: PUSH
40983: LD_VAR 0 3
40987: NONEQUAL
40988: IFFALSE 41006
// result := result diff i ;
40990: LD_ADDR_VAR 0 4
40994: PUSH
40995: LD_VAR 0 4
40999: PUSH
41000: LD_VAR 0 5
41004: DIFF
41005: ST_TO_ADDR
41006: GO 40965
41008: POP
41009: POP
// end ;
41010: LD_VAR 0 4
41014: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41015: LD_INT 0
41017: PPUSH
41018: PPUSH
41019: PPUSH
// result := true ;
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_INT 1
41027: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41028: LD_ADDR_VAR 0 5
41032: PUSH
41033: LD_VAR 0 2
41037: PPUSH
41038: CALL_OW 480
41042: ST_TO_ADDR
// if not tmp then
41043: LD_VAR 0 5
41047: NOT
41048: IFFALSE 41052
// exit ;
41050: GO 41101
// for i in tmp do
41052: LD_ADDR_VAR 0 4
41056: PUSH
41057: LD_VAR 0 5
41061: PUSH
41062: FOR_IN
41063: IFFALSE 41099
// if GetTech ( i , side ) <> state_researched then
41065: LD_VAR 0 4
41069: PPUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: CALL_OW 321
41079: PUSH
41080: LD_INT 2
41082: NONEQUAL
41083: IFFALSE 41097
// begin result := false ;
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_INT 0
41092: ST_TO_ADDR
// exit ;
41093: POP
41094: POP
41095: GO 41101
// end ;
41097: GO 41062
41099: POP
41100: POP
// end ;
41101: LD_VAR 0 3
41105: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41121: LD_VAR 0 1
41125: NOT
41126: PUSH
41127: LD_VAR 0 1
41131: PPUSH
41132: CALL_OW 257
41136: PUSH
41137: LD_INT 9
41139: NONEQUAL
41140: OR
41141: IFFALSE 41145
// exit ;
41143: GO 41718
// side := GetSide ( unit ) ;
41145: LD_ADDR_VAR 0 9
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 255
41159: ST_TO_ADDR
// tech_space := tech_spacanom ;
41160: LD_ADDR_VAR 0 12
41164: PUSH
41165: LD_INT 29
41167: ST_TO_ADDR
// tech_time := tech_taurad ;
41168: LD_ADDR_VAR 0 13
41172: PUSH
41173: LD_INT 28
41175: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41176: LD_ADDR_VAR 0 11
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 310
41190: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41191: LD_VAR 0 11
41195: PPUSH
41196: CALL_OW 247
41200: PUSH
41201: LD_INT 2
41203: EQUAL
41204: IFFALSE 41208
// exit ;
41206: GO 41718
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41208: LD_ADDR_VAR 0 8
41212: PUSH
41213: LD_INT 81
41215: PUSH
41216: LD_VAR 0 9
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PPUSH
41246: CALL_OW 69
41250: ST_TO_ADDR
// if not tmp then
41251: LD_VAR 0 8
41255: NOT
41256: IFFALSE 41260
// exit ;
41258: GO 41718
// if in_unit then
41260: LD_VAR 0 11
41264: IFFALSE 41288
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41266: LD_ADDR_VAR 0 10
41270: PUSH
41271: LD_VAR 0 8
41275: PPUSH
41276: LD_VAR 0 11
41280: PPUSH
41281: CALL_OW 74
41285: ST_TO_ADDR
41286: GO 41308
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41288: LD_ADDR_VAR 0 10
41292: PUSH
41293: LD_VAR 0 8
41297: PPUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 74
41307: ST_TO_ADDR
// if not enemy then
41308: LD_VAR 0 10
41312: NOT
41313: IFFALSE 41317
// exit ;
41315: GO 41718
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41317: LD_VAR 0 11
41321: PUSH
41322: LD_VAR 0 11
41326: PPUSH
41327: LD_VAR 0 10
41331: PPUSH
41332: CALL_OW 296
41336: PUSH
41337: LD_INT 13
41339: GREATER
41340: AND
41341: PUSH
41342: LD_VAR 0 1
41346: PPUSH
41347: LD_VAR 0 10
41351: PPUSH
41352: CALL_OW 296
41356: PUSH
41357: LD_INT 12
41359: GREATER
41360: OR
41361: IFFALSE 41365
// exit ;
41363: GO 41718
// missile := [ 1 ] ;
41365: LD_ADDR_VAR 0 14
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41376: LD_VAR 0 9
41380: PPUSH
41381: LD_VAR 0 12
41385: PPUSH
41386: CALL_OW 325
41390: IFFALSE 41419
// missile := Replace ( missile , missile + 1 , 2 ) ;
41392: LD_ADDR_VAR 0 14
41396: PUSH
41397: LD_VAR 0 14
41401: PPUSH
41402: LD_VAR 0 14
41406: PUSH
41407: LD_INT 1
41409: PLUS
41410: PPUSH
41411: LD_INT 2
41413: PPUSH
41414: CALL_OW 1
41418: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41419: LD_VAR 0 9
41423: PPUSH
41424: LD_VAR 0 13
41428: PPUSH
41429: CALL_OW 325
41433: PUSH
41434: LD_VAR 0 10
41438: PPUSH
41439: CALL_OW 255
41443: PPUSH
41444: LD_VAR 0 13
41448: PPUSH
41449: CALL_OW 325
41453: NOT
41454: AND
41455: IFFALSE 41484
// missile := Replace ( missile , missile + 1 , 3 ) ;
41457: LD_ADDR_VAR 0 14
41461: PUSH
41462: LD_VAR 0 14
41466: PPUSH
41467: LD_VAR 0 14
41471: PUSH
41472: LD_INT 1
41474: PLUS
41475: PPUSH
41476: LD_INT 3
41478: PPUSH
41479: CALL_OW 1
41483: ST_TO_ADDR
// if missile < 2 then
41484: LD_VAR 0 14
41488: PUSH
41489: LD_INT 2
41491: LESS
41492: IFFALSE 41496
// exit ;
41494: GO 41718
// x := GetX ( enemy ) ;
41496: LD_ADDR_VAR 0 4
41500: PUSH
41501: LD_VAR 0 10
41505: PPUSH
41506: CALL_OW 250
41510: ST_TO_ADDR
// y := GetY ( enemy ) ;
41511: LD_ADDR_VAR 0 5
41515: PUSH
41516: LD_VAR 0 10
41520: PPUSH
41521: CALL_OW 251
41525: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41526: LD_ADDR_VAR 0 6
41530: PUSH
41531: LD_VAR 0 4
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PPUSH
41540: LD_INT 1
41542: PPUSH
41543: CALL_OW 12
41547: PLUS
41548: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41549: LD_ADDR_VAR 0 7
41553: PUSH
41554: LD_VAR 0 5
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PPUSH
41563: LD_INT 1
41565: PPUSH
41566: CALL_OW 12
41570: PLUS
41571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41572: LD_VAR 0 6
41576: PPUSH
41577: LD_VAR 0 7
41581: PPUSH
41582: CALL_OW 488
41586: NOT
41587: IFFALSE 41609
// begin _x := x ;
41589: LD_ADDR_VAR 0 6
41593: PUSH
41594: LD_VAR 0 4
41598: ST_TO_ADDR
// _y := y ;
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: LD_VAR 0 5
41608: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41609: LD_ADDR_VAR 0 3
41613: PUSH
41614: LD_INT 1
41616: PPUSH
41617: LD_VAR 0 14
41621: PPUSH
41622: CALL_OW 12
41626: ST_TO_ADDR
// case i of 1 :
41627: LD_VAR 0 3
41631: PUSH
41632: LD_INT 1
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41657
41640: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41641: LD_VAR 0 1
41645: PPUSH
41646: LD_VAR 0 10
41650: PPUSH
41651: CALL_OW 115
41655: GO 41718
41657: LD_INT 2
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41665
41663: GO 41687
41665: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41666: LD_VAR 0 1
41670: PPUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: LD_VAR 0 7
41680: PPUSH
41681: CALL_OW 153
41685: GO 41718
41687: LD_INT 3
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41717
41695: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41696: LD_VAR 0 1
41700: PPUSH
41701: LD_VAR 0 6
41705: PPUSH
41706: LD_VAR 0 7
41710: PPUSH
41711: CALL_OW 154
41715: GO 41718
41717: POP
// end ;
41718: LD_VAR 0 2
41722: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41723: LD_INT 0
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
// if not unit or not building then
41731: LD_VAR 0 1
41735: NOT
41736: PUSH
41737: LD_VAR 0 2
41741: NOT
41742: OR
41743: IFFALSE 41747
// exit ;
41745: GO 41905
// x := GetX ( building ) ;
41747: LD_ADDR_VAR 0 5
41751: PUSH
41752: LD_VAR 0 2
41756: PPUSH
41757: CALL_OW 250
41761: ST_TO_ADDR
// y := GetY ( building ) ;
41762: LD_ADDR_VAR 0 6
41766: PUSH
41767: LD_VAR 0 2
41771: PPUSH
41772: CALL_OW 251
41776: ST_TO_ADDR
// for i = 0 to 5 do
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: DOUBLE
41783: LD_INT 0
41785: DEC
41786: ST_TO_ADDR
41787: LD_INT 5
41789: PUSH
41790: FOR_TO
41791: IFFALSE 41903
// begin _x := ShiftX ( x , i , 3 ) ;
41793: LD_ADDR_VAR 0 7
41797: PUSH
41798: LD_VAR 0 5
41802: PPUSH
41803: LD_VAR 0 4
41807: PPUSH
41808: LD_INT 3
41810: PPUSH
41811: CALL_OW 272
41815: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41816: LD_ADDR_VAR 0 8
41820: PUSH
41821: LD_VAR 0 6
41825: PPUSH
41826: LD_VAR 0 4
41830: PPUSH
41831: LD_INT 3
41833: PPUSH
41834: CALL_OW 273
41838: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41839: LD_VAR 0 7
41843: PPUSH
41844: LD_VAR 0 8
41848: PPUSH
41849: CALL_OW 488
41853: NOT
41854: IFFALSE 41858
// continue ;
41856: GO 41790
// if HexInfo ( _x , _y ) = 0 then
41858: LD_VAR 0 7
41862: PPUSH
41863: LD_VAR 0 8
41867: PPUSH
41868: CALL_OW 428
41872: PUSH
41873: LD_INT 0
41875: EQUAL
41876: IFFALSE 41901
// begin ComMoveXY ( unit , _x , _y ) ;
41878: LD_VAR 0 1
41882: PPUSH
41883: LD_VAR 0 7
41887: PPUSH
41888: LD_VAR 0 8
41892: PPUSH
41893: CALL_OW 111
// exit ;
41897: POP
41898: POP
41899: GO 41905
// end ; end ;
41901: GO 41790
41903: POP
41904: POP
// end ;
41905: LD_VAR 0 3
41909: RET
// export function ScanBase ( side , base_area ) ; begin
41910: LD_INT 0
41912: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41913: LD_ADDR_VAR 0 3
41917: PUSH
41918: LD_VAR 0 2
41922: PPUSH
41923: LD_INT 81
41925: PUSH
41926: LD_VAR 0 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PPUSH
41935: CALL_OW 70
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 3
41944: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41945: LD_INT 0
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
// result := false ;
41951: LD_ADDR_VAR 0 2
41955: PUSH
41956: LD_INT 0
41958: ST_TO_ADDR
// side := GetSide ( unit ) ;
41959: LD_ADDR_VAR 0 3
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 255
41973: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41974: LD_ADDR_VAR 0 4
41978: PUSH
41979: LD_VAR 0 1
41983: PPUSH
41984: CALL_OW 248
41988: ST_TO_ADDR
// case nat of 1 :
41989: LD_VAR 0 4
41993: PUSH
41994: LD_INT 1
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42002
42000: GO 42013
42002: POP
// tech := tech_lassight ; 2 :
42003: LD_ADDR_VAR 0 5
42007: PUSH
42008: LD_INT 12
42010: ST_TO_ADDR
42011: GO 42052
42013: LD_INT 2
42015: DOUBLE
42016: EQUAL
42017: IFTRUE 42021
42019: GO 42032
42021: POP
// tech := tech_mortar ; 3 :
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_INT 41
42029: ST_TO_ADDR
42030: GO 42052
42032: LD_INT 3
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42051
42040: POP
// tech := tech_bazooka ; end ;
42041: LD_ADDR_VAR 0 5
42045: PUSH
42046: LD_INT 44
42048: ST_TO_ADDR
42049: GO 42052
42051: POP
// if Researched ( side , tech ) then
42052: LD_VAR 0 3
42056: PPUSH
42057: LD_VAR 0 5
42061: PPUSH
42062: CALL_OW 325
42066: IFFALSE 42093
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_INT 5
42075: PUSH
42076: LD_INT 8
42078: PUSH
42079: LD_INT 9
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: PUSH
42087: LD_VAR 0 4
42091: ARRAY
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 2
42097: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42098: LD_INT 0
42100: PPUSH
42101: PPUSH
42102: PPUSH
// if not mines then
42103: LD_VAR 0 2
42107: NOT
42108: IFFALSE 42112
// exit ;
42110: GO 42256
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42112: LD_ADDR_VAR 0 5
42116: PUSH
42117: LD_INT 81
42119: PUSH
42120: LD_VAR 0 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: LD_INT 21
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 69
42154: ST_TO_ADDR
// for i in mines do
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: LD_VAR 0 2
42164: PUSH
42165: FOR_IN
42166: IFFALSE 42254
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42168: LD_VAR 0 4
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: PPUSH
42177: LD_VAR 0 4
42181: PUSH
42182: LD_INT 2
42184: ARRAY
42185: PPUSH
42186: CALL_OW 458
42190: NOT
42191: IFFALSE 42195
// continue ;
42193: GO 42165
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42195: LD_VAR 0 4
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 4
42208: PUSH
42209: LD_INT 2
42211: ARRAY
42212: PPUSH
42213: CALL_OW 428
42217: PUSH
42218: LD_VAR 0 5
42222: IN
42223: IFFALSE 42252
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42225: LD_VAR 0 4
42229: PUSH
42230: LD_INT 1
42232: ARRAY
42233: PPUSH
42234: LD_VAR 0 4
42238: PUSH
42239: LD_INT 2
42241: ARRAY
42242: PPUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 456
// end ;
42252: GO 42165
42254: POP
42255: POP
// end ;
42256: LD_VAR 0 3
42260: RET
// export function Count ( array ) ; var i ; begin
42261: LD_INT 0
42263: PPUSH
42264: PPUSH
// result := 0 ;
42265: LD_ADDR_VAR 0 2
42269: PUSH
42270: LD_INT 0
42272: ST_TO_ADDR
// for i in array do
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_VAR 0 1
42282: PUSH
42283: FOR_IN
42284: IFFALSE 42308
// if i then
42286: LD_VAR 0 3
42290: IFFALSE 42306
// result := result + 1 ;
42292: LD_ADDR_VAR 0 2
42296: PUSH
42297: LD_VAR 0 2
42301: PUSH
42302: LD_INT 1
42304: PLUS
42305: ST_TO_ADDR
42306: GO 42283
42308: POP
42309: POP
// end ;
42310: LD_VAR 0 2
42314: RET
// export function IsEmpty ( building ) ; begin
42315: LD_INT 0
42317: PPUSH
// if not building then
42318: LD_VAR 0 1
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42370
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42327: LD_ADDR_VAR 0 2
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: LD_INT 22
42339: PUSH
42340: LD_VAR 0 1
42344: PPUSH
42345: CALL_OW 255
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 58
42356: PUSH
42357: EMPTY
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PPUSH
42364: CALL_OW 69
42368: IN
42369: ST_TO_ADDR
// end ;
42370: LD_VAR 0 2
42374: RET
// export function IsNotFull ( building ) ; var places ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
// if not building then
42379: LD_VAR 0 1
42383: NOT
42384: IFFALSE 42388
// exit ;
42386: GO 42559
// result := false ;
42388: LD_ADDR_VAR 0 2
42392: PUSH
42393: LD_INT 0
42395: ST_TO_ADDR
// places := 0 ;
42396: LD_ADDR_VAR 0 3
42400: PUSH
42401: LD_INT 0
42403: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 266
42413: PUSH
42414: LD_INT 0
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42476
42420: LD_INT 1
42422: DOUBLE
42423: EQUAL
42424: IFTRUE 42476
42426: LD_INT 6
42428: DOUBLE
42429: EQUAL
42430: IFTRUE 42476
42432: LD_INT 7
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42476
42438: LD_INT 8
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42476
42444: LD_INT 4
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42476
42450: LD_INT 5
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42476
42456: LD_INT 2
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42476
42462: LD_INT 3
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42476
42468: LD_INT 35
42470: DOUBLE
42471: EQUAL
42472: IFTRUE 42476
42474: GO 42487
42476: POP
// places := 6 ; b_bunker , b_breastwork :
42477: LD_ADDR_VAR 0 3
42481: PUSH
42482: LD_INT 6
42484: ST_TO_ADDR
42485: GO 42532
42487: LD_INT 32
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42501
42493: LD_INT 31
42495: DOUBLE
42496: EQUAL
42497: IFTRUE 42501
42499: GO 42512
42501: POP
// places := 1 ; b_control_tower :
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: LD_INT 1
42509: ST_TO_ADDR
42510: GO 42532
42512: LD_INT 36
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42531
42520: POP
// places := 3 ; end ;
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_INT 3
42528: ST_TO_ADDR
42529: GO 42532
42531: POP
// if places then
42532: LD_VAR 0 3
42536: IFFALSE 42559
// result := UnitsInside ( building ) < places ;
42538: LD_ADDR_VAR 0 2
42542: PUSH
42543: LD_VAR 0 1
42547: PPUSH
42548: CALL_OW 313
42552: PUSH
42553: LD_VAR 0 3
42557: LESS
42558: ST_TO_ADDR
// end ;
42559: LD_VAR 0 2
42563: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42564: LD_INT 0
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
// tmp := [ ] ;
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: EMPTY
42576: ST_TO_ADDR
// list := [ ] ;
42577: LD_ADDR_VAR 0 5
42581: PUSH
42582: EMPTY
42583: ST_TO_ADDR
// for i = 16 to 25 do
42584: LD_ADDR_VAR 0 4
42588: PUSH
42589: DOUBLE
42590: LD_INT 16
42592: DEC
42593: ST_TO_ADDR
42594: LD_INT 25
42596: PUSH
42597: FOR_TO
42598: IFFALSE 42671
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42600: LD_ADDR_VAR 0 3
42604: PUSH
42605: LD_VAR 0 3
42609: PUSH
42610: LD_INT 22
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 255
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 91
42629: PUSH
42630: LD_VAR 0 1
42634: PUSH
42635: LD_INT 6
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 30
42645: PUSH
42646: LD_VAR 0 4
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: PUSH
42660: EMPTY
42661: LIST
42662: PPUSH
42663: CALL_OW 69
42667: ADD
42668: ST_TO_ADDR
42669: GO 42597
42671: POP
42672: POP
// for i = 1 to tmp do
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: DOUBLE
42679: LD_INT 1
42681: DEC
42682: ST_TO_ADDR
42683: LD_VAR 0 3
42687: PUSH
42688: FOR_TO
42689: IFFALSE 42777
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42691: LD_ADDR_VAR 0 5
42695: PUSH
42696: LD_VAR 0 5
42700: PUSH
42701: LD_VAR 0 3
42705: PUSH
42706: LD_VAR 0 4
42710: ARRAY
42711: PPUSH
42712: CALL_OW 266
42716: PUSH
42717: LD_VAR 0 3
42721: PUSH
42722: LD_VAR 0 4
42726: ARRAY
42727: PPUSH
42728: CALL_OW 250
42732: PUSH
42733: LD_VAR 0 3
42737: PUSH
42738: LD_VAR 0 4
42742: ARRAY
42743: PPUSH
42744: CALL_OW 251
42748: PUSH
42749: LD_VAR 0 3
42753: PUSH
42754: LD_VAR 0 4
42758: ARRAY
42759: PPUSH
42760: CALL_OW 254
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: ADD
42774: ST_TO_ADDR
42775: GO 42688
42777: POP
42778: POP
// result := list ;
42779: LD_ADDR_VAR 0 2
42783: PUSH
42784: LD_VAR 0 5
42788: ST_TO_ADDR
// end ;
42789: LD_VAR 0 2
42793: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42794: LD_INT 0
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
// if not factory then
42803: LD_VAR 0 1
42807: NOT
42808: IFFALSE 42812
// exit ;
42810: GO 43405
// if control = control_apeman then
42812: LD_VAR 0 4
42816: PUSH
42817: LD_INT 5
42819: EQUAL
42820: IFFALSE 42929
// begin tmp := UnitsInside ( factory ) ;
42822: LD_ADDR_VAR 0 8
42826: PUSH
42827: LD_VAR 0 1
42831: PPUSH
42832: CALL_OW 313
42836: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42837: LD_VAR 0 8
42841: PPUSH
42842: LD_INT 25
42844: PUSH
42845: LD_INT 12
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PPUSH
42852: CALL_OW 72
42856: NOT
42857: IFFALSE 42867
// control := control_manual ;
42859: LD_ADDR_VAR 0 4
42863: PUSH
42864: LD_INT 1
42866: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42867: LD_ADDR_VAR 0 8
42871: PUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL 42564 0 1
42881: ST_TO_ADDR
// if tmp then
42882: LD_VAR 0 8
42886: IFFALSE 42929
// begin for i in tmp do
42888: LD_ADDR_VAR 0 7
42892: PUSH
42893: LD_VAR 0 8
42897: PUSH
42898: FOR_IN
42899: IFFALSE 42927
// if i [ 1 ] = b_ext_radio then
42901: LD_VAR 0 7
42905: PUSH
42906: LD_INT 1
42908: ARRAY
42909: PUSH
42910: LD_INT 22
42912: EQUAL
42913: IFFALSE 42925
// begin control := control_remote ;
42915: LD_ADDR_VAR 0 4
42919: PUSH
42920: LD_INT 2
42922: ST_TO_ADDR
// break ;
42923: GO 42927
// end ;
42925: GO 42898
42927: POP
42928: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42929: LD_VAR 0 1
42933: PPUSH
42934: LD_VAR 0 2
42938: PPUSH
42939: LD_VAR 0 3
42943: PPUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: LD_VAR 0 5
42953: PPUSH
42954: CALL_OW 448
42958: IFFALSE 42993
// begin result := [ chassis , engine , control , weapon ] ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: LD_VAR 0 2
42969: PUSH
42970: LD_VAR 0 3
42974: PUSH
42975: LD_VAR 0 4
42979: PUSH
42980: LD_VAR 0 5
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
// exit ;
42991: GO 43405
// end ; _chassis := AvailableChassisList ( factory ) ;
42993: LD_ADDR_VAR 0 9
42997: PUSH
42998: LD_VAR 0 1
43002: PPUSH
43003: CALL_OW 475
43007: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43008: LD_ADDR_VAR 0 11
43012: PUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: CALL_OW 476
43022: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43023: LD_ADDR_VAR 0 12
43027: PUSH
43028: LD_VAR 0 1
43032: PPUSH
43033: CALL_OW 477
43037: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43038: LD_ADDR_VAR 0 10
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 478
43052: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43053: LD_VAR 0 9
43057: NOT
43058: PUSH
43059: LD_VAR 0 11
43063: NOT
43064: OR
43065: PUSH
43066: LD_VAR 0 12
43070: NOT
43071: OR
43072: PUSH
43073: LD_VAR 0 10
43077: NOT
43078: OR
43079: IFFALSE 43114
// begin result := [ chassis , engine , control , weapon ] ;
43081: LD_ADDR_VAR 0 6
43085: PUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_VAR 0 3
43095: PUSH
43096: LD_VAR 0 4
43100: PUSH
43101: LD_VAR 0 5
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// exit ;
43112: GO 43405
// end ; if not chassis in _chassis then
43114: LD_VAR 0 2
43118: PUSH
43119: LD_VAR 0 9
43123: IN
43124: NOT
43125: IFFALSE 43151
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43127: LD_ADDR_VAR 0 2
43131: PUSH
43132: LD_VAR 0 9
43136: PUSH
43137: LD_INT 1
43139: PPUSH
43140: LD_VAR 0 9
43144: PPUSH
43145: CALL_OW 12
43149: ARRAY
43150: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43151: LD_VAR 0 2
43155: PPUSH
43156: LD_VAR 0 3
43160: PPUSH
43161: CALL 43410 0 2
43165: NOT
43166: IFFALSE 43225
// repeat engine := _engine [ 1 ] ;
43168: LD_ADDR_VAR 0 3
43172: PUSH
43173: LD_VAR 0 11
43177: PUSH
43178: LD_INT 1
43180: ARRAY
43181: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43182: LD_ADDR_VAR 0 11
43186: PUSH
43187: LD_VAR 0 11
43191: PPUSH
43192: LD_INT 1
43194: PPUSH
43195: CALL_OW 3
43199: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43200: LD_VAR 0 2
43204: PPUSH
43205: LD_VAR 0 3
43209: PPUSH
43210: CALL 43410 0 2
43214: PUSH
43215: LD_VAR 0 11
43219: PUSH
43220: EMPTY
43221: EQUAL
43222: OR
43223: IFFALSE 43168
// if not control in _control then
43225: LD_VAR 0 4
43229: PUSH
43230: LD_VAR 0 12
43234: IN
43235: NOT
43236: IFFALSE 43262
// control := _control [ rand ( 1 , _control ) ] ;
43238: LD_ADDR_VAR 0 4
43242: PUSH
43243: LD_VAR 0 12
43247: PUSH
43248: LD_INT 1
43250: PPUSH
43251: LD_VAR 0 12
43255: PPUSH
43256: CALL_OW 12
43260: ARRAY
43261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43262: LD_VAR 0 2
43266: PPUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: CALL 43630 0 2
43276: NOT
43277: IFFALSE 43336
// repeat weapon := _weapon [ 1 ] ;
43279: LD_ADDR_VAR 0 5
43283: PUSH
43284: LD_VAR 0 10
43288: PUSH
43289: LD_INT 1
43291: ARRAY
43292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43293: LD_ADDR_VAR 0 10
43297: PUSH
43298: LD_VAR 0 10
43302: PPUSH
43303: LD_INT 1
43305: PPUSH
43306: CALL_OW 3
43310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43311: LD_VAR 0 2
43315: PPUSH
43316: LD_VAR 0 5
43320: PPUSH
43321: CALL 43630 0 2
43325: PUSH
43326: LD_VAR 0 10
43330: PUSH
43331: EMPTY
43332: EQUAL
43333: OR
43334: IFFALSE 43279
// result := [ ] ;
43336: LD_ADDR_VAR 0 6
43340: PUSH
43341: EMPTY
43342: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43343: LD_VAR 0 1
43347: PPUSH
43348: LD_VAR 0 2
43352: PPUSH
43353: LD_VAR 0 3
43357: PPUSH
43358: LD_VAR 0 4
43362: PPUSH
43363: LD_VAR 0 5
43367: PPUSH
43368: CALL_OW 448
43372: IFFALSE 43405
// result := [ chassis , engine , control , weapon ] ;
43374: LD_ADDR_VAR 0 6
43378: PUSH
43379: LD_VAR 0 2
43383: PUSH
43384: LD_VAR 0 3
43388: PUSH
43389: LD_VAR 0 4
43393: PUSH
43394: LD_VAR 0 5
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// end ;
43405: LD_VAR 0 6
43409: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43410: LD_INT 0
43412: PPUSH
// if not chassis or not engine then
43413: LD_VAR 0 1
43417: NOT
43418: PUSH
43419: LD_VAR 0 2
43423: NOT
43424: OR
43425: IFFALSE 43429
// exit ;
43427: GO 43625
// case engine of engine_solar :
43429: LD_VAR 0 2
43433: PUSH
43434: LD_INT 2
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43480
43442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 11
43450: PUSH
43451: LD_INT 12
43453: PUSH
43454: LD_INT 13
43456: PUSH
43457: LD_INT 14
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
43478: GO 43609
43480: LD_INT 1
43482: DOUBLE
43483: EQUAL
43484: IFTRUE 43488
43486: GO 43550
43488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43489: LD_ADDR_VAR 0 3
43493: PUSH
43494: LD_INT 11
43496: PUSH
43497: LD_INT 12
43499: PUSH
43500: LD_INT 13
43502: PUSH
43503: LD_INT 14
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: LD_INT 3
43514: PUSH
43515: LD_INT 4
43517: PUSH
43518: LD_INT 5
43520: PUSH
43521: LD_INT 21
43523: PUSH
43524: LD_INT 23
43526: PUSH
43527: LD_INT 22
43529: PUSH
43530: LD_INT 24
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 43609
43550: LD_INT 3
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43608
43558: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 13
43566: PUSH
43567: LD_INT 14
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 3
43575: PUSH
43576: LD_INT 4
43578: PUSH
43579: LD_INT 5
43581: PUSH
43582: LD_INT 21
43584: PUSH
43585: LD_INT 22
43587: PUSH
43588: LD_INT 23
43590: PUSH
43591: LD_INT 24
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
43606: GO 43609
43608: POP
// result := ( chassis in result ) ;
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_VAR 0 3
43623: IN
43624: ST_TO_ADDR
// end ;
43625: LD_VAR 0 3
43629: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43630: LD_INT 0
43632: PPUSH
// if not chassis or not weapon then
43633: LD_VAR 0 1
43637: NOT
43638: PUSH
43639: LD_VAR 0 2
43643: NOT
43644: OR
43645: IFFALSE 43649
// exit ;
43647: GO 44711
// case weapon of us_machine_gun :
43649: LD_VAR 0 2
43653: PUSH
43654: LD_INT 2
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43662
43660: GO 43692
43662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: LD_INT 4
43679: PUSH
43680: LD_INT 5
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
43690: GO 44695
43692: LD_INT 3
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43700
43698: GO 43730
43700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: LD_INT 4
43717: PUSH
43718: LD_INT 5
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44695
43730: LD_INT 11
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43768
43738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 4
43755: PUSH
43756: LD_INT 5
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 44695
43768: LD_INT 4
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43776
43774: GO 43802
43776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
43800: GO 44695
43802: LD_INT 5
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43836
43810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 4
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
43834: GO 44695
43836: LD_INT 9
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43844
43842: GO 43870
43844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43845: LD_ADDR_VAR 0 3
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 3
43855: PUSH
43856: LD_INT 4
43858: PUSH
43859: LD_INT 5
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
43868: GO 44695
43870: LD_INT 7
43872: DOUBLE
43873: EQUAL
43874: IFTRUE 43878
43876: GO 43904
43878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43879: LD_ADDR_VAR 0 3
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: LD_INT 5
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
43902: GO 44695
43904: LD_INT 12
43906: DOUBLE
43907: EQUAL
43908: IFTRUE 43912
43910: GO 43938
43912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: LD_INT 4
43926: PUSH
43927: LD_INT 5
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
43936: GO 44695
43938: LD_INT 13
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 43972
43946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43947: LD_ADDR_VAR 0 3
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 4
43960: PUSH
43961: LD_INT 5
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
43970: GO 44695
43972: LD_INT 14
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 43980
43978: GO 43998
43980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_INT 4
43988: PUSH
43989: LD_INT 5
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: ST_TO_ADDR
43996: GO 44695
43998: LD_INT 6
44000: DOUBLE
44001: EQUAL
44002: IFTRUE 44006
44004: GO 44024
44006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44007: LD_ADDR_VAR 0 3
44011: PUSH
44012: LD_INT 4
44014: PUSH
44015: LD_INT 5
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: ST_TO_ADDR
44022: GO 44695
44024: LD_INT 10
44026: DOUBLE
44027: EQUAL
44028: IFTRUE 44032
44030: GO 44050
44032: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_INT 4
44040: PUSH
44041: LD_INT 5
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: ST_TO_ADDR
44048: GO 44695
44050: LD_INT 22
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44058
44056: GO 44084
44058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44059: LD_ADDR_VAR 0 3
44063: PUSH
44064: LD_INT 11
44066: PUSH
44067: LD_INT 12
44069: PUSH
44070: LD_INT 13
44072: PUSH
44073: LD_INT 14
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
44082: GO 44695
44084: LD_INT 23
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44118
44092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: LD_INT 11
44100: PUSH
44101: LD_INT 12
44103: PUSH
44104: LD_INT 13
44106: PUSH
44107: LD_INT 14
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
44116: GO 44695
44118: LD_INT 24
44120: DOUBLE
44121: EQUAL
44122: IFTRUE 44126
44124: GO 44152
44126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_INT 11
44134: PUSH
44135: LD_INT 12
44137: PUSH
44138: LD_INT 13
44140: PUSH
44141: LD_INT 14
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
44150: GO 44695
44152: LD_INT 30
44154: DOUBLE
44155: EQUAL
44156: IFTRUE 44160
44158: GO 44186
44160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_INT 11
44168: PUSH
44169: LD_INT 12
44171: PUSH
44172: LD_INT 13
44174: PUSH
44175: LD_INT 14
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
44184: GO 44695
44186: LD_INT 25
44188: DOUBLE
44189: EQUAL
44190: IFTRUE 44194
44192: GO 44212
44194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44195: LD_ADDR_VAR 0 3
44199: PUSH
44200: LD_INT 13
44202: PUSH
44203: LD_INT 14
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: ST_TO_ADDR
44210: GO 44695
44212: LD_INT 27
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44238
44220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44221: LD_ADDR_VAR 0 3
44225: PUSH
44226: LD_INT 13
44228: PUSH
44229: LD_INT 14
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: ST_TO_ADDR
44236: GO 44695
44238: LD_EXP 54
44242: DOUBLE
44243: EQUAL
44244: IFTRUE 44248
44246: GO 44274
44248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_INT 11
44256: PUSH
44257: LD_INT 12
44259: PUSH
44260: LD_INT 13
44262: PUSH
44263: LD_INT 14
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
44272: GO 44695
44274: LD_INT 28
44276: DOUBLE
44277: EQUAL
44278: IFTRUE 44282
44280: GO 44300
44282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44283: LD_ADDR_VAR 0 3
44287: PUSH
44288: LD_INT 13
44290: PUSH
44291: LD_INT 14
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: ST_TO_ADDR
44298: GO 44695
44300: LD_INT 29
44302: DOUBLE
44303: EQUAL
44304: IFTRUE 44308
44306: GO 44326
44308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_INT 13
44316: PUSH
44317: LD_INT 14
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: ST_TO_ADDR
44324: GO 44695
44326: LD_INT 31
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44334
44332: GO 44352
44334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44335: LD_ADDR_VAR 0 3
44339: PUSH
44340: LD_INT 13
44342: PUSH
44343: LD_INT 14
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: ST_TO_ADDR
44350: GO 44695
44352: LD_INT 26
44354: DOUBLE
44355: EQUAL
44356: IFTRUE 44360
44358: GO 44378
44360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44361: LD_ADDR_VAR 0 3
44365: PUSH
44366: LD_INT 13
44368: PUSH
44369: LD_INT 14
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: ST_TO_ADDR
44376: GO 44695
44378: LD_INT 42
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44386
44384: GO 44412
44386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44387: LD_ADDR_VAR 0 3
44391: PUSH
44392: LD_INT 21
44394: PUSH
44395: LD_INT 22
44397: PUSH
44398: LD_INT 23
44400: PUSH
44401: LD_INT 24
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: ST_TO_ADDR
44410: GO 44695
44412: LD_INT 43
44414: DOUBLE
44415: EQUAL
44416: IFTRUE 44420
44418: GO 44446
44420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44421: LD_ADDR_VAR 0 3
44425: PUSH
44426: LD_INT 21
44428: PUSH
44429: LD_INT 22
44431: PUSH
44432: LD_INT 23
44434: PUSH
44435: LD_INT 24
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
44444: GO 44695
44446: LD_INT 44
44448: DOUBLE
44449: EQUAL
44450: IFTRUE 44454
44452: GO 44480
44454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44455: LD_ADDR_VAR 0 3
44459: PUSH
44460: LD_INT 21
44462: PUSH
44463: LD_INT 22
44465: PUSH
44466: LD_INT 23
44468: PUSH
44469: LD_INT 24
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
44478: GO 44695
44480: LD_INT 45
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44488
44486: GO 44514
44488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44489: LD_ADDR_VAR 0 3
44493: PUSH
44494: LD_INT 21
44496: PUSH
44497: LD_INT 22
44499: PUSH
44500: LD_INT 23
44502: PUSH
44503: LD_INT 24
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
44512: GO 44695
44514: LD_INT 49
44516: DOUBLE
44517: EQUAL
44518: IFTRUE 44522
44520: GO 44548
44522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44523: LD_ADDR_VAR 0 3
44527: PUSH
44528: LD_INT 21
44530: PUSH
44531: LD_INT 22
44533: PUSH
44534: LD_INT 23
44536: PUSH
44537: LD_INT 24
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: ST_TO_ADDR
44546: GO 44695
44548: LD_INT 51
44550: DOUBLE
44551: EQUAL
44552: IFTRUE 44556
44554: GO 44582
44556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44557: LD_ADDR_VAR 0 3
44561: PUSH
44562: LD_INT 21
44564: PUSH
44565: LD_INT 22
44567: PUSH
44568: LD_INT 23
44570: PUSH
44571: LD_INT 24
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
44580: GO 44695
44582: LD_INT 52
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44616
44590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 21
44598: PUSH
44599: LD_INT 22
44601: PUSH
44602: LD_INT 23
44604: PUSH
44605: LD_INT 24
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
44614: GO 44695
44616: LD_INT 53
44618: DOUBLE
44619: EQUAL
44620: IFTRUE 44624
44622: GO 44642
44624: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_INT 23
44632: PUSH
44633: LD_INT 24
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: ST_TO_ADDR
44640: GO 44695
44642: LD_INT 46
44644: DOUBLE
44645: EQUAL
44646: IFTRUE 44650
44648: GO 44668
44650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44651: LD_ADDR_VAR 0 3
44655: PUSH
44656: LD_INT 23
44658: PUSH
44659: LD_INT 24
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: ST_TO_ADDR
44666: GO 44695
44668: LD_INT 47
44670: DOUBLE
44671: EQUAL
44672: IFTRUE 44676
44674: GO 44694
44676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_INT 23
44684: PUSH
44685: LD_INT 24
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: ST_TO_ADDR
44692: GO 44695
44694: POP
// result := ( chassis in result ) ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_VAR 0 1
44704: PUSH
44705: LD_VAR 0 3
44709: IN
44710: ST_TO_ADDR
// end ;
44711: LD_VAR 0 3
44715: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44716: LD_INT 0
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
// result := array ;
44725: LD_ADDR_VAR 0 5
44729: PUSH
44730: LD_VAR 0 1
44734: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44735: LD_VAR 0 1
44739: NOT
44740: PUSH
44741: LD_VAR 0 2
44745: NOT
44746: OR
44747: PUSH
44748: LD_VAR 0 3
44752: NOT
44753: OR
44754: PUSH
44755: LD_VAR 0 2
44759: PUSH
44760: LD_VAR 0 1
44764: GREATER
44765: OR
44766: PUSH
44767: LD_VAR 0 3
44771: PUSH
44772: LD_VAR 0 1
44776: GREATER
44777: OR
44778: IFFALSE 44782
// exit ;
44780: GO 45078
// if direction then
44782: LD_VAR 0 4
44786: IFFALSE 44850
// begin d := 1 ;
44788: LD_ADDR_VAR 0 9
44792: PUSH
44793: LD_INT 1
44795: ST_TO_ADDR
// if i_from > i_to then
44796: LD_VAR 0 2
44800: PUSH
44801: LD_VAR 0 3
44805: GREATER
44806: IFFALSE 44832
// length := ( array - i_from ) + i_to else
44808: LD_ADDR_VAR 0 11
44812: PUSH
44813: LD_VAR 0 1
44817: PUSH
44818: LD_VAR 0 2
44822: MINUS
44823: PUSH
44824: LD_VAR 0 3
44828: PLUS
44829: ST_TO_ADDR
44830: GO 44848
// length := i_to - i_from ;
44832: LD_ADDR_VAR 0 11
44836: PUSH
44837: LD_VAR 0 3
44841: PUSH
44842: LD_VAR 0 2
44846: MINUS
44847: ST_TO_ADDR
// end else
44848: GO 44911
// begin d := - 1 ;
44850: LD_ADDR_VAR 0 9
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: ST_TO_ADDR
// if i_from > i_to then
44859: LD_VAR 0 2
44863: PUSH
44864: LD_VAR 0 3
44868: GREATER
44869: IFFALSE 44889
// length := i_from - i_to else
44871: LD_ADDR_VAR 0 11
44875: PUSH
44876: LD_VAR 0 2
44880: PUSH
44881: LD_VAR 0 3
44885: MINUS
44886: ST_TO_ADDR
44887: GO 44911
// length := ( array - i_to ) + i_from ;
44889: LD_ADDR_VAR 0 11
44893: PUSH
44894: LD_VAR 0 1
44898: PUSH
44899: LD_VAR 0 3
44903: MINUS
44904: PUSH
44905: LD_VAR 0 2
44909: PLUS
44910: ST_TO_ADDR
// end ; if not length then
44911: LD_VAR 0 11
44915: NOT
44916: IFFALSE 44920
// exit ;
44918: GO 45078
// tmp := array ;
44920: LD_ADDR_VAR 0 10
44924: PUSH
44925: LD_VAR 0 1
44929: ST_TO_ADDR
// for i = 1 to length do
44930: LD_ADDR_VAR 0 6
44934: PUSH
44935: DOUBLE
44936: LD_INT 1
44938: DEC
44939: ST_TO_ADDR
44940: LD_VAR 0 11
44944: PUSH
44945: FOR_TO
44946: IFFALSE 45066
// begin for j = 1 to array do
44948: LD_ADDR_VAR 0 7
44952: PUSH
44953: DOUBLE
44954: LD_INT 1
44956: DEC
44957: ST_TO_ADDR
44958: LD_VAR 0 1
44962: PUSH
44963: FOR_TO
44964: IFFALSE 45052
// begin k := j + d ;
44966: LD_ADDR_VAR 0 8
44970: PUSH
44971: LD_VAR 0 7
44975: PUSH
44976: LD_VAR 0 9
44980: PLUS
44981: ST_TO_ADDR
// if k > array then
44982: LD_VAR 0 8
44986: PUSH
44987: LD_VAR 0 1
44991: GREATER
44992: IFFALSE 45002
// k := 1 ;
44994: LD_ADDR_VAR 0 8
44998: PUSH
44999: LD_INT 1
45001: ST_TO_ADDR
// if not k then
45002: LD_VAR 0 8
45006: NOT
45007: IFFALSE 45019
// k := array ;
45009: LD_ADDR_VAR 0 8
45013: PUSH
45014: LD_VAR 0 1
45018: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45019: LD_ADDR_VAR 0 10
45023: PUSH
45024: LD_VAR 0 10
45028: PPUSH
45029: LD_VAR 0 8
45033: PPUSH
45034: LD_VAR 0 1
45038: PUSH
45039: LD_VAR 0 7
45043: ARRAY
45044: PPUSH
45045: CALL_OW 1
45049: ST_TO_ADDR
// end ;
45050: GO 44963
45052: POP
45053: POP
// array := tmp ;
45054: LD_ADDR_VAR 0 1
45058: PUSH
45059: LD_VAR 0 10
45063: ST_TO_ADDR
// end ;
45064: GO 44945
45066: POP
45067: POP
// result := array ;
45068: LD_ADDR_VAR 0 5
45072: PUSH
45073: LD_VAR 0 1
45077: ST_TO_ADDR
// end ;
45078: LD_VAR 0 5
45082: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45083: LD_INT 0
45085: PPUSH
45086: PPUSH
// result := 0 ;
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 0
45094: ST_TO_ADDR
// if not array or not value in array then
45095: LD_VAR 0 1
45099: NOT
45100: PUSH
45101: LD_VAR 0 2
45105: PUSH
45106: LD_VAR 0 1
45110: IN
45111: NOT
45112: OR
45113: IFFALSE 45117
// exit ;
45115: GO 45171
// for i = 1 to array do
45117: LD_ADDR_VAR 0 4
45121: PUSH
45122: DOUBLE
45123: LD_INT 1
45125: DEC
45126: ST_TO_ADDR
45127: LD_VAR 0 1
45131: PUSH
45132: FOR_TO
45133: IFFALSE 45169
// if value = array [ i ] then
45135: LD_VAR 0 2
45139: PUSH
45140: LD_VAR 0 1
45144: PUSH
45145: LD_VAR 0 4
45149: ARRAY
45150: EQUAL
45151: IFFALSE 45167
// begin result := i ;
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_VAR 0 4
45162: ST_TO_ADDR
// exit ;
45163: POP
45164: POP
45165: GO 45171
// end ;
45167: GO 45132
45169: POP
45170: POP
// end ;
45171: LD_VAR 0 3
45175: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45176: LD_INT 0
45178: PPUSH
// vc_chassis := chassis ;
45179: LD_ADDR_OWVAR 37
45183: PUSH
45184: LD_VAR 0 1
45188: ST_TO_ADDR
// vc_engine := engine ;
45189: LD_ADDR_OWVAR 39
45193: PUSH
45194: LD_VAR 0 2
45198: ST_TO_ADDR
// vc_control := control ;
45199: LD_ADDR_OWVAR 38
45203: PUSH
45204: LD_VAR 0 3
45208: ST_TO_ADDR
// vc_weapon := weapon ;
45209: LD_ADDR_OWVAR 40
45213: PUSH
45214: LD_VAR 0 4
45218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45219: LD_ADDR_OWVAR 41
45223: PUSH
45224: LD_VAR 0 5
45228: ST_TO_ADDR
// end ;
45229: LD_VAR 0 6
45233: RET
// export function WantPlant ( unit ) ; var task ; begin
45234: LD_INT 0
45236: PPUSH
45237: PPUSH
// result := false ;
45238: LD_ADDR_VAR 0 2
45242: PUSH
45243: LD_INT 0
45245: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45246: LD_ADDR_VAR 0 3
45250: PUSH
45251: LD_VAR 0 1
45255: PPUSH
45256: CALL_OW 437
45260: ST_TO_ADDR
// if task then
45261: LD_VAR 0 3
45265: IFFALSE 45293
// if task [ 1 ] [ 1 ] = p then
45267: LD_VAR 0 3
45271: PUSH
45272: LD_INT 1
45274: ARRAY
45275: PUSH
45276: LD_INT 1
45278: ARRAY
45279: PUSH
45280: LD_STRING p
45282: EQUAL
45283: IFFALSE 45293
// result := true ;
45285: LD_ADDR_VAR 0 2
45289: PUSH
45290: LD_INT 1
45292: ST_TO_ADDR
// end ;
45293: LD_VAR 0 2
45297: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45298: LD_INT 0
45300: PPUSH
45301: PPUSH
45302: PPUSH
45303: PPUSH
// if pos < 1 then
45304: LD_VAR 0 2
45308: PUSH
45309: LD_INT 1
45311: LESS
45312: IFFALSE 45316
// exit ;
45314: GO 45619
// if pos = 1 then
45316: LD_VAR 0 2
45320: PUSH
45321: LD_INT 1
45323: EQUAL
45324: IFFALSE 45357
// result := Replace ( arr , pos [ 1 ] , value ) else
45326: LD_ADDR_VAR 0 4
45330: PUSH
45331: LD_VAR 0 1
45335: PPUSH
45336: LD_VAR 0 2
45340: PUSH
45341: LD_INT 1
45343: ARRAY
45344: PPUSH
45345: LD_VAR 0 3
45349: PPUSH
45350: CALL_OW 1
45354: ST_TO_ADDR
45355: GO 45619
// begin tmp := arr ;
45357: LD_ADDR_VAR 0 6
45361: PUSH
45362: LD_VAR 0 1
45366: ST_TO_ADDR
// s_arr := [ tmp ] ;
45367: LD_ADDR_VAR 0 7
45371: PUSH
45372: LD_VAR 0 6
45376: PUSH
45377: EMPTY
45378: LIST
45379: ST_TO_ADDR
// for i = 1 to pos - 1 do
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_VAR 0 2
45394: PUSH
45395: LD_INT 1
45397: MINUS
45398: PUSH
45399: FOR_TO
45400: IFFALSE 45445
// begin tmp := tmp [ pos [ i ] ] ;
45402: LD_ADDR_VAR 0 6
45406: PUSH
45407: LD_VAR 0 6
45411: PUSH
45412: LD_VAR 0 2
45416: PUSH
45417: LD_VAR 0 5
45421: ARRAY
45422: ARRAY
45423: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45424: LD_ADDR_VAR 0 7
45428: PUSH
45429: LD_VAR 0 7
45433: PUSH
45434: LD_VAR 0 6
45438: PUSH
45439: EMPTY
45440: LIST
45441: ADD
45442: ST_TO_ADDR
// end ;
45443: GO 45399
45445: POP
45446: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45447: LD_ADDR_VAR 0 6
45451: PUSH
45452: LD_VAR 0 6
45456: PPUSH
45457: LD_VAR 0 2
45461: PUSH
45462: LD_VAR 0 2
45466: ARRAY
45467: PPUSH
45468: LD_VAR 0 3
45472: PPUSH
45473: CALL_OW 1
45477: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45478: LD_ADDR_VAR 0 7
45482: PUSH
45483: LD_VAR 0 7
45487: PPUSH
45488: LD_VAR 0 7
45492: PPUSH
45493: LD_VAR 0 6
45497: PPUSH
45498: CALL_OW 1
45502: ST_TO_ADDR
// for i = s_arr downto 2 do
45503: LD_ADDR_VAR 0 5
45507: PUSH
45508: DOUBLE
45509: LD_VAR 0 7
45513: INC
45514: ST_TO_ADDR
45515: LD_INT 2
45517: PUSH
45518: FOR_DOWNTO
45519: IFFALSE 45603
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45521: LD_ADDR_VAR 0 6
45525: PUSH
45526: LD_VAR 0 7
45530: PUSH
45531: LD_VAR 0 5
45535: PUSH
45536: LD_INT 1
45538: MINUS
45539: ARRAY
45540: PPUSH
45541: LD_VAR 0 2
45545: PUSH
45546: LD_VAR 0 5
45550: PUSH
45551: LD_INT 1
45553: MINUS
45554: ARRAY
45555: PPUSH
45556: LD_VAR 0 7
45560: PUSH
45561: LD_VAR 0 5
45565: ARRAY
45566: PPUSH
45567: CALL_OW 1
45571: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45572: LD_ADDR_VAR 0 7
45576: PUSH
45577: LD_VAR 0 7
45581: PPUSH
45582: LD_VAR 0 5
45586: PUSH
45587: LD_INT 1
45589: MINUS
45590: PPUSH
45591: LD_VAR 0 6
45595: PPUSH
45596: CALL_OW 1
45600: ST_TO_ADDR
// end ;
45601: GO 45518
45603: POP
45604: POP
// result := s_arr [ 1 ] ;
45605: LD_ADDR_VAR 0 4
45609: PUSH
45610: LD_VAR 0 7
45614: PUSH
45615: LD_INT 1
45617: ARRAY
45618: ST_TO_ADDR
// end ; end ;
45619: LD_VAR 0 4
45623: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45624: LD_INT 0
45626: PPUSH
45627: PPUSH
// if not list then
45628: LD_VAR 0 1
45632: NOT
45633: IFFALSE 45637
// exit ;
45635: GO 45728
// i := list [ pos1 ] ;
45637: LD_ADDR_VAR 0 5
45641: PUSH
45642: LD_VAR 0 1
45646: PUSH
45647: LD_VAR 0 2
45651: ARRAY
45652: ST_TO_ADDR
// if not i then
45653: LD_VAR 0 5
45657: NOT
45658: IFFALSE 45662
// exit ;
45660: GO 45728
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45662: LD_ADDR_VAR 0 1
45666: PUSH
45667: LD_VAR 0 1
45671: PPUSH
45672: LD_VAR 0 2
45676: PPUSH
45677: LD_VAR 0 1
45681: PUSH
45682: LD_VAR 0 3
45686: ARRAY
45687: PPUSH
45688: CALL_OW 1
45692: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45693: LD_ADDR_VAR 0 1
45697: PUSH
45698: LD_VAR 0 1
45702: PPUSH
45703: LD_VAR 0 3
45707: PPUSH
45708: LD_VAR 0 5
45712: PPUSH
45713: CALL_OW 1
45717: ST_TO_ADDR
// result := list ;
45718: LD_ADDR_VAR 0 4
45722: PUSH
45723: LD_VAR 0 1
45727: ST_TO_ADDR
// end ;
45728: LD_VAR 0 4
45732: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45733: LD_INT 0
45735: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45736: LD_ADDR_VAR 0 5
45740: PUSH
45741: LD_VAR 0 1
45745: PPUSH
45746: CALL_OW 250
45750: PPUSH
45751: LD_VAR 0 1
45755: PPUSH
45756: CALL_OW 251
45760: PPUSH
45761: LD_VAR 0 2
45765: PPUSH
45766: LD_VAR 0 3
45770: PPUSH
45771: LD_VAR 0 4
45775: PPUSH
45776: CALL 45786 0 5
45780: ST_TO_ADDR
// end ;
45781: LD_VAR 0 5
45785: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45786: LD_INT 0
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
// if not list then
45792: LD_VAR 0 3
45796: NOT
45797: IFFALSE 45801
// exit ;
45799: GO 46189
// result := [ ] ;
45801: LD_ADDR_VAR 0 6
45805: PUSH
45806: EMPTY
45807: ST_TO_ADDR
// for i in list do
45808: LD_ADDR_VAR 0 7
45812: PUSH
45813: LD_VAR 0 3
45817: PUSH
45818: FOR_IN
45819: IFFALSE 46021
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45821: LD_ADDR_VAR 0 9
45825: PUSH
45826: LD_VAR 0 7
45830: PPUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: LD_VAR 0 2
45840: PPUSH
45841: CALL_OW 297
45845: ST_TO_ADDR
// if not result then
45846: LD_VAR 0 6
45850: NOT
45851: IFFALSE 45877
// result := [ [ i , tmp ] ] else
45853: LD_ADDR_VAR 0 6
45857: PUSH
45858: LD_VAR 0 7
45862: PUSH
45863: LD_VAR 0 9
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: ST_TO_ADDR
45875: GO 46019
// begin if result [ result ] [ 2 ] < tmp then
45877: LD_VAR 0 6
45881: PUSH
45882: LD_VAR 0 6
45886: ARRAY
45887: PUSH
45888: LD_INT 2
45890: ARRAY
45891: PUSH
45892: LD_VAR 0 9
45896: LESS
45897: IFFALSE 45939
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45899: LD_ADDR_VAR 0 6
45903: PUSH
45904: LD_VAR 0 6
45908: PPUSH
45909: LD_VAR 0 6
45913: PUSH
45914: LD_INT 1
45916: PLUS
45917: PPUSH
45918: LD_VAR 0 7
45922: PUSH
45923: LD_VAR 0 9
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PPUSH
45932: CALL_OW 2
45936: ST_TO_ADDR
45937: GO 46019
// for j = 1 to result do
45939: LD_ADDR_VAR 0 8
45943: PUSH
45944: DOUBLE
45945: LD_INT 1
45947: DEC
45948: ST_TO_ADDR
45949: LD_VAR 0 6
45953: PUSH
45954: FOR_TO
45955: IFFALSE 46017
// begin if tmp < result [ j ] [ 2 ] then
45957: LD_VAR 0 9
45961: PUSH
45962: LD_VAR 0 6
45966: PUSH
45967: LD_VAR 0 8
45971: ARRAY
45972: PUSH
45973: LD_INT 2
45975: ARRAY
45976: LESS
45977: IFFALSE 46015
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45979: LD_ADDR_VAR 0 6
45983: PUSH
45984: LD_VAR 0 6
45988: PPUSH
45989: LD_VAR 0 8
45993: PPUSH
45994: LD_VAR 0 7
45998: PUSH
45999: LD_VAR 0 9
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PPUSH
46008: CALL_OW 2
46012: ST_TO_ADDR
// break ;
46013: GO 46017
// end ; end ;
46015: GO 45954
46017: POP
46018: POP
// end ; end ;
46019: GO 45818
46021: POP
46022: POP
// if result and not asc then
46023: LD_VAR 0 6
46027: PUSH
46028: LD_VAR 0 4
46032: NOT
46033: AND
46034: IFFALSE 46109
// begin tmp := result ;
46036: LD_ADDR_VAR 0 9
46040: PUSH
46041: LD_VAR 0 6
46045: ST_TO_ADDR
// for i = tmp downto 1 do
46046: LD_ADDR_VAR 0 7
46050: PUSH
46051: DOUBLE
46052: LD_VAR 0 9
46056: INC
46057: ST_TO_ADDR
46058: LD_INT 1
46060: PUSH
46061: FOR_DOWNTO
46062: IFFALSE 46107
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46064: LD_ADDR_VAR 0 6
46068: PUSH
46069: LD_VAR 0 6
46073: PPUSH
46074: LD_VAR 0 9
46078: PUSH
46079: LD_VAR 0 7
46083: MINUS
46084: PUSH
46085: LD_INT 1
46087: PLUS
46088: PPUSH
46089: LD_VAR 0 9
46093: PUSH
46094: LD_VAR 0 7
46098: ARRAY
46099: PPUSH
46100: CALL_OW 1
46104: ST_TO_ADDR
46105: GO 46061
46107: POP
46108: POP
// end ; tmp := [ ] ;
46109: LD_ADDR_VAR 0 9
46113: PUSH
46114: EMPTY
46115: ST_TO_ADDR
// if mode then
46116: LD_VAR 0 5
46120: IFFALSE 46189
// begin for i = 1 to result do
46122: LD_ADDR_VAR 0 7
46126: PUSH
46127: DOUBLE
46128: LD_INT 1
46130: DEC
46131: ST_TO_ADDR
46132: LD_VAR 0 6
46136: PUSH
46137: FOR_TO
46138: IFFALSE 46177
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46140: LD_ADDR_VAR 0 9
46144: PUSH
46145: LD_VAR 0 9
46149: PPUSH
46150: LD_VAR 0 7
46154: PPUSH
46155: LD_VAR 0 6
46159: PUSH
46160: LD_VAR 0 7
46164: ARRAY
46165: PUSH
46166: LD_INT 1
46168: ARRAY
46169: PPUSH
46170: CALL_OW 1
46174: ST_TO_ADDR
46175: GO 46137
46177: POP
46178: POP
// result := tmp ;
46179: LD_ADDR_VAR 0 6
46183: PUSH
46184: LD_VAR 0 9
46188: ST_TO_ADDR
// end ; end ;
46189: LD_VAR 0 6
46193: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46194: LD_INT 0
46196: PPUSH
46197: PPUSH
46198: PPUSH
46199: PPUSH
46200: PPUSH
46201: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46202: LD_ADDR_VAR 0 5
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// if not x or not y then
46224: LD_VAR 0 2
46228: NOT
46229: PUSH
46230: LD_VAR 0 3
46234: NOT
46235: OR
46236: IFFALSE 46240
// exit ;
46238: GO 47892
// if not range then
46240: LD_VAR 0 4
46244: NOT
46245: IFFALSE 46255
// range := 10 ;
46247: LD_ADDR_VAR 0 4
46251: PUSH
46252: LD_INT 10
46254: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46255: LD_ADDR_VAR 0 8
46259: PUSH
46260: LD_INT 81
46262: PUSH
46263: LD_VAR 0 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 92
46274: PUSH
46275: LD_VAR 0 2
46279: PUSH
46280: LD_VAR 0 3
46284: PUSH
46285: LD_VAR 0 4
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: LD_INT 21
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: PPUSH
46318: CALL_OW 69
46322: ST_TO_ADDR
// if not tmp then
46323: LD_VAR 0 8
46327: NOT
46328: IFFALSE 46332
// exit ;
46330: GO 47892
// for i in tmp do
46332: LD_ADDR_VAR 0 6
46336: PUSH
46337: LD_VAR 0 8
46341: PUSH
46342: FOR_IN
46343: IFFALSE 47867
// begin points := [ 0 , 0 , 0 ] ;
46345: LD_ADDR_VAR 0 9
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// bpoints := 1 ;
46364: LD_ADDR_VAR 0 10
46368: PUSH
46369: LD_INT 1
46371: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46372: LD_VAR 0 6
46376: PPUSH
46377: CALL_OW 247
46381: PUSH
46382: LD_INT 1
46384: DOUBLE
46385: EQUAL
46386: IFTRUE 46390
46388: GO 46968
46390: POP
// begin if GetClass ( i ) = 1 then
46391: LD_VAR 0 6
46395: PPUSH
46396: CALL_OW 257
46400: PUSH
46401: LD_INT 1
46403: EQUAL
46404: IFFALSE 46425
// points := [ 10 , 5 , 3 ] ;
46406: LD_ADDR_VAR 0 9
46410: PUSH
46411: LD_INT 10
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46425: LD_VAR 0 6
46429: PPUSH
46430: CALL_OW 257
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 4
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: IN
46449: IFFALSE 46470
// points := [ 3 , 2 , 1 ] ;
46451: LD_ADDR_VAR 0 9
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46470: LD_VAR 0 6
46474: PPUSH
46475: CALL_OW 257
46479: PUSH
46480: LD_INT 5
46482: EQUAL
46483: IFFALSE 46504
// points := [ 130 , 5 , 2 ] ;
46485: LD_ADDR_VAR 0 9
46489: PUSH
46490: LD_INT 130
46492: PUSH
46493: LD_INT 5
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46504: LD_VAR 0 6
46508: PPUSH
46509: CALL_OW 257
46513: PUSH
46514: LD_INT 8
46516: EQUAL
46517: IFFALSE 46538
// points := [ 35 , 35 , 30 ] ;
46519: LD_ADDR_VAR 0 9
46523: PUSH
46524: LD_INT 35
46526: PUSH
46527: LD_INT 35
46529: PUSH
46530: LD_INT 30
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46538: LD_VAR 0 6
46542: PPUSH
46543: CALL_OW 257
46547: PUSH
46548: LD_INT 9
46550: EQUAL
46551: IFFALSE 46572
// points := [ 20 , 55 , 40 ] ;
46553: LD_ADDR_VAR 0 9
46557: PUSH
46558: LD_INT 20
46560: PUSH
46561: LD_INT 55
46563: PUSH
46564: LD_INT 40
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46572: LD_VAR 0 6
46576: PPUSH
46577: CALL_OW 257
46581: PUSH
46582: LD_INT 12
46584: PUSH
46585: LD_INT 16
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: IN
46592: IFFALSE 46613
// points := [ 5 , 3 , 2 ] ;
46594: LD_ADDR_VAR 0 9
46598: PUSH
46599: LD_INT 5
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46613: LD_VAR 0 6
46617: PPUSH
46618: CALL_OW 257
46622: PUSH
46623: LD_INT 17
46625: EQUAL
46626: IFFALSE 46647
// points := [ 100 , 50 , 75 ] ;
46628: LD_ADDR_VAR 0 9
46632: PUSH
46633: LD_INT 100
46635: PUSH
46636: LD_INT 50
46638: PUSH
46639: LD_INT 75
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 257
46656: PUSH
46657: LD_INT 15
46659: EQUAL
46660: IFFALSE 46681
// points := [ 10 , 5 , 3 ] ;
46662: LD_ADDR_VAR 0 9
46666: PUSH
46667: LD_INT 10
46669: PUSH
46670: LD_INT 5
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46681: LD_VAR 0 6
46685: PPUSH
46686: CALL_OW 257
46690: PUSH
46691: LD_INT 14
46693: EQUAL
46694: IFFALSE 46715
// points := [ 10 , 0 , 0 ] ;
46696: LD_ADDR_VAR 0 9
46700: PUSH
46701: LD_INT 10
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46715: LD_VAR 0 6
46719: PPUSH
46720: CALL_OW 257
46724: PUSH
46725: LD_INT 11
46727: EQUAL
46728: IFFALSE 46749
// points := [ 30 , 10 , 5 ] ;
46730: LD_ADDR_VAR 0 9
46734: PUSH
46735: LD_INT 30
46737: PUSH
46738: LD_INT 10
46740: PUSH
46741: LD_INT 5
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46749: LD_VAR 0 1
46753: PPUSH
46754: LD_INT 5
46756: PPUSH
46757: CALL_OW 321
46761: PUSH
46762: LD_INT 2
46764: EQUAL
46765: IFFALSE 46782
// bpoints := bpoints * 1.8 ;
46767: LD_ADDR_VAR 0 10
46771: PUSH
46772: LD_VAR 0 10
46776: PUSH
46777: LD_REAL  1.80000000000000E+0000
46780: MUL
46781: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46782: LD_VAR 0 6
46786: PPUSH
46787: CALL_OW 257
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: IN
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: LD_INT 51
46818: PPUSH
46819: CALL_OW 321
46823: PUSH
46824: LD_INT 2
46826: EQUAL
46827: AND
46828: IFFALSE 46845
// bpoints := bpoints * 1.2 ;
46830: LD_ADDR_VAR 0 10
46834: PUSH
46835: LD_VAR 0 10
46839: PUSH
46840: LD_REAL  1.20000000000000E+0000
46843: MUL
46844: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46845: LD_VAR 0 6
46849: PPUSH
46850: CALL_OW 257
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: LD_INT 7
46860: PUSH
46861: LD_INT 9
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: IN
46869: PUSH
46870: LD_VAR 0 1
46874: PPUSH
46875: LD_INT 52
46877: PPUSH
46878: CALL_OW 321
46882: PUSH
46883: LD_INT 2
46885: EQUAL
46886: AND
46887: IFFALSE 46904
// bpoints := bpoints * 1.5 ;
46889: LD_ADDR_VAR 0 10
46893: PUSH
46894: LD_VAR 0 10
46898: PUSH
46899: LD_REAL  1.50000000000000E+0000
46902: MUL
46903: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46904: LD_VAR 0 1
46908: PPUSH
46909: LD_INT 66
46911: PPUSH
46912: CALL_OW 321
46916: PUSH
46917: LD_INT 2
46919: EQUAL
46920: IFFALSE 46937
// bpoints := bpoints * 1.1 ;
46922: LD_ADDR_VAR 0 10
46926: PUSH
46927: LD_VAR 0 10
46931: PUSH
46932: LD_REAL  1.10000000000000E+0000
46935: MUL
46936: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46937: LD_ADDR_VAR 0 10
46941: PUSH
46942: LD_VAR 0 10
46946: PUSH
46947: LD_VAR 0 6
46951: PPUSH
46952: LD_INT 1
46954: PPUSH
46955: CALL_OW 259
46959: PUSH
46960: LD_REAL  1.15000000000000E+0000
46963: MUL
46964: MUL
46965: ST_TO_ADDR
// end ; unit_vehicle :
46966: GO 47796
46968: LD_INT 2
46970: DOUBLE
46971: EQUAL
46972: IFTRUE 46976
46974: GO 47784
46976: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46977: LD_VAR 0 6
46981: PPUSH
46982: CALL_OW 264
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 42
46992: PUSH
46993: LD_INT 24
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: IN
47001: IFFALSE 47022
// points := [ 25 , 5 , 3 ] ;
47003: LD_ADDR_VAR 0 9
47007: PUSH
47008: LD_INT 25
47010: PUSH
47011: LD_INT 5
47013: PUSH
47014: LD_INT 3
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47022: LD_VAR 0 6
47026: PPUSH
47027: CALL_OW 264
47031: PUSH
47032: LD_INT 4
47034: PUSH
47035: LD_INT 43
47037: PUSH
47038: LD_INT 25
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: IN
47046: IFFALSE 47067
// points := [ 40 , 15 , 5 ] ;
47048: LD_ADDR_VAR 0 9
47052: PUSH
47053: LD_INT 40
47055: PUSH
47056: LD_INT 15
47058: PUSH
47059: LD_INT 5
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47067: LD_VAR 0 6
47071: PPUSH
47072: CALL_OW 264
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 23
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: IN
47087: IFFALSE 47108
// points := [ 7 , 25 , 8 ] ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_INT 7
47096: PUSH
47097: LD_INT 25
47099: PUSH
47100: LD_INT 8
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47108: LD_VAR 0 6
47112: PPUSH
47113: CALL_OW 264
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: LD_INT 27
47123: PUSH
47124: LD_INT 44
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: IN
47132: IFFALSE 47153
// points := [ 14 , 50 , 16 ] ;
47134: LD_ADDR_VAR 0 9
47138: PUSH
47139: LD_INT 14
47141: PUSH
47142: LD_INT 50
47144: PUSH
47145: LD_INT 16
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47153: LD_VAR 0 6
47157: PPUSH
47158: CALL_OW 264
47162: PUSH
47163: LD_INT 6
47165: PUSH
47166: LD_INT 46
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: IN
47173: IFFALSE 47194
// points := [ 32 , 120 , 70 ] ;
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_INT 32
47182: PUSH
47183: LD_INT 120
47185: PUSH
47186: LD_INT 70
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47194: LD_VAR 0 6
47198: PPUSH
47199: CALL_OW 264
47203: PUSH
47204: LD_INT 7
47206: PUSH
47207: LD_INT 28
47209: PUSH
47210: LD_INT 45
47212: PUSH
47213: LD_EXP 54
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: IN
47224: IFFALSE 47245
// points := [ 35 , 20 , 45 ] ;
47226: LD_ADDR_VAR 0 9
47230: PUSH
47231: LD_INT 35
47233: PUSH
47234: LD_INT 20
47236: PUSH
47237: LD_INT 45
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47245: LD_VAR 0 6
47249: PPUSH
47250: CALL_OW 264
47254: PUSH
47255: LD_INT 47
47257: PUSH
47258: EMPTY
47259: LIST
47260: IN
47261: IFFALSE 47282
// points := [ 67 , 45 , 75 ] ;
47263: LD_ADDR_VAR 0 9
47267: PUSH
47268: LD_INT 67
47270: PUSH
47271: LD_INT 45
47273: PUSH
47274: LD_INT 75
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47282: LD_VAR 0 6
47286: PPUSH
47287: CALL_OW 264
47291: PUSH
47292: LD_INT 26
47294: PUSH
47295: EMPTY
47296: LIST
47297: IN
47298: IFFALSE 47319
// points := [ 120 , 30 , 80 ] ;
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_INT 120
47307: PUSH
47308: LD_INT 30
47310: PUSH
47311: LD_INT 80
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47319: LD_VAR 0 6
47323: PPUSH
47324: CALL_OW 264
47328: PUSH
47329: LD_INT 22
47331: PUSH
47332: EMPTY
47333: LIST
47334: IN
47335: IFFALSE 47356
// points := [ 40 , 1 , 1 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 40
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 264
47365: PUSH
47366: LD_INT 29
47368: PUSH
47369: EMPTY
47370: LIST
47371: IN
47372: IFFALSE 47393
// points := [ 70 , 200 , 400 ] ;
47374: LD_ADDR_VAR 0 9
47378: PUSH
47379: LD_INT 70
47381: PUSH
47382: LD_INT 200
47384: PUSH
47385: LD_INT 400
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47393: LD_VAR 0 6
47397: PPUSH
47398: CALL_OW 264
47402: PUSH
47403: LD_INT 14
47405: PUSH
47406: LD_INT 53
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: IN
47413: IFFALSE 47434
// points := [ 40 , 10 , 20 ] ;
47415: LD_ADDR_VAR 0 9
47419: PUSH
47420: LD_INT 40
47422: PUSH
47423: LD_INT 10
47425: PUSH
47426: LD_INT 20
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47434: LD_VAR 0 6
47438: PPUSH
47439: CALL_OW 264
47443: PUSH
47444: LD_INT 9
47446: PUSH
47447: EMPTY
47448: LIST
47449: IN
47450: IFFALSE 47471
// points := [ 5 , 70 , 20 ] ;
47452: LD_ADDR_VAR 0 9
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: LD_INT 70
47462: PUSH
47463: LD_INT 20
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47471: LD_VAR 0 6
47475: PPUSH
47476: CALL_OW 264
47480: PUSH
47481: LD_INT 10
47483: PUSH
47484: EMPTY
47485: LIST
47486: IN
47487: IFFALSE 47508
// points := [ 35 , 110 , 70 ] ;
47489: LD_ADDR_VAR 0 9
47493: PUSH
47494: LD_INT 35
47496: PUSH
47497: LD_INT 110
47499: PUSH
47500: LD_INT 70
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47508: LD_VAR 0 6
47512: PPUSH
47513: CALL_OW 265
47517: PUSH
47518: LD_INT 25
47520: EQUAL
47521: IFFALSE 47542
// points := [ 80 , 65 , 100 ] ;
47523: LD_ADDR_VAR 0 9
47527: PUSH
47528: LD_INT 80
47530: PUSH
47531: LD_INT 65
47533: PUSH
47534: LD_INT 100
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47542: LD_VAR 0 6
47546: PPUSH
47547: CALL_OW 263
47551: PUSH
47552: LD_INT 1
47554: EQUAL
47555: IFFALSE 47590
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47557: LD_ADDR_VAR 0 10
47561: PUSH
47562: LD_VAR 0 10
47566: PUSH
47567: LD_VAR 0 6
47571: PPUSH
47572: CALL_OW 311
47576: PPUSH
47577: LD_INT 3
47579: PPUSH
47580: CALL_OW 259
47584: PUSH
47585: LD_INT 4
47587: MUL
47588: MUL
47589: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47590: LD_VAR 0 6
47594: PPUSH
47595: CALL_OW 263
47599: PUSH
47600: LD_INT 2
47602: EQUAL
47603: IFFALSE 47654
// begin j := IsControledBy ( i ) ;
47605: LD_ADDR_VAR 0 7
47609: PUSH
47610: LD_VAR 0 6
47614: PPUSH
47615: CALL_OW 312
47619: ST_TO_ADDR
// if j then
47620: LD_VAR 0 7
47624: IFFALSE 47654
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47626: LD_ADDR_VAR 0 10
47630: PUSH
47631: LD_VAR 0 10
47635: PUSH
47636: LD_VAR 0 7
47640: PPUSH
47641: LD_INT 3
47643: PPUSH
47644: CALL_OW 259
47648: PUSH
47649: LD_INT 3
47651: MUL
47652: MUL
47653: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47654: LD_VAR 0 6
47658: PPUSH
47659: CALL_OW 264
47663: PUSH
47664: LD_INT 5
47666: PUSH
47667: LD_INT 6
47669: PUSH
47670: LD_INT 46
47672: PUSH
47673: LD_INT 44
47675: PUSH
47676: LD_INT 47
47678: PUSH
47679: LD_INT 45
47681: PUSH
47682: LD_INT 28
47684: PUSH
47685: LD_INT 7
47687: PUSH
47688: LD_INT 27
47690: PUSH
47691: LD_INT 29
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: IN
47706: PUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: LD_INT 52
47714: PPUSH
47715: CALL_OW 321
47719: PUSH
47720: LD_INT 2
47722: EQUAL
47723: AND
47724: IFFALSE 47741
// bpoints := bpoints * 1.2 ;
47726: LD_ADDR_VAR 0 10
47730: PUSH
47731: LD_VAR 0 10
47735: PUSH
47736: LD_REAL  1.20000000000000E+0000
47739: MUL
47740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47741: LD_VAR 0 6
47745: PPUSH
47746: CALL_OW 264
47750: PUSH
47751: LD_INT 6
47753: PUSH
47754: LD_INT 46
47756: PUSH
47757: LD_INT 47
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: IN
47765: IFFALSE 47782
// bpoints := bpoints * 1.2 ;
47767: LD_ADDR_VAR 0 10
47771: PUSH
47772: LD_VAR 0 10
47776: PUSH
47777: LD_REAL  1.20000000000000E+0000
47780: MUL
47781: ST_TO_ADDR
// end ; unit_building :
47782: GO 47796
47784: LD_INT 3
47786: DOUBLE
47787: EQUAL
47788: IFTRUE 47792
47790: GO 47795
47792: POP
// ; end ;
47793: GO 47796
47795: POP
// for j = 1 to 3 do
47796: LD_ADDR_VAR 0 7
47800: PUSH
47801: DOUBLE
47802: LD_INT 1
47804: DEC
47805: ST_TO_ADDR
47806: LD_INT 3
47808: PUSH
47809: FOR_TO
47810: IFFALSE 47863
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47812: LD_ADDR_VAR 0 5
47816: PUSH
47817: LD_VAR 0 5
47821: PPUSH
47822: LD_VAR 0 7
47826: PPUSH
47827: LD_VAR 0 5
47831: PUSH
47832: LD_VAR 0 7
47836: ARRAY
47837: PUSH
47838: LD_VAR 0 9
47842: PUSH
47843: LD_VAR 0 7
47847: ARRAY
47848: PUSH
47849: LD_VAR 0 10
47853: MUL
47854: PLUS
47855: PPUSH
47856: CALL_OW 1
47860: ST_TO_ADDR
47861: GO 47809
47863: POP
47864: POP
// end ;
47865: GO 46342
47867: POP
47868: POP
// result := Replace ( result , 4 , tmp ) ;
47869: LD_ADDR_VAR 0 5
47873: PUSH
47874: LD_VAR 0 5
47878: PPUSH
47879: LD_INT 4
47881: PPUSH
47882: LD_VAR 0 8
47886: PPUSH
47887: CALL_OW 1
47891: ST_TO_ADDR
// end ;
47892: LD_VAR 0 5
47896: RET
// export function DangerAtRange ( unit , range ) ; begin
47897: LD_INT 0
47899: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47900: LD_ADDR_VAR 0 3
47904: PUSH
47905: LD_VAR 0 1
47909: PPUSH
47910: CALL_OW 255
47914: PPUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: CALL_OW 250
47924: PPUSH
47925: LD_VAR 0 1
47929: PPUSH
47930: CALL_OW 251
47934: PPUSH
47935: LD_VAR 0 2
47939: PPUSH
47940: CALL 46194 0 4
47944: ST_TO_ADDR
// end ;
47945: LD_VAR 0 3
47949: RET
// export function DangerInArea ( side , area ) ; begin
47950: LD_INT 0
47952: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47953: LD_ADDR_VAR 0 3
47957: PUSH
47958: LD_VAR 0 2
47962: PPUSH
47963: LD_INT 81
47965: PUSH
47966: LD_VAR 0 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PPUSH
47975: CALL_OW 70
47979: ST_TO_ADDR
// end ;
47980: LD_VAR 0 3
47984: RET
// export function IsExtension ( b ) ; begin
47985: LD_INT 0
47987: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47988: LD_ADDR_VAR 0 2
47992: PUSH
47993: LD_VAR 0 1
47997: PUSH
47998: LD_INT 23
48000: PUSH
48001: LD_INT 20
48003: PUSH
48004: LD_INT 22
48006: PUSH
48007: LD_INT 17
48009: PUSH
48010: LD_INT 24
48012: PUSH
48013: LD_INT 21
48015: PUSH
48016: LD_INT 19
48018: PUSH
48019: LD_INT 16
48021: PUSH
48022: LD_INT 25
48024: PUSH
48025: LD_INT 18
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: IN
48040: ST_TO_ADDR
// end ;
48041: LD_VAR 0 2
48045: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48046: LD_INT 0
48048: PPUSH
48049: PPUSH
48050: PPUSH
// result := [ ] ;
48051: LD_ADDR_VAR 0 4
48055: PUSH
48056: EMPTY
48057: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48058: LD_ADDR_VAR 0 5
48062: PUSH
48063: LD_VAR 0 2
48067: PPUSH
48068: LD_INT 21
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PPUSH
48078: CALL_OW 70
48082: ST_TO_ADDR
// if not tmp then
48083: LD_VAR 0 5
48087: NOT
48088: IFFALSE 48092
// exit ;
48090: GO 48156
// if checkLink then
48092: LD_VAR 0 3
48096: IFFALSE 48146
// begin for i in tmp do
48098: LD_ADDR_VAR 0 6
48102: PUSH
48103: LD_VAR 0 5
48107: PUSH
48108: FOR_IN
48109: IFFALSE 48144
// if GetBase ( i ) <> base then
48111: LD_VAR 0 6
48115: PPUSH
48116: CALL_OW 274
48120: PUSH
48121: LD_VAR 0 1
48125: NONEQUAL
48126: IFFALSE 48142
// ComLinkToBase ( base , i ) ;
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_VAR 0 6
48137: PPUSH
48138: CALL_OW 169
48142: GO 48108
48144: POP
48145: POP
// end ; result := tmp ;
48146: LD_ADDR_VAR 0 4
48150: PUSH
48151: LD_VAR 0 5
48155: ST_TO_ADDR
// end ;
48156: LD_VAR 0 4
48160: RET
// export function ComComplete ( units , b ) ; var i ; begin
48161: LD_INT 0
48163: PPUSH
48164: PPUSH
// if not units then
48165: LD_VAR 0 1
48169: NOT
48170: IFFALSE 48174
// exit ;
48172: GO 48264
// for i in units do
48174: LD_ADDR_VAR 0 4
48178: PUSH
48179: LD_VAR 0 1
48183: PUSH
48184: FOR_IN
48185: IFFALSE 48262
// if BuildingStatus ( b ) = bs_build then
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 461
48196: PUSH
48197: LD_INT 1
48199: EQUAL
48200: IFFALSE 48260
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48202: LD_VAR 0 4
48206: PPUSH
48207: LD_STRING h
48209: PUSH
48210: LD_VAR 0 2
48214: PPUSH
48215: CALL_OW 250
48219: PUSH
48220: LD_VAR 0 2
48224: PPUSH
48225: CALL_OW 251
48229: PUSH
48230: LD_VAR 0 2
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: PPUSH
48256: CALL_OW 446
48260: GO 48184
48262: POP
48263: POP
// end ;
48264: LD_VAR 0 3
48268: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48269: LD_INT 0
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
48275: PPUSH
48276: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48277: LD_VAR 0 1
48281: NOT
48282: PUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: CALL_OW 263
48292: PUSH
48293: LD_INT 2
48295: NONEQUAL
48296: OR
48297: IFFALSE 48301
// exit ;
48299: GO 48617
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48301: LD_ADDR_VAR 0 6
48305: PUSH
48306: LD_INT 22
48308: PUSH
48309: LD_VAR 0 1
48313: PPUSH
48314: CALL_OW 255
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 30
48328: PUSH
48329: LD_INT 36
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 34
48338: PUSH
48339: LD_INT 31
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PPUSH
48355: CALL_OW 69
48359: ST_TO_ADDR
// if not tmp then
48360: LD_VAR 0 6
48364: NOT
48365: IFFALSE 48369
// exit ;
48367: GO 48617
// result := [ ] ;
48369: LD_ADDR_VAR 0 2
48373: PUSH
48374: EMPTY
48375: ST_TO_ADDR
// for i in tmp do
48376: LD_ADDR_VAR 0 3
48380: PUSH
48381: LD_VAR 0 6
48385: PUSH
48386: FOR_IN
48387: IFFALSE 48458
// begin t := UnitsInside ( i ) ;
48389: LD_ADDR_VAR 0 4
48393: PUSH
48394: LD_VAR 0 3
48398: PPUSH
48399: CALL_OW 313
48403: ST_TO_ADDR
// if t then
48404: LD_VAR 0 4
48408: IFFALSE 48456
// for j in t do
48410: LD_ADDR_VAR 0 7
48414: PUSH
48415: LD_VAR 0 4
48419: PUSH
48420: FOR_IN
48421: IFFALSE 48454
// result := Replace ( result , result + 1 , j ) ;
48423: LD_ADDR_VAR 0 2
48427: PUSH
48428: LD_VAR 0 2
48432: PPUSH
48433: LD_VAR 0 2
48437: PUSH
48438: LD_INT 1
48440: PLUS
48441: PPUSH
48442: LD_VAR 0 7
48446: PPUSH
48447: CALL_OW 1
48451: ST_TO_ADDR
48452: GO 48420
48454: POP
48455: POP
// end ;
48456: GO 48386
48458: POP
48459: POP
// if not result then
48460: LD_VAR 0 2
48464: NOT
48465: IFFALSE 48469
// exit ;
48467: GO 48617
// mech := result [ 1 ] ;
48469: LD_ADDR_VAR 0 5
48473: PUSH
48474: LD_VAR 0 2
48478: PUSH
48479: LD_INT 1
48481: ARRAY
48482: ST_TO_ADDR
// if result > 1 then
48483: LD_VAR 0 2
48487: PUSH
48488: LD_INT 1
48490: GREATER
48491: IFFALSE 48603
// begin for i = 2 to result do
48493: LD_ADDR_VAR 0 3
48497: PUSH
48498: DOUBLE
48499: LD_INT 2
48501: DEC
48502: ST_TO_ADDR
48503: LD_VAR 0 2
48507: PUSH
48508: FOR_TO
48509: IFFALSE 48601
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48511: LD_ADDR_VAR 0 4
48515: PUSH
48516: LD_VAR 0 2
48520: PUSH
48521: LD_VAR 0 3
48525: ARRAY
48526: PPUSH
48527: LD_INT 3
48529: PPUSH
48530: CALL_OW 259
48534: PUSH
48535: LD_VAR 0 2
48539: PUSH
48540: LD_VAR 0 3
48544: ARRAY
48545: PPUSH
48546: CALL_OW 432
48550: MINUS
48551: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48552: LD_VAR 0 4
48556: PUSH
48557: LD_VAR 0 5
48561: PPUSH
48562: LD_INT 3
48564: PPUSH
48565: CALL_OW 259
48569: PUSH
48570: LD_VAR 0 5
48574: PPUSH
48575: CALL_OW 432
48579: MINUS
48580: GREATEREQUAL
48581: IFFALSE 48599
// mech := result [ i ] ;
48583: LD_ADDR_VAR 0 5
48587: PUSH
48588: LD_VAR 0 2
48592: PUSH
48593: LD_VAR 0 3
48597: ARRAY
48598: ST_TO_ADDR
// end ;
48599: GO 48508
48601: POP
48602: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48603: LD_VAR 0 1
48607: PPUSH
48608: LD_VAR 0 5
48612: PPUSH
48613: CALL_OW 135
// end ;
48617: LD_VAR 0 2
48621: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48622: LD_INT 0
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
48630: PPUSH
48631: PPUSH
48632: PPUSH
48633: PPUSH
48634: PPUSH
48635: PPUSH
48636: PPUSH
// result := [ ] ;
48637: LD_ADDR_VAR 0 7
48641: PUSH
48642: EMPTY
48643: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 266
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: IN
48664: NOT
48665: IFFALSE 48669
// exit ;
48667: GO 50303
// if name then
48669: LD_VAR 0 3
48673: IFFALSE 48689
// SetBName ( base_dep , name ) ;
48675: LD_VAR 0 1
48679: PPUSH
48680: LD_VAR 0 3
48684: PPUSH
48685: CALL_OW 500
// base := GetBase ( base_dep ) ;
48689: LD_ADDR_VAR 0 15
48693: PUSH
48694: LD_VAR 0 1
48698: PPUSH
48699: CALL_OW 274
48703: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48704: LD_ADDR_VAR 0 16
48708: PUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 255
48718: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48719: LD_ADDR_VAR 0 17
48723: PUSH
48724: LD_VAR 0 1
48728: PPUSH
48729: CALL_OW 248
48733: ST_TO_ADDR
// if sources then
48734: LD_VAR 0 5
48738: IFFALSE 48785
// for i = 1 to 3 do
48740: LD_ADDR_VAR 0 8
48744: PUSH
48745: DOUBLE
48746: LD_INT 1
48748: DEC
48749: ST_TO_ADDR
48750: LD_INT 3
48752: PUSH
48753: FOR_TO
48754: IFFALSE 48783
// AddResourceType ( base , i , sources [ i ] ) ;
48756: LD_VAR 0 15
48760: PPUSH
48761: LD_VAR 0 8
48765: PPUSH
48766: LD_VAR 0 5
48770: PUSH
48771: LD_VAR 0 8
48775: ARRAY
48776: PPUSH
48777: CALL_OW 276
48781: GO 48753
48783: POP
48784: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48785: LD_ADDR_VAR 0 18
48789: PUSH
48790: LD_VAR 0 15
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_INT 1
48802: PPUSH
48803: CALL 48046 0 3
48807: ST_TO_ADDR
// InitHc ;
48808: CALL_OW 19
// InitUc ;
48812: CALL_OW 18
// uc_side := side ;
48816: LD_ADDR_OWVAR 20
48820: PUSH
48821: LD_VAR 0 16
48825: ST_TO_ADDR
// uc_nation := nation ;
48826: LD_ADDR_OWVAR 21
48830: PUSH
48831: LD_VAR 0 17
48835: ST_TO_ADDR
// if buildings then
48836: LD_VAR 0 18
48840: IFFALSE 50162
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48842: LD_ADDR_VAR 0 19
48846: PUSH
48847: LD_VAR 0 18
48851: PPUSH
48852: LD_INT 2
48854: PUSH
48855: LD_INT 30
48857: PUSH
48858: LD_INT 29
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 30
48867: PUSH
48868: LD_INT 30
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: PPUSH
48880: CALL_OW 72
48884: ST_TO_ADDR
// if tmp then
48885: LD_VAR 0 19
48889: IFFALSE 48937
// for i in tmp do
48891: LD_ADDR_VAR 0 8
48895: PUSH
48896: LD_VAR 0 19
48900: PUSH
48901: FOR_IN
48902: IFFALSE 48935
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48904: LD_VAR 0 8
48908: PPUSH
48909: CALL_OW 250
48913: PPUSH
48914: LD_VAR 0 8
48918: PPUSH
48919: CALL_OW 251
48923: PPUSH
48924: LD_VAR 0 16
48928: PPUSH
48929: CALL_OW 441
48933: GO 48901
48935: POP
48936: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48937: LD_VAR 0 18
48941: PPUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 30
48947: PUSH
48948: LD_INT 32
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 30
48957: PUSH
48958: LD_INT 33
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: PPUSH
48970: CALL_OW 72
48974: IFFALSE 49062
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48976: LD_ADDR_VAR 0 8
48980: PUSH
48981: LD_VAR 0 18
48985: PPUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 30
48991: PUSH
48992: LD_INT 32
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 30
49001: PUSH
49002: LD_INT 33
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: PPUSH
49014: CALL_OW 72
49018: PUSH
49019: FOR_IN
49020: IFFALSE 49060
// begin if not GetBWeapon ( i ) then
49022: LD_VAR 0 8
49026: PPUSH
49027: CALL_OW 269
49031: NOT
49032: IFFALSE 49058
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49034: LD_VAR 0 8
49038: PPUSH
49039: LD_VAR 0 8
49043: PPUSH
49044: LD_VAR 0 2
49048: PPUSH
49049: CALL 50308 0 2
49053: PPUSH
49054: CALL_OW 431
// end ;
49058: GO 49019
49060: POP
49061: POP
// end ; for i = 1 to personel do
49062: LD_ADDR_VAR 0 8
49066: PUSH
49067: DOUBLE
49068: LD_INT 1
49070: DEC
49071: ST_TO_ADDR
49072: LD_VAR 0 6
49076: PUSH
49077: FOR_TO
49078: IFFALSE 50142
// begin if i > 4 then
49080: LD_VAR 0 8
49084: PUSH
49085: LD_INT 4
49087: GREATER
49088: IFFALSE 49092
// break ;
49090: GO 50142
// case i of 1 :
49092: LD_VAR 0 8
49096: PUSH
49097: LD_INT 1
49099: DOUBLE
49100: EQUAL
49101: IFTRUE 49105
49103: GO 49185
49105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49106: LD_ADDR_VAR 0 12
49110: PUSH
49111: LD_VAR 0 18
49115: PPUSH
49116: LD_INT 22
49118: PUSH
49119: LD_VAR 0 16
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 58
49130: PUSH
49131: EMPTY
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 30
49139: PUSH
49140: LD_INT 32
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 30
49149: PUSH
49150: LD_INT 4
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 30
49159: PUSH
49160: LD_INT 5
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: PPUSH
49178: CALL_OW 72
49182: ST_TO_ADDR
49183: GO 49407
49185: LD_INT 2
49187: DOUBLE
49188: EQUAL
49189: IFTRUE 49193
49191: GO 49255
49193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49194: LD_ADDR_VAR 0 12
49198: PUSH
49199: LD_VAR 0 18
49203: PPUSH
49204: LD_INT 22
49206: PUSH
49207: LD_VAR 0 16
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 30
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 30
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PPUSH
49248: CALL_OW 72
49252: ST_TO_ADDR
49253: GO 49407
49255: LD_INT 3
49257: DOUBLE
49258: EQUAL
49259: IFTRUE 49263
49261: GO 49325
49263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49264: LD_ADDR_VAR 0 12
49268: PUSH
49269: LD_VAR 0 18
49273: PPUSH
49274: LD_INT 22
49276: PUSH
49277: LD_VAR 0 16
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 30
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 30
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PPUSH
49318: CALL_OW 72
49322: ST_TO_ADDR
49323: GO 49407
49325: LD_INT 4
49327: DOUBLE
49328: EQUAL
49329: IFTRUE 49333
49331: GO 49406
49333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49334: LD_ADDR_VAR 0 12
49338: PUSH
49339: LD_VAR 0 18
49343: PPUSH
49344: LD_INT 22
49346: PUSH
49347: LD_VAR 0 16
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 30
49361: PUSH
49362: LD_INT 6
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 30
49371: PUSH
49372: LD_INT 7
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 30
49381: PUSH
49382: LD_INT 8
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PPUSH
49399: CALL_OW 72
49403: ST_TO_ADDR
49404: GO 49407
49406: POP
// if i = 1 then
49407: LD_VAR 0 8
49411: PUSH
49412: LD_INT 1
49414: EQUAL
49415: IFFALSE 49526
// begin tmp := [ ] ;
49417: LD_ADDR_VAR 0 19
49421: PUSH
49422: EMPTY
49423: ST_TO_ADDR
// for j in f do
49424: LD_ADDR_VAR 0 9
49428: PUSH
49429: LD_VAR 0 12
49433: PUSH
49434: FOR_IN
49435: IFFALSE 49508
// if GetBType ( j ) = b_bunker then
49437: LD_VAR 0 9
49441: PPUSH
49442: CALL_OW 266
49446: PUSH
49447: LD_INT 32
49449: EQUAL
49450: IFFALSE 49477
// tmp := Insert ( tmp , 1 , j ) else
49452: LD_ADDR_VAR 0 19
49456: PUSH
49457: LD_VAR 0 19
49461: PPUSH
49462: LD_INT 1
49464: PPUSH
49465: LD_VAR 0 9
49469: PPUSH
49470: CALL_OW 2
49474: ST_TO_ADDR
49475: GO 49506
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49477: LD_ADDR_VAR 0 19
49481: PUSH
49482: LD_VAR 0 19
49486: PPUSH
49487: LD_VAR 0 19
49491: PUSH
49492: LD_INT 1
49494: PLUS
49495: PPUSH
49496: LD_VAR 0 9
49500: PPUSH
49501: CALL_OW 2
49505: ST_TO_ADDR
49506: GO 49434
49508: POP
49509: POP
// if tmp then
49510: LD_VAR 0 19
49514: IFFALSE 49526
// f := tmp ;
49516: LD_ADDR_VAR 0 12
49520: PUSH
49521: LD_VAR 0 19
49525: ST_TO_ADDR
// end ; x := personel [ i ] ;
49526: LD_ADDR_VAR 0 13
49530: PUSH
49531: LD_VAR 0 6
49535: PUSH
49536: LD_VAR 0 8
49540: ARRAY
49541: ST_TO_ADDR
// if x = - 1 then
49542: LD_VAR 0 13
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: EQUAL
49551: IFFALSE 49760
// begin for j in f do
49553: LD_ADDR_VAR 0 9
49557: PUSH
49558: LD_VAR 0 12
49562: PUSH
49563: FOR_IN
49564: IFFALSE 49756
// repeat InitHc ;
49566: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49570: LD_VAR 0 9
49574: PPUSH
49575: CALL_OW 266
49579: PUSH
49580: LD_INT 5
49582: EQUAL
49583: IFFALSE 49653
// begin if UnitsInside ( j ) < 3 then
49585: LD_VAR 0 9
49589: PPUSH
49590: CALL_OW 313
49594: PUSH
49595: LD_INT 3
49597: LESS
49598: IFFALSE 49634
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49600: LD_INT 0
49602: PPUSH
49603: LD_INT 5
49605: PUSH
49606: LD_INT 8
49608: PUSH
49609: LD_INT 9
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: PUSH
49617: LD_VAR 0 17
49621: ARRAY
49622: PPUSH
49623: LD_VAR 0 4
49627: PPUSH
49628: CALL_OW 380
49632: GO 49651
// PrepareHuman ( false , i , skill ) ;
49634: LD_INT 0
49636: PPUSH
49637: LD_VAR 0 8
49641: PPUSH
49642: LD_VAR 0 4
49646: PPUSH
49647: CALL_OW 380
// end else
49651: GO 49670
// PrepareHuman ( false , i , skill ) ;
49653: LD_INT 0
49655: PPUSH
49656: LD_VAR 0 8
49660: PPUSH
49661: LD_VAR 0 4
49665: PPUSH
49666: CALL_OW 380
// un := CreateHuman ;
49670: LD_ADDR_VAR 0 14
49674: PUSH
49675: CALL_OW 44
49679: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49680: LD_ADDR_VAR 0 7
49684: PUSH
49685: LD_VAR 0 7
49689: PPUSH
49690: LD_INT 1
49692: PPUSH
49693: LD_VAR 0 14
49697: PPUSH
49698: CALL_OW 2
49702: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49703: LD_VAR 0 14
49707: PPUSH
49708: LD_VAR 0 9
49712: PPUSH
49713: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49717: LD_VAR 0 9
49721: PPUSH
49722: CALL_OW 313
49726: PUSH
49727: LD_INT 6
49729: EQUAL
49730: PUSH
49731: LD_VAR 0 9
49735: PPUSH
49736: CALL_OW 266
49740: PUSH
49741: LD_INT 32
49743: PUSH
49744: LD_INT 31
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: IN
49751: OR
49752: IFFALSE 49566
49754: GO 49563
49756: POP
49757: POP
// end else
49758: GO 50140
// for j = 1 to x do
49760: LD_ADDR_VAR 0 9
49764: PUSH
49765: DOUBLE
49766: LD_INT 1
49768: DEC
49769: ST_TO_ADDR
49770: LD_VAR 0 13
49774: PUSH
49775: FOR_TO
49776: IFFALSE 50138
// begin InitHc ;
49778: CALL_OW 19
// if not f then
49782: LD_VAR 0 12
49786: NOT
49787: IFFALSE 49876
// begin PrepareHuman ( false , i , skill ) ;
49789: LD_INT 0
49791: PPUSH
49792: LD_VAR 0 8
49796: PPUSH
49797: LD_VAR 0 4
49801: PPUSH
49802: CALL_OW 380
// un := CreateHuman ;
49806: LD_ADDR_VAR 0 14
49810: PUSH
49811: CALL_OW 44
49815: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49816: LD_ADDR_VAR 0 7
49820: PUSH
49821: LD_VAR 0 7
49825: PPUSH
49826: LD_INT 1
49828: PPUSH
49829: LD_VAR 0 14
49833: PPUSH
49834: CALL_OW 2
49838: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49839: LD_VAR 0 14
49843: PPUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 250
49853: PPUSH
49854: LD_VAR 0 1
49858: PPUSH
49859: CALL_OW 251
49863: PPUSH
49864: LD_INT 10
49866: PPUSH
49867: LD_INT 0
49869: PPUSH
49870: CALL_OW 50
// continue ;
49874: GO 49775
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49876: LD_VAR 0 12
49880: PUSH
49881: LD_INT 1
49883: ARRAY
49884: PPUSH
49885: CALL_OW 313
49889: PUSH
49890: LD_VAR 0 12
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PPUSH
49899: CALL_OW 266
49903: PUSH
49904: LD_INT 32
49906: PUSH
49907: LD_INT 31
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: IN
49914: AND
49915: PUSH
49916: LD_VAR 0 12
49920: PUSH
49921: LD_INT 1
49923: ARRAY
49924: PPUSH
49925: CALL_OW 313
49929: PUSH
49930: LD_INT 6
49932: EQUAL
49933: OR
49934: IFFALSE 49954
// f := Delete ( f , 1 ) ;
49936: LD_ADDR_VAR 0 12
49940: PUSH
49941: LD_VAR 0 12
49945: PPUSH
49946: LD_INT 1
49948: PPUSH
49949: CALL_OW 3
49953: ST_TO_ADDR
// if not f then
49954: LD_VAR 0 12
49958: NOT
49959: IFFALSE 49977
// begin x := x + 2 ;
49961: LD_ADDR_VAR 0 13
49965: PUSH
49966: LD_VAR 0 13
49970: PUSH
49971: LD_INT 2
49973: PLUS
49974: ST_TO_ADDR
// continue ;
49975: GO 49775
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49977: LD_VAR 0 12
49981: PUSH
49982: LD_INT 1
49984: ARRAY
49985: PPUSH
49986: CALL_OW 266
49990: PUSH
49991: LD_INT 5
49993: EQUAL
49994: IFFALSE 50068
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49996: LD_VAR 0 12
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: CALL_OW 313
50009: PUSH
50010: LD_INT 3
50012: LESS
50013: IFFALSE 50049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50015: LD_INT 0
50017: PPUSH
50018: LD_INT 5
50020: PUSH
50021: LD_INT 8
50023: PUSH
50024: LD_INT 9
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: PUSH
50032: LD_VAR 0 17
50036: ARRAY
50037: PPUSH
50038: LD_VAR 0 4
50042: PPUSH
50043: CALL_OW 380
50047: GO 50066
// PrepareHuman ( false , i , skill ) ;
50049: LD_INT 0
50051: PPUSH
50052: LD_VAR 0 8
50056: PPUSH
50057: LD_VAR 0 4
50061: PPUSH
50062: CALL_OW 380
// end else
50066: GO 50085
// PrepareHuman ( false , i , skill ) ;
50068: LD_INT 0
50070: PPUSH
50071: LD_VAR 0 8
50075: PPUSH
50076: LD_VAR 0 4
50080: PPUSH
50081: CALL_OW 380
// un := CreateHuman ;
50085: LD_ADDR_VAR 0 14
50089: PUSH
50090: CALL_OW 44
50094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50095: LD_ADDR_VAR 0 7
50099: PUSH
50100: LD_VAR 0 7
50104: PPUSH
50105: LD_INT 1
50107: PPUSH
50108: LD_VAR 0 14
50112: PPUSH
50113: CALL_OW 2
50117: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50118: LD_VAR 0 14
50122: PPUSH
50123: LD_VAR 0 12
50127: PUSH
50128: LD_INT 1
50130: ARRAY
50131: PPUSH
50132: CALL_OW 52
// end ;
50136: GO 49775
50138: POP
50139: POP
// end ;
50140: GO 49077
50142: POP
50143: POP
// result := result ^ buildings ;
50144: LD_ADDR_VAR 0 7
50148: PUSH
50149: LD_VAR 0 7
50153: PUSH
50154: LD_VAR 0 18
50158: ADD
50159: ST_TO_ADDR
// end else
50160: GO 50303
// begin for i = 1 to personel do
50162: LD_ADDR_VAR 0 8
50166: PUSH
50167: DOUBLE
50168: LD_INT 1
50170: DEC
50171: ST_TO_ADDR
50172: LD_VAR 0 6
50176: PUSH
50177: FOR_TO
50178: IFFALSE 50301
// begin if i > 4 then
50180: LD_VAR 0 8
50184: PUSH
50185: LD_INT 4
50187: GREATER
50188: IFFALSE 50192
// break ;
50190: GO 50301
// x := personel [ i ] ;
50192: LD_ADDR_VAR 0 13
50196: PUSH
50197: LD_VAR 0 6
50201: PUSH
50202: LD_VAR 0 8
50206: ARRAY
50207: ST_TO_ADDR
// if x = - 1 then
50208: LD_VAR 0 13
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: EQUAL
50217: IFFALSE 50221
// continue ;
50219: GO 50177
// PrepareHuman ( false , i , skill ) ;
50221: LD_INT 0
50223: PPUSH
50224: LD_VAR 0 8
50228: PPUSH
50229: LD_VAR 0 4
50233: PPUSH
50234: CALL_OW 380
// un := CreateHuman ;
50238: LD_ADDR_VAR 0 14
50242: PUSH
50243: CALL_OW 44
50247: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50248: LD_VAR 0 14
50252: PPUSH
50253: LD_VAR 0 1
50257: PPUSH
50258: CALL_OW 250
50262: PPUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL_OW 251
50272: PPUSH
50273: LD_INT 10
50275: PPUSH
50276: LD_INT 0
50278: PPUSH
50279: CALL_OW 50
// result := result ^ un ;
50283: LD_ADDR_VAR 0 7
50287: PUSH
50288: LD_VAR 0 7
50292: PUSH
50293: LD_VAR 0 14
50297: ADD
50298: ST_TO_ADDR
// end ;
50299: GO 50177
50301: POP
50302: POP
// end ; end ;
50303: LD_VAR 0 7
50307: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50308: LD_INT 0
50310: PPUSH
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
50324: PPUSH
50325: PPUSH
// result := false ;
50326: LD_ADDR_VAR 0 3
50330: PUSH
50331: LD_INT 0
50333: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50334: LD_VAR 0 1
50338: NOT
50339: PUSH
50340: LD_VAR 0 1
50344: PPUSH
50345: CALL_OW 266
50349: PUSH
50350: LD_INT 32
50352: PUSH
50353: LD_INT 33
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: IN
50360: NOT
50361: OR
50362: IFFALSE 50366
// exit ;
50364: GO 51475
// nat := GetNation ( tower ) ;
50366: LD_ADDR_VAR 0 12
50370: PUSH
50371: LD_VAR 0 1
50375: PPUSH
50376: CALL_OW 248
50380: ST_TO_ADDR
// side := GetSide ( tower ) ;
50381: LD_ADDR_VAR 0 16
50385: PUSH
50386: LD_VAR 0 1
50390: PPUSH
50391: CALL_OW 255
50395: ST_TO_ADDR
// x := GetX ( tower ) ;
50396: LD_ADDR_VAR 0 10
50400: PUSH
50401: LD_VAR 0 1
50405: PPUSH
50406: CALL_OW 250
50410: ST_TO_ADDR
// y := GetY ( tower ) ;
50411: LD_ADDR_VAR 0 11
50415: PUSH
50416: LD_VAR 0 1
50420: PPUSH
50421: CALL_OW 251
50425: ST_TO_ADDR
// if not x or not y then
50426: LD_VAR 0 10
50430: NOT
50431: PUSH
50432: LD_VAR 0 11
50436: NOT
50437: OR
50438: IFFALSE 50442
// exit ;
50440: GO 51475
// weapon := 0 ;
50442: LD_ADDR_VAR 0 18
50446: PUSH
50447: LD_INT 0
50449: ST_TO_ADDR
// fac_list := [ ] ;
50450: LD_ADDR_VAR 0 17
50454: PUSH
50455: EMPTY
50456: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50457: LD_ADDR_VAR 0 6
50461: PUSH
50462: LD_VAR 0 1
50466: PPUSH
50467: CALL_OW 274
50471: PPUSH
50472: LD_VAR 0 2
50476: PPUSH
50477: LD_INT 0
50479: PPUSH
50480: CALL 48046 0 3
50484: PPUSH
50485: LD_INT 30
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PPUSH
50495: CALL_OW 72
50499: ST_TO_ADDR
// if not factories then
50500: LD_VAR 0 6
50504: NOT
50505: IFFALSE 50509
// exit ;
50507: GO 51475
// for i in factories do
50509: LD_ADDR_VAR 0 8
50513: PUSH
50514: LD_VAR 0 6
50518: PUSH
50519: FOR_IN
50520: IFFALSE 50545
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50522: LD_ADDR_VAR 0 17
50526: PUSH
50527: LD_VAR 0 17
50531: PUSH
50532: LD_VAR 0 8
50536: PPUSH
50537: CALL_OW 478
50541: UNION
50542: ST_TO_ADDR
50543: GO 50519
50545: POP
50546: POP
// if not fac_list then
50547: LD_VAR 0 17
50551: NOT
50552: IFFALSE 50556
// exit ;
50554: GO 51475
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50556: LD_ADDR_VAR 0 5
50560: PUSH
50561: LD_INT 4
50563: PUSH
50564: LD_INT 5
50566: PUSH
50567: LD_INT 9
50569: PUSH
50570: LD_INT 10
50572: PUSH
50573: LD_INT 6
50575: PUSH
50576: LD_INT 7
50578: PUSH
50579: LD_INT 11
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 27
50593: PUSH
50594: LD_INT 28
50596: PUSH
50597: LD_INT 26
50599: PUSH
50600: LD_INT 30
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 43
50611: PUSH
50612: LD_INT 44
50614: PUSH
50615: LD_INT 46
50617: PUSH
50618: LD_INT 45
50620: PUSH
50621: LD_INT 47
50623: PUSH
50624: LD_INT 49
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: PUSH
50640: LD_VAR 0 12
50644: ARRAY
50645: ST_TO_ADDR
// list := list isect fac_list ;
50646: LD_ADDR_VAR 0 5
50650: PUSH
50651: LD_VAR 0 5
50655: PUSH
50656: LD_VAR 0 17
50660: ISECT
50661: ST_TO_ADDR
// if not list then
50662: LD_VAR 0 5
50666: NOT
50667: IFFALSE 50671
// exit ;
50669: GO 51475
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50671: LD_VAR 0 12
50675: PUSH
50676: LD_INT 3
50678: EQUAL
50679: PUSH
50680: LD_INT 49
50682: PUSH
50683: LD_VAR 0 5
50687: IN
50688: AND
50689: PUSH
50690: LD_INT 31
50692: PPUSH
50693: LD_VAR 0 16
50697: PPUSH
50698: CALL_OW 321
50702: PUSH
50703: LD_INT 2
50705: EQUAL
50706: AND
50707: IFFALSE 50767
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50709: LD_INT 22
50711: PUSH
50712: LD_VAR 0 16
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 35
50723: PUSH
50724: LD_INT 49
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 91
50733: PUSH
50734: LD_VAR 0 1
50738: PUSH
50739: LD_INT 10
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: PPUSH
50752: CALL_OW 69
50756: NOT
50757: IFFALSE 50767
// weapon := ru_time_lapser ;
50759: LD_ADDR_VAR 0 18
50763: PUSH
50764: LD_INT 49
50766: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50767: LD_VAR 0 12
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: IN
50782: PUSH
50783: LD_INT 11
50785: PUSH
50786: LD_VAR 0 5
50790: IN
50791: PUSH
50792: LD_INT 30
50794: PUSH
50795: LD_VAR 0 5
50799: IN
50800: OR
50801: AND
50802: PUSH
50803: LD_INT 6
50805: PPUSH
50806: LD_VAR 0 16
50810: PPUSH
50811: CALL_OW 321
50815: PUSH
50816: LD_INT 2
50818: EQUAL
50819: AND
50820: IFFALSE 50985
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50822: LD_INT 22
50824: PUSH
50825: LD_VAR 0 16
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 35
50839: PUSH
50840: LD_INT 11
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 35
50849: PUSH
50850: LD_INT 30
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 91
50864: PUSH
50865: LD_VAR 0 1
50869: PUSH
50870: LD_INT 18
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: PPUSH
50883: CALL_OW 69
50887: NOT
50888: PUSH
50889: LD_INT 22
50891: PUSH
50892: LD_VAR 0 16
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 30
50906: PUSH
50907: LD_INT 32
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 30
50916: PUSH
50917: LD_INT 33
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 91
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_INT 12
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: PPUSH
50953: CALL_OW 69
50957: PUSH
50958: LD_INT 2
50960: GREATER
50961: AND
50962: IFFALSE 50985
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50964: LD_ADDR_VAR 0 18
50968: PUSH
50969: LD_INT 11
50971: PUSH
50972: LD_INT 30
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_VAR 0 12
50983: ARRAY
50984: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50985: LD_VAR 0 18
50989: NOT
50990: PUSH
50991: LD_INT 40
50993: PPUSH
50994: LD_VAR 0 16
50998: PPUSH
50999: CALL_OW 321
51003: PUSH
51004: LD_INT 2
51006: EQUAL
51007: AND
51008: PUSH
51009: LD_INT 7
51011: PUSH
51012: LD_VAR 0 5
51016: IN
51017: PUSH
51018: LD_INT 28
51020: PUSH
51021: LD_VAR 0 5
51025: IN
51026: OR
51027: PUSH
51028: LD_INT 45
51030: PUSH
51031: LD_VAR 0 5
51035: IN
51036: OR
51037: AND
51038: IFFALSE 51292
// begin hex := GetHexInfo ( x , y ) ;
51040: LD_ADDR_VAR 0 4
51044: PUSH
51045: LD_VAR 0 10
51049: PPUSH
51050: LD_VAR 0 11
51054: PPUSH
51055: CALL_OW 546
51059: ST_TO_ADDR
// if hex [ 1 ] then
51060: LD_VAR 0 4
51064: PUSH
51065: LD_INT 1
51067: ARRAY
51068: IFFALSE 51072
// exit ;
51070: GO 51475
// height := hex [ 2 ] ;
51072: LD_ADDR_VAR 0 15
51076: PUSH
51077: LD_VAR 0 4
51081: PUSH
51082: LD_INT 2
51084: ARRAY
51085: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51086: LD_ADDR_VAR 0 14
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: LD_INT 5
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: ST_TO_ADDR
// for i in tmp do
51109: LD_ADDR_VAR 0 8
51113: PUSH
51114: LD_VAR 0 14
51118: PUSH
51119: FOR_IN
51120: IFFALSE 51290
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51122: LD_ADDR_VAR 0 9
51126: PUSH
51127: LD_VAR 0 10
51131: PPUSH
51132: LD_VAR 0 8
51136: PPUSH
51137: LD_INT 5
51139: PPUSH
51140: CALL_OW 272
51144: PUSH
51145: LD_VAR 0 11
51149: PPUSH
51150: LD_VAR 0 8
51154: PPUSH
51155: LD_INT 5
51157: PPUSH
51158: CALL_OW 273
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51167: LD_VAR 0 9
51171: PUSH
51172: LD_INT 1
51174: ARRAY
51175: PPUSH
51176: LD_VAR 0 9
51180: PUSH
51181: LD_INT 2
51183: ARRAY
51184: PPUSH
51185: CALL_OW 488
51189: IFFALSE 51288
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51191: LD_ADDR_VAR 0 4
51195: PUSH
51196: LD_VAR 0 9
51200: PUSH
51201: LD_INT 1
51203: ARRAY
51204: PPUSH
51205: LD_VAR 0 9
51209: PUSH
51210: LD_INT 2
51212: ARRAY
51213: PPUSH
51214: CALL_OW 546
51218: ST_TO_ADDR
// if hex [ 1 ] then
51219: LD_VAR 0 4
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: IFFALSE 51231
// continue ;
51229: GO 51119
// h := hex [ 2 ] ;
51231: LD_ADDR_VAR 0 13
51235: PUSH
51236: LD_VAR 0 4
51240: PUSH
51241: LD_INT 2
51243: ARRAY
51244: ST_TO_ADDR
// if h + 7 < height then
51245: LD_VAR 0 13
51249: PUSH
51250: LD_INT 7
51252: PLUS
51253: PUSH
51254: LD_VAR 0 15
51258: LESS
51259: IFFALSE 51288
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51261: LD_ADDR_VAR 0 18
51265: PUSH
51266: LD_INT 7
51268: PUSH
51269: LD_INT 28
51271: PUSH
51272: LD_INT 45
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: LD_VAR 0 12
51284: ARRAY
51285: ST_TO_ADDR
// break ;
51286: GO 51290
// end ; end ; end ;
51288: GO 51119
51290: POP
51291: POP
// end ; if not weapon then
51292: LD_VAR 0 18
51296: NOT
51297: IFFALSE 51357
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51299: LD_ADDR_VAR 0 5
51303: PUSH
51304: LD_VAR 0 5
51308: PUSH
51309: LD_INT 11
51311: PUSH
51312: LD_INT 30
51314: PUSH
51315: LD_INT 49
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: DIFF
51323: ST_TO_ADDR
// if not list then
51324: LD_VAR 0 5
51328: NOT
51329: IFFALSE 51333
// exit ;
51331: GO 51475
// weapon := list [ rand ( 1 , list ) ] ;
51333: LD_ADDR_VAR 0 18
51337: PUSH
51338: LD_VAR 0 5
51342: PUSH
51343: LD_INT 1
51345: PPUSH
51346: LD_VAR 0 5
51350: PPUSH
51351: CALL_OW 12
51355: ARRAY
51356: ST_TO_ADDR
// end ; if weapon then
51357: LD_VAR 0 18
51361: IFFALSE 51475
// begin tmp := CostOfWeapon ( weapon ) ;
51363: LD_ADDR_VAR 0 14
51367: PUSH
51368: LD_VAR 0 18
51372: PPUSH
51373: CALL_OW 451
51377: ST_TO_ADDR
// j := GetBase ( tower ) ;
51378: LD_ADDR_VAR 0 9
51382: PUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 274
51392: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51393: LD_VAR 0 9
51397: PPUSH
51398: LD_INT 1
51400: PPUSH
51401: CALL_OW 275
51405: PUSH
51406: LD_VAR 0 14
51410: PUSH
51411: LD_INT 1
51413: ARRAY
51414: GREATEREQUAL
51415: PUSH
51416: LD_VAR 0 9
51420: PPUSH
51421: LD_INT 2
51423: PPUSH
51424: CALL_OW 275
51428: PUSH
51429: LD_VAR 0 14
51433: PUSH
51434: LD_INT 2
51436: ARRAY
51437: GREATEREQUAL
51438: AND
51439: PUSH
51440: LD_VAR 0 9
51444: PPUSH
51445: LD_INT 3
51447: PPUSH
51448: CALL_OW 275
51452: PUSH
51453: LD_VAR 0 14
51457: PUSH
51458: LD_INT 3
51460: ARRAY
51461: GREATEREQUAL
51462: AND
51463: IFFALSE 51475
// result := weapon ;
51465: LD_ADDR_VAR 0 3
51469: PUSH
51470: LD_VAR 0 18
51474: ST_TO_ADDR
// end ; end ;
51475: LD_VAR 0 3
51479: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51480: LD_INT 0
51482: PPUSH
51483: PPUSH
// result := true ;
51484: LD_ADDR_VAR 0 3
51488: PUSH
51489: LD_INT 1
51491: ST_TO_ADDR
// if array1 = array2 then
51492: LD_VAR 0 1
51496: PUSH
51497: LD_VAR 0 2
51501: EQUAL
51502: IFFALSE 51562
// begin for i = 1 to array1 do
51504: LD_ADDR_VAR 0 4
51508: PUSH
51509: DOUBLE
51510: LD_INT 1
51512: DEC
51513: ST_TO_ADDR
51514: LD_VAR 0 1
51518: PUSH
51519: FOR_TO
51520: IFFALSE 51558
// if array1 [ i ] <> array2 [ i ] then
51522: LD_VAR 0 1
51526: PUSH
51527: LD_VAR 0 4
51531: ARRAY
51532: PUSH
51533: LD_VAR 0 2
51537: PUSH
51538: LD_VAR 0 4
51542: ARRAY
51543: NONEQUAL
51544: IFFALSE 51556
// begin result := false ;
51546: LD_ADDR_VAR 0 3
51550: PUSH
51551: LD_INT 0
51553: ST_TO_ADDR
// break ;
51554: GO 51558
// end ;
51556: GO 51519
51558: POP
51559: POP
// end else
51560: GO 51570
// result := false ;
51562: LD_ADDR_VAR 0 3
51566: PUSH
51567: LD_INT 0
51569: ST_TO_ADDR
// end ;
51570: LD_VAR 0 3
51574: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51575: LD_INT 0
51577: PPUSH
51578: PPUSH
// if not array1 or not array2 then
51579: LD_VAR 0 1
51583: NOT
51584: PUSH
51585: LD_VAR 0 2
51589: NOT
51590: OR
51591: IFFALSE 51595
// exit ;
51593: GO 51659
// result := true ;
51595: LD_ADDR_VAR 0 3
51599: PUSH
51600: LD_INT 1
51602: ST_TO_ADDR
// for i = 1 to array1 do
51603: LD_ADDR_VAR 0 4
51607: PUSH
51608: DOUBLE
51609: LD_INT 1
51611: DEC
51612: ST_TO_ADDR
51613: LD_VAR 0 1
51617: PUSH
51618: FOR_TO
51619: IFFALSE 51657
// if array1 [ i ] <> array2 [ i ] then
51621: LD_VAR 0 1
51625: PUSH
51626: LD_VAR 0 4
51630: ARRAY
51631: PUSH
51632: LD_VAR 0 2
51636: PUSH
51637: LD_VAR 0 4
51641: ARRAY
51642: NONEQUAL
51643: IFFALSE 51655
// begin result := false ;
51645: LD_ADDR_VAR 0 3
51649: PUSH
51650: LD_INT 0
51652: ST_TO_ADDR
// break ;
51653: GO 51657
// end ;
51655: GO 51618
51657: POP
51658: POP
// end ;
51659: LD_VAR 0 3
51663: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51664: LD_INT 0
51666: PPUSH
51667: PPUSH
51668: PPUSH
// pom := GetBase ( fac ) ;
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: LD_VAR 0 1
51678: PPUSH
51679: CALL_OW 274
51683: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51684: LD_ADDR_VAR 0 4
51688: PUSH
51689: LD_VAR 0 2
51693: PUSH
51694: LD_INT 1
51696: ARRAY
51697: PPUSH
51698: LD_VAR 0 2
51702: PUSH
51703: LD_INT 2
51705: ARRAY
51706: PPUSH
51707: LD_VAR 0 2
51711: PUSH
51712: LD_INT 3
51714: ARRAY
51715: PPUSH
51716: LD_VAR 0 2
51720: PUSH
51721: LD_INT 4
51723: ARRAY
51724: PPUSH
51725: CALL_OW 449
51729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51730: LD_ADDR_VAR 0 3
51734: PUSH
51735: LD_VAR 0 5
51739: PPUSH
51740: LD_INT 1
51742: PPUSH
51743: CALL_OW 275
51747: PUSH
51748: LD_VAR 0 4
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: GREATEREQUAL
51757: PUSH
51758: LD_VAR 0 5
51762: PPUSH
51763: LD_INT 2
51765: PPUSH
51766: CALL_OW 275
51770: PUSH
51771: LD_VAR 0 4
51775: PUSH
51776: LD_INT 2
51778: ARRAY
51779: GREATEREQUAL
51780: AND
51781: PUSH
51782: LD_VAR 0 5
51786: PPUSH
51787: LD_INT 3
51789: PPUSH
51790: CALL_OW 275
51794: PUSH
51795: LD_VAR 0 4
51799: PUSH
51800: LD_INT 3
51802: ARRAY
51803: GREATEREQUAL
51804: AND
51805: ST_TO_ADDR
// end ;
51806: LD_VAR 0 3
51810: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51811: LD_INT 0
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
// pom := GetBase ( building ) ;
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_VAR 0 1
51826: PPUSH
51827: CALL_OW 274
51831: ST_TO_ADDR
// if not pom then
51832: LD_VAR 0 3
51836: NOT
51837: IFFALSE 51841
// exit ;
51839: GO 52011
// btype := GetBType ( building ) ;
51841: LD_ADDR_VAR 0 5
51845: PUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: CALL_OW 266
51855: ST_TO_ADDR
// if btype = b_armoury then
51856: LD_VAR 0 5
51860: PUSH
51861: LD_INT 4
51863: EQUAL
51864: IFFALSE 51874
// btype := b_barracks ;
51866: LD_ADDR_VAR 0 5
51870: PUSH
51871: LD_INT 5
51873: ST_TO_ADDR
// if btype = b_depot then
51874: LD_VAR 0 5
51878: PUSH
51879: LD_INT 0
51881: EQUAL
51882: IFFALSE 51892
// btype := b_warehouse ;
51884: LD_ADDR_VAR 0 5
51888: PUSH
51889: LD_INT 1
51891: ST_TO_ADDR
// if btype = b_workshop then
51892: LD_VAR 0 5
51896: PUSH
51897: LD_INT 2
51899: EQUAL
51900: IFFALSE 51910
// btype := b_factory ;
51902: LD_ADDR_VAR 0 5
51906: PUSH
51907: LD_INT 3
51909: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51910: LD_ADDR_VAR 0 4
51914: PUSH
51915: LD_VAR 0 5
51919: PPUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: CALL_OW 248
51929: PPUSH
51930: CALL_OW 450
51934: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51935: LD_ADDR_VAR 0 2
51939: PUSH
51940: LD_VAR 0 3
51944: PPUSH
51945: LD_INT 1
51947: PPUSH
51948: CALL_OW 275
51952: PUSH
51953: LD_VAR 0 4
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: GREATEREQUAL
51962: PUSH
51963: LD_VAR 0 3
51967: PPUSH
51968: LD_INT 2
51970: PPUSH
51971: CALL_OW 275
51975: PUSH
51976: LD_VAR 0 4
51980: PUSH
51981: LD_INT 2
51983: ARRAY
51984: GREATEREQUAL
51985: AND
51986: PUSH
51987: LD_VAR 0 3
51991: PPUSH
51992: LD_INT 3
51994: PPUSH
51995: CALL_OW 275
51999: PUSH
52000: LD_VAR 0 4
52004: PUSH
52005: LD_INT 3
52007: ARRAY
52008: GREATEREQUAL
52009: AND
52010: ST_TO_ADDR
// end ;
52011: LD_VAR 0 2
52015: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52016: LD_INT 0
52018: PPUSH
52019: PPUSH
52020: PPUSH
// pom := GetBase ( building ) ;
52021: LD_ADDR_VAR 0 4
52025: PUSH
52026: LD_VAR 0 1
52030: PPUSH
52031: CALL_OW 274
52035: ST_TO_ADDR
// if not pom then
52036: LD_VAR 0 4
52040: NOT
52041: IFFALSE 52045
// exit ;
52043: GO 52146
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52045: LD_ADDR_VAR 0 5
52049: PUSH
52050: LD_VAR 0 2
52054: PPUSH
52055: LD_VAR 0 1
52059: PPUSH
52060: CALL_OW 248
52064: PPUSH
52065: CALL_OW 450
52069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52070: LD_ADDR_VAR 0 3
52074: PUSH
52075: LD_VAR 0 4
52079: PPUSH
52080: LD_INT 1
52082: PPUSH
52083: CALL_OW 275
52087: PUSH
52088: LD_VAR 0 5
52092: PUSH
52093: LD_INT 1
52095: ARRAY
52096: GREATEREQUAL
52097: PUSH
52098: LD_VAR 0 4
52102: PPUSH
52103: LD_INT 2
52105: PPUSH
52106: CALL_OW 275
52110: PUSH
52111: LD_VAR 0 5
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: GREATEREQUAL
52120: AND
52121: PUSH
52122: LD_VAR 0 4
52126: PPUSH
52127: LD_INT 3
52129: PPUSH
52130: CALL_OW 275
52134: PUSH
52135: LD_VAR 0 5
52139: PUSH
52140: LD_INT 3
52142: ARRAY
52143: GREATEREQUAL
52144: AND
52145: ST_TO_ADDR
// end ;
52146: LD_VAR 0 3
52150: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52151: LD_INT 0
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
// result := false ;
52164: LD_ADDR_VAR 0 8
52168: PUSH
52169: LD_INT 0
52171: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52172: LD_VAR 0 5
52176: NOT
52177: PUSH
52178: LD_VAR 0 1
52182: NOT
52183: OR
52184: PUSH
52185: LD_VAR 0 2
52189: NOT
52190: OR
52191: PUSH
52192: LD_VAR 0 3
52196: NOT
52197: OR
52198: IFFALSE 52202
// exit ;
52200: GO 53016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52202: LD_ADDR_VAR 0 14
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: LD_VAR 0 2
52216: PPUSH
52217: LD_VAR 0 3
52221: PPUSH
52222: LD_VAR 0 4
52226: PPUSH
52227: LD_VAR 0 5
52231: PUSH
52232: LD_INT 1
52234: ARRAY
52235: PPUSH
52236: CALL_OW 248
52240: PPUSH
52241: LD_INT 0
52243: PPUSH
52244: CALL 54253 0 6
52248: ST_TO_ADDR
// if not hexes then
52249: LD_VAR 0 14
52253: NOT
52254: IFFALSE 52258
// exit ;
52256: GO 53016
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52258: LD_ADDR_VAR 0 17
52262: PUSH
52263: LD_VAR 0 5
52267: PPUSH
52268: LD_INT 22
52270: PUSH
52271: LD_VAR 0 13
52275: PPUSH
52276: CALL_OW 255
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 30
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 30
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PPUSH
52317: CALL_OW 72
52321: ST_TO_ADDR
// for i = 1 to hexes do
52322: LD_ADDR_VAR 0 9
52326: PUSH
52327: DOUBLE
52328: LD_INT 1
52330: DEC
52331: ST_TO_ADDR
52332: LD_VAR 0 14
52336: PUSH
52337: FOR_TO
52338: IFFALSE 53014
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52340: LD_ADDR_VAR 0 13
52344: PUSH
52345: LD_VAR 0 14
52349: PUSH
52350: LD_VAR 0 9
52354: ARRAY
52355: PUSH
52356: LD_INT 1
52358: ARRAY
52359: PPUSH
52360: LD_VAR 0 14
52364: PUSH
52365: LD_VAR 0 9
52369: ARRAY
52370: PUSH
52371: LD_INT 2
52373: ARRAY
52374: PPUSH
52375: CALL_OW 428
52379: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52380: LD_VAR 0 14
52384: PUSH
52385: LD_VAR 0 9
52389: ARRAY
52390: PUSH
52391: LD_INT 1
52393: ARRAY
52394: PPUSH
52395: LD_VAR 0 14
52399: PUSH
52400: LD_VAR 0 9
52404: ARRAY
52405: PUSH
52406: LD_INT 2
52408: ARRAY
52409: PPUSH
52410: CALL_OW 351
52414: PUSH
52415: LD_VAR 0 14
52419: PUSH
52420: LD_VAR 0 9
52424: ARRAY
52425: PUSH
52426: LD_INT 1
52428: ARRAY
52429: PPUSH
52430: LD_VAR 0 14
52434: PUSH
52435: LD_VAR 0 9
52439: ARRAY
52440: PUSH
52441: LD_INT 2
52443: ARRAY
52444: PPUSH
52445: CALL_OW 488
52449: NOT
52450: OR
52451: PUSH
52452: LD_VAR 0 13
52456: PPUSH
52457: CALL_OW 247
52461: PUSH
52462: LD_INT 3
52464: EQUAL
52465: OR
52466: IFFALSE 52472
// exit ;
52468: POP
52469: POP
52470: GO 53016
// if not tmp then
52472: LD_VAR 0 13
52476: NOT
52477: IFFALSE 52481
// continue ;
52479: GO 52337
// result := true ;
52481: LD_ADDR_VAR 0 8
52485: PUSH
52486: LD_INT 1
52488: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52489: LD_VAR 0 6
52493: PUSH
52494: LD_VAR 0 13
52498: PPUSH
52499: CALL_OW 247
52503: PUSH
52504: LD_INT 2
52506: EQUAL
52507: AND
52508: PUSH
52509: LD_VAR 0 13
52513: PPUSH
52514: CALL_OW 263
52518: PUSH
52519: LD_INT 1
52521: EQUAL
52522: AND
52523: IFFALSE 52687
// begin if IsDrivenBy ( tmp ) then
52525: LD_VAR 0 13
52529: PPUSH
52530: CALL_OW 311
52534: IFFALSE 52538
// continue ;
52536: GO 52337
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52538: LD_VAR 0 6
52542: PPUSH
52543: LD_INT 3
52545: PUSH
52546: LD_INT 60
52548: PUSH
52549: EMPTY
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 55
52561: PUSH
52562: EMPTY
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PPUSH
52573: CALL_OW 72
52577: IFFALSE 52685
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52579: LD_ADDR_VAR 0 18
52583: PUSH
52584: LD_VAR 0 6
52588: PPUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 60
52594: PUSH
52595: EMPTY
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 55
52607: PUSH
52608: EMPTY
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PPUSH
52619: CALL_OW 72
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: ST_TO_ADDR
// if IsInUnit ( driver ) then
52628: LD_VAR 0 18
52632: PPUSH
52633: CALL_OW 310
52637: IFFALSE 52648
// ComExit ( driver ) ;
52639: LD_VAR 0 18
52643: PPUSH
52644: CALL 77381 0 1
// AddComEnterUnit ( driver , tmp ) ;
52648: LD_VAR 0 18
52652: PPUSH
52653: LD_VAR 0 13
52657: PPUSH
52658: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52662: LD_VAR 0 18
52666: PPUSH
52667: LD_VAR 0 7
52671: PPUSH
52672: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52676: LD_VAR 0 18
52680: PPUSH
52681: CALL_OW 181
// end ; continue ;
52685: GO 52337
// end ; if not cleaners or not tmp in cleaners then
52687: LD_VAR 0 6
52691: NOT
52692: PUSH
52693: LD_VAR 0 13
52697: PUSH
52698: LD_VAR 0 6
52702: IN
52703: NOT
52704: OR
52705: IFFALSE 53012
// begin if dep then
52707: LD_VAR 0 17
52711: IFFALSE 52847
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52713: LD_ADDR_VAR 0 16
52717: PUSH
52718: LD_VAR 0 17
52722: PUSH
52723: LD_INT 1
52725: ARRAY
52726: PPUSH
52727: CALL_OW 250
52731: PPUSH
52732: LD_VAR 0 17
52736: PUSH
52737: LD_INT 1
52739: ARRAY
52740: PPUSH
52741: CALL_OW 254
52745: PPUSH
52746: LD_INT 5
52748: PPUSH
52749: CALL_OW 272
52753: PUSH
52754: LD_VAR 0 17
52758: PUSH
52759: LD_INT 1
52761: ARRAY
52762: PPUSH
52763: CALL_OW 251
52767: PPUSH
52768: LD_VAR 0 17
52772: PUSH
52773: LD_INT 1
52775: ARRAY
52776: PPUSH
52777: CALL_OW 254
52781: PPUSH
52782: LD_INT 5
52784: PPUSH
52785: CALL_OW 273
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52794: LD_VAR 0 16
52798: PUSH
52799: LD_INT 1
52801: ARRAY
52802: PPUSH
52803: LD_VAR 0 16
52807: PUSH
52808: LD_INT 2
52810: ARRAY
52811: PPUSH
52812: CALL_OW 488
52816: IFFALSE 52847
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52818: LD_VAR 0 13
52822: PPUSH
52823: LD_VAR 0 16
52827: PUSH
52828: LD_INT 1
52830: ARRAY
52831: PPUSH
52832: LD_VAR 0 16
52836: PUSH
52837: LD_INT 2
52839: ARRAY
52840: PPUSH
52841: CALL_OW 111
// continue ;
52845: GO 52337
// end ; end ; r := GetDir ( tmp ) ;
52847: LD_ADDR_VAR 0 15
52851: PUSH
52852: LD_VAR 0 13
52856: PPUSH
52857: CALL_OW 254
52861: ST_TO_ADDR
// if r = 5 then
52862: LD_VAR 0 15
52866: PUSH
52867: LD_INT 5
52869: EQUAL
52870: IFFALSE 52880
// r := 0 ;
52872: LD_ADDR_VAR 0 15
52876: PUSH
52877: LD_INT 0
52879: ST_TO_ADDR
// for j = r to 5 do
52880: LD_ADDR_VAR 0 10
52884: PUSH
52885: DOUBLE
52886: LD_VAR 0 15
52890: DEC
52891: ST_TO_ADDR
52892: LD_INT 5
52894: PUSH
52895: FOR_TO
52896: IFFALSE 53010
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52898: LD_ADDR_VAR 0 11
52902: PUSH
52903: LD_VAR 0 13
52907: PPUSH
52908: CALL_OW 250
52912: PPUSH
52913: LD_VAR 0 10
52917: PPUSH
52918: LD_INT 2
52920: PPUSH
52921: CALL_OW 272
52925: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52926: LD_ADDR_VAR 0 12
52930: PUSH
52931: LD_VAR 0 13
52935: PPUSH
52936: CALL_OW 251
52940: PPUSH
52941: LD_VAR 0 10
52945: PPUSH
52946: LD_INT 2
52948: PPUSH
52949: CALL_OW 273
52953: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52954: LD_VAR 0 11
52958: PPUSH
52959: LD_VAR 0 12
52963: PPUSH
52964: CALL_OW 488
52968: PUSH
52969: LD_VAR 0 11
52973: PPUSH
52974: LD_VAR 0 12
52978: PPUSH
52979: CALL_OW 428
52983: NOT
52984: AND
52985: IFFALSE 53008
// begin ComMoveXY ( tmp , _x , _y ) ;
52987: LD_VAR 0 13
52991: PPUSH
52992: LD_VAR 0 11
52996: PPUSH
52997: LD_VAR 0 12
53001: PPUSH
53002: CALL_OW 111
// break ;
53006: GO 53010
// end ; end ;
53008: GO 52895
53010: POP
53011: POP
// end ; end ;
53012: GO 52337
53014: POP
53015: POP
// end ;
53016: LD_VAR 0 8
53020: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53021: LD_INT 0
53023: PPUSH
// result := true ;
53024: LD_ADDR_VAR 0 3
53028: PUSH
53029: LD_INT 1
53031: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 24
53039: DOUBLE
53040: EQUAL
53041: IFTRUE 53051
53043: LD_INT 33
53045: DOUBLE
53046: EQUAL
53047: IFTRUE 53051
53049: GO 53076
53051: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53052: LD_ADDR_VAR 0 3
53056: PUSH
53057: LD_INT 32
53059: PPUSH
53060: LD_VAR 0 1
53064: PPUSH
53065: CALL_OW 321
53069: PUSH
53070: LD_INT 2
53072: EQUAL
53073: ST_TO_ADDR
53074: GO 53396
53076: LD_INT 20
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53084
53082: GO 53109
53084: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53085: LD_ADDR_VAR 0 3
53089: PUSH
53090: LD_INT 6
53092: PPUSH
53093: LD_VAR 0 1
53097: PPUSH
53098: CALL_OW 321
53102: PUSH
53103: LD_INT 2
53105: EQUAL
53106: ST_TO_ADDR
53107: GO 53396
53109: LD_INT 22
53111: DOUBLE
53112: EQUAL
53113: IFTRUE 53123
53115: LD_INT 36
53117: DOUBLE
53118: EQUAL
53119: IFTRUE 53123
53121: GO 53148
53123: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_INT 15
53131: PPUSH
53132: LD_VAR 0 1
53136: PPUSH
53137: CALL_OW 321
53141: PUSH
53142: LD_INT 2
53144: EQUAL
53145: ST_TO_ADDR
53146: GO 53396
53148: LD_INT 30
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53181
53156: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53157: LD_ADDR_VAR 0 3
53161: PUSH
53162: LD_INT 20
53164: PPUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 321
53174: PUSH
53175: LD_INT 2
53177: EQUAL
53178: ST_TO_ADDR
53179: GO 53396
53181: LD_INT 28
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53195
53187: LD_INT 21
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53195
53193: GO 53220
53195: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53196: LD_ADDR_VAR 0 3
53200: PUSH
53201: LD_INT 21
53203: PPUSH
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL_OW 321
53213: PUSH
53214: LD_INT 2
53216: EQUAL
53217: ST_TO_ADDR
53218: GO 53396
53220: LD_INT 16
53222: DOUBLE
53223: EQUAL
53224: IFTRUE 53228
53226: GO 53255
53228: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53229: LD_ADDR_VAR 0 3
53233: PUSH
53234: LD_EXP 62
53238: PPUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 321
53248: PUSH
53249: LD_INT 2
53251: EQUAL
53252: ST_TO_ADDR
53253: GO 53396
53255: LD_INT 19
53257: DOUBLE
53258: EQUAL
53259: IFTRUE 53269
53261: LD_INT 23
53263: DOUBLE
53264: EQUAL
53265: IFTRUE 53269
53267: GO 53296
53269: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: LD_EXP 61
53279: PPUSH
53280: LD_VAR 0 1
53284: PPUSH
53285: CALL_OW 321
53289: PUSH
53290: LD_INT 2
53292: EQUAL
53293: ST_TO_ADDR
53294: GO 53396
53296: LD_INT 17
53298: DOUBLE
53299: EQUAL
53300: IFTRUE 53304
53302: GO 53329
53304: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53305: LD_ADDR_VAR 0 3
53309: PUSH
53310: LD_INT 39
53312: PPUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: CALL_OW 321
53322: PUSH
53323: LD_INT 2
53325: EQUAL
53326: ST_TO_ADDR
53327: GO 53396
53329: LD_INT 18
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53337
53335: GO 53362
53337: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_INT 40
53345: PPUSH
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 321
53355: PUSH
53356: LD_INT 2
53358: EQUAL
53359: ST_TO_ADDR
53360: GO 53396
53362: LD_INT 27
53364: DOUBLE
53365: EQUAL
53366: IFTRUE 53370
53368: GO 53395
53370: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_INT 35
53378: PPUSH
53379: LD_VAR 0 1
53383: PPUSH
53384: CALL_OW 321
53388: PUSH
53389: LD_INT 2
53391: EQUAL
53392: ST_TO_ADDR
53393: GO 53396
53395: POP
// end ;
53396: LD_VAR 0 3
53400: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53401: LD_INT 0
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
53408: PPUSH
53409: PPUSH
53410: PPUSH
53411: PPUSH
53412: PPUSH
53413: PPUSH
// result := false ;
53414: LD_ADDR_VAR 0 6
53418: PUSH
53419: LD_INT 0
53421: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53422: LD_VAR 0 1
53426: NOT
53427: PUSH
53428: LD_VAR 0 1
53432: PPUSH
53433: CALL_OW 266
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: IN
53448: NOT
53449: OR
53450: PUSH
53451: LD_VAR 0 2
53455: NOT
53456: OR
53457: PUSH
53458: LD_VAR 0 5
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 5
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: IN
53489: NOT
53490: OR
53491: PUSH
53492: LD_VAR 0 3
53496: PPUSH
53497: LD_VAR 0 4
53501: PPUSH
53502: CALL_OW 488
53506: NOT
53507: OR
53508: IFFALSE 53512
// exit ;
53510: GO 54248
// side := GetSide ( depot ) ;
53512: LD_ADDR_VAR 0 9
53516: PUSH
53517: LD_VAR 0 1
53521: PPUSH
53522: CALL_OW 255
53526: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53527: LD_VAR 0 9
53531: PPUSH
53532: LD_VAR 0 2
53536: PPUSH
53537: CALL 53021 0 2
53541: NOT
53542: IFFALSE 53546
// exit ;
53544: GO 54248
// pom := GetBase ( depot ) ;
53546: LD_ADDR_VAR 0 10
53550: PUSH
53551: LD_VAR 0 1
53555: PPUSH
53556: CALL_OW 274
53560: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53561: LD_ADDR_VAR 0 11
53565: PUSH
53566: LD_VAR 0 2
53570: PPUSH
53571: LD_VAR 0 1
53575: PPUSH
53576: CALL_OW 248
53580: PPUSH
53581: CALL_OW 450
53585: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53586: LD_VAR 0 10
53590: PPUSH
53591: LD_INT 1
53593: PPUSH
53594: CALL_OW 275
53598: PUSH
53599: LD_VAR 0 11
53603: PUSH
53604: LD_INT 1
53606: ARRAY
53607: GREATEREQUAL
53608: PUSH
53609: LD_VAR 0 10
53613: PPUSH
53614: LD_INT 2
53616: PPUSH
53617: CALL_OW 275
53621: PUSH
53622: LD_VAR 0 11
53626: PUSH
53627: LD_INT 2
53629: ARRAY
53630: GREATEREQUAL
53631: AND
53632: PUSH
53633: LD_VAR 0 10
53637: PPUSH
53638: LD_INT 3
53640: PPUSH
53641: CALL_OW 275
53645: PUSH
53646: LD_VAR 0 11
53650: PUSH
53651: LD_INT 3
53653: ARRAY
53654: GREATEREQUAL
53655: AND
53656: NOT
53657: IFFALSE 53661
// exit ;
53659: GO 54248
// if GetBType ( depot ) = b_depot then
53661: LD_VAR 0 1
53665: PPUSH
53666: CALL_OW 266
53670: PUSH
53671: LD_INT 0
53673: EQUAL
53674: IFFALSE 53686
// dist := 28 else
53676: LD_ADDR_VAR 0 14
53680: PUSH
53681: LD_INT 28
53683: ST_TO_ADDR
53684: GO 53694
// dist := 36 ;
53686: LD_ADDR_VAR 0 14
53690: PUSH
53691: LD_INT 36
53693: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53694: LD_VAR 0 1
53698: PPUSH
53699: LD_VAR 0 3
53703: PPUSH
53704: LD_VAR 0 4
53708: PPUSH
53709: CALL_OW 297
53713: PUSH
53714: LD_VAR 0 14
53718: GREATER
53719: IFFALSE 53723
// exit ;
53721: GO 54248
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53723: LD_ADDR_VAR 0 12
53727: PUSH
53728: LD_VAR 0 2
53732: PPUSH
53733: LD_VAR 0 3
53737: PPUSH
53738: LD_VAR 0 4
53742: PPUSH
53743: LD_VAR 0 5
53747: PPUSH
53748: LD_VAR 0 1
53752: PPUSH
53753: CALL_OW 248
53757: PPUSH
53758: LD_INT 0
53760: PPUSH
53761: CALL 54253 0 6
53765: ST_TO_ADDR
// if not hexes then
53766: LD_VAR 0 12
53770: NOT
53771: IFFALSE 53775
// exit ;
53773: GO 54248
// hex := GetHexInfo ( x , y ) ;
53775: LD_ADDR_VAR 0 15
53779: PUSH
53780: LD_VAR 0 3
53784: PPUSH
53785: LD_VAR 0 4
53789: PPUSH
53790: CALL_OW 546
53794: ST_TO_ADDR
// if hex [ 1 ] then
53795: LD_VAR 0 15
53799: PUSH
53800: LD_INT 1
53802: ARRAY
53803: IFFALSE 53807
// exit ;
53805: GO 54248
// height := hex [ 2 ] ;
53807: LD_ADDR_VAR 0 13
53811: PUSH
53812: LD_VAR 0 15
53816: PUSH
53817: LD_INT 2
53819: ARRAY
53820: ST_TO_ADDR
// for i = 1 to hexes do
53821: LD_ADDR_VAR 0 7
53825: PUSH
53826: DOUBLE
53827: LD_INT 1
53829: DEC
53830: ST_TO_ADDR
53831: LD_VAR 0 12
53835: PUSH
53836: FOR_TO
53837: IFFALSE 54167
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53839: LD_VAR 0 12
53843: PUSH
53844: LD_VAR 0 7
53848: ARRAY
53849: PUSH
53850: LD_INT 1
53852: ARRAY
53853: PPUSH
53854: LD_VAR 0 12
53858: PUSH
53859: LD_VAR 0 7
53863: ARRAY
53864: PUSH
53865: LD_INT 2
53867: ARRAY
53868: PPUSH
53869: CALL_OW 488
53873: NOT
53874: PUSH
53875: LD_VAR 0 12
53879: PUSH
53880: LD_VAR 0 7
53884: ARRAY
53885: PUSH
53886: LD_INT 1
53888: ARRAY
53889: PPUSH
53890: LD_VAR 0 12
53894: PUSH
53895: LD_VAR 0 7
53899: ARRAY
53900: PUSH
53901: LD_INT 2
53903: ARRAY
53904: PPUSH
53905: CALL_OW 428
53909: PUSH
53910: LD_INT 0
53912: GREATER
53913: OR
53914: PUSH
53915: LD_VAR 0 12
53919: PUSH
53920: LD_VAR 0 7
53924: ARRAY
53925: PUSH
53926: LD_INT 1
53928: ARRAY
53929: PPUSH
53930: LD_VAR 0 12
53934: PUSH
53935: LD_VAR 0 7
53939: ARRAY
53940: PUSH
53941: LD_INT 2
53943: ARRAY
53944: PPUSH
53945: CALL_OW 351
53949: OR
53950: IFFALSE 53956
// exit ;
53952: POP
53953: POP
53954: GO 54248
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53956: LD_ADDR_VAR 0 8
53960: PUSH
53961: LD_VAR 0 12
53965: PUSH
53966: LD_VAR 0 7
53970: ARRAY
53971: PUSH
53972: LD_INT 1
53974: ARRAY
53975: PPUSH
53976: LD_VAR 0 12
53980: PUSH
53981: LD_VAR 0 7
53985: ARRAY
53986: PUSH
53987: LD_INT 2
53989: ARRAY
53990: PPUSH
53991: CALL_OW 546
53995: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53996: LD_VAR 0 8
54000: PUSH
54001: LD_INT 1
54003: ARRAY
54004: PUSH
54005: LD_VAR 0 8
54009: PUSH
54010: LD_INT 2
54012: ARRAY
54013: PUSH
54014: LD_VAR 0 13
54018: PUSH
54019: LD_INT 2
54021: PLUS
54022: GREATER
54023: OR
54024: PUSH
54025: LD_VAR 0 8
54029: PUSH
54030: LD_INT 2
54032: ARRAY
54033: PUSH
54034: LD_VAR 0 13
54038: PUSH
54039: LD_INT 2
54041: MINUS
54042: LESS
54043: OR
54044: PUSH
54045: LD_VAR 0 8
54049: PUSH
54050: LD_INT 3
54052: ARRAY
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 8
54059: PUSH
54060: LD_INT 9
54062: PUSH
54063: LD_INT 10
54065: PUSH
54066: LD_INT 11
54068: PUSH
54069: LD_INT 12
54071: PUSH
54072: LD_INT 13
54074: PUSH
54075: LD_INT 16
54077: PUSH
54078: LD_INT 17
54080: PUSH
54081: LD_INT 18
54083: PUSH
54084: LD_INT 19
54086: PUSH
54087: LD_INT 20
54089: PUSH
54090: LD_INT 21
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: IN
54108: NOT
54109: OR
54110: PUSH
54111: LD_VAR 0 8
54115: PUSH
54116: LD_INT 5
54118: ARRAY
54119: NOT
54120: OR
54121: PUSH
54122: LD_VAR 0 8
54126: PUSH
54127: LD_INT 6
54129: ARRAY
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 7
54139: PUSH
54140: LD_INT 9
54142: PUSH
54143: LD_INT 10
54145: PUSH
54146: LD_INT 11
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: IN
54157: NOT
54158: OR
54159: IFFALSE 54165
// exit ;
54161: POP
54162: POP
54163: GO 54248
// end ;
54165: GO 53836
54167: POP
54168: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54169: LD_VAR 0 9
54173: PPUSH
54174: LD_VAR 0 3
54178: PPUSH
54179: LD_VAR 0 4
54183: PPUSH
54184: LD_INT 20
54186: PPUSH
54187: CALL 46194 0 4
54191: PUSH
54192: LD_INT 4
54194: ARRAY
54195: IFFALSE 54199
// exit ;
54197: GO 54248
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54199: LD_VAR 0 2
54203: PUSH
54204: LD_INT 29
54206: PUSH
54207: LD_INT 30
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: IN
54214: PUSH
54215: LD_VAR 0 3
54219: PPUSH
54220: LD_VAR 0 4
54224: PPUSH
54225: LD_VAR 0 9
54229: PPUSH
54230: CALL_OW 440
54234: NOT
54235: AND
54236: IFFALSE 54240
// exit ;
54238: GO 54248
// result := true ;
54240: LD_ADDR_VAR 0 6
54244: PUSH
54245: LD_INT 1
54247: ST_TO_ADDR
// end ;
54248: LD_VAR 0 6
54252: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54253: LD_INT 0
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
// result = [ ] ;
54313: LD_ADDR_VAR 0 7
54317: PUSH
54318: EMPTY
54319: ST_TO_ADDR
// temp_list = [ ] ;
54320: LD_ADDR_VAR 0 9
54324: PUSH
54325: EMPTY
54326: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54327: LD_VAR 0 4
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: LD_INT 5
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: IN
54358: NOT
54359: PUSH
54360: LD_VAR 0 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: IN
54375: PUSH
54376: LD_VAR 0 5
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: IN
54395: NOT
54396: AND
54397: OR
54398: IFFALSE 54402
// exit ;
54400: GO 72793
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54402: LD_VAR 0 1
54406: PUSH
54407: LD_INT 6
54409: PUSH
54410: LD_INT 7
54412: PUSH
54413: LD_INT 8
54415: PUSH
54416: LD_INT 13
54418: PUSH
54419: LD_INT 12
54421: PUSH
54422: LD_INT 15
54424: PUSH
54425: LD_INT 11
54427: PUSH
54428: LD_INT 14
54430: PUSH
54431: LD_INT 10
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: IN
54445: IFFALSE 54455
// btype = b_lab ;
54447: LD_ADDR_VAR 0 1
54451: PUSH
54452: LD_INT 6
54454: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54455: LD_VAR 0 6
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: IN
54474: NOT
54475: PUSH
54476: LD_VAR 0 1
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: LD_INT 6
54495: PUSH
54496: LD_INT 36
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: LD_INT 31
54507: PUSH
54508: LD_INT 32
54510: PUSH
54511: LD_INT 33
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: IN
54527: NOT
54528: PUSH
54529: LD_VAR 0 6
54533: PUSH
54534: LD_INT 1
54536: EQUAL
54537: AND
54538: OR
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: IN
54555: NOT
54556: PUSH
54557: LD_VAR 0 6
54561: PUSH
54562: LD_INT 2
54564: EQUAL
54565: AND
54566: OR
54567: IFFALSE 54577
// mode = 0 ;
54569: LD_ADDR_VAR 0 6
54573: PUSH
54574: LD_INT 0
54576: ST_TO_ADDR
// case mode of 0 :
54577: LD_VAR 0 6
54581: PUSH
54582: LD_INT 0
54584: DOUBLE
54585: EQUAL
54586: IFTRUE 54590
54588: GO 66043
54590: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54591: LD_ADDR_VAR 0 11
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54784: LD_ADDR_VAR 0 12
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54980: LD_ADDR_VAR 0 13
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55179: LD_ADDR_VAR 0 14
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55375: LD_ADDR_VAR 0 15
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55568: LD_ADDR_VAR 0 16
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55761: LD_ADDR_VAR 0 17
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55991: LD_ADDR_VAR 0 18
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56221: LD_ADDR_VAR 0 19
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56451: LD_ADDR_VAR 0 20
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56681: LD_ADDR_VAR 0 21
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56911: LD_ADDR_VAR 0 22
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57141: LD_ADDR_VAR 0 23
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57421: LD_ADDR_VAR 0 24
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57697: LD_ADDR_VAR 0 25
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57971: LD_ADDR_VAR 0 26
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58247: LD_ADDR_VAR 0 27
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 3
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58527: LD_ADDR_VAR 0 28
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58809: LD_ADDR_VAR 0 29
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59088: LD_ADDR_VAR 0 30
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 3
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59366: LD_ADDR_VAR 0 31
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59644: LD_ADDR_VAR 0 32
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59922: LD_ADDR_VAR 0 33
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 3
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60201: LD_ADDR_VAR 0 34
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60481: LD_ADDR_VAR 0 35
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60593: LD_ADDR_VAR 0 36
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60705: LD_ADDR_VAR 0 37
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60817: LD_ADDR_VAR 0 38
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60929: LD_ADDR_VAR 0 39
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61041: LD_ADDR_VAR 0 40
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61153: LD_ADDR_VAR 0 41
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61503: LD_ADDR_VAR 0 42
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 3
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61853: LD_ADDR_VAR 0 43
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: LD_INT 3
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62201: LD_ADDR_VAR 0 44
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 2
62379: NEG
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 3
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62551: LD_ADDR_VAR 0 45
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 2
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 3
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62901: LD_ADDR_VAR 0 46
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 3
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: NEG
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63249: LD_ADDR_VAR 0 47
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63400: LD_ADDR_VAR 0 48
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63547: LD_ADDR_VAR 0 49
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63691: LD_ADDR_VAR 0 50
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63835: LD_ADDR_VAR 0 51
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63982: LD_ADDR_VAR 0 52
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64133: LD_ADDR_VAR 0 53
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: LD_INT 2
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64363: LD_ADDR_VAR 0 54
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: LD_INT 2
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64593: LD_ADDR_VAR 0 55
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: LD_INT 2
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64823: LD_ADDR_VAR 0 56
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65053: LD_ADDR_VAR 0 57
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 2
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: NEG
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65283: LD_ADDR_VAR 0 58
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 2
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 2
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: NEG
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65513: LD_ADDR_VAR 0 59
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65601: LD_ADDR_VAR 0 60
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65689: LD_ADDR_VAR 0 61
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65777: LD_ADDR_VAR 0 62
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65865: LD_ADDR_VAR 0 63
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65953: LD_ADDR_VAR 0 64
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// end ; 1 :
66041: GO 71938
66043: LD_INT 1
66045: DOUBLE
66046: EQUAL
66047: IFTRUE 66051
66049: GO 68674
66051: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66052: LD_ADDR_VAR 0 11
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 3
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66096: LD_ADDR_VAR 0 12
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: LD_INT 1
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66137: LD_ADDR_VAR 0 13
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: LD_INT 2
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 3
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 3
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66177: LD_ADDR_VAR 0 14
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66218: LD_ADDR_VAR 0 15
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66262: LD_ADDR_VAR 0 16
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 3
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 3
66281: NEG
66282: PUSH
66283: LD_INT 2
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: NEG
66294: PUSH
66295: LD_INT 3
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66308: LD_ADDR_VAR 0 17
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66352: LD_ADDR_VAR 0 18
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 3
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66393: LD_ADDR_VAR 0 19
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66433: LD_ADDR_VAR 0 20
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66474: LD_ADDR_VAR 0 21
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66518: LD_ADDR_VAR 0 22
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 3
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: NEG
66550: PUSH
66551: LD_INT 3
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66564: LD_ADDR_VAR 0 23
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66608: LD_ADDR_VAR 0 24
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 4
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66649: LD_ADDR_VAR 0 25
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 4
66666: PUSH
66667: LD_INT 3
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66689: LD_ADDR_VAR 0 26
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: LD_INT 4
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: LD_INT 3
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66730: LD_ADDR_VAR 0 27
66734: PUSH
66735: LD_INT 3
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66774: LD_ADDR_VAR 0 28
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: LD_INT 4
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: LD_INT 3
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66820: LD_ADDR_VAR 0 29
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 1
66861: NEG
66862: PUSH
66863: LD_INT 4
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: LD_INT 4
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 5
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: LD_INT 5
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: LD_INT 4
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: LD_INT 6
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 6
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 5
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66975: LD_ADDR_VAR 0 30
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 4
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 5
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 5
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 5
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 6
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 6
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67118: LD_ADDR_VAR 0 31
67122: PUSH
67123: LD_INT 3
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: LD_INT 3
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 3
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: LD_INT 4
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: LD_INT 4
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 6
67215: PUSH
67216: LD_INT 5
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 6
67225: PUSH
67226: LD_INT 6
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: LD_INT 6
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67257: LD_ADDR_VAR 0 32
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: LD_INT 3
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: LD_INT 4
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: LD_INT 4
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: LD_INT 5
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 5
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 4
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 6
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 6
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67400: LD_ADDR_VAR 0 33
67404: PUSH
67405: LD_INT 2
67407: NEG
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 3
67418: NEG
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 3
67429: NEG
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 1
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 4
67452: NEG
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 4
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 5
67486: NEG
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 5
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 5
67509: NEG
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 6
67520: NEG
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 6
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67555: LD_ADDR_VAR 0 34
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: LD_INT 3
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 4
67610: NEG
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 4
67622: NEG
67623: PUSH
67624: LD_INT 4
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: NEG
67635: PUSH
67636: LD_INT 5
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 5
67646: NEG
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 5
67658: NEG
67659: PUSH
67660: LD_INT 5
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 5
67670: NEG
67671: PUSH
67672: LD_INT 6
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 6
67682: NEG
67683: PUSH
67684: LD_INT 5
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 6
67694: NEG
67695: PUSH
67696: LD_INT 6
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67718: LD_ADDR_VAR 0 41
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: LIST
67761: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67762: LD_ADDR_VAR 0 42
67766: PUSH
67767: LD_INT 2
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: LIST
67802: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67803: LD_ADDR_VAR 0 43
67807: PUSH
67808: LD_INT 2
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 2
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67843: LD_ADDR_VAR 0 44
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67884: LD_ADDR_VAR 0 45
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67928: LD_ADDR_VAR 0 46
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: LD_INT 3
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: LD_INT 2
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67974: LD_ADDR_VAR 0 47
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 3
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68007: LD_ADDR_VAR 0 48
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68038: LD_ADDR_VAR 0 49
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68067: LD_ADDR_VAR 0 50
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68096: LD_ADDR_VAR 0 51
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68127: LD_ADDR_VAR 0 52
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: LD_INT 2
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68160: LD_ADDR_VAR 0 53
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: LD_INT 3
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: LIST
68203: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68204: LD_ADDR_VAR 0 54
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68245: LD_ADDR_VAR 0 55
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 3
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 2
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68285: LD_ADDR_VAR 0 56
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: LD_INT 3
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: LD_INT 2
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68326: LD_ADDR_VAR 0 57
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68370: LD_ADDR_VAR 0 58
68374: PUSH
68375: LD_INT 2
68377: NEG
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: NEG
68390: PUSH
68391: LD_INT 2
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 3
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68416: LD_ADDR_VAR 0 59
68420: PUSH
68421: LD_INT 1
68423: NEG
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 1
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68460: LD_ADDR_VAR 0 60
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 2
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68501: LD_ADDR_VAR 0 61
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 2
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: LIST
68540: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68541: LD_ADDR_VAR 0 62
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: LD_INT 2
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: LD_INT 1
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: LIST
68581: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68582: LD_ADDR_VAR 0 63
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: LIST
68625: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68626: LD_ADDR_VAR 0 64
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 2
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: ST_TO_ADDR
// end ; 2 :
68672: GO 71938
68674: LD_INT 2
68676: DOUBLE
68677: EQUAL
68678: IFTRUE 68682
68680: GO 71937
68682: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68683: LD_ADDR_VAR 0 29
68687: PUSH
68688: LD_INT 4
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 4
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 5
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 5
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 3
68751: PUSH
68752: LD_INT 1
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 3
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 5
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 3
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 4
68803: PUSH
68804: LD_INT 3
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 4
68813: PUSH
68814: LD_INT 4
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: LD_INT 3
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 2
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 4
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: LD_INT 4
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 4
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: LD_INT 4
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: LD_INT 5
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 5
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 4
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 3
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 2
68945: PUSH
68946: LD_INT 5
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 3
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 1
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: LD_INT 1
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 4
69033: NEG
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 4
69045: NEG
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: NEG
69058: PUSH
69059: LD_INT 2
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: LD_INT 4
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 4
69080: NEG
69081: PUSH
69082: LD_INT 5
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: LD_INT 4
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: NEG
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 4
69116: NEG
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 5
69128: NEG
69129: PUSH
69130: LD_INT 4
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 5
69140: NEG
69141: PUSH
69142: LD_INT 5
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 3
69152: NEG
69153: PUSH
69154: LD_INT 5
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 5
69164: NEG
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69221: LD_ADDR_VAR 0 30
69225: PUSH
69226: LD_INT 4
69228: PUSH
69229: LD_INT 4
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 4
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 5
69248: PUSH
69249: LD_INT 4
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 5
69258: PUSH
69259: LD_INT 5
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 4
69268: PUSH
69269: LD_INT 5
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 3
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 3
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 5
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: LD_INT 5
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 3
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 1
69348: PUSH
69349: LD_INT 4
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 4
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 1
69368: NEG
69369: PUSH
69370: LD_INT 3
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 2
69390: PUSH
69391: LD_INT 4
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: LD_INT 2
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 4
69411: NEG
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: LD_INT 1
69426: NEG
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 3
69434: NEG
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 3
69445: NEG
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 4
69456: NEG
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 5
69467: NEG
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 5
69478: NEG
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 5
69490: NEG
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: LD_INT 2
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 3
69513: NEG
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: LD_INT 4
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: LD_INT 3
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: LD_INT 2
69553: NEG
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 4
69573: NEG
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: LD_INT 4
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: NEG
69598: PUSH
69599: LD_INT 4
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 4
69609: NEG
69610: PUSH
69611: LD_INT 2
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: LD_INT 4
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 5
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: LD_INT 4
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 1
69676: NEG
69677: PUSH
69678: LD_INT 4
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 1
69688: NEG
69689: PUSH
69690: LD_INT 5
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: LD_INT 5
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69768: LD_ADDR_VAR 0 31
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 4
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: LD_INT 3
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 1
69795: PUSH
69796: LD_INT 4
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: LD_INT 5
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 5
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: LD_INT 4
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: LD_INT 3
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 2
69857: NEG
69858: PUSH
69859: LD_INT 3
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: LD_INT 1
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 3
69913: NEG
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 4
69924: NEG
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: LD_INT 1
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 4
69947: NEG
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 4
69982: NEG
69983: PUSH
69984: LD_INT 5
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: LD_INT 4
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 3
70006: NEG
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 4
70018: NEG
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: NEG
70031: PUSH
70032: LD_INT 4
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 5
70042: NEG
70043: PUSH
70044: LD_INT 5
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: LD_INT 5
70058: NEG
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 5
70066: NEG
70067: PUSH
70068: LD_INT 3
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: LD_INT 3
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 4
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: LD_INT 2
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: LD_INT 3
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 1
70145: NEG
70146: PUSH
70147: LD_INT 4
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 4
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 4
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 4
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 5
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 5
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: LD_INT 1
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 3
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 3
70252: PUSH
70253: LD_INT 2
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 5
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70318: LD_ADDR_VAR 0 32
70322: PUSH
70323: LD_INT 4
70325: NEG
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 4
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 3
70359: NEG
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 5
70381: NEG
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: NEG
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: LD_INT 2
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 3
70439: NEG
70440: PUSH
70441: LD_INT 4
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: LD_INT 3
70455: NEG
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 2
70463: NEG
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 3
70475: NEG
70476: PUSH
70477: LD_INT 2
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 4
70487: NEG
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 4
70499: NEG
70500: PUSH
70501: LD_INT 4
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: NEG
70512: PUSH
70513: LD_INT 4
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 4
70523: NEG
70524: PUSH
70525: LD_INT 2
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 5
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 4
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: LD_INT 3
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 3
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: LD_INT 4
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: NEG
70603: PUSH
70604: LD_INT 5
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 2
70614: PUSH
70615: LD_INT 3
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: LD_INT 5
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 3
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 4
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 3
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: LD_INT 0
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: LD_INT 1
70701: NEG
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 2
70709: PUSH
70710: LD_INT 2
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 4
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 4
70730: PUSH
70731: LD_INT 4
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 4
70740: PUSH
70741: LD_INT 3
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 5
70750: PUSH
70751: LD_INT 4
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 5
70760: PUSH
70761: LD_INT 5
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 4
70770: PUSH
70771: LD_INT 5
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: PUSH
70781: LD_INT 4
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 3
70790: PUSH
70791: LD_INT 3
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 5
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 3
70810: PUSH
70811: LD_INT 5
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70865: LD_ADDR_VAR 0 33
70869: PUSH
70870: LD_INT 4
70872: NEG
70873: PUSH
70874: LD_INT 4
70876: NEG
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 4
70884: NEG
70885: PUSH
70886: LD_INT 5
70888: NEG
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: LD_INT 4
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 3
70908: NEG
70909: PUSH
70910: LD_INT 3
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 4
70920: NEG
70921: PUSH
70922: LD_INT 3
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 5
70932: NEG
70933: PUSH
70934: LD_INT 4
70936: NEG
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: NEG
70945: PUSH
70946: LD_INT 5
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: NEG
70957: PUSH
70958: LD_INT 5
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 5
70968: NEG
70969: PUSH
70970: LD_INT 3
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 4
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 1
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: PUSH
71014: LD_INT 2
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 0
71024: PUSH
71025: LD_INT 2
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: LD_INT 3
71039: NEG
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: LD_INT 4
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 2
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 2
71070: NEG
71071: PUSH
71072: LD_INT 4
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 4
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 4
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 5
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 5
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 4
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 3
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 3
71143: PUSH
71144: LD_INT 1
71146: NEG
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 5
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 3
71185: PUSH
71186: LD_INT 2
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 4
71195: PUSH
71196: LD_INT 3
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 4
71205: PUSH
71206: LD_INT 4
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: LD_INT 4
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: PUSH
71226: LD_INT 3
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 4
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 2
71255: PUSH
71256: LD_INT 4
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: LD_INT 4
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 0
71275: PUSH
71276: LD_INT 3
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 1
71285: PUSH
71286: LD_INT 4
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: LD_INT 5
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: LD_INT 5
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: NEG
71316: PUSH
71317: LD_INT 4
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 1
71326: NEG
71327: PUSH
71328: LD_INT 3
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: LD_INT 5
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 2
71347: NEG
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71403: LD_ADDR_VAR 0 34
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 4
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 0
71421: PUSH
71422: LD_INT 5
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 4
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 1
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 3
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 1
71465: NEG
71466: PUSH
71467: LD_INT 4
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: NEG
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 2
71489: PUSH
71490: LD_INT 3
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 2
71500: NEG
71501: PUSH
71502: LD_INT 5
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 4
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 4
71543: PUSH
71544: LD_INT 1
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 3
71553: PUSH
71554: LD_INT 1
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 2
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 2
71573: PUSH
71574: LD_INT 1
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: LD_INT 2
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 4
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 4
71605: PUSH
71606: LD_INT 4
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 4
71615: PUSH
71616: LD_INT 3
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 5
71635: PUSH
71636: LD_INT 5
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: PUSH
71646: LD_INT 5
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: LD_INT 4
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 3
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 5
71675: PUSH
71676: LD_INT 3
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 3
71685: PUSH
71686: LD_INT 5
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 0
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 1
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 1
71725: PUSH
71726: LD_INT 4
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: LD_INT 4
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 1
71745: NEG
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 1
71756: NEG
71757: PUSH
71758: LD_INT 2
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 4
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 2
71777: NEG
71778: PUSH
71779: LD_INT 2
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 4
71788: NEG
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 4
71799: NEG
71800: PUSH
71801: LD_INT 1
71803: NEG
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 3
71811: NEG
71812: PUSH
71813: LD_INT 0
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 3
71822: NEG
71823: PUSH
71824: LD_INT 1
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 4
71833: NEG
71834: PUSH
71835: LD_INT 1
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: NEG
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 5
71855: NEG
71856: PUSH
71857: LD_INT 1
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 5
71867: NEG
71868: PUSH
71869: LD_INT 2
71871: NEG
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: NEG
71880: PUSH
71881: LD_INT 2
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: ST_TO_ADDR
// end ; end ;
71935: GO 71938
71937: POP
// case btype of b_depot , b_warehouse :
71938: LD_VAR 0 1
71942: PUSH
71943: LD_INT 0
71945: DOUBLE
71946: EQUAL
71947: IFTRUE 71957
71949: LD_INT 1
71951: DOUBLE
71952: EQUAL
71953: IFTRUE 71957
71955: GO 72158
71957: POP
// case nation of nation_american :
71958: LD_VAR 0 5
71962: PUSH
71963: LD_INT 1
71965: DOUBLE
71966: EQUAL
71967: IFTRUE 71971
71969: GO 72027
71971: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71972: LD_ADDR_VAR 0 9
71976: PUSH
71977: LD_VAR 0 11
71981: PUSH
71982: LD_VAR 0 12
71986: PUSH
71987: LD_VAR 0 13
71991: PUSH
71992: LD_VAR 0 14
71996: PUSH
71997: LD_VAR 0 15
72001: PUSH
72002: LD_VAR 0 16
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: PUSH
72015: LD_VAR 0 4
72019: PUSH
72020: LD_INT 1
72022: PLUS
72023: ARRAY
72024: ST_TO_ADDR
72025: GO 72156
72027: LD_INT 2
72029: DOUBLE
72030: EQUAL
72031: IFTRUE 72035
72033: GO 72091
72035: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72036: LD_ADDR_VAR 0 9
72040: PUSH
72041: LD_VAR 0 17
72045: PUSH
72046: LD_VAR 0 18
72050: PUSH
72051: LD_VAR 0 19
72055: PUSH
72056: LD_VAR 0 20
72060: PUSH
72061: LD_VAR 0 21
72065: PUSH
72066: LD_VAR 0 22
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: PUSH
72079: LD_VAR 0 4
72083: PUSH
72084: LD_INT 1
72086: PLUS
72087: ARRAY
72088: ST_TO_ADDR
72089: GO 72156
72091: LD_INT 3
72093: DOUBLE
72094: EQUAL
72095: IFTRUE 72099
72097: GO 72155
72099: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72100: LD_ADDR_VAR 0 9
72104: PUSH
72105: LD_VAR 0 23
72109: PUSH
72110: LD_VAR 0 24
72114: PUSH
72115: LD_VAR 0 25
72119: PUSH
72120: LD_VAR 0 26
72124: PUSH
72125: LD_VAR 0 27
72129: PUSH
72130: LD_VAR 0 28
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: PUSH
72143: LD_VAR 0 4
72147: PUSH
72148: LD_INT 1
72150: PLUS
72151: ARRAY
72152: ST_TO_ADDR
72153: GO 72156
72155: POP
72156: GO 72711
72158: LD_INT 2
72160: DOUBLE
72161: EQUAL
72162: IFTRUE 72172
72164: LD_INT 3
72166: DOUBLE
72167: EQUAL
72168: IFTRUE 72172
72170: GO 72228
72172: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72173: LD_ADDR_VAR 0 9
72177: PUSH
72178: LD_VAR 0 29
72182: PUSH
72183: LD_VAR 0 30
72187: PUSH
72188: LD_VAR 0 31
72192: PUSH
72193: LD_VAR 0 32
72197: PUSH
72198: LD_VAR 0 33
72202: PUSH
72203: LD_VAR 0 34
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: PUSH
72216: LD_VAR 0 4
72220: PUSH
72221: LD_INT 1
72223: PLUS
72224: ARRAY
72225: ST_TO_ADDR
72226: GO 72711
72228: LD_INT 16
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72290
72234: LD_INT 17
72236: DOUBLE
72237: EQUAL
72238: IFTRUE 72290
72240: LD_INT 18
72242: DOUBLE
72243: EQUAL
72244: IFTRUE 72290
72246: LD_INT 19
72248: DOUBLE
72249: EQUAL
72250: IFTRUE 72290
72252: LD_INT 22
72254: DOUBLE
72255: EQUAL
72256: IFTRUE 72290
72258: LD_INT 20
72260: DOUBLE
72261: EQUAL
72262: IFTRUE 72290
72264: LD_INT 21
72266: DOUBLE
72267: EQUAL
72268: IFTRUE 72290
72270: LD_INT 23
72272: DOUBLE
72273: EQUAL
72274: IFTRUE 72290
72276: LD_INT 24
72278: DOUBLE
72279: EQUAL
72280: IFTRUE 72290
72282: LD_INT 25
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72290
72288: GO 72346
72290: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72291: LD_ADDR_VAR 0 9
72295: PUSH
72296: LD_VAR 0 35
72300: PUSH
72301: LD_VAR 0 36
72305: PUSH
72306: LD_VAR 0 37
72310: PUSH
72311: LD_VAR 0 38
72315: PUSH
72316: LD_VAR 0 39
72320: PUSH
72321: LD_VAR 0 40
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: PUSH
72334: LD_VAR 0 4
72338: PUSH
72339: LD_INT 1
72341: PLUS
72342: ARRAY
72343: ST_TO_ADDR
72344: GO 72711
72346: LD_INT 6
72348: DOUBLE
72349: EQUAL
72350: IFTRUE 72402
72352: LD_INT 7
72354: DOUBLE
72355: EQUAL
72356: IFTRUE 72402
72358: LD_INT 8
72360: DOUBLE
72361: EQUAL
72362: IFTRUE 72402
72364: LD_INT 13
72366: DOUBLE
72367: EQUAL
72368: IFTRUE 72402
72370: LD_INT 12
72372: DOUBLE
72373: EQUAL
72374: IFTRUE 72402
72376: LD_INT 15
72378: DOUBLE
72379: EQUAL
72380: IFTRUE 72402
72382: LD_INT 11
72384: DOUBLE
72385: EQUAL
72386: IFTRUE 72402
72388: LD_INT 14
72390: DOUBLE
72391: EQUAL
72392: IFTRUE 72402
72394: LD_INT 10
72396: DOUBLE
72397: EQUAL
72398: IFTRUE 72402
72400: GO 72458
72402: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72403: LD_ADDR_VAR 0 9
72407: PUSH
72408: LD_VAR 0 41
72412: PUSH
72413: LD_VAR 0 42
72417: PUSH
72418: LD_VAR 0 43
72422: PUSH
72423: LD_VAR 0 44
72427: PUSH
72428: LD_VAR 0 45
72432: PUSH
72433: LD_VAR 0 46
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: PUSH
72446: LD_VAR 0 4
72450: PUSH
72451: LD_INT 1
72453: PLUS
72454: ARRAY
72455: ST_TO_ADDR
72456: GO 72711
72458: LD_INT 36
72460: DOUBLE
72461: EQUAL
72462: IFTRUE 72466
72464: GO 72522
72466: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72467: LD_ADDR_VAR 0 9
72471: PUSH
72472: LD_VAR 0 47
72476: PUSH
72477: LD_VAR 0 48
72481: PUSH
72482: LD_VAR 0 49
72486: PUSH
72487: LD_VAR 0 50
72491: PUSH
72492: LD_VAR 0 51
72496: PUSH
72497: LD_VAR 0 52
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: PUSH
72510: LD_VAR 0 4
72514: PUSH
72515: LD_INT 1
72517: PLUS
72518: ARRAY
72519: ST_TO_ADDR
72520: GO 72711
72522: LD_INT 4
72524: DOUBLE
72525: EQUAL
72526: IFTRUE 72548
72528: LD_INT 5
72530: DOUBLE
72531: EQUAL
72532: IFTRUE 72548
72534: LD_INT 34
72536: DOUBLE
72537: EQUAL
72538: IFTRUE 72548
72540: LD_INT 37
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72548
72546: GO 72604
72548: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72549: LD_ADDR_VAR 0 9
72553: PUSH
72554: LD_VAR 0 53
72558: PUSH
72559: LD_VAR 0 54
72563: PUSH
72564: LD_VAR 0 55
72568: PUSH
72569: LD_VAR 0 56
72573: PUSH
72574: LD_VAR 0 57
72578: PUSH
72579: LD_VAR 0 58
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: PUSH
72592: LD_VAR 0 4
72596: PUSH
72597: LD_INT 1
72599: PLUS
72600: ARRAY
72601: ST_TO_ADDR
72602: GO 72711
72604: LD_INT 31
72606: DOUBLE
72607: EQUAL
72608: IFTRUE 72654
72610: LD_INT 32
72612: DOUBLE
72613: EQUAL
72614: IFTRUE 72654
72616: LD_INT 33
72618: DOUBLE
72619: EQUAL
72620: IFTRUE 72654
72622: LD_INT 27
72624: DOUBLE
72625: EQUAL
72626: IFTRUE 72654
72628: LD_INT 26
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72654
72634: LD_INT 28
72636: DOUBLE
72637: EQUAL
72638: IFTRUE 72654
72640: LD_INT 29
72642: DOUBLE
72643: EQUAL
72644: IFTRUE 72654
72646: LD_INT 30
72648: DOUBLE
72649: EQUAL
72650: IFTRUE 72654
72652: GO 72710
72654: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72655: LD_ADDR_VAR 0 9
72659: PUSH
72660: LD_VAR 0 59
72664: PUSH
72665: LD_VAR 0 60
72669: PUSH
72670: LD_VAR 0 61
72674: PUSH
72675: LD_VAR 0 62
72679: PUSH
72680: LD_VAR 0 63
72684: PUSH
72685: LD_VAR 0 64
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: PUSH
72698: LD_VAR 0 4
72702: PUSH
72703: LD_INT 1
72705: PLUS
72706: ARRAY
72707: ST_TO_ADDR
72708: GO 72711
72710: POP
// temp_list2 = [ ] ;
72711: LD_ADDR_VAR 0 10
72715: PUSH
72716: EMPTY
72717: ST_TO_ADDR
// for i in temp_list do
72718: LD_ADDR_VAR 0 8
72722: PUSH
72723: LD_VAR 0 9
72727: PUSH
72728: FOR_IN
72729: IFFALSE 72781
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72731: LD_ADDR_VAR 0 10
72735: PUSH
72736: LD_VAR 0 10
72740: PUSH
72741: LD_VAR 0 8
72745: PUSH
72746: LD_INT 1
72748: ARRAY
72749: PUSH
72750: LD_VAR 0 2
72754: PLUS
72755: PUSH
72756: LD_VAR 0 8
72760: PUSH
72761: LD_INT 2
72763: ARRAY
72764: PUSH
72765: LD_VAR 0 3
72769: PLUS
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: ADD
72778: ST_TO_ADDR
72779: GO 72728
72781: POP
72782: POP
// result = temp_list2 ;
72783: LD_ADDR_VAR 0 7
72787: PUSH
72788: LD_VAR 0 10
72792: ST_TO_ADDR
// end ;
72793: LD_VAR 0 7
72797: RET
// export function EnemyInRange ( unit , dist ) ; begin
72798: LD_INT 0
72800: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72801: LD_ADDR_VAR 0 3
72805: PUSH
72806: LD_VAR 0 1
72810: PPUSH
72811: CALL_OW 255
72815: PPUSH
72816: LD_VAR 0 1
72820: PPUSH
72821: CALL_OW 250
72825: PPUSH
72826: LD_VAR 0 1
72830: PPUSH
72831: CALL_OW 251
72835: PPUSH
72836: LD_VAR 0 2
72840: PPUSH
72841: CALL 46194 0 4
72845: PUSH
72846: LD_INT 4
72848: ARRAY
72849: ST_TO_ADDR
// end ;
72850: LD_VAR 0 3
72854: RET
// export function PlayerSeeMe ( unit ) ; begin
72855: LD_INT 0
72857: PPUSH
// result := See ( your_side , unit ) ;
72858: LD_ADDR_VAR 0 2
72862: PUSH
72863: LD_OWVAR 2
72867: PPUSH
72868: LD_VAR 0 1
72872: PPUSH
72873: CALL_OW 292
72877: ST_TO_ADDR
// end ;
72878: LD_VAR 0 2
72882: RET
// export function ReverseDir ( unit ) ; begin
72883: LD_INT 0
72885: PPUSH
// if not unit then
72886: LD_VAR 0 1
72890: NOT
72891: IFFALSE 72895
// exit ;
72893: GO 72918
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: LD_VAR 0 1
72904: PPUSH
72905: CALL_OW 254
72909: PUSH
72910: LD_INT 3
72912: PLUS
72913: PUSH
72914: LD_INT 6
72916: MOD
72917: ST_TO_ADDR
// end ;
72918: LD_VAR 0 2
72922: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72923: LD_INT 0
72925: PPUSH
72926: PPUSH
72927: PPUSH
72928: PPUSH
72929: PPUSH
// if not hexes then
72930: LD_VAR 0 2
72934: NOT
72935: IFFALSE 72939
// exit ;
72937: GO 73087
// dist := 9999 ;
72939: LD_ADDR_VAR 0 5
72943: PUSH
72944: LD_INT 9999
72946: ST_TO_ADDR
// for i = 1 to hexes do
72947: LD_ADDR_VAR 0 4
72951: PUSH
72952: DOUBLE
72953: LD_INT 1
72955: DEC
72956: ST_TO_ADDR
72957: LD_VAR 0 2
72961: PUSH
72962: FOR_TO
72963: IFFALSE 73075
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72965: LD_VAR 0 1
72969: PPUSH
72970: LD_VAR 0 2
72974: PUSH
72975: LD_VAR 0 4
72979: ARRAY
72980: PUSH
72981: LD_INT 1
72983: ARRAY
72984: PPUSH
72985: LD_VAR 0 2
72989: PUSH
72990: LD_VAR 0 4
72994: ARRAY
72995: PUSH
72996: LD_INT 2
72998: ARRAY
72999: PPUSH
73000: CALL_OW 297
73004: PUSH
73005: LD_VAR 0 5
73009: LESS
73010: IFFALSE 73073
// begin hex := hexes [ i ] ;
73012: LD_ADDR_VAR 0 7
73016: PUSH
73017: LD_VAR 0 2
73021: PUSH
73022: LD_VAR 0 4
73026: ARRAY
73027: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73028: LD_ADDR_VAR 0 5
73032: PUSH
73033: LD_VAR 0 1
73037: PPUSH
73038: LD_VAR 0 2
73042: PUSH
73043: LD_VAR 0 4
73047: ARRAY
73048: PUSH
73049: LD_INT 1
73051: ARRAY
73052: PPUSH
73053: LD_VAR 0 2
73057: PUSH
73058: LD_VAR 0 4
73062: ARRAY
73063: PUSH
73064: LD_INT 2
73066: ARRAY
73067: PPUSH
73068: CALL_OW 297
73072: ST_TO_ADDR
// end ; end ;
73073: GO 72962
73075: POP
73076: POP
// result := hex ;
73077: LD_ADDR_VAR 0 3
73081: PUSH
73082: LD_VAR 0 7
73086: ST_TO_ADDR
// end ;
73087: LD_VAR 0 3
73091: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73092: LD_INT 0
73094: PPUSH
73095: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73096: LD_VAR 0 1
73100: NOT
73101: PUSH
73102: LD_VAR 0 1
73106: PUSH
73107: LD_INT 21
73109: PUSH
73110: LD_INT 2
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 23
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PPUSH
73131: CALL_OW 69
73135: IN
73136: NOT
73137: OR
73138: IFFALSE 73142
// exit ;
73140: GO 73189
// for i = 1 to 3 do
73142: LD_ADDR_VAR 0 3
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_INT 3
73154: PUSH
73155: FOR_TO
73156: IFFALSE 73187
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73158: LD_VAR 0 1
73162: PPUSH
73163: CALL_OW 250
73167: PPUSH
73168: LD_VAR 0 1
73172: PPUSH
73173: CALL_OW 251
73177: PPUSH
73178: LD_INT 1
73180: PPUSH
73181: CALL_OW 453
73185: GO 73155
73187: POP
73188: POP
// end ;
73189: LD_VAR 0 2
73193: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73194: LD_INT 0
73196: PPUSH
73197: PPUSH
73198: PPUSH
73199: PPUSH
73200: PPUSH
73201: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73202: LD_VAR 0 1
73206: NOT
73207: PUSH
73208: LD_VAR 0 2
73212: NOT
73213: OR
73214: PUSH
73215: LD_VAR 0 1
73219: PPUSH
73220: CALL_OW 314
73224: OR
73225: IFFALSE 73229
// exit ;
73227: GO 73670
// x := GetX ( enemy_unit ) ;
73229: LD_ADDR_VAR 0 7
73233: PUSH
73234: LD_VAR 0 2
73238: PPUSH
73239: CALL_OW 250
73243: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73244: LD_ADDR_VAR 0 8
73248: PUSH
73249: LD_VAR 0 2
73253: PPUSH
73254: CALL_OW 251
73258: ST_TO_ADDR
// if not x or not y then
73259: LD_VAR 0 7
73263: NOT
73264: PUSH
73265: LD_VAR 0 8
73269: NOT
73270: OR
73271: IFFALSE 73275
// exit ;
73273: GO 73670
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73275: LD_ADDR_VAR 0 6
73279: PUSH
73280: LD_VAR 0 7
73284: PPUSH
73285: LD_INT 0
73287: PPUSH
73288: LD_INT 4
73290: PPUSH
73291: CALL_OW 272
73295: PUSH
73296: LD_VAR 0 8
73300: PPUSH
73301: LD_INT 0
73303: PPUSH
73304: LD_INT 4
73306: PPUSH
73307: CALL_OW 273
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_VAR 0 7
73320: PPUSH
73321: LD_INT 1
73323: PPUSH
73324: LD_INT 4
73326: PPUSH
73327: CALL_OW 272
73331: PUSH
73332: LD_VAR 0 8
73336: PPUSH
73337: LD_INT 1
73339: PPUSH
73340: LD_INT 4
73342: PPUSH
73343: CALL_OW 273
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 7
73356: PPUSH
73357: LD_INT 2
73359: PPUSH
73360: LD_INT 4
73362: PPUSH
73363: CALL_OW 272
73367: PUSH
73368: LD_VAR 0 8
73372: PPUSH
73373: LD_INT 2
73375: PPUSH
73376: LD_INT 4
73378: PPUSH
73379: CALL_OW 273
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_VAR 0 7
73392: PPUSH
73393: LD_INT 3
73395: PPUSH
73396: LD_INT 4
73398: PPUSH
73399: CALL_OW 272
73403: PUSH
73404: LD_VAR 0 8
73408: PPUSH
73409: LD_INT 3
73411: PPUSH
73412: LD_INT 4
73414: PPUSH
73415: CALL_OW 273
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_VAR 0 7
73428: PPUSH
73429: LD_INT 4
73431: PPUSH
73432: LD_INT 4
73434: PPUSH
73435: CALL_OW 272
73439: PUSH
73440: LD_VAR 0 8
73444: PPUSH
73445: LD_INT 4
73447: PPUSH
73448: LD_INT 4
73450: PPUSH
73451: CALL_OW 273
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_VAR 0 7
73464: PPUSH
73465: LD_INT 5
73467: PPUSH
73468: LD_INT 4
73470: PPUSH
73471: CALL_OW 272
73475: PUSH
73476: LD_VAR 0 8
73480: PPUSH
73481: LD_INT 5
73483: PPUSH
73484: LD_INT 4
73486: PPUSH
73487: CALL_OW 273
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: ST_TO_ADDR
// for i = tmp downto 1 do
73504: LD_ADDR_VAR 0 4
73508: PUSH
73509: DOUBLE
73510: LD_VAR 0 6
73514: INC
73515: ST_TO_ADDR
73516: LD_INT 1
73518: PUSH
73519: FOR_DOWNTO
73520: IFFALSE 73621
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73522: LD_VAR 0 6
73526: PUSH
73527: LD_VAR 0 4
73531: ARRAY
73532: PUSH
73533: LD_INT 1
73535: ARRAY
73536: PPUSH
73537: LD_VAR 0 6
73541: PUSH
73542: LD_VAR 0 4
73546: ARRAY
73547: PUSH
73548: LD_INT 2
73550: ARRAY
73551: PPUSH
73552: CALL_OW 488
73556: NOT
73557: PUSH
73558: LD_VAR 0 6
73562: PUSH
73563: LD_VAR 0 4
73567: ARRAY
73568: PUSH
73569: LD_INT 1
73571: ARRAY
73572: PPUSH
73573: LD_VAR 0 6
73577: PUSH
73578: LD_VAR 0 4
73582: ARRAY
73583: PUSH
73584: LD_INT 2
73586: ARRAY
73587: PPUSH
73588: CALL_OW 428
73592: PUSH
73593: LD_INT 0
73595: NONEQUAL
73596: OR
73597: IFFALSE 73619
// tmp := Delete ( tmp , i ) ;
73599: LD_ADDR_VAR 0 6
73603: PUSH
73604: LD_VAR 0 6
73608: PPUSH
73609: LD_VAR 0 4
73613: PPUSH
73614: CALL_OW 3
73618: ST_TO_ADDR
73619: GO 73519
73621: POP
73622: POP
// j := GetClosestHex ( unit , tmp ) ;
73623: LD_ADDR_VAR 0 5
73627: PUSH
73628: LD_VAR 0 1
73632: PPUSH
73633: LD_VAR 0 6
73637: PPUSH
73638: CALL 72923 0 2
73642: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73643: LD_VAR 0 1
73647: PPUSH
73648: LD_VAR 0 5
73652: PUSH
73653: LD_INT 1
73655: ARRAY
73656: PPUSH
73657: LD_VAR 0 5
73661: PUSH
73662: LD_INT 2
73664: ARRAY
73665: PPUSH
73666: CALL_OW 111
// end ;
73670: LD_VAR 0 3
73674: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73675: LD_INT 0
73677: PPUSH
73678: PPUSH
73679: PPUSH
// uc_side = 0 ;
73680: LD_ADDR_OWVAR 20
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// uc_nation = 0 ;
73688: LD_ADDR_OWVAR 21
73692: PUSH
73693: LD_INT 0
73695: ST_TO_ADDR
// InitHc_All ( ) ;
73696: CALL_OW 584
// InitVc ;
73700: CALL_OW 20
// if mastodonts then
73704: LD_VAR 0 6
73708: IFFALSE 73775
// for i = 1 to mastodonts do
73710: LD_ADDR_VAR 0 11
73714: PUSH
73715: DOUBLE
73716: LD_INT 1
73718: DEC
73719: ST_TO_ADDR
73720: LD_VAR 0 6
73724: PUSH
73725: FOR_TO
73726: IFFALSE 73773
// begin vc_chassis := 31 ;
73728: LD_ADDR_OWVAR 37
73732: PUSH
73733: LD_INT 31
73735: ST_TO_ADDR
// vc_control := control_rider ;
73736: LD_ADDR_OWVAR 38
73740: PUSH
73741: LD_INT 4
73743: ST_TO_ADDR
// animal := CreateVehicle ;
73744: LD_ADDR_VAR 0 12
73748: PUSH
73749: CALL_OW 45
73753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73754: LD_VAR 0 12
73758: PPUSH
73759: LD_VAR 0 8
73763: PPUSH
73764: LD_INT 0
73766: PPUSH
73767: CALL 75910 0 3
// end ;
73771: GO 73725
73773: POP
73774: POP
// if horses then
73775: LD_VAR 0 5
73779: IFFALSE 73846
// for i = 1 to horses do
73781: LD_ADDR_VAR 0 11
73785: PUSH
73786: DOUBLE
73787: LD_INT 1
73789: DEC
73790: ST_TO_ADDR
73791: LD_VAR 0 5
73795: PUSH
73796: FOR_TO
73797: IFFALSE 73844
// begin hc_class := 21 ;
73799: LD_ADDR_OWVAR 28
73803: PUSH
73804: LD_INT 21
73806: ST_TO_ADDR
// hc_gallery :=  ;
73807: LD_ADDR_OWVAR 33
73811: PUSH
73812: LD_STRING 
73814: ST_TO_ADDR
// animal := CreateHuman ;
73815: LD_ADDR_VAR 0 12
73819: PUSH
73820: CALL_OW 44
73824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73825: LD_VAR 0 12
73829: PPUSH
73830: LD_VAR 0 8
73834: PPUSH
73835: LD_INT 0
73837: PPUSH
73838: CALL 75910 0 3
// end ;
73842: GO 73796
73844: POP
73845: POP
// if birds then
73846: LD_VAR 0 1
73850: IFFALSE 73917
// for i = 1 to birds do
73852: LD_ADDR_VAR 0 11
73856: PUSH
73857: DOUBLE
73858: LD_INT 1
73860: DEC
73861: ST_TO_ADDR
73862: LD_VAR 0 1
73866: PUSH
73867: FOR_TO
73868: IFFALSE 73915
// begin hc_class = 18 ;
73870: LD_ADDR_OWVAR 28
73874: PUSH
73875: LD_INT 18
73877: ST_TO_ADDR
// hc_gallery =  ;
73878: LD_ADDR_OWVAR 33
73882: PUSH
73883: LD_STRING 
73885: ST_TO_ADDR
// animal := CreateHuman ;
73886: LD_ADDR_VAR 0 12
73890: PUSH
73891: CALL_OW 44
73895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73896: LD_VAR 0 12
73900: PPUSH
73901: LD_VAR 0 8
73905: PPUSH
73906: LD_INT 0
73908: PPUSH
73909: CALL 75910 0 3
// end ;
73913: GO 73867
73915: POP
73916: POP
// if tigers then
73917: LD_VAR 0 2
73921: IFFALSE 74005
// for i = 1 to tigers do
73923: LD_ADDR_VAR 0 11
73927: PUSH
73928: DOUBLE
73929: LD_INT 1
73931: DEC
73932: ST_TO_ADDR
73933: LD_VAR 0 2
73937: PUSH
73938: FOR_TO
73939: IFFALSE 74003
// begin hc_class = class_tiger ;
73941: LD_ADDR_OWVAR 28
73945: PUSH
73946: LD_INT 14
73948: ST_TO_ADDR
// hc_gallery =  ;
73949: LD_ADDR_OWVAR 33
73953: PUSH
73954: LD_STRING 
73956: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73957: LD_ADDR_OWVAR 35
73961: PUSH
73962: LD_INT 7
73964: NEG
73965: PPUSH
73966: LD_INT 7
73968: PPUSH
73969: CALL_OW 12
73973: ST_TO_ADDR
// animal := CreateHuman ;
73974: LD_ADDR_VAR 0 12
73978: PUSH
73979: CALL_OW 44
73983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73984: LD_VAR 0 12
73988: PPUSH
73989: LD_VAR 0 8
73993: PPUSH
73994: LD_INT 0
73996: PPUSH
73997: CALL 75910 0 3
// end ;
74001: GO 73938
74003: POP
74004: POP
// if apemans then
74005: LD_VAR 0 3
74009: IFFALSE 74132
// for i = 1 to apemans do
74011: LD_ADDR_VAR 0 11
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_VAR 0 3
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74130
// begin hc_class = class_apeman ;
74029: LD_ADDR_OWVAR 28
74033: PUSH
74034: LD_INT 12
74036: ST_TO_ADDR
// hc_gallery =  ;
74037: LD_ADDR_OWVAR 33
74041: PUSH
74042: LD_STRING 
74044: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74045: LD_ADDR_OWVAR 35
74049: PUSH
74050: LD_INT 2
74052: NEG
74053: PPUSH
74054: LD_INT 2
74056: PPUSH
74057: CALL_OW 12
74061: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74062: LD_ADDR_OWVAR 31
74066: PUSH
74067: LD_INT 1
74069: PPUSH
74070: LD_INT 3
74072: PPUSH
74073: CALL_OW 12
74077: PUSH
74078: LD_INT 1
74080: PPUSH
74081: LD_INT 3
74083: PPUSH
74084: CALL_OW 12
74088: PUSH
74089: LD_INT 0
74091: PUSH
74092: LD_INT 0
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: ST_TO_ADDR
// animal := CreateHuman ;
74101: LD_ADDR_VAR 0 12
74105: PUSH
74106: CALL_OW 44
74110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74111: LD_VAR 0 12
74115: PPUSH
74116: LD_VAR 0 8
74120: PPUSH
74121: LD_INT 0
74123: PPUSH
74124: CALL 75910 0 3
// end ;
74128: GO 74026
74130: POP
74131: POP
// if enchidnas then
74132: LD_VAR 0 4
74136: IFFALSE 74203
// for i = 1 to enchidnas do
74138: LD_ADDR_VAR 0 11
74142: PUSH
74143: DOUBLE
74144: LD_INT 1
74146: DEC
74147: ST_TO_ADDR
74148: LD_VAR 0 4
74152: PUSH
74153: FOR_TO
74154: IFFALSE 74201
// begin hc_class = 13 ;
74156: LD_ADDR_OWVAR 28
74160: PUSH
74161: LD_INT 13
74163: ST_TO_ADDR
// hc_gallery =  ;
74164: LD_ADDR_OWVAR 33
74168: PUSH
74169: LD_STRING 
74171: ST_TO_ADDR
// animal := CreateHuman ;
74172: LD_ADDR_VAR 0 12
74176: PUSH
74177: CALL_OW 44
74181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74182: LD_VAR 0 12
74186: PPUSH
74187: LD_VAR 0 8
74191: PPUSH
74192: LD_INT 0
74194: PPUSH
74195: CALL 75910 0 3
// end ;
74199: GO 74153
74201: POP
74202: POP
// if fishes then
74203: LD_VAR 0 7
74207: IFFALSE 74274
// for i = 1 to fishes do
74209: LD_ADDR_VAR 0 11
74213: PUSH
74214: DOUBLE
74215: LD_INT 1
74217: DEC
74218: ST_TO_ADDR
74219: LD_VAR 0 7
74223: PUSH
74224: FOR_TO
74225: IFFALSE 74272
// begin hc_class = 20 ;
74227: LD_ADDR_OWVAR 28
74231: PUSH
74232: LD_INT 20
74234: ST_TO_ADDR
// hc_gallery =  ;
74235: LD_ADDR_OWVAR 33
74239: PUSH
74240: LD_STRING 
74242: ST_TO_ADDR
// animal := CreateHuman ;
74243: LD_ADDR_VAR 0 12
74247: PUSH
74248: CALL_OW 44
74252: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74253: LD_VAR 0 12
74257: PPUSH
74258: LD_VAR 0 9
74262: PPUSH
74263: LD_INT 0
74265: PPUSH
74266: CALL 75910 0 3
// end ;
74270: GO 74224
74272: POP
74273: POP
// end ;
74274: LD_VAR 0 10
74278: RET
// export function WantHeal ( sci , unit ) ; begin
74279: LD_INT 0
74281: PPUSH
// if GetTaskList ( sci ) > 0 then
74282: LD_VAR 0 1
74286: PPUSH
74287: CALL_OW 437
74291: PUSH
74292: LD_INT 0
74294: GREATER
74295: IFFALSE 74365
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74297: LD_VAR 0 1
74301: PPUSH
74302: CALL_OW 437
74306: PUSH
74307: LD_INT 1
74309: ARRAY
74310: PUSH
74311: LD_INT 1
74313: ARRAY
74314: PUSH
74315: LD_STRING l
74317: EQUAL
74318: PUSH
74319: LD_VAR 0 1
74323: PPUSH
74324: CALL_OW 437
74328: PUSH
74329: LD_INT 1
74331: ARRAY
74332: PUSH
74333: LD_INT 4
74335: ARRAY
74336: PUSH
74337: LD_VAR 0 2
74341: EQUAL
74342: AND
74343: IFFALSE 74355
// result := true else
74345: LD_ADDR_VAR 0 3
74349: PUSH
74350: LD_INT 1
74352: ST_TO_ADDR
74353: GO 74363
// result := false ;
74355: LD_ADDR_VAR 0 3
74359: PUSH
74360: LD_INT 0
74362: ST_TO_ADDR
// end else
74363: GO 74373
// result := false ;
74365: LD_ADDR_VAR 0 3
74369: PUSH
74370: LD_INT 0
74372: ST_TO_ADDR
// end ;
74373: LD_VAR 0 3
74377: RET
// export function HealTarget ( sci ) ; begin
74378: LD_INT 0
74380: PPUSH
// if not sci then
74381: LD_VAR 0 1
74385: NOT
74386: IFFALSE 74390
// exit ;
74388: GO 74455
// result := 0 ;
74390: LD_ADDR_VAR 0 2
74394: PUSH
74395: LD_INT 0
74397: ST_TO_ADDR
// if GetTaskList ( sci ) then
74398: LD_VAR 0 1
74402: PPUSH
74403: CALL_OW 437
74407: IFFALSE 74455
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74409: LD_VAR 0 1
74413: PPUSH
74414: CALL_OW 437
74418: PUSH
74419: LD_INT 1
74421: ARRAY
74422: PUSH
74423: LD_INT 1
74425: ARRAY
74426: PUSH
74427: LD_STRING l
74429: EQUAL
74430: IFFALSE 74455
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74432: LD_ADDR_VAR 0 2
74436: PUSH
74437: LD_VAR 0 1
74441: PPUSH
74442: CALL_OW 437
74446: PUSH
74447: LD_INT 1
74449: ARRAY
74450: PUSH
74451: LD_INT 4
74453: ARRAY
74454: ST_TO_ADDR
// end ;
74455: LD_VAR 0 2
74459: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74460: LD_INT 0
74462: PPUSH
74463: PPUSH
74464: PPUSH
74465: PPUSH
// if not base_units then
74466: LD_VAR 0 1
74470: NOT
74471: IFFALSE 74475
// exit ;
74473: GO 74562
// result := false ;
74475: LD_ADDR_VAR 0 2
74479: PUSH
74480: LD_INT 0
74482: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74483: LD_ADDR_VAR 0 5
74487: PUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: LD_INT 21
74495: PUSH
74496: LD_INT 3
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PPUSH
74503: CALL_OW 72
74507: ST_TO_ADDR
// if not tmp then
74508: LD_VAR 0 5
74512: NOT
74513: IFFALSE 74517
// exit ;
74515: GO 74562
// for i in tmp do
74517: LD_ADDR_VAR 0 3
74521: PUSH
74522: LD_VAR 0 5
74526: PUSH
74527: FOR_IN
74528: IFFALSE 74560
// begin result := EnemyInRange ( i , 22 ) ;
74530: LD_ADDR_VAR 0 2
74534: PUSH
74535: LD_VAR 0 3
74539: PPUSH
74540: LD_INT 22
74542: PPUSH
74543: CALL 72798 0 2
74547: ST_TO_ADDR
// if result then
74548: LD_VAR 0 2
74552: IFFALSE 74558
// exit ;
74554: POP
74555: POP
74556: GO 74562
// end ;
74558: GO 74527
74560: POP
74561: POP
// end ;
74562: LD_VAR 0 2
74566: RET
// export function FilterByTag ( units , tag ) ; begin
74567: LD_INT 0
74569: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74570: LD_ADDR_VAR 0 3
74574: PUSH
74575: LD_VAR 0 1
74579: PPUSH
74580: LD_INT 120
74582: PUSH
74583: LD_VAR 0 2
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PPUSH
74592: CALL_OW 72
74596: ST_TO_ADDR
// end ;
74597: LD_VAR 0 3
74601: RET
// export function IsDriver ( un ) ; begin
74602: LD_INT 0
74604: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74605: LD_ADDR_VAR 0 2
74609: PUSH
74610: LD_VAR 0 1
74614: PUSH
74615: LD_INT 55
74617: PUSH
74618: EMPTY
74619: LIST
74620: PPUSH
74621: CALL_OW 69
74625: IN
74626: ST_TO_ADDR
// end ;
74627: LD_VAR 0 2
74631: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74632: LD_INT 0
74634: PPUSH
74635: PPUSH
// list := [ ] ;
74636: LD_ADDR_VAR 0 5
74640: PUSH
74641: EMPTY
74642: ST_TO_ADDR
// case d of 0 :
74643: LD_VAR 0 3
74647: PUSH
74648: LD_INT 0
74650: DOUBLE
74651: EQUAL
74652: IFTRUE 74656
74654: GO 74789
74656: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74657: LD_ADDR_VAR 0 5
74661: PUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_INT 4
74669: MINUS
74670: PUSH
74671: LD_VAR 0 2
74675: PUSH
74676: LD_INT 4
74678: MINUS
74679: PUSH
74680: LD_INT 2
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: LIST
74687: PUSH
74688: LD_VAR 0 1
74692: PUSH
74693: LD_INT 3
74695: MINUS
74696: PUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_INT 1
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: LIST
74709: PUSH
74710: LD_VAR 0 1
74714: PUSH
74715: LD_INT 4
74717: PLUS
74718: PUSH
74719: LD_VAR 0 2
74723: PUSH
74724: LD_INT 4
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_INT 3
74739: PLUS
74740: PUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_INT 3
74748: PLUS
74749: PUSH
74750: LD_INT 5
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: LIST
74757: PUSH
74758: LD_VAR 0 1
74762: PUSH
74763: LD_VAR 0 2
74767: PUSH
74768: LD_INT 4
74770: PLUS
74771: PUSH
74772: LD_INT 0
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: LIST
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: ST_TO_ADDR
// end ; 1 :
74787: GO 75487
74789: LD_INT 1
74791: DOUBLE
74792: EQUAL
74793: IFTRUE 74797
74795: GO 74930
74797: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74798: LD_ADDR_VAR 0 5
74802: PUSH
74803: LD_VAR 0 1
74807: PUSH
74808: LD_VAR 0 2
74812: PUSH
74813: LD_INT 4
74815: MINUS
74816: PUSH
74817: LD_INT 3
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: LIST
74824: PUSH
74825: LD_VAR 0 1
74829: PUSH
74830: LD_INT 3
74832: MINUS
74833: PUSH
74834: LD_VAR 0 2
74838: PUSH
74839: LD_INT 3
74841: MINUS
74842: PUSH
74843: LD_INT 2
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: PUSH
74851: LD_VAR 0 1
74855: PUSH
74856: LD_INT 4
74858: MINUS
74859: PUSH
74860: LD_VAR 0 2
74864: PUSH
74865: LD_INT 1
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: LIST
74872: PUSH
74873: LD_VAR 0 1
74877: PUSH
74878: LD_VAR 0 2
74882: PUSH
74883: LD_INT 3
74885: PLUS
74886: PUSH
74887: LD_INT 0
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: LIST
74894: PUSH
74895: LD_VAR 0 1
74899: PUSH
74900: LD_INT 4
74902: PLUS
74903: PUSH
74904: LD_VAR 0 2
74908: PUSH
74909: LD_INT 4
74911: PLUS
74912: PUSH
74913: LD_INT 5
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: ST_TO_ADDR
// end ; 2 :
74928: GO 75487
74930: LD_INT 2
74932: DOUBLE
74933: EQUAL
74934: IFTRUE 74938
74936: GO 75067
74938: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74939: LD_ADDR_VAR 0 5
74943: PUSH
74944: LD_VAR 0 1
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 3
74956: MINUS
74957: PUSH
74958: LD_INT 3
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: LIST
74965: PUSH
74966: LD_VAR 0 1
74970: PUSH
74971: LD_INT 4
74973: PLUS
74974: PUSH
74975: LD_VAR 0 2
74979: PUSH
74980: LD_INT 4
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: LIST
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 4
75000: PLUS
75001: PUSH
75002: LD_INT 0
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 3
75017: MINUS
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_INT 1
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: LIST
75031: PUSH
75032: LD_VAR 0 1
75036: PUSH
75037: LD_INT 4
75039: MINUS
75040: PUSH
75041: LD_VAR 0 2
75045: PUSH
75046: LD_INT 4
75048: MINUS
75049: PUSH
75050: LD_INT 2
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: ST_TO_ADDR
// end ; 3 :
75065: GO 75487
75067: LD_INT 3
75069: DOUBLE
75070: EQUAL
75071: IFTRUE 75075
75073: GO 75208
75075: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75076: LD_ADDR_VAR 0 5
75080: PUSH
75081: LD_VAR 0 1
75085: PUSH
75086: LD_INT 3
75088: PLUS
75089: PUSH
75090: LD_VAR 0 2
75094: PUSH
75095: LD_INT 4
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: LD_VAR 0 1
75107: PUSH
75108: LD_INT 4
75110: PLUS
75111: PUSH
75112: LD_VAR 0 2
75116: PUSH
75117: LD_INT 4
75119: PLUS
75120: PUSH
75121: LD_INT 5
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: PUSH
75129: LD_VAR 0 1
75133: PUSH
75134: LD_INT 4
75136: MINUS
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_INT 1
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: LIST
75150: PUSH
75151: LD_VAR 0 1
75155: PUSH
75156: LD_VAR 0 2
75160: PUSH
75161: LD_INT 4
75163: MINUS
75164: PUSH
75165: LD_INT 3
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: LIST
75172: PUSH
75173: LD_VAR 0 1
75177: PUSH
75178: LD_INT 3
75180: MINUS
75181: PUSH
75182: LD_VAR 0 2
75186: PUSH
75187: LD_INT 3
75189: MINUS
75190: PUSH
75191: LD_INT 2
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: LIST
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: ST_TO_ADDR
// end ; 4 :
75206: GO 75487
75208: LD_INT 4
75210: DOUBLE
75211: EQUAL
75212: IFTRUE 75216
75214: GO 75349
75216: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75217: LD_ADDR_VAR 0 5
75221: PUSH
75222: LD_VAR 0 1
75226: PUSH
75227: LD_VAR 0 2
75231: PUSH
75232: LD_INT 4
75234: PLUS
75235: PUSH
75236: LD_INT 0
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: LIST
75243: PUSH
75244: LD_VAR 0 1
75248: PUSH
75249: LD_INT 3
75251: PLUS
75252: PUSH
75253: LD_VAR 0 2
75257: PUSH
75258: LD_INT 3
75260: PLUS
75261: PUSH
75262: LD_INT 5
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: LIST
75269: PUSH
75270: LD_VAR 0 1
75274: PUSH
75275: LD_INT 4
75277: PLUS
75278: PUSH
75279: LD_VAR 0 2
75283: PUSH
75284: LD_INT 4
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: LIST
75291: PUSH
75292: LD_VAR 0 1
75296: PUSH
75297: LD_VAR 0 2
75301: PUSH
75302: LD_INT 3
75304: MINUS
75305: PUSH
75306: LD_INT 3
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: LIST
75313: PUSH
75314: LD_VAR 0 1
75318: PUSH
75319: LD_INT 4
75321: MINUS
75322: PUSH
75323: LD_VAR 0 2
75327: PUSH
75328: LD_INT 4
75330: MINUS
75331: PUSH
75332: LD_INT 2
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: ST_TO_ADDR
// end ; 5 :
75347: GO 75487
75349: LD_INT 5
75351: DOUBLE
75352: EQUAL
75353: IFTRUE 75357
75355: GO 75486
75357: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75358: LD_ADDR_VAR 0 5
75362: PUSH
75363: LD_VAR 0 1
75367: PUSH
75368: LD_INT 4
75370: MINUS
75371: PUSH
75372: LD_VAR 0 2
75376: PUSH
75377: LD_INT 1
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: LIST
75384: PUSH
75385: LD_VAR 0 1
75389: PUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_INT 4
75397: MINUS
75398: PUSH
75399: LD_INT 3
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: LIST
75406: PUSH
75407: LD_VAR 0 1
75411: PUSH
75412: LD_INT 4
75414: PLUS
75415: PUSH
75416: LD_VAR 0 2
75420: PUSH
75421: LD_INT 4
75423: PLUS
75424: PUSH
75425: LD_INT 5
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: LIST
75432: PUSH
75433: LD_VAR 0 1
75437: PUSH
75438: LD_INT 3
75440: PLUS
75441: PUSH
75442: LD_VAR 0 2
75446: PUSH
75447: LD_INT 4
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: PUSH
75455: LD_VAR 0 1
75459: PUSH
75460: LD_VAR 0 2
75464: PUSH
75465: LD_INT 3
75467: PLUS
75468: PUSH
75469: LD_INT 0
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: LIST
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: ST_TO_ADDR
// end ; end ;
75484: GO 75487
75486: POP
// result := list ;
75487: LD_ADDR_VAR 0 4
75491: PUSH
75492: LD_VAR 0 5
75496: ST_TO_ADDR
// end ;
75497: LD_VAR 0 4
75501: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75502: LD_INT 0
75504: PPUSH
75505: PPUSH
75506: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75507: LD_VAR 0 1
75511: NOT
75512: PUSH
75513: LD_VAR 0 2
75517: PUSH
75518: LD_INT 1
75520: PUSH
75521: LD_INT 2
75523: PUSH
75524: LD_INT 3
75526: PUSH
75527: LD_INT 4
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: IN
75536: NOT
75537: OR
75538: IFFALSE 75542
// exit ;
75540: GO 75634
// tmp := [ ] ;
75542: LD_ADDR_VAR 0 5
75546: PUSH
75547: EMPTY
75548: ST_TO_ADDR
// for i in units do
75549: LD_ADDR_VAR 0 4
75553: PUSH
75554: LD_VAR 0 1
75558: PUSH
75559: FOR_IN
75560: IFFALSE 75603
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75562: LD_ADDR_VAR 0 5
75566: PUSH
75567: LD_VAR 0 5
75571: PPUSH
75572: LD_VAR 0 5
75576: PUSH
75577: LD_INT 1
75579: PLUS
75580: PPUSH
75581: LD_VAR 0 4
75585: PPUSH
75586: LD_VAR 0 2
75590: PPUSH
75591: CALL_OW 259
75595: PPUSH
75596: CALL_OW 2
75600: ST_TO_ADDR
75601: GO 75559
75603: POP
75604: POP
// if not tmp then
75605: LD_VAR 0 5
75609: NOT
75610: IFFALSE 75614
// exit ;
75612: GO 75634
// result := SortListByListDesc ( units , tmp ) ;
75614: LD_ADDR_VAR 0 3
75618: PUSH
75619: LD_VAR 0 1
75623: PPUSH
75624: LD_VAR 0 5
75628: PPUSH
75629: CALL_OW 77
75633: ST_TO_ADDR
// end ;
75634: LD_VAR 0 3
75638: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75639: LD_INT 0
75641: PPUSH
75642: PPUSH
75643: PPUSH
// result := false ;
75644: LD_ADDR_VAR 0 3
75648: PUSH
75649: LD_INT 0
75651: ST_TO_ADDR
// x := GetX ( building ) ;
75652: LD_ADDR_VAR 0 4
75656: PUSH
75657: LD_VAR 0 2
75661: PPUSH
75662: CALL_OW 250
75666: ST_TO_ADDR
// y := GetY ( building ) ;
75667: LD_ADDR_VAR 0 5
75671: PUSH
75672: LD_VAR 0 2
75676: PPUSH
75677: CALL_OW 251
75681: ST_TO_ADDR
// if not building or not x or not y then
75682: LD_VAR 0 2
75686: NOT
75687: PUSH
75688: LD_VAR 0 4
75692: NOT
75693: OR
75694: PUSH
75695: LD_VAR 0 5
75699: NOT
75700: OR
75701: IFFALSE 75705
// exit ;
75703: GO 75797
// if GetTaskList ( unit ) then
75705: LD_VAR 0 1
75709: PPUSH
75710: CALL_OW 437
75714: IFFALSE 75797
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75716: LD_STRING e
75718: PUSH
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 437
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: PUSH
75733: LD_INT 1
75735: ARRAY
75736: EQUAL
75737: PUSH
75738: LD_VAR 0 4
75742: PUSH
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 437
75752: PUSH
75753: LD_INT 1
75755: ARRAY
75756: PUSH
75757: LD_INT 2
75759: ARRAY
75760: EQUAL
75761: AND
75762: PUSH
75763: LD_VAR 0 5
75767: PUSH
75768: LD_VAR 0 1
75772: PPUSH
75773: CALL_OW 437
75777: PUSH
75778: LD_INT 1
75780: ARRAY
75781: PUSH
75782: LD_INT 3
75784: ARRAY
75785: EQUAL
75786: AND
75787: IFFALSE 75797
// result := true end ;
75789: LD_ADDR_VAR 0 3
75793: PUSH
75794: LD_INT 1
75796: ST_TO_ADDR
// end ;
75797: LD_VAR 0 3
75801: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75802: LD_INT 0
75804: PPUSH
// result := false ;
75805: LD_ADDR_VAR 0 4
75809: PUSH
75810: LD_INT 0
75812: ST_TO_ADDR
// if GetTaskList ( unit ) then
75813: LD_VAR 0 1
75817: PPUSH
75818: CALL_OW 437
75822: IFFALSE 75905
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75824: LD_STRING M
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: CALL_OW 437
75836: PUSH
75837: LD_INT 1
75839: ARRAY
75840: PUSH
75841: LD_INT 1
75843: ARRAY
75844: EQUAL
75845: PUSH
75846: LD_VAR 0 2
75850: PUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 437
75860: PUSH
75861: LD_INT 1
75863: ARRAY
75864: PUSH
75865: LD_INT 2
75867: ARRAY
75868: EQUAL
75869: AND
75870: PUSH
75871: LD_VAR 0 3
75875: PUSH
75876: LD_VAR 0 1
75880: PPUSH
75881: CALL_OW 437
75885: PUSH
75886: LD_INT 1
75888: ARRAY
75889: PUSH
75890: LD_INT 3
75892: ARRAY
75893: EQUAL
75894: AND
75895: IFFALSE 75905
// result := true ;
75897: LD_ADDR_VAR 0 4
75901: PUSH
75902: LD_INT 1
75904: ST_TO_ADDR
// end ; end ;
75905: LD_VAR 0 4
75909: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75910: LD_INT 0
75912: PPUSH
75913: PPUSH
75914: PPUSH
75915: PPUSH
// if not unit or not area then
75916: LD_VAR 0 1
75920: NOT
75921: PUSH
75922: LD_VAR 0 2
75926: NOT
75927: OR
75928: IFFALSE 75932
// exit ;
75930: GO 76096
// tmp := AreaToList ( area , i ) ;
75932: LD_ADDR_VAR 0 6
75936: PUSH
75937: LD_VAR 0 2
75941: PPUSH
75942: LD_VAR 0 5
75946: PPUSH
75947: CALL_OW 517
75951: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75952: LD_ADDR_VAR 0 5
75956: PUSH
75957: DOUBLE
75958: LD_INT 1
75960: DEC
75961: ST_TO_ADDR
75962: LD_VAR 0 6
75966: PUSH
75967: LD_INT 1
75969: ARRAY
75970: PUSH
75971: FOR_TO
75972: IFFALSE 76094
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75974: LD_ADDR_VAR 0 7
75978: PUSH
75979: LD_VAR 0 6
75983: PUSH
75984: LD_INT 1
75986: ARRAY
75987: PUSH
75988: LD_VAR 0 5
75992: ARRAY
75993: PUSH
75994: LD_VAR 0 6
75998: PUSH
75999: LD_INT 2
76001: ARRAY
76002: PUSH
76003: LD_VAR 0 5
76007: ARRAY
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76013: LD_VAR 0 7
76017: PUSH
76018: LD_INT 1
76020: ARRAY
76021: PPUSH
76022: LD_VAR 0 7
76026: PUSH
76027: LD_INT 2
76029: ARRAY
76030: PPUSH
76031: CALL_OW 428
76035: PUSH
76036: LD_INT 0
76038: EQUAL
76039: IFFALSE 76092
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76041: LD_VAR 0 1
76045: PPUSH
76046: LD_VAR 0 7
76050: PUSH
76051: LD_INT 1
76053: ARRAY
76054: PPUSH
76055: LD_VAR 0 7
76059: PUSH
76060: LD_INT 2
76062: ARRAY
76063: PPUSH
76064: LD_VAR 0 3
76068: PPUSH
76069: CALL_OW 48
// result := IsPlaced ( unit ) ;
76073: LD_ADDR_VAR 0 4
76077: PUSH
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 305
76087: ST_TO_ADDR
// exit ;
76088: POP
76089: POP
76090: GO 76096
// end ; end ;
76092: GO 75971
76094: POP
76095: POP
// end ;
76096: LD_VAR 0 4
76100: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76101: LD_INT 0
76103: PPUSH
76104: PPUSH
76105: PPUSH
// if not side or side > 8 then
76106: LD_VAR 0 1
76110: NOT
76111: PUSH
76112: LD_VAR 0 1
76116: PUSH
76117: LD_INT 8
76119: GREATER
76120: OR
76121: IFFALSE 76125
// exit ;
76123: GO 76312
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76125: LD_ADDR_VAR 0 4
76129: PUSH
76130: LD_INT 22
76132: PUSH
76133: LD_VAR 0 1
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 21
76144: PUSH
76145: LD_INT 3
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PPUSH
76156: CALL_OW 69
76160: ST_TO_ADDR
// if not tmp then
76161: LD_VAR 0 4
76165: NOT
76166: IFFALSE 76170
// exit ;
76168: GO 76312
// enable_addtolog := true ;
76170: LD_ADDR_OWVAR 81
76174: PUSH
76175: LD_INT 1
76177: ST_TO_ADDR
// AddToLog ( [ ) ;
76178: LD_STRING [
76180: PPUSH
76181: CALL_OW 561
// for i in tmp do
76185: LD_ADDR_VAR 0 3
76189: PUSH
76190: LD_VAR 0 4
76194: PUSH
76195: FOR_IN
76196: IFFALSE 76303
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76198: LD_STRING [
76200: PUSH
76201: LD_VAR 0 3
76205: PPUSH
76206: CALL_OW 266
76210: STR
76211: PUSH
76212: LD_STRING , 
76214: STR
76215: PUSH
76216: LD_VAR 0 3
76220: PPUSH
76221: CALL_OW 250
76225: STR
76226: PUSH
76227: LD_STRING , 
76229: STR
76230: PUSH
76231: LD_VAR 0 3
76235: PPUSH
76236: CALL_OW 251
76240: STR
76241: PUSH
76242: LD_STRING , 
76244: STR
76245: PUSH
76246: LD_VAR 0 3
76250: PPUSH
76251: CALL_OW 254
76255: STR
76256: PUSH
76257: LD_STRING , 
76259: STR
76260: PUSH
76261: LD_VAR 0 3
76265: PPUSH
76266: LD_INT 1
76268: PPUSH
76269: CALL_OW 268
76273: STR
76274: PUSH
76275: LD_STRING , 
76277: STR
76278: PUSH
76279: LD_VAR 0 3
76283: PPUSH
76284: LD_INT 2
76286: PPUSH
76287: CALL_OW 268
76291: STR
76292: PUSH
76293: LD_STRING ],
76295: STR
76296: PPUSH
76297: CALL_OW 561
// end ;
76301: GO 76195
76303: POP
76304: POP
// AddToLog ( ]; ) ;
76305: LD_STRING ];
76307: PPUSH
76308: CALL_OW 561
// end ;
76312: LD_VAR 0 2
76316: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76317: LD_INT 0
76319: PPUSH
76320: PPUSH
76321: PPUSH
76322: PPUSH
76323: PPUSH
// if not area or not rate or not max then
76324: LD_VAR 0 1
76328: NOT
76329: PUSH
76330: LD_VAR 0 2
76334: NOT
76335: OR
76336: PUSH
76337: LD_VAR 0 4
76341: NOT
76342: OR
76343: IFFALSE 76347
// exit ;
76345: GO 76536
// while 1 do
76347: LD_INT 1
76349: IFFALSE 76536
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76351: LD_ADDR_VAR 0 9
76355: PUSH
76356: LD_VAR 0 1
76360: PPUSH
76361: LD_INT 1
76363: PPUSH
76364: CALL_OW 287
76368: PUSH
76369: LD_INT 10
76371: MUL
76372: ST_TO_ADDR
// r := rate / 10 ;
76373: LD_ADDR_VAR 0 7
76377: PUSH
76378: LD_VAR 0 2
76382: PUSH
76383: LD_INT 10
76385: DIVREAL
76386: ST_TO_ADDR
// time := 1 1$00 ;
76387: LD_ADDR_VAR 0 8
76391: PUSH
76392: LD_INT 2100
76394: ST_TO_ADDR
// if amount < min then
76395: LD_VAR 0 9
76399: PUSH
76400: LD_VAR 0 3
76404: LESS
76405: IFFALSE 76423
// r := r * 2 else
76407: LD_ADDR_VAR 0 7
76411: PUSH
76412: LD_VAR 0 7
76416: PUSH
76417: LD_INT 2
76419: MUL
76420: ST_TO_ADDR
76421: GO 76449
// if amount > max then
76423: LD_VAR 0 9
76427: PUSH
76428: LD_VAR 0 4
76432: GREATER
76433: IFFALSE 76449
// r := r / 2 ;
76435: LD_ADDR_VAR 0 7
76439: PUSH
76440: LD_VAR 0 7
76444: PUSH
76445: LD_INT 2
76447: DIVREAL
76448: ST_TO_ADDR
// time := time / r ;
76449: LD_ADDR_VAR 0 8
76453: PUSH
76454: LD_VAR 0 8
76458: PUSH
76459: LD_VAR 0 7
76463: DIVREAL
76464: ST_TO_ADDR
// if time < 0 then
76465: LD_VAR 0 8
76469: PUSH
76470: LD_INT 0
76472: LESS
76473: IFFALSE 76490
// time := time * - 1 ;
76475: LD_ADDR_VAR 0 8
76479: PUSH
76480: LD_VAR 0 8
76484: PUSH
76485: LD_INT 1
76487: NEG
76488: MUL
76489: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76490: LD_VAR 0 8
76494: PUSH
76495: LD_INT 35
76497: PPUSH
76498: LD_INT 875
76500: PPUSH
76501: CALL_OW 12
76505: PLUS
76506: PPUSH
76507: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76511: LD_INT 1
76513: PPUSH
76514: LD_INT 5
76516: PPUSH
76517: CALL_OW 12
76521: PPUSH
76522: LD_VAR 0 1
76526: PPUSH
76527: LD_INT 1
76529: PPUSH
76530: CALL_OW 55
// end ;
76534: GO 76347
// end ;
76536: LD_VAR 0 5
76540: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76541: LD_INT 0
76543: PPUSH
76544: PPUSH
76545: PPUSH
76546: PPUSH
76547: PPUSH
76548: PPUSH
76549: PPUSH
76550: PPUSH
// if not turrets or not factories then
76551: LD_VAR 0 1
76555: NOT
76556: PUSH
76557: LD_VAR 0 2
76561: NOT
76562: OR
76563: IFFALSE 76567
// exit ;
76565: GO 76874
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76567: LD_ADDR_VAR 0 10
76571: PUSH
76572: LD_INT 5
76574: PUSH
76575: LD_INT 6
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 2
76584: PUSH
76585: LD_INT 4
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 3
76594: PUSH
76595: LD_INT 5
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: LIST
76606: PUSH
76607: LD_INT 24
76609: PUSH
76610: LD_INT 25
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 23
76619: PUSH
76620: LD_INT 27
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: PUSH
76631: LD_INT 42
76633: PUSH
76634: LD_INT 43
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 44
76643: PUSH
76644: LD_INT 46
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: LD_INT 45
76653: PUSH
76654: LD_INT 47
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: LIST
76670: ST_TO_ADDR
// result := [ ] ;
76671: LD_ADDR_VAR 0 3
76675: PUSH
76676: EMPTY
76677: ST_TO_ADDR
// for i in turrets do
76678: LD_ADDR_VAR 0 4
76682: PUSH
76683: LD_VAR 0 1
76687: PUSH
76688: FOR_IN
76689: IFFALSE 76872
// begin nat := GetNation ( i ) ;
76691: LD_ADDR_VAR 0 7
76695: PUSH
76696: LD_VAR 0 4
76700: PPUSH
76701: CALL_OW 248
76705: ST_TO_ADDR
// weapon := 0 ;
76706: LD_ADDR_VAR 0 8
76710: PUSH
76711: LD_INT 0
76713: ST_TO_ADDR
// if not nat then
76714: LD_VAR 0 7
76718: NOT
76719: IFFALSE 76723
// continue ;
76721: GO 76688
// for j in list [ nat ] do
76723: LD_ADDR_VAR 0 5
76727: PUSH
76728: LD_VAR 0 10
76732: PUSH
76733: LD_VAR 0 7
76737: ARRAY
76738: PUSH
76739: FOR_IN
76740: IFFALSE 76781
// if GetBWeapon ( i ) = j [ 1 ] then
76742: LD_VAR 0 4
76746: PPUSH
76747: CALL_OW 269
76751: PUSH
76752: LD_VAR 0 5
76756: PUSH
76757: LD_INT 1
76759: ARRAY
76760: EQUAL
76761: IFFALSE 76779
// begin weapon := j [ 2 ] ;
76763: LD_ADDR_VAR 0 8
76767: PUSH
76768: LD_VAR 0 5
76772: PUSH
76773: LD_INT 2
76775: ARRAY
76776: ST_TO_ADDR
// break ;
76777: GO 76781
// end ;
76779: GO 76739
76781: POP
76782: POP
// if not weapon then
76783: LD_VAR 0 8
76787: NOT
76788: IFFALSE 76792
// continue ;
76790: GO 76688
// for k in factories do
76792: LD_ADDR_VAR 0 6
76796: PUSH
76797: LD_VAR 0 2
76801: PUSH
76802: FOR_IN
76803: IFFALSE 76868
// begin weapons := AvailableWeaponList ( k ) ;
76805: LD_ADDR_VAR 0 9
76809: PUSH
76810: LD_VAR 0 6
76814: PPUSH
76815: CALL_OW 478
76819: ST_TO_ADDR
// if not weapons then
76820: LD_VAR 0 9
76824: NOT
76825: IFFALSE 76829
// continue ;
76827: GO 76802
// if weapon in weapons then
76829: LD_VAR 0 8
76833: PUSH
76834: LD_VAR 0 9
76838: IN
76839: IFFALSE 76866
// begin result := [ i , weapon ] ;
76841: LD_ADDR_VAR 0 3
76845: PUSH
76846: LD_VAR 0 4
76850: PUSH
76851: LD_VAR 0 8
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: ST_TO_ADDR
// exit ;
76860: POP
76861: POP
76862: POP
76863: POP
76864: GO 76874
// end ; end ;
76866: GO 76802
76868: POP
76869: POP
// end ;
76870: GO 76688
76872: POP
76873: POP
// end ;
76874: LD_VAR 0 3
76878: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76879: LD_INT 0
76881: PPUSH
// if not side or side > 8 then
76882: LD_VAR 0 3
76886: NOT
76887: PUSH
76888: LD_VAR 0 3
76892: PUSH
76893: LD_INT 8
76895: GREATER
76896: OR
76897: IFFALSE 76901
// exit ;
76899: GO 76960
// if not range then
76901: LD_VAR 0 4
76905: NOT
76906: IFFALSE 76917
// range := - 12 ;
76908: LD_ADDR_VAR 0 4
76912: PUSH
76913: LD_INT 12
76915: NEG
76916: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76917: LD_VAR 0 1
76921: PPUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: LD_VAR 0 3
76931: PPUSH
76932: LD_VAR 0 4
76936: PPUSH
76937: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: LD_VAR 0 3
76955: PPUSH
76956: CALL_OW 331
// end ;
76960: LD_VAR 0 5
76964: RET
// export function Video ( mode ) ; begin
76965: LD_INT 0
76967: PPUSH
// ingame_video = mode ;
76968: LD_ADDR_OWVAR 52
76972: PUSH
76973: LD_VAR 0 1
76977: ST_TO_ADDR
// interface_hidden = mode ;
76978: LD_ADDR_OWVAR 54
76982: PUSH
76983: LD_VAR 0 1
76987: ST_TO_ADDR
// end ;
76988: LD_VAR 0 2
76992: RET
// export function Join ( array , element ) ; begin
76993: LD_INT 0
76995: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76996: LD_ADDR_VAR 0 3
77000: PUSH
77001: LD_VAR 0 1
77005: PPUSH
77006: LD_VAR 0 1
77010: PUSH
77011: LD_INT 1
77013: PLUS
77014: PPUSH
77015: LD_VAR 0 2
77019: PPUSH
77020: CALL_OW 1
77024: ST_TO_ADDR
// end ;
77025: LD_VAR 0 3
77029: RET
// export function JoinUnion ( array , element ) ; begin
77030: LD_INT 0
77032: PPUSH
// result := array union element ;
77033: LD_ADDR_VAR 0 3
77037: PUSH
77038: LD_VAR 0 1
77042: PUSH
77043: LD_VAR 0 2
77047: UNION
77048: ST_TO_ADDR
// end ;
77049: LD_VAR 0 3
77053: RET
// export function GetBehemoths ( side ) ; begin
77054: LD_INT 0
77056: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77057: LD_ADDR_VAR 0 2
77061: PUSH
77062: LD_INT 22
77064: PUSH
77065: LD_VAR 0 1
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PUSH
77074: LD_INT 31
77076: PUSH
77077: LD_INT 25
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PPUSH
77088: CALL_OW 69
77092: ST_TO_ADDR
// end ;
77093: LD_VAR 0 2
77097: RET
// export function Shuffle ( array ) ; var i , index ; begin
77098: LD_INT 0
77100: PPUSH
77101: PPUSH
77102: PPUSH
// result := [ ] ;
77103: LD_ADDR_VAR 0 2
77107: PUSH
77108: EMPTY
77109: ST_TO_ADDR
// if not array then
77110: LD_VAR 0 1
77114: NOT
77115: IFFALSE 77119
// exit ;
77117: GO 77218
// Randomize ;
77119: CALL_OW 10
// for i = array downto 1 do
77123: LD_ADDR_VAR 0 3
77127: PUSH
77128: DOUBLE
77129: LD_VAR 0 1
77133: INC
77134: ST_TO_ADDR
77135: LD_INT 1
77137: PUSH
77138: FOR_DOWNTO
77139: IFFALSE 77216
// begin index := rand ( 1 , array ) ;
77141: LD_ADDR_VAR 0 4
77145: PUSH
77146: LD_INT 1
77148: PPUSH
77149: LD_VAR 0 1
77153: PPUSH
77154: CALL_OW 12
77158: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77159: LD_ADDR_VAR 0 2
77163: PUSH
77164: LD_VAR 0 2
77168: PPUSH
77169: LD_VAR 0 2
77173: PUSH
77174: LD_INT 1
77176: PLUS
77177: PPUSH
77178: LD_VAR 0 1
77182: PUSH
77183: LD_VAR 0 4
77187: ARRAY
77188: PPUSH
77189: CALL_OW 2
77193: ST_TO_ADDR
// array := Delete ( array , index ) ;
77194: LD_ADDR_VAR 0 1
77198: PUSH
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_VAR 0 4
77208: PPUSH
77209: CALL_OW 3
77213: ST_TO_ADDR
// end ;
77214: GO 77138
77216: POP
77217: POP
// end ;
77218: LD_VAR 0 2
77222: RET
// export function GetBaseMaterials ( base ) ; begin
77223: LD_INT 0
77225: PPUSH
// result := [ 0 , 0 , 0 ] ;
77226: LD_ADDR_VAR 0 2
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: LD_INT 0
77236: PUSH
77237: LD_INT 0
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: LIST
77244: ST_TO_ADDR
// if not base then
77245: LD_VAR 0 1
77249: NOT
77250: IFFALSE 77254
// exit ;
77252: GO 77303
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77254: LD_ADDR_VAR 0 2
77258: PUSH
77259: LD_VAR 0 1
77263: PPUSH
77264: LD_INT 1
77266: PPUSH
77267: CALL_OW 275
77271: PUSH
77272: LD_VAR 0 1
77276: PPUSH
77277: LD_INT 2
77279: PPUSH
77280: CALL_OW 275
77284: PUSH
77285: LD_VAR 0 1
77289: PPUSH
77290: LD_INT 3
77292: PPUSH
77293: CALL_OW 275
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: LIST
77302: ST_TO_ADDR
// end ;
77303: LD_VAR 0 2
77307: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77308: LD_INT 0
77310: PPUSH
77311: PPUSH
// result := array ;
77312: LD_ADDR_VAR 0 3
77316: PUSH
77317: LD_VAR 0 1
77321: ST_TO_ADDR
// if size > 0 then
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 0
77329: GREATER
77330: IFFALSE 77376
// for i := array downto size do
77332: LD_ADDR_VAR 0 4
77336: PUSH
77337: DOUBLE
77338: LD_VAR 0 1
77342: INC
77343: ST_TO_ADDR
77344: LD_VAR 0 2
77348: PUSH
77349: FOR_DOWNTO
77350: IFFALSE 77374
// result := Delete ( result , result ) ;
77352: LD_ADDR_VAR 0 3
77356: PUSH
77357: LD_VAR 0 3
77361: PPUSH
77362: LD_VAR 0 3
77366: PPUSH
77367: CALL_OW 3
77371: ST_TO_ADDR
77372: GO 77349
77374: POP
77375: POP
// end ;
77376: LD_VAR 0 3
77380: RET
// export function ComExit ( unit ) ; var tmp ; begin
77381: LD_INT 0
77383: PPUSH
77384: PPUSH
// if not IsInUnit ( unit ) then
77385: LD_VAR 0 1
77389: PPUSH
77390: CALL_OW 310
77394: NOT
77395: IFFALSE 77399
// exit ;
77397: GO 77459
// tmp := IsInUnit ( unit ) ;
77399: LD_ADDR_VAR 0 3
77403: PUSH
77404: LD_VAR 0 1
77408: PPUSH
77409: CALL_OW 310
77413: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77414: LD_VAR 0 3
77418: PPUSH
77419: CALL_OW 247
77423: PUSH
77424: LD_INT 2
77426: EQUAL
77427: IFFALSE 77440
// ComExitVehicle ( unit ) else
77429: LD_VAR 0 1
77433: PPUSH
77434: CALL_OW 121
77438: GO 77449
// ComExitBuilding ( unit ) ;
77440: LD_VAR 0 1
77444: PPUSH
77445: CALL_OW 122
// result := tmp ;
77449: LD_ADDR_VAR 0 2
77453: PUSH
77454: LD_VAR 0 3
77458: ST_TO_ADDR
// end ;
77459: LD_VAR 0 2
77463: RET
// export function ComExitAll ( units ) ; var i ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
// if not units then
77468: LD_VAR 0 1
77472: NOT
77473: IFFALSE 77477
// exit ;
77475: GO 77503
// for i in units do
77477: LD_ADDR_VAR 0 3
77481: PUSH
77482: LD_VAR 0 1
77486: PUSH
77487: FOR_IN
77488: IFFALSE 77501
// ComExit ( i ) ;
77490: LD_VAR 0 3
77494: PPUSH
77495: CALL 77381 0 1
77499: GO 77487
77501: POP
77502: POP
// end ;
77503: LD_VAR 0 2
77507: RET
// export function ResetHc ; begin
77508: LD_INT 0
77510: PPUSH
// InitHc ;
77511: CALL_OW 19
// hc_importance := 0 ;
77515: LD_ADDR_OWVAR 32
77519: PUSH
77520: LD_INT 0
77522: ST_TO_ADDR
// end ;
77523: LD_VAR 0 1
77527: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77528: LD_INT 0
77530: PPUSH
77531: PPUSH
77532: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77533: LD_ADDR_VAR 0 6
77537: PUSH
77538: LD_VAR 0 1
77542: PUSH
77543: LD_VAR 0 3
77547: PLUS
77548: PUSH
77549: LD_INT 2
77551: DIV
77552: ST_TO_ADDR
// if _x < 0 then
77553: LD_VAR 0 6
77557: PUSH
77558: LD_INT 0
77560: LESS
77561: IFFALSE 77578
// _x := _x * - 1 ;
77563: LD_ADDR_VAR 0 6
77567: PUSH
77568: LD_VAR 0 6
77572: PUSH
77573: LD_INT 1
77575: NEG
77576: MUL
77577: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77578: LD_ADDR_VAR 0 7
77582: PUSH
77583: LD_VAR 0 2
77587: PUSH
77588: LD_VAR 0 4
77592: PLUS
77593: PUSH
77594: LD_INT 2
77596: DIV
77597: ST_TO_ADDR
// if _y < 0 then
77598: LD_VAR 0 7
77602: PUSH
77603: LD_INT 0
77605: LESS
77606: IFFALSE 77623
// _y := _y * - 1 ;
77608: LD_ADDR_VAR 0 7
77612: PUSH
77613: LD_VAR 0 7
77617: PUSH
77618: LD_INT 1
77620: NEG
77621: MUL
77622: ST_TO_ADDR
// result := [ _x , _y ] ;
77623: LD_ADDR_VAR 0 5
77627: PUSH
77628: LD_VAR 0 6
77632: PUSH
77633: LD_VAR 0 7
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: ST_TO_ADDR
// end ;
77642: LD_VAR 0 5
77646: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77647: LD_INT 0
77649: PPUSH
77650: PPUSH
77651: PPUSH
77652: PPUSH
// task := GetTaskList ( unit ) ;
77653: LD_ADDR_VAR 0 7
77657: PUSH
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 437
77667: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77668: LD_VAR 0 7
77672: NOT
77673: PUSH
77674: LD_VAR 0 1
77678: PPUSH
77679: LD_VAR 0 2
77683: PPUSH
77684: CALL_OW 308
77688: NOT
77689: AND
77690: IFFALSE 77694
// exit ;
77692: GO 77812
// if IsInArea ( unit , area ) then
77694: LD_VAR 0 1
77698: PPUSH
77699: LD_VAR 0 2
77703: PPUSH
77704: CALL_OW 308
77708: IFFALSE 77726
// begin ComMoveToArea ( unit , goAway ) ;
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_VAR 0 3
77719: PPUSH
77720: CALL_OW 113
// exit ;
77724: GO 77812
// end ; if task [ 1 ] [ 1 ] <> M then
77726: LD_VAR 0 7
77730: PUSH
77731: LD_INT 1
77733: ARRAY
77734: PUSH
77735: LD_INT 1
77737: ARRAY
77738: PUSH
77739: LD_STRING M
77741: NONEQUAL
77742: IFFALSE 77746
// exit ;
77744: GO 77812
// x := task [ 1 ] [ 2 ] ;
77746: LD_ADDR_VAR 0 5
77750: PUSH
77751: LD_VAR 0 7
77755: PUSH
77756: LD_INT 1
77758: ARRAY
77759: PUSH
77760: LD_INT 2
77762: ARRAY
77763: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77764: LD_ADDR_VAR 0 6
77768: PUSH
77769: LD_VAR 0 7
77773: PUSH
77774: LD_INT 1
77776: ARRAY
77777: PUSH
77778: LD_INT 3
77780: ARRAY
77781: ST_TO_ADDR
// if InArea ( x , y , area ) then
77782: LD_VAR 0 5
77786: PPUSH
77787: LD_VAR 0 6
77791: PPUSH
77792: LD_VAR 0 2
77796: PPUSH
77797: CALL_OW 309
77801: IFFALSE 77812
// ComStop ( unit ) ;
77803: LD_VAR 0 1
77807: PPUSH
77808: CALL_OW 141
// end ;
77812: LD_VAR 0 4
77816: RET
// export function Abs ( value ) ; begin
77817: LD_INT 0
77819: PPUSH
// result := value ;
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_VAR 0 1
77829: ST_TO_ADDR
// if value < 0 then
77830: LD_VAR 0 1
77834: PUSH
77835: LD_INT 0
77837: LESS
77838: IFFALSE 77855
// result := value * - 1 ;
77840: LD_ADDR_VAR 0 2
77844: PUSH
77845: LD_VAR 0 1
77849: PUSH
77850: LD_INT 1
77852: NEG
77853: MUL
77854: ST_TO_ADDR
// end ;
77855: LD_VAR 0 2
77859: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77860: LD_INT 0
77862: PPUSH
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
77869: PPUSH
// if not unit or not building then
77870: LD_VAR 0 1
77874: NOT
77875: PUSH
77876: LD_VAR 0 2
77880: NOT
77881: OR
77882: IFFALSE 77886
// exit ;
77884: GO 78112
// x := GetX ( building ) ;
77886: LD_ADDR_VAR 0 4
77890: PUSH
77891: LD_VAR 0 2
77895: PPUSH
77896: CALL_OW 250
77900: ST_TO_ADDR
// y := GetY ( building ) ;
77901: LD_ADDR_VAR 0 6
77905: PUSH
77906: LD_VAR 0 2
77910: PPUSH
77911: CALL_OW 251
77915: ST_TO_ADDR
// d := GetDir ( building ) ;
77916: LD_ADDR_VAR 0 8
77920: PUSH
77921: LD_VAR 0 2
77925: PPUSH
77926: CALL_OW 254
77930: ST_TO_ADDR
// r := 4 ;
77931: LD_ADDR_VAR 0 9
77935: PUSH
77936: LD_INT 4
77938: ST_TO_ADDR
// for i := 1 to 5 do
77939: LD_ADDR_VAR 0 10
77943: PUSH
77944: DOUBLE
77945: LD_INT 1
77947: DEC
77948: ST_TO_ADDR
77949: LD_INT 5
77951: PUSH
77952: FOR_TO
77953: IFFALSE 78110
// begin _x := ShiftX ( x , d , r + i ) ;
77955: LD_ADDR_VAR 0 5
77959: PUSH
77960: LD_VAR 0 4
77964: PPUSH
77965: LD_VAR 0 8
77969: PPUSH
77970: LD_VAR 0 9
77974: PUSH
77975: LD_VAR 0 10
77979: PLUS
77980: PPUSH
77981: CALL_OW 272
77985: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77986: LD_ADDR_VAR 0 7
77990: PUSH
77991: LD_VAR 0 6
77995: PPUSH
77996: LD_VAR 0 8
78000: PPUSH
78001: LD_VAR 0 9
78005: PUSH
78006: LD_VAR 0 10
78010: PLUS
78011: PPUSH
78012: CALL_OW 273
78016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78017: LD_VAR 0 5
78021: PPUSH
78022: LD_VAR 0 7
78026: PPUSH
78027: CALL_OW 488
78031: PUSH
78032: LD_VAR 0 5
78036: PPUSH
78037: LD_VAR 0 7
78041: PPUSH
78042: CALL_OW 428
78046: PPUSH
78047: CALL_OW 247
78051: PUSH
78052: LD_INT 3
78054: PUSH
78055: LD_INT 2
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: IN
78062: NOT
78063: AND
78064: IFFALSE 78108
// begin ComMoveXY ( unit , _x , _y ) ;
78066: LD_VAR 0 1
78070: PPUSH
78071: LD_VAR 0 5
78075: PPUSH
78076: LD_VAR 0 7
78080: PPUSH
78081: CALL_OW 111
// result := [ _x , _y ] ;
78085: LD_ADDR_VAR 0 3
78089: PUSH
78090: LD_VAR 0 5
78094: PUSH
78095: LD_VAR 0 7
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: ST_TO_ADDR
// exit ;
78104: POP
78105: POP
78106: GO 78112
// end ; end ;
78108: GO 77952
78110: POP
78111: POP
// end ;
78112: LD_VAR 0 3
78116: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78117: LD_INT 0
78119: PPUSH
78120: PPUSH
78121: PPUSH
// result := 0 ;
78122: LD_ADDR_VAR 0 3
78126: PUSH
78127: LD_INT 0
78129: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78130: LD_VAR 0 1
78134: PUSH
78135: LD_INT 0
78137: LESS
78138: PUSH
78139: LD_VAR 0 1
78143: PUSH
78144: LD_INT 8
78146: GREATER
78147: OR
78148: PUSH
78149: LD_VAR 0 2
78153: PUSH
78154: LD_INT 0
78156: LESS
78157: OR
78158: PUSH
78159: LD_VAR 0 2
78163: PUSH
78164: LD_INT 8
78166: GREATER
78167: OR
78168: IFFALSE 78172
// exit ;
78170: GO 78247
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78172: LD_ADDR_VAR 0 4
78176: PUSH
78177: LD_INT 22
78179: PUSH
78180: LD_VAR 0 2
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: PPUSH
78189: CALL_OW 69
78193: PUSH
78194: FOR_IN
78195: IFFALSE 78245
// begin un := UnitShoot ( i ) ;
78197: LD_ADDR_VAR 0 5
78201: PUSH
78202: LD_VAR 0 4
78206: PPUSH
78207: CALL_OW 504
78211: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78212: LD_VAR 0 5
78216: PPUSH
78217: CALL_OW 255
78221: PUSH
78222: LD_VAR 0 1
78226: EQUAL
78227: IFFALSE 78243
// begin result := un ;
78229: LD_ADDR_VAR 0 3
78233: PUSH
78234: LD_VAR 0 5
78238: ST_TO_ADDR
// exit ;
78239: POP
78240: POP
78241: GO 78247
// end ; end ;
78243: GO 78194
78245: POP
78246: POP
// end ;
78247: LD_VAR 0 3
78251: RET
// export function GetCargoBay ( units ) ; begin
78252: LD_INT 0
78254: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78255: LD_ADDR_VAR 0 2
78259: PUSH
78260: LD_VAR 0 1
78264: PPUSH
78265: LD_INT 2
78267: PUSH
78268: LD_INT 34
78270: PUSH
78271: LD_INT 12
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: PUSH
78278: LD_INT 34
78280: PUSH
78281: LD_INT 51
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 34
78290: PUSH
78291: LD_INT 32
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 34
78300: PUSH
78301: LD_EXP 50
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: PPUSH
78317: CALL_OW 72
78321: ST_TO_ADDR
// end ;
78322: LD_VAR 0 2
78326: RET
// export function Negate ( value ) ; begin
78327: LD_INT 0
78329: PPUSH
// result := not value ;
78330: LD_ADDR_VAR 0 2
78334: PUSH
78335: LD_VAR 0 1
78339: NOT
78340: ST_TO_ADDR
// end ;
78341: LD_VAR 0 2
78345: RET
// export function Inc ( value ) ; begin
78346: LD_INT 0
78348: PPUSH
// result := value + 1 ;
78349: LD_ADDR_VAR 0 2
78353: PUSH
78354: LD_VAR 0 1
78358: PUSH
78359: LD_INT 1
78361: PLUS
78362: ST_TO_ADDR
// end ;
78363: LD_VAR 0 2
78367: RET
// export function Dec ( value ) ; begin
78368: LD_INT 0
78370: PPUSH
// result := value - 1 ;
78371: LD_ADDR_VAR 0 2
78375: PUSH
78376: LD_VAR 0 1
78380: PUSH
78381: LD_INT 1
78383: MINUS
78384: ST_TO_ADDR
// end ;
78385: LD_VAR 0 2
78389: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78390: LD_INT 0
78392: PPUSH
78393: PPUSH
78394: PPUSH
78395: PPUSH
78396: PPUSH
78397: PPUSH
78398: PPUSH
78399: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78400: LD_VAR 0 1
78404: PPUSH
78405: LD_VAR 0 2
78409: PPUSH
78410: CALL_OW 488
78414: NOT
78415: PUSH
78416: LD_VAR 0 3
78420: PPUSH
78421: LD_VAR 0 4
78425: PPUSH
78426: CALL_OW 488
78430: NOT
78431: OR
78432: IFFALSE 78445
// begin result := - 1 ;
78434: LD_ADDR_VAR 0 5
78438: PUSH
78439: LD_INT 1
78441: NEG
78442: ST_TO_ADDR
// exit ;
78443: GO 78680
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78445: LD_ADDR_VAR 0 12
78449: PUSH
78450: LD_VAR 0 1
78454: PPUSH
78455: LD_VAR 0 2
78459: PPUSH
78460: LD_VAR 0 3
78464: PPUSH
78465: LD_VAR 0 4
78469: PPUSH
78470: CALL 77528 0 4
78474: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78475: LD_ADDR_VAR 0 11
78479: PUSH
78480: LD_VAR 0 1
78484: PPUSH
78485: LD_VAR 0 2
78489: PPUSH
78490: LD_VAR 0 12
78494: PUSH
78495: LD_INT 1
78497: ARRAY
78498: PPUSH
78499: LD_VAR 0 12
78503: PUSH
78504: LD_INT 2
78506: ARRAY
78507: PPUSH
78508: CALL_OW 298
78512: ST_TO_ADDR
// distance := 9999 ;
78513: LD_ADDR_VAR 0 10
78517: PUSH
78518: LD_INT 9999
78520: ST_TO_ADDR
// for i := 0 to 5 do
78521: LD_ADDR_VAR 0 6
78525: PUSH
78526: DOUBLE
78527: LD_INT 0
78529: DEC
78530: ST_TO_ADDR
78531: LD_INT 5
78533: PUSH
78534: FOR_TO
78535: IFFALSE 78678
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78537: LD_ADDR_VAR 0 7
78541: PUSH
78542: LD_VAR 0 1
78546: PPUSH
78547: LD_VAR 0 6
78551: PPUSH
78552: LD_VAR 0 11
78556: PPUSH
78557: CALL_OW 272
78561: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78562: LD_ADDR_VAR 0 8
78566: PUSH
78567: LD_VAR 0 2
78571: PPUSH
78572: LD_VAR 0 6
78576: PPUSH
78577: LD_VAR 0 11
78581: PPUSH
78582: CALL_OW 273
78586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78587: LD_VAR 0 7
78591: PPUSH
78592: LD_VAR 0 8
78596: PPUSH
78597: CALL_OW 488
78601: NOT
78602: IFFALSE 78606
// continue ;
78604: GO 78534
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78606: LD_ADDR_VAR 0 9
78610: PUSH
78611: LD_VAR 0 12
78615: PUSH
78616: LD_INT 1
78618: ARRAY
78619: PPUSH
78620: LD_VAR 0 12
78624: PUSH
78625: LD_INT 2
78627: ARRAY
78628: PPUSH
78629: LD_VAR 0 7
78633: PPUSH
78634: LD_VAR 0 8
78638: PPUSH
78639: CALL_OW 298
78643: ST_TO_ADDR
// if tmp < distance then
78644: LD_VAR 0 9
78648: PUSH
78649: LD_VAR 0 10
78653: LESS
78654: IFFALSE 78676
// begin result := i ;
78656: LD_ADDR_VAR 0 5
78660: PUSH
78661: LD_VAR 0 6
78665: ST_TO_ADDR
// distance := tmp ;
78666: LD_ADDR_VAR 0 10
78670: PUSH
78671: LD_VAR 0 9
78675: ST_TO_ADDR
// end ; end ;
78676: GO 78534
78678: POP
78679: POP
// end ;
78680: LD_VAR 0 5
78684: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78685: LD_INT 0
78687: PPUSH
78688: PPUSH
// if not driver or not IsInUnit ( driver ) then
78689: LD_VAR 0 1
78693: NOT
78694: PUSH
78695: LD_VAR 0 1
78699: PPUSH
78700: CALL_OW 310
78704: NOT
78705: OR
78706: IFFALSE 78710
// exit ;
78708: GO 78800
// vehicle := IsInUnit ( driver ) ;
78710: LD_ADDR_VAR 0 3
78714: PUSH
78715: LD_VAR 0 1
78719: PPUSH
78720: CALL_OW 310
78724: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78725: LD_VAR 0 1
78729: PPUSH
78730: LD_STRING \
78732: PUSH
78733: LD_INT 0
78735: PUSH
78736: LD_INT 0
78738: PUSH
78739: LD_INT 0
78741: PUSH
78742: LD_INT 0
78744: PUSH
78745: LD_INT 0
78747: PUSH
78748: LD_INT 0
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: PUSH
78760: LD_STRING E
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: LD_INT 0
78768: PUSH
78769: LD_VAR 0 3
78773: PUSH
78774: LD_INT 0
78776: PUSH
78777: LD_INT 0
78779: PUSH
78780: LD_INT 0
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PPUSH
78796: CALL_OW 446
// end ;
78800: LD_VAR 0 2
78804: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78805: LD_INT 0
78807: PPUSH
78808: PPUSH
// if not driver or not IsInUnit ( driver ) then
78809: LD_VAR 0 1
78813: NOT
78814: PUSH
78815: LD_VAR 0 1
78819: PPUSH
78820: CALL_OW 310
78824: NOT
78825: OR
78826: IFFALSE 78830
// exit ;
78828: GO 78920
// vehicle := IsInUnit ( driver ) ;
78830: LD_ADDR_VAR 0 3
78834: PUSH
78835: LD_VAR 0 1
78839: PPUSH
78840: CALL_OW 310
78844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78845: LD_VAR 0 1
78849: PPUSH
78850: LD_STRING \
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: LD_INT 0
78864: PUSH
78865: LD_INT 0
78867: PUSH
78868: LD_INT 0
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: PUSH
78880: LD_STRING E
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: LD_INT 0
78888: PUSH
78889: LD_VAR 0 3
78893: PUSH
78894: LD_INT 0
78896: PUSH
78897: LD_INT 0
78899: PUSH
78900: LD_INT 0
78902: PUSH
78903: EMPTY
78904: LIST
78905: LIST
78906: LIST
78907: LIST
78908: LIST
78909: LIST
78910: LIST
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: PPUSH
78916: CALL_OW 447
// end ;
78920: LD_VAR 0 2
78924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78925: LD_INT 0
78927: PPUSH
78928: PPUSH
78929: PPUSH
// tmp := [ ] ;
78930: LD_ADDR_VAR 0 5
78934: PUSH
78935: EMPTY
78936: ST_TO_ADDR
// for i in units do
78937: LD_ADDR_VAR 0 4
78941: PUSH
78942: LD_VAR 0 1
78946: PUSH
78947: FOR_IN
78948: IFFALSE 78986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78950: LD_ADDR_VAR 0 5
78954: PUSH
78955: LD_VAR 0 5
78959: PPUSH
78960: LD_VAR 0 5
78964: PUSH
78965: LD_INT 1
78967: PLUS
78968: PPUSH
78969: LD_VAR 0 4
78973: PPUSH
78974: CALL_OW 256
78978: PPUSH
78979: CALL_OW 2
78983: ST_TO_ADDR
78984: GO 78947
78986: POP
78987: POP
// if not tmp then
78988: LD_VAR 0 5
78992: NOT
78993: IFFALSE 78997
// exit ;
78995: GO 79045
// if asc then
78997: LD_VAR 0 2
79001: IFFALSE 79025
// result := SortListByListAsc ( units , tmp ) else
79003: LD_ADDR_VAR 0 3
79007: PUSH
79008: LD_VAR 0 1
79012: PPUSH
79013: LD_VAR 0 5
79017: PPUSH
79018: CALL_OW 76
79022: ST_TO_ADDR
79023: GO 79045
// result := SortListByListDesc ( units , tmp ) ;
79025: LD_ADDR_VAR 0 3
79029: PUSH
79030: LD_VAR 0 1
79034: PPUSH
79035: LD_VAR 0 5
79039: PPUSH
79040: CALL_OW 77
79044: ST_TO_ADDR
// end ;
79045: LD_VAR 0 3
79049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79050: LD_INT 0
79052: PPUSH
79053: PPUSH
// task := GetTaskList ( mech ) ;
79054: LD_ADDR_VAR 0 4
79058: PUSH
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 437
79068: ST_TO_ADDR
// if not task then
79069: LD_VAR 0 4
79073: NOT
79074: IFFALSE 79078
// exit ;
79076: GO 79120
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79078: LD_ADDR_VAR 0 3
79082: PUSH
79083: LD_VAR 0 4
79087: PUSH
79088: LD_INT 1
79090: ARRAY
79091: PUSH
79092: LD_INT 1
79094: ARRAY
79095: PUSH
79096: LD_STRING r
79098: EQUAL
79099: PUSH
79100: LD_VAR 0 4
79104: PUSH
79105: LD_INT 1
79107: ARRAY
79108: PUSH
79109: LD_INT 4
79111: ARRAY
79112: PUSH
79113: LD_VAR 0 2
79117: EQUAL
79118: AND
79119: ST_TO_ADDR
// end ;
79120: LD_VAR 0 3
79124: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79125: LD_INT 0
79127: PPUSH
// SetDir ( unit , d ) ;
79128: LD_VAR 0 1
79132: PPUSH
79133: LD_VAR 0 4
79137: PPUSH
79138: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79142: LD_VAR 0 1
79146: PPUSH
79147: LD_VAR 0 2
79151: PPUSH
79152: LD_VAR 0 3
79156: PPUSH
79157: LD_VAR 0 5
79161: PPUSH
79162: CALL_OW 48
// end ;
79166: LD_VAR 0 6
79170: RET
// export function ToNaturalNumber ( number ) ; begin
79171: LD_INT 0
79173: PPUSH
// result := number div 1 ;
79174: LD_ADDR_VAR 0 2
79178: PUSH
79179: LD_VAR 0 1
79183: PUSH
79184: LD_INT 1
79186: DIV
79187: ST_TO_ADDR
// if number < 0 then
79188: LD_VAR 0 1
79192: PUSH
79193: LD_INT 0
79195: LESS
79196: IFFALSE 79206
// result := 0 ;
79198: LD_ADDR_VAR 0 2
79202: PUSH
79203: LD_INT 0
79205: ST_TO_ADDR
// end ;
79206: LD_VAR 0 2
79210: RET
// export function SortByClass ( units , class ) ; var un ; begin
79211: LD_INT 0
79213: PPUSH
79214: PPUSH
// if not units or not class then
79215: LD_VAR 0 1
79219: NOT
79220: PUSH
79221: LD_VAR 0 2
79225: NOT
79226: OR
79227: IFFALSE 79231
// exit ;
79229: GO 79326
// result := [ ] ;
79231: LD_ADDR_VAR 0 3
79235: PUSH
79236: EMPTY
79237: ST_TO_ADDR
// for un in units do
79238: LD_ADDR_VAR 0 4
79242: PUSH
79243: LD_VAR 0 1
79247: PUSH
79248: FOR_IN
79249: IFFALSE 79324
// if GetClass ( un ) = class then
79251: LD_VAR 0 4
79255: PPUSH
79256: CALL_OW 257
79260: PUSH
79261: LD_VAR 0 2
79265: EQUAL
79266: IFFALSE 79293
// result := Insert ( result , 1 , un ) else
79268: LD_ADDR_VAR 0 3
79272: PUSH
79273: LD_VAR 0 3
79277: PPUSH
79278: LD_INT 1
79280: PPUSH
79281: LD_VAR 0 4
79285: PPUSH
79286: CALL_OW 2
79290: ST_TO_ADDR
79291: GO 79322
// result := Replace ( result , result + 1 , un ) ;
79293: LD_ADDR_VAR 0 3
79297: PUSH
79298: LD_VAR 0 3
79302: PPUSH
79303: LD_VAR 0 3
79307: PUSH
79308: LD_INT 1
79310: PLUS
79311: PPUSH
79312: LD_VAR 0 4
79316: PPUSH
79317: CALL_OW 1
79321: ST_TO_ADDR
79322: GO 79248
79324: POP
79325: POP
// end ;
79326: LD_VAR 0 3
79330: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79331: LD_INT 0
79333: PPUSH
79334: PPUSH
79335: PPUSH
79336: PPUSH
79337: PPUSH
79338: PPUSH
79339: PPUSH
// result := [ ] ;
79340: LD_ADDR_VAR 0 4
79344: PUSH
79345: EMPTY
79346: ST_TO_ADDR
// if x - r < 0 then
79347: LD_VAR 0 1
79351: PUSH
79352: LD_VAR 0 3
79356: MINUS
79357: PUSH
79358: LD_INT 0
79360: LESS
79361: IFFALSE 79373
// min_x := 0 else
79363: LD_ADDR_VAR 0 8
79367: PUSH
79368: LD_INT 0
79370: ST_TO_ADDR
79371: GO 79389
// min_x := x - r ;
79373: LD_ADDR_VAR 0 8
79377: PUSH
79378: LD_VAR 0 1
79382: PUSH
79383: LD_VAR 0 3
79387: MINUS
79388: ST_TO_ADDR
// if y - r < 0 then
79389: LD_VAR 0 2
79393: PUSH
79394: LD_VAR 0 3
79398: MINUS
79399: PUSH
79400: LD_INT 0
79402: LESS
79403: IFFALSE 79415
// min_y := 0 else
79405: LD_ADDR_VAR 0 7
79409: PUSH
79410: LD_INT 0
79412: ST_TO_ADDR
79413: GO 79431
// min_y := y - r ;
79415: LD_ADDR_VAR 0 7
79419: PUSH
79420: LD_VAR 0 2
79424: PUSH
79425: LD_VAR 0 3
79429: MINUS
79430: ST_TO_ADDR
// max_x := x + r ;
79431: LD_ADDR_VAR 0 9
79435: PUSH
79436: LD_VAR 0 1
79440: PUSH
79441: LD_VAR 0 3
79445: PLUS
79446: ST_TO_ADDR
// max_y := y + r ;
79447: LD_ADDR_VAR 0 10
79451: PUSH
79452: LD_VAR 0 2
79456: PUSH
79457: LD_VAR 0 3
79461: PLUS
79462: ST_TO_ADDR
// for _x = min_x to max_x do
79463: LD_ADDR_VAR 0 5
79467: PUSH
79468: DOUBLE
79469: LD_VAR 0 8
79473: DEC
79474: ST_TO_ADDR
79475: LD_VAR 0 9
79479: PUSH
79480: FOR_TO
79481: IFFALSE 79582
// for _y = min_y to max_y do
79483: LD_ADDR_VAR 0 6
79487: PUSH
79488: DOUBLE
79489: LD_VAR 0 7
79493: DEC
79494: ST_TO_ADDR
79495: LD_VAR 0 10
79499: PUSH
79500: FOR_TO
79501: IFFALSE 79578
// begin if not ValidHex ( _x , _y ) then
79503: LD_VAR 0 5
79507: PPUSH
79508: LD_VAR 0 6
79512: PPUSH
79513: CALL_OW 488
79517: NOT
79518: IFFALSE 79522
// continue ;
79520: GO 79500
// if GetResourceTypeXY ( _x , _y ) then
79522: LD_VAR 0 5
79526: PPUSH
79527: LD_VAR 0 6
79531: PPUSH
79532: CALL_OW 283
79536: IFFALSE 79576
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79538: LD_ADDR_VAR 0 4
79542: PUSH
79543: LD_VAR 0 4
79547: PPUSH
79548: LD_VAR 0 4
79552: PUSH
79553: LD_INT 1
79555: PLUS
79556: PPUSH
79557: LD_VAR 0 5
79561: PUSH
79562: LD_VAR 0 6
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: PPUSH
79571: CALL_OW 1
79575: ST_TO_ADDR
// end ;
79576: GO 79500
79578: POP
79579: POP
79580: GO 79480
79582: POP
79583: POP
// end ;
79584: LD_VAR 0 4
79588: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79589: LD_INT 0
79591: PPUSH
79592: PPUSH
79593: PPUSH
79594: PPUSH
79595: PPUSH
79596: PPUSH
79597: PPUSH
79598: PPUSH
// if not units then
79599: LD_VAR 0 1
79603: NOT
79604: IFFALSE 79608
// exit ;
79606: GO 80134
// result := UnitFilter ( units , [ f_ok ] ) ;
79608: LD_ADDR_VAR 0 3
79612: PUSH
79613: LD_VAR 0 1
79617: PPUSH
79618: LD_INT 50
79620: PUSH
79621: EMPTY
79622: LIST
79623: PPUSH
79624: CALL_OW 72
79628: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79629: LD_ADDR_VAR 0 8
79633: PUSH
79634: LD_VAR 0 1
79638: PUSH
79639: LD_INT 1
79641: ARRAY
79642: PPUSH
79643: CALL_OW 255
79647: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79648: LD_ADDR_VAR 0 10
79652: PUSH
79653: LD_INT 29
79655: PUSH
79656: LD_EXP 53
79660: PUSH
79661: LD_INT 49
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: LIST
79668: ST_TO_ADDR
// if not result then
79669: LD_VAR 0 3
79673: NOT
79674: IFFALSE 79678
// exit ;
79676: GO 80134
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79678: LD_ADDR_VAR 0 5
79682: PUSH
79683: LD_INT 81
79685: PUSH
79686: LD_VAR 0 8
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: PPUSH
79695: CALL_OW 69
79699: ST_TO_ADDR
// for i in result do
79700: LD_ADDR_VAR 0 4
79704: PUSH
79705: LD_VAR 0 3
79709: PUSH
79710: FOR_IN
79711: IFFALSE 80132
// begin tag := GetTag ( i ) + 1 ;
79713: LD_ADDR_VAR 0 9
79717: PUSH
79718: LD_VAR 0 4
79722: PPUSH
79723: CALL_OW 110
79727: PUSH
79728: LD_INT 1
79730: PLUS
79731: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79732: LD_ADDR_VAR 0 7
79736: PUSH
79737: LD_VAR 0 4
79741: PPUSH
79742: CALL_OW 250
79746: PPUSH
79747: LD_VAR 0 4
79751: PPUSH
79752: CALL_OW 251
79756: PPUSH
79757: LD_INT 6
79759: PPUSH
79760: CALL 79331 0 3
79764: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79765: LD_VAR 0 4
79769: PPUSH
79770: CALL_OW 247
79774: PUSH
79775: LD_INT 2
79777: EQUAL
79778: PUSH
79779: LD_VAR 0 7
79783: AND
79784: PUSH
79785: LD_VAR 0 4
79789: PPUSH
79790: CALL_OW 264
79794: PUSH
79795: LD_VAR 0 10
79799: IN
79800: NOT
79801: AND
79802: IFFALSE 79841
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79804: LD_VAR 0 4
79808: PPUSH
79809: LD_VAR 0 7
79813: PUSH
79814: LD_INT 1
79816: ARRAY
79817: PUSH
79818: LD_INT 1
79820: ARRAY
79821: PPUSH
79822: LD_VAR 0 7
79826: PUSH
79827: LD_INT 1
79829: ARRAY
79830: PUSH
79831: LD_INT 2
79833: ARRAY
79834: PPUSH
79835: CALL_OW 116
79839: GO 80130
// if path > tag then
79841: LD_VAR 0 2
79845: PUSH
79846: LD_VAR 0 9
79850: GREATER
79851: IFFALSE 80059
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79853: LD_ADDR_VAR 0 6
79857: PUSH
79858: LD_VAR 0 5
79862: PPUSH
79863: LD_INT 91
79865: PUSH
79866: LD_VAR 0 4
79870: PUSH
79871: LD_INT 8
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: LIST
79878: PPUSH
79879: CALL_OW 72
79883: ST_TO_ADDR
// if nearEnemy then
79884: LD_VAR 0 6
79888: IFFALSE 79957
// begin if GetWeapon ( i ) = ru_time_lapser then
79890: LD_VAR 0 4
79894: PPUSH
79895: CALL_OW 264
79899: PUSH
79900: LD_INT 49
79902: EQUAL
79903: IFFALSE 79931
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79905: LD_VAR 0 4
79909: PPUSH
79910: LD_VAR 0 6
79914: PPUSH
79915: LD_VAR 0 4
79919: PPUSH
79920: CALL_OW 74
79924: PPUSH
79925: CALL_OW 112
79929: GO 79955
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79931: LD_VAR 0 4
79935: PPUSH
79936: LD_VAR 0 6
79940: PPUSH
79941: LD_VAR 0 4
79945: PPUSH
79946: CALL_OW 74
79950: PPUSH
79951: CALL_OW 115
// end else
79955: GO 80057
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79957: LD_VAR 0 4
79961: PPUSH
79962: LD_VAR 0 2
79966: PUSH
79967: LD_VAR 0 9
79971: ARRAY
79972: PUSH
79973: LD_INT 1
79975: ARRAY
79976: PPUSH
79977: LD_VAR 0 2
79981: PUSH
79982: LD_VAR 0 9
79986: ARRAY
79987: PUSH
79988: LD_INT 2
79990: ARRAY
79991: PPUSH
79992: CALL_OW 297
79996: PUSH
79997: LD_INT 6
79999: GREATER
80000: IFFALSE 80043
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80002: LD_VAR 0 4
80006: PPUSH
80007: LD_VAR 0 2
80011: PUSH
80012: LD_VAR 0 9
80016: ARRAY
80017: PUSH
80018: LD_INT 1
80020: ARRAY
80021: PPUSH
80022: LD_VAR 0 2
80026: PUSH
80027: LD_VAR 0 9
80031: ARRAY
80032: PUSH
80033: LD_INT 2
80035: ARRAY
80036: PPUSH
80037: CALL_OW 114
80041: GO 80057
// SetTag ( i , tag ) ;
80043: LD_VAR 0 4
80047: PPUSH
80048: LD_VAR 0 9
80052: PPUSH
80053: CALL_OW 109
// end else
80057: GO 80130
// if enemy then
80059: LD_VAR 0 5
80063: IFFALSE 80130
// begin if GetWeapon ( i ) = ru_time_lapser then
80065: LD_VAR 0 4
80069: PPUSH
80070: CALL_OW 264
80074: PUSH
80075: LD_INT 49
80077: EQUAL
80078: IFFALSE 80106
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80080: LD_VAR 0 4
80084: PPUSH
80085: LD_VAR 0 5
80089: PPUSH
80090: LD_VAR 0 4
80094: PPUSH
80095: CALL_OW 74
80099: PPUSH
80100: CALL_OW 112
80104: GO 80130
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80106: LD_VAR 0 4
80110: PPUSH
80111: LD_VAR 0 5
80115: PPUSH
80116: LD_VAR 0 4
80120: PPUSH
80121: CALL_OW 74
80125: PPUSH
80126: CALL_OW 115
// end ; end ;
80130: GO 79710
80132: POP
80133: POP
// end ;
80134: LD_VAR 0 3
80138: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80139: LD_INT 0
80141: PPUSH
80142: PPUSH
80143: PPUSH
// if not unit or IsInUnit ( unit ) then
80144: LD_VAR 0 1
80148: NOT
80149: PUSH
80150: LD_VAR 0 1
80154: PPUSH
80155: CALL_OW 310
80159: OR
80160: IFFALSE 80164
// exit ;
80162: GO 80255
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80164: LD_ADDR_VAR 0 4
80168: PUSH
80169: LD_VAR 0 1
80173: PPUSH
80174: CALL_OW 250
80178: PPUSH
80179: LD_VAR 0 2
80183: PPUSH
80184: LD_INT 1
80186: PPUSH
80187: CALL_OW 272
80191: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80192: LD_ADDR_VAR 0 5
80196: PUSH
80197: LD_VAR 0 1
80201: PPUSH
80202: CALL_OW 251
80206: PPUSH
80207: LD_VAR 0 2
80211: PPUSH
80212: LD_INT 1
80214: PPUSH
80215: CALL_OW 273
80219: ST_TO_ADDR
// if ValidHex ( x , y ) then
80220: LD_VAR 0 4
80224: PPUSH
80225: LD_VAR 0 5
80229: PPUSH
80230: CALL_OW 488
80234: IFFALSE 80255
// ComTurnXY ( unit , x , y ) ;
80236: LD_VAR 0 1
80240: PPUSH
80241: LD_VAR 0 4
80245: PPUSH
80246: LD_VAR 0 5
80250: PPUSH
80251: CALL_OW 118
// end ;
80255: LD_VAR 0 3
80259: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80260: LD_INT 0
80262: PPUSH
80263: PPUSH
// result := false ;
80264: LD_ADDR_VAR 0 3
80268: PUSH
80269: LD_INT 0
80271: ST_TO_ADDR
// if not units then
80272: LD_VAR 0 2
80276: NOT
80277: IFFALSE 80281
// exit ;
80279: GO 80326
// for i in units do
80281: LD_ADDR_VAR 0 4
80285: PUSH
80286: LD_VAR 0 2
80290: PUSH
80291: FOR_IN
80292: IFFALSE 80324
// if See ( side , i ) then
80294: LD_VAR 0 1
80298: PPUSH
80299: LD_VAR 0 4
80303: PPUSH
80304: CALL_OW 292
80308: IFFALSE 80322
// begin result := true ;
80310: LD_ADDR_VAR 0 3
80314: PUSH
80315: LD_INT 1
80317: ST_TO_ADDR
// exit ;
80318: POP
80319: POP
80320: GO 80326
// end ;
80322: GO 80291
80324: POP
80325: POP
// end ;
80326: LD_VAR 0 3
80330: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80331: LD_INT 0
80333: PPUSH
80334: PPUSH
80335: PPUSH
80336: PPUSH
// if not unit or not points then
80337: LD_VAR 0 1
80341: NOT
80342: PUSH
80343: LD_VAR 0 2
80347: NOT
80348: OR
80349: IFFALSE 80353
// exit ;
80351: GO 80443
// dist := 99999 ;
80353: LD_ADDR_VAR 0 5
80357: PUSH
80358: LD_INT 99999
80360: ST_TO_ADDR
// for i in points do
80361: LD_ADDR_VAR 0 4
80365: PUSH
80366: LD_VAR 0 2
80370: PUSH
80371: FOR_IN
80372: IFFALSE 80441
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80374: LD_ADDR_VAR 0 6
80378: PUSH
80379: LD_VAR 0 1
80383: PPUSH
80384: LD_VAR 0 4
80388: PUSH
80389: LD_INT 1
80391: ARRAY
80392: PPUSH
80393: LD_VAR 0 4
80397: PUSH
80398: LD_INT 2
80400: ARRAY
80401: PPUSH
80402: CALL_OW 297
80406: ST_TO_ADDR
// if tmpDist < dist then
80407: LD_VAR 0 6
80411: PUSH
80412: LD_VAR 0 5
80416: LESS
80417: IFFALSE 80439
// begin result := i ;
80419: LD_ADDR_VAR 0 3
80423: PUSH
80424: LD_VAR 0 4
80428: ST_TO_ADDR
// dist := tmpDist ;
80429: LD_ADDR_VAR 0 5
80433: PUSH
80434: LD_VAR 0 6
80438: ST_TO_ADDR
// end ; end ;
80439: GO 80371
80441: POP
80442: POP
// end ;
80443: LD_VAR 0 3
80447: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80448: LD_INT 0
80450: PPUSH
// uc_side := side ;
80451: LD_ADDR_OWVAR 20
80455: PUSH
80456: LD_VAR 0 1
80460: ST_TO_ADDR
// uc_nation := 3 ;
80461: LD_ADDR_OWVAR 21
80465: PUSH
80466: LD_INT 3
80468: ST_TO_ADDR
// vc_chassis := 25 ;
80469: LD_ADDR_OWVAR 37
80473: PUSH
80474: LD_INT 25
80476: ST_TO_ADDR
// vc_engine := engine_siberite ;
80477: LD_ADDR_OWVAR 39
80481: PUSH
80482: LD_INT 3
80484: ST_TO_ADDR
// vc_control := control_computer ;
80485: LD_ADDR_OWVAR 38
80489: PUSH
80490: LD_INT 3
80492: ST_TO_ADDR
// vc_weapon := 59 ;
80493: LD_ADDR_OWVAR 40
80497: PUSH
80498: LD_INT 59
80500: ST_TO_ADDR
// result := CreateVehicle ;
80501: LD_ADDR_VAR 0 5
80505: PUSH
80506: CALL_OW 45
80510: ST_TO_ADDR
// SetDir ( result , d ) ;
80511: LD_VAR 0 5
80515: PPUSH
80516: LD_VAR 0 4
80520: PPUSH
80521: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80525: LD_VAR 0 5
80529: PPUSH
80530: LD_VAR 0 2
80534: PPUSH
80535: LD_VAR 0 3
80539: PPUSH
80540: LD_INT 0
80542: PPUSH
80543: CALL_OW 48
// end ;
80547: LD_VAR 0 5
80551: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80552: LD_INT 0
80554: PPUSH
80555: PPUSH
80556: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80557: LD_ADDR_VAR 0 2
80561: PUSH
80562: LD_INT 0
80564: PUSH
80565: LD_INT 0
80567: PUSH
80568: LD_INT 0
80570: PUSH
80571: LD_INT 0
80573: PUSH
80574: EMPTY
80575: LIST
80576: LIST
80577: LIST
80578: LIST
80579: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80580: LD_VAR 0 1
80584: NOT
80585: PUSH
80586: LD_VAR 0 1
80590: PPUSH
80591: CALL_OW 264
80595: PUSH
80596: LD_INT 12
80598: PUSH
80599: LD_INT 51
80601: PUSH
80602: LD_INT 32
80604: PUSH
80605: LD_EXP 50
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: LIST
80614: LIST
80615: IN
80616: NOT
80617: OR
80618: IFFALSE 80622
// exit ;
80620: GO 80720
// for i := 1 to 3 do
80622: LD_ADDR_VAR 0 3
80626: PUSH
80627: DOUBLE
80628: LD_INT 1
80630: DEC
80631: ST_TO_ADDR
80632: LD_INT 3
80634: PUSH
80635: FOR_TO
80636: IFFALSE 80718
// begin tmp := GetCargo ( cargo , i ) ;
80638: LD_ADDR_VAR 0 4
80642: PUSH
80643: LD_VAR 0 1
80647: PPUSH
80648: LD_VAR 0 3
80652: PPUSH
80653: CALL_OW 289
80657: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80658: LD_ADDR_VAR 0 2
80662: PUSH
80663: LD_VAR 0 2
80667: PPUSH
80668: LD_VAR 0 3
80672: PPUSH
80673: LD_VAR 0 4
80677: PPUSH
80678: CALL_OW 1
80682: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80683: LD_ADDR_VAR 0 2
80687: PUSH
80688: LD_VAR 0 2
80692: PPUSH
80693: LD_INT 4
80695: PPUSH
80696: LD_VAR 0 2
80700: PUSH
80701: LD_INT 4
80703: ARRAY
80704: PUSH
80705: LD_VAR 0 4
80709: PLUS
80710: PPUSH
80711: CALL_OW 1
80715: ST_TO_ADDR
// end ;
80716: GO 80635
80718: POP
80719: POP
// end ;
80720: LD_VAR 0 2
80724: RET
// export function Length ( array ) ; begin
80725: LD_INT 0
80727: PPUSH
// result := array + 0 ;
80728: LD_ADDR_VAR 0 2
80732: PUSH
80733: LD_VAR 0 1
80737: PUSH
80738: LD_INT 0
80740: PLUS
80741: ST_TO_ADDR
// end ; end_of_file
80742: LD_VAR 0 2
80746: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80747: LD_VAR 0 1
80751: PUSH
80752: LD_INT 200
80754: DOUBLE
80755: GREATEREQUAL
80756: IFFALSE 80764
80758: LD_INT 299
80760: DOUBLE
80761: LESSEQUAL
80762: IFTRUE 80766
80764: GO 80798
80766: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80767: LD_VAR 0 1
80771: PPUSH
80772: LD_VAR 0 2
80776: PPUSH
80777: LD_VAR 0 3
80781: PPUSH
80782: LD_VAR 0 4
80786: PPUSH
80787: LD_VAR 0 5
80791: PPUSH
80792: CALL 35897 0 5
80796: GO 80875
80798: LD_INT 300
80800: DOUBLE
80801: GREATEREQUAL
80802: IFFALSE 80810
80804: LD_INT 399
80806: DOUBLE
80807: LESSEQUAL
80808: IFTRUE 80812
80810: GO 80874
80812: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80813: LD_VAR 0 1
80817: PPUSH
80818: LD_VAR 0 2
80822: PPUSH
80823: LD_VAR 0 3
80827: PPUSH
80828: LD_VAR 0 4
80832: PPUSH
80833: LD_VAR 0 5
80837: PPUSH
80838: LD_VAR 0 6
80842: PPUSH
80843: LD_VAR 0 7
80847: PPUSH
80848: LD_VAR 0 8
80852: PPUSH
80853: LD_VAR 0 9
80857: PPUSH
80858: LD_VAR 0 10
80862: PPUSH
80863: LD_VAR 0 11
80867: PPUSH
80868: CALL 33539 0 11
80872: GO 80875
80874: POP
// end ;
80875: PPOPN 11
80877: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80878: LD_VAR 0 1
80882: PPUSH
80883: LD_VAR 0 2
80887: PPUSH
80888: LD_VAR 0 3
80892: PPUSH
80893: LD_VAR 0 4
80897: PPUSH
80898: LD_VAR 0 5
80902: PPUSH
80903: CALL 35633 0 5
// end ; end_of_file
80907: PPOPN 5
80909: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80910: LD_VAR 0 1
80914: PPUSH
80915: LD_VAR 0 2
80919: PPUSH
80920: LD_VAR 0 3
80924: PPUSH
80925: LD_VAR 0 4
80929: PPUSH
80930: LD_VAR 0 5
80934: PPUSH
80935: LD_VAR 0 6
80939: PPUSH
80940: CALL 21232 0 6
// end ;
80944: PPOPN 6
80946: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80947: LD_INT 0
80949: PPUSH
// begin if not units then
80950: LD_VAR 0 1
80954: NOT
80955: IFFALSE 80959
// exit ;
80957: GO 81047
// if p1 = 1 then
80959: LD_VAR 0 2
80963: PUSH
80964: LD_INT 1
80966: EQUAL
80967: IFFALSE 81047
// begin if p2 = 1 then
80969: LD_VAR 0 3
80973: PUSH
80974: LD_INT 1
80976: EQUAL
80977: IFFALSE 81008
// begin for i in units do
80979: LD_ADDR_VAR 0 7
80983: PUSH
80984: LD_VAR 0 1
80988: PUSH
80989: FOR_IN
80990: IFFALSE 81006
// begin SetUnitAttackType ( i , 3 ) ;
80992: LD_VAR 0 7
80996: PPUSH
80997: LD_INT 3
80999: PPUSH
81000: CALL_OW 603
// end ;
81004: GO 80989
81006: POP
81007: POP
// end ; if p2 = 2 then
81008: LD_VAR 0 3
81012: PUSH
81013: LD_INT 2
81015: EQUAL
81016: IFFALSE 81047
// begin for i in units do
81018: LD_ADDR_VAR 0 7
81022: PUSH
81023: LD_VAR 0 1
81027: PUSH
81028: FOR_IN
81029: IFFALSE 81045
// begin SetUnitAttackType ( i , 1 ) ;
81031: LD_VAR 0 7
81035: PPUSH
81036: LD_INT 1
81038: PPUSH
81039: CALL_OW 603
// end ;
81043: GO 81028
81045: POP
81046: POP
// end ; end ; end ;
81047: PPOPN 7
81049: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81050: CALL 21207 0 0
// end ;
81054: PPOPN 1
81056: END
