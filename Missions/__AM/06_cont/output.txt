// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7922 0 0
// CreateNature ;
  57: CALL 21433 0 0
// PrepareRussian ;
  61: CALL 5806 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11241 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42672 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42672 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42672 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42672 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42672 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42672 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42672 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42672 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42672 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42672 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42672 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42672 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 4094
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3785: LD_EXP 1
3789: PPUSH
3790: LD_EXP 16
3794: PPUSH
3795: CALL_OW 296
3799: PUSH
3800: LD_INT 10
3802: GREATER
3803: IFFALSE 3886
// begin InGameOff ;
3805: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 16
3839: PPUSH
3840: CALL_OW 296
3844: PUSH
3845: LD_INT 8
3847: LESS
3848: PUSH
3849: LD_EXP 16
3853: PPUSH
3854: CALL_OW 301
3858: OR
3859: IFFALSE 3823
// if IsDead ( Joan ) then
3861: LD_EXP 16
3865: PPUSH
3866: CALL_OW 301
3870: IFFALSE 3882
// begin blockSpawn := false ;
3872: LD_ADDR_EXP 30
3876: PUSH
3877: LD_INT 0
3879: ST_TO_ADDR
// exit ;
3880: GO 4225
// end ; InGameOn ;
3882: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3886: LD_EXP 1
3890: PUSH
3891: LD_INT 55
3893: PUSH
3894: EMPTY
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: IN
3902: IFFALSE 3925
// begin ComMoveUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 112
// wait ( 0 0$05 ) ;
3918: LD_INT 175
3920: PPUSH
3921: CALL_OW 67
// end ; ComExit ( JMM ) ;
3925: LD_EXP 1
3929: PPUSH
3930: CALL 80761 0 1
// wait ( 0 0$1 ) ;
3934: LD_INT 35
3936: PPUSH
3937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3948: LD_EXP 16
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: LD_EXP 1
3966: PPUSH
3967: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_EXP 1
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 5
3988: LESS
3989: IFFALSE 3941
// ComTurnUnit ( Joan , JMM ) ;
3991: LD_EXP 16
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4005: LD_EXP 1
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 119
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// DialogueOn ;
4026: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4030: LD_EXP 16
4034: PPUSH
4035: LD_STRING D5a-Joan-4
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D5a-JMM-4
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_STRING D5a-Joan-5
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D5a-JMM-5
4073: PPUSH
4074: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4078: LD_EXP 16
4082: PPUSH
4083: LD_STRING D5a-Joan-6
4085: PPUSH
4086: CALL_OW 88
// DialogueOff ;
4090: CALL_OW 7
// end ; DialogueOn ;
4094: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_STRING D6-JMM-1
4105: PPUSH
4106: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4110: LD_EXP 16
4114: PPUSH
4115: LD_STRING D6-Joan-1
4117: PPUSH
4118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4122: LD_EXP 1
4126: PPUSH
4127: LD_STRING D6-JMM-2
4129: PPUSH
4130: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4134: LD_EXP 16
4138: PPUSH
4139: LD_STRING D6-Joan-2
4141: PPUSH
4142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_STRING D6-JMM-3
4153: PPUSH
4154: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_STRING D6-Joan-3
4165: PPUSH
4166: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4170: LD_EXP 1
4174: PPUSH
4175: LD_STRING D6-JMM-4
4177: PPUSH
4178: CALL_OW 88
// DialogueOff ;
4182: CALL_OW 7
// InGameOff ;
4186: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4202: LD_STRING MJ
4204: PPUSH
4205: CALL_OW 337
// joanStatus = 1 ;
4209: LD_ADDR_EXP 17
4213: PUSH
4214: LD_INT 1
4216: ST_TO_ADDR
// blockSpawn = 0 ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if not number or number > 8 then
4234: LD_VAR 0 1
4238: NOT
4239: PUSH
4240: LD_VAR 0 1
4244: PUSH
4245: LD_INT 8
4247: GREATER
4248: OR
4249: IFFALSE 4253
// exit ;
4251: GO 5801
// repeat wait ( 0 0$7 ) ;
4253: LD_INT 245
4255: PPUSH
4256: CALL_OW 67
// until blockSpawn = 0 ;
4260: LD_EXP 30
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4253
// uc_side := 1 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// uc_nation := 1 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// InitHc ;
4286: CALL_OW 19
// if number = 1 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4474
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_male ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 55 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 55
4331: ST_TO_ADDR
// hc_name := George McCarthy ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING George McCarthy
4339: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 11
4347: PUSH
4348: LD_INT 10
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 23
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11d-Sol4-1
4453: PPUSH
4454: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4458: LD_EXP 1
4462: PPUSH
4463: LD_STRING D11d-JMM-1
4465: PPUSH
4466: CALL_OW 88
// DialogueOff ;
4470: CALL_OW 7
// end ; if number = 2 then
4474: LD_VAR 0 1
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4658
// begin hc_class := 1 ;
4484: LD_ADDR_OWVAR 28
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// hc_sex := sex_male ;
4492: LD_ADDR_OWVAR 27
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4500: LD_ADDR_OWVAR 33
4504: PUSH
4505: LD_STRING AmGalRemake
4507: ST_TO_ADDR
// hc_face_number := 7 ;
4508: LD_ADDR_OWVAR 34
4512: PUSH
4513: LD_INT 7
4515: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4516: LD_ADDR_OWVAR 26
4520: PUSH
4521: LD_STRING Bobby Jordan
4523: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4524: LD_ADDR_OWVAR 29
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: LD_INT 11
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4539: LD_ADDR_OWVAR 30
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: LD_INT 0
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4562: LD_ADDR_OWVAR 31
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL_OW 49
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: CALL_OW 87
// DialogueOn ;
4626: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_STRING D11b-Sol3-1
4637: PPUSH
4638: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_STRING D11b-JMM-1
4649: PPUSH
4650: CALL_OW 88
// DialogueOff ;
4654: CALL_OW 7
// end ; if number = 3 then
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 3
4665: EQUAL
4666: IFFALSE 4830
// begin hc_class := 1 ;
4668: LD_ADDR_OWVAR 28
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// hc_sex := sex_male ;
4676: LD_ADDR_OWVAR 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// hc_gallery := DJ ;
4684: LD_ADDR_OWVAR 33
4688: PUSH
4689: LD_STRING DJ
4691: ST_TO_ADDR
// hc_face_number := 1 ;
4692: LD_ADDR_OWVAR 34
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// hc_name := Darius Dajay ;
4700: LD_ADDR_OWVAR 26
4704: PUSH
4705: LD_STRING Darius Dajay
4707: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4708: LD_ADDR_OWVAR 29
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4723: LD_ADDR_OWVAR 30
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4746: LD_ADDR_OWVAR 31
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 25
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4794: LD_VAR 0 3
4798: PPUSH
4799: CALL_OW 87
// wait ( 0 0$1 ) ;
4803: LD_INT 35
4805: PPUSH
4806: CALL_OW 67
// DialogueOn ;
4810: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_STRING D11f-Sol5-1
4821: PPUSH
4822: CALL_OW 88
// DialogueOff ;
4826: CALL_OW 7
// end ; if number = 4 then
4830: LD_VAR 0 1
4834: PUSH
4835: LD_INT 4
4837: EQUAL
4838: IFFALSE 4975
// begin hc_class := 2 ;
4840: LD_ADDR_OWVAR 28
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
// hc_sex := sex_female ;
4848: LD_ADDR_OWVAR 27
4852: PUSH
4853: LD_INT 2
4855: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING SecondCharsGal
4863: ST_TO_ADDR
// hc_face_number := 46 ;
4864: LD_ADDR_OWVAR 34
4868: PUSH
4869: LD_INT 46
4871: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4872: LD_ADDR_OWVAR 26
4876: PUSH
4877: LD_STRING Sylvia Creak
4879: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4880: LD_ADDR_OWVAR 29
4884: PUSH
4885: LD_INT 10
4887: PUSH
4888: LD_INT 9
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4895: LD_ADDR_OWVAR 30
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 1
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4918: LD_ADDR_OWVAR 31
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 26
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 87
// end ; if number = 5 then
4975: LD_VAR 0 1
4979: PUSH
4980: LD_INT 5
4982: EQUAL
4983: IFFALSE 5159
// begin hc_class := 1 ;
4985: LD_ADDR_OWVAR 28
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hc_sex := sex_female ;
4993: LD_ADDR_OWVAR 27
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5001: LD_ADDR_OWVAR 33
5005: PUSH
5006: LD_STRING SecondCharsGal
5008: ST_TO_ADDR
// hc_face_number := 37 ;
5009: LD_ADDR_OWVAR 34
5013: PUSH
5014: LD_INT 37
5016: ST_TO_ADDR
// hc_name := Malena Johnson ;
5017: LD_ADDR_OWVAR 26
5021: PUSH
5022: LD_STRING Malena Johnson
5024: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5025: LD_ADDR_OWVAR 29
5029: PUSH
5030: LD_INT 11
5032: PUSH
5033: LD_INT 10
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
5040: LD_ADDR_OWVAR 30
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5063: LD_ADDR_OWVAR 31
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
// un = CreateHuman ;
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: CALL_OW 44
5095: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 27
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5111: LD_VAR 0 3
5115: PPUSH
5116: CALL_OW 87
// wait ( 0 0$1 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// DialogueOn ;
5127: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_STRING D11c-FSol3-1
5138: PPUSH
5139: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D11c-JMM-1
5150: PPUSH
5151: CALL_OW 88
// DialogueOff ;
5155: CALL_OW 7
// end ; if number = 6 then
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 6
5166: EQUAL
5167: IFFALSE 5341
// begin hc_class := 1 ;
5169: LD_ADDR_OWVAR 28
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_sex := sex_male ;
5177: LD_ADDR_OWVAR 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING AmGalRemake
5192: ST_TO_ADDR
// hc_face_number := 1 ;
5193: LD_ADDR_OWVAR 34
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// hc_name := Charles Brown ;
5201: LD_ADDR_OWVAR 26
5205: PUSH
5206: LD_STRING Charles Brown
5208: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5209: LD_ADDR_OWVAR 29
5213: PUSH
5214: LD_INT 12
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5224: LD_ADDR_OWVAR 30
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5247: LD_ADDR_OWVAR 31
5251: PUSH
5252: LD_INT 3
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: ST_TO_ADDR
// un = CreateHuman ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 28
5287: PPUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 87
// wait ( 0 0$1 ) ;
5304: LD_INT 35
5306: PPUSH
5307: CALL_OW 67
// DialogueOn ;
5311: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: LD_STRING D4-Sol1-5
5322: PPUSH
5323: CALL_OW 88
// DialogueOff ;
5327: CALL_OW 7
// tempCharles = un ;
5331: LD_ADDR_EXP 14
5335: PUSH
5336: LD_VAR 0 3
5340: ST_TO_ADDR
// end ; if number = 7 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 7
5348: EQUAL
5349: IFFALSE 5621
// begin hc_class := 1 ;
5351: LD_ADDR_OWVAR 28
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// hc_sex := sex_female ;
5359: LD_ADDR_OWVAR 27
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5367: LD_ADDR_OWVAR 33
5371: PUSH
5372: LD_STRING AmGalRemake
5374: ST_TO_ADDR
// hc_face_number := 2 ;
5375: LD_ADDR_OWVAR 34
5379: PUSH
5380: LD_INT 2
5382: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5383: LD_ADDR_OWVAR 26
5387: PUSH
5388: LD_STRING Rebecca Macdonald
5390: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5391: LD_ADDR_OWVAR 29
5395: PUSH
5396: LD_INT 10
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5406: LD_ADDR_OWVAR 30
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5429: LD_ADDR_OWVAR 31
5433: PUSH
5434: LD_INT 1
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 0
5442: PUSH
5443: LD_INT 1
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 29
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5493: LD_INT 30
5495: PPUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 70
5510: IFFALSE 5621
// begin DialogueOn ;
5512: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 250
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 251
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 15
5541: NEG
5542: PPUSH
5543: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_STRING D11a-FSol2-1
5581: PPUSH
5582: CALL_OW 88
// DialogueOff ;
5586: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5590: LD_INT 3
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL_OW 471
// wait ( 0 0$2 ) ;
5602: LD_INT 70
5604: PPUSH
5605: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5609: LD_INT 3
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 472
// end ; end ; if number = 8 then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: EQUAL
5629: IFFALSE 5785
// begin hc_class := 1 ;
5631: LD_ADDR_OWVAR 28
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// hc_sex := sex_female ;
5639: LD_ADDR_OWVAR 27
5643: PUSH
5644: LD_INT 2
5646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5647: LD_ADDR_OWVAR 33
5651: PUSH
5652: LD_STRING SecondCharsGal
5654: ST_TO_ADDR
// hc_face_number := 45 ;
5655: LD_ADDR_OWVAR 34
5659: PUSH
5660: LD_INT 45
5662: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5663: LD_ADDR_OWVAR 26
5667: PUSH
5668: LD_STRING Margherite Simpson
5670: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5671: LD_ADDR_OWVAR 29
5675: PUSH
5676: LD_INT 12
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5686: LD_ADDR_OWVAR 30
5690: PUSH
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5709: LD_ADDR_OWVAR 31
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// un = CreateHuman ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: CALL_OW 44
5741: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 87
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_STRING D11e-FSol4-1
5780: PPUSH
5781: CALL_OW 88
// end ; arrivals := arrivals union un ;
5785: LD_ADDR_EXP 45
5789: PUSH
5790: LD_EXP 45
5794: PUSH
5795: LD_VAR 0 3
5799: UNION
5800: ST_TO_ADDR
// end ; end_of_file
5801: LD_VAR 0 2
5805: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
// ruAttackers := [ ] ;
5810: LD_ADDR_EXP 48
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5817: LD_ADDR_EXP 49
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if Difficulty < 3 then
5824: LD_OWVAR 67
5828: PUSH
5829: LD_INT 3
5831: LESS
5832: IFFALSE 5849
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5834: LD_INT 130
5836: PPUSH
5837: LD_INT 81
5839: PPUSH
5840: CALL_OW 428
5844: PPUSH
5845: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_EXP 35
5862: PPUSH
5863: LD_EXP 36
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: LD_INT 4
5878: PPUSH
5879: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: LD_EXP 35
5896: PPUSH
5897: LD_EXP 36
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: CALL 7676 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 67
5925: PPUSH
5926: LD_EXP 35
5930: PPUSH
5931: LD_EXP 36
5935: PPUSH
5936: CALL_OW 12
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 21
5959: PPUSH
5960: LD_EXP 35
5964: PPUSH
5965: LD_EXP 36
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 17
5993: PPUSH
5994: LD_EXP 35
5998: PPUSH
5999: LD_EXP 36
6003: PPUSH
6004: CALL_OW 12
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 6
6014: PPUSH
6015: CALL 7676 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 32
6027: PPUSH
6028: LD_EXP 35
6032: PPUSH
6033: LD_EXP 36
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_INT 4
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL 7676 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 32
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6139
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6101: LD_INT 3
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: LD_VAR 0 2
6111: PPUSH
6112: LD_EXP 35
6116: PPUSH
6117: LD_EXP 36
6121: PPUSH
6122: CALL_OW 12
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL 7676 0 6
6137: GO 6098
6139: POP
6140: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 31
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6215
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6189: LD_EXP 35
6193: PPUSH
6194: LD_EXP 36
6198: PPUSH
6199: CALL_OW 12
6203: PPUSH
6204: LD_VAR 0 2
6208: PPUSH
6209: CALL 7786 0 2
6213: GO 6186
6215: POP
6216: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 32
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: CALL 8065 0 3
// end ;
6230: LD_VAR 0 1
6234: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6235: LD_INT 22
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 32
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 69
6263: IFFALSE 6340
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin enable ;
6271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6272: LD_ADDR_VAR 0 1
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6338
// if GetFuel ( i ) < 3 then
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 261
6318: PUSH
6319: LD_INT 3
6321: LESS
6322: IFFALSE 6336
// SetFuel ( i , 3 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: CALL_OW 240
6336: GO 6306
6338: POP
6339: POP
// end ;
6340: PPOPN 1
6342: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6343: LD_OWVAR 67
6347: PUSH
6348: LD_INT 1
6350: GREATER
6351: IFFALSE 6920
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// begin uc_side := 3 ;
6362: LD_ADDR_OWVAR 20
6366: PUSH
6367: LD_INT 3
6369: ST_TO_ADDR
// uc_nation := 3 ;
6370: LD_ADDR_OWVAR 21
6374: PUSH
6375: LD_INT 3
6377: ST_TO_ADDR
// for i := 1 to 2 do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_INT 2
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6506
// begin InitHC_All ( ) ;
6394: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_OWVAR 67
6423: ARRAY
6424: PPUSH
6425: CALL_OW 381
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 91
6446: PPUSH
6447: LD_INT 87
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6460: LD_ADDR_EXP 49
6464: PUSH
6465: LD_EXP 49
6469: PPUSH
6470: LD_EXP 49
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 1
6488: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6489: LD_VAR 0 2
6493: PPUSH
6494: LD_INT 46
6496: PPUSH
6497: LD_INT 78
6499: PPUSH
6500: CALL_OW 114
// end ;
6504: GO 6391
6506: POP
6507: POP
// if Difficulty > 2 then
6508: LD_OWVAR 67
6512: PUSH
6513: LD_INT 2
6515: GREATER
6516: IFFALSE 6648
// begin for i := 1 to 3 do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6646
// begin InitHC_All ( ) ;
6534: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6538: LD_INT 0
6540: PPUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 6
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 381
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6579: LD_VAR 0 2
6583: PPUSH
6584: LD_INT 91
6586: PPUSH
6587: LD_INT 87
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6600: LD_ADDR_EXP 49
6604: PUSH
6605: LD_EXP 49
6609: PPUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 1
6628: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 89
6636: PPUSH
6637: LD_INT 148
6639: PPUSH
6640: CALL_OW 114
// end ;
6644: GO 6531
6646: POP
6647: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 49
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 76
6675: PUSH
6676: LD_INT 99
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 81
6685: PUSH
6686: LD_INT 135
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 111
6695: PUSH
6696: LD_INT 155
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 147
6705: PUSH
6706: LD_INT 158
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6721: LD_INT 1050
6723: PPUSH
6724: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 49
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6911
// begin un := ruAttackersInForest [ i ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 49
6755: PUSH
6756: LD_VAR 0 1
6760: ARRAY
6761: ST_TO_ADDR
// tag := GetTag ( un ) ;
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 110
6776: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 302
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 314
6796: NOT
6797: AND
6798: IFFALSE 6909
// begin if tag <> i then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: NONEQUAL
6810: IFFALSE 6838
// begin SetTag ( un , i ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 109
// tag := i ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_VAR 0 1
6835: ST_TO_ADDR
// end else
6836: GO 6870
// begin SetTag ( un , i + 1 ) ;
6838: LD_VAR 0 2
6842: PPUSH
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: PPUSH
6852: CALL_OW 109
// tag := i + 1 ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_VAR 0 3
6879: PUSH
6880: LD_VAR 0 4
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 3
6894: PUSH
6895: LD_VAR 0 4
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PPUSH
6905: CALL_OW 114
// end ; end ;
6909: GO 6743
6911: POP
6912: POP
// until not ruAttackersInForest ;
6913: LD_EXP 49
6917: NOT
6918: IFFALSE 6721
// end ;
6920: PPOPN 4
6922: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6923: LD_INT 10
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 70
6940: IFFALSE 7289
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
// begin enable ;
6951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 120
6979: PUSH
6980: LD_INT 111
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 50
7014: PUSH
7015: EMPTY
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: ST_TO_ADDR
// if not tmp then
7056: LD_VAR 0 2
7060: NOT
7061: IFFALSE 7159
// begin if not bar then
7063: LD_VAR 0 3
7067: NOT
7068: IFFALSE 7073
// begin disable ;
7070: DISABLE
// exit ;
7071: GO 7289
// end ; tmp := [ ] ;
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: EMPTY
7079: ST_TO_ADDR
// for i in bar do
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7116
// tmp := tmp union UnitsInside ( i ) ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 313
7112: UNION
7113: ST_TO_ADDR
7114: GO 7090
7116: POP
7117: POP
// if not tmp then
7118: LD_VAR 0 2
7122: NOT
7123: IFFALSE 7128
// begin disable ;
7125: DISABLE
// exit ;
7126: GO 7289
// end ; for i in tmp do
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: FOR_IN
7139: IFFALSE 7155
// SetTag ( i , 111 ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 111
7148: PPUSH
7149: CALL_OW 109
7153: GO 7138
7155: POP
7156: POP
// end else
7157: GO 7289
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_INT 10
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 70
7181: ST_TO_ADDR
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7287
// if IsOk ( i ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 302
7204: IFFALSE 7285
// begin if IsInUnit ( i ) then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 310
7215: IFFALSE 7226
// ComExitBuilding ( i ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 122
// wait ( 3 ) ;
7226: LD_INT 3
7228: PPUSH
7229: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: PPUSH
7281: CALL_OW 180
// end ;
7285: GO 7192
7287: POP
7288: POP
// end ; end ;
7289: PPOPN 4
7291: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7292: LD_OWVAR 1
7296: PUSH
7297: LD_INT 4200
7299: GREATER
7300: PUSH
7301: LD_INT 50
7303: PPUSH
7304: CALL_OW 13
7308: AND
7309: IFFALSE 7400
7311: GO 7313
7313: DISABLE
7314: LD_INT 0
7316: PPUSH
// begin uc_side := 3 ;
7317: LD_ADDR_OWVAR 20
7321: PUSH
7322: LD_INT 3
7324: ST_TO_ADDR
// uc_nation := nation_russian ;
7325: LD_ADDR_OWVAR 21
7329: PUSH
7330: LD_INT 3
7332: ST_TO_ADDR
// InitHC_All ( ) ;
7333: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7337: LD_INT 0
7339: PPUSH
7340: LD_INT 2
7342: PPUSH
7343: CALL_OW 382
// un := CreateHuman ;
7347: LD_ADDR_VAR 0 1
7351: PUSH
7352: CALL_OW 44
7356: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7357: LD_VAR 0 1
7361: PPUSH
7362: LD_INT 51
7364: PPUSH
7365: LD_INT 7
7367: PPUSH
7368: LD_INT 12
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 50
// wait ( 0 0$1 ) ;
7378: LD_INT 35
7380: PPUSH
7381: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7385: LD_VAR 0 1
7389: PPUSH
7390: LD_INT 106
7392: PPUSH
7393: LD_INT 83
7395: PPUSH
7396: CALL_OW 111
// end ;
7400: PPOPN 1
7402: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7403: LD_OWVAR 1
7407: PUSH
7408: LD_INT 21000
7410: GREATER
7411: PUSH
7412: LD_INT 45
7414: PPUSH
7415: CALL_OW 13
7419: AND
7420: IFFALSE 7535
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
// begin uc_side := 3 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 3
7435: ST_TO_ADDR
// uc_nation := nation_russian ;
7436: LD_ADDR_OWVAR 21
7440: PUSH
7441: LD_INT 3
7443: ST_TO_ADDR
// InitHC_All ( ) ;
7444: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7448: LD_INT 0
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 384
// un := CreateHuman ;
7458: LD_ADDR_VAR 0 1
7462: PUSH
7463: CALL_OW 44
7467: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_INT 91
7475: PPUSH
7476: LD_INT 18
7478: PPUSH
7479: LD_INT 15
7481: PPUSH
7482: LD_INT 1
7484: PPUSH
7485: CALL_OW 50
// wait ( 0 0$1 ) ;
7489: LD_INT 35
7491: PPUSH
7492: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 106
7503: PPUSH
7504: LD_INT 83
7506: PPUSH
7507: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_INT 67
7518: PPUSH
7519: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7523: LD_VAR 0 1
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 183
// end ; end_of_file
7535: PPOPN 1
7537: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
// if not characters then
7543: LD_VAR 0 1
7547: NOT
7548: IFFALSE 7552
// exit ;
7550: GO 7631
// speaker := characters [ rand ( 1 , characters ) ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 1
7561: PUSH
7562: LD_INT 1
7564: PPUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 12
7574: ARRAY
7575: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 258
7585: PUSH
7586: LD_INT 1
7588: EQUAL
7589: IFFALSE 7607
// Say ( speaker , dialogMID ) else
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 88
7605: GO 7621
// Say ( speaker , dialogFID ) ;
7607: LD_VAR 0 6
7611: PPUSH
7612: LD_VAR 0 3
7616: PPUSH
7617: CALL_OW 88
// result := speaker ;
7621: LD_ADDR_VAR 0 4
7625: PUSH
7626: LD_VAR 0 6
7630: ST_TO_ADDR
// end ;
7631: LD_VAR 0 4
7635: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for i in charactersList do
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: FOR_IN
7651: IFFALSE 7669
// SaveCharacters ( i , ident ) ;
7653: LD_VAR 0 4
7657: PPUSH
7658: LD_VAR 0 2
7662: PPUSH
7663: CALL_OW 38
7667: GO 7650
7669: POP
7670: POP
// end ;
7671: LD_VAR 0 3
7675: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
// for i := 1 to count do
7682: LD_ADDR_VAR 0 8
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_VAR 0 6
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7779
// begin uc_side = side ;
7700: LD_ADDR_OWVAR 20
7704: PUSH
7705: LD_VAR 0 1
7709: ST_TO_ADDR
// uc_nation = nation ;
7710: LD_ADDR_OWVAR 21
7714: PUSH
7715: LD_VAR 0 2
7719: ST_TO_ADDR
// hc_gallery =  ;
7720: LD_ADDR_OWVAR 33
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// hc_name =  ;
7728: LD_ADDR_OWVAR 26
7732: PUSH
7733: LD_STRING 
7735: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7736: LD_INT 0
7738: PPUSH
7739: LD_VAR 0 5
7743: PPUSH
7744: LD_VAR 0 4
7748: PPUSH
7749: CALL_OW 380
// un = CreateHuman ;
7753: LD_ADDR_VAR 0 10
7757: PUSH
7758: CALL_OW 44
7762: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7763: LD_VAR 0 10
7767: PPUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 52
// end ;
7777: GO 7697
7779: POP
7780: POP
// end ;
7781: LD_VAR 0 7
7785: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7786: LD_INT 0
7788: PPUSH
7789: PPUSH
7790: PPUSH
// uc_side := GetSide ( b ) ;
7791: LD_ADDR_OWVAR 20
7795: PUSH
7796: LD_VAR 0 2
7800: PPUSH
7801: CALL_OW 255
7805: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7806: LD_ADDR_OWVAR 21
7810: PUSH
7811: LD_VAR 0 2
7815: PPUSH
7816: CALL_OW 248
7820: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7821: LD_INT 0
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 2
7845: PPUSH
7846: CALL_OW 254
7850: PUSH
7851: LD_INT 3
7853: MINUS
7854: ST_TO_ADDR
// if dir < 0 then
7855: LD_VAR 0 5
7859: PUSH
7860: LD_INT 0
7862: LESS
7863: IFFALSE 7879
// dir := 6 + dir ;
7865: LD_ADDR_VAR 0 5
7869: PUSH
7870: LD_INT 6
7872: PUSH
7873: LD_VAR 0 5
7877: PLUS
7878: ST_TO_ADDR
// un := CreateHuman ;
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: CALL_OW 44
7888: ST_TO_ADDR
// SetDir ( un , dir ) ;
7889: LD_VAR 0 4
7893: PPUSH
7894: LD_VAR 0 5
7898: PPUSH
7899: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 52
// end ;
7917: LD_VAR 0 3
7921: RET
// export function PrepareDifficulty ; begin
7922: LD_INT 0
7924: PPUSH
// case Difficulty of 1 :
7925: LD_OWVAR 67
7929: PUSH
7930: LD_INT 1
7932: DOUBLE
7933: EQUAL
7934: IFTRUE 7938
7936: GO 7957
7938: POP
// begin RuSolMinLevel = 2 ;
7939: LD_ADDR_EXP 35
7943: PUSH
7944: LD_INT 2
7946: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7947: LD_ADDR_EXP 36
7951: PUSH
7952: LD_INT 3
7954: ST_TO_ADDR
// end ; 2 :
7955: GO 8018
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7984
7965: POP
// begin RuSolMinLevel = 3 ;
7966: LD_ADDR_EXP 35
7970: PUSH
7971: LD_INT 3
7973: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7974: LD_ADDR_EXP 36
7978: PUSH
7979: LD_INT 5
7981: ST_TO_ADDR
// end ; 3 .. 4 :
7982: GO 8018
7984: LD_INT 3
7986: DOUBLE
7987: GREATEREQUAL
7988: IFFALSE 7996
7990: LD_INT 4
7992: DOUBLE
7993: LESSEQUAL
7994: IFTRUE 7998
7996: GO 8017
7998: POP
// begin RuSolMinLevel = 4 ;
7999: LD_ADDR_EXP 35
8003: PUSH
8004: LD_INT 4
8006: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8007: LD_ADDR_EXP 36
8011: PUSH
8012: LD_INT 6
8014: ST_TO_ADDR
// end ; end ;
8015: GO 8018
8017: POP
// end ;
8018: LD_VAR 0 1
8022: RET
// export function ShowQuery1 ; begin
8023: LD_INT 0
8025: PPUSH
// result := Query ( QKill ) ;
8026: LD_ADDR_VAR 0 1
8030: PUSH
8031: LD_STRING QKill
8033: PPUSH
8034: CALL_OW 97
8038: ST_TO_ADDR
// end ;
8039: LD_VAR 0 1
8043: RET
// export function ShowQuery2 ; begin
8044: LD_INT 0
8046: PPUSH
// result := Query ( QKill2 ) ;
8047: LD_ADDR_VAR 0 1
8051: PUSH
8052: LD_STRING QKill2
8054: PPUSH
8055: CALL_OW 97
8059: ST_TO_ADDR
// end ;
8060: LD_VAR 0 1
8064: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8071: LD_ADDR_VAR 0 7
8075: PUSH
8076: LD_INT 48
8078: PUSH
8079: LD_INT 49
8081: PUSH
8082: LD_INT 50
8084: PUSH
8085: LD_INT 20
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 51
8093: PUSH
8094: LD_INT 52
8096: PUSH
8097: LD_INT 69
8099: PUSH
8100: LD_INT 39
8102: PUSH
8103: LD_INT 34
8105: PUSH
8106: LD_INT 40
8108: PUSH
8109: LD_INT 53
8111: PUSH
8112: LD_INT 71
8114: PUSH
8115: LD_INT 57
8117: PUSH
8118: LD_INT 58
8120: PUSH
8121: LD_INT 44
8123: PUSH
8124: LD_INT 32
8126: PUSH
8127: LD_INT 27
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 59
8138: PUSH
8139: LD_INT 54
8141: PUSH
8142: LD_INT 55
8144: PUSH
8145: LD_INT 56
8147: PUSH
8148: LD_INT 63
8150: PUSH
8151: LD_INT 64
8153: PUSH
8154: LD_INT 65
8156: PUSH
8157: LD_INT 30
8159: PUSH
8160: LD_INT 31
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 82
8174: PUSH
8175: LD_INT 83
8177: PUSH
8178: LD_INT 84
8180: PUSH
8181: LD_INT 85
8183: PUSH
8184: LD_INT 86
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
// for i = 1 to list do
8226: LD_ADDR_VAR 0 5
8230: PUSH
8231: DOUBLE
8232: LD_INT 1
8234: DEC
8235: ST_TO_ADDR
8236: LD_VAR 0 7
8240: PUSH
8241: FOR_TO
8242: IFFALSE 8314
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8244: LD_VAR 0 7
8248: PUSH
8249: LD_VAR 0 5
8253: ARRAY
8254: PPUSH
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 321
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: PUSH
8269: LD_VAR 0 7
8273: PUSH
8274: LD_VAR 0 5
8278: ARRAY
8279: PPUSH
8280: LD_VAR 0 3
8284: PPUSH
8285: CALL_OW 482
8289: AND
8290: IFFALSE 8312
// AddComResearch ( lab , list [ i ] ) ;
8292: LD_VAR 0 2
8296: PPUSH
8297: LD_VAR 0 7
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: PPUSH
8308: CALL_OW 184
8312: GO 8241
8314: POP
8315: POP
// end ;
8316: LD_VAR 0 4
8320: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8321: LD_INT 0
8323: PPUSH
8324: PPUSH
8325: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8326: LD_INT 22
8328: PUSH
8329: LD_VAR 0 1
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_VAR 0 3
8361: LESSEQUAL
8362: IFFALSE 8470
// begin for i = 1 to vehCount do
8364: LD_ADDR_VAR 0 9
8368: PUSH
8369: DOUBLE
8370: LD_INT 1
8372: DEC
8373: ST_TO_ADDR
8374: LD_VAR 0 3
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8468
// begin weapon := weaponTab [ i ] ;
8382: LD_ADDR_VAR 0 10
8386: PUSH
8387: LD_VAR 0 4
8391: PUSH
8392: LD_VAR 0 9
8396: ARRAY
8397: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8398: LD_VAR 0 10
8402: PUSH
8403: LD_INT 46
8405: EQUAL
8406: IFFALSE 8437
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 24
8415: PPUSH
8416: LD_VAR 0 5
8420: PPUSH
8421: LD_VAR 0 6
8425: PPUSH
8426: LD_VAR 0 10
8430: PPUSH
8431: CALL_OW 185
8435: GO 8466
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 7
8446: PPUSH
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_VAR 0 6
8456: PPUSH
8457: LD_VAR 0 10
8461: PPUSH
8462: CALL_OW 185
// end ;
8466: GO 8379
8468: POP
8469: POP
// end ; end ;
8470: LD_VAR 0 8
8474: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8475: LD_INT 0
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8483: LD_ADDR_VAR 0 8
8487: PUSH
8488: LD_VAR 0 2
8492: PPUSH
8493: CALL_OW 313
8497: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_VAR 0 3
8507: PPUSH
8508: LD_INT 22
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 750
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 3
8542: PUSH
8543: LD_INT 54
8545: PUSH
8546: EMPTY
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 70
8563: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 22
8576: PUSH
8577: LD_VAR 0 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 3
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 24
8601: PUSH
8602: LD_INT 1000
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: PPUSH
8621: CALL_OW 70
8625: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8626: LD_VAR 0 6
8630: NOT
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_VAR 0 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 25
8646: PUSH
8647: LD_INT 2
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 250
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PPUSH
8669: CALL_OW 69
8673: NOT
8674: AND
8675: IFFALSE 8679
// exit ;
8677: GO 8837
// if buildingsList and engineerOkInside then
8679: LD_VAR 0 6
8683: PUSH
8684: LD_VAR 0 8
8688: AND
8689: IFFALSE 8700
// ComExitBuilding ( engineerOkInside ) ;
8691: LD_VAR 0 8
8695: PPUSH
8696: CALL_OW 122
// if buildingsList and engineerOkOutside then
8700: LD_VAR 0 6
8704: PUSH
8705: LD_VAR 0 9
8709: AND
8710: IFFALSE 8730
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8712: LD_VAR 0 9
8716: PPUSH
8717: LD_VAR 0 6
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8730: LD_VAR 0 6
8734: PUSH
8735: LD_INT 0
8737: EQUAL
8738: PUSH
8739: LD_VAR 0 4
8743: PUSH
8744: LD_INT 0
8746: EQUAL
8747: AND
8748: PUSH
8749: LD_VAR 0 9
8753: AND
8754: IFFALSE 8770
// ComEnterUnit ( engineerOkOutside , depot ) ;
8756: LD_VAR 0 9
8760: PPUSH
8761: LD_VAR 0 2
8765: PPUSH
8766: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8770: LD_VAR 0 9
8774: PUSH
8775: LD_VAR 0 6
8779: PUSH
8780: LD_INT 0
8782: EQUAL
8783: AND
8784: PUSH
8785: LD_VAR 0 4
8789: AND
8790: IFFALSE 8837
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8792: LD_VAR 0 9
8796: PPUSH
8797: LD_VAR 0 4
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: LD_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 4
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PPUSH
8824: LD_VAR 0 4
8828: PUSH
8829: LD_INT 4
8831: ARRAY
8832: PPUSH
8833: CALL_OW 145
// end ;
8837: LD_VAR 0 5
8841: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8842: LD_INT 0
8844: PPUSH
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8853: LD_ADDR_VAR 0 6
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 4
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 24
8892: PUSH
8893: LD_INT 251
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 69
8910: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8911: LD_ADDR_VAR 0 7
8915: PUSH
8916: LD_VAR 0 3
8920: PPUSH
8921: LD_INT 22
8923: PUSH
8924: LD_VAR 0 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 4
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 50
8955: PUSH
8956: EMPTY
8957: LIST
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 70
8969: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8970: LD_ADDR_VAR 0 10
8974: PUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 22
8982: PUSH
8983: LD_VAR 0 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 21
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 3
9004: PUSH
9005: LD_INT 25
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 3
9021: PUSH
9022: LD_INT 24
9024: PUSH
9025: LD_INT 750
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 70
9046: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9047: LD_ADDR_VAR 0 11
9051: PUSH
9052: LD_VAR 0 2
9056: PPUSH
9057: LD_INT 22
9059: PUSH
9060: LD_VAR 0 1
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: LD_INT 25
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 24
9101: PUSH
9102: LD_INT 1000
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 70
9123: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9124: LD_VAR 0 10
9128: NOT
9129: PUSH
9130: LD_VAR 0 11
9134: NOT
9135: AND
9136: PUSH
9137: LD_VAR 0 6
9141: NOT
9142: AND
9143: IFFALSE 9147
// exit ;
9145: GO 9353
// if damageUnits and sci_list then
9147: LD_VAR 0 10
9151: PUSH
9152: LD_VAR 0 6
9156: AND
9157: IFFALSE 9173
// ComMoveToArea ( damageUnits , healArea ) ;
9159: LD_VAR 0 10
9163: PPUSH
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 113
// if unitsToHeal and sci_list then
9173: LD_VAR 0 11
9177: PUSH
9178: LD_VAR 0 6
9182: AND
9183: IFFALSE 9194
// ComExitBuilding ( sci_list ) ;
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9194: LD_VAR 0 11
9198: PUSH
9199: LD_VAR 0 7
9203: AND
9204: IFFALSE 9224
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9206: LD_VAR 0 7
9210: PPUSH
9211: LD_VAR 0 11
9215: PUSH
9216: LD_INT 1
9218: ARRAY
9219: PPUSH
9220: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9224: LD_VAR 0 10
9228: PUSH
9229: LD_INT 0
9231: EQUAL
9232: PUSH
9233: LD_VAR 0 11
9237: PUSH
9238: LD_INT 0
9240: EQUAL
9241: AND
9242: PUSH
9243: LD_VAR 0 7
9247: AND
9248: IFFALSE 9353
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9250: LD_ADDR_VAR 0 12
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_VAR 0 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 30
9279: PUSH
9280: LD_INT 8
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9297: LD_ADDR_VAR 0 13
9301: PUSH
9302: LD_INT 1
9304: PPUSH
9305: LD_VAR 0 12
9309: PPUSH
9310: CALL_OW 12
9314: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9315: LD_VAR 0 7
9319: PPUSH
9320: LD_INT 3
9322: PUSH
9323: LD_INT 60
9325: PUSH
9326: EMPTY
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 72
9337: PPUSH
9338: LD_VAR 0 12
9342: PUSH
9343: LD_VAR 0 13
9347: ARRAY
9348: PPUSH
9349: CALL_OW 120
// end ; end ;
9353: LD_VAR 0 5
9357: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9358: LD_INT 0
9360: PPUSH
9361: PPUSH
9362: PPUSH
9363: PPUSH
9364: PPUSH
// tmp := [ ] ;
9365: LD_ADDR_VAR 0 6
9369: PUSH
9370: EMPTY
9371: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9372: LD_ADDR_VAR 0 7
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 30
9391: PUSH
9392: LD_INT 32
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if bunkers then
9408: LD_VAR 0 7
9412: IFFALSE 9482
// for i in bunkers do
9414: LD_ADDR_VAR 0 4
9418: PUSH
9419: LD_VAR 0 7
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9480
// for j in UnitsInside ( i ) do
9427: LD_ADDR_VAR 0 5
9431: PUSH
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 313
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9476
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9445: LD_ADDR_VAR 0 6
9449: PUSH
9450: LD_VAR 0 6
9454: PPUSH
9455: LD_VAR 0 6
9459: PUSH
9460: LD_INT 1
9462: PLUS
9463: PPUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 1
9473: ST_TO_ADDR
9474: GO 9442
9476: POP
9477: POP
9478: GO 9424
9480: POP
9481: POP
// if tmp then
9482: LD_VAR 0 6
9486: IFFALSE 9526
// begin ComExitBuilding ( tmp ) ;
9488: LD_VAR 0 6
9492: PPUSH
9493: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9497: LD_VAR 0 6
9501: PPUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: CALL_OW 250
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 251
9521: PPUSH
9522: CALL_OW 174
// end ; end ;
9526: LD_VAR 0 3
9530: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9531: LD_INT 0
9533: PPUSH
9534: PPUSH
9535: PPUSH
// enable ;
9536: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_VAR 0 3
9546: PPUSH
9547: CALL_OW 435
9551: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_INT 22
9559: PUSH
9560: LD_VAR 0 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 34
9571: PUSH
9572: LD_VAR 0 2
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9590: LD_VAR 0 5
9594: PUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: CALL_OW 435
9604: AND
9605: PUSH
9606: LD_VAR 0 6
9610: AND
9611: IFFALSE 9644
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9613: LD_VAR 0 5
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 6
9626: PUSH
9627: LD_INT 1
9629: ARRAY
9630: PPUSH
9631: LD_VAR 0 6
9635: PUSH
9636: LD_INT 2
9638: ARRAY
9639: PPUSH
9640: CALL_OW 177
// end ;
9644: LD_VAR 0 4
9648: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9659: LD_ADDR_VAR 0 6
9663: PUSH
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_INT 22
9671: PUSH
9672: LD_VAR 0 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 56
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 700
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 60
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 8
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 9
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 70
9771: PUSH
9772: LD_EXP 48
9776: PUSH
9777: LD_EXP 49
9781: UNION
9782: DIFF
9783: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9784: LD_ADDR_VAR 0 7
9788: PUSH
9789: LD_VAR 0 2
9793: PPUSH
9794: LD_INT 22
9796: PUSH
9797: LD_VAR 0 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 32
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 58
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_INT 24
9824: PUSH
9825: LD_INT 251
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 70
9842: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_VAR 0 2
9852: PPUSH
9853: LD_INT 22
9855: PUSH
9856: LD_VAR 0 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 24
9895: PUSH
9896: LD_INT 251
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 70
9912: ST_TO_ADDR
// if barrackList then
9913: LD_VAR 0 9
9917: IFFALSE 10073
// begin if turretList = 0 then
9919: LD_VAR 0 7
9923: PUSH
9924: LD_INT 0
9926: EQUAL
9927: IFFALSE 9965
// begin if soldiersList then
9929: LD_VAR 0 6
9933: IFFALSE 9963
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9935: LD_VAR 0 6
9939: PPUSH
9940: LD_VAR 0 9
9944: PUSH
9945: LD_INT 1
9947: PPUSH
9948: LD_VAR 0 9
9952: PPUSH
9953: CALL_OW 12
9957: ARRAY
9958: PPUSH
9959: CALL_OW 120
// end else
9963: GO 10073
// begin for i in barrackList do
9965: LD_ADDR_VAR 0 4
9969: PUSH
9970: LD_VAR 0 9
9974: PUSH
9975: FOR_IN
9976: IFFALSE 10071
// begin if not turretList then
9978: LD_VAR 0 7
9982: NOT
9983: IFFALSE 9989
// exit ;
9985: POP
9986: POP
9987: GO 10073
// insideUnits = UnitsInside ( i ) ;
9989: LD_ADDR_VAR 0 10
9993: PUSH
9994: LD_VAR 0 4
9998: PPUSH
9999: CALL_OW 313
10003: ST_TO_ADDR
// if insideUnits then
10004: LD_VAR 0 10
10008: IFFALSE 10069
// begin tmp := insideUnits [ 1 ] ;
10010: LD_ADDR_VAR 0 8
10014: PUSH
10015: LD_VAR 0 10
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10024: LD_VAR 0 8
10028: PPUSH
10029: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10033: LD_VAR 0 8
10037: PPUSH
10038: LD_VAR 0 7
10042: PUSH
10043: LD_INT 1
10045: ARRAY
10046: PPUSH
10047: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10051: LD_ADDR_VAR 0 7
10055: PUSH
10056: LD_VAR 0 7
10060: PPUSH
10061: LD_INT 1
10063: PPUSH
10064: CALL_OW 3
10068: ST_TO_ADDR
// end ; end ;
10069: GO 9975
10071: POP
10072: POP
// end ; end ; end ;
10073: LD_VAR 0 3
10077: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10086: LD_ADDR_VAR 0 8
10090: PUSH
10091: LD_INT 22
10093: PUSH
10094: LD_VAR 0 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 21
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 34
10115: PUSH
10116: LD_INT 52
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: LIST
10127: PPUSH
10128: CALL_OW 69
10132: ST_TO_ADDR
// if not craneList then
10133: LD_VAR 0 8
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10576
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10142: LD_ADDR_VAR 0 9
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_VAR 0 1
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: LD_INT 24
10174: PUSH
10175: LD_INT 1000
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10199: LD_VAR 0 9
10203: PUSH
10204: LD_VAR 0 8
10208: PPUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 750
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 72
10223: AND
10224: IFFALSE 10259
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10226: LD_VAR 0 8
10230: PPUSH
10231: LD_INT 24
10233: PUSH
10234: LD_INT 750
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 72
10245: PPUSH
10246: LD_VAR 0 9
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: PPUSH
10255: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10259: LD_VAR 0 8
10263: PPUSH
10264: LD_INT 3
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 750
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: IFFALSE 10323
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10287: LD_VAR 0 8
10291: PPUSH
10292: LD_INT 3
10294: PUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 72
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10323: LD_VAR 0 8
10327: PUSH
10328: LD_VAR 0 9
10332: PUSH
10333: LD_INT 0
10335: EQUAL
10336: AND
10337: PUSH
10338: LD_VAR 0 3
10342: AND
10343: IFFALSE 10390
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10345: LD_VAR 0 8
10349: PPUSH
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 1
10357: ARRAY
10358: PPUSH
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 2
10366: ARRAY
10367: PPUSH
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 3
10375: ARRAY
10376: PPUSH
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 4
10384: ARRAY
10385: PPUSH
10386: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10390: LD_ADDR_VAR 0 7
10394: PUSH
10395: LD_VAR 0 2
10399: PPUSH
10400: LD_INT 22
10402: PUSH
10403: LD_VAR 0 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 52
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: LD_INT 24
10437: PUSH
10438: LD_INT 750
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 70
10459: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10460: LD_ADDR_VAR 0 6
10464: PUSH
10465: LD_VAR 0 2
10469: PPUSH
10470: LD_INT 22
10472: PUSH
10473: LD_VAR 0 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 0
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 70
10518: ST_TO_ADDR
// if crane then
10519: LD_VAR 0 7
10523: IFFALSE 10576
// for i in crane do
10525: LD_ADDR_VAR 0 5
10529: PUSH
10530: LD_VAR 0 7
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10574
// begin if dep then
10538: LD_VAR 0 6
10542: IFFALSE 10558
// ComMoveUnit ( i , dep ) ;
10544: LD_VAR 0 5
10548: PPUSH
10549: LD_VAR 0 6
10553: PPUSH
10554: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10558: LD_VAR 0 5
10562: PPUSH
10563: CALL_OW 311
10567: PPUSH
10568: CALL 82183 0 1
// end ;
10572: GO 10535
10574: POP
10575: POP
// end ;
10576: LD_VAR 0 4
10580: RET
// export function BuildBulldozer ; begin
10581: LD_INT 0
10583: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10584: LD_INT 17
10586: PPUSH
10587: CALL_OW 302
10591: NOT
10592: PUSH
10593: LD_INT 17
10595: PPUSH
10596: CALL_OW 255
10600: PUSH
10601: LD_INT 3
10603: NONEQUAL
10604: OR
10605: IFFALSE 10609
// exit ;
10607: GO 10628
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10609: LD_INT 17
10611: PPUSH
10612: LD_INT 24
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: LD_INT 53
10623: PPUSH
10624: CALL_OW 185
// end ;
10628: LD_VAR 0 1
10632: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
// if not bulldozer then
10640: LD_VAR 0 1
10644: NOT
10645: IFFALSE 10649
// exit ;
10647: GO 10931
// list := ListEnvironmentArea ( area ) ;
10649: LD_ADDR_VAR 0 5
10653: PUSH
10654: LD_VAR 0 2
10658: PPUSH
10659: CALL_OW 353
10663: ST_TO_ADDR
// tmp := [ ] ;
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: EMPTY
10670: ST_TO_ADDR
// for i = 1 to list do
10671: LD_ADDR_VAR 0 4
10675: PUSH
10676: DOUBLE
10677: LD_INT 1
10679: DEC
10680: ST_TO_ADDR
10681: LD_VAR 0 5
10685: PUSH
10686: FOR_TO
10687: IFFALSE 10785
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10689: LD_VAR 0 5
10693: PUSH
10694: LD_VAR 0 4
10698: ARRAY
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 5
10708: PUSH
10709: LD_VAR 0 4
10713: ARRAY
10714: PUSH
10715: LD_INT 2
10717: ARRAY
10718: PPUSH
10719: CALL_OW 554
10723: IFFALSE 10783
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_VAR 0 6
10734: PPUSH
10735: LD_VAR 0 6
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: LD_VAR 0 5
10748: PUSH
10749: LD_VAR 0 4
10753: ARRAY
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_VAR 0 5
10763: PUSH
10764: LD_VAR 0 4
10768: ARRAY
10769: PUSH
10770: LD_INT 2
10772: ARRAY
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 1
10782: ST_TO_ADDR
// end ;
10783: GO 10686
10785: POP
10786: POP
// ComStop ( bulldozer ) ;
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10796: LD_ADDR_VAR 0 7
10800: PUSH
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 250
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 251
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: ST_TO_ADDR
// for i = tmp downto 1 do
10825: LD_ADDR_VAR 0 4
10829: PUSH
10830: DOUBLE
10831: LD_VAR 0 6
10835: INC
10836: ST_TO_ADDR
10837: LD_INT 1
10839: PUSH
10840: FOR_DOWNTO
10841: IFFALSE 10929
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10843: LD_ADDR_VAR 0 7
10847: PUSH
10848: LD_VAR 0 7
10852: PUSH
10853: LD_INT 1
10855: ARRAY
10856: PPUSH
10857: LD_VAR 0 7
10861: PUSH
10862: LD_INT 2
10864: ARRAY
10865: PPUSH
10866: LD_VAR 0 6
10870: PPUSH
10871: CALL 11032 0 3
10875: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10876: LD_VAR 0 1
10880: PPUSH
10881: LD_VAR 0 7
10885: PUSH
10886: LD_INT 1
10888: ARRAY
10889: PPUSH
10890: LD_VAR 0 7
10894: PUSH
10895: LD_INT 2
10897: ARRAY
10898: PPUSH
10899: CALL 10936 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10903: LD_ADDR_VAR 0 6
10907: PUSH
10908: LD_VAR 0 6
10912: PPUSH
10913: LD_VAR 0 7
10917: PUSH
10918: LD_INT 3
10920: ARRAY
10921: PPUSH
10922: CALL_OW 3
10926: ST_TO_ADDR
// end ;
10927: GO 10840
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10936: LD_INT 0
10938: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: CALL_OW 351
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: CALL_OW 554
10968: AND
10969: PUSH
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: CALL_OW 488
10984: AND
10985: PUSH
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: CALL_OW 428
11000: PUSH
11001: LD_INT 1
11003: NEG
11004: EQUAL
11005: AND
11006: IFFALSE 11027
// AddComMoveXY ( bulldozer , x , y ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_VAR 0 2
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: CALL_OW 171
// end ;
11027: LD_VAR 0 4
11031: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
// dist := 99999 ;
11041: LD_ADDR_VAR 0 6
11045: PUSH
11046: LD_INT 99999
11048: ST_TO_ADDR
// for i = 1 to list do
11049: LD_ADDR_VAR 0 5
11053: PUSH
11054: DOUBLE
11055: LD_INT 1
11057: DEC
11058: ST_TO_ADDR
11059: LD_VAR 0 3
11063: PUSH
11064: FOR_TO
11065: IFFALSE 11203
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11067: LD_ADDR_VAR 0 7
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_VAR 0 3
11086: PUSH
11087: LD_VAR 0 5
11091: ARRAY
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 3
11101: PUSH
11102: LD_VAR 0 5
11106: ARRAY
11107: PUSH
11108: LD_INT 2
11110: ARRAY
11111: PPUSH
11112: CALL_OW 298
11116: ST_TO_ADDR
// if d = 0 then
11117: LD_VAR 0 7
11121: PUSH
11122: LD_INT 0
11124: EQUAL
11125: IFFALSE 11129
// continue ;
11127: GO 11064
// if d < dist then
11129: LD_VAR 0 7
11133: PUSH
11134: LD_VAR 0 6
11138: LESS
11139: IFFALSE 11201
// begin _x := list [ i ] [ 1 ] ;
11141: LD_ADDR_VAR 0 8
11145: PUSH
11146: LD_VAR 0 3
11150: PUSH
11151: LD_VAR 0 5
11155: ARRAY
11156: PUSH
11157: LD_INT 1
11159: ARRAY
11160: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11161: LD_ADDR_VAR 0 9
11165: PUSH
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 5
11175: ARRAY
11176: PUSH
11177: LD_INT 2
11179: ARRAY
11180: ST_TO_ADDR
// _i := i ;
11181: LD_ADDR_VAR 0 10
11185: PUSH
11186: LD_VAR 0 5
11190: ST_TO_ADDR
// dist := d ;
11191: LD_ADDR_VAR 0 6
11195: PUSH
11196: LD_VAR 0 7
11200: ST_TO_ADDR
// end ; end ;
11201: GO 11064
11203: POP
11204: POP
// result := [ _x , _y , _i , dist ] ;
11205: LD_ADDR_VAR 0 4
11209: PUSH
11210: LD_VAR 0 8
11214: PUSH
11215: LD_VAR 0 9
11219: PUSH
11220: LD_VAR 0 10
11224: PUSH
11225: LD_VAR 0 6
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: ST_TO_ADDR
// end ; end_of_file
11236: LD_VAR 0 4
11240: RET
// export function Action ; begin
11241: LD_INT 0
11243: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11244: LD_INT 66
11246: PPUSH
11247: LD_INT 4
11249: PPUSH
11250: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11254: LD_INT 22
11256: PUSH
11257: LD_INT 1
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 2
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: PUSH
11283: LD_INT 0
11285: EQUAL
11286: IFFALSE 11300
// SetClass ( JMM , 2 ) ;
11288: LD_EXP 1
11292: PPUSH
11293: LD_INT 2
11295: PPUSH
11296: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11300: LD_STRING M1
11302: PPUSH
11303: CALL_OW 337
// case Difficulty of 1 :
11307: LD_OWVAR 67
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11330
11320: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11321: LD_STRING M1-1
11323: PPUSH
11324: CALL_OW 337
11328: GO 11385
11330: LD_INT 2
11332: DOUBLE
11333: EQUAL
11334: IFTRUE 11338
11336: GO 11348
11338: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11339: LD_STRING M1-2
11341: PPUSH
11342: CALL_OW 337
11346: GO 11385
11348: LD_INT 3
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11366
11356: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11357: LD_STRING M1-3
11359: PPUSH
11360: CALL_OW 337
11364: GO 11385
11366: LD_INT 4
11368: DOUBLE
11369: EQUAL
11370: IFTRUE 11374
11372: GO 11384
11374: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11375: LD_STRING M1-4
11377: PPUSH
11378: CALL_OW 337
11382: GO 11385
11384: POP
// ChangeMissionObjectives ( M1cont ) ;
11385: LD_STRING M1cont
11387: PPUSH
11388: CALL_OW 337
// SaveForQuickRestart ;
11392: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11396: LD_INT 525
11398: PPUSH
11399: LD_INT 700
11401: PPUSH
11402: CALL_OW 12
11406: PPUSH
11407: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11411: LD_INT 5
11413: PPUSH
11414: LD_INT 82
11416: PPUSH
11417: LD_INT 38
11419: PPUSH
11420: LD_INT 10
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 56
// wait ( 0 0$14 ) ;
11430: LD_INT 490
11432: PPUSH
11433: CALL_OW 67
// firstCrateSpawn := true ;
11437: LD_ADDR_EXP 41
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// end ;
11445: LD_VAR 0 1
11449: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11450: LD_EXP 41
11454: IFFALSE 11843
11456: GO 11458
11458: DISABLE
11459: LD_INT 0
11461: PPUSH
// begin if IsOk ( Lisa ) then
11462: LD_EXP 2
11466: PPUSH
11467: CALL_OW 302
11471: IFFALSE 11487
// Say ( Lisa , DR0-Lisa-1 ) else
11473: LD_EXP 2
11477: PPUSH
11478: LD_STRING DR0-Lisa-1
11480: PPUSH
11481: CALL_OW 88
11485: GO 11633
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11487: LD_INT 22
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 26
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: LD_INT 25
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 69
11577: PUSH
11578: LD_EXP 1
11582: PUSH
11583: LD_EXP 8
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 7
11602: PUSH
11603: LD_EXP 4
11607: PUSH
11608: LD_EXP 3
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: DIFF
11622: PPUSH
11623: LD_STRING DR0-Sol1-1
11625: PPUSH
11626: LD_STRING DR0-Sol1-1
11628: PPUSH
11629: CALL 7538 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 26
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: LD_INT 25
11673: PUSH
11674: LD_INT 1
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: PUSH
11729: LD_EXP 1
11733: PUSH
11734: LD_EXP 8
11738: PUSH
11739: LD_EXP 5
11743: PUSH
11744: LD_EXP 2
11748: PUSH
11749: LD_EXP 6
11753: PUSH
11754: LD_EXP 7
11758: PUSH
11759: LD_EXP 4
11763: PUSH
11764: LD_EXP 3
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: DIFF
11779: PPUSH
11780: LD_STRING DR0-Sol2-1
11782: PPUSH
11783: LD_STRING DR0-Sol2-1
11785: PPUSH
11786: CALL 7538 0 3
11790: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11791: LD_EXP 4
11795: PPUSH
11796: CALL_OW 302
11800: IFFALSE 11814
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11802: LD_EXP 4
11806: PPUSH
11807: LD_STRING DR0-Cyrus-1
11809: PPUSH
11810: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11814: LD_EXP 2
11818: PPUSH
11819: CALL_OW 302
11823: PUSH
11824: LD_VAR 0 1
11828: OR
11829: IFFALSE 11843
// Say ( JMM , DR0-JMM-1 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING DR0-JMM-1
11838: PPUSH
11839: CALL_OW 88
// end ;
11843: PPOPN 1
11845: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11846: LD_EXP 5
11850: PPUSH
11851: CALL_OW 302
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 1
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 16
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: PUSH
11885: LD_INT 0
11887: GREATER
11888: AND
11889: PUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 463
11897: NOT
11898: AND
11899: IFFALSE 12177
11901: GO 11903
11903: DISABLE
// begin DialogueOn ;
11904: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11908: LD_EXP 5
11912: PPUSH
11913: LD_STRING D10-Frank-1
11915: PPUSH
11916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: LD_EXP 1
12004: PUSH
12005: LD_EXP 5
12009: PUSH
12010: LD_EXP 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: DIFF
12020: PPUSH
12021: LD_STRING D10-Sol1-1
12023: PPUSH
12024: LD_STRING D10-FSol1-1
12026: PPUSH
12027: CALL 7538 0 3
// Say ( Frank , D10-Frank-2 ) ;
12031: LD_EXP 5
12035: PPUSH
12036: LD_STRING D10-Frank-2
12038: PPUSH
12039: CALL_OW 88
// if IsOk ( Lisa ) then
12043: LD_EXP 2
12047: PPUSH
12048: CALL_OW 302
12052: IFFALSE 12068
// Say ( Lisa , D10-Lisa-2 ) else
12054: LD_EXP 2
12058: PPUSH
12059: LD_STRING D10-Lisa-2
12061: PPUSH
12062: CALL_OW 88
12066: GO 12173
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12068: LD_INT 22
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 21
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: LD_EXP 1
12152: PUSH
12153: LD_EXP 5
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: DIFF
12162: PPUSH
12163: LD_STRING D10-Sol1-2
12165: PPUSH
12166: LD_STRING D10-FSol1-2
12168: PPUSH
12169: CALL 7538 0 3
// DialogueOff ;
12173: CALL_OW 7
// end ;
12177: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12178: LD_INT 1
12180: PPUSH
12181: CALL_OW 463
12185: NOT
12186: IFFALSE 12469
12188: GO 12190
12190: DISABLE
// begin HarrisonSupport ;
12191: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12195: LD_EXP 18
12199: PPUSH
12200: CALL_OW 310
12204: PPUSH
12205: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12209: LD_EXP 18
12213: PPUSH
12214: LD_STRING DEng-Eng1-1
12216: PPUSH
12217: CALL_OW 88
// wait ( 1 1$0 ) ;
12221: LD_INT 2100
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12232: LD_EXP 15
12236: PPUSH
12237: LD_STRING DRem-Har-1
12239: PPUSH
12240: CALL_OW 94
// if contactWithRussian then
12244: LD_EXP 23
12248: IFFALSE 12264
// Say ( JMM , DRem-JMM-1 ) else
12250: LD_EXP 1
12254: PPUSH
12255: LD_STRING DRem-JMM-1
12257: PPUSH
12258: CALL_OW 88
12262: GO 12276
// Say ( JMM , DRem-JMM-1a ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DRem-JMM-1a
12271: PPUSH
12272: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12276: LD_EXP 15
12280: PPUSH
12281: LD_STRING DRem-Har-2
12283: PPUSH
12284: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12288: LD_STRING DenisInDelta
12290: PPUSH
12291: LD_INT 0
12293: PPUSH
12294: CALL_OW 30
12298: IFFALSE 12314
// Say ( JMM , DRem-JMM-2 ) else
12300: LD_EXP 1
12304: PPUSH
12305: LD_STRING DRem-JMM-2
12307: PPUSH
12308: CALL_OW 88
12312: GO 12326
// Say ( JMM , DRem-JMM-2a ) ;
12314: LD_EXP 1
12318: PPUSH
12319: LD_STRING DRem-JMM-2a
12321: PPUSH
12322: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12326: LD_EXP 15
12330: PPUSH
12331: LD_STRING DRem-Har-3
12333: PPUSH
12334: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12338: LD_EXP 1
12342: PPUSH
12343: LD_STRING DRem-JMM-3
12345: PPUSH
12346: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12350: LD_EXP 15
12354: PPUSH
12355: LD_STRING DRem-Har-4
12357: PPUSH
12358: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12362: LD_STRING DenisInDelta
12364: PPUSH
12365: LD_INT 0
12367: PPUSH
12368: CALL_OW 30
12372: IFFALSE 12432
// begin Say ( JMM , DRem-JMM-4 ) ;
12374: LD_EXP 1
12378: PPUSH
12379: LD_STRING DRem-JMM-4
12381: PPUSH
12382: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12386: LD_EXP 15
12390: PPUSH
12391: LD_STRING DRem-Har-5
12393: PPUSH
12394: CALL_OW 94
// DialogueOff ;
12398: CALL_OW 7
// wait ( 4 4$00 ) ;
12402: LD_INT 8400
12404: PPUSH
12405: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12409: LD_INT 35
12411: PPUSH
12412: CALL_OW 67
// until not InBattle ( 1 ) ;
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 463
12423: NOT
12424: IFFALSE 12409
// SpawnDenis ;
12426: CALL 12470 0 0
// end else
12430: GO 12469
// begin DialogueOff ;
12432: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12436: LD_INT 36
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12449: LD_INT 15
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12462: LD_STRING MR
12464: PPUSH
12465: CALL_OW 337
// end ; end ;
12469: END
// export function SpawnDenis ; var tmp ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
// PrepareDenis ;
12474: CALL 2244 0 0
// if not Denis then
12478: LD_EXP 9
12482: NOT
12483: IFFALSE 12487
// exit ;
12485: GO 12708
// CenterNowOnUnits ( Denis ) ;
12487: LD_EXP 9
12491: PPUSH
12492: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 69
12515: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12516: LD_EXP 9
12520: PPUSH
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_EXP 9
12530: PPUSH
12531: CALL_OW 74
12535: PPUSH
12536: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12540: LD_INT 35
12542: PPUSH
12543: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12547: LD_INT 22
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 91
12559: PUSH
12560: LD_EXP 9
12564: PUSH
12565: LD_INT 10
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 69
12581: IFFALSE 12540
// SetSide ( Denis , 1 ) ;
12583: LD_EXP 9
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 235
// DialogueOn ;
12595: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12599: LD_EXP 9
12603: PPUSH
12604: LD_STRING DDen-Den-1
12606: PPUSH
12607: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12611: LD_EXP 1
12615: PPUSH
12616: LD_STRING DDen-JMM-1
12618: PPUSH
12619: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12623: LD_EXP 9
12627: PPUSH
12628: LD_STRING DDen-Den-2
12630: PPUSH
12631: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12635: LD_EXP 1
12639: PPUSH
12640: LD_STRING DDen-JMM-2
12642: PPUSH
12643: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12647: LD_EXP 9
12651: PPUSH
12652: LD_STRING DDen-Den-3
12654: PPUSH
12655: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING DDen-JMM-3
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12675: LD_INT 36
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12688: LD_INT 15
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12701: LD_STRING MR
12703: PPUSH
12704: CALL_OW 337
// end ;
12708: LD_VAR 0 1
12712: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12713: LD_INT 22
12715: PUSH
12716: LD_INT 1
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 15
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 69
12741: PUSH
12742: LD_EXP 9
12746: PPUSH
12747: CALL_OW 302
12751: AND
12752: PUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 463
12760: NOT
12761: AND
12762: IFFALSE 12791
12764: GO 12766
12766: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12767: LD_EXP 9
12771: PPUSH
12772: LD_STRING DR1-Den-1
12774: PPUSH
12775: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12779: LD_EXP 1
12783: PPUSH
12784: LD_STRING DR1-JMM-1
12786: PPUSH
12787: CALL_OW 88
// end ;
12791: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12792: LD_INT 15
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 321
12802: PUSH
12803: LD_INT 2
12805: EQUAL
12806: PUSH
12807: LD_EXP 9
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: CALL_OW 463
12825: NOT
12826: AND
12827: IFFALSE 13036
12829: GO 12831
12831: DISABLE
// begin DialogueOn ;
12832: CALL_OW 6
// if IsOK ( Denis ) then
12836: LD_EXP 9
12840: PPUSH
12841: CALL_OW 302
12845: IFFALSE 12861
// Say ( Denis , DR2-Den-1 ) else
12847: LD_EXP 9
12851: PPUSH
12852: LD_STRING DR2-Den-1
12854: PPUSH
12855: CALL_OW 88
12859: GO 12920
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12861: LD_INT 22
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 25
12883: PUSH
12884: LD_INT 4
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 69
12900: PUSH
12901: LD_EXP 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: DIFF
12909: PPUSH
12910: LD_STRING DR2-Sci1-1
12912: PPUSH
12913: LD_STRING DR2-FSci1-1
12915: PPUSH
12916: CALL 7538 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12920: LD_EXP 1
12924: PPUSH
12925: LD_STRING DR2-JMM-1
12927: PPUSH
12928: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12932: LD_INT 22
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: PUSH
12983: LD_EXP 1
12987: PUSH
12988: LD_EXP 9
12992: PUSH
12993: LD_EXP 8
12997: PUSH
12998: LD_EXP 5
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: DIFF
13009: PPUSH
13010: LD_STRING DR2-Sol1-1
13012: PPUSH
13013: LD_STRING 
13015: PPUSH
13016: CALL 7538 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING DR2-JMM-2
13027: PPUSH
13028: CALL_OW 88
// DialogueOff ;
13032: CALL_OW 7
// end ;
13036: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13037: LD_INT 22
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 36
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: PUSH
13066: LD_INT 0
13068: EQUAL
13069: PUSH
13070: LD_INT 22
13072: PUSH
13073: LD_INT 1
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 21
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 33
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: PUSH
13110: LD_INT 0
13112: GREATER
13113: AND
13114: PUSH
13115: LD_EXP 24
13119: PUSH
13120: LD_INT 0
13122: EQUAL
13123: AND
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 463
13132: NOT
13133: AND
13134: IFFALSE 13271
13136: GO 13138
13138: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 26
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PUSH
13190: LD_EXP 1
13194: PUSH
13195: LD_EXP 6
13199: PUSH
13200: LD_EXP 7
13204: PUSH
13205: LD_EXP 9
13209: PUSH
13210: LD_EXP 16
13214: PUSH
13215: LD_EXP 3
13219: PUSH
13220: LD_EXP 4
13224: PUSH
13225: LD_EXP 2
13229: PUSH
13230: LD_EXP 5
13234: PUSH
13235: LD_EXP 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: DIFF
13252: PPUSH
13253: LD_STRING D3a-Mech1-1
13255: PPUSH
13256: LD_STRING 
13258: PPUSH
13259: CALL 7538 0 3
// firstTower = 2 ;
13263: LD_ADDR_EXP 24
13267: PUSH
13268: LD_INT 2
13270: ST_TO_ADDR
// end ;
13271: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: PUSH
13301: LD_INT 0
13303: EQUAL
13304: IFFALSE 13435
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
// begin stop_talking := true ;
13312: LD_ADDR_OWVAR 56
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_INT 1
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 2
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 3
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 4
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13425
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_INT 7500
13418: PPUSH
13419: CALL_OW 591
13423: GO 13405
13425: POP
13426: POP
// stop_talking := false ;
13427: LD_ADDR_OWVAR 56
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// end ;
13435: PPOPN 1
13437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13438: LD_INT 22
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 36
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PUSH
13467: LD_INT 22
13469: PUSH
13470: LD_INT 1
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 2
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 33
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: AND
13507: PUSH
13508: CALL 14060 0 0
13512: AND
13513: PUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 463
13521: NOT
13522: AND
13523: IFFALSE 14057
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 36
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13569: LD_ADDR_VAR 0 4
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 33
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PPUSH
13609: CALL_OW 69
13613: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13614: LD_ADDR_VAR 0 5
13618: PUSH
13619: EMPTY
13620: ST_TO_ADDR
// for i in tmpControlTowers do
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_VAR 0 3
13630: PUSH
13631: FOR_IN
13632: IFFALSE 14055
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13634: LD_EXP 1
13638: PPUSH
13639: CALL_OW 310
13643: PUSH
13644: LD_VAR 0 1
13648: EQUAL
13649: PUSH
13650: LD_EXP 1
13654: PPUSH
13655: CALL_OW 257
13659: PUSH
13660: LD_INT 3
13662: EQUAL
13663: AND
13664: IFFALSE 13798
// begin InGameOn ;
13666: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13683: LD_EXP 1
13687: PPUSH
13688: LD_STRING D4a-JMM-1
13690: PPUSH
13691: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13695: LD_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: LD_EXP 1
13708: PPUSH
13709: CALL_OW 53
// wait ( 0 0$1 ) ;
13713: LD_INT 35
13715: PPUSH
13716: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13720: LD_VAR 0 4
13724: PUSH
13725: LD_INT 1
13727: ARRAY
13728: PPUSH
13729: LD_VAR 0 4
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PPUSH
13738: CALL_OW 250
13742: PUSH
13743: LD_INT 3
13745: PLUS
13746: PPUSH
13747: LD_VAR 0 4
13751: PUSH
13752: LD_INT 1
13754: ARRAY
13755: PPUSH
13756: CALL_OW 251
13760: PUSH
13761: LD_INT 2
13763: MINUS
13764: PPUSH
13765: CALL_OW 111
// wait ( 0 0$2 ) ;
13769: LD_INT 70
13771: PPUSH
13772: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13776: LD_EXP 1
13780: PPUSH
13781: LD_STRING D4b-JMM-1
13783: PPUSH
13784: CALL_OW 88
// InGameOff ;
13788: CALL_OW 9
// exit ;
13792: POP
13793: POP
13794: GO 14057
// end else
13796: GO 14053
// begin InGameOn ;
13798: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13802: LD_ADDR_VAR 0 5
13806: PUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: CALL_OW 313
13816: PPUSH
13817: LD_INT 25
13819: PUSH
13820: LD_INT 3
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 72
13831: ST_TO_ADDR
// if not tmpMechanicInside then
13832: LD_VAR 0 5
13836: NOT
13837: IFFALSE 13841
// continue ;
13839: GO 13631
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13841: LD_VAR 0 5
13845: PUSH
13846: LD_INT 1
13848: ARRAY
13849: PPUSH
13850: CALL_OW 258
13854: PUSH
13855: LD_INT 1
13857: EQUAL
13858: IFFALSE 13878
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13860: LD_VAR 0 5
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: LD_STRING D4a-Mech1-1
13871: PPUSH
13872: CALL_OW 88
13876: GO 13894
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13878: LD_VAR 0 5
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: PPUSH
13887: LD_STRING D4a-FMech1-1
13889: PPUSH
13890: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13894: LD_VAR 0 4
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: PPUSH
13903: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13907: LD_VAR 0 4
13911: PUSH
13912: LD_INT 1
13914: ARRAY
13915: PPUSH
13916: LD_VAR 0 5
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 53
// wait ( 0 0$1 ) ;
13929: LD_INT 35
13931: PPUSH
13932: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13936: LD_VAR 0 4
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: LD_VAR 0 4
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PPUSH
13954: CALL_OW 250
13958: PUSH
13959: LD_INT 3
13961: PLUS
13962: PPUSH
13963: LD_VAR 0 4
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: CALL_OW 251
13976: PUSH
13977: LD_INT 2
13979: MINUS
13980: PPUSH
13981: CALL_OW 111
// wait ( 0 0$2 ) ;
13985: LD_INT 70
13987: PPUSH
13988: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: CALL_OW 258
14005: PUSH
14006: LD_INT 1
14008: EQUAL
14009: IFFALSE 14029
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14011: LD_VAR 0 5
14015: PUSH
14016: LD_INT 1
14018: ARRAY
14019: PPUSH
14020: LD_STRING D4b-Mech1-1
14022: PPUSH
14023: CALL_OW 88
14027: GO 14045
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: LD_STRING D4b-FMech1-1
14040: PPUSH
14041: CALL_OW 88
// InGameOff ;
14045: CALL_OW 9
// exit ;
14049: POP
14050: POP
14051: GO 14057
// end ; end ;
14053: GO 13631
14055: POP
14056: POP
// end ;
14057: PPOPN 5
14059: END
// function CheckMehInside ; var i , j , tmp ; begin
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
// result := false ;
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_INT 1
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 30
14091: PUSH
14092: LD_INT 36
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: ST_TO_ADDR
// if not tmp then
14108: LD_VAR 0 4
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14181
// for i in tmp do
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: LD_VAR 0 4
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14179
// for j in UnitsInside ( i ) do
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_VAR 0 2
14139: PPUSH
14140: CALL_OW 313
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14175
// if GetClass ( j ) = class_mechanic then
14148: LD_VAR 0 3
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 3
14160: EQUAL
14161: IFFALSE 14173
// begin result := true ;
14163: LD_ADDR_VAR 0 1
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// break ;
14171: GO 14175
// end ;
14173: GO 14145
14175: POP
14176: POP
14177: GO 14127
14179: POP
14180: POP
// end ;
14181: LD_VAR 0 1
14185: RET
// every 12 12$0 do
14186: GO 14188
14188: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14189: LD_INT 35
14191: PPUSH
14192: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 463
14203: NOT
14204: PUSH
14205: LD_INT 32
14207: PPUSH
14208: LD_INT 81
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 70
14222: NOT
14223: AND
14224: PUSH
14225: LD_EXP 27
14229: PUSH
14230: LD_INT 10500
14232: LESS
14233: OR
14234: IFFALSE 14189
// PrepareKurt ;
14236: CALL 16869 0 0
// end ;
14240: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14241: LD_EXP 16
14245: PPUSH
14246: CALL_OW 302
14250: PUSH
14251: LD_EXP 16
14255: PPUSH
14256: CALL_OW 255
14260: PUSH
14261: LD_INT 1
14263: EQUAL
14264: AND
14265: PUSH
14266: LD_EXP 2
14270: AND
14271: IFFALSE 14436
14273: GO 14275
14275: DISABLE
// begin wait ( 0 0$50 ) ;
14276: LD_INT 1750
14278: PPUSH
14279: CALL_OW 67
// if not IsOk ( Joan ) then
14283: LD_EXP 16
14287: PPUSH
14288: CALL_OW 302
14292: NOT
14293: IFFALSE 14297
// exit ;
14295: GO 14436
// if IsOK ( Lisa ) then
14297: LD_EXP 2
14301: PPUSH
14302: CALL_OW 302
14306: IFFALSE 14436
// begin DialogueOn ;
14308: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14312: LD_EXP 2
14316: PPUSH
14317: LD_STRING D7-Lisa-1
14319: PPUSH
14320: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14324: LD_EXP 1
14328: PPUSH
14329: LD_STRING D7-JMM-1
14331: PPUSH
14332: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14336: LD_EXP 2
14340: PPUSH
14341: LD_STRING D7-Lisa-2
14343: PPUSH
14344: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14348: LD_EXP 1
14352: PPUSH
14353: LD_STRING D7-JMM-2
14355: PPUSH
14356: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14360: LD_EXP 2
14364: PPUSH
14365: LD_STRING D7-Lisa-3
14367: PPUSH
14368: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14372: LD_EXP 1
14376: PPUSH
14377: LD_STRING D7-JMM-3
14379: PPUSH
14380: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14384: LD_EXP 2
14388: PPUSH
14389: LD_STRING D7-Lisa-4
14391: PPUSH
14392: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14396: LD_EXP 1
14400: PPUSH
14401: LD_STRING D7-JMM-4
14403: PPUSH
14404: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14408: LD_EXP 1
14412: PPUSH
14413: LD_STRING D7-JMM-4a
14415: PPUSH
14416: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14420: LD_EXP 2
14424: PPUSH
14425: LD_STRING D7-Lisa-5
14427: PPUSH
14428: CALL_OW 88
// DialogueOff ;
14432: CALL_OW 7
// end ; end ;
14436: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14437: LD_EXP 14
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 91
14454: PUSH
14455: LD_EXP 14
14459: PUSH
14460: LD_INT 10
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 25
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 1
14530: GREATER
14531: AND
14532: IFFALSE 14549
14534: GO 14536
14536: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14537: LD_EXP 14
14541: PPUSH
14542: LD_STRING D5-Sol1-1
14544: PPUSH
14545: CALL_OW 88
14549: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14550: LD_INT 22
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 33
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: PUSH
14579: LD_INT 2
14581: GREATEREQUAL
14582: IFFALSE 14602
14584: GO 14586
14586: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14587: LD_STRING MRa
14589: PPUSH
14590: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14594: LD_ADDR_EXP 29
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// end ;
14602: END
// every 2 2$00 do var i , last ;
14603: GO 14605
14605: DISABLE
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// begin last := 8 ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 8
14617: ST_TO_ADDR
// for i := 1 to last do
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: DOUBLE
14624: LD_INT 1
14626: DEC
14627: ST_TO_ADDR
14628: LD_VAR 0 2
14632: PUSH
14633: FOR_TO
14634: IFFALSE 14662
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14636: LD_INT 6300
14638: PPUSH
14639: LD_INT 12600
14641: PPUSH
14642: CALL_OW 12
14646: PPUSH
14647: CALL_OW 67
// PrepareRandoms ( i ) ;
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL 4230 0 1
// end ;
14660: GO 14633
14662: POP
14663: POP
// end ;
14664: PPOPN 2
14666: END
// every 5 5$20 do
14667: GO 14669
14669: DISABLE
// begin DialogueOn ;
14670: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14674: LD_EXP 10
14678: PPUSH
14679: LD_STRING D12a-Sci-1
14681: PPUSH
14682: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14686: LD_EXP 1
14690: PPUSH
14691: LD_STRING D12a-JMM-1
14693: PPUSH
14694: CALL_OW 88
// DialogueOff ;
14698: CALL_OW 7
// cratesStatus := 1 ;
14702: LD_ADDR_EXP 39
14706: PUSH
14707: LD_INT 1
14709: ST_TO_ADDR
// end ;
14710: END
// every 13 13$0 do
14711: GO 14713
14713: DISABLE
// begin DialogueOn ;
14714: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14718: LD_EXP 10
14722: PPUSH
14723: LD_STRING D12b-Sci-1
14725: PPUSH
14726: CALL_OW 94
// DialogueOff ;
14730: CALL_OW 7
// cratesStatus := 2 ;
14734: LD_ADDR_EXP 39
14738: PUSH
14739: LD_INT 2
14741: ST_TO_ADDR
// BuildBulldozer ;
14742: CALL 10581 0 0
// end ;
14746: END
// every 32 32$0 do
14747: GO 14749
14749: DISABLE
// begin DialogueOn ;
14750: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14754: LD_EXP 10
14758: PPUSH
14759: LD_STRING D12c-Sci-1
14761: PPUSH
14762: CALL_OW 94
// DialogueOff ;
14766: CALL_OW 7
// wait ( 3 3$0 ) ;
14770: LD_INT 6300
14772: PPUSH
14773: CALL_OW 67
// DialogueOn ;
14777: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14781: LD_EXP 10
14785: PPUSH
14786: LD_STRING D12d-Sci-1
14788: PPUSH
14789: CALL_OW 94
// DialogueOff ;
14793: CALL_OW 7
// cratesStatus = 1 ;
14797: LD_ADDR_EXP 39
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14805: CALL 21211 0 0
// wait ( 2 2$30 ) ;
14809: LD_INT 5250
14811: PPUSH
14812: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14816: LD_INT 35
14818: PPUSH
14819: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: PUSH
14832: LD_INT 32
14834: PPUSH
14835: LD_INT 81
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 70
14849: NOT
14850: AND
14851: PUSH
14852: LD_EXP 27
14856: PUSH
14857: LD_INT 6300
14859: LESS
14860: OR
14861: IFFALSE 14816
// PrepareJoan ;
14863: CALL 3085 0 0
// end ;
14867: END
// every 42 42$0 do
14868: GO 14870
14870: DISABLE
// begin DialogueOn ;
14871: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14875: LD_EXP 10
14879: PPUSH
14880: LD_STRING D12e-Sci-1
14882: PPUSH
14883: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14887: LD_EXP 1
14891: PPUSH
14892: LD_STRING D12e-JMM-1
14894: PPUSH
14895: CALL_OW 88
// DialogueOff ;
14899: CALL_OW 7
// cratesStatus := 2 ;
14903: LD_ADDR_EXP 39
14907: PUSH
14908: LD_INT 2
14910: ST_TO_ADDR
// end ; end_of_file
14911: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14912: LD_VAR 0 1
14916: PUSH
14917: LD_INT 1
14919: EQUAL
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 3
14928: EQUAL
14929: AND
14930: IFFALSE 14940
// contactWithRussian := 1 ;
14932: LD_ADDR_EXP 23
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// end ;
14940: PPOPN 2
14942: END
// on BuildingComplete ( building ) do var i ;
14943: LD_INT 0
14945: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 266
14955: PUSH
14956: LD_INT 36
14958: EQUAL
14959: PUSH
14960: LD_VAR 0 1
14964: PPUSH
14965: CALL_OW 255
14969: PUSH
14970: LD_INT 1
14972: EQUAL
14973: AND
14974: PUSH
14975: LD_EXP 24
14979: PUSH
14980: LD_INT 0
14982: EQUAL
14983: AND
14984: IFFALSE 15064
// begin firstTower = 1 ;
14986: LD_ADDR_EXP 24
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14994: LD_INT 22
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 25
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 26
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_EXP 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: DIFF
15053: PPUSH
15054: LD_STRING D3b-Mech1-1
15056: PPUSH
15057: LD_STRING D3b-Mech1-1
15059: PPUSH
15060: CALL 7538 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL_OW 266
15073: PUSH
15074: LD_INT 0
15076: EQUAL
15077: PUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 255
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: AND
15092: IFFALSE 15106
// SetBName ( building , theta ) ;
15094: LD_VAR 0 1
15098: PPUSH
15099: LD_STRING theta
15101: PPUSH
15102: CALL_OW 500
// if GetSide ( building ) = 3 then
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 255
15115: PUSH
15116: LD_INT 3
15118: EQUAL
15119: IFFALSE 15159
// begin for i := 1 to 4 do
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: DOUBLE
15127: LD_INT 1
15129: DEC
15130: ST_TO_ADDR
15131: LD_INT 4
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15157
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15137: LD_ADDR_EXP 32
15141: PUSH
15142: LD_EXP 32
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 3
15154: ST_TO_ADDR
15155: GO 15134
15157: POP
15158: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 255
15168: PUSH
15169: LD_INT 3
15171: EQUAL
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 266
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 266
15196: PUSH
15197: LD_INT 2
15199: EQUAL
15200: OR
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 266
15211: PUSH
15212: LD_INT 4
15214: EQUAL
15215: OR
15216: PUSH
15217: EMPTY
15218: LIST
15219: AND
15220: IFFALSE 15231
// ComUpgrade ( building ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15231: LD_VAR 0 1
15235: PPUSH
15236: CALL_OW 255
15240: PUSH
15241: LD_INT 3
15243: EQUAL
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 266
15254: PUSH
15255: LD_INT 32
15257: EQUAL
15258: AND
15259: IFFALSE 15300
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_INT 42
15268: PUSH
15269: LD_INT 43
15271: PUSH
15272: LD_INT 44
15274: PUSH
15275: LD_INT 46
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PPUSH
15287: LD_INT 4
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: PPUSH
15296: CALL_OW 208
// end ;
15300: PPOPN 2
15302: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL 37778 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15312: LD_VAR 0 1
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 23
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: IN
15357: IFFALSE 15373
// killCounter := killCounter + 1 ;
15359: LD_ADDR_EXP 46
15363: PUSH
15364: LD_EXP 46
15368: PUSH
15369: LD_INT 1
15371: PLUS
15372: ST_TO_ADDR
// if unit in ruAttackersInForest then
15373: LD_VAR 0 1
15377: PUSH
15378: LD_EXP 49
15382: IN
15383: IFFALSE 15401
// ruAttackersInForest := ruAttackersInForest diff unit ;
15385: LD_ADDR_EXP 49
15389: PUSH
15390: LD_EXP 49
15394: PUSH
15395: LD_VAR 0 1
15399: DIFF
15400: ST_TO_ADDR
// if unit in ruAttackers then
15401: LD_VAR 0 1
15405: PUSH
15406: LD_EXP 48
15410: IN
15411: IFFALSE 15429
// ruAttackers := ruAttackers diff unit ;
15413: LD_ADDR_EXP 48
15417: PUSH
15418: LD_EXP 48
15422: PUSH
15423: LD_VAR 0 1
15427: DIFF
15428: ST_TO_ADDR
// if unit = JMM then
15429: LD_VAR 0 1
15433: PUSH
15434: LD_EXP 1
15438: EQUAL
15439: IFFALSE 15448
// YouLost ( JMM ) ;
15441: LD_STRING JMM
15443: PPUSH
15444: CALL_OW 104
// if unit = Joan then
15448: LD_VAR 0 1
15452: PUSH
15453: LD_EXP 16
15457: EQUAL
15458: IFFALSE 15468
// JoanStatus := 0 ;
15460: LD_ADDR_EXP 17
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 255
15477: PUSH
15478: LD_INT 1
15480: EQUAL
15481: PUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 247
15491: PUSH
15492: LD_INT 1
15494: EQUAL
15495: AND
15496: PUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 248
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: IFFALSE 15527
// unitLost = unitLost + 1 ;
15513: LD_ADDR_EXP 31
15517: PUSH
15518: LD_EXP 31
15522: PUSH
15523: LD_INT 1
15525: PLUS
15526: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 255
15536: PUSH
15537: LD_INT 3
15539: EQUAL
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 247
15550: PUSH
15551: LD_INT 3
15553: EQUAL
15554: AND
15555: PUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: CALL_OW 266
15565: PUSH
15566: LD_INT 4
15568: PUSH
15569: LD_INT 5
15571: PUSH
15572: LD_INT 32
15574: PUSH
15575: LD_INT 31
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: IN
15584: AND
15585: IFFALSE 15671
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15587: LD_ADDR_EXP 32
15591: PUSH
15592: LD_EXP 32
15596: PUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 266
15606: ADD
15607: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15608: LD_ADDR_EXP 32
15612: PUSH
15613: LD_EXP 32
15617: PUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 250
15627: ADD
15628: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15629: LD_ADDR_EXP 32
15633: PUSH
15634: LD_EXP 32
15638: PUSH
15639: LD_VAR 0 1
15643: PPUSH
15644: CALL_OW 251
15648: ADD
15649: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15650: LD_ADDR_EXP 32
15654: PUSH
15655: LD_EXP 32
15659: PUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 254
15669: ADD
15670: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15671: LD_EXP 47
15675: PUSH
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 257
15685: PUSH
15686: LD_INT 3
15688: EQUAL
15689: AND
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 255
15700: PUSH
15701: LD_INT 3
15703: EQUAL
15704: AND
15705: PUSH
15706: LD_INT 21
15708: PPUSH
15709: CALL_OW 302
15713: AND
15714: PUSH
15715: LD_INT 21
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: LD_INT 3
15725: EQUAL
15726: AND
15727: IFFALSE 15809
// begin ruMechCounter := ruMechCounter - 1 ;
15729: LD_ADDR_EXP 47
15733: PUSH
15734: LD_EXP 47
15738: PUSH
15739: LD_INT 1
15741: MINUS
15742: ST_TO_ADDR
// uc_side := 3 ;
15743: LD_ADDR_OWVAR 20
15747: PUSH
15748: LD_INT 3
15750: ST_TO_ADDR
// uc_nation := 3 ;
15751: LD_ADDR_OWVAR 21
15755: PUSH
15756: LD_INT 3
15758: ST_TO_ADDR
// hc_gallery :=  ;
15759: LD_ADDR_OWVAR 33
15763: PUSH
15764: LD_STRING 
15766: ST_TO_ADDR
// hc_name :=  ;
15767: LD_ADDR_OWVAR 26
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15775: LD_INT 0
15777: PPUSH
15778: LD_EXP 35
15782: PPUSH
15783: LD_EXP 36
15787: PPUSH
15788: CALL_OW 12
15792: PPUSH
15793: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15797: CALL_OW 44
15801: PPUSH
15802: LD_INT 21
15804: PPUSH
15805: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 255
15818: PUSH
15819: LD_INT 3
15821: EQUAL
15822: PUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 264
15832: PUSH
15833: LD_INT 52
15835: EQUAL
15836: AND
15837: PUSH
15838: LD_INT 21
15840: PPUSH
15841: CALL_OW 302
15845: AND
15846: PUSH
15847: LD_INT 21
15849: PPUSH
15850: CALL_OW 255
15854: PUSH
15855: LD_INT 3
15857: EQUAL
15858: AND
15859: IFFALSE 15880
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15861: LD_INT 21
15863: PPUSH
15864: LD_INT 22
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 1
15872: PPUSH
15873: LD_INT 52
15875: PPUSH
15876: CALL_OW 125
// end ;
15880: PPOPN 1
15882: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
15887: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL 37898 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 255
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 264
15925: PUSH
15926: LD_INT 51
15928: PUSH
15929: LD_INT 52
15931: PUSH
15932: LD_INT 53
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: IN
15940: NOT
15941: AND
15942: IFFALSE 15973
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15944: LD_ADDR_EXP 48
15948: PUSH
15949: LD_EXP 48
15953: PPUSH
15954: LD_EXP 48
15958: PUSH
15959: LD_INT 1
15961: PLUS
15962: PPUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 264
15982: PUSH
15983: LD_INT 53
15985: EQUAL
15986: IFFALSE 16141
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_INT 60
15995: PPUSH
15996: LD_INT 85
15998: PPUSH
15999: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_INT 43
16010: PPUSH
16011: LD_INT 69
16013: PPUSH
16014: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16018: LD_VAR 0 1
16022: PPUSH
16023: LD_INT 37
16025: PPUSH
16026: LD_INT 46
16028: PPUSH
16029: CALL_OW 171
// wait ( 0 0$1 ) ;
16033: LD_INT 35
16035: PPUSH
16036: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16040: LD_INT 35
16042: PPUSH
16043: CALL_OW 67
// until not HasTask ( vehicle ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 314
16056: NOT
16057: IFFALSE 16040
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16059: LD_VAR 0 1
16063: PPUSH
16064: LD_INT 34
16066: PPUSH
16067: CALL 10633 0 2
// repeat wait ( 0 0$1 ) ;
16071: LD_INT 35
16073: PPUSH
16074: CALL_OW 67
// until not HasTask ( vehicle ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 314
16087: NOT
16088: IFFALSE 16071
// un := IsDrivenBy ( vehicle ) ;
16090: LD_ADDR_VAR 0 4
16094: PUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 311
16104: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16105: LD_VAR 0 4
16109: PPUSH
16110: LD_INT 96
16112: PPUSH
16113: LD_INT 77
16115: PPUSH
16116: CALL_OW 171
// AddComExitVehicle ( un ) ;
16120: LD_VAR 0 4
16124: PPUSH
16125: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16129: LD_VAR 0 4
16133: PPUSH
16134: LD_INT 17
16136: PPUSH
16137: CALL_OW 180
// end ; end ;
16141: PPOPN 5
16143: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 255
16153: PUSH
16154: LD_INT 3
16156: EQUAL
16157: IFFALSE 16188
// begin tamedApemans = tamedApemans + 1 ;
16159: LD_ADDR_EXP 33
16163: PUSH
16164: LD_EXP 33
16168: PUSH
16169: LD_INT 1
16171: PLUS
16172: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16173: LD_VAR 0 1
16177: PPUSH
16178: LD_INT 106
16180: PPUSH
16181: LD_INT 85
16183: PPUSH
16184: CALL_OW 111
// end ; end ;
16188: PPOPN 2
16190: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 255
16200: PUSH
16201: LD_INT 3
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: AND
16219: PUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 302
16227: AND
16228: IFFALSE 16242
// ComEnterUnit ( human , rufab ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: LD_INT 21
16237: PPUSH
16238: CALL_OW 120
// end ;
16242: PPOPN 4
16244: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16245: LD_VAR 0 1
16249: PUSH
16250: LD_INT 21
16252: EQUAL
16253: PUSH
16254: LD_VAR 0 2
16258: PPUSH
16259: CALL_OW 255
16263: PUSH
16264: LD_INT 3
16266: EQUAL
16267: AND
16268: IFFALSE 16282
// SetLives ( human , 1000 ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_INT 1000
16277: PPUSH
16278: CALL_OW 234
// end ;
16282: PPOPN 2
16284: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL 37882 0 1
// end ; end_of_file
16294: PPOPN 1
16296: END
// every 0 0$30 trigger cratesStatus = 1 do
16297: LD_EXP 39
16301: PUSH
16302: LD_INT 1
16304: EQUAL
16305: IFFALSE 16358
16307: GO 16309
16309: DISABLE
// begin enable ;
16310: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16311: LD_INT 350
16313: PUSH
16314: LD_INT 875
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PPUSH
16324: LD_INT 2
16326: PPUSH
16327: CALL_OW 12
16331: ARRAY
16332: PPUSH
16333: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16337: LD_INT 1
16339: PPUSH
16340: LD_INT 5
16342: PPUSH
16343: CALL_OW 12
16347: PPUSH
16348: LD_INT 7
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 55
// end ;
16358: END
// every 1 1$0 trigger cratesStatus = 2 do
16359: LD_EXP 39
16363: PUSH
16364: LD_INT 2
16366: EQUAL
16367: IFFALSE 16450
16369: GO 16371
16371: DISABLE
// begin enable ;
16372: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16373: LD_INT 3150
16375: PUSH
16376: LD_INT 4550
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_INT 2
16388: PPUSH
16389: CALL_OW 12
16393: ARRAY
16394: PPUSH
16395: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16399: LD_INT 2
16401: PUSH
16402: LD_INT 5
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_INT 2
16414: PPUSH
16415: CALL_OW 12
16419: ARRAY
16420: PPUSH
16421: LD_INT 6
16423: PUSH
16424: LD_INT 7
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_INT 2
16436: PPUSH
16437: CALL_OW 12
16441: ARRAY
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 55
// end ;
16450: END
// every 0 0$30 + 0 0$10 do
16451: GO 16453
16453: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16454: LD_INT 4
16456: PUSH
16457: LD_INT 5
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_INT 2
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: PPUSH
16476: LD_INT 7
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 55
// Wait ( 0 0$15 ) ;
16486: LD_INT 525
16488: PPUSH
16489: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16493: LD_INT 4
16495: PUSH
16496: LD_INT 5
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: PPUSH
16515: LD_INT 7
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 55
// Wait ( 0 0$20 ) ;
16525: LD_INT 700
16527: PPUSH
16528: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16532: LD_INT 4
16534: PUSH
16535: LD_INT 5
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 2
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: PPUSH
16554: LD_INT 7
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 55
// end ; end_of_file
16564: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16565: LD_EXP 25
16569: PUSH
16570: LD_INT 1
16572: EQUAL
16573: IFFALSE 16866
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
16582: PPUSH
// begin enable ;
16583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 22
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 21
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 30
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 69
16646: ST_TO_ADDR
// for i in tmp do
16647: LD_ADDR_VAR 0 1
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_IN
16658: IFFALSE 16691
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_VAR 0 3
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 274
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 275
16687: PLUS
16688: ST_TO_ADDR
16689: GO 16657
16691: POP
16692: POP
// strings = [ ] ;
16693: LD_ADDR_EXP 28
16697: PUSH
16698: EMPTY
16699: ST_TO_ADDR
// if tmp = 0 then
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 0
16707: EQUAL
16708: IFFALSE 16733
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16710: LD_ADDR_EXP 28
16714: PUSH
16715: LD_EXP 28
16719: PUSH
16720: LD_STRING #Am06-1
16722: PUSH
16723: LD_EXP 26
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ADD
16732: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16733: LD_VAR 0 2
16737: PUSH
16738: LD_EXP 26
16742: PUSH
16743: LD_VAR 0 3
16747: GREATER
16748: AND
16749: IFFALSE 16780
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16751: LD_ADDR_EXP 28
16755: PUSH
16756: LD_EXP 28
16760: PUSH
16761: LD_STRING #Am06-1
16763: PUSH
16764: LD_EXP 26
16768: PUSH
16769: LD_VAR 0 3
16773: MINUS
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: ADD
16779: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16780: LD_VAR 0 2
16784: PUSH
16785: LD_EXP 26
16789: PUSH
16790: LD_VAR 0 3
16794: LESSEQUAL
16795: AND
16796: IFFALSE 16819
// strings = strings ^ [ #Am06-1 , 0 ] ;
16798: LD_ADDR_EXP 28
16802: PUSH
16803: LD_EXP 28
16807: PUSH
16808: LD_STRING #Am06-1
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: ADD
16818: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16819: LD_ADDR_EXP 27
16823: PUSH
16824: LD_EXP 27
16828: PUSH
16829: LD_INT 35
16831: MINUS
16832: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16833: LD_ADDR_EXP 28
16837: PUSH
16838: LD_EXP 28
16842: PUSH
16843: LD_STRING #Am06-2
16845: PUSH
16846: LD_EXP 27
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: ADD
16855: ST_TO_ADDR
// display_strings = strings ;
16856: LD_ADDR_OWVAR 47
16860: PUSH
16861: LD_EXP 28
16865: ST_TO_ADDR
// end ; end_of_file
16866: PPOPN 3
16868: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16869: LD_INT 0
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 30
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16931: LD_INT 35
16933: PPUSH
16934: CALL_OW 67
// until depot ;
16938: LD_VAR 0 3
16942: IFFALSE 16879
// forceJMM := false ;
16944: LD_ADDR_VAR 0 8
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16952: LD_INT 35
16954: PPUSH
16955: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16959: LD_ADDR_VAR 0 4
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 91
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_INT 15
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 25
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 25
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 54
17059: PUSH
17060: EMPTY
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 55
17072: PUSH
17073: EMPTY
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_EXP 2
17097: PUSH
17098: LD_EXP 3
17102: PUSH
17103: LD_EXP 4
17107: PUSH
17108: LD_EXP 5
17112: PUSH
17113: LD_EXP 7
17117: PUSH
17118: LD_EXP 8
17122: PUSH
17123: LD_EXP 9
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: DIFF
17137: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17138: LD_EXP 27
17142: PUSH
17143: LD_INT 21000
17145: LESS
17146: IFFALSE 17158
// begin forceJMM := true ;
17148: LD_ADDR_VAR 0 8
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// break ;
17156: GO 17174
// end ; until tmp and not InBattle ( 1 ) ;
17158: LD_VAR 0 4
17162: PUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 463
17170: NOT
17171: AND
17172: IFFALSE 16952
// if not forceJMM then
17174: LD_VAR 0 8
17178: NOT
17179: IFFALSE 17207
// tmp := tmp [ rand ( 1 , tmp ) ] else
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: LD_VAR 0 4
17190: PUSH
17191: LD_INT 1
17193: PPUSH
17194: LD_VAR 0 4
17198: PPUSH
17199: CALL_OW 12
17203: ARRAY
17204: ST_TO_ADDR
17205: GO 17217
// tmp := JMM ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_EXP 1
17216: ST_TO_ADDR
// blockSpawn := 1 ;
17217: LD_ADDR_EXP 30
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// uc_side := 2 ;
17225: LD_ADDR_OWVAR 20
17229: PUSH
17230: LD_INT 2
17232: ST_TO_ADDR
// uc_nation := 2 ;
17233: LD_ADDR_OWVAR 21
17237: PUSH
17238: LD_INT 2
17240: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17241: LD_ADDR_EXP 20
17245: PUSH
17246: LD_STRING Kurt
17248: PPUSH
17249: LD_INT 0
17251: PPUSH
17252: LD_STRING 
17254: PPUSH
17255: CALL 42672 0 3
17259: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17260: LD_EXP 20
17264: PPUSH
17265: LD_VAR 0 4
17269: PPUSH
17270: CALL_OW 250
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 251
17284: PPUSH
17285: LD_INT 5
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: CALL_OW 50
// InGameOn ;
17295: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17299: LD_EXP 20
17303: PPUSH
17304: CALL_OW 87
// wait ( 0 0$2 ) ;
17308: LD_INT 70
17310: PPUSH
17311: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17315: LD_EXP 20
17319: PPUSH
17320: LD_VAR 0 4
17324: PPUSH
17325: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17329: LD_VAR 0 4
17333: PPUSH
17334: LD_EXP 20
17338: PPUSH
17339: CALL_OW 112
// wait ( 0 0$1 ) ;
17343: LD_INT 35
17345: PPUSH
17346: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_EXP 20
17359: PPUSH
17360: CALL_OW 119
// DialogueOn ;
17364: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17368: LD_EXP 20
17372: PPUSH
17373: LD_STRING D2-Kurt-1
17375: PPUSH
17376: CALL_OW 88
// if tmp = JMM then
17380: LD_VAR 0 4
17384: PUSH
17385: LD_EXP 1
17389: EQUAL
17390: IFFALSE 17482
// begin Say ( JMM , D2-JMM-1 ) ;
17392: LD_EXP 1
17396: PPUSH
17397: LD_STRING D2-JMM-1
17399: PPUSH
17400: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17404: LD_EXP 20
17408: PPUSH
17409: LD_STRING D2-Kurt-2
17411: PPUSH
17412: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17416: LD_EXP 1
17420: PPUSH
17421: LD_STRING D2-JMM-2
17423: PPUSH
17424: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17428: LD_EXP 20
17432: PPUSH
17433: LD_STRING D2-Kurt-3
17435: PPUSH
17436: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17440: LD_EXP 1
17444: PPUSH
17445: LD_STRING D2-JMM-3
17447: PPUSH
17448: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17452: LD_EXP 20
17456: PPUSH
17457: LD_STRING D2-Kurt-4
17459: PPUSH
17460: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17464: LD_EXP 1
17468: PPUSH
17469: LD_STRING D2-JMM-4
17471: PPUSH
17472: CALL_OW 88
// DialogueOff ;
17476: CALL_OW 7
// end else
17480: GO 17710
// begin if GetSex ( tmp ) = 1 then
17482: LD_VAR 0 4
17486: PPUSH
17487: CALL_OW 258
17491: PUSH
17492: LD_INT 1
17494: EQUAL
17495: IFFALSE 17511
// Say ( tmp , D2-Sol1-1 ) else
17497: LD_VAR 0 4
17501: PPUSH
17502: LD_STRING D2-Sol1-1
17504: PPUSH
17505: CALL_OW 88
17509: GO 17523
// Say ( tmp , D2-FSol1-1 ) ;
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_STRING D2-FSol1-1
17518: PPUSH
17519: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17523: LD_EXP 20
17527: PPUSH
17528: LD_STRING D2-Kurt-2
17530: PPUSH
17531: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17535: LD_VAR 0 4
17539: PPUSH
17540: CALL_OW 258
17544: PUSH
17545: LD_INT 1
17547: EQUAL
17548: IFFALSE 17564
// Say ( tmp , D2-Sol1-2 ) else
17550: LD_VAR 0 4
17554: PPUSH
17555: LD_STRING D2-Sol1-2
17557: PPUSH
17558: CALL_OW 88
17562: GO 17576
// Say ( tmp , D2-FSol1-2 ) ;
17564: LD_VAR 0 4
17568: PPUSH
17569: LD_STRING D2-FSol1-2
17571: PPUSH
17572: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17576: LD_EXP 20
17580: PPUSH
17581: LD_STRING D2-Kurt-3
17583: PPUSH
17584: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 258
17597: PUSH
17598: LD_INT 1
17600: EQUAL
17601: IFFALSE 17617
// Say ( tmp , D2-Sol1-3 ) else
17603: LD_VAR 0 4
17607: PPUSH
17608: LD_STRING D2-Sol1-3
17610: PPUSH
17611: CALL_OW 88
17615: GO 17629
// Say ( tmp , D2-FSol1-3 ) ;
17617: LD_VAR 0 4
17621: PPUSH
17622: LD_STRING D2-FSol1-3
17624: PPUSH
17625: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17629: LD_EXP 20
17633: PPUSH
17634: LD_STRING D2-Kurt-4
17636: PPUSH
17637: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17641: LD_VAR 0 4
17645: PPUSH
17646: CALL_OW 258
17650: PUSH
17651: LD_INT 1
17653: EQUAL
17654: IFFALSE 17682
// begin Say ( tmp , D2-Sol1-4 ) ;
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_STRING D2-Sol1-4
17663: PPUSH
17664: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17668: LD_VAR 0 4
17672: PPUSH
17673: LD_STRING D2-Sol1-5
17675: PPUSH
17676: CALL_OW 88
// end else
17680: GO 17706
// begin Say ( tmp , D2-FSol1-4 ) ;
17682: LD_VAR 0 4
17686: PPUSH
17687: LD_STRING D2-FSol1-4
17689: PPUSH
17690: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17694: LD_VAR 0 4
17698: PPUSH
17699: LD_STRING D2-FSol1-5
17701: PPUSH
17702: CALL_OW 88
// end ; DialogueOff ;
17706: CALL_OW 7
// end ; dec := ShowQuery1 ;
17710: LD_ADDR_VAR 0 6
17714: PUSH
17715: CALL 8023 0 0
17719: ST_TO_ADDR
// if dec = 1 then
17720: LD_VAR 0 6
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17790
// begin DialogueOn ;
17730: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17734: LD_EXP 20
17738: PPUSH
17739: LD_STRING D2a-Kurt-1
17741: PPUSH
17742: CALL_OW 88
// DialogueOff ;
17746: CALL_OW 7
// InGameOff ;
17750: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17754: LD_INT 1
17756: PPUSH
17757: LD_INT 2
17759: PPUSH
17760: LD_INT 2
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17770: LD_EXP 20
17774: PPUSH
17775: LD_INT 8
17777: PPUSH
17778: CALL_OW 113
// readyToEscape := 1 ;
17782: LD_ADDR_EXP 22
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// end ; if dec = 2 then
17790: LD_VAR 0 6
17794: PUSH
17795: LD_INT 2
17797: EQUAL
17798: IFFALSE 18266
// begin DialogueOn ;
17800: CALL_OW 6
// if tmp = JMM then
17804: LD_VAR 0 4
17808: PUSH
17809: LD_EXP 1
17813: EQUAL
17814: IFFALSE 17870
// begin Say ( JMM , D2b-JMM-1 ) ;
17816: LD_EXP 1
17820: PPUSH
17821: LD_STRING D2b-JMM-1
17823: PPUSH
17824: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17828: LD_EXP 20
17832: PPUSH
17833: LD_STRING D2b-Kurt-1
17835: PPUSH
17836: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17840: LD_EXP 1
17844: PPUSH
17845: LD_STRING D2b-JMM-2
17847: PPUSH
17848: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17852: LD_EXP 20
17856: PPUSH
17857: LD_STRING D2b-Kurt-2
17859: PPUSH
17860: CALL_OW 88
// DialogueOff ;
17864: CALL_OW 7
// end else
17868: GO 18021
// begin if GetSex ( tmp ) = 1 then
17870: LD_VAR 0 4
17874: PPUSH
17875: CALL_OW 258
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17899
// Say ( tmp , D2b-Sol1-1 ) else
17885: LD_VAR 0 4
17889: PPUSH
17890: LD_STRING D2b-Sol1-1
17892: PPUSH
17893: CALL_OW 88
17897: GO 17911
// Say ( tmp , D2b-FSol1-1 ) ;
17899: LD_VAR 0 4
17903: PPUSH
17904: LD_STRING D2b-FSol1-1
17906: PPUSH
17907: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17911: LD_EXP 20
17915: PPUSH
17916: LD_STRING D2b-Kurt-1
17918: PPUSH
17919: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17923: LD_VAR 0 4
17927: PPUSH
17928: CALL_OW 258
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: IFFALSE 17952
// Say ( tmp , D2b-Sol1-2 ) else
17938: LD_VAR 0 4
17942: PPUSH
17943: LD_STRING D2b-Sol1-2
17945: PPUSH
17946: CALL_OW 88
17950: GO 17964
// Say ( tmp , D2b-FSol1-2 ) ;
17952: LD_VAR 0 4
17956: PPUSH
17957: LD_STRING D2b-FSol1-2
17959: PPUSH
17960: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17964: LD_EXP 20
17968: PPUSH
17969: LD_STRING D2b-Kurt-2
17971: PPUSH
17972: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17976: LD_VAR 0 4
17980: PPUSH
17981: CALL_OW 258
17985: PUSH
17986: LD_INT 1
17988: EQUAL
17989: IFFALSE 18005
// Say ( tmp , D2c-Sol1-2 ) else
17991: LD_VAR 0 4
17995: PPUSH
17996: LD_STRING D2c-Sol1-2
17998: PPUSH
17999: CALL_OW 88
18003: GO 18017
// Say ( tmp , D2c-FSol1-2 ) ;
18005: LD_VAR 0 4
18009: PPUSH
18010: LD_STRING D2c-FSol1-2
18012: PPUSH
18013: CALL_OW 88
// DialogueOff ;
18017: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18021: LD_ADDR_VAR 0 7
18025: PUSH
18026: CALL 8044 0 0
18030: ST_TO_ADDR
// if dec2 = 1 then
18031: LD_VAR 0 7
18035: PUSH
18036: LD_INT 1
18038: EQUAL
18039: IFFALSE 18101
// begin DialogueOn ;
18041: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18045: LD_EXP 20
18049: PPUSH
18050: LD_STRING D2a-Kurt-1
18052: PPUSH
18053: CALL_OW 88
// DialogueOff ;
18057: CALL_OW 7
// InGameOff ;
18061: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 2
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18081: LD_EXP 20
18085: PPUSH
18086: LD_INT 8
18088: PPUSH
18089: CALL_OW 113
// readyToEscape := 1 ;
18093: LD_ADDR_EXP 22
18097: PUSH
18098: LD_INT 1
18100: ST_TO_ADDR
// end ; if dec2 = 2 then
18101: LD_VAR 0 7
18105: PUSH
18106: LD_INT 2
18108: EQUAL
18109: IFFALSE 18266
// begin if tmp = JMM then
18111: LD_VAR 0 4
18115: PUSH
18116: LD_EXP 1
18120: EQUAL
18121: IFFALSE 18181
// begin DialogueOn ;
18123: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18127: LD_EXP 1
18131: PPUSH
18132: LD_STRING D2c-JMM-1
18134: PPUSH
18135: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18139: LD_EXP 20
18143: PPUSH
18144: LD_STRING D2c-Kurt-1
18146: PPUSH
18147: CALL_OW 88
// DialogueOff ;
18151: CALL_OW 7
// InGameOff ;
18155: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18159: LD_EXP 20
18163: PPUSH
18164: LD_INT 8
18166: PPUSH
18167: CALL_OW 113
// readyToEscape := 1 ;
18171: LD_ADDR_EXP 22
18175: PUSH
18176: LD_INT 1
18178: ST_TO_ADDR
// end else
18179: GO 18266
// begin DialogueOn ;
18181: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18185: LD_VAR 0 4
18189: PPUSH
18190: CALL_OW 258
18194: PUSH
18195: LD_INT 1
18197: EQUAL
18198: IFFALSE 18214
// Say ( tmp , D2c-Sol1-1 ) else
18200: LD_VAR 0 4
18204: PPUSH
18205: LD_STRING D2c-Sol1-1
18207: PPUSH
18208: CALL_OW 88
18212: GO 18226
// Say ( tmp , D2c-FSol1-1 ) ;
18214: LD_VAR 0 4
18218: PPUSH
18219: LD_STRING D2c-FSol1-1
18221: PPUSH
18222: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18226: LD_EXP 20
18230: PPUSH
18231: LD_STRING D2c-Kurt-1
18233: PPUSH
18234: CALL_OW 88
// DialogueOff ;
18238: CALL_OW 7
// InGameOff ;
18242: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18246: LD_EXP 20
18250: PPUSH
18251: LD_INT 8
18253: PPUSH
18254: CALL_OW 113
// readyToEscape := 1 ;
18258: LD_ADDR_EXP 22
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18266: LD_VAR 0 6
18270: PUSH
18271: LD_INT 3
18273: EQUAL
18274: IFFALSE 18435
// begin DialogueOn ;
18276: CALL_OW 6
// if tmp = JMM then
18280: LD_VAR 0 4
18284: PUSH
18285: LD_EXP 1
18289: EQUAL
18290: IFFALSE 18350
// begin DialogueOn ;
18292: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18296: LD_EXP 1
18300: PPUSH
18301: LD_STRING D2c-JMM-1
18303: PPUSH
18304: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18308: LD_EXP 20
18312: PPUSH
18313: LD_STRING D2c-Kurt-1
18315: PPUSH
18316: CALL_OW 88
// DialogueOff ;
18320: CALL_OW 7
// InGameOff ;
18324: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18328: LD_EXP 20
18332: PPUSH
18333: LD_INT 8
18335: PPUSH
18336: CALL_OW 113
// readyToEscape := 1 ;
18340: LD_ADDR_EXP 22
18344: PUSH
18345: LD_INT 1
18347: ST_TO_ADDR
// end else
18348: GO 18435
// begin DialogueOn ;
18350: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18383
// Say ( tmp , D2c-Sol1-1 ) else
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2c-Sol1-1
18376: PPUSH
18377: CALL_OW 88
18381: GO 18395
// Say ( tmp , D2c-FSol1-1 ) ;
18383: LD_VAR 0 4
18387: PPUSH
18388: LD_STRING D2c-FSol1-1
18390: PPUSH
18391: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18395: LD_EXP 20
18399: PPUSH
18400: LD_STRING D2c-Kurt-1
18402: PPUSH
18403: CALL_OW 88
// DialogueOff ;
18407: CALL_OW 7
// InGameOff ;
18411: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18415: LD_EXP 20
18419: PPUSH
18420: LD_INT 8
18422: PPUSH
18423: CALL_OW 113
// readyToEscape := 1 ;
18427: LD_ADDR_EXP 22
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18435: LD_ADDR_EXP 30
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18443: LD_INT 35
18445: PPUSH
18446: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18450: LD_EXP 20
18454: PPUSH
18455: LD_INT 8
18457: PPUSH
18458: CALL_OW 308
18462: PUSH
18463: LD_EXP 22
18467: AND
18468: PUSH
18469: LD_EXP 20
18473: PPUSH
18474: CALL_OW 301
18478: OR
18479: IFFALSE 18443
// if IsDead ( Kurt ) then
18481: LD_EXP 20
18485: PPUSH
18486: CALL_OW 301
18490: IFFALSE 18494
// exit ;
18492: GO 18549
// RemoveUnit ( Kurt ) ;
18494: LD_EXP 20
18498: PPUSH
18499: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18503: LD_EXP 20
18507: PPUSH
18508: LD_STRING Kurt
18510: PPUSH
18511: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 2
18520: PPUSH
18521: CALL_OW 81
18525: PUSH
18526: LD_INT 0
18528: EQUAL
18529: IFFALSE 18541
// kurtStatus = 1 else
18531: LD_ADDR_EXP 21
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
18539: GO 18549
// kurtStatus = 2 ;
18541: LD_ADDR_EXP 21
18545: PUSH
18546: LD_INT 2
18548: ST_TO_ADDR
// end ; end_of_file
18549: LD_VAR 0 1
18553: RET
// every 0 0$2 do
18554: GO 18556
18556: DISABLE
// begin enable ;
18557: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18558: LD_INT 3
18560: PPUSH
18561: LD_INT 2
18563: PPUSH
18564: LD_INT 10
18566: PPUSH
18567: LD_EXP 32
18571: PPUSH
18572: CALL 8475 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18576: LD_INT 3
18578: PPUSH
18579: LD_INT 12
18581: PPUSH
18582: LD_EXP 32
18586: PPUSH
18587: CALL 10078 0 3
// if disableHealAI = 0 then
18591: LD_EXP 34
18595: PUSH
18596: LD_INT 0
18598: EQUAL
18599: IFFALSE 18620
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 9
18606: PPUSH
18607: LD_INT 10
18609: PPUSH
18610: LD_INT 32
18612: PUSH
18613: EMPTY
18614: LIST
18615: PPUSH
18616: CALL 8842 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18620: LD_INT 3
18622: PPUSH
18623: LD_INT 51
18625: PPUSH
18626: LD_INT 6
18628: PPUSH
18629: CALL 9531 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18633: LD_INT 2
18635: PPUSH
18636: CALL_OW 303
18640: PUSH
18641: LD_INT 2
18643: PPUSH
18644: CALL_OW 255
18648: PUSH
18649: LD_INT 1
18651: EQUAL
18652: OR
18653: IFFALSE 18667
// DefendDepot ( 3 , rudepo ) else
18655: LD_INT 3
18657: PPUSH
18658: LD_INT 2
18660: PPUSH
18661: CALL 9358 0 2
18665: GO 18677
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18667: LD_INT 3
18669: PPUSH
18670: LD_INT 10
18672: PPUSH
18673: CALL 9649 0 2
// end ;
18677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18678: LD_INT 22
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 55
18700: PUSH
18701: EMPTY
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 34
18709: PUSH
18710: LD_INT 51
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: LD_INT 0
18734: EQUAL
18735: PUSH
18736: LD_INT 21
18738: PPUSH
18739: CALL_OW 255
18743: PUSH
18744: LD_INT 3
18746: EQUAL
18747: AND
18748: PUSH
18749: LD_INT 21
18751: PPUSH
18752: CALL_OW 302
18756: AND
18757: PUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 255
18765: PUSH
18766: LD_INT 3
18768: EQUAL
18769: AND
18770: PUSH
18771: LD_INT 2
18773: PPUSH
18774: CALL_OW 302
18778: AND
18779: PUSH
18780: LD_INT 21
18782: PPUSH
18783: CALL_OW 313
18787: AND
18788: PUSH
18789: LD_EXP 48
18793: PUSH
18794: LD_INT 4
18796: PUSH
18797: LD_INT 5
18799: PUSH
18800: LD_INT 6
18802: PUSH
18803: LD_INT 6
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: LD_OWVAR 67
18816: ARRAY
18817: LESS
18818: AND
18819: IFFALSE 19040
18821: GO 18823
18823: DISABLE
// begin enable ;
18824: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 274
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2000
18838: PPUSH
18839: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18843: LD_INT 3
18845: PPUSH
18846: LD_INT 21
18848: PPUSH
18849: LD_INT 4
18851: PUSH
18852: LD_INT 5
18854: PUSH
18855: LD_INT 6
18857: PUSH
18858: LD_INT 6
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: LD_OWVAR 67
18871: ARRAY
18872: PUSH
18873: LD_EXP 48
18877: MINUS
18878: PPUSH
18879: LD_INT 43
18881: PUSH
18882: LD_INT 43
18884: PUSH
18885: LD_INT 44
18887: PUSH
18888: LD_INT 44
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 43
18899: PUSH
18900: LD_INT 43
18902: PUSH
18903: LD_INT 43
18905: PUSH
18906: LD_INT 44
18908: PUSH
18909: LD_INT 44
18911: PUSH
18912: LD_INT 46
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 43
18925: PUSH
18926: LD_INT 43
18928: PUSH
18929: LD_INT 43
18931: PUSH
18932: LD_INT 44
18934: PUSH
18935: LD_INT 44
18937: PUSH
18938: LD_INT 46
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 43
18951: PUSH
18952: LD_INT 43
18954: PUSH
18955: LD_INT 44
18957: PUSH
18958: LD_INT 46
18960: PUSH
18961: LD_INT 46
18963: PUSH
18964: LD_INT 46
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: PUSH
18981: LD_OWVAR 67
18985: ARRAY
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_INT 22
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_INT 24
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 2
19011: PPUSH
19012: CALL_OW 12
19016: ARRAY
19017: PUSH
19018: LD_INT 24
19020: PUSH
19021: LD_INT 24
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: PUSH
19030: LD_OWVAR 67
19034: ARRAY
19035: PPUSH
19036: CALL 8321 0 7
// end ;
19040: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 255
19048: PUSH
19049: LD_INT 3
19051: EQUAL
19052: PUSH
19053: LD_INT 17
19055: PPUSH
19056: CALL_OW 302
19060: AND
19061: PUSH
19062: LD_INT 2
19064: PPUSH
19065: CALL_OW 255
19069: PUSH
19070: LD_INT 3
19072: EQUAL
19073: AND
19074: PUSH
19075: LD_INT 2
19077: PPUSH
19078: CALL_OW 302
19082: AND
19083: PUSH
19084: LD_EXP 48
19088: PUSH
19089: LD_INT 4
19091: PUSH
19092: LD_INT 5
19094: PUSH
19095: LD_INT 6
19097: PUSH
19098: LD_INT 7
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: PUSH
19107: LD_OWVAR 67
19111: ARRAY
19112: LESS
19113: AND
19114: IFFALSE 19162
19116: GO 19118
19118: DISABLE
// begin enable ;
19119: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19120: LD_INT 17
19122: PPUSH
19123: LD_INT 22
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: LD_INT 42
19134: PUSH
19135: LD_INT 43
19137: PUSH
19138: LD_INT 44
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 3
19151: PPUSH
19152: CALL_OW 12
19156: ARRAY
19157: PPUSH
19158: CALL_OW 185
// end ;
19162: END
// every 2 2$0 do var i , j ;
19163: GO 19165
19165: DISABLE
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19170: LD_INT 14700
19172: PUSH
19173: LD_INT 33600
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: CALL_OW 12
19190: ARRAY
19191: PPUSH
19192: CALL_OW 67
// disableHealAI = 1 ;
19196: LD_ADDR_EXP 34
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19204: LD_ADDR_VAR 0 1
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 4
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 69
19237: PUSH
19238: FOR_IN
19239: IFFALSE 19252
// ComExitBuilding ( i ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 122
19250: GO 19238
19252: POP
19253: POP
// wait ( 0 0$1 ) ;
19254: LD_INT 35
19256: PPUSH
19257: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19261: LD_INT 35
19263: PPUSH
19264: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 25
19285: PUSH
19286: LD_INT 4
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 69
19301: PUSH
19302: FOR_IN
19303: IFFALSE 19380
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19305: LD_ADDR_VAR 0 2
19309: PUSH
19310: LD_INT 17
19312: PPUSH
19313: LD_INT 22
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 25
19325: PUSH
19326: LD_INT 12
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 70
19341: PUSH
19342: FOR_IN
19343: IFFALSE 19376
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19345: LD_VAR 0 1
19349: PPUSH
19350: LD_VAR 0 2
19354: PPUSH
19355: CALL_OW 250
19359: PPUSH
19360: LD_VAR 0 2
19364: PPUSH
19365: CALL_OW 251
19369: PPUSH
19370: CALL_OW 191
19374: GO 19342
19376: POP
19377: POP
19378: GO 19302
19380: POP
19381: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19382: LD_INT 22
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 4
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 69
19410: PUSH
19411: LD_INT 0
19413: EQUAL
19414: PUSH
19415: LD_EXP 33
19419: PUSH
19420: LD_INT 6
19422: PUSH
19423: LD_INT 7
19425: PUSH
19426: LD_INT 8
19428: PUSH
19429: LD_INT 8
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_OWVAR 67
19442: ARRAY
19443: GREATEREQUAL
19444: OR
19445: PUSH
19446: LD_INT 17
19448: PPUSH
19449: LD_INT 22
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 25
19461: PUSH
19462: LD_INT 12
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 70
19477: PUSH
19478: LD_INT 0
19480: EQUAL
19481: OR
19482: IFFALSE 19261
// disableHealAI = 0 ;
19484: LD_ADDR_EXP 34
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19492: LD_ADDR_VAR 0 1
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: PUSH
19526: FOR_IN
19527: IFFALSE 19543
// SetClass ( i , 16 ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_INT 16
19536: PPUSH
19537: CALL_OW 336
19541: GO 19526
19543: POP
19544: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: LD_INT 22
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 25
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PPUSH
19574: CALL_OW 69
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19596
// ComEnterUnit ( i , rulab ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_INT 32
19589: PPUSH
19590: CALL_OW 120
19594: GO 19579
19596: POP
19597: POP
// end ; end_of_file
19598: PPOPN 2
19600: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19601: LD_EXP 27
19605: PUSH
19606: LD_INT 0
19608: LESSEQUAL
19609: IFFALSE 19763
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
19617: PPUSH
19618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19619: LD_ADDR_VAR 0 2
19623: PUSH
19624: LD_INT 22
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 3
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 30
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 30
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: ST_TO_ADDR
// for i in tmp do
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_VAR 0 2
19691: PUSH
19692: FOR_IN
19693: IFFALSE 19726
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_VAR 0 3
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 274
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 275
19722: PLUS
19723: ST_TO_ADDR
19724: GO 19692
19726: POP
19727: POP
// if yourCrates >= needCrates then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_EXP 26
19737: GREATEREQUAL
19738: IFFALSE 19756
// FinishMission ( yourCrates , needCrates ) else
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_EXP 26
19749: PPUSH
19750: CALL 19766 0 2
19754: GO 19763
// YouLost ( matmin ) ;
19756: LD_STRING matmin
19758: PPUSH
19759: CALL_OW 104
// end ;
19763: PPOPN 3
19765: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19766: LD_INT 0
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
// if killCounter = 0 then
19772: LD_EXP 46
19776: PUSH
19777: LD_INT 0
19779: EQUAL
19780: IFFALSE 19789
// SetAchievement ( ACH_SURV ) ;
19782: LD_STRING ACH_SURV
19784: PPUSH
19785: CALL_OW 543
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19789: LD_EXP 46
19793: PUSH
19794: LD_INT 8
19796: GREATEREQUAL
19797: PUSH
19798: LD_EXP 46
19802: PUSH
19803: LD_EXP 45
19807: PPUSH
19808: LD_INT 50
19810: PUSH
19811: EMPTY
19812: LIST
19813: PPUSH
19814: CALL_OW 72
19818: GREATEREQUAL
19819: OR
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 23
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 50
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: PUSH
19868: LD_INT 5
19870: LESS
19871: OR
19872: IFFALSE 19881
// YouLost ( Troops ) ;
19874: LD_STRING Troops
19876: PPUSH
19877: CALL_OW 104
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19881: LD_INT 22
19883: PUSH
19884: LD_INT 3
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 21
19893: PUSH
19894: LD_INT 3
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PPUSH
19905: CALL_OW 69
19909: PUSH
19910: LD_INT 0
19912: EQUAL
19913: IFFALSE 19929
// begin wait ( 3 ) ;
19915: LD_INT 3
19917: PPUSH
19918: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19922: LD_STRING ACH_BASEDESTROYER
19924: PPUSH
19925: CALL_OW 543
// end ; m1 := false ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// m2 := false ;
19937: LD_ADDR_VAR 0 5
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// m3 := false ;
19945: LD_ADDR_VAR 0 6
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19953: LD_VAR 0 1
19957: PUSH
19958: LD_INT 100
19960: PUSH
19961: LD_INT 140
19963: PUSH
19964: LD_INT 180
19966: PUSH
19967: LD_INT 220
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: PUSH
19976: LD_OWVAR 67
19980: ARRAY
19981: PLUS
19982: PUSH
19983: LD_VAR 0 2
19987: GREATER
19988: IFFALSE 20020
// begin AddMedal ( cans , 1 ) ;
19990: LD_STRING cans
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20000: LD_INT 1
20002: PPUSH
20003: LD_STRING 06_crates_1
20005: PPUSH
20006: CALL_OW 39
// m1 := true ;
20010: LD_ADDR_VAR 0 4
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// end else
20018: GO 20041
// begin AddMedal ( cans , - 1 ) ;
20020: LD_STRING cans
20022: PPUSH
20023: LD_INT 1
20025: NEG
20026: PPUSH
20027: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20031: LD_INT 0
20033: PPUSH
20034: LD_STRING 06_crates_1
20036: PPUSH
20037: CALL_OW 39
// end ; if unitLost < 3 then
20041: LD_EXP 31
20045: PUSH
20046: LD_INT 3
20048: LESS
20049: IFFALSE 20071
// begin AddMedal ( people , 1 ) ;
20051: LD_STRING people
20053: PPUSH
20054: LD_INT 1
20056: PPUSH
20057: CALL_OW 101
// m2 := true ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_INT 1
20068: ST_TO_ADDR
// end else
20069: GO 20082
// AddMedal ( people , - 1 ) ;
20071: LD_STRING people
20073: PPUSH
20074: LD_INT 1
20076: NEG
20077: PPUSH
20078: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20082: LD_EXP 29
20086: PPUSH
20087: LD_STRING 06_remoteVehs_1
20089: PPUSH
20090: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20094: LD_EXP 29
20098: PUSH
20099: LD_INT 1
20101: EQUAL
20102: IFFALSE 20124
// begin AddMedal ( remote , 1 ) ;
20104: LD_STRING remote
20106: PPUSH
20107: LD_INT 1
20109: PPUSH
20110: CALL_OW 101
// m3 := true ;
20114: LD_ADDR_VAR 0 6
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// end else
20122: GO 20164
// begin if GetTech ( 18 , 1 ) = state_enabled then
20124: LD_INT 18
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 1
20137: EQUAL
20138: IFFALSE 20153
// AddMedal ( remote , - 1 ) else
20140: LD_STRING remote
20142: PPUSH
20143: LD_INT 1
20145: NEG
20146: PPUSH
20147: CALL_OW 101
20151: GO 20164
// AddMedal ( remote , - 2 ) ;
20153: LD_STRING remote
20155: PPUSH
20156: LD_INT 2
20158: NEG
20159: PPUSH
20160: CALL_OW 101
// end ; if m1 and m2 and m3 then
20164: LD_VAR 0 4
20168: PUSH
20169: LD_VAR 0 5
20173: AND
20174: PUSH
20175: LD_VAR 0 6
20179: AND
20180: IFFALSE 20196
// begin wait ( 3 ) ;
20182: LD_INT 3
20184: PPUSH
20185: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20189: LD_STRING ACH_ASPEED_6
20191: PPUSH
20192: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20196: LD_OWVAR 67
20200: PUSH
20201: LD_INT 3
20203: GREATEREQUAL
20204: PUSH
20205: LD_VAR 0 4
20209: AND
20210: PUSH
20211: LD_VAR 0 5
20215: AND
20216: PUSH
20217: LD_VAR 0 6
20221: AND
20222: IFFALSE 20234
// SetAchievementEX ( ACH_AMER , 6 ) ;
20224: LD_STRING ACH_AMER
20226: PPUSH
20227: LD_INT 6
20229: PPUSH
20230: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20234: LD_EXP 21
20238: PPUSH
20239: LD_STRING 06_KurtStatus_1
20241: PPUSH
20242: CALL_OW 39
// GiveMedals ( Main ) ;
20246: LD_STRING Main
20248: PPUSH
20249: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20253: LD_INT 22
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 21
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 50
20275: PUSH
20276: EMPTY
20277: LIST
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 25
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 25
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 25
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 25
20314: PUSH
20315: LD_INT 4
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: PPUSH
20340: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20344: LD_EXP 1
20348: PPUSH
20349: LD_EXP 43
20353: PUSH
20354: LD_STRING JMM
20356: STR
20357: PPUSH
20358: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20362: LD_EXP 2
20366: PPUSH
20367: LD_EXP 43
20371: PUSH
20372: LD_STRING Lisa
20374: STR
20375: PPUSH
20376: CALL 7636 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20380: LD_EXP 3
20384: PPUSH
20385: LD_EXP 43
20389: PUSH
20390: LD_STRING Bobby
20392: STR
20393: PPUSH
20394: CALL 7636 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20398: LD_EXP 4
20402: PPUSH
20403: LD_EXP 43
20407: PUSH
20408: LD_STRING Cyrus
20410: STR
20411: PPUSH
20412: CALL 7636 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20416: LD_EXP 5
20420: PPUSH
20421: LD_EXP 43
20425: PUSH
20426: LD_STRING Frank
20428: STR
20429: PPUSH
20430: CALL 7636 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20434: LD_EXP 6
20438: PPUSH
20439: LD_EXP 43
20443: PUSH
20444: LD_STRING Brown
20446: STR
20447: PPUSH
20448: CALL 7636 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20452: LD_EXP 7
20456: PPUSH
20457: LD_EXP 43
20461: PUSH
20462: LD_STRING Donaldson
20464: STR
20465: PPUSH
20466: CALL 7636 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20470: LD_EXP 8
20474: PPUSH
20475: LD_EXP 43
20479: PUSH
20480: LD_STRING Gladstone
20482: STR
20483: PPUSH
20484: CALL 7636 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20488: LD_EXP 9
20492: PPUSH
20493: LD_EXP 43
20497: PUSH
20498: LD_STRING Denis
20500: STR
20501: PPUSH
20502: CALL 7636 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20506: LD_EXP 16
20510: PPUSH
20511: LD_EXP 43
20515: PUSH
20516: LD_STRING Joan
20518: STR
20519: PPUSH
20520: CALL 7636 0 2
// if IsLive ( Mike ) then
20524: LD_EXP 11
20528: PPUSH
20529: CALL_OW 300
20533: IFFALSE 20553
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20535: LD_EXP 11
20539: PPUSH
20540: LD_EXP 43
20544: PUSH
20545: LD_STRING Mike
20547: STR
20548: PPUSH
20549: CALL_OW 38
// if IsLive ( Joan ) then
20553: LD_EXP 16
20557: PPUSH
20558: CALL_OW 300
20562: IFFALSE 20576
// SaveCharacters ( Joan , Joan ) ;
20564: LD_EXP 16
20568: PPUSH
20569: LD_STRING Joan
20571: PPUSH
20572: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20576: LD_EXP 17
20580: PPUSH
20581: LD_STRING 06_JoanStatus_1
20583: PPUSH
20584: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20588: LD_INT 50
20590: PUSH
20591: EMPTY
20592: LIST
20593: PUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 21
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 25
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 25
20639: PUSH
20640: LD_INT 3
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 25
20649: PUSH
20650: LD_INT 4
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PUSH
20675: LD_EXP 1
20679: PUSH
20680: LD_EXP 2
20684: PUSH
20685: LD_EXP 3
20689: PUSH
20690: LD_EXP 4
20694: PUSH
20695: LD_EXP 5
20699: PUSH
20700: LD_EXP 6
20704: PUSH
20705: LD_EXP 7
20709: PUSH
20710: LD_EXP 8
20714: PUSH
20715: LD_EXP 9
20719: PUSH
20720: LD_EXP 16
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: DIFF
20737: PPUSH
20738: LD_STRING 06_other_survivors
20740: PPUSH
20741: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20745: LD_INT 50
20747: PUSH
20748: EMPTY
20749: LIST
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 21
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_INT 25
20776: PUSH
20777: LD_INT 12
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 25
20786: PUSH
20787: LD_INT 16
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 69
20809: PPUSH
20810: LD_STRING 06_other_apemans
20812: PPUSH
20813: CALL_OW 38
// YouWin ;
20817: CALL_OW 103
// end ; end_of_file
20821: LD_VAR 0 3
20825: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20826: LD_EXP 48
20830: PUSH
20831: LD_OWVAR 1
20835: PUSH
20836: LD_INT 23100
20838: PUSH
20839: LD_INT 21000
20841: PUSH
20842: LD_INT 18900
20844: PUSH
20845: LD_INT 16800
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: LD_OWVAR 67
20858: ARRAY
20859: GREATER
20860: AND
20861: IFFALSE 21208
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
// begin enable ;
20872: ENABLE
// for i in ruAttackers do
20873: LD_ADDR_VAR 0 1
20877: PUSH
20878: LD_EXP 48
20882: PUSH
20883: FOR_IN
20884: IFFALSE 21206
// begin if not IsDrivenBy ( i ) then
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 311
20895: NOT
20896: IFFALSE 20900
// continue ;
20898: GO 20883
// if i mod 2 = 0 then
20900: LD_VAR 0 1
20904: PUSH
20905: LD_INT 2
20907: MOD
20908: PUSH
20909: LD_INT 0
20911: EQUAL
20912: IFFALSE 20967
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20914: LD_ADDR_VAR 0 3
20918: PUSH
20919: LD_INT 91
20921: PUSH
20922: LD_INT 52
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 82
20931: PUSH
20932: LD_INT 34
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 90
20941: PUSH
20942: LD_INT 26
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 86
20951: PUSH
20952: LD_INT 16
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: ST_TO_ADDR
20965: GO 21062
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 91
20974: PUSH
20975: LD_INT 52
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 68
20984: PUSH
20985: LD_INT 46
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 48
20994: PUSH
20995: LD_INT 43
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 44
21004: PUSH
21005: LD_INT 42
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 33
21014: PUSH
21015: LD_INT 34
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 29
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 30
21034: PUSH
21035: LD_INT 19
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 38
21044: PUSH
21045: LD_INT 16
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 256
21071: PUSH
21072: LD_INT 1000
21074: EQUAL
21075: IFFALSE 21093
// AgressiveMove ( i , path ) else
21077: LD_VAR 0 1
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL 82967 0 2
21091: GO 21204
// if GetLives ( i ) < 650 then
21093: LD_VAR 0 1
21097: PPUSH
21098: CALL_OW 256
21102: PUSH
21103: LD_INT 650
21105: LESS
21106: IFFALSE 21204
// begin if not IsInArea ( i , russianRepairArea ) then
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_INT 12
21115: PPUSH
21116: CALL_OW 308
21120: NOT
21121: IFFALSE 21190
// begin SetTag ( i , 0 ) ;
21123: LD_VAR 0 1
21127: PPUSH
21128: LD_INT 0
21130: PPUSH
21131: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21135: LD_VAR 0 1
21139: PPUSH
21140: CALL_OW 261
21144: PUSH
21145: LD_INT 50
21147: LESS
21148: PUSH
21149: LD_INT 21
21151: PPUSH
21152: CALL_OW 302
21156: AND
21157: IFFALSE 21173
// ComMoveUnit ( i , rufab ) else
21159: LD_VAR 0 1
21163: PPUSH
21164: LD_INT 21
21166: PPUSH
21167: CALL_OW 112
21171: GO 21188
// ComMoveXY ( i , 121 , 99 ) ;
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 121
21180: PPUSH
21181: LD_INT 99
21183: PPUSH
21184: CALL_OW 111
// end else
21188: GO 21204
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 311
21199: PPUSH
21200: CALL 82063 0 1
// end ; end ;
21204: GO 20883
21206: POP
21207: POP
// end ;
21208: PPOPN 4
21210: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: DOUBLE
21222: LD_INT 1
21224: DEC
21225: ST_TO_ADDR
21226: LD_INT 4
21228: PUSH
21229: LD_INT 5
21231: PUSH
21232: LD_INT 6
21234: PUSH
21235: LD_INT 6
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: LD_OWVAR 67
21248: ARRAY
21249: PUSH
21250: FOR_TO
21251: IFFALSE 21426
// begin uc_side := 3 ;
21253: LD_ADDR_OWVAR 20
21257: PUSH
21258: LD_INT 3
21260: ST_TO_ADDR
// uc_nation := 3 ;
21261: LD_ADDR_OWVAR 21
21265: PUSH
21266: LD_INT 3
21268: ST_TO_ADDR
// InitHC_All ( ) ;
21269: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21273: LD_INT 0
21275: PPUSH
21276: LD_INT 4
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 6
21284: PUSH
21285: LD_INT 6
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_OWVAR 67
21298: ARRAY
21299: PPUSH
21300: CALL_OW 381
// un := CreateHuman ;
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: CALL_OW 44
21313: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21314: LD_VAR 0 3
21318: PPUSH
21319: LD_INT 127
21321: PPUSH
21322: LD_INT 62
21324: PPUSH
21325: LD_INT 3
21327: PPUSH
21328: LD_INT 0
21330: PPUSH
21331: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21335: LD_ADDR_EXP 49
21339: PUSH
21340: LD_EXP 49
21344: PPUSH
21345: LD_EXP 49
21349: PUSH
21350: LD_INT 1
21352: PLUS
21353: PPUSH
21354: LD_VAR 0 3
21358: PPUSH
21359: CALL_OW 1
21363: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21364: LD_VAR 0 3
21368: PPUSH
21369: LD_INT 83
21371: PPUSH
21372: LD_INT 49
21374: PPUSH
21375: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21379: LD_VAR 0 3
21383: PPUSH
21384: LD_INT 49
21386: PPUSH
21387: LD_INT 43
21389: PPUSH
21390: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21394: LD_VAR 0 3
21398: PPUSH
21399: LD_INT 31
21401: PPUSH
21402: LD_INT 15
21404: PPUSH
21405: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21409: LD_VAR 0 3
21413: PPUSH
21414: LD_INT 63
21416: PPUSH
21417: LD_INT 9
21419: PPUSH
21420: CALL_OW 174
// end ;
21424: GO 21250
21426: POP
21427: POP
// end ; end_of_file
21428: LD_VAR 0 1
21432: RET
// export function CreateNature ; var i , un ; begin
21433: LD_INT 0
21435: PPUSH
21436: PPUSH
21437: PPUSH
// for i := 1 to Difficulty + 2 do
21438: LD_ADDR_VAR 0 2
21442: PUSH
21443: DOUBLE
21444: LD_INT 1
21446: DEC
21447: ST_TO_ADDR
21448: LD_OWVAR 67
21452: PUSH
21453: LD_INT 2
21455: PLUS
21456: PUSH
21457: FOR_TO
21458: IFFALSE 21567
// begin hc_sex := sex_male ;
21460: LD_ADDR_OWVAR 27
21464: PUSH
21465: LD_INT 1
21467: ST_TO_ADDR
// uc_side := 0 ;
21468: LD_ADDR_OWVAR 20
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// uc_nation := nation_nature ;
21476: LD_ADDR_OWVAR 21
21480: PUSH
21481: LD_INT 0
21483: ST_TO_ADDR
// hc_class := class_tiger ;
21484: LD_ADDR_OWVAR 28
21488: PUSH
21489: LD_INT 14
21491: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21492: LD_ADDR_OWVAR 31
21496: PUSH
21497: LD_EXP 36
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21517: LD_ADDR_OWVAR 35
21521: PUSH
21522: LD_INT 5
21524: NEG
21525: PPUSH
21526: LD_INT 5
21528: PPUSH
21529: CALL_OW 12
21533: PUSH
21534: LD_OWVAR 67
21538: MUL
21539: ST_TO_ADDR
// un := CreateHuman ;
21540: LD_ADDR_VAR 0 3
21544: PUSH
21545: CALL_OW 44
21549: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 18
21557: PPUSH
21558: LD_INT 0
21560: PPUSH
21561: CALL_OW 49
// end ;
21565: GO 21457
21567: POP
21568: POP
// for i = 1 to rand ( 3 , 4 ) do
21569: LD_ADDR_VAR 0 2
21573: PUSH
21574: DOUBLE
21575: LD_INT 1
21577: DEC
21578: ST_TO_ADDR
21579: LD_INT 3
21581: PPUSH
21582: LD_INT 4
21584: PPUSH
21585: CALL_OW 12
21589: PUSH
21590: FOR_TO
21591: IFFALSE 21661
// begin hc_class := class_phororhacos ;
21593: LD_ADDR_OWVAR 28
21597: PUSH
21598: LD_INT 18
21600: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21601: LD_ADDR_OWVAR 31
21605: PUSH
21606: LD_EXP 36
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// hc_agressivity := 0 ;
21626: LD_ADDR_OWVAR 35
21630: PUSH
21631: LD_INT 0
21633: ST_TO_ADDR
// un = CreateHuman ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: CALL_OW 44
21643: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21644: LD_VAR 0 3
21648: PPUSH
21649: LD_INT 18
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: CALL_OW 49
// end ;
21659: GO 21590
21661: POP
21662: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21663: LD_ADDR_VAR 0 2
21667: PUSH
21668: DOUBLE
21669: LD_INT 1
21671: DEC
21672: ST_TO_ADDR
21673: LD_INT 3
21675: PUSH
21676: LD_INT 3
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: LD_INT 5
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_OWVAR 67
21695: ARRAY
21696: PUSH
21697: FOR_TO
21698: IFFALSE 21839
// begin hc_class := class_apeman ;
21700: LD_ADDR_OWVAR 28
21704: PUSH
21705: LD_INT 12
21707: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21708: LD_ADDR_OWVAR 31
21712: PUSH
21713: LD_INT 2
21715: PPUSH
21716: LD_INT 5
21718: PPUSH
21719: CALL_OW 12
21723: PUSH
21724: LD_INT 0
21726: PPUSH
21727: LD_INT 2
21729: PPUSH
21730: CALL_OW 12
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21747: LD_ADDR_OWVAR 35
21751: PUSH
21752: LD_INT 5
21754: NEG
21755: PPUSH
21756: LD_INT 10
21758: PPUSH
21759: CALL_OW 12
21763: PUSH
21764: LD_INT 10
21766: NEG
21767: PPUSH
21768: LD_INT 20
21770: PPUSH
21771: CALL_OW 12
21775: PUSH
21776: LD_INT 20
21778: NEG
21779: PPUSH
21780: LD_INT 25
21782: PPUSH
21783: CALL_OW 12
21787: PUSH
21788: LD_INT 30
21790: NEG
21791: PPUSH
21792: LD_INT 30
21794: PPUSH
21795: CALL_OW 12
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: PUSH
21806: LD_OWVAR 67
21810: ARRAY
21811: ST_TO_ADDR
// un := CreateHuman ;
21812: LD_ADDR_VAR 0 3
21816: PUSH
21817: CALL_OW 44
21821: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21822: LD_VAR 0 3
21826: PPUSH
21827: LD_INT 19
21829: PPUSH
21830: LD_INT 0
21832: PPUSH
21833: CALL_OW 49
// end ;
21837: GO 21697
21839: POP
21840: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21841: LD_ADDR_VAR 0 2
21845: PUSH
21846: DOUBLE
21847: LD_INT 1
21849: DEC
21850: ST_TO_ADDR
21851: LD_INT 3
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: LD_INT 5
21859: PUSH
21860: LD_INT 6
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: PUSH
21869: LD_OWVAR 67
21873: ARRAY
21874: PUSH
21875: FOR_TO
21876: IFFALSE 21969
// begin hc_class := class_apeman ;
21878: LD_ADDR_OWVAR 28
21882: PUSH
21883: LD_INT 12
21885: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21886: LD_ADDR_OWVAR 31
21890: PUSH
21891: LD_INT 2
21893: PPUSH
21894: LD_INT 5
21896: PPUSH
21897: CALL_OW 12
21901: PUSH
21902: LD_INT 0
21904: PPUSH
21905: LD_INT 2
21907: PPUSH
21908: CALL_OW 12
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21925: LD_ADDR_OWVAR 35
21929: PUSH
21930: LD_INT 15
21932: NEG
21933: PPUSH
21934: LD_INT 15
21936: PPUSH
21937: CALL_OW 12
21941: ST_TO_ADDR
// un = CreateHuman ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: CALL_OW 44
21951: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21952: LD_VAR 0 3
21956: PPUSH
21957: LD_INT 20
21959: PPUSH
21960: LD_INT 0
21962: PPUSH
21963: CALL_OW 49
// end ;
21967: GO 21875
21969: POP
21970: POP
// end ; end_of_file end_of_file
21971: LD_VAR 0 1
21975: RET
// export globalGameSaveCounter ; every 0 0$1 do
21976: GO 21978
21978: DISABLE
// begin enable ;
21979: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21980: LD_STRING updateTimer(
21982: PUSH
21983: LD_OWVAR 1
21987: STR
21988: PUSH
21989: LD_STRING );
21991: STR
21992: PPUSH
21993: CALL_OW 559
// end ;
21997: END
// every 0 0$1 do
21998: GO 22000
22000: DISABLE
// begin globalGameSaveCounter := 0 ;
22001: LD_ADDR_EXP 50
22005: PUSH
22006: LD_INT 0
22008: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22009: LD_STRING setGameSaveCounter(0)
22011: PPUSH
22012: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22016: LD_STRING initStreamRollete();
22018: PPUSH
22019: CALL_OW 559
// InitStreamMode ;
22023: CALL 23349 0 0
// DefineStreamItems ( false ) ;
22027: LD_INT 0
22029: PPUSH
22030: CALL 23813 0 1
// end ;
22034: END
// export function SOS_MapStart ( ) ; begin
22035: LD_INT 0
22037: PPUSH
// if streamModeActive then
22038: LD_EXP 51
22042: IFFALSE 22051
// DefineStreamItems ( true ) ;
22044: LD_INT 1
22046: PPUSH
22047: CALL 23813 0 1
// UpdateLuaVariables ( ) ;
22051: CALL 22068 0 0
// UpdateFactoryWaypoints ( ) ;
22055: CALL 36682 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22059: CALL 36939 0 0
// end ;
22063: LD_VAR 0 1
22067: RET
// function UpdateLuaVariables ( ) ; begin
22068: LD_INT 0
22070: PPUSH
// if globalGameSaveCounter then
22071: LD_EXP 50
22075: IFFALSE 22109
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22077: LD_ADDR_EXP 50
22081: PUSH
22082: LD_EXP 50
22086: PPUSH
22087: CALL 81724 0 1
22091: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22092: LD_STRING setGameSaveCounter(
22094: PUSH
22095: LD_EXP 50
22099: STR
22100: PUSH
22101: LD_STRING )
22103: STR
22104: PPUSH
22105: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22109: LD_STRING setGameDifficulty(
22111: PUSH
22112: LD_OWVAR 67
22116: STR
22117: PUSH
22118: LD_STRING )
22120: STR
22121: PPUSH
22122: CALL_OW 559
// end ;
22126: LD_VAR 0 1
22130: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22131: LD_INT 0
22133: PPUSH
// if p2 = stream_mode then
22134: LD_VAR 0 2
22138: PUSH
22139: LD_INT 100
22141: EQUAL
22142: IFFALSE 23145
// begin if not StreamModeActive then
22144: LD_EXP 51
22148: NOT
22149: IFFALSE 22159
// StreamModeActive := true ;
22151: LD_ADDR_EXP 51
22155: PUSH
22156: LD_INT 1
22158: ST_TO_ADDR
// if p3 = 0 then
22159: LD_VAR 0 3
22163: PUSH
22164: LD_INT 0
22166: EQUAL
22167: IFFALSE 22173
// InitStreamMode ;
22169: CALL 23349 0 0
// if p3 = 1 then
22173: LD_VAR 0 3
22177: PUSH
22178: LD_INT 1
22180: EQUAL
22181: IFFALSE 22191
// sRocket := true ;
22183: LD_ADDR_EXP 56
22187: PUSH
22188: LD_INT 1
22190: ST_TO_ADDR
// if p3 = 2 then
22191: LD_VAR 0 3
22195: PUSH
22196: LD_INT 2
22198: EQUAL
22199: IFFALSE 22209
// sSpeed := true ;
22201: LD_ADDR_EXP 55
22205: PUSH
22206: LD_INT 1
22208: ST_TO_ADDR
// if p3 = 3 then
22209: LD_VAR 0 3
22213: PUSH
22214: LD_INT 3
22216: EQUAL
22217: IFFALSE 22227
// sEngine := true ;
22219: LD_ADDR_EXP 57
22223: PUSH
22224: LD_INT 1
22226: ST_TO_ADDR
// if p3 = 4 then
22227: LD_VAR 0 3
22231: PUSH
22232: LD_INT 4
22234: EQUAL
22235: IFFALSE 22245
// sSpec := true ;
22237: LD_ADDR_EXP 54
22241: PUSH
22242: LD_INT 1
22244: ST_TO_ADDR
// if p3 = 5 then
22245: LD_VAR 0 3
22249: PUSH
22250: LD_INT 5
22252: EQUAL
22253: IFFALSE 22263
// sLevel := true ;
22255: LD_ADDR_EXP 58
22259: PUSH
22260: LD_INT 1
22262: ST_TO_ADDR
// if p3 = 6 then
22263: LD_VAR 0 3
22267: PUSH
22268: LD_INT 6
22270: EQUAL
22271: IFFALSE 22281
// sArmoury := true ;
22273: LD_ADDR_EXP 59
22277: PUSH
22278: LD_INT 1
22280: ST_TO_ADDR
// if p3 = 7 then
22281: LD_VAR 0 3
22285: PUSH
22286: LD_INT 7
22288: EQUAL
22289: IFFALSE 22299
// sRadar := true ;
22291: LD_ADDR_EXP 60
22295: PUSH
22296: LD_INT 1
22298: ST_TO_ADDR
// if p3 = 8 then
22299: LD_VAR 0 3
22303: PUSH
22304: LD_INT 8
22306: EQUAL
22307: IFFALSE 22317
// sBunker := true ;
22309: LD_ADDR_EXP 61
22313: PUSH
22314: LD_INT 1
22316: ST_TO_ADDR
// if p3 = 9 then
22317: LD_VAR 0 3
22321: PUSH
22322: LD_INT 9
22324: EQUAL
22325: IFFALSE 22335
// sHack := true ;
22327: LD_ADDR_EXP 62
22331: PUSH
22332: LD_INT 1
22334: ST_TO_ADDR
// if p3 = 10 then
22335: LD_VAR 0 3
22339: PUSH
22340: LD_INT 10
22342: EQUAL
22343: IFFALSE 22353
// sFire := true ;
22345: LD_ADDR_EXP 63
22349: PUSH
22350: LD_INT 1
22352: ST_TO_ADDR
// if p3 = 11 then
22353: LD_VAR 0 3
22357: PUSH
22358: LD_INT 11
22360: EQUAL
22361: IFFALSE 22371
// sRefresh := true ;
22363: LD_ADDR_EXP 64
22367: PUSH
22368: LD_INT 1
22370: ST_TO_ADDR
// if p3 = 12 then
22371: LD_VAR 0 3
22375: PUSH
22376: LD_INT 12
22378: EQUAL
22379: IFFALSE 22389
// sExp := true ;
22381: LD_ADDR_EXP 65
22385: PUSH
22386: LD_INT 1
22388: ST_TO_ADDR
// if p3 = 13 then
22389: LD_VAR 0 3
22393: PUSH
22394: LD_INT 13
22396: EQUAL
22397: IFFALSE 22407
// sDepot := true ;
22399: LD_ADDR_EXP 66
22403: PUSH
22404: LD_INT 1
22406: ST_TO_ADDR
// if p3 = 14 then
22407: LD_VAR 0 3
22411: PUSH
22412: LD_INT 14
22414: EQUAL
22415: IFFALSE 22425
// sFlag := true ;
22417: LD_ADDR_EXP 67
22421: PUSH
22422: LD_INT 1
22424: ST_TO_ADDR
// if p3 = 15 then
22425: LD_VAR 0 3
22429: PUSH
22430: LD_INT 15
22432: EQUAL
22433: IFFALSE 22443
// sKamikadze := true ;
22435: LD_ADDR_EXP 75
22439: PUSH
22440: LD_INT 1
22442: ST_TO_ADDR
// if p3 = 16 then
22443: LD_VAR 0 3
22447: PUSH
22448: LD_INT 16
22450: EQUAL
22451: IFFALSE 22461
// sTroll := true ;
22453: LD_ADDR_EXP 76
22457: PUSH
22458: LD_INT 1
22460: ST_TO_ADDR
// if p3 = 17 then
22461: LD_VAR 0 3
22465: PUSH
22466: LD_INT 17
22468: EQUAL
22469: IFFALSE 22479
// sSlow := true ;
22471: LD_ADDR_EXP 77
22475: PUSH
22476: LD_INT 1
22478: ST_TO_ADDR
// if p3 = 18 then
22479: LD_VAR 0 3
22483: PUSH
22484: LD_INT 18
22486: EQUAL
22487: IFFALSE 22497
// sLack := true ;
22489: LD_ADDR_EXP 78
22493: PUSH
22494: LD_INT 1
22496: ST_TO_ADDR
// if p3 = 19 then
22497: LD_VAR 0 3
22501: PUSH
22502: LD_INT 19
22504: EQUAL
22505: IFFALSE 22515
// sTank := true ;
22507: LD_ADDR_EXP 80
22511: PUSH
22512: LD_INT 1
22514: ST_TO_ADDR
// if p3 = 20 then
22515: LD_VAR 0 3
22519: PUSH
22520: LD_INT 20
22522: EQUAL
22523: IFFALSE 22533
// sRemote := true ;
22525: LD_ADDR_EXP 81
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// if p3 = 21 then
22533: LD_VAR 0 3
22537: PUSH
22538: LD_INT 21
22540: EQUAL
22541: IFFALSE 22551
// sPowell := true ;
22543: LD_ADDR_EXP 82
22547: PUSH
22548: LD_INT 1
22550: ST_TO_ADDR
// if p3 = 22 then
22551: LD_VAR 0 3
22555: PUSH
22556: LD_INT 22
22558: EQUAL
22559: IFFALSE 22569
// sTeleport := true ;
22561: LD_ADDR_EXP 85
22565: PUSH
22566: LD_INT 1
22568: ST_TO_ADDR
// if p3 = 23 then
22569: LD_VAR 0 3
22573: PUSH
22574: LD_INT 23
22576: EQUAL
22577: IFFALSE 22587
// sOilTower := true ;
22579: LD_ADDR_EXP 87
22583: PUSH
22584: LD_INT 1
22586: ST_TO_ADDR
// if p3 = 24 then
22587: LD_VAR 0 3
22591: PUSH
22592: LD_INT 24
22594: EQUAL
22595: IFFALSE 22605
// sShovel := true ;
22597: LD_ADDR_EXP 88
22601: PUSH
22602: LD_INT 1
22604: ST_TO_ADDR
// if p3 = 25 then
22605: LD_VAR 0 3
22609: PUSH
22610: LD_INT 25
22612: EQUAL
22613: IFFALSE 22623
// sSheik := true ;
22615: LD_ADDR_EXP 89
22619: PUSH
22620: LD_INT 1
22622: ST_TO_ADDR
// if p3 = 26 then
22623: LD_VAR 0 3
22627: PUSH
22628: LD_INT 26
22630: EQUAL
22631: IFFALSE 22641
// sEarthquake := true ;
22633: LD_ADDR_EXP 91
22637: PUSH
22638: LD_INT 1
22640: ST_TO_ADDR
// if p3 = 27 then
22641: LD_VAR 0 3
22645: PUSH
22646: LD_INT 27
22648: EQUAL
22649: IFFALSE 22659
// sAI := true ;
22651: LD_ADDR_EXP 92
22655: PUSH
22656: LD_INT 1
22658: ST_TO_ADDR
// if p3 = 28 then
22659: LD_VAR 0 3
22663: PUSH
22664: LD_INT 28
22666: EQUAL
22667: IFFALSE 22677
// sCargo := true ;
22669: LD_ADDR_EXP 95
22673: PUSH
22674: LD_INT 1
22676: ST_TO_ADDR
// if p3 = 29 then
22677: LD_VAR 0 3
22681: PUSH
22682: LD_INT 29
22684: EQUAL
22685: IFFALSE 22695
// sDLaser := true ;
22687: LD_ADDR_EXP 96
22691: PUSH
22692: LD_INT 1
22694: ST_TO_ADDR
// if p3 = 30 then
22695: LD_VAR 0 3
22699: PUSH
22700: LD_INT 30
22702: EQUAL
22703: IFFALSE 22713
// sExchange := true ;
22705: LD_ADDR_EXP 97
22709: PUSH
22710: LD_INT 1
22712: ST_TO_ADDR
// if p3 = 31 then
22713: LD_VAR 0 3
22717: PUSH
22718: LD_INT 31
22720: EQUAL
22721: IFFALSE 22731
// sFac := true ;
22723: LD_ADDR_EXP 98
22727: PUSH
22728: LD_INT 1
22730: ST_TO_ADDR
// if p3 = 32 then
22731: LD_VAR 0 3
22735: PUSH
22736: LD_INT 32
22738: EQUAL
22739: IFFALSE 22749
// sPower := true ;
22741: LD_ADDR_EXP 99
22745: PUSH
22746: LD_INT 1
22748: ST_TO_ADDR
// if p3 = 33 then
22749: LD_VAR 0 3
22753: PUSH
22754: LD_INT 33
22756: EQUAL
22757: IFFALSE 22767
// sRandom := true ;
22759: LD_ADDR_EXP 100
22763: PUSH
22764: LD_INT 1
22766: ST_TO_ADDR
// if p3 = 34 then
22767: LD_VAR 0 3
22771: PUSH
22772: LD_INT 34
22774: EQUAL
22775: IFFALSE 22785
// sShield := true ;
22777: LD_ADDR_EXP 101
22781: PUSH
22782: LD_INT 1
22784: ST_TO_ADDR
// if p3 = 35 then
22785: LD_VAR 0 3
22789: PUSH
22790: LD_INT 35
22792: EQUAL
22793: IFFALSE 22803
// sTime := true ;
22795: LD_ADDR_EXP 102
22799: PUSH
22800: LD_INT 1
22802: ST_TO_ADDR
// if p3 = 36 then
22803: LD_VAR 0 3
22807: PUSH
22808: LD_INT 36
22810: EQUAL
22811: IFFALSE 22821
// sTools := true ;
22813: LD_ADDR_EXP 103
22817: PUSH
22818: LD_INT 1
22820: ST_TO_ADDR
// if p3 = 101 then
22821: LD_VAR 0 3
22825: PUSH
22826: LD_INT 101
22828: EQUAL
22829: IFFALSE 22839
// sSold := true ;
22831: LD_ADDR_EXP 68
22835: PUSH
22836: LD_INT 1
22838: ST_TO_ADDR
// if p3 = 102 then
22839: LD_VAR 0 3
22843: PUSH
22844: LD_INT 102
22846: EQUAL
22847: IFFALSE 22857
// sDiff := true ;
22849: LD_ADDR_EXP 69
22853: PUSH
22854: LD_INT 1
22856: ST_TO_ADDR
// if p3 = 103 then
22857: LD_VAR 0 3
22861: PUSH
22862: LD_INT 103
22864: EQUAL
22865: IFFALSE 22875
// sFog := true ;
22867: LD_ADDR_EXP 72
22871: PUSH
22872: LD_INT 1
22874: ST_TO_ADDR
// if p3 = 104 then
22875: LD_VAR 0 3
22879: PUSH
22880: LD_INT 104
22882: EQUAL
22883: IFFALSE 22893
// sReset := true ;
22885: LD_ADDR_EXP 73
22889: PUSH
22890: LD_INT 1
22892: ST_TO_ADDR
// if p3 = 105 then
22893: LD_VAR 0 3
22897: PUSH
22898: LD_INT 105
22900: EQUAL
22901: IFFALSE 22911
// sSun := true ;
22903: LD_ADDR_EXP 74
22907: PUSH
22908: LD_INT 1
22910: ST_TO_ADDR
// if p3 = 106 then
22911: LD_VAR 0 3
22915: PUSH
22916: LD_INT 106
22918: EQUAL
22919: IFFALSE 22929
// sTiger := true ;
22921: LD_ADDR_EXP 70
22925: PUSH
22926: LD_INT 1
22928: ST_TO_ADDR
// if p3 = 107 then
22929: LD_VAR 0 3
22933: PUSH
22934: LD_INT 107
22936: EQUAL
22937: IFFALSE 22947
// sBomb := true ;
22939: LD_ADDR_EXP 71
22943: PUSH
22944: LD_INT 1
22946: ST_TO_ADDR
// if p3 = 108 then
22947: LD_VAR 0 3
22951: PUSH
22952: LD_INT 108
22954: EQUAL
22955: IFFALSE 22965
// sWound := true ;
22957: LD_ADDR_EXP 79
22961: PUSH
22962: LD_INT 1
22964: ST_TO_ADDR
// if p3 = 109 then
22965: LD_VAR 0 3
22969: PUSH
22970: LD_INT 109
22972: EQUAL
22973: IFFALSE 22983
// sBetray := true ;
22975: LD_ADDR_EXP 83
22979: PUSH
22980: LD_INT 1
22982: ST_TO_ADDR
// if p3 = 110 then
22983: LD_VAR 0 3
22987: PUSH
22988: LD_INT 110
22990: EQUAL
22991: IFFALSE 23001
// sContamin := true ;
22993: LD_ADDR_EXP 84
22997: PUSH
22998: LD_INT 1
23000: ST_TO_ADDR
// if p3 = 111 then
23001: LD_VAR 0 3
23005: PUSH
23006: LD_INT 111
23008: EQUAL
23009: IFFALSE 23019
// sOil := true ;
23011: LD_ADDR_EXP 86
23015: PUSH
23016: LD_INT 1
23018: ST_TO_ADDR
// if p3 = 112 then
23019: LD_VAR 0 3
23023: PUSH
23024: LD_INT 112
23026: EQUAL
23027: IFFALSE 23037
// sStu := true ;
23029: LD_ADDR_EXP 90
23033: PUSH
23034: LD_INT 1
23036: ST_TO_ADDR
// if p3 = 113 then
23037: LD_VAR 0 3
23041: PUSH
23042: LD_INT 113
23044: EQUAL
23045: IFFALSE 23055
// sBazooka := true ;
23047: LD_ADDR_EXP 93
23051: PUSH
23052: LD_INT 1
23054: ST_TO_ADDR
// if p3 = 114 then
23055: LD_VAR 0 3
23059: PUSH
23060: LD_INT 114
23062: EQUAL
23063: IFFALSE 23073
// sMortar := true ;
23065: LD_ADDR_EXP 94
23069: PUSH
23070: LD_INT 1
23072: ST_TO_ADDR
// if p3 = 115 then
23073: LD_VAR 0 3
23077: PUSH
23078: LD_INT 115
23080: EQUAL
23081: IFFALSE 23091
// sRanger := true ;
23083: LD_ADDR_EXP 104
23087: PUSH
23088: LD_INT 1
23090: ST_TO_ADDR
// if p3 = 116 then
23091: LD_VAR 0 3
23095: PUSH
23096: LD_INT 116
23098: EQUAL
23099: IFFALSE 23109
// sComputer := true ;
23101: LD_ADDR_EXP 105
23105: PUSH
23106: LD_INT 1
23108: ST_TO_ADDR
// if p3 = 117 then
23109: LD_VAR 0 3
23113: PUSH
23114: LD_INT 117
23116: EQUAL
23117: IFFALSE 23127
// s30 := true ;
23119: LD_ADDR_EXP 106
23123: PUSH
23124: LD_INT 1
23126: ST_TO_ADDR
// if p3 = 118 then
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 118
23134: EQUAL
23135: IFFALSE 23145
// s60 := true ;
23137: LD_ADDR_EXP 107
23141: PUSH
23142: LD_INT 1
23144: ST_TO_ADDR
// end ; if p2 = hack_mode then
23145: LD_VAR 0 2
23149: PUSH
23150: LD_INT 101
23152: EQUAL
23153: IFFALSE 23281
// begin case p3 of 1 :
23155: LD_VAR 0 3
23159: PUSH
23160: LD_INT 1
23162: DOUBLE
23163: EQUAL
23164: IFTRUE 23168
23166: GO 23175
23168: POP
// hHackUnlimitedResources ; 2 :
23169: CALL 35428 0 0
23173: GO 23281
23175: LD_INT 2
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23183
23181: GO 23190
23183: POP
// hHackSetLevel10 ; 3 :
23184: CALL 35561 0 0
23188: GO 23281
23190: LD_INT 3
23192: DOUBLE
23193: EQUAL
23194: IFTRUE 23198
23196: GO 23205
23198: POP
// hHackSetLevel10YourUnits ; 4 :
23199: CALL 35646 0 0
23203: GO 23281
23205: LD_INT 4
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23220
23213: POP
// hHackInvincible ; 5 :
23214: CALL 36094 0 0
23218: GO 23281
23220: LD_INT 5
23222: DOUBLE
23223: EQUAL
23224: IFTRUE 23228
23226: GO 23235
23228: POP
// hHackInvisible ; 6 :
23229: CALL 36205 0 0
23233: GO 23281
23235: LD_INT 6
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23250
23243: POP
// hHackChangeYourSide ; 7 :
23244: CALL 36262 0 0
23248: GO 23281
23250: LD_INT 7
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23265
23258: POP
// hHackChangeUnitSide ; 8 :
23259: CALL 36304 0 0
23263: GO 23281
23265: LD_INT 8
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23280
23273: POP
// hHackFog ; end ;
23274: CALL 36405 0 0
23278: GO 23281
23280: POP
// end ; if p2 = game_save_mode then
23281: LD_VAR 0 2
23285: PUSH
23286: LD_INT 102
23288: EQUAL
23289: IFFALSE 23344
// begin if p3 = 1 then
23291: LD_VAR 0 3
23295: PUSH
23296: LD_INT 1
23298: EQUAL
23299: IFFALSE 23311
// globalGameSaveCounter := p4 ;
23301: LD_ADDR_EXP 50
23305: PUSH
23306: LD_VAR 0 4
23310: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23311: LD_VAR 0 3
23315: PUSH
23316: LD_INT 2
23318: EQUAL
23319: PUSH
23320: LD_EXP 50
23324: AND
23325: IFFALSE 23344
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23327: LD_STRING setGameSaveCounter(
23329: PUSH
23330: LD_EXP 50
23334: STR
23335: PUSH
23336: LD_STRING )
23338: STR
23339: PPUSH
23340: CALL_OW 559
// end ; end ;
23344: LD_VAR 0 7
23348: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23349: LD_INT 0
23351: PPUSH
// streamModeActive := false ;
23352: LD_ADDR_EXP 51
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
// normalCounter := 36 ;
23360: LD_ADDR_EXP 52
23364: PUSH
23365: LD_INT 36
23367: ST_TO_ADDR
// hardcoreCounter := 18 ;
23368: LD_ADDR_EXP 53
23372: PUSH
23373: LD_INT 18
23375: ST_TO_ADDR
// sRocket := false ;
23376: LD_ADDR_EXP 56
23380: PUSH
23381: LD_INT 0
23383: ST_TO_ADDR
// sSpeed := false ;
23384: LD_ADDR_EXP 55
23388: PUSH
23389: LD_INT 0
23391: ST_TO_ADDR
// sEngine := false ;
23392: LD_ADDR_EXP 57
23396: PUSH
23397: LD_INT 0
23399: ST_TO_ADDR
// sSpec := false ;
23400: LD_ADDR_EXP 54
23404: PUSH
23405: LD_INT 0
23407: ST_TO_ADDR
// sLevel := false ;
23408: LD_ADDR_EXP 58
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// sArmoury := false ;
23416: LD_ADDR_EXP 59
23420: PUSH
23421: LD_INT 0
23423: ST_TO_ADDR
// sRadar := false ;
23424: LD_ADDR_EXP 60
23428: PUSH
23429: LD_INT 0
23431: ST_TO_ADDR
// sBunker := false ;
23432: LD_ADDR_EXP 61
23436: PUSH
23437: LD_INT 0
23439: ST_TO_ADDR
// sHack := false ;
23440: LD_ADDR_EXP 62
23444: PUSH
23445: LD_INT 0
23447: ST_TO_ADDR
// sFire := false ;
23448: LD_ADDR_EXP 63
23452: PUSH
23453: LD_INT 0
23455: ST_TO_ADDR
// sRefresh := false ;
23456: LD_ADDR_EXP 64
23460: PUSH
23461: LD_INT 0
23463: ST_TO_ADDR
// sExp := false ;
23464: LD_ADDR_EXP 65
23468: PUSH
23469: LD_INT 0
23471: ST_TO_ADDR
// sDepot := false ;
23472: LD_ADDR_EXP 66
23476: PUSH
23477: LD_INT 0
23479: ST_TO_ADDR
// sFlag := false ;
23480: LD_ADDR_EXP 67
23484: PUSH
23485: LD_INT 0
23487: ST_TO_ADDR
// sKamikadze := false ;
23488: LD_ADDR_EXP 75
23492: PUSH
23493: LD_INT 0
23495: ST_TO_ADDR
// sTroll := false ;
23496: LD_ADDR_EXP 76
23500: PUSH
23501: LD_INT 0
23503: ST_TO_ADDR
// sSlow := false ;
23504: LD_ADDR_EXP 77
23508: PUSH
23509: LD_INT 0
23511: ST_TO_ADDR
// sLack := false ;
23512: LD_ADDR_EXP 78
23516: PUSH
23517: LD_INT 0
23519: ST_TO_ADDR
// sTank := false ;
23520: LD_ADDR_EXP 80
23524: PUSH
23525: LD_INT 0
23527: ST_TO_ADDR
// sRemote := false ;
23528: LD_ADDR_EXP 81
23532: PUSH
23533: LD_INT 0
23535: ST_TO_ADDR
// sPowell := false ;
23536: LD_ADDR_EXP 82
23540: PUSH
23541: LD_INT 0
23543: ST_TO_ADDR
// sTeleport := false ;
23544: LD_ADDR_EXP 85
23548: PUSH
23549: LD_INT 0
23551: ST_TO_ADDR
// sOilTower := false ;
23552: LD_ADDR_EXP 87
23556: PUSH
23557: LD_INT 0
23559: ST_TO_ADDR
// sShovel := false ;
23560: LD_ADDR_EXP 88
23564: PUSH
23565: LD_INT 0
23567: ST_TO_ADDR
// sSheik := false ;
23568: LD_ADDR_EXP 89
23572: PUSH
23573: LD_INT 0
23575: ST_TO_ADDR
// sEarthquake := false ;
23576: LD_ADDR_EXP 91
23580: PUSH
23581: LD_INT 0
23583: ST_TO_ADDR
// sAI := false ;
23584: LD_ADDR_EXP 92
23588: PUSH
23589: LD_INT 0
23591: ST_TO_ADDR
// sCargo := false ;
23592: LD_ADDR_EXP 95
23596: PUSH
23597: LD_INT 0
23599: ST_TO_ADDR
// sDLaser := false ;
23600: LD_ADDR_EXP 96
23604: PUSH
23605: LD_INT 0
23607: ST_TO_ADDR
// sExchange := false ;
23608: LD_ADDR_EXP 97
23612: PUSH
23613: LD_INT 0
23615: ST_TO_ADDR
// sFac := false ;
23616: LD_ADDR_EXP 98
23620: PUSH
23621: LD_INT 0
23623: ST_TO_ADDR
// sPower := false ;
23624: LD_ADDR_EXP 99
23628: PUSH
23629: LD_INT 0
23631: ST_TO_ADDR
// sRandom := false ;
23632: LD_ADDR_EXP 100
23636: PUSH
23637: LD_INT 0
23639: ST_TO_ADDR
// sShield := false ;
23640: LD_ADDR_EXP 101
23644: PUSH
23645: LD_INT 0
23647: ST_TO_ADDR
// sTime := false ;
23648: LD_ADDR_EXP 102
23652: PUSH
23653: LD_INT 0
23655: ST_TO_ADDR
// sTools := false ;
23656: LD_ADDR_EXP 103
23660: PUSH
23661: LD_INT 0
23663: ST_TO_ADDR
// sSold := false ;
23664: LD_ADDR_EXP 68
23668: PUSH
23669: LD_INT 0
23671: ST_TO_ADDR
// sDiff := false ;
23672: LD_ADDR_EXP 69
23676: PUSH
23677: LD_INT 0
23679: ST_TO_ADDR
// sFog := false ;
23680: LD_ADDR_EXP 72
23684: PUSH
23685: LD_INT 0
23687: ST_TO_ADDR
// sReset := false ;
23688: LD_ADDR_EXP 73
23692: PUSH
23693: LD_INT 0
23695: ST_TO_ADDR
// sSun := false ;
23696: LD_ADDR_EXP 74
23700: PUSH
23701: LD_INT 0
23703: ST_TO_ADDR
// sTiger := false ;
23704: LD_ADDR_EXP 70
23708: PUSH
23709: LD_INT 0
23711: ST_TO_ADDR
// sBomb := false ;
23712: LD_ADDR_EXP 71
23716: PUSH
23717: LD_INT 0
23719: ST_TO_ADDR
// sWound := false ;
23720: LD_ADDR_EXP 79
23724: PUSH
23725: LD_INT 0
23727: ST_TO_ADDR
// sBetray := false ;
23728: LD_ADDR_EXP 83
23732: PUSH
23733: LD_INT 0
23735: ST_TO_ADDR
// sContamin := false ;
23736: LD_ADDR_EXP 84
23740: PUSH
23741: LD_INT 0
23743: ST_TO_ADDR
// sOil := false ;
23744: LD_ADDR_EXP 86
23748: PUSH
23749: LD_INT 0
23751: ST_TO_ADDR
// sStu := false ;
23752: LD_ADDR_EXP 90
23756: PUSH
23757: LD_INT 0
23759: ST_TO_ADDR
// sBazooka := false ;
23760: LD_ADDR_EXP 93
23764: PUSH
23765: LD_INT 0
23767: ST_TO_ADDR
// sMortar := false ;
23768: LD_ADDR_EXP 94
23772: PUSH
23773: LD_INT 0
23775: ST_TO_ADDR
// sRanger := false ;
23776: LD_ADDR_EXP 104
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
// sComputer := false ;
23784: LD_ADDR_EXP 105
23788: PUSH
23789: LD_INT 0
23791: ST_TO_ADDR
// s30 := false ;
23792: LD_ADDR_EXP 106
23796: PUSH
23797: LD_INT 0
23799: ST_TO_ADDR
// s60 := false ;
23800: LD_ADDR_EXP 107
23804: PUSH
23805: LD_INT 0
23807: ST_TO_ADDR
// end ;
23808: LD_VAR 0 1
23812: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23813: LD_INT 0
23815: PPUSH
23816: PPUSH
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
23821: PPUSH
// result := [ ] ;
23822: LD_ADDR_VAR 0 2
23826: PUSH
23827: EMPTY
23828: ST_TO_ADDR
// if campaign_id = 1 then
23829: LD_OWVAR 69
23833: PUSH
23834: LD_INT 1
23836: EQUAL
23837: IFFALSE 27003
// begin case mission_number of 1 :
23839: LD_OWVAR 70
23843: PUSH
23844: LD_INT 1
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23928
23852: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23853: LD_ADDR_VAR 0 2
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 4
23863: PUSH
23864: LD_INT 11
23866: PUSH
23867: LD_INT 12
23869: PUSH
23870: LD_INT 15
23872: PUSH
23873: LD_INT 16
23875: PUSH
23876: LD_INT 22
23878: PUSH
23879: LD_INT 23
23881: PUSH
23882: LD_INT 26
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 106
23904: PUSH
23905: LD_INT 116
23907: PUSH
23908: LD_INT 117
23910: PUSH
23911: LD_INT 118
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: ST_TO_ADDR
23926: GO 27001
23928: LD_INT 2
23930: DOUBLE
23931: EQUAL
23932: IFTRUE 23936
23934: GO 24020
23936: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: LD_INT 4
23947: PUSH
23948: LD_INT 11
23950: PUSH
23951: LD_INT 12
23953: PUSH
23954: LD_INT 15
23956: PUSH
23957: LD_INT 16
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_INT 23
23965: PUSH
23966: LD_INT 26
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 101
23982: PUSH
23983: LD_INT 102
23985: PUSH
23986: LD_INT 105
23988: PUSH
23989: LD_INT 106
23991: PUSH
23992: LD_INT 108
23994: PUSH
23995: LD_INT 116
23997: PUSH
23998: LD_INT 117
24000: PUSH
24001: LD_INT 118
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 27001
24020: LD_INT 3
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24116
24028: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 4
24039: PUSH
24040: LD_INT 5
24042: PUSH
24043: LD_INT 11
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: LD_INT 15
24051: PUSH
24052: LD_INT 16
24054: PUSH
24055: LD_INT 22
24057: PUSH
24058: LD_INT 26
24060: PUSH
24061: LD_INT 36
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 101
24078: PUSH
24079: LD_INT 102
24081: PUSH
24082: LD_INT 105
24084: PUSH
24085: LD_INT 106
24087: PUSH
24088: LD_INT 108
24090: PUSH
24091: LD_INT 116
24093: PUSH
24094: LD_INT 117
24096: PUSH
24097: LD_INT 118
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: ST_TO_ADDR
24114: GO 27001
24116: LD_INT 4
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24220
24124: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24125: LD_ADDR_VAR 0 2
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 4
24135: PUSH
24136: LD_INT 5
24138: PUSH
24139: LD_INT 8
24141: PUSH
24142: LD_INT 11
24144: PUSH
24145: LD_INT 12
24147: PUSH
24148: LD_INT 15
24150: PUSH
24151: LD_INT 16
24153: PUSH
24154: LD_INT 22
24156: PUSH
24157: LD_INT 23
24159: PUSH
24160: LD_INT 26
24162: PUSH
24163: LD_INT 36
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 101
24182: PUSH
24183: LD_INT 102
24185: PUSH
24186: LD_INT 105
24188: PUSH
24189: LD_INT 106
24191: PUSH
24192: LD_INT 108
24194: PUSH
24195: LD_INT 116
24197: PUSH
24198: LD_INT 117
24200: PUSH
24201: LD_INT 118
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: ST_TO_ADDR
24218: GO 27001
24220: LD_INT 5
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24340
24228: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 4
24239: PUSH
24240: LD_INT 5
24242: PUSH
24243: LD_INT 6
24245: PUSH
24246: LD_INT 8
24248: PUSH
24249: LD_INT 11
24251: PUSH
24252: LD_INT 12
24254: PUSH
24255: LD_INT 15
24257: PUSH
24258: LD_INT 16
24260: PUSH
24261: LD_INT 22
24263: PUSH
24264: LD_INT 23
24266: PUSH
24267: LD_INT 25
24269: PUSH
24270: LD_INT 26
24272: PUSH
24273: LD_INT 36
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 101
24294: PUSH
24295: LD_INT 102
24297: PUSH
24298: LD_INT 105
24300: PUSH
24301: LD_INT 106
24303: PUSH
24304: LD_INT 108
24306: PUSH
24307: LD_INT 109
24309: PUSH
24310: LD_INT 112
24312: PUSH
24313: LD_INT 116
24315: PUSH
24316: LD_INT 117
24318: PUSH
24319: LD_INT 118
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 27001
24340: LD_INT 6
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24480
24348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24349: LD_ADDR_VAR 0 2
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 4
24359: PUSH
24360: LD_INT 5
24362: PUSH
24363: LD_INT 6
24365: PUSH
24366: LD_INT 8
24368: PUSH
24369: LD_INT 11
24371: PUSH
24372: LD_INT 12
24374: PUSH
24375: LD_INT 15
24377: PUSH
24378: LD_INT 16
24380: PUSH
24381: LD_INT 20
24383: PUSH
24384: LD_INT 21
24386: PUSH
24387: LD_INT 22
24389: PUSH
24390: LD_INT 23
24392: PUSH
24393: LD_INT 25
24395: PUSH
24396: LD_INT 26
24398: PUSH
24399: LD_INT 30
24401: PUSH
24402: LD_INT 31
24404: PUSH
24405: LD_INT 32
24407: PUSH
24408: LD_INT 36
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 102
24437: PUSH
24438: LD_INT 105
24440: PUSH
24441: LD_INT 106
24443: PUSH
24444: LD_INT 108
24446: PUSH
24447: LD_INT 109
24449: PUSH
24450: LD_INT 112
24452: PUSH
24453: LD_INT 116
24455: PUSH
24456: LD_INT 117
24458: PUSH
24459: LD_INT 118
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: ST_TO_ADDR
24478: GO 27001
24480: LD_INT 7
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24600
24488: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24489: LD_ADDR_VAR 0 2
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: LD_INT 4
24499: PUSH
24500: LD_INT 5
24502: PUSH
24503: LD_INT 7
24505: PUSH
24506: LD_INT 11
24508: PUSH
24509: LD_INT 12
24511: PUSH
24512: LD_INT 15
24514: PUSH
24515: LD_INT 16
24517: PUSH
24518: LD_INT 20
24520: PUSH
24521: LD_INT 21
24523: PUSH
24524: LD_INT 22
24526: PUSH
24527: LD_INT 23
24529: PUSH
24530: LD_INT 25
24532: PUSH
24533: LD_INT 26
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 101
24554: PUSH
24555: LD_INT 102
24557: PUSH
24558: LD_INT 103
24560: PUSH
24561: LD_INT 105
24563: PUSH
24564: LD_INT 106
24566: PUSH
24567: LD_INT 108
24569: PUSH
24570: LD_INT 112
24572: PUSH
24573: LD_INT 116
24575: PUSH
24576: LD_INT 117
24578: PUSH
24579: LD_INT 118
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: ST_TO_ADDR
24598: GO 27001
24600: LD_INT 8
24602: DOUBLE
24603: EQUAL
24604: IFTRUE 24608
24606: GO 24748
24608: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24609: LD_ADDR_VAR 0 2
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 4
24619: PUSH
24620: LD_INT 5
24622: PUSH
24623: LD_INT 6
24625: PUSH
24626: LD_INT 7
24628: PUSH
24629: LD_INT 8
24631: PUSH
24632: LD_INT 11
24634: PUSH
24635: LD_INT 12
24637: PUSH
24638: LD_INT 15
24640: PUSH
24641: LD_INT 16
24643: PUSH
24644: LD_INT 20
24646: PUSH
24647: LD_INT 21
24649: PUSH
24650: LD_INT 22
24652: PUSH
24653: LD_INT 23
24655: PUSH
24656: LD_INT 25
24658: PUSH
24659: LD_INT 26
24661: PUSH
24662: LD_INT 30
24664: PUSH
24665: LD_INT 31
24667: PUSH
24668: LD_INT 32
24670: PUSH
24671: LD_INT 36
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 101
24698: PUSH
24699: LD_INT 102
24701: PUSH
24702: LD_INT 103
24704: PUSH
24705: LD_INT 105
24707: PUSH
24708: LD_INT 106
24710: PUSH
24711: LD_INT 108
24713: PUSH
24714: LD_INT 109
24716: PUSH
24717: LD_INT 112
24719: PUSH
24720: LD_INT 116
24722: PUSH
24723: LD_INT 117
24725: PUSH
24726: LD_INT 118
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: ST_TO_ADDR
24746: GO 27001
24748: LD_INT 9
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24904
24756: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24757: LD_ADDR_VAR 0 2
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: LD_INT 4
24767: PUSH
24768: LD_INT 5
24770: PUSH
24771: LD_INT 6
24773: PUSH
24774: LD_INT 7
24776: PUSH
24777: LD_INT 8
24779: PUSH
24780: LD_INT 11
24782: PUSH
24783: LD_INT 12
24785: PUSH
24786: LD_INT 15
24788: PUSH
24789: LD_INT 16
24791: PUSH
24792: LD_INT 20
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_INT 23
24803: PUSH
24804: LD_INT 25
24806: PUSH
24807: LD_INT 26
24809: PUSH
24810: LD_INT 28
24812: PUSH
24813: LD_INT 30
24815: PUSH
24816: LD_INT 31
24818: PUSH
24819: LD_INT 32
24821: PUSH
24822: LD_INT 36
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 101
24850: PUSH
24851: LD_INT 102
24853: PUSH
24854: LD_INT 103
24856: PUSH
24857: LD_INT 105
24859: PUSH
24860: LD_INT 106
24862: PUSH
24863: LD_INT 108
24865: PUSH
24866: LD_INT 109
24868: PUSH
24869: LD_INT 112
24871: PUSH
24872: LD_INT 114
24874: PUSH
24875: LD_INT 116
24877: PUSH
24878: LD_INT 117
24880: PUSH
24881: LD_INT 118
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: ST_TO_ADDR
24902: GO 27001
24904: LD_INT 10
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 25108
24912: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 4
24923: PUSH
24924: LD_INT 5
24926: PUSH
24927: LD_INT 6
24929: PUSH
24930: LD_INT 7
24932: PUSH
24933: LD_INT 8
24935: PUSH
24936: LD_INT 9
24938: PUSH
24939: LD_INT 10
24941: PUSH
24942: LD_INT 11
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 13
24950: PUSH
24951: LD_INT 14
24953: PUSH
24954: LD_INT 15
24956: PUSH
24957: LD_INT 16
24959: PUSH
24960: LD_INT 17
24962: PUSH
24963: LD_INT 18
24965: PUSH
24966: LD_INT 19
24968: PUSH
24969: LD_INT 20
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: LD_INT 25
24986: PUSH
24987: LD_INT 26
24989: PUSH
24990: LD_INT 28
24992: PUSH
24993: LD_INT 30
24995: PUSH
24996: LD_INT 31
24998: PUSH
24999: LD_INT 32
25001: PUSH
25002: LD_INT 36
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 101
25038: PUSH
25039: LD_INT 102
25041: PUSH
25042: LD_INT 103
25044: PUSH
25045: LD_INT 104
25047: PUSH
25048: LD_INT 105
25050: PUSH
25051: LD_INT 106
25053: PUSH
25054: LD_INT 107
25056: PUSH
25057: LD_INT 108
25059: PUSH
25060: LD_INT 109
25062: PUSH
25063: LD_INT 110
25065: PUSH
25066: LD_INT 111
25068: PUSH
25069: LD_INT 112
25071: PUSH
25072: LD_INT 114
25074: PUSH
25075: LD_INT 116
25077: PUSH
25078: LD_INT 117
25080: PUSH
25081: LD_INT 118
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: ST_TO_ADDR
25106: GO 27001
25108: LD_INT 11
25110: DOUBLE
25111: EQUAL
25112: IFTRUE 25116
25114: GO 25320
25116: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25117: LD_ADDR_VAR 0 2
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 4
25130: PUSH
25131: LD_INT 5
25133: PUSH
25134: LD_INT 6
25136: PUSH
25137: LD_INT 7
25139: PUSH
25140: LD_INT 8
25142: PUSH
25143: LD_INT 9
25145: PUSH
25146: LD_INT 10
25148: PUSH
25149: LD_INT 11
25151: PUSH
25152: LD_INT 12
25154: PUSH
25155: LD_INT 13
25157: PUSH
25158: LD_INT 14
25160: PUSH
25161: LD_INT 15
25163: PUSH
25164: LD_INT 16
25166: PUSH
25167: LD_INT 17
25169: PUSH
25170: LD_INT 18
25172: PUSH
25173: LD_INT 19
25175: PUSH
25176: LD_INT 20
25178: PUSH
25179: LD_INT 21
25181: PUSH
25182: LD_INT 22
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: LD_INT 25
25193: PUSH
25194: LD_INT 26
25196: PUSH
25197: LD_INT 28
25199: PUSH
25200: LD_INT 30
25202: PUSH
25203: LD_INT 31
25205: PUSH
25206: LD_INT 32
25208: PUSH
25209: LD_INT 34
25211: PUSH
25212: LD_INT 36
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 101
25250: PUSH
25251: LD_INT 102
25253: PUSH
25254: LD_INT 103
25256: PUSH
25257: LD_INT 104
25259: PUSH
25260: LD_INT 105
25262: PUSH
25263: LD_INT 106
25265: PUSH
25266: LD_INT 107
25268: PUSH
25269: LD_INT 108
25271: PUSH
25272: LD_INT 109
25274: PUSH
25275: LD_INT 110
25277: PUSH
25278: LD_INT 111
25280: PUSH
25281: LD_INT 112
25283: PUSH
25284: LD_INT 114
25286: PUSH
25287: LD_INT 116
25289: PUSH
25290: LD_INT 117
25292: PUSH
25293: LD_INT 118
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 27001
25320: LD_INT 12
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25548
25328: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25329: LD_ADDR_VAR 0 2
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 4
25345: PUSH
25346: LD_INT 5
25348: PUSH
25349: LD_INT 6
25351: PUSH
25352: LD_INT 7
25354: PUSH
25355: LD_INT 8
25357: PUSH
25358: LD_INT 9
25360: PUSH
25361: LD_INT 10
25363: PUSH
25364: LD_INT 11
25366: PUSH
25367: LD_INT 12
25369: PUSH
25370: LD_INT 13
25372: PUSH
25373: LD_INT 14
25375: PUSH
25376: LD_INT 15
25378: PUSH
25379: LD_INT 16
25381: PUSH
25382: LD_INT 17
25384: PUSH
25385: LD_INT 18
25387: PUSH
25388: LD_INT 19
25390: PUSH
25391: LD_INT 20
25393: PUSH
25394: LD_INT 21
25396: PUSH
25397: LD_INT 22
25399: PUSH
25400: LD_INT 23
25402: PUSH
25403: LD_INT 24
25405: PUSH
25406: LD_INT 25
25408: PUSH
25409: LD_INT 26
25411: PUSH
25412: LD_INT 27
25414: PUSH
25415: LD_INT 28
25417: PUSH
25418: LD_INT 30
25420: PUSH
25421: LD_INT 31
25423: PUSH
25424: LD_INT 32
25426: PUSH
25427: LD_INT 33
25429: PUSH
25430: LD_INT 34
25432: PUSH
25433: LD_INT 36
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 101
25474: PUSH
25475: LD_INT 102
25477: PUSH
25478: LD_INT 103
25480: PUSH
25481: LD_INT 104
25483: PUSH
25484: LD_INT 105
25486: PUSH
25487: LD_INT 106
25489: PUSH
25490: LD_INT 107
25492: PUSH
25493: LD_INT 108
25495: PUSH
25496: LD_INT 109
25498: PUSH
25499: LD_INT 110
25501: PUSH
25502: LD_INT 111
25504: PUSH
25505: LD_INT 112
25507: PUSH
25508: LD_INT 113
25510: PUSH
25511: LD_INT 114
25513: PUSH
25514: LD_INT 116
25516: PUSH
25517: LD_INT 117
25519: PUSH
25520: LD_INT 118
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: ST_TO_ADDR
25546: GO 27001
25548: LD_INT 13
25550: DOUBLE
25551: EQUAL
25552: IFTRUE 25556
25554: GO 25764
25556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25557: LD_ADDR_VAR 0 2
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: LD_INT 4
25573: PUSH
25574: LD_INT 5
25576: PUSH
25577: LD_INT 8
25579: PUSH
25580: LD_INT 9
25582: PUSH
25583: LD_INT 10
25585: PUSH
25586: LD_INT 11
25588: PUSH
25589: LD_INT 12
25591: PUSH
25592: LD_INT 14
25594: PUSH
25595: LD_INT 15
25597: PUSH
25598: LD_INT 16
25600: PUSH
25601: LD_INT 17
25603: PUSH
25604: LD_INT 18
25606: PUSH
25607: LD_INT 19
25609: PUSH
25610: LD_INT 20
25612: PUSH
25613: LD_INT 21
25615: PUSH
25616: LD_INT 22
25618: PUSH
25619: LD_INT 23
25621: PUSH
25622: LD_INT 24
25624: PUSH
25625: LD_INT 25
25627: PUSH
25628: LD_INT 26
25630: PUSH
25631: LD_INT 27
25633: PUSH
25634: LD_INT 28
25636: PUSH
25637: LD_INT 30
25639: PUSH
25640: LD_INT 31
25642: PUSH
25643: LD_INT 32
25645: PUSH
25646: LD_INT 33
25648: PUSH
25649: LD_INT 34
25651: PUSH
25652: LD_INT 36
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 101
25690: PUSH
25691: LD_INT 102
25693: PUSH
25694: LD_INT 103
25696: PUSH
25697: LD_INT 104
25699: PUSH
25700: LD_INT 105
25702: PUSH
25703: LD_INT 106
25705: PUSH
25706: LD_INT 107
25708: PUSH
25709: LD_INT 108
25711: PUSH
25712: LD_INT 109
25714: PUSH
25715: LD_INT 110
25717: PUSH
25718: LD_INT 111
25720: PUSH
25721: LD_INT 112
25723: PUSH
25724: LD_INT 113
25726: PUSH
25727: LD_INT 114
25729: PUSH
25730: LD_INT 116
25732: PUSH
25733: LD_INT 117
25735: PUSH
25736: LD_INT 118
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: ST_TO_ADDR
25762: GO 27001
25764: LD_INT 14
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25996
25772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25773: LD_ADDR_VAR 0 2
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 3
25786: PUSH
25787: LD_INT 4
25789: PUSH
25790: LD_INT 5
25792: PUSH
25793: LD_INT 6
25795: PUSH
25796: LD_INT 7
25798: PUSH
25799: LD_INT 8
25801: PUSH
25802: LD_INT 9
25804: PUSH
25805: LD_INT 10
25807: PUSH
25808: LD_INT 11
25810: PUSH
25811: LD_INT 12
25813: PUSH
25814: LD_INT 13
25816: PUSH
25817: LD_INT 14
25819: PUSH
25820: LD_INT 15
25822: PUSH
25823: LD_INT 16
25825: PUSH
25826: LD_INT 17
25828: PUSH
25829: LD_INT 18
25831: PUSH
25832: LD_INT 19
25834: PUSH
25835: LD_INT 20
25837: PUSH
25838: LD_INT 21
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_INT 23
25846: PUSH
25847: LD_INT 24
25849: PUSH
25850: LD_INT 25
25852: PUSH
25853: LD_INT 26
25855: PUSH
25856: LD_INT 27
25858: PUSH
25859: LD_INT 28
25861: PUSH
25862: LD_INT 29
25864: PUSH
25865: LD_INT 30
25867: PUSH
25868: LD_INT 31
25870: PUSH
25871: LD_INT 32
25873: PUSH
25874: LD_INT 33
25876: PUSH
25877: LD_INT 34
25879: PUSH
25880: LD_INT 36
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 101
25922: PUSH
25923: LD_INT 102
25925: PUSH
25926: LD_INT 103
25928: PUSH
25929: LD_INT 104
25931: PUSH
25932: LD_INT 105
25934: PUSH
25935: LD_INT 106
25937: PUSH
25938: LD_INT 107
25940: PUSH
25941: LD_INT 108
25943: PUSH
25944: LD_INT 109
25946: PUSH
25947: LD_INT 110
25949: PUSH
25950: LD_INT 111
25952: PUSH
25953: LD_INT 112
25955: PUSH
25956: LD_INT 113
25958: PUSH
25959: LD_INT 114
25961: PUSH
25962: LD_INT 116
25964: PUSH
25965: LD_INT 117
25967: PUSH
25968: LD_INT 118
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: ST_TO_ADDR
25994: GO 27001
25996: LD_INT 15
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26228
26004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26005: LD_ADDR_VAR 0 2
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: LD_INT 4
26021: PUSH
26022: LD_INT 5
26024: PUSH
26025: LD_INT 6
26027: PUSH
26028: LD_INT 7
26030: PUSH
26031: LD_INT 8
26033: PUSH
26034: LD_INT 9
26036: PUSH
26037: LD_INT 10
26039: PUSH
26040: LD_INT 11
26042: PUSH
26043: LD_INT 12
26045: PUSH
26046: LD_INT 13
26048: PUSH
26049: LD_INT 14
26051: PUSH
26052: LD_INT 15
26054: PUSH
26055: LD_INT 16
26057: PUSH
26058: LD_INT 17
26060: PUSH
26061: LD_INT 18
26063: PUSH
26064: LD_INT 19
26066: PUSH
26067: LD_INT 20
26069: PUSH
26070: LD_INT 21
26072: PUSH
26073: LD_INT 22
26075: PUSH
26076: LD_INT 23
26078: PUSH
26079: LD_INT 24
26081: PUSH
26082: LD_INT 25
26084: PUSH
26085: LD_INT 26
26087: PUSH
26088: LD_INT 27
26090: PUSH
26091: LD_INT 28
26093: PUSH
26094: LD_INT 29
26096: PUSH
26097: LD_INT 30
26099: PUSH
26100: LD_INT 31
26102: PUSH
26103: LD_INT 32
26105: PUSH
26106: LD_INT 33
26108: PUSH
26109: LD_INT 34
26111: PUSH
26112: LD_INT 36
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 101
26154: PUSH
26155: LD_INT 102
26157: PUSH
26158: LD_INT 103
26160: PUSH
26161: LD_INT 104
26163: PUSH
26164: LD_INT 105
26166: PUSH
26167: LD_INT 106
26169: PUSH
26170: LD_INT 107
26172: PUSH
26173: LD_INT 108
26175: PUSH
26176: LD_INT 109
26178: PUSH
26179: LD_INT 110
26181: PUSH
26182: LD_INT 111
26184: PUSH
26185: LD_INT 112
26187: PUSH
26188: LD_INT 113
26190: PUSH
26191: LD_INT 114
26193: PUSH
26194: LD_INT 116
26196: PUSH
26197: LD_INT 117
26199: PUSH
26200: LD_INT 118
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: ST_TO_ADDR
26226: GO 27001
26228: LD_INT 16
26230: DOUBLE
26231: EQUAL
26232: IFTRUE 26236
26234: GO 26372
26236: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26237: LD_ADDR_VAR 0 2
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 4
26247: PUSH
26248: LD_INT 5
26250: PUSH
26251: LD_INT 7
26253: PUSH
26254: LD_INT 11
26256: PUSH
26257: LD_INT 12
26259: PUSH
26260: LD_INT 15
26262: PUSH
26263: LD_INT 16
26265: PUSH
26266: LD_INT 20
26268: PUSH
26269: LD_INT 21
26271: PUSH
26272: LD_INT 22
26274: PUSH
26275: LD_INT 23
26277: PUSH
26278: LD_INT 25
26280: PUSH
26281: LD_INT 26
26283: PUSH
26284: LD_INT 30
26286: PUSH
26287: LD_INT 31
26289: PUSH
26290: LD_INT 32
26292: PUSH
26293: LD_INT 33
26295: PUSH
26296: LD_INT 34
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 101
26322: PUSH
26323: LD_INT 102
26325: PUSH
26326: LD_INT 103
26328: PUSH
26329: LD_INT 106
26331: PUSH
26332: LD_INT 108
26334: PUSH
26335: LD_INT 112
26337: PUSH
26338: LD_INT 113
26340: PUSH
26341: LD_INT 114
26343: PUSH
26344: LD_INT 116
26346: PUSH
26347: LD_INT 117
26349: PUSH
26350: LD_INT 118
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: ST_TO_ADDR
26370: GO 27001
26372: LD_INT 17
26374: DOUBLE
26375: EQUAL
26376: IFTRUE 26380
26378: GO 26604
26380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 3
26394: PUSH
26395: LD_INT 4
26397: PUSH
26398: LD_INT 5
26400: PUSH
26401: LD_INT 6
26403: PUSH
26404: LD_INT 7
26406: PUSH
26407: LD_INT 8
26409: PUSH
26410: LD_INT 9
26412: PUSH
26413: LD_INT 10
26415: PUSH
26416: LD_INT 11
26418: PUSH
26419: LD_INT 12
26421: PUSH
26422: LD_INT 13
26424: PUSH
26425: LD_INT 14
26427: PUSH
26428: LD_INT 15
26430: PUSH
26431: LD_INT 16
26433: PUSH
26434: LD_INT 17
26436: PUSH
26437: LD_INT 18
26439: PUSH
26440: LD_INT 19
26442: PUSH
26443: LD_INT 20
26445: PUSH
26446: LD_INT 21
26448: PUSH
26449: LD_INT 22
26451: PUSH
26452: LD_INT 23
26454: PUSH
26455: LD_INT 24
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 26
26463: PUSH
26464: LD_INT 27
26466: PUSH
26467: LD_INT 28
26469: PUSH
26470: LD_INT 29
26472: PUSH
26473: LD_INT 30
26475: PUSH
26476: LD_INT 31
26478: PUSH
26479: LD_INT 32
26481: PUSH
26482: LD_INT 33
26484: PUSH
26485: LD_INT 34
26487: PUSH
26488: LD_INT 36
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 101
26530: PUSH
26531: LD_INT 102
26533: PUSH
26534: LD_INT 103
26536: PUSH
26537: LD_INT 104
26539: PUSH
26540: LD_INT 105
26542: PUSH
26543: LD_INT 106
26545: PUSH
26546: LD_INT 107
26548: PUSH
26549: LD_INT 108
26551: PUSH
26552: LD_INT 109
26554: PUSH
26555: LD_INT 110
26557: PUSH
26558: LD_INT 111
26560: PUSH
26561: LD_INT 112
26563: PUSH
26564: LD_INT 113
26566: PUSH
26567: LD_INT 114
26569: PUSH
26570: LD_INT 116
26572: PUSH
26573: LD_INT 117
26575: PUSH
26576: LD_INT 118
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: ST_TO_ADDR
26602: GO 27001
26604: LD_INT 18
26606: DOUBLE
26607: EQUAL
26608: IFTRUE 26612
26610: GO 26760
26612: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 4
26623: PUSH
26624: LD_INT 5
26626: PUSH
26627: LD_INT 7
26629: PUSH
26630: LD_INT 11
26632: PUSH
26633: LD_INT 12
26635: PUSH
26636: LD_INT 15
26638: PUSH
26639: LD_INT 16
26641: PUSH
26642: LD_INT 20
26644: PUSH
26645: LD_INT 21
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_INT 23
26653: PUSH
26654: LD_INT 25
26656: PUSH
26657: LD_INT 26
26659: PUSH
26660: LD_INT 30
26662: PUSH
26663: LD_INT 31
26665: PUSH
26666: LD_INT 32
26668: PUSH
26669: LD_INT 33
26671: PUSH
26672: LD_INT 34
26674: PUSH
26675: LD_INT 35
26677: PUSH
26678: LD_INT 36
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 101
26706: PUSH
26707: LD_INT 102
26709: PUSH
26710: LD_INT 103
26712: PUSH
26713: LD_INT 106
26715: PUSH
26716: LD_INT 108
26718: PUSH
26719: LD_INT 112
26721: PUSH
26722: LD_INT 113
26724: PUSH
26725: LD_INT 114
26727: PUSH
26728: LD_INT 115
26730: PUSH
26731: LD_INT 116
26733: PUSH
26734: LD_INT 117
26736: PUSH
26737: LD_INT 118
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: ST_TO_ADDR
26758: GO 27001
26760: LD_INT 19
26762: DOUBLE
26763: EQUAL
26764: IFTRUE 26768
26766: GO 27000
26768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: LD_INT 4
26785: PUSH
26786: LD_INT 5
26788: PUSH
26789: LD_INT 6
26791: PUSH
26792: LD_INT 7
26794: PUSH
26795: LD_INT 8
26797: PUSH
26798: LD_INT 9
26800: PUSH
26801: LD_INT 10
26803: PUSH
26804: LD_INT 11
26806: PUSH
26807: LD_INT 12
26809: PUSH
26810: LD_INT 13
26812: PUSH
26813: LD_INT 14
26815: PUSH
26816: LD_INT 15
26818: PUSH
26819: LD_INT 16
26821: PUSH
26822: LD_INT 17
26824: PUSH
26825: LD_INT 18
26827: PUSH
26828: LD_INT 19
26830: PUSH
26831: LD_INT 20
26833: PUSH
26834: LD_INT 21
26836: PUSH
26837: LD_INT 22
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: LD_INT 24
26845: PUSH
26846: LD_INT 25
26848: PUSH
26849: LD_INT 26
26851: PUSH
26852: LD_INT 27
26854: PUSH
26855: LD_INT 28
26857: PUSH
26858: LD_INT 29
26860: PUSH
26861: LD_INT 30
26863: PUSH
26864: LD_INT 31
26866: PUSH
26867: LD_INT 32
26869: PUSH
26870: LD_INT 33
26872: PUSH
26873: LD_INT 34
26875: PUSH
26876: LD_INT 35
26878: PUSH
26879: LD_INT 36
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 101
26922: PUSH
26923: LD_INT 102
26925: PUSH
26926: LD_INT 103
26928: PUSH
26929: LD_INT 104
26931: PUSH
26932: LD_INT 105
26934: PUSH
26935: LD_INT 106
26937: PUSH
26938: LD_INT 107
26940: PUSH
26941: LD_INT 108
26943: PUSH
26944: LD_INT 109
26946: PUSH
26947: LD_INT 110
26949: PUSH
26950: LD_INT 111
26952: PUSH
26953: LD_INT 112
26955: PUSH
26956: LD_INT 113
26958: PUSH
26959: LD_INT 114
26961: PUSH
26962: LD_INT 115
26964: PUSH
26965: LD_INT 116
26967: PUSH
26968: LD_INT 117
26970: PUSH
26971: LD_INT 118
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: ST_TO_ADDR
26998: GO 27001
27000: POP
// end else
27001: GO 27232
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27003: LD_ADDR_VAR 0 2
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 3
27016: PUSH
27017: LD_INT 4
27019: PUSH
27020: LD_INT 5
27022: PUSH
27023: LD_INT 6
27025: PUSH
27026: LD_INT 7
27028: PUSH
27029: LD_INT 8
27031: PUSH
27032: LD_INT 9
27034: PUSH
27035: LD_INT 10
27037: PUSH
27038: LD_INT 11
27040: PUSH
27041: LD_INT 12
27043: PUSH
27044: LD_INT 13
27046: PUSH
27047: LD_INT 14
27049: PUSH
27050: LD_INT 15
27052: PUSH
27053: LD_INT 16
27055: PUSH
27056: LD_INT 17
27058: PUSH
27059: LD_INT 18
27061: PUSH
27062: LD_INT 19
27064: PUSH
27065: LD_INT 20
27067: PUSH
27068: LD_INT 21
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_INT 23
27076: PUSH
27077: LD_INT 24
27079: PUSH
27080: LD_INT 25
27082: PUSH
27083: LD_INT 26
27085: PUSH
27086: LD_INT 27
27088: PUSH
27089: LD_INT 28
27091: PUSH
27092: LD_INT 29
27094: PUSH
27095: LD_INT 30
27097: PUSH
27098: LD_INT 31
27100: PUSH
27101: LD_INT 32
27103: PUSH
27104: LD_INT 33
27106: PUSH
27107: LD_INT 34
27109: PUSH
27110: LD_INT 35
27112: PUSH
27113: LD_INT 36
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 101
27156: PUSH
27157: LD_INT 102
27159: PUSH
27160: LD_INT 103
27162: PUSH
27163: LD_INT 104
27165: PUSH
27166: LD_INT 105
27168: PUSH
27169: LD_INT 106
27171: PUSH
27172: LD_INT 107
27174: PUSH
27175: LD_INT 108
27177: PUSH
27178: LD_INT 109
27180: PUSH
27181: LD_INT 110
27183: PUSH
27184: LD_INT 111
27186: PUSH
27187: LD_INT 112
27189: PUSH
27190: LD_INT 113
27192: PUSH
27193: LD_INT 114
27195: PUSH
27196: LD_INT 115
27198: PUSH
27199: LD_INT 116
27201: PUSH
27202: LD_INT 117
27204: PUSH
27205: LD_INT 118
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: ST_TO_ADDR
// if result then
27232: LD_VAR 0 2
27236: IFFALSE 28022
// begin normal :=  ;
27238: LD_ADDR_VAR 0 5
27242: PUSH
27243: LD_STRING 
27245: ST_TO_ADDR
// hardcore :=  ;
27246: LD_ADDR_VAR 0 6
27250: PUSH
27251: LD_STRING 
27253: ST_TO_ADDR
// active :=  ;
27254: LD_ADDR_VAR 0 7
27258: PUSH
27259: LD_STRING 
27261: ST_TO_ADDR
// for i = 1 to normalCounter do
27262: LD_ADDR_VAR 0 8
27266: PUSH
27267: DOUBLE
27268: LD_INT 1
27270: DEC
27271: ST_TO_ADDR
27272: LD_EXP 52
27276: PUSH
27277: FOR_TO
27278: IFFALSE 27379
// begin tmp := 0 ;
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: LD_STRING 0
27287: ST_TO_ADDR
// if result [ 1 ] then
27288: LD_VAR 0 2
27292: PUSH
27293: LD_INT 1
27295: ARRAY
27296: IFFALSE 27361
// if result [ 1 ] [ 1 ] = i then
27298: LD_VAR 0 2
27302: PUSH
27303: LD_INT 1
27305: ARRAY
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PUSH
27311: LD_VAR 0 8
27315: EQUAL
27316: IFFALSE 27361
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27318: LD_ADDR_VAR 0 2
27322: PUSH
27323: LD_VAR 0 2
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: LD_VAR 0 2
27335: PUSH
27336: LD_INT 1
27338: ARRAY
27339: PPUSH
27340: LD_INT 1
27342: PPUSH
27343: CALL_OW 3
27347: PPUSH
27348: CALL_OW 1
27352: ST_TO_ADDR
// tmp := 1 ;
27353: LD_ADDR_VAR 0 3
27357: PUSH
27358: LD_STRING 1
27360: ST_TO_ADDR
// end ; normal := normal & tmp ;
27361: LD_ADDR_VAR 0 5
27365: PUSH
27366: LD_VAR 0 5
27370: PUSH
27371: LD_VAR 0 3
27375: STR
27376: ST_TO_ADDR
// end ;
27377: GO 27277
27379: POP
27380: POP
// for i = 1 to hardcoreCounter do
27381: LD_ADDR_VAR 0 8
27385: PUSH
27386: DOUBLE
27387: LD_INT 1
27389: DEC
27390: ST_TO_ADDR
27391: LD_EXP 53
27395: PUSH
27396: FOR_TO
27397: IFFALSE 27502
// begin tmp := 0 ;
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_STRING 0
27406: ST_TO_ADDR
// if result [ 2 ] then
27407: LD_VAR 0 2
27411: PUSH
27412: LD_INT 2
27414: ARRAY
27415: IFFALSE 27484
// if result [ 2 ] [ 1 ] = 100 + i then
27417: LD_VAR 0 2
27421: PUSH
27422: LD_INT 2
27424: ARRAY
27425: PUSH
27426: LD_INT 1
27428: ARRAY
27429: PUSH
27430: LD_INT 100
27432: PUSH
27433: LD_VAR 0 8
27437: PLUS
27438: EQUAL
27439: IFFALSE 27484
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27441: LD_ADDR_VAR 0 2
27445: PUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 2
27453: PPUSH
27454: LD_VAR 0 2
27458: PUSH
27459: LD_INT 2
27461: ARRAY
27462: PPUSH
27463: LD_INT 1
27465: PPUSH
27466: CALL_OW 3
27470: PPUSH
27471: CALL_OW 1
27475: ST_TO_ADDR
// tmp := 1 ;
27476: LD_ADDR_VAR 0 3
27480: PUSH
27481: LD_STRING 1
27483: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27484: LD_ADDR_VAR 0 6
27488: PUSH
27489: LD_VAR 0 6
27493: PUSH
27494: LD_VAR 0 3
27498: STR
27499: ST_TO_ADDR
// end ;
27500: GO 27396
27502: POP
27503: POP
// if isGameLoad then
27504: LD_VAR 0 1
27508: IFFALSE 27983
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: LD_EXP 56
27519: PUSH
27520: LD_EXP 55
27524: PUSH
27525: LD_EXP 57
27529: PUSH
27530: LD_EXP 54
27534: PUSH
27535: LD_EXP 58
27539: PUSH
27540: LD_EXP 59
27544: PUSH
27545: LD_EXP 60
27549: PUSH
27550: LD_EXP 61
27554: PUSH
27555: LD_EXP 62
27559: PUSH
27560: LD_EXP 63
27564: PUSH
27565: LD_EXP 64
27569: PUSH
27570: LD_EXP 65
27574: PUSH
27575: LD_EXP 66
27579: PUSH
27580: LD_EXP 67
27584: PUSH
27585: LD_EXP 75
27589: PUSH
27590: LD_EXP 76
27594: PUSH
27595: LD_EXP 77
27599: PUSH
27600: LD_EXP 78
27604: PUSH
27605: LD_EXP 80
27609: PUSH
27610: LD_EXP 81
27614: PUSH
27615: LD_EXP 82
27619: PUSH
27620: LD_EXP 85
27624: PUSH
27625: LD_EXP 87
27629: PUSH
27630: LD_EXP 88
27634: PUSH
27635: LD_EXP 89
27639: PUSH
27640: LD_EXP 91
27644: PUSH
27645: LD_EXP 92
27649: PUSH
27650: LD_EXP 95
27654: PUSH
27655: LD_EXP 96
27659: PUSH
27660: LD_EXP 97
27664: PUSH
27665: LD_EXP 98
27669: PUSH
27670: LD_EXP 99
27674: PUSH
27675: LD_EXP 100
27679: PUSH
27680: LD_EXP 101
27684: PUSH
27685: LD_EXP 102
27689: PUSH
27690: LD_EXP 103
27694: PUSH
27695: LD_EXP 68
27699: PUSH
27700: LD_EXP 69
27704: PUSH
27705: LD_EXP 72
27709: PUSH
27710: LD_EXP 73
27714: PUSH
27715: LD_EXP 74
27719: PUSH
27720: LD_EXP 70
27724: PUSH
27725: LD_EXP 71
27729: PUSH
27730: LD_EXP 79
27734: PUSH
27735: LD_EXP 83
27739: PUSH
27740: LD_EXP 84
27744: PUSH
27745: LD_EXP 86
27749: PUSH
27750: LD_EXP 90
27754: PUSH
27755: LD_EXP 93
27759: PUSH
27760: LD_EXP 94
27764: PUSH
27765: LD_EXP 104
27769: PUSH
27770: LD_EXP 105
27774: PUSH
27775: LD_EXP 106
27779: PUSH
27780: LD_EXP 107
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: ST_TO_ADDR
// tmp :=  ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: LD_STRING 
27848: ST_TO_ADDR
// for i = 1 to normalCounter do
27849: LD_ADDR_VAR 0 8
27853: PUSH
27854: DOUBLE
27855: LD_INT 1
27857: DEC
27858: ST_TO_ADDR
27859: LD_EXP 52
27863: PUSH
27864: FOR_TO
27865: IFFALSE 27901
// begin if flags [ i ] then
27867: LD_VAR 0 4
27871: PUSH
27872: LD_VAR 0 8
27876: ARRAY
27877: IFFALSE 27899
// tmp := tmp & i & ; ;
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_VAR 0 3
27888: PUSH
27889: LD_VAR 0 8
27893: STR
27894: PUSH
27895: LD_STRING ;
27897: STR
27898: ST_TO_ADDR
// end ;
27899: GO 27864
27901: POP
27902: POP
// for i = 1 to hardcoreCounter do
27903: LD_ADDR_VAR 0 8
27907: PUSH
27908: DOUBLE
27909: LD_INT 1
27911: DEC
27912: ST_TO_ADDR
27913: LD_EXP 53
27917: PUSH
27918: FOR_TO
27919: IFFALSE 27965
// begin if flags [ normalCounter + i ] then
27921: LD_VAR 0 4
27925: PUSH
27926: LD_EXP 52
27930: PUSH
27931: LD_VAR 0 8
27935: PLUS
27936: ARRAY
27937: IFFALSE 27963
// tmp := tmp & ( 100 + i ) & ; ;
27939: LD_ADDR_VAR 0 3
27943: PUSH
27944: LD_VAR 0 3
27948: PUSH
27949: LD_INT 100
27951: PUSH
27952: LD_VAR 0 8
27956: PLUS
27957: STR
27958: PUSH
27959: LD_STRING ;
27961: STR
27962: ST_TO_ADDR
// end ;
27963: GO 27918
27965: POP
27966: POP
// if tmp then
27967: LD_VAR 0 3
27971: IFFALSE 27983
// active := tmp ;
27973: LD_ADDR_VAR 0 7
27977: PUSH
27978: LD_VAR 0 3
27982: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27983: LD_STRING getStreamItemsFromMission("
27985: PUSH
27986: LD_VAR 0 5
27990: STR
27991: PUSH
27992: LD_STRING ","
27994: STR
27995: PUSH
27996: LD_VAR 0 6
28000: STR
28001: PUSH
28002: LD_STRING ","
28004: STR
28005: PUSH
28006: LD_VAR 0 7
28010: STR
28011: PUSH
28012: LD_STRING ")
28014: STR
28015: PPUSH
28016: CALL_OW 559
// end else
28020: GO 28029
// ToLua ( getStreamItemsFromMission("","","") ) ;
28022: LD_STRING getStreamItemsFromMission("","","")
28024: PPUSH
28025: CALL_OW 559
// end ;
28029: LD_VAR 0 2
28033: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28034: LD_EXP 51
28038: PUSH
28039: LD_EXP 56
28043: AND
28044: IFFALSE 28168
28046: GO 28048
28048: DISABLE
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
// begin enable ;
28053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28054: LD_ADDR_VAR 0 2
28058: PUSH
28059: LD_INT 22
28061: PUSH
28062: LD_OWVAR 2
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 34
28076: PUSH
28077: LD_INT 7
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 34
28086: PUSH
28087: LD_INT 45
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 34
28096: PUSH
28097: LD_INT 28
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 34
28106: PUSH
28107: LD_INT 47
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PPUSH
28125: CALL_OW 69
28129: ST_TO_ADDR
// if not tmp then
28130: LD_VAR 0 2
28134: NOT
28135: IFFALSE 28139
// exit ;
28137: GO 28168
// for i in tmp do
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: LD_VAR 0 2
28148: PUSH
28149: FOR_IN
28150: IFFALSE 28166
// begin SetLives ( i , 0 ) ;
28152: LD_VAR 0 1
28156: PPUSH
28157: LD_INT 0
28159: PPUSH
28160: CALL_OW 234
// end ;
28164: GO 28149
28166: POP
28167: POP
// end ;
28168: PPOPN 2
28170: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28171: LD_EXP 51
28175: PUSH
28176: LD_EXP 57
28180: AND
28181: IFFALSE 28265
28183: GO 28185
28185: DISABLE
28186: LD_INT 0
28188: PPUSH
28189: PPUSH
// begin enable ;
28190: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: LD_INT 22
28198: PUSH
28199: LD_OWVAR 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 32
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL_OW 69
28226: ST_TO_ADDR
// if not tmp then
28227: LD_VAR 0 2
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28265
// for i in tmp do
28236: LD_ADDR_VAR 0 1
28240: PUSH
28241: LD_VAR 0 2
28245: PUSH
28246: FOR_IN
28247: IFFALSE 28263
// begin SetLives ( i , 0 ) ;
28249: LD_VAR 0 1
28253: PPUSH
28254: LD_INT 0
28256: PPUSH
28257: CALL_OW 234
// end ;
28261: GO 28246
28263: POP
28264: POP
// end ;
28265: PPOPN 2
28267: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28268: LD_EXP 51
28272: PUSH
28273: LD_EXP 54
28277: AND
28278: IFFALSE 28371
28280: GO 28282
28282: DISABLE
28283: LD_INT 0
28285: PPUSH
// begin enable ;
28286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28287: LD_ADDR_VAR 0 1
28291: PUSH
28292: LD_INT 22
28294: PUSH
28295: LD_OWVAR 2
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: LD_INT 25
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 25
28319: PUSH
28320: LD_INT 9
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 25
28329: PUSH
28330: LD_INT 8
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PPUSH
28347: CALL_OW 69
28351: PUSH
28352: FOR_IN
28353: IFFALSE 28369
// begin SetClass ( i , 1 ) ;
28355: LD_VAR 0 1
28359: PPUSH
28360: LD_INT 1
28362: PPUSH
28363: CALL_OW 336
// end ;
28367: GO 28352
28369: POP
28370: POP
// end ;
28371: PPOPN 1
28373: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28374: LD_EXP 51
28378: PUSH
28379: LD_EXP 55
28383: AND
28384: PUSH
28385: LD_OWVAR 65
28389: PUSH
28390: LD_INT 7
28392: LESS
28393: AND
28394: IFFALSE 28408
28396: GO 28398
28398: DISABLE
// begin enable ;
28399: ENABLE
// game_speed := 7 ;
28400: LD_ADDR_OWVAR 65
28404: PUSH
28405: LD_INT 7
28407: ST_TO_ADDR
// end ;
28408: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28409: LD_EXP 51
28413: PUSH
28414: LD_EXP 58
28418: AND
28419: IFFALSE 28621
28421: GO 28423
28423: DISABLE
28424: LD_INT 0
28426: PPUSH
28427: PPUSH
28428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28429: LD_ADDR_VAR 0 3
28433: PUSH
28434: LD_INT 81
28436: PUSH
28437: LD_OWVAR 2
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 21
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PPUSH
28460: CALL_OW 69
28464: ST_TO_ADDR
// if not tmp then
28465: LD_VAR 0 3
28469: NOT
28470: IFFALSE 28474
// exit ;
28472: GO 28621
// if tmp > 5 then
28474: LD_VAR 0 3
28478: PUSH
28479: LD_INT 5
28481: GREATER
28482: IFFALSE 28494
// k := 5 else
28484: LD_ADDR_VAR 0 2
28488: PUSH
28489: LD_INT 5
28491: ST_TO_ADDR
28492: GO 28504
// k := tmp ;
28494: LD_ADDR_VAR 0 2
28498: PUSH
28499: LD_VAR 0 3
28503: ST_TO_ADDR
// for i := 1 to k do
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: DOUBLE
28510: LD_INT 1
28512: DEC
28513: ST_TO_ADDR
28514: LD_VAR 0 2
28518: PUSH
28519: FOR_TO
28520: IFFALSE 28619
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28522: LD_VAR 0 3
28526: PUSH
28527: LD_VAR 0 1
28531: ARRAY
28532: PPUSH
28533: LD_VAR 0 1
28537: PUSH
28538: LD_INT 4
28540: MOD
28541: PUSH
28542: LD_INT 1
28544: PLUS
28545: PPUSH
28546: CALL_OW 259
28550: PUSH
28551: LD_INT 10
28553: LESS
28554: IFFALSE 28617
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28556: LD_VAR 0 3
28560: PUSH
28561: LD_VAR 0 1
28565: ARRAY
28566: PPUSH
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 4
28574: MOD
28575: PUSH
28576: LD_INT 1
28578: PLUS
28579: PPUSH
28580: LD_VAR 0 3
28584: PUSH
28585: LD_VAR 0 1
28589: ARRAY
28590: PPUSH
28591: LD_VAR 0 1
28595: PUSH
28596: LD_INT 4
28598: MOD
28599: PUSH
28600: LD_INT 1
28602: PLUS
28603: PPUSH
28604: CALL_OW 259
28608: PUSH
28609: LD_INT 1
28611: PLUS
28612: PPUSH
28613: CALL_OW 237
28617: GO 28519
28619: POP
28620: POP
// end ;
28621: PPOPN 3
28623: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28624: LD_EXP 51
28628: PUSH
28629: LD_EXP 59
28633: AND
28634: IFFALSE 28654
28636: GO 28638
28638: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28639: LD_INT 4
28641: PPUSH
28642: LD_OWVAR 2
28646: PPUSH
28647: LD_INT 0
28649: PPUSH
28650: CALL_OW 324
28654: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28655: LD_EXP 51
28659: PUSH
28660: LD_EXP 88
28664: AND
28665: IFFALSE 28685
28667: GO 28669
28669: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28670: LD_INT 19
28672: PPUSH
28673: LD_OWVAR 2
28677: PPUSH
28678: LD_INT 0
28680: PPUSH
28681: CALL_OW 324
28685: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28686: LD_EXP 51
28690: PUSH
28691: LD_EXP 60
28695: AND
28696: IFFALSE 28798
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin enable ;
28705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28706: LD_ADDR_VAR 0 2
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: LD_INT 34
28728: PUSH
28729: LD_INT 11
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 34
28738: PUSH
28739: LD_INT 30
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 69
28759: ST_TO_ADDR
// if not tmp then
28760: LD_VAR 0 2
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 28798
// for i in tmp do
28769: LD_ADDR_VAR 0 1
28773: PUSH
28774: LD_VAR 0 2
28778: PUSH
28779: FOR_IN
28780: IFFALSE 28796
// begin SetLives ( i , 0 ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: LD_INT 0
28789: PPUSH
28790: CALL_OW 234
// end ;
28794: GO 28779
28796: POP
28797: POP
// end ;
28798: PPOPN 2
28800: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28801: LD_EXP 51
28805: PUSH
28806: LD_EXP 61
28810: AND
28811: IFFALSE 28831
28813: GO 28815
28815: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28816: LD_INT 32
28818: PPUSH
28819: LD_OWVAR 2
28823: PPUSH
28824: LD_INT 0
28826: PPUSH
28827: CALL_OW 324
28831: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28832: LD_EXP 51
28836: PUSH
28837: LD_EXP 62
28841: AND
28842: IFFALSE 29023
28844: GO 28846
28846: DISABLE
28847: LD_INT 0
28849: PPUSH
28850: PPUSH
28851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: LD_INT 22
28859: PUSH
28860: LD_OWVAR 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 33
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 69
28887: ST_TO_ADDR
// if not tmp then
28888: LD_VAR 0 2
28892: NOT
28893: IFFALSE 28897
// exit ;
28895: GO 29023
// side := 0 ;
28897: LD_ADDR_VAR 0 3
28901: PUSH
28902: LD_INT 0
28904: ST_TO_ADDR
// for i := 1 to 8 do
28905: LD_ADDR_VAR 0 1
28909: PUSH
28910: DOUBLE
28911: LD_INT 1
28913: DEC
28914: ST_TO_ADDR
28915: LD_INT 8
28917: PUSH
28918: FOR_TO
28919: IFFALSE 28967
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28921: LD_OWVAR 2
28925: PUSH
28926: LD_VAR 0 1
28930: NONEQUAL
28931: PUSH
28932: LD_OWVAR 2
28936: PPUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 81
28946: PUSH
28947: LD_INT 2
28949: EQUAL
28950: AND
28951: IFFALSE 28965
// begin side := i ;
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_VAR 0 1
28962: ST_TO_ADDR
// break ;
28963: GO 28967
// end ;
28965: GO 28918
28967: POP
28968: POP
// if not side then
28969: LD_VAR 0 3
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29023
// for i := 1 to tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: DOUBLE
28984: LD_INT 1
28986: DEC
28987: ST_TO_ADDR
28988: LD_VAR 0 2
28992: PUSH
28993: FOR_TO
28994: IFFALSE 29021
// if Prob ( 60 ) then
28996: LD_INT 60
28998: PPUSH
28999: CALL_OW 13
29003: IFFALSE 29019
// SetSide ( i , side ) ;
29005: LD_VAR 0 1
29009: PPUSH
29010: LD_VAR 0 3
29014: PPUSH
29015: CALL_OW 235
29019: GO 28993
29021: POP
29022: POP
// end ;
29023: PPOPN 3
29025: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29026: LD_EXP 51
29030: PUSH
29031: LD_EXP 64
29035: AND
29036: IFFALSE 29155
29038: GO 29040
29040: DISABLE
29041: LD_INT 0
29043: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29044: LD_ADDR_VAR 0 1
29048: PUSH
29049: LD_INT 22
29051: PUSH
29052: LD_OWVAR 2
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 21
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: LD_INT 23
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: PPUSH
29093: CALL_OW 69
29097: PUSH
29098: FOR_IN
29099: IFFALSE 29153
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 257
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: LD_INT 4
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: IN
29129: IFFALSE 29151
// SetClass ( un , rand ( 1 , 4 ) ) ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_INT 1
29138: PPUSH
29139: LD_INT 4
29141: PPUSH
29142: CALL_OW 12
29146: PPUSH
29147: CALL_OW 336
29151: GO 29098
29153: POP
29154: POP
// end ;
29155: PPOPN 1
29157: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29158: LD_EXP 51
29162: PUSH
29163: LD_EXP 63
29167: AND
29168: IFFALSE 29247
29170: GO 29172
29172: DISABLE
29173: LD_INT 0
29175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29176: LD_ADDR_VAR 0 1
29180: PUSH
29181: LD_INT 22
29183: PUSH
29184: LD_OWVAR 2
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 21
29195: PUSH
29196: LD_INT 3
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PPUSH
29207: CALL_OW 69
29211: ST_TO_ADDR
// if not tmp then
29212: LD_VAR 0 1
29216: NOT
29217: IFFALSE 29221
// exit ;
29219: GO 29247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29221: LD_VAR 0 1
29225: PUSH
29226: LD_INT 1
29228: PPUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 12
29238: ARRAY
29239: PPUSH
29240: LD_INT 100
29242: PPUSH
29243: CALL_OW 234
// end ;
29247: PPOPN 1
29249: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29250: LD_EXP 51
29254: PUSH
29255: LD_EXP 65
29259: AND
29260: IFFALSE 29358
29262: GO 29264
29264: DISABLE
29265: LD_INT 0
29267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29268: LD_ADDR_VAR 0 1
29272: PUSH
29273: LD_INT 22
29275: PUSH
29276: LD_OWVAR 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 21
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 69
29303: ST_TO_ADDR
// if not tmp then
29304: LD_VAR 0 1
29308: NOT
29309: IFFALSE 29313
// exit ;
29311: GO 29358
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29313: LD_VAR 0 1
29317: PUSH
29318: LD_INT 1
29320: PPUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 12
29330: ARRAY
29331: PPUSH
29332: LD_INT 1
29334: PPUSH
29335: LD_INT 4
29337: PPUSH
29338: CALL_OW 12
29342: PPUSH
29343: LD_INT 3000
29345: PPUSH
29346: LD_INT 9000
29348: PPUSH
29349: CALL_OW 12
29353: PPUSH
29354: CALL_OW 492
// end ;
29358: PPOPN 1
29360: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29361: LD_EXP 51
29365: PUSH
29366: LD_EXP 66
29370: AND
29371: IFFALSE 29391
29373: GO 29375
29375: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29376: LD_INT 1
29378: PPUSH
29379: LD_OWVAR 2
29383: PPUSH
29384: LD_INT 0
29386: PPUSH
29387: CALL_OW 324
29391: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29392: LD_EXP 51
29396: PUSH
29397: LD_EXP 67
29401: AND
29402: IFFALSE 29485
29404: GO 29406
29406: DISABLE
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29411: LD_ADDR_VAR 0 2
29415: PUSH
29416: LD_INT 22
29418: PUSH
29419: LD_OWVAR 2
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 21
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 69
29446: ST_TO_ADDR
// if not tmp then
29447: LD_VAR 0 2
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29485
// for i in tmp do
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: LD_VAR 0 2
29465: PUSH
29466: FOR_IN
29467: IFFALSE 29483
// SetBLevel ( i , 10 ) ;
29469: LD_VAR 0 1
29473: PPUSH
29474: LD_INT 10
29476: PPUSH
29477: CALL_OW 241
29481: GO 29466
29483: POP
29484: POP
// end ;
29485: PPOPN 2
29487: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29488: LD_EXP 51
29492: PUSH
29493: LD_EXP 68
29497: AND
29498: IFFALSE 29609
29500: GO 29502
29502: DISABLE
29503: LD_INT 0
29505: PPUSH
29506: PPUSH
29507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 22
29515: PUSH
29516: LD_OWVAR 2
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 25
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 69
29543: ST_TO_ADDR
// if not tmp then
29544: LD_VAR 0 3
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 29609
// un := tmp [ rand ( 1 , tmp ) ] ;
29553: LD_ADDR_VAR 0 2
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_INT 1
29565: PPUSH
29566: LD_VAR 0 3
29570: PPUSH
29571: CALL_OW 12
29575: ARRAY
29576: ST_TO_ADDR
// if Crawls ( un ) then
29577: LD_VAR 0 2
29581: PPUSH
29582: CALL_OW 318
29586: IFFALSE 29597
// ComWalk ( un ) ;
29588: LD_VAR 0 2
29592: PPUSH
29593: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29597: LD_VAR 0 2
29601: PPUSH
29602: LD_INT 5
29604: PPUSH
29605: CALL_OW 336
// end ;
29609: PPOPN 3
29611: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29612: LD_EXP 51
29616: PUSH
29617: LD_EXP 69
29621: AND
29622: PUSH
29623: LD_OWVAR 67
29627: PUSH
29628: LD_INT 4
29630: LESS
29631: AND
29632: IFFALSE 29651
29634: GO 29636
29636: DISABLE
// begin Difficulty := Difficulty + 1 ;
29637: LD_ADDR_OWVAR 67
29641: PUSH
29642: LD_OWVAR 67
29646: PUSH
29647: LD_INT 1
29649: PLUS
29650: ST_TO_ADDR
// end ;
29651: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29652: LD_EXP 51
29656: PUSH
29657: LD_EXP 70
29661: AND
29662: IFFALSE 29765
29664: GO 29666
29666: DISABLE
29667: LD_INT 0
29669: PPUSH
// begin for i := 1 to 5 do
29670: LD_ADDR_VAR 0 1
29674: PUSH
29675: DOUBLE
29676: LD_INT 1
29678: DEC
29679: ST_TO_ADDR
29680: LD_INT 5
29682: PUSH
29683: FOR_TO
29684: IFFALSE 29763
// begin uc_nation := nation_nature ;
29686: LD_ADDR_OWVAR 21
29690: PUSH
29691: LD_INT 0
29693: ST_TO_ADDR
// uc_side := 0 ;
29694: LD_ADDR_OWVAR 20
29698: PUSH
29699: LD_INT 0
29701: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29702: LD_ADDR_OWVAR 29
29706: PUSH
29707: LD_INT 12
29709: PUSH
29710: LD_INT 12
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// hc_agressivity := 20 ;
29717: LD_ADDR_OWVAR 35
29721: PUSH
29722: LD_INT 20
29724: ST_TO_ADDR
// hc_class := class_tiger ;
29725: LD_ADDR_OWVAR 28
29729: PUSH
29730: LD_INT 14
29732: ST_TO_ADDR
// hc_gallery :=  ;
29733: LD_ADDR_OWVAR 33
29737: PUSH
29738: LD_STRING 
29740: ST_TO_ADDR
// hc_name :=  ;
29741: LD_ADDR_OWVAR 26
29745: PUSH
29746: LD_STRING 
29748: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29749: CALL_OW 44
29753: PPUSH
29754: LD_INT 0
29756: PPUSH
29757: CALL_OW 51
// end ;
29761: GO 29683
29763: POP
29764: POP
// end ;
29765: PPOPN 1
29767: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29768: LD_EXP 51
29772: PUSH
29773: LD_EXP 71
29777: AND
29778: IFFALSE 29787
29780: GO 29782
29782: DISABLE
// StreamSibBomb ;
29783: CALL 29788 0 0
29787: END
// export function StreamSibBomb ; var i , x , y ; begin
29788: LD_INT 0
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
// result := false ;
29794: LD_ADDR_VAR 0 1
29798: PUSH
29799: LD_INT 0
29801: ST_TO_ADDR
// for i := 1 to 16 do
29802: LD_ADDR_VAR 0 2
29806: PUSH
29807: DOUBLE
29808: LD_INT 1
29810: DEC
29811: ST_TO_ADDR
29812: LD_INT 16
29814: PUSH
29815: FOR_TO
29816: IFFALSE 30015
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29818: LD_ADDR_VAR 0 3
29822: PUSH
29823: LD_INT 10
29825: PUSH
29826: LD_INT 20
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: LD_INT 40
29834: PUSH
29835: LD_INT 50
29837: PUSH
29838: LD_INT 60
29840: PUSH
29841: LD_INT 70
29843: PUSH
29844: LD_INT 80
29846: PUSH
29847: LD_INT 90
29849: PUSH
29850: LD_INT 100
29852: PUSH
29853: LD_INT 110
29855: PUSH
29856: LD_INT 120
29858: PUSH
29859: LD_INT 130
29861: PUSH
29862: LD_INT 140
29864: PUSH
29865: LD_INT 150
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PPUSH
29888: LD_INT 15
29890: PPUSH
29891: CALL_OW 12
29895: ARRAY
29896: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29897: LD_ADDR_VAR 0 4
29901: PUSH
29902: LD_INT 10
29904: PUSH
29905: LD_INT 20
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 40
29913: PUSH
29914: LD_INT 50
29916: PUSH
29917: LD_INT 60
29919: PUSH
29920: LD_INT 70
29922: PUSH
29923: LD_INT 80
29925: PUSH
29926: LD_INT 90
29928: PUSH
29929: LD_INT 100
29931: PUSH
29932: LD_INT 110
29934: PUSH
29935: LD_INT 120
29937: PUSH
29938: LD_INT 130
29940: PUSH
29941: LD_INT 140
29943: PUSH
29944: LD_INT 150
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PPUSH
29967: LD_INT 15
29969: PPUSH
29970: CALL_OW 12
29974: ARRAY
29975: ST_TO_ADDR
// if ValidHex ( x , y ) then
29976: LD_VAR 0 3
29980: PPUSH
29981: LD_VAR 0 4
29985: PPUSH
29986: CALL_OW 488
29990: IFFALSE 30013
// begin result := [ x , y ] ;
29992: LD_ADDR_VAR 0 1
29996: PUSH
29997: LD_VAR 0 3
30001: PUSH
30002: LD_VAR 0 4
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// break ;
30011: GO 30015
// end ; end ;
30013: GO 29815
30015: POP
30016: POP
// if result then
30017: LD_VAR 0 1
30021: IFFALSE 30081
// begin ToLua ( playSibBomb() ) ;
30023: LD_STRING playSibBomb()
30025: PPUSH
30026: CALL_OW 559
// wait ( 0 0$14 ) ;
30030: LD_INT 490
30032: PPUSH
30033: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30037: LD_VAR 0 1
30041: PUSH
30042: LD_INT 1
30044: ARRAY
30045: PPUSH
30046: LD_VAR 0 1
30050: PUSH
30051: LD_INT 2
30053: ARRAY
30054: PPUSH
30055: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: PPUSH
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 2
30075: ARRAY
30076: PPUSH
30077: CALL_OW 429
// end ; end ;
30081: LD_VAR 0 1
30085: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30086: LD_EXP 51
30090: PUSH
30091: LD_EXP 73
30095: AND
30096: IFFALSE 30108
30098: GO 30100
30100: DISABLE
// YouLost (  ) ;
30101: LD_STRING 
30103: PPUSH
30104: CALL_OW 104
30108: END
// every 0 0$1 trigger StreamModeActive and sFog do
30109: LD_EXP 51
30113: PUSH
30114: LD_EXP 72
30118: AND
30119: IFFALSE 30133
30121: GO 30123
30123: DISABLE
// FogOff ( your_side ) ;
30124: LD_OWVAR 2
30128: PPUSH
30129: CALL_OW 344
30133: END
// every 0 0$1 trigger StreamModeActive and sSun do
30134: LD_EXP 51
30138: PUSH
30139: LD_EXP 74
30143: AND
30144: IFFALSE 30172
30146: GO 30148
30148: DISABLE
// begin solar_recharge_percent := 0 ;
30149: LD_ADDR_OWVAR 79
30153: PUSH
30154: LD_INT 0
30156: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30157: LD_INT 10500
30159: PPUSH
30160: CALL_OW 67
// solar_recharge_percent := 100 ;
30164: LD_ADDR_OWVAR 79
30168: PUSH
30169: LD_INT 100
30171: ST_TO_ADDR
// end ;
30172: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30173: LD_EXP 51
30177: PUSH
30178: LD_EXP 75
30182: AND
30183: IFFALSE 30422
30185: GO 30187
30187: DISABLE
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
30192: PPUSH
// begin tmp := [ ] ;
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: EMPTY
30199: ST_TO_ADDR
// for i := 1 to 6 do
30200: LD_ADDR_VAR 0 1
30204: PUSH
30205: DOUBLE
30206: LD_INT 1
30208: DEC
30209: ST_TO_ADDR
30210: LD_INT 6
30212: PUSH
30213: FOR_TO
30214: IFFALSE 30319
// begin uc_nation := nation_nature ;
30216: LD_ADDR_OWVAR 21
30220: PUSH
30221: LD_INT 0
30223: ST_TO_ADDR
// uc_side := 0 ;
30224: LD_ADDR_OWVAR 20
30228: PUSH
30229: LD_INT 0
30231: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30232: LD_ADDR_OWVAR 29
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: LD_INT 12
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: ST_TO_ADDR
// hc_agressivity := 20 ;
30247: LD_ADDR_OWVAR 35
30251: PUSH
30252: LD_INT 20
30254: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30255: LD_ADDR_OWVAR 28
30259: PUSH
30260: LD_INT 17
30262: ST_TO_ADDR
// hc_gallery :=  ;
30263: LD_ADDR_OWVAR 33
30267: PUSH
30268: LD_STRING 
30270: ST_TO_ADDR
// hc_name :=  ;
30271: LD_ADDR_OWVAR 26
30275: PUSH
30276: LD_STRING 
30278: ST_TO_ADDR
// un := CreateHuman ;
30279: LD_ADDR_VAR 0 2
30283: PUSH
30284: CALL_OW 44
30288: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30289: LD_VAR 0 2
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL_OW 51
// tmp := tmp ^ un ;
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_VAR 0 3
30310: PUSH
30311: LD_VAR 0 2
30315: ADD
30316: ST_TO_ADDR
// end ;
30317: GO 30213
30319: POP
30320: POP
// repeat wait ( 0 0$1 ) ;
30321: LD_INT 35
30323: PPUSH
30324: CALL_OW 67
// for un in tmp do
30328: LD_ADDR_VAR 0 2
30332: PUSH
30333: LD_VAR 0 3
30337: PUSH
30338: FOR_IN
30339: IFFALSE 30413
// begin if IsDead ( un ) then
30341: LD_VAR 0 2
30345: PPUSH
30346: CALL_OW 301
30350: IFFALSE 30370
// begin tmp := tmp diff un ;
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_VAR 0 3
30361: PUSH
30362: LD_VAR 0 2
30366: DIFF
30367: ST_TO_ADDR
// continue ;
30368: GO 30338
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30370: LD_VAR 0 2
30374: PPUSH
30375: LD_INT 3
30377: PUSH
30378: LD_INT 22
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: PPUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: CALL_OW 74
30406: PPUSH
30407: CALL_OW 115
// end ;
30411: GO 30338
30413: POP
30414: POP
// until not tmp ;
30415: LD_VAR 0 3
30419: NOT
30420: IFFALSE 30321
// end ;
30422: PPOPN 3
30424: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30425: LD_EXP 51
30429: PUSH
30430: LD_EXP 76
30434: AND
30435: IFFALSE 30489
30437: GO 30439
30439: DISABLE
// begin ToLua ( displayTroll(); ) ;
30440: LD_STRING displayTroll();
30442: PPUSH
30443: CALL_OW 559
// wait ( 3 3$00 ) ;
30447: LD_INT 6300
30449: PPUSH
30450: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30454: LD_STRING hideTroll();
30456: PPUSH
30457: CALL_OW 559
// wait ( 1 1$00 ) ;
30461: LD_INT 2100
30463: PPUSH
30464: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30468: LD_STRING displayTroll();
30470: PPUSH
30471: CALL_OW 559
// wait ( 1 1$00 ) ;
30475: LD_INT 2100
30477: PPUSH
30478: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30482: LD_STRING hideTroll();
30484: PPUSH
30485: CALL_OW 559
// end ;
30489: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30490: LD_EXP 51
30494: PUSH
30495: LD_EXP 77
30499: AND
30500: IFFALSE 30563
30502: GO 30504
30504: DISABLE
30505: LD_INT 0
30507: PPUSH
// begin p := 0 ;
30508: LD_ADDR_VAR 0 1
30512: PUSH
30513: LD_INT 0
30515: ST_TO_ADDR
// repeat game_speed := 1 ;
30516: LD_ADDR_OWVAR 65
30520: PUSH
30521: LD_INT 1
30523: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30524: LD_INT 35
30526: PPUSH
30527: CALL_OW 67
// p := p + 1 ;
30531: LD_ADDR_VAR 0 1
30535: PUSH
30536: LD_VAR 0 1
30540: PUSH
30541: LD_INT 1
30543: PLUS
30544: ST_TO_ADDR
// until p >= 60 ;
30545: LD_VAR 0 1
30549: PUSH
30550: LD_INT 60
30552: GREATEREQUAL
30553: IFFALSE 30516
// game_speed := 4 ;
30555: LD_ADDR_OWVAR 65
30559: PUSH
30560: LD_INT 4
30562: ST_TO_ADDR
// end ;
30563: PPOPN 1
30565: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30566: LD_EXP 51
30570: PUSH
30571: LD_EXP 78
30575: AND
30576: IFFALSE 30722
30578: GO 30580
30580: DISABLE
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30585: LD_ADDR_VAR 0 1
30589: PUSH
30590: LD_INT 22
30592: PUSH
30593: LD_OWVAR 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: LD_INT 30
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 30
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PPUSH
30634: CALL_OW 69
30638: ST_TO_ADDR
// if not depot then
30639: LD_VAR 0 1
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 30722
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30648: LD_ADDR_VAR 0 2
30652: PUSH
30653: LD_VAR 0 1
30657: PUSH
30658: LD_INT 1
30660: PPUSH
30661: LD_VAR 0 1
30665: PPUSH
30666: CALL_OW 12
30670: ARRAY
30671: PPUSH
30672: CALL_OW 274
30676: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30677: LD_VAR 0 2
30681: PPUSH
30682: LD_INT 1
30684: PPUSH
30685: LD_INT 0
30687: PPUSH
30688: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30692: LD_VAR 0 2
30696: PPUSH
30697: LD_INT 2
30699: PPUSH
30700: LD_INT 0
30702: PPUSH
30703: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30707: LD_VAR 0 2
30711: PPUSH
30712: LD_INT 3
30714: PPUSH
30715: LD_INT 0
30717: PPUSH
30718: CALL_OW 277
// end ;
30722: PPOPN 2
30724: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30725: LD_EXP 51
30729: PUSH
30730: LD_EXP 79
30734: AND
30735: IFFALSE 30832
30737: GO 30739
30739: DISABLE
30740: LD_INT 0
30742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30743: LD_ADDR_VAR 0 1
30747: PUSH
30748: LD_INT 22
30750: PUSH
30751: LD_OWVAR 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 21
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: LD_INT 23
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: PPUSH
30792: CALL_OW 69
30796: ST_TO_ADDR
// if not tmp then
30797: LD_VAR 0 1
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 30832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30806: LD_VAR 0 1
30810: PUSH
30811: LD_INT 1
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 12
30823: ARRAY
30824: PPUSH
30825: LD_INT 200
30827: PPUSH
30828: CALL_OW 234
// end ;
30832: PPOPN 1
30834: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30835: LD_EXP 51
30839: PUSH
30840: LD_EXP 80
30844: AND
30845: IFFALSE 30924
30847: GO 30849
30849: DISABLE
30850: LD_INT 0
30852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30853: LD_ADDR_VAR 0 1
30857: PUSH
30858: LD_INT 22
30860: PUSH
30861: LD_OWVAR 2
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 21
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PPUSH
30884: CALL_OW 69
30888: ST_TO_ADDR
// if not tmp then
30889: LD_VAR 0 1
30893: NOT
30894: IFFALSE 30898
// exit ;
30896: GO 30924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30898: LD_VAR 0 1
30902: PUSH
30903: LD_INT 1
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 12
30915: ARRAY
30916: PPUSH
30917: LD_INT 60
30919: PPUSH
30920: CALL_OW 234
// end ;
30924: PPOPN 1
30926: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30927: LD_EXP 51
30931: PUSH
30932: LD_EXP 81
30936: AND
30937: IFFALSE 31036
30939: GO 30941
30941: DISABLE
30942: LD_INT 0
30944: PPUSH
30945: PPUSH
// begin enable ;
30946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: LD_INT 22
30954: PUSH
30955: LD_OWVAR 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 61
30966: PUSH
30967: EMPTY
30968: LIST
30969: PUSH
30970: LD_INT 33
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 69
30989: ST_TO_ADDR
// if not tmp then
30990: LD_VAR 0 1
30994: NOT
30995: IFFALSE 30999
// exit ;
30997: GO 31036
// for i in tmp do
30999: LD_ADDR_VAR 0 2
31003: PUSH
31004: LD_VAR 0 1
31008: PUSH
31009: FOR_IN
31010: IFFALSE 31034
// if IsControledBy ( i ) then
31012: LD_VAR 0 2
31016: PPUSH
31017: CALL_OW 312
31021: IFFALSE 31032
// ComUnlink ( i ) ;
31023: LD_VAR 0 2
31027: PPUSH
31028: CALL_OW 136
31032: GO 31009
31034: POP
31035: POP
// end ;
31036: PPOPN 2
31038: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31039: LD_EXP 51
31043: PUSH
31044: LD_EXP 82
31048: AND
31049: IFFALSE 31189
31051: GO 31053
31053: DISABLE
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
// begin ToLua ( displayPowell(); ) ;
31058: LD_STRING displayPowell();
31060: PPUSH
31061: CALL_OW 559
// uc_side := 0 ;
31065: LD_ADDR_OWVAR 20
31069: PUSH
31070: LD_INT 0
31072: ST_TO_ADDR
// uc_nation := 2 ;
31073: LD_ADDR_OWVAR 21
31077: PUSH
31078: LD_INT 2
31080: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31081: LD_ADDR_OWVAR 37
31085: PUSH
31086: LD_INT 14
31088: ST_TO_ADDR
// vc_engine := engine_siberite ;
31089: LD_ADDR_OWVAR 39
31093: PUSH
31094: LD_INT 3
31096: ST_TO_ADDR
// vc_control := control_apeman ;
31097: LD_ADDR_OWVAR 38
31101: PUSH
31102: LD_INT 5
31104: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31105: LD_ADDR_OWVAR 40
31109: PUSH
31110: LD_INT 29
31112: ST_TO_ADDR
// un := CreateVehicle ;
31113: LD_ADDR_VAR 0 2
31117: PUSH
31118: CALL_OW 45
31122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31123: LD_VAR 0 2
31127: PPUSH
31128: LD_INT 1
31130: PPUSH
31131: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31135: LD_INT 35
31137: PPUSH
31138: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31142: LD_VAR 0 2
31146: PPUSH
31147: LD_INT 22
31149: PUSH
31150: LD_OWVAR 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PPUSH
31159: CALL_OW 69
31163: PPUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: CALL_OW 74
31173: PPUSH
31174: CALL_OW 115
// until IsDead ( un ) ;
31178: LD_VAR 0 2
31182: PPUSH
31183: CALL_OW 301
31187: IFFALSE 31135
// end ;
31189: PPOPN 2
31191: END
// every 0 0$1 trigger StreamModeActive and sStu do
31192: LD_EXP 51
31196: PUSH
31197: LD_EXP 90
31201: AND
31202: IFFALSE 31218
31204: GO 31206
31206: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31207: LD_STRING displayStucuk();
31209: PPUSH
31210: CALL_OW 559
// ResetFog ;
31214: CALL_OW 335
// end ;
31218: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31219: LD_EXP 51
31223: PUSH
31224: LD_EXP 83
31228: AND
31229: IFFALSE 31370
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31238: LD_ADDR_VAR 0 2
31242: PUSH
31243: LD_INT 22
31245: PUSH
31246: LD_OWVAR 2
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 21
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 69
31273: ST_TO_ADDR
// if not tmp then
31274: LD_VAR 0 2
31278: NOT
31279: IFFALSE 31283
// exit ;
31281: GO 31370
// un := tmp [ rand ( 1 , tmp ) ] ;
31283: LD_ADDR_VAR 0 1
31287: PUSH
31288: LD_VAR 0 2
31292: PUSH
31293: LD_INT 1
31295: PPUSH
31296: LD_VAR 0 2
31300: PPUSH
31301: CALL_OW 12
31305: ARRAY
31306: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31307: LD_VAR 0 1
31311: PPUSH
31312: LD_INT 0
31314: PPUSH
31315: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31319: LD_VAR 0 1
31323: PPUSH
31324: LD_OWVAR 3
31328: PUSH
31329: LD_VAR 0 1
31333: DIFF
31334: PPUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 74
31344: PPUSH
31345: CALL_OW 115
// wait ( 0 0$20 ) ;
31349: LD_INT 700
31351: PPUSH
31352: CALL_OW 67
// SetSide ( un , your_side ) ;
31356: LD_VAR 0 1
31360: PPUSH
31361: LD_OWVAR 2
31365: PPUSH
31366: CALL_OW 235
// end ;
31370: PPOPN 2
31372: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31373: LD_EXP 51
31377: PUSH
31378: LD_EXP 84
31382: AND
31383: IFFALSE 31489
31385: GO 31387
31387: DISABLE
31388: LD_INT 0
31390: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31391: LD_ADDR_VAR 0 1
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 30
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 30
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PPUSH
31440: CALL_OW 69
31444: ST_TO_ADDR
// if not depot then
31445: LD_VAR 0 1
31449: NOT
31450: IFFALSE 31454
// exit ;
31452: GO 31489
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31454: LD_VAR 0 1
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: PPUSH
31463: CALL_OW 250
31467: PPUSH
31468: LD_VAR 0 1
31472: PUSH
31473: LD_INT 1
31475: ARRAY
31476: PPUSH
31477: CALL_OW 251
31481: PPUSH
31482: LD_INT 70
31484: PPUSH
31485: CALL_OW 495
// end ;
31489: PPOPN 1
31491: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31492: LD_EXP 51
31496: PUSH
31497: LD_EXP 85
31501: AND
31502: IFFALSE 31713
31504: GO 31506
31506: DISABLE
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: LD_INT 22
31521: PUSH
31522: LD_OWVAR 2
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 21
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PPUSH
31545: CALL_OW 69
31549: ST_TO_ADDR
// if not tmp then
31550: LD_VAR 0 5
31554: NOT
31555: IFFALSE 31559
// exit ;
31557: GO 31713
// for i in tmp do
31559: LD_ADDR_VAR 0 1
31563: PUSH
31564: LD_VAR 0 5
31568: PUSH
31569: FOR_IN
31570: IFFALSE 31711
// begin d := rand ( 0 , 5 ) ;
31572: LD_ADDR_VAR 0 4
31576: PUSH
31577: LD_INT 0
31579: PPUSH
31580: LD_INT 5
31582: PPUSH
31583: CALL_OW 12
31587: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31588: LD_ADDR_VAR 0 2
31592: PUSH
31593: LD_VAR 0 1
31597: PPUSH
31598: CALL_OW 250
31602: PPUSH
31603: LD_VAR 0 4
31607: PPUSH
31608: LD_INT 3
31610: PPUSH
31611: LD_INT 12
31613: PPUSH
31614: CALL_OW 12
31618: PPUSH
31619: CALL_OW 272
31623: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31624: LD_ADDR_VAR 0 3
31628: PUSH
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 251
31638: PPUSH
31639: LD_VAR 0 4
31643: PPUSH
31644: LD_INT 3
31646: PPUSH
31647: LD_INT 12
31649: PPUSH
31650: CALL_OW 12
31654: PPUSH
31655: CALL_OW 273
31659: ST_TO_ADDR
// if ValidHex ( x , y ) then
31660: LD_VAR 0 2
31664: PPUSH
31665: LD_VAR 0 3
31669: PPUSH
31670: CALL_OW 488
31674: IFFALSE 31709
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31676: LD_VAR 0 1
31680: PPUSH
31681: LD_VAR 0 2
31685: PPUSH
31686: LD_VAR 0 3
31690: PPUSH
31691: LD_INT 3
31693: PPUSH
31694: LD_INT 6
31696: PPUSH
31697: CALL_OW 12
31701: PPUSH
31702: LD_INT 1
31704: PPUSH
31705: CALL_OW 483
// end ;
31709: GO 31569
31711: POP
31712: POP
// end ;
31713: PPOPN 5
31715: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31716: LD_EXP 51
31720: PUSH
31721: LD_EXP 86
31725: AND
31726: IFFALSE 31820
31728: GO 31730
31730: DISABLE
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31735: LD_ADDR_VAR 0 2
31739: PUSH
31740: LD_INT 22
31742: PUSH
31743: LD_OWVAR 2
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 32
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 21
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: PPUSH
31777: CALL_OW 69
31781: ST_TO_ADDR
// if not tmp then
31782: LD_VAR 0 2
31786: NOT
31787: IFFALSE 31791
// exit ;
31789: GO 31820
// for i in tmp do
31791: LD_ADDR_VAR 0 1
31795: PUSH
31796: LD_VAR 0 2
31800: PUSH
31801: FOR_IN
31802: IFFALSE 31818
// SetFuel ( i , 0 ) ;
31804: LD_VAR 0 1
31808: PPUSH
31809: LD_INT 0
31811: PPUSH
31812: CALL_OW 240
31816: GO 31801
31818: POP
31819: POP
// end ;
31820: PPOPN 2
31822: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31823: LD_EXP 51
31827: PUSH
31828: LD_EXP 87
31832: AND
31833: IFFALSE 31899
31835: GO 31837
31837: DISABLE
31838: LD_INT 0
31840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31841: LD_ADDR_VAR 0 1
31845: PUSH
31846: LD_INT 22
31848: PUSH
31849: LD_OWVAR 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 30
31860: PUSH
31861: LD_INT 29
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PPUSH
31872: CALL_OW 69
31876: ST_TO_ADDR
// if not tmp then
31877: LD_VAR 0 1
31881: NOT
31882: IFFALSE 31886
// exit ;
31884: GO 31899
// DestroyUnit ( tmp [ 1 ] ) ;
31886: LD_VAR 0 1
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: CALL_OW 65
// end ;
31899: PPOPN 1
31901: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31902: LD_EXP 51
31906: PUSH
31907: LD_EXP 89
31911: AND
31912: IFFALSE 32041
31914: GO 31916
31916: DISABLE
31917: LD_INT 0
31919: PPUSH
// begin uc_side := 0 ;
31920: LD_ADDR_OWVAR 20
31924: PUSH
31925: LD_INT 0
31927: ST_TO_ADDR
// uc_nation := nation_arabian ;
31928: LD_ADDR_OWVAR 21
31932: PUSH
31933: LD_INT 2
31935: ST_TO_ADDR
// hc_gallery :=  ;
31936: LD_ADDR_OWVAR 33
31940: PUSH
31941: LD_STRING 
31943: ST_TO_ADDR
// hc_name :=  ;
31944: LD_ADDR_OWVAR 26
31948: PUSH
31949: LD_STRING 
31951: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31952: LD_INT 1
31954: PPUSH
31955: LD_INT 11
31957: PPUSH
31958: LD_INT 10
31960: PPUSH
31961: CALL_OW 380
// un := CreateHuman ;
31965: LD_ADDR_VAR 0 1
31969: PUSH
31970: CALL_OW 44
31974: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31975: LD_VAR 0 1
31979: PPUSH
31980: LD_INT 1
31982: PPUSH
31983: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31987: LD_INT 35
31989: PPUSH
31990: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31994: LD_VAR 0 1
31998: PPUSH
31999: LD_INT 22
32001: PUSH
32002: LD_OWVAR 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 69
32015: PPUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 74
32025: PPUSH
32026: CALL_OW 115
// until IsDead ( un ) ;
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 301
32039: IFFALSE 31987
// end ;
32041: PPOPN 1
32043: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32044: LD_EXP 51
32048: PUSH
32049: LD_EXP 91
32053: AND
32054: IFFALSE 32066
32056: GO 32058
32058: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32059: LD_STRING earthquake(getX(game), 0, 32)
32061: PPUSH
32062: CALL_OW 559
32066: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32067: LD_EXP 51
32071: PUSH
32072: LD_EXP 92
32076: AND
32077: IFFALSE 32168
32079: GO 32081
32081: DISABLE
32082: LD_INT 0
32084: PPUSH
// begin enable ;
32085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32086: LD_ADDR_VAR 0 1
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 21
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 33
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: PPUSH
32128: CALL_OW 69
32132: ST_TO_ADDR
// if not tmp then
32133: LD_VAR 0 1
32137: NOT
32138: IFFALSE 32142
// exit ;
32140: GO 32168
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32142: LD_VAR 0 1
32146: PUSH
32147: LD_INT 1
32149: PPUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: CALL_OW 12
32159: ARRAY
32160: PPUSH
32161: LD_INT 1
32163: PPUSH
32164: CALL_OW 234
// end ;
32168: PPOPN 1
32170: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32171: LD_EXP 51
32175: PUSH
32176: LD_EXP 93
32180: AND
32181: IFFALSE 32322
32183: GO 32185
32185: DISABLE
32186: LD_INT 0
32188: PPUSH
32189: PPUSH
32190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_INT 22
32198: PUSH
32199: LD_OWVAR 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 25
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PPUSH
32222: CALL_OW 69
32226: ST_TO_ADDR
// if not tmp then
32227: LD_VAR 0 3
32231: NOT
32232: IFFALSE 32236
// exit ;
32234: GO 32322
// un := tmp [ rand ( 1 , tmp ) ] ;
32236: LD_ADDR_VAR 0 2
32240: PUSH
32241: LD_VAR 0 3
32245: PUSH
32246: LD_INT 1
32248: PPUSH
32249: LD_VAR 0 3
32253: PPUSH
32254: CALL_OW 12
32258: ARRAY
32259: ST_TO_ADDR
// if Crawls ( un ) then
32260: LD_VAR 0 2
32264: PPUSH
32265: CALL_OW 318
32269: IFFALSE 32280
// ComWalk ( un ) ;
32271: LD_VAR 0 2
32275: PPUSH
32276: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32280: LD_VAR 0 2
32284: PPUSH
32285: LD_INT 9
32287: PPUSH
32288: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32292: LD_INT 28
32294: PPUSH
32295: LD_OWVAR 2
32299: PPUSH
32300: LD_INT 2
32302: PPUSH
32303: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32307: LD_INT 29
32309: PPUSH
32310: LD_OWVAR 2
32314: PPUSH
32315: LD_INT 2
32317: PPUSH
32318: CALL_OW 322
// end ;
32322: PPOPN 3
32324: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32325: LD_EXP 51
32329: PUSH
32330: LD_EXP 94
32334: AND
32335: IFFALSE 32446
32337: GO 32339
32339: DISABLE
32340: LD_INT 0
32342: PPUSH
32343: PPUSH
32344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 22
32352: PUSH
32353: LD_OWVAR 2
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 25
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PPUSH
32376: CALL_OW 69
32380: ST_TO_ADDR
// if not tmp then
32381: LD_VAR 0 3
32385: NOT
32386: IFFALSE 32390
// exit ;
32388: GO 32446
// un := tmp [ rand ( 1 , tmp ) ] ;
32390: LD_ADDR_VAR 0 2
32394: PUSH
32395: LD_VAR 0 3
32399: PUSH
32400: LD_INT 1
32402: PPUSH
32403: LD_VAR 0 3
32407: PPUSH
32408: CALL_OW 12
32412: ARRAY
32413: ST_TO_ADDR
// if Crawls ( un ) then
32414: LD_VAR 0 2
32418: PPUSH
32419: CALL_OW 318
32423: IFFALSE 32434
// ComWalk ( un ) ;
32425: LD_VAR 0 2
32429: PPUSH
32430: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32434: LD_VAR 0 2
32438: PPUSH
32439: LD_INT 8
32441: PPUSH
32442: CALL_OW 336
// end ;
32446: PPOPN 3
32448: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32449: LD_EXP 51
32453: PUSH
32454: LD_EXP 95
32458: AND
32459: IFFALSE 32603
32461: GO 32463
32463: DISABLE
32464: LD_INT 0
32466: PPUSH
32467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32468: LD_ADDR_VAR 0 2
32472: PUSH
32473: LD_INT 22
32475: PUSH
32476: LD_OWVAR 2
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 21
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 34
32500: PUSH
32501: LD_INT 12
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 34
32510: PUSH
32511: LD_INT 51
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 34
32520: PUSH
32521: LD_INT 32
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: PPUSH
32539: CALL_OW 69
32543: ST_TO_ADDR
// if not tmp then
32544: LD_VAR 0 2
32548: NOT
32549: IFFALSE 32553
// exit ;
32551: GO 32603
// for i in tmp do
32553: LD_ADDR_VAR 0 1
32557: PUSH
32558: LD_VAR 0 2
32562: PUSH
32563: FOR_IN
32564: IFFALSE 32601
// if GetCargo ( i , mat_artifact ) = 0 then
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_INT 4
32573: PPUSH
32574: CALL_OW 289
32578: PUSH
32579: LD_INT 0
32581: EQUAL
32582: IFFALSE 32599
// SetCargo ( i , mat_siberit , 100 ) ;
32584: LD_VAR 0 1
32588: PPUSH
32589: LD_INT 3
32591: PPUSH
32592: LD_INT 100
32594: PPUSH
32595: CALL_OW 290
32599: GO 32563
32601: POP
32602: POP
// end ;
32603: PPOPN 2
32605: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32606: LD_EXP 51
32610: PUSH
32611: LD_EXP 96
32615: AND
32616: IFFALSE 32799
32618: GO 32620
32620: DISABLE
32621: LD_INT 0
32623: PPUSH
32624: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32625: LD_ADDR_VAR 0 2
32629: PUSH
32630: LD_INT 22
32632: PUSH
32633: LD_OWVAR 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PPUSH
32642: CALL_OW 69
32646: ST_TO_ADDR
// if not tmp then
32647: LD_VAR 0 2
32651: NOT
32652: IFFALSE 32656
// exit ;
32654: GO 32799
// for i := 1 to 2 do
32656: LD_ADDR_VAR 0 1
32660: PUSH
32661: DOUBLE
32662: LD_INT 1
32664: DEC
32665: ST_TO_ADDR
32666: LD_INT 2
32668: PUSH
32669: FOR_TO
32670: IFFALSE 32797
// begin uc_side := your_side ;
32672: LD_ADDR_OWVAR 20
32676: PUSH
32677: LD_OWVAR 2
32681: ST_TO_ADDR
// uc_nation := nation_american ;
32682: LD_ADDR_OWVAR 21
32686: PUSH
32687: LD_INT 1
32689: ST_TO_ADDR
// vc_chassis := us_morphling ;
32690: LD_ADDR_OWVAR 37
32694: PUSH
32695: LD_INT 5
32697: ST_TO_ADDR
// vc_engine := engine_siberite ;
32698: LD_ADDR_OWVAR 39
32702: PUSH
32703: LD_INT 3
32705: ST_TO_ADDR
// vc_control := control_computer ;
32706: LD_ADDR_OWVAR 38
32710: PUSH
32711: LD_INT 3
32713: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32714: LD_ADDR_OWVAR 40
32718: PUSH
32719: LD_INT 10
32721: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32722: LD_VAR 0 2
32726: PUSH
32727: LD_INT 1
32729: ARRAY
32730: PPUSH
32731: CALL_OW 310
32735: NOT
32736: IFFALSE 32783
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32738: CALL_OW 45
32742: PPUSH
32743: LD_VAR 0 2
32747: PUSH
32748: LD_INT 1
32750: ARRAY
32751: PPUSH
32752: CALL_OW 250
32756: PPUSH
32757: LD_VAR 0 2
32761: PUSH
32762: LD_INT 1
32764: ARRAY
32765: PPUSH
32766: CALL_OW 251
32770: PPUSH
32771: LD_INT 12
32773: PPUSH
32774: LD_INT 1
32776: PPUSH
32777: CALL_OW 50
32781: GO 32795
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32783: CALL_OW 45
32787: PPUSH
32788: LD_INT 1
32790: PPUSH
32791: CALL_OW 51
// end ;
32795: GO 32669
32797: POP
32798: POP
// end ;
32799: PPOPN 2
32801: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32802: LD_EXP 51
32806: PUSH
32807: LD_EXP 97
32811: AND
32812: IFFALSE 33034
32814: GO 32816
32816: DISABLE
32817: LD_INT 0
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
32823: PPUSH
32824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32825: LD_ADDR_VAR 0 6
32829: PUSH
32830: LD_INT 22
32832: PUSH
32833: LD_OWVAR 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 21
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: LD_INT 23
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: PPUSH
32874: CALL_OW 69
32878: ST_TO_ADDR
// if not tmp then
32879: LD_VAR 0 6
32883: NOT
32884: IFFALSE 32888
// exit ;
32886: GO 33034
// s1 := rand ( 1 , 4 ) ;
32888: LD_ADDR_VAR 0 2
32892: PUSH
32893: LD_INT 1
32895: PPUSH
32896: LD_INT 4
32898: PPUSH
32899: CALL_OW 12
32903: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32904: LD_ADDR_VAR 0 4
32908: PUSH
32909: LD_VAR 0 6
32913: PUSH
32914: LD_INT 1
32916: ARRAY
32917: PPUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: CALL_OW 259
32927: ST_TO_ADDR
// if s1 = 1 then
32928: LD_VAR 0 2
32932: PUSH
32933: LD_INT 1
32935: EQUAL
32936: IFFALSE 32956
// s2 := rand ( 2 , 4 ) else
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_INT 2
32945: PPUSH
32946: LD_INT 4
32948: PPUSH
32949: CALL_OW 12
32953: ST_TO_ADDR
32954: GO 32964
// s2 := 1 ;
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_INT 1
32963: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32964: LD_ADDR_VAR 0 5
32968: PUSH
32969: LD_VAR 0 6
32973: PUSH
32974: LD_INT 1
32976: ARRAY
32977: PPUSH
32978: LD_VAR 0 3
32982: PPUSH
32983: CALL_OW 259
32987: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32988: LD_VAR 0 6
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: PPUSH
32997: LD_VAR 0 2
33001: PPUSH
33002: LD_VAR 0 5
33006: PPUSH
33007: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33011: LD_VAR 0 6
33015: PUSH
33016: LD_INT 1
33018: ARRAY
33019: PPUSH
33020: LD_VAR 0 3
33024: PPUSH
33025: LD_VAR 0 4
33029: PPUSH
33030: CALL_OW 237
// end ;
33034: PPOPN 6
33036: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33037: LD_EXP 51
33041: PUSH
33042: LD_EXP 98
33046: AND
33047: IFFALSE 33126
33049: GO 33051
33051: DISABLE
33052: LD_INT 0
33054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33055: LD_ADDR_VAR 0 1
33059: PUSH
33060: LD_INT 22
33062: PUSH
33063: LD_OWVAR 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 30
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PPUSH
33086: CALL_OW 69
33090: ST_TO_ADDR
// if not tmp then
33091: LD_VAR 0 1
33095: NOT
33096: IFFALSE 33100
// exit ;
33098: GO 33126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33100: LD_VAR 0 1
33104: PUSH
33105: LD_INT 1
33107: PPUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 12
33117: ARRAY
33118: PPUSH
33119: LD_INT 1
33121: PPUSH
33122: CALL_OW 234
// end ;
33126: PPOPN 1
33128: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33129: LD_EXP 51
33133: PUSH
33134: LD_EXP 99
33138: AND
33139: IFFALSE 33251
33141: GO 33143
33143: DISABLE
33144: LD_INT 0
33146: PPUSH
33147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33148: LD_ADDR_VAR 0 2
33152: PUSH
33153: LD_INT 22
33155: PUSH
33156: LD_OWVAR 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 30
33170: PUSH
33171: LD_INT 27
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 30
33180: PUSH
33181: LD_INT 26
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 30
33190: PUSH
33191: LD_INT 28
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PPUSH
33208: CALL_OW 69
33212: ST_TO_ADDR
// if not tmp then
33213: LD_VAR 0 2
33217: NOT
33218: IFFALSE 33222
// exit ;
33220: GO 33251
// for i in tmp do
33222: LD_ADDR_VAR 0 1
33226: PUSH
33227: LD_VAR 0 2
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33249
// SetLives ( i , 1 ) ;
33235: LD_VAR 0 1
33239: PPUSH
33240: LD_INT 1
33242: PPUSH
33243: CALL_OW 234
33247: GO 33232
33249: POP
33250: POP
// end ;
33251: PPOPN 2
33253: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33254: LD_EXP 51
33258: PUSH
33259: LD_EXP 100
33263: AND
33264: IFFALSE 33551
33266: GO 33268
33268: DISABLE
33269: LD_INT 0
33271: PPUSH
33272: PPUSH
33273: PPUSH
// begin i := rand ( 1 , 7 ) ;
33274: LD_ADDR_VAR 0 1
33278: PUSH
33279: LD_INT 1
33281: PPUSH
33282: LD_INT 7
33284: PPUSH
33285: CALL_OW 12
33289: ST_TO_ADDR
// case i of 1 :
33290: LD_VAR 0 1
33294: PUSH
33295: LD_INT 1
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33313
33303: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33304: LD_STRING earthquake(getX(game), 0, 32)
33306: PPUSH
33307: CALL_OW 559
33311: GO 33551
33313: LD_INT 2
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33335
33321: POP
// begin ToLua ( displayStucuk(); ) ;
33322: LD_STRING displayStucuk();
33324: PPUSH
33325: CALL_OW 559
// ResetFog ;
33329: CALL_OW 335
// end ; 3 :
33333: GO 33551
33335: LD_INT 3
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33447
33343: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33344: LD_ADDR_VAR 0 2
33348: PUSH
33349: LD_INT 22
33351: PUSH
33352: LD_OWVAR 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 25
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PPUSH
33375: CALL_OW 69
33379: ST_TO_ADDR
// if not tmp then
33380: LD_VAR 0 2
33384: NOT
33385: IFFALSE 33389
// exit ;
33387: GO 33551
// un := tmp [ rand ( 1 , tmp ) ] ;
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_VAR 0 2
33398: PUSH
33399: LD_INT 1
33401: PPUSH
33402: LD_VAR 0 2
33406: PPUSH
33407: CALL_OW 12
33411: ARRAY
33412: ST_TO_ADDR
// if Crawls ( un ) then
33413: LD_VAR 0 3
33417: PPUSH
33418: CALL_OW 318
33422: IFFALSE 33433
// ComWalk ( un ) ;
33424: LD_VAR 0 3
33428: PPUSH
33429: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33433: LD_VAR 0 3
33437: PPUSH
33438: LD_INT 8
33440: PPUSH
33441: CALL_OW 336
// end ; 4 :
33445: GO 33551
33447: LD_INT 4
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33529
33455: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_OWVAR 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 30
33475: PUSH
33476: LD_INT 29
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL_OW 69
33491: ST_TO_ADDR
// if not tmp then
33492: LD_VAR 0 2
33496: NOT
33497: IFFALSE 33501
// exit ;
33499: GO 33551
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33501: LD_VAR 0 2
33505: PUSH
33506: LD_INT 1
33508: ARRAY
33509: PPUSH
33510: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33514: LD_VAR 0 2
33518: PUSH
33519: LD_INT 1
33521: ARRAY
33522: PPUSH
33523: CALL_OW 65
// end ; 5 .. 7 :
33527: GO 33551
33529: LD_INT 5
33531: DOUBLE
33532: GREATEREQUAL
33533: IFFALSE 33541
33535: LD_INT 7
33537: DOUBLE
33538: LESSEQUAL
33539: IFTRUE 33543
33541: GO 33550
33543: POP
// StreamSibBomb ; end ;
33544: CALL 29788 0 0
33548: GO 33551
33550: POP
// end ;
33551: PPOPN 3
33553: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33554: LD_EXP 51
33558: PUSH
33559: LD_EXP 101
33563: AND
33564: IFFALSE 33720
33566: GO 33568
33568: DISABLE
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
33573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33574: LD_ADDR_VAR 0 2
33578: PUSH
33579: LD_INT 81
33581: PUSH
33582: LD_OWVAR 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 21
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 21
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PPUSH
33623: CALL_OW 69
33627: ST_TO_ADDR
// if not tmp then
33628: LD_VAR 0 2
33632: NOT
33633: IFFALSE 33637
// exit ;
33635: GO 33720
// p := 0 ;
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_INT 0
33644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33645: LD_INT 35
33647: PPUSH
33648: CALL_OW 67
// p := p + 1 ;
33652: LD_ADDR_VAR 0 3
33656: PUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_INT 1
33664: PLUS
33665: ST_TO_ADDR
// for i in tmp do
33666: LD_ADDR_VAR 0 1
33670: PUSH
33671: LD_VAR 0 2
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33708
// if GetLives ( i ) < 1000 then
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 256
33688: PUSH
33689: LD_INT 1000
33691: LESS
33692: IFFALSE 33706
// SetLives ( i , 1000 ) ;
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_INT 1000
33701: PPUSH
33702: CALL_OW 234
33706: GO 33676
33708: POP
33709: POP
// until p > 20 ;
33710: LD_VAR 0 3
33714: PUSH
33715: LD_INT 20
33717: GREATER
33718: IFFALSE 33645
// end ;
33720: PPOPN 3
33722: END
// every 0 0$1 trigger StreamModeActive and sTime do
33723: LD_EXP 51
33727: PUSH
33728: LD_EXP 102
33732: AND
33733: IFFALSE 33768
33735: GO 33737
33737: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33738: LD_INT 28
33740: PPUSH
33741: LD_OWVAR 2
33745: PPUSH
33746: LD_INT 2
33748: PPUSH
33749: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33753: LD_INT 30
33755: PPUSH
33756: LD_OWVAR 2
33760: PPUSH
33761: LD_INT 2
33763: PPUSH
33764: CALL_OW 322
// end ;
33768: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33769: LD_EXP 51
33773: PUSH
33774: LD_EXP 103
33778: AND
33779: IFFALSE 33900
33781: GO 33783
33783: DISABLE
33784: LD_INT 0
33786: PPUSH
33787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33788: LD_ADDR_VAR 0 2
33792: PUSH
33793: LD_INT 22
33795: PUSH
33796: LD_OWVAR 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 21
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: LD_INT 23
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: PPUSH
33837: CALL_OW 69
33841: ST_TO_ADDR
// if not tmp then
33842: LD_VAR 0 2
33846: NOT
33847: IFFALSE 33851
// exit ;
33849: GO 33900
// for i in tmp do
33851: LD_ADDR_VAR 0 1
33855: PUSH
33856: LD_VAR 0 2
33860: PUSH
33861: FOR_IN
33862: IFFALSE 33898
// begin if Crawls ( i ) then
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL_OW 318
33873: IFFALSE 33884
// ComWalk ( i ) ;
33875: LD_VAR 0 1
33879: PPUSH
33880: CALL_OW 138
// SetClass ( i , 2 ) ;
33884: LD_VAR 0 1
33888: PPUSH
33889: LD_INT 2
33891: PPUSH
33892: CALL_OW 336
// end ;
33896: GO 33861
33898: POP
33899: POP
// end ;
33900: PPOPN 2
33902: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33903: LD_EXP 51
33907: PUSH
33908: LD_EXP 104
33912: AND
33913: IFFALSE 34201
33915: GO 33917
33917: DISABLE
33918: LD_INT 0
33920: PPUSH
33921: PPUSH
33922: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33923: LD_OWVAR 2
33927: PPUSH
33928: LD_INT 9
33930: PPUSH
33931: LD_INT 1
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33941: LD_INT 9
33943: PPUSH
33944: LD_OWVAR 2
33948: PPUSH
33949: CALL_OW 343
// uc_side := 9 ;
33953: LD_ADDR_OWVAR 20
33957: PUSH
33958: LD_INT 9
33960: ST_TO_ADDR
// uc_nation := 2 ;
33961: LD_ADDR_OWVAR 21
33965: PUSH
33966: LD_INT 2
33968: ST_TO_ADDR
// hc_name := Dark Warrior ;
33969: LD_ADDR_OWVAR 26
33973: PUSH
33974: LD_STRING Dark Warrior
33976: ST_TO_ADDR
// hc_gallery :=  ;
33977: LD_ADDR_OWVAR 33
33981: PUSH
33982: LD_STRING 
33984: ST_TO_ADDR
// hc_noskilllimit := true ;
33985: LD_ADDR_OWVAR 76
33989: PUSH
33990: LD_INT 1
33992: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33993: LD_ADDR_OWVAR 31
33997: PUSH
33998: LD_INT 30
34000: PUSH
34001: LD_INT 30
34003: PUSH
34004: LD_INT 30
34006: PUSH
34007: LD_INT 30
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
// un := CreateHuman ;
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: CALL_OW 44
34025: ST_TO_ADDR
// hc_noskilllimit := false ;
34026: LD_ADDR_OWVAR 76
34030: PUSH
34031: LD_INT 0
34033: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34034: LD_VAR 0 3
34038: PPUSH
34039: LD_INT 1
34041: PPUSH
34042: CALL_OW 51
// ToLua ( playRanger() ) ;
34046: LD_STRING playRanger()
34048: PPUSH
34049: CALL_OW 559
// p := 0 ;
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: LD_INT 0
34060: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34061: LD_INT 35
34063: PPUSH
34064: CALL_OW 67
// p := p + 1 ;
34068: LD_ADDR_VAR 0 2
34072: PUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_INT 1
34080: PLUS
34081: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34082: LD_VAR 0 3
34086: PPUSH
34087: CALL_OW 256
34091: PUSH
34092: LD_INT 1000
34094: LESS
34095: IFFALSE 34109
// SetLives ( un , 1000 ) ;
34097: LD_VAR 0 3
34101: PPUSH
34102: LD_INT 1000
34104: PPUSH
34105: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34109: LD_VAR 0 3
34113: PPUSH
34114: LD_INT 81
34116: PUSH
34117: LD_OWVAR 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 91
34128: PUSH
34129: LD_VAR 0 3
34133: PUSH
34134: LD_INT 30
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: LIST
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PPUSH
34146: CALL_OW 69
34150: PPUSH
34151: LD_VAR 0 3
34155: PPUSH
34156: CALL_OW 74
34160: PPUSH
34161: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34165: LD_VAR 0 2
34169: PUSH
34170: LD_INT 80
34172: GREATER
34173: PUSH
34174: LD_VAR 0 3
34178: PPUSH
34179: CALL_OW 301
34183: OR
34184: IFFALSE 34061
// if un then
34186: LD_VAR 0 3
34190: IFFALSE 34201
// RemoveUnit ( un ) ;
34192: LD_VAR 0 3
34196: PPUSH
34197: CALL_OW 64
// end ;
34201: PPOPN 3
34203: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34204: LD_EXP 105
34208: IFFALSE 34324
34210: GO 34212
34212: DISABLE
34213: LD_INT 0
34215: PPUSH
34216: PPUSH
34217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34218: LD_ADDR_VAR 0 2
34222: PUSH
34223: LD_INT 81
34225: PUSH
34226: LD_OWVAR 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 21
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PPUSH
34249: CALL_OW 69
34253: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34254: LD_STRING playComputer()
34256: PPUSH
34257: CALL_OW 559
// if not tmp then
34261: LD_VAR 0 2
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34324
// for i in tmp do
34270: LD_ADDR_VAR 0 1
34274: PUSH
34275: LD_VAR 0 2
34279: PUSH
34280: FOR_IN
34281: IFFALSE 34322
// for j := 1 to 4 do
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: DOUBLE
34289: LD_INT 1
34291: DEC
34292: ST_TO_ADDR
34293: LD_INT 4
34295: PUSH
34296: FOR_TO
34297: IFFALSE 34318
// SetSkill ( i , j , 10 ) ;
34299: LD_VAR 0 1
34303: PPUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: LD_INT 10
34311: PPUSH
34312: CALL_OW 237
34316: GO 34296
34318: POP
34319: POP
34320: GO 34280
34322: POP
34323: POP
// end ;
34324: PPOPN 3
34326: END
// every 0 0$1 trigger s30 do var i , tmp ;
34327: LD_EXP 106
34331: IFFALSE 34400
34333: GO 34335
34335: DISABLE
34336: LD_INT 0
34338: PPUSH
34339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34340: LD_ADDR_VAR 0 2
34344: PUSH
34345: LD_INT 22
34347: PUSH
34348: LD_OWVAR 2
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PPUSH
34357: CALL_OW 69
34361: ST_TO_ADDR
// if not tmp then
34362: LD_VAR 0 2
34366: NOT
34367: IFFALSE 34371
// exit ;
34369: GO 34400
// for i in tmp do
34371: LD_ADDR_VAR 0 1
34375: PUSH
34376: LD_VAR 0 2
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34398
// SetLives ( i , 300 ) ;
34384: LD_VAR 0 1
34388: PPUSH
34389: LD_INT 300
34391: PPUSH
34392: CALL_OW 234
34396: GO 34381
34398: POP
34399: POP
// end ;
34400: PPOPN 2
34402: END
// every 0 0$1 trigger s60 do var i , tmp ;
34403: LD_EXP 107
34407: IFFALSE 34476
34409: GO 34411
34411: DISABLE
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34416: LD_ADDR_VAR 0 2
34420: PUSH
34421: LD_INT 22
34423: PUSH
34424: LD_OWVAR 2
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PPUSH
34433: CALL_OW 69
34437: ST_TO_ADDR
// if not tmp then
34438: LD_VAR 0 2
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 34476
// for i in tmp do
34447: LD_ADDR_VAR 0 1
34451: PUSH
34452: LD_VAR 0 2
34456: PUSH
34457: FOR_IN
34458: IFFALSE 34474
// SetLives ( i , 600 ) ;
34460: LD_VAR 0 1
34464: PPUSH
34465: LD_INT 600
34467: PPUSH
34468: CALL_OW 234
34472: GO 34457
34474: POP
34475: POP
// end ;
34476: PPOPN 2
34478: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34479: LD_INT 0
34481: PPUSH
// case cmd of 301 :
34482: LD_VAR 0 1
34486: PUSH
34487: LD_INT 301
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34527
34495: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34496: LD_VAR 0 6
34500: PPUSH
34501: LD_VAR 0 7
34505: PPUSH
34506: LD_VAR 0 8
34510: PPUSH
34511: LD_VAR 0 4
34515: PPUSH
34516: LD_VAR 0 5
34520: PPUSH
34521: CALL 35736 0 5
34525: GO 34648
34527: LD_INT 302
34529: DOUBLE
34530: EQUAL
34531: IFTRUE 34535
34533: GO 34572
34535: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34536: LD_VAR 0 6
34540: PPUSH
34541: LD_VAR 0 7
34545: PPUSH
34546: LD_VAR 0 8
34550: PPUSH
34551: LD_VAR 0 9
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: LD_VAR 0 5
34565: PPUSH
34566: CALL 35827 0 6
34570: GO 34648
34572: LD_INT 303
34574: DOUBLE
34575: EQUAL
34576: IFTRUE 34580
34578: GO 34617
34580: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34581: LD_VAR 0 6
34585: PPUSH
34586: LD_VAR 0 7
34590: PPUSH
34591: LD_VAR 0 8
34595: PPUSH
34596: LD_VAR 0 9
34600: PPUSH
34601: LD_VAR 0 4
34605: PPUSH
34606: LD_VAR 0 5
34610: PPUSH
34611: CALL 34653 0 6
34615: GO 34648
34617: LD_INT 304
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34647
34625: POP
// hHackTeleport ( unit , x , y ) ; end ;
34626: LD_VAR 0 2
34630: PPUSH
34631: LD_VAR 0 4
34635: PPUSH
34636: LD_VAR 0 5
34640: PPUSH
34641: CALL 36420 0 3
34645: GO 34648
34647: POP
// end ;
34648: LD_VAR 0 12
34652: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34653: LD_INT 0
34655: PPUSH
34656: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34657: LD_VAR 0 1
34661: PUSH
34662: LD_INT 1
34664: LESS
34665: PUSH
34666: LD_VAR 0 1
34670: PUSH
34671: LD_INT 3
34673: GREATER
34674: OR
34675: PUSH
34676: LD_VAR 0 5
34680: PPUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: CALL_OW 428
34690: OR
34691: IFFALSE 34695
// exit ;
34693: GO 35423
// uc_side := your_side ;
34695: LD_ADDR_OWVAR 20
34699: PUSH
34700: LD_OWVAR 2
34704: ST_TO_ADDR
// uc_nation := nation ;
34705: LD_ADDR_OWVAR 21
34709: PUSH
34710: LD_VAR 0 1
34714: ST_TO_ADDR
// bc_level = 1 ;
34715: LD_ADDR_OWVAR 43
34719: PUSH
34720: LD_INT 1
34722: ST_TO_ADDR
// case btype of 1 :
34723: LD_VAR 0 2
34727: PUSH
34728: LD_INT 1
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34747
34736: POP
// bc_type := b_depot ; 2 :
34737: LD_ADDR_OWVAR 42
34741: PUSH
34742: LD_INT 0
34744: ST_TO_ADDR
34745: GO 35367
34747: LD_INT 2
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34766
34755: POP
// bc_type := b_warehouse ; 3 :
34756: LD_ADDR_OWVAR 42
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
34764: GO 35367
34766: LD_INT 3
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34785
34774: POP
// bc_type := b_lab ; 4 .. 9 :
34775: LD_ADDR_OWVAR 42
34779: PUSH
34780: LD_INT 6
34782: ST_TO_ADDR
34783: GO 35367
34785: LD_INT 4
34787: DOUBLE
34788: GREATEREQUAL
34789: IFFALSE 34797
34791: LD_INT 9
34793: DOUBLE
34794: LESSEQUAL
34795: IFTRUE 34799
34797: GO 34859
34799: POP
// begin bc_type := b_lab_half ;
34800: LD_ADDR_OWVAR 42
34804: PUSH
34805: LD_INT 7
34807: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34808: LD_ADDR_OWVAR 44
34812: PUSH
34813: LD_INT 10
34815: PUSH
34816: LD_INT 11
34818: PUSH
34819: LD_INT 12
34821: PUSH
34822: LD_INT 15
34824: PUSH
34825: LD_INT 14
34827: PUSH
34828: LD_INT 13
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_INT 3
34846: MINUS
34847: ARRAY
34848: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34849: LD_ADDR_OWVAR 45
34853: PUSH
34854: LD_INT 9
34856: ST_TO_ADDR
// end ; 10 .. 13 :
34857: GO 35367
34859: LD_INT 10
34861: DOUBLE
34862: GREATEREQUAL
34863: IFFALSE 34871
34865: LD_INT 13
34867: DOUBLE
34868: LESSEQUAL
34869: IFTRUE 34873
34871: GO 34950
34873: POP
// begin bc_type := b_lab_full ;
34874: LD_ADDR_OWVAR 42
34878: PUSH
34879: LD_INT 8
34881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34882: LD_ADDR_OWVAR 44
34886: PUSH
34887: LD_INT 10
34889: PUSH
34890: LD_INT 12
34892: PUSH
34893: LD_INT 14
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: PUSH
34905: LD_VAR 0 2
34909: PUSH
34910: LD_INT 9
34912: MINUS
34913: ARRAY
34914: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34915: LD_ADDR_OWVAR 45
34919: PUSH
34920: LD_INT 11
34922: PUSH
34923: LD_INT 15
34925: PUSH
34926: LD_INT 12
34928: PUSH
34929: LD_INT 15
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: PUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_INT 9
34945: MINUS
34946: ARRAY
34947: ST_TO_ADDR
// end ; 14 :
34948: GO 35367
34950: LD_INT 14
34952: DOUBLE
34953: EQUAL
34954: IFTRUE 34958
34956: GO 34969
34958: POP
// bc_type := b_workshop ; 15 :
34959: LD_ADDR_OWVAR 42
34963: PUSH
34964: LD_INT 2
34966: ST_TO_ADDR
34967: GO 35367
34969: LD_INT 15
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 34988
34977: POP
// bc_type := b_factory ; 16 :
34978: LD_ADDR_OWVAR 42
34982: PUSH
34983: LD_INT 3
34985: ST_TO_ADDR
34986: GO 35367
34988: LD_INT 16
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35007
34996: POP
// bc_type := b_ext_gun ; 17 :
34997: LD_ADDR_OWVAR 42
35001: PUSH
35002: LD_INT 17
35004: ST_TO_ADDR
35005: GO 35367
35007: LD_INT 17
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35043
35015: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35016: LD_ADDR_OWVAR 42
35020: PUSH
35021: LD_INT 19
35023: PUSH
35024: LD_INT 23
35026: PUSH
35027: LD_INT 19
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: PUSH
35035: LD_VAR 0 1
35039: ARRAY
35040: ST_TO_ADDR
35041: GO 35367
35043: LD_INT 18
35045: DOUBLE
35046: EQUAL
35047: IFTRUE 35051
35049: GO 35062
35051: POP
// bc_type := b_ext_radar ; 19 :
35052: LD_ADDR_OWVAR 42
35056: PUSH
35057: LD_INT 20
35059: ST_TO_ADDR
35060: GO 35367
35062: LD_INT 19
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35081
35070: POP
// bc_type := b_ext_radio ; 20 :
35071: LD_ADDR_OWVAR 42
35075: PUSH
35076: LD_INT 22
35078: ST_TO_ADDR
35079: GO 35367
35081: LD_INT 20
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35100
35089: POP
// bc_type := b_ext_siberium ; 21 :
35090: LD_ADDR_OWVAR 42
35094: PUSH
35095: LD_INT 21
35097: ST_TO_ADDR
35098: GO 35367
35100: LD_INT 21
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35119
35108: POP
// bc_type := b_ext_computer ; 22 :
35109: LD_ADDR_OWVAR 42
35113: PUSH
35114: LD_INT 24
35116: ST_TO_ADDR
35117: GO 35367
35119: LD_INT 22
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35127
35125: GO 35138
35127: POP
// bc_type := b_ext_track ; 23 :
35128: LD_ADDR_OWVAR 42
35132: PUSH
35133: LD_INT 16
35135: ST_TO_ADDR
35136: GO 35367
35138: LD_INT 23
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35146
35144: GO 35157
35146: POP
// bc_type := b_ext_laser ; 24 :
35147: LD_ADDR_OWVAR 42
35151: PUSH
35152: LD_INT 25
35154: ST_TO_ADDR
35155: GO 35367
35157: LD_INT 24
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35165
35163: GO 35176
35165: POP
// bc_type := b_control_tower ; 25 :
35166: LD_ADDR_OWVAR 42
35170: PUSH
35171: LD_INT 36
35173: ST_TO_ADDR
35174: GO 35367
35176: LD_INT 25
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35195
35184: POP
// bc_type := b_breastwork ; 26 :
35185: LD_ADDR_OWVAR 42
35189: PUSH
35190: LD_INT 31
35192: ST_TO_ADDR
35193: GO 35367
35195: LD_INT 26
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35214
35203: POP
// bc_type := b_bunker ; 27 :
35204: LD_ADDR_OWVAR 42
35208: PUSH
35209: LD_INT 32
35211: ST_TO_ADDR
35212: GO 35367
35214: LD_INT 27
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35233
35222: POP
// bc_type := b_turret ; 28 :
35223: LD_ADDR_OWVAR 42
35227: PUSH
35228: LD_INT 33
35230: ST_TO_ADDR
35231: GO 35367
35233: LD_INT 28
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35241
35239: GO 35252
35241: POP
// bc_type := b_armoury ; 29 :
35242: LD_ADDR_OWVAR 42
35246: PUSH
35247: LD_INT 4
35249: ST_TO_ADDR
35250: GO 35367
35252: LD_INT 29
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35260
35258: GO 35271
35260: POP
// bc_type := b_barracks ; 30 :
35261: LD_ADDR_OWVAR 42
35265: PUSH
35266: LD_INT 5
35268: ST_TO_ADDR
35269: GO 35367
35271: LD_INT 30
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35290
35279: POP
// bc_type := b_solar_power ; 31 :
35280: LD_ADDR_OWVAR 42
35284: PUSH
35285: LD_INT 27
35287: ST_TO_ADDR
35288: GO 35367
35290: LD_INT 31
35292: DOUBLE
35293: EQUAL
35294: IFTRUE 35298
35296: GO 35309
35298: POP
// bc_type := b_oil_power ; 32 :
35299: LD_ADDR_OWVAR 42
35303: PUSH
35304: LD_INT 26
35306: ST_TO_ADDR
35307: GO 35367
35309: LD_INT 32
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35317
35315: GO 35328
35317: POP
// bc_type := b_siberite_power ; 33 :
35318: LD_ADDR_OWVAR 42
35322: PUSH
35323: LD_INT 28
35325: ST_TO_ADDR
35326: GO 35367
35328: LD_INT 33
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35347
35336: POP
// bc_type := b_oil_mine ; 34 :
35337: LD_ADDR_OWVAR 42
35341: PUSH
35342: LD_INT 29
35344: ST_TO_ADDR
35345: GO 35367
35347: LD_INT 34
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35366
35355: POP
// bc_type := b_siberite_mine ; end ;
35356: LD_ADDR_OWVAR 42
35360: PUSH
35361: LD_INT 30
35363: ST_TO_ADDR
35364: GO 35367
35366: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35367: LD_ADDR_VAR 0 8
35371: PUSH
35372: LD_VAR 0 5
35376: PPUSH
35377: LD_VAR 0 6
35381: PPUSH
35382: LD_VAR 0 3
35386: PPUSH
35387: CALL_OW 47
35391: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35392: LD_OWVAR 42
35396: PUSH
35397: LD_INT 32
35399: PUSH
35400: LD_INT 33
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: IN
35407: IFFALSE 35423
// PlaceWeaponTurret ( b , weapon ) ;
35409: LD_VAR 0 8
35413: PPUSH
35414: LD_VAR 0 4
35418: PPUSH
35419: CALL_OW 431
// end ;
35423: LD_VAR 0 7
35427: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35428: LD_INT 0
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35434: LD_ADDR_VAR 0 4
35438: PUSH
35439: LD_INT 22
35441: PUSH
35442: LD_OWVAR 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 30
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 30
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PPUSH
35483: CALL_OW 69
35487: ST_TO_ADDR
// if not tmp then
35488: LD_VAR 0 4
35492: NOT
35493: IFFALSE 35497
// exit ;
35495: GO 35556
// for i in tmp do
35497: LD_ADDR_VAR 0 2
35501: PUSH
35502: LD_VAR 0 4
35506: PUSH
35507: FOR_IN
35508: IFFALSE 35554
// for j = 1 to 3 do
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: DOUBLE
35516: LD_INT 1
35518: DEC
35519: ST_TO_ADDR
35520: LD_INT 3
35522: PUSH
35523: FOR_TO
35524: IFFALSE 35550
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35526: LD_VAR 0 2
35530: PPUSH
35531: CALL_OW 274
35535: PPUSH
35536: LD_VAR 0 3
35540: PPUSH
35541: LD_INT 99999
35543: PPUSH
35544: CALL_OW 277
35548: GO 35523
35550: POP
35551: POP
35552: GO 35507
35554: POP
35555: POP
// end ;
35556: LD_VAR 0 1
35560: RET
// export function hHackSetLevel10 ; var i , j ; begin
35561: LD_INT 0
35563: PPUSH
35564: PPUSH
35565: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35566: LD_ADDR_VAR 0 2
35570: PUSH
35571: LD_INT 21
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 69
35585: PUSH
35586: FOR_IN
35587: IFFALSE 35639
// if IsSelected ( i ) then
35589: LD_VAR 0 2
35593: PPUSH
35594: CALL_OW 306
35598: IFFALSE 35637
// begin for j := 1 to 4 do
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: DOUBLE
35606: LD_INT 1
35608: DEC
35609: ST_TO_ADDR
35610: LD_INT 4
35612: PUSH
35613: FOR_TO
35614: IFFALSE 35635
// SetSkill ( i , j , 10 ) ;
35616: LD_VAR 0 2
35620: PPUSH
35621: LD_VAR 0 3
35625: PPUSH
35626: LD_INT 10
35628: PPUSH
35629: CALL_OW 237
35633: GO 35613
35635: POP
35636: POP
// end ;
35637: GO 35586
35639: POP
35640: POP
// end ;
35641: LD_VAR 0 1
35645: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35646: LD_INT 0
35648: PPUSH
35649: PPUSH
35650: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35651: LD_ADDR_VAR 0 2
35655: PUSH
35656: LD_INT 22
35658: PUSH
35659: LD_OWVAR 2
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 21
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PPUSH
35682: CALL_OW 69
35686: PUSH
35687: FOR_IN
35688: IFFALSE 35729
// begin for j := 1 to 4 do
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: DOUBLE
35696: LD_INT 1
35698: DEC
35699: ST_TO_ADDR
35700: LD_INT 4
35702: PUSH
35703: FOR_TO
35704: IFFALSE 35725
// SetSkill ( i , j , 10 ) ;
35706: LD_VAR 0 2
35710: PPUSH
35711: LD_VAR 0 3
35715: PPUSH
35716: LD_INT 10
35718: PPUSH
35719: CALL_OW 237
35723: GO 35703
35725: POP
35726: POP
// end ;
35727: GO 35687
35729: POP
35730: POP
// end ;
35731: LD_VAR 0 1
35735: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35736: LD_INT 0
35738: PPUSH
// uc_side := your_side ;
35739: LD_ADDR_OWVAR 20
35743: PUSH
35744: LD_OWVAR 2
35748: ST_TO_ADDR
// uc_nation := nation ;
35749: LD_ADDR_OWVAR 21
35753: PUSH
35754: LD_VAR 0 1
35758: ST_TO_ADDR
// InitHc ;
35759: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35763: LD_INT 0
35765: PPUSH
35766: LD_VAR 0 2
35770: PPUSH
35771: LD_VAR 0 3
35775: PPUSH
35776: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35780: LD_VAR 0 4
35784: PPUSH
35785: LD_VAR 0 5
35789: PPUSH
35790: CALL_OW 428
35794: PUSH
35795: LD_INT 0
35797: EQUAL
35798: IFFALSE 35822
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35800: CALL_OW 44
35804: PPUSH
35805: LD_VAR 0 4
35809: PPUSH
35810: LD_VAR 0 5
35814: PPUSH
35815: LD_INT 1
35817: PPUSH
35818: CALL_OW 48
// end ;
35822: LD_VAR 0 6
35826: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
// uc_side := your_side ;
35831: LD_ADDR_OWVAR 20
35835: PUSH
35836: LD_OWVAR 2
35840: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35841: LD_VAR 0 1
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: IN
35868: IFFALSE 35880
// uc_nation := nation_american else
35870: LD_ADDR_OWVAR 21
35874: PUSH
35875: LD_INT 1
35877: ST_TO_ADDR
35878: GO 35923
// if chassis in [ 11 , 12 , 13 , 14 ] then
35880: LD_VAR 0 1
35884: PUSH
35885: LD_INT 11
35887: PUSH
35888: LD_INT 12
35890: PUSH
35891: LD_INT 13
35893: PUSH
35894: LD_INT 14
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: IN
35903: IFFALSE 35915
// uc_nation := nation_arabian else
35905: LD_ADDR_OWVAR 21
35909: PUSH
35910: LD_INT 2
35912: ST_TO_ADDR
35913: GO 35923
// uc_nation := nation_russian ;
35915: LD_ADDR_OWVAR 21
35919: PUSH
35920: LD_INT 3
35922: ST_TO_ADDR
// vc_chassis := chassis ;
35923: LD_ADDR_OWVAR 37
35927: PUSH
35928: LD_VAR 0 1
35932: ST_TO_ADDR
// vc_engine := engine ;
35933: LD_ADDR_OWVAR 39
35937: PUSH
35938: LD_VAR 0 2
35942: ST_TO_ADDR
// vc_control := control ;
35943: LD_ADDR_OWVAR 38
35947: PUSH
35948: LD_VAR 0 3
35952: ST_TO_ADDR
// vc_weapon := weapon ;
35953: LD_ADDR_OWVAR 40
35957: PUSH
35958: LD_VAR 0 4
35962: ST_TO_ADDR
// un := CreateVehicle ;
35963: LD_ADDR_VAR 0 8
35967: PUSH
35968: CALL_OW 45
35972: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35973: LD_VAR 0 8
35977: PPUSH
35978: LD_INT 0
35980: PPUSH
35981: LD_INT 5
35983: PPUSH
35984: CALL_OW 12
35988: PPUSH
35989: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35993: LD_VAR 0 8
35997: PPUSH
35998: LD_VAR 0 5
36002: PPUSH
36003: LD_VAR 0 6
36007: PPUSH
36008: LD_INT 1
36010: PPUSH
36011: CALL_OW 48
// end ;
36015: LD_VAR 0 7
36019: RET
// export hInvincible ; every 1 do
36020: GO 36022
36022: DISABLE
// hInvincible := [ ] ;
36023: LD_ADDR_EXP 108
36027: PUSH
36028: EMPTY
36029: ST_TO_ADDR
36030: END
// every 10 do var i ;
36031: GO 36033
36033: DISABLE
36034: LD_INT 0
36036: PPUSH
// begin enable ;
36037: ENABLE
// if not hInvincible then
36038: LD_EXP 108
36042: NOT
36043: IFFALSE 36047
// exit ;
36045: GO 36091
// for i in hInvincible do
36047: LD_ADDR_VAR 0 1
36051: PUSH
36052: LD_EXP 108
36056: PUSH
36057: FOR_IN
36058: IFFALSE 36089
// if GetLives ( i ) < 1000 then
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 256
36069: PUSH
36070: LD_INT 1000
36072: LESS
36073: IFFALSE 36087
// SetLives ( i , 1000 ) ;
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_INT 1000
36082: PPUSH
36083: CALL_OW 234
36087: GO 36057
36089: POP
36090: POP
// end ;
36091: PPOPN 1
36093: END
// export function hHackInvincible ; var i ; begin
36094: LD_INT 0
36096: PPUSH
36097: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36098: LD_ADDR_VAR 0 2
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 21
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 21
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: PPUSH
36131: CALL_OW 69
36135: PUSH
36136: FOR_IN
36137: IFFALSE 36198
// if IsSelected ( i ) then
36139: LD_VAR 0 2
36143: PPUSH
36144: CALL_OW 306
36148: IFFALSE 36196
// begin if i in hInvincible then
36150: LD_VAR 0 2
36154: PUSH
36155: LD_EXP 108
36159: IN
36160: IFFALSE 36180
// hInvincible := hInvincible diff i else
36162: LD_ADDR_EXP 108
36166: PUSH
36167: LD_EXP 108
36171: PUSH
36172: LD_VAR 0 2
36176: DIFF
36177: ST_TO_ADDR
36178: GO 36196
// hInvincible := hInvincible union i ;
36180: LD_ADDR_EXP 108
36184: PUSH
36185: LD_EXP 108
36189: PUSH
36190: LD_VAR 0 2
36194: UNION
36195: ST_TO_ADDR
// end ;
36196: GO 36136
36198: POP
36199: POP
// end ;
36200: LD_VAR 0 1
36204: RET
// export function hHackInvisible ; var i , j ; begin
36205: LD_INT 0
36207: PPUSH
36208: PPUSH
36209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36210: LD_ADDR_VAR 0 2
36214: PUSH
36215: LD_INT 21
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PPUSH
36225: CALL_OW 69
36229: PUSH
36230: FOR_IN
36231: IFFALSE 36255
// if IsSelected ( i ) then
36233: LD_VAR 0 2
36237: PPUSH
36238: CALL_OW 306
36242: IFFALSE 36253
// ComForceInvisible ( i ) ;
36244: LD_VAR 0 2
36248: PPUSH
36249: CALL_OW 496
36253: GO 36230
36255: POP
36256: POP
// end ;
36257: LD_VAR 0 1
36261: RET
// export function hHackChangeYourSide ; begin
36262: LD_INT 0
36264: PPUSH
// if your_side = 8 then
36265: LD_OWVAR 2
36269: PUSH
36270: LD_INT 8
36272: EQUAL
36273: IFFALSE 36285
// your_side := 0 else
36275: LD_ADDR_OWVAR 2
36279: PUSH
36280: LD_INT 0
36282: ST_TO_ADDR
36283: GO 36299
// your_side := your_side + 1 ;
36285: LD_ADDR_OWVAR 2
36289: PUSH
36290: LD_OWVAR 2
36294: PUSH
36295: LD_INT 1
36297: PLUS
36298: ST_TO_ADDR
// end ;
36299: LD_VAR 0 1
36303: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36304: LD_INT 0
36306: PPUSH
36307: PPUSH
36308: PPUSH
// for i in all_units do
36309: LD_ADDR_VAR 0 2
36313: PUSH
36314: LD_OWVAR 3
36318: PUSH
36319: FOR_IN
36320: IFFALSE 36398
// if IsSelected ( i ) then
36322: LD_VAR 0 2
36326: PPUSH
36327: CALL_OW 306
36331: IFFALSE 36396
// begin j := GetSide ( i ) ;
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: CALL_OW 255
36347: ST_TO_ADDR
// if j = 8 then
36348: LD_VAR 0 3
36352: PUSH
36353: LD_INT 8
36355: EQUAL
36356: IFFALSE 36368
// j := 0 else
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_INT 0
36365: ST_TO_ADDR
36366: GO 36382
// j := j + 1 ;
36368: LD_ADDR_VAR 0 3
36372: PUSH
36373: LD_VAR 0 3
36377: PUSH
36378: LD_INT 1
36380: PLUS
36381: ST_TO_ADDR
// SetSide ( i , j ) ;
36382: LD_VAR 0 2
36386: PPUSH
36387: LD_VAR 0 3
36391: PPUSH
36392: CALL_OW 235
// end ;
36396: GO 36319
36398: POP
36399: POP
// end ;
36400: LD_VAR 0 1
36404: RET
// export function hHackFog ; begin
36405: LD_INT 0
36407: PPUSH
// FogOff ( true ) ;
36408: LD_INT 1
36410: PPUSH
36411: CALL_OW 344
// end ;
36415: LD_VAR 0 1
36419: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36420: LD_INT 0
36422: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36423: LD_VAR 0 1
36427: PPUSH
36428: LD_VAR 0 2
36432: PPUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: LD_INT 1
36440: PPUSH
36441: LD_INT 1
36443: PPUSH
36444: CALL_OW 483
// CenterOnXY ( x , y ) ;
36448: LD_VAR 0 2
36452: PPUSH
36453: LD_VAR 0 3
36457: PPUSH
36458: CALL_OW 84
// end ;
36462: LD_VAR 0 4
36466: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36467: LD_INT 0
36469: PPUSH
36470: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36471: LD_VAR 0 1
36475: NOT
36476: PUSH
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 3
36486: PPUSH
36487: CALL_OW 488
36491: NOT
36492: OR
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 266
36503: PUSH
36504: LD_INT 3
36506: NONEQUAL
36507: PUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL_OW 247
36517: PUSH
36518: LD_INT 1
36520: EQUAL
36521: NOT
36522: AND
36523: OR
36524: IFFALSE 36528
// exit ;
36526: GO 36677
// if GetType ( factory ) = unit_human then
36528: LD_VAR 0 1
36532: PPUSH
36533: CALL_OW 247
36537: PUSH
36538: LD_INT 1
36540: EQUAL
36541: IFFALSE 36558
// factory := IsInUnit ( factory ) ;
36543: LD_ADDR_VAR 0 1
36547: PUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 310
36557: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 266
36567: PUSH
36568: LD_INT 3
36570: NONEQUAL
36571: IFFALSE 36575
// exit ;
36573: GO 36677
// if HexInfo ( x , y ) = factory then
36575: LD_VAR 0 2
36579: PPUSH
36580: LD_VAR 0 3
36584: PPUSH
36585: CALL_OW 428
36589: PUSH
36590: LD_VAR 0 1
36594: EQUAL
36595: IFFALSE 36622
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36597: LD_ADDR_EXP 109
36601: PUSH
36602: LD_EXP 109
36606: PPUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: LD_INT 0
36614: PPUSH
36615: CALL_OW 1
36619: ST_TO_ADDR
36620: GO 36673
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36622: LD_ADDR_EXP 109
36626: PUSH
36627: LD_EXP 109
36631: PPUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 255
36646: PUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_VAR 0 2
36656: PUSH
36657: LD_VAR 0 3
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: PPUSH
36668: CALL_OW 1
36672: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36673: CALL 36682 0 0
// end ;
36677: LD_VAR 0 4
36681: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36682: LD_INT 0
36684: PPUSH
36685: PPUSH
36686: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36687: LD_STRING resetFactoryWaypoint();
36689: PPUSH
36690: CALL_OW 559
// if factoryWaypoints then
36694: LD_EXP 109
36698: IFFALSE 36824
// begin list := PrepareArray ( factoryWaypoints ) ;
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_EXP 109
36709: PPUSH
36710: CALL 84121 0 1
36714: ST_TO_ADDR
// for i := 1 to list do
36715: LD_ADDR_VAR 0 2
36719: PUSH
36720: DOUBLE
36721: LD_INT 1
36723: DEC
36724: ST_TO_ADDR
36725: LD_VAR 0 3
36729: PUSH
36730: FOR_TO
36731: IFFALSE 36822
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36733: LD_STRING setFactoryWaypointXY(
36735: PUSH
36736: LD_VAR 0 3
36740: PUSH
36741: LD_VAR 0 2
36745: ARRAY
36746: PUSH
36747: LD_INT 1
36749: ARRAY
36750: STR
36751: PUSH
36752: LD_STRING ,
36754: STR
36755: PUSH
36756: LD_VAR 0 3
36760: PUSH
36761: LD_VAR 0 2
36765: ARRAY
36766: PUSH
36767: LD_INT 2
36769: ARRAY
36770: STR
36771: PUSH
36772: LD_STRING ,
36774: STR
36775: PUSH
36776: LD_VAR 0 3
36780: PUSH
36781: LD_VAR 0 2
36785: ARRAY
36786: PUSH
36787: LD_INT 3
36789: ARRAY
36790: STR
36791: PUSH
36792: LD_STRING ,
36794: STR
36795: PUSH
36796: LD_VAR 0 3
36800: PUSH
36801: LD_VAR 0 2
36805: ARRAY
36806: PUSH
36807: LD_INT 4
36809: ARRAY
36810: STR
36811: PUSH
36812: LD_STRING )
36814: STR
36815: PPUSH
36816: CALL_OW 559
36820: GO 36730
36822: POP
36823: POP
// end ; end ;
36824: LD_VAR 0 1
36828: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36829: LD_INT 0
36831: PPUSH
// if HexInfo ( x , y ) = warehouse then
36832: LD_VAR 0 2
36836: PPUSH
36837: LD_VAR 0 3
36841: PPUSH
36842: CALL_OW 428
36846: PUSH
36847: LD_VAR 0 1
36851: EQUAL
36852: IFFALSE 36879
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36854: LD_ADDR_EXP 110
36858: PUSH
36859: LD_EXP 110
36863: PPUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: LD_INT 0
36871: PPUSH
36872: CALL_OW 1
36876: ST_TO_ADDR
36877: GO 36930
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36879: LD_ADDR_EXP 110
36883: PUSH
36884: LD_EXP 110
36888: PPUSH
36889: LD_VAR 0 1
36893: PPUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 255
36903: PUSH
36904: LD_VAR 0 1
36908: PUSH
36909: LD_VAR 0 2
36913: PUSH
36914: LD_VAR 0 3
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: PPUSH
36925: CALL_OW 1
36929: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36930: CALL 36939 0 0
// end ;
36934: LD_VAR 0 4
36938: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36939: LD_INT 0
36941: PPUSH
36942: PPUSH
36943: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36944: LD_STRING resetWarehouseGatheringPoints();
36946: PPUSH
36947: CALL_OW 559
// if warehouseGatheringPoints then
36951: LD_EXP 110
36955: IFFALSE 37081
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36957: LD_ADDR_VAR 0 3
36961: PUSH
36962: LD_EXP 110
36966: PPUSH
36967: CALL 84121 0 1
36971: ST_TO_ADDR
// for i := 1 to list do
36972: LD_ADDR_VAR 0 2
36976: PUSH
36977: DOUBLE
36978: LD_INT 1
36980: DEC
36981: ST_TO_ADDR
36982: LD_VAR 0 3
36986: PUSH
36987: FOR_TO
36988: IFFALSE 37079
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36990: LD_STRING setWarehouseGatheringPointXY(
36992: PUSH
36993: LD_VAR 0 3
36997: PUSH
36998: LD_VAR 0 2
37002: ARRAY
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: STR
37008: PUSH
37009: LD_STRING ,
37011: STR
37012: PUSH
37013: LD_VAR 0 3
37017: PUSH
37018: LD_VAR 0 2
37022: ARRAY
37023: PUSH
37024: LD_INT 2
37026: ARRAY
37027: STR
37028: PUSH
37029: LD_STRING ,
37031: STR
37032: PUSH
37033: LD_VAR 0 3
37037: PUSH
37038: LD_VAR 0 2
37042: ARRAY
37043: PUSH
37044: LD_INT 3
37046: ARRAY
37047: STR
37048: PUSH
37049: LD_STRING ,
37051: STR
37052: PUSH
37053: LD_VAR 0 3
37057: PUSH
37058: LD_VAR 0 2
37062: ARRAY
37063: PUSH
37064: LD_INT 4
37066: ARRAY
37067: STR
37068: PUSH
37069: LD_STRING )
37071: STR
37072: PPUSH
37073: CALL_OW 559
37077: GO 36987
37079: POP
37080: POP
// end ; end ;
37081: LD_VAR 0 1
37085: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37086: LD_EXP 110
37090: IFFALSE 37775
37092: GO 37094
37094: DISABLE
37095: LD_INT 0
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
// begin enable ;
37106: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_EXP 110
37116: PPUSH
37117: CALL 84121 0 1
37121: ST_TO_ADDR
// if not list then
37122: LD_VAR 0 3
37126: NOT
37127: IFFALSE 37131
// exit ;
37129: GO 37775
// for i := 1 to list do
37131: LD_ADDR_VAR 0 1
37135: PUSH
37136: DOUBLE
37137: LD_INT 1
37139: DEC
37140: ST_TO_ADDR
37141: LD_VAR 0 3
37145: PUSH
37146: FOR_TO
37147: IFFALSE 37773
// begin depot := list [ i ] [ 2 ] ;
37149: LD_ADDR_VAR 0 8
37153: PUSH
37154: LD_VAR 0 3
37158: PUSH
37159: LD_VAR 0 1
37163: ARRAY
37164: PUSH
37165: LD_INT 2
37167: ARRAY
37168: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37169: LD_ADDR_VAR 0 5
37173: PUSH
37174: LD_VAR 0 3
37178: PUSH
37179: LD_VAR 0 1
37183: ARRAY
37184: PUSH
37185: LD_INT 1
37187: ARRAY
37188: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37189: LD_VAR 0 8
37193: PPUSH
37194: CALL_OW 301
37198: PUSH
37199: LD_VAR 0 5
37203: PUSH
37204: LD_VAR 0 8
37208: PPUSH
37209: CALL_OW 255
37213: NONEQUAL
37214: OR
37215: IFFALSE 37244
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37217: LD_ADDR_EXP 110
37221: PUSH
37222: LD_EXP 110
37226: PPUSH
37227: LD_VAR 0 8
37231: PPUSH
37232: LD_INT 0
37234: PPUSH
37235: CALL_OW 1
37239: ST_TO_ADDR
// exit ;
37240: POP
37241: POP
37242: GO 37775
// end ; x := list [ i ] [ 3 ] ;
37244: LD_ADDR_VAR 0 6
37248: PUSH
37249: LD_VAR 0 3
37253: PUSH
37254: LD_VAR 0 1
37258: ARRAY
37259: PUSH
37260: LD_INT 3
37262: ARRAY
37263: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37264: LD_ADDR_VAR 0 7
37268: PUSH
37269: LD_VAR 0 3
37273: PUSH
37274: LD_VAR 0 1
37278: ARRAY
37279: PUSH
37280: LD_INT 4
37282: ARRAY
37283: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_VAR 0 6
37293: PPUSH
37294: LD_VAR 0 7
37298: PPUSH
37299: LD_INT 16
37301: PPUSH
37302: CALL 82709 0 3
37306: ST_TO_ADDR
// if not cratesNearbyPoint then
37307: LD_VAR 0 9
37311: NOT
37312: IFFALSE 37318
// exit ;
37314: POP
37315: POP
37316: GO 37775
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37318: LD_ADDR_VAR 0 4
37322: PUSH
37323: LD_INT 22
37325: PUSH
37326: LD_VAR 0 5
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: LD_INT 60
37340: PUSH
37341: EMPTY
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 91
37350: PUSH
37351: LD_VAR 0 8
37355: PUSH
37356: LD_INT 6
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 25
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 25
37379: PUSH
37380: LD_INT 16
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: PPUSH
37398: CALL_OW 69
37402: PUSH
37403: LD_VAR 0 8
37407: PPUSH
37408: CALL_OW 313
37412: PPUSH
37413: LD_INT 3
37415: PUSH
37416: LD_INT 60
37418: PUSH
37419: EMPTY
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 25
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 25
37441: PUSH
37442: LD_INT 16
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PPUSH
37458: CALL_OW 72
37462: UNION
37463: ST_TO_ADDR
// if tmp then
37464: LD_VAR 0 4
37468: IFFALSE 37548
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37470: LD_ADDR_VAR 0 4
37474: PUSH
37475: LD_VAR 0 4
37479: PPUSH
37480: LD_INT 3
37482: PPUSH
37483: CALL 80678 0 2
37487: ST_TO_ADDR
// for j in tmp do
37488: LD_ADDR_VAR 0 2
37492: PUSH
37493: LD_VAR 0 4
37497: PUSH
37498: FOR_IN
37499: IFFALSE 37542
// begin if IsInUnit ( j ) then
37501: LD_VAR 0 2
37505: PPUSH
37506: CALL_OW 310
37510: IFFALSE 37521
// ComExit ( j ) ;
37512: LD_VAR 0 2
37516: PPUSH
37517: CALL 80761 0 1
// AddComCollect ( j , x , y ) ;
37521: LD_VAR 0 2
37525: PPUSH
37526: LD_VAR 0 6
37530: PPUSH
37531: LD_VAR 0 7
37535: PPUSH
37536: CALL_OW 177
// end ;
37540: GO 37498
37542: POP
37543: POP
// exit ;
37544: POP
37545: POP
37546: GO 37775
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37548: LD_ADDR_VAR 0 4
37552: PUSH
37553: LD_INT 22
37555: PUSH
37556: LD_VAR 0 5
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 91
37567: PUSH
37568: LD_VAR 0 8
37572: PUSH
37573: LD_INT 8
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 34
37586: PUSH
37587: LD_INT 12
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 34
37596: PUSH
37597: LD_INT 51
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 34
37606: PUSH
37607: LD_INT 32
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 34
37616: PUSH
37617: LD_INT 89
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL_OW 69
37640: ST_TO_ADDR
// if tmp then
37641: LD_VAR 0 4
37645: IFFALSE 37771
// begin for j in tmp do
37647: LD_ADDR_VAR 0 2
37651: PUSH
37652: LD_VAR 0 4
37656: PUSH
37657: FOR_IN
37658: IFFALSE 37769
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL_OW 262
37669: PUSH
37670: LD_INT 3
37672: EQUAL
37673: PUSH
37674: LD_VAR 0 2
37678: PPUSH
37679: CALL_OW 261
37683: PUSH
37684: LD_INT 20
37686: GREATER
37687: OR
37688: PUSH
37689: LD_VAR 0 2
37693: PPUSH
37694: CALL_OW 314
37698: NOT
37699: AND
37700: PUSH
37701: LD_VAR 0 2
37705: PPUSH
37706: CALL_OW 263
37710: PUSH
37711: LD_INT 1
37713: NONEQUAL
37714: PUSH
37715: LD_VAR 0 2
37719: PPUSH
37720: CALL_OW 311
37724: OR
37725: AND
37726: IFFALSE 37767
// begin ComCollect ( j , x , y ) ;
37728: LD_VAR 0 2
37732: PPUSH
37733: LD_VAR 0 6
37737: PPUSH
37738: LD_VAR 0 7
37742: PPUSH
37743: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37747: LD_VAR 0 2
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: CALL_OW 172
// exit ;
37761: POP
37762: POP
37763: POP
37764: POP
37765: GO 37775
// end ;
37767: GO 37657
37769: POP
37770: POP
// end ; end ;
37771: GO 37146
37773: POP
37774: POP
// end ; end_of_file
37775: PPOPN 9
37777: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37778: LD_INT 0
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 264
37793: PUSH
37794: LD_INT 91
37796: EQUAL
37797: IFFALSE 37869
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37799: LD_INT 68
37801: PPUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: CALL_OW 255
37811: PPUSH
37812: CALL_OW 321
37816: PUSH
37817: LD_INT 2
37819: EQUAL
37820: IFFALSE 37832
// eff := 70 else
37822: LD_ADDR_VAR 0 4
37826: PUSH
37827: LD_INT 70
37829: ST_TO_ADDR
37830: GO 37840
// eff := 30 ;
37832: LD_ADDR_VAR 0 4
37836: PUSH
37837: LD_INT 30
37839: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37840: LD_VAR 0 1
37844: PPUSH
37845: CALL_OW 250
37849: PPUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 251
37859: PPUSH
37860: LD_VAR 0 4
37864: PPUSH
37865: CALL_OW 495
// end ; end ;
37869: LD_VAR 0 2
37873: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37874: LD_INT 0
37876: PPUSH
// end ;
37877: LD_VAR 0 4
37881: RET
// export function SOS_Command ( cmd ) ; begin
37882: LD_INT 0
37884: PPUSH
// end ;
37885: LD_VAR 0 2
37889: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37890: LD_INT 0
37892: PPUSH
// end ;
37893: LD_VAR 0 6
37897: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37898: LD_INT 0
37900: PPUSH
37901: PPUSH
// if not vehicle or not factory then
37902: LD_VAR 0 1
37906: NOT
37907: PUSH
37908: LD_VAR 0 2
37912: NOT
37913: OR
37914: IFFALSE 37918
// exit ;
37916: GO 38149
// if factoryWaypoints >= factory then
37918: LD_EXP 109
37922: PUSH
37923: LD_VAR 0 2
37927: GREATEREQUAL
37928: IFFALSE 38149
// if factoryWaypoints [ factory ] then
37930: LD_EXP 109
37934: PUSH
37935: LD_VAR 0 2
37939: ARRAY
37940: IFFALSE 38149
// begin if GetControl ( vehicle ) = control_manual then
37942: LD_VAR 0 1
37946: PPUSH
37947: CALL_OW 263
37951: PUSH
37952: LD_INT 1
37954: EQUAL
37955: IFFALSE 38036
// begin driver := IsDrivenBy ( vehicle ) ;
37957: LD_ADDR_VAR 0 4
37961: PUSH
37962: LD_VAR 0 1
37966: PPUSH
37967: CALL_OW 311
37971: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37972: LD_VAR 0 4
37976: PPUSH
37977: LD_EXP 109
37981: PUSH
37982: LD_VAR 0 2
37986: ARRAY
37987: PUSH
37988: LD_INT 3
37990: ARRAY
37991: PPUSH
37992: LD_EXP 109
37996: PUSH
37997: LD_VAR 0 2
38001: ARRAY
38002: PUSH
38003: LD_INT 4
38005: ARRAY
38006: PPUSH
38007: CALL_OW 171
// AddComExitVehicle ( driver ) ;
38011: LD_VAR 0 4
38015: PPUSH
38016: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
38020: LD_VAR 0 4
38024: PPUSH
38025: LD_VAR 0 2
38029: PPUSH
38030: CALL_OW 180
// end else
38034: GO 38149
// if GetControl ( vehicle ) = control_remote then
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 263
38045: PUSH
38046: LD_INT 2
38048: EQUAL
38049: IFFALSE 38110
// begin wait ( 0 0$2 ) ;
38051: LD_INT 70
38053: PPUSH
38054: CALL_OW 67
// if Connect ( vehicle ) then
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL 50980 0 1
38067: IFFALSE 38108
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38069: LD_VAR 0 1
38073: PPUSH
38074: LD_EXP 109
38078: PUSH
38079: LD_VAR 0 2
38083: ARRAY
38084: PUSH
38085: LD_INT 3
38087: ARRAY
38088: PPUSH
38089: LD_EXP 109
38093: PUSH
38094: LD_VAR 0 2
38098: ARRAY
38099: PUSH
38100: LD_INT 4
38102: ARRAY
38103: PPUSH
38104: CALL_OW 171
// end else
38108: GO 38149
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38110: LD_VAR 0 1
38114: PPUSH
38115: LD_EXP 109
38119: PUSH
38120: LD_VAR 0 2
38124: ARRAY
38125: PUSH
38126: LD_INT 3
38128: ARRAY
38129: PPUSH
38130: LD_EXP 109
38134: PUSH
38135: LD_VAR 0 2
38139: ARRAY
38140: PUSH
38141: LD_INT 4
38143: ARRAY
38144: PPUSH
38145: CALL_OW 171
// end ; end ;
38149: LD_VAR 0 3
38153: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38154: LD_INT 0
38156: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38157: LD_VAR 0 1
38161: PUSH
38162: LD_INT 250
38164: EQUAL
38165: PUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL_OW 264
38175: PUSH
38176: LD_INT 81
38178: EQUAL
38179: AND
38180: IFFALSE 38201
// MinerPlaceMine ( unit , x , y ) ;
38182: LD_VAR 0 2
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: LD_VAR 0 5
38196: PPUSH
38197: CALL 41191 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38201: LD_VAR 0 1
38205: PUSH
38206: LD_INT 251
38208: EQUAL
38209: PUSH
38210: LD_VAR 0 2
38214: PPUSH
38215: CALL_OW 264
38219: PUSH
38220: LD_INT 81
38222: EQUAL
38223: AND
38224: IFFALSE 38245
// MinerDetonateMine ( unit , x , y ) ;
38226: LD_VAR 0 2
38230: PPUSH
38231: LD_VAR 0 4
38235: PPUSH
38236: LD_VAR 0 5
38240: PPUSH
38241: CALL 41466 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 252
38252: EQUAL
38253: PUSH
38254: LD_VAR 0 2
38258: PPUSH
38259: CALL_OW 264
38263: PUSH
38264: LD_INT 81
38266: EQUAL
38267: AND
38268: IFFALSE 38289
// MinerCreateMinefield ( unit , x , y ) ;
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_VAR 0 4
38279: PPUSH
38280: LD_VAR 0 5
38284: PPUSH
38285: CALL 41883 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38289: LD_VAR 0 1
38293: PUSH
38294: LD_INT 253
38296: EQUAL
38297: PUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: CALL_OW 257
38307: PUSH
38308: LD_INT 5
38310: EQUAL
38311: AND
38312: IFFALSE 38333
// ComBinocular ( unit , x , y ) ;
38314: LD_VAR 0 2
38318: PPUSH
38319: LD_VAR 0 4
38323: PPUSH
38324: LD_VAR 0 5
38328: PPUSH
38329: CALL 42252 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38333: LD_VAR 0 1
38337: PUSH
38338: LD_INT 254
38340: EQUAL
38341: PUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: CALL_OW 264
38351: PUSH
38352: LD_INT 99
38354: EQUAL
38355: AND
38356: PUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: CALL_OW 263
38366: PUSH
38367: LD_INT 3
38369: EQUAL
38370: AND
38371: IFFALSE 38387
// HackDestroyVehicle ( unit , selectedUnit ) ;
38373: LD_VAR 0 2
38377: PPUSH
38378: LD_VAR 0 3
38382: PPUSH
38383: CALL 40555 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38387: LD_VAR 0 1
38391: PUSH
38392: LD_INT 255
38394: EQUAL
38395: PUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: CALL_OW 264
38405: PUSH
38406: LD_INT 14
38408: PUSH
38409: LD_INT 53
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: IN
38416: AND
38417: PUSH
38418: LD_VAR 0 4
38422: PPUSH
38423: LD_VAR 0 5
38427: PPUSH
38428: CALL_OW 488
38432: AND
38433: IFFALSE 38457
// CutTreeXYR ( unit , x , y , 12 ) ;
38435: LD_VAR 0 2
38439: PPUSH
38440: LD_VAR 0 4
38444: PPUSH
38445: LD_VAR 0 5
38449: PPUSH
38450: LD_INT 12
38452: PPUSH
38453: CALL 38552 0 4
// if cmd = 256 then
38457: LD_VAR 0 1
38461: PUSH
38462: LD_INT 256
38464: EQUAL
38465: IFFALSE 38486
// SetFactoryWaypoint ( unit , x , y ) ;
38467: LD_VAR 0 2
38471: PPUSH
38472: LD_VAR 0 4
38476: PPUSH
38477: LD_VAR 0 5
38481: PPUSH
38482: CALL 36467 0 3
// if cmd = 257 then
38486: LD_VAR 0 1
38490: PUSH
38491: LD_INT 257
38493: EQUAL
38494: IFFALSE 38515
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_VAR 0 4
38505: PPUSH
38506: LD_VAR 0 5
38510: PPUSH
38511: CALL 36829 0 3
// if cmd = 258 then
38515: LD_VAR 0 1
38519: PUSH
38520: LD_INT 258
38522: EQUAL
38523: IFFALSE 38547
// BurnTreeXYR ( unit , x , y , 8 ) ;
38525: LD_VAR 0 2
38529: PPUSH
38530: LD_VAR 0 4
38534: PPUSH
38535: LD_VAR 0 5
38539: PPUSH
38540: LD_INT 8
38542: PPUSH
38543: CALL 38946 0 4
// end ;
38547: LD_VAR 0 6
38551: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38552: LD_INT 0
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 302
38572: NOT
38573: PUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 488
38588: NOT
38589: OR
38590: PUSH
38591: LD_VAR 0 4
38595: NOT
38596: OR
38597: IFFALSE 38601
// exit ;
38599: GO 38941
// list := [ ] ;
38601: LD_ADDR_VAR 0 13
38605: PUSH
38606: EMPTY
38607: ST_TO_ADDR
// if x - r < 0 then
38608: LD_VAR 0 2
38612: PUSH
38613: LD_VAR 0 4
38617: MINUS
38618: PUSH
38619: LD_INT 0
38621: LESS
38622: IFFALSE 38634
// min_x := 0 else
38624: LD_ADDR_VAR 0 7
38628: PUSH
38629: LD_INT 0
38631: ST_TO_ADDR
38632: GO 38650
// min_x := x - r ;
38634: LD_ADDR_VAR 0 7
38638: PUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_VAR 0 4
38648: MINUS
38649: ST_TO_ADDR
// if y - r < 0 then
38650: LD_VAR 0 3
38654: PUSH
38655: LD_VAR 0 4
38659: MINUS
38660: PUSH
38661: LD_INT 0
38663: LESS
38664: IFFALSE 38676
// min_y := 0 else
38666: LD_ADDR_VAR 0 8
38670: PUSH
38671: LD_INT 0
38673: ST_TO_ADDR
38674: GO 38692
// min_y := y - r ;
38676: LD_ADDR_VAR 0 8
38680: PUSH
38681: LD_VAR 0 3
38685: PUSH
38686: LD_VAR 0 4
38690: MINUS
38691: ST_TO_ADDR
// max_x := x + r ;
38692: LD_ADDR_VAR 0 9
38696: PUSH
38697: LD_VAR 0 2
38701: PUSH
38702: LD_VAR 0 4
38706: PLUS
38707: ST_TO_ADDR
// max_y := y + r ;
38708: LD_ADDR_VAR 0 10
38712: PUSH
38713: LD_VAR 0 3
38717: PUSH
38718: LD_VAR 0 4
38722: PLUS
38723: ST_TO_ADDR
// for _x = min_x to max_x do
38724: LD_ADDR_VAR 0 11
38728: PUSH
38729: DOUBLE
38730: LD_VAR 0 7
38734: DEC
38735: ST_TO_ADDR
38736: LD_VAR 0 9
38740: PUSH
38741: FOR_TO
38742: IFFALSE 38859
// for _y = min_y to max_y do
38744: LD_ADDR_VAR 0 12
38748: PUSH
38749: DOUBLE
38750: LD_VAR 0 8
38754: DEC
38755: ST_TO_ADDR
38756: LD_VAR 0 10
38760: PUSH
38761: FOR_TO
38762: IFFALSE 38855
// begin if not ValidHex ( _x , _y ) then
38764: LD_VAR 0 11
38768: PPUSH
38769: LD_VAR 0 12
38773: PPUSH
38774: CALL_OW 488
38778: NOT
38779: IFFALSE 38783
// continue ;
38781: GO 38761
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38783: LD_VAR 0 11
38787: PPUSH
38788: LD_VAR 0 12
38792: PPUSH
38793: CALL_OW 351
38797: PUSH
38798: LD_VAR 0 11
38802: PPUSH
38803: LD_VAR 0 12
38807: PPUSH
38808: CALL_OW 554
38812: AND
38813: IFFALSE 38853
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38815: LD_ADDR_VAR 0 13
38819: PUSH
38820: LD_VAR 0 13
38824: PPUSH
38825: LD_VAR 0 13
38829: PUSH
38830: LD_INT 1
38832: PLUS
38833: PPUSH
38834: LD_VAR 0 11
38838: PUSH
38839: LD_VAR 0 12
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PPUSH
38848: CALL_OW 2
38852: ST_TO_ADDR
// end ;
38853: GO 38761
38855: POP
38856: POP
38857: GO 38741
38859: POP
38860: POP
// if not list then
38861: LD_VAR 0 13
38865: NOT
38866: IFFALSE 38870
// exit ;
38868: GO 38941
// for i in list do
38870: LD_ADDR_VAR 0 6
38874: PUSH
38875: LD_VAR 0 13
38879: PUSH
38880: FOR_IN
38881: IFFALSE 38939
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38883: LD_VAR 0 1
38887: PPUSH
38888: LD_STRING M
38890: PUSH
38891: LD_VAR 0 6
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PUSH
38900: LD_VAR 0 6
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: PPUSH
38933: CALL_OW 447
38937: GO 38880
38939: POP
38940: POP
// end ;
38941: LD_VAR 0 5
38945: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 302
38967: NOT
38968: PUSH
38969: LD_VAR 0 2
38973: PPUSH
38974: LD_VAR 0 3
38978: PPUSH
38979: CALL_OW 488
38983: NOT
38984: OR
38985: PUSH
38986: LD_VAR 0 4
38990: NOT
38991: OR
38992: IFFALSE 38996
// exit ;
38994: GO 39509
// list := [ ] ;
38996: LD_ADDR_VAR 0 13
39000: PUSH
39001: EMPTY
39002: ST_TO_ADDR
// if x - r < 0 then
39003: LD_VAR 0 2
39007: PUSH
39008: LD_VAR 0 4
39012: MINUS
39013: PUSH
39014: LD_INT 0
39016: LESS
39017: IFFALSE 39029
// min_x := 0 else
39019: LD_ADDR_VAR 0 7
39023: PUSH
39024: LD_INT 0
39026: ST_TO_ADDR
39027: GO 39045
// min_x := x - r ;
39029: LD_ADDR_VAR 0 7
39033: PUSH
39034: LD_VAR 0 2
39038: PUSH
39039: LD_VAR 0 4
39043: MINUS
39044: ST_TO_ADDR
// if y - r < 0 then
39045: LD_VAR 0 3
39049: PUSH
39050: LD_VAR 0 4
39054: MINUS
39055: PUSH
39056: LD_INT 0
39058: LESS
39059: IFFALSE 39071
// min_y := 0 else
39061: LD_ADDR_VAR 0 8
39065: PUSH
39066: LD_INT 0
39068: ST_TO_ADDR
39069: GO 39087
// min_y := y - r ;
39071: LD_ADDR_VAR 0 8
39075: PUSH
39076: LD_VAR 0 3
39080: PUSH
39081: LD_VAR 0 4
39085: MINUS
39086: ST_TO_ADDR
// max_x := x + r ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_VAR 0 2
39096: PUSH
39097: LD_VAR 0 4
39101: PLUS
39102: ST_TO_ADDR
// max_y := y + r ;
39103: LD_ADDR_VAR 0 10
39107: PUSH
39108: LD_VAR 0 3
39112: PUSH
39113: LD_VAR 0 4
39117: PLUS
39118: ST_TO_ADDR
// for _x = min_x to max_x do
39119: LD_ADDR_VAR 0 11
39123: PUSH
39124: DOUBLE
39125: LD_VAR 0 7
39129: DEC
39130: ST_TO_ADDR
39131: LD_VAR 0 9
39135: PUSH
39136: FOR_TO
39137: IFFALSE 39254
// for _y = min_y to max_y do
39139: LD_ADDR_VAR 0 12
39143: PUSH
39144: DOUBLE
39145: LD_VAR 0 8
39149: DEC
39150: ST_TO_ADDR
39151: LD_VAR 0 10
39155: PUSH
39156: FOR_TO
39157: IFFALSE 39250
// begin if not ValidHex ( _x , _y ) then
39159: LD_VAR 0 11
39163: PPUSH
39164: LD_VAR 0 12
39168: PPUSH
39169: CALL_OW 488
39173: NOT
39174: IFFALSE 39178
// continue ;
39176: GO 39156
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39178: LD_VAR 0 11
39182: PPUSH
39183: LD_VAR 0 12
39187: PPUSH
39188: CALL_OW 351
39192: PUSH
39193: LD_VAR 0 11
39197: PPUSH
39198: LD_VAR 0 12
39202: PPUSH
39203: CALL_OW 554
39207: AND
39208: IFFALSE 39248
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39210: LD_ADDR_VAR 0 13
39214: PUSH
39215: LD_VAR 0 13
39219: PPUSH
39220: LD_VAR 0 13
39224: PUSH
39225: LD_INT 1
39227: PLUS
39228: PPUSH
39229: LD_VAR 0 11
39233: PUSH
39234: LD_VAR 0 12
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PPUSH
39243: CALL_OW 2
39247: ST_TO_ADDR
// end ;
39248: GO 39156
39250: POP
39251: POP
39252: GO 39136
39254: POP
39255: POP
// if not list then
39256: LD_VAR 0 13
39260: NOT
39261: IFFALSE 39265
// exit ;
39263: GO 39509
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39265: LD_ADDR_VAR 0 13
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_VAR 0 13
39279: PPUSH
39280: LD_INT 1
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL 48122 0 4
39290: ST_TO_ADDR
// ComStop ( flame ) ;
39291: LD_VAR 0 1
39295: PPUSH
39296: CALL_OW 141
// for i in list do
39300: LD_ADDR_VAR 0 6
39304: PUSH
39305: LD_VAR 0 13
39309: PUSH
39310: FOR_IN
39311: IFFALSE 39342
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39313: LD_VAR 0 1
39317: PPUSH
39318: LD_VAR 0 6
39322: PUSH
39323: LD_INT 1
39325: ARRAY
39326: PPUSH
39327: LD_VAR 0 6
39331: PUSH
39332: LD_INT 2
39334: ARRAY
39335: PPUSH
39336: CALL_OW 176
39340: GO 39310
39342: POP
39343: POP
// repeat wait ( 0 0$1 ) ;
39344: LD_INT 35
39346: PPUSH
39347: CALL_OW 67
// task := GetTaskList ( flame ) ;
39351: LD_ADDR_VAR 0 14
39355: PUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 437
39365: ST_TO_ADDR
// if not task then
39366: LD_VAR 0 14
39370: NOT
39371: IFFALSE 39375
// exit ;
39373: GO 39509
// if task [ 1 ] [ 1 ] <> | then
39375: LD_VAR 0 14
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PUSH
39384: LD_INT 1
39386: ARRAY
39387: PUSH
39388: LD_STRING |
39390: NONEQUAL
39391: IFFALSE 39395
// exit ;
39393: GO 39509
// _x := task [ 1 ] [ 2 ] ;
39395: LD_ADDR_VAR 0 11
39399: PUSH
39400: LD_VAR 0 14
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: PUSH
39409: LD_INT 2
39411: ARRAY
39412: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39413: LD_ADDR_VAR 0 12
39417: PUSH
39418: LD_VAR 0 14
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PUSH
39427: LD_INT 3
39429: ARRAY
39430: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39431: LD_VAR 0 11
39435: PPUSH
39436: LD_VAR 0 12
39440: PPUSH
39441: CALL_OW 351
39445: NOT
39446: PUSH
39447: LD_VAR 0 11
39451: PPUSH
39452: LD_VAR 0 12
39456: PPUSH
39457: CALL_OW 554
39461: NOT
39462: OR
39463: IFFALSE 39497
// begin task := Delete ( task , 1 ) ;
39465: LD_ADDR_VAR 0 14
39469: PUSH
39470: LD_VAR 0 14
39474: PPUSH
39475: LD_INT 1
39477: PPUSH
39478: CALL_OW 3
39482: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_VAR 0 14
39492: PPUSH
39493: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 314
39506: NOT
39507: IFFALSE 39344
// end ;
39509: LD_VAR 0 5
39513: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39514: LD_EXP 112
39518: NOT
39519: IFFALSE 39569
39521: GO 39523
39523: DISABLE
// begin initHack := true ;
39524: LD_ADDR_EXP 112
39528: PUSH
39529: LD_INT 1
39531: ST_TO_ADDR
// hackTanks := [ ] ;
39532: LD_ADDR_EXP 113
39536: PUSH
39537: EMPTY
39538: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39539: LD_ADDR_EXP 114
39543: PUSH
39544: EMPTY
39545: ST_TO_ADDR
// hackLimit := 3 ;
39546: LD_ADDR_EXP 115
39550: PUSH
39551: LD_INT 3
39553: ST_TO_ADDR
// hackDist := 12 ;
39554: LD_ADDR_EXP 116
39558: PUSH
39559: LD_INT 12
39561: ST_TO_ADDR
// hackCounter := [ ] ;
39562: LD_ADDR_EXP 117
39566: PUSH
39567: EMPTY
39568: ST_TO_ADDR
// end ;
39569: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39570: LD_EXP 112
39574: PUSH
39575: LD_INT 34
39577: PUSH
39578: LD_INT 99
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PPUSH
39585: CALL_OW 69
39589: AND
39590: IFFALSE 39843
39592: GO 39594
39594: DISABLE
39595: LD_INT 0
39597: PPUSH
39598: PPUSH
// begin enable ;
39599: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39600: LD_ADDR_VAR 0 1
39604: PUSH
39605: LD_INT 34
39607: PUSH
39608: LD_INT 99
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PPUSH
39615: CALL_OW 69
39619: PUSH
39620: FOR_IN
39621: IFFALSE 39841
// begin if not i in hackTanks then
39623: LD_VAR 0 1
39627: PUSH
39628: LD_EXP 113
39632: IN
39633: NOT
39634: IFFALSE 39717
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39636: LD_ADDR_EXP 113
39640: PUSH
39641: LD_EXP 113
39645: PPUSH
39646: LD_EXP 113
39650: PUSH
39651: LD_INT 1
39653: PLUS
39654: PPUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 1
39664: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39665: LD_ADDR_EXP 114
39669: PUSH
39670: LD_EXP 114
39674: PPUSH
39675: LD_EXP 114
39679: PUSH
39680: LD_INT 1
39682: PLUS
39683: PPUSH
39684: EMPTY
39685: PPUSH
39686: CALL_OW 1
39690: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39691: LD_ADDR_EXP 117
39695: PUSH
39696: LD_EXP 117
39700: PPUSH
39701: LD_EXP 117
39705: PUSH
39706: LD_INT 1
39708: PLUS
39709: PPUSH
39710: EMPTY
39711: PPUSH
39712: CALL_OW 1
39716: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 302
39726: NOT
39727: IFFALSE 39740
// begin HackUnlinkAll ( i ) ;
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL 39846 0 1
// continue ;
39738: GO 39620
// end ; HackCheckCapturedStatus ( i ) ;
39740: LD_VAR 0 1
39744: PPUSH
39745: CALL 40289 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39749: LD_ADDR_VAR 0 2
39753: PUSH
39754: LD_INT 81
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 255
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 33
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 91
39783: PUSH
39784: LD_VAR 0 1
39788: PUSH
39789: LD_EXP 116
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 50
39801: PUSH
39802: EMPTY
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: PPUSH
39811: CALL_OW 69
39815: ST_TO_ADDR
// if not tmp then
39816: LD_VAR 0 2
39820: NOT
39821: IFFALSE 39825
// continue ;
39823: GO 39620
// HackLink ( i , tmp ) ;
39825: LD_VAR 0 1
39829: PPUSH
39830: LD_VAR 0 2
39834: PPUSH
39835: CALL 39982 0 2
// end ;
39839: GO 39620
39841: POP
39842: POP
// end ;
39843: PPOPN 2
39845: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
39850: PPUSH
// if not hack in hackTanks then
39851: LD_VAR 0 1
39855: PUSH
39856: LD_EXP 113
39860: IN
39861: NOT
39862: IFFALSE 39866
// exit ;
39864: GO 39977
// index := GetElementIndex ( hackTanks , hack ) ;
39866: LD_ADDR_VAR 0 4
39870: PUSH
39871: LD_EXP 113
39875: PPUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL 47419 0 2
39885: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39886: LD_EXP 114
39890: PUSH
39891: LD_VAR 0 4
39895: ARRAY
39896: IFFALSE 39977
// begin for i in hackTanksCaptured [ index ] do
39898: LD_ADDR_VAR 0 3
39902: PUSH
39903: LD_EXP 114
39907: PUSH
39908: LD_VAR 0 4
39912: ARRAY
39913: PUSH
39914: FOR_IN
39915: IFFALSE 39941
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39917: LD_VAR 0 3
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PPUSH
39926: LD_VAR 0 3
39930: PUSH
39931: LD_INT 2
39933: ARRAY
39934: PPUSH
39935: CALL_OW 235
39939: GO 39914
39941: POP
39942: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39943: LD_ADDR_EXP 114
39947: PUSH
39948: LD_EXP 114
39952: PPUSH
39953: LD_VAR 0 4
39957: PPUSH
39958: EMPTY
39959: PPUSH
39960: CALL_OW 1
39964: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39965: LD_VAR 0 1
39969: PPUSH
39970: LD_INT 0
39972: PPUSH
39973: CALL_OW 505
// end ; end ;
39977: LD_VAR 0 2
39981: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39982: LD_INT 0
39984: PPUSH
39985: PPUSH
39986: PPUSH
// if not hack in hackTanks or not vehicles then
39987: LD_VAR 0 1
39991: PUSH
39992: LD_EXP 113
39996: IN
39997: NOT
39998: PUSH
39999: LD_VAR 0 2
40003: NOT
40004: OR
40005: IFFALSE 40009
// exit ;
40007: GO 40284
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40009: LD_ADDR_VAR 0 2
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: LD_VAR 0 2
40023: PPUSH
40024: LD_INT 1
40026: PPUSH
40027: LD_INT 1
40029: PPUSH
40030: CALL 48069 0 4
40034: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40035: LD_ADDR_VAR 0 5
40039: PUSH
40040: LD_EXP 113
40044: PPUSH
40045: LD_VAR 0 1
40049: PPUSH
40050: CALL 47419 0 2
40054: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40055: LD_EXP 114
40059: PUSH
40060: LD_VAR 0 5
40064: ARRAY
40065: PUSH
40066: LD_EXP 115
40070: LESS
40071: IFFALSE 40260
// begin for i := 1 to vehicles do
40073: LD_ADDR_VAR 0 4
40077: PUSH
40078: DOUBLE
40079: LD_INT 1
40081: DEC
40082: ST_TO_ADDR
40083: LD_VAR 0 2
40087: PUSH
40088: FOR_TO
40089: IFFALSE 40258
// begin if hackTanksCaptured [ index ] = hackLimit then
40091: LD_EXP 114
40095: PUSH
40096: LD_VAR 0 5
40100: ARRAY
40101: PUSH
40102: LD_EXP 115
40106: EQUAL
40107: IFFALSE 40111
// break ;
40109: GO 40258
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40111: LD_ADDR_EXP 117
40115: PUSH
40116: LD_EXP 117
40120: PPUSH
40121: LD_VAR 0 5
40125: PPUSH
40126: LD_EXP 117
40130: PUSH
40131: LD_VAR 0 5
40135: ARRAY
40136: PUSH
40137: LD_INT 1
40139: PLUS
40140: PPUSH
40141: CALL_OW 1
40145: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40146: LD_ADDR_EXP 114
40150: PUSH
40151: LD_EXP 114
40155: PPUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_EXP 114
40165: PUSH
40166: LD_VAR 0 5
40170: ARRAY
40171: PUSH
40172: LD_INT 1
40174: PLUS
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PPUSH
40180: LD_VAR 0 2
40184: PUSH
40185: LD_VAR 0 4
40189: ARRAY
40190: PUSH
40191: LD_VAR 0 2
40195: PUSH
40196: LD_VAR 0 4
40200: ARRAY
40201: PPUSH
40202: CALL_OW 255
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PPUSH
40211: CALL 47634 0 3
40215: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40216: LD_VAR 0 2
40220: PUSH
40221: LD_VAR 0 4
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 255
40236: PPUSH
40237: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40241: LD_VAR 0 2
40245: PUSH
40246: LD_VAR 0 4
40250: ARRAY
40251: PPUSH
40252: CALL_OW 141
// end ;
40256: GO 40088
40258: POP
40259: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40260: LD_VAR 0 1
40264: PPUSH
40265: LD_EXP 114
40269: PUSH
40270: LD_VAR 0 5
40274: ARRAY
40275: PUSH
40276: LD_INT 0
40278: PLUS
40279: PPUSH
40280: CALL_OW 505
// end ;
40284: LD_VAR 0 3
40288: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
// if not hack in hackTanks then
40295: LD_VAR 0 1
40299: PUSH
40300: LD_EXP 113
40304: IN
40305: NOT
40306: IFFALSE 40310
// exit ;
40308: GO 40550
// index := GetElementIndex ( hackTanks , hack ) ;
40310: LD_ADDR_VAR 0 4
40314: PUSH
40315: LD_EXP 113
40319: PPUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL 47419 0 2
40329: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: DOUBLE
40336: LD_EXP 114
40340: PUSH
40341: LD_VAR 0 4
40345: ARRAY
40346: INC
40347: ST_TO_ADDR
40348: LD_INT 1
40350: PUSH
40351: FOR_DOWNTO
40352: IFFALSE 40524
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_EXP 114
40363: PUSH
40364: LD_VAR 0 4
40368: ARRAY
40369: PUSH
40370: LD_VAR 0 3
40374: ARRAY
40375: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40376: LD_VAR 0 5
40380: PUSH
40381: LD_INT 1
40383: ARRAY
40384: PPUSH
40385: CALL_OW 302
40389: NOT
40390: PUSH
40391: LD_VAR 0 5
40395: PUSH
40396: LD_INT 1
40398: ARRAY
40399: PPUSH
40400: CALL_OW 255
40404: PUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 255
40414: NONEQUAL
40415: OR
40416: IFFALSE 40522
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40418: LD_VAR 0 5
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: PPUSH
40427: CALL_OW 305
40431: PUSH
40432: LD_VAR 0 5
40436: PUSH
40437: LD_INT 1
40439: ARRAY
40440: PPUSH
40441: CALL_OW 255
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 255
40455: EQUAL
40456: AND
40457: IFFALSE 40481
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40459: LD_VAR 0 5
40463: PUSH
40464: LD_INT 1
40466: ARRAY
40467: PPUSH
40468: LD_VAR 0 5
40472: PUSH
40473: LD_INT 2
40475: ARRAY
40476: PPUSH
40477: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40481: LD_ADDR_EXP 114
40485: PUSH
40486: LD_EXP 114
40490: PPUSH
40491: LD_VAR 0 4
40495: PPUSH
40496: LD_EXP 114
40500: PUSH
40501: LD_VAR 0 4
40505: ARRAY
40506: PPUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: CALL_OW 3
40516: PPUSH
40517: CALL_OW 1
40521: ST_TO_ADDR
// end ; end ;
40522: GO 40351
40524: POP
40525: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40526: LD_VAR 0 1
40530: PPUSH
40531: LD_EXP 114
40535: PUSH
40536: LD_VAR 0 4
40540: ARRAY
40541: PUSH
40542: LD_INT 0
40544: PLUS
40545: PPUSH
40546: CALL_OW 505
// end ;
40550: LD_VAR 0 2
40554: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40555: LD_INT 0
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
// if not hack in hackTanks then
40561: LD_VAR 0 1
40565: PUSH
40566: LD_EXP 113
40570: IN
40571: NOT
40572: IFFALSE 40576
// exit ;
40574: GO 40661
// index := GetElementIndex ( hackTanks , hack ) ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: LD_EXP 113
40585: PPUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: CALL 47419 0 2
40595: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40596: LD_ADDR_VAR 0 4
40600: PUSH
40601: DOUBLE
40602: LD_INT 1
40604: DEC
40605: ST_TO_ADDR
40606: LD_EXP 114
40610: PUSH
40611: LD_VAR 0 5
40615: ARRAY
40616: PUSH
40617: FOR_TO
40618: IFFALSE 40659
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40620: LD_EXP 114
40624: PUSH
40625: LD_VAR 0 5
40629: ARRAY
40630: PUSH
40631: LD_VAR 0 4
40635: ARRAY
40636: PUSH
40637: LD_INT 1
40639: ARRAY
40640: PUSH
40641: LD_VAR 0 2
40645: EQUAL
40646: IFFALSE 40657
// KillUnit ( vehicle ) ;
40648: LD_VAR 0 2
40652: PPUSH
40653: CALL_OW 66
40657: GO 40617
40659: POP
40660: POP
// end ;
40661: LD_VAR 0 3
40665: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40666: LD_EXP 118
40670: NOT
40671: IFFALSE 40706
40673: GO 40675
40675: DISABLE
// begin initMiner := true ;
40676: LD_ADDR_EXP 118
40680: PUSH
40681: LD_INT 1
40683: ST_TO_ADDR
// minersList := [ ] ;
40684: LD_ADDR_EXP 119
40688: PUSH
40689: EMPTY
40690: ST_TO_ADDR
// minerMinesList := [ ] ;
40691: LD_ADDR_EXP 120
40695: PUSH
40696: EMPTY
40697: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40698: LD_ADDR_EXP 121
40702: PUSH
40703: LD_INT 5
40705: ST_TO_ADDR
// end ;
40706: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40707: LD_EXP 118
40711: PUSH
40712: LD_INT 34
40714: PUSH
40715: LD_INT 81
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 69
40726: AND
40727: IFFALSE 41188
40729: GO 40731
40731: DISABLE
40732: LD_INT 0
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
// begin enable ;
40738: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40739: LD_ADDR_VAR 0 1
40743: PUSH
40744: LD_INT 34
40746: PUSH
40747: LD_INT 81
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PPUSH
40754: CALL_OW 69
40758: PUSH
40759: FOR_IN
40760: IFFALSE 40832
// begin if not i in minersList then
40762: LD_VAR 0 1
40766: PUSH
40767: LD_EXP 119
40771: IN
40772: NOT
40773: IFFALSE 40830
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40775: LD_ADDR_EXP 119
40779: PUSH
40780: LD_EXP 119
40784: PPUSH
40785: LD_EXP 119
40789: PUSH
40790: LD_INT 1
40792: PLUS
40793: PPUSH
40794: LD_VAR 0 1
40798: PPUSH
40799: CALL_OW 1
40803: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40804: LD_ADDR_EXP 120
40808: PUSH
40809: LD_EXP 120
40813: PPUSH
40814: LD_EXP 120
40818: PUSH
40819: LD_INT 1
40821: PLUS
40822: PPUSH
40823: EMPTY
40824: PPUSH
40825: CALL_OW 1
40829: ST_TO_ADDR
// end end ;
40830: GO 40759
40832: POP
40833: POP
// for i := minerMinesList downto 1 do
40834: LD_ADDR_VAR 0 1
40838: PUSH
40839: DOUBLE
40840: LD_EXP 120
40844: INC
40845: ST_TO_ADDR
40846: LD_INT 1
40848: PUSH
40849: FOR_DOWNTO
40850: IFFALSE 41186
// begin if IsLive ( minersList [ i ] ) then
40852: LD_EXP 119
40856: PUSH
40857: LD_VAR 0 1
40861: ARRAY
40862: PPUSH
40863: CALL_OW 300
40867: IFFALSE 40895
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40869: LD_EXP 119
40873: PUSH
40874: LD_VAR 0 1
40878: ARRAY
40879: PPUSH
40880: LD_EXP 120
40884: PUSH
40885: LD_VAR 0 1
40889: ARRAY
40890: PPUSH
40891: CALL_OW 505
// if not minerMinesList [ i ] then
40895: LD_EXP 120
40899: PUSH
40900: LD_VAR 0 1
40904: ARRAY
40905: NOT
40906: IFFALSE 40910
// continue ;
40908: GO 40849
// for j := minerMinesList [ i ] downto 1 do
40910: LD_ADDR_VAR 0 2
40914: PUSH
40915: DOUBLE
40916: LD_EXP 120
40920: PUSH
40921: LD_VAR 0 1
40925: ARRAY
40926: INC
40927: ST_TO_ADDR
40928: LD_INT 1
40930: PUSH
40931: FOR_DOWNTO
40932: IFFALSE 41182
// begin side := GetSide ( minersList [ i ] ) ;
40934: LD_ADDR_VAR 0 3
40938: PUSH
40939: LD_EXP 119
40943: PUSH
40944: LD_VAR 0 1
40948: ARRAY
40949: PPUSH
40950: CALL_OW 255
40954: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40955: LD_ADDR_VAR 0 4
40959: PUSH
40960: LD_EXP 120
40964: PUSH
40965: LD_VAR 0 1
40969: ARRAY
40970: PUSH
40971: LD_VAR 0 2
40975: ARRAY
40976: PUSH
40977: LD_INT 1
40979: ARRAY
40980: PPUSH
40981: LD_EXP 120
40985: PUSH
40986: LD_VAR 0 1
40990: ARRAY
40991: PUSH
40992: LD_VAR 0 2
40996: ARRAY
40997: PUSH
40998: LD_INT 2
41000: ARRAY
41001: PPUSH
41002: CALL_OW 428
41006: ST_TO_ADDR
// if not tmp then
41007: LD_VAR 0 4
41011: NOT
41012: IFFALSE 41016
// continue ;
41014: GO 40931
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41016: LD_VAR 0 4
41020: PUSH
41021: LD_INT 81
41023: PUSH
41024: LD_VAR 0 3
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 69
41037: IN
41038: PUSH
41039: LD_EXP 120
41043: PUSH
41044: LD_VAR 0 1
41048: ARRAY
41049: PUSH
41050: LD_VAR 0 2
41054: ARRAY
41055: PUSH
41056: LD_INT 1
41058: ARRAY
41059: PPUSH
41060: LD_EXP 120
41064: PUSH
41065: LD_VAR 0 1
41069: ARRAY
41070: PUSH
41071: LD_VAR 0 2
41075: ARRAY
41076: PUSH
41077: LD_INT 2
41079: ARRAY
41080: PPUSH
41081: CALL_OW 458
41085: AND
41086: IFFALSE 41180
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41088: LD_EXP 120
41092: PUSH
41093: LD_VAR 0 1
41097: ARRAY
41098: PUSH
41099: LD_VAR 0 2
41103: ARRAY
41104: PUSH
41105: LD_INT 1
41107: ARRAY
41108: PPUSH
41109: LD_EXP 120
41113: PUSH
41114: LD_VAR 0 1
41118: ARRAY
41119: PUSH
41120: LD_VAR 0 2
41124: ARRAY
41125: PUSH
41126: LD_INT 2
41128: ARRAY
41129: PPUSH
41130: LD_VAR 0 3
41134: PPUSH
41135: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41139: LD_ADDR_EXP 120
41143: PUSH
41144: LD_EXP 120
41148: PPUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: LD_EXP 120
41158: PUSH
41159: LD_VAR 0 1
41163: ARRAY
41164: PPUSH
41165: LD_VAR 0 2
41169: PPUSH
41170: CALL_OW 3
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// end ; end ;
41180: GO 40931
41182: POP
41183: POP
// end ;
41184: GO 40849
41186: POP
41187: POP
// end ;
41188: PPOPN 4
41190: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41191: LD_INT 0
41193: PPUSH
41194: PPUSH
// result := false ;
41195: LD_ADDR_VAR 0 4
41199: PUSH
41200: LD_INT 0
41202: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 264
41212: PUSH
41213: LD_INT 81
41215: EQUAL
41216: NOT
41217: IFFALSE 41221
// exit ;
41219: GO 41461
// index := GetElementIndex ( minersList , unit ) ;
41221: LD_ADDR_VAR 0 5
41225: PUSH
41226: LD_EXP 119
41230: PPUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: CALL 47419 0 2
41240: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41241: LD_EXP 120
41245: PUSH
41246: LD_VAR 0 5
41250: ARRAY
41251: PUSH
41252: LD_EXP 121
41256: GREATEREQUAL
41257: IFFALSE 41261
// exit ;
41259: GO 41461
// ComMoveXY ( unit , x , y ) ;
41261: LD_VAR 0 1
41265: PPUSH
41266: LD_VAR 0 2
41270: PPUSH
41271: LD_VAR 0 3
41275: PPUSH
41276: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41280: LD_INT 35
41282: PPUSH
41283: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41287: LD_VAR 0 1
41291: PPUSH
41292: LD_VAR 0 2
41296: PPUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: CALL 79160 0 3
41306: NOT
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 314
41317: AND
41318: IFFALSE 41322
// exit ;
41320: GO 41461
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41322: LD_VAR 0 2
41326: PPUSH
41327: LD_VAR 0 3
41331: PPUSH
41332: CALL_OW 428
41336: PUSH
41337: LD_VAR 0 1
41341: EQUAL
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 314
41352: NOT
41353: AND
41354: IFFALSE 41280
// PlaySoundXY ( x , y , PlantMine ) ;
41356: LD_VAR 0 2
41360: PPUSH
41361: LD_VAR 0 3
41365: PPUSH
41366: LD_STRING PlantMine
41368: PPUSH
41369: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41373: LD_VAR 0 2
41377: PPUSH
41378: LD_VAR 0 3
41382: PPUSH
41383: LD_VAR 0 1
41387: PPUSH
41388: CALL_OW 255
41392: PPUSH
41393: LD_INT 0
41395: PPUSH
41396: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41400: LD_ADDR_EXP 120
41404: PUSH
41405: LD_EXP 120
41409: PPUSH
41410: LD_VAR 0 5
41414: PUSH
41415: LD_EXP 120
41419: PUSH
41420: LD_VAR 0 5
41424: ARRAY
41425: PUSH
41426: LD_INT 1
41428: PLUS
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PPUSH
41434: LD_VAR 0 2
41438: PUSH
41439: LD_VAR 0 3
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PPUSH
41448: CALL 47634 0 3
41452: ST_TO_ADDR
// result := true ;
41453: LD_ADDR_VAR 0 4
41457: PUSH
41458: LD_INT 1
41460: ST_TO_ADDR
// end ;
41461: LD_VAR 0 4
41465: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41466: LD_INT 0
41468: PPUSH
41469: PPUSH
41470: PPUSH
// if not unit in minersList then
41471: LD_VAR 0 1
41475: PUSH
41476: LD_EXP 119
41480: IN
41481: NOT
41482: IFFALSE 41486
// exit ;
41484: GO 41878
// index := GetElementIndex ( minersList , unit ) ;
41486: LD_ADDR_VAR 0 6
41490: PUSH
41491: LD_EXP 119
41495: PPUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: CALL 47419 0 2
41505: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41506: LD_ADDR_VAR 0 5
41510: PUSH
41511: DOUBLE
41512: LD_EXP 120
41516: PUSH
41517: LD_VAR 0 6
41521: ARRAY
41522: INC
41523: ST_TO_ADDR
41524: LD_INT 1
41526: PUSH
41527: FOR_DOWNTO
41528: IFFALSE 41689
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41530: LD_EXP 120
41534: PUSH
41535: LD_VAR 0 6
41539: ARRAY
41540: PUSH
41541: LD_VAR 0 5
41545: ARRAY
41546: PUSH
41547: LD_INT 1
41549: ARRAY
41550: PUSH
41551: LD_VAR 0 2
41555: EQUAL
41556: PUSH
41557: LD_EXP 120
41561: PUSH
41562: LD_VAR 0 6
41566: ARRAY
41567: PUSH
41568: LD_VAR 0 5
41572: ARRAY
41573: PUSH
41574: LD_INT 2
41576: ARRAY
41577: PUSH
41578: LD_VAR 0 3
41582: EQUAL
41583: AND
41584: IFFALSE 41687
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41586: LD_EXP 120
41590: PUSH
41591: LD_VAR 0 6
41595: ARRAY
41596: PUSH
41597: LD_VAR 0 5
41601: ARRAY
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PPUSH
41607: LD_EXP 120
41611: PUSH
41612: LD_VAR 0 6
41616: ARRAY
41617: PUSH
41618: LD_VAR 0 5
41622: ARRAY
41623: PUSH
41624: LD_INT 2
41626: ARRAY
41627: PPUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 255
41637: PPUSH
41638: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41642: LD_ADDR_EXP 120
41646: PUSH
41647: LD_EXP 120
41651: PPUSH
41652: LD_VAR 0 6
41656: PPUSH
41657: LD_EXP 120
41661: PUSH
41662: LD_VAR 0 6
41666: ARRAY
41667: PPUSH
41668: LD_VAR 0 5
41672: PPUSH
41673: CALL_OW 3
41677: PPUSH
41678: CALL_OW 1
41682: ST_TO_ADDR
// exit ;
41683: POP
41684: POP
41685: GO 41878
// end ; end ;
41687: GO 41527
41689: POP
41690: POP
// for i := minerMinesList [ index ] downto 1 do
41691: LD_ADDR_VAR 0 5
41695: PUSH
41696: DOUBLE
41697: LD_EXP 120
41701: PUSH
41702: LD_VAR 0 6
41706: ARRAY
41707: INC
41708: ST_TO_ADDR
41709: LD_INT 1
41711: PUSH
41712: FOR_DOWNTO
41713: IFFALSE 41876
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41715: LD_EXP 120
41719: PUSH
41720: LD_VAR 0 6
41724: ARRAY
41725: PUSH
41726: LD_VAR 0 5
41730: ARRAY
41731: PUSH
41732: LD_INT 1
41734: ARRAY
41735: PPUSH
41736: LD_EXP 120
41740: PUSH
41741: LD_VAR 0 6
41745: ARRAY
41746: PUSH
41747: LD_VAR 0 5
41751: ARRAY
41752: PUSH
41753: LD_INT 2
41755: ARRAY
41756: PPUSH
41757: LD_VAR 0 2
41761: PPUSH
41762: LD_VAR 0 3
41766: PPUSH
41767: CALL_OW 298
41771: PUSH
41772: LD_INT 6
41774: LESS
41775: IFFALSE 41874
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41777: LD_EXP 120
41781: PUSH
41782: LD_VAR 0 6
41786: ARRAY
41787: PUSH
41788: LD_VAR 0 5
41792: ARRAY
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_EXP 120
41802: PUSH
41803: LD_VAR 0 6
41807: ARRAY
41808: PUSH
41809: LD_VAR 0 5
41813: ARRAY
41814: PUSH
41815: LD_INT 2
41817: ARRAY
41818: PPUSH
41819: LD_VAR 0 1
41823: PPUSH
41824: CALL_OW 255
41828: PPUSH
41829: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41833: LD_ADDR_EXP 120
41837: PUSH
41838: LD_EXP 120
41842: PPUSH
41843: LD_VAR 0 6
41847: PPUSH
41848: LD_EXP 120
41852: PUSH
41853: LD_VAR 0 6
41857: ARRAY
41858: PPUSH
41859: LD_VAR 0 5
41863: PPUSH
41864: CALL_OW 3
41868: PPUSH
41869: CALL_OW 1
41873: ST_TO_ADDR
// end ; end ;
41874: GO 41712
41876: POP
41877: POP
// end ;
41878: LD_VAR 0 4
41882: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41883: LD_INT 0
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 264
41903: PUSH
41904: LD_INT 81
41906: EQUAL
41907: NOT
41908: PUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_EXP 119
41918: IN
41919: NOT
41920: OR
41921: IFFALSE 41925
// exit ;
41923: GO 42247
// index := GetElementIndex ( minersList , unit ) ;
41925: LD_ADDR_VAR 0 6
41929: PUSH
41930: LD_EXP 119
41934: PPUSH
41935: LD_VAR 0 1
41939: PPUSH
41940: CALL 47419 0 2
41944: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41945: LD_ADDR_VAR 0 8
41949: PUSH
41950: LD_EXP 121
41954: PUSH
41955: LD_EXP 120
41959: PUSH
41960: LD_VAR 0 6
41964: ARRAY
41965: MINUS
41966: ST_TO_ADDR
// if not minesFreeAmount then
41967: LD_VAR 0 8
41971: NOT
41972: IFFALSE 41976
// exit ;
41974: GO 42247
// tmp := [ ] ;
41976: LD_ADDR_VAR 0 7
41980: PUSH
41981: EMPTY
41982: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: DOUBLE
41989: LD_INT 1
41991: DEC
41992: ST_TO_ADDR
41993: LD_VAR 0 8
41997: PUSH
41998: FOR_TO
41999: IFFALSE 42194
// begin _d := rand ( 0 , 5 ) ;
42001: LD_ADDR_VAR 0 11
42005: PUSH
42006: LD_INT 0
42008: PPUSH
42009: LD_INT 5
42011: PPUSH
42012: CALL_OW 12
42016: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42017: LD_ADDR_VAR 0 12
42021: PUSH
42022: LD_INT 2
42024: PPUSH
42025: LD_INT 6
42027: PPUSH
42028: CALL_OW 12
42032: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_VAR 0 2
42042: PPUSH
42043: LD_VAR 0 11
42047: PPUSH
42048: LD_VAR 0 12
42052: PPUSH
42053: CALL_OW 272
42057: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42058: LD_ADDR_VAR 0 10
42062: PUSH
42063: LD_VAR 0 3
42067: PPUSH
42068: LD_VAR 0 11
42072: PPUSH
42073: LD_VAR 0 12
42077: PPUSH
42078: CALL_OW 273
42082: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42083: LD_VAR 0 9
42087: PPUSH
42088: LD_VAR 0 10
42092: PPUSH
42093: CALL_OW 488
42097: PUSH
42098: LD_VAR 0 9
42102: PUSH
42103: LD_VAR 0 10
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_VAR 0 7
42116: IN
42117: NOT
42118: AND
42119: PUSH
42120: LD_VAR 0 9
42124: PPUSH
42125: LD_VAR 0 10
42129: PPUSH
42130: CALL_OW 458
42134: NOT
42135: AND
42136: IFFALSE 42178
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42138: LD_ADDR_VAR 0 7
42142: PUSH
42143: LD_VAR 0 7
42147: PPUSH
42148: LD_VAR 0 7
42152: PUSH
42153: LD_INT 1
42155: PLUS
42156: PPUSH
42157: LD_VAR 0 9
42161: PUSH
42162: LD_VAR 0 10
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PPUSH
42171: CALL_OW 1
42175: ST_TO_ADDR
42176: GO 42192
// i := i - 1 ;
42178: LD_ADDR_VAR 0 5
42182: PUSH
42183: LD_VAR 0 5
42187: PUSH
42188: LD_INT 1
42190: MINUS
42191: ST_TO_ADDR
// end ;
42192: GO 41998
42194: POP
42195: POP
// for i in tmp do
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_VAR 0 7
42205: PUSH
42206: FOR_IN
42207: IFFALSE 42245
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42209: LD_VAR 0 1
42213: PPUSH
42214: LD_VAR 0 5
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PPUSH
42223: LD_VAR 0 5
42227: PUSH
42228: LD_INT 2
42230: ARRAY
42231: PPUSH
42232: CALL 41191 0 3
42236: NOT
42237: IFFALSE 42243
// exit ;
42239: POP
42240: POP
42241: GO 42247
42243: GO 42206
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 4
42251: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
42252: LD_INT 0
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
// if not GetClass ( unit ) = class_sniper then
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 257
42270: PUSH
42271: LD_INT 5
42273: EQUAL
42274: NOT
42275: IFFALSE 42279
// exit ;
42277: GO 42667
// dist := 8 ;
42279: LD_ADDR_VAR 0 5
42283: PUSH
42284: LD_INT 8
42286: ST_TO_ADDR
// viewRange := 12 ;
42287: LD_ADDR_VAR 0 7
42291: PUSH
42292: LD_INT 12
42294: ST_TO_ADDR
// side := GetSide ( unit ) ;
42295: LD_ADDR_VAR 0 6
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 255
42309: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42310: LD_INT 61
42312: PPUSH
42313: LD_VAR 0 6
42317: PPUSH
42318: CALL_OW 321
42322: PUSH
42323: LD_INT 2
42325: EQUAL
42326: IFFALSE 42336
// viewRange := 16 ;
42328: LD_ADDR_VAR 0 7
42332: PUSH
42333: LD_INT 16
42335: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42336: LD_VAR 0 1
42340: PPUSH
42341: LD_VAR 0 2
42345: PPUSH
42346: LD_VAR 0 3
42350: PPUSH
42351: CALL_OW 297
42355: PUSH
42356: LD_VAR 0 5
42360: GREATER
42361: IFFALSE 42440
// begin ComMoveXY ( unit , x , y ) ;
42363: LD_VAR 0 1
42367: PPUSH
42368: LD_VAR 0 2
42372: PPUSH
42373: LD_VAR 0 3
42377: PPUSH
42378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42382: LD_INT 35
42384: PPUSH
42385: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42389: LD_VAR 0 1
42393: PPUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: LD_VAR 0 3
42403: PPUSH
42404: CALL 79160 0 3
42408: NOT
42409: IFFALSE 42413
// exit ;
42411: GO 42667
// until GetDistUnitXY ( unit , x , y ) < dist ;
42413: LD_VAR 0 1
42417: PPUSH
42418: LD_VAR 0 2
42422: PPUSH
42423: LD_VAR 0 3
42427: PPUSH
42428: CALL_OW 297
42432: PUSH
42433: LD_VAR 0 5
42437: LESS
42438: IFFALSE 42382
// end ; ComTurnXY ( unit , x , y ) ;
42440: LD_VAR 0 1
42444: PPUSH
42445: LD_VAR 0 2
42449: PPUSH
42450: LD_VAR 0 3
42454: PPUSH
42455: CALL_OW 118
// wait ( 5 ) ;
42459: LD_INT 5
42461: PPUSH
42462: CALL_OW 67
// _d := GetDir ( unit ) ;
42466: LD_ADDR_VAR 0 10
42470: PUSH
42471: LD_VAR 0 1
42475: PPUSH
42476: CALL_OW 254
42480: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42481: LD_ADDR_VAR 0 8
42485: PUSH
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 250
42495: PPUSH
42496: LD_VAR 0 10
42500: PPUSH
42501: LD_VAR 0 5
42505: PPUSH
42506: CALL_OW 272
42510: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42511: LD_ADDR_VAR 0 9
42515: PUSH
42516: LD_VAR 0 1
42520: PPUSH
42521: CALL_OW 251
42525: PPUSH
42526: LD_VAR 0 10
42530: PPUSH
42531: LD_VAR 0 5
42535: PPUSH
42536: CALL_OW 273
42540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42541: LD_VAR 0 8
42545: PPUSH
42546: LD_VAR 0 9
42550: PPUSH
42551: CALL_OW 488
42555: NOT
42556: IFFALSE 42560
// exit ;
42558: GO 42667
// ComAnimCustom ( unit , 1 ) ;
42560: LD_VAR 0 1
42564: PPUSH
42565: LD_INT 1
42567: PPUSH
42568: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42572: LD_VAR 0 8
42576: PPUSH
42577: LD_VAR 0 9
42581: PPUSH
42582: LD_VAR 0 6
42586: PPUSH
42587: LD_VAR 0 7
42591: PPUSH
42592: CALL_OW 330
// repeat wait ( 1 ) ;
42596: LD_INT 1
42598: PPUSH
42599: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 316
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 314
42622: OR
42623: PUSH
42624: LD_VAR 0 1
42628: PPUSH
42629: CALL_OW 302
42633: NOT
42634: OR
42635: PUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: CALL_OW 301
42645: OR
42646: IFFALSE 42596
// RemoveSeeing ( _x , _y , side ) ;
42648: LD_VAR 0 8
42652: PPUSH
42653: LD_VAR 0 9
42657: PPUSH
42658: LD_VAR 0 6
42662: PPUSH
42663: CALL_OW 331
// end ; end_of_file
42667: LD_VAR 0 4
42671: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42672: LD_INT 0
42674: PPUSH
42675: PPUSH
// if exist_mode then
42676: LD_VAR 0 2
42680: IFFALSE 42705
// unit := CreateCharacter ( prefix & ident ) else
42682: LD_ADDR_VAR 0 5
42686: PUSH
42687: LD_VAR 0 3
42691: PUSH
42692: LD_VAR 0 1
42696: STR
42697: PPUSH
42698: CALL_OW 34
42702: ST_TO_ADDR
42703: GO 42720
// unit := NewCharacter ( ident ) ;
42705: LD_ADDR_VAR 0 5
42709: PUSH
42710: LD_VAR 0 1
42714: PPUSH
42715: CALL_OW 25
42719: ST_TO_ADDR
// result := unit ;
42720: LD_ADDR_VAR 0 4
42724: PUSH
42725: LD_VAR 0 5
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 4
42734: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
// if not side or not nation then
42739: LD_VAR 0 1
42743: NOT
42744: PUSH
42745: LD_VAR 0 2
42749: NOT
42750: OR
42751: IFFALSE 42755
// exit ;
42753: GO 43523
// case nation of nation_american :
42755: LD_VAR 0 2
42759: PUSH
42760: LD_INT 1
42762: DOUBLE
42763: EQUAL
42764: IFTRUE 42768
42766: GO 42982
42768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42769: LD_ADDR_VAR 0 4
42773: PUSH
42774: LD_INT 35
42776: PUSH
42777: LD_INT 45
42779: PUSH
42780: LD_INT 46
42782: PUSH
42783: LD_INT 47
42785: PUSH
42786: LD_INT 82
42788: PUSH
42789: LD_INT 83
42791: PUSH
42792: LD_INT 84
42794: PUSH
42795: LD_INT 85
42797: PUSH
42798: LD_INT 86
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 6
42809: PUSH
42810: LD_INT 15
42812: PUSH
42813: LD_INT 16
42815: PUSH
42816: LD_INT 7
42818: PUSH
42819: LD_INT 12
42821: PUSH
42822: LD_INT 13
42824: PUSH
42825: LD_INT 10
42827: PUSH
42828: LD_INT 14
42830: PUSH
42831: LD_INT 20
42833: PUSH
42834: LD_INT 21
42836: PUSH
42837: LD_INT 22
42839: PUSH
42840: LD_INT 25
42842: PUSH
42843: LD_INT 32
42845: PUSH
42846: LD_INT 27
42848: PUSH
42849: LD_INT 36
42851: PUSH
42852: LD_INT 69
42854: PUSH
42855: LD_INT 39
42857: PUSH
42858: LD_INT 34
42860: PUSH
42861: LD_INT 40
42863: PUSH
42864: LD_INT 48
42866: PUSH
42867: LD_INT 49
42869: PUSH
42870: LD_INT 50
42872: PUSH
42873: LD_INT 51
42875: PUSH
42876: LD_INT 52
42878: PUSH
42879: LD_INT 53
42881: PUSH
42882: LD_INT 54
42884: PUSH
42885: LD_INT 55
42887: PUSH
42888: LD_INT 56
42890: PUSH
42891: LD_INT 57
42893: PUSH
42894: LD_INT 58
42896: PUSH
42897: LD_INT 59
42899: PUSH
42900: LD_INT 60
42902: PUSH
42903: LD_INT 61
42905: PUSH
42906: LD_INT 62
42908: PUSH
42909: LD_INT 80
42911: PUSH
42912: LD_INT 82
42914: PUSH
42915: LD_INT 83
42917: PUSH
42918: LD_INT 84
42920: PUSH
42921: LD_INT 85
42923: PUSH
42924: LD_INT 86
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
42980: GO 43447
42982: LD_INT 2
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43216
42990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_INT 35
42998: PUSH
42999: LD_INT 45
43001: PUSH
43002: LD_INT 46
43004: PUSH
43005: LD_INT 47
43007: PUSH
43008: LD_INT 82
43010: PUSH
43011: LD_INT 83
43013: PUSH
43014: LD_INT 84
43016: PUSH
43017: LD_INT 85
43019: PUSH
43020: LD_INT 87
43022: PUSH
43023: LD_INT 70
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 11
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: LD_INT 5
43040: PUSH
43041: LD_INT 6
43043: PUSH
43044: LD_INT 15
43046: PUSH
43047: LD_INT 18
43049: PUSH
43050: LD_INT 7
43052: PUSH
43053: LD_INT 17
43055: PUSH
43056: LD_INT 8
43058: PUSH
43059: LD_INT 20
43061: PUSH
43062: LD_INT 21
43064: PUSH
43065: LD_INT 22
43067: PUSH
43068: LD_INT 72
43070: PUSH
43071: LD_INT 26
43073: PUSH
43074: LD_INT 69
43076: PUSH
43077: LD_INT 39
43079: PUSH
43080: LD_INT 40
43082: PUSH
43083: LD_INT 41
43085: PUSH
43086: LD_INT 42
43088: PUSH
43089: LD_INT 43
43091: PUSH
43092: LD_INT 48
43094: PUSH
43095: LD_INT 49
43097: PUSH
43098: LD_INT 50
43100: PUSH
43101: LD_INT 51
43103: PUSH
43104: LD_INT 52
43106: PUSH
43107: LD_INT 53
43109: PUSH
43110: LD_INT 54
43112: PUSH
43113: LD_INT 55
43115: PUSH
43116: LD_INT 56
43118: PUSH
43119: LD_INT 60
43121: PUSH
43122: LD_INT 61
43124: PUSH
43125: LD_INT 62
43127: PUSH
43128: LD_INT 66
43130: PUSH
43131: LD_INT 67
43133: PUSH
43134: LD_INT 68
43136: PUSH
43137: LD_INT 81
43139: PUSH
43140: LD_INT 82
43142: PUSH
43143: LD_INT 83
43145: PUSH
43146: LD_INT 84
43148: PUSH
43149: LD_INT 85
43151: PUSH
43152: LD_INT 87
43154: PUSH
43155: LD_INT 88
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
43214: GO 43447
43216: LD_INT 3
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43446
43224: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43225: LD_ADDR_VAR 0 4
43229: PUSH
43230: LD_INT 46
43232: PUSH
43233: LD_INT 47
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 82
43244: PUSH
43245: LD_INT 83
43247: PUSH
43248: LD_INT 84
43250: PUSH
43251: LD_INT 85
43253: PUSH
43254: LD_INT 86
43256: PUSH
43257: LD_INT 11
43259: PUSH
43260: LD_INT 9
43262: PUSH
43263: LD_INT 20
43265: PUSH
43266: LD_INT 19
43268: PUSH
43269: LD_INT 21
43271: PUSH
43272: LD_INT 24
43274: PUSH
43275: LD_INT 22
43277: PUSH
43278: LD_INT 25
43280: PUSH
43281: LD_INT 28
43283: PUSH
43284: LD_INT 29
43286: PUSH
43287: LD_INT 30
43289: PUSH
43290: LD_INT 31
43292: PUSH
43293: LD_INT 37
43295: PUSH
43296: LD_INT 38
43298: PUSH
43299: LD_INT 32
43301: PUSH
43302: LD_INT 27
43304: PUSH
43305: LD_INT 33
43307: PUSH
43308: LD_INT 69
43310: PUSH
43311: LD_INT 39
43313: PUSH
43314: LD_INT 34
43316: PUSH
43317: LD_INT 40
43319: PUSH
43320: LD_INT 71
43322: PUSH
43323: LD_INT 23
43325: PUSH
43326: LD_INT 44
43328: PUSH
43329: LD_INT 48
43331: PUSH
43332: LD_INT 49
43334: PUSH
43335: LD_INT 50
43337: PUSH
43338: LD_INT 51
43340: PUSH
43341: LD_INT 52
43343: PUSH
43344: LD_INT 53
43346: PUSH
43347: LD_INT 54
43349: PUSH
43350: LD_INT 55
43352: PUSH
43353: LD_INT 56
43355: PUSH
43356: LD_INT 57
43358: PUSH
43359: LD_INT 58
43361: PUSH
43362: LD_INT 59
43364: PUSH
43365: LD_INT 63
43367: PUSH
43368: LD_INT 64
43370: PUSH
43371: LD_INT 65
43373: PUSH
43374: LD_INT 82
43376: PUSH
43377: LD_INT 83
43379: PUSH
43380: LD_INT 84
43382: PUSH
43383: LD_INT 85
43385: PUSH
43386: LD_INT 86
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
43444: GO 43447
43446: POP
// if state > - 1 and state < 3 then
43447: LD_VAR 0 3
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: GREATER
43456: PUSH
43457: LD_VAR 0 3
43461: PUSH
43462: LD_INT 3
43464: LESS
43465: AND
43466: IFFALSE 43523
// for i in result do
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: LD_VAR 0 4
43477: PUSH
43478: FOR_IN
43479: IFFALSE 43521
// if GetTech ( i , side ) <> state then
43481: LD_VAR 0 5
43485: PPUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 321
43495: PUSH
43496: LD_VAR 0 3
43500: NONEQUAL
43501: IFFALSE 43519
// result := result diff i ;
43503: LD_ADDR_VAR 0 4
43507: PUSH
43508: LD_VAR 0 4
43512: PUSH
43513: LD_VAR 0 5
43517: DIFF
43518: ST_TO_ADDR
43519: GO 43478
43521: POP
43522: POP
// end ;
43523: LD_VAR 0 4
43527: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43528: LD_INT 0
43530: PPUSH
43531: PPUSH
43532: PPUSH
// result := true ;
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 1
43540: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43541: LD_ADDR_VAR 0 5
43545: PUSH
43546: LD_VAR 0 2
43550: PPUSH
43551: CALL_OW 480
43555: ST_TO_ADDR
// if not tmp then
43556: LD_VAR 0 5
43560: NOT
43561: IFFALSE 43565
// exit ;
43563: GO 43614
// for i in tmp do
43565: LD_ADDR_VAR 0 4
43569: PUSH
43570: LD_VAR 0 5
43574: PUSH
43575: FOR_IN
43576: IFFALSE 43612
// if GetTech ( i , side ) <> state_researched then
43578: LD_VAR 0 4
43582: PPUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL_OW 321
43592: PUSH
43593: LD_INT 2
43595: NONEQUAL
43596: IFFALSE 43610
// begin result := false ;
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: LD_INT 0
43605: ST_TO_ADDR
// exit ;
43606: POP
43607: POP
43608: GO 43614
// end ;
43610: GO 43575
43612: POP
43613: POP
// end ;
43614: LD_VAR 0 3
43618: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43619: LD_INT 0
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43634: LD_VAR 0 1
43638: NOT
43639: PUSH
43640: LD_VAR 0 1
43644: PPUSH
43645: CALL_OW 257
43649: PUSH
43650: LD_INT 9
43652: NONEQUAL
43653: OR
43654: IFFALSE 43658
// exit ;
43656: GO 44231
// side := GetSide ( unit ) ;
43658: LD_ADDR_VAR 0 9
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 255
43672: ST_TO_ADDR
// tech_space := tech_spacanom ;
43673: LD_ADDR_VAR 0 12
43677: PUSH
43678: LD_INT 29
43680: ST_TO_ADDR
// tech_time := tech_taurad ;
43681: LD_ADDR_VAR 0 13
43685: PUSH
43686: LD_INT 28
43688: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43689: LD_ADDR_VAR 0 11
43693: PUSH
43694: LD_VAR 0 1
43698: PPUSH
43699: CALL_OW 310
43703: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43704: LD_VAR 0 11
43708: PPUSH
43709: CALL_OW 247
43713: PUSH
43714: LD_INT 2
43716: EQUAL
43717: IFFALSE 43721
// exit ;
43719: GO 44231
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43721: LD_ADDR_VAR 0 8
43725: PUSH
43726: LD_INT 81
43728: PUSH
43729: LD_VAR 0 9
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 21
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PPUSH
43759: CALL_OW 69
43763: ST_TO_ADDR
// if not tmp then
43764: LD_VAR 0 8
43768: NOT
43769: IFFALSE 43773
// exit ;
43771: GO 44231
// if in_unit then
43773: LD_VAR 0 11
43777: IFFALSE 43801
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43779: LD_ADDR_VAR 0 10
43783: PUSH
43784: LD_VAR 0 8
43788: PPUSH
43789: LD_VAR 0 11
43793: PPUSH
43794: CALL_OW 74
43798: ST_TO_ADDR
43799: GO 43821
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43801: LD_ADDR_VAR 0 10
43805: PUSH
43806: LD_VAR 0 8
43810: PPUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 74
43820: ST_TO_ADDR
// if not enemy then
43821: LD_VAR 0 10
43825: NOT
43826: IFFALSE 43830
// exit ;
43828: GO 44231
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43830: LD_VAR 0 11
43834: PUSH
43835: LD_VAR 0 11
43839: PPUSH
43840: LD_VAR 0 10
43844: PPUSH
43845: CALL_OW 296
43849: PUSH
43850: LD_INT 13
43852: GREATER
43853: AND
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: LD_VAR 0 10
43864: PPUSH
43865: CALL_OW 296
43869: PUSH
43870: LD_INT 12
43872: GREATER
43873: OR
43874: IFFALSE 43878
// exit ;
43876: GO 44231
// missile := [ 1 ] ;
43878: LD_ADDR_VAR 0 14
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: EMPTY
43887: LIST
43888: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43889: LD_VAR 0 9
43893: PPUSH
43894: LD_VAR 0 12
43898: PPUSH
43899: CALL_OW 325
43903: IFFALSE 43932
// missile := Replace ( missile , missile + 1 , 2 ) ;
43905: LD_ADDR_VAR 0 14
43909: PUSH
43910: LD_VAR 0 14
43914: PPUSH
43915: LD_VAR 0 14
43919: PUSH
43920: LD_INT 1
43922: PLUS
43923: PPUSH
43924: LD_INT 2
43926: PPUSH
43927: CALL_OW 1
43931: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43932: LD_VAR 0 9
43936: PPUSH
43937: LD_VAR 0 13
43941: PPUSH
43942: CALL_OW 325
43946: PUSH
43947: LD_VAR 0 10
43951: PPUSH
43952: CALL_OW 255
43956: PPUSH
43957: LD_VAR 0 13
43961: PPUSH
43962: CALL_OW 325
43966: NOT
43967: AND
43968: IFFALSE 43997
// missile := Replace ( missile , missile + 1 , 3 ) ;
43970: LD_ADDR_VAR 0 14
43974: PUSH
43975: LD_VAR 0 14
43979: PPUSH
43980: LD_VAR 0 14
43984: PUSH
43985: LD_INT 1
43987: PLUS
43988: PPUSH
43989: LD_INT 3
43991: PPUSH
43992: CALL_OW 1
43996: ST_TO_ADDR
// if missile < 2 then
43997: LD_VAR 0 14
44001: PUSH
44002: LD_INT 2
44004: LESS
44005: IFFALSE 44009
// exit ;
44007: GO 44231
// x := GetX ( enemy ) ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: LD_VAR 0 10
44018: PPUSH
44019: CALL_OW 250
44023: ST_TO_ADDR
// y := GetY ( enemy ) ;
44024: LD_ADDR_VAR 0 5
44028: PUSH
44029: LD_VAR 0 10
44033: PPUSH
44034: CALL_OW 251
44038: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44039: LD_ADDR_VAR 0 6
44043: PUSH
44044: LD_VAR 0 4
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PPUSH
44053: LD_INT 1
44055: PPUSH
44056: CALL_OW 12
44060: PLUS
44061: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44062: LD_ADDR_VAR 0 7
44066: PUSH
44067: LD_VAR 0 5
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PPUSH
44076: LD_INT 1
44078: PPUSH
44079: CALL_OW 12
44083: PLUS
44084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44085: LD_VAR 0 6
44089: PPUSH
44090: LD_VAR 0 7
44094: PPUSH
44095: CALL_OW 488
44099: NOT
44100: IFFALSE 44122
// begin _x := x ;
44102: LD_ADDR_VAR 0 6
44106: PUSH
44107: LD_VAR 0 4
44111: ST_TO_ADDR
// _y := y ;
44112: LD_ADDR_VAR 0 7
44116: PUSH
44117: LD_VAR 0 5
44121: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44122: LD_ADDR_VAR 0 3
44126: PUSH
44127: LD_INT 1
44129: PPUSH
44130: LD_VAR 0 14
44134: PPUSH
44135: CALL_OW 12
44139: ST_TO_ADDR
// case i of 1 :
44140: LD_VAR 0 3
44144: PUSH
44145: LD_INT 1
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44170
44153: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44154: LD_VAR 0 1
44158: PPUSH
44159: LD_VAR 0 10
44163: PPUSH
44164: CALL_OW 115
44168: GO 44231
44170: LD_INT 2
44172: DOUBLE
44173: EQUAL
44174: IFTRUE 44178
44176: GO 44200
44178: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44179: LD_VAR 0 1
44183: PPUSH
44184: LD_VAR 0 6
44188: PPUSH
44189: LD_VAR 0 7
44193: PPUSH
44194: CALL_OW 153
44198: GO 44231
44200: LD_INT 3
44202: DOUBLE
44203: EQUAL
44204: IFTRUE 44208
44206: GO 44230
44208: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44209: LD_VAR 0 1
44213: PPUSH
44214: LD_VAR 0 6
44218: PPUSH
44219: LD_VAR 0 7
44223: PPUSH
44224: CALL_OW 154
44228: GO 44231
44230: POP
// end ;
44231: LD_VAR 0 2
44235: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44236: LD_INT 0
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
// if not unit or not building then
44244: LD_VAR 0 1
44248: NOT
44249: PUSH
44250: LD_VAR 0 2
44254: NOT
44255: OR
44256: IFFALSE 44260
// exit ;
44258: GO 44418
// x := GetX ( building ) ;
44260: LD_ADDR_VAR 0 5
44264: PUSH
44265: LD_VAR 0 2
44269: PPUSH
44270: CALL_OW 250
44274: ST_TO_ADDR
// y := GetY ( building ) ;
44275: LD_ADDR_VAR 0 6
44279: PUSH
44280: LD_VAR 0 2
44284: PPUSH
44285: CALL_OW 251
44289: ST_TO_ADDR
// for i = 0 to 5 do
44290: LD_ADDR_VAR 0 4
44294: PUSH
44295: DOUBLE
44296: LD_INT 0
44298: DEC
44299: ST_TO_ADDR
44300: LD_INT 5
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44416
// begin _x := ShiftX ( x , i , 3 ) ;
44306: LD_ADDR_VAR 0 7
44310: PUSH
44311: LD_VAR 0 5
44315: PPUSH
44316: LD_VAR 0 4
44320: PPUSH
44321: LD_INT 3
44323: PPUSH
44324: CALL_OW 272
44328: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44329: LD_ADDR_VAR 0 8
44333: PUSH
44334: LD_VAR 0 6
44338: PPUSH
44339: LD_VAR 0 4
44343: PPUSH
44344: LD_INT 3
44346: PPUSH
44347: CALL_OW 273
44351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44352: LD_VAR 0 7
44356: PPUSH
44357: LD_VAR 0 8
44361: PPUSH
44362: CALL_OW 488
44366: NOT
44367: IFFALSE 44371
// continue ;
44369: GO 44303
// if HexInfo ( _x , _y ) = 0 then
44371: LD_VAR 0 7
44375: PPUSH
44376: LD_VAR 0 8
44380: PPUSH
44381: CALL_OW 428
44385: PUSH
44386: LD_INT 0
44388: EQUAL
44389: IFFALSE 44414
// begin ComMoveXY ( unit , _x , _y ) ;
44391: LD_VAR 0 1
44395: PPUSH
44396: LD_VAR 0 7
44400: PPUSH
44401: LD_VAR 0 8
44405: PPUSH
44406: CALL_OW 111
// exit ;
44410: POP
44411: POP
44412: GO 44418
// end ; end ;
44414: GO 44303
44416: POP
44417: POP
// end ;
44418: LD_VAR 0 3
44422: RET
// export function ScanBase ( side , base_area ) ; begin
44423: LD_INT 0
44425: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44426: LD_ADDR_VAR 0 3
44430: PUSH
44431: LD_VAR 0 2
44435: PPUSH
44436: LD_INT 81
44438: PUSH
44439: LD_VAR 0 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PPUSH
44448: CALL_OW 70
44452: ST_TO_ADDR
// end ;
44453: LD_VAR 0 3
44457: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44458: LD_INT 0
44460: PPUSH
44461: PPUSH
44462: PPUSH
44463: PPUSH
// result := false ;
44464: LD_ADDR_VAR 0 2
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// side := GetSide ( unit ) ;
44472: LD_ADDR_VAR 0 3
44476: PUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 255
44486: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44487: LD_ADDR_VAR 0 4
44491: PUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 248
44501: ST_TO_ADDR
// case nat of 1 :
44502: LD_VAR 0 4
44506: PUSH
44507: LD_INT 1
44509: DOUBLE
44510: EQUAL
44511: IFTRUE 44515
44513: GO 44526
44515: POP
// tech := tech_lassight ; 2 :
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_INT 12
44523: ST_TO_ADDR
44524: GO 44565
44526: LD_INT 2
44528: DOUBLE
44529: EQUAL
44530: IFTRUE 44534
44532: GO 44545
44534: POP
// tech := tech_mortar ; 3 :
44535: LD_ADDR_VAR 0 5
44539: PUSH
44540: LD_INT 41
44542: ST_TO_ADDR
44543: GO 44565
44545: LD_INT 3
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44564
44553: POP
// tech := tech_bazooka ; end ;
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_INT 44
44561: ST_TO_ADDR
44562: GO 44565
44564: POP
// if Researched ( side , tech ) then
44565: LD_VAR 0 3
44569: PPUSH
44570: LD_VAR 0 5
44574: PPUSH
44575: CALL_OW 325
44579: IFFALSE 44606
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44581: LD_ADDR_VAR 0 2
44585: PUSH
44586: LD_INT 5
44588: PUSH
44589: LD_INT 8
44591: PUSH
44592: LD_INT 9
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: PUSH
44600: LD_VAR 0 4
44604: ARRAY
44605: ST_TO_ADDR
// end ;
44606: LD_VAR 0 2
44610: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44611: LD_INT 0
44613: PPUSH
44614: PPUSH
44615: PPUSH
// if not mines then
44616: LD_VAR 0 2
44620: NOT
44621: IFFALSE 44625
// exit ;
44623: GO 44769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44625: LD_ADDR_VAR 0 5
44629: PUSH
44630: LD_INT 81
44632: PUSH
44633: LD_VAR 0 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 21
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PPUSH
44663: CALL_OW 69
44667: ST_TO_ADDR
// for i in mines do
44668: LD_ADDR_VAR 0 4
44672: PUSH
44673: LD_VAR 0 2
44677: PUSH
44678: FOR_IN
44679: IFFALSE 44767
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44681: LD_VAR 0 4
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: PPUSH
44690: LD_VAR 0 4
44694: PUSH
44695: LD_INT 2
44697: ARRAY
44698: PPUSH
44699: CALL_OW 458
44703: NOT
44704: IFFALSE 44708
// continue ;
44706: GO 44678
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44708: LD_VAR 0 4
44712: PUSH
44713: LD_INT 1
44715: ARRAY
44716: PPUSH
44717: LD_VAR 0 4
44721: PUSH
44722: LD_INT 2
44724: ARRAY
44725: PPUSH
44726: CALL_OW 428
44730: PUSH
44731: LD_VAR 0 5
44735: IN
44736: IFFALSE 44765
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44738: LD_VAR 0 4
44742: PUSH
44743: LD_INT 1
44745: ARRAY
44746: PPUSH
44747: LD_VAR 0 4
44751: PUSH
44752: LD_INT 2
44754: ARRAY
44755: PPUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: CALL_OW 456
// end ;
44765: GO 44678
44767: POP
44768: POP
// end ;
44769: LD_VAR 0 3
44773: RET
// export function Count ( array ) ; begin
44774: LD_INT 0
44776: PPUSH
// result := array + 0 ;
44777: LD_ADDR_VAR 0 2
44781: PUSH
44782: LD_VAR 0 1
44786: PUSH
44787: LD_INT 0
44789: PLUS
44790: ST_TO_ADDR
// end ;
44791: LD_VAR 0 2
44795: RET
// export function IsEmpty ( building ) ; begin
44796: LD_INT 0
44798: PPUSH
// if not building then
44799: LD_VAR 0 1
44803: NOT
44804: IFFALSE 44808
// exit ;
44806: GO 44851
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44808: LD_ADDR_VAR 0 2
44812: PUSH
44813: LD_VAR 0 1
44817: PUSH
44818: LD_INT 22
44820: PUSH
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 255
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 58
44837: PUSH
44838: EMPTY
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PPUSH
44845: CALL_OW 69
44849: IN
44850: ST_TO_ADDR
// end ;
44851: LD_VAR 0 2
44855: RET
// export function IsNotFull ( building ) ; var places ; begin
44856: LD_INT 0
44858: PPUSH
44859: PPUSH
// if not building then
44860: LD_VAR 0 1
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 44897
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44869: LD_ADDR_VAR 0 2
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 62
44884: PUSH
44885: EMPTY
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PPUSH
44892: CALL_OW 72
44896: ST_TO_ADDR
// end ;
44897: LD_VAR 0 2
44901: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44902: LD_INT 0
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
// tmp := [ ] ;
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: EMPTY
44914: ST_TO_ADDR
// list := [ ] ;
44915: LD_ADDR_VAR 0 5
44919: PUSH
44920: EMPTY
44921: ST_TO_ADDR
// for i = 16 to 25 do
44922: LD_ADDR_VAR 0 4
44926: PUSH
44927: DOUBLE
44928: LD_INT 16
44930: DEC
44931: ST_TO_ADDR
44932: LD_INT 25
44934: PUSH
44935: FOR_TO
44936: IFFALSE 45009
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44938: LD_ADDR_VAR 0 3
44942: PUSH
44943: LD_VAR 0 3
44947: PUSH
44948: LD_INT 22
44950: PUSH
44951: LD_VAR 0 1
44955: PPUSH
44956: CALL_OW 255
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 91
44967: PUSH
44968: LD_VAR 0 1
44972: PUSH
44973: LD_INT 6
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 30
44983: PUSH
44984: LD_VAR 0 4
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: PPUSH
45001: CALL_OW 69
45005: ADD
45006: ST_TO_ADDR
45007: GO 44935
45009: POP
45010: POP
// for i = 1 to tmp do
45011: LD_ADDR_VAR 0 4
45015: PUSH
45016: DOUBLE
45017: LD_INT 1
45019: DEC
45020: ST_TO_ADDR
45021: LD_VAR 0 3
45025: PUSH
45026: FOR_TO
45027: IFFALSE 45115
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_VAR 0 5
45038: PUSH
45039: LD_VAR 0 3
45043: PUSH
45044: LD_VAR 0 4
45048: ARRAY
45049: PPUSH
45050: CALL_OW 266
45054: PUSH
45055: LD_VAR 0 3
45059: PUSH
45060: LD_VAR 0 4
45064: ARRAY
45065: PPUSH
45066: CALL_OW 250
45070: PUSH
45071: LD_VAR 0 3
45075: PUSH
45076: LD_VAR 0 4
45080: ARRAY
45081: PPUSH
45082: CALL_OW 251
45086: PUSH
45087: LD_VAR 0 3
45091: PUSH
45092: LD_VAR 0 4
45096: ARRAY
45097: PPUSH
45098: CALL_OW 254
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: ADD
45112: ST_TO_ADDR
45113: GO 45026
45115: POP
45116: POP
// result := list ;
45117: LD_ADDR_VAR 0 2
45121: PUSH
45122: LD_VAR 0 5
45126: ST_TO_ADDR
// end ;
45127: LD_VAR 0 2
45131: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45132: LD_INT 0
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
// if not factory then
45141: LD_VAR 0 1
45145: NOT
45146: IFFALSE 45150
// exit ;
45148: GO 45743
// if control = control_apeman then
45150: LD_VAR 0 4
45154: PUSH
45155: LD_INT 5
45157: EQUAL
45158: IFFALSE 45267
// begin tmp := UnitsInside ( factory ) ;
45160: LD_ADDR_VAR 0 8
45164: PUSH
45165: LD_VAR 0 1
45169: PPUSH
45170: CALL_OW 313
45174: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45175: LD_VAR 0 8
45179: PPUSH
45180: LD_INT 25
45182: PUSH
45183: LD_INT 12
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PPUSH
45190: CALL_OW 72
45194: NOT
45195: IFFALSE 45205
// control := control_manual ;
45197: LD_ADDR_VAR 0 4
45201: PUSH
45202: LD_INT 1
45204: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45205: LD_ADDR_VAR 0 8
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL 44902 0 1
45219: ST_TO_ADDR
// if tmp then
45220: LD_VAR 0 8
45224: IFFALSE 45267
// begin for i in tmp do
45226: LD_ADDR_VAR 0 7
45230: PUSH
45231: LD_VAR 0 8
45235: PUSH
45236: FOR_IN
45237: IFFALSE 45265
// if i [ 1 ] = b_ext_radio then
45239: LD_VAR 0 7
45243: PUSH
45244: LD_INT 1
45246: ARRAY
45247: PUSH
45248: LD_INT 22
45250: EQUAL
45251: IFFALSE 45263
// begin control := control_remote ;
45253: LD_ADDR_VAR 0 4
45257: PUSH
45258: LD_INT 2
45260: ST_TO_ADDR
// break ;
45261: GO 45265
// end ;
45263: GO 45236
45265: POP
45266: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45267: LD_VAR 0 1
45271: PPUSH
45272: LD_VAR 0 2
45276: PPUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: LD_VAR 0 5
45291: PPUSH
45292: CALL_OW 448
45296: IFFALSE 45331
// begin result := [ chassis , engine , control , weapon ] ;
45298: LD_ADDR_VAR 0 6
45302: PUSH
45303: LD_VAR 0 2
45307: PUSH
45308: LD_VAR 0 3
45312: PUSH
45313: LD_VAR 0 4
45317: PUSH
45318: LD_VAR 0 5
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// exit ;
45329: GO 45743
// end ; _chassis := AvailableChassisList ( factory ) ;
45331: LD_ADDR_VAR 0 9
45335: PUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 475
45345: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45346: LD_ADDR_VAR 0 11
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 476
45360: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45361: LD_ADDR_VAR 0 12
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 477
45375: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45376: LD_ADDR_VAR 0 10
45380: PUSH
45381: LD_VAR 0 1
45385: PPUSH
45386: CALL_OW 478
45390: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45391: LD_VAR 0 9
45395: NOT
45396: PUSH
45397: LD_VAR 0 11
45401: NOT
45402: OR
45403: PUSH
45404: LD_VAR 0 12
45408: NOT
45409: OR
45410: PUSH
45411: LD_VAR 0 10
45415: NOT
45416: OR
45417: IFFALSE 45452
// begin result := [ chassis , engine , control , weapon ] ;
45419: LD_ADDR_VAR 0 6
45423: PUSH
45424: LD_VAR 0 2
45428: PUSH
45429: LD_VAR 0 3
45433: PUSH
45434: LD_VAR 0 4
45438: PUSH
45439: LD_VAR 0 5
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// exit ;
45450: GO 45743
// end ; if not chassis in _chassis then
45452: LD_VAR 0 2
45456: PUSH
45457: LD_VAR 0 9
45461: IN
45462: NOT
45463: IFFALSE 45489
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45465: LD_ADDR_VAR 0 2
45469: PUSH
45470: LD_VAR 0 9
45474: PUSH
45475: LD_INT 1
45477: PPUSH
45478: LD_VAR 0 9
45482: PPUSH
45483: CALL_OW 12
45487: ARRAY
45488: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45489: LD_VAR 0 2
45493: PPUSH
45494: LD_VAR 0 3
45498: PPUSH
45499: CALL 45748 0 2
45503: NOT
45504: IFFALSE 45563
// repeat engine := _engine [ 1 ] ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_VAR 0 11
45515: PUSH
45516: LD_INT 1
45518: ARRAY
45519: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45520: LD_ADDR_VAR 0 11
45524: PUSH
45525: LD_VAR 0 11
45529: PPUSH
45530: LD_INT 1
45532: PPUSH
45533: CALL_OW 3
45537: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45538: LD_VAR 0 2
45542: PPUSH
45543: LD_VAR 0 3
45547: PPUSH
45548: CALL 45748 0 2
45552: PUSH
45553: LD_VAR 0 11
45557: PUSH
45558: EMPTY
45559: EQUAL
45560: OR
45561: IFFALSE 45506
// if not control in _control then
45563: LD_VAR 0 4
45567: PUSH
45568: LD_VAR 0 12
45572: IN
45573: NOT
45574: IFFALSE 45600
// control := _control [ rand ( 1 , _control ) ] ;
45576: LD_ADDR_VAR 0 4
45580: PUSH
45581: LD_VAR 0 12
45585: PUSH
45586: LD_INT 1
45588: PPUSH
45589: LD_VAR 0 12
45593: PPUSH
45594: CALL_OW 12
45598: ARRAY
45599: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45600: LD_VAR 0 2
45604: PPUSH
45605: LD_VAR 0 5
45609: PPUSH
45610: CALL 45968 0 2
45614: NOT
45615: IFFALSE 45674
// repeat weapon := _weapon [ 1 ] ;
45617: LD_ADDR_VAR 0 5
45621: PUSH
45622: LD_VAR 0 10
45626: PUSH
45627: LD_INT 1
45629: ARRAY
45630: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45631: LD_ADDR_VAR 0 10
45635: PUSH
45636: LD_VAR 0 10
45640: PPUSH
45641: LD_INT 1
45643: PPUSH
45644: CALL_OW 3
45648: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45649: LD_VAR 0 2
45653: PPUSH
45654: LD_VAR 0 5
45658: PPUSH
45659: CALL 45968 0 2
45663: PUSH
45664: LD_VAR 0 10
45668: PUSH
45669: EMPTY
45670: EQUAL
45671: OR
45672: IFFALSE 45617
// result := [ ] ;
45674: LD_ADDR_VAR 0 6
45678: PUSH
45679: EMPTY
45680: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45681: LD_VAR 0 1
45685: PPUSH
45686: LD_VAR 0 2
45690: PPUSH
45691: LD_VAR 0 3
45695: PPUSH
45696: LD_VAR 0 4
45700: PPUSH
45701: LD_VAR 0 5
45705: PPUSH
45706: CALL_OW 448
45710: IFFALSE 45743
// result := [ chassis , engine , control , weapon ] ;
45712: LD_ADDR_VAR 0 6
45716: PUSH
45717: LD_VAR 0 2
45721: PUSH
45722: LD_VAR 0 3
45726: PUSH
45727: LD_VAR 0 4
45731: PUSH
45732: LD_VAR 0 5
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// end ;
45743: LD_VAR 0 6
45747: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45748: LD_INT 0
45750: PPUSH
// if not chassis or not engine then
45751: LD_VAR 0 1
45755: NOT
45756: PUSH
45757: LD_VAR 0 2
45761: NOT
45762: OR
45763: IFFALSE 45767
// exit ;
45765: GO 45963
// case engine of engine_solar :
45767: LD_VAR 0 2
45771: PUSH
45772: LD_INT 2
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45818
45780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 11
45788: PUSH
45789: LD_INT 12
45791: PUSH
45792: LD_INT 13
45794: PUSH
45795: LD_INT 14
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
45816: GO 45947
45818: LD_INT 1
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45888
45826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45827: LD_ADDR_VAR 0 3
45831: PUSH
45832: LD_INT 11
45834: PUSH
45835: LD_INT 12
45837: PUSH
45838: LD_INT 13
45840: PUSH
45841: LD_INT 14
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 4
45855: PUSH
45856: LD_INT 5
45858: PUSH
45859: LD_INT 21
45861: PUSH
45862: LD_INT 23
45864: PUSH
45865: LD_INT 22
45867: PUSH
45868: LD_INT 24
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: ST_TO_ADDR
45886: GO 45947
45888: LD_INT 3
45890: DOUBLE
45891: EQUAL
45892: IFTRUE 45896
45894: GO 45946
45896: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_INT 13
45904: PUSH
45905: LD_INT 14
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 4
45916: PUSH
45917: LD_INT 5
45919: PUSH
45920: LD_INT 21
45922: PUSH
45923: LD_INT 22
45925: PUSH
45926: LD_INT 23
45928: PUSH
45929: LD_INT 24
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
45944: GO 45947
45946: POP
// result := ( chassis in result ) ;
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_VAR 0 1
45956: PUSH
45957: LD_VAR 0 3
45961: IN
45962: ST_TO_ADDR
// end ;
45963: LD_VAR 0 3
45967: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45968: LD_INT 0
45970: PPUSH
// if not chassis or not weapon then
45971: LD_VAR 0 1
45975: NOT
45976: PUSH
45977: LD_VAR 0 2
45981: NOT
45982: OR
45983: IFFALSE 45987
// exit ;
45985: GO 47047
// case weapon of us_machine_gun :
45987: LD_VAR 0 2
45991: PUSH
45992: LD_INT 2
45994: DOUBLE
45995: EQUAL
45996: IFTRUE 46000
45998: GO 46030
46000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46001: LD_ADDR_VAR 0 3
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 4
46017: PUSH
46018: LD_INT 5
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
46028: GO 47031
46030: LD_INT 3
46032: DOUBLE
46033: EQUAL
46034: IFTRUE 46038
46036: GO 46068
46038: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46039: LD_ADDR_VAR 0 3
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 4
46055: PUSH
46056: LD_INT 5
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
46066: GO 47031
46068: LD_INT 11
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46106
46076: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 4
46093: PUSH
46094: LD_INT 5
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
46104: GO 47031
46106: LD_INT 4
46108: DOUBLE
46109: EQUAL
46110: IFTRUE 46114
46112: GO 46140
46114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46115: LD_ADDR_VAR 0 3
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: LD_INT 4
46128: PUSH
46129: LD_INT 5
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
46138: GO 47031
46140: LD_INT 5
46142: DOUBLE
46143: EQUAL
46144: IFTRUE 46148
46146: GO 46174
46148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46149: LD_ADDR_VAR 0 3
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 4
46162: PUSH
46163: LD_INT 5
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
46172: GO 47031
46174: LD_INT 9
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 46208
46182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46183: LD_ADDR_VAR 0 3
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: LD_INT 5
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
46206: GO 47031
46208: LD_INT 7
46210: DOUBLE
46211: EQUAL
46212: IFTRUE 46216
46214: GO 46242
46216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46217: LD_ADDR_VAR 0 3
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: LD_INT 5
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
46240: GO 47031
46242: LD_INT 12
46244: DOUBLE
46245: EQUAL
46246: IFTRUE 46250
46248: GO 46276
46250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46251: LD_ADDR_VAR 0 3
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 4
46264: PUSH
46265: LD_INT 5
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
46274: GO 47031
46276: LD_INT 13
46278: DOUBLE
46279: EQUAL
46280: IFTRUE 46284
46282: GO 46310
46284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46285: LD_ADDR_VAR 0 3
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 4
46298: PUSH
46299: LD_INT 5
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: ST_TO_ADDR
46308: GO 47031
46310: LD_INT 14
46312: DOUBLE
46313: EQUAL
46314: IFTRUE 46318
46316: GO 46336
46318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46319: LD_ADDR_VAR 0 3
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: LD_INT 5
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: ST_TO_ADDR
46334: GO 47031
46336: LD_INT 6
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46344
46342: GO 46362
46344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46345: LD_ADDR_VAR 0 3
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: LD_INT 5
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: ST_TO_ADDR
46360: GO 47031
46362: LD_INT 10
46364: DOUBLE
46365: EQUAL
46366: IFTRUE 46370
46368: GO 46388
46370: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46371: LD_ADDR_VAR 0 3
46375: PUSH
46376: LD_INT 4
46378: PUSH
46379: LD_INT 5
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: ST_TO_ADDR
46386: GO 47031
46388: LD_INT 22
46390: DOUBLE
46391: EQUAL
46392: IFTRUE 46396
46394: GO 46422
46396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46397: LD_ADDR_VAR 0 3
46401: PUSH
46402: LD_INT 11
46404: PUSH
46405: LD_INT 12
46407: PUSH
46408: LD_INT 13
46410: PUSH
46411: LD_INT 14
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
46420: GO 47031
46422: LD_INT 23
46424: DOUBLE
46425: EQUAL
46426: IFTRUE 46430
46428: GO 46456
46430: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46431: LD_ADDR_VAR 0 3
46435: PUSH
46436: LD_INT 11
46438: PUSH
46439: LD_INT 12
46441: PUSH
46442: LD_INT 13
46444: PUSH
46445: LD_INT 14
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
46454: GO 47031
46456: LD_INT 24
46458: DOUBLE
46459: EQUAL
46460: IFTRUE 46464
46462: GO 46490
46464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_INT 11
46472: PUSH
46473: LD_INT 12
46475: PUSH
46476: LD_INT 13
46478: PUSH
46479: LD_INT 14
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
46488: GO 47031
46490: LD_INT 30
46492: DOUBLE
46493: EQUAL
46494: IFTRUE 46498
46496: GO 46524
46498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: LD_INT 11
46506: PUSH
46507: LD_INT 12
46509: PUSH
46510: LD_INT 13
46512: PUSH
46513: LD_INT 14
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
46522: GO 47031
46524: LD_INT 25
46526: DOUBLE
46527: EQUAL
46528: IFTRUE 46532
46530: GO 46550
46532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46533: LD_ADDR_VAR 0 3
46537: PUSH
46538: LD_INT 13
46540: PUSH
46541: LD_INT 14
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: ST_TO_ADDR
46548: GO 47031
46550: LD_INT 27
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46576
46558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_INT 13
46566: PUSH
46567: LD_INT 14
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: ST_TO_ADDR
46574: GO 47031
46576: LD_INT 92
46578: DOUBLE
46579: EQUAL
46580: IFTRUE 46584
46582: GO 46610
46584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46585: LD_ADDR_VAR 0 3
46589: PUSH
46590: LD_INT 11
46592: PUSH
46593: LD_INT 12
46595: PUSH
46596: LD_INT 13
46598: PUSH
46599: LD_INT 14
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
46608: GO 47031
46610: LD_INT 28
46612: DOUBLE
46613: EQUAL
46614: IFTRUE 46618
46616: GO 46636
46618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46619: LD_ADDR_VAR 0 3
46623: PUSH
46624: LD_INT 13
46626: PUSH
46627: LD_INT 14
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: ST_TO_ADDR
46634: GO 47031
46636: LD_INT 29
46638: DOUBLE
46639: EQUAL
46640: IFTRUE 46644
46642: GO 46662
46644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46645: LD_ADDR_VAR 0 3
46649: PUSH
46650: LD_INT 13
46652: PUSH
46653: LD_INT 14
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: ST_TO_ADDR
46660: GO 47031
46662: LD_INT 31
46664: DOUBLE
46665: EQUAL
46666: IFTRUE 46670
46668: GO 46688
46670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46671: LD_ADDR_VAR 0 3
46675: PUSH
46676: LD_INT 13
46678: PUSH
46679: LD_INT 14
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: ST_TO_ADDR
46686: GO 47031
46688: LD_INT 26
46690: DOUBLE
46691: EQUAL
46692: IFTRUE 46696
46694: GO 46714
46696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46697: LD_ADDR_VAR 0 3
46701: PUSH
46702: LD_INT 13
46704: PUSH
46705: LD_INT 14
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: ST_TO_ADDR
46712: GO 47031
46714: LD_INT 42
46716: DOUBLE
46717: EQUAL
46718: IFTRUE 46722
46720: GO 46748
46722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46723: LD_ADDR_VAR 0 3
46727: PUSH
46728: LD_INT 21
46730: PUSH
46731: LD_INT 22
46733: PUSH
46734: LD_INT 23
46736: PUSH
46737: LD_INT 24
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
46746: GO 47031
46748: LD_INT 43
46750: DOUBLE
46751: EQUAL
46752: IFTRUE 46756
46754: GO 46782
46756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46757: LD_ADDR_VAR 0 3
46761: PUSH
46762: LD_INT 21
46764: PUSH
46765: LD_INT 22
46767: PUSH
46768: LD_INT 23
46770: PUSH
46771: LD_INT 24
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: ST_TO_ADDR
46780: GO 47031
46782: LD_INT 44
46784: DOUBLE
46785: EQUAL
46786: IFTRUE 46790
46788: GO 46816
46790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46791: LD_ADDR_VAR 0 3
46795: PUSH
46796: LD_INT 21
46798: PUSH
46799: LD_INT 22
46801: PUSH
46802: LD_INT 23
46804: PUSH
46805: LD_INT 24
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
46814: GO 47031
46816: LD_INT 45
46818: DOUBLE
46819: EQUAL
46820: IFTRUE 46824
46822: GO 46850
46824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46825: LD_ADDR_VAR 0 3
46829: PUSH
46830: LD_INT 21
46832: PUSH
46833: LD_INT 22
46835: PUSH
46836: LD_INT 23
46838: PUSH
46839: LD_INT 24
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
46848: GO 47031
46850: LD_INT 49
46852: DOUBLE
46853: EQUAL
46854: IFTRUE 46858
46856: GO 46884
46858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46859: LD_ADDR_VAR 0 3
46863: PUSH
46864: LD_INT 21
46866: PUSH
46867: LD_INT 22
46869: PUSH
46870: LD_INT 23
46872: PUSH
46873: LD_INT 24
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
46882: GO 47031
46884: LD_INT 51
46886: DOUBLE
46887: EQUAL
46888: IFTRUE 46892
46890: GO 46918
46892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46893: LD_ADDR_VAR 0 3
46897: PUSH
46898: LD_INT 21
46900: PUSH
46901: LD_INT 22
46903: PUSH
46904: LD_INT 23
46906: PUSH
46907: LD_INT 24
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: ST_TO_ADDR
46916: GO 47031
46918: LD_INT 52
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46952
46926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46927: LD_ADDR_VAR 0 3
46931: PUSH
46932: LD_INT 21
46934: PUSH
46935: LD_INT 22
46937: PUSH
46938: LD_INT 23
46940: PUSH
46941: LD_INT 24
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
46950: GO 47031
46952: LD_INT 53
46954: DOUBLE
46955: EQUAL
46956: IFTRUE 46960
46958: GO 46978
46960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46961: LD_ADDR_VAR 0 3
46965: PUSH
46966: LD_INT 23
46968: PUSH
46969: LD_INT 24
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: ST_TO_ADDR
46976: GO 47031
46978: LD_INT 46
46980: DOUBLE
46981: EQUAL
46982: IFTRUE 46986
46984: GO 47004
46986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46987: LD_ADDR_VAR 0 3
46991: PUSH
46992: LD_INT 23
46994: PUSH
46995: LD_INT 24
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: ST_TO_ADDR
47002: GO 47031
47004: LD_INT 47
47006: DOUBLE
47007: EQUAL
47008: IFTRUE 47012
47010: GO 47030
47012: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_INT 23
47020: PUSH
47021: LD_INT 24
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: ST_TO_ADDR
47028: GO 47031
47030: POP
// result := ( chassis in result ) ;
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_VAR 0 1
47040: PUSH
47041: LD_VAR 0 3
47045: IN
47046: ST_TO_ADDR
// end ;
47047: LD_VAR 0 3
47051: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47052: LD_INT 0
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
47059: PPUSH
47060: PPUSH
// result := array ;
47061: LD_ADDR_VAR 0 5
47065: PUSH
47066: LD_VAR 0 1
47070: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47071: LD_VAR 0 1
47075: NOT
47076: PUSH
47077: LD_VAR 0 2
47081: NOT
47082: OR
47083: PUSH
47084: LD_VAR 0 3
47088: NOT
47089: OR
47090: PUSH
47091: LD_VAR 0 2
47095: PUSH
47096: LD_VAR 0 1
47100: GREATER
47101: OR
47102: PUSH
47103: LD_VAR 0 3
47107: PUSH
47108: LD_VAR 0 1
47112: GREATER
47113: OR
47114: IFFALSE 47118
// exit ;
47116: GO 47414
// if direction then
47118: LD_VAR 0 4
47122: IFFALSE 47186
// begin d := 1 ;
47124: LD_ADDR_VAR 0 9
47128: PUSH
47129: LD_INT 1
47131: ST_TO_ADDR
// if i_from > i_to then
47132: LD_VAR 0 2
47136: PUSH
47137: LD_VAR 0 3
47141: GREATER
47142: IFFALSE 47168
// length := ( array - i_from ) + i_to else
47144: LD_ADDR_VAR 0 11
47148: PUSH
47149: LD_VAR 0 1
47153: PUSH
47154: LD_VAR 0 2
47158: MINUS
47159: PUSH
47160: LD_VAR 0 3
47164: PLUS
47165: ST_TO_ADDR
47166: GO 47184
// length := i_to - i_from ;
47168: LD_ADDR_VAR 0 11
47172: PUSH
47173: LD_VAR 0 3
47177: PUSH
47178: LD_VAR 0 2
47182: MINUS
47183: ST_TO_ADDR
// end else
47184: GO 47247
// begin d := - 1 ;
47186: LD_ADDR_VAR 0 9
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: ST_TO_ADDR
// if i_from > i_to then
47195: LD_VAR 0 2
47199: PUSH
47200: LD_VAR 0 3
47204: GREATER
47205: IFFALSE 47225
// length := i_from - i_to else
47207: LD_ADDR_VAR 0 11
47211: PUSH
47212: LD_VAR 0 2
47216: PUSH
47217: LD_VAR 0 3
47221: MINUS
47222: ST_TO_ADDR
47223: GO 47247
// length := ( array - i_to ) + i_from ;
47225: LD_ADDR_VAR 0 11
47229: PUSH
47230: LD_VAR 0 1
47234: PUSH
47235: LD_VAR 0 3
47239: MINUS
47240: PUSH
47241: LD_VAR 0 2
47245: PLUS
47246: ST_TO_ADDR
// end ; if not length then
47247: LD_VAR 0 11
47251: NOT
47252: IFFALSE 47256
// exit ;
47254: GO 47414
// tmp := array ;
47256: LD_ADDR_VAR 0 10
47260: PUSH
47261: LD_VAR 0 1
47265: ST_TO_ADDR
// for i = 1 to length do
47266: LD_ADDR_VAR 0 6
47270: PUSH
47271: DOUBLE
47272: LD_INT 1
47274: DEC
47275: ST_TO_ADDR
47276: LD_VAR 0 11
47280: PUSH
47281: FOR_TO
47282: IFFALSE 47402
// begin for j = 1 to array do
47284: LD_ADDR_VAR 0 7
47288: PUSH
47289: DOUBLE
47290: LD_INT 1
47292: DEC
47293: ST_TO_ADDR
47294: LD_VAR 0 1
47298: PUSH
47299: FOR_TO
47300: IFFALSE 47388
// begin k := j + d ;
47302: LD_ADDR_VAR 0 8
47306: PUSH
47307: LD_VAR 0 7
47311: PUSH
47312: LD_VAR 0 9
47316: PLUS
47317: ST_TO_ADDR
// if k > array then
47318: LD_VAR 0 8
47322: PUSH
47323: LD_VAR 0 1
47327: GREATER
47328: IFFALSE 47338
// k := 1 ;
47330: LD_ADDR_VAR 0 8
47334: PUSH
47335: LD_INT 1
47337: ST_TO_ADDR
// if not k then
47338: LD_VAR 0 8
47342: NOT
47343: IFFALSE 47355
// k := array ;
47345: LD_ADDR_VAR 0 8
47349: PUSH
47350: LD_VAR 0 1
47354: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47355: LD_ADDR_VAR 0 10
47359: PUSH
47360: LD_VAR 0 10
47364: PPUSH
47365: LD_VAR 0 8
47369: PPUSH
47370: LD_VAR 0 1
47374: PUSH
47375: LD_VAR 0 7
47379: ARRAY
47380: PPUSH
47381: CALL_OW 1
47385: ST_TO_ADDR
// end ;
47386: GO 47299
47388: POP
47389: POP
// array := tmp ;
47390: LD_ADDR_VAR 0 1
47394: PUSH
47395: LD_VAR 0 10
47399: ST_TO_ADDR
// end ;
47400: GO 47281
47402: POP
47403: POP
// result := array ;
47404: LD_ADDR_VAR 0 5
47408: PUSH
47409: LD_VAR 0 1
47413: ST_TO_ADDR
// end ;
47414: LD_VAR 0 5
47418: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47419: LD_INT 0
47421: PPUSH
47422: PPUSH
// result := 0 ;
47423: LD_ADDR_VAR 0 3
47427: PUSH
47428: LD_INT 0
47430: ST_TO_ADDR
// if not array or not value in array then
47431: LD_VAR 0 1
47435: NOT
47436: PUSH
47437: LD_VAR 0 2
47441: PUSH
47442: LD_VAR 0 1
47446: IN
47447: NOT
47448: OR
47449: IFFALSE 47453
// exit ;
47451: GO 47507
// for i = 1 to array do
47453: LD_ADDR_VAR 0 4
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_VAR 0 1
47467: PUSH
47468: FOR_TO
47469: IFFALSE 47505
// if value = array [ i ] then
47471: LD_VAR 0 2
47475: PUSH
47476: LD_VAR 0 1
47480: PUSH
47481: LD_VAR 0 4
47485: ARRAY
47486: EQUAL
47487: IFFALSE 47503
// begin result := i ;
47489: LD_ADDR_VAR 0 3
47493: PUSH
47494: LD_VAR 0 4
47498: ST_TO_ADDR
// exit ;
47499: POP
47500: POP
47501: GO 47507
// end ;
47503: GO 47468
47505: POP
47506: POP
// end ;
47507: LD_VAR 0 3
47511: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47512: LD_INT 0
47514: PPUSH
// vc_chassis := chassis ;
47515: LD_ADDR_OWVAR 37
47519: PUSH
47520: LD_VAR 0 1
47524: ST_TO_ADDR
// vc_engine := engine ;
47525: LD_ADDR_OWVAR 39
47529: PUSH
47530: LD_VAR 0 2
47534: ST_TO_ADDR
// vc_control := control ;
47535: LD_ADDR_OWVAR 38
47539: PUSH
47540: LD_VAR 0 3
47544: ST_TO_ADDR
// vc_weapon := weapon ;
47545: LD_ADDR_OWVAR 40
47549: PUSH
47550: LD_VAR 0 4
47554: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47555: LD_ADDR_OWVAR 41
47559: PUSH
47560: LD_VAR 0 5
47564: ST_TO_ADDR
// end ;
47565: LD_VAR 0 6
47569: RET
// export function WantPlant ( unit ) ; var task ; begin
47570: LD_INT 0
47572: PPUSH
47573: PPUSH
// result := false ;
47574: LD_ADDR_VAR 0 2
47578: PUSH
47579: LD_INT 0
47581: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47582: LD_ADDR_VAR 0 3
47586: PUSH
47587: LD_VAR 0 1
47591: PPUSH
47592: CALL_OW 437
47596: ST_TO_ADDR
// if task then
47597: LD_VAR 0 3
47601: IFFALSE 47629
// if task [ 1 ] [ 1 ] = p then
47603: LD_VAR 0 3
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PUSH
47616: LD_STRING p
47618: EQUAL
47619: IFFALSE 47629
// result := true ;
47621: LD_ADDR_VAR 0 2
47625: PUSH
47626: LD_INT 1
47628: ST_TO_ADDR
// end ;
47629: LD_VAR 0 2
47633: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47634: LD_INT 0
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
// if pos < 1 then
47640: LD_VAR 0 2
47644: PUSH
47645: LD_INT 1
47647: LESS
47648: IFFALSE 47652
// exit ;
47650: GO 47955
// if pos = 1 then
47652: LD_VAR 0 2
47656: PUSH
47657: LD_INT 1
47659: EQUAL
47660: IFFALSE 47693
// result := Replace ( arr , pos [ 1 ] , value ) else
47662: LD_ADDR_VAR 0 4
47666: PUSH
47667: LD_VAR 0 1
47671: PPUSH
47672: LD_VAR 0 2
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PPUSH
47681: LD_VAR 0 3
47685: PPUSH
47686: CALL_OW 1
47690: ST_TO_ADDR
47691: GO 47955
// begin tmp := arr ;
47693: LD_ADDR_VAR 0 6
47697: PUSH
47698: LD_VAR 0 1
47702: ST_TO_ADDR
// s_arr := [ tmp ] ;
47703: LD_ADDR_VAR 0 7
47707: PUSH
47708: LD_VAR 0 6
47712: PUSH
47713: EMPTY
47714: LIST
47715: ST_TO_ADDR
// for i = 1 to pos - 1 do
47716: LD_ADDR_VAR 0 5
47720: PUSH
47721: DOUBLE
47722: LD_INT 1
47724: DEC
47725: ST_TO_ADDR
47726: LD_VAR 0 2
47730: PUSH
47731: LD_INT 1
47733: MINUS
47734: PUSH
47735: FOR_TO
47736: IFFALSE 47781
// begin tmp := tmp [ pos [ i ] ] ;
47738: LD_ADDR_VAR 0 6
47742: PUSH
47743: LD_VAR 0 6
47747: PUSH
47748: LD_VAR 0 2
47752: PUSH
47753: LD_VAR 0 5
47757: ARRAY
47758: ARRAY
47759: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47760: LD_ADDR_VAR 0 7
47764: PUSH
47765: LD_VAR 0 7
47769: PUSH
47770: LD_VAR 0 6
47774: PUSH
47775: EMPTY
47776: LIST
47777: ADD
47778: ST_TO_ADDR
// end ;
47779: GO 47735
47781: POP
47782: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47783: LD_ADDR_VAR 0 6
47787: PUSH
47788: LD_VAR 0 6
47792: PPUSH
47793: LD_VAR 0 2
47797: PUSH
47798: LD_VAR 0 2
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 3
47808: PPUSH
47809: CALL_OW 1
47813: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47814: LD_ADDR_VAR 0 7
47818: PUSH
47819: LD_VAR 0 7
47823: PPUSH
47824: LD_VAR 0 7
47828: PPUSH
47829: LD_VAR 0 6
47833: PPUSH
47834: CALL_OW 1
47838: ST_TO_ADDR
// for i = s_arr downto 2 do
47839: LD_ADDR_VAR 0 5
47843: PUSH
47844: DOUBLE
47845: LD_VAR 0 7
47849: INC
47850: ST_TO_ADDR
47851: LD_INT 2
47853: PUSH
47854: FOR_DOWNTO
47855: IFFALSE 47939
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47857: LD_ADDR_VAR 0 6
47861: PUSH
47862: LD_VAR 0 7
47866: PUSH
47867: LD_VAR 0 5
47871: PUSH
47872: LD_INT 1
47874: MINUS
47875: ARRAY
47876: PPUSH
47877: LD_VAR 0 2
47881: PUSH
47882: LD_VAR 0 5
47886: PUSH
47887: LD_INT 1
47889: MINUS
47890: ARRAY
47891: PPUSH
47892: LD_VAR 0 7
47896: PUSH
47897: LD_VAR 0 5
47901: ARRAY
47902: PPUSH
47903: CALL_OW 1
47907: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47908: LD_ADDR_VAR 0 7
47912: PUSH
47913: LD_VAR 0 7
47917: PPUSH
47918: LD_VAR 0 5
47922: PUSH
47923: LD_INT 1
47925: MINUS
47926: PPUSH
47927: LD_VAR 0 6
47931: PPUSH
47932: CALL_OW 1
47936: ST_TO_ADDR
// end ;
47937: GO 47854
47939: POP
47940: POP
// result := s_arr [ 1 ] ;
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: LD_VAR 0 7
47950: PUSH
47951: LD_INT 1
47953: ARRAY
47954: ST_TO_ADDR
// end ; end ;
47955: LD_VAR 0 4
47959: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
// if not list then
47964: LD_VAR 0 1
47968: NOT
47969: IFFALSE 47973
// exit ;
47971: GO 48064
// i := list [ pos1 ] ;
47973: LD_ADDR_VAR 0 5
47977: PUSH
47978: LD_VAR 0 1
47982: PUSH
47983: LD_VAR 0 2
47987: ARRAY
47988: ST_TO_ADDR
// if not i then
47989: LD_VAR 0 5
47993: NOT
47994: IFFALSE 47998
// exit ;
47996: GO 48064
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47998: LD_ADDR_VAR 0 1
48002: PUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: LD_VAR 0 2
48012: PPUSH
48013: LD_VAR 0 1
48017: PUSH
48018: LD_VAR 0 3
48022: ARRAY
48023: PPUSH
48024: CALL_OW 1
48028: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48029: LD_ADDR_VAR 0 1
48033: PUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: LD_VAR 0 3
48043: PPUSH
48044: LD_VAR 0 5
48048: PPUSH
48049: CALL_OW 1
48053: ST_TO_ADDR
// result := list ;
48054: LD_ADDR_VAR 0 4
48058: PUSH
48059: LD_VAR 0 1
48063: ST_TO_ADDR
// end ;
48064: LD_VAR 0 4
48068: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48069: LD_INT 0
48071: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48072: LD_ADDR_VAR 0 5
48076: PUSH
48077: LD_VAR 0 1
48081: PPUSH
48082: CALL_OW 250
48086: PPUSH
48087: LD_VAR 0 1
48091: PPUSH
48092: CALL_OW 251
48096: PPUSH
48097: LD_VAR 0 2
48101: PPUSH
48102: LD_VAR 0 3
48106: PPUSH
48107: LD_VAR 0 4
48111: PPUSH
48112: CALL 48490 0 5
48116: ST_TO_ADDR
// end ;
48117: LD_VAR 0 5
48121: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48122: LD_INT 0
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
// if not list or not unit then
48128: LD_VAR 0 2
48132: NOT
48133: PUSH
48134: LD_VAR 0 1
48138: NOT
48139: OR
48140: IFFALSE 48144
// exit ;
48142: GO 48485
// result := [ ] ;
48144: LD_ADDR_VAR 0 5
48148: PUSH
48149: EMPTY
48150: ST_TO_ADDR
// for i in list do
48151: LD_ADDR_VAR 0 6
48155: PUSH
48156: LD_VAR 0 2
48160: PUSH
48161: FOR_IN
48162: IFFALSE 48380
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48164: LD_ADDR_VAR 0 8
48168: PUSH
48169: LD_VAR 0 1
48173: PPUSH
48174: LD_VAR 0 6
48178: PUSH
48179: LD_INT 1
48181: ARRAY
48182: PPUSH
48183: LD_VAR 0 6
48187: PUSH
48188: LD_INT 2
48190: ARRAY
48191: PPUSH
48192: CALL_OW 297
48196: ST_TO_ADDR
// if not Count ( result ) then
48197: LD_VAR 0 5
48201: PPUSH
48202: CALL 44774 0 1
48206: NOT
48207: IFFALSE 48240
// begin result := Join ( result , [ i , tmp ] ) ;
48209: LD_ADDR_VAR 0 5
48213: PUSH
48214: LD_VAR 0 5
48218: PPUSH
48219: LD_VAR 0 6
48223: PUSH
48224: LD_VAR 0 8
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PPUSH
48233: CALL 80363 0 2
48237: ST_TO_ADDR
// continue ;
48238: GO 48161
// end ; if result [ result ] [ 2 ] <= tmp then
48240: LD_VAR 0 5
48244: PUSH
48245: LD_VAR 0 5
48249: ARRAY
48250: PUSH
48251: LD_INT 2
48253: ARRAY
48254: PUSH
48255: LD_VAR 0 8
48259: LESSEQUAL
48260: IFFALSE 48293
// result := Join ( result , [ i , tmp ] ) else
48262: LD_ADDR_VAR 0 5
48266: PUSH
48267: LD_VAR 0 5
48271: PPUSH
48272: LD_VAR 0 6
48276: PUSH
48277: LD_VAR 0 8
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PPUSH
48286: CALL 80363 0 2
48290: ST_TO_ADDR
48291: GO 48378
// begin for j := 1 to Count ( result ) do
48293: LD_ADDR_VAR 0 7
48297: PUSH
48298: DOUBLE
48299: LD_INT 1
48301: DEC
48302: ST_TO_ADDR
48303: LD_VAR 0 5
48307: PPUSH
48308: CALL 44774 0 1
48312: PUSH
48313: FOR_TO
48314: IFFALSE 48376
// begin if tmp < result [ j ] [ 2 ] then
48316: LD_VAR 0 8
48320: PUSH
48321: LD_VAR 0 5
48325: PUSH
48326: LD_VAR 0 7
48330: ARRAY
48331: PUSH
48332: LD_INT 2
48334: ARRAY
48335: LESS
48336: IFFALSE 48374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48338: LD_ADDR_VAR 0 5
48342: PUSH
48343: LD_VAR 0 5
48347: PPUSH
48348: LD_VAR 0 7
48352: PPUSH
48353: LD_VAR 0 6
48357: PUSH
48358: LD_VAR 0 8
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PPUSH
48367: CALL_OW 2
48371: ST_TO_ADDR
// break ;
48372: GO 48376
// end ; end ;
48374: GO 48313
48376: POP
48377: POP
// end ; end ;
48378: GO 48161
48380: POP
48381: POP
// if result and not asc then
48382: LD_VAR 0 5
48386: PUSH
48387: LD_VAR 0 3
48391: NOT
48392: AND
48393: IFFALSE 48410
// result := ReverseArray ( result ) ;
48395: LD_ADDR_VAR 0 5
48399: PUSH
48400: LD_VAR 0 5
48404: PPUSH
48405: CALL 75650 0 1
48409: ST_TO_ADDR
// tmp := [ ] ;
48410: LD_ADDR_VAR 0 8
48414: PUSH
48415: EMPTY
48416: ST_TO_ADDR
// if mode then
48417: LD_VAR 0 4
48421: IFFALSE 48485
// begin for i := 1 to result do
48423: LD_ADDR_VAR 0 6
48427: PUSH
48428: DOUBLE
48429: LD_INT 1
48431: DEC
48432: ST_TO_ADDR
48433: LD_VAR 0 5
48437: PUSH
48438: FOR_TO
48439: IFFALSE 48473
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48441: LD_ADDR_VAR 0 8
48445: PUSH
48446: LD_VAR 0 8
48450: PPUSH
48451: LD_VAR 0 5
48455: PUSH
48456: LD_VAR 0 6
48460: ARRAY
48461: PUSH
48462: LD_INT 1
48464: ARRAY
48465: PPUSH
48466: CALL 80363 0 2
48470: ST_TO_ADDR
48471: GO 48438
48473: POP
48474: POP
// result := tmp ;
48475: LD_ADDR_VAR 0 5
48479: PUSH
48480: LD_VAR 0 8
48484: ST_TO_ADDR
// end ; end ;
48485: LD_VAR 0 5
48489: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48490: LD_INT 0
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
// if not list then
48496: LD_VAR 0 3
48500: NOT
48501: IFFALSE 48505
// exit ;
48503: GO 48893
// result := [ ] ;
48505: LD_ADDR_VAR 0 6
48509: PUSH
48510: EMPTY
48511: ST_TO_ADDR
// for i in list do
48512: LD_ADDR_VAR 0 7
48516: PUSH
48517: LD_VAR 0 3
48521: PUSH
48522: FOR_IN
48523: IFFALSE 48725
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48525: LD_ADDR_VAR 0 9
48529: PUSH
48530: LD_VAR 0 7
48534: PPUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: LD_VAR 0 2
48544: PPUSH
48545: CALL_OW 297
48549: ST_TO_ADDR
// if not result then
48550: LD_VAR 0 6
48554: NOT
48555: IFFALSE 48581
// result := [ [ i , tmp ] ] else
48557: LD_ADDR_VAR 0 6
48561: PUSH
48562: LD_VAR 0 7
48566: PUSH
48567: LD_VAR 0 9
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: ST_TO_ADDR
48579: GO 48723
// begin if result [ result ] [ 2 ] < tmp then
48581: LD_VAR 0 6
48585: PUSH
48586: LD_VAR 0 6
48590: ARRAY
48591: PUSH
48592: LD_INT 2
48594: ARRAY
48595: PUSH
48596: LD_VAR 0 9
48600: LESS
48601: IFFALSE 48643
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48603: LD_ADDR_VAR 0 6
48607: PUSH
48608: LD_VAR 0 6
48612: PPUSH
48613: LD_VAR 0 6
48617: PUSH
48618: LD_INT 1
48620: PLUS
48621: PPUSH
48622: LD_VAR 0 7
48626: PUSH
48627: LD_VAR 0 9
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 2
48640: ST_TO_ADDR
48641: GO 48723
// for j = 1 to result do
48643: LD_ADDR_VAR 0 8
48647: PUSH
48648: DOUBLE
48649: LD_INT 1
48651: DEC
48652: ST_TO_ADDR
48653: LD_VAR 0 6
48657: PUSH
48658: FOR_TO
48659: IFFALSE 48721
// begin if tmp < result [ j ] [ 2 ] then
48661: LD_VAR 0 9
48665: PUSH
48666: LD_VAR 0 6
48670: PUSH
48671: LD_VAR 0 8
48675: ARRAY
48676: PUSH
48677: LD_INT 2
48679: ARRAY
48680: LESS
48681: IFFALSE 48719
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48683: LD_ADDR_VAR 0 6
48687: PUSH
48688: LD_VAR 0 6
48692: PPUSH
48693: LD_VAR 0 8
48697: PPUSH
48698: LD_VAR 0 7
48702: PUSH
48703: LD_VAR 0 9
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PPUSH
48712: CALL_OW 2
48716: ST_TO_ADDR
// break ;
48717: GO 48721
// end ; end ;
48719: GO 48658
48721: POP
48722: POP
// end ; end ;
48723: GO 48522
48725: POP
48726: POP
// if result and not asc then
48727: LD_VAR 0 6
48731: PUSH
48732: LD_VAR 0 4
48736: NOT
48737: AND
48738: IFFALSE 48813
// begin tmp := result ;
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_VAR 0 6
48749: ST_TO_ADDR
// for i = tmp downto 1 do
48750: LD_ADDR_VAR 0 7
48754: PUSH
48755: DOUBLE
48756: LD_VAR 0 9
48760: INC
48761: ST_TO_ADDR
48762: LD_INT 1
48764: PUSH
48765: FOR_DOWNTO
48766: IFFALSE 48811
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48768: LD_ADDR_VAR 0 6
48772: PUSH
48773: LD_VAR 0 6
48777: PPUSH
48778: LD_VAR 0 9
48782: PUSH
48783: LD_VAR 0 7
48787: MINUS
48788: PUSH
48789: LD_INT 1
48791: PLUS
48792: PPUSH
48793: LD_VAR 0 9
48797: PUSH
48798: LD_VAR 0 7
48802: ARRAY
48803: PPUSH
48804: CALL_OW 1
48808: ST_TO_ADDR
48809: GO 48765
48811: POP
48812: POP
// end ; tmp := [ ] ;
48813: LD_ADDR_VAR 0 9
48817: PUSH
48818: EMPTY
48819: ST_TO_ADDR
// if mode then
48820: LD_VAR 0 5
48824: IFFALSE 48893
// begin for i = 1 to result do
48826: LD_ADDR_VAR 0 7
48830: PUSH
48831: DOUBLE
48832: LD_INT 1
48834: DEC
48835: ST_TO_ADDR
48836: LD_VAR 0 6
48840: PUSH
48841: FOR_TO
48842: IFFALSE 48881
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48844: LD_ADDR_VAR 0 9
48848: PUSH
48849: LD_VAR 0 9
48853: PPUSH
48854: LD_VAR 0 7
48858: PPUSH
48859: LD_VAR 0 6
48863: PUSH
48864: LD_VAR 0 7
48868: ARRAY
48869: PUSH
48870: LD_INT 1
48872: ARRAY
48873: PPUSH
48874: CALL_OW 1
48878: ST_TO_ADDR
48879: GO 48841
48881: POP
48882: POP
// result := tmp ;
48883: LD_ADDR_VAR 0 6
48887: PUSH
48888: LD_VAR 0 9
48892: ST_TO_ADDR
// end ; end ;
48893: LD_VAR 0 6
48897: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48898: LD_INT 0
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48906: LD_ADDR_VAR 0 5
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// if not x or not y then
48928: LD_VAR 0 2
48932: NOT
48933: PUSH
48934: LD_VAR 0 3
48938: NOT
48939: OR
48940: IFFALSE 48944
// exit ;
48942: GO 50594
// if not range then
48944: LD_VAR 0 4
48948: NOT
48949: IFFALSE 48959
// range := 10 ;
48951: LD_ADDR_VAR 0 4
48955: PUSH
48956: LD_INT 10
48958: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48959: LD_ADDR_VAR 0 8
48963: PUSH
48964: LD_INT 81
48966: PUSH
48967: LD_VAR 0 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 92
48978: PUSH
48979: LD_VAR 0 2
48983: PUSH
48984: LD_VAR 0 3
48988: PUSH
48989: LD_VAR 0 4
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 21
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: PPUSH
49022: CALL_OW 69
49026: ST_TO_ADDR
// if not tmp then
49027: LD_VAR 0 8
49031: NOT
49032: IFFALSE 49036
// exit ;
49034: GO 50594
// for i in tmp do
49036: LD_ADDR_VAR 0 6
49040: PUSH
49041: LD_VAR 0 8
49045: PUSH
49046: FOR_IN
49047: IFFALSE 50569
// begin points := [ 0 , 0 , 0 ] ;
49049: LD_ADDR_VAR 0 9
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// bpoints := 1 ;
49068: LD_ADDR_VAR 0 10
49072: PUSH
49073: LD_INT 1
49075: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49076: LD_VAR 0 6
49080: PPUSH
49081: CALL_OW 247
49085: PUSH
49086: LD_INT 1
49088: DOUBLE
49089: EQUAL
49090: IFTRUE 49094
49092: GO 49672
49094: POP
// begin if GetClass ( i ) = 1 then
49095: LD_VAR 0 6
49099: PPUSH
49100: CALL_OW 257
49104: PUSH
49105: LD_INT 1
49107: EQUAL
49108: IFFALSE 49129
// points := [ 10 , 5 , 3 ] ;
49110: LD_ADDR_VAR 0 9
49114: PUSH
49115: LD_INT 10
49117: PUSH
49118: LD_INT 5
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49129: LD_VAR 0 6
49133: PPUSH
49134: CALL_OW 257
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: LD_INT 4
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: IN
49153: IFFALSE 49174
// points := [ 3 , 2 , 1 ] ;
49155: LD_ADDR_VAR 0 9
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49174: LD_VAR 0 6
49178: PPUSH
49179: CALL_OW 257
49183: PUSH
49184: LD_INT 5
49186: EQUAL
49187: IFFALSE 49208
// points := [ 130 , 5 , 2 ] ;
49189: LD_ADDR_VAR 0 9
49193: PUSH
49194: LD_INT 130
49196: PUSH
49197: LD_INT 5
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49208: LD_VAR 0 6
49212: PPUSH
49213: CALL_OW 257
49217: PUSH
49218: LD_INT 8
49220: EQUAL
49221: IFFALSE 49242
// points := [ 35 , 35 , 30 ] ;
49223: LD_ADDR_VAR 0 9
49227: PUSH
49228: LD_INT 35
49230: PUSH
49231: LD_INT 35
49233: PUSH
49234: LD_INT 30
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49242: LD_VAR 0 6
49246: PPUSH
49247: CALL_OW 257
49251: PUSH
49252: LD_INT 9
49254: EQUAL
49255: IFFALSE 49276
// points := [ 20 , 55 , 40 ] ;
49257: LD_ADDR_VAR 0 9
49261: PUSH
49262: LD_INT 20
49264: PUSH
49265: LD_INT 55
49267: PUSH
49268: LD_INT 40
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49276: LD_VAR 0 6
49280: PPUSH
49281: CALL_OW 257
49285: PUSH
49286: LD_INT 12
49288: PUSH
49289: LD_INT 16
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: IN
49296: IFFALSE 49317
// points := [ 5 , 3 , 2 ] ;
49298: LD_ADDR_VAR 0 9
49302: PUSH
49303: LD_INT 5
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49317: LD_VAR 0 6
49321: PPUSH
49322: CALL_OW 257
49326: PUSH
49327: LD_INT 17
49329: EQUAL
49330: IFFALSE 49351
// points := [ 100 , 50 , 75 ] ;
49332: LD_ADDR_VAR 0 9
49336: PUSH
49337: LD_INT 100
49339: PUSH
49340: LD_INT 50
49342: PUSH
49343: LD_INT 75
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49351: LD_VAR 0 6
49355: PPUSH
49356: CALL_OW 257
49360: PUSH
49361: LD_INT 15
49363: EQUAL
49364: IFFALSE 49385
// points := [ 10 , 5 , 3 ] ;
49366: LD_ADDR_VAR 0 9
49370: PUSH
49371: LD_INT 10
49373: PUSH
49374: LD_INT 5
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49385: LD_VAR 0 6
49389: PPUSH
49390: CALL_OW 257
49394: PUSH
49395: LD_INT 14
49397: EQUAL
49398: IFFALSE 49419
// points := [ 10 , 0 , 0 ] ;
49400: LD_ADDR_VAR 0 9
49404: PUSH
49405: LD_INT 10
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49419: LD_VAR 0 6
49423: PPUSH
49424: CALL_OW 257
49428: PUSH
49429: LD_INT 11
49431: EQUAL
49432: IFFALSE 49453
// points := [ 30 , 10 , 5 ] ;
49434: LD_ADDR_VAR 0 9
49438: PUSH
49439: LD_INT 30
49441: PUSH
49442: LD_INT 10
49444: PUSH
49445: LD_INT 5
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49453: LD_VAR 0 1
49457: PPUSH
49458: LD_INT 5
49460: PPUSH
49461: CALL_OW 321
49465: PUSH
49466: LD_INT 2
49468: EQUAL
49469: IFFALSE 49486
// bpoints := bpoints * 1.8 ;
49471: LD_ADDR_VAR 0 10
49475: PUSH
49476: LD_VAR 0 10
49480: PUSH
49481: LD_REAL  1.80000000000000E+0000
49484: MUL
49485: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49486: LD_VAR 0 6
49490: PPUSH
49491: CALL_OW 257
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: LD_INT 4
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: IN
49514: PUSH
49515: LD_VAR 0 1
49519: PPUSH
49520: LD_INT 51
49522: PPUSH
49523: CALL_OW 321
49527: PUSH
49528: LD_INT 2
49530: EQUAL
49531: AND
49532: IFFALSE 49549
// bpoints := bpoints * 1.2 ;
49534: LD_ADDR_VAR 0 10
49538: PUSH
49539: LD_VAR 0 10
49543: PUSH
49544: LD_REAL  1.20000000000000E+0000
49547: MUL
49548: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49549: LD_VAR 0 6
49553: PPUSH
49554: CALL_OW 257
49558: PUSH
49559: LD_INT 5
49561: PUSH
49562: LD_INT 7
49564: PUSH
49565: LD_INT 9
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: IN
49573: PUSH
49574: LD_VAR 0 1
49578: PPUSH
49579: LD_INT 52
49581: PPUSH
49582: CALL_OW 321
49586: PUSH
49587: LD_INT 2
49589: EQUAL
49590: AND
49591: IFFALSE 49608
// bpoints := bpoints * 1.5 ;
49593: LD_ADDR_VAR 0 10
49597: PUSH
49598: LD_VAR 0 10
49602: PUSH
49603: LD_REAL  1.50000000000000E+0000
49606: MUL
49607: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49608: LD_VAR 0 1
49612: PPUSH
49613: LD_INT 66
49615: PPUSH
49616: CALL_OW 321
49620: PUSH
49621: LD_INT 2
49623: EQUAL
49624: IFFALSE 49641
// bpoints := bpoints * 1.1 ;
49626: LD_ADDR_VAR 0 10
49630: PUSH
49631: LD_VAR 0 10
49635: PUSH
49636: LD_REAL  1.10000000000000E+0000
49639: MUL
49640: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49641: LD_ADDR_VAR 0 10
49645: PUSH
49646: LD_VAR 0 10
49650: PUSH
49651: LD_VAR 0 6
49655: PPUSH
49656: LD_INT 1
49658: PPUSH
49659: CALL_OW 259
49663: PUSH
49664: LD_REAL  1.15000000000000E+0000
49667: MUL
49668: MUL
49669: ST_TO_ADDR
// end ; unit_vehicle :
49670: GO 50498
49672: LD_INT 2
49674: DOUBLE
49675: EQUAL
49676: IFTRUE 49680
49678: GO 50486
49680: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49681: LD_VAR 0 6
49685: PPUSH
49686: CALL_OW 264
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 42
49696: PUSH
49697: LD_INT 24
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: IN
49705: IFFALSE 49726
// points := [ 25 , 5 , 3 ] ;
49707: LD_ADDR_VAR 0 9
49711: PUSH
49712: LD_INT 25
49714: PUSH
49715: LD_INT 5
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49726: LD_VAR 0 6
49730: PPUSH
49731: CALL_OW 264
49735: PUSH
49736: LD_INT 4
49738: PUSH
49739: LD_INT 43
49741: PUSH
49742: LD_INT 25
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: IN
49750: IFFALSE 49771
// points := [ 40 , 15 , 5 ] ;
49752: LD_ADDR_VAR 0 9
49756: PUSH
49757: LD_INT 40
49759: PUSH
49760: LD_INT 15
49762: PUSH
49763: LD_INT 5
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49771: LD_VAR 0 6
49775: PPUSH
49776: CALL_OW 264
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: LD_INT 23
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: IN
49791: IFFALSE 49812
// points := [ 7 , 25 , 8 ] ;
49793: LD_ADDR_VAR 0 9
49797: PUSH
49798: LD_INT 7
49800: PUSH
49801: LD_INT 25
49803: PUSH
49804: LD_INT 8
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49812: LD_VAR 0 6
49816: PPUSH
49817: CALL_OW 264
49821: PUSH
49822: LD_INT 5
49824: PUSH
49825: LD_INT 27
49827: PUSH
49828: LD_INT 44
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: IN
49836: IFFALSE 49857
// points := [ 14 , 50 , 16 ] ;
49838: LD_ADDR_VAR 0 9
49842: PUSH
49843: LD_INT 14
49845: PUSH
49846: LD_INT 50
49848: PUSH
49849: LD_INT 16
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49857: LD_VAR 0 6
49861: PPUSH
49862: CALL_OW 264
49866: PUSH
49867: LD_INT 6
49869: PUSH
49870: LD_INT 46
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: IN
49877: IFFALSE 49898
// points := [ 32 , 120 , 70 ] ;
49879: LD_ADDR_VAR 0 9
49883: PUSH
49884: LD_INT 32
49886: PUSH
49887: LD_INT 120
49889: PUSH
49890: LD_INT 70
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49898: LD_VAR 0 6
49902: PPUSH
49903: CALL_OW 264
49907: PUSH
49908: LD_INT 7
49910: PUSH
49911: LD_INT 28
49913: PUSH
49914: LD_INT 45
49916: PUSH
49917: LD_INT 92
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: IN
49926: IFFALSE 49947
// points := [ 35 , 20 , 45 ] ;
49928: LD_ADDR_VAR 0 9
49932: PUSH
49933: LD_INT 35
49935: PUSH
49936: LD_INT 20
49938: PUSH
49939: LD_INT 45
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49947: LD_VAR 0 6
49951: PPUSH
49952: CALL_OW 264
49956: PUSH
49957: LD_INT 47
49959: PUSH
49960: EMPTY
49961: LIST
49962: IN
49963: IFFALSE 49984
// points := [ 67 , 45 , 75 ] ;
49965: LD_ADDR_VAR 0 9
49969: PUSH
49970: LD_INT 67
49972: PUSH
49973: LD_INT 45
49975: PUSH
49976: LD_INT 75
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49984: LD_VAR 0 6
49988: PPUSH
49989: CALL_OW 264
49993: PUSH
49994: LD_INT 26
49996: PUSH
49997: EMPTY
49998: LIST
49999: IN
50000: IFFALSE 50021
// points := [ 120 , 30 , 80 ] ;
50002: LD_ADDR_VAR 0 9
50006: PUSH
50007: LD_INT 120
50009: PUSH
50010: LD_INT 30
50012: PUSH
50013: LD_INT 80
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50021: LD_VAR 0 6
50025: PPUSH
50026: CALL_OW 264
50030: PUSH
50031: LD_INT 22
50033: PUSH
50034: EMPTY
50035: LIST
50036: IN
50037: IFFALSE 50058
// points := [ 40 , 1 , 1 ] ;
50039: LD_ADDR_VAR 0 9
50043: PUSH
50044: LD_INT 40
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50058: LD_VAR 0 6
50062: PPUSH
50063: CALL_OW 264
50067: PUSH
50068: LD_INT 29
50070: PUSH
50071: EMPTY
50072: LIST
50073: IN
50074: IFFALSE 50095
// points := [ 70 , 200 , 400 ] ;
50076: LD_ADDR_VAR 0 9
50080: PUSH
50081: LD_INT 70
50083: PUSH
50084: LD_INT 200
50086: PUSH
50087: LD_INT 400
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50095: LD_VAR 0 6
50099: PPUSH
50100: CALL_OW 264
50104: PUSH
50105: LD_INT 14
50107: PUSH
50108: LD_INT 53
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: IN
50115: IFFALSE 50136
// points := [ 40 , 10 , 20 ] ;
50117: LD_ADDR_VAR 0 9
50121: PUSH
50122: LD_INT 40
50124: PUSH
50125: LD_INT 10
50127: PUSH
50128: LD_INT 20
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50136: LD_VAR 0 6
50140: PPUSH
50141: CALL_OW 264
50145: PUSH
50146: LD_INT 9
50148: PUSH
50149: EMPTY
50150: LIST
50151: IN
50152: IFFALSE 50173
// points := [ 5 , 70 , 20 ] ;
50154: LD_ADDR_VAR 0 9
50158: PUSH
50159: LD_INT 5
50161: PUSH
50162: LD_INT 70
50164: PUSH
50165: LD_INT 20
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50173: LD_VAR 0 6
50177: PPUSH
50178: CALL_OW 264
50182: PUSH
50183: LD_INT 10
50185: PUSH
50186: EMPTY
50187: LIST
50188: IN
50189: IFFALSE 50210
// points := [ 35 , 110 , 70 ] ;
50191: LD_ADDR_VAR 0 9
50195: PUSH
50196: LD_INT 35
50198: PUSH
50199: LD_INT 110
50201: PUSH
50202: LD_INT 70
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50210: LD_VAR 0 6
50214: PPUSH
50215: CALL_OW 265
50219: PUSH
50220: LD_INT 25
50222: EQUAL
50223: IFFALSE 50244
// points := [ 80 , 65 , 100 ] ;
50225: LD_ADDR_VAR 0 9
50229: PUSH
50230: LD_INT 80
50232: PUSH
50233: LD_INT 65
50235: PUSH
50236: LD_INT 100
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50244: LD_VAR 0 6
50248: PPUSH
50249: CALL_OW 263
50253: PUSH
50254: LD_INT 1
50256: EQUAL
50257: IFFALSE 50292
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50259: LD_ADDR_VAR 0 10
50263: PUSH
50264: LD_VAR 0 10
50268: PUSH
50269: LD_VAR 0 6
50273: PPUSH
50274: CALL_OW 311
50278: PPUSH
50279: LD_INT 3
50281: PPUSH
50282: CALL_OW 259
50286: PUSH
50287: LD_INT 4
50289: MUL
50290: MUL
50291: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50292: LD_VAR 0 6
50296: PPUSH
50297: CALL_OW 263
50301: PUSH
50302: LD_INT 2
50304: EQUAL
50305: IFFALSE 50356
// begin j := IsControledBy ( i ) ;
50307: LD_ADDR_VAR 0 7
50311: PUSH
50312: LD_VAR 0 6
50316: PPUSH
50317: CALL_OW 312
50321: ST_TO_ADDR
// if j then
50322: LD_VAR 0 7
50326: IFFALSE 50356
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50328: LD_ADDR_VAR 0 10
50332: PUSH
50333: LD_VAR 0 10
50337: PUSH
50338: LD_VAR 0 7
50342: PPUSH
50343: LD_INT 3
50345: PPUSH
50346: CALL_OW 259
50350: PUSH
50351: LD_INT 3
50353: MUL
50354: MUL
50355: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50356: LD_VAR 0 6
50360: PPUSH
50361: CALL_OW 264
50365: PUSH
50366: LD_INT 5
50368: PUSH
50369: LD_INT 6
50371: PUSH
50372: LD_INT 46
50374: PUSH
50375: LD_INT 44
50377: PUSH
50378: LD_INT 47
50380: PUSH
50381: LD_INT 45
50383: PUSH
50384: LD_INT 28
50386: PUSH
50387: LD_INT 7
50389: PUSH
50390: LD_INT 27
50392: PUSH
50393: LD_INT 29
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: IN
50408: PUSH
50409: LD_VAR 0 1
50413: PPUSH
50414: LD_INT 52
50416: PPUSH
50417: CALL_OW 321
50421: PUSH
50422: LD_INT 2
50424: EQUAL
50425: AND
50426: IFFALSE 50443
// bpoints := bpoints * 1.2 ;
50428: LD_ADDR_VAR 0 10
50432: PUSH
50433: LD_VAR 0 10
50437: PUSH
50438: LD_REAL  1.20000000000000E+0000
50441: MUL
50442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50443: LD_VAR 0 6
50447: PPUSH
50448: CALL_OW 264
50452: PUSH
50453: LD_INT 6
50455: PUSH
50456: LD_INT 46
50458: PUSH
50459: LD_INT 47
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: IN
50467: IFFALSE 50484
// bpoints := bpoints * 1.2 ;
50469: LD_ADDR_VAR 0 10
50473: PUSH
50474: LD_VAR 0 10
50478: PUSH
50479: LD_REAL  1.20000000000000E+0000
50482: MUL
50483: ST_TO_ADDR
// end ; unit_building :
50484: GO 50498
50486: LD_INT 3
50488: DOUBLE
50489: EQUAL
50490: IFTRUE 50494
50492: GO 50497
50494: POP
// ; end ;
50495: GO 50498
50497: POP
// for j = 1 to 3 do
50498: LD_ADDR_VAR 0 7
50502: PUSH
50503: DOUBLE
50504: LD_INT 1
50506: DEC
50507: ST_TO_ADDR
50508: LD_INT 3
50510: PUSH
50511: FOR_TO
50512: IFFALSE 50565
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50514: LD_ADDR_VAR 0 5
50518: PUSH
50519: LD_VAR 0 5
50523: PPUSH
50524: LD_VAR 0 7
50528: PPUSH
50529: LD_VAR 0 5
50533: PUSH
50534: LD_VAR 0 7
50538: ARRAY
50539: PUSH
50540: LD_VAR 0 9
50544: PUSH
50545: LD_VAR 0 7
50549: ARRAY
50550: PUSH
50551: LD_VAR 0 10
50555: MUL
50556: PLUS
50557: PPUSH
50558: CALL_OW 1
50562: ST_TO_ADDR
50563: GO 50511
50565: POP
50566: POP
// end ;
50567: GO 49046
50569: POP
50570: POP
// result := Replace ( result , 4 , tmp ) ;
50571: LD_ADDR_VAR 0 5
50575: PUSH
50576: LD_VAR 0 5
50580: PPUSH
50581: LD_INT 4
50583: PPUSH
50584: LD_VAR 0 8
50588: PPUSH
50589: CALL_OW 1
50593: ST_TO_ADDR
// end ;
50594: LD_VAR 0 5
50598: RET
// export function DangerAtRange ( unit , range ) ; begin
50599: LD_INT 0
50601: PPUSH
// if not unit then
50602: LD_VAR 0 1
50606: NOT
50607: IFFALSE 50611
// exit ;
50609: GO 50656
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50611: LD_ADDR_VAR 0 3
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 255
50625: PPUSH
50626: LD_VAR 0 1
50630: PPUSH
50631: CALL_OW 250
50635: PPUSH
50636: LD_VAR 0 1
50640: PPUSH
50641: CALL_OW 251
50645: PPUSH
50646: LD_VAR 0 2
50650: PPUSH
50651: CALL 48898 0 4
50655: ST_TO_ADDR
// end ;
50656: LD_VAR 0 3
50660: RET
// export function DangerInArea ( side , area ) ; begin
50661: LD_INT 0
50663: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50664: LD_ADDR_VAR 0 3
50668: PUSH
50669: LD_VAR 0 2
50673: PPUSH
50674: LD_INT 81
50676: PUSH
50677: LD_VAR 0 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 70
50690: ST_TO_ADDR
// end ;
50691: LD_VAR 0 3
50695: RET
// export function IsExtension ( b ) ; begin
50696: LD_INT 0
50698: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50699: LD_ADDR_VAR 0 2
50703: PUSH
50704: LD_VAR 0 1
50708: PUSH
50709: LD_INT 23
50711: PUSH
50712: LD_INT 20
50714: PUSH
50715: LD_INT 22
50717: PUSH
50718: LD_INT 17
50720: PUSH
50721: LD_INT 24
50723: PUSH
50724: LD_INT 21
50726: PUSH
50727: LD_INT 19
50729: PUSH
50730: LD_INT 16
50732: PUSH
50733: LD_INT 25
50735: PUSH
50736: LD_INT 18
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: IN
50751: ST_TO_ADDR
// end ;
50752: LD_VAR 0 2
50756: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50757: LD_INT 0
50759: PPUSH
50760: PPUSH
50761: PPUSH
// result := [ ] ;
50762: LD_ADDR_VAR 0 4
50766: PUSH
50767: EMPTY
50768: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50769: LD_ADDR_VAR 0 5
50773: PUSH
50774: LD_VAR 0 2
50778: PPUSH
50779: LD_INT 21
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PPUSH
50789: CALL_OW 70
50793: ST_TO_ADDR
// if not tmp then
50794: LD_VAR 0 5
50798: NOT
50799: IFFALSE 50803
// exit ;
50801: GO 50867
// if checkLink then
50803: LD_VAR 0 3
50807: IFFALSE 50857
// begin for i in tmp do
50809: LD_ADDR_VAR 0 6
50813: PUSH
50814: LD_VAR 0 5
50818: PUSH
50819: FOR_IN
50820: IFFALSE 50855
// if GetBase ( i ) <> base then
50822: LD_VAR 0 6
50826: PPUSH
50827: CALL_OW 274
50831: PUSH
50832: LD_VAR 0 1
50836: NONEQUAL
50837: IFFALSE 50853
// ComLinkToBase ( base , i ) ;
50839: LD_VAR 0 1
50843: PPUSH
50844: LD_VAR 0 6
50848: PPUSH
50849: CALL_OW 169
50853: GO 50819
50855: POP
50856: POP
// end ; result := tmp ;
50857: LD_ADDR_VAR 0 4
50861: PUSH
50862: LD_VAR 0 5
50866: ST_TO_ADDR
// end ;
50867: LD_VAR 0 4
50871: RET
// export function ComComplete ( units , b ) ; var i ; begin
50872: LD_INT 0
50874: PPUSH
50875: PPUSH
// if not units then
50876: LD_VAR 0 1
50880: NOT
50881: IFFALSE 50885
// exit ;
50883: GO 50975
// for i in units do
50885: LD_ADDR_VAR 0 4
50889: PUSH
50890: LD_VAR 0 1
50894: PUSH
50895: FOR_IN
50896: IFFALSE 50973
// if BuildingStatus ( b ) = bs_build then
50898: LD_VAR 0 2
50902: PPUSH
50903: CALL_OW 461
50907: PUSH
50908: LD_INT 1
50910: EQUAL
50911: IFFALSE 50971
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50913: LD_VAR 0 4
50917: PPUSH
50918: LD_STRING h
50920: PUSH
50921: LD_VAR 0 2
50925: PPUSH
50926: CALL_OW 250
50930: PUSH
50931: LD_VAR 0 2
50935: PPUSH
50936: CALL_OW 251
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: PPUSH
50967: CALL_OW 446
50971: GO 50895
50973: POP
50974: POP
// end ;
50975: LD_VAR 0 3
50979: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50980: LD_INT 0
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50988: LD_VAR 0 1
50992: NOT
50993: PUSH
50994: LD_VAR 0 1
50998: PPUSH
50999: CALL_OW 263
51003: PUSH
51004: LD_INT 2
51006: NONEQUAL
51007: OR
51008: IFFALSE 51012
// exit ;
51010: GO 51328
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51012: LD_ADDR_VAR 0 6
51016: PUSH
51017: LD_INT 22
51019: PUSH
51020: LD_VAR 0 1
51024: PPUSH
51025: CALL_OW 255
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 30
51039: PUSH
51040: LD_INT 36
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 34
51049: PUSH
51050: LD_INT 31
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PPUSH
51066: CALL_OW 69
51070: ST_TO_ADDR
// if not tmp then
51071: LD_VAR 0 6
51075: NOT
51076: IFFALSE 51080
// exit ;
51078: GO 51328
// result := [ ] ;
51080: LD_ADDR_VAR 0 2
51084: PUSH
51085: EMPTY
51086: ST_TO_ADDR
// for i in tmp do
51087: LD_ADDR_VAR 0 3
51091: PUSH
51092: LD_VAR 0 6
51096: PUSH
51097: FOR_IN
51098: IFFALSE 51169
// begin t := UnitsInside ( i ) ;
51100: LD_ADDR_VAR 0 4
51104: PUSH
51105: LD_VAR 0 3
51109: PPUSH
51110: CALL_OW 313
51114: ST_TO_ADDR
// if t then
51115: LD_VAR 0 4
51119: IFFALSE 51167
// for j in t do
51121: LD_ADDR_VAR 0 7
51125: PUSH
51126: LD_VAR 0 4
51130: PUSH
51131: FOR_IN
51132: IFFALSE 51165
// result := Replace ( result , result + 1 , j ) ;
51134: LD_ADDR_VAR 0 2
51138: PUSH
51139: LD_VAR 0 2
51143: PPUSH
51144: LD_VAR 0 2
51148: PUSH
51149: LD_INT 1
51151: PLUS
51152: PPUSH
51153: LD_VAR 0 7
51157: PPUSH
51158: CALL_OW 1
51162: ST_TO_ADDR
51163: GO 51131
51165: POP
51166: POP
// end ;
51167: GO 51097
51169: POP
51170: POP
// if not result then
51171: LD_VAR 0 2
51175: NOT
51176: IFFALSE 51180
// exit ;
51178: GO 51328
// mech := result [ 1 ] ;
51180: LD_ADDR_VAR 0 5
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 1
51192: ARRAY
51193: ST_TO_ADDR
// if result > 1 then
51194: LD_VAR 0 2
51198: PUSH
51199: LD_INT 1
51201: GREATER
51202: IFFALSE 51314
// begin for i = 2 to result do
51204: LD_ADDR_VAR 0 3
51208: PUSH
51209: DOUBLE
51210: LD_INT 2
51212: DEC
51213: ST_TO_ADDR
51214: LD_VAR 0 2
51218: PUSH
51219: FOR_TO
51220: IFFALSE 51312
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51222: LD_ADDR_VAR 0 4
51226: PUSH
51227: LD_VAR 0 2
51231: PUSH
51232: LD_VAR 0 3
51236: ARRAY
51237: PPUSH
51238: LD_INT 3
51240: PPUSH
51241: CALL_OW 259
51245: PUSH
51246: LD_VAR 0 2
51250: PUSH
51251: LD_VAR 0 3
51255: ARRAY
51256: PPUSH
51257: CALL_OW 432
51261: MINUS
51262: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51263: LD_VAR 0 4
51267: PUSH
51268: LD_VAR 0 5
51272: PPUSH
51273: LD_INT 3
51275: PPUSH
51276: CALL_OW 259
51280: PUSH
51281: LD_VAR 0 5
51285: PPUSH
51286: CALL_OW 432
51290: MINUS
51291: GREATEREQUAL
51292: IFFALSE 51310
// mech := result [ i ] ;
51294: LD_ADDR_VAR 0 5
51298: PUSH
51299: LD_VAR 0 2
51303: PUSH
51304: LD_VAR 0 3
51308: ARRAY
51309: ST_TO_ADDR
// end ;
51310: GO 51219
51312: POP
51313: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51314: LD_VAR 0 1
51318: PPUSH
51319: LD_VAR 0 5
51323: PPUSH
51324: CALL_OW 135
// end ;
51328: LD_VAR 0 2
51332: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51333: LD_INT 0
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
// result := [ ] ;
51348: LD_ADDR_VAR 0 7
51352: PUSH
51353: EMPTY
51354: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51355: LD_VAR 0 1
51359: PPUSH
51360: CALL_OW 266
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: IN
51375: NOT
51376: IFFALSE 51380
// exit ;
51378: GO 53014
// if name then
51380: LD_VAR 0 3
51384: IFFALSE 51400
// SetBName ( base_dep , name ) ;
51386: LD_VAR 0 1
51390: PPUSH
51391: LD_VAR 0 3
51395: PPUSH
51396: CALL_OW 500
// base := GetBase ( base_dep ) ;
51400: LD_ADDR_VAR 0 15
51404: PUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: CALL_OW 274
51414: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51415: LD_ADDR_VAR 0 16
51419: PUSH
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 255
51429: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51430: LD_ADDR_VAR 0 17
51434: PUSH
51435: LD_VAR 0 1
51439: PPUSH
51440: CALL_OW 248
51444: ST_TO_ADDR
// if sources then
51445: LD_VAR 0 5
51449: IFFALSE 51496
// for i = 1 to 3 do
51451: LD_ADDR_VAR 0 8
51455: PUSH
51456: DOUBLE
51457: LD_INT 1
51459: DEC
51460: ST_TO_ADDR
51461: LD_INT 3
51463: PUSH
51464: FOR_TO
51465: IFFALSE 51494
// AddResourceType ( base , i , sources [ i ] ) ;
51467: LD_VAR 0 15
51471: PPUSH
51472: LD_VAR 0 8
51476: PPUSH
51477: LD_VAR 0 5
51481: PUSH
51482: LD_VAR 0 8
51486: ARRAY
51487: PPUSH
51488: CALL_OW 276
51492: GO 51464
51494: POP
51495: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51496: LD_ADDR_VAR 0 18
51500: PUSH
51501: LD_VAR 0 15
51505: PPUSH
51506: LD_VAR 0 2
51510: PPUSH
51511: LD_INT 1
51513: PPUSH
51514: CALL 50757 0 3
51518: ST_TO_ADDR
// InitHc ;
51519: CALL_OW 19
// InitUc ;
51523: CALL_OW 18
// uc_side := side ;
51527: LD_ADDR_OWVAR 20
51531: PUSH
51532: LD_VAR 0 16
51536: ST_TO_ADDR
// uc_nation := nation ;
51537: LD_ADDR_OWVAR 21
51541: PUSH
51542: LD_VAR 0 17
51546: ST_TO_ADDR
// if buildings then
51547: LD_VAR 0 18
51551: IFFALSE 52873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51553: LD_ADDR_VAR 0 19
51557: PUSH
51558: LD_VAR 0 18
51562: PPUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 30
51568: PUSH
51569: LD_INT 29
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 30
51578: PUSH
51579: LD_INT 30
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: PPUSH
51591: CALL_OW 72
51595: ST_TO_ADDR
// if tmp then
51596: LD_VAR 0 19
51600: IFFALSE 51648
// for i in tmp do
51602: LD_ADDR_VAR 0 8
51606: PUSH
51607: LD_VAR 0 19
51611: PUSH
51612: FOR_IN
51613: IFFALSE 51646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51615: LD_VAR 0 8
51619: PPUSH
51620: CALL_OW 250
51624: PPUSH
51625: LD_VAR 0 8
51629: PPUSH
51630: CALL_OW 251
51634: PPUSH
51635: LD_VAR 0 16
51639: PPUSH
51640: CALL_OW 441
51644: GO 51612
51646: POP
51647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51648: LD_VAR 0 18
51652: PPUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 30
51658: PUSH
51659: LD_INT 32
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 30
51668: PUSH
51669: LD_INT 33
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: PPUSH
51681: CALL_OW 72
51685: IFFALSE 51773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51687: LD_ADDR_VAR 0 8
51691: PUSH
51692: LD_VAR 0 18
51696: PPUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 30
51702: PUSH
51703: LD_INT 32
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 30
51712: PUSH
51713: LD_INT 33
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PPUSH
51725: CALL_OW 72
51729: PUSH
51730: FOR_IN
51731: IFFALSE 51771
// begin if not GetBWeapon ( i ) then
51733: LD_VAR 0 8
51737: PPUSH
51738: CALL_OW 269
51742: NOT
51743: IFFALSE 51769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51745: LD_VAR 0 8
51749: PPUSH
51750: LD_VAR 0 8
51754: PPUSH
51755: LD_VAR 0 2
51759: PPUSH
51760: CALL 53019 0 2
51764: PPUSH
51765: CALL_OW 431
// end ;
51769: GO 51730
51771: POP
51772: POP
// end ; for i = 1 to personel do
51773: LD_ADDR_VAR 0 8
51777: PUSH
51778: DOUBLE
51779: LD_INT 1
51781: DEC
51782: ST_TO_ADDR
51783: LD_VAR 0 6
51787: PUSH
51788: FOR_TO
51789: IFFALSE 52853
// begin if i > 4 then
51791: LD_VAR 0 8
51795: PUSH
51796: LD_INT 4
51798: GREATER
51799: IFFALSE 51803
// break ;
51801: GO 52853
// case i of 1 :
51803: LD_VAR 0 8
51807: PUSH
51808: LD_INT 1
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51816
51814: GO 51896
51816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51817: LD_ADDR_VAR 0 12
51821: PUSH
51822: LD_VAR 0 18
51826: PPUSH
51827: LD_INT 22
51829: PUSH
51830: LD_VAR 0 16
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 58
51841: PUSH
51842: EMPTY
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 30
51850: PUSH
51851: LD_INT 32
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 30
51860: PUSH
51861: LD_INT 4
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 30
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PPUSH
51889: CALL_OW 72
51893: ST_TO_ADDR
51894: GO 52118
51896: LD_INT 2
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 51966
51904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51905: LD_ADDR_VAR 0 12
51909: PUSH
51910: LD_VAR 0 18
51914: PPUSH
51915: LD_INT 22
51917: PUSH
51918: LD_VAR 0 16
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 30
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 30
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PPUSH
51959: CALL_OW 72
51963: ST_TO_ADDR
51964: GO 52118
51966: LD_INT 3
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 51974
51972: GO 52036
51974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51975: LD_ADDR_VAR 0 12
51979: PUSH
51980: LD_VAR 0 18
51984: PPUSH
51985: LD_INT 22
51987: PUSH
51988: LD_VAR 0 16
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 30
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 30
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PPUSH
52029: CALL_OW 72
52033: ST_TO_ADDR
52034: GO 52118
52036: LD_INT 4
52038: DOUBLE
52039: EQUAL
52040: IFTRUE 52044
52042: GO 52117
52044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52045: LD_ADDR_VAR 0 12
52049: PUSH
52050: LD_VAR 0 18
52054: PPUSH
52055: LD_INT 22
52057: PUSH
52058: LD_VAR 0 16
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 30
52072: PUSH
52073: LD_INT 6
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 30
52082: PUSH
52083: LD_INT 7
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 30
52092: PUSH
52093: LD_INT 8
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PPUSH
52110: CALL_OW 72
52114: ST_TO_ADDR
52115: GO 52118
52117: POP
// if i = 1 then
52118: LD_VAR 0 8
52122: PUSH
52123: LD_INT 1
52125: EQUAL
52126: IFFALSE 52237
// begin tmp := [ ] ;
52128: LD_ADDR_VAR 0 19
52132: PUSH
52133: EMPTY
52134: ST_TO_ADDR
// for j in f do
52135: LD_ADDR_VAR 0 9
52139: PUSH
52140: LD_VAR 0 12
52144: PUSH
52145: FOR_IN
52146: IFFALSE 52219
// if GetBType ( j ) = b_bunker then
52148: LD_VAR 0 9
52152: PPUSH
52153: CALL_OW 266
52157: PUSH
52158: LD_INT 32
52160: EQUAL
52161: IFFALSE 52188
// tmp := Insert ( tmp , 1 , j ) else
52163: LD_ADDR_VAR 0 19
52167: PUSH
52168: LD_VAR 0 19
52172: PPUSH
52173: LD_INT 1
52175: PPUSH
52176: LD_VAR 0 9
52180: PPUSH
52181: CALL_OW 2
52185: ST_TO_ADDR
52186: GO 52217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52188: LD_ADDR_VAR 0 19
52192: PUSH
52193: LD_VAR 0 19
52197: PPUSH
52198: LD_VAR 0 19
52202: PUSH
52203: LD_INT 1
52205: PLUS
52206: PPUSH
52207: LD_VAR 0 9
52211: PPUSH
52212: CALL_OW 2
52216: ST_TO_ADDR
52217: GO 52145
52219: POP
52220: POP
// if tmp then
52221: LD_VAR 0 19
52225: IFFALSE 52237
// f := tmp ;
52227: LD_ADDR_VAR 0 12
52231: PUSH
52232: LD_VAR 0 19
52236: ST_TO_ADDR
// end ; x := personel [ i ] ;
52237: LD_ADDR_VAR 0 13
52241: PUSH
52242: LD_VAR 0 6
52246: PUSH
52247: LD_VAR 0 8
52251: ARRAY
52252: ST_TO_ADDR
// if x = - 1 then
52253: LD_VAR 0 13
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: EQUAL
52262: IFFALSE 52471
// begin for j in f do
52264: LD_ADDR_VAR 0 9
52268: PUSH
52269: LD_VAR 0 12
52273: PUSH
52274: FOR_IN
52275: IFFALSE 52467
// repeat InitHc ;
52277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52281: LD_VAR 0 9
52285: PPUSH
52286: CALL_OW 266
52290: PUSH
52291: LD_INT 5
52293: EQUAL
52294: IFFALSE 52364
// begin if UnitsInside ( j ) < 3 then
52296: LD_VAR 0 9
52300: PPUSH
52301: CALL_OW 313
52305: PUSH
52306: LD_INT 3
52308: LESS
52309: IFFALSE 52345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52311: LD_INT 0
52313: PPUSH
52314: LD_INT 5
52316: PUSH
52317: LD_INT 8
52319: PUSH
52320: LD_INT 9
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: PUSH
52328: LD_VAR 0 17
52332: ARRAY
52333: PPUSH
52334: LD_VAR 0 4
52338: PPUSH
52339: CALL_OW 380
52343: GO 52362
// PrepareHuman ( false , i , skill ) ;
52345: LD_INT 0
52347: PPUSH
52348: LD_VAR 0 8
52352: PPUSH
52353: LD_VAR 0 4
52357: PPUSH
52358: CALL_OW 380
// end else
52362: GO 52381
// PrepareHuman ( false , i , skill ) ;
52364: LD_INT 0
52366: PPUSH
52367: LD_VAR 0 8
52371: PPUSH
52372: LD_VAR 0 4
52376: PPUSH
52377: CALL_OW 380
// un := CreateHuman ;
52381: LD_ADDR_VAR 0 14
52385: PUSH
52386: CALL_OW 44
52390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52391: LD_ADDR_VAR 0 7
52395: PUSH
52396: LD_VAR 0 7
52400: PPUSH
52401: LD_INT 1
52403: PPUSH
52404: LD_VAR 0 14
52408: PPUSH
52409: CALL_OW 2
52413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52414: LD_VAR 0 14
52418: PPUSH
52419: LD_VAR 0 9
52423: PPUSH
52424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52428: LD_VAR 0 9
52432: PPUSH
52433: CALL_OW 313
52437: PUSH
52438: LD_INT 6
52440: EQUAL
52441: PUSH
52442: LD_VAR 0 9
52446: PPUSH
52447: CALL_OW 266
52451: PUSH
52452: LD_INT 32
52454: PUSH
52455: LD_INT 31
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: IN
52462: OR
52463: IFFALSE 52277
52465: GO 52274
52467: POP
52468: POP
// end else
52469: GO 52851
// for j = 1 to x do
52471: LD_ADDR_VAR 0 9
52475: PUSH
52476: DOUBLE
52477: LD_INT 1
52479: DEC
52480: ST_TO_ADDR
52481: LD_VAR 0 13
52485: PUSH
52486: FOR_TO
52487: IFFALSE 52849
// begin InitHc ;
52489: CALL_OW 19
// if not f then
52493: LD_VAR 0 12
52497: NOT
52498: IFFALSE 52587
// begin PrepareHuman ( false , i , skill ) ;
52500: LD_INT 0
52502: PPUSH
52503: LD_VAR 0 8
52507: PPUSH
52508: LD_VAR 0 4
52512: PPUSH
52513: CALL_OW 380
// un := CreateHuman ;
52517: LD_ADDR_VAR 0 14
52521: PUSH
52522: CALL_OW 44
52526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52527: LD_ADDR_VAR 0 7
52531: PUSH
52532: LD_VAR 0 7
52536: PPUSH
52537: LD_INT 1
52539: PPUSH
52540: LD_VAR 0 14
52544: PPUSH
52545: CALL_OW 2
52549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52550: LD_VAR 0 14
52554: PPUSH
52555: LD_VAR 0 1
52559: PPUSH
52560: CALL_OW 250
52564: PPUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: CALL_OW 251
52574: PPUSH
52575: LD_INT 10
52577: PPUSH
52578: LD_INT 0
52580: PPUSH
52581: CALL_OW 50
// continue ;
52585: GO 52486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52587: LD_VAR 0 12
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: PPUSH
52596: CALL_OW 313
52600: PUSH
52601: LD_VAR 0 12
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: PPUSH
52610: CALL_OW 266
52614: PUSH
52615: LD_INT 32
52617: PUSH
52618: LD_INT 31
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: IN
52625: AND
52626: PUSH
52627: LD_VAR 0 12
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PPUSH
52636: CALL_OW 313
52640: PUSH
52641: LD_INT 6
52643: EQUAL
52644: OR
52645: IFFALSE 52665
// f := Delete ( f , 1 ) ;
52647: LD_ADDR_VAR 0 12
52651: PUSH
52652: LD_VAR 0 12
52656: PPUSH
52657: LD_INT 1
52659: PPUSH
52660: CALL_OW 3
52664: ST_TO_ADDR
// if not f then
52665: LD_VAR 0 12
52669: NOT
52670: IFFALSE 52688
// begin x := x + 2 ;
52672: LD_ADDR_VAR 0 13
52676: PUSH
52677: LD_VAR 0 13
52681: PUSH
52682: LD_INT 2
52684: PLUS
52685: ST_TO_ADDR
// continue ;
52686: GO 52486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52688: LD_VAR 0 12
52692: PUSH
52693: LD_INT 1
52695: ARRAY
52696: PPUSH
52697: CALL_OW 266
52701: PUSH
52702: LD_INT 5
52704: EQUAL
52705: IFFALSE 52779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52707: LD_VAR 0 12
52711: PUSH
52712: LD_INT 1
52714: ARRAY
52715: PPUSH
52716: CALL_OW 313
52720: PUSH
52721: LD_INT 3
52723: LESS
52724: IFFALSE 52760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52726: LD_INT 0
52728: PPUSH
52729: LD_INT 5
52731: PUSH
52732: LD_INT 8
52734: PUSH
52735: LD_INT 9
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: PUSH
52743: LD_VAR 0 17
52747: ARRAY
52748: PPUSH
52749: LD_VAR 0 4
52753: PPUSH
52754: CALL_OW 380
52758: GO 52777
// PrepareHuman ( false , i , skill ) ;
52760: LD_INT 0
52762: PPUSH
52763: LD_VAR 0 8
52767: PPUSH
52768: LD_VAR 0 4
52772: PPUSH
52773: CALL_OW 380
// end else
52777: GO 52796
// PrepareHuman ( false , i , skill ) ;
52779: LD_INT 0
52781: PPUSH
52782: LD_VAR 0 8
52786: PPUSH
52787: LD_VAR 0 4
52791: PPUSH
52792: CALL_OW 380
// un := CreateHuman ;
52796: LD_ADDR_VAR 0 14
52800: PUSH
52801: CALL_OW 44
52805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52806: LD_ADDR_VAR 0 7
52810: PUSH
52811: LD_VAR 0 7
52815: PPUSH
52816: LD_INT 1
52818: PPUSH
52819: LD_VAR 0 14
52823: PPUSH
52824: CALL_OW 2
52828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52829: LD_VAR 0 14
52833: PPUSH
52834: LD_VAR 0 12
52838: PUSH
52839: LD_INT 1
52841: ARRAY
52842: PPUSH
52843: CALL_OW 52
// end ;
52847: GO 52486
52849: POP
52850: POP
// end ;
52851: GO 51788
52853: POP
52854: POP
// result := result ^ buildings ;
52855: LD_ADDR_VAR 0 7
52859: PUSH
52860: LD_VAR 0 7
52864: PUSH
52865: LD_VAR 0 18
52869: ADD
52870: ST_TO_ADDR
// end else
52871: GO 53014
// begin for i = 1 to personel do
52873: LD_ADDR_VAR 0 8
52877: PUSH
52878: DOUBLE
52879: LD_INT 1
52881: DEC
52882: ST_TO_ADDR
52883: LD_VAR 0 6
52887: PUSH
52888: FOR_TO
52889: IFFALSE 53012
// begin if i > 4 then
52891: LD_VAR 0 8
52895: PUSH
52896: LD_INT 4
52898: GREATER
52899: IFFALSE 52903
// break ;
52901: GO 53012
// x := personel [ i ] ;
52903: LD_ADDR_VAR 0 13
52907: PUSH
52908: LD_VAR 0 6
52912: PUSH
52913: LD_VAR 0 8
52917: ARRAY
52918: ST_TO_ADDR
// if x = - 1 then
52919: LD_VAR 0 13
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: EQUAL
52928: IFFALSE 52932
// continue ;
52930: GO 52888
// PrepareHuman ( false , i , skill ) ;
52932: LD_INT 0
52934: PPUSH
52935: LD_VAR 0 8
52939: PPUSH
52940: LD_VAR 0 4
52944: PPUSH
52945: CALL_OW 380
// un := CreateHuman ;
52949: LD_ADDR_VAR 0 14
52953: PUSH
52954: CALL_OW 44
52958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52959: LD_VAR 0 14
52963: PPUSH
52964: LD_VAR 0 1
52968: PPUSH
52969: CALL_OW 250
52973: PPUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 251
52983: PPUSH
52984: LD_INT 10
52986: PPUSH
52987: LD_INT 0
52989: PPUSH
52990: CALL_OW 50
// result := result ^ un ;
52994: LD_ADDR_VAR 0 7
52998: PUSH
52999: LD_VAR 0 7
53003: PUSH
53004: LD_VAR 0 14
53008: ADD
53009: ST_TO_ADDR
// end ;
53010: GO 52888
53012: POP
53013: POP
// end ; end ;
53014: LD_VAR 0 7
53018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53019: LD_INT 0
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
// result := false ;
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_INT 0
53044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53045: LD_VAR 0 1
53049: NOT
53050: PUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 266
53060: PUSH
53061: LD_INT 32
53063: PUSH
53064: LD_INT 33
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: IN
53071: NOT
53072: OR
53073: IFFALSE 53077
// exit ;
53075: GO 54186
// nat := GetNation ( tower ) ;
53077: LD_ADDR_VAR 0 12
53081: PUSH
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 248
53091: ST_TO_ADDR
// side := GetSide ( tower ) ;
53092: LD_ADDR_VAR 0 16
53096: PUSH
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 255
53106: ST_TO_ADDR
// x := GetX ( tower ) ;
53107: LD_ADDR_VAR 0 10
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 250
53121: ST_TO_ADDR
// y := GetY ( tower ) ;
53122: LD_ADDR_VAR 0 11
53126: PUSH
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 251
53136: ST_TO_ADDR
// if not x or not y then
53137: LD_VAR 0 10
53141: NOT
53142: PUSH
53143: LD_VAR 0 11
53147: NOT
53148: OR
53149: IFFALSE 53153
// exit ;
53151: GO 54186
// weapon := 0 ;
53153: LD_ADDR_VAR 0 18
53157: PUSH
53158: LD_INT 0
53160: ST_TO_ADDR
// fac_list := [ ] ;
53161: LD_ADDR_VAR 0 17
53165: PUSH
53166: EMPTY
53167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53168: LD_ADDR_VAR 0 6
53172: PUSH
53173: LD_VAR 0 1
53177: PPUSH
53178: CALL_OW 274
53182: PPUSH
53183: LD_VAR 0 2
53187: PPUSH
53188: LD_INT 0
53190: PPUSH
53191: CALL 50757 0 3
53195: PPUSH
53196: LD_INT 30
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PPUSH
53206: CALL_OW 72
53210: ST_TO_ADDR
// if not factories then
53211: LD_VAR 0 6
53215: NOT
53216: IFFALSE 53220
// exit ;
53218: GO 54186
// for i in factories do
53220: LD_ADDR_VAR 0 8
53224: PUSH
53225: LD_VAR 0 6
53229: PUSH
53230: FOR_IN
53231: IFFALSE 53256
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53233: LD_ADDR_VAR 0 17
53237: PUSH
53238: LD_VAR 0 17
53242: PUSH
53243: LD_VAR 0 8
53247: PPUSH
53248: CALL_OW 478
53252: UNION
53253: ST_TO_ADDR
53254: GO 53230
53256: POP
53257: POP
// if not fac_list then
53258: LD_VAR 0 17
53262: NOT
53263: IFFALSE 53267
// exit ;
53265: GO 54186
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53267: LD_ADDR_VAR 0 5
53271: PUSH
53272: LD_INT 4
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: LD_INT 9
53280: PUSH
53281: LD_INT 10
53283: PUSH
53284: LD_INT 6
53286: PUSH
53287: LD_INT 7
53289: PUSH
53290: LD_INT 11
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 27
53304: PUSH
53305: LD_INT 28
53307: PUSH
53308: LD_INT 26
53310: PUSH
53311: LD_INT 30
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 43
53322: PUSH
53323: LD_INT 44
53325: PUSH
53326: LD_INT 46
53328: PUSH
53329: LD_INT 45
53331: PUSH
53332: LD_INT 47
53334: PUSH
53335: LD_INT 49
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: PUSH
53351: LD_VAR 0 12
53355: ARRAY
53356: ST_TO_ADDR
// list := list isect fac_list ;
53357: LD_ADDR_VAR 0 5
53361: PUSH
53362: LD_VAR 0 5
53366: PUSH
53367: LD_VAR 0 17
53371: ISECT
53372: ST_TO_ADDR
// if not list then
53373: LD_VAR 0 5
53377: NOT
53378: IFFALSE 53382
// exit ;
53380: GO 54186
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53382: LD_VAR 0 12
53386: PUSH
53387: LD_INT 3
53389: EQUAL
53390: PUSH
53391: LD_INT 49
53393: PUSH
53394: LD_VAR 0 5
53398: IN
53399: AND
53400: PUSH
53401: LD_INT 31
53403: PPUSH
53404: LD_VAR 0 16
53408: PPUSH
53409: CALL_OW 321
53413: PUSH
53414: LD_INT 2
53416: EQUAL
53417: AND
53418: IFFALSE 53478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53420: LD_INT 22
53422: PUSH
53423: LD_VAR 0 16
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 35
53434: PUSH
53435: LD_INT 49
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 91
53444: PUSH
53445: LD_VAR 0 1
53449: PUSH
53450: LD_INT 10
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: PPUSH
53463: CALL_OW 69
53467: NOT
53468: IFFALSE 53478
// weapon := ru_time_lapser ;
53470: LD_ADDR_VAR 0 18
53474: PUSH
53475: LD_INT 49
53477: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53478: LD_VAR 0 12
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: IN
53493: PUSH
53494: LD_INT 11
53496: PUSH
53497: LD_VAR 0 5
53501: IN
53502: PUSH
53503: LD_INT 30
53505: PUSH
53506: LD_VAR 0 5
53510: IN
53511: OR
53512: AND
53513: PUSH
53514: LD_INT 6
53516: PPUSH
53517: LD_VAR 0 16
53521: PPUSH
53522: CALL_OW 321
53526: PUSH
53527: LD_INT 2
53529: EQUAL
53530: AND
53531: IFFALSE 53696
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53533: LD_INT 22
53535: PUSH
53536: LD_VAR 0 16
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 35
53550: PUSH
53551: LD_INT 11
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 35
53560: PUSH
53561: LD_INT 30
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 91
53575: PUSH
53576: LD_VAR 0 1
53580: PUSH
53581: LD_INT 18
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: PPUSH
53594: CALL_OW 69
53598: NOT
53599: PUSH
53600: LD_INT 22
53602: PUSH
53603: LD_VAR 0 16
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 30
53617: PUSH
53618: LD_INT 32
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 30
53627: PUSH
53628: LD_INT 33
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 91
53642: PUSH
53643: LD_VAR 0 1
53647: PUSH
53648: LD_INT 12
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: PPUSH
53664: CALL_OW 69
53668: PUSH
53669: LD_INT 2
53671: GREATER
53672: AND
53673: IFFALSE 53696
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53675: LD_ADDR_VAR 0 18
53679: PUSH
53680: LD_INT 11
53682: PUSH
53683: LD_INT 30
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_VAR 0 12
53694: ARRAY
53695: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53696: LD_VAR 0 18
53700: NOT
53701: PUSH
53702: LD_INT 40
53704: PPUSH
53705: LD_VAR 0 16
53709: PPUSH
53710: CALL_OW 321
53714: PUSH
53715: LD_INT 2
53717: EQUAL
53718: AND
53719: PUSH
53720: LD_INT 7
53722: PUSH
53723: LD_VAR 0 5
53727: IN
53728: PUSH
53729: LD_INT 28
53731: PUSH
53732: LD_VAR 0 5
53736: IN
53737: OR
53738: PUSH
53739: LD_INT 45
53741: PUSH
53742: LD_VAR 0 5
53746: IN
53747: OR
53748: AND
53749: IFFALSE 54003
// begin hex := GetHexInfo ( x , y ) ;
53751: LD_ADDR_VAR 0 4
53755: PUSH
53756: LD_VAR 0 10
53760: PPUSH
53761: LD_VAR 0 11
53765: PPUSH
53766: CALL_OW 546
53770: ST_TO_ADDR
// if hex [ 1 ] then
53771: LD_VAR 0 4
53775: PUSH
53776: LD_INT 1
53778: ARRAY
53779: IFFALSE 53783
// exit ;
53781: GO 54186
// height := hex [ 2 ] ;
53783: LD_ADDR_VAR 0 15
53787: PUSH
53788: LD_VAR 0 4
53792: PUSH
53793: LD_INT 2
53795: ARRAY
53796: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53797: LD_ADDR_VAR 0 14
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 5
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// for i in tmp do
53820: LD_ADDR_VAR 0 8
53824: PUSH
53825: LD_VAR 0 14
53829: PUSH
53830: FOR_IN
53831: IFFALSE 54001
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53833: LD_ADDR_VAR 0 9
53837: PUSH
53838: LD_VAR 0 10
53842: PPUSH
53843: LD_VAR 0 8
53847: PPUSH
53848: LD_INT 5
53850: PPUSH
53851: CALL_OW 272
53855: PUSH
53856: LD_VAR 0 11
53860: PPUSH
53861: LD_VAR 0 8
53865: PPUSH
53866: LD_INT 5
53868: PPUSH
53869: CALL_OW 273
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53878: LD_VAR 0 9
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: LD_VAR 0 9
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: PPUSH
53896: CALL_OW 488
53900: IFFALSE 53999
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53902: LD_ADDR_VAR 0 4
53906: PUSH
53907: LD_VAR 0 9
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: PPUSH
53916: LD_VAR 0 9
53920: PUSH
53921: LD_INT 2
53923: ARRAY
53924: PPUSH
53925: CALL_OW 546
53929: ST_TO_ADDR
// if hex [ 1 ] then
53930: LD_VAR 0 4
53934: PUSH
53935: LD_INT 1
53937: ARRAY
53938: IFFALSE 53942
// continue ;
53940: GO 53830
// h := hex [ 2 ] ;
53942: LD_ADDR_VAR 0 13
53946: PUSH
53947: LD_VAR 0 4
53951: PUSH
53952: LD_INT 2
53954: ARRAY
53955: ST_TO_ADDR
// if h + 7 < height then
53956: LD_VAR 0 13
53960: PUSH
53961: LD_INT 7
53963: PLUS
53964: PUSH
53965: LD_VAR 0 15
53969: LESS
53970: IFFALSE 53999
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53972: LD_ADDR_VAR 0 18
53976: PUSH
53977: LD_INT 7
53979: PUSH
53980: LD_INT 28
53982: PUSH
53983: LD_INT 45
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: PUSH
53991: LD_VAR 0 12
53995: ARRAY
53996: ST_TO_ADDR
// break ;
53997: GO 54001
// end ; end ; end ;
53999: GO 53830
54001: POP
54002: POP
// end ; if not weapon then
54003: LD_VAR 0 18
54007: NOT
54008: IFFALSE 54068
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54010: LD_ADDR_VAR 0 5
54014: PUSH
54015: LD_VAR 0 5
54019: PUSH
54020: LD_INT 11
54022: PUSH
54023: LD_INT 30
54025: PUSH
54026: LD_INT 49
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: DIFF
54034: ST_TO_ADDR
// if not list then
54035: LD_VAR 0 5
54039: NOT
54040: IFFALSE 54044
// exit ;
54042: GO 54186
// weapon := list [ rand ( 1 , list ) ] ;
54044: LD_ADDR_VAR 0 18
54048: PUSH
54049: LD_VAR 0 5
54053: PUSH
54054: LD_INT 1
54056: PPUSH
54057: LD_VAR 0 5
54061: PPUSH
54062: CALL_OW 12
54066: ARRAY
54067: ST_TO_ADDR
// end ; if weapon then
54068: LD_VAR 0 18
54072: IFFALSE 54186
// begin tmp := CostOfWeapon ( weapon ) ;
54074: LD_ADDR_VAR 0 14
54078: PUSH
54079: LD_VAR 0 18
54083: PPUSH
54084: CALL_OW 451
54088: ST_TO_ADDR
// j := GetBase ( tower ) ;
54089: LD_ADDR_VAR 0 9
54093: PUSH
54094: LD_VAR 0 1
54098: PPUSH
54099: CALL_OW 274
54103: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54104: LD_VAR 0 9
54108: PPUSH
54109: LD_INT 1
54111: PPUSH
54112: CALL_OW 275
54116: PUSH
54117: LD_VAR 0 14
54121: PUSH
54122: LD_INT 1
54124: ARRAY
54125: GREATEREQUAL
54126: PUSH
54127: LD_VAR 0 9
54131: PPUSH
54132: LD_INT 2
54134: PPUSH
54135: CALL_OW 275
54139: PUSH
54140: LD_VAR 0 14
54144: PUSH
54145: LD_INT 2
54147: ARRAY
54148: GREATEREQUAL
54149: AND
54150: PUSH
54151: LD_VAR 0 9
54155: PPUSH
54156: LD_INT 3
54158: PPUSH
54159: CALL_OW 275
54163: PUSH
54164: LD_VAR 0 14
54168: PUSH
54169: LD_INT 3
54171: ARRAY
54172: GREATEREQUAL
54173: AND
54174: IFFALSE 54186
// result := weapon ;
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_VAR 0 18
54185: ST_TO_ADDR
// end ; end ;
54186: LD_VAR 0 3
54190: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54191: LD_INT 0
54193: PPUSH
54194: PPUSH
// result := true ;
54195: LD_ADDR_VAR 0 3
54199: PUSH
54200: LD_INT 1
54202: ST_TO_ADDR
// if array1 = array2 then
54203: LD_VAR 0 1
54207: PUSH
54208: LD_VAR 0 2
54212: EQUAL
54213: IFFALSE 54273
// begin for i = 1 to array1 do
54215: LD_ADDR_VAR 0 4
54219: PUSH
54220: DOUBLE
54221: LD_INT 1
54223: DEC
54224: ST_TO_ADDR
54225: LD_VAR 0 1
54229: PUSH
54230: FOR_TO
54231: IFFALSE 54269
// if array1 [ i ] <> array2 [ i ] then
54233: LD_VAR 0 1
54237: PUSH
54238: LD_VAR 0 4
54242: ARRAY
54243: PUSH
54244: LD_VAR 0 2
54248: PUSH
54249: LD_VAR 0 4
54253: ARRAY
54254: NONEQUAL
54255: IFFALSE 54267
// begin result := false ;
54257: LD_ADDR_VAR 0 3
54261: PUSH
54262: LD_INT 0
54264: ST_TO_ADDR
// break ;
54265: GO 54269
// end ;
54267: GO 54230
54269: POP
54270: POP
// end else
54271: GO 54281
// result := false ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_INT 0
54280: ST_TO_ADDR
// end ;
54281: LD_VAR 0 3
54285: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54286: LD_INT 0
54288: PPUSH
54289: PPUSH
// if not array1 or not array2 then
54290: LD_VAR 0 1
54294: NOT
54295: PUSH
54296: LD_VAR 0 2
54300: NOT
54301: OR
54302: IFFALSE 54306
// exit ;
54304: GO 54370
// result := true ;
54306: LD_ADDR_VAR 0 3
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// for i = 1 to array1 do
54314: LD_ADDR_VAR 0 4
54318: PUSH
54319: DOUBLE
54320: LD_INT 1
54322: DEC
54323: ST_TO_ADDR
54324: LD_VAR 0 1
54328: PUSH
54329: FOR_TO
54330: IFFALSE 54368
// if array1 [ i ] <> array2 [ i ] then
54332: LD_VAR 0 1
54336: PUSH
54337: LD_VAR 0 4
54341: ARRAY
54342: PUSH
54343: LD_VAR 0 2
54347: PUSH
54348: LD_VAR 0 4
54352: ARRAY
54353: NONEQUAL
54354: IFFALSE 54366
// begin result := false ;
54356: LD_ADDR_VAR 0 3
54360: PUSH
54361: LD_INT 0
54363: ST_TO_ADDR
// break ;
54364: GO 54368
// end ;
54366: GO 54329
54368: POP
54369: POP
// end ;
54370: LD_VAR 0 3
54374: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54375: LD_INT 0
54377: PPUSH
54378: PPUSH
54379: PPUSH
// pom := GetBase ( fac ) ;
54380: LD_ADDR_VAR 0 5
54384: PUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 274
54394: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_VAR 0 2
54404: PUSH
54405: LD_INT 1
54407: ARRAY
54408: PPUSH
54409: LD_VAR 0 2
54413: PUSH
54414: LD_INT 2
54416: ARRAY
54417: PPUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_INT 3
54425: ARRAY
54426: PPUSH
54427: LD_VAR 0 2
54431: PUSH
54432: LD_INT 4
54434: ARRAY
54435: PPUSH
54436: CALL_OW 449
54440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_VAR 0 5
54450: PPUSH
54451: LD_INT 1
54453: PPUSH
54454: CALL_OW 275
54458: PUSH
54459: LD_VAR 0 4
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: GREATEREQUAL
54468: PUSH
54469: LD_VAR 0 5
54473: PPUSH
54474: LD_INT 2
54476: PPUSH
54477: CALL_OW 275
54481: PUSH
54482: LD_VAR 0 4
54486: PUSH
54487: LD_INT 2
54489: ARRAY
54490: GREATEREQUAL
54491: AND
54492: PUSH
54493: LD_VAR 0 5
54497: PPUSH
54498: LD_INT 3
54500: PPUSH
54501: CALL_OW 275
54505: PUSH
54506: LD_VAR 0 4
54510: PUSH
54511: LD_INT 3
54513: ARRAY
54514: GREATEREQUAL
54515: AND
54516: ST_TO_ADDR
// end ;
54517: LD_VAR 0 3
54521: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54522: LD_INT 0
54524: PPUSH
54525: PPUSH
54526: PPUSH
54527: PPUSH
// pom := GetBase ( building ) ;
54528: LD_ADDR_VAR 0 3
54532: PUSH
54533: LD_VAR 0 1
54537: PPUSH
54538: CALL_OW 274
54542: ST_TO_ADDR
// if not pom then
54543: LD_VAR 0 3
54547: NOT
54548: IFFALSE 54552
// exit ;
54550: GO 54722
// btype := GetBType ( building ) ;
54552: LD_ADDR_VAR 0 5
54556: PUSH
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL_OW 266
54566: ST_TO_ADDR
// if btype = b_armoury then
54567: LD_VAR 0 5
54571: PUSH
54572: LD_INT 4
54574: EQUAL
54575: IFFALSE 54585
// btype := b_barracks ;
54577: LD_ADDR_VAR 0 5
54581: PUSH
54582: LD_INT 5
54584: ST_TO_ADDR
// if btype = b_depot then
54585: LD_VAR 0 5
54589: PUSH
54590: LD_INT 0
54592: EQUAL
54593: IFFALSE 54603
// btype := b_warehouse ;
54595: LD_ADDR_VAR 0 5
54599: PUSH
54600: LD_INT 1
54602: ST_TO_ADDR
// if btype = b_workshop then
54603: LD_VAR 0 5
54607: PUSH
54608: LD_INT 2
54610: EQUAL
54611: IFFALSE 54621
// btype := b_factory ;
54613: LD_ADDR_VAR 0 5
54617: PUSH
54618: LD_INT 3
54620: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54621: LD_ADDR_VAR 0 4
54625: PUSH
54626: LD_VAR 0 5
54630: PPUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 248
54640: PPUSH
54641: CALL_OW 450
54645: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54646: LD_ADDR_VAR 0 2
54650: PUSH
54651: LD_VAR 0 3
54655: PPUSH
54656: LD_INT 1
54658: PPUSH
54659: CALL_OW 275
54663: PUSH
54664: LD_VAR 0 4
54668: PUSH
54669: LD_INT 1
54671: ARRAY
54672: GREATEREQUAL
54673: PUSH
54674: LD_VAR 0 3
54678: PPUSH
54679: LD_INT 2
54681: PPUSH
54682: CALL_OW 275
54686: PUSH
54687: LD_VAR 0 4
54691: PUSH
54692: LD_INT 2
54694: ARRAY
54695: GREATEREQUAL
54696: AND
54697: PUSH
54698: LD_VAR 0 3
54702: PPUSH
54703: LD_INT 3
54705: PPUSH
54706: CALL_OW 275
54710: PUSH
54711: LD_VAR 0 4
54715: PUSH
54716: LD_INT 3
54718: ARRAY
54719: GREATEREQUAL
54720: AND
54721: ST_TO_ADDR
// end ;
54722: LD_VAR 0 2
54726: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54727: LD_INT 0
54729: PPUSH
54730: PPUSH
54731: PPUSH
// pom := GetBase ( building ) ;
54732: LD_ADDR_VAR 0 4
54736: PUSH
54737: LD_VAR 0 1
54741: PPUSH
54742: CALL_OW 274
54746: ST_TO_ADDR
// if not pom then
54747: LD_VAR 0 4
54751: NOT
54752: IFFALSE 54756
// exit ;
54754: GO 54857
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54756: LD_ADDR_VAR 0 5
54760: PUSH
54761: LD_VAR 0 2
54765: PPUSH
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL_OW 248
54775: PPUSH
54776: CALL_OW 450
54780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54781: LD_ADDR_VAR 0 3
54785: PUSH
54786: LD_VAR 0 4
54790: PPUSH
54791: LD_INT 1
54793: PPUSH
54794: CALL_OW 275
54798: PUSH
54799: LD_VAR 0 5
54803: PUSH
54804: LD_INT 1
54806: ARRAY
54807: GREATEREQUAL
54808: PUSH
54809: LD_VAR 0 4
54813: PPUSH
54814: LD_INT 2
54816: PPUSH
54817: CALL_OW 275
54821: PUSH
54822: LD_VAR 0 5
54826: PUSH
54827: LD_INT 2
54829: ARRAY
54830: GREATEREQUAL
54831: AND
54832: PUSH
54833: LD_VAR 0 4
54837: PPUSH
54838: LD_INT 3
54840: PPUSH
54841: CALL_OW 275
54845: PUSH
54846: LD_VAR 0 5
54850: PUSH
54851: LD_INT 3
54853: ARRAY
54854: GREATEREQUAL
54855: AND
54856: ST_TO_ADDR
// end ;
54857: LD_VAR 0 3
54861: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54862: LD_INT 0
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
54872: PPUSH
54873: PPUSH
54874: PPUSH
// result := false ;
54875: LD_ADDR_VAR 0 8
54879: PUSH
54880: LD_INT 0
54882: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54883: LD_VAR 0 5
54887: NOT
54888: PUSH
54889: LD_VAR 0 1
54893: NOT
54894: OR
54895: PUSH
54896: LD_VAR 0 2
54900: NOT
54901: OR
54902: PUSH
54903: LD_VAR 0 3
54907: NOT
54908: OR
54909: IFFALSE 54913
// exit ;
54911: GO 55727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54913: LD_ADDR_VAR 0 14
54917: PUSH
54918: LD_VAR 0 1
54922: PPUSH
54923: LD_VAR 0 2
54927: PPUSH
54928: LD_VAR 0 3
54932: PPUSH
54933: LD_VAR 0 4
54937: PPUSH
54938: LD_VAR 0 5
54942: PUSH
54943: LD_INT 1
54945: ARRAY
54946: PPUSH
54947: CALL_OW 248
54951: PPUSH
54952: LD_INT 0
54954: PPUSH
54955: CALL 56980 0 6
54959: ST_TO_ADDR
// if not hexes then
54960: LD_VAR 0 14
54964: NOT
54965: IFFALSE 54969
// exit ;
54967: GO 55727
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54969: LD_ADDR_VAR 0 17
54973: PUSH
54974: LD_VAR 0 5
54978: PPUSH
54979: LD_INT 22
54981: PUSH
54982: LD_VAR 0 13
54986: PPUSH
54987: CALL_OW 255
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 30
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 30
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PPUSH
55028: CALL_OW 72
55032: ST_TO_ADDR
// for i = 1 to hexes do
55033: LD_ADDR_VAR 0 9
55037: PUSH
55038: DOUBLE
55039: LD_INT 1
55041: DEC
55042: ST_TO_ADDR
55043: LD_VAR 0 14
55047: PUSH
55048: FOR_TO
55049: IFFALSE 55725
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55051: LD_ADDR_VAR 0 13
55055: PUSH
55056: LD_VAR 0 14
55060: PUSH
55061: LD_VAR 0 9
55065: ARRAY
55066: PUSH
55067: LD_INT 1
55069: ARRAY
55070: PPUSH
55071: LD_VAR 0 14
55075: PUSH
55076: LD_VAR 0 9
55080: ARRAY
55081: PUSH
55082: LD_INT 2
55084: ARRAY
55085: PPUSH
55086: CALL_OW 428
55090: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55091: LD_VAR 0 14
55095: PUSH
55096: LD_VAR 0 9
55100: ARRAY
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PPUSH
55106: LD_VAR 0 14
55110: PUSH
55111: LD_VAR 0 9
55115: ARRAY
55116: PUSH
55117: LD_INT 2
55119: ARRAY
55120: PPUSH
55121: CALL_OW 351
55125: PUSH
55126: LD_VAR 0 14
55130: PUSH
55131: LD_VAR 0 9
55135: ARRAY
55136: PUSH
55137: LD_INT 1
55139: ARRAY
55140: PPUSH
55141: LD_VAR 0 14
55145: PUSH
55146: LD_VAR 0 9
55150: ARRAY
55151: PUSH
55152: LD_INT 2
55154: ARRAY
55155: PPUSH
55156: CALL_OW 488
55160: NOT
55161: OR
55162: PUSH
55163: LD_VAR 0 13
55167: PPUSH
55168: CALL_OW 247
55172: PUSH
55173: LD_INT 3
55175: EQUAL
55176: OR
55177: IFFALSE 55183
// exit ;
55179: POP
55180: POP
55181: GO 55727
// if not tmp then
55183: LD_VAR 0 13
55187: NOT
55188: IFFALSE 55192
// continue ;
55190: GO 55048
// result := true ;
55192: LD_ADDR_VAR 0 8
55196: PUSH
55197: LD_INT 1
55199: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55200: LD_VAR 0 6
55204: PUSH
55205: LD_VAR 0 13
55209: PPUSH
55210: CALL_OW 247
55214: PUSH
55215: LD_INT 2
55217: EQUAL
55218: AND
55219: PUSH
55220: LD_VAR 0 13
55224: PPUSH
55225: CALL_OW 263
55229: PUSH
55230: LD_INT 1
55232: EQUAL
55233: AND
55234: IFFALSE 55398
// begin if IsDrivenBy ( tmp ) then
55236: LD_VAR 0 13
55240: PPUSH
55241: CALL_OW 311
55245: IFFALSE 55249
// continue ;
55247: GO 55048
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55249: LD_VAR 0 6
55253: PPUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 60
55259: PUSH
55260: EMPTY
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 55
55272: PUSH
55273: EMPTY
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PPUSH
55284: CALL_OW 72
55288: IFFALSE 55396
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55290: LD_ADDR_VAR 0 18
55294: PUSH
55295: LD_VAR 0 6
55299: PPUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 60
55305: PUSH
55306: EMPTY
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 55
55318: PUSH
55319: EMPTY
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PPUSH
55330: CALL_OW 72
55334: PUSH
55335: LD_INT 1
55337: ARRAY
55338: ST_TO_ADDR
// if IsInUnit ( driver ) then
55339: LD_VAR 0 18
55343: PPUSH
55344: CALL_OW 310
55348: IFFALSE 55359
// ComExit ( driver ) ;
55350: LD_VAR 0 18
55354: PPUSH
55355: CALL 80761 0 1
// AddComEnterUnit ( driver , tmp ) ;
55359: LD_VAR 0 18
55363: PPUSH
55364: LD_VAR 0 13
55368: PPUSH
55369: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55373: LD_VAR 0 18
55377: PPUSH
55378: LD_VAR 0 7
55382: PPUSH
55383: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55387: LD_VAR 0 18
55391: PPUSH
55392: CALL_OW 181
// end ; continue ;
55396: GO 55048
// end ; if not cleaners or not tmp in cleaners then
55398: LD_VAR 0 6
55402: NOT
55403: PUSH
55404: LD_VAR 0 13
55408: PUSH
55409: LD_VAR 0 6
55413: IN
55414: NOT
55415: OR
55416: IFFALSE 55723
// begin if dep then
55418: LD_VAR 0 17
55422: IFFALSE 55558
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55424: LD_ADDR_VAR 0 16
55428: PUSH
55429: LD_VAR 0 17
55433: PUSH
55434: LD_INT 1
55436: ARRAY
55437: PPUSH
55438: CALL_OW 250
55442: PPUSH
55443: LD_VAR 0 17
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PPUSH
55452: CALL_OW 254
55456: PPUSH
55457: LD_INT 5
55459: PPUSH
55460: CALL_OW 272
55464: PUSH
55465: LD_VAR 0 17
55469: PUSH
55470: LD_INT 1
55472: ARRAY
55473: PPUSH
55474: CALL_OW 251
55478: PPUSH
55479: LD_VAR 0 17
55483: PUSH
55484: LD_INT 1
55486: ARRAY
55487: PPUSH
55488: CALL_OW 254
55492: PPUSH
55493: LD_INT 5
55495: PPUSH
55496: CALL_OW 273
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55505: LD_VAR 0 16
55509: PUSH
55510: LD_INT 1
55512: ARRAY
55513: PPUSH
55514: LD_VAR 0 16
55518: PUSH
55519: LD_INT 2
55521: ARRAY
55522: PPUSH
55523: CALL_OW 488
55527: IFFALSE 55558
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55529: LD_VAR 0 13
55533: PPUSH
55534: LD_VAR 0 16
55538: PUSH
55539: LD_INT 1
55541: ARRAY
55542: PPUSH
55543: LD_VAR 0 16
55547: PUSH
55548: LD_INT 2
55550: ARRAY
55551: PPUSH
55552: CALL_OW 111
// continue ;
55556: GO 55048
// end ; end ; r := GetDir ( tmp ) ;
55558: LD_ADDR_VAR 0 15
55562: PUSH
55563: LD_VAR 0 13
55567: PPUSH
55568: CALL_OW 254
55572: ST_TO_ADDR
// if r = 5 then
55573: LD_VAR 0 15
55577: PUSH
55578: LD_INT 5
55580: EQUAL
55581: IFFALSE 55591
// r := 0 ;
55583: LD_ADDR_VAR 0 15
55587: PUSH
55588: LD_INT 0
55590: ST_TO_ADDR
// for j = r to 5 do
55591: LD_ADDR_VAR 0 10
55595: PUSH
55596: DOUBLE
55597: LD_VAR 0 15
55601: DEC
55602: ST_TO_ADDR
55603: LD_INT 5
55605: PUSH
55606: FOR_TO
55607: IFFALSE 55721
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55609: LD_ADDR_VAR 0 11
55613: PUSH
55614: LD_VAR 0 13
55618: PPUSH
55619: CALL_OW 250
55623: PPUSH
55624: LD_VAR 0 10
55628: PPUSH
55629: LD_INT 2
55631: PPUSH
55632: CALL_OW 272
55636: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55637: LD_ADDR_VAR 0 12
55641: PUSH
55642: LD_VAR 0 13
55646: PPUSH
55647: CALL_OW 251
55651: PPUSH
55652: LD_VAR 0 10
55656: PPUSH
55657: LD_INT 2
55659: PPUSH
55660: CALL_OW 273
55664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55665: LD_VAR 0 11
55669: PPUSH
55670: LD_VAR 0 12
55674: PPUSH
55675: CALL_OW 488
55679: PUSH
55680: LD_VAR 0 11
55684: PPUSH
55685: LD_VAR 0 12
55689: PPUSH
55690: CALL_OW 428
55694: NOT
55695: AND
55696: IFFALSE 55719
// begin ComMoveXY ( tmp , _x , _y ) ;
55698: LD_VAR 0 13
55702: PPUSH
55703: LD_VAR 0 11
55707: PPUSH
55708: LD_VAR 0 12
55712: PPUSH
55713: CALL_OW 111
// break ;
55717: GO 55721
// end ; end ;
55719: GO 55606
55721: POP
55722: POP
// end ; end ;
55723: GO 55048
55725: POP
55726: POP
// end ;
55727: LD_VAR 0 8
55731: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55732: LD_INT 0
55734: PPUSH
// result := true ;
55735: LD_ADDR_VAR 0 3
55739: PUSH
55740: LD_INT 1
55742: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55743: LD_VAR 0 2
55747: PUSH
55748: LD_INT 24
55750: DOUBLE
55751: EQUAL
55752: IFTRUE 55762
55754: LD_INT 33
55756: DOUBLE
55757: EQUAL
55758: IFTRUE 55762
55760: GO 55787
55762: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55763: LD_ADDR_VAR 0 3
55767: PUSH
55768: LD_INT 32
55770: PPUSH
55771: LD_VAR 0 1
55775: PPUSH
55776: CALL_OW 321
55780: PUSH
55781: LD_INT 2
55783: EQUAL
55784: ST_TO_ADDR
55785: GO 56103
55787: LD_INT 20
55789: DOUBLE
55790: EQUAL
55791: IFTRUE 55795
55793: GO 55820
55795: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55796: LD_ADDR_VAR 0 3
55800: PUSH
55801: LD_INT 6
55803: PPUSH
55804: LD_VAR 0 1
55808: PPUSH
55809: CALL_OW 321
55813: PUSH
55814: LD_INT 2
55816: EQUAL
55817: ST_TO_ADDR
55818: GO 56103
55820: LD_INT 22
55822: DOUBLE
55823: EQUAL
55824: IFTRUE 55834
55826: LD_INT 36
55828: DOUBLE
55829: EQUAL
55830: IFTRUE 55834
55832: GO 55859
55834: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55835: LD_ADDR_VAR 0 3
55839: PUSH
55840: LD_INT 15
55842: PPUSH
55843: LD_VAR 0 1
55847: PPUSH
55848: CALL_OW 321
55852: PUSH
55853: LD_INT 2
55855: EQUAL
55856: ST_TO_ADDR
55857: GO 56103
55859: LD_INT 30
55861: DOUBLE
55862: EQUAL
55863: IFTRUE 55867
55865: GO 55892
55867: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55868: LD_ADDR_VAR 0 3
55872: PUSH
55873: LD_INT 20
55875: PPUSH
55876: LD_VAR 0 1
55880: PPUSH
55881: CALL_OW 321
55885: PUSH
55886: LD_INT 2
55888: EQUAL
55889: ST_TO_ADDR
55890: GO 56103
55892: LD_INT 28
55894: DOUBLE
55895: EQUAL
55896: IFTRUE 55906
55898: LD_INT 21
55900: DOUBLE
55901: EQUAL
55902: IFTRUE 55906
55904: GO 55931
55906: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55907: LD_ADDR_VAR 0 3
55911: PUSH
55912: LD_INT 21
55914: PPUSH
55915: LD_VAR 0 1
55919: PPUSH
55920: CALL_OW 321
55924: PUSH
55925: LD_INT 2
55927: EQUAL
55928: ST_TO_ADDR
55929: GO 56103
55931: LD_INT 16
55933: DOUBLE
55934: EQUAL
55935: IFTRUE 55939
55937: GO 55964
55939: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55940: LD_ADDR_VAR 0 3
55944: PUSH
55945: LD_INT 84
55947: PPUSH
55948: LD_VAR 0 1
55952: PPUSH
55953: CALL_OW 321
55957: PUSH
55958: LD_INT 2
55960: EQUAL
55961: ST_TO_ADDR
55962: GO 56103
55964: LD_INT 19
55966: DOUBLE
55967: EQUAL
55968: IFTRUE 55978
55970: LD_INT 23
55972: DOUBLE
55973: EQUAL
55974: IFTRUE 55978
55976: GO 56003
55978: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55979: LD_ADDR_VAR 0 3
55983: PUSH
55984: LD_INT 83
55986: PPUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: CALL_OW 321
55996: PUSH
55997: LD_INT 2
55999: EQUAL
56000: ST_TO_ADDR
56001: GO 56103
56003: LD_INT 17
56005: DOUBLE
56006: EQUAL
56007: IFTRUE 56011
56009: GO 56036
56011: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56012: LD_ADDR_VAR 0 3
56016: PUSH
56017: LD_INT 39
56019: PPUSH
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 321
56029: PUSH
56030: LD_INT 2
56032: EQUAL
56033: ST_TO_ADDR
56034: GO 56103
56036: LD_INT 18
56038: DOUBLE
56039: EQUAL
56040: IFTRUE 56044
56042: GO 56069
56044: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56045: LD_ADDR_VAR 0 3
56049: PUSH
56050: LD_INT 40
56052: PPUSH
56053: LD_VAR 0 1
56057: PPUSH
56058: CALL_OW 321
56062: PUSH
56063: LD_INT 2
56065: EQUAL
56066: ST_TO_ADDR
56067: GO 56103
56069: LD_INT 27
56071: DOUBLE
56072: EQUAL
56073: IFTRUE 56077
56075: GO 56102
56077: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56078: LD_ADDR_VAR 0 3
56082: PUSH
56083: LD_INT 35
56085: PPUSH
56086: LD_VAR 0 1
56090: PPUSH
56091: CALL_OW 321
56095: PUSH
56096: LD_INT 2
56098: EQUAL
56099: ST_TO_ADDR
56100: GO 56103
56102: POP
// end ;
56103: LD_VAR 0 3
56107: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56108: LD_INT 0
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
// result := false ;
56121: LD_ADDR_VAR 0 6
56125: PUSH
56126: LD_INT 0
56128: ST_TO_ADDR
// if btype = b_depot then
56129: LD_VAR 0 2
56133: PUSH
56134: LD_INT 0
56136: EQUAL
56137: IFFALSE 56149
// begin result := true ;
56139: LD_ADDR_VAR 0 6
56143: PUSH
56144: LD_INT 1
56146: ST_TO_ADDR
// exit ;
56147: GO 56975
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56149: LD_VAR 0 1
56153: NOT
56154: PUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: CALL_OW 266
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: IN
56175: NOT
56176: OR
56177: PUSH
56178: LD_VAR 0 2
56182: NOT
56183: OR
56184: PUSH
56185: LD_VAR 0 5
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: LD_INT 4
56204: PUSH
56205: LD_INT 5
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: IN
56216: NOT
56217: OR
56218: PUSH
56219: LD_VAR 0 3
56223: PPUSH
56224: LD_VAR 0 4
56228: PPUSH
56229: CALL_OW 488
56233: NOT
56234: OR
56235: IFFALSE 56239
// exit ;
56237: GO 56975
// side := GetSide ( depot ) ;
56239: LD_ADDR_VAR 0 9
56243: PUSH
56244: LD_VAR 0 1
56248: PPUSH
56249: CALL_OW 255
56253: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56254: LD_VAR 0 9
56258: PPUSH
56259: LD_VAR 0 2
56263: PPUSH
56264: CALL 55732 0 2
56268: NOT
56269: IFFALSE 56273
// exit ;
56271: GO 56975
// pom := GetBase ( depot ) ;
56273: LD_ADDR_VAR 0 10
56277: PUSH
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 274
56287: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56288: LD_ADDR_VAR 0 11
56292: PUSH
56293: LD_VAR 0 2
56297: PPUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 248
56307: PPUSH
56308: CALL_OW 450
56312: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56313: LD_VAR 0 10
56317: PPUSH
56318: LD_INT 1
56320: PPUSH
56321: CALL_OW 275
56325: PUSH
56326: LD_VAR 0 11
56330: PUSH
56331: LD_INT 1
56333: ARRAY
56334: GREATEREQUAL
56335: PUSH
56336: LD_VAR 0 10
56340: PPUSH
56341: LD_INT 2
56343: PPUSH
56344: CALL_OW 275
56348: PUSH
56349: LD_VAR 0 11
56353: PUSH
56354: LD_INT 2
56356: ARRAY
56357: GREATEREQUAL
56358: AND
56359: PUSH
56360: LD_VAR 0 10
56364: PPUSH
56365: LD_INT 3
56367: PPUSH
56368: CALL_OW 275
56372: PUSH
56373: LD_VAR 0 11
56377: PUSH
56378: LD_INT 3
56380: ARRAY
56381: GREATEREQUAL
56382: AND
56383: NOT
56384: IFFALSE 56388
// exit ;
56386: GO 56975
// if GetBType ( depot ) = b_depot then
56388: LD_VAR 0 1
56392: PPUSH
56393: CALL_OW 266
56397: PUSH
56398: LD_INT 0
56400: EQUAL
56401: IFFALSE 56413
// dist := 28 else
56403: LD_ADDR_VAR 0 14
56407: PUSH
56408: LD_INT 28
56410: ST_TO_ADDR
56411: GO 56421
// dist := 36 ;
56413: LD_ADDR_VAR 0 14
56417: PUSH
56418: LD_INT 36
56420: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56421: LD_VAR 0 1
56425: PPUSH
56426: LD_VAR 0 3
56430: PPUSH
56431: LD_VAR 0 4
56435: PPUSH
56436: CALL_OW 297
56440: PUSH
56441: LD_VAR 0 14
56445: GREATER
56446: IFFALSE 56450
// exit ;
56448: GO 56975
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56450: LD_ADDR_VAR 0 12
56454: PUSH
56455: LD_VAR 0 2
56459: PPUSH
56460: LD_VAR 0 3
56464: PPUSH
56465: LD_VAR 0 4
56469: PPUSH
56470: LD_VAR 0 5
56474: PPUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 248
56484: PPUSH
56485: LD_INT 0
56487: PPUSH
56488: CALL 56980 0 6
56492: ST_TO_ADDR
// if not hexes then
56493: LD_VAR 0 12
56497: NOT
56498: IFFALSE 56502
// exit ;
56500: GO 56975
// hex := GetHexInfo ( x , y ) ;
56502: LD_ADDR_VAR 0 15
56506: PUSH
56507: LD_VAR 0 3
56511: PPUSH
56512: LD_VAR 0 4
56516: PPUSH
56517: CALL_OW 546
56521: ST_TO_ADDR
// if hex [ 1 ] then
56522: LD_VAR 0 15
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: IFFALSE 56534
// exit ;
56532: GO 56975
// height := hex [ 2 ] ;
56534: LD_ADDR_VAR 0 13
56538: PUSH
56539: LD_VAR 0 15
56543: PUSH
56544: LD_INT 2
56546: ARRAY
56547: ST_TO_ADDR
// for i = 1 to hexes do
56548: LD_ADDR_VAR 0 7
56552: PUSH
56553: DOUBLE
56554: LD_INT 1
56556: DEC
56557: ST_TO_ADDR
56558: LD_VAR 0 12
56562: PUSH
56563: FOR_TO
56564: IFFALSE 56894
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56566: LD_VAR 0 12
56570: PUSH
56571: LD_VAR 0 7
56575: ARRAY
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PPUSH
56581: LD_VAR 0 12
56585: PUSH
56586: LD_VAR 0 7
56590: ARRAY
56591: PUSH
56592: LD_INT 2
56594: ARRAY
56595: PPUSH
56596: CALL_OW 488
56600: NOT
56601: PUSH
56602: LD_VAR 0 12
56606: PUSH
56607: LD_VAR 0 7
56611: ARRAY
56612: PUSH
56613: LD_INT 1
56615: ARRAY
56616: PPUSH
56617: LD_VAR 0 12
56621: PUSH
56622: LD_VAR 0 7
56626: ARRAY
56627: PUSH
56628: LD_INT 2
56630: ARRAY
56631: PPUSH
56632: CALL_OW 428
56636: PUSH
56637: LD_INT 0
56639: GREATER
56640: OR
56641: PUSH
56642: LD_VAR 0 12
56646: PUSH
56647: LD_VAR 0 7
56651: ARRAY
56652: PUSH
56653: LD_INT 1
56655: ARRAY
56656: PPUSH
56657: LD_VAR 0 12
56661: PUSH
56662: LD_VAR 0 7
56666: ARRAY
56667: PUSH
56668: LD_INT 2
56670: ARRAY
56671: PPUSH
56672: CALL_OW 351
56676: OR
56677: IFFALSE 56683
// exit ;
56679: POP
56680: POP
56681: GO 56975
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56683: LD_ADDR_VAR 0 8
56687: PUSH
56688: LD_VAR 0 12
56692: PUSH
56693: LD_VAR 0 7
56697: ARRAY
56698: PUSH
56699: LD_INT 1
56701: ARRAY
56702: PPUSH
56703: LD_VAR 0 12
56707: PUSH
56708: LD_VAR 0 7
56712: ARRAY
56713: PUSH
56714: LD_INT 2
56716: ARRAY
56717: PPUSH
56718: CALL_OW 546
56722: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56723: LD_VAR 0 8
56727: PUSH
56728: LD_INT 1
56730: ARRAY
56731: PUSH
56732: LD_VAR 0 8
56736: PUSH
56737: LD_INT 2
56739: ARRAY
56740: PUSH
56741: LD_VAR 0 13
56745: PUSH
56746: LD_INT 2
56748: PLUS
56749: GREATER
56750: OR
56751: PUSH
56752: LD_VAR 0 8
56756: PUSH
56757: LD_INT 2
56759: ARRAY
56760: PUSH
56761: LD_VAR 0 13
56765: PUSH
56766: LD_INT 2
56768: MINUS
56769: LESS
56770: OR
56771: PUSH
56772: LD_VAR 0 8
56776: PUSH
56777: LD_INT 3
56779: ARRAY
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 8
56786: PUSH
56787: LD_INT 9
56789: PUSH
56790: LD_INT 10
56792: PUSH
56793: LD_INT 11
56795: PUSH
56796: LD_INT 12
56798: PUSH
56799: LD_INT 13
56801: PUSH
56802: LD_INT 16
56804: PUSH
56805: LD_INT 17
56807: PUSH
56808: LD_INT 18
56810: PUSH
56811: LD_INT 19
56813: PUSH
56814: LD_INT 20
56816: PUSH
56817: LD_INT 21
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: IN
56835: NOT
56836: OR
56837: PUSH
56838: LD_VAR 0 8
56842: PUSH
56843: LD_INT 5
56845: ARRAY
56846: NOT
56847: OR
56848: PUSH
56849: LD_VAR 0 8
56853: PUSH
56854: LD_INT 6
56856: ARRAY
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 7
56866: PUSH
56867: LD_INT 9
56869: PUSH
56870: LD_INT 10
56872: PUSH
56873: LD_INT 11
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: IN
56884: NOT
56885: OR
56886: IFFALSE 56892
// exit ;
56888: POP
56889: POP
56890: GO 56975
// end ;
56892: GO 56563
56894: POP
56895: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56896: LD_VAR 0 9
56900: PPUSH
56901: LD_VAR 0 3
56905: PPUSH
56906: LD_VAR 0 4
56910: PPUSH
56911: LD_INT 20
56913: PPUSH
56914: CALL 48898 0 4
56918: PUSH
56919: LD_INT 4
56921: ARRAY
56922: IFFALSE 56926
// exit ;
56924: GO 56975
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56926: LD_VAR 0 2
56930: PUSH
56931: LD_INT 29
56933: PUSH
56934: LD_INT 30
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: IN
56941: PUSH
56942: LD_VAR 0 3
56946: PPUSH
56947: LD_VAR 0 4
56951: PPUSH
56952: LD_VAR 0 9
56956: PPUSH
56957: CALL_OW 440
56961: NOT
56962: AND
56963: IFFALSE 56967
// exit ;
56965: GO 56975
// result := true ;
56967: LD_ADDR_VAR 0 6
56971: PUSH
56972: LD_INT 1
56974: ST_TO_ADDR
// end ;
56975: LD_VAR 0 6
56979: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56980: LD_INT 0
56982: PPUSH
56983: PPUSH
56984: PPUSH
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
56989: PPUSH
56990: PPUSH
56991: PPUSH
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
56996: PPUSH
56997: PPUSH
56998: PPUSH
56999: PPUSH
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
// result = [ ] ;
57040: LD_ADDR_VAR 0 7
57044: PUSH
57045: EMPTY
57046: ST_TO_ADDR
// temp_list = [ ] ;
57047: LD_ADDR_VAR 0 9
57051: PUSH
57052: EMPTY
57053: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57054: LD_VAR 0 4
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: LD_INT 4
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: IN
57085: NOT
57086: PUSH
57087: LD_VAR 0 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: IN
57102: PUSH
57103: LD_VAR 0 5
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: IN
57122: NOT
57123: AND
57124: OR
57125: IFFALSE 57129
// exit ;
57127: GO 75520
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57129: LD_VAR 0 1
57133: PUSH
57134: LD_INT 6
57136: PUSH
57137: LD_INT 7
57139: PUSH
57140: LD_INT 8
57142: PUSH
57143: LD_INT 13
57145: PUSH
57146: LD_INT 12
57148: PUSH
57149: LD_INT 15
57151: PUSH
57152: LD_INT 11
57154: PUSH
57155: LD_INT 14
57157: PUSH
57158: LD_INT 10
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: IN
57172: IFFALSE 57182
// btype = b_lab ;
57174: LD_ADDR_VAR 0 1
57178: PUSH
57179: LD_INT 6
57181: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57182: LD_VAR 0 6
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: IN
57201: NOT
57202: PUSH
57203: LD_VAR 0 1
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 6
57222: PUSH
57223: LD_INT 36
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: LD_INT 5
57231: PUSH
57232: LD_INT 31
57234: PUSH
57235: LD_INT 32
57237: PUSH
57238: LD_INT 33
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: IN
57254: NOT
57255: PUSH
57256: LD_VAR 0 6
57260: PUSH
57261: LD_INT 1
57263: EQUAL
57264: AND
57265: OR
57266: PUSH
57267: LD_VAR 0 1
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: IN
57282: NOT
57283: PUSH
57284: LD_VAR 0 6
57288: PUSH
57289: LD_INT 2
57291: EQUAL
57292: AND
57293: OR
57294: IFFALSE 57304
// mode = 0 ;
57296: LD_ADDR_VAR 0 6
57300: PUSH
57301: LD_INT 0
57303: ST_TO_ADDR
// case mode of 0 :
57304: LD_VAR 0 6
57308: PUSH
57309: LD_INT 0
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 68770
57317: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57318: LD_ADDR_VAR 0 11
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57511: LD_ADDR_VAR 0 12
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: NEG
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57707: LD_ADDR_VAR 0 13
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57906: LD_ADDR_VAR 0 14
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58102: LD_ADDR_VAR 0 15
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58295: LD_ADDR_VAR 0 16
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58488: LD_ADDR_VAR 0 17
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58718: LD_ADDR_VAR 0 18
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58948: LD_ADDR_VAR 0 19
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59178: LD_ADDR_VAR 0 20
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59408: LD_ADDR_VAR 0 21
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59638: LD_ADDR_VAR 0 22
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59868: LD_ADDR_VAR 0 23
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60148: LD_ADDR_VAR 0 24
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60424: LD_ADDR_VAR 0 25
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60698: LD_ADDR_VAR 0 26
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60974: LD_ADDR_VAR 0 27
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: LD_INT 2
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61254: LD_ADDR_VAR 0 28
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61536: LD_ADDR_VAR 0 29
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61815: LD_ADDR_VAR 0 30
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 3
62008: NEG
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62093: LD_ADDR_VAR 0 31
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: LD_INT 2
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: LD_INT 3
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: NEG
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62371: LD_ADDR_VAR 0 32
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: LD_INT 2
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: NEG
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62649: LD_ADDR_VAR 0 33
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 2
62839: NEG
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62928: LD_ADDR_VAR 0 34
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 2
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: NEG
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63208: LD_ADDR_VAR 0 35
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63320: LD_ADDR_VAR 0 36
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63432: LD_ADDR_VAR 0 37
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 1
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63544: LD_ADDR_VAR 0 38
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63656: LD_ADDR_VAR 0 39
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63768: LD_ADDR_VAR 0 40
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 1
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63880: LD_ADDR_VAR 0 41
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: NEG
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: LD_INT 3
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 3
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: LD_INT 3
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64230: LD_ADDR_VAR 0 42
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 3
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 3
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: LD_INT 2
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: LD_INT 3
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64580: LD_ADDR_VAR 0 43
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 3
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 3
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: NEG
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64928: LD_ADDR_VAR 0 44
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: NEG
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 2
65118: NEG
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 3
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 3
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 3
65202: NEG
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 3
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 3
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65278: LD_ADDR_VAR 0 45
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 2
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 2
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 3
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 3
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65628: LD_ADDR_VAR 0 46
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65976: LD_ADDR_VAR 0 47
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 2
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: LD_INT 2
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66127: LD_ADDR_VAR 0 48
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66274: LD_ADDR_VAR 0 49
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66418: LD_ADDR_VAR 0 50
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: NEG
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66562: LD_ADDR_VAR 0 51
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66709: LD_ADDR_VAR 0 52
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66860: LD_ADDR_VAR 0 53
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: LD_INT 2
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 2
67036: NEG
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67090: LD_ADDR_VAR 0 54
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 2
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 2
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: NEG
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: LD_INT 2
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67320: LD_ADDR_VAR 0 55
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: NEG
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 1
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67550: LD_ADDR_VAR 0 56
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 1
67715: NEG
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 2
67737: NEG
67738: PUSH
67739: LD_INT 1
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 2
67749: NEG
67750: PUSH
67751: LD_INT 2
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67780: LD_ADDR_VAR 0 57
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: LD_INT 1
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 2
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68010: LD_ADDR_VAR 0 58
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 1
68068: NEG
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: NEG
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: LD_INT 1
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 2
68186: NEG
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 2
68197: NEG
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 2
68209: NEG
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68240: LD_ADDR_VAR 0 59
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68328: LD_ADDR_VAR 0 60
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 0
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: LD_INT 1
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68416: LD_ADDR_VAR 0 61
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 1
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68504: LD_ADDR_VAR 0 62
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: LD_INT 1
68524: NEG
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68592: LD_ADDR_VAR 0 63
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: LD_INT 1
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68680: LD_ADDR_VAR 0 64
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: LD_INT 1
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: LD_INT 1
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 1
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 1
68738: NEG
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 1
68749: NEG
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: ST_TO_ADDR
// end ; 1 :
68768: GO 74665
68770: LD_INT 1
68772: DOUBLE
68773: EQUAL
68774: IFTRUE 68778
68776: GO 71401
68778: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68779: LD_ADDR_VAR 0 11
68783: PUSH
68784: LD_INT 1
68786: NEG
68787: PUSH
68788: LD_INT 3
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68823: LD_ADDR_VAR 0 12
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 3
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68864: LD_ADDR_VAR 0 13
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 3
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 2
68891: PUSH
68892: LD_INT 3
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: LIST
68903: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68904: LD_ADDR_VAR 0 14
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68945: LD_ADDR_VAR 0 15
68949: PUSH
68950: LD_INT 2
68952: NEG
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: NEG
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: LIST
68988: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68989: LD_ADDR_VAR 0 16
68993: PUSH
68994: LD_INT 2
68996: NEG
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: LD_INT 3
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69035: LD_ADDR_VAR 0 17
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: LD_INT 2
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69079: LD_ADDR_VAR 0 18
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69120: LD_ADDR_VAR 0 19
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69160: LD_ADDR_VAR 0 20
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69201: LD_ADDR_VAR 0 21
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69245: LD_ADDR_VAR 0 22
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69291: LD_ADDR_VAR 0 23
69295: PUSH
69296: LD_INT 0
69298: PUSH
69299: LD_INT 3
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: LD_INT 4
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69335: LD_ADDR_VAR 0 24
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 4
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69376: LD_ADDR_VAR 0 25
69380: PUSH
69381: LD_INT 3
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 4
69393: PUSH
69394: LD_INT 3
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 3
69403: PUSH
69404: LD_INT 4
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69416: LD_ADDR_VAR 0 26
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: LD_INT 4
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69457: LD_ADDR_VAR 0 27
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: NEG
69476: PUSH
69477: LD_INT 1
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: LIST
69500: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69501: LD_ADDR_VAR 0 28
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 3
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 3
69520: NEG
69521: PUSH
69522: LD_INT 4
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 4
69532: NEG
69533: PUSH
69534: LD_INT 3
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69547: LD_ADDR_VAR 0 29
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 0
69566: PUSH
69567: LD_INT 3
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 1
69577: PUSH
69578: LD_INT 2
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: LD_INT 4
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 4
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 1
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: LD_INT 5
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 5
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 1
69645: PUSH
69646: LD_INT 4
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: LD_INT 6
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: LD_INT 6
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 5
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69702: LD_ADDR_VAR 0 30
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 3
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 1
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 4
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 4
69761: PUSH
69762: LD_INT 1
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 4
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 5
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 5
69792: PUSH
69793: LD_INT 1
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 5
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 6
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 6
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69845: LD_ADDR_VAR 0 31
69849: PUSH
69850: LD_INT 3
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 2
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 4
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: LD_INT 4
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 5
69912: PUSH
69913: LD_INT 4
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: LD_INT 5
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 4
69932: PUSH
69933: LD_INT 5
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 6
69942: PUSH
69943: LD_INT 5
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 6
69952: PUSH
69953: LD_INT 6
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 5
69962: PUSH
69963: LD_INT 6
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69984: LD_ADDR_VAR 0 32
69988: PUSH
69989: LD_INT 1
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: LD_INT 4
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: NEG
70043: PUSH
70044: LD_INT 3
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 1
70053: PUSH
70054: LD_INT 5
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: LD_INT 5
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: LD_INT 4
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: LD_INT 6
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: LD_INT 6
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: LD_INT 5
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70127: LD_ADDR_VAR 0 33
70131: PUSH
70132: LD_INT 2
70134: NEG
70135: PUSH
70136: LD_INT 1
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 3
70145: NEG
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 3
70156: NEG
70157: PUSH
70158: LD_INT 1
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 3
70168: NEG
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 4
70179: NEG
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 4
70190: NEG
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 4
70202: NEG
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 5
70213: NEG
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: NEG
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 5
70236: NEG
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 6
70247: NEG
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 6
70258: NEG
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70282: LD_ADDR_VAR 0 34
70286: PUSH
70287: LD_INT 2
70289: NEG
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: NEG
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: LD_INT 3
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 3
70325: NEG
70326: PUSH
70327: LD_INT 4
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 4
70337: NEG
70338: PUSH
70339: LD_INT 3
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 4
70349: NEG
70350: PUSH
70351: LD_INT 4
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 4
70361: NEG
70362: PUSH
70363: LD_INT 5
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 5
70373: NEG
70374: PUSH
70375: LD_INT 4
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 5
70385: NEG
70386: PUSH
70387: LD_INT 5
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 5
70397: NEG
70398: PUSH
70399: LD_INT 6
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 6
70409: NEG
70410: PUSH
70411: LD_INT 5
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 6
70421: NEG
70422: PUSH
70423: LD_INT 6
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70445: LD_ADDR_VAR 0 41
70449: PUSH
70450: LD_INT 0
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: LD_INT 3
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: LD_INT 2
70478: NEG
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: LIST
70488: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70489: LD_ADDR_VAR 0 42
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 2
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 3
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: LIST
70529: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70530: LD_ADDR_VAR 0 43
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: LD_INT 2
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 3
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: LD_INT 3
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70570: LD_ADDR_VAR 0 44
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: PUSH
70588: LD_INT 3
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 2
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70611: LD_ADDR_VAR 0 45
70615: PUSH
70616: LD_INT 2
70618: NEG
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 2
70629: NEG
70630: PUSH
70631: LD_INT 1
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 3
70640: NEG
70641: PUSH
70642: LD_INT 1
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70655: LD_ADDR_VAR 0 46
70659: PUSH
70660: LD_INT 2
70662: NEG
70663: PUSH
70664: LD_INT 2
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: LD_INT 3
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: LD_INT 2
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70701: LD_ADDR_VAR 0 47
70705: PUSH
70706: LD_INT 2
70708: NEG
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70734: LD_ADDR_VAR 0 48
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: LD_INT 2
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 2
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70765: LD_ADDR_VAR 0 49
70769: PUSH
70770: LD_INT 3
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: LD_INT 2
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70794: LD_ADDR_VAR 0 50
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70823: LD_ADDR_VAR 0 51
70827: PUSH
70828: LD_INT 1
70830: NEG
70831: PUSH
70832: LD_INT 2
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 2
70841: NEG
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70854: LD_ADDR_VAR 0 52
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 3
70873: NEG
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70887: LD_ADDR_VAR 0 53
70891: PUSH
70892: LD_INT 1
70894: NEG
70895: PUSH
70896: LD_INT 3
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 3
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: LD_INT 2
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70931: LD_ADDR_VAR 0 54
70935: PUSH
70936: LD_INT 2
70938: PUSH
70939: LD_INT 1
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: LIST
70971: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70972: LD_ADDR_VAR 0 55
70976: PUSH
70977: LD_INT 3
70979: PUSH
70980: LD_INT 2
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: LD_INT 3
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 2
70999: PUSH
71000: LD_INT 3
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: LIST
71011: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71012: LD_ADDR_VAR 0 56
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 0
71029: PUSH
71030: LD_INT 3
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71053: LD_ADDR_VAR 0 57
71057: PUSH
71058: LD_INT 2
71060: NEG
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 3
71071: NEG
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 3
71082: NEG
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: LIST
71096: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71097: LD_ADDR_VAR 0 58
71101: PUSH
71102: LD_INT 2
71104: NEG
71105: PUSH
71106: LD_INT 3
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: NEG
71117: PUSH
71118: LD_INT 2
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: NEG
71129: PUSH
71130: LD_INT 3
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: LIST
71142: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71143: LD_ADDR_VAR 0 59
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: LD_INT 2
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: LD_INT 2
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: LD_INT 1
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: LIST
71186: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71187: LD_ADDR_VAR 0 60
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: LD_INT 1
71197: NEG
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 2
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 2
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: LIST
71227: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71228: LD_ADDR_VAR 0 61
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 1
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: LIST
71267: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71268: LD_ADDR_VAR 0 62
71272: PUSH
71273: LD_INT 1
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 1
71295: NEG
71296: PUSH
71297: LD_INT 1
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71309: LD_ADDR_VAR 0 63
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 2
71327: NEG
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 2
71338: NEG
71339: PUSH
71340: LD_INT 1
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: LIST
71352: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71353: LD_ADDR_VAR 0 64
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: LD_INT 1
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 2
71384: NEG
71385: PUSH
71386: LD_INT 2
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: ST_TO_ADDR
// end ; 2 :
71399: GO 74665
71401: LD_INT 2
71403: DOUBLE
71404: EQUAL
71405: IFTRUE 71409
71407: GO 74664
71409: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71410: LD_ADDR_VAR 0 29
71414: PUSH
71415: LD_INT 4
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: LD_INT 1
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 5
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 5
71448: PUSH
71449: LD_INT 1
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 4
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 3
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 3
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 3
71489: PUSH
71490: LD_INT 2
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 5
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 3
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 3
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 4
71530: PUSH
71531: LD_INT 3
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 4
71540: PUSH
71541: LD_INT 4
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 3
71550: PUSH
71551: LD_INT 4
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 2
71560: PUSH
71561: LD_INT 3
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 2
71570: PUSH
71571: LD_INT 2
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 4
71580: PUSH
71581: LD_INT 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 2
71590: PUSH
71591: LD_INT 4
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 0
71600: PUSH
71601: LD_INT 4
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: LD_INT 3
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 1
71620: PUSH
71621: LD_INT 4
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: LD_INT 5
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: LD_INT 5
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 1
71650: NEG
71651: PUSH
71652: LD_INT 4
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 1
71661: NEG
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 2
71672: PUSH
71673: LD_INT 5
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 2
71682: NEG
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 3
71693: NEG
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 3
71704: NEG
71705: PUSH
71706: LD_INT 1
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 2
71716: NEG
71717: PUSH
71718: LD_INT 0
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: LD_INT 1
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 3
71738: NEG
71739: PUSH
71740: LD_INT 1
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 4
71749: NEG
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: NEG
71761: PUSH
71762: LD_INT 1
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 4
71772: NEG
71773: PUSH
71774: LD_INT 2
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 2
71784: NEG
71785: PUSH
71786: LD_INT 2
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 4
71795: NEG
71796: PUSH
71797: LD_INT 4
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 4
71807: NEG
71808: PUSH
71809: LD_INT 5
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 3
71819: NEG
71820: PUSH
71821: LD_INT 4
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 3
71831: NEG
71832: PUSH
71833: LD_INT 3
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 4
71843: NEG
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 5
71855: NEG
71856: PUSH
71857: LD_INT 4
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 5
71867: NEG
71868: PUSH
71869: LD_INT 5
71871: NEG
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: NEG
71880: PUSH
71881: LD_INT 5
71883: NEG
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 5
71891: NEG
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71948: LD_ADDR_VAR 0 30
71952: PUSH
71953: LD_INT 4
71955: PUSH
71956: LD_INT 4
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 4
71965: PUSH
71966: LD_INT 3
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 5
71975: PUSH
71976: LD_INT 4
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 5
71985: PUSH
71986: LD_INT 5
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 4
71995: PUSH
71996: LD_INT 5
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 3
72005: PUSH
72006: LD_INT 4
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 5
72025: PUSH
72026: LD_INT 3
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 3
72035: PUSH
72036: LD_INT 5
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 3
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 2
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: PUSH
72066: LD_INT 3
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: LD_INT 4
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: LD_INT 4
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 1
72095: NEG
72096: PUSH
72097: LD_INT 3
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: LD_INT 2
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 2
72117: PUSH
72118: LD_INT 4
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 2
72127: NEG
72128: PUSH
72129: LD_INT 2
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 4
72138: NEG
72139: PUSH
72140: LD_INT 0
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 4
72149: NEG
72150: PUSH
72151: LD_INT 1
72153: NEG
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 3
72161: NEG
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 3
72172: NEG
72173: PUSH
72174: LD_INT 1
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 4
72183: NEG
72184: PUSH
72185: LD_INT 1
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 5
72194: NEG
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 5
72205: NEG
72206: PUSH
72207: LD_INT 1
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 5
72217: NEG
72218: PUSH
72219: LD_INT 2
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 3
72229: NEG
72230: PUSH
72231: LD_INT 2
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 3
72240: NEG
72241: PUSH
72242: LD_INT 3
72244: NEG
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 3
72252: NEG
72253: PUSH
72254: LD_INT 4
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 2
72264: NEG
72265: PUSH
72266: LD_INT 3
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 2
72276: NEG
72277: PUSH
72278: LD_INT 2
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 3
72288: NEG
72289: PUSH
72290: LD_INT 2
72292: NEG
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 4
72300: NEG
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 4
72312: NEG
72313: PUSH
72314: LD_INT 4
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 2
72324: NEG
72325: PUSH
72326: LD_INT 4
72328: NEG
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 4
72336: NEG
72337: PUSH
72338: LD_INT 2
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 0
72348: PUSH
72349: LD_INT 4
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 5
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: LD_INT 4
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 1
72381: PUSH
72382: LD_INT 3
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 3
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: LD_INT 4
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 1
72415: NEG
72416: PUSH
72417: LD_INT 5
72419: NEG
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 2
72427: PUSH
72428: LD_INT 3
72430: NEG
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 2
72438: NEG
72439: PUSH
72440: LD_INT 5
72442: NEG
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72495: LD_ADDR_VAR 0 31
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: LD_INT 4
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: LD_INT 3
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: LD_INT 4
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: LD_INT 5
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 5
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: PUSH
72554: LD_INT 4
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: LD_INT 3
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 2
72574: PUSH
72575: LD_INT 5
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: LD_INT 3
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 3
72595: NEG
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 3
72606: NEG
72607: PUSH
72608: LD_INT 1
72610: NEG
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 2
72629: NEG
72630: PUSH
72631: LD_INT 1
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 4
72651: NEG
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 4
72662: NEG
72663: PUSH
72664: LD_INT 1
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 4
72674: NEG
72675: PUSH
72676: LD_INT 2
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 2
72686: NEG
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 4
72697: NEG
72698: PUSH
72699: LD_INT 4
72701: NEG
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 4
72709: NEG
72710: PUSH
72711: LD_INT 5
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 3
72721: NEG
72722: PUSH
72723: LD_INT 4
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 3
72733: NEG
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 4
72745: NEG
72746: PUSH
72747: LD_INT 3
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 5
72757: NEG
72758: PUSH
72759: LD_INT 4
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 5
72769: NEG
72770: PUSH
72771: LD_INT 5
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 3
72781: NEG
72782: PUSH
72783: LD_INT 5
72785: NEG
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 5
72793: NEG
72794: PUSH
72795: LD_INT 3
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: LD_INT 3
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 4
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: PUSH
72828: LD_INT 3
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 1
72838: PUSH
72839: LD_INT 2
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: LD_INT 2
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: NEG
72861: PUSH
72862: LD_INT 3
72864: NEG
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 1
72872: NEG
72873: PUSH
72874: LD_INT 4
72876: NEG
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 2
72884: PUSH
72885: LD_INT 2
72887: NEG
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 2
72895: NEG
72896: PUSH
72897: LD_INT 4
72899: NEG
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 4
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 4
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 5
72928: PUSH
72929: LD_INT 0
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 5
72938: PUSH
72939: LD_INT 1
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 4
72948: PUSH
72949: LD_INT 1
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 3
72958: PUSH
72959: LD_INT 0
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: PUSH
72980: LD_INT 2
72982: NEG
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 5
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73045: LD_ADDR_VAR 0 32
73049: PUSH
73050: LD_INT 4
73052: NEG
73053: PUSH
73054: LD_INT 0
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 4
73063: NEG
73064: PUSH
73065: LD_INT 1
73067: NEG
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 3
73075: NEG
73076: PUSH
73077: LD_INT 0
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 3
73086: NEG
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 4
73097: NEG
73098: PUSH
73099: LD_INT 1
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 5
73108: NEG
73109: PUSH
73110: LD_INT 0
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 5
73119: NEG
73120: PUSH
73121: LD_INT 1
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 5
73131: NEG
73132: PUSH
73133: LD_INT 2
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 3
73143: NEG
73144: PUSH
73145: LD_INT 2
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 3
73154: NEG
73155: PUSH
73156: LD_INT 3
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: NEG
73167: PUSH
73168: LD_INT 4
73170: NEG
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 2
73178: NEG
73179: PUSH
73180: LD_INT 3
73182: NEG
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 2
73190: NEG
73191: PUSH
73192: LD_INT 2
73194: NEG
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 3
73202: NEG
73203: PUSH
73204: LD_INT 2
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 4
73214: NEG
73215: PUSH
73216: LD_INT 3
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 4
73226: NEG
73227: PUSH
73228: LD_INT 4
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 2
73238: NEG
73239: PUSH
73240: LD_INT 4
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 4
73250: NEG
73251: PUSH
73252: LD_INT 2
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 0
73262: PUSH
73263: LD_INT 4
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 0
73273: PUSH
73274: LD_INT 5
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: LD_INT 4
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 1
73295: PUSH
73296: LD_INT 3
73298: NEG
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 0
73306: PUSH
73307: LD_INT 3
73309: NEG
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 1
73317: NEG
73318: PUSH
73319: LD_INT 4
73321: NEG
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 1
73329: NEG
73330: PUSH
73331: LD_INT 5
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 2
73341: PUSH
73342: LD_INT 3
73344: NEG
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 2
73352: NEG
73353: PUSH
73354: LD_INT 5
73356: NEG
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 3
73364: PUSH
73365: LD_INT 0
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 3
73374: PUSH
73375: LD_INT 1
73377: NEG
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 4
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 4
73395: PUSH
73396: LD_INT 1
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 3
73405: PUSH
73406: LD_INT 1
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 2
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 2
73436: PUSH
73437: LD_INT 2
73439: NEG
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 4
73447: PUSH
73448: LD_INT 2
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 4
73457: PUSH
73458: LD_INT 4
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PUSH
73465: LD_INT 4
73467: PUSH
73468: LD_INT 3
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 5
73477: PUSH
73478: LD_INT 4
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 5
73487: PUSH
73488: LD_INT 5
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 4
73497: PUSH
73498: LD_INT 5
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 3
73507: PUSH
73508: LD_INT 4
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 3
73517: PUSH
73518: LD_INT 3
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 5
73527: PUSH
73528: LD_INT 3
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: LD_INT 5
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73592: LD_ADDR_VAR 0 33
73596: PUSH
73597: LD_INT 4
73599: NEG
73600: PUSH
73601: LD_INT 4
73603: NEG
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 4
73611: NEG
73612: PUSH
73613: LD_INT 5
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 3
73623: NEG
73624: PUSH
73625: LD_INT 4
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 3
73635: NEG
73636: PUSH
73637: LD_INT 3
73639: NEG
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 4
73647: NEG
73648: PUSH
73649: LD_INT 3
73651: NEG
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 5
73659: NEG
73660: PUSH
73661: LD_INT 4
73663: NEG
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: LD_INT 5
73671: NEG
73672: PUSH
73673: LD_INT 5
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 3
73683: NEG
73684: PUSH
73685: LD_INT 5
73687: NEG
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 5
73695: NEG
73696: PUSH
73697: LD_INT 3
73699: NEG
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 0
73707: PUSH
73708: LD_INT 3
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 0
73718: PUSH
73719: LD_INT 4
73721: NEG
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 1
73729: PUSH
73730: LD_INT 3
73732: NEG
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 1
73740: PUSH
73741: LD_INT 2
73743: NEG
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 0
73751: PUSH
73752: LD_INT 2
73754: NEG
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: LD_INT 3
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: NEG
73775: PUSH
73776: LD_INT 4
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 2
73786: PUSH
73787: LD_INT 2
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 2
73797: NEG
73798: PUSH
73799: LD_INT 4
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 4
73809: PUSH
73810: LD_INT 0
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 4
73819: PUSH
73820: LD_INT 1
73822: NEG
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 5
73830: PUSH
73831: LD_INT 0
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 5
73840: PUSH
73841: LD_INT 1
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 4
73850: PUSH
73851: LD_INT 1
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 3
73860: PUSH
73861: LD_INT 0
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: PUSH
73871: LD_INT 1
73873: NEG
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 3
73881: PUSH
73882: LD_INT 2
73884: NEG
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 5
73892: PUSH
73893: LD_INT 2
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 3
73902: PUSH
73903: LD_INT 3
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 3
73912: PUSH
73913: LD_INT 2
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 4
73922: PUSH
73923: LD_INT 3
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 4
73932: PUSH
73933: LD_INT 4
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 3
73942: PUSH
73943: LD_INT 4
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 2
73952: PUSH
73953: LD_INT 3
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: LD_INT 2
73962: PUSH
73963: LD_INT 2
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: PUSH
73970: LD_INT 4
73972: PUSH
73973: LD_INT 2
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 2
73982: PUSH
73983: LD_INT 4
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: LD_INT 4
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 1
74012: PUSH
74013: LD_INT 4
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 1
74022: PUSH
74023: LD_INT 5
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 0
74032: PUSH
74033: LD_INT 5
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 1
74042: NEG
74043: PUSH
74044: LD_INT 4
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: PUSH
74055: LD_INT 3
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 2
74064: PUSH
74065: LD_INT 5
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 2
74074: NEG
74075: PUSH
74076: LD_INT 3
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74130: LD_ADDR_VAR 0 34
74134: PUSH
74135: LD_INT 0
74137: PUSH
74138: LD_INT 4
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 0
74148: PUSH
74149: LD_INT 5
74151: NEG
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: LD_INT 4
74162: NEG
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 1
74170: PUSH
74171: LD_INT 3
74173: NEG
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 0
74181: PUSH
74182: LD_INT 3
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 1
74192: NEG
74193: PUSH
74194: LD_INT 4
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: NEG
74205: PUSH
74206: LD_INT 5
74208: NEG
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 2
74216: PUSH
74217: LD_INT 3
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 2
74227: NEG
74228: PUSH
74229: LD_INT 5
74231: NEG
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 3
74239: PUSH
74240: LD_INT 0
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 3
74249: PUSH
74250: LD_INT 1
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 4
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 4
74270: PUSH
74271: LD_INT 1
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 3
74280: PUSH
74281: LD_INT 1
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 2
74290: PUSH
74291: LD_INT 0
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 2
74300: PUSH
74301: LD_INT 1
74303: NEG
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 2
74311: PUSH
74312: LD_INT 2
74314: NEG
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 4
74322: PUSH
74323: LD_INT 2
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 4
74332: PUSH
74333: LD_INT 4
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 4
74342: PUSH
74343: LD_INT 3
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 5
74352: PUSH
74353: LD_INT 4
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 5
74362: PUSH
74363: LD_INT 5
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 4
74372: PUSH
74373: LD_INT 5
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 3
74382: PUSH
74383: LD_INT 4
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 3
74392: PUSH
74393: LD_INT 3
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 5
74402: PUSH
74403: LD_INT 3
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PUSH
74410: LD_INT 3
74412: PUSH
74413: LD_INT 5
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 0
74422: PUSH
74423: LD_INT 3
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: LD_INT 2
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 1
74442: PUSH
74443: LD_INT 3
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 1
74452: PUSH
74453: LD_INT 4
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 0
74462: PUSH
74463: LD_INT 4
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 1
74472: NEG
74473: PUSH
74474: LD_INT 3
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 1
74483: NEG
74484: PUSH
74485: LD_INT 2
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 2
74494: PUSH
74495: LD_INT 4
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 2
74504: NEG
74505: PUSH
74506: LD_INT 2
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 4
74515: NEG
74516: PUSH
74517: LD_INT 0
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 4
74526: NEG
74527: PUSH
74528: LD_INT 1
74530: NEG
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 3
74538: NEG
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 3
74549: NEG
74550: PUSH
74551: LD_INT 1
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 4
74560: NEG
74561: PUSH
74562: LD_INT 1
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 5
74571: NEG
74572: PUSH
74573: LD_INT 0
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 5
74582: NEG
74583: PUSH
74584: LD_INT 1
74586: NEG
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 5
74594: NEG
74595: PUSH
74596: LD_INT 2
74598: NEG
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 3
74606: NEG
74607: PUSH
74608: LD_INT 2
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: ST_TO_ADDR
// end ; end ;
74662: GO 74665
74664: POP
// case btype of b_depot , b_warehouse :
74665: LD_VAR 0 1
74669: PUSH
74670: LD_INT 0
74672: DOUBLE
74673: EQUAL
74674: IFTRUE 74684
74676: LD_INT 1
74678: DOUBLE
74679: EQUAL
74680: IFTRUE 74684
74682: GO 74885
74684: POP
// case nation of nation_american :
74685: LD_VAR 0 5
74689: PUSH
74690: LD_INT 1
74692: DOUBLE
74693: EQUAL
74694: IFTRUE 74698
74696: GO 74754
74698: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74699: LD_ADDR_VAR 0 9
74703: PUSH
74704: LD_VAR 0 11
74708: PUSH
74709: LD_VAR 0 12
74713: PUSH
74714: LD_VAR 0 13
74718: PUSH
74719: LD_VAR 0 14
74723: PUSH
74724: LD_VAR 0 15
74728: PUSH
74729: LD_VAR 0 16
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: LD_VAR 0 4
74746: PUSH
74747: LD_INT 1
74749: PLUS
74750: ARRAY
74751: ST_TO_ADDR
74752: GO 74883
74754: LD_INT 2
74756: DOUBLE
74757: EQUAL
74758: IFTRUE 74762
74760: GO 74818
74762: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74763: LD_ADDR_VAR 0 9
74767: PUSH
74768: LD_VAR 0 17
74772: PUSH
74773: LD_VAR 0 18
74777: PUSH
74778: LD_VAR 0 19
74782: PUSH
74783: LD_VAR 0 20
74787: PUSH
74788: LD_VAR 0 21
74792: PUSH
74793: LD_VAR 0 22
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: PUSH
74806: LD_VAR 0 4
74810: PUSH
74811: LD_INT 1
74813: PLUS
74814: ARRAY
74815: ST_TO_ADDR
74816: GO 74883
74818: LD_INT 3
74820: DOUBLE
74821: EQUAL
74822: IFTRUE 74826
74824: GO 74882
74826: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74827: LD_ADDR_VAR 0 9
74831: PUSH
74832: LD_VAR 0 23
74836: PUSH
74837: LD_VAR 0 24
74841: PUSH
74842: LD_VAR 0 25
74846: PUSH
74847: LD_VAR 0 26
74851: PUSH
74852: LD_VAR 0 27
74856: PUSH
74857: LD_VAR 0 28
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: PUSH
74870: LD_VAR 0 4
74874: PUSH
74875: LD_INT 1
74877: PLUS
74878: ARRAY
74879: ST_TO_ADDR
74880: GO 74883
74882: POP
74883: GO 75438
74885: LD_INT 2
74887: DOUBLE
74888: EQUAL
74889: IFTRUE 74899
74891: LD_INT 3
74893: DOUBLE
74894: EQUAL
74895: IFTRUE 74899
74897: GO 74955
74899: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74900: LD_ADDR_VAR 0 9
74904: PUSH
74905: LD_VAR 0 29
74909: PUSH
74910: LD_VAR 0 30
74914: PUSH
74915: LD_VAR 0 31
74919: PUSH
74920: LD_VAR 0 32
74924: PUSH
74925: LD_VAR 0 33
74929: PUSH
74930: LD_VAR 0 34
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: PUSH
74943: LD_VAR 0 4
74947: PUSH
74948: LD_INT 1
74950: PLUS
74951: ARRAY
74952: ST_TO_ADDR
74953: GO 75438
74955: LD_INT 16
74957: DOUBLE
74958: EQUAL
74959: IFTRUE 75017
74961: LD_INT 17
74963: DOUBLE
74964: EQUAL
74965: IFTRUE 75017
74967: LD_INT 18
74969: DOUBLE
74970: EQUAL
74971: IFTRUE 75017
74973: LD_INT 19
74975: DOUBLE
74976: EQUAL
74977: IFTRUE 75017
74979: LD_INT 22
74981: DOUBLE
74982: EQUAL
74983: IFTRUE 75017
74985: LD_INT 20
74987: DOUBLE
74988: EQUAL
74989: IFTRUE 75017
74991: LD_INT 21
74993: DOUBLE
74994: EQUAL
74995: IFTRUE 75017
74997: LD_INT 23
74999: DOUBLE
75000: EQUAL
75001: IFTRUE 75017
75003: LD_INT 24
75005: DOUBLE
75006: EQUAL
75007: IFTRUE 75017
75009: LD_INT 25
75011: DOUBLE
75012: EQUAL
75013: IFTRUE 75017
75015: GO 75073
75017: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75018: LD_ADDR_VAR 0 9
75022: PUSH
75023: LD_VAR 0 35
75027: PUSH
75028: LD_VAR 0 36
75032: PUSH
75033: LD_VAR 0 37
75037: PUSH
75038: LD_VAR 0 38
75042: PUSH
75043: LD_VAR 0 39
75047: PUSH
75048: LD_VAR 0 40
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: LD_VAR 0 4
75065: PUSH
75066: LD_INT 1
75068: PLUS
75069: ARRAY
75070: ST_TO_ADDR
75071: GO 75438
75073: LD_INT 6
75075: DOUBLE
75076: EQUAL
75077: IFTRUE 75129
75079: LD_INT 7
75081: DOUBLE
75082: EQUAL
75083: IFTRUE 75129
75085: LD_INT 8
75087: DOUBLE
75088: EQUAL
75089: IFTRUE 75129
75091: LD_INT 13
75093: DOUBLE
75094: EQUAL
75095: IFTRUE 75129
75097: LD_INT 12
75099: DOUBLE
75100: EQUAL
75101: IFTRUE 75129
75103: LD_INT 15
75105: DOUBLE
75106: EQUAL
75107: IFTRUE 75129
75109: LD_INT 11
75111: DOUBLE
75112: EQUAL
75113: IFTRUE 75129
75115: LD_INT 14
75117: DOUBLE
75118: EQUAL
75119: IFTRUE 75129
75121: LD_INT 10
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75129
75127: GO 75185
75129: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75130: LD_ADDR_VAR 0 9
75134: PUSH
75135: LD_VAR 0 41
75139: PUSH
75140: LD_VAR 0 42
75144: PUSH
75145: LD_VAR 0 43
75149: PUSH
75150: LD_VAR 0 44
75154: PUSH
75155: LD_VAR 0 45
75159: PUSH
75160: LD_VAR 0 46
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: PUSH
75173: LD_VAR 0 4
75177: PUSH
75178: LD_INT 1
75180: PLUS
75181: ARRAY
75182: ST_TO_ADDR
75183: GO 75438
75185: LD_INT 36
75187: DOUBLE
75188: EQUAL
75189: IFTRUE 75193
75191: GO 75249
75193: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75194: LD_ADDR_VAR 0 9
75198: PUSH
75199: LD_VAR 0 47
75203: PUSH
75204: LD_VAR 0 48
75208: PUSH
75209: LD_VAR 0 49
75213: PUSH
75214: LD_VAR 0 50
75218: PUSH
75219: LD_VAR 0 51
75223: PUSH
75224: LD_VAR 0 52
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: LD_VAR 0 4
75241: PUSH
75242: LD_INT 1
75244: PLUS
75245: ARRAY
75246: ST_TO_ADDR
75247: GO 75438
75249: LD_INT 4
75251: DOUBLE
75252: EQUAL
75253: IFTRUE 75275
75255: LD_INT 5
75257: DOUBLE
75258: EQUAL
75259: IFTRUE 75275
75261: LD_INT 34
75263: DOUBLE
75264: EQUAL
75265: IFTRUE 75275
75267: LD_INT 37
75269: DOUBLE
75270: EQUAL
75271: IFTRUE 75275
75273: GO 75331
75275: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75276: LD_ADDR_VAR 0 9
75280: PUSH
75281: LD_VAR 0 53
75285: PUSH
75286: LD_VAR 0 54
75290: PUSH
75291: LD_VAR 0 55
75295: PUSH
75296: LD_VAR 0 56
75300: PUSH
75301: LD_VAR 0 57
75305: PUSH
75306: LD_VAR 0 58
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: PUSH
75319: LD_VAR 0 4
75323: PUSH
75324: LD_INT 1
75326: PLUS
75327: ARRAY
75328: ST_TO_ADDR
75329: GO 75438
75331: LD_INT 31
75333: DOUBLE
75334: EQUAL
75335: IFTRUE 75381
75337: LD_INT 32
75339: DOUBLE
75340: EQUAL
75341: IFTRUE 75381
75343: LD_INT 33
75345: DOUBLE
75346: EQUAL
75347: IFTRUE 75381
75349: LD_INT 27
75351: DOUBLE
75352: EQUAL
75353: IFTRUE 75381
75355: LD_INT 26
75357: DOUBLE
75358: EQUAL
75359: IFTRUE 75381
75361: LD_INT 28
75363: DOUBLE
75364: EQUAL
75365: IFTRUE 75381
75367: LD_INT 29
75369: DOUBLE
75370: EQUAL
75371: IFTRUE 75381
75373: LD_INT 30
75375: DOUBLE
75376: EQUAL
75377: IFTRUE 75381
75379: GO 75437
75381: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75382: LD_ADDR_VAR 0 9
75386: PUSH
75387: LD_VAR 0 59
75391: PUSH
75392: LD_VAR 0 60
75396: PUSH
75397: LD_VAR 0 61
75401: PUSH
75402: LD_VAR 0 62
75406: PUSH
75407: LD_VAR 0 63
75411: PUSH
75412: LD_VAR 0 64
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: PUSH
75425: LD_VAR 0 4
75429: PUSH
75430: LD_INT 1
75432: PLUS
75433: ARRAY
75434: ST_TO_ADDR
75435: GO 75438
75437: POP
// temp_list2 = [ ] ;
75438: LD_ADDR_VAR 0 10
75442: PUSH
75443: EMPTY
75444: ST_TO_ADDR
// for i in temp_list do
75445: LD_ADDR_VAR 0 8
75449: PUSH
75450: LD_VAR 0 9
75454: PUSH
75455: FOR_IN
75456: IFFALSE 75508
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75458: LD_ADDR_VAR 0 10
75462: PUSH
75463: LD_VAR 0 10
75467: PUSH
75468: LD_VAR 0 8
75472: PUSH
75473: LD_INT 1
75475: ARRAY
75476: PUSH
75477: LD_VAR 0 2
75481: PLUS
75482: PUSH
75483: LD_VAR 0 8
75487: PUSH
75488: LD_INT 2
75490: ARRAY
75491: PUSH
75492: LD_VAR 0 3
75496: PLUS
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: EMPTY
75503: LIST
75504: ADD
75505: ST_TO_ADDR
75506: GO 75455
75508: POP
75509: POP
// result = temp_list2 ;
75510: LD_ADDR_VAR 0 7
75514: PUSH
75515: LD_VAR 0 10
75519: ST_TO_ADDR
// end ;
75520: LD_VAR 0 7
75524: RET
// export function EnemyInRange ( unit , dist ) ; begin
75525: LD_INT 0
75527: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75528: LD_ADDR_VAR 0 3
75532: PUSH
75533: LD_VAR 0 1
75537: PPUSH
75538: CALL_OW 255
75542: PPUSH
75543: LD_VAR 0 1
75547: PPUSH
75548: CALL_OW 250
75552: PPUSH
75553: LD_VAR 0 1
75557: PPUSH
75558: CALL_OW 251
75562: PPUSH
75563: LD_VAR 0 2
75567: PPUSH
75568: CALL 48898 0 4
75572: PUSH
75573: LD_INT 4
75575: ARRAY
75576: ST_TO_ADDR
// end ;
75577: LD_VAR 0 3
75581: RET
// export function PlayerSeeMe ( unit ) ; begin
75582: LD_INT 0
75584: PPUSH
// result := See ( your_side , unit ) ;
75585: LD_ADDR_VAR 0 2
75589: PUSH
75590: LD_OWVAR 2
75594: PPUSH
75595: LD_VAR 0 1
75599: PPUSH
75600: CALL_OW 292
75604: ST_TO_ADDR
// end ;
75605: LD_VAR 0 2
75609: RET
// export function ReverseDir ( unit ) ; begin
75610: LD_INT 0
75612: PPUSH
// if not unit then
75613: LD_VAR 0 1
75617: NOT
75618: IFFALSE 75622
// exit ;
75620: GO 75645
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75622: LD_ADDR_VAR 0 2
75626: PUSH
75627: LD_VAR 0 1
75631: PPUSH
75632: CALL_OW 254
75636: PUSH
75637: LD_INT 3
75639: PLUS
75640: PUSH
75641: LD_INT 6
75643: MOD
75644: ST_TO_ADDR
// end ;
75645: LD_VAR 0 2
75649: RET
// export function ReverseArray ( array ) ; var i ; begin
75650: LD_INT 0
75652: PPUSH
75653: PPUSH
// if not array then
75654: LD_VAR 0 1
75658: NOT
75659: IFFALSE 75663
// exit ;
75661: GO 75718
// result := [ ] ;
75663: LD_ADDR_VAR 0 2
75667: PUSH
75668: EMPTY
75669: ST_TO_ADDR
// for i := array downto 1 do
75670: LD_ADDR_VAR 0 3
75674: PUSH
75675: DOUBLE
75676: LD_VAR 0 1
75680: INC
75681: ST_TO_ADDR
75682: LD_INT 1
75684: PUSH
75685: FOR_DOWNTO
75686: IFFALSE 75716
// result := Join ( result , array [ i ] ) ;
75688: LD_ADDR_VAR 0 2
75692: PUSH
75693: LD_VAR 0 2
75697: PPUSH
75698: LD_VAR 0 1
75702: PUSH
75703: LD_VAR 0 3
75707: ARRAY
75708: PPUSH
75709: CALL 80363 0 2
75713: ST_TO_ADDR
75714: GO 75685
75716: POP
75717: POP
// end ;
75718: LD_VAR 0 2
75722: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75723: LD_INT 0
75725: PPUSH
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
75730: PPUSH
// if not unit or not hexes then
75731: LD_VAR 0 1
75735: NOT
75736: PUSH
75737: LD_VAR 0 2
75741: NOT
75742: OR
75743: IFFALSE 75747
// exit ;
75745: GO 75870
// dist := 9999 ;
75747: LD_ADDR_VAR 0 5
75751: PUSH
75752: LD_INT 9999
75754: ST_TO_ADDR
// for i = 1 to hexes do
75755: LD_ADDR_VAR 0 4
75759: PUSH
75760: DOUBLE
75761: LD_INT 1
75763: DEC
75764: ST_TO_ADDR
75765: LD_VAR 0 2
75769: PUSH
75770: FOR_TO
75771: IFFALSE 75858
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75773: LD_ADDR_VAR 0 6
75777: PUSH
75778: LD_VAR 0 1
75782: PPUSH
75783: LD_VAR 0 2
75787: PUSH
75788: LD_VAR 0 4
75792: ARRAY
75793: PUSH
75794: LD_INT 1
75796: ARRAY
75797: PPUSH
75798: LD_VAR 0 2
75802: PUSH
75803: LD_VAR 0 4
75807: ARRAY
75808: PUSH
75809: LD_INT 2
75811: ARRAY
75812: PPUSH
75813: CALL_OW 297
75817: ST_TO_ADDR
// if tdist < dist then
75818: LD_VAR 0 6
75822: PUSH
75823: LD_VAR 0 5
75827: LESS
75828: IFFALSE 75856
// begin hex := hexes [ i ] ;
75830: LD_ADDR_VAR 0 8
75834: PUSH
75835: LD_VAR 0 2
75839: PUSH
75840: LD_VAR 0 4
75844: ARRAY
75845: ST_TO_ADDR
// dist := tdist ;
75846: LD_ADDR_VAR 0 5
75850: PUSH
75851: LD_VAR 0 6
75855: ST_TO_ADDR
// end ; end ;
75856: GO 75770
75858: POP
75859: POP
// result := hex ;
75860: LD_ADDR_VAR 0 3
75864: PUSH
75865: LD_VAR 0 8
75869: ST_TO_ADDR
// end ;
75870: LD_VAR 0 3
75874: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75875: LD_INT 0
75877: PPUSH
75878: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75879: LD_VAR 0 1
75883: NOT
75884: PUSH
75885: LD_VAR 0 1
75889: PUSH
75890: LD_INT 21
75892: PUSH
75893: LD_INT 2
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 23
75902: PUSH
75903: LD_INT 2
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: PPUSH
75914: CALL_OW 69
75918: IN
75919: NOT
75920: OR
75921: IFFALSE 75925
// exit ;
75923: GO 75972
// for i = 1 to 3 do
75925: LD_ADDR_VAR 0 3
75929: PUSH
75930: DOUBLE
75931: LD_INT 1
75933: DEC
75934: ST_TO_ADDR
75935: LD_INT 3
75937: PUSH
75938: FOR_TO
75939: IFFALSE 75970
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75941: LD_VAR 0 1
75945: PPUSH
75946: CALL_OW 250
75950: PPUSH
75951: LD_VAR 0 1
75955: PPUSH
75956: CALL_OW 251
75960: PPUSH
75961: LD_INT 1
75963: PPUSH
75964: CALL_OW 453
75968: GO 75938
75970: POP
75971: POP
// end ;
75972: LD_VAR 0 2
75976: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75977: LD_INT 0
75979: PPUSH
75980: PPUSH
75981: PPUSH
75982: PPUSH
75983: PPUSH
75984: PPUSH
// if not unit or not enemy_unit then
75985: LD_VAR 0 1
75989: NOT
75990: PUSH
75991: LD_VAR 0 2
75995: NOT
75996: OR
75997: IFFALSE 76001
// exit ;
75999: GO 76468
// if GetLives ( i ) < 250 then
76001: LD_VAR 0 4
76005: PPUSH
76006: CALL_OW 256
76010: PUSH
76011: LD_INT 250
76013: LESS
76014: IFFALSE 76027
// begin ComAutodestruct ( i ) ;
76016: LD_VAR 0 4
76020: PPUSH
76021: CALL 75875 0 1
// exit ;
76025: GO 76468
// end ; x := GetX ( enemy_unit ) ;
76027: LD_ADDR_VAR 0 7
76031: PUSH
76032: LD_VAR 0 2
76036: PPUSH
76037: CALL_OW 250
76041: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76042: LD_ADDR_VAR 0 8
76046: PUSH
76047: LD_VAR 0 2
76051: PPUSH
76052: CALL_OW 251
76056: ST_TO_ADDR
// if not x or not y then
76057: LD_VAR 0 7
76061: NOT
76062: PUSH
76063: LD_VAR 0 8
76067: NOT
76068: OR
76069: IFFALSE 76073
// exit ;
76071: GO 76468
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76073: LD_ADDR_VAR 0 6
76077: PUSH
76078: LD_VAR 0 7
76082: PPUSH
76083: LD_INT 0
76085: PPUSH
76086: LD_INT 4
76088: PPUSH
76089: CALL_OW 272
76093: PUSH
76094: LD_VAR 0 8
76098: PPUSH
76099: LD_INT 0
76101: PPUSH
76102: LD_INT 4
76104: PPUSH
76105: CALL_OW 273
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_VAR 0 7
76118: PPUSH
76119: LD_INT 1
76121: PPUSH
76122: LD_INT 4
76124: PPUSH
76125: CALL_OW 272
76129: PUSH
76130: LD_VAR 0 8
76134: PPUSH
76135: LD_INT 1
76137: PPUSH
76138: LD_INT 4
76140: PPUSH
76141: CALL_OW 273
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PUSH
76150: LD_VAR 0 7
76154: PPUSH
76155: LD_INT 2
76157: PPUSH
76158: LD_INT 4
76160: PPUSH
76161: CALL_OW 272
76165: PUSH
76166: LD_VAR 0 8
76170: PPUSH
76171: LD_INT 2
76173: PPUSH
76174: LD_INT 4
76176: PPUSH
76177: CALL_OW 273
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_VAR 0 7
76190: PPUSH
76191: LD_INT 3
76193: PPUSH
76194: LD_INT 4
76196: PPUSH
76197: CALL_OW 272
76201: PUSH
76202: LD_VAR 0 8
76206: PPUSH
76207: LD_INT 3
76209: PPUSH
76210: LD_INT 4
76212: PPUSH
76213: CALL_OW 273
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: LD_VAR 0 7
76226: PPUSH
76227: LD_INT 4
76229: PPUSH
76230: LD_INT 4
76232: PPUSH
76233: CALL_OW 272
76237: PUSH
76238: LD_VAR 0 8
76242: PPUSH
76243: LD_INT 4
76245: PPUSH
76246: LD_INT 4
76248: PPUSH
76249: CALL_OW 273
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: LD_VAR 0 7
76262: PPUSH
76263: LD_INT 5
76265: PPUSH
76266: LD_INT 4
76268: PPUSH
76269: CALL_OW 272
76273: PUSH
76274: LD_VAR 0 8
76278: PPUSH
76279: LD_INT 5
76281: PPUSH
76282: LD_INT 4
76284: PPUSH
76285: CALL_OW 273
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: ST_TO_ADDR
// for i = tmp downto 1 do
76302: LD_ADDR_VAR 0 4
76306: PUSH
76307: DOUBLE
76308: LD_VAR 0 6
76312: INC
76313: ST_TO_ADDR
76314: LD_INT 1
76316: PUSH
76317: FOR_DOWNTO
76318: IFFALSE 76419
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76320: LD_VAR 0 6
76324: PUSH
76325: LD_VAR 0 4
76329: ARRAY
76330: PUSH
76331: LD_INT 1
76333: ARRAY
76334: PPUSH
76335: LD_VAR 0 6
76339: PUSH
76340: LD_VAR 0 4
76344: ARRAY
76345: PUSH
76346: LD_INT 2
76348: ARRAY
76349: PPUSH
76350: CALL_OW 488
76354: NOT
76355: PUSH
76356: LD_VAR 0 6
76360: PUSH
76361: LD_VAR 0 4
76365: ARRAY
76366: PUSH
76367: LD_INT 1
76369: ARRAY
76370: PPUSH
76371: LD_VAR 0 6
76375: PUSH
76376: LD_VAR 0 4
76380: ARRAY
76381: PUSH
76382: LD_INT 2
76384: ARRAY
76385: PPUSH
76386: CALL_OW 428
76390: PUSH
76391: LD_INT 0
76393: NONEQUAL
76394: OR
76395: IFFALSE 76417
// tmp := Delete ( tmp , i ) ;
76397: LD_ADDR_VAR 0 6
76401: PUSH
76402: LD_VAR 0 6
76406: PPUSH
76407: LD_VAR 0 4
76411: PPUSH
76412: CALL_OW 3
76416: ST_TO_ADDR
76417: GO 76317
76419: POP
76420: POP
// j := GetClosestHex ( unit , tmp ) ;
76421: LD_ADDR_VAR 0 5
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: LD_VAR 0 6
76435: PPUSH
76436: CALL 75723 0 2
76440: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76441: LD_VAR 0 1
76445: PPUSH
76446: LD_VAR 0 5
76450: PUSH
76451: LD_INT 1
76453: ARRAY
76454: PPUSH
76455: LD_VAR 0 5
76459: PUSH
76460: LD_INT 2
76462: ARRAY
76463: PPUSH
76464: CALL_OW 111
// end ;
76468: LD_VAR 0 3
76472: RET
// export function PrepareApemanSoldier ( ) ; begin
76473: LD_INT 0
76475: PPUSH
// uc_nation := 0 ;
76476: LD_ADDR_OWVAR 21
76480: PUSH
76481: LD_INT 0
76483: ST_TO_ADDR
// hc_sex := sex_male ;
76484: LD_ADDR_OWVAR 27
76488: PUSH
76489: LD_INT 1
76491: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76492: LD_ADDR_OWVAR 28
76496: PUSH
76497: LD_INT 15
76499: ST_TO_ADDR
// hc_gallery :=  ;
76500: LD_ADDR_OWVAR 33
76504: PUSH
76505: LD_STRING 
76507: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76508: LD_ADDR_OWVAR 31
76512: PUSH
76513: LD_INT 0
76515: PPUSH
76516: LD_INT 3
76518: PPUSH
76519: CALL_OW 12
76523: PUSH
76524: LD_INT 0
76526: PPUSH
76527: LD_INT 3
76529: PPUSH
76530: CALL_OW 12
76534: PUSH
76535: LD_INT 0
76537: PUSH
76538: LD_INT 0
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: ST_TO_ADDR
// end ;
76547: LD_VAR 0 1
76551: RET
// export function PrepareApemanEngineer ( ) ; begin
76552: LD_INT 0
76554: PPUSH
// uc_nation := 0 ;
76555: LD_ADDR_OWVAR 21
76559: PUSH
76560: LD_INT 0
76562: ST_TO_ADDR
// hc_sex := sex_male ;
76563: LD_ADDR_OWVAR 27
76567: PUSH
76568: LD_INT 1
76570: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76571: LD_ADDR_OWVAR 28
76575: PUSH
76576: LD_INT 16
76578: ST_TO_ADDR
// hc_gallery :=  ;
76579: LD_ADDR_OWVAR 33
76583: PUSH
76584: LD_STRING 
76586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76587: LD_ADDR_OWVAR 31
76591: PUSH
76592: LD_INT 0
76594: PPUSH
76595: LD_INT 3
76597: PPUSH
76598: CALL_OW 12
76602: PUSH
76603: LD_INT 0
76605: PPUSH
76606: LD_INT 3
76608: PPUSH
76609: CALL_OW 12
76613: PUSH
76614: LD_INT 0
76616: PUSH
76617: LD_INT 0
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: ST_TO_ADDR
// end ;
76626: LD_VAR 0 1
76630: RET
// export function PrepareApeman ( agressivity ) ; begin
76631: LD_INT 0
76633: PPUSH
// uc_side := 0 ;
76634: LD_ADDR_OWVAR 20
76638: PUSH
76639: LD_INT 0
76641: ST_TO_ADDR
// uc_nation := 0 ;
76642: LD_ADDR_OWVAR 21
76646: PUSH
76647: LD_INT 0
76649: ST_TO_ADDR
// hc_sex := sex_male ;
76650: LD_ADDR_OWVAR 27
76654: PUSH
76655: LD_INT 1
76657: ST_TO_ADDR
// hc_class := class_apeman ;
76658: LD_ADDR_OWVAR 28
76662: PUSH
76663: LD_INT 12
76665: ST_TO_ADDR
// hc_gallery :=  ;
76666: LD_ADDR_OWVAR 33
76670: PUSH
76671: LD_STRING 
76673: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76674: LD_ADDR_OWVAR 35
76678: PUSH
76679: LD_VAR 0 1
76683: NEG
76684: PPUSH
76685: LD_VAR 0 1
76689: PPUSH
76690: CALL_OW 12
76694: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76695: LD_ADDR_OWVAR 31
76699: PUSH
76700: LD_INT 0
76702: PPUSH
76703: LD_INT 3
76705: PPUSH
76706: CALL_OW 12
76710: PUSH
76711: LD_INT 0
76713: PPUSH
76714: LD_INT 3
76716: PPUSH
76717: CALL_OW 12
76721: PUSH
76722: LD_INT 0
76724: PUSH
76725: LD_INT 0
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: ST_TO_ADDR
// end ;
76734: LD_VAR 0 2
76738: RET
// export function PrepareTiger ( agressivity ) ; begin
76739: LD_INT 0
76741: PPUSH
// uc_side := 0 ;
76742: LD_ADDR_OWVAR 20
76746: PUSH
76747: LD_INT 0
76749: ST_TO_ADDR
// uc_nation := 0 ;
76750: LD_ADDR_OWVAR 21
76754: PUSH
76755: LD_INT 0
76757: ST_TO_ADDR
// hc_class := class_tiger ;
76758: LD_ADDR_OWVAR 28
76762: PUSH
76763: LD_INT 14
76765: ST_TO_ADDR
// hc_gallery :=  ;
76766: LD_ADDR_OWVAR 33
76770: PUSH
76771: LD_STRING 
76773: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76774: LD_ADDR_OWVAR 35
76778: PUSH
76779: LD_VAR 0 1
76783: NEG
76784: PPUSH
76785: LD_VAR 0 1
76789: PPUSH
76790: CALL_OW 12
76794: ST_TO_ADDR
// end ;
76795: LD_VAR 0 2
76799: RET
// export function PrepareEnchidna ( ) ; begin
76800: LD_INT 0
76802: PPUSH
// uc_side := 0 ;
76803: LD_ADDR_OWVAR 20
76807: PUSH
76808: LD_INT 0
76810: ST_TO_ADDR
// uc_nation := 0 ;
76811: LD_ADDR_OWVAR 21
76815: PUSH
76816: LD_INT 0
76818: ST_TO_ADDR
// hc_class := class_baggie ;
76819: LD_ADDR_OWVAR 28
76823: PUSH
76824: LD_INT 13
76826: ST_TO_ADDR
// hc_gallery :=  ;
76827: LD_ADDR_OWVAR 33
76831: PUSH
76832: LD_STRING 
76834: ST_TO_ADDR
// end ;
76835: LD_VAR 0 1
76839: RET
// export function PrepareFrog ( ) ; begin
76840: LD_INT 0
76842: PPUSH
// uc_side := 0 ;
76843: LD_ADDR_OWVAR 20
76847: PUSH
76848: LD_INT 0
76850: ST_TO_ADDR
// uc_nation := 0 ;
76851: LD_ADDR_OWVAR 21
76855: PUSH
76856: LD_INT 0
76858: ST_TO_ADDR
// hc_class := class_frog ;
76859: LD_ADDR_OWVAR 28
76863: PUSH
76864: LD_INT 19
76866: ST_TO_ADDR
// hc_gallery :=  ;
76867: LD_ADDR_OWVAR 33
76871: PUSH
76872: LD_STRING 
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 1
76879: RET
// export function PrepareFish ( ) ; begin
76880: LD_INT 0
76882: PPUSH
// uc_side := 0 ;
76883: LD_ADDR_OWVAR 20
76887: PUSH
76888: LD_INT 0
76890: ST_TO_ADDR
// uc_nation := 0 ;
76891: LD_ADDR_OWVAR 21
76895: PUSH
76896: LD_INT 0
76898: ST_TO_ADDR
// hc_class := class_fish ;
76899: LD_ADDR_OWVAR 28
76903: PUSH
76904: LD_INT 20
76906: ST_TO_ADDR
// hc_gallery :=  ;
76907: LD_ADDR_OWVAR 33
76911: PUSH
76912: LD_STRING 
76914: ST_TO_ADDR
// end ;
76915: LD_VAR 0 1
76919: RET
// export function PrepareBird ( ) ; begin
76920: LD_INT 0
76922: PPUSH
// uc_side := 0 ;
76923: LD_ADDR_OWVAR 20
76927: PUSH
76928: LD_INT 0
76930: ST_TO_ADDR
// uc_nation := 0 ;
76931: LD_ADDR_OWVAR 21
76935: PUSH
76936: LD_INT 0
76938: ST_TO_ADDR
// hc_class := class_phororhacos ;
76939: LD_ADDR_OWVAR 28
76943: PUSH
76944: LD_INT 18
76946: ST_TO_ADDR
// hc_gallery :=  ;
76947: LD_ADDR_OWVAR 33
76951: PUSH
76952: LD_STRING 
76954: ST_TO_ADDR
// end ;
76955: LD_VAR 0 1
76959: RET
// export function PrepareHorse ( ) ; begin
76960: LD_INT 0
76962: PPUSH
// uc_side := 0 ;
76963: LD_ADDR_OWVAR 20
76967: PUSH
76968: LD_INT 0
76970: ST_TO_ADDR
// uc_nation := 0 ;
76971: LD_ADDR_OWVAR 21
76975: PUSH
76976: LD_INT 0
76978: ST_TO_ADDR
// hc_class := class_horse ;
76979: LD_ADDR_OWVAR 28
76983: PUSH
76984: LD_INT 21
76986: ST_TO_ADDR
// hc_gallery :=  ;
76987: LD_ADDR_OWVAR 33
76991: PUSH
76992: LD_STRING 
76994: ST_TO_ADDR
// end ;
76995: LD_VAR 0 1
76999: RET
// export function PrepareMastodont ( ) ; begin
77000: LD_INT 0
77002: PPUSH
// uc_side := 0 ;
77003: LD_ADDR_OWVAR 20
77007: PUSH
77008: LD_INT 0
77010: ST_TO_ADDR
// uc_nation := 0 ;
77011: LD_ADDR_OWVAR 21
77015: PUSH
77016: LD_INT 0
77018: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77019: LD_ADDR_OWVAR 37
77023: PUSH
77024: LD_INT 31
77026: ST_TO_ADDR
// vc_control := control_rider ;
77027: LD_ADDR_OWVAR 38
77031: PUSH
77032: LD_INT 4
77034: ST_TO_ADDR
// end ;
77035: LD_VAR 0 1
77039: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77040: LD_INT 0
77042: PPUSH
77043: PPUSH
77044: PPUSH
// uc_side = 0 ;
77045: LD_ADDR_OWVAR 20
77049: PUSH
77050: LD_INT 0
77052: ST_TO_ADDR
// uc_nation = 0 ;
77053: LD_ADDR_OWVAR 21
77057: PUSH
77058: LD_INT 0
77060: ST_TO_ADDR
// InitHc_All ( ) ;
77061: CALL_OW 584
// InitVc ;
77065: CALL_OW 20
// if mastodonts then
77069: LD_VAR 0 6
77073: IFFALSE 77140
// for i = 1 to mastodonts do
77075: LD_ADDR_VAR 0 11
77079: PUSH
77080: DOUBLE
77081: LD_INT 1
77083: DEC
77084: ST_TO_ADDR
77085: LD_VAR 0 6
77089: PUSH
77090: FOR_TO
77091: IFFALSE 77138
// begin vc_chassis := 31 ;
77093: LD_ADDR_OWVAR 37
77097: PUSH
77098: LD_INT 31
77100: ST_TO_ADDR
// vc_control := control_rider ;
77101: LD_ADDR_OWVAR 38
77105: PUSH
77106: LD_INT 4
77108: ST_TO_ADDR
// animal := CreateVehicle ;
77109: LD_ADDR_VAR 0 12
77113: PUSH
77114: CALL_OW 45
77118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77119: LD_VAR 0 12
77123: PPUSH
77124: LD_VAR 0 8
77128: PPUSH
77129: LD_INT 0
77131: PPUSH
77132: CALL 79268 0 3
// end ;
77136: GO 77090
77138: POP
77139: POP
// if horses then
77140: LD_VAR 0 5
77144: IFFALSE 77211
// for i = 1 to horses do
77146: LD_ADDR_VAR 0 11
77150: PUSH
77151: DOUBLE
77152: LD_INT 1
77154: DEC
77155: ST_TO_ADDR
77156: LD_VAR 0 5
77160: PUSH
77161: FOR_TO
77162: IFFALSE 77209
// begin hc_class := 21 ;
77164: LD_ADDR_OWVAR 28
77168: PUSH
77169: LD_INT 21
77171: ST_TO_ADDR
// hc_gallery :=  ;
77172: LD_ADDR_OWVAR 33
77176: PUSH
77177: LD_STRING 
77179: ST_TO_ADDR
// animal := CreateHuman ;
77180: LD_ADDR_VAR 0 12
77184: PUSH
77185: CALL_OW 44
77189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77190: LD_VAR 0 12
77194: PPUSH
77195: LD_VAR 0 8
77199: PPUSH
77200: LD_INT 0
77202: PPUSH
77203: CALL 79268 0 3
// end ;
77207: GO 77161
77209: POP
77210: POP
// if birds then
77211: LD_VAR 0 1
77215: IFFALSE 77282
// for i = 1 to birds do
77217: LD_ADDR_VAR 0 11
77221: PUSH
77222: DOUBLE
77223: LD_INT 1
77225: DEC
77226: ST_TO_ADDR
77227: LD_VAR 0 1
77231: PUSH
77232: FOR_TO
77233: IFFALSE 77280
// begin hc_class := 18 ;
77235: LD_ADDR_OWVAR 28
77239: PUSH
77240: LD_INT 18
77242: ST_TO_ADDR
// hc_gallery =  ;
77243: LD_ADDR_OWVAR 33
77247: PUSH
77248: LD_STRING 
77250: ST_TO_ADDR
// animal := CreateHuman ;
77251: LD_ADDR_VAR 0 12
77255: PUSH
77256: CALL_OW 44
77260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77261: LD_VAR 0 12
77265: PPUSH
77266: LD_VAR 0 8
77270: PPUSH
77271: LD_INT 0
77273: PPUSH
77274: CALL 79268 0 3
// end ;
77278: GO 77232
77280: POP
77281: POP
// if tigers then
77282: LD_VAR 0 2
77286: IFFALSE 77370
// for i = 1 to tigers do
77288: LD_ADDR_VAR 0 11
77292: PUSH
77293: DOUBLE
77294: LD_INT 1
77296: DEC
77297: ST_TO_ADDR
77298: LD_VAR 0 2
77302: PUSH
77303: FOR_TO
77304: IFFALSE 77368
// begin hc_class = class_tiger ;
77306: LD_ADDR_OWVAR 28
77310: PUSH
77311: LD_INT 14
77313: ST_TO_ADDR
// hc_gallery =  ;
77314: LD_ADDR_OWVAR 33
77318: PUSH
77319: LD_STRING 
77321: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77322: LD_ADDR_OWVAR 35
77326: PUSH
77327: LD_INT 7
77329: NEG
77330: PPUSH
77331: LD_INT 7
77333: PPUSH
77334: CALL_OW 12
77338: ST_TO_ADDR
// animal := CreateHuman ;
77339: LD_ADDR_VAR 0 12
77343: PUSH
77344: CALL_OW 44
77348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77349: LD_VAR 0 12
77353: PPUSH
77354: LD_VAR 0 8
77358: PPUSH
77359: LD_INT 0
77361: PPUSH
77362: CALL 79268 0 3
// end ;
77366: GO 77303
77368: POP
77369: POP
// if apemans then
77370: LD_VAR 0 3
77374: IFFALSE 77497
// for i = 1 to apemans do
77376: LD_ADDR_VAR 0 11
77380: PUSH
77381: DOUBLE
77382: LD_INT 1
77384: DEC
77385: ST_TO_ADDR
77386: LD_VAR 0 3
77390: PUSH
77391: FOR_TO
77392: IFFALSE 77495
// begin hc_class = class_apeman ;
77394: LD_ADDR_OWVAR 28
77398: PUSH
77399: LD_INT 12
77401: ST_TO_ADDR
// hc_gallery =  ;
77402: LD_ADDR_OWVAR 33
77406: PUSH
77407: LD_STRING 
77409: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77410: LD_ADDR_OWVAR 35
77414: PUSH
77415: LD_INT 2
77417: NEG
77418: PPUSH
77419: LD_INT 2
77421: PPUSH
77422: CALL_OW 12
77426: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77427: LD_ADDR_OWVAR 31
77431: PUSH
77432: LD_INT 1
77434: PPUSH
77435: LD_INT 3
77437: PPUSH
77438: CALL_OW 12
77442: PUSH
77443: LD_INT 1
77445: PPUSH
77446: LD_INT 3
77448: PPUSH
77449: CALL_OW 12
77453: PUSH
77454: LD_INT 0
77456: PUSH
77457: LD_INT 0
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: ST_TO_ADDR
// animal := CreateHuman ;
77466: LD_ADDR_VAR 0 12
77470: PUSH
77471: CALL_OW 44
77475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77476: LD_VAR 0 12
77480: PPUSH
77481: LD_VAR 0 8
77485: PPUSH
77486: LD_INT 0
77488: PPUSH
77489: CALL 79268 0 3
// end ;
77493: GO 77391
77495: POP
77496: POP
// if enchidnas then
77497: LD_VAR 0 4
77501: IFFALSE 77568
// for i = 1 to enchidnas do
77503: LD_ADDR_VAR 0 11
77507: PUSH
77508: DOUBLE
77509: LD_INT 1
77511: DEC
77512: ST_TO_ADDR
77513: LD_VAR 0 4
77517: PUSH
77518: FOR_TO
77519: IFFALSE 77566
// begin hc_class = 13 ;
77521: LD_ADDR_OWVAR 28
77525: PUSH
77526: LD_INT 13
77528: ST_TO_ADDR
// hc_gallery =  ;
77529: LD_ADDR_OWVAR 33
77533: PUSH
77534: LD_STRING 
77536: ST_TO_ADDR
// animal := CreateHuman ;
77537: LD_ADDR_VAR 0 12
77541: PUSH
77542: CALL_OW 44
77546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77547: LD_VAR 0 12
77551: PPUSH
77552: LD_VAR 0 8
77556: PPUSH
77557: LD_INT 0
77559: PPUSH
77560: CALL 79268 0 3
// end ;
77564: GO 77518
77566: POP
77567: POP
// if fishes then
77568: LD_VAR 0 7
77572: IFFALSE 77639
// for i = 1 to fishes do
77574: LD_ADDR_VAR 0 11
77578: PUSH
77579: DOUBLE
77580: LD_INT 1
77582: DEC
77583: ST_TO_ADDR
77584: LD_VAR 0 7
77588: PUSH
77589: FOR_TO
77590: IFFALSE 77637
// begin hc_class = 20 ;
77592: LD_ADDR_OWVAR 28
77596: PUSH
77597: LD_INT 20
77599: ST_TO_ADDR
// hc_gallery =  ;
77600: LD_ADDR_OWVAR 33
77604: PUSH
77605: LD_STRING 
77607: ST_TO_ADDR
// animal := CreateHuman ;
77608: LD_ADDR_VAR 0 12
77612: PUSH
77613: CALL_OW 44
77617: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77618: LD_VAR 0 12
77622: PPUSH
77623: LD_VAR 0 9
77627: PPUSH
77628: LD_INT 0
77630: PPUSH
77631: CALL 79268 0 3
// end ;
77635: GO 77589
77637: POP
77638: POP
// end ;
77639: LD_VAR 0 10
77643: RET
// export function WantHeal ( sci , unit ) ; begin
77644: LD_INT 0
77646: PPUSH
// if GetTaskList ( sci ) > 0 then
77647: LD_VAR 0 1
77651: PPUSH
77652: CALL_OW 437
77656: PUSH
77657: LD_INT 0
77659: GREATER
77660: IFFALSE 77730
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77662: LD_VAR 0 1
77666: PPUSH
77667: CALL_OW 437
77671: PUSH
77672: LD_INT 1
77674: ARRAY
77675: PUSH
77676: LD_INT 1
77678: ARRAY
77679: PUSH
77680: LD_STRING l
77682: EQUAL
77683: PUSH
77684: LD_VAR 0 1
77688: PPUSH
77689: CALL_OW 437
77693: PUSH
77694: LD_INT 1
77696: ARRAY
77697: PUSH
77698: LD_INT 4
77700: ARRAY
77701: PUSH
77702: LD_VAR 0 2
77706: EQUAL
77707: AND
77708: IFFALSE 77720
// result := true else
77710: LD_ADDR_VAR 0 3
77714: PUSH
77715: LD_INT 1
77717: ST_TO_ADDR
77718: GO 77728
// result := false ;
77720: LD_ADDR_VAR 0 3
77724: PUSH
77725: LD_INT 0
77727: ST_TO_ADDR
// end else
77728: GO 77738
// result := false ;
77730: LD_ADDR_VAR 0 3
77734: PUSH
77735: LD_INT 0
77737: ST_TO_ADDR
// end ;
77738: LD_VAR 0 3
77742: RET
// export function HealTarget ( sci ) ; begin
77743: LD_INT 0
77745: PPUSH
// if not sci then
77746: LD_VAR 0 1
77750: NOT
77751: IFFALSE 77755
// exit ;
77753: GO 77820
// result := 0 ;
77755: LD_ADDR_VAR 0 2
77759: PUSH
77760: LD_INT 0
77762: ST_TO_ADDR
// if GetTaskList ( sci ) then
77763: LD_VAR 0 1
77767: PPUSH
77768: CALL_OW 437
77772: IFFALSE 77820
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77774: LD_VAR 0 1
77778: PPUSH
77779: CALL_OW 437
77783: PUSH
77784: LD_INT 1
77786: ARRAY
77787: PUSH
77788: LD_INT 1
77790: ARRAY
77791: PUSH
77792: LD_STRING l
77794: EQUAL
77795: IFFALSE 77820
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77797: LD_ADDR_VAR 0 2
77801: PUSH
77802: LD_VAR 0 1
77806: PPUSH
77807: CALL_OW 437
77811: PUSH
77812: LD_INT 1
77814: ARRAY
77815: PUSH
77816: LD_INT 4
77818: ARRAY
77819: ST_TO_ADDR
// end ;
77820: LD_VAR 0 2
77824: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77825: LD_INT 0
77827: PPUSH
77828: PPUSH
77829: PPUSH
77830: PPUSH
// if not base_units then
77831: LD_VAR 0 1
77835: NOT
77836: IFFALSE 77840
// exit ;
77838: GO 77927
// result := false ;
77840: LD_ADDR_VAR 0 2
77844: PUSH
77845: LD_INT 0
77847: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77848: LD_ADDR_VAR 0 5
77852: PUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: LD_INT 21
77860: PUSH
77861: LD_INT 3
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PPUSH
77868: CALL_OW 72
77872: ST_TO_ADDR
// if not tmp then
77873: LD_VAR 0 5
77877: NOT
77878: IFFALSE 77882
// exit ;
77880: GO 77927
// for i in tmp do
77882: LD_ADDR_VAR 0 3
77886: PUSH
77887: LD_VAR 0 5
77891: PUSH
77892: FOR_IN
77893: IFFALSE 77925
// begin result := EnemyInRange ( i , 22 ) ;
77895: LD_ADDR_VAR 0 2
77899: PUSH
77900: LD_VAR 0 3
77904: PPUSH
77905: LD_INT 22
77907: PPUSH
77908: CALL 75525 0 2
77912: ST_TO_ADDR
// if result then
77913: LD_VAR 0 2
77917: IFFALSE 77923
// exit ;
77919: POP
77920: POP
77921: GO 77927
// end ;
77923: GO 77892
77925: POP
77926: POP
// end ;
77927: LD_VAR 0 2
77931: RET
// export function FilterByTag ( units , tag ) ; begin
77932: LD_INT 0
77934: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77935: LD_ADDR_VAR 0 3
77939: PUSH
77940: LD_VAR 0 1
77944: PPUSH
77945: LD_INT 120
77947: PUSH
77948: LD_VAR 0 2
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PPUSH
77957: CALL_OW 72
77961: ST_TO_ADDR
// end ;
77962: LD_VAR 0 3
77966: RET
// export function IsDriver ( un ) ; begin
77967: LD_INT 0
77969: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77970: LD_ADDR_VAR 0 2
77974: PUSH
77975: LD_VAR 0 1
77979: PUSH
77980: LD_INT 55
77982: PUSH
77983: EMPTY
77984: LIST
77985: PPUSH
77986: CALL_OW 69
77990: IN
77991: ST_TO_ADDR
// end ;
77992: LD_VAR 0 2
77996: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77997: LD_INT 0
77999: PPUSH
78000: PPUSH
// list := [ ] ;
78001: LD_ADDR_VAR 0 5
78005: PUSH
78006: EMPTY
78007: ST_TO_ADDR
// case d of 0 :
78008: LD_VAR 0 3
78012: PUSH
78013: LD_INT 0
78015: DOUBLE
78016: EQUAL
78017: IFTRUE 78021
78019: GO 78154
78021: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78022: LD_ADDR_VAR 0 5
78026: PUSH
78027: LD_VAR 0 1
78031: PUSH
78032: LD_INT 4
78034: MINUS
78035: PUSH
78036: LD_VAR 0 2
78040: PUSH
78041: LD_INT 4
78043: MINUS
78044: PUSH
78045: LD_INT 2
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: LD_INT 3
78060: MINUS
78061: PUSH
78062: LD_VAR 0 2
78066: PUSH
78067: LD_INT 1
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: LIST
78074: PUSH
78075: LD_VAR 0 1
78079: PUSH
78080: LD_INT 4
78082: PLUS
78083: PUSH
78084: LD_VAR 0 2
78088: PUSH
78089: LD_INT 4
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: LIST
78096: PUSH
78097: LD_VAR 0 1
78101: PUSH
78102: LD_INT 3
78104: PLUS
78105: PUSH
78106: LD_VAR 0 2
78110: PUSH
78111: LD_INT 3
78113: PLUS
78114: PUSH
78115: LD_INT 5
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: PUSH
78123: LD_VAR 0 1
78127: PUSH
78128: LD_VAR 0 2
78132: PUSH
78133: LD_INT 4
78135: PLUS
78136: PUSH
78137: LD_INT 0
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: LIST
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: ST_TO_ADDR
// end ; 1 :
78152: GO 78852
78154: LD_INT 1
78156: DOUBLE
78157: EQUAL
78158: IFTRUE 78162
78160: GO 78295
78162: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78163: LD_ADDR_VAR 0 5
78167: PUSH
78168: LD_VAR 0 1
78172: PUSH
78173: LD_VAR 0 2
78177: PUSH
78178: LD_INT 4
78180: MINUS
78181: PUSH
78182: LD_INT 3
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: LIST
78189: PUSH
78190: LD_VAR 0 1
78194: PUSH
78195: LD_INT 3
78197: MINUS
78198: PUSH
78199: LD_VAR 0 2
78203: PUSH
78204: LD_INT 3
78206: MINUS
78207: PUSH
78208: LD_INT 2
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: PUSH
78216: LD_VAR 0 1
78220: PUSH
78221: LD_INT 4
78223: MINUS
78224: PUSH
78225: LD_VAR 0 2
78229: PUSH
78230: LD_INT 1
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: LIST
78237: PUSH
78238: LD_VAR 0 1
78242: PUSH
78243: LD_VAR 0 2
78247: PUSH
78248: LD_INT 3
78250: PLUS
78251: PUSH
78252: LD_INT 0
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: LIST
78259: PUSH
78260: LD_VAR 0 1
78264: PUSH
78265: LD_INT 4
78267: PLUS
78268: PUSH
78269: LD_VAR 0 2
78273: PUSH
78274: LD_INT 4
78276: PLUS
78277: PUSH
78278: LD_INT 5
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: LIST
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: LIST
78292: ST_TO_ADDR
// end ; 2 :
78293: GO 78852
78295: LD_INT 2
78297: DOUBLE
78298: EQUAL
78299: IFTRUE 78303
78301: GO 78432
78303: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78304: LD_ADDR_VAR 0 5
78308: PUSH
78309: LD_VAR 0 1
78313: PUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_INT 3
78321: MINUS
78322: PUSH
78323: LD_INT 3
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: LIST
78330: PUSH
78331: LD_VAR 0 1
78335: PUSH
78336: LD_INT 4
78338: PLUS
78339: PUSH
78340: LD_VAR 0 2
78344: PUSH
78345: LD_INT 4
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: LIST
78352: PUSH
78353: LD_VAR 0 1
78357: PUSH
78358: LD_VAR 0 2
78362: PUSH
78363: LD_INT 4
78365: PLUS
78366: PUSH
78367: LD_INT 0
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: LIST
78374: PUSH
78375: LD_VAR 0 1
78379: PUSH
78380: LD_INT 3
78382: MINUS
78383: PUSH
78384: LD_VAR 0 2
78388: PUSH
78389: LD_INT 1
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: LIST
78396: PUSH
78397: LD_VAR 0 1
78401: PUSH
78402: LD_INT 4
78404: MINUS
78405: PUSH
78406: LD_VAR 0 2
78410: PUSH
78411: LD_INT 4
78413: MINUS
78414: PUSH
78415: LD_INT 2
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: LIST
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: ST_TO_ADDR
// end ; 3 :
78430: GO 78852
78432: LD_INT 3
78434: DOUBLE
78435: EQUAL
78436: IFTRUE 78440
78438: GO 78573
78440: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78441: LD_ADDR_VAR 0 5
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 3
78453: PLUS
78454: PUSH
78455: LD_VAR 0 2
78459: PUSH
78460: LD_INT 4
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: LIST
78467: PUSH
78468: LD_VAR 0 1
78472: PUSH
78473: LD_INT 4
78475: PLUS
78476: PUSH
78477: LD_VAR 0 2
78481: PUSH
78482: LD_INT 4
78484: PLUS
78485: PUSH
78486: LD_INT 5
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: LIST
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 4
78501: MINUS
78502: PUSH
78503: LD_VAR 0 2
78507: PUSH
78508: LD_INT 1
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: LIST
78515: PUSH
78516: LD_VAR 0 1
78520: PUSH
78521: LD_VAR 0 2
78525: PUSH
78526: LD_INT 4
78528: MINUS
78529: PUSH
78530: LD_INT 3
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: LIST
78537: PUSH
78538: LD_VAR 0 1
78542: PUSH
78543: LD_INT 3
78545: MINUS
78546: PUSH
78547: LD_VAR 0 2
78551: PUSH
78552: LD_INT 3
78554: MINUS
78555: PUSH
78556: LD_INT 2
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: LIST
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: ST_TO_ADDR
// end ; 4 :
78571: GO 78852
78573: LD_INT 4
78575: DOUBLE
78576: EQUAL
78577: IFTRUE 78581
78579: GO 78714
78581: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78582: LD_ADDR_VAR 0 5
78586: PUSH
78587: LD_VAR 0 1
78591: PUSH
78592: LD_VAR 0 2
78596: PUSH
78597: LD_INT 4
78599: PLUS
78600: PUSH
78601: LD_INT 0
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: LIST
78608: PUSH
78609: LD_VAR 0 1
78613: PUSH
78614: LD_INT 3
78616: PLUS
78617: PUSH
78618: LD_VAR 0 2
78622: PUSH
78623: LD_INT 3
78625: PLUS
78626: PUSH
78627: LD_INT 5
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: PUSH
78635: LD_VAR 0 1
78639: PUSH
78640: LD_INT 4
78642: PLUS
78643: PUSH
78644: LD_VAR 0 2
78648: PUSH
78649: LD_INT 4
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: LIST
78656: PUSH
78657: LD_VAR 0 1
78661: PUSH
78662: LD_VAR 0 2
78666: PUSH
78667: LD_INT 3
78669: MINUS
78670: PUSH
78671: LD_INT 3
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: LIST
78678: PUSH
78679: LD_VAR 0 1
78683: PUSH
78684: LD_INT 4
78686: MINUS
78687: PUSH
78688: LD_VAR 0 2
78692: PUSH
78693: LD_INT 4
78695: MINUS
78696: PUSH
78697: LD_INT 2
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: LIST
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: ST_TO_ADDR
// end ; 5 :
78712: GO 78852
78714: LD_INT 5
78716: DOUBLE
78717: EQUAL
78718: IFTRUE 78722
78720: GO 78851
78722: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78723: LD_ADDR_VAR 0 5
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_INT 4
78735: MINUS
78736: PUSH
78737: LD_VAR 0 2
78741: PUSH
78742: LD_INT 1
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: PUSH
78750: LD_VAR 0 1
78754: PUSH
78755: LD_VAR 0 2
78759: PUSH
78760: LD_INT 4
78762: MINUS
78763: PUSH
78764: LD_INT 3
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: LIST
78771: PUSH
78772: LD_VAR 0 1
78776: PUSH
78777: LD_INT 4
78779: PLUS
78780: PUSH
78781: LD_VAR 0 2
78785: PUSH
78786: LD_INT 4
78788: PLUS
78789: PUSH
78790: LD_INT 5
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: LIST
78797: PUSH
78798: LD_VAR 0 1
78802: PUSH
78803: LD_INT 3
78805: PLUS
78806: PUSH
78807: LD_VAR 0 2
78811: PUSH
78812: LD_INT 4
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: LIST
78819: PUSH
78820: LD_VAR 0 1
78824: PUSH
78825: LD_VAR 0 2
78829: PUSH
78830: LD_INT 3
78832: PLUS
78833: PUSH
78834: LD_INT 0
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: LIST
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: ST_TO_ADDR
// end ; end ;
78849: GO 78852
78851: POP
// result := list ;
78852: LD_ADDR_VAR 0 4
78856: PUSH
78857: LD_VAR 0 5
78861: ST_TO_ADDR
// end ;
78862: LD_VAR 0 4
78866: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78867: LD_INT 0
78869: PPUSH
78870: PPUSH
78871: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78872: LD_VAR 0 1
78876: NOT
78877: PUSH
78878: LD_VAR 0 2
78882: PUSH
78883: LD_INT 1
78885: PUSH
78886: LD_INT 2
78888: PUSH
78889: LD_INT 3
78891: PUSH
78892: LD_INT 4
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: LIST
78899: LIST
78900: IN
78901: NOT
78902: OR
78903: IFFALSE 78907
// exit ;
78905: GO 78990
// tmp := [ ] ;
78907: LD_ADDR_VAR 0 5
78911: PUSH
78912: EMPTY
78913: ST_TO_ADDR
// for i in units do
78914: LD_ADDR_VAR 0 4
78918: PUSH
78919: LD_VAR 0 1
78923: PUSH
78924: FOR_IN
78925: IFFALSE 78959
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78927: LD_ADDR_VAR 0 5
78931: PUSH
78932: LD_VAR 0 5
78936: PPUSH
78937: LD_VAR 0 4
78941: PPUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: CALL_OW 259
78951: PPUSH
78952: CALL 80363 0 2
78956: ST_TO_ADDR
78957: GO 78924
78959: POP
78960: POP
// if not tmp then
78961: LD_VAR 0 5
78965: NOT
78966: IFFALSE 78970
// exit ;
78968: GO 78990
// result := SortListByListDesc ( units , tmp ) ;
78970: LD_ADDR_VAR 0 3
78974: PUSH
78975: LD_VAR 0 1
78979: PPUSH
78980: LD_VAR 0 5
78984: PPUSH
78985: CALL_OW 77
78989: ST_TO_ADDR
// end ;
78990: LD_VAR 0 3
78994: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78995: LD_INT 0
78997: PPUSH
78998: PPUSH
78999: PPUSH
// result := false ;
79000: LD_ADDR_VAR 0 3
79004: PUSH
79005: LD_INT 0
79007: ST_TO_ADDR
// if not building then
79008: LD_VAR 0 2
79012: NOT
79013: IFFALSE 79017
// exit ;
79015: GO 79155
// x := GetX ( building ) ;
79017: LD_ADDR_VAR 0 4
79021: PUSH
79022: LD_VAR 0 2
79026: PPUSH
79027: CALL_OW 250
79031: ST_TO_ADDR
// y := GetY ( building ) ;
79032: LD_ADDR_VAR 0 5
79036: PUSH
79037: LD_VAR 0 2
79041: PPUSH
79042: CALL_OW 251
79046: ST_TO_ADDR
// if not x or not y then
79047: LD_VAR 0 4
79051: NOT
79052: PUSH
79053: LD_VAR 0 5
79057: NOT
79058: OR
79059: IFFALSE 79063
// exit ;
79061: GO 79155
// if GetTaskList ( unit ) then
79063: LD_VAR 0 1
79067: PPUSH
79068: CALL_OW 437
79072: IFFALSE 79155
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79074: LD_STRING e
79076: PUSH
79077: LD_VAR 0 1
79081: PPUSH
79082: CALL_OW 437
79086: PUSH
79087: LD_INT 1
79089: ARRAY
79090: PUSH
79091: LD_INT 1
79093: ARRAY
79094: EQUAL
79095: PUSH
79096: LD_VAR 0 4
79100: PUSH
79101: LD_VAR 0 1
79105: PPUSH
79106: CALL_OW 437
79110: PUSH
79111: LD_INT 1
79113: ARRAY
79114: PUSH
79115: LD_INT 2
79117: ARRAY
79118: EQUAL
79119: AND
79120: PUSH
79121: LD_VAR 0 5
79125: PUSH
79126: LD_VAR 0 1
79130: PPUSH
79131: CALL_OW 437
79135: PUSH
79136: LD_INT 1
79138: ARRAY
79139: PUSH
79140: LD_INT 3
79142: ARRAY
79143: EQUAL
79144: AND
79145: IFFALSE 79155
// result := true end ;
79147: LD_ADDR_VAR 0 3
79151: PUSH
79152: LD_INT 1
79154: ST_TO_ADDR
// end ;
79155: LD_VAR 0 3
79159: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79160: LD_INT 0
79162: PPUSH
// result := false ;
79163: LD_ADDR_VAR 0 4
79167: PUSH
79168: LD_INT 0
79170: ST_TO_ADDR
// if GetTaskList ( unit ) then
79171: LD_VAR 0 1
79175: PPUSH
79176: CALL_OW 437
79180: IFFALSE 79263
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79182: LD_STRING M
79184: PUSH
79185: LD_VAR 0 1
79189: PPUSH
79190: CALL_OW 437
79194: PUSH
79195: LD_INT 1
79197: ARRAY
79198: PUSH
79199: LD_INT 1
79201: ARRAY
79202: EQUAL
79203: PUSH
79204: LD_VAR 0 2
79208: PUSH
79209: LD_VAR 0 1
79213: PPUSH
79214: CALL_OW 437
79218: PUSH
79219: LD_INT 1
79221: ARRAY
79222: PUSH
79223: LD_INT 2
79225: ARRAY
79226: EQUAL
79227: AND
79228: PUSH
79229: LD_VAR 0 3
79233: PUSH
79234: LD_VAR 0 1
79238: PPUSH
79239: CALL_OW 437
79243: PUSH
79244: LD_INT 1
79246: ARRAY
79247: PUSH
79248: LD_INT 3
79250: ARRAY
79251: EQUAL
79252: AND
79253: IFFALSE 79263
// result := true ;
79255: LD_ADDR_VAR 0 4
79259: PUSH
79260: LD_INT 1
79262: ST_TO_ADDR
// end ; end ;
79263: LD_VAR 0 4
79267: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79268: LD_INT 0
79270: PPUSH
79271: PPUSH
79272: PPUSH
79273: PPUSH
// if not unit or not area then
79274: LD_VAR 0 1
79278: NOT
79279: PUSH
79280: LD_VAR 0 2
79284: NOT
79285: OR
79286: IFFALSE 79290
// exit ;
79288: GO 79466
// tmp := AreaToList ( area , i ) ;
79290: LD_ADDR_VAR 0 6
79294: PUSH
79295: LD_VAR 0 2
79299: PPUSH
79300: LD_VAR 0 5
79304: PPUSH
79305: CALL_OW 517
79309: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79310: LD_ADDR_VAR 0 5
79314: PUSH
79315: DOUBLE
79316: LD_INT 1
79318: DEC
79319: ST_TO_ADDR
79320: LD_VAR 0 6
79324: PUSH
79325: LD_INT 1
79327: ARRAY
79328: PUSH
79329: FOR_TO
79330: IFFALSE 79464
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79332: LD_ADDR_VAR 0 7
79336: PUSH
79337: LD_VAR 0 6
79341: PUSH
79342: LD_INT 1
79344: ARRAY
79345: PUSH
79346: LD_VAR 0 5
79350: ARRAY
79351: PUSH
79352: LD_VAR 0 6
79356: PUSH
79357: LD_INT 2
79359: ARRAY
79360: PUSH
79361: LD_VAR 0 5
79365: ARRAY
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79371: LD_INT 92
79373: PUSH
79374: LD_VAR 0 7
79378: PUSH
79379: LD_INT 1
79381: ARRAY
79382: PUSH
79383: LD_VAR 0 7
79387: PUSH
79388: LD_INT 2
79390: ARRAY
79391: PUSH
79392: LD_INT 2
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: PPUSH
79401: CALL_OW 69
79405: PUSH
79406: LD_INT 0
79408: EQUAL
79409: IFFALSE 79462
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79411: LD_VAR 0 1
79415: PPUSH
79416: LD_VAR 0 7
79420: PUSH
79421: LD_INT 1
79423: ARRAY
79424: PPUSH
79425: LD_VAR 0 7
79429: PUSH
79430: LD_INT 2
79432: ARRAY
79433: PPUSH
79434: LD_VAR 0 3
79438: PPUSH
79439: CALL_OW 48
// result := IsPlaced ( unit ) ;
79443: LD_ADDR_VAR 0 4
79447: PUSH
79448: LD_VAR 0 1
79452: PPUSH
79453: CALL_OW 305
79457: ST_TO_ADDR
// exit ;
79458: POP
79459: POP
79460: GO 79466
// end ; end ;
79462: GO 79329
79464: POP
79465: POP
// end ;
79466: LD_VAR 0 4
79470: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79471: LD_INT 0
79473: PPUSH
79474: PPUSH
79475: PPUSH
// if not side or side > 8 then
79476: LD_VAR 0 1
79480: NOT
79481: PUSH
79482: LD_VAR 0 1
79486: PUSH
79487: LD_INT 8
79489: GREATER
79490: OR
79491: IFFALSE 79495
// exit ;
79493: GO 79682
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79495: LD_ADDR_VAR 0 4
79499: PUSH
79500: LD_INT 22
79502: PUSH
79503: LD_VAR 0 1
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: PUSH
79512: LD_INT 21
79514: PUSH
79515: LD_INT 3
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: PPUSH
79526: CALL_OW 69
79530: ST_TO_ADDR
// if not tmp then
79531: LD_VAR 0 4
79535: NOT
79536: IFFALSE 79540
// exit ;
79538: GO 79682
// enable_addtolog := true ;
79540: LD_ADDR_OWVAR 81
79544: PUSH
79545: LD_INT 1
79547: ST_TO_ADDR
// AddToLog ( [ ) ;
79548: LD_STRING [
79550: PPUSH
79551: CALL_OW 561
// for i in tmp do
79555: LD_ADDR_VAR 0 3
79559: PUSH
79560: LD_VAR 0 4
79564: PUSH
79565: FOR_IN
79566: IFFALSE 79673
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79568: LD_STRING [
79570: PUSH
79571: LD_VAR 0 3
79575: PPUSH
79576: CALL_OW 266
79580: STR
79581: PUSH
79582: LD_STRING , 
79584: STR
79585: PUSH
79586: LD_VAR 0 3
79590: PPUSH
79591: CALL_OW 250
79595: STR
79596: PUSH
79597: LD_STRING , 
79599: STR
79600: PUSH
79601: LD_VAR 0 3
79605: PPUSH
79606: CALL_OW 251
79610: STR
79611: PUSH
79612: LD_STRING , 
79614: STR
79615: PUSH
79616: LD_VAR 0 3
79620: PPUSH
79621: CALL_OW 254
79625: STR
79626: PUSH
79627: LD_STRING , 
79629: STR
79630: PUSH
79631: LD_VAR 0 3
79635: PPUSH
79636: LD_INT 1
79638: PPUSH
79639: CALL_OW 268
79643: STR
79644: PUSH
79645: LD_STRING , 
79647: STR
79648: PUSH
79649: LD_VAR 0 3
79653: PPUSH
79654: LD_INT 2
79656: PPUSH
79657: CALL_OW 268
79661: STR
79662: PUSH
79663: LD_STRING ],
79665: STR
79666: PPUSH
79667: CALL_OW 561
// end ;
79671: GO 79565
79673: POP
79674: POP
// AddToLog ( ]; ) ;
79675: LD_STRING ];
79677: PPUSH
79678: CALL_OW 561
// end ;
79682: LD_VAR 0 2
79686: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79687: LD_INT 0
79689: PPUSH
79690: PPUSH
79691: PPUSH
79692: PPUSH
79693: PPUSH
// if not area or not rate or not max then
79694: LD_VAR 0 1
79698: NOT
79699: PUSH
79700: LD_VAR 0 2
79704: NOT
79705: OR
79706: PUSH
79707: LD_VAR 0 4
79711: NOT
79712: OR
79713: IFFALSE 79717
// exit ;
79715: GO 79906
// while 1 do
79717: LD_INT 1
79719: IFFALSE 79906
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79721: LD_ADDR_VAR 0 9
79725: PUSH
79726: LD_VAR 0 1
79730: PPUSH
79731: LD_INT 1
79733: PPUSH
79734: CALL_OW 287
79738: PUSH
79739: LD_INT 10
79741: MUL
79742: ST_TO_ADDR
// r := rate / 10 ;
79743: LD_ADDR_VAR 0 7
79747: PUSH
79748: LD_VAR 0 2
79752: PUSH
79753: LD_INT 10
79755: DIVREAL
79756: ST_TO_ADDR
// time := 1 1$00 ;
79757: LD_ADDR_VAR 0 8
79761: PUSH
79762: LD_INT 2100
79764: ST_TO_ADDR
// if amount < min then
79765: LD_VAR 0 9
79769: PUSH
79770: LD_VAR 0 3
79774: LESS
79775: IFFALSE 79793
// r := r * 2 else
79777: LD_ADDR_VAR 0 7
79781: PUSH
79782: LD_VAR 0 7
79786: PUSH
79787: LD_INT 2
79789: MUL
79790: ST_TO_ADDR
79791: GO 79819
// if amount > max then
79793: LD_VAR 0 9
79797: PUSH
79798: LD_VAR 0 4
79802: GREATER
79803: IFFALSE 79819
// r := r / 2 ;
79805: LD_ADDR_VAR 0 7
79809: PUSH
79810: LD_VAR 0 7
79814: PUSH
79815: LD_INT 2
79817: DIVREAL
79818: ST_TO_ADDR
// time := time / r ;
79819: LD_ADDR_VAR 0 8
79823: PUSH
79824: LD_VAR 0 8
79828: PUSH
79829: LD_VAR 0 7
79833: DIVREAL
79834: ST_TO_ADDR
// if time < 0 then
79835: LD_VAR 0 8
79839: PUSH
79840: LD_INT 0
79842: LESS
79843: IFFALSE 79860
// time := time * - 1 ;
79845: LD_ADDR_VAR 0 8
79849: PUSH
79850: LD_VAR 0 8
79854: PUSH
79855: LD_INT 1
79857: NEG
79858: MUL
79859: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79860: LD_VAR 0 8
79864: PUSH
79865: LD_INT 35
79867: PPUSH
79868: LD_INT 875
79870: PPUSH
79871: CALL_OW 12
79875: PLUS
79876: PPUSH
79877: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79881: LD_INT 1
79883: PPUSH
79884: LD_INT 5
79886: PPUSH
79887: CALL_OW 12
79891: PPUSH
79892: LD_VAR 0 1
79896: PPUSH
79897: LD_INT 1
79899: PPUSH
79900: CALL_OW 55
// end ;
79904: GO 79717
// end ;
79906: LD_VAR 0 5
79910: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79911: LD_INT 0
79913: PPUSH
79914: PPUSH
79915: PPUSH
79916: PPUSH
79917: PPUSH
79918: PPUSH
79919: PPUSH
79920: PPUSH
// if not turrets or not factories then
79921: LD_VAR 0 1
79925: NOT
79926: PUSH
79927: LD_VAR 0 2
79931: NOT
79932: OR
79933: IFFALSE 79937
// exit ;
79935: GO 80244
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79937: LD_ADDR_VAR 0 10
79941: PUSH
79942: LD_INT 5
79944: PUSH
79945: LD_INT 6
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 2
79954: PUSH
79955: LD_INT 4
79957: PUSH
79958: EMPTY
79959: LIST
79960: LIST
79961: PUSH
79962: LD_INT 3
79964: PUSH
79965: LD_INT 5
79967: PUSH
79968: EMPTY
79969: LIST
79970: LIST
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: LIST
79976: PUSH
79977: LD_INT 24
79979: PUSH
79980: LD_INT 25
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 23
79989: PUSH
79990: LD_INT 27
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: LD_INT 42
80003: PUSH
80004: LD_INT 43
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 44
80013: PUSH
80014: LD_INT 46
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PUSH
80021: LD_INT 45
80023: PUSH
80024: LD_INT 47
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: LIST
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: LIST
80040: ST_TO_ADDR
// result := [ ] ;
80041: LD_ADDR_VAR 0 3
80045: PUSH
80046: EMPTY
80047: ST_TO_ADDR
// for i in turrets do
80048: LD_ADDR_VAR 0 4
80052: PUSH
80053: LD_VAR 0 1
80057: PUSH
80058: FOR_IN
80059: IFFALSE 80242
// begin nat := GetNation ( i ) ;
80061: LD_ADDR_VAR 0 7
80065: PUSH
80066: LD_VAR 0 4
80070: PPUSH
80071: CALL_OW 248
80075: ST_TO_ADDR
// weapon := 0 ;
80076: LD_ADDR_VAR 0 8
80080: PUSH
80081: LD_INT 0
80083: ST_TO_ADDR
// if not nat then
80084: LD_VAR 0 7
80088: NOT
80089: IFFALSE 80093
// continue ;
80091: GO 80058
// for j in list [ nat ] do
80093: LD_ADDR_VAR 0 5
80097: PUSH
80098: LD_VAR 0 10
80102: PUSH
80103: LD_VAR 0 7
80107: ARRAY
80108: PUSH
80109: FOR_IN
80110: IFFALSE 80151
// if GetBWeapon ( i ) = j [ 1 ] then
80112: LD_VAR 0 4
80116: PPUSH
80117: CALL_OW 269
80121: PUSH
80122: LD_VAR 0 5
80126: PUSH
80127: LD_INT 1
80129: ARRAY
80130: EQUAL
80131: IFFALSE 80149
// begin weapon := j [ 2 ] ;
80133: LD_ADDR_VAR 0 8
80137: PUSH
80138: LD_VAR 0 5
80142: PUSH
80143: LD_INT 2
80145: ARRAY
80146: ST_TO_ADDR
// break ;
80147: GO 80151
// end ;
80149: GO 80109
80151: POP
80152: POP
// if not weapon then
80153: LD_VAR 0 8
80157: NOT
80158: IFFALSE 80162
// continue ;
80160: GO 80058
// for k in factories do
80162: LD_ADDR_VAR 0 6
80166: PUSH
80167: LD_VAR 0 2
80171: PUSH
80172: FOR_IN
80173: IFFALSE 80238
// begin weapons := AvailableWeaponList ( k ) ;
80175: LD_ADDR_VAR 0 9
80179: PUSH
80180: LD_VAR 0 6
80184: PPUSH
80185: CALL_OW 478
80189: ST_TO_ADDR
// if not weapons then
80190: LD_VAR 0 9
80194: NOT
80195: IFFALSE 80199
// continue ;
80197: GO 80172
// if weapon in weapons then
80199: LD_VAR 0 8
80203: PUSH
80204: LD_VAR 0 9
80208: IN
80209: IFFALSE 80236
// begin result := [ i , weapon ] ;
80211: LD_ADDR_VAR 0 3
80215: PUSH
80216: LD_VAR 0 4
80220: PUSH
80221: LD_VAR 0 8
80225: PUSH
80226: EMPTY
80227: LIST
80228: LIST
80229: ST_TO_ADDR
// exit ;
80230: POP
80231: POP
80232: POP
80233: POP
80234: GO 80244
// end ; end ;
80236: GO 80172
80238: POP
80239: POP
// end ;
80240: GO 80058
80242: POP
80243: POP
// end ;
80244: LD_VAR 0 3
80248: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80249: LD_INT 0
80251: PPUSH
// if not side or side > 8 then
80252: LD_VAR 0 3
80256: NOT
80257: PUSH
80258: LD_VAR 0 3
80262: PUSH
80263: LD_INT 8
80265: GREATER
80266: OR
80267: IFFALSE 80271
// exit ;
80269: GO 80330
// if not range then
80271: LD_VAR 0 4
80275: NOT
80276: IFFALSE 80287
// range := - 12 ;
80278: LD_ADDR_VAR 0 4
80282: PUSH
80283: LD_INT 12
80285: NEG
80286: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80287: LD_VAR 0 1
80291: PPUSH
80292: LD_VAR 0 2
80296: PPUSH
80297: LD_VAR 0 3
80301: PPUSH
80302: LD_VAR 0 4
80306: PPUSH
80307: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80311: LD_VAR 0 1
80315: PPUSH
80316: LD_VAR 0 2
80320: PPUSH
80321: LD_VAR 0 3
80325: PPUSH
80326: CALL_OW 331
// end ;
80330: LD_VAR 0 5
80334: RET
// export function Video ( mode ) ; begin
80335: LD_INT 0
80337: PPUSH
// ingame_video = mode ;
80338: LD_ADDR_OWVAR 52
80342: PUSH
80343: LD_VAR 0 1
80347: ST_TO_ADDR
// interface_hidden = mode ;
80348: LD_ADDR_OWVAR 54
80352: PUSH
80353: LD_VAR 0 1
80357: ST_TO_ADDR
// end ;
80358: LD_VAR 0 2
80362: RET
// export function Join ( array , element ) ; begin
80363: LD_INT 0
80365: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80366: LD_ADDR_VAR 0 3
80370: PUSH
80371: LD_VAR 0 1
80375: PPUSH
80376: LD_VAR 0 1
80380: PUSH
80381: LD_INT 1
80383: PLUS
80384: PPUSH
80385: LD_VAR 0 2
80389: PPUSH
80390: CALL_OW 1
80394: ST_TO_ADDR
// end ;
80395: LD_VAR 0 3
80399: RET
// export function JoinUnion ( array , element ) ; begin
80400: LD_INT 0
80402: PPUSH
// result := array union element ;
80403: LD_ADDR_VAR 0 3
80407: PUSH
80408: LD_VAR 0 1
80412: PUSH
80413: LD_VAR 0 2
80417: UNION
80418: ST_TO_ADDR
// end ;
80419: LD_VAR 0 3
80423: RET
// export function GetBehemoths ( side ) ; begin
80424: LD_INT 0
80426: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80427: LD_ADDR_VAR 0 2
80431: PUSH
80432: LD_INT 22
80434: PUSH
80435: LD_VAR 0 1
80439: PUSH
80440: EMPTY
80441: LIST
80442: LIST
80443: PUSH
80444: LD_INT 31
80446: PUSH
80447: LD_INT 25
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PPUSH
80458: CALL_OW 69
80462: ST_TO_ADDR
// end ;
80463: LD_VAR 0 2
80467: RET
// export function Shuffle ( array ) ; var i , index ; begin
80468: LD_INT 0
80470: PPUSH
80471: PPUSH
80472: PPUSH
// result := [ ] ;
80473: LD_ADDR_VAR 0 2
80477: PUSH
80478: EMPTY
80479: ST_TO_ADDR
// if not array then
80480: LD_VAR 0 1
80484: NOT
80485: IFFALSE 80489
// exit ;
80487: GO 80588
// Randomize ;
80489: CALL_OW 10
// for i = array downto 1 do
80493: LD_ADDR_VAR 0 3
80497: PUSH
80498: DOUBLE
80499: LD_VAR 0 1
80503: INC
80504: ST_TO_ADDR
80505: LD_INT 1
80507: PUSH
80508: FOR_DOWNTO
80509: IFFALSE 80586
// begin index := rand ( 1 , array ) ;
80511: LD_ADDR_VAR 0 4
80515: PUSH
80516: LD_INT 1
80518: PPUSH
80519: LD_VAR 0 1
80523: PPUSH
80524: CALL_OW 12
80528: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80529: LD_ADDR_VAR 0 2
80533: PUSH
80534: LD_VAR 0 2
80538: PPUSH
80539: LD_VAR 0 2
80543: PUSH
80544: LD_INT 1
80546: PLUS
80547: PPUSH
80548: LD_VAR 0 1
80552: PUSH
80553: LD_VAR 0 4
80557: ARRAY
80558: PPUSH
80559: CALL_OW 2
80563: ST_TO_ADDR
// array := Delete ( array , index ) ;
80564: LD_ADDR_VAR 0 1
80568: PUSH
80569: LD_VAR 0 1
80573: PPUSH
80574: LD_VAR 0 4
80578: PPUSH
80579: CALL_OW 3
80583: ST_TO_ADDR
// end ;
80584: GO 80508
80586: POP
80587: POP
// end ;
80588: LD_VAR 0 2
80592: RET
// export function GetBaseMaterials ( base ) ; begin
80593: LD_INT 0
80595: PPUSH
// result := [ 0 , 0 , 0 ] ;
80596: LD_ADDR_VAR 0 2
80600: PUSH
80601: LD_INT 0
80603: PUSH
80604: LD_INT 0
80606: PUSH
80607: LD_INT 0
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: LIST
80614: ST_TO_ADDR
// if not base then
80615: LD_VAR 0 1
80619: NOT
80620: IFFALSE 80624
// exit ;
80622: GO 80673
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80624: LD_ADDR_VAR 0 2
80628: PUSH
80629: LD_VAR 0 1
80633: PPUSH
80634: LD_INT 1
80636: PPUSH
80637: CALL_OW 275
80641: PUSH
80642: LD_VAR 0 1
80646: PPUSH
80647: LD_INT 2
80649: PPUSH
80650: CALL_OW 275
80654: PUSH
80655: LD_VAR 0 1
80659: PPUSH
80660: LD_INT 3
80662: PPUSH
80663: CALL_OW 275
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: LIST
80672: ST_TO_ADDR
// end ;
80673: LD_VAR 0 2
80677: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80678: LD_INT 0
80680: PPUSH
80681: PPUSH
// result := array ;
80682: LD_ADDR_VAR 0 3
80686: PUSH
80687: LD_VAR 0 1
80691: ST_TO_ADDR
// if size >= result then
80692: LD_VAR 0 2
80696: PUSH
80697: LD_VAR 0 3
80701: GREATEREQUAL
80702: IFFALSE 80706
// exit ;
80704: GO 80756
// if size then
80706: LD_VAR 0 2
80710: IFFALSE 80756
// for i := array downto size do
80712: LD_ADDR_VAR 0 4
80716: PUSH
80717: DOUBLE
80718: LD_VAR 0 1
80722: INC
80723: ST_TO_ADDR
80724: LD_VAR 0 2
80728: PUSH
80729: FOR_DOWNTO
80730: IFFALSE 80754
// result := Delete ( result , result ) ;
80732: LD_ADDR_VAR 0 3
80736: PUSH
80737: LD_VAR 0 3
80741: PPUSH
80742: LD_VAR 0 3
80746: PPUSH
80747: CALL_OW 3
80751: ST_TO_ADDR
80752: GO 80729
80754: POP
80755: POP
// end ;
80756: LD_VAR 0 3
80760: RET
// export function ComExit ( unit ) ; var tmp ; begin
80761: LD_INT 0
80763: PPUSH
80764: PPUSH
// if not IsInUnit ( unit ) then
80765: LD_VAR 0 1
80769: PPUSH
80770: CALL_OW 310
80774: NOT
80775: IFFALSE 80779
// exit ;
80777: GO 80839
// tmp := IsInUnit ( unit ) ;
80779: LD_ADDR_VAR 0 3
80783: PUSH
80784: LD_VAR 0 1
80788: PPUSH
80789: CALL_OW 310
80793: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80794: LD_VAR 0 3
80798: PPUSH
80799: CALL_OW 247
80803: PUSH
80804: LD_INT 2
80806: EQUAL
80807: IFFALSE 80820
// ComExitVehicle ( unit ) else
80809: LD_VAR 0 1
80813: PPUSH
80814: CALL_OW 121
80818: GO 80829
// ComExitBuilding ( unit ) ;
80820: LD_VAR 0 1
80824: PPUSH
80825: CALL_OW 122
// result := tmp ;
80829: LD_ADDR_VAR 0 2
80833: PUSH
80834: LD_VAR 0 3
80838: ST_TO_ADDR
// end ;
80839: LD_VAR 0 2
80843: RET
// export function ComExitAll ( units ) ; var i ; begin
80844: LD_INT 0
80846: PPUSH
80847: PPUSH
// if not units then
80848: LD_VAR 0 1
80852: NOT
80853: IFFALSE 80857
// exit ;
80855: GO 80883
// for i in units do
80857: LD_ADDR_VAR 0 3
80861: PUSH
80862: LD_VAR 0 1
80866: PUSH
80867: FOR_IN
80868: IFFALSE 80881
// ComExit ( i ) ;
80870: LD_VAR 0 3
80874: PPUSH
80875: CALL 80761 0 1
80879: GO 80867
80881: POP
80882: POP
// end ;
80883: LD_VAR 0 2
80887: RET
// export function ResetHc ; begin
80888: LD_INT 0
80890: PPUSH
// InitHc ;
80891: CALL_OW 19
// hc_importance := 0 ;
80895: LD_ADDR_OWVAR 32
80899: PUSH
80900: LD_INT 0
80902: ST_TO_ADDR
// end ;
80903: LD_VAR 0 1
80907: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80908: LD_INT 0
80910: PPUSH
80911: PPUSH
80912: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80913: LD_ADDR_VAR 0 6
80917: PUSH
80918: LD_VAR 0 1
80922: PUSH
80923: LD_VAR 0 3
80927: PLUS
80928: PUSH
80929: LD_INT 2
80931: DIV
80932: ST_TO_ADDR
// if _x < 0 then
80933: LD_VAR 0 6
80937: PUSH
80938: LD_INT 0
80940: LESS
80941: IFFALSE 80958
// _x := _x * - 1 ;
80943: LD_ADDR_VAR 0 6
80947: PUSH
80948: LD_VAR 0 6
80952: PUSH
80953: LD_INT 1
80955: NEG
80956: MUL
80957: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80958: LD_ADDR_VAR 0 7
80962: PUSH
80963: LD_VAR 0 2
80967: PUSH
80968: LD_VAR 0 4
80972: PLUS
80973: PUSH
80974: LD_INT 2
80976: DIV
80977: ST_TO_ADDR
// if _y < 0 then
80978: LD_VAR 0 7
80982: PUSH
80983: LD_INT 0
80985: LESS
80986: IFFALSE 81003
// _y := _y * - 1 ;
80988: LD_ADDR_VAR 0 7
80992: PUSH
80993: LD_VAR 0 7
80997: PUSH
80998: LD_INT 1
81000: NEG
81001: MUL
81002: ST_TO_ADDR
// result := [ _x , _y ] ;
81003: LD_ADDR_VAR 0 5
81007: PUSH
81008: LD_VAR 0 6
81012: PUSH
81013: LD_VAR 0 7
81017: PUSH
81018: EMPTY
81019: LIST
81020: LIST
81021: ST_TO_ADDR
// end ;
81022: LD_VAR 0 5
81026: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81027: LD_INT 0
81029: PPUSH
81030: PPUSH
81031: PPUSH
81032: PPUSH
// task := GetTaskList ( unit ) ;
81033: LD_ADDR_VAR 0 7
81037: PUSH
81038: LD_VAR 0 1
81042: PPUSH
81043: CALL_OW 437
81047: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81048: LD_VAR 0 7
81052: NOT
81053: PUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: LD_VAR 0 2
81063: PPUSH
81064: CALL_OW 308
81068: NOT
81069: AND
81070: IFFALSE 81074
// exit ;
81072: GO 81192
// if IsInArea ( unit , area ) then
81074: LD_VAR 0 1
81078: PPUSH
81079: LD_VAR 0 2
81083: PPUSH
81084: CALL_OW 308
81088: IFFALSE 81106
// begin ComMoveToArea ( unit , goAway ) ;
81090: LD_VAR 0 1
81094: PPUSH
81095: LD_VAR 0 3
81099: PPUSH
81100: CALL_OW 113
// exit ;
81104: GO 81192
// end ; if task [ 1 ] [ 1 ] <> M then
81106: LD_VAR 0 7
81110: PUSH
81111: LD_INT 1
81113: ARRAY
81114: PUSH
81115: LD_INT 1
81117: ARRAY
81118: PUSH
81119: LD_STRING M
81121: NONEQUAL
81122: IFFALSE 81126
// exit ;
81124: GO 81192
// x := task [ 1 ] [ 2 ] ;
81126: LD_ADDR_VAR 0 5
81130: PUSH
81131: LD_VAR 0 7
81135: PUSH
81136: LD_INT 1
81138: ARRAY
81139: PUSH
81140: LD_INT 2
81142: ARRAY
81143: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81144: LD_ADDR_VAR 0 6
81148: PUSH
81149: LD_VAR 0 7
81153: PUSH
81154: LD_INT 1
81156: ARRAY
81157: PUSH
81158: LD_INT 3
81160: ARRAY
81161: ST_TO_ADDR
// if InArea ( x , y , area ) then
81162: LD_VAR 0 5
81166: PPUSH
81167: LD_VAR 0 6
81171: PPUSH
81172: LD_VAR 0 2
81176: PPUSH
81177: CALL_OW 309
81181: IFFALSE 81192
// ComStop ( unit ) ;
81183: LD_VAR 0 1
81187: PPUSH
81188: CALL_OW 141
// end ;
81192: LD_VAR 0 4
81196: RET
// export function Abs ( value ) ; begin
81197: LD_INT 0
81199: PPUSH
// result := value ;
81200: LD_ADDR_VAR 0 2
81204: PUSH
81205: LD_VAR 0 1
81209: ST_TO_ADDR
// if value < 0 then
81210: LD_VAR 0 1
81214: PUSH
81215: LD_INT 0
81217: LESS
81218: IFFALSE 81235
// result := value * - 1 ;
81220: LD_ADDR_VAR 0 2
81224: PUSH
81225: LD_VAR 0 1
81229: PUSH
81230: LD_INT 1
81232: NEG
81233: MUL
81234: ST_TO_ADDR
// end ;
81235: LD_VAR 0 2
81239: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81240: LD_INT 0
81242: PPUSH
81243: PPUSH
81244: PPUSH
81245: PPUSH
81246: PPUSH
81247: PPUSH
81248: PPUSH
81249: PPUSH
// if not unit or not building then
81250: LD_VAR 0 1
81254: NOT
81255: PUSH
81256: LD_VAR 0 2
81260: NOT
81261: OR
81262: IFFALSE 81266
// exit ;
81264: GO 81492
// x := GetX ( building ) ;
81266: LD_ADDR_VAR 0 4
81270: PUSH
81271: LD_VAR 0 2
81275: PPUSH
81276: CALL_OW 250
81280: ST_TO_ADDR
// y := GetY ( building ) ;
81281: LD_ADDR_VAR 0 6
81285: PUSH
81286: LD_VAR 0 2
81290: PPUSH
81291: CALL_OW 251
81295: ST_TO_ADDR
// d := GetDir ( building ) ;
81296: LD_ADDR_VAR 0 8
81300: PUSH
81301: LD_VAR 0 2
81305: PPUSH
81306: CALL_OW 254
81310: ST_TO_ADDR
// r := 4 ;
81311: LD_ADDR_VAR 0 9
81315: PUSH
81316: LD_INT 4
81318: ST_TO_ADDR
// for i := 1 to 5 do
81319: LD_ADDR_VAR 0 10
81323: PUSH
81324: DOUBLE
81325: LD_INT 1
81327: DEC
81328: ST_TO_ADDR
81329: LD_INT 5
81331: PUSH
81332: FOR_TO
81333: IFFALSE 81490
// begin _x := ShiftX ( x , d , r + i ) ;
81335: LD_ADDR_VAR 0 5
81339: PUSH
81340: LD_VAR 0 4
81344: PPUSH
81345: LD_VAR 0 8
81349: PPUSH
81350: LD_VAR 0 9
81354: PUSH
81355: LD_VAR 0 10
81359: PLUS
81360: PPUSH
81361: CALL_OW 272
81365: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81366: LD_ADDR_VAR 0 7
81370: PUSH
81371: LD_VAR 0 6
81375: PPUSH
81376: LD_VAR 0 8
81380: PPUSH
81381: LD_VAR 0 9
81385: PUSH
81386: LD_VAR 0 10
81390: PLUS
81391: PPUSH
81392: CALL_OW 273
81396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81397: LD_VAR 0 5
81401: PPUSH
81402: LD_VAR 0 7
81406: PPUSH
81407: CALL_OW 488
81411: PUSH
81412: LD_VAR 0 5
81416: PPUSH
81417: LD_VAR 0 7
81421: PPUSH
81422: CALL_OW 428
81426: PPUSH
81427: CALL_OW 247
81431: PUSH
81432: LD_INT 3
81434: PUSH
81435: LD_INT 2
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: IN
81442: NOT
81443: AND
81444: IFFALSE 81488
// begin ComMoveXY ( unit , _x , _y ) ;
81446: LD_VAR 0 1
81450: PPUSH
81451: LD_VAR 0 5
81455: PPUSH
81456: LD_VAR 0 7
81460: PPUSH
81461: CALL_OW 111
// result := [ _x , _y ] ;
81465: LD_ADDR_VAR 0 3
81469: PUSH
81470: LD_VAR 0 5
81474: PUSH
81475: LD_VAR 0 7
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: ST_TO_ADDR
// exit ;
81484: POP
81485: POP
81486: GO 81492
// end ; end ;
81488: GO 81332
81490: POP
81491: POP
// end ;
81492: LD_VAR 0 3
81496: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81497: LD_INT 0
81499: PPUSH
81500: PPUSH
81501: PPUSH
// result := 0 ;
81502: LD_ADDR_VAR 0 3
81506: PUSH
81507: LD_INT 0
81509: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81510: LD_VAR 0 1
81514: PUSH
81515: LD_INT 0
81517: LESS
81518: PUSH
81519: LD_VAR 0 1
81523: PUSH
81524: LD_INT 8
81526: GREATER
81527: OR
81528: PUSH
81529: LD_VAR 0 2
81533: PUSH
81534: LD_INT 0
81536: LESS
81537: OR
81538: PUSH
81539: LD_VAR 0 2
81543: PUSH
81544: LD_INT 8
81546: GREATER
81547: OR
81548: IFFALSE 81552
// exit ;
81550: GO 81627
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81552: LD_ADDR_VAR 0 4
81556: PUSH
81557: LD_INT 22
81559: PUSH
81560: LD_VAR 0 2
81564: PUSH
81565: EMPTY
81566: LIST
81567: LIST
81568: PPUSH
81569: CALL_OW 69
81573: PUSH
81574: FOR_IN
81575: IFFALSE 81625
// begin un := UnitShoot ( i ) ;
81577: LD_ADDR_VAR 0 5
81581: PUSH
81582: LD_VAR 0 4
81586: PPUSH
81587: CALL_OW 504
81591: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81592: LD_VAR 0 5
81596: PPUSH
81597: CALL_OW 255
81601: PUSH
81602: LD_VAR 0 1
81606: EQUAL
81607: IFFALSE 81623
// begin result := un ;
81609: LD_ADDR_VAR 0 3
81613: PUSH
81614: LD_VAR 0 5
81618: ST_TO_ADDR
// exit ;
81619: POP
81620: POP
81621: GO 81627
// end ; end ;
81623: GO 81574
81625: POP
81626: POP
// end ;
81627: LD_VAR 0 3
81631: RET
// export function GetCargoBay ( units ) ; begin
81632: LD_INT 0
81634: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81635: LD_ADDR_VAR 0 2
81639: PUSH
81640: LD_VAR 0 1
81644: PPUSH
81645: LD_INT 2
81647: PUSH
81648: LD_INT 34
81650: PUSH
81651: LD_INT 12
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: PUSH
81658: LD_INT 34
81660: PUSH
81661: LD_INT 51
81663: PUSH
81664: EMPTY
81665: LIST
81666: LIST
81667: PUSH
81668: LD_INT 34
81670: PUSH
81671: LD_INT 32
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: PUSH
81678: LD_INT 34
81680: PUSH
81681: LD_INT 89
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: PPUSH
81695: CALL_OW 72
81699: ST_TO_ADDR
// end ;
81700: LD_VAR 0 2
81704: RET
// export function Negate ( value ) ; begin
81705: LD_INT 0
81707: PPUSH
// result := not value ;
81708: LD_ADDR_VAR 0 2
81712: PUSH
81713: LD_VAR 0 1
81717: NOT
81718: ST_TO_ADDR
// end ;
81719: LD_VAR 0 2
81723: RET
// export function Inc ( value ) ; begin
81724: LD_INT 0
81726: PPUSH
// result := value + 1 ;
81727: LD_ADDR_VAR 0 2
81731: PUSH
81732: LD_VAR 0 1
81736: PUSH
81737: LD_INT 1
81739: PLUS
81740: ST_TO_ADDR
// end ;
81741: LD_VAR 0 2
81745: RET
// export function Dec ( value ) ; begin
81746: LD_INT 0
81748: PPUSH
// result := value - 1 ;
81749: LD_ADDR_VAR 0 2
81753: PUSH
81754: LD_VAR 0 1
81758: PUSH
81759: LD_INT 1
81761: MINUS
81762: ST_TO_ADDR
// end ;
81763: LD_VAR 0 2
81767: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81768: LD_INT 0
81770: PPUSH
81771: PPUSH
81772: PPUSH
81773: PPUSH
81774: PPUSH
81775: PPUSH
81776: PPUSH
81777: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81778: LD_VAR 0 1
81782: PPUSH
81783: LD_VAR 0 2
81787: PPUSH
81788: CALL_OW 488
81792: NOT
81793: PUSH
81794: LD_VAR 0 3
81798: PPUSH
81799: LD_VAR 0 4
81803: PPUSH
81804: CALL_OW 488
81808: NOT
81809: OR
81810: IFFALSE 81823
// begin result := - 1 ;
81812: LD_ADDR_VAR 0 5
81816: PUSH
81817: LD_INT 1
81819: NEG
81820: ST_TO_ADDR
// exit ;
81821: GO 82058
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81823: LD_ADDR_VAR 0 12
81827: PUSH
81828: LD_VAR 0 1
81832: PPUSH
81833: LD_VAR 0 2
81837: PPUSH
81838: LD_VAR 0 3
81842: PPUSH
81843: LD_VAR 0 4
81847: PPUSH
81848: CALL 80908 0 4
81852: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81853: LD_ADDR_VAR 0 11
81857: PUSH
81858: LD_VAR 0 1
81862: PPUSH
81863: LD_VAR 0 2
81867: PPUSH
81868: LD_VAR 0 12
81872: PUSH
81873: LD_INT 1
81875: ARRAY
81876: PPUSH
81877: LD_VAR 0 12
81881: PUSH
81882: LD_INT 2
81884: ARRAY
81885: PPUSH
81886: CALL_OW 298
81890: ST_TO_ADDR
// distance := 9999 ;
81891: LD_ADDR_VAR 0 10
81895: PUSH
81896: LD_INT 9999
81898: ST_TO_ADDR
// for i := 0 to 5 do
81899: LD_ADDR_VAR 0 6
81903: PUSH
81904: DOUBLE
81905: LD_INT 0
81907: DEC
81908: ST_TO_ADDR
81909: LD_INT 5
81911: PUSH
81912: FOR_TO
81913: IFFALSE 82056
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81915: LD_ADDR_VAR 0 7
81919: PUSH
81920: LD_VAR 0 1
81924: PPUSH
81925: LD_VAR 0 6
81929: PPUSH
81930: LD_VAR 0 11
81934: PPUSH
81935: CALL_OW 272
81939: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81940: LD_ADDR_VAR 0 8
81944: PUSH
81945: LD_VAR 0 2
81949: PPUSH
81950: LD_VAR 0 6
81954: PPUSH
81955: LD_VAR 0 11
81959: PPUSH
81960: CALL_OW 273
81964: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81965: LD_VAR 0 7
81969: PPUSH
81970: LD_VAR 0 8
81974: PPUSH
81975: CALL_OW 488
81979: NOT
81980: IFFALSE 81984
// continue ;
81982: GO 81912
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81984: LD_ADDR_VAR 0 9
81988: PUSH
81989: LD_VAR 0 12
81993: PUSH
81994: LD_INT 1
81996: ARRAY
81997: PPUSH
81998: LD_VAR 0 12
82002: PUSH
82003: LD_INT 2
82005: ARRAY
82006: PPUSH
82007: LD_VAR 0 7
82011: PPUSH
82012: LD_VAR 0 8
82016: PPUSH
82017: CALL_OW 298
82021: ST_TO_ADDR
// if tmp < distance then
82022: LD_VAR 0 9
82026: PUSH
82027: LD_VAR 0 10
82031: LESS
82032: IFFALSE 82054
// begin result := i ;
82034: LD_ADDR_VAR 0 5
82038: PUSH
82039: LD_VAR 0 6
82043: ST_TO_ADDR
// distance := tmp ;
82044: LD_ADDR_VAR 0 10
82048: PUSH
82049: LD_VAR 0 9
82053: ST_TO_ADDR
// end ; end ;
82054: GO 81912
82056: POP
82057: POP
// end ;
82058: LD_VAR 0 5
82062: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82063: LD_INT 0
82065: PPUSH
82066: PPUSH
// if not driver or not IsInUnit ( driver ) then
82067: LD_VAR 0 1
82071: NOT
82072: PUSH
82073: LD_VAR 0 1
82077: PPUSH
82078: CALL_OW 310
82082: NOT
82083: OR
82084: IFFALSE 82088
// exit ;
82086: GO 82178
// vehicle := IsInUnit ( driver ) ;
82088: LD_ADDR_VAR 0 3
82092: PUSH
82093: LD_VAR 0 1
82097: PPUSH
82098: CALL_OW 310
82102: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82103: LD_VAR 0 1
82107: PPUSH
82108: LD_STRING \
82110: PUSH
82111: LD_INT 0
82113: PUSH
82114: LD_INT 0
82116: PUSH
82117: LD_INT 0
82119: PUSH
82120: LD_INT 0
82122: PUSH
82123: LD_INT 0
82125: PUSH
82126: LD_INT 0
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: PUSH
82138: LD_STRING E
82140: PUSH
82141: LD_INT 0
82143: PUSH
82144: LD_INT 0
82146: PUSH
82147: LD_VAR 0 3
82151: PUSH
82152: LD_INT 0
82154: PUSH
82155: LD_INT 0
82157: PUSH
82158: LD_INT 0
82160: PUSH
82161: EMPTY
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: LIST
82169: PUSH
82170: EMPTY
82171: LIST
82172: LIST
82173: PPUSH
82174: CALL_OW 446
// end ;
82178: LD_VAR 0 2
82182: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82183: LD_INT 0
82185: PPUSH
82186: PPUSH
// if not driver or not IsInUnit ( driver ) then
82187: LD_VAR 0 1
82191: NOT
82192: PUSH
82193: LD_VAR 0 1
82197: PPUSH
82198: CALL_OW 310
82202: NOT
82203: OR
82204: IFFALSE 82208
// exit ;
82206: GO 82298
// vehicle := IsInUnit ( driver ) ;
82208: LD_ADDR_VAR 0 3
82212: PUSH
82213: LD_VAR 0 1
82217: PPUSH
82218: CALL_OW 310
82222: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82223: LD_VAR 0 1
82227: PPUSH
82228: LD_STRING \
82230: PUSH
82231: LD_INT 0
82233: PUSH
82234: LD_INT 0
82236: PUSH
82237: LD_INT 0
82239: PUSH
82240: LD_INT 0
82242: PUSH
82243: LD_INT 0
82245: PUSH
82246: LD_INT 0
82248: PUSH
82249: EMPTY
82250: LIST
82251: LIST
82252: LIST
82253: LIST
82254: LIST
82255: LIST
82256: LIST
82257: PUSH
82258: LD_STRING E
82260: PUSH
82261: LD_INT 0
82263: PUSH
82264: LD_INT 0
82266: PUSH
82267: LD_VAR 0 3
82271: PUSH
82272: LD_INT 0
82274: PUSH
82275: LD_INT 0
82277: PUSH
82278: LD_INT 0
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: LIST
82285: LIST
82286: LIST
82287: LIST
82288: LIST
82289: PUSH
82290: EMPTY
82291: LIST
82292: LIST
82293: PPUSH
82294: CALL_OW 447
// end ;
82298: LD_VAR 0 2
82302: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82303: LD_INT 0
82305: PPUSH
82306: PPUSH
82307: PPUSH
// tmp := [ ] ;
82308: LD_ADDR_VAR 0 5
82312: PUSH
82313: EMPTY
82314: ST_TO_ADDR
// for i in units do
82315: LD_ADDR_VAR 0 4
82319: PUSH
82320: LD_VAR 0 1
82324: PUSH
82325: FOR_IN
82326: IFFALSE 82364
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82328: LD_ADDR_VAR 0 5
82332: PUSH
82333: LD_VAR 0 5
82337: PPUSH
82338: LD_VAR 0 5
82342: PUSH
82343: LD_INT 1
82345: PLUS
82346: PPUSH
82347: LD_VAR 0 4
82351: PPUSH
82352: CALL_OW 256
82356: PPUSH
82357: CALL_OW 2
82361: ST_TO_ADDR
82362: GO 82325
82364: POP
82365: POP
// if not tmp then
82366: LD_VAR 0 5
82370: NOT
82371: IFFALSE 82375
// exit ;
82373: GO 82423
// if asc then
82375: LD_VAR 0 2
82379: IFFALSE 82403
// result := SortListByListAsc ( units , tmp ) else
82381: LD_ADDR_VAR 0 3
82385: PUSH
82386: LD_VAR 0 1
82390: PPUSH
82391: LD_VAR 0 5
82395: PPUSH
82396: CALL_OW 76
82400: ST_TO_ADDR
82401: GO 82423
// result := SortListByListDesc ( units , tmp ) ;
82403: LD_ADDR_VAR 0 3
82407: PUSH
82408: LD_VAR 0 1
82412: PPUSH
82413: LD_VAR 0 5
82417: PPUSH
82418: CALL_OW 77
82422: ST_TO_ADDR
// end ;
82423: LD_VAR 0 3
82427: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82428: LD_INT 0
82430: PPUSH
82431: PPUSH
// task := GetTaskList ( mech ) ;
82432: LD_ADDR_VAR 0 4
82436: PUSH
82437: LD_VAR 0 1
82441: PPUSH
82442: CALL_OW 437
82446: ST_TO_ADDR
// if not task then
82447: LD_VAR 0 4
82451: NOT
82452: IFFALSE 82456
// exit ;
82454: GO 82498
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82456: LD_ADDR_VAR 0 3
82460: PUSH
82461: LD_VAR 0 4
82465: PUSH
82466: LD_INT 1
82468: ARRAY
82469: PUSH
82470: LD_INT 1
82472: ARRAY
82473: PUSH
82474: LD_STRING r
82476: EQUAL
82477: PUSH
82478: LD_VAR 0 4
82482: PUSH
82483: LD_INT 1
82485: ARRAY
82486: PUSH
82487: LD_INT 4
82489: ARRAY
82490: PUSH
82491: LD_VAR 0 2
82495: EQUAL
82496: AND
82497: ST_TO_ADDR
// end ;
82498: LD_VAR 0 3
82502: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82503: LD_INT 0
82505: PPUSH
// SetDir ( unit , d ) ;
82506: LD_VAR 0 1
82510: PPUSH
82511: LD_VAR 0 4
82515: PPUSH
82516: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82520: LD_VAR 0 1
82524: PPUSH
82525: LD_VAR 0 2
82529: PPUSH
82530: LD_VAR 0 3
82534: PPUSH
82535: LD_VAR 0 5
82539: PPUSH
82540: CALL_OW 48
// end ;
82544: LD_VAR 0 6
82548: RET
// export function ToNaturalNumber ( number ) ; begin
82549: LD_INT 0
82551: PPUSH
// result := number div 1 ;
82552: LD_ADDR_VAR 0 2
82556: PUSH
82557: LD_VAR 0 1
82561: PUSH
82562: LD_INT 1
82564: DIV
82565: ST_TO_ADDR
// if number < 0 then
82566: LD_VAR 0 1
82570: PUSH
82571: LD_INT 0
82573: LESS
82574: IFFALSE 82584
// result := 0 ;
82576: LD_ADDR_VAR 0 2
82580: PUSH
82581: LD_INT 0
82583: ST_TO_ADDR
// end ;
82584: LD_VAR 0 2
82588: RET
// export function SortByClass ( units , class ) ; var un ; begin
82589: LD_INT 0
82591: PPUSH
82592: PPUSH
// if not units or not class then
82593: LD_VAR 0 1
82597: NOT
82598: PUSH
82599: LD_VAR 0 2
82603: NOT
82604: OR
82605: IFFALSE 82609
// exit ;
82607: GO 82704
// result := [ ] ;
82609: LD_ADDR_VAR 0 3
82613: PUSH
82614: EMPTY
82615: ST_TO_ADDR
// for un in units do
82616: LD_ADDR_VAR 0 4
82620: PUSH
82621: LD_VAR 0 1
82625: PUSH
82626: FOR_IN
82627: IFFALSE 82702
// if GetClass ( un ) = class then
82629: LD_VAR 0 4
82633: PPUSH
82634: CALL_OW 257
82638: PUSH
82639: LD_VAR 0 2
82643: EQUAL
82644: IFFALSE 82671
// result := Insert ( result , 1 , un ) else
82646: LD_ADDR_VAR 0 3
82650: PUSH
82651: LD_VAR 0 3
82655: PPUSH
82656: LD_INT 1
82658: PPUSH
82659: LD_VAR 0 4
82663: PPUSH
82664: CALL_OW 2
82668: ST_TO_ADDR
82669: GO 82700
// result := Replace ( result , result + 1 , un ) ;
82671: LD_ADDR_VAR 0 3
82675: PUSH
82676: LD_VAR 0 3
82680: PPUSH
82681: LD_VAR 0 3
82685: PUSH
82686: LD_INT 1
82688: PLUS
82689: PPUSH
82690: LD_VAR 0 4
82694: PPUSH
82695: CALL_OW 1
82699: ST_TO_ADDR
82700: GO 82626
82702: POP
82703: POP
// end ;
82704: LD_VAR 0 3
82708: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82709: LD_INT 0
82711: PPUSH
82712: PPUSH
82713: PPUSH
82714: PPUSH
82715: PPUSH
82716: PPUSH
82717: PPUSH
// result := [ ] ;
82718: LD_ADDR_VAR 0 4
82722: PUSH
82723: EMPTY
82724: ST_TO_ADDR
// if x - r < 0 then
82725: LD_VAR 0 1
82729: PUSH
82730: LD_VAR 0 3
82734: MINUS
82735: PUSH
82736: LD_INT 0
82738: LESS
82739: IFFALSE 82751
// min_x := 0 else
82741: LD_ADDR_VAR 0 8
82745: PUSH
82746: LD_INT 0
82748: ST_TO_ADDR
82749: GO 82767
// min_x := x - r ;
82751: LD_ADDR_VAR 0 8
82755: PUSH
82756: LD_VAR 0 1
82760: PUSH
82761: LD_VAR 0 3
82765: MINUS
82766: ST_TO_ADDR
// if y - r < 0 then
82767: LD_VAR 0 2
82771: PUSH
82772: LD_VAR 0 3
82776: MINUS
82777: PUSH
82778: LD_INT 0
82780: LESS
82781: IFFALSE 82793
// min_y := 0 else
82783: LD_ADDR_VAR 0 7
82787: PUSH
82788: LD_INT 0
82790: ST_TO_ADDR
82791: GO 82809
// min_y := y - r ;
82793: LD_ADDR_VAR 0 7
82797: PUSH
82798: LD_VAR 0 2
82802: PUSH
82803: LD_VAR 0 3
82807: MINUS
82808: ST_TO_ADDR
// max_x := x + r ;
82809: LD_ADDR_VAR 0 9
82813: PUSH
82814: LD_VAR 0 1
82818: PUSH
82819: LD_VAR 0 3
82823: PLUS
82824: ST_TO_ADDR
// max_y := y + r ;
82825: LD_ADDR_VAR 0 10
82829: PUSH
82830: LD_VAR 0 2
82834: PUSH
82835: LD_VAR 0 3
82839: PLUS
82840: ST_TO_ADDR
// for _x = min_x to max_x do
82841: LD_ADDR_VAR 0 5
82845: PUSH
82846: DOUBLE
82847: LD_VAR 0 8
82851: DEC
82852: ST_TO_ADDR
82853: LD_VAR 0 9
82857: PUSH
82858: FOR_TO
82859: IFFALSE 82960
// for _y = min_y to max_y do
82861: LD_ADDR_VAR 0 6
82865: PUSH
82866: DOUBLE
82867: LD_VAR 0 7
82871: DEC
82872: ST_TO_ADDR
82873: LD_VAR 0 10
82877: PUSH
82878: FOR_TO
82879: IFFALSE 82956
// begin if not ValidHex ( _x , _y ) then
82881: LD_VAR 0 5
82885: PPUSH
82886: LD_VAR 0 6
82890: PPUSH
82891: CALL_OW 488
82895: NOT
82896: IFFALSE 82900
// continue ;
82898: GO 82878
// if GetResourceTypeXY ( _x , _y ) then
82900: LD_VAR 0 5
82904: PPUSH
82905: LD_VAR 0 6
82909: PPUSH
82910: CALL_OW 283
82914: IFFALSE 82954
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82916: LD_ADDR_VAR 0 4
82920: PUSH
82921: LD_VAR 0 4
82925: PPUSH
82926: LD_VAR 0 4
82930: PUSH
82931: LD_INT 1
82933: PLUS
82934: PPUSH
82935: LD_VAR 0 5
82939: PUSH
82940: LD_VAR 0 6
82944: PUSH
82945: EMPTY
82946: LIST
82947: LIST
82948: PPUSH
82949: CALL_OW 1
82953: ST_TO_ADDR
// end ;
82954: GO 82878
82956: POP
82957: POP
82958: GO 82858
82960: POP
82961: POP
// end ;
82962: LD_VAR 0 4
82966: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82967: LD_INT 0
82969: PPUSH
82970: PPUSH
82971: PPUSH
82972: PPUSH
82973: PPUSH
82974: PPUSH
82975: PPUSH
82976: PPUSH
// if not units then
82977: LD_VAR 0 1
82981: NOT
82982: IFFALSE 82986
// exit ;
82984: GO 83510
// result := UnitFilter ( units , [ f_ok ] ) ;
82986: LD_ADDR_VAR 0 3
82990: PUSH
82991: LD_VAR 0 1
82995: PPUSH
82996: LD_INT 50
82998: PUSH
82999: EMPTY
83000: LIST
83001: PPUSH
83002: CALL_OW 72
83006: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83007: LD_ADDR_VAR 0 8
83011: PUSH
83012: LD_VAR 0 1
83016: PUSH
83017: LD_INT 1
83019: ARRAY
83020: PPUSH
83021: CALL_OW 255
83025: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83026: LD_ADDR_VAR 0 10
83030: PUSH
83031: LD_INT 29
83033: PUSH
83034: LD_INT 91
83036: PUSH
83037: LD_INT 49
83039: PUSH
83040: EMPTY
83041: LIST
83042: LIST
83043: LIST
83044: ST_TO_ADDR
// if not result then
83045: LD_VAR 0 3
83049: NOT
83050: IFFALSE 83054
// exit ;
83052: GO 83510
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83054: LD_ADDR_VAR 0 5
83058: PUSH
83059: LD_INT 81
83061: PUSH
83062: LD_VAR 0 8
83066: PUSH
83067: EMPTY
83068: LIST
83069: LIST
83070: PPUSH
83071: CALL_OW 69
83075: ST_TO_ADDR
// for i in result do
83076: LD_ADDR_VAR 0 4
83080: PUSH
83081: LD_VAR 0 3
83085: PUSH
83086: FOR_IN
83087: IFFALSE 83508
// begin tag := GetTag ( i ) + 1 ;
83089: LD_ADDR_VAR 0 9
83093: PUSH
83094: LD_VAR 0 4
83098: PPUSH
83099: CALL_OW 110
83103: PUSH
83104: LD_INT 1
83106: PLUS
83107: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83108: LD_ADDR_VAR 0 7
83112: PUSH
83113: LD_VAR 0 4
83117: PPUSH
83118: CALL_OW 250
83122: PPUSH
83123: LD_VAR 0 4
83127: PPUSH
83128: CALL_OW 251
83132: PPUSH
83133: LD_INT 6
83135: PPUSH
83136: CALL 82709 0 3
83140: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83141: LD_VAR 0 4
83145: PPUSH
83146: CALL_OW 247
83150: PUSH
83151: LD_INT 2
83153: EQUAL
83154: PUSH
83155: LD_VAR 0 7
83159: AND
83160: PUSH
83161: LD_VAR 0 4
83165: PPUSH
83166: CALL_OW 264
83170: PUSH
83171: LD_VAR 0 10
83175: IN
83176: NOT
83177: AND
83178: IFFALSE 83217
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83180: LD_VAR 0 4
83184: PPUSH
83185: LD_VAR 0 7
83189: PUSH
83190: LD_INT 1
83192: ARRAY
83193: PUSH
83194: LD_INT 1
83196: ARRAY
83197: PPUSH
83198: LD_VAR 0 7
83202: PUSH
83203: LD_INT 1
83205: ARRAY
83206: PUSH
83207: LD_INT 2
83209: ARRAY
83210: PPUSH
83211: CALL_OW 116
83215: GO 83506
// if path > tag then
83217: LD_VAR 0 2
83221: PUSH
83222: LD_VAR 0 9
83226: GREATER
83227: IFFALSE 83435
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83229: LD_ADDR_VAR 0 6
83233: PUSH
83234: LD_VAR 0 5
83238: PPUSH
83239: LD_INT 91
83241: PUSH
83242: LD_VAR 0 4
83246: PUSH
83247: LD_INT 8
83249: PUSH
83250: EMPTY
83251: LIST
83252: LIST
83253: LIST
83254: PPUSH
83255: CALL_OW 72
83259: ST_TO_ADDR
// if nearEnemy then
83260: LD_VAR 0 6
83264: IFFALSE 83333
// begin if GetWeapon ( i ) = ru_time_lapser then
83266: LD_VAR 0 4
83270: PPUSH
83271: CALL_OW 264
83275: PUSH
83276: LD_INT 49
83278: EQUAL
83279: IFFALSE 83307
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83281: LD_VAR 0 4
83285: PPUSH
83286: LD_VAR 0 6
83290: PPUSH
83291: LD_VAR 0 4
83295: PPUSH
83296: CALL_OW 74
83300: PPUSH
83301: CALL_OW 112
83305: GO 83331
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83307: LD_VAR 0 4
83311: PPUSH
83312: LD_VAR 0 6
83316: PPUSH
83317: LD_VAR 0 4
83321: PPUSH
83322: CALL_OW 74
83326: PPUSH
83327: CALL 84435 0 2
// end else
83331: GO 83433
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83333: LD_VAR 0 4
83337: PPUSH
83338: LD_VAR 0 2
83342: PUSH
83343: LD_VAR 0 9
83347: ARRAY
83348: PUSH
83349: LD_INT 1
83351: ARRAY
83352: PPUSH
83353: LD_VAR 0 2
83357: PUSH
83358: LD_VAR 0 9
83362: ARRAY
83363: PUSH
83364: LD_INT 2
83366: ARRAY
83367: PPUSH
83368: CALL_OW 297
83372: PUSH
83373: LD_INT 6
83375: GREATER
83376: IFFALSE 83419
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83378: LD_VAR 0 4
83382: PPUSH
83383: LD_VAR 0 2
83387: PUSH
83388: LD_VAR 0 9
83392: ARRAY
83393: PUSH
83394: LD_INT 1
83396: ARRAY
83397: PPUSH
83398: LD_VAR 0 2
83402: PUSH
83403: LD_VAR 0 9
83407: ARRAY
83408: PUSH
83409: LD_INT 2
83411: ARRAY
83412: PPUSH
83413: CALL_OW 114
83417: GO 83433
// SetTag ( i , tag ) ;
83419: LD_VAR 0 4
83423: PPUSH
83424: LD_VAR 0 9
83428: PPUSH
83429: CALL_OW 109
// end else
83433: GO 83506
// if enemy then
83435: LD_VAR 0 5
83439: IFFALSE 83506
// begin if GetWeapon ( i ) = ru_time_lapser then
83441: LD_VAR 0 4
83445: PPUSH
83446: CALL_OW 264
83450: PUSH
83451: LD_INT 49
83453: EQUAL
83454: IFFALSE 83482
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83456: LD_VAR 0 4
83460: PPUSH
83461: LD_VAR 0 5
83465: PPUSH
83466: LD_VAR 0 4
83470: PPUSH
83471: CALL_OW 74
83475: PPUSH
83476: CALL_OW 112
83480: GO 83506
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83482: LD_VAR 0 4
83486: PPUSH
83487: LD_VAR 0 5
83491: PPUSH
83492: LD_VAR 0 4
83496: PPUSH
83497: CALL_OW 74
83501: PPUSH
83502: CALL 84435 0 2
// end ; end ;
83506: GO 83086
83508: POP
83509: POP
// end ;
83510: LD_VAR 0 3
83514: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83515: LD_INT 0
83517: PPUSH
83518: PPUSH
83519: PPUSH
// if not unit or IsInUnit ( unit ) then
83520: LD_VAR 0 1
83524: NOT
83525: PUSH
83526: LD_VAR 0 1
83530: PPUSH
83531: CALL_OW 310
83535: OR
83536: IFFALSE 83540
// exit ;
83538: GO 83631
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83540: LD_ADDR_VAR 0 4
83544: PUSH
83545: LD_VAR 0 1
83549: PPUSH
83550: CALL_OW 250
83554: PPUSH
83555: LD_VAR 0 2
83559: PPUSH
83560: LD_INT 1
83562: PPUSH
83563: CALL_OW 272
83567: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83568: LD_ADDR_VAR 0 5
83572: PUSH
83573: LD_VAR 0 1
83577: PPUSH
83578: CALL_OW 251
83582: PPUSH
83583: LD_VAR 0 2
83587: PPUSH
83588: LD_INT 1
83590: PPUSH
83591: CALL_OW 273
83595: ST_TO_ADDR
// if ValidHex ( x , y ) then
83596: LD_VAR 0 4
83600: PPUSH
83601: LD_VAR 0 5
83605: PPUSH
83606: CALL_OW 488
83610: IFFALSE 83631
// ComTurnXY ( unit , x , y ) ;
83612: LD_VAR 0 1
83616: PPUSH
83617: LD_VAR 0 4
83621: PPUSH
83622: LD_VAR 0 5
83626: PPUSH
83627: CALL_OW 118
// end ;
83631: LD_VAR 0 3
83635: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83636: LD_INT 0
83638: PPUSH
83639: PPUSH
// result := false ;
83640: LD_ADDR_VAR 0 3
83644: PUSH
83645: LD_INT 0
83647: ST_TO_ADDR
// if not units then
83648: LD_VAR 0 2
83652: NOT
83653: IFFALSE 83657
// exit ;
83655: GO 83702
// for i in units do
83657: LD_ADDR_VAR 0 4
83661: PUSH
83662: LD_VAR 0 2
83666: PUSH
83667: FOR_IN
83668: IFFALSE 83700
// if See ( side , i ) then
83670: LD_VAR 0 1
83674: PPUSH
83675: LD_VAR 0 4
83679: PPUSH
83680: CALL_OW 292
83684: IFFALSE 83698
// begin result := true ;
83686: LD_ADDR_VAR 0 3
83690: PUSH
83691: LD_INT 1
83693: ST_TO_ADDR
// exit ;
83694: POP
83695: POP
83696: GO 83702
// end ;
83698: GO 83667
83700: POP
83701: POP
// end ;
83702: LD_VAR 0 3
83706: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83707: LD_INT 0
83709: PPUSH
83710: PPUSH
83711: PPUSH
83712: PPUSH
// if not unit or not points then
83713: LD_VAR 0 1
83717: NOT
83718: PUSH
83719: LD_VAR 0 2
83723: NOT
83724: OR
83725: IFFALSE 83729
// exit ;
83727: GO 83819
// dist := 99999 ;
83729: LD_ADDR_VAR 0 5
83733: PUSH
83734: LD_INT 99999
83736: ST_TO_ADDR
// for i in points do
83737: LD_ADDR_VAR 0 4
83741: PUSH
83742: LD_VAR 0 2
83746: PUSH
83747: FOR_IN
83748: IFFALSE 83817
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83750: LD_ADDR_VAR 0 6
83754: PUSH
83755: LD_VAR 0 1
83759: PPUSH
83760: LD_VAR 0 4
83764: PUSH
83765: LD_INT 1
83767: ARRAY
83768: PPUSH
83769: LD_VAR 0 4
83773: PUSH
83774: LD_INT 2
83776: ARRAY
83777: PPUSH
83778: CALL_OW 297
83782: ST_TO_ADDR
// if tmpDist < dist then
83783: LD_VAR 0 6
83787: PUSH
83788: LD_VAR 0 5
83792: LESS
83793: IFFALSE 83815
// begin result := i ;
83795: LD_ADDR_VAR 0 3
83799: PUSH
83800: LD_VAR 0 4
83804: ST_TO_ADDR
// dist := tmpDist ;
83805: LD_ADDR_VAR 0 5
83809: PUSH
83810: LD_VAR 0 6
83814: ST_TO_ADDR
// end ; end ;
83815: GO 83747
83817: POP
83818: POP
// end ;
83819: LD_VAR 0 3
83823: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83824: LD_INT 0
83826: PPUSH
// uc_side := side ;
83827: LD_ADDR_OWVAR 20
83831: PUSH
83832: LD_VAR 0 1
83836: ST_TO_ADDR
// uc_nation := 3 ;
83837: LD_ADDR_OWVAR 21
83841: PUSH
83842: LD_INT 3
83844: ST_TO_ADDR
// vc_chassis := 25 ;
83845: LD_ADDR_OWVAR 37
83849: PUSH
83850: LD_INT 25
83852: ST_TO_ADDR
// vc_engine := engine_siberite ;
83853: LD_ADDR_OWVAR 39
83857: PUSH
83858: LD_INT 3
83860: ST_TO_ADDR
// vc_control := control_computer ;
83861: LD_ADDR_OWVAR 38
83865: PUSH
83866: LD_INT 3
83868: ST_TO_ADDR
// vc_weapon := 59 ;
83869: LD_ADDR_OWVAR 40
83873: PUSH
83874: LD_INT 59
83876: ST_TO_ADDR
// result := CreateVehicle ;
83877: LD_ADDR_VAR 0 5
83881: PUSH
83882: CALL_OW 45
83886: ST_TO_ADDR
// SetDir ( result , d ) ;
83887: LD_VAR 0 5
83891: PPUSH
83892: LD_VAR 0 4
83896: PPUSH
83897: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83901: LD_VAR 0 5
83905: PPUSH
83906: LD_VAR 0 2
83910: PPUSH
83911: LD_VAR 0 3
83915: PPUSH
83916: LD_INT 0
83918: PPUSH
83919: CALL_OW 48
// end ;
83923: LD_VAR 0 5
83927: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83928: LD_INT 0
83930: PPUSH
83931: PPUSH
83932: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83933: LD_ADDR_VAR 0 2
83937: PUSH
83938: LD_INT 0
83940: PUSH
83941: LD_INT 0
83943: PUSH
83944: LD_INT 0
83946: PUSH
83947: LD_INT 0
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: LIST
83954: LIST
83955: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83956: LD_VAR 0 1
83960: NOT
83961: PUSH
83962: LD_VAR 0 1
83966: PPUSH
83967: CALL_OW 264
83971: PUSH
83972: LD_INT 12
83974: PUSH
83975: LD_INT 51
83977: PUSH
83978: LD_INT 32
83980: PUSH
83981: LD_INT 89
83983: PUSH
83984: EMPTY
83985: LIST
83986: LIST
83987: LIST
83988: LIST
83989: IN
83990: NOT
83991: OR
83992: IFFALSE 83996
// exit ;
83994: GO 84094
// for i := 1 to 3 do
83996: LD_ADDR_VAR 0 3
84000: PUSH
84001: DOUBLE
84002: LD_INT 1
84004: DEC
84005: ST_TO_ADDR
84006: LD_INT 3
84008: PUSH
84009: FOR_TO
84010: IFFALSE 84092
// begin tmp := GetCargo ( cargo , i ) ;
84012: LD_ADDR_VAR 0 4
84016: PUSH
84017: LD_VAR 0 1
84021: PPUSH
84022: LD_VAR 0 3
84026: PPUSH
84027: CALL_OW 289
84031: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84032: LD_ADDR_VAR 0 2
84036: PUSH
84037: LD_VAR 0 2
84041: PPUSH
84042: LD_VAR 0 3
84046: PPUSH
84047: LD_VAR 0 4
84051: PPUSH
84052: CALL_OW 1
84056: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84057: LD_ADDR_VAR 0 2
84061: PUSH
84062: LD_VAR 0 2
84066: PPUSH
84067: LD_INT 4
84069: PPUSH
84070: LD_VAR 0 2
84074: PUSH
84075: LD_INT 4
84077: ARRAY
84078: PUSH
84079: LD_VAR 0 4
84083: PLUS
84084: PPUSH
84085: CALL_OW 1
84089: ST_TO_ADDR
// end ;
84090: GO 84009
84092: POP
84093: POP
// end ;
84094: LD_VAR 0 2
84098: RET
// export function Length ( array ) ; begin
84099: LD_INT 0
84101: PPUSH
// result := array + 0 ;
84102: LD_ADDR_VAR 0 2
84106: PUSH
84107: LD_VAR 0 1
84111: PUSH
84112: LD_INT 0
84114: PLUS
84115: ST_TO_ADDR
// end ;
84116: LD_VAR 0 2
84120: RET
// export function PrepareArray ( array ) ; begin
84121: LD_INT 0
84123: PPUSH
// result := array diff 0 ;
84124: LD_ADDR_VAR 0 2
84128: PUSH
84129: LD_VAR 0 1
84133: PUSH
84134: LD_INT 0
84136: DIFF
84137: ST_TO_ADDR
// if not result [ 1 ] then
84138: LD_VAR 0 2
84142: PUSH
84143: LD_INT 1
84145: ARRAY
84146: NOT
84147: IFFALSE 84167
// result := Delete ( result , 1 ) ;
84149: LD_ADDR_VAR 0 2
84153: PUSH
84154: LD_VAR 0 2
84158: PPUSH
84159: LD_INT 1
84161: PPUSH
84162: CALL_OW 3
84166: ST_TO_ADDR
// end ;
84167: LD_VAR 0 2
84171: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84172: LD_INT 0
84174: PPUSH
84175: PPUSH
84176: PPUSH
84177: PPUSH
// sibRocketRange := 25 ;
84178: LD_ADDR_VAR 0 6
84182: PUSH
84183: LD_INT 25
84185: ST_TO_ADDR
// result := false ;
84186: LD_ADDR_VAR 0 4
84190: PUSH
84191: LD_INT 0
84193: ST_TO_ADDR
// for i := 0 to 5 do
84194: LD_ADDR_VAR 0 5
84198: PUSH
84199: DOUBLE
84200: LD_INT 0
84202: DEC
84203: ST_TO_ADDR
84204: LD_INT 5
84206: PUSH
84207: FOR_TO
84208: IFFALSE 84275
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84210: LD_VAR 0 1
84214: PPUSH
84215: LD_VAR 0 5
84219: PPUSH
84220: LD_VAR 0 6
84224: PPUSH
84225: CALL_OW 272
84229: PPUSH
84230: LD_VAR 0 2
84234: PPUSH
84235: LD_VAR 0 5
84239: PPUSH
84240: LD_VAR 0 6
84244: PPUSH
84245: CALL_OW 273
84249: PPUSH
84250: LD_VAR 0 3
84254: PPUSH
84255: CALL_OW 309
84259: IFFALSE 84273
// begin result := true ;
84261: LD_ADDR_VAR 0 4
84265: PUSH
84266: LD_INT 1
84268: ST_TO_ADDR
// exit ;
84269: POP
84270: POP
84271: GO 84277
// end ;
84273: GO 84207
84275: POP
84276: POP
// end ;
84277: LD_VAR 0 4
84281: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84282: LD_INT 0
84284: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84285: LD_VAR 0 1
84289: PPUSH
84290: LD_VAR 0 2
84294: PPUSH
84295: LD_INT 0
84297: PPUSH
84298: LD_INT 0
84300: PPUSH
84301: LD_INT 1
84303: PPUSH
84304: LD_INT 0
84306: PPUSH
84307: CALL_OW 587
// end ;
84311: LD_VAR 0 3
84315: RET
// export function CenterOnNow ( unit ) ; begin
84316: LD_INT 0
84318: PPUSH
// result := IsInUnit ( unit ) ;
84319: LD_ADDR_VAR 0 2
84323: PUSH
84324: LD_VAR 0 1
84328: PPUSH
84329: CALL_OW 310
84333: ST_TO_ADDR
// if not result then
84334: LD_VAR 0 2
84338: NOT
84339: IFFALSE 84351
// result := unit ;
84341: LD_ADDR_VAR 0 2
84345: PUSH
84346: LD_VAR 0 1
84350: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84351: LD_VAR 0 1
84355: PPUSH
84356: CALL_OW 87
// end ;
84360: LD_VAR 0 2
84364: RET
// export function ComMoveHex ( unit , hex ) ; begin
84365: LD_INT 0
84367: PPUSH
// if not hex then
84368: LD_VAR 0 2
84372: NOT
84373: IFFALSE 84377
// exit ;
84375: GO 84430
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84377: LD_VAR 0 2
84381: PUSH
84382: LD_INT 1
84384: ARRAY
84385: PPUSH
84386: LD_VAR 0 2
84390: PUSH
84391: LD_INT 2
84393: ARRAY
84394: PPUSH
84395: CALL_OW 428
84399: IFFALSE 84403
// exit ;
84401: GO 84430
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84403: LD_VAR 0 1
84407: PPUSH
84408: LD_VAR 0 2
84412: PUSH
84413: LD_INT 1
84415: ARRAY
84416: PPUSH
84417: LD_VAR 0 2
84421: PUSH
84422: LD_INT 2
84424: ARRAY
84425: PPUSH
84426: CALL_OW 111
// end ;
84430: LD_VAR 0 3
84434: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84435: LD_INT 0
84437: PPUSH
84438: PPUSH
84439: PPUSH
// if not unit or not enemy then
84440: LD_VAR 0 1
84444: NOT
84445: PUSH
84446: LD_VAR 0 2
84450: NOT
84451: OR
84452: IFFALSE 84456
// exit ;
84454: GO 84580
// x := GetX ( enemy ) ;
84456: LD_ADDR_VAR 0 4
84460: PUSH
84461: LD_VAR 0 2
84465: PPUSH
84466: CALL_OW 250
84470: ST_TO_ADDR
// y := GetY ( enemy ) ;
84471: LD_ADDR_VAR 0 5
84475: PUSH
84476: LD_VAR 0 2
84480: PPUSH
84481: CALL_OW 251
84485: ST_TO_ADDR
// if ValidHex ( x , y ) then
84486: LD_VAR 0 4
84490: PPUSH
84491: LD_VAR 0 5
84495: PPUSH
84496: CALL_OW 488
84500: IFFALSE 84580
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
84502: LD_VAR 0 2
84506: PPUSH
84507: CALL_OW 247
84511: PUSH
84512: LD_INT 3
84514: PUSH
84515: LD_INT 2
84517: PUSH
84518: EMPTY
84519: LIST
84520: LIST
84521: IN
84522: PUSH
84523: LD_VAR 0 1
84527: PPUSH
84528: CALL_OW 255
84532: PPUSH
84533: LD_VAR 0 2
84537: PPUSH
84538: CALL_OW 292
84542: AND
84543: IFFALSE 84561
// ComAttackUnit ( unit , enemy ) else
84545: LD_VAR 0 1
84549: PPUSH
84550: LD_VAR 0 2
84554: PPUSH
84555: CALL_OW 115
84559: GO 84580
// ComAgressiveMove ( unit , x , y ) ;
84561: LD_VAR 0 1
84565: PPUSH
84566: LD_VAR 0 4
84570: PPUSH
84571: LD_VAR 0 5
84575: PPUSH
84576: CALL_OW 114
// end ;
84580: LD_VAR 0 3
84584: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84585: LD_INT 0
84587: PPUSH
84588: PPUSH
84589: PPUSH
// list := AreaToList ( area , 0 ) ;
84590: LD_ADDR_VAR 0 5
84594: PUSH
84595: LD_VAR 0 1
84599: PPUSH
84600: LD_INT 0
84602: PPUSH
84603: CALL_OW 517
84607: ST_TO_ADDR
// if not list then
84608: LD_VAR 0 5
84612: NOT
84613: IFFALSE 84617
// exit ;
84615: GO 84747
// if all then
84617: LD_VAR 0 2
84621: IFFALSE 84709
// begin for i := 1 to list [ 1 ] do
84623: LD_ADDR_VAR 0 4
84627: PUSH
84628: DOUBLE
84629: LD_INT 1
84631: DEC
84632: ST_TO_ADDR
84633: LD_VAR 0 5
84637: PUSH
84638: LD_INT 1
84640: ARRAY
84641: PUSH
84642: FOR_TO
84643: IFFALSE 84705
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84645: LD_ADDR_VAR 0 3
84649: PUSH
84650: LD_VAR 0 3
84654: PPUSH
84655: LD_VAR 0 3
84659: PUSH
84660: LD_INT 1
84662: PLUS
84663: PPUSH
84664: LD_VAR 0 5
84668: PUSH
84669: LD_INT 1
84671: ARRAY
84672: PUSH
84673: LD_VAR 0 4
84677: ARRAY
84678: PUSH
84679: LD_VAR 0 5
84683: PUSH
84684: LD_INT 2
84686: ARRAY
84687: PUSH
84688: LD_VAR 0 4
84692: ARRAY
84693: PUSH
84694: EMPTY
84695: LIST
84696: LIST
84697: PPUSH
84698: CALL_OW 1
84702: ST_TO_ADDR
84703: GO 84642
84705: POP
84706: POP
// exit ;
84707: GO 84747
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84709: LD_ADDR_VAR 0 3
84713: PUSH
84714: LD_VAR 0 5
84718: PUSH
84719: LD_INT 1
84721: ARRAY
84722: PUSH
84723: LD_INT 1
84725: ARRAY
84726: PUSH
84727: LD_VAR 0 5
84731: PUSH
84732: LD_INT 2
84734: ARRAY
84735: PUSH
84736: LD_INT 1
84738: ARRAY
84739: PUSH
84740: EMPTY
84741: LIST
84742: LIST
84743: PUSH
84744: EMPTY
84745: LIST
84746: ST_TO_ADDR
// end ;
84747: LD_VAR 0 3
84751: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84752: LD_INT 0
84754: PPUSH
84755: PPUSH
// list := AreaToList ( area , 0 ) ;
84756: LD_ADDR_VAR 0 4
84760: PUSH
84761: LD_VAR 0 1
84765: PPUSH
84766: LD_INT 0
84768: PPUSH
84769: CALL_OW 517
84773: ST_TO_ADDR
// if not list then
84774: LD_VAR 0 4
84778: NOT
84779: IFFALSE 84783
// exit ;
84781: GO 84824
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84783: LD_ADDR_VAR 0 3
84787: PUSH
84788: LD_VAR 0 4
84792: PUSH
84793: LD_INT 1
84795: ARRAY
84796: PUSH
84797: LD_INT 1
84799: ARRAY
84800: PUSH
84801: LD_VAR 0 4
84805: PUSH
84806: LD_INT 2
84808: ARRAY
84809: PUSH
84810: LD_INT 1
84812: ARRAY
84813: PUSH
84814: LD_VAR 0 2
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: LIST
84823: ST_TO_ADDR
// end ;
84824: LD_VAR 0 3
84828: RET
// export function First ( array ) ; begin
84829: LD_INT 0
84831: PPUSH
// if not array then
84832: LD_VAR 0 1
84836: NOT
84837: IFFALSE 84841
// exit ;
84839: GO 84855
// result := array [ 1 ] ;
84841: LD_ADDR_VAR 0 2
84845: PUSH
84846: LD_VAR 0 1
84850: PUSH
84851: LD_INT 1
84853: ARRAY
84854: ST_TO_ADDR
// end ;
84855: LD_VAR 0 2
84859: RET
// export function Last ( array ) ; begin
84860: LD_INT 0
84862: PPUSH
// if not array then
84863: LD_VAR 0 1
84867: NOT
84868: IFFALSE 84872
// exit ;
84870: GO 84888
// result := array [ array ] ;
84872: LD_ADDR_VAR 0 2
84876: PUSH
84877: LD_VAR 0 1
84881: PUSH
84882: LD_VAR 0 1
84886: ARRAY
84887: ST_TO_ADDR
// end ;
84888: LD_VAR 0 2
84892: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84893: LD_INT 0
84895: PPUSH
84896: PPUSH
// result := [ ] ;
84897: LD_ADDR_VAR 0 5
84901: PUSH
84902: EMPTY
84903: ST_TO_ADDR
// if not array then
84904: LD_VAR 0 1
84908: NOT
84909: IFFALSE 84913
// exit ;
84911: GO 85025
// for i := 1 to array do
84913: LD_ADDR_VAR 0 6
84917: PUSH
84918: DOUBLE
84919: LD_INT 1
84921: DEC
84922: ST_TO_ADDR
84923: LD_VAR 0 1
84927: PUSH
84928: FOR_TO
84929: IFFALSE 85023
// if array [ i ] [ index ] = value then
84931: LD_VAR 0 1
84935: PUSH
84936: LD_VAR 0 6
84940: ARRAY
84941: PUSH
84942: LD_VAR 0 2
84946: ARRAY
84947: PUSH
84948: LD_VAR 0 3
84952: EQUAL
84953: IFFALSE 85021
// begin if indexColumn then
84955: LD_VAR 0 4
84959: IFFALSE 84995
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84961: LD_ADDR_VAR 0 5
84965: PUSH
84966: LD_VAR 0 5
84970: PPUSH
84971: LD_VAR 0 1
84975: PUSH
84976: LD_VAR 0 6
84980: ARRAY
84981: PUSH
84982: LD_VAR 0 4
84986: ARRAY
84987: PPUSH
84988: CALL 80363 0 2
84992: ST_TO_ADDR
84993: GO 85021
// result := Join ( result , array [ i ] ) ;
84995: LD_ADDR_VAR 0 5
84999: PUSH
85000: LD_VAR 0 5
85004: PPUSH
85005: LD_VAR 0 1
85009: PUSH
85010: LD_VAR 0 6
85014: ARRAY
85015: PPUSH
85016: CALL 80363 0 2
85020: ST_TO_ADDR
// end ;
85021: GO 84928
85023: POP
85024: POP
// end ;
85025: LD_VAR 0 5
85029: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85030: LD_INT 0
85032: PPUSH
85033: PPUSH
85034: PPUSH
// if btype = b_depot then
85035: LD_VAR 0 2
85039: PUSH
85040: LD_INT 0
85042: EQUAL
85043: IFFALSE 85055
// begin result := true ;
85045: LD_ADDR_VAR 0 3
85049: PUSH
85050: LD_INT 1
85052: ST_TO_ADDR
// exit ;
85053: GO 85171
// end ; pom := GetBase ( depot ) ;
85055: LD_ADDR_VAR 0 4
85059: PUSH
85060: LD_VAR 0 1
85064: PPUSH
85065: CALL_OW 274
85069: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85070: LD_ADDR_VAR 0 5
85074: PUSH
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_VAR 0 1
85084: PPUSH
85085: CALL_OW 248
85089: PPUSH
85090: CALL_OW 450
85094: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85095: LD_ADDR_VAR 0 3
85099: PUSH
85100: LD_VAR 0 4
85104: PPUSH
85105: LD_INT 1
85107: PPUSH
85108: CALL_OW 275
85112: PUSH
85113: LD_VAR 0 5
85117: PUSH
85118: LD_INT 1
85120: ARRAY
85121: GREATEREQUAL
85122: PUSH
85123: LD_VAR 0 4
85127: PPUSH
85128: LD_INT 2
85130: PPUSH
85131: CALL_OW 275
85135: PUSH
85136: LD_VAR 0 5
85140: PUSH
85141: LD_INT 2
85143: ARRAY
85144: GREATEREQUAL
85145: AND
85146: PUSH
85147: LD_VAR 0 4
85151: PPUSH
85152: LD_INT 3
85154: PPUSH
85155: CALL_OW 275
85159: PUSH
85160: LD_VAR 0 5
85164: PUSH
85165: LD_INT 3
85167: ARRAY
85168: GREATEREQUAL
85169: AND
85170: ST_TO_ADDR
// end ;
85171: LD_VAR 0 3
85175: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85176: LD_INT 0
85178: PPUSH
// if not vehicles or not parkingPoint then
85179: LD_VAR 0 1
85183: NOT
85184: PUSH
85185: LD_VAR 0 2
85189: NOT
85190: OR
85191: IFFALSE 85195
// exit ;
85193: GO 85293
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85195: LD_ADDR_VAR 0 1
85199: PUSH
85200: LD_VAR 0 1
85204: PPUSH
85205: LD_INT 50
85207: PUSH
85208: EMPTY
85209: LIST
85210: PUSH
85211: LD_INT 3
85213: PUSH
85214: LD_INT 92
85216: PUSH
85217: LD_VAR 0 2
85221: PUSH
85222: LD_INT 1
85224: ARRAY
85225: PUSH
85226: LD_VAR 0 2
85230: PUSH
85231: LD_INT 2
85233: ARRAY
85234: PUSH
85235: LD_INT 8
85237: PUSH
85238: EMPTY
85239: LIST
85240: LIST
85241: LIST
85242: LIST
85243: PUSH
85244: EMPTY
85245: LIST
85246: LIST
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PPUSH
85252: CALL_OW 72
85256: ST_TO_ADDR
// if not vehicles then
85257: LD_VAR 0 1
85261: NOT
85262: IFFALSE 85266
// exit ;
85264: GO 85293
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85266: LD_VAR 0 1
85270: PPUSH
85271: LD_VAR 0 2
85275: PUSH
85276: LD_INT 1
85278: ARRAY
85279: PPUSH
85280: LD_VAR 0 2
85284: PUSH
85285: LD_INT 2
85287: ARRAY
85288: PPUSH
85289: CALL_OW 111
// end ; end_of_file
85293: LD_VAR 0 3
85297: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85298: LD_VAR 0 1
85302: PUSH
85303: LD_INT 200
85305: DOUBLE
85306: GREATEREQUAL
85307: IFFALSE 85315
85309: LD_INT 299
85311: DOUBLE
85312: LESSEQUAL
85313: IFTRUE 85317
85315: GO 85349
85317: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85318: LD_VAR 0 1
85322: PPUSH
85323: LD_VAR 0 2
85327: PPUSH
85328: LD_VAR 0 3
85332: PPUSH
85333: LD_VAR 0 4
85337: PPUSH
85338: LD_VAR 0 5
85342: PPUSH
85343: CALL 38154 0 5
85347: GO 85426
85349: LD_INT 300
85351: DOUBLE
85352: GREATEREQUAL
85353: IFFALSE 85361
85355: LD_INT 399
85357: DOUBLE
85358: LESSEQUAL
85359: IFTRUE 85363
85361: GO 85425
85363: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85364: LD_VAR 0 1
85368: PPUSH
85369: LD_VAR 0 2
85373: PPUSH
85374: LD_VAR 0 3
85378: PPUSH
85379: LD_VAR 0 4
85383: PPUSH
85384: LD_VAR 0 5
85388: PPUSH
85389: LD_VAR 0 6
85393: PPUSH
85394: LD_VAR 0 7
85398: PPUSH
85399: LD_VAR 0 8
85403: PPUSH
85404: LD_VAR 0 9
85408: PPUSH
85409: LD_VAR 0 10
85413: PPUSH
85414: LD_VAR 0 11
85418: PPUSH
85419: CALL 34479 0 11
85423: GO 85426
85425: POP
// end ;
85426: PPOPN 11
85428: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85429: LD_VAR 0 1
85433: PPUSH
85434: LD_VAR 0 2
85438: PPUSH
85439: LD_VAR 0 3
85443: PPUSH
85444: LD_VAR 0 4
85448: PPUSH
85449: LD_VAR 0 5
85453: PPUSH
85454: CALL 37890 0 5
// end ; end_of_file
85458: PPOPN 5
85460: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85461: LD_VAR 0 1
85465: PPUSH
85466: LD_VAR 0 2
85470: PPUSH
85471: LD_VAR 0 3
85475: PPUSH
85476: LD_VAR 0 4
85480: PPUSH
85481: LD_VAR 0 5
85485: PPUSH
85486: LD_VAR 0 6
85490: PPUSH
85491: CALL 22131 0 6
// end ;
85495: PPOPN 6
85497: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85498: LD_INT 0
85500: PPUSH
// begin if not units then
85501: LD_VAR 0 1
85505: NOT
85506: IFFALSE 85510
// exit ;
85508: GO 85510
// end ;
85510: PPOPN 7
85512: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85513: CALL 22035 0 0
// end ;
85517: PPOPN 1
85519: END
