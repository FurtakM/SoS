// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6589 0 0
// PrepareNature ;
 290: CALL 23883 0 0
// PrepareRussian ;
 294: CALL 5749 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6151 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6151 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6151 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6151 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6151 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6151 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6151 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6151 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6151 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6151 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 6151 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// if not number or number > 8 then
4056: LD_VAR 0 1
4060: NOT
4061: PUSH
4062: LD_VAR 0 1
4066: PUSH
4067: LD_INT 8
4069: GREATER
4070: OR
4071: IFFALSE 4075
// exit ;
4073: GO 5644
// repeat wait ( 0 0$7 ) ;
4075: LD_INT 245
4077: PPUSH
4078: CALL_OW 67
// until blockSpawn = 0 ;
4082: LD_EXP 29
4086: PUSH
4087: LD_INT 0
4089: EQUAL
4090: IFFALSE 4075
// uc_side = 1 ;
4092: LD_ADDR_OWVAR 20
4096: PUSH
4097: LD_INT 1
4099: ST_TO_ADDR
// uc_nation = 1 ;
4100: LD_ADDR_OWVAR 21
4104: PUSH
4105: LD_INT 1
4107: ST_TO_ADDR
// InitHc ;
4108: CALL_OW 19
// if number = 1 then
4112: LD_VAR 0 1
4116: PUSH
4117: LD_INT 1
4119: EQUAL
4120: IFFALSE 4296
// begin hc_class := 3 ;
4122: LD_ADDR_OWVAR 28
4126: PUSH
4127: LD_INT 3
4129: ST_TO_ADDR
// hc_sex := sex_male ;
4130: LD_ADDR_OWVAR 27
4134: PUSH
4135: LD_INT 1
4137: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING SecondCharsGal
4145: ST_TO_ADDR
// hc_face_number := 55 ;
4146: LD_ADDR_OWVAR 34
4150: PUSH
4151: LD_INT 55
4153: ST_TO_ADDR
// hc_name := George McCarthy ;
4154: LD_ADDR_OWVAR 26
4158: PUSH
4159: LD_STRING George McCarthy
4161: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4162: LD_ADDR_OWVAR 29
4166: PUSH
4167: LD_INT 11
4169: PUSH
4170: LD_INT 10
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4177: LD_ADDR_OWVAR 30
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4200: LD_ADDR_OWVAR 31
4204: PUSH
4205: LD_INT 1
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: ST_TO_ADDR
// un = CreateHuman ;
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: CALL_OW 44
4232: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 23
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 87
// wait ( 0 0$1 ) ;
4257: LD_INT 35
4259: PPUSH
4260: CALL_OW 67
// DialogueOn ;
4264: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_STRING D11d-Sol4-1
4275: PPUSH
4276: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4280: LD_EXP 1
4284: PPUSH
4285: LD_STRING D11d-JMM-1
4287: PPUSH
4288: CALL_OW 88
// DialogueOff ;
4292: CALL_OW 7
// end ; if number = 2 then
4296: LD_VAR 0 1
4300: PUSH
4301: LD_INT 2
4303: EQUAL
4304: IFFALSE 4480
// begin hc_class := 1 ;
4306: LD_ADDR_OWVAR 28
4310: PUSH
4311: LD_INT 1
4313: ST_TO_ADDR
// hc_sex := sex_male ;
4314: LD_ADDR_OWVAR 27
4318: PUSH
4319: LD_INT 1
4321: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4322: LD_ADDR_OWVAR 33
4326: PUSH
4327: LD_STRING AmGalRemake
4329: ST_TO_ADDR
// hc_face_number := 7 ;
4330: LD_ADDR_OWVAR 34
4334: PUSH
4335: LD_INT 7
4337: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4338: LD_ADDR_OWVAR 26
4342: PUSH
4343: LD_STRING Bobby Jordan
4345: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4346: LD_ADDR_OWVAR 29
4350: PUSH
4351: LD_INT 9
4353: PUSH
4354: LD_INT 11
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4361: LD_ADDR_OWVAR 30
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: LD_INT 0
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4384: LD_ADDR_OWVAR 31
4388: PUSH
4389: LD_INT 2
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: ST_TO_ADDR
// un = CreateHuman ;
4407: LD_ADDR_VAR 0 3
4411: PUSH
4412: CALL_OW 44
4416: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4417: LD_VAR 0 3
4421: PPUSH
4422: LD_INT 24
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL_OW 49
// wait ( 0 0$1 ) ;
4432: LD_INT 35
4434: PPUSH
4435: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: CALL_OW 87
// DialogueOn ;
4448: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4452: LD_VAR 0 3
4456: PPUSH
4457: LD_STRING D11b-Sol3-1
4459: PPUSH
4460: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4464: LD_EXP 1
4468: PPUSH
4469: LD_STRING D11b-JMM-1
4471: PPUSH
4472: CALL_OW 88
// DialogueOff ;
4476: CALL_OW 7
// end ; if number = 3 then
4480: LD_VAR 0 1
4484: PUSH
4485: LD_INT 3
4487: EQUAL
4488: IFFALSE 4652
// begin hc_class := 1 ;
4490: LD_ADDR_OWVAR 28
4494: PUSH
4495: LD_INT 1
4497: ST_TO_ADDR
// hc_sex := sex_male ;
4498: LD_ADDR_OWVAR 27
4502: PUSH
4503: LD_INT 1
4505: ST_TO_ADDR
// hc_gallery := DJ ;
4506: LD_ADDR_OWVAR 33
4510: PUSH
4511: LD_STRING DJ
4513: ST_TO_ADDR
// hc_face_number := 1 ;
4514: LD_ADDR_OWVAR 34
4518: PUSH
4519: LD_INT 1
4521: ST_TO_ADDR
// hc_name := Darius Dajay ;
4522: LD_ADDR_OWVAR 26
4526: PUSH
4527: LD_STRING Darius Dajay
4529: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4530: LD_ADDR_OWVAR 29
4534: PUSH
4535: LD_INT 11
4537: PUSH
4538: LD_INT 11
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4545: LD_ADDR_OWVAR 30
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 0
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4568: LD_ADDR_OWVAR 31
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: LD_INT 0
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: ST_TO_ADDR
// un = CreateHuman ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: CALL_OW 44
4600: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_INT 25
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: CALL_OW 87
// wait ( 0 0$1 ) ;
4625: LD_INT 35
4627: PPUSH
4628: CALL_OW 67
// DialogueOn ;
4632: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4636: LD_VAR 0 3
4640: PPUSH
4641: LD_STRING D11f-Sol5-1
4643: PPUSH
4644: CALL_OW 88
// DialogueOff ;
4648: CALL_OW 7
// end ; if number = 4 then
4652: LD_VAR 0 1
4656: PUSH
4657: LD_INT 4
4659: EQUAL
4660: IFFALSE 4824
// begin hc_class := 3 ;
4662: LD_ADDR_OWVAR 28
4666: PUSH
4667: LD_INT 3
4669: ST_TO_ADDR
// hc_sex := sex_female ;
4670: LD_ADDR_OWVAR 27
4674: PUSH
4675: LD_INT 2
4677: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4678: LD_ADDR_OWVAR 33
4682: PUSH
4683: LD_STRING SecondCharsGal
4685: ST_TO_ADDR
// hc_face_number := 46 ;
4686: LD_ADDR_OWVAR 34
4690: PUSH
4691: LD_INT 46
4693: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4694: LD_ADDR_OWVAR 26
4698: PUSH
4699: LD_STRING Sylvia Creak
4701: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4702: LD_ADDR_OWVAR 29
4706: PUSH
4707: LD_INT 10
4709: PUSH
4710: LD_INT 9
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4717: LD_ADDR_OWVAR 30
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 1
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4740: LD_ADDR_OWVAR 31
4744: PUSH
4745: LD_INT 1
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: ST_TO_ADDR
// un = CreateHuman ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: CALL_OW 44
4772: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4773: LD_VAR 0 3
4777: PPUSH
4778: LD_INT 26
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$1 ) ;
4797: LD_INT 35
4799: PPUSH
4800: CALL_OW 67
// DialogueOn ;
4804: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_STRING D11e-FSol4-1
4815: PPUSH
4816: CALL_OW 88
// DialogueOff ;
4820: CALL_OW 7
// end ; if number = 5 then
4824: LD_VAR 0 1
4828: PUSH
4829: LD_INT 5
4831: EQUAL
4832: IFFALSE 5008
// begin hc_class := 1 ;
4834: LD_ADDR_OWVAR 28
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// hc_sex := sex_female ;
4842: LD_ADDR_OWVAR 27
4846: PUSH
4847: LD_INT 2
4849: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4850: LD_ADDR_OWVAR 33
4854: PUSH
4855: LD_STRING SecondCharsGal
4857: ST_TO_ADDR
// hc_face_number := 37 ;
4858: LD_ADDR_OWVAR 34
4862: PUSH
4863: LD_INT 37
4865: ST_TO_ADDR
// hc_name := Malena Johnson ;
4866: LD_ADDR_OWVAR 26
4870: PUSH
4871: LD_STRING Malena Johnson
4873: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4874: LD_ADDR_OWVAR 29
4878: PUSH
4879: LD_INT 11
4881: PUSH
4882: LD_INT 10
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4889: LD_ADDR_OWVAR 30
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: LD_INT 1
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4912: LD_ADDR_OWVAR 31
4916: PUSH
4917: LD_INT 1
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 1
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: ST_TO_ADDR
// un = CreateHuman ;
4935: LD_ADDR_VAR 0 3
4939: PUSH
4940: CALL_OW 44
4944: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4945: LD_VAR 0 3
4949: PPUSH
4950: LD_INT 27
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 87
// wait ( 0 0$1 ) ;
4969: LD_INT 35
4971: PPUSH
4972: CALL_OW 67
// DialogueOn ;
4976: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_STRING D11c-FSol3-1
4987: PPUSH
4988: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4992: LD_EXP 1
4996: PPUSH
4997: LD_STRING D11c-JMM-1
4999: PPUSH
5000: CALL_OW 88
// DialogueOff ;
5004: CALL_OW 7
// end ; if number = 6 then
5008: LD_VAR 0 1
5012: PUSH
5013: LD_INT 6
5015: EQUAL
5016: IFFALSE 5190
// begin hc_class := 1 ;
5018: LD_ADDR_OWVAR 28
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// hc_sex := sex_male ;
5026: LD_ADDR_OWVAR 27
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5034: LD_ADDR_OWVAR 33
5038: PUSH
5039: LD_STRING AmGalRemake
5041: ST_TO_ADDR
// hc_face_number := 1 ;
5042: LD_ADDR_OWVAR 34
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// hc_name := Charles Brown ;
5050: LD_ADDR_OWVAR 26
5054: PUSH
5055: LD_STRING Charles Brown
5057: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5058: LD_ADDR_OWVAR 29
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 11
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5073: LD_ADDR_OWVAR 30
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: LD_INT 0
5083: PUSH
5084: LD_INT 0
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5096: LD_ADDR_OWVAR 31
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 0
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// un = CreateHuman ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: CALL_OW 44
5128: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5129: LD_VAR 0 3
5133: PPUSH
5134: LD_INT 28
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5144: LD_VAR 0 3
5148: PPUSH
5149: CALL_OW 87
// wait ( 0 0$1 ) ;
5153: LD_INT 35
5155: PPUSH
5156: CALL_OW 67
// DialogueOn ;
5160: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5164: LD_VAR 0 3
5168: PPUSH
5169: LD_STRING D4-Sol1-5
5171: PPUSH
5172: CALL_OW 88
// DialogueOff ;
5176: CALL_OW 7
// tempCharles = un ;
5180: LD_ADDR_EXP 13
5184: PUSH
5185: LD_VAR 0 3
5189: ST_TO_ADDR
// end ; if number = 7 then
5190: LD_VAR 0 1
5194: PUSH
5195: LD_INT 7
5197: EQUAL
5198: IFFALSE 5448
// begin hc_class := 1 ;
5200: LD_ADDR_OWVAR 28
5204: PUSH
5205: LD_INT 1
5207: ST_TO_ADDR
// hc_sex := sex_female ;
5208: LD_ADDR_OWVAR 27
5212: PUSH
5213: LD_INT 2
5215: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5216: LD_ADDR_OWVAR 33
5220: PUSH
5221: LD_STRING AmGalRemake
5223: ST_TO_ADDR
// hc_face_number := 2 ;
5224: LD_ADDR_OWVAR 34
5228: PUSH
5229: LD_INT 2
5231: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5232: LD_ADDR_OWVAR 26
5236: PUSH
5237: LD_STRING Rebecca Macdonald
5239: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5240: LD_ADDR_OWVAR 29
5244: PUSH
5245: LD_INT 10
5247: PUSH
5248: LD_INT 10
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5255: LD_ADDR_OWVAR 30
5259: PUSH
5260: LD_INT 1
5262: PUSH
5263: LD_INT 0
5265: PUSH
5266: LD_INT 0
5268: PUSH
5269: LD_INT 1
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5278: LD_ADDR_OWVAR 31
5282: PUSH
5283: LD_INT 1
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: LD_INT 1
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: ST_TO_ADDR
// un = CreateHuman ;
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: CALL_OW 44
5310: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_INT 29
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5326: LD_VAR 0 3
5330: PPUSH
5331: CALL_OW 87
// wait ( 0 0$1 ) ;
5335: LD_INT 35
5337: PPUSH
5338: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5342: LD_INT 30
5344: PPUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 3
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PPUSH
5355: CALL_OW 70
5359: IFFALSE 5448
// begin DialogueOn ;
5361: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5365: LD_VAR 0 3
5369: PPUSH
5370: CALL_OW 250
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: CALL_OW 251
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: LD_INT 15
5390: NEG
5391: PPUSH
5392: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5396: LD_VAR 0 3
5400: PPUSH
5401: CALL_OW 250
5405: PPUSH
5406: LD_VAR 0 3
5410: PPUSH
5411: CALL_OW 251
5415: PPUSH
5416: LD_INT 1
5418: PPUSH
5419: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_STRING D11a-FSol2-1
5430: PPUSH
5431: CALL_OW 88
// ComCrawl ( un ) ;
5435: LD_VAR 0 3
5439: PPUSH
5440: CALL_OW 137
// DialogueOff ;
5444: CALL_OW 7
// end ; end ; if number = 8 then
5448: LD_VAR 0 1
5452: PUSH
5453: LD_INT 8
5455: EQUAL
5456: IFFALSE 5612
// begin hc_class := 1 ;
5458: LD_ADDR_OWVAR 28
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// hc_sex := sex_female ;
5466: LD_ADDR_OWVAR 27
5470: PUSH
5471: LD_INT 2
5473: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5474: LD_ADDR_OWVAR 33
5478: PUSH
5479: LD_STRING SecondCharsGal
5481: ST_TO_ADDR
// hc_face_number := 42 ;
5482: LD_ADDR_OWVAR 34
5486: PUSH
5487: LD_INT 42
5489: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5490: LD_ADDR_OWVAR 26
5494: PUSH
5495: LD_STRING Margherite Simpson
5497: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5498: LD_ADDR_OWVAR 29
5502: PUSH
5503: LD_INT 12
5505: PUSH
5506: LD_INT 10
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5513: LD_ADDR_OWVAR 30
5517: PUSH
5518: LD_INT 1
5520: PUSH
5521: LD_INT 2
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: LD_INT 0
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5536: LD_ADDR_OWVAR 31
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: LD_INT 2
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
// un = CreateHuman ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: CALL_OW 44
5568: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5569: LD_VAR 0 3
5573: PPUSH
5574: LD_INT 33
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: CALL_OW 87
// wait ( 0 0$1 ) ;
5593: LD_INT 35
5595: PPUSH
5596: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5600: LD_VAR 0 3
5604: PPUSH
5605: LD_STRING D11e-FSol4-1
5607: PPUSH
5608: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5612: LD_ADDR_EXP 45
5616: PUSH
5617: LD_EXP 45
5621: PUSH
5622: LD_VAR 0 3
5626: UNION
5627: ST_TO_ADDR
// arrivals := arrivals union un ;
5628: LD_ADDR_EXP 46
5632: PUSH
5633: LD_EXP 46
5637: PUSH
5638: LD_VAR 0 3
5642: UNION
5643: ST_TO_ADDR
// end ;
5644: LD_VAR 0 2
5648: RET
// every 0 0$1 do var i ;
5649: GO 5651
5651: DISABLE
5652: LD_INT 0
5654: PPUSH
// begin enable ;
5655: ENABLE
// if not ignoreTarget then
5656: LD_EXP 45
5660: NOT
5661: IFFALSE 5665
// exit ;
5663: GO 5746
// for i in ignoreTarget do
5665: LD_ADDR_VAR 0 1
5669: PUSH
5670: LD_EXP 45
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5744
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5678: LD_INT 22
5680: PUSH
5681: LD_INT 1
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 91
5690: PUSH
5691: LD_VAR 0 1
5695: PUSH
5696: LD_INT 10
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PPUSH
5708: CALL_OW 69
5712: PUSH
5713: LD_EXP 45
5717: DIFF
5718: PUSH
5719: LD_INT 1
5721: GREATER
5722: IFFALSE 5742
// begin ignoreTarget := ignoreTarget diff i ;
5724: LD_ADDR_EXP 45
5728: PUSH
5729: LD_EXP 45
5733: PUSH
5734: LD_VAR 0 1
5738: DIFF
5739: ST_TO_ADDR
// break ;
5740: GO 5744
// end ;
5742: GO 5675
5744: POP
5745: POP
// end ; end_of_file
5746: PPOPN 1
5748: END
// export function PrepareRussian ; var i ; begin
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
// if Difficulty < 3 then
5753: LD_OWVAR 67
5757: PUSH
5758: LD_INT 3
5760: LESS
5761: IFFALSE 5778
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5763: LD_INT 130
5765: PPUSH
5766: LD_INT 81
5768: PPUSH
5769: CALL_OW 428
5773: PPUSH
5774: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5778: LD_INT 3
5780: PPUSH
5781: LD_INT 3
5783: PPUSH
5784: LD_INT 2
5786: PPUSH
5787: LD_EXP 34
5791: PPUSH
5792: LD_EXP 35
5796: PPUSH
5797: CALL_OW 12
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: LD_INT 4
5807: PPUSH
5808: CALL 6343 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5812: LD_INT 3
5814: PPUSH
5815: LD_INT 3
5817: PPUSH
5818: LD_INT 8
5820: PPUSH
5821: LD_EXP 34
5825: PPUSH
5826: LD_EXP 35
5830: PPUSH
5831: CALL_OW 12
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 4
5841: PPUSH
5842: CALL 6343 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5846: LD_INT 3
5848: PPUSH
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 67
5854: PPUSH
5855: LD_EXP 34
5859: PPUSH
5860: LD_EXP 35
5864: PPUSH
5865: CALL_OW 12
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5880: LD_INT 3
5882: PPUSH
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 21
5888: PPUSH
5889: LD_EXP 34
5893: PPUSH
5894: LD_EXP 35
5898: PPUSH
5899: CALL_OW 12
5903: PPUSH
5904: LD_INT 3
5906: PPUSH
5907: LD_INT 6
5909: PPUSH
5910: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5914: LD_INT 3
5916: PPUSH
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 17
5922: PPUSH
5923: LD_EXP 34
5927: PPUSH
5928: LD_EXP 35
5932: PPUSH
5933: CALL_OW 12
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 6
5943: PPUSH
5944: CALL 6343 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5948: LD_INT 3
5950: PPUSH
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 32
5956: PPUSH
5957: LD_EXP 34
5961: PPUSH
5962: LD_EXP 35
5966: PPUSH
5967: CALL_OW 12
5971: PPUSH
5972: LD_INT 4
5974: PPUSH
5975: LD_INT 2
5977: PPUSH
5978: CALL 6343 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 30
6009: PUSH
6010: LD_INT 32
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: PUSH
6027: FOR_IN
6028: IFFALSE 6068
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6030: LD_INT 3
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_EXP 34
6045: PPUSH
6046: LD_EXP 35
6050: PPUSH
6051: CALL_OW 12
6055: PPUSH
6056: LD_INT 1
6058: PPUSH
6059: LD_INT 1
6061: PPUSH
6062: CALL 6343 0 6
6066: GO 6027
6068: POP
6069: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6070: LD_ADDR_VAR 0 2
6074: PUSH
6075: LD_INT 22
6077: PUSH
6078: LD_INT 3
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 30
6097: PUSH
6098: LD_INT 31
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PPUSH
6110: CALL_OW 69
6114: PUSH
6115: FOR_IN
6116: IFFALSE 6144
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6118: LD_EXP 34
6122: PPUSH
6123: LD_EXP 35
6127: PPUSH
6128: CALL_OW 12
6132: PPUSH
6133: LD_VAR 0 2
6137: PPUSH
6138: CALL 6453 0 2
6142: GO 6115
6144: POP
6145: POP
// end ; end_of_file
6146: LD_VAR 0 1
6150: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6151: LD_INT 0
6153: PPUSH
6154: PPUSH
// if exist_mode then
6155: LD_VAR 0 2
6159: IFFALSE 6184
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: LD_EXP 44
6170: PUSH
6171: LD_VAR 0 1
6175: STR
6176: PPUSH
6177: CALL_OW 34
6181: ST_TO_ADDR
// end else
6182: GO 6199
// begin unit := NewCharacter ( ident ) ;
6184: LD_ADDR_VAR 0 4
6188: PUSH
6189: LD_VAR 0 1
6193: PPUSH
6194: CALL_OW 25
6198: ST_TO_ADDR
// end ; result := unit ;
6199: LD_ADDR_VAR 0 3
6203: PUSH
6204: LD_VAR 0 4
6208: ST_TO_ADDR
// end ;
6209: LD_VAR 0 3
6213: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6214: LD_INT 0
6216: PPUSH
6217: PPUSH
6218: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6219: LD_ADDR_VAR 0 6
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: LD_INT 1
6231: PPUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 12
6241: ARRAY
6242: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6243: LD_VAR 0 6
6247: PPUSH
6248: CALL_OW 258
6252: PUSH
6253: LD_INT 1
6255: EQUAL
6256: IFFALSE 6274
// Say ( speaker , dialogMID ) else
6258: LD_VAR 0 6
6262: PPUSH
6263: LD_VAR 0 2
6267: PPUSH
6268: CALL_OW 88
6272: GO 6288
// Say ( speaker , dialogFID ) ;
6274: LD_VAR 0 6
6278: PPUSH
6279: LD_VAR 0 3
6283: PPUSH
6284: CALL_OW 88
// result := speaker ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_VAR 0 6
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 4
6302: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6303: LD_INT 0
6305: PPUSH
6306: PPUSH
// for i in charactersList do
6307: LD_ADDR_VAR 0 4
6311: PUSH
6312: LD_VAR 0 1
6316: PUSH
6317: FOR_IN
6318: IFFALSE 6336
// SaveCharacters ( i , ident ) ;
6320: LD_VAR 0 4
6324: PPUSH
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 38
6334: GO 6317
6336: POP
6337: POP
// end ;
6338: LD_VAR 0 3
6342: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6343: LD_INT 0
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// for i = 1 to count do
6349: LD_ADDR_VAR 0 8
6353: PUSH
6354: DOUBLE
6355: LD_INT 1
6357: DEC
6358: ST_TO_ADDR
6359: LD_VAR 0 6
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6446
// begin uc_side = side ;
6367: LD_ADDR_OWVAR 20
6371: PUSH
6372: LD_VAR 0 1
6376: ST_TO_ADDR
// uc_nation = nation ;
6377: LD_ADDR_OWVAR 21
6381: PUSH
6382: LD_VAR 0 2
6386: ST_TO_ADDR
// hc_gallery =  ;
6387: LD_ADDR_OWVAR 33
6391: PUSH
6392: LD_STRING 
6394: ST_TO_ADDR
// hc_name =  ;
6395: LD_ADDR_OWVAR 26
6399: PUSH
6400: LD_STRING 
6402: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6403: LD_INT 0
6405: PPUSH
6406: LD_VAR 0 5
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// un = CreateHuman ;
6420: LD_ADDR_VAR 0 10
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6430: LD_VAR 0 10
6434: PPUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 52
// end ;
6444: GO 6364
6446: POP
6447: POP
// end ;
6448: LD_VAR 0 7
6452: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
// uc_side := GetSide ( b ) ;
6458: LD_ADDR_OWVAR 20
6462: PUSH
6463: LD_VAR 0 2
6467: PPUSH
6468: CALL_OW 255
6472: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6473: LD_ADDR_OWVAR 21
6477: PUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 248
6487: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6488: LD_INT 0
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6503: LD_ADDR_VAR 0 5
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 254
6517: PUSH
6518: LD_INT 3
6520: MINUS
6521: ST_TO_ADDR
// if dir < 0 then
6522: LD_VAR 0 5
6526: PUSH
6527: LD_INT 0
6529: LESS
6530: IFFALSE 6546
// dir := 6 + dir ;
6532: LD_ADDR_VAR 0 5
6536: PUSH
6537: LD_INT 6
6539: PUSH
6540: LD_VAR 0 5
6544: PLUS
6545: ST_TO_ADDR
// un := CreateHuman ;
6546: LD_ADDR_VAR 0 4
6550: PUSH
6551: CALL_OW 44
6555: ST_TO_ADDR
// SetDir ( un , dir ) ;
6556: LD_VAR 0 4
6560: PPUSH
6561: LD_VAR 0 5
6565: PPUSH
6566: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_VAR 0 2
6579: PPUSH
6580: CALL_OW 52
// end ;
6584: LD_VAR 0 3
6588: RET
// export function PrepareDifficulty ; begin
6589: LD_INT 0
6591: PPUSH
// if Difficulty = 1 then
6592: LD_OWVAR 67
6596: PUSH
6597: LD_INT 1
6599: EQUAL
6600: IFFALSE 6618
// begin RuSolMinLevel = 2 ;
6602: LD_ADDR_EXP 34
6606: PUSH
6607: LD_INT 2
6609: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6610: LD_ADDR_EXP 35
6614: PUSH
6615: LD_INT 3
6617: ST_TO_ADDR
// end ; if Difficulty = 2 then
6618: LD_OWVAR 67
6622: PUSH
6623: LD_INT 2
6625: EQUAL
6626: IFFALSE 6644
// begin RuSolMinLevel = 3 ;
6628: LD_ADDR_EXP 34
6632: PUSH
6633: LD_INT 3
6635: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6636: LD_ADDR_EXP 35
6640: PUSH
6641: LD_INT 5
6643: ST_TO_ADDR
// end ; if Difficulty = 3 then
6644: LD_OWVAR 67
6648: PUSH
6649: LD_INT 3
6651: EQUAL
6652: IFFALSE 6670
// begin RuSolMinLevel = 4 ;
6654: LD_ADDR_EXP 34
6658: PUSH
6659: LD_INT 4
6661: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6662: LD_ADDR_EXP 35
6666: PUSH
6667: LD_INT 6
6669: ST_TO_ADDR
// end ; end ;
6670: LD_VAR 0 1
6674: RET
// export function ShowQuery1 ; begin
6675: LD_INT 0
6677: PPUSH
// case query ( QKill ) of 1 :
6678: LD_STRING QKill
6680: PPUSH
6681: CALL_OW 97
6685: PUSH
6686: LD_INT 1
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6705
6694: POP
// begin result = 1 ;
6695: LD_ADDR_VAR 0 1
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// end ; 2 :
6703: GO 6744
6705: LD_INT 2
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6724
6713: POP
// begin result = 2 ;
6714: LD_ADDR_VAR 0 1
6718: PUSH
6719: LD_INT 2
6721: ST_TO_ADDR
// end ; 3 :
6722: GO 6744
6724: LD_INT 3
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6743
6732: POP
// begin result = 3 ;
6733: LD_ADDR_VAR 0 1
6737: PUSH
6738: LD_INT 3
6740: ST_TO_ADDR
// end ; end ;
6741: GO 6744
6743: POP
// end ;
6744: LD_VAR 0 1
6748: RET
// export function ShowQuery2 ; begin
6749: LD_INT 0
6751: PPUSH
// case query ( QKill2 ) of 1 :
6752: LD_STRING QKill2
6754: PPUSH
6755: CALL_OW 97
6759: PUSH
6760: LD_INT 1
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6779
6768: POP
// begin result = 1 ;
6769: LD_ADDR_VAR 0 1
6773: PUSH
6774: LD_INT 1
6776: ST_TO_ADDR
// end ; 2 :
6777: GO 6799
6779: LD_INT 2
6781: DOUBLE
6782: EQUAL
6783: IFTRUE 6787
6785: GO 6798
6787: POP
// begin result = 2 ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_INT 2
6795: ST_TO_ADDR
// end ; end ;
6796: GO 6799
6798: POP
// end ;
6799: LD_VAR 0 1
6803: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6804: LD_INT 0
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6811: LD_ADDR_VAR 0 8
6815: PUSH
6816: LD_INT 48
6818: PUSH
6819: LD_INT 49
6821: PUSH
6822: LD_INT 50
6824: PUSH
6825: LD_INT 20
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: LD_INT 51
6833: PUSH
6834: LD_INT 52
6836: PUSH
6837: LD_INT 69
6839: PUSH
6840: LD_INT 39
6842: PUSH
6843: LD_INT 34
6845: PUSH
6846: LD_INT 40
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 71
6854: PUSH
6855: LD_INT 57
6857: PUSH
6858: LD_INT 58
6860: PUSH
6861: LD_INT 44
6863: PUSH
6864: LD_INT 32
6866: PUSH
6867: LD_INT 27
6869: PUSH
6870: LD_INT 23
6872: PUSH
6873: LD_INT 33
6875: PUSH
6876: LD_INT 59
6878: PUSH
6879: LD_INT 54
6881: PUSH
6882: LD_INT 55
6884: PUSH
6885: LD_INT 56
6887: PUSH
6888: LD_INT 63
6890: PUSH
6891: LD_INT 64
6893: PUSH
6894: LD_INT 65
6896: PUSH
6897: LD_INT 30
6899: PUSH
6900: LD_INT 31
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 22
6908: PUSH
6909: LD_INT 25
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6946: LD_ADDR_VAR 0 5
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_VAR 0 8
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7038
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6964: LD_VAR 0 8
6968: PUSH
6969: LD_VAR 0 5
6973: ARRAY
6974: PPUSH
6975: LD_VAR 0 1
6979: PPUSH
6980: CALL_OW 321
6984: PUSH
6985: LD_INT 1
6987: EQUAL
6988: PUSH
6989: LD_VAR 0 8
6993: PUSH
6994: LD_VAR 0 5
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 3
7004: PPUSH
7005: CALL_OW 482
7009: PUSH
7010: LD_INT 1
7012: EQUAL
7013: AND
7014: IFFALSE 7036
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7016: LD_VAR 0 2
7020: PPUSH
7021: LD_VAR 0 8
7025: PUSH
7026: LD_VAR 0 5
7030: ARRAY
7031: PPUSH
7032: CALL_OW 184
7036: GO 6961
7038: POP
7039: POP
// end ;
7040: LD_VAR 0 4
7044: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7045: LD_INT 0
7047: PPUSH
7048: PPUSH
7049: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 69
7080: PUSH
7081: LD_VAR 0 3
7085: LESSEQUAL
7086: IFFALSE 7194
// begin for i = 1 to vehCount do
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: DOUBLE
7094: LD_INT 1
7096: DEC
7097: ST_TO_ADDR
7098: LD_VAR 0 3
7102: PUSH
7103: FOR_TO
7104: IFFALSE 7192
// begin weapon = weaponTab [ i ] ;
7106: LD_ADDR_VAR 0 10
7110: PUSH
7111: LD_VAR 0 4
7115: PUSH
7116: LD_VAR 0 9
7120: ARRAY
7121: ST_TO_ADDR
// if weapon = 46 then
7122: LD_VAR 0 10
7126: PUSH
7127: LD_INT 46
7129: EQUAL
7130: IFFALSE 7161
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_INT 24
7139: PPUSH
7140: LD_VAR 0 5
7144: PPUSH
7145: LD_VAR 0 6
7149: PPUSH
7150: LD_VAR 0 10
7154: PPUSH
7155: CALL_OW 185
// end else
7159: GO 7190
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_VAR 0 7
7170: PPUSH
7171: LD_VAR 0 5
7175: PPUSH
7176: LD_VAR 0 6
7180: PPUSH
7181: LD_VAR 0 10
7185: PPUSH
7186: CALL_OW 185
// end ; end ;
7190: GO 7103
7192: POP
7193: POP
// end ; end ;
7194: LD_VAR 0 8
7198: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7205: LD_ADDR_VAR 0 8
7209: PUSH
7210: LD_INT 22
7212: PUSH
7213: LD_VAR 0 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 21
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: LD_INT 650
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 69
7258: ST_TO_ADDR
// if damageVehicles > 0 then
7259: LD_VAR 0 8
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: IFFALSE 7288
// ComMoveXY ( damageVehicles , repX , repY ) ;
7269: LD_VAR 0 8
7273: PPUSH
7274: LD_VAR 0 3
7278: PPUSH
7279: LD_VAR 0 4
7283: PPUSH
7284: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7288: LD_VAR 0 8
7292: PPUSH
7293: LD_INT 95
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: LD_INT 58
7310: PUSH
7311: EMPTY
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 72
7326: PUSH
7327: LD_INT 0
7329: GREATER
7330: IFFALSE 7397
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7332: LD_ADDR_VAR 0 6
7336: PUSH
7337: LD_VAR 0 8
7341: PPUSH
7342: LD_INT 95
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: LD_INT 58
7359: PUSH
7360: EMPTY
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 72
7375: PUSH
7376: FOR_IN
7377: IFFALSE 7395
// ComExitVehicle ( UnitsInside ( i ) ) ;
7379: LD_VAR 0 6
7383: PPUSH
7384: CALL_OW 313
7388: PPUSH
7389: CALL_OW 121
7393: GO 7376
7395: POP
7396: POP
// end ;
7397: LD_VAR 0 5
7401: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7402: LD_INT 0
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7411: LD_ADDR_VAR 0 8
7415: PUSH
7416: LD_INT 22
7418: PUSH
7419: LD_VAR 0 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 21
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 24
7440: PUSH
7441: LD_INT 660
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 58
7453: PUSH
7454: EMPTY
7455: LIST
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: LD_INT 34
7462: PUSH
7463: LD_INT 43
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 34
7472: PUSH
7473: LD_INT 44
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 46
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 69
7511: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7512: LD_INT 22
7514: PUSH
7515: LD_VAR 0 1
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 21
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 24
7536: PUSH
7537: LD_INT 1000
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: LD_INT 58
7549: PUSH
7550: EMPTY
7551: LIST
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 43
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_INT 44
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 34
7578: PUSH
7579: LD_INT 46
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 69
7607: PUSH
7608: LD_INT 5
7610: PUSH
7611: LD_INT 6
7613: PUSH
7614: LD_INT 6
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_OWVAR 67
7626: ARRAY
7627: EQUAL
7628: IFFALSE 7884
// if seeEnemy = 0 then
7630: LD_VAR 0 11
7634: PUSH
7635: LD_INT 0
7637: EQUAL
7638: IFFALSE 7884
// repeat wait ( 0 0$1 ) ;
7640: LD_INT 35
7642: PPUSH
7643: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7647: LD_ADDR_VAR 0 8
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 24
7676: PUSH
7677: LD_INT 660
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 58
7689: PUSH
7690: EMPTY
7691: LIST
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 43
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 34
7708: PUSH
7709: LD_INT 44
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 34
7718: PUSH
7719: LD_INT 46
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 69
7747: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 95
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: NOT
7781: PUSH
7782: LD_VAR 0 11
7786: PUSH
7787: LD_INT 0
7789: EQUAL
7790: AND
7791: IFFALSE 7846
// for i := 1 to wayX do
7793: LD_ADDR_VAR 0 6
7797: PUSH
7798: DOUBLE
7799: LD_INT 1
7801: DEC
7802: ST_TO_ADDR
7803: LD_VAR 0 3
7807: PUSH
7808: FOR_TO
7809: IFFALSE 7844
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7811: LD_VAR 0 8
7815: PPUSH
7816: LD_VAR 0 3
7820: PUSH
7821: LD_VAR 0 6
7825: ARRAY
7826: PPUSH
7827: LD_VAR 0 4
7831: PUSH
7832: LD_VAR 0 6
7836: ARRAY
7837: PPUSH
7838: CALL_OW 114
7842: GO 7808
7844: POP
7845: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7846: LD_INT 22
7848: PUSH
7849: LD_VAR 0 1
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 95
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 69
7878: PUSH
7879: LD_INT 0
7881: GREATER
7882: IFFALSE 7640
// seeEnemy = 1 ;
7884: LD_ADDR_VAR 0 11
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7892: LD_INT 35
7894: PPUSH
7895: CALL_OW 67
// for j in vehiclesOK do
7899: LD_ADDR_VAR 0 7
7903: PUSH
7904: LD_VAR 0 8
7908: PUSH
7909: FOR_IN
7910: IFFALSE 8123
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7912: LD_ADDR_VAR 0 9
7916: PUSH
7917: LD_INT 81
7919: PUSH
7920: LD_VAR 0 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 101
7931: PUSH
7932: LD_INT 1
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 69
7947: PUSH
7948: LD_EXP 45
7952: DIFF
7953: PPUSH
7954: LD_VAR 0 7
7958: PPUSH
7959: CALL_OW 74
7963: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7964: LD_ADDR_VAR 0 10
7968: PUSH
7969: LD_INT 81
7971: PUSH
7972: LD_VAR 0 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 101
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: LD_INT 59
7996: PUSH
7997: EMPTY
7998: LIST
7999: PUSH
8000: LD_INT 21
8002: PUSH
8003: LD_INT 1
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 21
8012: PUSH
8013: LD_INT 2
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: PUSH
8039: LD_EXP 45
8043: DIFF
8044: PPUSH
8045: LD_VAR 0 7
8049: PPUSH
8050: CALL_OW 74
8054: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8055: LD_VAR 0 7
8059: PPUSH
8060: LD_VAR 0 9
8064: PPUSH
8065: CALL_OW 296
8069: PUSH
8070: LD_INT 8
8072: PLUS
8073: PUSH
8074: LD_VAR 0 7
8078: PPUSH
8079: LD_VAR 0 10
8083: PPUSH
8084: CALL_OW 296
8088: LESS
8089: IFFALSE 8107
// ComAttackUnit ( j , target1 ) else
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_VAR 0 9
8100: PPUSH
8101: CALL_OW 115
8105: GO 8121
// ComAttackUnit ( j , target2 ) ;
8107: LD_VAR 0 7
8111: PPUSH
8112: LD_VAR 0 10
8116: PPUSH
8117: CALL_OW 115
// end ;
8121: GO 7909
8123: POP
8124: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8125: LD_INT 22
8127: PUSH
8128: LD_VAR 0 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 21
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 3
8159: PUSH
8160: LD_INT 58
8162: PUSH
8163: EMPTY
8164: LIST
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 34
8171: PUSH
8172: LD_INT 43
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 34
8181: PUSH
8182: LD_INT 44
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 34
8191: PUSH
8192: LD_INT 46
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: PUSH
8221: LD_INT 0
8223: EQUAL
8224: IFFALSE 7892
// seeEnemy = 0 ;
8226: LD_ADDR_VAR 0 11
8230: PUSH
8231: LD_INT 0
8233: ST_TO_ADDR
// end ;
8234: LD_VAR 0 5
8238: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8247: LD_ADDR_VAR 0 8
8251: PUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 313
8261: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8262: LD_ADDR_VAR 0 9
8266: PUSH
8267: LD_VAR 0 3
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_VAR 0 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 2
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 24
8296: PUSH
8297: LD_INT 750
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_INT 3
8306: PUSH
8307: LD_INT 54
8309: PUSH
8310: EMPTY
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 70
8327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_VAR 0 3
8337: PPUSH
8338: LD_INT 22
8340: PUSH
8341: LD_VAR 0 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 21
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 24
8365: PUSH
8366: LD_INT 1000
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PUSH
8382: EMPTY
8383: LIST
8384: PPUSH
8385: CALL_OW 70
8389: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8390: LD_VAR 0 6
8394: NOT
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_VAR 0 1
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 25
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 24
8420: PUSH
8421: LD_INT 250
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 69
8437: NOT
8438: AND
8439: IFFALSE 8443
// exit ;
8441: GO 8625
// if buildings_list > 0 and engineerOkInside then
8443: LD_VAR 0 6
8447: PUSH
8448: LD_INT 0
8450: GREATER
8451: PUSH
8452: LD_VAR 0 8
8456: AND
8457: IFFALSE 8468
// ComExitBuilding ( engineerOkInside ) ;
8459: LD_VAR 0 8
8463: PPUSH
8464: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 0
8475: GREATER
8476: PUSH
8477: LD_VAR 0 9
8481: PUSH
8482: LD_INT 0
8484: GREATER
8485: AND
8486: IFFALSE 8506
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8488: LD_VAR 0 9
8492: PPUSH
8493: LD_VAR 0 6
8497: PUSH
8498: LD_INT 1
8500: ARRAY
8501: PPUSH
8502: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 0
8513: EQUAL
8514: PUSH
8515: LD_VAR 0 4
8519: PUSH
8520: LD_INT 0
8522: EQUAL
8523: AND
8524: PUSH
8525: LD_VAR 0 9
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: AND
8534: IFFALSE 8550
// ComEnterUnit ( engineerOkOutside , building ) ;
8536: LD_VAR 0 9
8540: PPUSH
8541: LD_VAR 0 2
8545: PPUSH
8546: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 0
8557: GREATER
8558: PUSH
8559: LD_VAR 0 6
8563: PUSH
8564: LD_INT 0
8566: EQUAL
8567: AND
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 0
8576: GREATER
8577: AND
8578: IFFALSE 8625
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8580: LD_VAR 0 9
8584: PPUSH
8585: LD_VAR 0 4
8589: PUSH
8590: LD_INT 1
8592: ARRAY
8593: PPUSH
8594: LD_VAR 0 4
8598: PUSH
8599: LD_INT 2
8601: ARRAY
8602: PPUSH
8603: LD_VAR 0 4
8607: PUSH
8608: LD_INT 3
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 4
8616: PUSH
8617: LD_INT 4
8619: ARRAY
8620: PPUSH
8621: CALL_OW 145
// end ;
8625: LD_VAR 0 5
8629: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8630: LD_INT 0
8632: PPUSH
8633: PPUSH
8634: PPUSH
8635: PPUSH
8636: PPUSH
8637: PPUSH
8638: PPUSH
8639: PPUSH
8640: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8641: LD_ADDR_VAR 0 6
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_VAR 0 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 25
8660: PUSH
8661: LD_INT 4
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 23
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 24
8680: PUSH
8681: LD_INT 251
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: PPUSH
8694: CALL_OW 69
8698: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8699: LD_ADDR_VAR 0 7
8703: PUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: LD_INT 22
8711: PUSH
8712: LD_VAR 0 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 23
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 25
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 50
8743: PUSH
8744: EMPTY
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 70
8757: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8758: LD_ADDR_VAR 0 10
8762: PUSH
8763: LD_VAR 0 3
8767: PPUSH
8768: LD_INT 22
8770: PUSH
8771: LD_VAR 0 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 21
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: LD_INT 24
8812: PUSH
8813: LD_INT 750
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 70
8834: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: LD_INT 22
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 21
8859: PUSH
8860: LD_INT 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 3
8869: PUSH
8870: LD_INT 25
8872: PUSH
8873: LD_INT 3
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 3
8886: PUSH
8887: LD_INT 24
8889: PUSH
8890: LD_INT 1000
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 70
8911: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8912: LD_VAR 0 10
8916: NOT
8917: PUSH
8918: LD_VAR 0 11
8922: NOT
8923: AND
8924: PUSH
8925: LD_VAR 0 6
8929: NOT
8930: AND
8931: IFFALSE 8935
// exit ;
8933: GO 9169
// if damageUnits > 0 and sci_list > 0 then
8935: LD_VAR 0 10
8939: PUSH
8940: LD_INT 0
8942: GREATER
8943: PUSH
8944: LD_VAR 0 6
8948: PUSH
8949: LD_INT 0
8951: GREATER
8952: AND
8953: IFFALSE 8969
// ComMoveToArea ( damageUnits , healArea ) ;
8955: LD_VAR 0 10
8959: PPUSH
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8969: LD_VAR 0 11
8973: PUSH
8974: LD_INT 0
8976: GREATER
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 0
8985: GREATER
8986: AND
8987: IFFALSE 8998
// ComExitBuilding ( sci_list ) ;
8989: LD_VAR 0 6
8993: PPUSH
8994: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8998: LD_VAR 0 11
9002: PUSH
9003: LD_INT 0
9005: GREATER
9006: PUSH
9007: LD_VAR 0 7
9011: PUSH
9012: LD_INT 0
9014: GREATER
9015: AND
9016: IFFALSE 9036
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9018: LD_VAR 0 7
9022: PPUSH
9023: LD_VAR 0 11
9027: PUSH
9028: LD_INT 1
9030: ARRAY
9031: PPUSH
9032: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9036: LD_VAR 0 10
9040: PUSH
9041: LD_INT 0
9043: EQUAL
9044: PUSH
9045: LD_VAR 0 11
9049: PUSH
9050: LD_INT 0
9052: EQUAL
9053: AND
9054: PUSH
9055: LD_VAR 0 7
9059: PUSH
9060: LD_INT 0
9062: GREATER
9063: AND
9064: IFFALSE 9169
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9066: LD_ADDR_VAR 0 12
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 1
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 21
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 8
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9113: LD_ADDR_VAR 0 13
9117: PUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_VAR 0 12
9125: PPUSH
9126: CALL_OW 12
9130: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9131: LD_VAR 0 7
9135: PPUSH
9136: LD_INT 3
9138: PUSH
9139: LD_INT 60
9141: PUSH
9142: EMPTY
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PPUSH
9149: CALL_OW 72
9153: PPUSH
9154: LD_VAR 0 12
9158: PUSH
9159: LD_VAR 0 13
9163: ARRAY
9164: PPUSH
9165: CALL_OW 120
// end ; end ;
9169: LD_VAR 0 5
9173: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
// tmpTab = [ ] ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: EMPTY
9186: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9187: LD_INT 22
9189: PUSH
9190: LD_VAR 0 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: PUSH
9218: LD_INT 0
9220: GREATER
9221: IFFALSE 9304
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9223: LD_ADDR_VAR 0 4
9227: PUSH
9228: LD_INT 22
9230: PUSH
9231: LD_VAR 0 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 30
9242: PUSH
9243: LD_INT 32
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PPUSH
9254: CALL_OW 69
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9302
// begin for j in UnitsInside ( i ) do
9262: LD_ADDR_VAR 0 5
9266: PUSH
9267: LD_VAR 0 4
9271: PPUSH
9272: CALL_OW 313
9276: PUSH
9277: FOR_IN
9278: IFFALSE 9298
// tmpTab = tmpTab ^ j ;
9280: LD_ADDR_VAR 0 6
9284: PUSH
9285: LD_VAR 0 6
9289: PUSH
9290: LD_VAR 0 5
9294: ADD
9295: ST_TO_ADDR
9296: GO 9277
9298: POP
9299: POP
// end ;
9300: GO 9259
9302: POP
9303: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9304: LD_VAR 0 6
9308: PPUSH
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 250
9318: PPUSH
9319: LD_VAR 0 2
9323: PPUSH
9324: CALL_OW 251
9328: PPUSH
9329: CALL_OW 114
// end ;
9333: LD_VAR 0 3
9337: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9338: LD_INT 0
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
// enable ;
9344: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_VAR 0 3
9354: PPUSH
9355: CALL_OW 435
9359: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9360: LD_ADDR_VAR 0 6
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 34
9379: PUSH
9380: LD_VAR 0 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 69
9397: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9398: LD_VAR 0 6
9402: PUSH
9403: LD_INT 0
9405: GREATER
9406: PUSH
9407: LD_VAR 0 3
9411: PPUSH
9412: CALL_OW 435
9416: AND
9417: PUSH
9418: LD_VAR 0 7
9422: PUSH
9423: LD_INT 0
9425: GREATER
9426: AND
9427: IFFALSE 9476
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9429: LD_VAR 0 6
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_VAR 0 7
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PPUSH
9447: LD_VAR 0 7
9451: PUSH
9452: LD_INT 2
9454: ARRAY
9455: PPUSH
9456: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9460: LD_VAR 0 6
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_INT 100
9471: PPUSH
9472: CALL_OW 240
// end ; end ;
9476: LD_VAR 0 4
9480: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9481: LD_INT 0
9483: PPUSH
9484: PPUSH
9485: PPUSH
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9491: LD_ADDR_VAR 0 6
9495: PUSH
9496: LD_VAR 0 2
9500: PPUSH
9501: LD_INT 22
9503: PUSH
9504: LD_VAR 0 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 56
9515: PUSH
9516: EMPTY
9517: LIST
9518: PUSH
9519: LD_INT 24
9521: PUSH
9522: LD_INT 700
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: LD_INT 60
9534: PUSH
9535: EMPTY
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 1
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 5
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 8
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 25
9577: PUSH
9578: LD_INT 9
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 70
9603: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9604: LD_ADDR_VAR 0 7
9608: PUSH
9609: LD_VAR 0 2
9613: PPUSH
9614: LD_INT 22
9616: PUSH
9617: LD_VAR 0 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 30
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 58
9638: PUSH
9639: EMPTY
9640: LIST
9641: PUSH
9642: LD_INT 24
9644: PUSH
9645: LD_INT 251
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 70
9662: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9663: LD_ADDR_VAR 0 9
9667: PUSH
9668: LD_VAR 0 2
9672: PPUSH
9673: LD_INT 22
9675: PUSH
9676: LD_VAR 0 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 2
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 4
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 5
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 24
9715: PUSH
9716: LD_INT 251
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 70
9732: ST_TO_ADDR
// if barrackList > 0 then
9733: LD_VAR 0 9
9737: PUSH
9738: LD_INT 0
9740: GREATER
9741: IFFALSE 9889
// begin if turretList = 0 then
9743: LD_VAR 0 7
9747: PUSH
9748: LD_INT 0
9750: EQUAL
9751: IFFALSE 9793
// begin if soldiers_list > 0 then
9753: LD_VAR 0 6
9757: PUSH
9758: LD_INT 0
9760: GREATER
9761: IFFALSE 9791
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9763: LD_VAR 0 6
9767: PPUSH
9768: LD_VAR 0 9
9772: PUSH
9773: LD_INT 1
9775: PPUSH
9776: LD_VAR 0 9
9780: PPUSH
9781: CALL_OW 12
9785: ARRAY
9786: PPUSH
9787: CALL_OW 120
// end else
9791: GO 9889
// begin for i in barrackList do
9793: LD_ADDR_VAR 0 4
9797: PUSH
9798: LD_VAR 0 9
9802: PUSH
9803: FOR_IN
9804: IFFALSE 9887
// begin insideUnits = UnitsInside ( i ) ;
9806: LD_ADDR_VAR 0 10
9810: PUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL_OW 313
9820: ST_TO_ADDR
// if insideUnits > 0 then
9821: LD_VAR 0 10
9825: PUSH
9826: LD_INT 0
9828: GREATER
9829: IFFALSE 9853
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9831: LD_VAR 0 10
9835: PUSH
9836: LD_INT 1
9838: ARRAY
9839: PPUSH
9840: LD_VAR 0 7
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: PPUSH
9849: CALL_OW 120
// if soldiers_list > 0 then
9853: LD_VAR 0 6
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 9885
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9863: LD_VAR 0 6
9867: PUSH
9868: LD_INT 1
9870: ARRAY
9871: PPUSH
9872: LD_VAR 0 7
9876: PUSH
9877: LD_INT 1
9879: ARRAY
9880: PPUSH
9881: CALL_OW 120
// end ;
9885: GO 9803
9887: POP
9888: POP
// end ; end ; end ;
9889: LD_VAR 0 3
9893: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9901: LD_ADDR_VAR 0 6
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 30
9923: PUSH
9924: LD_INT 31
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 32
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 33
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 30
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 30
9963: PUSH
9964: LD_INT 5
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_INT 22
9995: PUSH
9996: LD_VAR 0 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 21
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 58
10017: PUSH
10018: EMPTY
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 69
10030: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10031: LD_VAR 0 6
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: PUSH
10040: LD_VAR 0 7
10044: PUSH
10045: LD_INT 0
10047: GREATER
10048: AND
10049: IFFALSE 10119
// begin for i in turretsList do
10051: LD_ADDR_VAR 0 4
10055: PUSH
10056: LD_VAR 0 6
10060: PUSH
10061: FOR_IN
10062: IFFALSE 10117
// begin for j in enemyBuildings do
10064: LD_ADDR_VAR 0 5
10068: PUSH
10069: LD_VAR 0 7
10073: PUSH
10074: FOR_IN
10075: IFFALSE 10113
// begin if GetDistUnits ( i , j ) < 20 then
10077: LD_VAR 0 4
10081: PPUSH
10082: LD_VAR 0 5
10086: PPUSH
10087: CALL_OW 296
10091: PUSH
10092: LD_INT 20
10094: LESS
10095: IFFALSE 10111
// begin ComAttackUnit ( i , j ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_VAR 0 5
10106: PPUSH
10107: CALL_OW 115
// end ; end ;
10111: GO 10074
10113: POP
10114: POP
// end ;
10115: GO 10061
10117: POP
10118: POP
// end ; end ;
10119: LD_VAR 0 3
10123: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10124: LD_INT 0
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 34
10161: PUSH
10162: LD_INT 52
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 69
10178: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10179: LD_ADDR_VAR 0 9
10183: PUSH
10184: LD_INT 22
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 3
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 1000
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10236: LD_VAR 0 9
10240: PUSH
10241: LD_INT 0
10243: GREATER
10244: PUSH
10245: LD_VAR 0 8
10249: PPUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 750
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PPUSH
10260: CALL_OW 72
10264: PUSH
10265: LD_INT 0
10267: GREATER
10268: AND
10269: IFFALSE 10304
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_INT 24
10278: PUSH
10279: LD_INT 750
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: PPUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_INT 1
10298: ARRAY
10299: PPUSH
10300: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10304: LD_VAR 0 8
10308: PPUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 24
10314: PUSH
10315: LD_INT 750
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 72
10330: PUSH
10331: LD_INT 0
10333: GREATER
10334: IFFALSE 10372
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10336: LD_VAR 0 8
10340: PPUSH
10341: LD_INT 3
10343: PUSH
10344: LD_INT 24
10346: PUSH
10347: LD_INT 750
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 72
10362: PPUSH
10363: LD_VAR 0 2
10367: PPUSH
10368: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10372: LD_VAR 0 8
10376: PUSH
10377: LD_INT 0
10379: GREATER
10380: PUSH
10381: LD_VAR 0 9
10385: PUSH
10386: LD_INT 0
10388: EQUAL
10389: AND
10390: PUSH
10391: LD_VAR 0 3
10395: PUSH
10396: LD_INT 0
10398: GREATER
10399: AND
10400: IFFALSE 10447
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10402: LD_VAR 0 8
10406: PPUSH
10407: LD_VAR 0 3
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 2
10423: ARRAY
10424: PPUSH
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 3
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 4
10441: ARRAY
10442: PPUSH
10443: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10447: LD_VAR 0 2
10451: PPUSH
10452: LD_INT 22
10454: PUSH
10455: LD_VAR 0 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 2
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 34
10476: PUSH
10477: LD_INT 52
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 3
10486: PUSH
10487: LD_INT 24
10489: PUSH
10490: LD_INT 750
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 70
10511: PUSH
10512: LD_INT 0
10514: GREATER
10515: IFFALSE 10717
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10517: LD_ADDR_VAR 0 5
10521: PUSH
10522: LD_VAR 0 2
10526: PPUSH
10527: LD_INT 22
10529: PUSH
10530: LD_VAR 0 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 34
10551: PUSH
10552: LD_INT 52
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: LD_INT 24
10564: PUSH
10565: LD_INT 750
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 70
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10715
// begin mechTmp = UnitsInside ( i ) ;
10590: LD_ADDR_VAR 0 6
10594: PUSH
10595: LD_VAR 0 5
10599: PPUSH
10600: CALL_OW 313
10604: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10605: LD_VAR 0 6
10609: PPUSH
10610: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10614: LD_VAR 0 6
10618: PPUSH
10619: LD_VAR 0 7
10623: PPUSH
10624: CALL_OW 189
// wait ( 0 0$2 ) ;
10628: LD_INT 70
10630: PPUSH
10631: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10635: LD_VAR 0 6
10639: PPUSH
10640: LD_VAR 0 2
10644: PPUSH
10645: LD_INT 22
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 21
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 34
10669: PUSH
10670: LD_INT 52
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 24
10679: PUSH
10680: LD_INT 1000
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 58
10689: PUSH
10690: EMPTY
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 70
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: CALL_OW 180
// end ;
10713: GO 10587
10715: POP
10716: POP
// end ; end ;
10717: LD_VAR 0 4
10721: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
// for i = 1 to medicCount do
10735: LD_ADDR_VAR 0 14
10739: PUSH
10740: DOUBLE
10741: LD_INT 1
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 7
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10833
// begin uc_side = side ;
10753: LD_ADDR_OWVAR 20
10757: PUSH
10758: LD_VAR 0 1
10762: ST_TO_ADDR
// uc_nation = nation ;
10763: LD_ADDR_OWVAR 21
10767: PUSH
10768: LD_VAR 0 2
10772: ST_TO_ADDR
// hc_name =  ;
10773: LD_ADDR_OWVAR 26
10777: PUSH
10778: LD_STRING 
10780: ST_TO_ADDR
// hc_gallery =  ;
10781: LD_ADDR_OWVAR 33
10785: PUSH
10786: LD_STRING 
10788: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 4
10794: PPUSH
10795: LD_VAR 0 8
10799: PPUSH
10800: CALL_OW 380
// un = CreateHuman ;
10804: LD_ADDR_VAR 0 16
10808: PUSH
10809: CALL_OW 44
10813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10814: LD_VAR 0 16
10818: PPUSH
10819: LD_VAR 0 9
10823: PPUSH
10824: LD_INT 0
10826: PPUSH
10827: CALL_OW 49
// end ;
10831: GO 10750
10833: POP
10834: POP
// for i = 1 to soldierCount do
10835: LD_ADDR_VAR 0 14
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_VAR 0 3
10849: PUSH
10850: FOR_TO
10851: IFFALSE 10933
// begin uc_side = side ;
10853: LD_ADDR_OWVAR 20
10857: PUSH
10858: LD_VAR 0 1
10862: ST_TO_ADDR
// uc_nation = nation ;
10863: LD_ADDR_OWVAR 21
10867: PUSH
10868: LD_VAR 0 2
10872: ST_TO_ADDR
// hc_name =  ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING 
10880: ST_TO_ADDR
// hc_gallery =  ;
10881: LD_ADDR_OWVAR 33
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10889: LD_INT 0
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: LD_VAR 0 8
10899: PPUSH
10900: CALL_OW 380
// un = CreateHuman ;
10904: LD_ADDR_VAR 0 16
10908: PUSH
10909: CALL_OW 44
10913: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10914: LD_VAR 0 16
10918: PPUSH
10919: LD_VAR 0 9
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 49
// end ;
10931: GO 10850
10933: POP
10934: POP
// for i = 1 to sniperCount do
10935: LD_ADDR_VAR 0 14
10939: PUSH
10940: DOUBLE
10941: LD_INT 1
10943: DEC
10944: ST_TO_ADDR
10945: LD_VAR 0 4
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11033
// begin uc_side = side ;
10953: LD_ADDR_OWVAR 20
10957: PUSH
10958: LD_VAR 0 1
10962: ST_TO_ADDR
// uc_nation = nation ;
10963: LD_ADDR_OWVAR 21
10967: PUSH
10968: LD_VAR 0 2
10972: ST_TO_ADDR
// hc_name =  ;
10973: LD_ADDR_OWVAR 26
10977: PUSH
10978: LD_STRING 
10980: ST_TO_ADDR
// hc_gallery =  ;
10981: LD_ADDR_OWVAR 33
10985: PUSH
10986: LD_STRING 
10988: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10989: LD_INT 0
10991: PPUSH
10992: LD_INT 5
10994: PPUSH
10995: LD_VAR 0 8
10999: PPUSH
11000: CALL_OW 380
// un = CreateHuman ;
11004: LD_ADDR_VAR 0 16
11008: PUSH
11009: CALL_OW 44
11013: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11014: LD_VAR 0 16
11018: PPUSH
11019: LD_VAR 0 9
11023: PPUSH
11024: LD_INT 0
11026: PPUSH
11027: CALL_OW 49
// end ;
11031: GO 10950
11033: POP
11034: POP
// for i = 1 to bazookCount do
11035: LD_ADDR_VAR 0 14
11039: PUSH
11040: DOUBLE
11041: LD_INT 1
11043: DEC
11044: ST_TO_ADDR
11045: LD_VAR 0 5
11049: PUSH
11050: FOR_TO
11051: IFFALSE 11133
// begin uc_side = side ;
11053: LD_ADDR_OWVAR 20
11057: PUSH
11058: LD_VAR 0 1
11062: ST_TO_ADDR
// uc_nation = nation ;
11063: LD_ADDR_OWVAR 21
11067: PUSH
11068: LD_VAR 0 2
11072: ST_TO_ADDR
// hc_name =  ;
11073: LD_ADDR_OWVAR 26
11077: PUSH
11078: LD_STRING 
11080: ST_TO_ADDR
// hc_gallery =  ;
11081: LD_ADDR_OWVAR 33
11085: PUSH
11086: LD_STRING 
11088: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11089: LD_INT 0
11091: PPUSH
11092: LD_INT 9
11094: PPUSH
11095: LD_VAR 0 8
11099: PPUSH
11100: CALL_OW 380
// un = CreateHuman ;
11104: LD_ADDR_VAR 0 16
11108: PUSH
11109: CALL_OW 44
11113: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11114: LD_VAR 0 16
11118: PPUSH
11119: LD_VAR 0 9
11123: PPUSH
11124: LD_INT 0
11126: PPUSH
11127: CALL_OW 49
// end ;
11131: GO 11050
11133: POP
11134: POP
// for i = 1 to mortalCount do
11135: LD_ADDR_VAR 0 14
11139: PUSH
11140: DOUBLE
11141: LD_INT 1
11143: DEC
11144: ST_TO_ADDR
11145: LD_VAR 0 6
11149: PUSH
11150: FOR_TO
11151: IFFALSE 11233
// begin uc_side = side ;
11153: LD_ADDR_OWVAR 20
11157: PUSH
11158: LD_VAR 0 1
11162: ST_TO_ADDR
// uc_nation = nation ;
11163: LD_ADDR_OWVAR 21
11167: PUSH
11168: LD_VAR 0 2
11172: ST_TO_ADDR
// hc_name =  ;
11173: LD_ADDR_OWVAR 26
11177: PUSH
11178: LD_STRING 
11180: ST_TO_ADDR
// hc_gallery =  ;
11181: LD_ADDR_OWVAR 33
11185: PUSH
11186: LD_STRING 
11188: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 8
11194: PPUSH
11195: LD_VAR 0 8
11199: PPUSH
11200: CALL_OW 380
// un = CreateHuman ;
11204: LD_ADDR_VAR 0 16
11208: PUSH
11209: CALL_OW 44
11213: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11214: LD_VAR 0 16
11218: PPUSH
11219: LD_VAR 0 9
11223: PPUSH
11224: LD_INT 0
11226: PPUSH
11227: CALL_OW 49
// end ;
11231: GO 11150
11233: POP
11234: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11235: LD_ADDR_VAR 0 19
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 25
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 25
11267: PUSH
11268: LD_INT 5
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 8
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 9
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11311: LD_ADDR_VAR 0 18
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_VAR 0 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 25
11330: PUSH
11331: LD_INT 4
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 69
11346: ST_TO_ADDR
// for i in medic_list do
11347: LD_ADDR_VAR 0 14
11351: PUSH
11352: LD_VAR 0 18
11356: PUSH
11357: FOR_IN
11358: IFFALSE 11376
// ComMoveToArea ( i , healArea ) ;
11360: LD_VAR 0 14
11364: PPUSH
11365: LD_VAR 0 10
11369: PPUSH
11370: CALL_OW 113
11374: GO 11357
11376: POP
11377: POP
// if strategy = 1 then
11378: LD_VAR 0 12
11382: PUSH
11383: LD_INT 1
11385: EQUAL
11386: IFFALSE 12103
// begin repeat wait ( 0 0$3 ) ;
11388: LD_INT 105
11390: PPUSH
11391: CALL_OW 67
// for i in soldiersOK_list do
11395: LD_ADDR_VAR 0 14
11399: PUSH
11400: LD_VAR 0 19
11404: PUSH
11405: FOR_IN
11406: IFFALSE 11440
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11408: LD_VAR 0 14
11412: PPUSH
11413: LD_INT 80
11415: PPUSH
11416: LD_INT 109
11418: PPUSH
11419: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11423: LD_VAR 0 14
11427: PPUSH
11428: LD_INT 39
11430: PPUSH
11431: LD_INT 49
11433: PPUSH
11434: CALL_OW 174
// end ;
11438: GO 11405
11440: POP
11441: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11442: LD_INT 13
11444: PPUSH
11445: LD_INT 22
11447: PUSH
11448: LD_VAR 0 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PPUSH
11457: CALL_OW 70
11461: PUSH
11462: LD_INT 0
11464: GREATER
11465: IFFALSE 11388
// repeat wait ( 0 0$1 ) ;
11467: LD_INT 35
11469: PPUSH
11470: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11474: LD_ADDR_VAR 0 17
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_VAR 0 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: LD_INT 24
11499: PUSH
11500: LD_INT 550
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 24
11513: PUSH
11514: LD_INT 250
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11535: LD_ADDR_VAR 0 19
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 1
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 25
11577: PUSH
11578: LD_INT 8
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 9
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 24
11604: PUSH
11605: LD_INT 1000
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: ST_TO_ADDR
// if medicCount > 0 then
11622: LD_VAR 0 7
11626: PUSH
11627: LD_INT 0
11629: GREATER
11630: IFFALSE 11704
// begin if damageUnit_list > 0 then
11632: LD_VAR 0 17
11636: PUSH
11637: LD_INT 0
11639: GREATER
11640: IFFALSE 11704
// begin for i in damageUnit_list do
11642: LD_ADDR_VAR 0 14
11646: PUSH
11647: LD_VAR 0 17
11651: PUSH
11652: FOR_IN
11653: IFFALSE 11702
// begin ComMoveToArea ( i , healArea ) ;
11655: LD_VAR 0 14
11659: PPUSH
11660: LD_VAR 0 10
11664: PPUSH
11665: CALL_OW 113
// for j in medic_list do
11669: LD_ADDR_VAR 0 15
11673: PUSH
11674: LD_VAR 0 18
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11698
// AddComHeal ( j , i ) ;
11682: LD_VAR 0 15
11686: PPUSH
11687: LD_VAR 0 14
11691: PPUSH
11692: CALL_OW 188
11696: GO 11679
11698: POP
11699: POP
// end ;
11700: GO 11652
11702: POP
11703: POP
// end ; end ; for i in soldiersOK_list do
11704: LD_ADDR_VAR 0 14
11708: PUSH
11709: LD_VAR 0 19
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11897
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11717: LD_ADDR_VAR 0 22
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_VAR 0 11
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 45
11743: DIFF
11744: PPUSH
11745: LD_VAR 0 14
11749: PPUSH
11750: CALL_OW 74
11754: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11755: LD_ADDR_VAR 0 23
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_VAR 0 11
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 59
11777: PUSH
11778: EMPTY
11779: LIST
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 21
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: PPUSH
11814: CALL_OW 69
11818: PPUSH
11819: LD_VAR 0 14
11823: PPUSH
11824: CALL_OW 74
11828: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11829: LD_VAR 0 14
11833: PPUSH
11834: LD_VAR 0 22
11838: PPUSH
11839: CALL_OW 296
11843: PUSH
11844: LD_INT 8
11846: PLUS
11847: PUSH
11848: LD_VAR 0 14
11852: PPUSH
11853: LD_VAR 0 23
11857: PPUSH
11858: CALL_OW 296
11862: LESS
11863: IFFALSE 11881
// begin ComAttackUnit ( i , target1 ) ;
11865: LD_VAR 0 14
11869: PPUSH
11870: LD_VAR 0 22
11874: PPUSH
11875: CALL_OW 115
// end else
11879: GO 11895
// begin ComAttackUnit ( i , target2 ) ;
11881: LD_VAR 0 14
11885: PPUSH
11886: LD_VAR 0 23
11890: PPUSH
11891: CALL_OW 115
// end ; end ;
11895: GO 11714
11897: POP
11898: POP
// for i in soldiersOK_list do
11899: LD_ADDR_VAR 0 14
11903: PUSH
11904: LD_VAR 0 19
11908: PUSH
11909: FOR_IN
11910: IFFALSE 12092
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11912: LD_ADDR_VAR 0 22
11916: PUSH
11917: LD_INT 22
11919: PUSH
11920: LD_VAR 0 11
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 69
11933: PUSH
11934: LD_EXP 45
11938: DIFF
11939: PPUSH
11940: LD_VAR 0 14
11944: PPUSH
11945: CALL_OW 74
11949: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11950: LD_ADDR_VAR 0 23
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_VAR 0 11
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: LD_INT 59
11972: PUSH
11973: EMPTY
11974: LIST
11975: PUSH
11976: LD_INT 21
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 21
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PPUSH
12014: LD_VAR 0 14
12018: PPUSH
12019: CALL_OW 74
12023: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12024: LD_VAR 0 14
12028: PPUSH
12029: LD_VAR 0 22
12033: PPUSH
12034: CALL_OW 296
12038: PUSH
12039: LD_INT 8
12041: PLUS
12042: PUSH
12043: LD_VAR 0 14
12047: PPUSH
12048: LD_VAR 0 23
12052: PPUSH
12053: CALL_OW 296
12057: LESS
12058: IFFALSE 12076
// begin ComAttackUnit ( i , target1 ) ;
12060: LD_VAR 0 14
12064: PPUSH
12065: LD_VAR 0 22
12069: PPUSH
12070: CALL_OW 115
// end else
12074: GO 12090
// begin ComAttackUnit ( i , target2 ) ;
12076: LD_VAR 0 14
12080: PPUSH
12081: LD_VAR 0 23
12085: PPUSH
12086: CALL_OW 115
// end ; end ;
12090: GO 11909
12092: POP
12093: POP
// until soldiersOK_list = [ ] ;
12094: LD_VAR 0 19
12098: PUSH
12099: EMPTY
12100: EQUAL
12101: IFFALSE 11467
// end ; if strategy = 2 then
12103: LD_VAR 0 12
12107: PUSH
12108: LD_INT 2
12110: EQUAL
12111: IFFALSE 12816
// begin repeat wait ( 0 0$1 ) ;
12113: LD_INT 35
12115: PPUSH
12116: CALL_OW 67
// for i in soldiersOK_list do
12120: LD_ADDR_VAR 0 14
12124: PUSH
12125: LD_VAR 0 19
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12165
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12133: LD_VAR 0 14
12137: PPUSH
12138: LD_INT 117
12140: PPUSH
12141: LD_INT 97
12143: PPUSH
12144: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12148: LD_VAR 0 14
12152: PPUSH
12153: LD_INT 94
12155: PPUSH
12156: LD_INT 50
12158: PPUSH
12159: CALL_OW 174
// end ;
12163: GO 12130
12165: POP
12166: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12167: LD_INT 14
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 70
12186: PUSH
12187: LD_INT 0
12189: GREATER
12190: IFFALSE 12113
// repeat wait ( 0 0$3 ) ;
12192: LD_INT 105
12194: PPUSH
12195: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12199: LD_ADDR_VAR 0 17
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_VAR 0 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 1
12218: PUSH
12219: LD_INT 3
12221: PUSH
12222: LD_INT 24
12224: PUSH
12225: LD_INT 550
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 24
12238: PUSH
12239: LD_INT 250
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12260: LD_ADDR_VAR 0 19
12264: PUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 25
12282: PUSH
12283: LD_INT 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 25
12292: PUSH
12293: LD_INT 5
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 25
12302: PUSH
12303: LD_INT 8
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 25
12312: PUSH
12313: LD_INT 9
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 24
12329: PUSH
12330: LD_INT 1000
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: ST_TO_ADDR
// if medicCount > 0 then
12347: LD_VAR 0 7
12351: PUSH
12352: LD_INT 0
12354: GREATER
12355: IFFALSE 12429
// begin if damageUnit_list > 0 then
12357: LD_VAR 0 17
12361: PUSH
12362: LD_INT 0
12364: GREATER
12365: IFFALSE 12429
// begin for i in damageUnit_list do
12367: LD_ADDR_VAR 0 14
12371: PUSH
12372: LD_VAR 0 17
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12427
// begin ComMoveToArea ( i , healArea ) ;
12380: LD_VAR 0 14
12384: PPUSH
12385: LD_VAR 0 10
12389: PPUSH
12390: CALL_OW 113
// for j in medic_list do
12394: LD_ADDR_VAR 0 15
12398: PUSH
12399: LD_VAR 0 18
12403: PUSH
12404: FOR_IN
12405: IFFALSE 12423
// AddComHeal ( j , i ) ;
12407: LD_VAR 0 15
12411: PPUSH
12412: LD_VAR 0 14
12416: PPUSH
12417: CALL_OW 188
12421: GO 12404
12423: POP
12424: POP
// end ;
12425: GO 12377
12427: POP
12428: POP
// end ; end ; for i in soldiersOK_list do
12429: LD_ADDR_VAR 0 14
12433: PUSH
12434: LD_VAR 0 19
12438: PUSH
12439: FOR_IN
12440: IFFALSE 12616
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12442: LD_ADDR_VAR 0 22
12446: PUSH
12447: LD_INT 22
12449: PUSH
12450: LD_VAR 0 11
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: PPUSH
12464: LD_VAR 0 14
12468: PPUSH
12469: CALL_OW 74
12473: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12474: LD_ADDR_VAR 0 23
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_VAR 0 11
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 59
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 21
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: PPUSH
12533: CALL_OW 69
12537: PPUSH
12538: LD_VAR 0 14
12542: PPUSH
12543: CALL_OW 74
12547: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12548: LD_VAR 0 14
12552: PPUSH
12553: LD_VAR 0 22
12557: PPUSH
12558: CALL_OW 296
12562: PUSH
12563: LD_INT 8
12565: PLUS
12566: PUSH
12567: LD_VAR 0 14
12571: PPUSH
12572: LD_VAR 0 23
12576: PPUSH
12577: CALL_OW 296
12581: LESS
12582: IFFALSE 12600
// begin ComAttackUnit ( i , target1 ) ;
12584: LD_VAR 0 14
12588: PPUSH
12589: LD_VAR 0 22
12593: PPUSH
12594: CALL_OW 115
// end else
12598: GO 12614
// begin ComAttackUnit ( i , target2 ) ;
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_VAR 0 23
12609: PPUSH
12610: CALL_OW 115
// end ; end ;
12614: GO 12439
12616: POP
12617: POP
// for i in soldiersOK_list do
12618: LD_ADDR_VAR 0 14
12622: PUSH
12623: LD_VAR 0 19
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12805
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12631: LD_ADDR_VAR 0 22
12635: PUSH
12636: LD_INT 22
12638: PUSH
12639: LD_VAR 0 11
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: PPUSH
12653: LD_VAR 0 14
12657: PPUSH
12658: CALL_OW 74
12662: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12663: LD_ADDR_VAR 0 23
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_VAR 0 11
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: LD_INT 59
12685: PUSH
12686: EMPTY
12687: LIST
12688: PUSH
12689: LD_INT 21
12691: PUSH
12692: LD_INT 1
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 21
12701: PUSH
12702: LD_INT 2
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: PPUSH
12727: LD_VAR 0 14
12731: PPUSH
12732: CALL_OW 74
12736: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12737: LD_VAR 0 14
12741: PPUSH
12742: LD_VAR 0 22
12746: PPUSH
12747: CALL_OW 296
12751: PUSH
12752: LD_INT 8
12754: PLUS
12755: PUSH
12756: LD_VAR 0 14
12760: PPUSH
12761: LD_VAR 0 23
12765: PPUSH
12766: CALL_OW 296
12770: LESS
12771: IFFALSE 12789
// begin ComAttackUnit ( i , target1 ) ;
12773: LD_VAR 0 14
12777: PPUSH
12778: LD_VAR 0 22
12782: PPUSH
12783: CALL_OW 115
// end else
12787: GO 12803
// begin ComAttackUnit ( i , target2 ) ;
12789: LD_VAR 0 14
12793: PPUSH
12794: LD_VAR 0 23
12798: PPUSH
12799: CALL_OW 115
// end ; end ;
12803: GO 12628
12805: POP
12806: POP
// until soldiersOK_list = [ ] ;
12807: LD_VAR 0 19
12811: PUSH
12812: EMPTY
12813: EQUAL
12814: IFFALSE 12192
// end ; end ; end_of_file
12816: LD_VAR 0 13
12820: RET
// every 0 0$01 do
12821: GO 12823
12823: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12824: LD_INT 22
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 25
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: PUSH
12853: LD_INT 0
12855: EQUAL
12856: IFFALSE 12870
// SetClass ( JMM , 2 ) ;
12858: LD_EXP 1
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12870: LD_STRING M1
12872: PPUSH
12873: CALL_OW 337
// case difficulty of 1 :
12877: LD_OWVAR 67
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12900
12890: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12891: LD_STRING M1-1
12893: PPUSH
12894: CALL_OW 337
12898: GO 12937
12900: LD_INT 2
12902: DOUBLE
12903: EQUAL
12904: IFTRUE 12908
12906: GO 12918
12908: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12909: LD_STRING M1-2
12911: PPUSH
12912: CALL_OW 337
12916: GO 12937
12918: LD_INT 3
12920: DOUBLE
12921: EQUAL
12922: IFTRUE 12926
12924: GO 12936
12926: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12927: LD_STRING M1-3
12929: PPUSH
12930: CALL_OW 337
12934: GO 12937
12936: POP
// ChangeMissionObjectives ( M1cont ) ;
12937: LD_STRING M1cont
12939: PPUSH
12940: CALL_OW 337
// SaveForQuickRestart ;
12944: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12948: LD_INT 525
12950: PPUSH
12951: LD_INT 700
12953: PPUSH
12954: CALL_OW 12
12958: PPUSH
12959: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12963: LD_INT 5
12965: PPUSH
12966: LD_INT 82
12968: PPUSH
12969: LD_INT 38
12971: PPUSH
12972: LD_INT 10
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 56
// wait ( 0 0$14 ) ;
12982: LD_INT 490
12984: PPUSH
12985: CALL_OW 67
// firstCrateSpawn := true ;
12989: LD_ADDR_EXP 41
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// end ;
12997: END
// every 0 0$02 trigger firstCrateSpawn do
12998: LD_EXP 41
13002: IFFALSE 13365
13004: GO 13006
13006: DISABLE
// begin if IsOk ( Lisa ) then
13007: LD_EXP 2
13011: PPUSH
13012: CALL_OW 302
13016: IFFALSE 13032
// Say ( Lisa , DR0-Lisa-1 ) else
13018: LD_EXP 2
13022: PPUSH
13023: LD_STRING DR0-Lisa-1
13025: PPUSH
13026: CALL_OW 88
13030: GO 13178
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13032: LD_INT 22
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 25
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 25
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 4
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: PUSH
13123: LD_EXP 1
13127: PUSH
13128: LD_EXP 8
13132: PUSH
13133: LD_EXP 5
13137: PUSH
13138: LD_EXP 6
13142: PUSH
13143: LD_EXP 7
13147: PUSH
13148: LD_EXP 4
13152: PUSH
13153: LD_EXP 3
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: DIFF
13167: PPUSH
13168: LD_STRING DR0-Sol1-1
13170: PPUSH
13171: LD_STRING DR0-Sol1-1
13173: PPUSH
13174: CALL 6214 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13178: LD_INT 22
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 26
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 25
13223: PUSH
13224: LD_INT 2
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 4
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: PUSH
13269: LD_EXP 1
13273: PUSH
13274: LD_EXP 8
13278: PUSH
13279: LD_EXP 5
13283: PUSH
13284: LD_EXP 2
13288: PUSH
13289: LD_EXP 6
13293: PUSH
13294: LD_EXP 7
13298: PUSH
13299: LD_EXP 4
13303: PUSH
13304: LD_EXP 3
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: DIFF
13319: PPUSH
13320: LD_STRING DR0-Sol2-1
13322: PPUSH
13323: LD_STRING DR0-Sol2-1
13325: PPUSH
13326: CALL 6214 0 3
// if IsOk ( Cyrus ) then
13330: LD_EXP 4
13334: PPUSH
13335: CALL_OW 302
13339: IFFALSE 13353
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13341: LD_EXP 4
13345: PPUSH
13346: LD_STRING DR0-Cyrus-1
13348: PPUSH
13349: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13353: LD_EXP 1
13357: PPUSH
13358: LD_STRING DR0-JMM-1
13360: PPUSH
13361: CALL_OW 88
// end ;
13365: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13366: LD_EXP 5
13370: PPUSH
13371: CALL_OW 302
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 16
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: PUSH
13405: LD_INT 0
13407: GREATER
13408: AND
13409: PUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 463
13417: NOT
13418: AND
13419: IFFALSE 13697
13421: GO 13423
13423: DISABLE
// begin DialogueOn ;
13424: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13428: LD_EXP 5
13432: PPUSH
13433: LD_STRING D10-Frank-1
13435: PPUSH
13436: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13440: LD_INT 22
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 25
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: PUSH
13520: LD_EXP 1
13524: PUSH
13525: LD_EXP 5
13529: PUSH
13530: LD_EXP 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: DIFF
13540: PPUSH
13541: LD_STRING D10-Sol1-1
13543: PPUSH
13544: LD_STRING D10-FSol1-1
13546: PPUSH
13547: CALL 6214 0 3
// Say ( Frank , D10-Frank-2 ) ;
13551: LD_EXP 5
13555: PPUSH
13556: LD_STRING D10-Frank-2
13558: PPUSH
13559: CALL_OW 88
// if IsOK ( Lisa ) then
13563: LD_EXP 2
13567: PPUSH
13568: CALL_OW 302
13572: IFFALSE 13588
// begin Say ( Lisa , D10-Lisa-2 ) ;
13574: LD_EXP 2
13578: PPUSH
13579: LD_STRING D10-Lisa-2
13581: PPUSH
13582: CALL_OW 88
// end else
13586: GO 13693
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 1
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 25
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 25
13633: PUSH
13634: LD_INT 3
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 25
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PUSH
13668: LD_EXP 1
13672: PUSH
13673: LD_EXP 5
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: DIFF
13682: PPUSH
13683: LD_STRING D10-Sol1-2
13685: PPUSH
13686: LD_STRING D10-FSol1-2
13688: PPUSH
13689: CALL 6214 0 3
// end ; DialogueOff ;
13693: CALL_OW 7
// end ;
13697: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 463
13705: NOT
13706: IFFALSE 14001
13708: GO 13710
13710: DISABLE
// begin HarrisonSupport ;
13711: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13715: LD_EXP 17
13719: PPUSH
13720: CALL_OW 310
13724: PPUSH
13725: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13729: LD_EXP 17
13733: PPUSH
13734: LD_STRING DEng-Eng1-1
13736: PPUSH
13737: CALL_OW 88
// wait ( 1 1$0 ) ;
13741: LD_INT 2100
13743: PPUSH
13744: CALL_OW 67
// DialogueOn ;
13748: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13752: LD_EXP 14
13756: PPUSH
13757: LD_STRING DRem-Har-1
13759: PPUSH
13760: CALL_OW 94
// if contactWithRussian = 1 then
13764: LD_EXP 22
13768: PUSH
13769: LD_INT 1
13771: EQUAL
13772: IFFALSE 13788
// begin Say ( JMM , DRem-JMM-1 ) ;
13774: LD_EXP 1
13778: PPUSH
13779: LD_STRING DRem-JMM-1
13781: PPUSH
13782: CALL_OW 88
// end else
13786: GO 13800
// begin Say ( JMM , DRem-JMM-1a ) ;
13788: LD_EXP 1
13792: PPUSH
13793: LD_STRING DRem-JMM-1a
13795: PPUSH
13796: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13800: LD_EXP 14
13804: PPUSH
13805: LD_STRING DRem-Har-2
13807: PPUSH
13808: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13812: LD_STRING DenisInDelta
13814: PPUSH
13815: LD_INT 0
13817: PPUSH
13818: CALL_OW 30
13822: PUSH
13823: LD_INT 1
13825: EQUAL
13826: IFFALSE 13842
// begin Say ( JMM , DRem-JMM-2 ) ;
13828: LD_EXP 1
13832: PPUSH
13833: LD_STRING DRem-JMM-2
13835: PPUSH
13836: CALL_OW 88
// end else
13840: GO 13854
// begin Say ( JMM , DRem-JMM-2a ) ;
13842: LD_EXP 1
13846: PPUSH
13847: LD_STRING DRem-JMM-2a
13849: PPUSH
13850: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13854: LD_EXP 14
13858: PPUSH
13859: LD_STRING DRem-Har-3
13861: PPUSH
13862: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13866: LD_EXP 1
13870: PPUSH
13871: LD_STRING DRem-JMM-3
13873: PPUSH
13874: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13878: LD_EXP 14
13882: PPUSH
13883: LD_STRING DRem-Har-4
13885: PPUSH
13886: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13890: LD_STRING DenisInDelta
13892: PPUSH
13893: LD_INT 0
13895: PPUSH
13896: CALL_OW 30
13900: PUSH
13901: LD_INT 1
13903: EQUAL
13904: IFFALSE 13964
// begin Say ( JMM , DRem-JMM-4 ) ;
13906: LD_EXP 1
13910: PPUSH
13911: LD_STRING DRem-JMM-4
13913: PPUSH
13914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13918: LD_EXP 14
13922: PPUSH
13923: LD_STRING DRem-Har-5
13925: PPUSH
13926: CALL_OW 94
// DialogueOff ;
13930: CALL_OW 7
// wait ( 4 4$00 ) ;
13934: LD_INT 8400
13936: PPUSH
13937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13941: LD_INT 35
13943: PPUSH
13944: CALL_OW 67
// until not InBattle ( 1 ) ;
13948: LD_INT 1
13950: PPUSH
13951: CALL_OW 463
13955: NOT
13956: IFFALSE 13941
// SpawnDenis ;
13958: CALL 14002 0 0
// end else
13962: GO 14001
// begin DialogueOff ;
13964: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13968: LD_INT 36
13970: PPUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13981: LD_INT 15
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13994: LD_STRING MR
13996: PPUSH
13997: CALL_OW 337
// end ; end ;
14001: END
// export function SpawnDenis ; var tmp ; begin
14002: LD_INT 0
14004: PPUSH
14005: PPUSH
// PrepareDenis ;
14006: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
14010: LD_EXP 9
14014: PPUSH
14015: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14039: LD_EXP 9
14043: PPUSH
14044: LD_VAR 0 2
14048: PPUSH
14049: LD_EXP 9
14053: PPUSH
14054: CALL_OW 74
14058: PPUSH
14059: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14063: LD_INT 35
14065: PPUSH
14066: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14070: LD_INT 22
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 91
14082: PUSH
14083: LD_EXP 9
14087: PUSH
14088: LD_INT 10
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: IFFALSE 14063
// SetSide ( Denis , 1 ) ;
14106: LD_EXP 9
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 235
// DialogueOn ;
14118: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14122: LD_EXP 9
14126: PPUSH
14127: LD_STRING DDen-Den-1
14129: PPUSH
14130: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14134: LD_EXP 1
14138: PPUSH
14139: LD_STRING DDen-JMM-1
14141: PPUSH
14142: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14146: LD_EXP 9
14150: PPUSH
14151: LD_STRING DDen-Den-2
14153: PPUSH
14154: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14158: LD_EXP 1
14162: PPUSH
14163: LD_STRING DDen-JMM-2
14165: PPUSH
14166: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14170: LD_EXP 9
14174: PPUSH
14175: LD_STRING DDen-Den-3
14177: PPUSH
14178: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14182: LD_EXP 1
14186: PPUSH
14187: LD_STRING DDen-JMM-3
14189: PPUSH
14190: CALL_OW 88
// DialogueOff ;
14194: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14198: LD_INT 36
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14211: LD_INT 15
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14224: LD_STRING MR
14226: PPUSH
14227: CALL_OW 337
// end ;
14231: LD_VAR 0 1
14235: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14236: CALL 14291 0 0
14240: PUSH
14241: LD_EXP 9
14245: PPUSH
14246: CALL_OW 302
14250: AND
14251: PUSH
14252: LD_INT 1
14254: PPUSH
14255: CALL_OW 463
14259: NOT
14260: AND
14261: IFFALSE 14290
14263: GO 14265
14265: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14266: LD_EXP 9
14270: PPUSH
14271: LD_STRING DR1-Den-1
14273: PPUSH
14274: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14278: LD_EXP 1
14282: PPUSH
14283: LD_STRING DR1-JMM-1
14285: PPUSH
14286: CALL_OW 88
// end ;
14290: END
// function CheckOptoLab ; var i ; begin
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
// result = false ;
14295: LD_ADDR_VAR 0 1
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 2
14320: PUSH
14321: LD_INT 30
14323: PUSH
14324: LD_INT 7
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 30
14333: PUSH
14334: LD_INT 8
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PPUSH
14350: CALL_OW 69
14354: PUSH
14355: FOR_IN
14356: IFFALSE 14408
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 268
14370: PUSH
14371: LD_INT 15
14373: EQUAL
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_INT 2
14382: PPUSH
14383: CALL_OW 268
14387: PUSH
14388: LD_INT 15
14390: EQUAL
14391: OR
14392: IFFALSE 14404
// begin result = true ;
14394: LD_ADDR_VAR 0 1
14398: PUSH
14399: LD_INT 1
14401: ST_TO_ADDR
// break ;
14402: GO 14408
// end ; break ;
14404: GO 14408
// end ;
14406: GO 14355
14408: POP
14409: POP
// end ;
14410: LD_VAR 0 1
14414: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14415: LD_INT 15
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: PUSH
14430: LD_EXP 9
14434: PPUSH
14435: CALL_OW 302
14439: AND
14440: PUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 463
14448: NOT
14449: AND
14450: IFFALSE 14682
14452: GO 14454
14454: DISABLE
// begin DialogueOn ;
14455: CALL_OW 6
// if IsOK ( Denis ) then
14459: LD_EXP 9
14463: PPUSH
14464: CALL_OW 302
14468: IFFALSE 14484
// begin Say ( Denis , DR2-Den-1 ) ;
14470: LD_EXP 9
14474: PPUSH
14475: LD_STRING DR2-Den-1
14477: PPUSH
14478: CALL_OW 88
// end else
14482: GO 14543
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14484: LD_INT 22
14486: PUSH
14487: LD_INT 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 25
14506: PUSH
14507: LD_INT 4
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: PUSH
14524: LD_EXP 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: DIFF
14532: PPUSH
14533: LD_STRING DR2-Sci1-1
14535: PPUSH
14536: LD_STRING DR2-FSci1-1
14538: PPUSH
14539: CALL 6214 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14543: LD_EXP 1
14547: PPUSH
14548: LD_STRING DR2-JMM-1
14550: PPUSH
14551: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14555: LD_INT 22
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 21
14567: PUSH
14568: LD_INT 1
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 25
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 25
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 25
14610: PUSH
14611: LD_INT 4
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: PUSH
14635: LD_EXP 1
14639: PUSH
14640: LD_EXP 9
14644: PUSH
14645: LD_EXP 8
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: DIFF
14655: PPUSH
14656: LD_STRING DR2-Sol1-1
14658: PPUSH
14659: LD_STRING DR2-Sol1-11
14661: PPUSH
14662: CALL 6214 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14666: LD_EXP 1
14670: PPUSH
14671: LD_STRING DR2-JMM-2
14673: PPUSH
14674: CALL_OW 88
// DialogueOff ;
14678: CALL_OW 7
// end ;
14682: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14683: LD_INT 22
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 30
14695: PUSH
14696: LD_INT 36
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: PUSH
14712: LD_INT 0
14714: EQUAL
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 21
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 69
14755: PUSH
14756: LD_INT 0
14758: GREATER
14759: AND
14760: PUSH
14761: LD_EXP 23
14765: PUSH
14766: LD_INT 0
14768: EQUAL
14769: AND
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 463
14778: NOT
14779: AND
14780: IFFALSE 14906
14782: GO 14784
14784: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14785: LD_INT 22
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 69
14824: PUSH
14825: LD_EXP 1
14829: PUSH
14830: LD_EXP 6
14834: PUSH
14835: LD_EXP 7
14839: PUSH
14840: LD_EXP 9
14844: PUSH
14845: LD_EXP 15
14849: PUSH
14850: LD_EXP 3
14854: PUSH
14855: LD_EXP 4
14859: PUSH
14860: LD_EXP 2
14864: PUSH
14865: LD_EXP 5
14869: PUSH
14870: LD_EXP 8
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: DIFF
14887: PPUSH
14888: LD_STRING D3a-Mech1-1
14890: PPUSH
14891: LD_STRING D3a-Mech1-1
14893: PPUSH
14894: CALL 6214 0 3
// firstTower = 2 ;
14898: LD_ADDR_EXP 23
14902: PUSH
14903: LD_INT 2
14905: ST_TO_ADDR
// end ;
14906: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14907: LD_INT 22
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: PUSH
14936: LD_INT 0
14938: EQUAL
14939: IFFALSE 15054
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14947: LD_ADDR_VAR 0 1
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: LD_INT 25
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 25
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 25
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 4
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15052
// AddExperience ( i , 1 , 10000 ) ;
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: LD_INT 10000
15045: PPUSH
15046: CALL_OW 492
15050: GO 15032
15052: POP
15053: POP
// end ;
15054: PPOPN 1
15056: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15057: LD_INT 22
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: LD_INT 36
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 69
15085: PUSH
15086: LD_INT 0
15088: GREATER
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 33
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: PPUSH
15125: CALL_OW 69
15129: PUSH
15130: LD_INT 0
15132: GREATER
15133: AND
15134: PUSH
15135: CALL 15727 0 0
15139: AND
15140: PUSH
15141: LD_INT 1
15143: PPUSH
15144: CALL_OW 463
15148: NOT
15149: AND
15150: IFFALSE 15724
15152: GO 15154
15154: DISABLE
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15162: LD_ADDR_VAR 0 3
15166: PUSH
15167: LD_INT 22
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 30
15179: PUSH
15180: LD_INT 36
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 69
15195: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15196: LD_ADDR_VAR 0 4
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15241: LD_ADDR_VAR 0 5
15245: PUSH
15246: EMPTY
15247: ST_TO_ADDR
// for i in tmpControlTowers do
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_VAR 0 3
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15722
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15261: LD_EXP 1
15265: PPUSH
15266: CALL_OW 310
15270: PUSH
15271: LD_VAR 0 1
15275: EQUAL
15276: PUSH
15277: LD_EXP 1
15281: PPUSH
15282: CALL_OW 257
15286: PUSH
15287: LD_INT 3
15289: EQUAL
15290: AND
15291: IFFALSE 15421
// begin InGameOn ;
15293: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15310: LD_EXP 1
15314: PPUSH
15315: LD_STRING D4a-JMM-1
15317: PPUSH
15318: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15322: LD_VAR 0 4
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: LD_EXP 1
15335: PPUSH
15336: CALL_OW 53
// wait ( 0 0$1 ) ;
15340: LD_INT 35
15342: PPUSH
15343: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15347: LD_VAR 0 4
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: LD_VAR 0 4
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: CALL_OW 250
15369: PUSH
15370: LD_INT 3
15372: PLUS
15373: PPUSH
15374: LD_VAR 0 4
15378: PUSH
15379: LD_INT 1
15381: ARRAY
15382: PPUSH
15383: CALL_OW 251
15387: PUSH
15388: LD_INT 2
15390: MINUS
15391: PPUSH
15392: CALL_OW 111
// wait ( 0 0$2 ) ;
15396: LD_INT 70
15398: PPUSH
15399: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15403: LD_EXP 1
15407: PPUSH
15408: LD_STRING D4b-JMM-1
15410: PPUSH
15411: CALL_OW 88
// InGameOff ;
15415: CALL_OW 9
// end else
15419: GO 15720
// begin InGameOn ;
15421: CALL_OW 8
// for j in UnitsInside ( i ) do
15425: LD_ADDR_VAR 0 2
15429: PUSH
15430: LD_VAR 0 1
15434: PPUSH
15435: CALL_OW 313
15439: PUSH
15440: FOR_IN
15441: IFFALSE 15476
// if GetClass ( j ) = 3 then
15443: LD_VAR 0 2
15447: PPUSH
15448: CALL_OW 257
15452: PUSH
15453: LD_INT 3
15455: EQUAL
15456: IFFALSE 15474
// tmpMechanicInside = tmpMechanicInside ^ j ;
15458: LD_ADDR_VAR 0 5
15462: PUSH
15463: LD_VAR 0 5
15467: PUSH
15468: LD_VAR 0 2
15472: ADD
15473: ST_TO_ADDR
15474: GO 15440
15476: POP
15477: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PPUSH
15487: CALL_OW 258
15491: PUSH
15492: LD_INT 1
15494: EQUAL
15495: IFFALSE 15513
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15497: LD_VAR 0 5
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: PPUSH
15506: LD_STRING D4a-Mech1-1
15508: PPUSH
15509: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15513: LD_VAR 0 5
15517: PUSH
15518: LD_INT 1
15520: ARRAY
15521: PPUSH
15522: CALL_OW 258
15526: PUSH
15527: LD_INT 2
15529: EQUAL
15530: IFFALSE 15548
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15532: LD_VAR 0 5
15536: PUSH
15537: LD_INT 1
15539: ARRAY
15540: PPUSH
15541: LD_STRING D4a-FMech1-1
15543: PPUSH
15544: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15548: LD_VAR 0 4
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15561: LD_VAR 0 4
15565: PUSH
15566: LD_INT 1
15568: ARRAY
15569: PPUSH
15570: LD_VAR 0 5
15574: PUSH
15575: LD_INT 1
15577: ARRAY
15578: PPUSH
15579: CALL_OW 53
// wait ( 0 0$1 ) ;
15583: LD_INT 35
15585: PPUSH
15586: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15590: LD_VAR 0 4
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: LD_VAR 0 4
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: PPUSH
15608: CALL_OW 250
15612: PUSH
15613: LD_INT 3
15615: PLUS
15616: PPUSH
15617: LD_VAR 0 4
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: CALL_OW 251
15630: PUSH
15631: LD_INT 2
15633: MINUS
15634: PPUSH
15635: CALL_OW 111
// wait ( 0 0$2 ) ;
15639: LD_INT 70
15641: PPUSH
15642: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15646: LD_VAR 0 5
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PPUSH
15655: CALL_OW 258
15659: PUSH
15660: LD_INT 1
15662: EQUAL
15663: IFFALSE 15681
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15665: LD_VAR 0 5
15669: PUSH
15670: LD_INT 1
15672: ARRAY
15673: PPUSH
15674: LD_STRING D4b-Mech1-1
15676: PPUSH
15677: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15681: LD_VAR 0 5
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: CALL_OW 258
15694: PUSH
15695: LD_INT 2
15697: EQUAL
15698: IFFALSE 15716
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15700: LD_VAR 0 5
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: LD_STRING D4b-FMech1-1
15711: PPUSH
15712: CALL_OW 88
// InGameOff ;
15716: CALL_OW 9
// end ; end ;
15720: GO 15258
15722: POP
15723: POP
// end ;
15724: PPOPN 5
15726: END
// function CheckMehInside ; var i , j ; begin
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
15731: PPUSH
// result = false ;
15732: LD_ADDR_VAR 0 1
15736: PUSH
15737: LD_INT 0
15739: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 1
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 36
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: FOR_IN
15775: IFFALSE 15826
// begin for j in UnitsInside ( i ) do
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_VAR 0 2
15786: PPUSH
15787: CALL_OW 313
15791: PUSH
15792: FOR_IN
15793: IFFALSE 15822
// begin if GetClass ( j ) = 3 then
15795: LD_VAR 0 3
15799: PPUSH
15800: CALL_OW 257
15804: PUSH
15805: LD_INT 3
15807: EQUAL
15808: IFFALSE 15820
// begin result = true ;
15810: LD_ADDR_VAR 0 1
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// break ;
15818: GO 15822
// end ; end ;
15820: GO 15792
15822: POP
15823: POP
// end ;
15824: GO 15774
15826: POP
15827: POP
// end ;
15828: LD_VAR 0 1
15832: RET
// every 25 25$0 do
15833: GO 15835
15835: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// until not InBattle ( 1 ) ;
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 463
15850: NOT
15851: IFFALSE 15836
// PrepareKurt ;
15853: CALL 19478 0 0
// end ;
15857: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 do
15858: LD_EXP 15
15862: PPUSH
15863: CALL_OW 302
15867: PUSH
15868: LD_EXP 15
15872: PPUSH
15873: CALL_OW 255
15877: PUSH
15878: LD_INT 1
15880: EQUAL
15881: AND
15882: IFFALSE 16047
15884: GO 15886
15886: DISABLE
// begin wait ( 0 0$20 ) ;
15887: LD_INT 700
15889: PPUSH
15890: CALL_OW 67
// if not IsOk ( Joan ) then
15894: LD_EXP 15
15898: PPUSH
15899: CALL_OW 302
15903: NOT
15904: IFFALSE 15908
// exit ;
15906: GO 16047
// if IsOK ( Lisa ) then
15908: LD_EXP 2
15912: PPUSH
15913: CALL_OW 302
15917: IFFALSE 16047
// begin DialogueOn ;
15919: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15923: LD_EXP 2
15927: PPUSH
15928: LD_STRING D7-Lisa-1
15930: PPUSH
15931: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15935: LD_EXP 1
15939: PPUSH
15940: LD_STRING D7-JMM-1
15942: PPUSH
15943: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15947: LD_EXP 2
15951: PPUSH
15952: LD_STRING D7-Lisa-2
15954: PPUSH
15955: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15959: LD_EXP 1
15963: PPUSH
15964: LD_STRING D7-JMM-2
15966: PPUSH
15967: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15971: LD_EXP 2
15975: PPUSH
15976: LD_STRING D7-Lisa-3
15978: PPUSH
15979: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15983: LD_EXP 1
15987: PPUSH
15988: LD_STRING D7-JMM-3
15990: PPUSH
15991: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15995: LD_EXP 2
15999: PPUSH
16000: LD_STRING D7-Lisa-4
16002: PPUSH
16003: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16007: LD_EXP 1
16011: PPUSH
16012: LD_STRING D7-JMM-4
16014: PPUSH
16015: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16019: LD_EXP 1
16023: PPUSH
16024: LD_STRING D7-JMM-4a
16026: PPUSH
16027: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16031: LD_EXP 2
16035: PPUSH
16036: LD_STRING D7-Lisa-5
16038: PPUSH
16039: CALL_OW 88
// DialogueOff ;
16043: CALL_OW 7
// end ; end ;
16047: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16048: LD_EXP 13
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 91
16065: PUSH
16066: LD_EXP 13
16070: PUSH
16071: LD_INT 10
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 25
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 25
16094: PUSH
16095: LD_INT 2
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 25
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 25
16114: PUSH
16115: LD_INT 4
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: PPUSH
16134: CALL_OW 69
16138: PUSH
16139: LD_INT 1
16141: GREATER
16142: AND
16143: IFFALSE 16160
16145: GO 16147
16147: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16148: LD_EXP 13
16152: PPUSH
16153: LD_STRING D5-Sol1-1
16155: PPUSH
16156: CALL_OW 88
// end ;
16160: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16161: LD_INT 22
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 33
16173: PUSH
16174: LD_INT 2
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PPUSH
16185: CALL_OW 69
16189: PUSH
16190: LD_INT 2
16192: GREATEREQUAL
16193: IFFALSE 16213
16195: GO 16197
16197: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16198: LD_STRING MRa
16200: PPUSH
16201: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16205: LD_ADDR_EXP 28
16209: PUSH
16210: LD_INT 1
16212: ST_TO_ADDR
// end ;
16213: END
// every 2 2$00 do var i , last ;
16214: GO 16216
16216: DISABLE
16217: LD_INT 0
16219: PPUSH
16220: PPUSH
// begin last := 8 ;
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: LD_INT 8
16228: ST_TO_ADDR
// for i = 1 to last do
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: DOUBLE
16235: LD_INT 1
16237: DEC
16238: ST_TO_ADDR
16239: LD_VAR 0 2
16243: PUSH
16244: FOR_TO
16245: IFFALSE 16273
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16247: LD_INT 6300
16249: PPUSH
16250: LD_INT 12600
16252: PPUSH
16253: CALL_OW 12
16257: PPUSH
16258: CALL_OW 67
// PrepareRandoms ( i ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL 4052 0 1
// end ;
16271: GO 16244
16273: POP
16274: POP
// end ;
16275: PPOPN 2
16277: END
// every 5 5$20 do
16278: GO 16280
16280: DISABLE
// begin DialogueOn ;
16281: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16285: LD_EXP 10
16289: PPUSH
16290: LD_STRING D12a-Sci-1
16292: PPUSH
16293: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16297: LD_EXP 1
16301: PPUSH
16302: LD_STRING D12a-JMM-1
16304: PPUSH
16305: CALL_OW 88
// DialogueOff ;
16309: CALL_OW 7
// cratesStatus = 1 ;
16313: LD_ADDR_EXP 38
16317: PUSH
16318: LD_INT 1
16320: ST_TO_ADDR
// end ;
16321: END
// every 13 13$0 do
16322: GO 16324
16324: DISABLE
// begin DialogueOn ;
16325: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16329: LD_EXP 10
16333: PPUSH
16334: LD_STRING D12b-Sci-1
16336: PPUSH
16337: CALL_OW 94
// DialogueOff ;
16341: CALL_OW 7
// cratesStatus = 2 ;
16345: LD_ADDR_EXP 38
16349: PUSH
16350: LD_INT 2
16352: ST_TO_ADDR
// end ;
16353: END
// every 32 32$0 do
16354: GO 16356
16356: DISABLE
// begin DialogueOn ;
16357: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16361: LD_EXP 10
16365: PPUSH
16366: LD_STRING D12c-Sci-1
16368: PPUSH
16369: CALL_OW 94
// DialogueOff ;
16373: CALL_OW 7
// wait ( 3 3$0 ) ;
16377: LD_INT 6300
16379: PPUSH
16380: CALL_OW 67
// DialogueOn ;
16384: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16388: LD_EXP 10
16392: PPUSH
16393: LD_STRING D12d-Sci-1
16395: PPUSH
16396: CALL_OW 94
// DialogueOff ;
16400: CALL_OW 7
// cratesStatus = 1 ;
16404: LD_ADDR_EXP 38
16408: PUSH
16409: LD_INT 1
16411: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16412: LD_INT 1400
16414: PPUSH
16415: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16419: LD_INT 35
16421: PPUSH
16422: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16426: LD_INT 1
16428: PPUSH
16429: CALL_OW 463
16433: NOT
16434: PUSH
16435: LD_INT 32
16437: PPUSH
16438: LD_INT 81
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 70
16452: NOT
16453: AND
16454: IFFALSE 16419
// PrepareJoan ;
16456: CALL 3016 0 0
// end ;
16460: END
// every 42 42$0 do
16461: GO 16463
16463: DISABLE
// begin DialogueOn ;
16464: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16468: LD_EXP 10
16472: PPUSH
16473: LD_STRING D12e-Sci-1
16475: PPUSH
16476: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16480: LD_EXP 1
16484: PPUSH
16485: LD_STRING D12e-JMM-1
16487: PPUSH
16488: CALL_OW 88
// DialogueOff ;
16492: CALL_OW 7
// cratesStatus = 2 ;
16496: LD_ADDR_EXP 38
16500: PUSH
16501: LD_INT 2
16503: ST_TO_ADDR
// end ;
16504: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16505: LD_INT 22
16507: PUSH
16508: LD_INT 6
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 21
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 34
16527: PUSH
16528: LD_INT 51
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: PUSH
16545: LD_INT 0
16547: GREATER
16548: IFFALSE 16631
16550: GO 16552
16552: DISABLE
16553: LD_INT 0
16555: PPUSH
// begin enable ;
16556: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16557: LD_ADDR_VAR 0 1
16561: PUSH
16562: LD_INT 22
16564: PUSH
16565: LD_INT 6
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 2
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 21
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16629
// ComAgressiveMove ( i , 138 , 168 ) ;
16612: LD_VAR 0 1
16616: PPUSH
16617: LD_INT 138
16619: PPUSH
16620: LD_INT 168
16622: PPUSH
16623: CALL_OW 114
16627: GO 16609
16629: POP
16630: POP
// end ;
16631: PPOPN 1
16633: END
// every 0 0$1 do var i ;
16634: GO 16636
16636: DISABLE
16637: LD_INT 0
16639: PPUSH
// begin enable ;
16640: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_INT 4
16648: PPUSH
16649: LD_INT 2
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 22
16664: PUSH
16665: LD_INT 6
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: PPUSH
16680: CALL_OW 70
16684: PUSH
16685: FOR_IN
16686: IFFALSE 16750
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16688: LD_INT 4
16690: PPUSH
16691: LD_INT 22
16693: PUSH
16694: LD_INT 6
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 34
16703: PUSH
16704: LD_INT 51
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 70
16719: PUSH
16720: LD_INT 0
16722: GREATER
16723: IFFALSE 16739
// sendedConvoys = sendedConvoys + 1 ;
16725: LD_ADDR_EXP 39
16729: PUSH
16730: LD_EXP 39
16734: PUSH
16735: LD_INT 1
16737: PLUS
16738: ST_TO_ADDR
// RemoveUnit ( i ) ;
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 64
// end ;
16748: GO 16685
16750: POP
16751: POP
// end ; end_of_file
16752: PPOPN 1
16754: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16755: LD_VAR 0 1
16759: PUSH
16760: LD_INT 1
16762: EQUAL
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: LD_INT 3
16771: EQUAL
16772: AND
16773: IFFALSE 16783
// contactWithRussian = 1 ;
16775: LD_ADDR_EXP 22
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// end ;
16783: PPOPN 2
16785: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 266
16795: PUSH
16796: LD_INT 36
16798: EQUAL
16799: PUSH
16800: LD_VAR 0 1
16804: PPUSH
16805: CALL_OW 255
16809: PUSH
16810: LD_INT 1
16812: EQUAL
16813: AND
16814: PUSH
16815: LD_INT 22
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 21
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 33
16837: PUSH
16838: LD_INT 2
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PUSH
16855: LD_INT 0
16857: EQUAL
16858: AND
16859: PUSH
16860: LD_EXP 23
16864: PUSH
16865: LD_INT 0
16867: EQUAL
16868: AND
16869: IFFALSE 16949
// begin firstTower = 1 ;
16871: LD_ADDR_EXP 23
16875: PUSH
16876: LD_INT 1
16878: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16879: LD_INT 22
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 25
16901: PUSH
16902: LD_INT 3
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 26
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PPUSH
16925: CALL_OW 69
16929: PUSH
16930: LD_EXP 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: DIFF
16938: PPUSH
16939: LD_STRING D3b-Mech1-1
16941: PPUSH
16942: LD_STRING D3b-Mech1-1
16944: PPUSH
16945: CALL 6214 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 266
16958: PUSH
16959: LD_INT 0
16961: EQUAL
16962: PUSH
16963: LD_VAR 0 1
16967: PPUSH
16968: CALL_OW 255
16972: PUSH
16973: LD_INT 1
16975: EQUAL
16976: AND
16977: IFFALSE 16991
// SetBName ( building , theta ) ;
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_STRING theta
16986: PPUSH
16987: CALL_OW 500
// if GetSide ( building ) = 3 then
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 255
17000: PUSH
17001: LD_INT 3
17003: EQUAL
17004: IFFALSE 17078
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17006: LD_ADDR_EXP 31
17010: PUSH
17011: LD_EXP 31
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 3
17023: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17024: LD_ADDR_EXP 31
17028: PUSH
17029: LD_EXP 31
17033: PPUSH
17034: LD_INT 1
17036: PPUSH
17037: CALL_OW 3
17041: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17042: LD_ADDR_EXP 31
17046: PUSH
17047: LD_EXP 31
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 3
17059: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17060: LD_ADDR_EXP 31
17064: PUSH
17065: LD_EXP 31
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 3
17077: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 255
17087: PUSH
17088: LD_INT 3
17090: EQUAL
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 266
17101: PUSH
17102: LD_INT 0
17104: EQUAL
17105: PUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 266
17115: PUSH
17116: LD_INT 2
17118: EQUAL
17119: OR
17120: PUSH
17121: LD_VAR 0 1
17125: PPUSH
17126: CALL_OW 266
17130: PUSH
17131: LD_INT 4
17133: EQUAL
17134: OR
17135: PUSH
17136: EMPTY
17137: LIST
17138: AND
17139: IFFALSE 17150
// ComUpgrade ( building ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 255
17159: PUSH
17160: LD_INT 3
17162: EQUAL
17163: PUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 266
17173: PUSH
17174: LD_INT 32
17176: EQUAL
17177: AND
17178: IFFALSE 17219
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17180: LD_VAR 0 1
17184: PPUSH
17185: LD_INT 42
17187: PUSH
17188: LD_INT 43
17190: PUSH
17191: LD_INT 44
17193: PUSH
17194: LD_INT 46
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 1
17205: PPUSH
17206: LD_INT 4
17208: PPUSH
17209: CALL_OW 12
17213: ARRAY
17214: PPUSH
17215: CALL_OW 208
// end ; end ;
17219: PPOPN 1
17221: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17222: LD_VAR 0 1
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: PPUSH
17262: CALL_OW 69
17266: IN
17267: IFFALSE 17283
// killCounter := killCounter + 1 ;
17269: LD_ADDR_EXP 47
17273: PUSH
17274: LD_EXP 47
17278: PUSH
17279: LD_INT 1
17281: PLUS
17282: ST_TO_ADDR
// if unit = JMM then
17283: LD_VAR 0 1
17287: PUSH
17288: LD_EXP 1
17292: EQUAL
17293: IFFALSE 17302
// YouLost ( JMM ) ;
17295: LD_STRING JMM
17297: PPUSH
17298: CALL_OW 104
// if unit = Joan then
17302: LD_VAR 0 1
17306: PUSH
17307: LD_EXP 15
17311: EQUAL
17312: IFFALSE 17322
// JoanStatus = 0 ;
17314: LD_ADDR_EXP 16
17318: PUSH
17319: LD_INT 0
17321: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 255
17331: PUSH
17332: LD_INT 1
17334: EQUAL
17335: PUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 247
17345: PUSH
17346: LD_INT 1
17348: EQUAL
17349: AND
17350: IFFALSE 17426
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 257
17361: PUSH
17362: LD_INT 1
17364: EQUAL
17365: PUSH
17366: LD_VAR 0 1
17370: PPUSH
17371: CALL_OW 257
17375: PUSH
17376: LD_INT 2
17378: EQUAL
17379: OR
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 257
17390: PUSH
17391: LD_INT 3
17393: EQUAL
17394: OR
17395: PUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 257
17405: PUSH
17406: LD_INT 4
17408: EQUAL
17409: OR
17410: IFFALSE 17426
// unitLost = unitLost + 1 ;
17412: LD_ADDR_EXP 30
17416: PUSH
17417: LD_EXP 30
17421: PUSH
17422: LD_INT 1
17424: PLUS
17425: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 255
17435: PUSH
17436: LD_INT 3
17438: EQUAL
17439: PUSH
17440: LD_VAR 0 1
17444: PPUSH
17445: CALL_OW 247
17449: PUSH
17450: LD_INT 3
17452: EQUAL
17453: AND
17454: IFFALSE 18146
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 266
17465: PUSH
17466: LD_INT 31
17468: EQUAL
17469: PUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 266
17479: PUSH
17480: LD_INT 32
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 266
17494: PUSH
17495: LD_INT 36
17497: EQUAL
17498: OR
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 266
17509: PUSH
17510: LD_INT 0
17512: EQUAL
17513: OR
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 266
17524: PUSH
17525: LD_INT 24
17527: EQUAL
17528: OR
17529: PUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 266
17539: PUSH
17540: LD_INT 17
17542: EQUAL
17543: OR
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 25
17557: EQUAL
17558: OR
17559: PUSH
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 266
17569: PUSH
17570: LD_INT 19
17572: EQUAL
17573: OR
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 266
17584: PUSH
17585: LD_INT 20
17587: EQUAL
17588: OR
17589: PUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 266
17599: PUSH
17600: LD_INT 18
17602: EQUAL
17603: OR
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 266
17614: PUSH
17615: LD_INT 21
17617: EQUAL
17618: OR
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 266
17629: PUSH
17630: LD_INT 23
17632: EQUAL
17633: OR
17634: PUSH
17635: LD_VAR 0 1
17639: PPUSH
17640: CALL_OW 266
17644: PUSH
17645: LD_INT 16
17647: EQUAL
17648: OR
17649: PUSH
17650: LD_VAR 0 1
17654: PPUSH
17655: CALL_OW 266
17659: PUSH
17660: LD_INT 6
17662: EQUAL
17663: OR
17664: PUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 266
17674: PUSH
17675: LD_INT 29
17677: EQUAL
17678: OR
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 266
17689: PUSH
17690: LD_INT 26
17692: EQUAL
17693: OR
17694: PUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 266
17704: PUSH
17705: LD_INT 30
17707: EQUAL
17708: OR
17709: PUSH
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 266
17719: PUSH
17720: LD_INT 28
17722: EQUAL
17723: OR
17724: PUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 266
17734: PUSH
17735: LD_INT 27
17737: EQUAL
17738: OR
17739: PUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 266
17749: PUSH
17750: LD_INT 33
17752: EQUAL
17753: OR
17754: PUSH
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 266
17764: PUSH
17765: LD_INT 2
17767: EQUAL
17768: OR
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 266
17779: PUSH
17780: LD_INT 4
17782: EQUAL
17783: OR
17784: IFFALSE 17870
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17786: LD_ADDR_EXP 31
17790: PUSH
17791: LD_EXP 31
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 266
17805: ADD
17806: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17807: LD_ADDR_EXP 31
17811: PUSH
17812: LD_EXP 31
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 250
17826: ADD
17827: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17828: LD_ADDR_EXP 31
17832: PUSH
17833: LD_EXP 31
17837: PUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 251
17847: ADD
17848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17849: LD_ADDR_EXP 31
17853: PUSH
17854: LD_EXP 31
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 254
17868: ADD
17869: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL_OW 266
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17962
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17885: LD_ADDR_EXP 31
17889: PUSH
17890: LD_EXP 31
17894: PUSH
17895: LD_INT 0
17897: ADD
17898: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17899: LD_ADDR_EXP 31
17903: PUSH
17904: LD_EXP 31
17908: PUSH
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 250
17918: ADD
17919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17920: LD_ADDR_EXP 31
17924: PUSH
17925: LD_EXP 31
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 251
17939: ADD
17940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17941: LD_ADDR_EXP 31
17945: PUSH
17946: LD_EXP 31
17950: PUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 254
17960: ADD
17961: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 266
17971: PUSH
17972: LD_INT 3
17974: EQUAL
17975: IFFALSE 18054
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17977: LD_ADDR_EXP 31
17981: PUSH
17982: LD_EXP 31
17986: PUSH
17987: LD_INT 2
17989: ADD
17990: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17991: LD_ADDR_EXP 31
17995: PUSH
17996: LD_EXP 31
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 250
18010: ADD
18011: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18012: LD_ADDR_EXP 31
18016: PUSH
18017: LD_EXP 31
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: CALL_OW 251
18031: ADD
18032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18033: LD_ADDR_EXP 31
18037: PUSH
18038: LD_EXP 31
18042: PUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 254
18052: ADD
18053: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 266
18063: PUSH
18064: LD_INT 5
18066: EQUAL
18067: IFFALSE 18146
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18069: LD_ADDR_EXP 31
18073: PUSH
18074: LD_EXP 31
18078: PUSH
18079: LD_INT 4
18081: ADD
18082: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18083: LD_ADDR_EXP 31
18087: PUSH
18088: LD_EXP 31
18092: PUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 250
18102: ADD
18103: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18104: LD_ADDR_EXP 31
18108: PUSH
18109: LD_EXP 31
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 251
18123: ADD
18124: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18125: LD_ADDR_EXP 31
18129: PUSH
18130: LD_EXP 31
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 254
18144: ADD
18145: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18146: LD_EXP 48
18150: PUSH
18151: LD_VAR 0 1
18155: PPUSH
18156: CALL_OW 257
18160: PUSH
18161: LD_INT 3
18163: EQUAL
18164: AND
18165: PUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 255
18175: PUSH
18176: LD_INT 3
18178: EQUAL
18179: AND
18180: PUSH
18181: LD_INT 21
18183: PPUSH
18184: CALL_OW 302
18188: AND
18189: PUSH
18190: LD_INT 21
18192: PPUSH
18193: CALL_OW 255
18197: PUSH
18198: LD_INT 3
18200: EQUAL
18201: AND
18202: IFFALSE 18284
// begin ruMechCounter := ruMechCounter - 1 ;
18204: LD_ADDR_EXP 48
18208: PUSH
18209: LD_EXP 48
18213: PUSH
18214: LD_INT 1
18216: MINUS
18217: ST_TO_ADDR
// uc_side = 3 ;
18218: LD_ADDR_OWVAR 20
18222: PUSH
18223: LD_INT 3
18225: ST_TO_ADDR
// uc_nation = 3 ;
18226: LD_ADDR_OWVAR 21
18230: PUSH
18231: LD_INT 3
18233: ST_TO_ADDR
// hc_gallery :=  ;
18234: LD_ADDR_OWVAR 33
18238: PUSH
18239: LD_STRING 
18241: ST_TO_ADDR
// hc_name :=  ;
18242: LD_ADDR_OWVAR 26
18246: PUSH
18247: LD_STRING 
18249: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18250: LD_INT 0
18252: PPUSH
18253: LD_EXP 34
18257: PPUSH
18258: LD_EXP 35
18262: PPUSH
18263: CALL_OW 12
18267: PPUSH
18268: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18272: CALL_OW 44
18276: PPUSH
18277: LD_INT 21
18279: PPUSH
18280: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18284: LD_VAR 0 1
18288: PPUSH
18289: CALL_OW 255
18293: PUSH
18294: LD_INT 3
18296: EQUAL
18297: PUSH
18298: LD_VAR 0 1
18302: PPUSH
18303: CALL_OW 264
18307: PUSH
18308: LD_INT 52
18310: EQUAL
18311: AND
18312: PUSH
18313: LD_INT 21
18315: PPUSH
18316: CALL_OW 302
18320: AND
18321: PUSH
18322: LD_INT 21
18324: PPUSH
18325: CALL_OW 255
18329: PUSH
18330: LD_INT 3
18332: EQUAL
18333: AND
18334: IFFALSE 18355
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18336: LD_INT 21
18338: PPUSH
18339: LD_INT 22
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_INT 52
18350: PPUSH
18351: CALL_OW 125
// end ;
18355: PPOPN 1
18357: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 264
18372: PUSH
18373: LD_INT 51
18375: EQUAL
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 255
18386: PUSH
18387: LD_INT 3
18389: EQUAL
18390: AND
18391: IFFALSE 18453
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18393: LD_ADDR_VAR 0 5
18397: PUSH
18398: LD_INT 2
18400: PPUSH
18401: CALL_OW 274
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 275
18413: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18414: LD_INT 2
18416: PPUSH
18417: CALL_OW 274
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: LD_VAR 0 5
18429: PUSH
18430: LD_INT 100
18432: MINUS
18433: PPUSH
18434: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18438: LD_VAR 0 1
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_INT 100
18448: PPUSH
18449: CALL_OW 291
// end ; if building = rufabsupp then
18453: LD_VAR 0 2
18457: PUSH
18458: LD_INT 17
18460: EQUAL
18461: IFFALSE 18475
// SetSide ( vehicle , 6 ) ;
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 6
18470: PPUSH
18471: CALL_OW 235
// end ;
18475: PPOPN 5
18477: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18478: LD_VAR 0 1
18482: PPUSH
18483: CALL_OW 255
18487: PUSH
18488: LD_INT 3
18490: EQUAL
18491: IFFALSE 18522
// begin tamedApemans = tamedApemans + 1 ;
18493: LD_ADDR_EXP 32
18497: PUSH
18498: LD_EXP 32
18502: PUSH
18503: LD_INT 1
18505: PLUS
18506: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18507: LD_VAR 0 1
18511: PPUSH
18512: LD_INT 106
18514: PPUSH
18515: LD_INT 85
18517: PPUSH
18518: CALL_OW 111
// end ; end ;
18522: PPOPN 2
18524: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18525: LD_INT 0
18527: PPUSH
18528: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 255
18538: PUSH
18539: LD_INT 3
18541: EQUAL
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: CALL_OW 247
18552: PUSH
18553: LD_INT 2
18555: EQUAL
18556: AND
18557: IFFALSE 18666
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 264
18568: PUSH
18569: LD_INT 42
18571: EQUAL
18572: PUSH
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL_OW 264
18582: PUSH
18583: LD_INT 43
18585: EQUAL
18586: OR
18587: PUSH
18588: LD_VAR 0 1
18592: PPUSH
18593: CALL_OW 264
18597: PUSH
18598: LD_INT 44
18600: EQUAL
18601: OR
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 264
18612: PUSH
18613: LD_INT 46
18615: EQUAL
18616: OR
18617: IFFALSE 18666
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18619: LD_INT 21
18621: PPUSH
18622: LD_VAR 0 1
18626: PPUSH
18627: CALL_OW 265
18631: PPUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 262
18641: PPUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL_OW 263
18651: PPUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 264
18661: PPUSH
18662: CALL_OW 185
// end ;
18666: PPOPN 3
18668: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 255
18678: PUSH
18679: LD_INT 3
18681: EQUAL
18682: PUSH
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 255
18692: PUSH
18693: LD_INT 3
18695: EQUAL
18696: AND
18697: PUSH
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL_OW 302
18707: AND
18708: IFFALSE 18750
// begin ComRepairVehicle ( human , vehicle ) ;
18710: LD_VAR 0 2
18714: PPUSH
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18724: LD_VAR 0 2
18728: PPUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_INT 100
18745: PPUSH
18746: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 255
18759: PUSH
18760: LD_INT 3
18762: EQUAL
18763: PUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: CALL_OW 255
18773: PUSH
18774: LD_INT 3
18776: EQUAL
18777: AND
18778: PUSH
18779: LD_INT 21
18781: PPUSH
18782: CALL_OW 302
18786: AND
18787: PUSH
18788: LD_VAR 0 1
18792: PPUSH
18793: CALL_OW 302
18797: NOT
18798: AND
18799: IFFALSE 18813
// ComEnterUnit ( human , rufab ) ;
18801: LD_VAR 0 2
18805: PPUSH
18806: LD_INT 21
18808: PPUSH
18809: CALL_OW 120
// end ;
18813: PPOPN 2
18815: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 21
18823: EQUAL
18824: PUSH
18825: LD_VAR 0 2
18829: PPUSH
18830: CALL_OW 255
18834: PUSH
18835: LD_INT 3
18837: EQUAL
18838: AND
18839: IFFALSE 18853
// SetLives ( human , 1000 ) ;
18841: LD_VAR 0 2
18845: PPUSH
18846: LD_INT 1000
18848: PPUSH
18849: CALL_OW 234
// end ;
18853: PPOPN 2
18855: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL 26865 0 1
// end ; end_of_file
18865: PPOPN 1
18867: END
// every 0 0$30 trigger cratesStatus = 1 do
18868: LD_EXP 38
18872: PUSH
18873: LD_INT 1
18875: EQUAL
18876: IFFALSE 18959
18878: GO 18880
18880: DISABLE
// begin enable ;
18881: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18882: LD_INT 350
18884: PUSH
18885: LD_INT 1050
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_INT 2
18897: PPUSH
18898: CALL_OW 12
18902: ARRAY
18903: PPUSH
18904: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18908: LD_INT 4
18910: PUSH
18911: LD_INT 5
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 2
18923: PPUSH
18924: CALL_OW 12
18928: ARRAY
18929: PPUSH
18930: LD_INT 6
18932: PUSH
18933: LD_INT 7
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: PPUSH
18943: LD_INT 2
18945: PPUSH
18946: CALL_OW 12
18950: ARRAY
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 55
// end ;
18959: END
// every 1 1$0 trigger cratesStatus = 2 do
18960: LD_EXP 38
18964: PUSH
18965: LD_INT 2
18967: EQUAL
18968: IFFALSE 19051
18970: GO 18972
18972: DISABLE
// begin enable ;
18973: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18974: LD_INT 3150
18976: PUSH
18977: LD_INT 4550
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_INT 2
18989: PPUSH
18990: CALL_OW 12
18994: ARRAY
18995: PPUSH
18996: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19000: LD_INT 2
19002: PUSH
19003: LD_INT 5
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 2
19015: PPUSH
19016: CALL_OW 12
19020: ARRAY
19021: PPUSH
19022: LD_INT 6
19024: PUSH
19025: LD_INT 7
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PPUSH
19035: LD_INT 2
19037: PPUSH
19038: CALL_OW 12
19042: ARRAY
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 55
// end ;
19051: END
// every 0 0$30 + 0 0$10 do
19052: GO 19054
19054: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19055: LD_INT 4
19057: PUSH
19058: LD_INT 5
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: PPUSH
19068: LD_INT 2
19070: PPUSH
19071: CALL_OW 12
19075: ARRAY
19076: PPUSH
19077: LD_INT 7
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 55
// Wait ( 0 0$15 ) ;
19087: LD_INT 525
19089: PPUSH
19090: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19094: LD_INT 4
19096: PUSH
19097: LD_INT 5
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PPUSH
19107: LD_INT 2
19109: PPUSH
19110: CALL_OW 12
19114: ARRAY
19115: PPUSH
19116: LD_INT 7
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 55
// Wait ( 0 0$20 ) ;
19126: LD_INT 700
19128: PPUSH
19129: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19133: LD_INT 4
19135: PUSH
19136: LD_INT 5
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PPUSH
19146: LD_INT 2
19148: PPUSH
19149: CALL_OW 12
19153: ARRAY
19154: PPUSH
19155: LD_INT 7
19157: PPUSH
19158: LD_INT 1
19160: PPUSH
19161: CALL_OW 55
// end ; end_of_file
19165: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19166: LD_EXP 24
19170: PUSH
19171: LD_INT 1
19173: EQUAL
19174: IFFALSE 19475
19176: GO 19178
19178: DISABLE
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 3
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: LD_INT 30
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 30
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: ST_TO_ADDR
// for i in tmp do
19247: LD_ADDR_VAR 0 1
19251: PUSH
19252: LD_VAR 0 2
19256: PUSH
19257: FOR_IN
19258: IFFALSE 19291
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_VAR 0 3
19269: PUSH
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL_OW 274
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 275
19287: PLUS
19288: ST_TO_ADDR
19289: GO 19257
19291: POP
19292: POP
// strings = [ ] ;
19293: LD_ADDR_EXP 27
19297: PUSH
19298: EMPTY
19299: ST_TO_ADDR
// if tmp = 0 then
19300: LD_VAR 0 2
19304: PUSH
19305: LD_INT 0
19307: EQUAL
19308: IFFALSE 19333
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19310: LD_ADDR_EXP 27
19314: PUSH
19315: LD_EXP 27
19319: PUSH
19320: LD_STRING #Am06-1
19322: PUSH
19323: LD_EXP 25
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: ADD
19332: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19333: LD_VAR 0 2
19337: PUSH
19338: LD_INT 0
19340: GREATER
19341: PUSH
19342: LD_EXP 25
19346: PUSH
19347: LD_VAR 0 3
19351: GREATER
19352: AND
19353: IFFALSE 19384
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19355: LD_ADDR_EXP 27
19359: PUSH
19360: LD_EXP 27
19364: PUSH
19365: LD_STRING #Am06-1
19367: PUSH
19368: LD_EXP 25
19372: PUSH
19373: LD_VAR 0 3
19377: MINUS
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: ADD
19383: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19384: LD_VAR 0 2
19388: PUSH
19389: LD_INT 0
19391: GREATER
19392: PUSH
19393: LD_EXP 25
19397: PUSH
19398: LD_VAR 0 3
19402: LESSEQUAL
19403: AND
19404: IFFALSE 19427
// strings = strings ^ [ #Am06-1 , 0 ] ;
19406: LD_ADDR_EXP 27
19410: PUSH
19411: LD_EXP 27
19415: PUSH
19416: LD_STRING #Am06-1
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: ADD
19426: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19427: LD_ADDR_EXP 26
19431: PUSH
19432: LD_EXP 26
19436: PUSH
19437: LD_INT 35
19439: MINUS
19440: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19441: LD_ADDR_EXP 27
19445: PUSH
19446: LD_EXP 27
19450: PUSH
19451: LD_STRING #Am06-2
19453: PUSH
19454: LD_EXP 26
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: ADD
19463: ST_TO_ADDR
// display_strings = strings ;
19464: LD_ADDR_OWVAR 47
19468: PUSH
19469: LD_EXP 27
19473: ST_TO_ADDR
// enable ;
19474: ENABLE
// end ; end_of_file
19475: PPOPN 3
19477: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
19486: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: LD_INT 22
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 30
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 30
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PPUSH
19534: CALL_OW 69
19538: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19539: LD_INT 35
19541: PPUSH
19542: CALL_OW 67
// until depot ;
19546: LD_VAR 0 3
19550: IFFALSE 19487
// repeat wait ( 0 0$1 ) ;
19552: LD_INT 35
19554: PPUSH
19555: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19559: LD_ADDR_VAR 0 4
19563: PUSH
19564: LD_INT 22
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 91
19576: PUSH
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 1
19584: ARRAY
19585: PUSH
19586: LD_INT 15
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 21
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: LD_INT 25
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 25
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 25
19629: PUSH
19630: LD_INT 3
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 25
19639: PUSH
19640: LD_INT 4
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: PUSH
19657: LD_INT 54
19659: PUSH
19660: EMPTY
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: LD_INT 55
19672: PUSH
19673: EMPTY
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: PUSH
19693: LD_EXP 2
19697: PUSH
19698: LD_EXP 3
19702: PUSH
19703: LD_EXP 4
19707: PUSH
19708: LD_EXP 5
19712: PUSH
19713: LD_EXP 7
19717: PUSH
19718: LD_EXP 8
19722: PUSH
19723: LD_EXP 9
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: PUSH
19737: LD_EXP 46
19741: ADD
19742: DIFF
19743: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19744: LD_VAR 0 4
19748: PUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 463
19756: NOT
19757: AND
19758: IFFALSE 19552
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19760: LD_ADDR_VAR 0 4
19764: PUSH
19765: LD_VAR 0 4
19769: PUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_VAR 0 4
19777: PPUSH
19778: CALL_OW 12
19782: ARRAY
19783: ST_TO_ADDR
// blockSpawn = 1 ;
19784: LD_ADDR_EXP 29
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// uc_side = 2 ;
19792: LD_ADDR_OWVAR 20
19796: PUSH
19797: LD_INT 2
19799: ST_TO_ADDR
// uc_nation = 2 ;
19800: LD_ADDR_OWVAR 21
19804: PUSH
19805: LD_INT 2
19807: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19808: LD_ADDR_EXP 19
19812: PUSH
19813: LD_STRING Kurt
19815: PPUSH
19816: LD_INT 0
19818: PPUSH
19819: CALL 6151 0 2
19823: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19824: LD_EXP 19
19828: PPUSH
19829: LD_VAR 0 4
19833: PPUSH
19834: CALL_OW 250
19838: PPUSH
19839: LD_VAR 0 4
19843: PPUSH
19844: CALL_OW 251
19848: PPUSH
19849: LD_INT 5
19851: PPUSH
19852: LD_INT 1
19854: PPUSH
19855: CALL_OW 50
// InGameOn ;
19859: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19863: LD_EXP 19
19867: PPUSH
19868: CALL_OW 87
// wait ( 0 0$2 ) ;
19872: LD_INT 70
19874: PPUSH
19875: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19879: LD_EXP 19
19883: PPUSH
19884: LD_VAR 0 4
19888: PPUSH
19889: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_EXP 19
19902: PPUSH
19903: CALL_OW 112
// wait ( 0 0$1 ) ;
19907: LD_INT 35
19909: PPUSH
19910: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19914: LD_VAR 0 4
19918: PPUSH
19919: LD_EXP 19
19923: PPUSH
19924: CALL_OW 119
// DialogueOn ;
19928: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19932: LD_EXP 19
19936: PPUSH
19937: LD_STRING D2-Kurt-1
19939: PPUSH
19940: CALL_OW 88
// if tmp = JMM then
19944: LD_VAR 0 4
19948: PUSH
19949: LD_EXP 1
19953: EQUAL
19954: IFFALSE 20046
// begin Say ( JMM , D2-JMM-1 ) ;
19956: LD_EXP 1
19960: PPUSH
19961: LD_STRING D2-JMM-1
19963: PPUSH
19964: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19968: LD_EXP 19
19972: PPUSH
19973: LD_STRING D2-Kurt-2
19975: PPUSH
19976: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19980: LD_EXP 1
19984: PPUSH
19985: LD_STRING D2-JMM-2
19987: PPUSH
19988: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19992: LD_EXP 19
19996: PPUSH
19997: LD_STRING D2-Kurt-3
19999: PPUSH
20000: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20004: LD_EXP 1
20008: PPUSH
20009: LD_STRING D2-JMM-3
20011: PPUSH
20012: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20016: LD_EXP 19
20020: PPUSH
20021: LD_STRING D2-Kurt-4
20023: PPUSH
20024: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20028: LD_EXP 1
20032: PPUSH
20033: LD_STRING D2-JMM-4
20035: PPUSH
20036: CALL_OW 88
// DialogueOff ;
20040: CALL_OW 7
// end else
20044: GO 20356
// begin if GetSex ( tmp ) = 1 then
20046: LD_VAR 0 4
20050: PPUSH
20051: CALL_OW 258
20055: PUSH
20056: LD_INT 1
20058: EQUAL
20059: IFFALSE 20073
// Say ( tmp , D2-Sol1-1 ) ;
20061: LD_VAR 0 4
20065: PPUSH
20066: LD_STRING D2-Sol1-1
20068: PPUSH
20069: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20073: LD_VAR 0 4
20077: PPUSH
20078: CALL_OW 258
20082: PUSH
20083: LD_INT 2
20085: EQUAL
20086: IFFALSE 20100
// Say ( tmp , D2-FSol1-1 ) ;
20088: LD_VAR 0 4
20092: PPUSH
20093: LD_STRING D2-FSol1-1
20095: PPUSH
20096: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20100: LD_EXP 19
20104: PPUSH
20105: LD_STRING D2-Kurt-2
20107: PPUSH
20108: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20112: LD_VAR 0 4
20116: PPUSH
20117: CALL_OW 258
20121: PUSH
20122: LD_INT 1
20124: EQUAL
20125: IFFALSE 20139
// Say ( tmp , D2-Sol1-2 ) ;
20127: LD_VAR 0 4
20131: PPUSH
20132: LD_STRING D2-Sol1-2
20134: PPUSH
20135: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20139: LD_VAR 0 4
20143: PPUSH
20144: CALL_OW 258
20148: PUSH
20149: LD_INT 2
20151: EQUAL
20152: IFFALSE 20166
// Say ( tmp , D2-FSol1-2 ) ;
20154: LD_VAR 0 4
20158: PPUSH
20159: LD_STRING D2-FSol1-2
20161: PPUSH
20162: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20166: LD_EXP 19
20170: PPUSH
20171: LD_STRING D2-Kurt-3
20173: PPUSH
20174: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20178: LD_VAR 0 4
20182: PPUSH
20183: CALL_OW 258
20187: PUSH
20188: LD_INT 1
20190: EQUAL
20191: IFFALSE 20205
// Say ( tmp , D2-Sol1-3 ) ;
20193: LD_VAR 0 4
20197: PPUSH
20198: LD_STRING D2-Sol1-3
20200: PPUSH
20201: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20205: LD_VAR 0 4
20209: PPUSH
20210: CALL_OW 258
20214: PUSH
20215: LD_INT 2
20217: EQUAL
20218: IFFALSE 20232
// Say ( tmp , D2-FSol1-3 ) ;
20220: LD_VAR 0 4
20224: PPUSH
20225: LD_STRING D2-FSol1-3
20227: PPUSH
20228: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20232: LD_EXP 19
20236: PPUSH
20237: LD_STRING D2-Kurt-4
20239: PPUSH
20240: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20244: LD_VAR 0 4
20248: PPUSH
20249: CALL_OW 258
20253: PUSH
20254: LD_INT 1
20256: EQUAL
20257: IFFALSE 20271
// Say ( tmp , D2-Sol1-4 ) ;
20259: LD_VAR 0 4
20263: PPUSH
20264: LD_STRING D2-Sol1-4
20266: PPUSH
20267: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20271: LD_VAR 0 4
20275: PPUSH
20276: CALL_OW 258
20280: PUSH
20281: LD_INT 2
20283: EQUAL
20284: IFFALSE 20298
// Say ( tmp , D2-FSol1-4 ) ;
20286: LD_VAR 0 4
20290: PPUSH
20291: LD_STRING D2-FSol1-4
20293: PPUSH
20294: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20298: LD_VAR 0 4
20302: PPUSH
20303: CALL_OW 258
20307: PUSH
20308: LD_INT 1
20310: EQUAL
20311: IFFALSE 20325
// Say ( tmp , D2-Sol1-5 ) ;
20313: LD_VAR 0 4
20317: PPUSH
20318: LD_STRING D2-Sol1-5
20320: PPUSH
20321: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20325: LD_VAR 0 4
20329: PPUSH
20330: CALL_OW 258
20334: PUSH
20335: LD_INT 2
20337: EQUAL
20338: IFFALSE 20352
// Say ( tmp , D2-FSol1-5 ) ;
20340: LD_VAR 0 4
20344: PPUSH
20345: LD_STRING D2-FSol1-5
20347: PPUSH
20348: CALL_OW 88
// DialogueOff ;
20352: CALL_OW 7
// end ; dec = ShowQuery1 ;
20356: LD_ADDR_VAR 0 6
20360: PUSH
20361: CALL 6675 0 0
20365: ST_TO_ADDR
// if dec = 1 then
20366: LD_VAR 0 6
20370: PUSH
20371: LD_INT 1
20373: EQUAL
20374: IFFALSE 20436
// begin DialogueOn ;
20376: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20380: LD_EXP 19
20384: PPUSH
20385: LD_STRING D2a-Kurt-1
20387: PPUSH
20388: CALL_OW 88
// DialogueOff ;
20392: CALL_OW 7
// InGameOff ;
20396: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20400: LD_INT 1
20402: PPUSH
20403: LD_INT 2
20405: PPUSH
20406: LD_INT 2
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20416: LD_EXP 19
20420: PPUSH
20421: LD_INT 8
20423: PPUSH
20424: CALL_OW 113
// readyToEscape = 1 ;
20428: LD_ADDR_EXP 21
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// end ; if dec = 2 then
20436: LD_VAR 0 6
20440: PUSH
20441: LD_INT 2
20443: EQUAL
20444: IFFALSE 20964
// begin DialogueOn ;
20446: CALL_OW 6
// if tmp = JMM then
20450: LD_VAR 0 4
20454: PUSH
20455: LD_EXP 1
20459: EQUAL
20460: IFFALSE 20516
// begin Say ( JMM , D2b-JMM-1 ) ;
20462: LD_EXP 1
20466: PPUSH
20467: LD_STRING D2b-JMM-1
20469: PPUSH
20470: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20474: LD_EXP 19
20478: PPUSH
20479: LD_STRING D2b-Kurt-1
20481: PPUSH
20482: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20486: LD_EXP 1
20490: PPUSH
20491: LD_STRING D2b-JMM-2
20493: PPUSH
20494: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20498: LD_EXP 19
20502: PPUSH
20503: LD_STRING D2b-Kurt-2
20505: PPUSH
20506: CALL_OW 88
// DialogueOff ;
20510: CALL_OW 7
// end else
20514: GO 20706
// begin if GetSex ( tmp ) = 1 then
20516: LD_VAR 0 4
20520: PPUSH
20521: CALL_OW 258
20525: PUSH
20526: LD_INT 1
20528: EQUAL
20529: IFFALSE 20543
// Say ( tmp , D2b-Sol1-1 ) ;
20531: LD_VAR 0 4
20535: PPUSH
20536: LD_STRING D2b-Sol1-1
20538: PPUSH
20539: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20543: LD_VAR 0 4
20547: PPUSH
20548: CALL_OW 258
20552: PUSH
20553: LD_INT 2
20555: EQUAL
20556: IFFALSE 20570
// Say ( tmp , D2b-FSol1-1 ) ;
20558: LD_VAR 0 4
20562: PPUSH
20563: LD_STRING D2b-FSol1-1
20565: PPUSH
20566: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20570: LD_EXP 19
20574: PPUSH
20575: LD_STRING D2b-Kurt-1
20577: PPUSH
20578: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20582: LD_VAR 0 4
20586: PPUSH
20587: CALL_OW 258
20591: PUSH
20592: LD_INT 1
20594: EQUAL
20595: IFFALSE 20609
// Say ( tmp , D2b-Sol1-2 ) ;
20597: LD_VAR 0 4
20601: PPUSH
20602: LD_STRING D2b-Sol1-2
20604: PPUSH
20605: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20609: LD_VAR 0 4
20613: PPUSH
20614: CALL_OW 258
20618: PUSH
20619: LD_INT 2
20621: EQUAL
20622: IFFALSE 20636
// Say ( tmp , D2b-FSol1-2 ) ;
20624: LD_VAR 0 4
20628: PPUSH
20629: LD_STRING D2b-FSol1-2
20631: PPUSH
20632: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20636: LD_EXP 19
20640: PPUSH
20641: LD_STRING D2b-Kurt-2
20643: PPUSH
20644: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20648: LD_VAR 0 4
20652: PPUSH
20653: CALL_OW 258
20657: PUSH
20658: LD_INT 1
20660: EQUAL
20661: IFFALSE 20675
// Say ( tmp , D2c-Sol1-2 ) ;
20663: LD_VAR 0 4
20667: PPUSH
20668: LD_STRING D2c-Sol1-2
20670: PPUSH
20671: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20675: LD_VAR 0 4
20679: PPUSH
20680: CALL_OW 258
20684: PUSH
20685: LD_INT 2
20687: EQUAL
20688: IFFALSE 20702
// Say ( tmp , D2c-FSol1-2 ) ;
20690: LD_VAR 0 4
20694: PPUSH
20695: LD_STRING D2c-FSol1-2
20697: PPUSH
20698: CALL_OW 88
// DialogueOff ;
20702: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20706: LD_ADDR_VAR 0 7
20710: PUSH
20711: CALL 6749 0 0
20715: ST_TO_ADDR
// if dec2 = 1 then
20716: LD_VAR 0 7
20720: PUSH
20721: LD_INT 1
20723: EQUAL
20724: IFFALSE 20786
// begin DialogueOn ;
20726: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20730: LD_EXP 19
20734: PPUSH
20735: LD_STRING D2a-Kurt-1
20737: PPUSH
20738: CALL_OW 88
// DialogueOff ;
20742: CALL_OW 7
// InGameOff ;
20746: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20750: LD_INT 1
20752: PPUSH
20753: LD_INT 2
20755: PPUSH
20756: LD_INT 2
20758: PPUSH
20759: LD_INT 1
20761: PPUSH
20762: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20766: LD_EXP 19
20770: PPUSH
20771: LD_INT 8
20773: PPUSH
20774: CALL_OW 113
// readyToEscape = 1 ;
20778: LD_ADDR_EXP 21
20782: PUSH
20783: LD_INT 1
20785: ST_TO_ADDR
// end ; if dec2 = 2 then
20786: LD_VAR 0 7
20790: PUSH
20791: LD_INT 2
20793: EQUAL
20794: IFFALSE 20964
// begin if tmp = JMM then
20796: LD_VAR 0 4
20800: PUSH
20801: LD_EXP 1
20805: EQUAL
20806: IFFALSE 20866
// begin DialogueOn ;
20808: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20812: LD_EXP 1
20816: PPUSH
20817: LD_STRING D2c-JMM-1
20819: PPUSH
20820: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20824: LD_EXP 19
20828: PPUSH
20829: LD_STRING D2c-Kurt-1
20831: PPUSH
20832: CALL_OW 88
// DialogueOff ;
20836: CALL_OW 7
// InGameOff ;
20840: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20844: LD_EXP 19
20848: PPUSH
20849: LD_INT 8
20851: PPUSH
20852: CALL_OW 113
// readyToEscape = 1 ;
20856: LD_ADDR_EXP 21
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// end else
20864: GO 20964
// begin DialogueOn ;
20866: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20870: LD_VAR 0 4
20874: PPUSH
20875: CALL_OW 258
20879: PUSH
20880: LD_INT 1
20882: EQUAL
20883: IFFALSE 20897
// Say ( tmp , D2c-Sol1-1 ) ;
20885: LD_VAR 0 4
20889: PPUSH
20890: LD_STRING D2c-Sol1-1
20892: PPUSH
20893: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20897: LD_VAR 0 4
20901: PPUSH
20902: CALL_OW 258
20906: PUSH
20907: LD_INT 2
20909: EQUAL
20910: IFFALSE 20924
// Say ( tmp , D2c-FSol1-1 ) ;
20912: LD_VAR 0 4
20916: PPUSH
20917: LD_STRING D2c-FSol1-1
20919: PPUSH
20920: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20924: LD_EXP 19
20928: PPUSH
20929: LD_STRING D2c-Kurt-1
20931: PPUSH
20932: CALL_OW 88
// DialogueOff ;
20936: CALL_OW 7
// InGameOff ;
20940: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20944: LD_EXP 19
20948: PPUSH
20949: LD_INT 8
20951: PPUSH
20952: CALL_OW 113
// readyToEscape = 1 ;
20956: LD_ADDR_EXP 21
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20964: LD_VAR 0 6
20968: PUSH
20969: LD_INT 3
20971: EQUAL
20972: IFFALSE 21146
// begin DialogueOn ;
20974: CALL_OW 6
// if tmp = JMM then
20978: LD_VAR 0 4
20982: PUSH
20983: LD_EXP 1
20987: EQUAL
20988: IFFALSE 21048
// begin DialogueOn ;
20990: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20994: LD_EXP 1
20998: PPUSH
20999: LD_STRING D2c-JMM-1
21001: PPUSH
21002: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21006: LD_EXP 19
21010: PPUSH
21011: LD_STRING D2c-Kurt-1
21013: PPUSH
21014: CALL_OW 88
// DialogueOff ;
21018: CALL_OW 7
// InGameOff ;
21022: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21026: LD_EXP 19
21030: PPUSH
21031: LD_INT 8
21033: PPUSH
21034: CALL_OW 113
// readyToEscape = 1 ;
21038: LD_ADDR_EXP 21
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// end else
21046: GO 21146
// begin DialogueOn ;
21048: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21052: LD_VAR 0 4
21056: PPUSH
21057: CALL_OW 258
21061: PUSH
21062: LD_INT 1
21064: EQUAL
21065: IFFALSE 21079
// Say ( tmp , D2c-Sol1-1 ) ;
21067: LD_VAR 0 4
21071: PPUSH
21072: LD_STRING D2c-Sol1-1
21074: PPUSH
21075: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21079: LD_VAR 0 4
21083: PPUSH
21084: CALL_OW 258
21088: PUSH
21089: LD_INT 2
21091: EQUAL
21092: IFFALSE 21106
// Say ( tmp , D2c-FSol1-1 ) ;
21094: LD_VAR 0 4
21098: PPUSH
21099: LD_STRING D2c-FSol1-1
21101: PPUSH
21102: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21106: LD_EXP 19
21110: PPUSH
21111: LD_STRING D2c-Kurt-1
21113: PPUSH
21114: CALL_OW 88
// DialogueOff ;
21118: CALL_OW 7
// InGameOff ;
21122: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21126: LD_EXP 19
21130: PPUSH
21131: LD_INT 8
21133: PPUSH
21134: CALL_OW 113
// readyToEscape = 1 ;
21138: LD_ADDR_EXP 21
21142: PUSH
21143: LD_INT 1
21145: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21146: LD_ADDR_EXP 29
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21154: LD_INT 35
21156: PPUSH
21157: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21161: LD_EXP 19
21165: PPUSH
21166: LD_INT 8
21168: PPUSH
21169: CALL_OW 308
21173: PUSH
21174: LD_EXP 21
21178: AND
21179: PUSH
21180: LD_EXP 19
21184: PPUSH
21185: CALL_OW 301
21189: OR
21190: IFFALSE 21154
// if IsDead ( Kurt ) then
21192: LD_EXP 19
21196: PPUSH
21197: CALL_OW 301
21201: IFFALSE 21205
// exit ;
21203: GO 21274
// RemoveUnit ( Kurt ) ;
21205: LD_EXP 19
21209: PPUSH
21210: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21214: LD_EXP 19
21218: PPUSH
21219: LD_STRING Kurt
21221: PPUSH
21222: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21226: LD_INT 1
21228: PPUSH
21229: LD_INT 2
21231: PPUSH
21232: CALL_OW 81
21236: PUSH
21237: LD_INT 0
21239: EQUAL
21240: IFFALSE 21250
// KurtStatus = 1 ;
21242: LD_ADDR_EXP 20
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21250: LD_INT 1
21252: PPUSH
21253: LD_INT 2
21255: PPUSH
21256: CALL_OW 81
21260: PUSH
21261: LD_INT 2
21263: EQUAL
21264: IFFALSE 21274
// KurtStatus = 2 ;
21266: LD_ADDR_EXP 20
21270: PUSH
21271: LD_INT 2
21273: ST_TO_ADDR
// end ; end_of_file
21274: LD_VAR 0 1
21278: RET
// every 0 0$1 do
21279: GO 21281
21281: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21282: LD_INT 3
21284: PPUSH
21285: LD_INT 32
21287: PPUSH
21288: LD_INT 3
21290: PPUSH
21291: CALL 6804 0 3
21295: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21296: GO 21298
21298: DISABLE
21299: LD_INT 0
21301: PPUSH
// begin enemyWayX = [ ] ;
21302: LD_ADDR_EXP 49
21306: PUSH
21307: EMPTY
21308: ST_TO_ADDR
// enemyWayY = [ ] ;
21309: LD_ADDR_EXP 50
21313: PUSH
21314: EMPTY
21315: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21316: LD_ADDR_VAR 0 1
21320: PUSH
21321: LD_INT 1
21323: PPUSH
21324: LD_INT 2
21326: PPUSH
21327: CALL_OW 12
21331: ST_TO_ADDR
// if rnd = 1 then
21332: LD_VAR 0 1
21336: PUSH
21337: LD_INT 1
21339: EQUAL
21340: IFFALSE 21380
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21342: LD_ADDR_EXP 49
21346: PUSH
21347: LD_INT 93
21349: PUSH
21350: LD_INT 84
21352: PUSH
21353: LD_INT 104
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21361: LD_ADDR_EXP 50
21365: PUSH
21366: LD_INT 51
21368: PUSH
21369: LD_INT 35
21371: PUSH
21372: LD_INT 28
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: ST_TO_ADDR
// end ; if rnd = 2 then
21380: LD_VAR 0 1
21384: PUSH
21385: LD_INT 2
21387: EQUAL
21388: IFFALSE 21444
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21390: LD_ADDR_EXP 49
21394: PUSH
21395: LD_INT 93
21397: PUSH
21398: LD_INT 52
21400: PUSH
21401: LD_INT 34
21403: PUSH
21404: LD_INT 28
21406: PUSH
21407: LD_INT 30
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21417: LD_ADDR_EXP 50
21421: PUSH
21422: LD_INT 51
21424: PUSH
21425: LD_INT 45
21427: PUSH
21428: LD_INT 35
21430: PUSH
21431: LD_INT 26
21433: PUSH
21434: LD_INT 20
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: ST_TO_ADDR
// end ; enable ;
21444: ENABLE
// end ;
21445: PPOPN 1
21447: END
// every 0 0$1 do
21448: GO 21450
21450: DISABLE
// begin enable ;
21451: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21452: LD_INT 3
21454: PPUSH
21455: LD_INT 2
21457: PPUSH
21458: LD_INT 10
21460: PPUSH
21461: LD_EXP 31
21465: PPUSH
21466: CALL 8239 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21470: LD_INT 3
21472: PPUSH
21473: LD_INT 12
21475: PPUSH
21476: LD_EXP 31
21480: PPUSH
21481: CALL 10124 0 3
// if disableHealAI = 0 then
21485: LD_EXP 33
21489: PUSH
21490: LD_INT 0
21492: EQUAL
21493: IFFALSE 21514
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21495: LD_INT 3
21497: PPUSH
21498: LD_INT 9
21500: PPUSH
21501: LD_INT 10
21503: PPUSH
21504: LD_INT 32
21506: PUSH
21507: EMPTY
21508: LIST
21509: PPUSH
21510: CALL 8630 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21514: LD_INT 3
21516: PPUSH
21517: LD_INT 51
21519: PPUSH
21520: LD_INT 6
21522: PPUSH
21523: CALL 9338 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21527: LD_INT 3
21529: PPUSH
21530: LD_INT 12
21532: PPUSH
21533: LD_INT 121
21535: PPUSH
21536: LD_INT 100
21538: PPUSH
21539: CALL 7199 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21543: LD_INT 3
21545: PPUSH
21546: LD_INT 22
21548: PPUSH
21549: LD_EXP 49
21553: PPUSH
21554: LD_EXP 50
21558: PPUSH
21559: CALL 7402 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21563: LD_INT 3
21565: PPUSH
21566: LD_INT 10
21568: PPUSH
21569: CALL 9481 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21573: LD_INT 3
21575: PPUSH
21576: LD_INT 1
21578: PPUSH
21579: CALL 9894 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21583: LD_INT 2
21585: PPUSH
21586: CALL_OW 303
21590: PUSH
21591: LD_INT 2
21593: PPUSH
21594: CALL_OW 255
21598: PUSH
21599: LD_INT 1
21601: EQUAL
21602: OR
21603: IFFALSE 21615
// DefendDepot ( 3 , rudepo ) ;
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 2
21610: PPUSH
21611: CALL 9174 0 2
// end ;
21615: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21616: LD_INT 22
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 21
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 55
21638: PUSH
21639: EMPTY
21640: LIST
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: LD_INT 34
21647: PUSH
21648: LD_INT 51
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: PUSH
21670: LD_INT 0
21672: EQUAL
21673: PUSH
21674: LD_INT 21
21676: PPUSH
21677: CALL_OW 255
21681: PUSH
21682: LD_INT 3
21684: EQUAL
21685: AND
21686: PUSH
21687: LD_INT 21
21689: PPUSH
21690: CALL_OW 302
21694: AND
21695: PUSH
21696: LD_INT 2
21698: PPUSH
21699: CALL_OW 255
21703: PUSH
21704: LD_INT 3
21706: EQUAL
21707: AND
21708: PUSH
21709: LD_INT 2
21711: PPUSH
21712: CALL_OW 302
21716: AND
21717: IFFALSE 21897
21719: GO 21721
21721: DISABLE
// begin enable ;
21722: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21723: LD_INT 2
21725: PPUSH
21726: CALL_OW 274
21730: PPUSH
21731: LD_INT 1
21733: PPUSH
21734: LD_INT 1000
21736: PPUSH
21737: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21741: LD_INT 3
21743: PPUSH
21744: LD_INT 21
21746: PPUSH
21747: LD_INT 4
21749: PUSH
21750: LD_INT 5
21752: PUSH
21753: LD_INT 6
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: PUSH
21761: LD_OWVAR 67
21765: ARRAY
21766: PPUSH
21767: LD_INT 43
21769: PUSH
21770: LD_INT 43
21772: PUSH
21773: LD_INT 44
21775: PUSH
21776: LD_INT 44
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 43
21787: PUSH
21788: LD_INT 43
21790: PUSH
21791: LD_INT 43
21793: PUSH
21794: LD_INT 44
21796: PUSH
21797: LD_INT 44
21799: PUSH
21800: LD_INT 46
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 43
21813: PUSH
21814: LD_INT 43
21816: PUSH
21817: LD_INT 43
21819: PUSH
21820: LD_INT 44
21822: PUSH
21823: LD_INT 44
21825: PUSH
21826: LD_INT 46
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: LD_OWVAR 67
21846: ARRAY
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: LD_INT 1
21853: PPUSH
21854: LD_INT 22
21856: PUSH
21857: LD_INT 22
21859: PUSH
21860: LD_INT 24
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: PPUSH
21870: LD_INT 2
21872: PPUSH
21873: CALL_OW 12
21877: ARRAY
21878: PUSH
21879: LD_INT 24
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: PUSH
21887: LD_OWVAR 67
21891: ARRAY
21892: PPUSH
21893: CALL 7045 0 7
// end ;
21897: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21898: LD_INT 17
21900: PPUSH
21901: CALL_OW 255
21905: PUSH
21906: LD_INT 3
21908: EQUAL
21909: PUSH
21910: LD_INT 17
21912: PPUSH
21913: CALL_OW 302
21917: AND
21918: PUSH
21919: LD_INT 2
21921: PPUSH
21922: CALL_OW 255
21926: PUSH
21927: LD_INT 3
21929: EQUAL
21930: AND
21931: PUSH
21932: LD_INT 2
21934: PPUSH
21935: CALL_OW 302
21939: AND
21940: IFFALSE 22007
21942: GO 21944
21944: DISABLE
// begin enable ;
21945: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21946: LD_INT 17
21948: PPUSH
21949: LD_INT 22
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_INT 1
21957: PPUSH
21958: LD_INT 42
21960: PUSH
21961: LD_INT 43
21963: PUSH
21964: LD_INT 44
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: PPUSH
21975: LD_INT 3
21977: PPUSH
21978: CALL_OW 12
21982: ARRAY
21983: PPUSH
21984: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21988: LD_INT 17
21990: PPUSH
21991: LD_INT 22
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: LD_INT 51
22002: PPUSH
22003: CALL_OW 185
// end ;
22007: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22008: LD_INT 17
22010: PPUSH
22011: CALL_OW 302
22015: PUSH
22016: LD_INT 17
22018: PPUSH
22019: CALL_OW 255
22023: PUSH
22024: LD_INT 3
22026: EQUAL
22027: AND
22028: PUSH
22029: LD_INT 2
22031: PPUSH
22032: CALL_OW 302
22036: AND
22037: PUSH
22038: LD_INT 2
22040: PPUSH
22041: CALL_OW 255
22045: PUSH
22046: LD_INT 3
22048: EQUAL
22049: AND
22050: PUSH
22051: LD_INT 17
22053: PPUSH
22054: CALL_OW 313
22058: NOT
22059: AND
22060: IFFALSE 22154
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
// begin for i = 1 to 6 do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_INT 6
22080: PUSH
22081: FOR_TO
22082: IFFALSE 22152
// begin uc_side = 3 ;
22084: LD_ADDR_OWVAR 20
22088: PUSH
22089: LD_INT 3
22091: ST_TO_ADDR
// uc_nation = 3 ;
22092: LD_ADDR_OWVAR 21
22096: PUSH
22097: LD_INT 3
22099: ST_TO_ADDR
// hc_gallery :=  ;
22100: LD_ADDR_OWVAR 33
22104: PUSH
22105: LD_STRING 
22107: ST_TO_ADDR
// hc_name :=  ;
22108: LD_ADDR_OWVAR 26
22112: PUSH
22113: LD_STRING 
22115: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22116: LD_INT 0
22118: PPUSH
22119: LD_EXP 34
22123: PPUSH
22124: LD_EXP 35
22128: PPUSH
22129: CALL_OW 12
22133: PPUSH
22134: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22138: CALL_OW 44
22142: PPUSH
22143: LD_INT 17
22145: PPUSH
22146: CALL_OW 52
// end ;
22150: GO 22081
22152: POP
22153: POP
// end ;
22154: PPOPN 1
22156: END
// every 2 2$0 do var i , j ;
22157: GO 22159
22159: DISABLE
22160: LD_INT 0
22162: PPUSH
22163: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22164: LD_INT 14700
22166: PUSH
22167: LD_INT 33600
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PPUSH
22177: LD_INT 2
22179: PPUSH
22180: CALL_OW 12
22184: ARRAY
22185: PPUSH
22186: CALL_OW 67
// disableHealAI = 1 ;
22190: LD_ADDR_EXP 33
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22198: LD_ADDR_VAR 0 1
22202: PUSH
22203: LD_INT 22
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 25
22215: PUSH
22216: LD_INT 4
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PPUSH
22227: CALL_OW 69
22231: PUSH
22232: FOR_IN
22233: IFFALSE 22246
// ComExitBuilding ( i ) ;
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 122
22244: GO 22232
22246: POP
22247: POP
// wait ( 0 0$1 ) ;
22248: LD_INT 35
22250: PPUSH
22251: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22255: LD_INT 35
22257: PPUSH
22258: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22262: LD_ADDR_VAR 0 1
22266: PUSH
22267: LD_INT 22
22269: PUSH
22270: LD_INT 3
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 25
22279: PUSH
22280: LD_INT 4
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PPUSH
22291: CALL_OW 69
22295: PUSH
22296: FOR_IN
22297: IFFALSE 22374
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22299: LD_ADDR_VAR 0 2
22303: PUSH
22304: LD_INT 17
22306: PPUSH
22307: LD_INT 22
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 25
22319: PUSH
22320: LD_INT 12
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 70
22335: PUSH
22336: FOR_IN
22337: IFFALSE 22370
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: LD_VAR 0 2
22348: PPUSH
22349: CALL_OW 250
22353: PPUSH
22354: LD_VAR 0 2
22358: PPUSH
22359: CALL_OW 251
22363: PPUSH
22364: CALL_OW 191
// end ;
22368: GO 22336
22370: POP
22371: POP
// end ;
22372: GO 22296
22374: POP
22375: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22376: LD_INT 22
22378: PUSH
22379: LD_INT 3
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 25
22388: PUSH
22389: LD_INT 4
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: PUSH
22405: LD_INT 0
22407: EQUAL
22408: PUSH
22409: LD_EXP 32
22413: PUSH
22414: LD_INT 6
22416: PUSH
22417: LD_INT 7
22419: PUSH
22420: LD_INT 8
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_OWVAR 67
22432: ARRAY
22433: GREATEREQUAL
22434: OR
22435: PUSH
22436: LD_INT 17
22438: PPUSH
22439: LD_INT 22
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 12
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 70
22467: PUSH
22468: LD_INT 0
22470: EQUAL
22471: OR
22472: IFFALSE 22255
// disableHealAI = 0 ;
22474: LD_ADDR_EXP 33
22478: PUSH
22479: LD_INT 0
22481: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22482: LD_ADDR_VAR 0 1
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_INT 3
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 25
22499: PUSH
22500: LD_INT 12
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 69
22515: PUSH
22516: FOR_IN
22517: IFFALSE 22533
// SetClass ( i , 16 ) ;
22519: LD_VAR 0 1
22523: PPUSH
22524: LD_INT 16
22526: PPUSH
22527: CALL_OW 336
22531: GO 22516
22533: POP
22534: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22535: LD_ADDR_VAR 0 1
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 25
22552: PUSH
22553: LD_INT 4
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: PUSH
22569: FOR_IN
22570: IFFALSE 22589
// ComMoveXY ( i , 113 , 94 ) ;
22572: LD_VAR 0 1
22576: PPUSH
22577: LD_INT 113
22579: PPUSH
22580: LD_INT 94
22582: PPUSH
22583: CALL_OW 111
22587: GO 22569
22589: POP
22590: POP
// end ;
22591: PPOPN 2
22593: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22594: LD_INT 21
22596: PPUSH
22597: CALL_OW 255
22601: PUSH
22602: LD_INT 3
22604: EQUAL
22605: PUSH
22606: LD_INT 21
22608: PPUSH
22609: CALL_OW 302
22613: AND
22614: PUSH
22615: LD_INT 22
22617: PUSH
22618: LD_INT 3
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 34
22627: PUSH
22628: LD_INT 51
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PPUSH
22639: CALL_OW 69
22643: PUSH
22644: LD_INT 0
22646: EQUAL
22647: AND
22648: IFFALSE 22680
22650: GO 22652
22652: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22653: LD_INT 21
22655: PPUSH
22656: LD_INT 23
22658: PPUSH
22659: LD_INT 1
22661: PPUSH
22662: LD_INT 1
22664: PPUSH
22665: LD_INT 51
22667: PPUSH
22668: CALL_OW 185
// wait ( 5 5$0 ) ;
22672: LD_INT 10500
22674: PPUSH
22675: CALL_OW 67
// enable ;
22679: ENABLE
// end ; end_of_file
22680: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22681: LD_EXP 26
22685: PUSH
22686: LD_INT 0
22688: LESSEQUAL
22689: IFFALSE 22838
22691: GO 22693
22693: DISABLE
22694: LD_INT 0
22696: PPUSH
22697: PPUSH
22698: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22699: LD_ADDR_VAR 0 2
22703: PUSH
22704: LD_INT 22
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 21
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 30
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 30
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: PPUSH
22757: CALL_OW 69
22761: ST_TO_ADDR
// for i in tmp do
22762: LD_ADDR_VAR 0 1
22766: PUSH
22767: LD_VAR 0 2
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22806
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22775: LD_ADDR_VAR 0 3
22779: PUSH
22780: LD_VAR 0 3
22784: PUSH
22785: LD_VAR 0 1
22789: PPUSH
22790: CALL_OW 274
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 275
22802: PLUS
22803: ST_TO_ADDR
22804: GO 22772
22806: POP
22807: POP
// if yourCrates >= needCrates then
22808: LD_VAR 0 3
22812: PUSH
22813: LD_EXP 25
22817: GREATEREQUAL
22818: IFFALSE 22831
// begin FinishMission ( yourCrates ) ;
22820: LD_VAR 0 3
22824: PPUSH
22825: CALL 22841 0 1
// end else
22829: GO 22838
// begin YouLost ( matmin ) ;
22831: LD_STRING matmin
22833: PPUSH
22834: CALL_OW 104
// end ; end ;
22838: PPOPN 3
22840: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22841: LD_INT 0
22843: PPUSH
22844: PPUSH
22845: PPUSH
22846: PPUSH
// if killCounter = 0 then
22847: LD_EXP 47
22851: PUSH
22852: LD_INT 0
22854: EQUAL
22855: IFFALSE 22864
// SetAchievement ( ACH_SURV ) ;
22857: LD_STRING ACH_SURV
22859: PPUSH
22860: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22864: LD_INT 22
22866: PUSH
22867: LD_INT 3
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 21
22876: PUSH
22877: LD_INT 3
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: PUSH
22893: LD_INT 0
22895: EQUAL
22896: IFFALSE 22912
// begin wait ( 3 ) ;
22898: LD_INT 3
22900: PPUSH
22901: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22905: LD_STRING ACH_BASEDESTROYER
22907: PPUSH
22908: CALL_OW 543
// end ; m1 := false ;
22912: LD_ADDR_VAR 0 3
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
// m2 := false ;
22920: LD_ADDR_VAR 0 4
22924: PUSH
22925: LD_INT 0
22927: ST_TO_ADDR
// m3 := false ;
22928: LD_ADDR_VAR 0 5
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
// if crates + 100 > crates then
22936: LD_VAR 0 1
22940: PUSH
22941: LD_INT 100
22943: PLUS
22944: PUSH
22945: LD_VAR 0 1
22949: GREATER
22950: IFFALSE 22982
// begin AddMedal ( cans , 1 ) ;
22952: LD_STRING cans
22954: PPUSH
22955: LD_INT 1
22957: PPUSH
22958: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22962: LD_INT 1
22964: PPUSH
22965: LD_STRING 06_crates_1
22967: PPUSH
22968: CALL_OW 39
// m1 := true ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_INT 1
22979: ST_TO_ADDR
// end else
22980: GO 23003
// begin AddMedal ( cans , - 1 ) ;
22982: LD_STRING cans
22984: PPUSH
22985: LD_INT 1
22987: NEG
22988: PPUSH
22989: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22993: LD_INT 0
22995: PPUSH
22996: LD_STRING 06_crates_1
22998: PPUSH
22999: CALL_OW 39
// end ; if unitLost < 3 then
23003: LD_EXP 30
23007: PUSH
23008: LD_INT 3
23010: LESS
23011: IFFALSE 23033
// begin AddMedal ( people , 1 ) ;
23013: LD_STRING people
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: CALL_OW 101
// m2 := true ;
23023: LD_ADDR_VAR 0 4
23027: PUSH
23028: LD_INT 1
23030: ST_TO_ADDR
// end else
23031: GO 23044
// begin AddMedal ( people , - 1 ) ;
23033: LD_STRING people
23035: PPUSH
23036: LD_INT 1
23038: NEG
23039: PPUSH
23040: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23044: LD_EXP 28
23048: PPUSH
23049: LD_STRING 06_remoteVehs_1
23051: PPUSH
23052: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23056: LD_EXP 28
23060: PUSH
23061: LD_INT 1
23063: EQUAL
23064: IFFALSE 23086
// begin AddMedal ( remote , 1 ) ;
23066: LD_STRING remote
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 101
// m3 := true ;
23076: LD_ADDR_VAR 0 5
23080: PUSH
23081: LD_INT 1
23083: ST_TO_ADDR
// end else
23084: GO 23126
// begin if GetTech ( 18 , 1 ) = state_enabled then
23086: LD_INT 18
23088: PPUSH
23089: LD_INT 1
23091: PPUSH
23092: CALL_OW 321
23096: PUSH
23097: LD_INT 1
23099: EQUAL
23100: IFFALSE 23115
// begin AddMedal ( remote , - 1 ) ;
23102: LD_STRING remote
23104: PPUSH
23105: LD_INT 1
23107: NEG
23108: PPUSH
23109: CALL_OW 101
// end else
23113: GO 23126
// begin AddMedal ( remote , - 2 ) ;
23115: LD_STRING remote
23117: PPUSH
23118: LD_INT 2
23120: NEG
23121: PPUSH
23122: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23126: LD_VAR 0 3
23130: PUSH
23131: LD_VAR 0 4
23135: AND
23136: PUSH
23137: LD_VAR 0 5
23141: AND
23142: IFFALSE 23158
// begin wait ( 3 ) ;
23144: LD_INT 3
23146: PPUSH
23147: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23151: LD_STRING ACH_ASPEED_6
23153: PPUSH
23154: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23158: LD_OWVAR 67
23162: PUSH
23163: LD_INT 3
23165: EQUAL
23166: PUSH
23167: LD_VAR 0 3
23171: AND
23172: PUSH
23173: LD_VAR 0 4
23177: AND
23178: PUSH
23179: LD_VAR 0 5
23183: AND
23184: IFFALSE 23196
// SetAchievementEX ( ACH_AMER , 6 ) ;
23186: LD_STRING ACH_AMER
23188: PPUSH
23189: LD_INT 6
23191: PPUSH
23192: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23196: LD_EXP 20
23200: PPUSH
23201: LD_STRING 06_KurtStatus_1
23203: PPUSH
23204: CALL_OW 39
// GiveMedals ( Main ) ;
23208: LD_STRING Main
23210: PPUSH
23211: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23215: LD_INT 22
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 50
23237: PUSH
23238: EMPTY
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: LD_INT 25
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 25
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 25
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: PPUSH
23302: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23306: LD_EXP 1
23310: PPUSH
23311: LD_EXP 43
23315: PUSH
23316: LD_STRING JMM
23318: STR
23319: PPUSH
23320: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23324: LD_EXP 2
23328: PPUSH
23329: LD_EXP 43
23333: PUSH
23334: LD_STRING Lisa
23336: STR
23337: PPUSH
23338: CALL 6303 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23342: LD_EXP 3
23346: PPUSH
23347: LD_EXP 43
23351: PUSH
23352: LD_STRING Bobby
23354: STR
23355: PPUSH
23356: CALL 6303 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23360: LD_EXP 4
23364: PPUSH
23365: LD_EXP 43
23369: PUSH
23370: LD_STRING Cyrus
23372: STR
23373: PPUSH
23374: CALL 6303 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23378: LD_EXP 5
23382: PPUSH
23383: LD_EXP 43
23387: PUSH
23388: LD_STRING Frank
23390: STR
23391: PPUSH
23392: CALL 6303 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23396: LD_EXP 6
23400: PPUSH
23401: LD_EXP 43
23405: PUSH
23406: LD_STRING Brown
23408: STR
23409: PPUSH
23410: CALL 6303 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23414: LD_EXP 7
23418: PPUSH
23419: LD_EXP 43
23423: PUSH
23424: LD_STRING Donaldson
23426: STR
23427: PPUSH
23428: CALL 6303 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23432: LD_EXP 8
23436: PPUSH
23437: LD_EXP 43
23441: PUSH
23442: LD_STRING Gladstone
23444: STR
23445: PPUSH
23446: CALL 6303 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23450: LD_EXP 9
23454: PPUSH
23455: LD_EXP 43
23459: PUSH
23460: LD_STRING Denis
23462: STR
23463: PPUSH
23464: CALL 6303 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23468: LD_EXP 15
23472: PPUSH
23473: LD_EXP 43
23477: PUSH
23478: LD_STRING Joan
23480: STR
23481: PPUSH
23482: CALL 6303 0 2
// if IsLive ( Joan ) then
23486: LD_EXP 15
23490: PPUSH
23491: CALL_OW 300
23495: IFFALSE 23509
// SaveCharacters ( Joan , Joan ) ;
23497: LD_EXP 15
23501: PPUSH
23502: LD_STRING Joan
23504: PPUSH
23505: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23509: LD_EXP 16
23513: PPUSH
23514: LD_STRING 06_JoanStatus_1
23516: PPUSH
23517: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23521: LD_INT 50
23523: PUSH
23524: EMPTY
23525: LIST
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 21
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: LD_INT 25
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 25
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 25
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 25
23582: PUSH
23583: LD_INT 4
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: PPUSH
23603: CALL_OW 69
23607: PUSH
23608: LD_EXP 1
23612: PUSH
23613: LD_EXP 2
23617: PUSH
23618: LD_EXP 3
23622: PUSH
23623: LD_EXP 4
23627: PUSH
23628: LD_EXP 5
23632: PUSH
23633: LD_EXP 6
23637: PUSH
23638: LD_EXP 7
23642: PUSH
23643: LD_EXP 8
23647: PUSH
23648: LD_EXP 9
23652: PUSH
23653: LD_EXP 15
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: DIFF
23670: PPUSH
23671: LD_STRING 06_other_survivors
23673: PPUSH
23674: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23678: LD_INT 50
23680: PUSH
23681: EMPTY
23682: LIST
23683: PUSH
23684: LD_INT 22
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 21
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: LD_INT 25
23709: PUSH
23710: LD_INT 12
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 25
23719: PUSH
23720: LD_INT 16
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PPUSH
23738: CALL_OW 69
23742: PPUSH
23743: LD_STRING 06_other_apemans
23745: PPUSH
23746: CALL_OW 38
// YouWin ;
23750: CALL_OW 103
// end ; end_of_file
23754: LD_VAR 0 2
23758: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23759: LD_EXP 39
23763: PUSH
23764: LD_INT 3
23766: EQUAL
23767: IFFALSE 23882
23769: GO 23771
23771: DISABLE
// begin enable ;
23772: ENABLE
// sendedConvoys = 0 ;
23773: LD_ADDR_EXP 39
23777: PUSH
23778: LD_INT 0
23780: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23781: LD_INT 6
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: LD_INT 5
23789: PPUSH
23790: LD_INT 10
23792: PPUSH
23793: CALL_OW 12
23797: PUSH
23798: LD_INT 5
23800: PPUSH
23801: LD_INT 11
23803: PPUSH
23804: CALL_OW 12
23808: PUSH
23809: LD_INT 8
23811: PPUSH
23812: LD_INT 12
23814: PPUSH
23815: CALL_OW 12
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: PUSH
23825: LD_OWVAR 67
23829: ARRAY
23830: PPUSH
23831: LD_INT 0
23833: PPUSH
23834: LD_INT 0
23836: PPUSH
23837: LD_INT 0
23839: PPUSH
23840: LD_INT 0
23842: PPUSH
23843: LD_EXP 34
23847: PPUSH
23848: LD_EXP 35
23852: PPUSH
23853: CALL_OW 12
23857: PPUSH
23858: LD_INT 16
23860: PPUSH
23861: LD_INT 15
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: LD_INT 1
23869: PPUSH
23870: LD_INT 2
23872: PPUSH
23873: CALL_OW 12
23877: PPUSH
23878: CALL 10722 0 12
// end ; end_of_file
23882: END
// export function PrepareNature ; var i , un ; begin
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
23887: PPUSH
// for i = 1 to Difficulty + 2 do
23888: LD_ADDR_VAR 0 2
23892: PUSH
23893: DOUBLE
23894: LD_INT 1
23896: DEC
23897: ST_TO_ADDR
23898: LD_OWVAR 67
23902: PUSH
23903: LD_INT 2
23905: PLUS
23906: PUSH
23907: FOR_TO
23908: IFFALSE 24017
// begin hc_sex = sex_male ;
23910: LD_ADDR_OWVAR 27
23914: PUSH
23915: LD_INT 1
23917: ST_TO_ADDR
// uc_side = 0 ;
23918: LD_ADDR_OWVAR 20
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// uc_nation = nation_nature ;
23926: LD_ADDR_OWVAR 21
23930: PUSH
23931: LD_INT 0
23933: ST_TO_ADDR
// hc_class = class_tiger ;
23934: LD_ADDR_OWVAR 28
23938: PUSH
23939: LD_INT 14
23941: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23942: LD_ADDR_OWVAR 31
23946: PUSH
23947: LD_EXP 35
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23967: LD_ADDR_OWVAR 35
23971: PUSH
23972: LD_INT 5
23974: NEG
23975: PPUSH
23976: LD_INT 5
23978: PPUSH
23979: CALL_OW 12
23983: PUSH
23984: LD_OWVAR 67
23988: MUL
23989: ST_TO_ADDR
// un = CreateHuman ;
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: CALL_OW 44
23999: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24000: LD_VAR 0 3
24004: PPUSH
24005: LD_INT 18
24007: PPUSH
24008: LD_INT 0
24010: PPUSH
24011: CALL_OW 49
// end ;
24015: GO 23907
24017: POP
24018: POP
// for i = 1 to rand ( 3 , 4 ) do
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: DOUBLE
24025: LD_INT 1
24027: DEC
24028: ST_TO_ADDR
24029: LD_INT 3
24031: PPUSH
24032: LD_INT 4
24034: PPUSH
24035: CALL_OW 12
24039: PUSH
24040: FOR_TO
24041: IFFALSE 24135
// begin hc_sex = sex_male ;
24043: LD_ADDR_OWVAR 27
24047: PUSH
24048: LD_INT 1
24050: ST_TO_ADDR
// uc_side = 0 ;
24051: LD_ADDR_OWVAR 20
24055: PUSH
24056: LD_INT 0
24058: ST_TO_ADDR
// uc_nation = nation_nature ;
24059: LD_ADDR_OWVAR 21
24063: PUSH
24064: LD_INT 0
24066: ST_TO_ADDR
// hc_class = 18 ;
24067: LD_ADDR_OWVAR 28
24071: PUSH
24072: LD_INT 18
24074: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24075: LD_ADDR_OWVAR 31
24079: PUSH
24080: LD_EXP 35
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// hc_agressivity = 0 ;
24100: LD_ADDR_OWVAR 35
24104: PUSH
24105: LD_INT 0
24107: ST_TO_ADDR
// un = CreateHuman ;
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: CALL_OW 44
24117: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_INT 18
24125: PPUSH
24126: LD_INT 0
24128: PPUSH
24129: CALL_OW 49
// end ;
24133: GO 24040
24135: POP
24136: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: DOUBLE
24143: LD_INT 1
24145: DEC
24146: ST_TO_ADDR
24147: LD_INT 1
24149: PPUSH
24150: LD_INT 3
24152: PPUSH
24153: CALL_OW 12
24157: PUSH
24158: LD_OWVAR 67
24162: PLUS
24163: PUSH
24164: FOR_TO
24165: IFFALSE 24314
// begin hc_sex = sex_male ;
24167: LD_ADDR_OWVAR 27
24171: PUSH
24172: LD_INT 1
24174: ST_TO_ADDR
// uc_side = 0 ;
24175: LD_ADDR_OWVAR 20
24179: PUSH
24180: LD_INT 0
24182: ST_TO_ADDR
// uc_nation = nation_nature ;
24183: LD_ADDR_OWVAR 21
24187: PUSH
24188: LD_INT 0
24190: ST_TO_ADDR
// hc_class = class_apeman ;
24191: LD_ADDR_OWVAR 28
24195: PUSH
24196: LD_INT 12
24198: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24199: LD_ADDR_OWVAR 31
24203: PUSH
24204: LD_INT 2
24206: PPUSH
24207: LD_INT 5
24209: PPUSH
24210: CALL_OW 12
24214: PUSH
24215: LD_INT 0
24217: PPUSH
24218: LD_INT 2
24220: PPUSH
24221: CALL_OW 12
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24238: LD_ADDR_OWVAR 35
24242: PUSH
24243: LD_INT 20
24245: PPUSH
24246: LD_INT 30
24248: PPUSH
24249: CALL_OW 12
24253: PUSH
24254: LD_INT 30
24256: PPUSH
24257: LD_INT 40
24259: PPUSH
24260: CALL_OW 12
24264: PUSH
24265: LD_INT 40
24267: PPUSH
24268: LD_INT 50
24270: PPUSH
24271: CALL_OW 12
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: PUSH
24281: LD_OWVAR 67
24285: ARRAY
24286: ST_TO_ADDR
// un = CreateHuman ;
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: CALL_OW 44
24296: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24297: LD_VAR 0 3
24301: PPUSH
24302: LD_INT 19
24304: PPUSH
24305: LD_INT 0
24307: PPUSH
24308: CALL_OW 49
// end ;
24312: GO 24164
24314: POP
24315: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24316: LD_ADDR_VAR 0 2
24320: PUSH
24321: DOUBLE
24322: LD_INT 1
24324: DEC
24325: ST_TO_ADDR
24326: LD_INT 5
24328: PPUSH
24329: LD_INT 6
24331: PPUSH
24332: CALL_OW 12
24336: PUSH
24337: LD_OWVAR 67
24341: PLUS
24342: PUSH
24343: FOR_TO
24344: IFFALSE 24452
// begin hc_sex = sex_male ;
24346: LD_ADDR_OWVAR 27
24350: PUSH
24351: LD_INT 1
24353: ST_TO_ADDR
// uc_side = 0 ;
24354: LD_ADDR_OWVAR 20
24358: PUSH
24359: LD_INT 0
24361: ST_TO_ADDR
// uc_nation = nation_nature ;
24362: LD_ADDR_OWVAR 21
24366: PUSH
24367: LD_INT 0
24369: ST_TO_ADDR
// hc_class = class_apeman ;
24370: LD_ADDR_OWVAR 28
24374: PUSH
24375: LD_INT 12
24377: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24378: LD_ADDR_OWVAR 31
24382: PUSH
24383: LD_INT 2
24385: PPUSH
24386: LD_INT 5
24388: PPUSH
24389: CALL_OW 12
24393: PUSH
24394: LD_INT 0
24396: PPUSH
24397: LD_INT 2
24399: PPUSH
24400: CALL_OW 12
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: ST_TO_ADDR
// hc_agressivity = 0 ;
24417: LD_ADDR_OWVAR 35
24421: PUSH
24422: LD_INT 0
24424: ST_TO_ADDR
// un = CreateHuman ;
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: CALL_OW 44
24434: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24435: LD_VAR 0 3
24439: PPUSH
24440: LD_INT 20
24442: PPUSH
24443: LD_INT 0
24445: PPUSH
24446: CALL_OW 49
// end ;
24450: GO 24343
24452: POP
24453: POP
// end ; end_of_file end_of_file
24454: LD_VAR 0 1
24458: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24459: GO 24461
24461: DISABLE
// begin ru_radar := 98 ;
24462: LD_ADDR_EXP 51
24466: PUSH
24467: LD_INT 98
24469: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24470: LD_ADDR_EXP 52
24474: PUSH
24475: LD_INT 89
24477: ST_TO_ADDR
// us_hack := 99 ;
24478: LD_ADDR_EXP 53
24482: PUSH
24483: LD_INT 99
24485: ST_TO_ADDR
// us_artillery := 97 ;
24486: LD_ADDR_EXP 54
24490: PUSH
24491: LD_INT 97
24493: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24494: LD_ADDR_EXP 55
24498: PUSH
24499: LD_INT 91
24501: ST_TO_ADDR
// end ; end_of_file end_of_file
24502: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun ; every 0 0$1 do
24503: GO 24505
24505: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24506: LD_STRING initStreamRollete();
24508: PPUSH
24509: CALL_OW 559
// InitStreamMode ;
24513: CALL 24518 0 0
// end ;
24517: END
// function InitStreamMode ; begin
24518: LD_INT 0
24520: PPUSH
// streamModeActive := false ;
24521: LD_ADDR_EXP 56
24525: PUSH
24526: LD_INT 0
24528: ST_TO_ADDR
// sRocket := false ;
24529: LD_ADDR_EXP 59
24533: PUSH
24534: LD_INT 0
24536: ST_TO_ADDR
// sSpeed := false ;
24537: LD_ADDR_EXP 58
24541: PUSH
24542: LD_INT 0
24544: ST_TO_ADDR
// sEngine := false ;
24545: LD_ADDR_EXP 60
24549: PUSH
24550: LD_INT 0
24552: ST_TO_ADDR
// sSpec := false ;
24553: LD_ADDR_EXP 57
24557: PUSH
24558: LD_INT 0
24560: ST_TO_ADDR
// sLevel := false ;
24561: LD_ADDR_EXP 61
24565: PUSH
24566: LD_INT 0
24568: ST_TO_ADDR
// sArmoury := false ;
24569: LD_ADDR_EXP 62
24573: PUSH
24574: LD_INT 0
24576: ST_TO_ADDR
// sRadar := false ;
24577: LD_ADDR_EXP 63
24581: PUSH
24582: LD_INT 0
24584: ST_TO_ADDR
// sBunker := false ;
24585: LD_ADDR_EXP 64
24589: PUSH
24590: LD_INT 0
24592: ST_TO_ADDR
// sHack := false ;
24593: LD_ADDR_EXP 65
24597: PUSH
24598: LD_INT 0
24600: ST_TO_ADDR
// sFire := false ;
24601: LD_ADDR_EXP 66
24605: PUSH
24606: LD_INT 0
24608: ST_TO_ADDR
// sRefresh := false ;
24609: LD_ADDR_EXP 67
24613: PUSH
24614: LD_INT 0
24616: ST_TO_ADDR
// sExp := false ;
24617: LD_ADDR_EXP 68
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// sDepot := false ;
24625: LD_ADDR_EXP 69
24629: PUSH
24630: LD_INT 0
24632: ST_TO_ADDR
// sFlag := false ;
24633: LD_ADDR_EXP 70
24637: PUSH
24638: LD_INT 0
24640: ST_TO_ADDR
// sSold := false ;
24641: LD_ADDR_EXP 71
24645: PUSH
24646: LD_INT 0
24648: ST_TO_ADDR
// sDiff := false ;
24649: LD_ADDR_EXP 72
24653: PUSH
24654: LD_INT 0
24656: ST_TO_ADDR
// sTiger := false ;
24657: LD_ADDR_EXP 73
24661: PUSH
24662: LD_INT 0
24664: ST_TO_ADDR
// sBomb := false ;
24665: LD_ADDR_EXP 74
24669: PUSH
24670: LD_INT 0
24672: ST_TO_ADDR
// sFog := false ;
24673: LD_ADDR_EXP 75
24677: PUSH
24678: LD_INT 0
24680: ST_TO_ADDR
// sReset := false ;
24681: LD_ADDR_EXP 76
24685: PUSH
24686: LD_INT 0
24688: ST_TO_ADDR
// sSun := false ;
24689: LD_ADDR_EXP 77
24693: PUSH
24694: LD_INT 0
24696: ST_TO_ADDR
// end ;
24697: LD_VAR 0 1
24701: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
24702: LD_VAR 0 2
24706: PUSH
24707: LD_INT 100
24709: EQUAL
24710: IFFALSE 25119
// begin if not StreamModeActive then
24712: LD_EXP 56
24716: NOT
24717: IFFALSE 24727
// StreamModeActive := true ;
24719: LD_ADDR_EXP 56
24723: PUSH
24724: LD_INT 1
24726: ST_TO_ADDR
// if p3 = 0 then
24727: LD_VAR 0 3
24731: PUSH
24732: LD_INT 0
24734: EQUAL
24735: IFFALSE 24741
// InitStreamMode ;
24737: CALL 24518 0 0
// if p3 = 1 then
24741: LD_VAR 0 3
24745: PUSH
24746: LD_INT 1
24748: EQUAL
24749: IFFALSE 24759
// sRocket := true ;
24751: LD_ADDR_EXP 59
24755: PUSH
24756: LD_INT 1
24758: ST_TO_ADDR
// if p3 = 2 then
24759: LD_VAR 0 3
24763: PUSH
24764: LD_INT 2
24766: EQUAL
24767: IFFALSE 24777
// sSpeed := true ;
24769: LD_ADDR_EXP 58
24773: PUSH
24774: LD_INT 1
24776: ST_TO_ADDR
// if p3 = 3 then
24777: LD_VAR 0 3
24781: PUSH
24782: LD_INT 3
24784: EQUAL
24785: IFFALSE 24795
// sEngine := true ;
24787: LD_ADDR_EXP 60
24791: PUSH
24792: LD_INT 1
24794: ST_TO_ADDR
// if p3 = 4 then
24795: LD_VAR 0 3
24799: PUSH
24800: LD_INT 4
24802: EQUAL
24803: IFFALSE 24813
// sSpec := true ;
24805: LD_ADDR_EXP 57
24809: PUSH
24810: LD_INT 1
24812: ST_TO_ADDR
// if p3 = 5 then
24813: LD_VAR 0 3
24817: PUSH
24818: LD_INT 5
24820: EQUAL
24821: IFFALSE 24831
// sLevel := true ;
24823: LD_ADDR_EXP 61
24827: PUSH
24828: LD_INT 1
24830: ST_TO_ADDR
// if p3 = 6 then
24831: LD_VAR 0 3
24835: PUSH
24836: LD_INT 6
24838: EQUAL
24839: IFFALSE 24849
// sArmoury := true ;
24841: LD_ADDR_EXP 62
24845: PUSH
24846: LD_INT 1
24848: ST_TO_ADDR
// if p3 = 7 then
24849: LD_VAR 0 3
24853: PUSH
24854: LD_INT 7
24856: EQUAL
24857: IFFALSE 24867
// sRadar := true ;
24859: LD_ADDR_EXP 63
24863: PUSH
24864: LD_INT 1
24866: ST_TO_ADDR
// if p3 = 8 then
24867: LD_VAR 0 3
24871: PUSH
24872: LD_INT 8
24874: EQUAL
24875: IFFALSE 24885
// sBunker := true ;
24877: LD_ADDR_EXP 64
24881: PUSH
24882: LD_INT 1
24884: ST_TO_ADDR
// if p3 = 9 then
24885: LD_VAR 0 3
24889: PUSH
24890: LD_INT 9
24892: EQUAL
24893: IFFALSE 24903
// sHack := true ;
24895: LD_ADDR_EXP 65
24899: PUSH
24900: LD_INT 1
24902: ST_TO_ADDR
// if p3 = 10 then
24903: LD_VAR 0 3
24907: PUSH
24908: LD_INT 10
24910: EQUAL
24911: IFFALSE 24921
// sFire := true ;
24913: LD_ADDR_EXP 66
24917: PUSH
24918: LD_INT 1
24920: ST_TO_ADDR
// if p3 = 11 then
24921: LD_VAR 0 3
24925: PUSH
24926: LD_INT 11
24928: EQUAL
24929: IFFALSE 24939
// sRefresh := true ;
24931: LD_ADDR_EXP 67
24935: PUSH
24936: LD_INT 1
24938: ST_TO_ADDR
// if p3 = 12 then
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 12
24946: EQUAL
24947: IFFALSE 24957
// sExp := true ;
24949: LD_ADDR_EXP 68
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
// if p3 = 13 then
24957: LD_VAR 0 3
24961: PUSH
24962: LD_INT 13
24964: EQUAL
24965: IFFALSE 24975
// sDepot := true ;
24967: LD_ADDR_EXP 69
24971: PUSH
24972: LD_INT 1
24974: ST_TO_ADDR
// if p3 = 14 then
24975: LD_VAR 0 3
24979: PUSH
24980: LD_INT 14
24982: EQUAL
24983: IFFALSE 24993
// sFlag := true ;
24985: LD_ADDR_EXP 70
24989: PUSH
24990: LD_INT 1
24992: ST_TO_ADDR
// if p3 = 101 then
24993: LD_VAR 0 3
24997: PUSH
24998: LD_INT 101
25000: EQUAL
25001: IFFALSE 25011
// sSold := true ;
25003: LD_ADDR_EXP 71
25007: PUSH
25008: LD_INT 1
25010: ST_TO_ADDR
// if p3 = 102 then
25011: LD_VAR 0 3
25015: PUSH
25016: LD_INT 102
25018: EQUAL
25019: IFFALSE 25029
// sDiff := true ;
25021: LD_ADDR_EXP 72
25025: PUSH
25026: LD_INT 1
25028: ST_TO_ADDR
// if p3 = 103 then
25029: LD_VAR 0 3
25033: PUSH
25034: LD_INT 103
25036: EQUAL
25037: IFFALSE 25047
// sFog := true ;
25039: LD_ADDR_EXP 75
25043: PUSH
25044: LD_INT 1
25046: ST_TO_ADDR
// if p3 = 104 then
25047: LD_VAR 0 3
25051: PUSH
25052: LD_INT 104
25054: EQUAL
25055: IFFALSE 25065
// sReset := true ;
25057: LD_ADDR_EXP 76
25061: PUSH
25062: LD_INT 1
25064: ST_TO_ADDR
// if p3 = 105 then
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 105
25072: EQUAL
25073: IFFALSE 25083
// sSun := true ;
25075: LD_ADDR_EXP 77
25079: PUSH
25080: LD_INT 1
25082: ST_TO_ADDR
// if p3 = 106 then
25083: LD_VAR 0 3
25087: PUSH
25088: LD_INT 106
25090: EQUAL
25091: IFFALSE 25101
// sTiger := true ;
25093: LD_ADDR_EXP 73
25097: PUSH
25098: LD_INT 1
25100: ST_TO_ADDR
// if p3 = 107 then
25101: LD_VAR 0 3
25105: PUSH
25106: LD_INT 107
25108: EQUAL
25109: IFFALSE 25119
// sBomb := true ;
25111: LD_ADDR_EXP 74
25115: PUSH
25116: LD_INT 1
25118: ST_TO_ADDR
// end ; end ;
25119: PPOPN 6
25121: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25122: LD_EXP 56
25126: PUSH
25127: LD_EXP 59
25131: AND
25132: IFFALSE 25253
25134: GO 25136
25136: DISABLE
25137: LD_INT 0
25139: PPUSH
25140: PPUSH
// begin enable ;
25141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25142: LD_ADDR_VAR 0 2
25146: PUSH
25147: LD_INT 22
25149: PUSH
25150: LD_OWVAR 2
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 34
25164: PUSH
25165: LD_INT 7
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 34
25174: PUSH
25175: LD_INT 45
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 34
25184: PUSH
25185: LD_INT 28
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 34
25194: PUSH
25195: LD_INT 47
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 69
25217: ST_TO_ADDR
// if not tmp then
25218: LD_VAR 0 2
25222: NOT
25223: IFFALSE 25227
// exit ;
25225: GO 25253
// for i in tmp do
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_VAR 0 2
25236: PUSH
25237: FOR_IN
25238: IFFALSE 25251
// begin DestroyUnit ( i ) ;
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 65
// end ;
25249: GO 25237
25251: POP
25252: POP
// end ;
25253: PPOPN 2
25255: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25256: LD_EXP 56
25260: PUSH
25261: LD_EXP 60
25265: AND
25266: IFFALSE 25347
25268: GO 25270
25270: DISABLE
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
// begin enable ;
25275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25276: LD_ADDR_VAR 0 2
25280: PUSH
25281: LD_INT 22
25283: PUSH
25284: LD_OWVAR 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 32
25295: PUSH
25296: LD_INT 3
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PPUSH
25307: CALL_OW 69
25311: ST_TO_ADDR
// if not tmp then
25312: LD_VAR 0 2
25316: NOT
25317: IFFALSE 25321
// exit ;
25319: GO 25347
// for i in tmp do
25321: LD_ADDR_VAR 0 1
25325: PUSH
25326: LD_VAR 0 2
25330: PUSH
25331: FOR_IN
25332: IFFALSE 25345
// begin DestroyUnit ( i ) ;
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 65
// end ;
25343: GO 25331
25345: POP
25346: POP
// end ;
25347: PPOPN 2
25349: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25350: LD_EXP 56
25354: PUSH
25355: LD_EXP 57
25359: AND
25360: IFFALSE 25453
25362: GO 25364
25364: DISABLE
25365: LD_INT 0
25367: PPUSH
// begin enable ;
25368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25369: LD_ADDR_VAR 0 1
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 5
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 25
25401: PUSH
25402: LD_INT 9
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 25
25411: PUSH
25412: LD_INT 8
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PPUSH
25429: CALL_OW 69
25433: PUSH
25434: FOR_IN
25435: IFFALSE 25451
// begin SetClass ( i , 1 ) ;
25437: LD_VAR 0 1
25441: PPUSH
25442: LD_INT 1
25444: PPUSH
25445: CALL_OW 336
// end ;
25449: GO 25434
25451: POP
25452: POP
// end ;
25453: PPOPN 1
25455: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25456: LD_EXP 56
25460: PUSH
25461: LD_EXP 58
25465: AND
25466: PUSH
25467: LD_OWVAR 65
25471: PUSH
25472: LD_INT 7
25474: LESS
25475: AND
25476: IFFALSE 25490
25478: GO 25480
25480: DISABLE
// begin enable ;
25481: ENABLE
// game_speed := 7 ;
25482: LD_ADDR_OWVAR 65
25486: PUSH
25487: LD_INT 7
25489: ST_TO_ADDR
// end ;
25490: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25491: LD_EXP 56
25495: PUSH
25496: LD_EXP 61
25500: AND
25501: IFFALSE 25703
25503: GO 25505
25505: DISABLE
25506: LD_INT 0
25508: PPUSH
25509: PPUSH
25510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25511: LD_ADDR_VAR 0 3
25515: PUSH
25516: LD_INT 81
25518: PUSH
25519: LD_OWVAR 2
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 21
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PPUSH
25542: CALL_OW 69
25546: ST_TO_ADDR
// if not tmp then
25547: LD_VAR 0 3
25551: NOT
25552: IFFALSE 25556
// exit ;
25554: GO 25703
// if tmp > 5 then
25556: LD_VAR 0 3
25560: PUSH
25561: LD_INT 5
25563: GREATER
25564: IFFALSE 25576
// k := 5 else
25566: LD_ADDR_VAR 0 2
25570: PUSH
25571: LD_INT 5
25573: ST_TO_ADDR
25574: GO 25586
// k := tmp ;
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_VAR 0 3
25585: ST_TO_ADDR
// for i := 1 to k do
25586: LD_ADDR_VAR 0 1
25590: PUSH
25591: DOUBLE
25592: LD_INT 1
25594: DEC
25595: ST_TO_ADDR
25596: LD_VAR 0 2
25600: PUSH
25601: FOR_TO
25602: IFFALSE 25701
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25604: LD_VAR 0 3
25608: PUSH
25609: LD_VAR 0 1
25613: ARRAY
25614: PPUSH
25615: LD_VAR 0 1
25619: PUSH
25620: LD_INT 4
25622: MOD
25623: PUSH
25624: LD_INT 1
25626: PLUS
25627: PPUSH
25628: CALL_OW 259
25632: PUSH
25633: LD_INT 10
25635: LESS
25636: IFFALSE 25699
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25638: LD_VAR 0 3
25642: PUSH
25643: LD_VAR 0 1
25647: ARRAY
25648: PPUSH
25649: LD_VAR 0 1
25653: PUSH
25654: LD_INT 4
25656: MOD
25657: PUSH
25658: LD_INT 1
25660: PLUS
25661: PPUSH
25662: LD_VAR 0 3
25666: PUSH
25667: LD_VAR 0 1
25671: ARRAY
25672: PPUSH
25673: LD_VAR 0 1
25677: PUSH
25678: LD_INT 4
25680: MOD
25681: PUSH
25682: LD_INT 1
25684: PLUS
25685: PPUSH
25686: CALL_OW 259
25690: PUSH
25691: LD_INT 1
25693: PLUS
25694: PPUSH
25695: CALL_OW 237
25699: GO 25601
25701: POP
25702: POP
// end ;
25703: PPOPN 3
25705: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25706: LD_EXP 56
25710: PUSH
25711: LD_EXP 62
25715: AND
25716: IFFALSE 25736
25718: GO 25720
25720: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25721: LD_INT 4
25723: PPUSH
25724: LD_OWVAR 2
25728: PPUSH
25729: LD_INT 0
25731: PPUSH
25732: CALL_OW 324
25736: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25737: LD_EXP 56
25741: PUSH
25742: LD_EXP 63
25746: AND
25747: IFFALSE 25846
25749: GO 25751
25751: DISABLE
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
// begin enable ;
25756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25757: LD_ADDR_VAR 0 2
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_OWVAR 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: LD_INT 34
25779: PUSH
25780: LD_INT 11
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 34
25789: PUSH
25790: LD_INT 30
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: LIST
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PPUSH
25806: CALL_OW 69
25810: ST_TO_ADDR
// if not tmp then
25811: LD_VAR 0 2
25815: NOT
25816: IFFALSE 25820
// exit ;
25818: GO 25846
// for i in tmp do
25820: LD_ADDR_VAR 0 1
25824: PUSH
25825: LD_VAR 0 2
25829: PUSH
25830: FOR_IN
25831: IFFALSE 25844
// begin DestroyUnit ( i ) ;
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 65
// end ;
25842: GO 25830
25844: POP
25845: POP
// end ;
25846: PPOPN 2
25848: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25849: LD_EXP 56
25853: PUSH
25854: LD_EXP 64
25858: AND
25859: IFFALSE 25879
25861: GO 25863
25863: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25864: LD_INT 32
25866: PPUSH
25867: LD_OWVAR 2
25871: PPUSH
25872: LD_INT 0
25874: PPUSH
25875: CALL_OW 324
25879: END
// every 0 0$1 trigger StreamModeActive and sHack do
25880: LD_EXP 56
25884: PUSH
25885: LD_EXP 65
25889: AND
25890: IFFALSE 25910
25892: GO 25894
25894: DISABLE
// SetTech ( tech_Virus , your_side , state_disabled ) ;
25895: LD_INT 33
25897: PPUSH
25898: LD_OWVAR 2
25902: PPUSH
25903: LD_INT 0
25905: PPUSH
25906: CALL_OW 322
25910: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25911: LD_EXP 56
25915: PUSH
25916: LD_EXP 66
25920: AND
25921: IFFALSE 26000
25923: GO 25925
25925: DISABLE
25926: LD_INT 0
25928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25929: LD_ADDR_VAR 0 1
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 21
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PPUSH
25960: CALL_OW 69
25964: ST_TO_ADDR
// if not tmp then
25965: LD_VAR 0 1
25969: NOT
25970: IFFALSE 25974
// exit ;
25972: GO 26000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25974: LD_VAR 0 1
25978: PUSH
25979: LD_INT 1
25981: PPUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 12
25991: ARRAY
25992: PPUSH
25993: LD_INT 100
25995: PPUSH
25996: CALL_OW 234
// end ;
26000: PPOPN 1
26002: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26003: LD_EXP 56
26007: PUSH
26008: LD_EXP 68
26012: AND
26013: IFFALSE 26111
26015: GO 26017
26017: DISABLE
26018: LD_INT 0
26020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_INT 22
26028: PUSH
26029: LD_OWVAR 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 21
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: ST_TO_ADDR
// if not tmp then
26057: LD_VAR 0 1
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26111
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26066: LD_VAR 0 1
26070: PUSH
26071: LD_INT 1
26073: PPUSH
26074: LD_VAR 0 1
26078: PPUSH
26079: CALL_OW 12
26083: ARRAY
26084: PPUSH
26085: LD_INT 1
26087: PPUSH
26088: LD_INT 4
26090: PPUSH
26091: CALL_OW 12
26095: PPUSH
26096: LD_INT 3000
26098: PPUSH
26099: LD_INT 9000
26101: PPUSH
26102: CALL_OW 12
26106: PPUSH
26107: CALL_OW 492
// end ;
26111: PPOPN 1
26113: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26114: LD_EXP 56
26118: PUSH
26119: LD_EXP 69
26123: AND
26124: IFFALSE 26144
26126: GO 26128
26128: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26129: LD_INT 1
26131: PPUSH
26132: LD_OWVAR 2
26136: PPUSH
26137: LD_INT 0
26139: PPUSH
26140: CALL_OW 324
26144: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26145: LD_EXP 56
26149: PUSH
26150: LD_EXP 70
26154: AND
26155: IFFALSE 26238
26157: GO 26159
26159: DISABLE
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26164: LD_ADDR_VAR 0 2
26168: PUSH
26169: LD_INT 22
26171: PUSH
26172: LD_OWVAR 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 21
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 69
26199: ST_TO_ADDR
// if not tmp then
26200: LD_VAR 0 2
26204: NOT
26205: IFFALSE 26209
// exit ;
26207: GO 26238
// for i in tmp do
26209: LD_ADDR_VAR 0 1
26213: PUSH
26214: LD_VAR 0 2
26218: PUSH
26219: FOR_IN
26220: IFFALSE 26236
// SetBLevel ( i , 10 ) ;
26222: LD_VAR 0 1
26226: PPUSH
26227: LD_INT 10
26229: PPUSH
26230: CALL_OW 241
26234: GO 26219
26236: POP
26237: POP
// end ;
26238: PPOPN 2
26240: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
26241: LD_EXP 56
26245: PUSH
26246: LD_EXP 71
26250: AND
26251: IFFALSE 26334
26253: GO 26255
26255: DISABLE
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26260: LD_ADDR_VAR 0 2
26264: PUSH
26265: LD_INT 22
26267: PUSH
26268: LD_OWVAR 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 25
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PPUSH
26291: CALL_OW 69
26295: ST_TO_ADDR
// if not tmp then
26296: LD_VAR 0 2
26300: NOT
26301: IFFALSE 26305
// exit ;
26303: GO 26334
// for i in tmp do
26305: LD_ADDR_VAR 0 1
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: FOR_IN
26316: IFFALSE 26332
// SetClass ( i , 4 ) ;
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_INT 4
26325: PPUSH
26326: CALL_OW 336
26330: GO 26315
26332: POP
26333: POP
// end ;
26334: PPOPN 2
26336: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26337: LD_EXP 56
26341: PUSH
26342: LD_EXP 72
26346: AND
26347: PUSH
26348: LD_OWVAR 67
26352: PUSH
26353: LD_INT 3
26355: LESS
26356: AND
26357: IFFALSE 26376
26359: GO 26361
26361: DISABLE
// Difficulty := Difficulty + 1 ;
26362: LD_ADDR_OWVAR 67
26366: PUSH
26367: LD_OWVAR 67
26371: PUSH
26372: LD_INT 1
26374: PLUS
26375: ST_TO_ADDR
26376: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26377: LD_EXP 56
26381: PUSH
26382: LD_EXP 73
26386: AND
26387: IFFALSE 26490
26389: GO 26391
26391: DISABLE
26392: LD_INT 0
26394: PPUSH
// begin for i := 1 to 5 do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: DOUBLE
26401: LD_INT 1
26403: DEC
26404: ST_TO_ADDR
26405: LD_INT 5
26407: PUSH
26408: FOR_TO
26409: IFFALSE 26488
// begin uc_nation := nation_nature ;
26411: LD_ADDR_OWVAR 21
26415: PUSH
26416: LD_INT 0
26418: ST_TO_ADDR
// uc_side := 0 ;
26419: LD_ADDR_OWVAR 20
26423: PUSH
26424: LD_INT 0
26426: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26427: LD_ADDR_OWVAR 29
26431: PUSH
26432: LD_INT 12
26434: PUSH
26435: LD_INT 12
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: ST_TO_ADDR
// hc_agressivity := 20 ;
26442: LD_ADDR_OWVAR 35
26446: PUSH
26447: LD_INT 20
26449: ST_TO_ADDR
// hc_class := class_tiger ;
26450: LD_ADDR_OWVAR 28
26454: PUSH
26455: LD_INT 14
26457: ST_TO_ADDR
// hc_gallery :=  ;
26458: LD_ADDR_OWVAR 33
26462: PUSH
26463: LD_STRING 
26465: ST_TO_ADDR
// hc_name :=  ;
26466: LD_ADDR_OWVAR 26
26470: PUSH
26471: LD_STRING 
26473: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26474: CALL_OW 44
26478: PPUSH
26479: LD_INT 0
26481: PPUSH
26482: CALL_OW 51
// end ;
26486: GO 26408
26488: POP
26489: POP
// end ;
26490: PPOPN 1
26492: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
26493: LD_EXP 56
26497: PUSH
26498: LD_EXP 74
26502: AND
26503: IFFALSE 26677
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
26511: PPUSH
26512: PPUSH
26513: PPUSH
// begin result := false ;
26514: LD_ADDR_VAR 0 4
26518: PUSH
26519: LD_INT 0
26521: ST_TO_ADDR
// for i := 1 to 8 do
26522: LD_ADDR_VAR 0 1
26526: PUSH
26527: DOUBLE
26528: LD_INT 1
26530: DEC
26531: ST_TO_ADDR
26532: LD_INT 8
26534: PUSH
26535: FOR_TO
26536: IFFALSE 26647
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: LD_INT 10
26545: PUSH
26546: LD_INT 50
26548: PUSH
26549: LD_INT 90
26551: PUSH
26552: LD_INT 140
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PPUSH
26564: LD_INT 4
26566: PPUSH
26567: CALL_OW 12
26571: ARRAY
26572: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
26573: LD_ADDR_VAR 0 3
26577: PUSH
26578: LD_INT 10
26580: PUSH
26581: LD_INT 50
26583: PUSH
26584: LD_INT 90
26586: PUSH
26587: LD_INT 140
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: PPUSH
26599: LD_INT 4
26601: PPUSH
26602: CALL_OW 12
26606: ARRAY
26607: ST_TO_ADDR
// if ValidHex ( x , y ) then
26608: LD_VAR 0 2
26612: PPUSH
26613: LD_VAR 0 3
26617: PPUSH
26618: CALL_OW 488
26622: IFFALSE 26645
// begin result := [ x , y ] ;
26624: LD_ADDR_VAR 0 4
26628: PUSH
26629: LD_VAR 0 2
26633: PUSH
26634: LD_VAR 0 3
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: ST_TO_ADDR
// break ;
26643: GO 26647
// end ; end ;
26645: GO 26535
26647: POP
26648: POP
// if result then
26649: LD_VAR 0 4
26653: IFFALSE 26677
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26655: LD_VAR 0 4
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 4
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: CALL_OW 429
// end ;
26677: PPOPN 4
26679: END
// every 0 0$1 trigger StreamModeActive and sReset do
26680: LD_EXP 56
26684: PUSH
26685: LD_EXP 76
26689: AND
26690: IFFALSE 26702
26692: GO 26694
26694: DISABLE
// YouLost (  ) ;
26695: LD_STRING 
26697: PPUSH
26698: CALL_OW 104
26702: END
// every 0 0$1 trigger StreamModeActive and sFog do
26703: LD_EXP 56
26707: PUSH
26708: LD_EXP 75
26712: AND
26713: IFFALSE 26727
26715: GO 26717
26717: DISABLE
// FogOff ( your_side ) ;
26718: LD_OWVAR 2
26722: PPUSH
26723: CALL_OW 344
26727: END
// every 0 0$1 trigger StreamModeActive and sSun do
26728: LD_EXP 56
26732: PUSH
26733: LD_EXP 77
26737: AND
26738: IFFALSE 26766
26740: GO 26742
26742: DISABLE
// begin solar_recharge_percent := 0 ;
26743: LD_ADDR_OWVAR 79
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26751: LD_INT 10500
26753: PPUSH
26754: CALL_OW 67
// solar_recharge_percent := 100 ;
26758: LD_ADDR_OWVAR 79
26762: PUSH
26763: LD_INT 100
26765: ST_TO_ADDR
// end ; end_of_file
26766: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
26767: LD_INT 0
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26773: LD_VAR 0 1
26777: PPUSH
26778: CALL_OW 264
26782: PUSH
26783: LD_EXP 55
26787: EQUAL
26788: IFFALSE 26860
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26790: LD_INT 68
26792: PPUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 255
26802: PPUSH
26803: CALL_OW 321
26807: PUSH
26808: LD_INT 2
26810: EQUAL
26811: IFFALSE 26823
// eff := 70 else
26813: LD_ADDR_VAR 0 6
26817: PUSH
26818: LD_INT 70
26820: ST_TO_ADDR
26821: GO 26831
// eff := 30 ;
26823: LD_ADDR_VAR 0 6
26827: PUSH
26828: LD_INT 30
26830: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26831: LD_VAR 0 1
26835: PPUSH
26836: CALL_OW 250
26840: PPUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 251
26850: PPUSH
26851: LD_VAR 0 6
26855: PPUSH
26856: CALL_OW 495
// end ; end ;
26860: LD_VAR 0 4
26864: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
26865: LD_INT 0
26867: PPUSH
26868: PPUSH
26869: PPUSH
26870: PPUSH
26871: PPUSH
26872: PPUSH
// if cmd = 124 then
26873: LD_VAR 0 1
26877: PUSH
26878: LD_INT 124
26880: EQUAL
26881: IFFALSE 27087
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
26883: LD_ADDR_VAR 0 5
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 34
26893: PUSH
26894: LD_INT 53
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 34
26903: PUSH
26904: LD_INT 14
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: PPUSH
26916: CALL_OW 69
26920: ST_TO_ADDR
// if not tmp then
26921: LD_VAR 0 5
26925: NOT
26926: IFFALSE 26930
// exit ;
26928: GO 27087
// for i in tmp do
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_VAR 0 5
26939: PUSH
26940: FOR_IN
26941: IFFALSE 27085
// begin taskList := GetTaskList ( i ) ;
26943: LD_ADDR_VAR 0 6
26947: PUSH
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 437
26957: ST_TO_ADDR
// if not taskList then
26958: LD_VAR 0 6
26962: NOT
26963: IFFALSE 26967
// continue ;
26965: GO 26940
// for j = 1 to taskList do
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_VAR 0 6
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27081
// if taskList [ j ] [ 1 ] = | then
26985: LD_VAR 0 6
26989: PUSH
26990: LD_VAR 0 4
26994: ARRAY
26995: PUSH
26996: LD_INT 1
26998: ARRAY
26999: PUSH
27000: LD_STRING |
27002: EQUAL
27003: IFFALSE 27079
// begin _taskList := Delete ( taskList , 1 ) ;
27005: LD_ADDR_VAR 0 7
27009: PUSH
27010: LD_VAR 0 6
27014: PPUSH
27015: LD_INT 1
27017: PPUSH
27018: CALL_OW 3
27022: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
27023: LD_VAR 0 3
27027: PPUSH
27028: LD_VAR 0 7
27032: PPUSH
27033: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
27037: LD_VAR 0 3
27041: PPUSH
27042: LD_VAR 0 6
27046: PUSH
27047: LD_VAR 0 4
27051: ARRAY
27052: PUSH
27053: LD_INT 2
27055: ARRAY
27056: PPUSH
27057: LD_VAR 0 6
27061: PUSH
27062: LD_VAR 0 4
27066: ARRAY
27067: PUSH
27068: LD_INT 3
27070: ARRAY
27071: PPUSH
27072: LD_INT 8
27074: PPUSH
27075: CALL 27092 0 4
// end ;
27079: GO 26982
27081: POP
27082: POP
// end ;
27083: GO 26940
27085: POP
27086: POP
// end ; end ;
27087: LD_VAR 0 2
27091: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
27097: PPUSH
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
27102: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27103: LD_VAR 0 1
27107: NOT
27108: PUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: LD_VAR 0 3
27118: PPUSH
27119: CALL_OW 488
27123: NOT
27124: OR
27125: PUSH
27126: LD_VAR 0 4
27130: NOT
27131: OR
27132: IFFALSE 27136
// exit ;
27134: GO 27476
// list := [ ] ;
27136: LD_ADDR_VAR 0 13
27140: PUSH
27141: EMPTY
27142: ST_TO_ADDR
// if x - r < 0 then
27143: LD_VAR 0 2
27147: PUSH
27148: LD_VAR 0 4
27152: MINUS
27153: PUSH
27154: LD_INT 0
27156: LESS
27157: IFFALSE 27169
// min_x := 0 else
27159: LD_ADDR_VAR 0 7
27163: PUSH
27164: LD_INT 0
27166: ST_TO_ADDR
27167: GO 27185
// min_x := x - r ;
27169: LD_ADDR_VAR 0 7
27173: PUSH
27174: LD_VAR 0 2
27178: PUSH
27179: LD_VAR 0 4
27183: MINUS
27184: ST_TO_ADDR
// if y - r < 0 then
27185: LD_VAR 0 3
27189: PUSH
27190: LD_VAR 0 4
27194: MINUS
27195: PUSH
27196: LD_INT 0
27198: LESS
27199: IFFALSE 27211
// min_y := 0 else
27201: LD_ADDR_VAR 0 8
27205: PUSH
27206: LD_INT 0
27208: ST_TO_ADDR
27209: GO 27227
// min_y := y - r ;
27211: LD_ADDR_VAR 0 8
27215: PUSH
27216: LD_VAR 0 3
27220: PUSH
27221: LD_VAR 0 4
27225: MINUS
27226: ST_TO_ADDR
// max_x := x + r ;
27227: LD_ADDR_VAR 0 9
27231: PUSH
27232: LD_VAR 0 2
27236: PUSH
27237: LD_VAR 0 4
27241: PLUS
27242: ST_TO_ADDR
// max_y := y + r ;
27243: LD_ADDR_VAR 0 10
27247: PUSH
27248: LD_VAR 0 3
27252: PUSH
27253: LD_VAR 0 4
27257: PLUS
27258: ST_TO_ADDR
// for _x = min_x to max_x do
27259: LD_ADDR_VAR 0 11
27263: PUSH
27264: DOUBLE
27265: LD_VAR 0 7
27269: DEC
27270: ST_TO_ADDR
27271: LD_VAR 0 9
27275: PUSH
27276: FOR_TO
27277: IFFALSE 27394
// for _y = min_y to max_y do
27279: LD_ADDR_VAR 0 12
27283: PUSH
27284: DOUBLE
27285: LD_VAR 0 8
27289: DEC
27290: ST_TO_ADDR
27291: LD_VAR 0 10
27295: PUSH
27296: FOR_TO
27297: IFFALSE 27390
// begin if not ValidHex ( _x , _y ) then
27299: LD_VAR 0 11
27303: PPUSH
27304: LD_VAR 0 12
27308: PPUSH
27309: CALL_OW 488
27313: NOT
27314: IFFALSE 27318
// continue ;
27316: GO 27296
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27318: LD_VAR 0 11
27322: PPUSH
27323: LD_VAR 0 12
27327: PPUSH
27328: CALL_OW 351
27332: PUSH
27333: LD_VAR 0 11
27337: PPUSH
27338: LD_VAR 0 12
27342: PPUSH
27343: CALL_OW 554
27347: AND
27348: IFFALSE 27388
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27350: LD_ADDR_VAR 0 13
27354: PUSH
27355: LD_VAR 0 13
27359: PPUSH
27360: LD_VAR 0 13
27364: PUSH
27365: LD_INT 1
27367: PLUS
27368: PPUSH
27369: LD_VAR 0 11
27373: PUSH
27374: LD_VAR 0 12
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PPUSH
27383: CALL_OW 2
27387: ST_TO_ADDR
// end ;
27388: GO 27296
27390: POP
27391: POP
27392: GO 27276
27394: POP
27395: POP
// if not list then
27396: LD_VAR 0 13
27400: NOT
27401: IFFALSE 27405
// exit ;
27403: GO 27476
// for i in list do
27405: LD_ADDR_VAR 0 6
27409: PUSH
27410: LD_VAR 0 13
27414: PUSH
27415: FOR_IN
27416: IFFALSE 27474
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27418: LD_VAR 0 1
27422: PPUSH
27423: LD_STRING M
27425: PUSH
27426: LD_VAR 0 6
27430: PUSH
27431: LD_INT 1
27433: ARRAY
27434: PUSH
27435: LD_VAR 0 6
27439: PUSH
27440: LD_INT 2
27442: ARRAY
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: PPUSH
27468: CALL_OW 447
27472: GO 27415
27474: POP
27475: POP
// end ;
27476: LD_VAR 0 5
27480: RET
