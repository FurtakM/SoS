// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: LD_INT 800
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 105000
 172: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 48
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 4
 191: PUSH
 192: LD_INT 6
 194: PUSH
 195: LD_INT 8
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// sendedConvoys = 0 ;
 210: LD_ADDR_EXP 39
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// tamedApemans = 0 ;
 218: LD_ADDR_EXP 32
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ignoreTarget := [ ] ;
 226: LD_ADDR_EXP 45
 230: PUSH
 231: EMPTY
 232: ST_TO_ADDR
// arrivals := [ ] ;
 233: LD_ADDR_EXP 46
 237: PUSH
 238: EMPTY
 239: ST_TO_ADDR
// unitLost = 0 ;
 240: LD_ADDR_EXP 30
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 248: LD_ADDR_EXP 31
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// russianTanks = [ ] ;
 255: LD_ADDR_EXP 36
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 262: LD_ADDR_EXP 37
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// disableHealAI = 0 ;
 269: LD_ADDR_EXP 33
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// strings = [ ] ;
 277: LD_ADDR_EXP 27
 281: PUSH
 282: EMPTY
 283: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 284: LD_INT 4
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: CALL_OW 343
// PrepareDifficulty ;
 294: CALL 6642 0 0
// CreateNature ;
 298: CALL 23706 0 0
// PrepareRussian ;
 302: CALL 5865 0 0
// PrepareVehicles ;
 306: CALL 1637 0 0
// PrepareHeroes ;
 310: CALL 602 0 0
// PrepareOthers ;
 314: CALL 2058 0 0
// PreparePlayerApemans ;
 318: CALL 2200 0 0
// end ;
 322: END
// every 0 0$1 trigger debugMode do var i ;
 323: LD_EXP 42
 327: IFFALSE 554
 329: GO 331
 331: DISABLE
 332: LD_INT 0
 334: PPUSH
// begin enable ;
 335: ENABLE
// fogoff ( true ) ;
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 343: LD_ADDR_VAR 0 1
 347: PUSH
 348: LD_INT 22
 350: PUSH
 351: LD_INT 1
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 21
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PPUSH
 372: CALL_OW 69
 376: PUSH
 377: FOR_IN
 378: IFFALSE 394
// SetLives ( i , 1000 ) ;
 380: LD_VAR 0 1
 384: PPUSH
 385: LD_INT 1000
 387: PPUSH
 388: CALL_OW 234
 392: GO 377
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 30
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PUSH
 430: FOR_IN
 431: IFFALSE 455
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 433: LD_VAR 0 1
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_INT 9999
 448: PPUSH
 449: CALL_OW 277
 453: GO 430
 455: POP
 456: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 457: LD_ADDR_VAR 0 1
 461: PUSH
 462: LD_INT 22
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: LD_INT 30
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// if IsSelected ( rudepo ) then
 518: LD_INT 2
 520: PPUSH
 521: CALL_OW 306
 525: IFFALSE 535
// your_side = 3 ;
 527: LD_ADDR_OWVAR 2
 531: PUSH
 532: LD_INT 3
 534: ST_TO_ADDR
// if IsSelected ( JMM ) then
 535: LD_EXP 1
 539: PPUSH
 540: CALL_OW 306
 544: IFFALSE 554
// your_side = 1 ;
 546: LD_ADDR_OWVAR 2
 550: PUSH
 551: LD_INT 1
 553: ST_TO_ADDR
// end ;
 554: PPOPN 1
 556: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 557: LD_INT 22
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: PUSH
 567: LD_INT 34
 569: PUSH
 570: LD_INT 12
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PPUSH
 581: CALL_OW 69
 585: PUSH
 586: LD_INT 3
 588: GREATEREQUAL
 589: IFFALSE 601
 591: GO 593
 593: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 594: LD_STRING ACH_FULLCARGO
 596: PPUSH
 597: CALL_OW 543
 601: END
// export function PrepareHeroes ; var veh ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
// uc_side = 1 ;
 606: LD_ADDR_OWVAR 20
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// uc_nation = 1 ;
 614: LD_ADDR_OWVAR 21
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 1
 626: PUSH
 627: LD_STRING JMM
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_EXP 44
 637: PPUSH
 638: CALL 41637 0 3
 642: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 643: LD_ADDR_EXP 14
 647: PUSH
 648: LD_STRING Harisson
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: LD_STRING 
 656: PPUSH
 657: CALL 41637 0 3
 661: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 662: LD_ADDR_EXP 10
 666: PUSH
 667: LD_STRING DeltaDoctor
 669: PPUSH
 670: CALL_OW 34
 674: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 675: LD_ADDR_VAR 0 2
 679: PUSH
 680: LD_INT 22
 682: PUSH
 683: LD_INT 1
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PUSH
 690: LD_INT 21
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: PUSH
 700: LD_INT 58
 702: PUSH
 703: EMPTY
 704: LIST
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: LIST
 710: PPUSH
 711: CALL_OW 69
 715: ST_TO_ADDR
// if veh > 0 then
 716: LD_VAR 0 2
 720: PUSH
 721: LD_INT 0
 723: GREATER
 724: IFFALSE 746
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: CALL_OW 52
// end else
 744: GO 761
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 746: LD_EXP 1
 750: PPUSH
 751: LD_INT 2
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 761: LD_STRING LisaIn06
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 30
 771: PUSH
 772: LD_INT 1
 774: EQUAL
 775: IFFALSE 884
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 777: LD_ADDR_VAR 0 2
 781: PUSH
 782: LD_INT 22
 784: PUSH
 785: LD_INT 1
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 21
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 58
 804: PUSH
 805: EMPTY
 806: LIST
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 2
 822: PUSH
 823: LD_STRING Lisa
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 44
 833: PPUSH
 834: CALL 41637 0 3
 838: ST_TO_ADDR
// if veh > 0 then
 839: LD_VAR 0 2
 843: PUSH
 844: LD_INT 0
 846: GREATER
 847: IFFALSE 869
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_VAR 0 2
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 52
// end else
 867: GO 884
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 869: LD_EXP 2
 873: PPUSH
 874: LD_INT 2
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 884: LD_STRING BobbyIn06
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 1007
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 900: LD_ADDR_VAR 0 2
 904: PUSH
 905: LD_INT 22
 907: PUSH
 908: LD_INT 1
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 21
 917: PUSH
 918: LD_INT 2
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 58
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: PPUSH
 936: CALL_OW 69
 940: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 941: LD_ADDR_EXP 3
 945: PUSH
 946: LD_STRING Bobby
 948: PPUSH
 949: LD_INT 1
 951: PPUSH
 952: LD_EXP 44
 956: PPUSH
 957: CALL 41637 0 3
 961: ST_TO_ADDR
// if veh > 0 then
 962: LD_VAR 0 2
 966: PUSH
 967: LD_INT 0
 969: GREATER
 970: IFFALSE 992
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 972: LD_EXP 3
 976: PPUSH
 977: LD_VAR 0 2
 981: PUSH
 982: LD_INT 1
 984: ARRAY
 985: PPUSH
 986: CALL_OW 52
// end else
 990: GO 1007
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 992: LD_EXP 3
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
1007: LD_STRING CyrusIn06
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 30
1017: PUSH
1018: LD_INT 1
1020: EQUAL
1021: IFFALSE 1130
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1023: LD_ADDR_VAR 0 2
1027: PUSH
1028: LD_INT 22
1030: PUSH
1031: LD_INT 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 21
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: LD_INT 58
1050: PUSH
1051: EMPTY
1052: LIST
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL_OW 69
1063: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1064: LD_ADDR_EXP 4
1068: PUSH
1069: LD_STRING Cyrus
1071: PPUSH
1072: LD_INT 1
1074: PPUSH
1075: LD_EXP 44
1079: PPUSH
1080: CALL 41637 0 3
1084: ST_TO_ADDR
// if veh > 0 then
1085: LD_VAR 0 2
1089: PUSH
1090: LD_INT 0
1092: GREATER
1093: IFFALSE 1115
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1095: LD_EXP 4
1099: PPUSH
1100: LD_VAR 0 2
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PPUSH
1109: CALL_OW 52
// end else
1113: GO 1130
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1115: LD_EXP 4
1119: PPUSH
1120: LD_INT 2
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1130: LD_STRING FrankIn06
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 30
1140: PUSH
1141: LD_INT 1
1143: EQUAL
1144: IFFALSE 1253
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1146: LD_ADDR_VAR 0 2
1150: PUSH
1151: LD_INT 22
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PUSH
1171: LD_INT 58
1173: PUSH
1174: EMPTY
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1187: LD_ADDR_EXP 5
1191: PUSH
1192: LD_STRING Frank
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_EXP 44
1202: PPUSH
1203: CALL 41637 0 3
1207: ST_TO_ADDR
// if veh > 0 then
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 0
1215: GREATER
1216: IFFALSE 1238
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1218: LD_EXP 5
1222: PPUSH
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
// end else
1236: GO 1253
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1238: LD_EXP 5
1242: PPUSH
1243: LD_INT 2
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1253: LD_STRING BrownIn06
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL_OW 30
1263: PUSH
1264: LD_INT 1
1266: EQUAL
1267: IFFALSE 1376
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1269: LD_ADDR_VAR 0 2
1273: PUSH
1274: LD_INT 22
1276: PUSH
1277: LD_INT 1
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 21
1286: PUSH
1287: LD_INT 2
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 58
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 69
1309: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1310: LD_ADDR_EXP 6
1314: PUSH
1315: LD_STRING Brown
1317: PPUSH
1318: LD_INT 1
1320: PPUSH
1321: LD_EXP 44
1325: PPUSH
1326: CALL 41637 0 3
1330: ST_TO_ADDR
// if veh > 0 then
1331: LD_VAR 0 2
1335: PUSH
1336: LD_INT 0
1338: GREATER
1339: IFFALSE 1361
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1341: LD_EXP 6
1345: PPUSH
1346: LD_VAR 0 2
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: CALL_OW 52
// end else
1359: GO 1376
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1361: LD_EXP 6
1365: PPUSH
1366: LD_INT 2
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1376: LD_STRING DonaldsonIn06
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 30
1386: PUSH
1387: LD_INT 1
1389: EQUAL
1390: IFFALSE 1499
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1392: LD_ADDR_VAR 0 2
1396: PUSH
1397: LD_INT 22
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 21
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 58
1419: PUSH
1420: EMPTY
1421: LIST
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 69
1432: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1433: LD_ADDR_EXP 7
1437: PUSH
1438: LD_STRING Donaldson
1440: PPUSH
1441: LD_INT 1
1443: PPUSH
1444: LD_EXP 44
1448: PPUSH
1449: CALL 41637 0 3
1453: ST_TO_ADDR
// if veh > 0 then
1454: LD_VAR 0 2
1458: PUSH
1459: LD_INT 0
1461: GREATER
1462: IFFALSE 1484
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1464: LD_EXP 7
1468: PPUSH
1469: LD_VAR 0 2
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PPUSH
1478: CALL_OW 52
// end else
1482: GO 1499
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1484: LD_EXP 7
1488: PPUSH
1489: LD_INT 2
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1499: LD_STRING GladstoneIn06
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 30
1509: PUSH
1510: LD_INT 1
1512: EQUAL
1513: IFFALSE 1622
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_INT 22
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 2
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 58
1542: PUSH
1543: EMPTY
1544: LIST
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: PPUSH
1551: CALL_OW 69
1555: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1556: LD_ADDR_EXP 8
1560: PUSH
1561: LD_STRING Gladstone
1563: PPUSH
1564: LD_INT 1
1566: PPUSH
1567: LD_EXP 44
1571: PPUSH
1572: CALL 41637 0 3
1576: ST_TO_ADDR
// if veh > 0 then
1577: LD_VAR 0 2
1581: PUSH
1582: LD_INT 0
1584: GREATER
1585: IFFALSE 1607
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1587: LD_EXP 8
1591: PPUSH
1592: LD_VAR 0 2
1596: PUSH
1597: LD_INT 1
1599: ARRAY
1600: PPUSH
1601: CALL_OW 52
// end else
1605: GO 1622
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1607: LD_EXP 8
1611: PPUSH
1612: LD_INT 2
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1622: LD_INT 66
1624: PPUSH
1625: LD_INT 4
1627: PPUSH
1628: CALL_OW 86
// end ;
1632: LD_VAR 0 1
1636: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1637: LD_INT 0
1639: PPUSH
1640: PPUSH
1641: PPUSH
1642: PPUSH
1643: PPUSH
1644: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1645: LD_ADDR_VAR 0 5
1649: PUSH
1650: LD_STRING 06_VehiclesIn06_1
1652: PPUSH
1653: EMPTY
1654: PPUSH
1655: CALL_OW 30
1659: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1660: LD_ADDR_EXP 40
1664: PUSH
1665: LD_STRING 06_ResourcesInCargo06_1
1667: PPUSH
1668: EMPTY
1669: PPUSH
1670: CALL_OW 30
1674: ST_TO_ADDR
// cargoList = [ ] ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: EMPTY
1681: ST_TO_ADDR
// uc_side = 1 ;
1682: LD_ADDR_OWVAR 20
1686: PUSH
1687: LD_INT 1
1689: ST_TO_ADDR
// if vehicles > 0 then
1690: LD_VAR 0 5
1694: PUSH
1695: LD_INT 0
1697: GREATER
1698: IFFALSE 2053
// begin for i := 1 to vehicles do
1700: LD_ADDR_VAR 0 2
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_VAR 0 5
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1865
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1718: LD_ADDR_OWVAR 21
1722: PUSH
1723: LD_VAR 0 5
1727: PUSH
1728: LD_VAR 0 2
1732: ARRAY
1733: PUSH
1734: LD_INT 1
1736: ARRAY
1737: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1738: LD_ADDR_OWVAR 37
1742: PUSH
1743: LD_VAR 0 5
1747: PUSH
1748: LD_VAR 0 2
1752: ARRAY
1753: PUSH
1754: LD_INT 2
1756: ARRAY
1757: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1758: LD_ADDR_OWVAR 39
1762: PUSH
1763: LD_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: ARRAY
1773: PUSH
1774: LD_INT 3
1776: ARRAY
1777: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1778: LD_ADDR_OWVAR 38
1782: PUSH
1783: LD_VAR 0 5
1787: PUSH
1788: LD_VAR 0 2
1792: ARRAY
1793: PUSH
1794: LD_INT 4
1796: ARRAY
1797: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1798: LD_ADDR_OWVAR 40
1802: PUSH
1803: LD_VAR 0 5
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PUSH
1814: LD_INT 5
1816: ARRAY
1817: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1818: LD_ADDR_OWVAR 41
1822: PUSH
1823: LD_INT 40
1825: ST_TO_ADDR
// veh = CreateVehicle ;
1826: LD_ADDR_VAR 0 4
1830: PUSH
1831: CALL_OW 45
1835: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1836: LD_VAR 0 4
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1848: LD_VAR 0 4
1852: PPUSH
1853: LD_INT 2
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: CALL_OW 49
// end ;
1863: GO 1715
1865: POP
1866: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1867: LD_ADDR_VAR 0 6
1871: PUSH
1872: LD_INT 22
1874: PUSH
1875: LD_INT 1
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 21
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 34
1894: PUSH
1895: LD_INT 12
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: ST_TO_ADDR
// if cargoList > 0 then
1912: LD_VAR 0 6
1916: PUSH
1917: LD_INT 0
1919: GREATER
1920: IFFALSE 2053
// for i = 1 to cargoList do
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: DOUBLE
1928: LD_INT 1
1930: DEC
1931: ST_TO_ADDR
1932: LD_VAR 0 6
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2051
// begin if resources > 0 then
1940: LD_EXP 40
1944: PUSH
1945: LD_INT 0
1947: GREATER
1948: IFFALSE 2049
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1950: LD_VAR 0 6
1954: PUSH
1955: LD_VAR 0 2
1959: ARRAY
1960: PPUSH
1961: LD_INT 1
1963: PPUSH
1964: LD_EXP 40
1968: PUSH
1969: LD_VAR 0 2
1973: ARRAY
1974: PUSH
1975: LD_INT 1
1977: ARRAY
1978: PPUSH
1979: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1983: LD_VAR 0 6
1987: PUSH
1988: LD_VAR 0 2
1992: ARRAY
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: LD_EXP 40
2001: PUSH
2002: LD_VAR 0 2
2006: ARRAY
2007: PUSH
2008: LD_INT 2
2010: ARRAY
2011: PPUSH
2012: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2016: LD_VAR 0 6
2020: PUSH
2021: LD_VAR 0 2
2025: ARRAY
2026: PPUSH
2027: LD_INT 3
2029: PPUSH
2030: LD_EXP 40
2034: PUSH
2035: LD_VAR 0 2
2039: ARRAY
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PPUSH
2045: CALL_OW 291
// end ; end ;
2049: GO 1937
2051: POP
2052: POP
// end ; end ;
2053: LD_VAR 0 1
2057: RET
// export function PrepareOthers ; var i , veh ; begin
2058: LD_INT 0
2060: PPUSH
2061: PPUSH
2062: PPUSH
// uc_side = 1 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// uc_nation = 1 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2079: LD_ADDR_EXP 11
2083: PUSH
2084: LD_STRING OthersIn06
2086: PPUSH
2087: CALL_OW 31
2091: ST_TO_ADDR
// for i in others do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_EXP 11
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2193
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2105: LD_ADDR_VAR 0 3
2109: PUSH
2110: LD_INT 22
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 21
2122: PUSH
2123: LD_INT 2
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 58
2132: PUSH
2133: EMPTY
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PPUSH
2141: CALL_OW 69
2145: ST_TO_ADDR
// if veh > 0 then
2146: LD_VAR 0 3
2150: PUSH
2151: LD_INT 0
2153: GREATER
2154: IFFALSE 2176
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// end else
2174: GO 2191
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 2
2183: PPUSH
2184: LD_INT 0
2186: PPUSH
2187: CALL_OW 49
// end ; end ;
2191: GO 2102
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 1
2199: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
// uc_side = 1 ;
2205: LD_ADDR_OWVAR 20
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// uc_nation = 0 ;
2213: LD_ADDR_OWVAR 21
2217: PUSH
2218: LD_INT 0
2220: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2221: LD_ADDR_EXP 12
2225: PUSH
2226: LD_STRING ApeIn06
2228: PPUSH
2229: CALL_OW 31
2233: ST_TO_ADDR
// for i in ape do
2234: LD_ADDR_VAR 0 2
2238: PUSH
2239: LD_EXP 12
2243: PUSH
2244: FOR_IN
2245: IFFALSE 2264
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2247: LD_VAR 0 2
2251: PPUSH
2252: LD_INT 2
2254: PPUSH
2255: LD_INT 0
2257: PPUSH
2258: CALL_OW 49
2262: GO 2244
2264: POP
2265: POP
// end ;
2266: LD_VAR 0 1
2270: RET
// export function PrepareDenis ; var xy , i ; begin
2271: LD_INT 0
2273: PPUSH
2274: PPUSH
2275: PPUSH
// uc_side = 4 ;
2276: LD_ADDR_OWVAR 20
2280: PUSH
2281: LD_INT 4
2283: ST_TO_ADDR
// uc_nation = 1 ;
2284: LD_ADDR_OWVAR 21
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2292: LD_ADDR_VAR 0 2
2296: PUSH
2297: LD_INT 63
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 70
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 83
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 16
2329: PUSH
2330: LD_INT 1
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 27
2339: PUSH
2340: LD_INT 1
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 38
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 5
2359: PUSH
2360: LD_INT 1
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 54
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2387: LD_ADDR_EXP 9
2391: PUSH
2392: LD_STRING Denis
2394: PPUSH
2395: LD_INT 1
2397: PPUSH
2398: LD_EXP 44
2402: PPUSH
2403: CALL 41637 0 3
2407: ST_TO_ADDR
// for i = 1 to xy do
2408: LD_ADDR_VAR 0 3
2412: PUSH
2413: DOUBLE
2414: LD_INT 1
2416: DEC
2417: ST_TO_ADDR
2418: LD_VAR 0 2
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2523
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2426: LD_VAR 0 2
2430: PUSH
2431: LD_VAR 0 3
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 3
2450: ARRAY
2451: PUSH
2452: LD_INT 2
2454: ARRAY
2455: PPUSH
2456: CALL_OW 428
2460: PUSH
2461: LD_INT 0
2463: EQUAL
2464: IFFALSE 2521
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2466: LD_EXP 9
2470: PPUSH
2471: LD_VAR 0 2
2475: PUSH
2476: LD_VAR 0 3
2480: ARRAY
2481: PUSH
2482: LD_INT 1
2484: ARRAY
2485: PPUSH
2486: LD_VAR 0 2
2490: PUSH
2491: LD_VAR 0 3
2495: ARRAY
2496: PUSH
2497: LD_INT 2
2499: ARRAY
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// if IsPlaced ( Denis ) then
2508: LD_EXP 9
2512: PPUSH
2513: CALL_OW 305
2517: IFFALSE 2521
// break ;
2519: GO 2523
// end ;
2521: GO 2423
2523: POP
2524: POP
// SetClass ( Denis , 4 ) ;
2525: LD_EXP 9
2529: PPUSH
2530: LD_INT 4
2532: PPUSH
2533: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2537: LD_EXP 9
2541: PPUSH
2542: LD_INT 750
2544: PPUSH
2545: CALL_OW 234
// end ;
2549: LD_VAR 0 1
2553: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2554: LD_INT 0
2556: PPUSH
2557: PPUSH
2558: PPUSH
2559: PPUSH
2560: PPUSH
// area := HarrisonSupportArea ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 3
2568: ST_TO_ADDR
// dir := 2 ;
2569: LD_ADDR_VAR 0 5
2573: PUSH
2574: LD_INT 2
2576: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2577: LD_VAR 0 4
2581: PPUSH
2582: LD_INT 21
2584: PUSH
2585: LD_INT 3
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PPUSH
2592: CALL_OW 70
2596: IFFALSE 2614
// begin area := HarrisonSupportArea2 ;
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: LD_INT 31
2605: ST_TO_ADDR
// dir := 1 ;
2606: LD_ADDR_VAR 0 5
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// end ; uc_side = 1 ;
2614: LD_ADDR_OWVAR 20
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// uc_nation = 1 ;
2622: LD_ADDR_OWVAR 21
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_engine = 1 ;
2630: LD_ADDR_OWVAR 39
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_control = 1 ;
2638: LD_ADDR_OWVAR 38
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2646: LD_ADDR_OWVAR 40
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: LD_INT 4
2656: PUSH
2657: LD_INT 2
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: PUSH
2665: LD_OWVAR 67
2669: ARRAY
2670: ST_TO_ADDR
// vc_chassis = 2 ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// veh = CreateVehicle ;
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: CALL_OW 45
2688: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2689: LD_VAR 0 3
2693: PPUSH
2694: LD_VAR 0 5
2698: PPUSH
2699: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2703: LD_VAR 0 3
2707: PPUSH
2708: LD_VAR 0 4
2712: PPUSH
2713: LD_INT 0
2715: PPUSH
2716: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2720: LD_VAR 0 3
2724: PPUSH
2725: LD_INT 50
2727: PPUSH
2728: CALL_OW 240
// hc_class := 2 ;
2732: LD_ADDR_OWVAR 28
2736: PUSH
2737: LD_INT 2
2739: ST_TO_ADDR
// hc_sex := sex_male ;
2740: LD_ADDR_OWVAR 27
2744: PUSH
2745: LD_INT 1
2747: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2748: LD_ADDR_OWVAR 33
2752: PUSH
2753: LD_STRING SecondCharsGal
2755: ST_TO_ADDR
// hc_face_number := 52 ;
2756: LD_ADDR_OWVAR 34
2760: PUSH
2761: LD_INT 52
2763: ST_TO_ADDR
// hc_name := Craig Brown ;
2764: LD_ADDR_OWVAR 26
2768: PUSH
2769: LD_STRING Craig Brown
2771: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2772: LD_ADDR_OWVAR 29
2776: PUSH
2777: LD_INT 10
2779: PUSH
2780: LD_INT 10
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2787: LD_ADDR_OWVAR 30
2791: PUSH
2792: LD_INT 0
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: LD_INT 0
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2810: LD_ADDR_OWVAR 31
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: LD_INT 3
2820: PUSH
2821: LD_INT 0
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2833: LD_ADDR_EXP 17
2837: PUSH
2838: CALL_OW 44
2842: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2843: LD_EXP 17
2847: PPUSH
2848: LD_VAR 0 3
2852: PPUSH
2853: CALL_OW 52
// vc_engine = 1 ;
2857: LD_ADDR_OWVAR 39
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_control = 1 ;
2865: LD_ADDR_OWVAR 38
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2873: LD_ADDR_OWVAR 40
2877: PUSH
2878: LD_INT 3
2880: ST_TO_ADDR
// vc_chassis = 2 ;
2881: LD_ADDR_OWVAR 37
2885: PUSH
2886: LD_INT 2
2888: ST_TO_ADDR
// veh = CreateVehicle ;
2889: LD_ADDR_VAR 0 3
2893: PUSH
2894: CALL_OW 45
2898: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_VAR 0 5
2908: PPUSH
2909: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2913: LD_VAR 0 3
2917: PPUSH
2918: LD_VAR 0 4
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2930: LD_VAR 0 3
2934: PPUSH
2935: LD_INT 50
2937: PPUSH
2938: CALL_OW 240
// hc_class := 1 ;
2942: LD_ADDR_OWVAR 28
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// hc_sex := sex_female ;
2950: LD_ADDR_OWVAR 27
2954: PUSH
2955: LD_INT 2
2957: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2958: LD_ADDR_OWVAR 33
2962: PUSH
2963: LD_STRING SecondCharsGal
2965: ST_TO_ADDR
// hc_face_number := 45 ;
2966: LD_ADDR_OWVAR 34
2970: PUSH
2971: LD_INT 45
2973: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2974: LD_ADDR_OWVAR 29
2978: PUSH
2979: LD_INT 11
2981: PUSH
2982: LD_INT 10
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2989: LD_ADDR_OWVAR 26
2993: PUSH
2994: LD_STRING Ingrid Jonsson
2996: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2997: LD_ADDR_OWVAR 30
3001: PUSH
3002: LD_INT 1
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3020: LD_ADDR_OWVAR 31
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: LD_INT 1
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3043: LD_ADDR_EXP 18
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3053: LD_EXP 18
3057: PPUSH
3058: LD_VAR 0 3
3062: PPUSH
3063: CALL_OW 52
// end ;
3067: LD_VAR 0 1
3071: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3072: LD_INT 0
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 1
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 23
3095: PUSH
3096: LD_INT 1
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 26
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: LIST
3117: PPUSH
3118: CALL_OW 69
3122: PUSH
3123: LD_EXP 3
3127: PUSH
3128: LD_EXP 4
3132: PUSH
3133: LD_EXP 8
3137: PUSH
3138: LD_EXP 9
3142: PUSH
3143: LD_EXP 5
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: DIFF
3155: ST_TO_ADDR
// for i in _tmp do
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: LD_VAR 0 4
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3208
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_INT 32
3176: PPUSH
3177: CALL_OW 308
3181: PUSH
3182: LD_VAR 0 2
3186: PPUSH
3187: CALL_OW 302
3191: AND
3192: IFFALSE 3206
// begin tmp := i ;
3194: LD_ADDR_VAR 0 3
3198: PUSH
3199: LD_VAR 0 2
3203: ST_TO_ADDR
// break ;
3204: GO 3208
// end ;
3206: GO 3166
3208: POP
3209: POP
// if not tmp then
3210: LD_VAR 0 3
3214: NOT
3215: IFFALSE 3227
// tmp := JMM ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_EXP 1
3226: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3227: LD_INT 35
3229: PPUSH
3230: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3234: LD_INT 81
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 92
3246: PUSH
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 250
3256: PUSH
3257: LD_VAR 0 3
3261: PPUSH
3262: CALL_OW 251
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PPUSH
3280: CALL_OW 69
3284: NOT
3285: PUSH
3286: LD_INT 22
3288: PUSH
3289: LD_INT 1
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 21
3298: PUSH
3299: LD_INT 3
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 92
3308: PUSH
3309: LD_VAR 0 3
3313: PPUSH
3314: CALL_OW 250
3318: PUSH
3319: LD_VAR 0 3
3323: PPUSH
3324: CALL_OW 251
3328: PUSH
3329: LD_INT 20
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: AND
3348: IFFALSE 3227
// blockSpawn = 1 ;
3350: LD_ADDR_EXP 29
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// uc_side = 4 ;
3358: LD_ADDR_OWVAR 20
3362: PUSH
3363: LD_INT 4
3365: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3366: LD_ADDR_EXP 15
3370: PUSH
3371: LD_STRING Joan
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: LD_EXP 44
3381: PPUSH
3382: CALL 41637 0 3
3386: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3387: LD_EXP 15
3391: PPUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: CALL_OW 250
3401: PPUSH
3402: LD_VAR 0 3
3406: PPUSH
3407: CALL_OW 251
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3422: LD_EXP 15
3426: PPUSH
3427: LD_INT 250
3429: PPUSH
3430: CALL_OW 234
// InGameOn ;
3434: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3438: LD_EXP 15
3442: PPUSH
3443: CALL_OW 87
// wait ( 0 0$2 ) ;
3447: LD_INT 70
3449: PPUSH
3450: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 122
// wait ( 0 0$1 ) ;
3472: LD_INT 35
3474: PPUSH
3475: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3479: LD_VAR 0 3
3483: PPUSH
3484: LD_EXP 15
3488: PPUSH
3489: CALL_OW 112
// wait ( 0 0$2 ) ;
3493: LD_INT 70
3495: PPUSH
3496: CALL_OW 67
// DialogueOn ;
3500: CALL_OW 6
// if tmp = JMM then
3504: LD_VAR 0 3
3508: PUSH
3509: LD_EXP 1
3513: EQUAL
3514: IFFALSE 3663
// begin ComTurnUnit ( JMM , Joan ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_EXP 15
3525: PPUSH
3526: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING D5b-JMM-1
3537: PPUSH
3538: CALL_OW 88
// DialogueOff ;
3542: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3546: LD_EXP 15
3550: PPUSH
3551: LD_INT 500
3553: PPUSH
3554: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3558: LD_EXP 15
3562: PPUSH
3563: LD_EXP 1
3567: PPUSH
3568: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3572: LD_EXP 1
3576: PPUSH
3577: LD_EXP 15
3581: PPUSH
3582: CALL_OW 119
// wait ( 0 0$1 ) ;
3586: LD_INT 35
3588: PPUSH
3589: CALL_OW 67
// DialogueOn ;
3593: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3597: LD_EXP 15
3601: PPUSH
3602: LD_STRING D5b-Joan-1
3604: PPUSH
3605: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3609: LD_EXP 1
3613: PPUSH
3614: LD_STRING D5b-JMM-2
3616: PPUSH
3617: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3621: LD_EXP 15
3625: PPUSH
3626: LD_STRING D5b-Joan-2
3628: PPUSH
3629: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3633: LD_EXP 1
3637: PPUSH
3638: LD_STRING D5b-JMM-3
3640: PPUSH
3641: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3645: LD_EXP 15
3649: PPUSH
3650: LD_STRING D5b-Joan-3
3652: PPUSH
3653: CALL_OW 88
// DialogueOff ;
3657: CALL_OW 7
// end else
3661: GO 4037
// begin ComTurnUnit ( tmp , Joan ) ;
3663: LD_VAR 0 3
3667: PPUSH
3668: LD_EXP 15
3672: PPUSH
3673: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_STRING D5a-Sol1-1
3684: PPUSH
3685: CALL_OW 88
// DialogueOff ;
3689: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3693: LD_EXP 15
3697: PPUSH
3698: LD_INT 500
3700: PPUSH
3701: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3705: LD_EXP 15
3709: PPUSH
3710: LD_VAR 0 3
3714: PPUSH
3715: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_EXP 15
3728: PPUSH
3729: CALL_OW 119
// wait ( 0 0$1 ) ;
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 67
// DialogueOn ;
3740: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3744: LD_EXP 15
3748: PPUSH
3749: LD_STRING D5a-Joan-1
3751: PPUSH
3752: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3756: LD_VAR 0 3
3760: PPUSH
3761: LD_STRING D5a-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3768: LD_EXP 15
3772: PPUSH
3773: LD_STRING D5a-Joan-2
3775: PPUSH
3776: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3780: LD_VAR 0 3
3784: PPUSH
3785: LD_STRING D5a-Sol1-3
3787: PPUSH
3788: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3792: LD_EXP 15
3796: PPUSH
3797: LD_STRING D5a-Joan-3
3799: PPUSH
3800: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3804: LD_VAR 0 3
3808: PPUSH
3809: LD_STRING D5a-Sol1-4
3811: PPUSH
3812: CALL_OW 88
// DialogueOff ;
3816: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3820: LD_EXP 1
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: EMPTY
3829: LIST
3830: PPUSH
3831: CALL_OW 69
3835: IN
3836: IFFALSE 3859
// begin ComMoveUnit ( JMM , Joan ) ;
3838: LD_EXP 1
3842: PPUSH
3843: LD_EXP 15
3847: PPUSH
3848: CALL_OW 112
// wait ( 0 0$05 ) ;
3852: LD_INT 175
3854: PPUSH
3855: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3859: LD_EXP 1
3863: PPUSH
3864: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3868: LD_EXP 1
3872: PPUSH
3873: CALL_OW 122
// wait ( 0 0$1 ) ;
3877: LD_INT 35
3879: PPUSH
3880: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3884: LD_INT 35
3886: PPUSH
3887: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3891: LD_EXP 15
3895: PUSH
3896: LD_VAR 0 3
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PPUSH
3905: LD_EXP 1
3909: PPUSH
3910: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3914: LD_EXP 15
3918: PPUSH
3919: LD_EXP 1
3923: PPUSH
3924: CALL_OW 296
3928: PUSH
3929: LD_INT 5
3931: LESS
3932: IFFALSE 3884
// ComTurnUnit ( Joan , JMM ) ;
3934: LD_EXP 15
3938: PPUSH
3939: LD_EXP 1
3943: PPUSH
3944: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_EXP 15
3957: PPUSH
3958: CALL_OW 119
// wait ( 0 0$1 ) ;
3962: LD_INT 35
3964: PPUSH
3965: CALL_OW 67
// DialogueOn ;
3969: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3973: LD_EXP 15
3977: PPUSH
3978: LD_STRING D5a-Joan-4
3980: PPUSH
3981: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3985: LD_EXP 1
3989: PPUSH
3990: LD_STRING D5a-JMM-4
3992: PPUSH
3993: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3997: LD_EXP 15
4001: PPUSH
4002: LD_STRING D5a-Joan-5
4004: PPUSH
4005: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4009: LD_EXP 1
4013: PPUSH
4014: LD_STRING D5a-JMM-5
4016: PPUSH
4017: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4021: LD_EXP 15
4025: PPUSH
4026: LD_STRING D5a-Joan-6
4028: PPUSH
4029: CALL_OW 88
// DialogueOff ;
4033: CALL_OW 7
// end ; DialogueOn ;
4037: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4041: LD_EXP 1
4045: PPUSH
4046: LD_STRING D6-JMM-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING D6-Joan-1
4060: PPUSH
4061: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING D6-JMM-2
4072: PPUSH
4073: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4077: LD_EXP 15
4081: PPUSH
4082: LD_STRING D6-Joan-2
4084: PPUSH
4085: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4089: LD_EXP 1
4093: PPUSH
4094: LD_STRING D6-JMM-3
4096: PPUSH
4097: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4101: LD_EXP 15
4105: PPUSH
4106: LD_STRING D6-Joan-3
4108: PPUSH
4109: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4113: LD_EXP 1
4117: PPUSH
4118: LD_STRING D6-JMM-4
4120: PPUSH
4121: CALL_OW 88
// DialogueOff ;
4125: CALL_OW 7
// InGameOff ;
4129: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4133: LD_EXP 15
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4145: LD_STRING MJ
4147: PPUSH
4148: CALL_OW 337
// JoanStatus = 1 ;
4152: LD_ADDR_EXP 16
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// blockSpawn = 0 ;
4160: LD_ADDR_EXP 29
4164: PUSH
4165: LD_INT 0
4167: ST_TO_ADDR
// end ;
4168: LD_VAR 0 1
4172: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4173: LD_INT 0
4175: PPUSH
4176: PPUSH
// if not number or number > 8 then
4177: LD_VAR 0 1
4181: NOT
4182: PUSH
4183: LD_VAR 0 1
4187: PUSH
4188: LD_INT 8
4190: GREATER
4191: OR
4192: IFFALSE 4196
// exit ;
4194: GO 5760
// repeat wait ( 0 0$7 ) ;
4196: LD_INT 245
4198: PPUSH
4199: CALL_OW 67
// until blockSpawn = 0 ;
4203: LD_EXP 29
4207: PUSH
4208: LD_INT 0
4210: EQUAL
4211: IFFALSE 4196
// uc_side = 1 ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// uc_nation = 1 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// InitHc ;
4229: CALL_OW 19
// if number = 1 then
4233: LD_VAR 0 1
4237: PUSH
4238: LD_INT 1
4240: EQUAL
4241: IFFALSE 4417
// begin hc_class := 3 ;
4243: LD_ADDR_OWVAR 28
4247: PUSH
4248: LD_INT 3
4250: ST_TO_ADDR
// hc_sex := sex_male ;
4251: LD_ADDR_OWVAR 27
4255: PUSH
4256: LD_INT 1
4258: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4259: LD_ADDR_OWVAR 33
4263: PUSH
4264: LD_STRING SecondCharsGal
4266: ST_TO_ADDR
// hc_face_number := 55 ;
4267: LD_ADDR_OWVAR 34
4271: PUSH
4272: LD_INT 55
4274: ST_TO_ADDR
// hc_name := George McCarthy ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING George McCarthy
4282: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4283: LD_ADDR_OWVAR 29
4287: PUSH
4288: LD_INT 11
4290: PUSH
4291: LD_INT 10
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4298: LD_ADDR_OWVAR 30
4302: PUSH
4303: LD_INT 0
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 0
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4321: LD_ADDR_OWVAR 31
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: LD_INT 2
4331: PUSH
4332: LD_INT 3
4334: PUSH
4335: LD_INT 1
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: ST_TO_ADDR
// un = CreateHuman ;
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: CALL_OW 44
4353: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4354: LD_VAR 0 3
4358: PPUSH
4359: LD_INT 23
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4369: LD_VAR 0 3
4373: PPUSH
4374: CALL_OW 87
// wait ( 0 0$1 ) ;
4378: LD_INT 35
4380: PPUSH
4381: CALL_OW 67
// DialogueOn ;
4385: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4389: LD_VAR 0 3
4393: PPUSH
4394: LD_STRING D11d-Sol4-1
4396: PPUSH
4397: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4401: LD_EXP 1
4405: PPUSH
4406: LD_STRING D11d-JMM-1
4408: PPUSH
4409: CALL_OW 88
// DialogueOff ;
4413: CALL_OW 7
// end ; if number = 2 then
4417: LD_VAR 0 1
4421: PUSH
4422: LD_INT 2
4424: EQUAL
4425: IFFALSE 4601
// begin hc_class := 1 ;
4427: LD_ADDR_OWVAR 28
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_sex := sex_male ;
4435: LD_ADDR_OWVAR 27
4439: PUSH
4440: LD_INT 1
4442: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4443: LD_ADDR_OWVAR 33
4447: PUSH
4448: LD_STRING AmGalRemake
4450: ST_TO_ADDR
// hc_face_number := 7 ;
4451: LD_ADDR_OWVAR 34
4455: PUSH
4456: LD_INT 7
4458: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4459: LD_ADDR_OWVAR 26
4463: PUSH
4464: LD_STRING Bobby Jordan
4466: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4467: LD_ADDR_OWVAR 29
4471: PUSH
4472: LD_INT 9
4474: PUSH
4475: LD_INT 11
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4482: LD_ADDR_OWVAR 30
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: LD_INT 1
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4505: LD_ADDR_OWVAR 31
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 1
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// un = CreateHuman ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: CALL_OW 44
4537: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4538: LD_VAR 0 3
4542: PPUSH
4543: LD_INT 24
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 49
// wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4560: LD_VAR 0 3
4564: PPUSH
4565: CALL_OW 87
// DialogueOn ;
4569: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_STRING D11b-Sol3-1
4580: PPUSH
4581: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4585: LD_EXP 1
4589: PPUSH
4590: LD_STRING D11b-JMM-1
4592: PPUSH
4593: CALL_OW 88
// DialogueOff ;
4597: CALL_OW 7
// end ; if number = 3 then
4601: LD_VAR 0 1
4605: PUSH
4606: LD_INT 3
4608: EQUAL
4609: IFFALSE 4773
// begin hc_class := 1 ;
4611: LD_ADDR_OWVAR 28
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_sex := sex_male ;
4619: LD_ADDR_OWVAR 27
4623: PUSH
4624: LD_INT 1
4626: ST_TO_ADDR
// hc_gallery := DJ ;
4627: LD_ADDR_OWVAR 33
4631: PUSH
4632: LD_STRING DJ
4634: ST_TO_ADDR
// hc_face_number := 1 ;
4635: LD_ADDR_OWVAR 34
4639: PUSH
4640: LD_INT 1
4642: ST_TO_ADDR
// hc_name := Darius Dajay ;
4643: LD_ADDR_OWVAR 26
4647: PUSH
4648: LD_STRING Darius Dajay
4650: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4651: LD_ADDR_OWVAR 29
4655: PUSH
4656: LD_INT 11
4658: PUSH
4659: LD_INT 11
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4666: LD_ADDR_OWVAR 30
4670: PUSH
4671: LD_INT 2
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: LD_INT 0
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4689: LD_ADDR_OWVAR 31
4693: PUSH
4694: LD_INT 4
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: ST_TO_ADDR
// un = CreateHuman ;
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: CALL_OW 44
4721: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_INT 25
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4737: LD_VAR 0 3
4741: PPUSH
4742: CALL_OW 87
// wait ( 0 0$1 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// DialogueOn ;
4753: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_STRING D11f-Sol5-1
4764: PPUSH
4765: CALL_OW 88
// DialogueOff ;
4769: CALL_OW 7
// end ; if number = 4 then
4773: LD_VAR 0 1
4777: PUSH
4778: LD_INT 4
4780: EQUAL
4781: IFFALSE 4918
// begin hc_class := 2 ;
4783: LD_ADDR_OWVAR 28
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_sex := sex_female ;
4791: LD_ADDR_OWVAR 27
4795: PUSH
4796: LD_INT 2
4798: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4799: LD_ADDR_OWVAR 33
4803: PUSH
4804: LD_STRING SecondCharsGal
4806: ST_TO_ADDR
// hc_face_number := 46 ;
4807: LD_ADDR_OWVAR 34
4811: PUSH
4812: LD_INT 46
4814: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4815: LD_ADDR_OWVAR 26
4819: PUSH
4820: LD_STRING Sylvia Creak
4822: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4823: LD_ADDR_OWVAR 29
4827: PUSH
4828: LD_INT 10
4830: PUSH
4831: LD_INT 9
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4838: LD_ADDR_OWVAR 30
4842: PUSH
4843: LD_INT 0
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: LD_INT 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4861: LD_ADDR_OWVAR 31
4865: PUSH
4866: LD_INT 1
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: LD_INT 1
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: ST_TO_ADDR
// un = CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4894: LD_VAR 0 3
4898: PPUSH
4899: LD_INT 26
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: CALL_OW 87
// end ; if number = 5 then
4918: LD_VAR 0 1
4922: PUSH
4923: LD_INT 5
4925: EQUAL
4926: IFFALSE 5102
// begin hc_class := 1 ;
4928: LD_ADDR_OWVAR 28
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// hc_sex := sex_female ;
4936: LD_ADDR_OWVAR 27
4940: PUSH
4941: LD_INT 2
4943: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4944: LD_ADDR_OWVAR 33
4948: PUSH
4949: LD_STRING SecondCharsGal
4951: ST_TO_ADDR
// hc_face_number := 37 ;
4952: LD_ADDR_OWVAR 34
4956: PUSH
4957: LD_INT 37
4959: ST_TO_ADDR
// hc_name := Malena Johnson ;
4960: LD_ADDR_OWVAR 26
4964: PUSH
4965: LD_STRING Malena Johnson
4967: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4968: LD_ADDR_OWVAR 29
4972: PUSH
4973: LD_INT 11
4975: PUSH
4976: LD_INT 10
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4983: LD_ADDR_OWVAR 30
4987: PUSH
4988: LD_INT 1
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 0
4996: PUSH
4997: LD_INT 0
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5006: LD_ADDR_OWVAR 31
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: ST_TO_ADDR
// un = CreateHuman ;
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: CALL_OW 44
5038: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5039: LD_VAR 0 3
5043: PPUSH
5044: LD_INT 27
5046: PPUSH
5047: LD_INT 1
5049: PPUSH
5050: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5054: LD_VAR 0 3
5058: PPUSH
5059: CALL_OW 87
// wait ( 0 0$1 ) ;
5063: LD_INT 35
5065: PPUSH
5066: CALL_OW 67
// DialogueOn ;
5070: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5074: LD_VAR 0 3
5078: PPUSH
5079: LD_STRING D11c-FSol3-1
5081: PPUSH
5082: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D11c-JMM-1
5093: PPUSH
5094: CALL_OW 88
// DialogueOff ;
5098: CALL_OW 7
// end ; if number = 6 then
5102: LD_VAR 0 1
5106: PUSH
5107: LD_INT 6
5109: EQUAL
5110: IFFALSE 5284
// begin hc_class := 1 ;
5112: LD_ADDR_OWVAR 28
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_sex := sex_male ;
5120: LD_ADDR_OWVAR 27
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5128: LD_ADDR_OWVAR 33
5132: PUSH
5133: LD_STRING AmGalRemake
5135: ST_TO_ADDR
// hc_face_number := 1 ;
5136: LD_ADDR_OWVAR 34
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// hc_name := Charles Brown ;
5144: LD_ADDR_OWVAR 26
5148: PUSH
5149: LD_STRING Charles Brown
5151: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5152: LD_ADDR_OWVAR 29
5156: PUSH
5157: LD_INT 12
5159: PUSH
5160: LD_INT 11
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5167: LD_ADDR_OWVAR 30
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5190: LD_ADDR_OWVAR 31
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 0
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: ST_TO_ADDR
// un = CreateHuman ;
5213: LD_ADDR_VAR 0 3
5217: PUSH
5218: CALL_OW 44
5222: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_INT 28
5230: PPUSH
5231: LD_INT 1
5233: PPUSH
5234: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5238: LD_VAR 0 3
5242: PPUSH
5243: CALL_OW 87
// wait ( 0 0$1 ) ;
5247: LD_INT 35
5249: PPUSH
5250: CALL_OW 67
// DialogueOn ;
5254: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5258: LD_VAR 0 3
5262: PPUSH
5263: LD_STRING D4-Sol1-5
5265: PPUSH
5266: CALL_OW 88
// DialogueOff ;
5270: CALL_OW 7
// tempCharles = un ;
5274: LD_ADDR_EXP 13
5278: PUSH
5279: LD_VAR 0 3
5283: ST_TO_ADDR
// end ; if number = 7 then
5284: LD_VAR 0 1
5288: PUSH
5289: LD_INT 7
5291: EQUAL
5292: IFFALSE 5564
// begin hc_class := 1 ;
5294: LD_ADDR_OWVAR 28
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// hc_sex := sex_female ;
5302: LD_ADDR_OWVAR 27
5306: PUSH
5307: LD_INT 2
5309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5310: LD_ADDR_OWVAR 33
5314: PUSH
5315: LD_STRING AmGalRemake
5317: ST_TO_ADDR
// hc_face_number := 2 ;
5318: LD_ADDR_OWVAR 34
5322: PUSH
5323: LD_INT 2
5325: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5326: LD_ADDR_OWVAR 26
5330: PUSH
5331: LD_STRING Rebecca Macdonald
5333: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5334: LD_ADDR_OWVAR 29
5338: PUSH
5339: LD_INT 10
5341: PUSH
5342: LD_INT 10
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5349: LD_ADDR_OWVAR 30
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 0
5359: PUSH
5360: LD_INT 0
5362: PUSH
5363: LD_INT 1
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5372: LD_ADDR_OWVAR 31
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: LD_INT 0
5385: PUSH
5386: LD_INT 1
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: ST_TO_ADDR
// un = CreateHuman ;
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: CALL_OW 44
5404: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_INT 29
5412: PPUSH
5413: LD_INT 1
5415: PPUSH
5416: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5420: LD_VAR 0 3
5424: PPUSH
5425: CALL_OW 87
// wait ( 0 0$1 ) ;
5429: LD_INT 35
5431: PPUSH
5432: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5436: LD_INT 30
5438: PPUSH
5439: LD_INT 22
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PPUSH
5449: CALL_OW 70
5453: IFFALSE 5564
// begin DialogueOn ;
5455: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5459: LD_VAR 0 3
5463: PPUSH
5464: CALL_OW 250
5468: PPUSH
5469: LD_VAR 0 3
5473: PPUSH
5474: CALL_OW 251
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 15
5484: NEG
5485: PPUSH
5486: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5490: LD_VAR 0 3
5494: PPUSH
5495: CALL_OW 250
5499: PPUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_STRING D11a-FSol2-1
5524: PPUSH
5525: CALL_OW 88
// DialogueOff ;
5529: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5533: LD_INT 3
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 471
// wait ( 0 0$2 ) ;
5545: LD_INT 70
5547: PPUSH
5548: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5552: LD_INT 3
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 472
// end ; end ; if number = 8 then
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 8
5571: EQUAL
5572: IFFALSE 5728
// begin hc_class := 1 ;
5574: LD_ADDR_OWVAR 28
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// hc_sex := sex_female ;
5582: LD_ADDR_OWVAR 27
5586: PUSH
5587: LD_INT 2
5589: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5590: LD_ADDR_OWVAR 33
5594: PUSH
5595: LD_STRING SecondCharsGal
5597: ST_TO_ADDR
// hc_face_number := 42 ;
5598: LD_ADDR_OWVAR 34
5602: PUSH
5603: LD_INT 42
5605: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5606: LD_ADDR_OWVAR 26
5610: PUSH
5611: LD_STRING Margherite Simpson
5613: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5614: LD_ADDR_OWVAR 29
5618: PUSH
5619: LD_INT 12
5621: PUSH
5622: LD_INT 10
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5629: LD_ADDR_OWVAR 30
5633: PUSH
5634: LD_INT 1
5636: PUSH
5637: LD_INT 2
5639: PUSH
5640: LD_INT 0
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5652: LD_ADDR_OWVAR 31
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: LD_INT 2
5662: PUSH
5663: LD_INT 0
5665: PUSH
5666: LD_INT 1
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: ST_TO_ADDR
// un = CreateHuman ;
5675: LD_ADDR_VAR 0 3
5679: PUSH
5680: CALL_OW 44
5684: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5685: LD_VAR 0 3
5689: PPUSH
5690: LD_INT 33
5692: PPUSH
5693: LD_INT 1
5695: PPUSH
5696: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 87
// wait ( 0 0$1 ) ;
5709: LD_INT 35
5711: PPUSH
5712: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_STRING D11e-FSol4-1
5723: PPUSH
5724: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5728: LD_ADDR_EXP 45
5732: PUSH
5733: LD_EXP 45
5737: PUSH
5738: LD_VAR 0 3
5742: UNION
5743: ST_TO_ADDR
// arrivals := arrivals union un ;
5744: LD_ADDR_EXP 46
5748: PUSH
5749: LD_EXP 46
5753: PUSH
5754: LD_VAR 0 3
5758: UNION
5759: ST_TO_ADDR
// end ;
5760: LD_VAR 0 2
5764: RET
// every 0 0$1 do var i ;
5765: GO 5767
5767: DISABLE
5768: LD_INT 0
5770: PPUSH
// begin enable ;
5771: ENABLE
// if not ignoreTarget then
5772: LD_EXP 45
5776: NOT
5777: IFFALSE 5781
// exit ;
5779: GO 5862
// for i in ignoreTarget do
5781: LD_ADDR_VAR 0 1
5785: PUSH
5786: LD_EXP 45
5790: PUSH
5791: FOR_IN
5792: IFFALSE 5860
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5794: LD_INT 22
5796: PUSH
5797: LD_INT 1
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 91
5806: PUSH
5807: LD_VAR 0 1
5811: PUSH
5812: LD_INT 10
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_EXP 45
5833: DIFF
5834: PUSH
5835: LD_INT 1
5837: GREATER
5838: IFFALSE 5858
// begin ignoreTarget := ignoreTarget diff i ;
5840: LD_ADDR_EXP 45
5844: PUSH
5845: LD_EXP 45
5849: PUSH
5850: LD_VAR 0 1
5854: DIFF
5855: ST_TO_ADDR
// break ;
5856: GO 5860
// end ;
5858: GO 5791
5860: POP
5861: POP
// end ; end_of_file
5862: PPOPN 1
5864: END
// export function PrepareRussian ; var i ; begin
5865: LD_INT 0
5867: PPUSH
5868: PPUSH
// if Difficulty < 3 then
5869: LD_OWVAR 67
5873: PUSH
5874: LD_INT 3
5876: LESS
5877: IFFALSE 5894
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5879: LD_INT 130
5881: PPUSH
5882: LD_INT 81
5884: PPUSH
5885: CALL_OW 428
5889: PPUSH
5890: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5894: LD_INT 3
5896: PPUSH
5897: LD_INT 3
5899: PPUSH
5900: LD_INT 2
5902: PPUSH
5903: LD_EXP 34
5907: PPUSH
5908: LD_EXP 35
5912: PPUSH
5913: CALL_OW 12
5917: PPUSH
5918: LD_INT 2
5920: PPUSH
5921: LD_INT 4
5923: PPUSH
5924: CALL 6396 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5928: LD_INT 3
5930: PPUSH
5931: LD_INT 3
5933: PPUSH
5934: LD_INT 8
5936: PPUSH
5937: LD_EXP 34
5941: PPUSH
5942: LD_EXP 35
5946: PPUSH
5947: CALL_OW 12
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 4
5957: PPUSH
5958: CALL 6396 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5962: LD_INT 3
5964: PPUSH
5965: LD_INT 3
5967: PPUSH
5968: LD_INT 67
5970: PPUSH
5971: LD_EXP 34
5975: PPUSH
5976: LD_EXP 35
5980: PPUSH
5981: CALL_OW 12
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: LD_INT 2
5991: PPUSH
5992: CALL 6396 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5996: LD_INT 3
5998: PPUSH
5999: LD_INT 3
6001: PPUSH
6002: LD_INT 21
6004: PPUSH
6005: LD_EXP 34
6009: PPUSH
6010: LD_EXP 35
6014: PPUSH
6015: CALL_OW 12
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 6
6025: PPUSH
6026: CALL 6396 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6030: LD_INT 3
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: LD_INT 17
6038: PPUSH
6039: LD_EXP 34
6043: PPUSH
6044: LD_EXP 35
6048: PPUSH
6049: CALL_OW 12
6053: PPUSH
6054: LD_INT 3
6056: PPUSH
6057: LD_INT 6
6059: PPUSH
6060: CALL 6396 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6064: LD_INT 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: LD_INT 32
6072: PPUSH
6073: LD_EXP 34
6077: PPUSH
6078: LD_EXP 35
6082: PPUSH
6083: CALL_OW 12
6087: PPUSH
6088: LD_INT 4
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL 6396 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_INT 3
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 3
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 30
6125: PUSH
6126: LD_INT 32
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 69
6142: PUSH
6143: FOR_IN
6144: IFFALSE 6184
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6146: LD_INT 3
6148: PPUSH
6149: LD_INT 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_EXP 34
6161: PPUSH
6162: LD_EXP 35
6166: PPUSH
6167: CALL_OW 12
6171: PPUSH
6172: LD_INT 1
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL 6396 0 6
6182: GO 6143
6184: POP
6185: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 30
6213: PUSH
6214: LD_INT 31
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PPUSH
6226: CALL_OW 69
6230: PUSH
6231: FOR_IN
6232: IFFALSE 6260
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6234: LD_EXP 34
6238: PPUSH
6239: LD_EXP 35
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL 6506 0 2
6258: GO 6231
6260: POP
6261: POP
// end ; end_of_file
6262: LD_VAR 0 1
6266: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
6271: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6272: LD_ADDR_VAR 0 6
6276: PUSH
6277: LD_VAR 0 1
6281: PUSH
6282: LD_INT 1
6284: PPUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: CALL_OW 12
6294: ARRAY
6295: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6296: LD_VAR 0 6
6300: PPUSH
6301: CALL_OW 258
6305: PUSH
6306: LD_INT 1
6308: EQUAL
6309: IFFALSE 6327
// Say ( speaker , dialogMID ) else
6311: LD_VAR 0 6
6315: PPUSH
6316: LD_VAR 0 2
6320: PPUSH
6321: CALL_OW 88
6325: GO 6341
// Say ( speaker , dialogFID ) ;
6327: LD_VAR 0 6
6331: PPUSH
6332: LD_VAR 0 3
6336: PPUSH
6337: CALL_OW 88
// result := speaker ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: LD_VAR 0 6
6350: ST_TO_ADDR
// end ;
6351: LD_VAR 0 4
6355: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
// for i in charactersList do
6360: LD_ADDR_VAR 0 4
6364: PUSH
6365: LD_VAR 0 1
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6389
// SaveCharacters ( i , ident ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 38
6387: GO 6370
6389: POP
6390: POP
// end ;
6391: LD_VAR 0 3
6395: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6396: LD_INT 0
6398: PPUSH
6399: PPUSH
6400: PPUSH
6401: PPUSH
// for i = 1 to count do
6402: LD_ADDR_VAR 0 8
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_VAR 0 6
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6499
// begin uc_side = side ;
6420: LD_ADDR_OWVAR 20
6424: PUSH
6425: LD_VAR 0 1
6429: ST_TO_ADDR
// uc_nation = nation ;
6430: LD_ADDR_OWVAR 21
6434: PUSH
6435: LD_VAR 0 2
6439: ST_TO_ADDR
// hc_gallery =  ;
6440: LD_ADDR_OWVAR 33
6444: PUSH
6445: LD_STRING 
6447: ST_TO_ADDR
// hc_name =  ;
6448: LD_ADDR_OWVAR 26
6452: PUSH
6453: LD_STRING 
6455: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6456: LD_INT 0
6458: PPUSH
6459: LD_VAR 0 5
6463: PPUSH
6464: LD_VAR 0 4
6468: PPUSH
6469: CALL_OW 380
// un = CreateHuman ;
6473: LD_ADDR_VAR 0 10
6477: PUSH
6478: CALL_OW 44
6482: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6483: LD_VAR 0 10
6487: PPUSH
6488: LD_VAR 0 3
6492: PPUSH
6493: CALL_OW 52
// end ;
6497: GO 6417
6499: POP
6500: POP
// end ;
6501: LD_VAR 0 7
6505: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
// uc_side := GetSide ( b ) ;
6511: LD_ADDR_OWVAR 20
6515: PUSH
6516: LD_VAR 0 2
6520: PPUSH
6521: CALL_OW 255
6525: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6526: LD_ADDR_OWVAR 21
6530: PUSH
6531: LD_VAR 0 2
6535: PPUSH
6536: CALL_OW 248
6540: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6541: LD_INT 0
6543: PPUSH
6544: LD_INT 1
6546: PPUSH
6547: LD_VAR 0 1
6551: PPUSH
6552: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6556: LD_ADDR_VAR 0 5
6560: PUSH
6561: LD_VAR 0 2
6565: PPUSH
6566: CALL_OW 254
6570: PUSH
6571: LD_INT 3
6573: MINUS
6574: ST_TO_ADDR
// if dir < 0 then
6575: LD_VAR 0 5
6579: PUSH
6580: LD_INT 0
6582: LESS
6583: IFFALSE 6599
// dir := 6 + dir ;
6585: LD_ADDR_VAR 0 5
6589: PUSH
6590: LD_INT 6
6592: PUSH
6593: LD_VAR 0 5
6597: PLUS
6598: ST_TO_ADDR
// un := CreateHuman ;
6599: LD_ADDR_VAR 0 4
6603: PUSH
6604: CALL_OW 44
6608: ST_TO_ADDR
// SetDir ( un , dir ) ;
6609: LD_VAR 0 4
6613: PPUSH
6614: LD_VAR 0 5
6618: PPUSH
6619: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6623: LD_VAR 0 4
6627: PPUSH
6628: LD_VAR 0 2
6632: PPUSH
6633: CALL_OW 52
// end ;
6637: LD_VAR 0 3
6641: RET
// export function PrepareDifficulty ; begin
6642: LD_INT 0
6644: PPUSH
// if Difficulty = 1 then
6645: LD_OWVAR 67
6649: PUSH
6650: LD_INT 1
6652: EQUAL
6653: IFFALSE 6671
// begin RuSolMinLevel = 2 ;
6655: LD_ADDR_EXP 34
6659: PUSH
6660: LD_INT 2
6662: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6663: LD_ADDR_EXP 35
6667: PUSH
6668: LD_INT 3
6670: ST_TO_ADDR
// end ; if Difficulty = 2 then
6671: LD_OWVAR 67
6675: PUSH
6676: LD_INT 2
6678: EQUAL
6679: IFFALSE 6697
// begin RuSolMinLevel = 3 ;
6681: LD_ADDR_EXP 34
6685: PUSH
6686: LD_INT 3
6688: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6689: LD_ADDR_EXP 35
6693: PUSH
6694: LD_INT 5
6696: ST_TO_ADDR
// end ; if Difficulty = 3 then
6697: LD_OWVAR 67
6701: PUSH
6702: LD_INT 3
6704: EQUAL
6705: IFFALSE 6723
// begin RuSolMinLevel = 4 ;
6707: LD_ADDR_EXP 34
6711: PUSH
6712: LD_INT 4
6714: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6715: LD_ADDR_EXP 35
6719: PUSH
6720: LD_INT 6
6722: ST_TO_ADDR
// end ; end ;
6723: LD_VAR 0 1
6727: RET
// export function ShowQuery1 ; begin
6728: LD_INT 0
6730: PPUSH
// case query ( QKill ) of 1 :
6731: LD_STRING QKill
6733: PPUSH
6734: CALL_OW 97
6738: PUSH
6739: LD_INT 1
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6758
6747: POP
// begin result = 1 ;
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// end ; 2 :
6756: GO 6797
6758: LD_INT 2
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 6777
6766: POP
// begin result = 2 ;
6767: LD_ADDR_VAR 0 1
6771: PUSH
6772: LD_INT 2
6774: ST_TO_ADDR
// end ; 3 :
6775: GO 6797
6777: LD_INT 3
6779: DOUBLE
6780: EQUAL
6781: IFTRUE 6785
6783: GO 6796
6785: POP
// begin result = 3 ;
6786: LD_ADDR_VAR 0 1
6790: PUSH
6791: LD_INT 3
6793: ST_TO_ADDR
// end ; end ;
6794: GO 6797
6796: POP
// end ;
6797: LD_VAR 0 1
6801: RET
// export function ShowQuery2 ; begin
6802: LD_INT 0
6804: PPUSH
// case query ( QKill2 ) of 1 :
6805: LD_STRING QKill2
6807: PPUSH
6808: CALL_OW 97
6812: PUSH
6813: LD_INT 1
6815: DOUBLE
6816: EQUAL
6817: IFTRUE 6821
6819: GO 6832
6821: POP
// begin result = 1 ;
6822: LD_ADDR_VAR 0 1
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ; 2 :
6830: GO 6852
6832: LD_INT 2
6834: DOUBLE
6835: EQUAL
6836: IFTRUE 6840
6838: GO 6851
6840: POP
// begin result = 2 ;
6841: LD_ADDR_VAR 0 1
6845: PUSH
6846: LD_INT 2
6848: ST_TO_ADDR
// end ; end ;
6849: GO 6852
6851: POP
// end ;
6852: LD_VAR 0 1
6856: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6857: LD_INT 0
6859: PPUSH
6860: PPUSH
6861: PPUSH
6862: PPUSH
6863: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6864: LD_ADDR_VAR 0 8
6868: PUSH
6869: LD_INT 48
6871: PUSH
6872: LD_INT 49
6874: PUSH
6875: LD_INT 50
6877: PUSH
6878: LD_INT 20
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: LD_INT 51
6886: PUSH
6887: LD_INT 52
6889: PUSH
6890: LD_INT 69
6892: PUSH
6893: LD_INT 39
6895: PUSH
6896: LD_INT 34
6898: PUSH
6899: LD_INT 40
6901: PUSH
6902: LD_INT 53
6904: PUSH
6905: LD_INT 71
6907: PUSH
6908: LD_INT 57
6910: PUSH
6911: LD_INT 58
6913: PUSH
6914: LD_INT 44
6916: PUSH
6917: LD_INT 32
6919: PUSH
6920: LD_INT 27
6922: PUSH
6923: LD_INT 23
6925: PUSH
6926: LD_INT 33
6928: PUSH
6929: LD_INT 59
6931: PUSH
6932: LD_INT 54
6934: PUSH
6935: LD_INT 55
6937: PUSH
6938: LD_INT 56
6940: PUSH
6941: LD_INT 63
6943: PUSH
6944: LD_INT 64
6946: PUSH
6947: LD_INT 65
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 31
6955: PUSH
6956: LD_INT 21
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 25
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6999: LD_ADDR_VAR 0 5
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_VAR 0 8
7013: PUSH
7014: FOR_TO
7015: IFFALSE 7091
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
7017: LD_VAR 0 8
7021: PUSH
7022: LD_VAR 0 5
7026: ARRAY
7027: PPUSH
7028: LD_VAR 0 1
7032: PPUSH
7033: CALL_OW 321
7037: PUSH
7038: LD_INT 1
7040: EQUAL
7041: PUSH
7042: LD_VAR 0 8
7046: PUSH
7047: LD_VAR 0 5
7051: ARRAY
7052: PPUSH
7053: LD_VAR 0 3
7057: PPUSH
7058: CALL_OW 482
7062: PUSH
7063: LD_INT 1
7065: EQUAL
7066: AND
7067: IFFALSE 7089
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_VAR 0 8
7078: PUSH
7079: LD_VAR 0 5
7083: ARRAY
7084: PPUSH
7085: CALL_OW 184
7089: GO 7014
7091: POP
7092: POP
// end ;
7093: LD_VAR 0 4
7097: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7098: LD_INT 0
7100: PPUSH
7101: PPUSH
7102: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 1
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PUSH
7134: LD_VAR 0 3
7138: LESSEQUAL
7139: IFFALSE 7247
// begin for i = 1 to vehCount do
7141: LD_ADDR_VAR 0 9
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_VAR 0 3
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7245
// begin weapon = weaponTab [ i ] ;
7159: LD_ADDR_VAR 0 10
7163: PUSH
7164: LD_VAR 0 4
7168: PUSH
7169: LD_VAR 0 9
7173: ARRAY
7174: ST_TO_ADDR
// if weapon = 46 then
7175: LD_VAR 0 10
7179: PUSH
7180: LD_INT 46
7182: EQUAL
7183: IFFALSE 7214
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7185: LD_VAR 0 2
7189: PPUSH
7190: LD_INT 24
7192: PPUSH
7193: LD_VAR 0 5
7197: PPUSH
7198: LD_VAR 0 6
7202: PPUSH
7203: LD_VAR 0 10
7207: PPUSH
7208: CALL_OW 185
// end else
7212: GO 7243
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7214: LD_VAR 0 2
7218: PPUSH
7219: LD_VAR 0 7
7223: PPUSH
7224: LD_VAR 0 5
7228: PPUSH
7229: LD_VAR 0 6
7233: PPUSH
7234: LD_VAR 0 10
7238: PPUSH
7239: CALL_OW 185
// end ; end ;
7243: GO 7156
7245: POP
7246: POP
// end ; end ;
7247: LD_VAR 0 8
7251: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7258: LD_ADDR_VAR 0 8
7262: PUSH
7263: LD_INT 22
7265: PUSH
7266: LD_VAR 0 1
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 21
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 3
7287: PUSH
7288: LD_INT 24
7290: PUSH
7291: LD_INT 650
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 69
7311: ST_TO_ADDR
// if damageVehicles > 0 then
7312: LD_VAR 0 8
7316: PUSH
7317: LD_INT 0
7319: GREATER
7320: IFFALSE 7341
// ComMoveXY ( damageVehicles , repX , repY ) ;
7322: LD_VAR 0 8
7326: PPUSH
7327: LD_VAR 0 3
7331: PPUSH
7332: LD_VAR 0 4
7336: PPUSH
7337: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7341: LD_VAR 0 8
7345: PPUSH
7346: LD_INT 95
7348: PUSH
7349: LD_VAR 0 2
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: LD_INT 58
7363: PUSH
7364: EMPTY
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: PUSH
7380: LD_INT 0
7382: GREATER
7383: IFFALSE 7450
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7385: LD_ADDR_VAR 0 6
7389: PUSH
7390: LD_VAR 0 8
7394: PPUSH
7395: LD_INT 95
7397: PUSH
7398: LD_VAR 0 2
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: LD_INT 58
7412: PUSH
7413: EMPTY
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PPUSH
7424: CALL_OW 72
7428: PUSH
7429: FOR_IN
7430: IFFALSE 7448
// ComExitVehicle ( UnitsInside ( i ) ) ;
7432: LD_VAR 0 6
7436: PPUSH
7437: CALL_OW 313
7441: PPUSH
7442: CALL_OW 121
7446: GO 7429
7448: POP
7449: POP
// end ;
7450: LD_VAR 0 5
7454: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7455: LD_INT 0
7457: PPUSH
7458: PPUSH
7459: PPUSH
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 24
7493: PUSH
7494: LD_INT 660
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 58
7506: PUSH
7507: EMPTY
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 34
7515: PUSH
7516: LD_INT 43
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 34
7525: PUSH
7526: LD_INT 44
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 34
7535: PUSH
7536: LD_INT 46
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7565: LD_INT 22
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 21
7579: PUSH
7580: LD_INT 2
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 24
7589: PUSH
7590: LD_INT 1000
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: LD_INT 58
7602: PUSH
7603: EMPTY
7604: LIST
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 34
7611: PUSH
7612: LD_INT 43
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 34
7621: PUSH
7622: LD_INT 44
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 34
7631: PUSH
7632: LD_INT 46
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PPUSH
7656: CALL_OW 69
7660: PUSH
7661: LD_INT 5
7663: PUSH
7664: LD_INT 6
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: PUSH
7675: LD_OWVAR 67
7679: ARRAY
7680: EQUAL
7681: IFFALSE 7937
// if seeEnemy = 0 then
7683: LD_VAR 0 11
7687: PUSH
7688: LD_INT 0
7690: EQUAL
7691: IFFALSE 7937
// repeat wait ( 0 0$1 ) ;
7693: LD_INT 35
7695: PPUSH
7696: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7700: LD_ADDR_VAR 0 8
7704: PUSH
7705: LD_INT 22
7707: PUSH
7708: LD_VAR 0 1
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 660
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 3
7739: PUSH
7740: LD_INT 58
7742: PUSH
7743: EMPTY
7744: LIST
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: LD_INT 34
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 34
7761: PUSH
7762: LD_INT 44
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 34
7771: PUSH
7772: LD_INT 46
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: PPUSH
7796: CALL_OW 69
7800: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7801: LD_INT 22
7803: PUSH
7804: LD_VAR 0 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 95
7815: PUSH
7816: LD_VAR 0 2
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 69
7833: NOT
7834: PUSH
7835: LD_VAR 0 11
7839: PUSH
7840: LD_INT 0
7842: EQUAL
7843: AND
7844: IFFALSE 7899
// for i := 1 to wayX do
7846: LD_ADDR_VAR 0 6
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_VAR 0 3
7860: PUSH
7861: FOR_TO
7862: IFFALSE 7897
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7864: LD_VAR 0 8
7868: PPUSH
7869: LD_VAR 0 3
7873: PUSH
7874: LD_VAR 0 6
7878: ARRAY
7879: PPUSH
7880: LD_VAR 0 4
7884: PUSH
7885: LD_VAR 0 6
7889: ARRAY
7890: PPUSH
7891: CALL_OW 114
7895: GO 7861
7897: POP
7898: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7899: LD_INT 22
7901: PUSH
7902: LD_VAR 0 1
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 95
7913: PUSH
7914: LD_VAR 0 2
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 69
7931: PUSH
7932: LD_INT 0
7934: GREATER
7935: IFFALSE 7693
// seeEnemy = 1 ;
7937: LD_ADDR_VAR 0 11
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7945: LD_INT 35
7947: PPUSH
7948: CALL_OW 67
// for j in vehiclesOK do
7952: LD_ADDR_VAR 0 7
7956: PUSH
7957: LD_VAR 0 8
7961: PUSH
7962: FOR_IN
7963: IFFALSE 8033
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 81
7972: PUSH
7973: LD_VAR 0 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 101
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PPUSH
7996: CALL_OW 69
8000: PUSH
8001: LD_EXP 45
8005: DIFF
8006: PPUSH
8007: LD_VAR 0 7
8011: PPUSH
8012: CALL_OW 74
8016: ST_TO_ADDR
// ComAttackUnit ( j , target1 ) ;
8017: LD_VAR 0 7
8021: PPUSH
8022: LD_VAR 0 9
8026: PPUSH
8027: CALL_OW 115
// end ;
8031: GO 7962
8033: POP
8034: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8035: LD_INT 22
8037: PUSH
8038: LD_VAR 0 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: LD_INT 1000
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: LD_INT 58
8072: PUSH
8073: EMPTY
8074: LIST
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: LD_INT 34
8081: PUSH
8082: LD_INT 43
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PUSH
8089: LD_INT 34
8091: PUSH
8092: LD_INT 44
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 34
8101: PUSH
8102: LD_INT 46
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: PUSH
8131: LD_INT 0
8133: EQUAL
8134: IFFALSE 7945
// seeEnemy = 0 ;
8136: LD_ADDR_VAR 0 11
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 5
8148: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8149: LD_INT 0
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8157: LD_ADDR_VAR 0 8
8161: PUSH
8162: LD_VAR 0 2
8166: PPUSH
8167: CALL_OW 313
8171: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 25
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 24
8206: PUSH
8207: LD_INT 750
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: LD_INT 54
8219: PUSH
8220: EMPTY
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 70
8237: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8238: LD_ADDR_VAR 0 6
8242: PUSH
8243: LD_VAR 0 3
8247: PPUSH
8248: LD_INT 22
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 21
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: LD_INT 24
8275: PUSH
8276: LD_INT 1000
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: PPUSH
8295: CALL_OW 70
8299: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8300: LD_VAR 0 6
8304: NOT
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_VAR 0 1
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 25
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 24
8330: PUSH
8331: LD_INT 250
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: NOT
8348: AND
8349: IFFALSE 8353
// exit ;
8351: GO 8535
// if buildings_list > 0 and engineerOkInside then
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 0
8360: GREATER
8361: PUSH
8362: LD_VAR 0 8
8366: AND
8367: IFFALSE 8378
// ComExitBuilding ( engineerOkInside ) ;
8369: LD_VAR 0 8
8373: PPUSH
8374: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8378: LD_VAR 0 6
8382: PUSH
8383: LD_INT 0
8385: GREATER
8386: PUSH
8387: LD_VAR 0 9
8391: PUSH
8392: LD_INT 0
8394: GREATER
8395: AND
8396: IFFALSE 8416
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8398: LD_VAR 0 9
8402: PPUSH
8403: LD_VAR 0 6
8407: PUSH
8408: LD_INT 1
8410: ARRAY
8411: PPUSH
8412: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8416: LD_VAR 0 6
8420: PUSH
8421: LD_INT 0
8423: EQUAL
8424: PUSH
8425: LD_VAR 0 4
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 9
8439: PUSH
8440: LD_INT 0
8442: GREATER
8443: AND
8444: IFFALSE 8460
// ComEnterUnit ( engineerOkOutside , building ) ;
8446: LD_VAR 0 9
8450: PPUSH
8451: LD_VAR 0 2
8455: PPUSH
8456: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8460: LD_VAR 0 9
8464: PUSH
8465: LD_INT 0
8467: GREATER
8468: PUSH
8469: LD_VAR 0 6
8473: PUSH
8474: LD_INT 0
8476: EQUAL
8477: AND
8478: PUSH
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 0
8486: GREATER
8487: AND
8488: IFFALSE 8535
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8490: LD_VAR 0 9
8494: PPUSH
8495: LD_VAR 0 4
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: LD_VAR 0 4
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: LD_VAR 0 4
8517: PUSH
8518: LD_INT 3
8520: ARRAY
8521: PPUSH
8522: LD_VAR 0 4
8526: PUSH
8527: LD_INT 4
8529: ARRAY
8530: PPUSH
8531: CALL_OW 145
// end ;
8535: LD_VAR 0 5
8539: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
8544: PPUSH
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8551: LD_ADDR_VAR 0 6
8555: PUSH
8556: LD_INT 22
8558: PUSH
8559: LD_VAR 0 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 25
8570: PUSH
8571: LD_INT 4
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 23
8580: PUSH
8581: LD_INT 2
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 24
8590: PUSH
8591: LD_INT 251
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: PPUSH
8604: CALL_OW 69
8608: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_VAR 0 3
8618: PPUSH
8619: LD_INT 22
8621: PUSH
8622: LD_VAR 0 1
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 23
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 4
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 50
8653: PUSH
8654: EMPTY
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 70
8667: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8668: LD_ADDR_VAR 0 10
8672: PUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: LD_INT 22
8680: PUSH
8681: LD_VAR 0 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: LD_INT 25
8705: PUSH
8706: LD_INT 3
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 3
8719: PUSH
8720: LD_INT 24
8722: PUSH
8723: LD_INT 750
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 70
8744: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8745: LD_ADDR_VAR 0 11
8749: PUSH
8750: LD_VAR 0 2
8754: PPUSH
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 21
8769: PUSH
8770: LD_INT 1
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: LD_INT 25
8782: PUSH
8783: LD_INT 3
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 3
8796: PUSH
8797: LD_INT 24
8799: PUSH
8800: LD_INT 1000
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 70
8821: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8822: LD_VAR 0 10
8826: NOT
8827: PUSH
8828: LD_VAR 0 11
8832: NOT
8833: AND
8834: PUSH
8835: LD_VAR 0 6
8839: NOT
8840: AND
8841: IFFALSE 8845
// exit ;
8843: GO 9079
// if damageUnits > 0 and sci_list > 0 then
8845: LD_VAR 0 10
8849: PUSH
8850: LD_INT 0
8852: GREATER
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: LD_INT 0
8861: GREATER
8862: AND
8863: IFFALSE 8879
// ComMoveToArea ( damageUnits , healArea ) ;
8865: LD_VAR 0 10
8869: PPUSH
8870: LD_VAR 0 2
8874: PPUSH
8875: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8879: LD_VAR 0 11
8883: PUSH
8884: LD_INT 0
8886: GREATER
8887: PUSH
8888: LD_VAR 0 6
8892: PUSH
8893: LD_INT 0
8895: GREATER
8896: AND
8897: IFFALSE 8908
// ComExitBuilding ( sci_list ) ;
8899: LD_VAR 0 6
8903: PPUSH
8904: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8908: LD_VAR 0 11
8912: PUSH
8913: LD_INT 0
8915: GREATER
8916: PUSH
8917: LD_VAR 0 7
8921: PUSH
8922: LD_INT 0
8924: GREATER
8925: AND
8926: IFFALSE 8946
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8928: LD_VAR 0 7
8932: PPUSH
8933: LD_VAR 0 11
8937: PUSH
8938: LD_INT 1
8940: ARRAY
8941: PPUSH
8942: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8946: LD_VAR 0 10
8950: PUSH
8951: LD_INT 0
8953: EQUAL
8954: PUSH
8955: LD_VAR 0 11
8959: PUSH
8960: LD_INT 0
8962: EQUAL
8963: AND
8964: PUSH
8965: LD_VAR 0 7
8969: PUSH
8970: LD_INT 0
8972: GREATER
8973: AND
8974: IFFALSE 9079
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8976: LD_ADDR_VAR 0 12
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_VAR 0 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 30
9005: PUSH
9006: LD_INT 8
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: PPUSH
9018: CALL_OW 69
9022: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9023: LD_ADDR_VAR 0 13
9027: PUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 12
9035: PPUSH
9036: CALL_OW 12
9040: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9041: LD_VAR 0 7
9045: PPUSH
9046: LD_INT 3
9048: PUSH
9049: LD_INT 60
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 72
9063: PPUSH
9064: LD_VAR 0 12
9068: PUSH
9069: LD_VAR 0 13
9073: ARRAY
9074: PPUSH
9075: CALL_OW 120
// end ; end ;
9079: LD_VAR 0 5
9083: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9084: LD_INT 0
9086: PPUSH
9087: PPUSH
9088: PPUSH
9089: PPUSH
// tmpTab = [ ] ;
9090: LD_ADDR_VAR 0 6
9094: PUSH
9095: EMPTY
9096: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9097: LD_INT 22
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 30
9111: PUSH
9112: LD_INT 32
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PPUSH
9123: CALL_OW 69
9127: PUSH
9128: LD_INT 0
9130: GREATER
9131: IFFALSE 9214
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9133: LD_ADDR_VAR 0 4
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_VAR 0 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 30
9152: PUSH
9153: LD_INT 32
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9212
// begin for j in UnitsInside ( i ) do
9172: LD_ADDR_VAR 0 5
9176: PUSH
9177: LD_VAR 0 4
9181: PPUSH
9182: CALL_OW 313
9186: PUSH
9187: FOR_IN
9188: IFFALSE 9208
// tmpTab = tmpTab ^ j ;
9190: LD_ADDR_VAR 0 6
9194: PUSH
9195: LD_VAR 0 6
9199: PUSH
9200: LD_VAR 0 5
9204: ADD
9205: ST_TO_ADDR
9206: GO 9187
9208: POP
9209: POP
// end ;
9210: GO 9169
9212: POP
9213: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9214: LD_VAR 0 6
9218: PPUSH
9219: LD_VAR 0 2
9223: PPUSH
9224: CALL_OW 250
9228: PPUSH
9229: LD_VAR 0 2
9233: PPUSH
9234: CALL_OW 251
9238: PPUSH
9239: CALL_OW 114
// end ;
9243: LD_VAR 0 3
9247: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9248: LD_INT 0
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// enable ;
9254: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9255: LD_ADDR_VAR 0 7
9259: PUSH
9260: LD_VAR 0 3
9264: PPUSH
9265: CALL_OW 435
9269: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9270: LD_ADDR_VAR 0 6
9274: PUSH
9275: LD_INT 22
9277: PUSH
9278: LD_VAR 0 1
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 34
9289: PUSH
9290: LD_VAR 0 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 69
9307: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9308: LD_VAR 0 6
9312: PUSH
9313: LD_INT 0
9315: GREATER
9316: PUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: CALL_OW 435
9326: AND
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_INT 0
9335: GREATER
9336: AND
9337: IFFALSE 9386
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9339: LD_VAR 0 6
9343: PUSH
9344: LD_INT 1
9346: ARRAY
9347: PPUSH
9348: LD_VAR 0 7
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 7
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9370: LD_VAR 0 6
9374: PUSH
9375: LD_INT 1
9377: ARRAY
9378: PPUSH
9379: LD_INT 100
9381: PPUSH
9382: CALL_OW 240
// end ; end ;
9386: LD_VAR 0 4
9390: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9391: LD_INT 0
9393: PPUSH
9394: PPUSH
9395: PPUSH
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9401: LD_ADDR_VAR 0 6
9405: PUSH
9406: LD_VAR 0 2
9410: PPUSH
9411: LD_INT 22
9413: PUSH
9414: LD_VAR 0 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 56
9425: PUSH
9426: EMPTY
9427: LIST
9428: PUSH
9429: LD_INT 24
9431: PUSH
9432: LD_INT 700
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: LD_INT 60
9444: PUSH
9445: EMPTY
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 25
9457: PUSH
9458: LD_INT 1
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 25
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 25
9487: PUSH
9488: LD_INT 9
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 70
9513: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9514: LD_ADDR_VAR 0 7
9518: PUSH
9519: LD_VAR 0 2
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_VAR 0 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 30
9538: PUSH
9539: LD_INT 32
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 58
9548: PUSH
9549: EMPTY
9550: LIST
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 251
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 30
9600: PUSH
9601: LD_INT 4
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 30
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 24
9625: PUSH
9626: LD_INT 251
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 70
9642: ST_TO_ADDR
// if barrackList > 0 then
9643: LD_VAR 0 9
9647: PUSH
9648: LD_INT 0
9650: GREATER
9651: IFFALSE 9799
// begin if turretList = 0 then
9653: LD_VAR 0 7
9657: PUSH
9658: LD_INT 0
9660: EQUAL
9661: IFFALSE 9703
// begin if soldiers_list > 0 then
9663: LD_VAR 0 6
9667: PUSH
9668: LD_INT 0
9670: GREATER
9671: IFFALSE 9701
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9673: LD_VAR 0 6
9677: PPUSH
9678: LD_VAR 0 9
9682: PUSH
9683: LD_INT 1
9685: PPUSH
9686: LD_VAR 0 9
9690: PPUSH
9691: CALL_OW 12
9695: ARRAY
9696: PPUSH
9697: CALL_OW 120
// end else
9701: GO 9799
// begin for i in barrackList do
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_VAR 0 9
9712: PUSH
9713: FOR_IN
9714: IFFALSE 9797
// begin insideUnits = UnitsInside ( i ) ;
9716: LD_ADDR_VAR 0 10
9720: PUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 313
9730: ST_TO_ADDR
// if insideUnits > 0 then
9731: LD_VAR 0 10
9735: PUSH
9736: LD_INT 0
9738: GREATER
9739: IFFALSE 9763
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9741: LD_VAR 0 10
9745: PUSH
9746: LD_INT 1
9748: ARRAY
9749: PPUSH
9750: LD_VAR 0 7
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PPUSH
9759: CALL_OW 120
// if soldiers_list > 0 then
9763: LD_VAR 0 6
9767: PUSH
9768: LD_INT 0
9770: GREATER
9771: IFFALSE 9795
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9773: LD_VAR 0 6
9777: PUSH
9778: LD_INT 1
9780: ARRAY
9781: PPUSH
9782: LD_VAR 0 7
9786: PUSH
9787: LD_INT 1
9789: ARRAY
9790: PPUSH
9791: CALL_OW 120
// end ;
9795: GO 9713
9797: POP
9798: POP
// end ; end ; end ;
9799: LD_VAR 0 3
9803: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9811: LD_ADDR_VAR 0 6
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_VAR 0 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 2
9830: PUSH
9831: LD_INT 30
9833: PUSH
9834: LD_INT 31
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 30
9843: PUSH
9844: LD_INT 32
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 33
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 4
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 30
9873: PUSH
9874: LD_INT 5
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9898: LD_ADDR_VAR 0 7
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 2
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 58
9927: PUSH
9928: EMPTY
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: PPUSH
9936: CALL_OW 69
9940: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9941: LD_VAR 0 6
9945: PUSH
9946: LD_INT 0
9948: GREATER
9949: PUSH
9950: LD_VAR 0 7
9954: PUSH
9955: LD_INT 0
9957: GREATER
9958: AND
9959: IFFALSE 10029
// begin for i in turretsList do
9961: LD_ADDR_VAR 0 4
9965: PUSH
9966: LD_VAR 0 6
9970: PUSH
9971: FOR_IN
9972: IFFALSE 10027
// begin for j in enemyBuildings do
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: LD_VAR 0 7
9983: PUSH
9984: FOR_IN
9985: IFFALSE 10023
// begin if GetDistUnits ( i , j ) < 20 then
9987: LD_VAR 0 4
9991: PPUSH
9992: LD_VAR 0 5
9996: PPUSH
9997: CALL_OW 296
10001: PUSH
10002: LD_INT 20
10004: LESS
10005: IFFALSE 10021
// begin ComAttackUnit ( i , j ) ;
10007: LD_VAR 0 4
10011: PPUSH
10012: LD_VAR 0 5
10016: PPUSH
10017: CALL_OW 115
// end ; end ;
10021: GO 9984
10023: POP
10024: POP
// end ;
10025: GO 9971
10027: POP
10028: POP
// end ; end ;
10029: LD_VAR 0 3
10033: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
10039: PPUSH
10040: PPUSH
10041: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10042: LD_ADDR_VAR 0 8
10046: PUSH
10047: LD_INT 22
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 52
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: PPUSH
10084: CALL_OW 69
10088: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10089: LD_ADDR_VAR 0 9
10093: PUSH
10094: LD_INT 22
10096: PUSH
10097: LD_VAR 0 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 3
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: LD_INT 24
10121: PUSH
10122: LD_INT 1000
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10146: LD_VAR 0 9
10150: PUSH
10151: LD_INT 0
10153: GREATER
10154: PUSH
10155: LD_VAR 0 8
10159: PPUSH
10160: LD_INT 24
10162: PUSH
10163: LD_INT 750
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 72
10174: PUSH
10175: LD_INT 0
10177: GREATER
10178: AND
10179: IFFALSE 10214
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10181: LD_VAR 0 8
10185: PPUSH
10186: LD_INT 24
10188: PUSH
10189: LD_INT 750
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PPUSH
10201: LD_VAR 0 9
10205: PUSH
10206: LD_INT 1
10208: ARRAY
10209: PPUSH
10210: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10214: LD_VAR 0 8
10218: PPUSH
10219: LD_INT 3
10221: PUSH
10222: LD_INT 24
10224: PUSH
10225: LD_INT 750
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 72
10240: PUSH
10241: LD_INT 0
10243: GREATER
10244: IFFALSE 10282
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10246: LD_VAR 0 8
10250: PPUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 750
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 72
10272: PPUSH
10273: LD_VAR 0 2
10277: PPUSH
10278: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10282: LD_VAR 0 8
10286: PUSH
10287: LD_INT 0
10289: GREATER
10290: PUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_INT 0
10298: EQUAL
10299: AND
10300: PUSH
10301: LD_VAR 0 3
10305: PUSH
10306: LD_INT 0
10308: GREATER
10309: AND
10310: IFFALSE 10357
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10312: LD_VAR 0 8
10316: PPUSH
10317: LD_VAR 0 3
10321: PUSH
10322: LD_INT 1
10324: ARRAY
10325: PPUSH
10326: LD_VAR 0 3
10330: PUSH
10331: LD_INT 2
10333: ARRAY
10334: PPUSH
10335: LD_VAR 0 3
10339: PUSH
10340: LD_INT 3
10342: ARRAY
10343: PPUSH
10344: LD_VAR 0 3
10348: PUSH
10349: LD_INT 4
10351: ARRAY
10352: PPUSH
10353: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10357: LD_VAR 0 2
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 21
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 34
10386: PUSH
10387: LD_INT 52
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: LD_INT 24
10399: PUSH
10400: LD_INT 750
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 70
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10627
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10427: LD_ADDR_VAR 0 5
10431: PUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: LD_INT 22
10439: PUSH
10440: LD_VAR 0 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 21
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 34
10461: PUSH
10462: LD_INT 52
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: LD_INT 24
10474: PUSH
10475: LD_INT 750
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL_OW 70
10496: PUSH
10497: FOR_IN
10498: IFFALSE 10625
// begin mechTmp = UnitsInside ( i ) ;
10500: LD_ADDR_VAR 0 6
10504: PUSH
10505: LD_VAR 0 5
10509: PPUSH
10510: CALL_OW 313
10514: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10515: LD_VAR 0 6
10519: PPUSH
10520: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10524: LD_VAR 0 6
10528: PPUSH
10529: LD_VAR 0 7
10533: PPUSH
10534: CALL_OW 189
// wait ( 0 0$2 ) ;
10538: LD_INT 70
10540: PPUSH
10541: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10545: LD_VAR 0 6
10549: PPUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 21
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 34
10579: PUSH
10580: LD_INT 52
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 24
10589: PUSH
10590: LD_INT 1000
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 58
10599: PUSH
10600: EMPTY
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PPUSH
10619: CALL_OW 180
// end ;
10623: GO 10497
10625: POP
10626: POP
// end ; end ;
10627: LD_VAR 0 4
10631: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10632: LD_INT 0
10634: PPUSH
10635: PPUSH
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
10640: PPUSH
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
// for i = 1 to medicCount do
10645: LD_ADDR_VAR 0 14
10649: PUSH
10650: DOUBLE
10651: LD_INT 1
10653: DEC
10654: ST_TO_ADDR
10655: LD_VAR 0 7
10659: PUSH
10660: FOR_TO
10661: IFFALSE 10743
// begin uc_side = side ;
10663: LD_ADDR_OWVAR 20
10667: PUSH
10668: LD_VAR 0 1
10672: ST_TO_ADDR
// uc_nation = nation ;
10673: LD_ADDR_OWVAR 21
10677: PUSH
10678: LD_VAR 0 2
10682: ST_TO_ADDR
// hc_name =  ;
10683: LD_ADDR_OWVAR 26
10687: PUSH
10688: LD_STRING 
10690: ST_TO_ADDR
// hc_gallery =  ;
10691: LD_ADDR_OWVAR 33
10695: PUSH
10696: LD_STRING 
10698: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10699: LD_INT 0
10701: PPUSH
10702: LD_INT 4
10704: PPUSH
10705: LD_VAR 0 8
10709: PPUSH
10710: CALL_OW 380
// un = CreateHuman ;
10714: LD_ADDR_VAR 0 16
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10724: LD_VAR 0 16
10728: PPUSH
10729: LD_VAR 0 9
10733: PPUSH
10734: LD_INT 0
10736: PPUSH
10737: CALL_OW 49
// end ;
10741: GO 10660
10743: POP
10744: POP
// for i = 1 to soldierCount do
10745: LD_ADDR_VAR 0 14
10749: PUSH
10750: DOUBLE
10751: LD_INT 1
10753: DEC
10754: ST_TO_ADDR
10755: LD_VAR 0 3
10759: PUSH
10760: FOR_TO
10761: IFFALSE 10843
// begin uc_side = side ;
10763: LD_ADDR_OWVAR 20
10767: PUSH
10768: LD_VAR 0 1
10772: ST_TO_ADDR
// uc_nation = nation ;
10773: LD_ADDR_OWVAR 21
10777: PUSH
10778: LD_VAR 0 2
10782: ST_TO_ADDR
// hc_name =  ;
10783: LD_ADDR_OWVAR 26
10787: PUSH
10788: LD_STRING 
10790: ST_TO_ADDR
// hc_gallery =  ;
10791: LD_ADDR_OWVAR 33
10795: PUSH
10796: LD_STRING 
10798: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10799: LD_INT 0
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: LD_VAR 0 8
10809: PPUSH
10810: CALL_OW 380
// un = CreateHuman ;
10814: LD_ADDR_VAR 0 16
10818: PUSH
10819: CALL_OW 44
10823: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10824: LD_VAR 0 16
10828: PPUSH
10829: LD_VAR 0 9
10833: PPUSH
10834: LD_INT 0
10836: PPUSH
10837: CALL_OW 49
// end ;
10841: GO 10760
10843: POP
10844: POP
// for i = 1 to sniperCount do
10845: LD_ADDR_VAR 0 14
10849: PUSH
10850: DOUBLE
10851: LD_INT 1
10853: DEC
10854: ST_TO_ADDR
10855: LD_VAR 0 4
10859: PUSH
10860: FOR_TO
10861: IFFALSE 10943
// begin uc_side = side ;
10863: LD_ADDR_OWVAR 20
10867: PUSH
10868: LD_VAR 0 1
10872: ST_TO_ADDR
// uc_nation = nation ;
10873: LD_ADDR_OWVAR 21
10877: PUSH
10878: LD_VAR 0 2
10882: ST_TO_ADDR
// hc_name =  ;
10883: LD_ADDR_OWVAR 26
10887: PUSH
10888: LD_STRING 
10890: ST_TO_ADDR
// hc_gallery =  ;
10891: LD_ADDR_OWVAR 33
10895: PUSH
10896: LD_STRING 
10898: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10899: LD_INT 0
10901: PPUSH
10902: LD_INT 5
10904: PPUSH
10905: LD_VAR 0 8
10909: PPUSH
10910: CALL_OW 380
// un = CreateHuman ;
10914: LD_ADDR_VAR 0 16
10918: PUSH
10919: CALL_OW 44
10923: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10924: LD_VAR 0 16
10928: PPUSH
10929: LD_VAR 0 9
10933: PPUSH
10934: LD_INT 0
10936: PPUSH
10937: CALL_OW 49
// end ;
10941: GO 10860
10943: POP
10944: POP
// for i = 1 to bazookCount do
10945: LD_ADDR_VAR 0 14
10949: PUSH
10950: DOUBLE
10951: LD_INT 1
10953: DEC
10954: ST_TO_ADDR
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_TO
10961: IFFALSE 11043
// begin uc_side = side ;
10963: LD_ADDR_OWVAR 20
10967: PUSH
10968: LD_VAR 0 1
10972: ST_TO_ADDR
// uc_nation = nation ;
10973: LD_ADDR_OWVAR 21
10977: PUSH
10978: LD_VAR 0 2
10982: ST_TO_ADDR
// hc_name =  ;
10983: LD_ADDR_OWVAR 26
10987: PUSH
10988: LD_STRING 
10990: ST_TO_ADDR
// hc_gallery =  ;
10991: LD_ADDR_OWVAR 33
10995: PUSH
10996: LD_STRING 
10998: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10999: LD_INT 0
11001: PPUSH
11002: LD_INT 9
11004: PPUSH
11005: LD_VAR 0 8
11009: PPUSH
11010: CALL_OW 380
// un = CreateHuman ;
11014: LD_ADDR_VAR 0 16
11018: PUSH
11019: CALL_OW 44
11023: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11024: LD_VAR 0 16
11028: PPUSH
11029: LD_VAR 0 9
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// end ;
11041: GO 10960
11043: POP
11044: POP
// for i = 1 to mortalCount do
11045: LD_ADDR_VAR 0 14
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_VAR 0 6
11059: PUSH
11060: FOR_TO
11061: IFFALSE 11143
// begin uc_side = side ;
11063: LD_ADDR_OWVAR 20
11067: PUSH
11068: LD_VAR 0 1
11072: ST_TO_ADDR
// uc_nation = nation ;
11073: LD_ADDR_OWVAR 21
11077: PUSH
11078: LD_VAR 0 2
11082: ST_TO_ADDR
// hc_name =  ;
11083: LD_ADDR_OWVAR 26
11087: PUSH
11088: LD_STRING 
11090: ST_TO_ADDR
// hc_gallery =  ;
11091: LD_ADDR_OWVAR 33
11095: PUSH
11096: LD_STRING 
11098: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11099: LD_INT 0
11101: PPUSH
11102: LD_INT 8
11104: PPUSH
11105: LD_VAR 0 8
11109: PPUSH
11110: CALL_OW 380
// un = CreateHuman ;
11114: LD_ADDR_VAR 0 16
11118: PUSH
11119: CALL_OW 44
11123: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11124: LD_VAR 0 16
11128: PPUSH
11129: LD_VAR 0 9
11133: PPUSH
11134: LD_INT 0
11136: PPUSH
11137: CALL_OW 49
// end ;
11141: GO 11060
11143: POP
11144: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11145: LD_ADDR_VAR 0 19
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 1
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 25
11177: PUSH
11178: LD_INT 5
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 25
11187: PUSH
11188: LD_INT 8
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 25
11197: PUSH
11198: LD_INT 9
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11221: LD_ADDR_VAR 0 18
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: ST_TO_ADDR
// for i in medic_list do
11257: LD_ADDR_VAR 0 14
11261: PUSH
11262: LD_VAR 0 18
11266: PUSH
11267: FOR_IN
11268: IFFALSE 11286
// ComMoveToArea ( i , healArea ) ;
11270: LD_VAR 0 14
11274: PPUSH
11275: LD_VAR 0 10
11279: PPUSH
11280: CALL_OW 113
11284: GO 11267
11286: POP
11287: POP
// if strategy = 1 then
11288: LD_VAR 0 12
11292: PUSH
11293: LD_INT 1
11295: EQUAL
11296: IFFALSE 11929
// begin repeat wait ( 0 0$3 ) ;
11298: LD_INT 105
11300: PPUSH
11301: CALL_OW 67
// for i in soldiersOK_list do
11305: LD_ADDR_VAR 0 14
11309: PUSH
11310: LD_VAR 0 19
11314: PUSH
11315: FOR_IN
11316: IFFALSE 11350
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11318: LD_VAR 0 14
11322: PPUSH
11323: LD_INT 80
11325: PPUSH
11326: LD_INT 109
11328: PPUSH
11329: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11333: LD_VAR 0 14
11337: PPUSH
11338: LD_INT 39
11340: PPUSH
11341: LD_INT 49
11343: PPUSH
11344: CALL_OW 174
// end ;
11348: GO 11315
11350: POP
11351: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11352: LD_INT 13
11354: PPUSH
11355: LD_INT 22
11357: PUSH
11358: LD_VAR 0 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PPUSH
11367: CALL_OW 70
11371: PUSH
11372: LD_INT 0
11374: GREATER
11375: IFFALSE 11298
// repeat wait ( 0 0$1 ) ;
11377: LD_INT 35
11379: PPUSH
11380: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11384: LD_ADDR_VAR 0 17
11388: PUSH
11389: LD_INT 22
11391: PUSH
11392: LD_VAR 0 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: LD_INT 3
11406: PUSH
11407: LD_INT 24
11409: PUSH
11410: LD_INT 550
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 24
11423: PUSH
11424: LD_INT 250
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 69
11444: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11445: LD_ADDR_VAR 0 19
11449: PUSH
11450: LD_INT 22
11452: PUSH
11453: LD_VAR 0 1
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 2
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 5
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 25
11487: PUSH
11488: LD_INT 8
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 25
11497: PUSH
11498: LD_INT 9
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 24
11514: PUSH
11515: LD_INT 1000
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if medicCount > 0 then
11532: LD_VAR 0 7
11536: PUSH
11537: LD_INT 0
11539: GREATER
11540: IFFALSE 11614
// begin if damageUnit_list > 0 then
11542: LD_VAR 0 17
11546: PUSH
11547: LD_INT 0
11549: GREATER
11550: IFFALSE 11614
// begin for i in damageUnit_list do
11552: LD_ADDR_VAR 0 14
11556: PUSH
11557: LD_VAR 0 17
11561: PUSH
11562: FOR_IN
11563: IFFALSE 11612
// begin ComMoveToArea ( i , healArea ) ;
11565: LD_VAR 0 14
11569: PPUSH
11570: LD_VAR 0 10
11574: PPUSH
11575: CALL_OW 113
// for j in medic_list do
11579: LD_ADDR_VAR 0 15
11583: PUSH
11584: LD_VAR 0 18
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11608
// AddComHeal ( j , i ) ;
11592: LD_VAR 0 15
11596: PPUSH
11597: LD_VAR 0 14
11601: PPUSH
11602: CALL_OW 188
11606: GO 11589
11608: POP
11609: POP
// end ;
11610: GO 11562
11612: POP
11613: POP
// end ; end ; for i in soldiersOK_list do
11614: LD_ADDR_VAR 0 14
11618: PUSH
11619: LD_VAR 0 19
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11765
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11627: LD_ADDR_VAR 0 22
11631: PUSH
11632: LD_INT 22
11634: PUSH
11635: LD_VAR 0 11
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: PUSH
11649: LD_EXP 45
11653: DIFF
11654: PPUSH
11655: LD_VAR 0 14
11659: PPUSH
11660: CALL_OW 74
11664: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11665: LD_ADDR_VAR 0 23
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_VAR 0 11
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PPUSH
11687: LD_VAR 0 14
11691: PPUSH
11692: CALL_OW 74
11696: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11697: LD_VAR 0 14
11701: PPUSH
11702: LD_VAR 0 22
11706: PPUSH
11707: CALL_OW 296
11711: PUSH
11712: LD_INT 8
11714: PLUS
11715: PUSH
11716: LD_VAR 0 14
11720: PPUSH
11721: LD_VAR 0 23
11725: PPUSH
11726: CALL_OW 296
11730: LESS
11731: IFFALSE 11749
// begin ComAttackUnit ( i , target1 ) ;
11733: LD_VAR 0 14
11737: PPUSH
11738: LD_VAR 0 22
11742: PPUSH
11743: CALL_OW 115
// end else
11747: GO 11763
// begin ComAttackUnit ( i , target2 ) ;
11749: LD_VAR 0 14
11753: PPUSH
11754: LD_VAR 0 23
11758: PPUSH
11759: CALL_OW 115
// end ; end ;
11763: GO 11624
11765: POP
11766: POP
// for i in soldiersOK_list do
11767: LD_ADDR_VAR 0 14
11771: PUSH
11772: LD_VAR 0 19
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11918
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11780: LD_ADDR_VAR 0 22
11784: PUSH
11785: LD_INT 22
11787: PUSH
11788: LD_VAR 0 11
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: PUSH
11802: LD_EXP 45
11806: DIFF
11807: PPUSH
11808: LD_VAR 0 14
11812: PPUSH
11813: CALL_OW 74
11817: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11818: LD_ADDR_VAR 0 23
11822: PUSH
11823: LD_INT 22
11825: PUSH
11826: LD_VAR 0 11
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 69
11839: PPUSH
11840: LD_VAR 0 14
11844: PPUSH
11845: CALL_OW 74
11849: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11850: LD_VAR 0 14
11854: PPUSH
11855: LD_VAR 0 22
11859: PPUSH
11860: CALL_OW 296
11864: PUSH
11865: LD_INT 8
11867: PLUS
11868: PUSH
11869: LD_VAR 0 14
11873: PPUSH
11874: LD_VAR 0 23
11878: PPUSH
11879: CALL_OW 296
11883: LESS
11884: IFFALSE 11902
// begin ComAttackUnit ( i , target1 ) ;
11886: LD_VAR 0 14
11890: PPUSH
11891: LD_VAR 0 22
11895: PPUSH
11896: CALL_OW 115
// end else
11900: GO 11916
// begin ComAttackUnit ( i , target2 ) ;
11902: LD_VAR 0 14
11906: PPUSH
11907: LD_VAR 0 23
11911: PPUSH
11912: CALL_OW 115
// end ; end ;
11916: GO 11777
11918: POP
11919: POP
// until soldiersOK_list = [ ] ;
11920: LD_VAR 0 19
11924: PUSH
11925: EMPTY
11926: EQUAL
11927: IFFALSE 11377
// end ; if strategy = 2 then
11929: LD_VAR 0 12
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: IFFALSE 12642
// begin repeat wait ( 0 0$1 ) ;
11939: LD_INT 35
11941: PPUSH
11942: CALL_OW 67
// for i in soldiersOK_list do
11946: LD_ADDR_VAR 0 14
11950: PUSH
11951: LD_VAR 0 19
11955: PUSH
11956: FOR_IN
11957: IFFALSE 11991
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11959: LD_VAR 0 14
11963: PPUSH
11964: LD_INT 117
11966: PPUSH
11967: LD_INT 97
11969: PPUSH
11970: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11974: LD_VAR 0 14
11978: PPUSH
11979: LD_INT 94
11981: PPUSH
11982: LD_INT 50
11984: PPUSH
11985: CALL_OW 174
// end ;
11989: GO 11956
11991: POP
11992: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11993: LD_INT 14
11995: PPUSH
11996: LD_INT 22
11998: PUSH
11999: LD_VAR 0 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 70
12012: PUSH
12013: LD_INT 0
12015: GREATER
12016: IFFALSE 11939
// repeat wait ( 0 0$3 ) ;
12018: LD_INT 105
12020: PPUSH
12021: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12025: LD_ADDR_VAR 0 17
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_VAR 0 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 550
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 24
12064: PUSH
12065: LD_INT 250
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12086: LD_ADDR_VAR 0 19
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_VAR 0 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 25
12118: PUSH
12119: LD_INT 5
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 8
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 25
12138: PUSH
12139: LD_INT 9
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 24
12155: PUSH
12156: LD_INT 1000
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: ST_TO_ADDR
// if medicCount > 0 then
12173: LD_VAR 0 7
12177: PUSH
12178: LD_INT 0
12180: GREATER
12181: IFFALSE 12255
// begin if damageUnit_list > 0 then
12183: LD_VAR 0 17
12187: PUSH
12188: LD_INT 0
12190: GREATER
12191: IFFALSE 12255
// begin for i in damageUnit_list do
12193: LD_ADDR_VAR 0 14
12197: PUSH
12198: LD_VAR 0 17
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12253
// begin ComMoveToArea ( i , healArea ) ;
12206: LD_VAR 0 14
12210: PPUSH
12211: LD_VAR 0 10
12215: PPUSH
12216: CALL_OW 113
// for j in medic_list do
12220: LD_ADDR_VAR 0 15
12224: PUSH
12225: LD_VAR 0 18
12229: PUSH
12230: FOR_IN
12231: IFFALSE 12249
// AddComHeal ( j , i ) ;
12233: LD_VAR 0 15
12237: PPUSH
12238: LD_VAR 0 14
12242: PPUSH
12243: CALL_OW 188
12247: GO 12230
12249: POP
12250: POP
// end ;
12251: GO 12203
12253: POP
12254: POP
// end ; end ; for i in soldiersOK_list do
12255: LD_ADDR_VAR 0 14
12259: PUSH
12260: LD_VAR 0 19
12264: PUSH
12265: FOR_IN
12266: IFFALSE 12442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12268: LD_ADDR_VAR 0 22
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_VAR 0 11
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: PPUSH
12290: LD_VAR 0 14
12294: PPUSH
12295: CALL_OW 74
12299: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12300: LD_ADDR_VAR 0 23
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 11
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 59
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: LD_INT 21
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: PPUSH
12359: CALL_OW 69
12363: PPUSH
12364: LD_VAR 0 14
12368: PPUSH
12369: CALL_OW 74
12373: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12374: LD_VAR 0 14
12378: PPUSH
12379: LD_VAR 0 22
12383: PPUSH
12384: CALL_OW 296
12388: PUSH
12389: LD_INT 8
12391: PLUS
12392: PUSH
12393: LD_VAR 0 14
12397: PPUSH
12398: LD_VAR 0 23
12402: PPUSH
12403: CALL_OW 296
12407: LESS
12408: IFFALSE 12426
// begin ComAttackUnit ( i , target1 ) ;
12410: LD_VAR 0 14
12414: PPUSH
12415: LD_VAR 0 22
12419: PPUSH
12420: CALL_OW 115
// end else
12424: GO 12440
// begin ComAttackUnit ( i , target2 ) ;
12426: LD_VAR 0 14
12430: PPUSH
12431: LD_VAR 0 23
12435: PPUSH
12436: CALL_OW 115
// end ; end ;
12440: GO 12265
12442: POP
12443: POP
// for i in soldiersOK_list do
12444: LD_ADDR_VAR 0 14
12448: PUSH
12449: LD_VAR 0 19
12453: PUSH
12454: FOR_IN
12455: IFFALSE 12631
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12457: LD_ADDR_VAR 0 22
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_VAR 0 11
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: PPUSH
12479: LD_VAR 0 14
12483: PPUSH
12484: CALL_OW 74
12488: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12489: LD_ADDR_VAR 0 23
12493: PUSH
12494: LD_INT 22
12496: PUSH
12497: LD_VAR 0 11
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 59
12511: PUSH
12512: EMPTY
12513: LIST
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 21
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PPUSH
12553: LD_VAR 0 14
12557: PPUSH
12558: CALL_OW 74
12562: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12563: LD_VAR 0 14
12567: PPUSH
12568: LD_VAR 0 22
12572: PPUSH
12573: CALL_OW 296
12577: PUSH
12578: LD_INT 8
12580: PLUS
12581: PUSH
12582: LD_VAR 0 14
12586: PPUSH
12587: LD_VAR 0 23
12591: PPUSH
12592: CALL_OW 296
12596: LESS
12597: IFFALSE 12615
// begin ComAttackUnit ( i , target1 ) ;
12599: LD_VAR 0 14
12603: PPUSH
12604: LD_VAR 0 22
12608: PPUSH
12609: CALL_OW 115
// end else
12613: GO 12629
// begin ComAttackUnit ( i , target2 ) ;
12615: LD_VAR 0 14
12619: PPUSH
12620: LD_VAR 0 23
12624: PPUSH
12625: CALL_OW 115
// end ; end ;
12629: GO 12454
12631: POP
12632: POP
// until soldiersOK_list = [ ] ;
12633: LD_VAR 0 19
12637: PUSH
12638: EMPTY
12639: EQUAL
12640: IFFALSE 12018
// end ; end ; end_of_file
12642: LD_VAR 0 13
12646: RET
// every 0 0$01 do
12647: GO 12649
12649: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12650: LD_INT 22
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 2
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: PUSH
12679: LD_INT 0
12681: EQUAL
12682: IFFALSE 12696
// SetClass ( JMM , 2 ) ;
12684: LD_EXP 1
12688: PPUSH
12689: LD_INT 2
12691: PPUSH
12692: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12696: LD_STRING M1
12698: PPUSH
12699: CALL_OW 337
// case difficulty of 1 :
12703: LD_OWVAR 67
12707: PUSH
12708: LD_INT 1
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12726
12716: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12717: LD_STRING M1-1
12719: PPUSH
12720: CALL_OW 337
12724: GO 12763
12726: LD_INT 2
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12744
12734: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12735: LD_STRING M1-2
12737: PPUSH
12738: CALL_OW 337
12742: GO 12763
12744: LD_INT 3
12746: DOUBLE
12747: EQUAL
12748: IFTRUE 12752
12750: GO 12762
12752: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12753: LD_STRING M1-3
12755: PPUSH
12756: CALL_OW 337
12760: GO 12763
12762: POP
// ChangeMissionObjectives ( M1cont ) ;
12763: LD_STRING M1cont
12765: PPUSH
12766: CALL_OW 337
// wait ( 0 0$2 ) ;
12770: LD_INT 70
12772: PPUSH
12773: CALL_OW 67
// SaveForQuickRestart ;
12777: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12781: LD_INT 525
12783: PPUSH
12784: LD_INT 700
12786: PPUSH
12787: CALL_OW 12
12791: PPUSH
12792: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12796: LD_INT 5
12798: PPUSH
12799: LD_INT 82
12801: PPUSH
12802: LD_INT 38
12804: PPUSH
12805: LD_INT 10
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: CALL_OW 56
// wait ( 0 0$14 ) ;
12815: LD_INT 490
12817: PPUSH
12818: CALL_OW 67
// firstCrateSpawn := true ;
12822: LD_ADDR_EXP 41
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// end ;
12830: END
// every 0 0$02 trigger firstCrateSpawn do
12831: LD_EXP 41
12835: IFFALSE 13198
12837: GO 12839
12839: DISABLE
// begin if IsOk ( Lisa ) then
12840: LD_EXP 2
12844: PPUSH
12845: CALL_OW 302
12849: IFFALSE 12865
// Say ( Lisa , DR0-Lisa-1 ) else
12851: LD_EXP 2
12855: PPUSH
12856: LD_STRING DR0-Lisa-1
12858: PPUSH
12859: CALL_OW 88
12863: GO 13011
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12865: LD_INT 22
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 26
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: LD_INT 25
12900: PUSH
12901: LD_INT 1
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 25
12910: PUSH
12911: LD_INT 2
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 4
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: PUSH
12956: LD_EXP 1
12960: PUSH
12961: LD_EXP 8
12965: PUSH
12966: LD_EXP 5
12970: PUSH
12971: LD_EXP 6
12975: PUSH
12976: LD_EXP 7
12980: PUSH
12981: LD_EXP 4
12985: PUSH
12986: LD_EXP 3
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: DIFF
13000: PPUSH
13001: LD_STRING DR0-Sol1-1
13003: PPUSH
13004: LD_STRING DR0-Sol1-1
13006: PPUSH
13007: CALL 6267 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13011: LD_INT 22
13013: PUSH
13014: LD_INT 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 21
13023: PUSH
13024: LD_INT 1
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 26
13033: PUSH
13034: LD_INT 1
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 2
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 3
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 25
13076: PUSH
13077: LD_INT 4
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 69
13101: PUSH
13102: LD_EXP 1
13106: PUSH
13107: LD_EXP 8
13111: PUSH
13112: LD_EXP 5
13116: PUSH
13117: LD_EXP 2
13121: PUSH
13122: LD_EXP 6
13126: PUSH
13127: LD_EXP 7
13131: PUSH
13132: LD_EXP 4
13136: PUSH
13137: LD_EXP 3
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: DIFF
13152: PPUSH
13153: LD_STRING DR0-Sol2-1
13155: PPUSH
13156: LD_STRING DR0-Sol2-1
13158: PPUSH
13159: CALL 6267 0 3
// if IsOk ( Cyrus ) then
13163: LD_EXP 4
13167: PPUSH
13168: CALL_OW 302
13172: IFFALSE 13186
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13174: LD_EXP 4
13178: PPUSH
13179: LD_STRING DR0-Cyrus-1
13181: PPUSH
13182: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13186: LD_EXP 1
13190: PPUSH
13191: LD_STRING DR0-JMM-1
13193: PPUSH
13194: CALL_OW 88
// end ;
13198: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13199: LD_EXP 5
13203: PPUSH
13204: CALL_OW 302
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 1
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 25
13221: PUSH
13222: LD_INT 16
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 69
13237: PUSH
13238: LD_INT 0
13240: GREATER
13241: AND
13242: PUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 463
13250: NOT
13251: AND
13252: IFFALSE 13530
13254: GO 13256
13256: DISABLE
// begin DialogueOn ;
13257: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13261: LD_EXP 5
13265: PPUSH
13266: LD_STRING D10-Frank-1
13268: PPUSH
13269: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13273: LD_INT 22
13275: PUSH
13276: LD_INT 1
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 21
13285: PUSH
13286: LD_INT 1
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: LD_INT 25
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 2
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 3
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 25
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: PPUSH
13348: CALL_OW 69
13352: PUSH
13353: LD_EXP 1
13357: PUSH
13358: LD_EXP 5
13362: PUSH
13363: LD_EXP 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: DIFF
13373: PPUSH
13374: LD_STRING D10-Sol1-1
13376: PPUSH
13377: LD_STRING D10-FSol1-1
13379: PPUSH
13380: CALL 6267 0 3
// Say ( Frank , D10-Frank-2 ) ;
13384: LD_EXP 5
13388: PPUSH
13389: LD_STRING D10-Frank-2
13391: PPUSH
13392: CALL_OW 88
// if IsOK ( Lisa ) then
13396: LD_EXP 2
13400: PPUSH
13401: CALL_OW 302
13405: IFFALSE 13421
// begin Say ( Lisa , D10-Lisa-2 ) ;
13407: LD_EXP 2
13411: PPUSH
13412: LD_STRING D10-Lisa-2
13414: PPUSH
13415: CALL_OW 88
// end else
13419: GO 13526
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13421: LD_INT 22
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 1
13505: PUSH
13506: LD_EXP 5
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: DIFF
13515: PPUSH
13516: LD_STRING D10-Sol1-2
13518: PPUSH
13519: LD_STRING D10-FSol1-2
13521: PPUSH
13522: CALL 6267 0 3
// end ; DialogueOff ;
13526: CALL_OW 7
// end ;
13530: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13531: LD_INT 1
13533: PPUSH
13534: CALL_OW 463
13538: NOT
13539: IFFALSE 13834
13541: GO 13543
13543: DISABLE
// begin HarrisonSupport ;
13544: CALL 2554 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13548: LD_EXP 17
13552: PPUSH
13553: CALL_OW 310
13557: PPUSH
13558: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13562: LD_EXP 17
13566: PPUSH
13567: LD_STRING DEng-Eng1-1
13569: PPUSH
13570: CALL_OW 88
// wait ( 1 1$0 ) ;
13574: LD_INT 2100
13576: PPUSH
13577: CALL_OW 67
// DialogueOn ;
13581: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13585: LD_EXP 14
13589: PPUSH
13590: LD_STRING DRem-Har-1
13592: PPUSH
13593: CALL_OW 94
// if contactWithRussian = 1 then
13597: LD_EXP 22
13601: PUSH
13602: LD_INT 1
13604: EQUAL
13605: IFFALSE 13621
// begin Say ( JMM , DRem-JMM-1 ) ;
13607: LD_EXP 1
13611: PPUSH
13612: LD_STRING DRem-JMM-1
13614: PPUSH
13615: CALL_OW 88
// end else
13619: GO 13633
// begin Say ( JMM , DRem-JMM-1a ) ;
13621: LD_EXP 1
13625: PPUSH
13626: LD_STRING DRem-JMM-1a
13628: PPUSH
13629: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13633: LD_EXP 14
13637: PPUSH
13638: LD_STRING DRem-Har-2
13640: PPUSH
13641: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13645: LD_STRING DenisInDelta
13647: PPUSH
13648: LD_INT 0
13650: PPUSH
13651: CALL_OW 30
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13675
// begin Say ( JMM , DRem-JMM-2 ) ;
13661: LD_EXP 1
13665: PPUSH
13666: LD_STRING DRem-JMM-2
13668: PPUSH
13669: CALL_OW 88
// end else
13673: GO 13687
// begin Say ( JMM , DRem-JMM-2a ) ;
13675: LD_EXP 1
13679: PPUSH
13680: LD_STRING DRem-JMM-2a
13682: PPUSH
13683: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13687: LD_EXP 14
13691: PPUSH
13692: LD_STRING DRem-Har-3
13694: PPUSH
13695: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13699: LD_EXP 1
13703: PPUSH
13704: LD_STRING DRem-JMM-3
13706: PPUSH
13707: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13711: LD_EXP 14
13715: PPUSH
13716: LD_STRING DRem-Har-4
13718: PPUSH
13719: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13723: LD_STRING DenisInDelta
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 30
13733: PUSH
13734: LD_INT 1
13736: EQUAL
13737: IFFALSE 13797
// begin Say ( JMM , DRem-JMM-4 ) ;
13739: LD_EXP 1
13743: PPUSH
13744: LD_STRING DRem-JMM-4
13746: PPUSH
13747: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13751: LD_EXP 14
13755: PPUSH
13756: LD_STRING DRem-Har-5
13758: PPUSH
13759: CALL_OW 94
// DialogueOff ;
13763: CALL_OW 7
// wait ( 4 4$00 ) ;
13767: LD_INT 8400
13769: PPUSH
13770: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13774: LD_INT 35
13776: PPUSH
13777: CALL_OW 67
// until not InBattle ( 1 ) ;
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 463
13788: NOT
13789: IFFALSE 13774
// SpawnDenis ;
13791: CALL 13835 0 0
// end else
13795: GO 13834
// begin DialogueOff ;
13797: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13801: LD_INT 36
13803: PPUSH
13804: LD_INT 1
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13814: LD_INT 15
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13827: LD_STRING MR
13829: PPUSH
13830: CALL_OW 337
// end ; end ;
13834: END
// export function SpawnDenis ; var tmp ; begin
13835: LD_INT 0
13837: PPUSH
13838: PPUSH
// PrepareDenis ;
13839: CALL 2271 0 0
// CenterNowOnUnits ( Denis ) ;
13843: LD_EXP 9
13847: PPUSH
13848: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13872: LD_EXP 9
13876: PPUSH
13877: LD_VAR 0 2
13881: PPUSH
13882: LD_EXP 9
13886: PPUSH
13887: CALL_OW 74
13891: PPUSH
13892: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13896: LD_INT 35
13898: PPUSH
13899: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13903: LD_INT 22
13905: PUSH
13906: LD_INT 1
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 91
13915: PUSH
13916: LD_EXP 9
13920: PUSH
13921: LD_INT 10
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 69
13937: IFFALSE 13896
// SetSide ( Denis , 1 ) ;
13939: LD_EXP 9
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 235
// DialogueOn ;
13951: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13955: LD_EXP 9
13959: PPUSH
13960: LD_STRING DDen-Den-1
13962: PPUSH
13963: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13967: LD_EXP 1
13971: PPUSH
13972: LD_STRING DDen-JMM-1
13974: PPUSH
13975: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13979: LD_EXP 9
13983: PPUSH
13984: LD_STRING DDen-Den-2
13986: PPUSH
13987: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13991: LD_EXP 1
13995: PPUSH
13996: LD_STRING DDen-JMM-2
13998: PPUSH
13999: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14003: LD_EXP 9
14007: PPUSH
14008: LD_STRING DDen-Den-3
14010: PPUSH
14011: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14015: LD_EXP 1
14019: PPUSH
14020: LD_STRING DDen-JMM-3
14022: PPUSH
14023: CALL_OW 88
// DialogueOff ;
14027: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14031: LD_INT 36
14033: PPUSH
14034: LD_INT 1
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14044: LD_INT 15
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: LD_INT 1
14052: PPUSH
14053: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14057: LD_STRING MR
14059: PPUSH
14060: CALL_OW 337
// end ;
14064: LD_VAR 0 1
14068: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14069: CALL 14124 0 0
14073: PUSH
14074: LD_EXP 9
14078: PPUSH
14079: CALL_OW 302
14083: AND
14084: PUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 463
14092: NOT
14093: AND
14094: IFFALSE 14123
14096: GO 14098
14098: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14099: LD_EXP 9
14103: PPUSH
14104: LD_STRING DR1-Den-1
14106: PPUSH
14107: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14111: LD_EXP 1
14115: PPUSH
14116: LD_STRING DR1-JMM-1
14118: PPUSH
14119: CALL_OW 88
// end ;
14123: END
// function CheckOptoLab ; var i ; begin
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// result = false ;
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14136: LD_ADDR_VAR 0 2
14140: PUSH
14141: LD_INT 22
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 30
14156: PUSH
14157: LD_INT 7
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 8
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: PUSH
14188: FOR_IN
14189: IFFALSE 14241
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 268
14203: PUSH
14204: LD_INT 15
14206: EQUAL
14207: PUSH
14208: LD_VAR 0 2
14212: PPUSH
14213: LD_INT 2
14215: PPUSH
14216: CALL_OW 268
14220: PUSH
14221: LD_INT 15
14223: EQUAL
14224: OR
14225: IFFALSE 14237
// begin result = true ;
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: LD_INT 1
14234: ST_TO_ADDR
// break ;
14235: GO 14241
// end ; break ;
14237: GO 14241
// end ;
14239: GO 14188
14241: POP
14242: POP
// end ;
14243: LD_VAR 0 1
14247: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14248: LD_INT 15
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 321
14258: PUSH
14259: LD_INT 2
14261: EQUAL
14262: PUSH
14263: LD_EXP 9
14267: PPUSH
14268: CALL_OW 302
14272: AND
14273: PUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 463
14281: NOT
14282: AND
14283: IFFALSE 14515
14285: GO 14287
14287: DISABLE
// begin DialogueOn ;
14288: CALL_OW 6
// if IsOK ( Denis ) then
14292: LD_EXP 9
14296: PPUSH
14297: CALL_OW 302
14301: IFFALSE 14317
// begin Say ( Denis , DR2-Den-1 ) ;
14303: LD_EXP 9
14307: PPUSH
14308: LD_STRING DR2-Den-1
14310: PPUSH
14311: CALL_OW 88
// end else
14315: GO 14376
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14317: LD_INT 22
14319: PUSH
14320: LD_INT 1
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 4
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: PUSH
14357: LD_EXP 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: DIFF
14365: PPUSH
14366: LD_STRING DR2-Sci1-1
14368: PPUSH
14369: LD_STRING DR2-FSci1-1
14371: PPUSH
14372: CALL 6267 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14376: LD_EXP 1
14380: PPUSH
14381: LD_STRING DR2-JMM-1
14383: PPUSH
14384: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14388: LD_INT 22
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 1
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 25
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 25
14433: PUSH
14434: LD_INT 3
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 4
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: PUSH
14468: LD_EXP 1
14472: PUSH
14473: LD_EXP 9
14477: PUSH
14478: LD_EXP 8
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: DIFF
14488: PPUSH
14489: LD_STRING DR2-Sol1-1
14491: PPUSH
14492: LD_STRING DR2-Sol1-11
14494: PPUSH
14495: CALL 6267 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14499: LD_EXP 1
14503: PPUSH
14504: LD_STRING DR2-JMM-2
14506: PPUSH
14507: CALL_OW 88
// DialogueOff ;
14511: CALL_OW 7
// end ;
14515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14516: LD_INT 22
14518: PUSH
14519: LD_INT 1
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 30
14528: PUSH
14529: LD_INT 36
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: PUSH
14549: LD_INT 22
14551: PUSH
14552: LD_INT 1
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 33
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: PUSH
14589: LD_INT 0
14591: GREATER
14592: AND
14593: PUSH
14594: LD_EXP 23
14598: PUSH
14599: LD_INT 0
14601: EQUAL
14602: AND
14603: PUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 463
14611: NOT
14612: AND
14613: IFFALSE 14750
14615: GO 14617
14617: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14618: LD_INT 22
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 21
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 26
14650: PUSH
14651: LD_INT 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PPUSH
14664: CALL_OW 69
14668: PUSH
14669: LD_EXP 1
14673: PUSH
14674: LD_EXP 6
14678: PUSH
14679: LD_EXP 7
14683: PUSH
14684: LD_EXP 9
14688: PUSH
14689: LD_EXP 15
14693: PUSH
14694: LD_EXP 3
14698: PUSH
14699: LD_EXP 4
14703: PUSH
14704: LD_EXP 2
14708: PUSH
14709: LD_EXP 5
14713: PUSH
14714: LD_EXP 8
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: DIFF
14731: PPUSH
14732: LD_STRING D3a-Mech1-1
14734: PPUSH
14735: LD_STRING D3a-Mech1-1
14737: PPUSH
14738: CALL 6267 0 3
// firstTower = 2 ;
14742: LD_ADDR_EXP 23
14746: PUSH
14747: LD_INT 2
14749: ST_TO_ADDR
// end ;
14750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14751: LD_INT 22
14753: PUSH
14754: LD_INT 3
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 21
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: PUSH
14780: LD_INT 0
14782: EQUAL
14783: IFFALSE 14898
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 25
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 25
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 25
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 4
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: FOR_IN
14877: IFFALSE 14896
// AddExperience ( i , 1 , 10000 ) ;
14879: LD_VAR 0 1
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: LD_INT 10000
14889: PPUSH
14890: CALL_OW 492
14894: GO 14876
14896: POP
14897: POP
// end ;
14898: PPOPN 1
14900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14901: LD_INT 22
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 30
14913: PUSH
14914: LD_INT 36
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: LD_INT 0
14932: GREATER
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 21
14946: PUSH
14947: LD_INT 2
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 33
14956: PUSH
14957: LD_INT 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: PUSH
14974: LD_INT 0
14976: GREATER
14977: AND
14978: PUSH
14979: CALL 15571 0 0
14983: AND
14984: PUSH
14985: LD_INT 1
14987: PPUSH
14988: CALL_OW 463
14992: NOT
14993: AND
14994: IFFALSE 15568
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15006: LD_ADDR_VAR 0 3
15010: PUSH
15011: LD_INT 22
15013: PUSH
15014: LD_INT 1
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 30
15023: PUSH
15024: LD_INT 36
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 21
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 33
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: LIST
15079: PPUSH
15080: CALL_OW 69
15084: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15085: LD_ADDR_VAR 0 5
15089: PUSH
15090: EMPTY
15091: ST_TO_ADDR
// for i in tmpControlTowers do
15092: LD_ADDR_VAR 0 1
15096: PUSH
15097: LD_VAR 0 3
15101: PUSH
15102: FOR_IN
15103: IFFALSE 15566
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15105: LD_EXP 1
15109: PPUSH
15110: CALL_OW 310
15114: PUSH
15115: LD_VAR 0 1
15119: EQUAL
15120: PUSH
15121: LD_EXP 1
15125: PPUSH
15126: CALL_OW 257
15130: PUSH
15131: LD_INT 3
15133: EQUAL
15134: AND
15135: IFFALSE 15265
// begin InGameOn ;
15137: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15141: LD_VAR 0 4
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15154: LD_EXP 1
15158: PPUSH
15159: LD_STRING D4a-JMM-1
15161: PPUSH
15162: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15166: LD_VAR 0 4
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: PPUSH
15175: LD_EXP 1
15179: PPUSH
15180: CALL_OW 53
// wait ( 0 0$1 ) ;
15184: LD_INT 35
15186: PPUSH
15187: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15191: LD_VAR 0 4
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PPUSH
15200: LD_VAR 0 4
15204: PUSH
15205: LD_INT 1
15207: ARRAY
15208: PPUSH
15209: CALL_OW 250
15213: PUSH
15214: LD_INT 3
15216: PLUS
15217: PPUSH
15218: LD_VAR 0 4
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 251
15231: PUSH
15232: LD_INT 2
15234: MINUS
15235: PPUSH
15236: CALL_OW 111
// wait ( 0 0$2 ) ;
15240: LD_INT 70
15242: PPUSH
15243: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15247: LD_EXP 1
15251: PPUSH
15252: LD_STRING D4b-JMM-1
15254: PPUSH
15255: CALL_OW 88
// InGameOff ;
15259: CALL_OW 9
// end else
15263: GO 15564
// begin InGameOn ;
15265: CALL_OW 8
// for j in UnitsInside ( i ) do
15269: LD_ADDR_VAR 0 2
15273: PUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 313
15283: PUSH
15284: FOR_IN
15285: IFFALSE 15320
// if GetClass ( j ) = 3 then
15287: LD_VAR 0 2
15291: PPUSH
15292: CALL_OW 257
15296: PUSH
15297: LD_INT 3
15299: EQUAL
15300: IFFALSE 15318
// tmpMechanicInside = tmpMechanicInside ^ j ;
15302: LD_ADDR_VAR 0 5
15306: PUSH
15307: LD_VAR 0 5
15311: PUSH
15312: LD_VAR 0 2
15316: ADD
15317: ST_TO_ADDR
15318: GO 15284
15320: POP
15321: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15322: LD_VAR 0 5
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 258
15335: PUSH
15336: LD_INT 1
15338: EQUAL
15339: IFFALSE 15357
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15341: LD_VAR 0 5
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_STRING D4a-Mech1-1
15352: PPUSH
15353: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15357: LD_VAR 0 5
15361: PUSH
15362: LD_INT 1
15364: ARRAY
15365: PPUSH
15366: CALL_OW 258
15370: PUSH
15371: LD_INT 2
15373: EQUAL
15374: IFFALSE 15392
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15376: LD_VAR 0 5
15380: PUSH
15381: LD_INT 1
15383: ARRAY
15384: PPUSH
15385: LD_STRING D4a-FMech1-1
15387: PPUSH
15388: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15392: LD_VAR 0 4
15396: PUSH
15397: LD_INT 1
15399: ARRAY
15400: PPUSH
15401: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15405: LD_VAR 0 4
15409: PUSH
15410: LD_INT 1
15412: ARRAY
15413: PPUSH
15414: LD_VAR 0 5
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 53
// wait ( 0 0$1 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15434: LD_VAR 0 4
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: LD_VAR 0 4
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: CALL_OW 250
15456: PUSH
15457: LD_INT 3
15459: PLUS
15460: PPUSH
15461: LD_VAR 0 4
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: CALL_OW 251
15474: PUSH
15475: LD_INT 2
15477: MINUS
15478: PPUSH
15479: CALL_OW 111
// wait ( 0 0$2 ) ;
15483: LD_INT 70
15485: PPUSH
15486: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15490: LD_VAR 0 5
15494: PUSH
15495: LD_INT 1
15497: ARRAY
15498: PPUSH
15499: CALL_OW 258
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: IFFALSE 15525
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15509: LD_VAR 0 5
15513: PUSH
15514: LD_INT 1
15516: ARRAY
15517: PPUSH
15518: LD_STRING D4b-Mech1-1
15520: PPUSH
15521: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15525: LD_VAR 0 5
15529: PUSH
15530: LD_INT 1
15532: ARRAY
15533: PPUSH
15534: CALL_OW 258
15538: PUSH
15539: LD_INT 2
15541: EQUAL
15542: IFFALSE 15560
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15544: LD_VAR 0 5
15548: PUSH
15549: LD_INT 1
15551: ARRAY
15552: PPUSH
15553: LD_STRING D4b-FMech1-1
15555: PPUSH
15556: CALL_OW 88
// InGameOff ;
15560: CALL_OW 9
// end ; end ;
15564: GO 15102
15566: POP
15567: POP
// end ;
15568: PPOPN 5
15570: END
// function CheckMehInside ; var i , j ; begin
15571: LD_INT 0
15573: PPUSH
15574: PPUSH
15575: PPUSH
// result = false ;
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15584: LD_ADDR_VAR 0 2
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 30
15601: PUSH
15602: LD_INT 36
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: PUSH
15618: FOR_IN
15619: IFFALSE 15670
// begin for j in UnitsInside ( i ) do
15621: LD_ADDR_VAR 0 3
15625: PUSH
15626: LD_VAR 0 2
15630: PPUSH
15631: CALL_OW 313
15635: PUSH
15636: FOR_IN
15637: IFFALSE 15666
// begin if GetClass ( j ) = 3 then
15639: LD_VAR 0 3
15643: PPUSH
15644: CALL_OW 257
15648: PUSH
15649: LD_INT 3
15651: EQUAL
15652: IFFALSE 15664
// begin result = true ;
15654: LD_ADDR_VAR 0 1
15658: PUSH
15659: LD_INT 1
15661: ST_TO_ADDR
// break ;
15662: GO 15666
// end ; end ;
15664: GO 15636
15666: POP
15667: POP
// end ;
15668: GO 15618
15670: POP
15671: POP
// end ;
15672: LD_VAR 0 1
15676: RET
// every 12 12$0 do
15677: GO 15679
15679: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15680: LD_INT 35
15682: PPUSH
15683: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 463
15694: NOT
15695: PUSH
15696: LD_INT 32
15698: PPUSH
15699: LD_INT 81
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PPUSH
15709: CALL_OW 70
15713: NOT
15714: AND
15715: IFFALSE 15680
// PrepareKurt ;
15717: CALL 19318 0 0
// end ;
15721: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15722: LD_EXP 15
15726: PPUSH
15727: CALL_OW 302
15731: PUSH
15732: LD_EXP 15
15736: PPUSH
15737: CALL_OW 255
15741: PUSH
15742: LD_INT 1
15744: EQUAL
15745: AND
15746: PUSH
15747: LD_EXP 2
15751: AND
15752: IFFALSE 15917
15754: GO 15756
15756: DISABLE
// begin wait ( 0 0$50 ) ;
15757: LD_INT 1750
15759: PPUSH
15760: CALL_OW 67
// if not IsOk ( Joan ) then
15764: LD_EXP 15
15768: PPUSH
15769: CALL_OW 302
15773: NOT
15774: IFFALSE 15778
// exit ;
15776: GO 15917
// if IsOK ( Lisa ) then
15778: LD_EXP 2
15782: PPUSH
15783: CALL_OW 302
15787: IFFALSE 15917
// begin DialogueOn ;
15789: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15793: LD_EXP 2
15797: PPUSH
15798: LD_STRING D7-Lisa-1
15800: PPUSH
15801: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15805: LD_EXP 1
15809: PPUSH
15810: LD_STRING D7-JMM-1
15812: PPUSH
15813: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15817: LD_EXP 2
15821: PPUSH
15822: LD_STRING D7-Lisa-2
15824: PPUSH
15825: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15829: LD_EXP 1
15833: PPUSH
15834: LD_STRING D7-JMM-2
15836: PPUSH
15837: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15841: LD_EXP 2
15845: PPUSH
15846: LD_STRING D7-Lisa-3
15848: PPUSH
15849: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15853: LD_EXP 1
15857: PPUSH
15858: LD_STRING D7-JMM-3
15860: PPUSH
15861: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15865: LD_EXP 2
15869: PPUSH
15870: LD_STRING D7-Lisa-4
15872: PPUSH
15873: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15877: LD_EXP 1
15881: PPUSH
15882: LD_STRING D7-JMM-4
15884: PPUSH
15885: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15889: LD_EXP 1
15893: PPUSH
15894: LD_STRING D7-JMM-4a
15896: PPUSH
15897: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15901: LD_EXP 2
15905: PPUSH
15906: LD_STRING D7-Lisa-5
15908: PPUSH
15909: CALL_OW 88
// DialogueOff ;
15913: CALL_OW 7
// end ; end ;
15917: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15918: LD_EXP 13
15922: PUSH
15923: LD_INT 22
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 91
15935: PUSH
15936: LD_EXP 13
15940: PUSH
15941: LD_INT 10
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: LD_INT 25
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 25
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 25
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 25
15984: PUSH
15985: LD_INT 4
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: PUSH
16009: LD_INT 1
16011: GREATER
16012: AND
16013: IFFALSE 16030
16015: GO 16017
16017: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16018: LD_EXP 13
16022: PPUSH
16023: LD_STRING D5-Sol1-1
16025: PPUSH
16026: CALL_OW 88
// end ;
16030: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16031: LD_INT 22
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 33
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 69
16059: PUSH
16060: LD_INT 2
16062: GREATEREQUAL
16063: IFFALSE 16083
16065: GO 16067
16067: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16068: LD_STRING MRa
16070: PPUSH
16071: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16075: LD_ADDR_EXP 28
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// end ;
16083: END
// every 2 2$00 do var i , last ;
16084: GO 16086
16086: DISABLE
16087: LD_INT 0
16089: PPUSH
16090: PPUSH
// begin last := 8 ;
16091: LD_ADDR_VAR 0 2
16095: PUSH
16096: LD_INT 8
16098: ST_TO_ADDR
// for i = 1 to last do
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: DOUBLE
16105: LD_INT 1
16107: DEC
16108: ST_TO_ADDR
16109: LD_VAR 0 2
16113: PUSH
16114: FOR_TO
16115: IFFALSE 16143
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16117: LD_INT 6300
16119: PPUSH
16120: LD_INT 12600
16122: PPUSH
16123: CALL_OW 12
16127: PPUSH
16128: CALL_OW 67
// PrepareRandoms ( i ) ;
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL 4173 0 1
// end ;
16141: GO 16114
16143: POP
16144: POP
// end ;
16145: PPOPN 2
16147: END
// every 5 5$20 do
16148: GO 16150
16150: DISABLE
// begin DialogueOn ;
16151: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16155: LD_EXP 10
16159: PPUSH
16160: LD_STRING D12a-Sci-1
16162: PPUSH
16163: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16167: LD_EXP 1
16171: PPUSH
16172: LD_STRING D12a-JMM-1
16174: PPUSH
16175: CALL_OW 88
// DialogueOff ;
16179: CALL_OW 7
// cratesStatus = 1 ;
16183: LD_ADDR_EXP 38
16187: PUSH
16188: LD_INT 1
16190: ST_TO_ADDR
// end ;
16191: END
// every 13 13$0 do
16192: GO 16194
16194: DISABLE
// begin DialogueOn ;
16195: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16199: LD_EXP 10
16203: PPUSH
16204: LD_STRING D12b-Sci-1
16206: PPUSH
16207: CALL_OW 94
// DialogueOff ;
16211: CALL_OW 7
// cratesStatus = 2 ;
16215: LD_ADDR_EXP 38
16219: PUSH
16220: LD_INT 2
16222: ST_TO_ADDR
// end ;
16223: END
// every 32 32$0 do
16224: GO 16226
16226: DISABLE
// begin DialogueOn ;
16227: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16231: LD_EXP 10
16235: PPUSH
16236: LD_STRING D12c-Sci-1
16238: PPUSH
16239: CALL_OW 94
// DialogueOff ;
16243: CALL_OW 7
// wait ( 3 3$0 ) ;
16247: LD_INT 6300
16249: PPUSH
16250: CALL_OW 67
// DialogueOn ;
16254: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16258: LD_EXP 10
16262: PPUSH
16263: LD_STRING D12d-Sci-1
16265: PPUSH
16266: CALL_OW 94
// DialogueOff ;
16270: CALL_OW 7
// cratesStatus = 1 ;
16274: LD_ADDR_EXP 38
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16282: LD_INT 1400
16284: PPUSH
16285: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16289: LD_INT 35
16291: PPUSH
16292: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16296: LD_INT 1
16298: PPUSH
16299: CALL_OW 463
16303: NOT
16304: PUSH
16305: LD_INT 32
16307: PPUSH
16308: LD_INT 81
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PPUSH
16318: CALL_OW 70
16322: NOT
16323: AND
16324: IFFALSE 16289
// PrepareJoan ;
16326: CALL 3072 0 0
// end ;
16330: END
// every 42 42$0 do
16331: GO 16333
16333: DISABLE
// begin DialogueOn ;
16334: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16338: LD_EXP 10
16342: PPUSH
16343: LD_STRING D12e-Sci-1
16345: PPUSH
16346: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16350: LD_EXP 1
16354: PPUSH
16355: LD_STRING D12e-JMM-1
16357: PPUSH
16358: CALL_OW 88
// DialogueOff ;
16362: CALL_OW 7
// cratesStatus = 2 ;
16366: LD_ADDR_EXP 38
16370: PUSH
16371: LD_INT 2
16373: ST_TO_ADDR
// end ;
16374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16375: LD_INT 22
16377: PUSH
16378: LD_INT 6
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 21
16387: PUSH
16388: LD_INT 2
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 34
16397: PUSH
16398: LD_INT 51
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: PUSH
16415: LD_INT 0
16417: GREATER
16418: IFFALSE 16501
16420: GO 16422
16422: DISABLE
16423: LD_INT 0
16425: PPUSH
// begin enable ;
16426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: PUSH
16479: FOR_IN
16480: IFFALSE 16499
// ComAgressiveMove ( i , 138 , 168 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_INT 138
16489: PPUSH
16490: LD_INT 168
16492: PPUSH
16493: CALL_OW 114
16497: GO 16479
16499: POP
16500: POP
// end ;
16501: PPOPN 1
16503: END
// every 0 0$1 do var i ;
16504: GO 16506
16506: DISABLE
16507: LD_INT 0
16509: PPUSH
// begin enable ;
16510: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_INT 4
16518: PPUSH
16519: LD_INT 2
16521: PUSH
16522: LD_INT 22
16524: PUSH
16525: LD_INT 3
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_INT 6
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: PPUSH
16550: CALL_OW 70
16554: PUSH
16555: FOR_IN
16556: IFFALSE 16620
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16558: LD_INT 4
16560: PPUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 6
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 34
16573: PUSH
16574: LD_INT 51
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 70
16589: PUSH
16590: LD_INT 0
16592: GREATER
16593: IFFALSE 16609
// sendedConvoys = sendedConvoys + 1 ;
16595: LD_ADDR_EXP 39
16599: PUSH
16600: LD_EXP 39
16604: PUSH
16605: LD_INT 1
16607: PLUS
16608: ST_TO_ADDR
// RemoveUnit ( i ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 64
// end ;
16618: GO 16555
16620: POP
16621: POP
// end ; end_of_file
16622: PPOPN 1
16624: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16625: LD_VAR 0 1
16629: PUSH
16630: LD_INT 1
16632: EQUAL
16633: PUSH
16634: LD_VAR 0 2
16638: PUSH
16639: LD_INT 3
16641: EQUAL
16642: AND
16643: IFFALSE 16653
// contactWithRussian = 1 ;
16645: LD_ADDR_EXP 22
16649: PUSH
16650: LD_INT 1
16652: ST_TO_ADDR
// end ;
16653: PPOPN 2
16655: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 266
16665: PUSH
16666: LD_INT 36
16668: EQUAL
16669: PUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 255
16679: PUSH
16680: LD_INT 1
16682: EQUAL
16683: AND
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: LD_INT 1
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 21
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 33
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: AND
16729: PUSH
16730: LD_EXP 23
16734: PUSH
16735: LD_INT 0
16737: EQUAL
16738: AND
16739: IFFALSE 16819
// begin firstTower = 1 ;
16741: LD_ADDR_EXP 23
16745: PUSH
16746: LD_INT 1
16748: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16749: LD_INT 22
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 21
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 25
16771: PUSH
16772: LD_INT 3
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 26
16781: PUSH
16782: LD_INT 1
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: PUSH
16800: LD_EXP 1
16804: PUSH
16805: EMPTY
16806: LIST
16807: DIFF
16808: PPUSH
16809: LD_STRING D3b-Mech1-1
16811: PPUSH
16812: LD_STRING D3b-Mech1-1
16814: PPUSH
16815: CALL 6267 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 266
16828: PUSH
16829: LD_INT 0
16831: EQUAL
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 255
16842: PUSH
16843: LD_INT 1
16845: EQUAL
16846: AND
16847: IFFALSE 16861
// SetBName ( building , theta ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_STRING theta
16856: PPUSH
16857: CALL_OW 500
// if GetSide ( building ) = 3 then
16861: LD_VAR 0 1
16865: PPUSH
16866: CALL_OW 255
16870: PUSH
16871: LD_INT 3
16873: EQUAL
16874: IFFALSE 16948
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16876: LD_ADDR_EXP 31
16880: PUSH
16881: LD_EXP 31
16885: PPUSH
16886: LD_INT 1
16888: PPUSH
16889: CALL_OW 3
16893: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16894: LD_ADDR_EXP 31
16898: PUSH
16899: LD_EXP 31
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: CALL_OW 3
16911: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16912: LD_ADDR_EXP 31
16916: PUSH
16917: LD_EXP 31
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 3
16929: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16930: LD_ADDR_EXP 31
16934: PUSH
16935: LD_EXP 31
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 3
16947: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16948: LD_VAR 0 1
16952: PPUSH
16953: CALL_OW 255
16957: PUSH
16958: LD_INT 3
16960: EQUAL
16961: PUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 0
16974: EQUAL
16975: PUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 266
16985: PUSH
16986: LD_INT 2
16988: EQUAL
16989: OR
16990: PUSH
16991: LD_VAR 0 1
16995: PPUSH
16996: CALL_OW 266
17000: PUSH
17001: LD_INT 4
17003: EQUAL
17004: OR
17005: PUSH
17006: EMPTY
17007: LIST
17008: AND
17009: IFFALSE 17020
// ComUpgrade ( building ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 255
17029: PUSH
17030: LD_INT 3
17032: EQUAL
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 266
17043: PUSH
17044: LD_INT 32
17046: EQUAL
17047: AND
17048: IFFALSE 17089
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17050: LD_VAR 0 1
17054: PPUSH
17055: LD_INT 42
17057: PUSH
17058: LD_INT 43
17060: PUSH
17061: LD_INT 44
17063: PUSH
17064: LD_INT 46
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 1
17075: PPUSH
17076: LD_INT 4
17078: PPUSH
17079: CALL_OW 12
17083: ARRAY
17084: PPUSH
17085: CALL_OW 208
// end ; end ;
17089: PPOPN 1
17091: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17092: LD_VAR 0 1
17096: PUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 23
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 69
17136: IN
17137: IFFALSE 17153
// killCounter := killCounter + 1 ;
17139: LD_ADDR_EXP 47
17143: PUSH
17144: LD_EXP 47
17148: PUSH
17149: LD_INT 1
17151: PLUS
17152: ST_TO_ADDR
// if unit = JMM then
17153: LD_VAR 0 1
17157: PUSH
17158: LD_EXP 1
17162: EQUAL
17163: IFFALSE 17172
// YouLost ( JMM ) ;
17165: LD_STRING JMM
17167: PPUSH
17168: CALL_OW 104
// if unit = Joan then
17172: LD_VAR 0 1
17176: PUSH
17177: LD_EXP 15
17181: EQUAL
17182: IFFALSE 17192
// JoanStatus = 0 ;
17184: LD_ADDR_EXP 16
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 255
17201: PUSH
17202: LD_INT 1
17204: EQUAL
17205: PUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 247
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: AND
17220: IFFALSE 17296
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 257
17231: PUSH
17232: LD_INT 1
17234: EQUAL
17235: PUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 257
17245: PUSH
17246: LD_INT 2
17248: EQUAL
17249: OR
17250: PUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 257
17260: PUSH
17261: LD_INT 3
17263: EQUAL
17264: OR
17265: PUSH
17266: LD_VAR 0 1
17270: PPUSH
17271: CALL_OW 257
17275: PUSH
17276: LD_INT 4
17278: EQUAL
17279: OR
17280: IFFALSE 17296
// unitLost = unitLost + 1 ;
17282: LD_ADDR_EXP 30
17286: PUSH
17287: LD_EXP 30
17291: PUSH
17292: LD_INT 1
17294: PLUS
17295: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 255
17305: PUSH
17306: LD_INT 3
17308: EQUAL
17309: PUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 247
17319: PUSH
17320: LD_INT 3
17322: EQUAL
17323: AND
17324: IFFALSE 18016
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 266
17335: PUSH
17336: LD_INT 31
17338: EQUAL
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 266
17349: PUSH
17350: LD_INT 32
17352: EQUAL
17353: OR
17354: PUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 266
17364: PUSH
17365: LD_INT 36
17367: EQUAL
17368: OR
17369: PUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 266
17379: PUSH
17380: LD_INT 0
17382: EQUAL
17383: OR
17384: PUSH
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 266
17394: PUSH
17395: LD_INT 24
17397: EQUAL
17398: OR
17399: PUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 266
17409: PUSH
17410: LD_INT 17
17412: EQUAL
17413: OR
17414: PUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 266
17424: PUSH
17425: LD_INT 25
17427: EQUAL
17428: OR
17429: PUSH
17430: LD_VAR 0 1
17434: PPUSH
17435: CALL_OW 266
17439: PUSH
17440: LD_INT 19
17442: EQUAL
17443: OR
17444: PUSH
17445: LD_VAR 0 1
17449: PPUSH
17450: CALL_OW 266
17454: PUSH
17455: LD_INT 20
17457: EQUAL
17458: OR
17459: PUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 266
17469: PUSH
17470: LD_INT 18
17472: EQUAL
17473: OR
17474: PUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 266
17484: PUSH
17485: LD_INT 21
17487: EQUAL
17488: OR
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 266
17499: PUSH
17500: LD_INT 23
17502: EQUAL
17503: OR
17504: PUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 266
17514: PUSH
17515: LD_INT 16
17517: EQUAL
17518: OR
17519: PUSH
17520: LD_VAR 0 1
17524: PPUSH
17525: CALL_OW 266
17529: PUSH
17530: LD_INT 6
17532: EQUAL
17533: OR
17534: PUSH
17535: LD_VAR 0 1
17539: PPUSH
17540: CALL_OW 266
17544: PUSH
17545: LD_INT 29
17547: EQUAL
17548: OR
17549: PUSH
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 266
17559: PUSH
17560: LD_INT 26
17562: EQUAL
17563: OR
17564: PUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 266
17574: PUSH
17575: LD_INT 30
17577: EQUAL
17578: OR
17579: PUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 266
17589: PUSH
17590: LD_INT 28
17592: EQUAL
17593: OR
17594: PUSH
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 266
17604: PUSH
17605: LD_INT 27
17607: EQUAL
17608: OR
17609: PUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 266
17619: PUSH
17620: LD_INT 33
17622: EQUAL
17623: OR
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 266
17634: PUSH
17635: LD_INT 2
17637: EQUAL
17638: OR
17639: PUSH
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 266
17649: PUSH
17650: LD_INT 4
17652: EQUAL
17653: OR
17654: IFFALSE 17740
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17656: LD_ADDR_EXP 31
17660: PUSH
17661: LD_EXP 31
17665: PUSH
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 266
17675: ADD
17676: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17677: LD_ADDR_EXP 31
17681: PUSH
17682: LD_EXP 31
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 250
17696: ADD
17697: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17698: LD_ADDR_EXP 31
17702: PUSH
17703: LD_EXP 31
17707: PUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 251
17717: ADD
17718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17719: LD_ADDR_EXP 31
17723: PUSH
17724: LD_EXP 31
17728: PUSH
17729: LD_VAR 0 1
17733: PPUSH
17734: CALL_OW 254
17738: ADD
17739: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 266
17749: PUSH
17750: LD_INT 1
17752: EQUAL
17753: IFFALSE 17832
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17755: LD_ADDR_EXP 31
17759: PUSH
17760: LD_EXP 31
17764: PUSH
17765: LD_INT 0
17767: ADD
17768: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17769: LD_ADDR_EXP 31
17773: PUSH
17774: LD_EXP 31
17778: PUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 250
17788: ADD
17789: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17790: LD_ADDR_EXP 31
17794: PUSH
17795: LD_EXP 31
17799: PUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 251
17809: ADD
17810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17811: LD_ADDR_EXP 31
17815: PUSH
17816: LD_EXP 31
17820: PUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 254
17830: ADD
17831: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17832: LD_VAR 0 1
17836: PPUSH
17837: CALL_OW 266
17841: PUSH
17842: LD_INT 3
17844: EQUAL
17845: IFFALSE 17924
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17847: LD_ADDR_EXP 31
17851: PUSH
17852: LD_EXP 31
17856: PUSH
17857: LD_INT 2
17859: ADD
17860: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17861: LD_ADDR_EXP 31
17865: PUSH
17866: LD_EXP 31
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 250
17880: ADD
17881: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17882: LD_ADDR_EXP 31
17886: PUSH
17887: LD_EXP 31
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 251
17901: ADD
17902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17903: LD_ADDR_EXP 31
17907: PUSH
17908: LD_EXP 31
17912: PUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 254
17922: ADD
17923: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 266
17933: PUSH
17934: LD_INT 5
17936: EQUAL
17937: IFFALSE 18016
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17939: LD_ADDR_EXP 31
17943: PUSH
17944: LD_EXP 31
17948: PUSH
17949: LD_INT 4
17951: ADD
17952: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17953: LD_ADDR_EXP 31
17957: PUSH
17958: LD_EXP 31
17962: PUSH
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 250
17972: ADD
17973: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17974: LD_ADDR_EXP 31
17978: PUSH
17979: LD_EXP 31
17983: PUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 251
17993: ADD
17994: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17995: LD_ADDR_EXP 31
17999: PUSH
18000: LD_EXP 31
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 254
18014: ADD
18015: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18016: LD_EXP 48
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 257
18030: PUSH
18031: LD_INT 3
18033: EQUAL
18034: AND
18035: PUSH
18036: LD_VAR 0 1
18040: PPUSH
18041: CALL_OW 255
18045: PUSH
18046: LD_INT 3
18048: EQUAL
18049: AND
18050: PUSH
18051: LD_INT 21
18053: PPUSH
18054: CALL_OW 302
18058: AND
18059: PUSH
18060: LD_INT 21
18062: PPUSH
18063: CALL_OW 255
18067: PUSH
18068: LD_INT 3
18070: EQUAL
18071: AND
18072: IFFALSE 18154
// begin ruMechCounter := ruMechCounter - 1 ;
18074: LD_ADDR_EXP 48
18078: PUSH
18079: LD_EXP 48
18083: PUSH
18084: LD_INT 1
18086: MINUS
18087: ST_TO_ADDR
// uc_side = 3 ;
18088: LD_ADDR_OWVAR 20
18092: PUSH
18093: LD_INT 3
18095: ST_TO_ADDR
// uc_nation = 3 ;
18096: LD_ADDR_OWVAR 21
18100: PUSH
18101: LD_INT 3
18103: ST_TO_ADDR
// hc_gallery :=  ;
18104: LD_ADDR_OWVAR 33
18108: PUSH
18109: LD_STRING 
18111: ST_TO_ADDR
// hc_name :=  ;
18112: LD_ADDR_OWVAR 26
18116: PUSH
18117: LD_STRING 
18119: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18120: LD_INT 0
18122: PPUSH
18123: LD_EXP 34
18127: PPUSH
18128: LD_EXP 35
18132: PPUSH
18133: CALL_OW 12
18137: PPUSH
18138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18142: CALL_OW 44
18146: PPUSH
18147: LD_INT 21
18149: PPUSH
18150: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 255
18163: PUSH
18164: LD_INT 3
18166: EQUAL
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 264
18177: PUSH
18178: LD_INT 52
18180: EQUAL
18181: AND
18182: PUSH
18183: LD_INT 21
18185: PPUSH
18186: CALL_OW 302
18190: AND
18191: PUSH
18192: LD_INT 21
18194: PPUSH
18195: CALL_OW 255
18199: PUSH
18200: LD_INT 3
18202: EQUAL
18203: AND
18204: IFFALSE 18225
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18206: LD_INT 21
18208: PPUSH
18209: LD_INT 22
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: LD_INT 52
18220: PPUSH
18221: CALL_OW 125
// end ;
18225: PPOPN 1
18227: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
18232: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 264
18242: PUSH
18243: LD_INT 51
18245: EQUAL
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 255
18256: PUSH
18257: LD_INT 3
18259: EQUAL
18260: AND
18261: IFFALSE 18323
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18263: LD_ADDR_VAR 0 5
18267: PUSH
18268: LD_INT 2
18270: PPUSH
18271: CALL_OW 274
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: CALL_OW 275
18283: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18284: LD_INT 2
18286: PPUSH
18287: CALL_OW 274
18291: PPUSH
18292: LD_INT 1
18294: PPUSH
18295: LD_VAR 0 5
18299: PUSH
18300: LD_INT 100
18302: MINUS
18303: PPUSH
18304: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18308: LD_VAR 0 1
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: LD_INT 100
18318: PPUSH
18319: CALL_OW 291
// end ; if building = rufabsupp then
18323: LD_VAR 0 2
18327: PUSH
18328: LD_INT 17
18330: EQUAL
18331: IFFALSE 18345
// SetSide ( vehicle , 6 ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_INT 6
18340: PPUSH
18341: CALL_OW 235
// end ;
18345: PPOPN 5
18347: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 255
18357: PUSH
18358: LD_INT 3
18360: EQUAL
18361: IFFALSE 18392
// begin tamedApemans = tamedApemans + 1 ;
18363: LD_ADDR_EXP 32
18367: PUSH
18368: LD_EXP 32
18372: PUSH
18373: LD_INT 1
18375: PLUS
18376: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18377: LD_VAR 0 1
18381: PPUSH
18382: LD_INT 106
18384: PPUSH
18385: LD_INT 85
18387: PPUSH
18388: CALL_OW 111
// end ; end ;
18392: PPOPN 2
18394: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 255
18408: PUSH
18409: LD_INT 3
18411: EQUAL
18412: PUSH
18413: LD_VAR 0 1
18417: PPUSH
18418: CALL_OW 247
18422: PUSH
18423: LD_INT 2
18425: EQUAL
18426: AND
18427: IFFALSE 18536
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 264
18438: PUSH
18439: LD_INT 42
18441: EQUAL
18442: PUSH
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL_OW 264
18452: PUSH
18453: LD_INT 43
18455: EQUAL
18456: OR
18457: PUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 264
18467: PUSH
18468: LD_INT 44
18470: EQUAL
18471: OR
18472: PUSH
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 264
18482: PUSH
18483: LD_INT 46
18485: EQUAL
18486: OR
18487: IFFALSE 18536
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18489: LD_INT 21
18491: PPUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL_OW 265
18501: PPUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 262
18511: PPUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 263
18521: PPUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 264
18531: PPUSH
18532: CALL_OW 185
// end ;
18536: PPOPN 3
18538: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: PUSH
18553: LD_VAR 0 2
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: AND
18567: PUSH
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 302
18577: AND
18578: IFFALSE 18620
// begin ComRepairVehicle ( human , vehicle ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_VAR 0 1
18589: PPUSH
18590: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18594: LD_VAR 0 2
18598: PPUSH
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18608: LD_VAR 0 1
18612: PPUSH
18613: LD_INT 100
18615: PPUSH
18616: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL_OW 255
18629: PUSH
18630: LD_INT 3
18632: EQUAL
18633: PUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: CALL_OW 255
18643: PUSH
18644: LD_INT 3
18646: EQUAL
18647: AND
18648: PUSH
18649: LD_INT 21
18651: PPUSH
18652: CALL_OW 302
18656: AND
18657: PUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL_OW 302
18667: NOT
18668: AND
18669: IFFALSE 18683
// ComEnterUnit ( human , rufab ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: LD_INT 21
18678: PPUSH
18679: CALL_OW 120
// end ;
18683: PPOPN 2
18685: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18686: LD_VAR 0 1
18690: PUSH
18691: LD_INT 21
18693: EQUAL
18694: PUSH
18695: LD_VAR 0 2
18699: PPUSH
18700: CALL_OW 255
18704: PUSH
18705: LD_INT 3
18707: EQUAL
18708: AND
18709: IFFALSE 18723
// SetLives ( human , 1000 ) ;
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_INT 1000
18718: PPUSH
18719: CALL_OW 234
// end ;
18723: PPOPN 2
18725: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL 37728 0 1
// end ; end_of_file
18735: PPOPN 1
18737: END
// every 0 0$30 trigger cratesStatus = 1 do
18738: LD_EXP 38
18742: PUSH
18743: LD_INT 1
18745: EQUAL
18746: IFFALSE 18799
18748: GO 18750
18750: DISABLE
// begin enable ;
18751: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18752: LD_INT 350
18754: PUSH
18755: LD_INT 875
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PPUSH
18765: LD_INT 2
18767: PPUSH
18768: CALL_OW 12
18772: ARRAY
18773: PPUSH
18774: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18778: LD_INT 1
18780: PPUSH
18781: LD_INT 5
18783: PPUSH
18784: CALL_OW 12
18788: PPUSH
18789: LD_INT 7
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 55
// end ;
18799: END
// every 1 1$0 trigger cratesStatus = 2 do
18800: LD_EXP 38
18804: PUSH
18805: LD_INT 2
18807: EQUAL
18808: IFFALSE 18891
18810: GO 18812
18812: DISABLE
// begin enable ;
18813: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18814: LD_INT 3150
18816: PUSH
18817: LD_INT 4550
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: PPUSH
18827: LD_INT 2
18829: PPUSH
18830: CALL_OW 12
18834: ARRAY
18835: PPUSH
18836: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18840: LD_INT 2
18842: PUSH
18843: LD_INT 5
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PPUSH
18853: LD_INT 2
18855: PPUSH
18856: CALL_OW 12
18860: ARRAY
18861: PPUSH
18862: LD_INT 6
18864: PUSH
18865: LD_INT 7
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: PPUSH
18875: LD_INT 2
18877: PPUSH
18878: CALL_OW 12
18882: ARRAY
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 55
// end ;
18891: END
// every 0 0$30 + 0 0$10 do
18892: GO 18894
18894: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18895: LD_INT 4
18897: PUSH
18898: LD_INT 5
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_INT 2
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: PPUSH
18917: LD_INT 7
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: CALL_OW 55
// Wait ( 0 0$15 ) ;
18927: LD_INT 525
18929: PPUSH
18930: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18934: LD_INT 4
18936: PUSH
18937: LD_INT 5
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 2
18949: PPUSH
18950: CALL_OW 12
18954: ARRAY
18955: PPUSH
18956: LD_INT 7
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: CALL_OW 55
// Wait ( 0 0$20 ) ;
18966: LD_INT 700
18968: PPUSH
18969: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18973: LD_INT 4
18975: PUSH
18976: LD_INT 5
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: PPUSH
18986: LD_INT 2
18988: PPUSH
18989: CALL_OW 12
18993: ARRAY
18994: PPUSH
18995: LD_INT 7
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: CALL_OW 55
// end ; end_of_file
19005: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19006: LD_EXP 24
19010: PUSH
19011: LD_INT 1
19013: EQUAL
19014: IFFALSE 19315
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
19022: PPUSH
19023: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 21
19041: PUSH
19042: LD_INT 3
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 69
19086: ST_TO_ADDR
// for i in tmp do
19087: LD_ADDR_VAR 0 1
19091: PUSH
19092: LD_VAR 0 2
19096: PUSH
19097: FOR_IN
19098: IFFALSE 19131
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: LD_VAR 0 3
19109: PUSH
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 274
19119: PPUSH
19120: LD_INT 1
19122: PPUSH
19123: CALL_OW 275
19127: PLUS
19128: ST_TO_ADDR
19129: GO 19097
19131: POP
19132: POP
// strings = [ ] ;
19133: LD_ADDR_EXP 27
19137: PUSH
19138: EMPTY
19139: ST_TO_ADDR
// if tmp = 0 then
19140: LD_VAR 0 2
19144: PUSH
19145: LD_INT 0
19147: EQUAL
19148: IFFALSE 19173
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19150: LD_ADDR_EXP 27
19154: PUSH
19155: LD_EXP 27
19159: PUSH
19160: LD_STRING #Am06-1
19162: PUSH
19163: LD_EXP 25
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: ADD
19172: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19173: LD_VAR 0 2
19177: PUSH
19178: LD_INT 0
19180: GREATER
19181: PUSH
19182: LD_EXP 25
19186: PUSH
19187: LD_VAR 0 3
19191: GREATER
19192: AND
19193: IFFALSE 19224
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19195: LD_ADDR_EXP 27
19199: PUSH
19200: LD_EXP 27
19204: PUSH
19205: LD_STRING #Am06-1
19207: PUSH
19208: LD_EXP 25
19212: PUSH
19213: LD_VAR 0 3
19217: MINUS
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: ADD
19223: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19224: LD_VAR 0 2
19228: PUSH
19229: LD_INT 0
19231: GREATER
19232: PUSH
19233: LD_EXP 25
19237: PUSH
19238: LD_VAR 0 3
19242: LESSEQUAL
19243: AND
19244: IFFALSE 19267
// strings = strings ^ [ #Am06-1 , 0 ] ;
19246: LD_ADDR_EXP 27
19250: PUSH
19251: LD_EXP 27
19255: PUSH
19256: LD_STRING #Am06-1
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: ADD
19266: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19267: LD_ADDR_EXP 26
19271: PUSH
19272: LD_EXP 26
19276: PUSH
19277: LD_INT 35
19279: MINUS
19280: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19281: LD_ADDR_EXP 27
19285: PUSH
19286: LD_EXP 27
19290: PUSH
19291: LD_STRING #Am06-2
19293: PUSH
19294: LD_EXP 26
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: ADD
19303: ST_TO_ADDR
// display_strings = strings ;
19304: LD_ADDR_OWVAR 47
19308: PUSH
19309: LD_EXP 27
19313: ST_TO_ADDR
// enable ;
19314: ENABLE
// end ; end_of_file
19315: PPOPN 3
19317: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19318: LD_INT 0
19320: PPUSH
19321: PPUSH
19322: PPUSH
19323: PPUSH
19324: PPUSH
19325: PPUSH
19326: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_INT 22
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: PUSH
19345: LD_INT 30
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 30
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19379: LD_INT 35
19381: PPUSH
19382: CALL_OW 67
// until depot ;
19386: LD_VAR 0 3
19390: IFFALSE 19327
// repeat wait ( 0 0$1 ) ;
19392: LD_INT 35
19394: PPUSH
19395: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19399: LD_ADDR_VAR 0 4
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 91
19416: PUSH
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 1
19424: ARRAY
19425: PUSH
19426: LD_INT 15
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 21
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 25
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 25
19459: PUSH
19460: LD_INT 2
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 25
19469: PUSH
19470: LD_INT 3
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 25
19479: PUSH
19480: LD_INT 4
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: LD_INT 54
19499: PUSH
19500: EMPTY
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_INT 55
19512: PUSH
19513: EMPTY
19514: LIST
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PPUSH
19528: CALL_OW 69
19532: PUSH
19533: LD_EXP 2
19537: PUSH
19538: LD_EXP 3
19542: PUSH
19543: LD_EXP 4
19547: PUSH
19548: LD_EXP 5
19552: PUSH
19553: LD_EXP 7
19557: PUSH
19558: LD_EXP 8
19562: PUSH
19563: LD_EXP 9
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: PUSH
19577: LD_EXP 46
19581: ADD
19582: DIFF
19583: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19584: LD_VAR 0 4
19588: PUSH
19589: LD_INT 1
19591: PPUSH
19592: CALL_OW 463
19596: NOT
19597: AND
19598: IFFALSE 19392
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19600: LD_ADDR_VAR 0 4
19604: PUSH
19605: LD_VAR 0 4
19609: PUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_VAR 0 4
19617: PPUSH
19618: CALL_OW 12
19622: ARRAY
19623: ST_TO_ADDR
// blockSpawn = 1 ;
19624: LD_ADDR_EXP 29
19628: PUSH
19629: LD_INT 1
19631: ST_TO_ADDR
// uc_side = 2 ;
19632: LD_ADDR_OWVAR 20
19636: PUSH
19637: LD_INT 2
19639: ST_TO_ADDR
// uc_nation = 2 ;
19640: LD_ADDR_OWVAR 21
19644: PUSH
19645: LD_INT 2
19647: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19648: LD_ADDR_EXP 19
19652: PUSH
19653: LD_STRING Kurt
19655: PPUSH
19656: LD_INT 0
19658: PPUSH
19659: LD_STRING 
19661: PPUSH
19662: CALL 41637 0 3
19666: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19667: LD_EXP 19
19671: PPUSH
19672: LD_VAR 0 4
19676: PPUSH
19677: CALL_OW 250
19681: PPUSH
19682: LD_VAR 0 4
19686: PPUSH
19687: CALL_OW 251
19691: PPUSH
19692: LD_INT 5
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 50
// InGameOn ;
19702: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19706: LD_EXP 19
19710: PPUSH
19711: CALL_OW 87
// wait ( 0 0$2 ) ;
19715: LD_INT 70
19717: PPUSH
19718: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19722: LD_EXP 19
19726: PPUSH
19727: LD_VAR 0 4
19731: PPUSH
19732: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19736: LD_VAR 0 4
19740: PPUSH
19741: LD_EXP 19
19745: PPUSH
19746: CALL_OW 112
// wait ( 0 0$1 ) ;
19750: LD_INT 35
19752: PPUSH
19753: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19757: LD_VAR 0 4
19761: PPUSH
19762: LD_EXP 19
19766: PPUSH
19767: CALL_OW 119
// DialogueOn ;
19771: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19775: LD_EXP 19
19779: PPUSH
19780: LD_STRING D2-Kurt-1
19782: PPUSH
19783: CALL_OW 88
// if tmp = JMM then
19787: LD_VAR 0 4
19791: PUSH
19792: LD_EXP 1
19796: EQUAL
19797: IFFALSE 19889
// begin Say ( JMM , D2-JMM-1 ) ;
19799: LD_EXP 1
19803: PPUSH
19804: LD_STRING D2-JMM-1
19806: PPUSH
19807: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19811: LD_EXP 19
19815: PPUSH
19816: LD_STRING D2-Kurt-2
19818: PPUSH
19819: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19823: LD_EXP 1
19827: PPUSH
19828: LD_STRING D2-JMM-2
19830: PPUSH
19831: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19835: LD_EXP 19
19839: PPUSH
19840: LD_STRING D2-Kurt-3
19842: PPUSH
19843: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19847: LD_EXP 1
19851: PPUSH
19852: LD_STRING D2-JMM-3
19854: PPUSH
19855: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19859: LD_EXP 19
19863: PPUSH
19864: LD_STRING D2-Kurt-4
19866: PPUSH
19867: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19871: LD_EXP 1
19875: PPUSH
19876: LD_STRING D2-JMM-4
19878: PPUSH
19879: CALL_OW 88
// DialogueOff ;
19883: CALL_OW 7
// end else
19887: GO 20199
// begin if GetSex ( tmp ) = 1 then
19889: LD_VAR 0 4
19893: PPUSH
19894: CALL_OW 258
19898: PUSH
19899: LD_INT 1
19901: EQUAL
19902: IFFALSE 19916
// Say ( tmp , D2-Sol1-1 ) ;
19904: LD_VAR 0 4
19908: PPUSH
19909: LD_STRING D2-Sol1-1
19911: PPUSH
19912: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19916: LD_VAR 0 4
19920: PPUSH
19921: CALL_OW 258
19925: PUSH
19926: LD_INT 2
19928: EQUAL
19929: IFFALSE 19943
// Say ( tmp , D2-FSol1-1 ) ;
19931: LD_VAR 0 4
19935: PPUSH
19936: LD_STRING D2-FSol1-1
19938: PPUSH
19939: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19943: LD_EXP 19
19947: PPUSH
19948: LD_STRING D2-Kurt-2
19950: PPUSH
19951: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19955: LD_VAR 0 4
19959: PPUSH
19960: CALL_OW 258
19964: PUSH
19965: LD_INT 1
19967: EQUAL
19968: IFFALSE 19982
// Say ( tmp , D2-Sol1-2 ) ;
19970: LD_VAR 0 4
19974: PPUSH
19975: LD_STRING D2-Sol1-2
19977: PPUSH
19978: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19982: LD_VAR 0 4
19986: PPUSH
19987: CALL_OW 258
19991: PUSH
19992: LD_INT 2
19994: EQUAL
19995: IFFALSE 20009
// Say ( tmp , D2-FSol1-2 ) ;
19997: LD_VAR 0 4
20001: PPUSH
20002: LD_STRING D2-FSol1-2
20004: PPUSH
20005: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20009: LD_EXP 19
20013: PPUSH
20014: LD_STRING D2-Kurt-3
20016: PPUSH
20017: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 258
20030: PUSH
20031: LD_INT 1
20033: EQUAL
20034: IFFALSE 20048
// Say ( tmp , D2-Sol1-3 ) ;
20036: LD_VAR 0 4
20040: PPUSH
20041: LD_STRING D2-Sol1-3
20043: PPUSH
20044: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20048: LD_VAR 0 4
20052: PPUSH
20053: CALL_OW 258
20057: PUSH
20058: LD_INT 2
20060: EQUAL
20061: IFFALSE 20075
// Say ( tmp , D2-FSol1-3 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_STRING D2-FSol1-3
20070: PPUSH
20071: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20075: LD_EXP 19
20079: PPUSH
20080: LD_STRING D2-Kurt-4
20082: PPUSH
20083: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20087: LD_VAR 0 4
20091: PPUSH
20092: CALL_OW 258
20096: PUSH
20097: LD_INT 1
20099: EQUAL
20100: IFFALSE 20114
// Say ( tmp , D2-Sol1-4 ) ;
20102: LD_VAR 0 4
20106: PPUSH
20107: LD_STRING D2-Sol1-4
20109: PPUSH
20110: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20114: LD_VAR 0 4
20118: PPUSH
20119: CALL_OW 258
20123: PUSH
20124: LD_INT 2
20126: EQUAL
20127: IFFALSE 20141
// Say ( tmp , D2-FSol1-4 ) ;
20129: LD_VAR 0 4
20133: PPUSH
20134: LD_STRING D2-FSol1-4
20136: PPUSH
20137: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20141: LD_VAR 0 4
20145: PPUSH
20146: CALL_OW 258
20150: PUSH
20151: LD_INT 1
20153: EQUAL
20154: IFFALSE 20168
// Say ( tmp , D2-Sol1-5 ) ;
20156: LD_VAR 0 4
20160: PPUSH
20161: LD_STRING D2-Sol1-5
20163: PPUSH
20164: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20168: LD_VAR 0 4
20172: PPUSH
20173: CALL_OW 258
20177: PUSH
20178: LD_INT 2
20180: EQUAL
20181: IFFALSE 20195
// Say ( tmp , D2-FSol1-5 ) ;
20183: LD_VAR 0 4
20187: PPUSH
20188: LD_STRING D2-FSol1-5
20190: PPUSH
20191: CALL_OW 88
// DialogueOff ;
20195: CALL_OW 7
// end ; dec = ShowQuery1 ;
20199: LD_ADDR_VAR 0 6
20203: PUSH
20204: CALL 6728 0 0
20208: ST_TO_ADDR
// if dec = 1 then
20209: LD_VAR 0 6
20213: PUSH
20214: LD_INT 1
20216: EQUAL
20217: IFFALSE 20279
// begin DialogueOn ;
20219: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20223: LD_EXP 19
20227: PPUSH
20228: LD_STRING D2a-Kurt-1
20230: PPUSH
20231: CALL_OW 88
// DialogueOff ;
20235: CALL_OW 7
// InGameOff ;
20239: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20243: LD_INT 1
20245: PPUSH
20246: LD_INT 2
20248: PPUSH
20249: LD_INT 2
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20259: LD_EXP 19
20263: PPUSH
20264: LD_INT 8
20266: PPUSH
20267: CALL_OW 113
// readyToEscape = 1 ;
20271: LD_ADDR_EXP 21
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// end ; if dec = 2 then
20279: LD_VAR 0 6
20283: PUSH
20284: LD_INT 2
20286: EQUAL
20287: IFFALSE 20807
// begin DialogueOn ;
20289: CALL_OW 6
// if tmp = JMM then
20293: LD_VAR 0 4
20297: PUSH
20298: LD_EXP 1
20302: EQUAL
20303: IFFALSE 20359
// begin Say ( JMM , D2b-JMM-1 ) ;
20305: LD_EXP 1
20309: PPUSH
20310: LD_STRING D2b-JMM-1
20312: PPUSH
20313: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20317: LD_EXP 19
20321: PPUSH
20322: LD_STRING D2b-Kurt-1
20324: PPUSH
20325: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20329: LD_EXP 1
20333: PPUSH
20334: LD_STRING D2b-JMM-2
20336: PPUSH
20337: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20341: LD_EXP 19
20345: PPUSH
20346: LD_STRING D2b-Kurt-2
20348: PPUSH
20349: CALL_OW 88
// DialogueOff ;
20353: CALL_OW 7
// end else
20357: GO 20549
// begin if GetSex ( tmp ) = 1 then
20359: LD_VAR 0 4
20363: PPUSH
20364: CALL_OW 258
20368: PUSH
20369: LD_INT 1
20371: EQUAL
20372: IFFALSE 20386
// Say ( tmp , D2b-Sol1-1 ) ;
20374: LD_VAR 0 4
20378: PPUSH
20379: LD_STRING D2b-Sol1-1
20381: PPUSH
20382: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20386: LD_VAR 0 4
20390: PPUSH
20391: CALL_OW 258
20395: PUSH
20396: LD_INT 2
20398: EQUAL
20399: IFFALSE 20413
// Say ( tmp , D2b-FSol1-1 ) ;
20401: LD_VAR 0 4
20405: PPUSH
20406: LD_STRING D2b-FSol1-1
20408: PPUSH
20409: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20413: LD_EXP 19
20417: PPUSH
20418: LD_STRING D2b-Kurt-1
20420: PPUSH
20421: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20425: LD_VAR 0 4
20429: PPUSH
20430: CALL_OW 258
20434: PUSH
20435: LD_INT 1
20437: EQUAL
20438: IFFALSE 20452
// Say ( tmp , D2b-Sol1-2 ) ;
20440: LD_VAR 0 4
20444: PPUSH
20445: LD_STRING D2b-Sol1-2
20447: PPUSH
20448: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20452: LD_VAR 0 4
20456: PPUSH
20457: CALL_OW 258
20461: PUSH
20462: LD_INT 2
20464: EQUAL
20465: IFFALSE 20479
// Say ( tmp , D2b-FSol1-2 ) ;
20467: LD_VAR 0 4
20471: PPUSH
20472: LD_STRING D2b-FSol1-2
20474: PPUSH
20475: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20479: LD_EXP 19
20483: PPUSH
20484: LD_STRING D2b-Kurt-2
20486: PPUSH
20487: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20491: LD_VAR 0 4
20495: PPUSH
20496: CALL_OW 258
20500: PUSH
20501: LD_INT 1
20503: EQUAL
20504: IFFALSE 20518
// Say ( tmp , D2c-Sol1-2 ) ;
20506: LD_VAR 0 4
20510: PPUSH
20511: LD_STRING D2c-Sol1-2
20513: PPUSH
20514: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 258
20527: PUSH
20528: LD_INT 2
20530: EQUAL
20531: IFFALSE 20545
// Say ( tmp , D2c-FSol1-2 ) ;
20533: LD_VAR 0 4
20537: PPUSH
20538: LD_STRING D2c-FSol1-2
20540: PPUSH
20541: CALL_OW 88
// DialogueOff ;
20545: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20549: LD_ADDR_VAR 0 7
20553: PUSH
20554: CALL 6802 0 0
20558: ST_TO_ADDR
// if dec2 = 1 then
20559: LD_VAR 0 7
20563: PUSH
20564: LD_INT 1
20566: EQUAL
20567: IFFALSE 20629
// begin DialogueOn ;
20569: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20573: LD_EXP 19
20577: PPUSH
20578: LD_STRING D2a-Kurt-1
20580: PPUSH
20581: CALL_OW 88
// DialogueOff ;
20585: CALL_OW 7
// InGameOff ;
20589: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20593: LD_INT 1
20595: PPUSH
20596: LD_INT 2
20598: PPUSH
20599: LD_INT 2
20601: PPUSH
20602: LD_INT 1
20604: PPUSH
20605: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20609: LD_EXP 19
20613: PPUSH
20614: LD_INT 8
20616: PPUSH
20617: CALL_OW 113
// readyToEscape = 1 ;
20621: LD_ADDR_EXP 21
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// end ; if dec2 = 2 then
20629: LD_VAR 0 7
20633: PUSH
20634: LD_INT 2
20636: EQUAL
20637: IFFALSE 20807
// begin if tmp = JMM then
20639: LD_VAR 0 4
20643: PUSH
20644: LD_EXP 1
20648: EQUAL
20649: IFFALSE 20709
// begin DialogueOn ;
20651: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20655: LD_EXP 1
20659: PPUSH
20660: LD_STRING D2c-JMM-1
20662: PPUSH
20663: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20667: LD_EXP 19
20671: PPUSH
20672: LD_STRING D2c-Kurt-1
20674: PPUSH
20675: CALL_OW 88
// DialogueOff ;
20679: CALL_OW 7
// InGameOff ;
20683: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20687: LD_EXP 19
20691: PPUSH
20692: LD_INT 8
20694: PPUSH
20695: CALL_OW 113
// readyToEscape = 1 ;
20699: LD_ADDR_EXP 21
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// end else
20707: GO 20807
// begin DialogueOn ;
20709: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20713: LD_VAR 0 4
20717: PPUSH
20718: CALL_OW 258
20722: PUSH
20723: LD_INT 1
20725: EQUAL
20726: IFFALSE 20740
// Say ( tmp , D2c-Sol1-1 ) ;
20728: LD_VAR 0 4
20732: PPUSH
20733: LD_STRING D2c-Sol1-1
20735: PPUSH
20736: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20740: LD_VAR 0 4
20744: PPUSH
20745: CALL_OW 258
20749: PUSH
20750: LD_INT 2
20752: EQUAL
20753: IFFALSE 20767
// Say ( tmp , D2c-FSol1-1 ) ;
20755: LD_VAR 0 4
20759: PPUSH
20760: LD_STRING D2c-FSol1-1
20762: PPUSH
20763: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20767: LD_EXP 19
20771: PPUSH
20772: LD_STRING D2c-Kurt-1
20774: PPUSH
20775: CALL_OW 88
// DialogueOff ;
20779: CALL_OW 7
// InGameOff ;
20783: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20787: LD_EXP 19
20791: PPUSH
20792: LD_INT 8
20794: PPUSH
20795: CALL_OW 113
// readyToEscape = 1 ;
20799: LD_ADDR_EXP 21
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20807: LD_VAR 0 6
20811: PUSH
20812: LD_INT 3
20814: EQUAL
20815: IFFALSE 20989
// begin DialogueOn ;
20817: CALL_OW 6
// if tmp = JMM then
20821: LD_VAR 0 4
20825: PUSH
20826: LD_EXP 1
20830: EQUAL
20831: IFFALSE 20891
// begin DialogueOn ;
20833: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20837: LD_EXP 1
20841: PPUSH
20842: LD_STRING D2c-JMM-1
20844: PPUSH
20845: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20849: LD_EXP 19
20853: PPUSH
20854: LD_STRING D2c-Kurt-1
20856: PPUSH
20857: CALL_OW 88
// DialogueOff ;
20861: CALL_OW 7
// InGameOff ;
20865: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20869: LD_EXP 19
20873: PPUSH
20874: LD_INT 8
20876: PPUSH
20877: CALL_OW 113
// readyToEscape = 1 ;
20881: LD_ADDR_EXP 21
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// end else
20889: GO 20989
// begin DialogueOn ;
20891: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20895: LD_VAR 0 4
20899: PPUSH
20900: CALL_OW 258
20904: PUSH
20905: LD_INT 1
20907: EQUAL
20908: IFFALSE 20922
// Say ( tmp , D2c-Sol1-1 ) ;
20910: LD_VAR 0 4
20914: PPUSH
20915: LD_STRING D2c-Sol1-1
20917: PPUSH
20918: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20922: LD_VAR 0 4
20926: PPUSH
20927: CALL_OW 258
20931: PUSH
20932: LD_INT 2
20934: EQUAL
20935: IFFALSE 20949
// Say ( tmp , D2c-FSol1-1 ) ;
20937: LD_VAR 0 4
20941: PPUSH
20942: LD_STRING D2c-FSol1-1
20944: PPUSH
20945: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20949: LD_EXP 19
20953: PPUSH
20954: LD_STRING D2c-Kurt-1
20956: PPUSH
20957: CALL_OW 88
// DialogueOff ;
20961: CALL_OW 7
// InGameOff ;
20965: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20969: LD_EXP 19
20973: PPUSH
20974: LD_INT 8
20976: PPUSH
20977: CALL_OW 113
// readyToEscape = 1 ;
20981: LD_ADDR_EXP 21
20985: PUSH
20986: LD_INT 1
20988: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20989: LD_ADDR_EXP 29
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20997: LD_INT 35
20999: PPUSH
21000: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21004: LD_EXP 19
21008: PPUSH
21009: LD_INT 8
21011: PPUSH
21012: CALL_OW 308
21016: PUSH
21017: LD_EXP 21
21021: AND
21022: PUSH
21023: LD_EXP 19
21027: PPUSH
21028: CALL_OW 301
21032: OR
21033: IFFALSE 20997
// if IsDead ( Kurt ) then
21035: LD_EXP 19
21039: PPUSH
21040: CALL_OW 301
21044: IFFALSE 21048
// exit ;
21046: GO 21117
// RemoveUnit ( Kurt ) ;
21048: LD_EXP 19
21052: PPUSH
21053: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21057: LD_EXP 19
21061: PPUSH
21062: LD_STRING Kurt
21064: PPUSH
21065: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21069: LD_INT 1
21071: PPUSH
21072: LD_INT 2
21074: PPUSH
21075: CALL_OW 81
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21093
// KurtStatus = 1 ;
21085: LD_ADDR_EXP 20
21089: PUSH
21090: LD_INT 1
21092: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21093: LD_INT 1
21095: PPUSH
21096: LD_INT 2
21098: PPUSH
21099: CALL_OW 81
21103: PUSH
21104: LD_INT 2
21106: EQUAL
21107: IFFALSE 21117
// KurtStatus = 2 ;
21109: LD_ADDR_EXP 20
21113: PUSH
21114: LD_INT 2
21116: ST_TO_ADDR
// end ; end_of_file
21117: LD_VAR 0 1
21121: RET
// every 0 0$1 do
21122: GO 21124
21124: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21125: LD_INT 3
21127: PPUSH
21128: LD_INT 32
21130: PPUSH
21131: LD_INT 3
21133: PPUSH
21134: CALL 6857 0 3
21138: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21139: GO 21141
21141: DISABLE
21142: LD_INT 0
21144: PPUSH
// begin enemyWayX = [ ] ;
21145: LD_ADDR_EXP 49
21149: PUSH
21150: EMPTY
21151: ST_TO_ADDR
// enemyWayY = [ ] ;
21152: LD_ADDR_EXP 50
21156: PUSH
21157: EMPTY
21158: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21159: LD_ADDR_VAR 0 1
21163: PUSH
21164: LD_INT 1
21166: PPUSH
21167: LD_INT 2
21169: PPUSH
21170: CALL_OW 12
21174: ST_TO_ADDR
// if rnd = 1 then
21175: LD_VAR 0 1
21179: PUSH
21180: LD_INT 1
21182: EQUAL
21183: IFFALSE 21223
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21185: LD_ADDR_EXP 49
21189: PUSH
21190: LD_INT 93
21192: PUSH
21193: LD_INT 84
21195: PUSH
21196: LD_INT 104
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21204: LD_ADDR_EXP 50
21208: PUSH
21209: LD_INT 51
21211: PUSH
21212: LD_INT 35
21214: PUSH
21215: LD_INT 28
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: ST_TO_ADDR
// end ; if rnd = 2 then
21223: LD_VAR 0 1
21227: PUSH
21228: LD_INT 2
21230: EQUAL
21231: IFFALSE 21287
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21233: LD_ADDR_EXP 49
21237: PUSH
21238: LD_INT 93
21240: PUSH
21241: LD_INT 52
21243: PUSH
21244: LD_INT 34
21246: PUSH
21247: LD_INT 28
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21260: LD_ADDR_EXP 50
21264: PUSH
21265: LD_INT 51
21267: PUSH
21268: LD_INT 45
21270: PUSH
21271: LD_INT 35
21273: PUSH
21274: LD_INT 26
21276: PUSH
21277: LD_INT 20
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: ST_TO_ADDR
// end ; enable ;
21287: ENABLE
// end ;
21288: PPOPN 1
21290: END
// every 0 0$1 do
21291: GO 21293
21293: DISABLE
// begin enable ;
21294: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21295: LD_INT 3
21297: PPUSH
21298: LD_INT 2
21300: PPUSH
21301: LD_INT 10
21303: PPUSH
21304: LD_EXP 31
21308: PPUSH
21309: CALL 8149 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21313: LD_INT 3
21315: PPUSH
21316: LD_INT 12
21318: PPUSH
21319: LD_EXP 31
21323: PPUSH
21324: CALL 10034 0 3
// if disableHealAI = 0 then
21328: LD_EXP 33
21332: PUSH
21333: LD_INT 0
21335: EQUAL
21336: IFFALSE 21357
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21338: LD_INT 3
21340: PPUSH
21341: LD_INT 9
21343: PPUSH
21344: LD_INT 10
21346: PPUSH
21347: LD_INT 32
21349: PUSH
21350: EMPTY
21351: LIST
21352: PPUSH
21353: CALL 8540 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21357: LD_INT 3
21359: PPUSH
21360: LD_INT 51
21362: PPUSH
21363: LD_INT 6
21365: PPUSH
21366: CALL 9248 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21370: LD_INT 3
21372: PPUSH
21373: LD_INT 12
21375: PPUSH
21376: LD_INT 121
21378: PPUSH
21379: LD_INT 100
21381: PPUSH
21382: CALL 7252 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21386: LD_INT 3
21388: PPUSH
21389: LD_INT 22
21391: PPUSH
21392: LD_EXP 49
21396: PPUSH
21397: LD_EXP 50
21401: PPUSH
21402: CALL 7455 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21406: LD_INT 3
21408: PPUSH
21409: LD_INT 10
21411: PPUSH
21412: CALL 9391 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21416: LD_INT 3
21418: PPUSH
21419: LD_INT 1
21421: PPUSH
21422: CALL 9804 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21426: LD_INT 2
21428: PPUSH
21429: CALL_OW 303
21433: PUSH
21434: LD_INT 2
21436: PPUSH
21437: CALL_OW 255
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: OR
21446: IFFALSE 21458
// DefendDepot ( 3 , rudepo ) ;
21448: LD_INT 3
21450: PPUSH
21451: LD_INT 2
21453: PPUSH
21454: CALL 9084 0 2
// end ;
21458: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21459: LD_INT 22
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 21
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 55
21481: PUSH
21482: EMPTY
21483: LIST
21484: PUSH
21485: LD_INT 3
21487: PUSH
21488: LD_INT 34
21490: PUSH
21491: LD_INT 51
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: PUSH
21513: LD_INT 0
21515: EQUAL
21516: PUSH
21517: LD_INT 21
21519: PPUSH
21520: CALL_OW 255
21524: PUSH
21525: LD_INT 3
21527: EQUAL
21528: AND
21529: PUSH
21530: LD_INT 21
21532: PPUSH
21533: CALL_OW 302
21537: AND
21538: PUSH
21539: LD_INT 2
21541: PPUSH
21542: CALL_OW 255
21546: PUSH
21547: LD_INT 3
21549: EQUAL
21550: AND
21551: PUSH
21552: LD_INT 2
21554: PPUSH
21555: CALL_OW 302
21559: AND
21560: IFFALSE 21740
21562: GO 21564
21564: DISABLE
// begin enable ;
21565: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21566: LD_INT 2
21568: PPUSH
21569: CALL_OW 274
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: LD_INT 1000
21579: PPUSH
21580: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21584: LD_INT 3
21586: PPUSH
21587: LD_INT 21
21589: PPUSH
21590: LD_INT 4
21592: PUSH
21593: LD_INT 5
21595: PUSH
21596: LD_INT 6
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: LD_OWVAR 67
21608: ARRAY
21609: PPUSH
21610: LD_INT 43
21612: PUSH
21613: LD_INT 43
21615: PUSH
21616: LD_INT 44
21618: PUSH
21619: LD_INT 44
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 43
21630: PUSH
21631: LD_INT 43
21633: PUSH
21634: LD_INT 43
21636: PUSH
21637: LD_INT 44
21639: PUSH
21640: LD_INT 44
21642: PUSH
21643: LD_INT 46
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 43
21656: PUSH
21657: LD_INT 43
21659: PUSH
21660: LD_INT 43
21662: PUSH
21663: LD_INT 44
21665: PUSH
21666: LD_INT 44
21668: PUSH
21669: LD_INT 46
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: LD_OWVAR 67
21689: ARRAY
21690: PPUSH
21691: LD_INT 1
21693: PPUSH
21694: LD_INT 1
21696: PPUSH
21697: LD_INT 22
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_INT 24
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PPUSH
21713: LD_INT 2
21715: PPUSH
21716: CALL_OW 12
21720: ARRAY
21721: PUSH
21722: LD_INT 24
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: LD_OWVAR 67
21734: ARRAY
21735: PPUSH
21736: CALL 7098 0 7
// end ;
21740: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21741: LD_INT 17
21743: PPUSH
21744: CALL_OW 255
21748: PUSH
21749: LD_INT 3
21751: EQUAL
21752: PUSH
21753: LD_INT 17
21755: PPUSH
21756: CALL_OW 302
21760: AND
21761: PUSH
21762: LD_INT 2
21764: PPUSH
21765: CALL_OW 255
21769: PUSH
21770: LD_INT 3
21772: EQUAL
21773: AND
21774: PUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 302
21782: AND
21783: IFFALSE 21850
21785: GO 21787
21787: DISABLE
// begin enable ;
21788: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21789: LD_INT 17
21791: PPUSH
21792: LD_INT 22
21794: PPUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: LD_INT 42
21803: PUSH
21804: LD_INT 43
21806: PUSH
21807: LD_INT 44
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PPUSH
21818: LD_INT 3
21820: PPUSH
21821: CALL_OW 12
21825: ARRAY
21826: PPUSH
21827: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21831: LD_INT 17
21833: PPUSH
21834: LD_INT 22
21836: PPUSH
21837: LD_INT 1
21839: PPUSH
21840: LD_INT 1
21842: PPUSH
21843: LD_INT 51
21845: PPUSH
21846: CALL_OW 185
// end ;
21850: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21851: LD_INT 17
21853: PPUSH
21854: CALL_OW 302
21858: PUSH
21859: LD_INT 17
21861: PPUSH
21862: CALL_OW 255
21866: PUSH
21867: LD_INT 3
21869: EQUAL
21870: AND
21871: PUSH
21872: LD_INT 2
21874: PPUSH
21875: CALL_OW 302
21879: AND
21880: PUSH
21881: LD_INT 2
21883: PPUSH
21884: CALL_OW 255
21888: PUSH
21889: LD_INT 3
21891: EQUAL
21892: AND
21893: PUSH
21894: LD_INT 17
21896: PPUSH
21897: CALL_OW 313
21901: NOT
21902: AND
21903: IFFALSE 21997
21905: GO 21907
21907: DISABLE
21908: LD_INT 0
21910: PPUSH
// begin for i = 1 to 6 do
21911: LD_ADDR_VAR 0 1
21915: PUSH
21916: DOUBLE
21917: LD_INT 1
21919: DEC
21920: ST_TO_ADDR
21921: LD_INT 6
21923: PUSH
21924: FOR_TO
21925: IFFALSE 21995
// begin uc_side = 3 ;
21927: LD_ADDR_OWVAR 20
21931: PUSH
21932: LD_INT 3
21934: ST_TO_ADDR
// uc_nation = 3 ;
21935: LD_ADDR_OWVAR 21
21939: PUSH
21940: LD_INT 3
21942: ST_TO_ADDR
// hc_gallery :=  ;
21943: LD_ADDR_OWVAR 33
21947: PUSH
21948: LD_STRING 
21950: ST_TO_ADDR
// hc_name :=  ;
21951: LD_ADDR_OWVAR 26
21955: PUSH
21956: LD_STRING 
21958: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21959: LD_INT 0
21961: PPUSH
21962: LD_EXP 34
21966: PPUSH
21967: LD_EXP 35
21971: PPUSH
21972: CALL_OW 12
21976: PPUSH
21977: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21981: CALL_OW 44
21985: PPUSH
21986: LD_INT 17
21988: PPUSH
21989: CALL_OW 52
// end ;
21993: GO 21924
21995: POP
21996: POP
// end ;
21997: PPOPN 1
21999: END
// every 2 2$0 do var i , j ;
22000: GO 22002
22002: DISABLE
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22007: LD_INT 14700
22009: PUSH
22010: LD_INT 33600
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: PPUSH
22020: LD_INT 2
22022: PPUSH
22023: CALL_OW 12
22027: ARRAY
22028: PPUSH
22029: CALL_OW 67
// disableHealAI = 1 ;
22033: LD_ADDR_EXP 33
22037: PUSH
22038: LD_INT 1
22040: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22041: LD_ADDR_VAR 0 1
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_INT 3
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 25
22058: PUSH
22059: LD_INT 4
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PPUSH
22070: CALL_OW 69
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22089
// ComExitBuilding ( i ) ;
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 122
22087: GO 22075
22089: POP
22090: POP
// wait ( 0 0$1 ) ;
22091: LD_INT 35
22093: PPUSH
22094: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22098: LD_INT 35
22100: PPUSH
22101: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22105: LD_ADDR_VAR 0 1
22109: PUSH
22110: LD_INT 22
22112: PUSH
22113: LD_INT 3
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 4
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PPUSH
22134: CALL_OW 69
22138: PUSH
22139: FOR_IN
22140: IFFALSE 22217
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22142: LD_ADDR_VAR 0 2
22146: PUSH
22147: LD_INT 17
22149: PPUSH
22150: LD_INT 22
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 25
22162: PUSH
22163: LD_INT 12
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 70
22178: PUSH
22179: FOR_IN
22180: IFFALSE 22213
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22182: LD_VAR 0 1
22186: PPUSH
22187: LD_VAR 0 2
22191: PPUSH
22192: CALL_OW 250
22196: PPUSH
22197: LD_VAR 0 2
22201: PPUSH
22202: CALL_OW 251
22206: PPUSH
22207: CALL_OW 191
// end ;
22211: GO 22179
22213: POP
22214: POP
// end ;
22215: GO 22139
22217: POP
22218: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22219: LD_INT 22
22221: PUSH
22222: LD_INT 3
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 25
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PPUSH
22243: CALL_OW 69
22247: PUSH
22248: LD_INT 0
22250: EQUAL
22251: PUSH
22252: LD_EXP 32
22256: PUSH
22257: LD_INT 6
22259: PUSH
22260: LD_INT 7
22262: PUSH
22263: LD_INT 8
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: LD_OWVAR 67
22275: ARRAY
22276: GREATEREQUAL
22277: OR
22278: PUSH
22279: LD_INT 17
22281: PPUSH
22282: LD_INT 22
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 12
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PPUSH
22306: CALL_OW 70
22310: PUSH
22311: LD_INT 0
22313: EQUAL
22314: OR
22315: IFFALSE 22098
// disableHealAI = 0 ;
22317: LD_ADDR_EXP 33
22321: PUSH
22322: LD_INT 0
22324: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22325: LD_ADDR_VAR 0 1
22329: PUSH
22330: LD_INT 22
22332: PUSH
22333: LD_INT 3
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 25
22342: PUSH
22343: LD_INT 12
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PPUSH
22354: CALL_OW 69
22358: PUSH
22359: FOR_IN
22360: IFFALSE 22376
// SetClass ( i , 16 ) ;
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_INT 16
22369: PPUSH
22370: CALL_OW 336
22374: GO 22359
22376: POP
22377: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22378: LD_ADDR_VAR 0 1
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 3
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 4
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 69
22411: PUSH
22412: FOR_IN
22413: IFFALSE 22432
// ComMoveXY ( i , 113 , 94 ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: LD_INT 113
22422: PPUSH
22423: LD_INT 94
22425: PPUSH
22426: CALL_OW 111
22430: GO 22412
22432: POP
22433: POP
// end ;
22434: PPOPN 2
22436: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22437: LD_INT 21
22439: PPUSH
22440: CALL_OW 255
22444: PUSH
22445: LD_INT 3
22447: EQUAL
22448: PUSH
22449: LD_INT 21
22451: PPUSH
22452: CALL_OW 302
22456: AND
22457: PUSH
22458: LD_INT 22
22460: PUSH
22461: LD_INT 3
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 34
22470: PUSH
22471: LD_INT 51
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PPUSH
22482: CALL_OW 69
22486: PUSH
22487: LD_INT 0
22489: EQUAL
22490: AND
22491: IFFALSE 22523
22493: GO 22495
22495: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22496: LD_INT 21
22498: PPUSH
22499: LD_INT 23
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: LD_INT 51
22510: PPUSH
22511: CALL_OW 185
// wait ( 5 5$0 ) ;
22515: LD_INT 10500
22517: PPUSH
22518: CALL_OW 67
// enable ;
22522: ENABLE
// end ; end_of_file
22523: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22524: LD_EXP 26
22528: PUSH
22529: LD_INT 0
22531: LESSEQUAL
22532: IFFALSE 22681
22534: GO 22536
22536: DISABLE
22537: LD_INT 0
22539: PPUSH
22540: PPUSH
22541: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 22
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 21
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 30
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 69
22604: ST_TO_ADDR
// for i in tmp do
22605: LD_ADDR_VAR 0 1
22609: PUSH
22610: LD_VAR 0 2
22614: PUSH
22615: FOR_IN
22616: IFFALSE 22649
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22618: LD_ADDR_VAR 0 3
22622: PUSH
22623: LD_VAR 0 3
22627: PUSH
22628: LD_VAR 0 1
22632: PPUSH
22633: CALL_OW 274
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 275
22645: PLUS
22646: ST_TO_ADDR
22647: GO 22615
22649: POP
22650: POP
// if yourCrates >= needCrates then
22651: LD_VAR 0 3
22655: PUSH
22656: LD_EXP 25
22660: GREATEREQUAL
22661: IFFALSE 22674
// FinishMission ( yourCrates ) else
22663: LD_VAR 0 3
22667: PPUSH
22668: CALL 22684 0 1
22672: GO 22681
// YouLost ( matmin ) ;
22674: LD_STRING matmin
22676: PPUSH
22677: CALL_OW 104
// end ;
22681: PPOPN 3
22683: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22684: LD_INT 0
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
// if killCounter = 0 then
22690: LD_EXP 47
22694: PUSH
22695: LD_INT 0
22697: EQUAL
22698: IFFALSE 22707
// SetAchievement ( ACH_SURV ) ;
22700: LD_STRING ACH_SURV
22702: PPUSH
22703: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22707: LD_INT 22
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 21
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: PUSH
22736: LD_INT 0
22738: EQUAL
22739: IFFALSE 22755
// begin wait ( 3 ) ;
22741: LD_INT 3
22743: PPUSH
22744: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22748: LD_STRING ACH_BASEDESTROYER
22750: PPUSH
22751: CALL_OW 543
// end ; m1 := false ;
22755: LD_ADDR_VAR 0 3
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// m2 := false ;
22763: LD_ADDR_VAR 0 4
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// m3 := false ;
22771: LD_ADDR_VAR 0 5
22775: PUSH
22776: LD_INT 0
22778: ST_TO_ADDR
// if crates + 100 > crates then
22779: LD_VAR 0 1
22783: PUSH
22784: LD_INT 100
22786: PLUS
22787: PUSH
22788: LD_VAR 0 1
22792: GREATER
22793: IFFALSE 22825
// begin AddMedal ( cans , 1 ) ;
22795: LD_STRING cans
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22805: LD_INT 1
22807: PPUSH
22808: LD_STRING 06_crates_1
22810: PPUSH
22811: CALL_OW 39
// m1 := true ;
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: LD_INT 1
22822: ST_TO_ADDR
// end else
22823: GO 22846
// begin AddMedal ( cans , - 1 ) ;
22825: LD_STRING cans
22827: PPUSH
22828: LD_INT 1
22830: NEG
22831: PPUSH
22832: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22836: LD_INT 0
22838: PPUSH
22839: LD_STRING 06_crates_1
22841: PPUSH
22842: CALL_OW 39
// end ; if unitLost < 3 then
22846: LD_EXP 30
22850: PUSH
22851: LD_INT 3
22853: LESS
22854: IFFALSE 22876
// begin AddMedal ( people , 1 ) ;
22856: LD_STRING people
22858: PPUSH
22859: LD_INT 1
22861: PPUSH
22862: CALL_OW 101
// m2 := true ;
22866: LD_ADDR_VAR 0 4
22870: PUSH
22871: LD_INT 1
22873: ST_TO_ADDR
// end else
22874: GO 22887
// begin AddMedal ( people , - 1 ) ;
22876: LD_STRING people
22878: PPUSH
22879: LD_INT 1
22881: NEG
22882: PPUSH
22883: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22887: LD_EXP 28
22891: PPUSH
22892: LD_STRING 06_remoteVehs_1
22894: PPUSH
22895: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22899: LD_EXP 28
22903: PUSH
22904: LD_INT 1
22906: EQUAL
22907: IFFALSE 22929
// begin AddMedal ( remote , 1 ) ;
22909: LD_STRING remote
22911: PPUSH
22912: LD_INT 1
22914: PPUSH
22915: CALL_OW 101
// m3 := true ;
22919: LD_ADDR_VAR 0 5
22923: PUSH
22924: LD_INT 1
22926: ST_TO_ADDR
// end else
22927: GO 22969
// begin if GetTech ( 18 , 1 ) = state_enabled then
22929: LD_INT 18
22931: PPUSH
22932: LD_INT 1
22934: PPUSH
22935: CALL_OW 321
22939: PUSH
22940: LD_INT 1
22942: EQUAL
22943: IFFALSE 22958
// begin AddMedal ( remote , - 1 ) ;
22945: LD_STRING remote
22947: PPUSH
22948: LD_INT 1
22950: NEG
22951: PPUSH
22952: CALL_OW 101
// end else
22956: GO 22969
// begin AddMedal ( remote , - 2 ) ;
22958: LD_STRING remote
22960: PPUSH
22961: LD_INT 2
22963: NEG
22964: PPUSH
22965: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22969: LD_VAR 0 3
22973: PUSH
22974: LD_VAR 0 4
22978: AND
22979: PUSH
22980: LD_VAR 0 5
22984: AND
22985: IFFALSE 23001
// begin wait ( 3 ) ;
22987: LD_INT 3
22989: PPUSH
22990: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22994: LD_STRING ACH_ASPEED_6
22996: PPUSH
22997: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23001: LD_OWVAR 67
23005: PUSH
23006: LD_INT 3
23008: EQUAL
23009: PUSH
23010: LD_VAR 0 3
23014: AND
23015: PUSH
23016: LD_VAR 0 4
23020: AND
23021: PUSH
23022: LD_VAR 0 5
23026: AND
23027: IFFALSE 23039
// SetAchievementEX ( ACH_AMER , 6 ) ;
23029: LD_STRING ACH_AMER
23031: PPUSH
23032: LD_INT 6
23034: PPUSH
23035: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23039: LD_EXP 20
23043: PPUSH
23044: LD_STRING 06_KurtStatus_1
23046: PPUSH
23047: CALL_OW 39
// GiveMedals ( Main ) ;
23051: LD_STRING Main
23053: PPUSH
23054: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23058: LD_INT 22
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 21
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 50
23080: PUSH
23081: EMPTY
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 25
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 25
23109: PUSH
23110: LD_INT 3
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 25
23119: PUSH
23120: LD_INT 4
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: PPUSH
23140: CALL_OW 69
23144: PPUSH
23145: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23149: LD_EXP 1
23153: PPUSH
23154: LD_EXP 43
23158: PUSH
23159: LD_STRING JMM
23161: STR
23162: PPUSH
23163: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23167: LD_EXP 2
23171: PPUSH
23172: LD_EXP 43
23176: PUSH
23177: LD_STRING Lisa
23179: STR
23180: PPUSH
23181: CALL 6356 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23185: LD_EXP 3
23189: PPUSH
23190: LD_EXP 43
23194: PUSH
23195: LD_STRING Bobby
23197: STR
23198: PPUSH
23199: CALL 6356 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23203: LD_EXP 4
23207: PPUSH
23208: LD_EXP 43
23212: PUSH
23213: LD_STRING Cyrus
23215: STR
23216: PPUSH
23217: CALL 6356 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23221: LD_EXP 5
23225: PPUSH
23226: LD_EXP 43
23230: PUSH
23231: LD_STRING Frank
23233: STR
23234: PPUSH
23235: CALL 6356 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23239: LD_EXP 6
23243: PPUSH
23244: LD_EXP 43
23248: PUSH
23249: LD_STRING Brown
23251: STR
23252: PPUSH
23253: CALL 6356 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23257: LD_EXP 7
23261: PPUSH
23262: LD_EXP 43
23266: PUSH
23267: LD_STRING Donaldson
23269: STR
23270: PPUSH
23271: CALL 6356 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23275: LD_EXP 8
23279: PPUSH
23280: LD_EXP 43
23284: PUSH
23285: LD_STRING Gladstone
23287: STR
23288: PPUSH
23289: CALL 6356 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23293: LD_EXP 9
23297: PPUSH
23298: LD_EXP 43
23302: PUSH
23303: LD_STRING Denis
23305: STR
23306: PPUSH
23307: CALL 6356 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23311: LD_EXP 15
23315: PPUSH
23316: LD_EXP 43
23320: PUSH
23321: LD_STRING Joan
23323: STR
23324: PPUSH
23325: CALL 6356 0 2
// if IsLive ( Joan ) then
23329: LD_EXP 15
23333: PPUSH
23334: CALL_OW 300
23338: IFFALSE 23352
// SaveCharacters ( Joan , Joan ) ;
23340: LD_EXP 15
23344: PPUSH
23345: LD_STRING Joan
23347: PPUSH
23348: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23352: LD_EXP 16
23356: PPUSH
23357: LD_STRING 06_JoanStatus_1
23359: PPUSH
23360: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23364: LD_INT 50
23366: PUSH
23367: EMPTY
23368: LIST
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 21
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 25
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 25
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 25
23415: PUSH
23416: LD_INT 3
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 4
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: PPUSH
23446: CALL_OW 69
23450: PUSH
23451: LD_EXP 1
23455: PUSH
23456: LD_EXP 2
23460: PUSH
23461: LD_EXP 3
23465: PUSH
23466: LD_EXP 4
23470: PUSH
23471: LD_EXP 5
23475: PUSH
23476: LD_EXP 6
23480: PUSH
23481: LD_EXP 7
23485: PUSH
23486: LD_EXP 8
23490: PUSH
23491: LD_EXP 9
23495: PUSH
23496: LD_EXP 15
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: DIFF
23513: PPUSH
23514: LD_STRING 06_other_survivors
23516: PPUSH
23517: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23521: LD_INT 50
23523: PUSH
23524: EMPTY
23525: LIST
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 21
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: LD_INT 25
23552: PUSH
23553: LD_INT 12
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 25
23562: PUSH
23563: LD_INT 16
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: PPUSH
23586: LD_STRING 06_other_apemans
23588: PPUSH
23589: CALL_OW 38
// YouWin ;
23593: CALL_OW 103
// end ; end_of_file
23597: LD_VAR 0 2
23601: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23602: LD_EXP 39
23606: PUSH
23607: LD_INT 3
23609: EQUAL
23610: IFFALSE 23705
23612: GO 23614
23614: DISABLE
// begin enable ;
23615: ENABLE
// sendedConvoys = 0 ;
23616: LD_ADDR_EXP 39
23620: PUSH
23621: LD_INT 0
23623: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 , 8 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23624: LD_INT 6
23626: PPUSH
23627: LD_INT 3
23629: PPUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 6
23638: PUSH
23639: LD_INT 8
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: PUSH
23648: LD_OWVAR 67
23652: ARRAY
23653: PPUSH
23654: LD_INT 0
23656: PPUSH
23657: LD_INT 0
23659: PPUSH
23660: LD_INT 0
23662: PPUSH
23663: LD_INT 0
23665: PPUSH
23666: LD_EXP 34
23670: PPUSH
23671: LD_EXP 35
23675: PPUSH
23676: CALL_OW 12
23680: PPUSH
23681: LD_INT 16
23683: PPUSH
23684: LD_INT 15
23686: PPUSH
23687: LD_INT 1
23689: PPUSH
23690: LD_INT 1
23692: PPUSH
23693: LD_INT 2
23695: PPUSH
23696: CALL_OW 12
23700: PPUSH
23701: CALL 10632 0 12
// end ; end_of_file
23705: END
// export function CreateNature ; var i , un ; begin
23706: LD_INT 0
23708: PPUSH
23709: PPUSH
23710: PPUSH
// for i = 1 to Difficulty + 2 do
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: DOUBLE
23717: LD_INT 1
23719: DEC
23720: ST_TO_ADDR
23721: LD_OWVAR 67
23725: PUSH
23726: LD_INT 2
23728: PLUS
23729: PUSH
23730: FOR_TO
23731: IFFALSE 23840
// begin hc_sex = sex_male ;
23733: LD_ADDR_OWVAR 27
23737: PUSH
23738: LD_INT 1
23740: ST_TO_ADDR
// uc_side = 0 ;
23741: LD_ADDR_OWVAR 20
23745: PUSH
23746: LD_INT 0
23748: ST_TO_ADDR
// uc_nation = nation_nature ;
23749: LD_ADDR_OWVAR 21
23753: PUSH
23754: LD_INT 0
23756: ST_TO_ADDR
// hc_class = class_tiger ;
23757: LD_ADDR_OWVAR 28
23761: PUSH
23762: LD_INT 14
23764: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23765: LD_ADDR_OWVAR 31
23769: PUSH
23770: LD_EXP 35
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23790: LD_ADDR_OWVAR 35
23794: PUSH
23795: LD_INT 5
23797: NEG
23798: PPUSH
23799: LD_INT 5
23801: PPUSH
23802: CALL_OW 12
23806: PUSH
23807: LD_OWVAR 67
23811: MUL
23812: ST_TO_ADDR
// un = CreateHuman ;
23813: LD_ADDR_VAR 0 3
23817: PUSH
23818: CALL_OW 44
23822: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23823: LD_VAR 0 3
23827: PPUSH
23828: LD_INT 18
23830: PPUSH
23831: LD_INT 0
23833: PPUSH
23834: CALL_OW 49
// end ;
23838: GO 23730
23840: POP
23841: POP
// for i = 1 to rand ( 3 , 4 ) do
23842: LD_ADDR_VAR 0 2
23846: PUSH
23847: DOUBLE
23848: LD_INT 1
23850: DEC
23851: ST_TO_ADDR
23852: LD_INT 3
23854: PPUSH
23855: LD_INT 4
23857: PPUSH
23858: CALL_OW 12
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23958
// begin hc_sex = sex_male ;
23866: LD_ADDR_OWVAR 27
23870: PUSH
23871: LD_INT 1
23873: ST_TO_ADDR
// uc_side = 0 ;
23874: LD_ADDR_OWVAR 20
23878: PUSH
23879: LD_INT 0
23881: ST_TO_ADDR
// uc_nation = nation_nature ;
23882: LD_ADDR_OWVAR 21
23886: PUSH
23887: LD_INT 0
23889: ST_TO_ADDR
// hc_class = 18 ;
23890: LD_ADDR_OWVAR 28
23894: PUSH
23895: LD_INT 18
23897: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23898: LD_ADDR_OWVAR 31
23902: PUSH
23903: LD_EXP 35
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: ST_TO_ADDR
// hc_agressivity = 0 ;
23923: LD_ADDR_OWVAR 35
23927: PUSH
23928: LD_INT 0
23930: ST_TO_ADDR
// un = CreateHuman ;
23931: LD_ADDR_VAR 0 3
23935: PUSH
23936: CALL_OW 44
23940: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23941: LD_VAR 0 3
23945: PPUSH
23946: LD_INT 18
23948: PPUSH
23949: LD_INT 0
23951: PPUSH
23952: CALL_OW 49
// end ;
23956: GO 23863
23958: POP
23959: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23960: LD_ADDR_VAR 0 2
23964: PUSH
23965: DOUBLE
23966: LD_INT 1
23968: DEC
23969: ST_TO_ADDR
23970: LD_INT 1
23972: PPUSH
23973: LD_INT 3
23975: PPUSH
23976: CALL_OW 12
23980: PUSH
23981: LD_OWVAR 67
23985: PLUS
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24137
// begin hc_sex = sex_male ;
23990: LD_ADDR_OWVAR 27
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// uc_side = 0 ;
23998: LD_ADDR_OWVAR 20
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// uc_nation = nation_nature ;
24006: LD_ADDR_OWVAR 21
24010: PUSH
24011: LD_INT 0
24013: ST_TO_ADDR
// hc_class = class_apeman ;
24014: LD_ADDR_OWVAR 28
24018: PUSH
24019: LD_INT 12
24021: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24022: LD_ADDR_OWVAR 31
24026: PUSH
24027: LD_INT 2
24029: PPUSH
24030: LD_INT 5
24032: PPUSH
24033: CALL_OW 12
24037: PUSH
24038: LD_INT 0
24040: PPUSH
24041: LD_INT 2
24043: PPUSH
24044: CALL_OW 12
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24061: LD_ADDR_OWVAR 35
24065: PUSH
24066: LD_INT 20
24068: PPUSH
24069: LD_INT 30
24071: PPUSH
24072: CALL_OW 12
24076: PUSH
24077: LD_INT 30
24079: PPUSH
24080: LD_INT 40
24082: PPUSH
24083: CALL_OW 12
24087: PUSH
24088: LD_INT 40
24090: PPUSH
24091: LD_INT 50
24093: PPUSH
24094: CALL_OW 12
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: PUSH
24104: LD_OWVAR 67
24108: ARRAY
24109: ST_TO_ADDR
// un = CreateHuman ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: CALL_OW 44
24119: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 19
24127: PPUSH
24128: LD_INT 0
24130: PPUSH
24131: CALL_OW 49
// end ;
24135: GO 23987
24137: POP
24138: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: DOUBLE
24145: LD_INT 1
24147: DEC
24148: ST_TO_ADDR
24149: LD_INT 5
24151: PPUSH
24152: LD_INT 6
24154: PPUSH
24155: CALL_OW 12
24159: PUSH
24160: LD_OWVAR 67
24164: PLUS
24165: PUSH
24166: FOR_TO
24167: IFFALSE 24275
// begin hc_sex = sex_male ;
24169: LD_ADDR_OWVAR 27
24173: PUSH
24174: LD_INT 1
24176: ST_TO_ADDR
// uc_side = 0 ;
24177: LD_ADDR_OWVAR 20
24181: PUSH
24182: LD_INT 0
24184: ST_TO_ADDR
// uc_nation = nation_nature ;
24185: LD_ADDR_OWVAR 21
24189: PUSH
24190: LD_INT 0
24192: ST_TO_ADDR
// hc_class = class_apeman ;
24193: LD_ADDR_OWVAR 28
24197: PUSH
24198: LD_INT 12
24200: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24201: LD_ADDR_OWVAR 31
24205: PUSH
24206: LD_INT 2
24208: PPUSH
24209: LD_INT 5
24211: PPUSH
24212: CALL_OW 12
24216: PUSH
24217: LD_INT 0
24219: PPUSH
24220: LD_INT 2
24222: PPUSH
24223: CALL_OW 12
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
// hc_agressivity = 0 ;
24240: LD_ADDR_OWVAR 35
24244: PUSH
24245: LD_INT 0
24247: ST_TO_ADDR
// un = CreateHuman ;
24248: LD_ADDR_VAR 0 3
24252: PUSH
24253: CALL_OW 44
24257: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24258: LD_VAR 0 3
24262: PPUSH
24263: LD_INT 20
24265: PPUSH
24266: LD_INT 0
24268: PPUSH
24269: CALL_OW 49
// end ;
24273: GO 24166
24275: POP
24276: POP
// end ; end_of_file end_of_file
24277: LD_VAR 0 1
24281: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24282: LD_INT 0
24284: PPUSH
// ar_miner := 81 ;
24285: LD_ADDR_EXP 58
24289: PUSH
24290: LD_INT 81
24292: ST_TO_ADDR
// ar_crane := 88 ;
24293: LD_ADDR_EXP 57
24297: PUSH
24298: LD_INT 88
24300: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24301: LD_ADDR_EXP 52
24305: PUSH
24306: LD_INT 89
24308: ST_TO_ADDR
// us_hack := 99 ;
24309: LD_ADDR_EXP 53
24313: PUSH
24314: LD_INT 99
24316: ST_TO_ADDR
// us_artillery := 97 ;
24317: LD_ADDR_EXP 54
24321: PUSH
24322: LD_INT 97
24324: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24325: LD_ADDR_EXP 55
24329: PUSH
24330: LD_INT 91
24332: ST_TO_ADDR
// ar_mortar := 92 ;
24333: LD_ADDR_EXP 56
24337: PUSH
24338: LD_INT 92
24340: ST_TO_ADDR
// ru_radar := 98 ;
24341: LD_ADDR_EXP 51
24345: PUSH
24346: LD_INT 98
24348: ST_TO_ADDR
// tech_Artillery := 80 ;
24349: LD_ADDR_EXP 59
24353: PUSH
24354: LD_INT 80
24356: ST_TO_ADDR
// tech_RadMat := 81 ;
24357: LD_ADDR_EXP 60
24361: PUSH
24362: LD_INT 81
24364: ST_TO_ADDR
// tech_BasicTools := 82 ;
24365: LD_ADDR_EXP 61
24369: PUSH
24370: LD_INT 82
24372: ST_TO_ADDR
// tech_Cargo := 83 ;
24373: LD_ADDR_EXP 62
24377: PUSH
24378: LD_INT 83
24380: ST_TO_ADDR
// tech_Track := 84 ;
24381: LD_ADDR_EXP 63
24385: PUSH
24386: LD_INT 84
24388: ST_TO_ADDR
// tech_Crane := 85 ;
24389: LD_ADDR_EXP 64
24393: PUSH
24394: LD_INT 85
24396: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24397: LD_ADDR_EXP 65
24401: PUSH
24402: LD_INT 86
24404: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24405: LD_ADDR_EXP 66
24409: PUSH
24410: LD_INT 87
24412: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24413: LD_ADDR_EXP 67
24417: PUSH
24418: LD_INT 88
24420: ST_TO_ADDR
// class_mastodont := 31 ;
24421: LD_ADDR_EXP 68
24425: PUSH
24426: LD_INT 31
24428: ST_TO_ADDR
// class_horse := 21 ;
24429: LD_ADDR_EXP 69
24433: PUSH
24434: LD_INT 21
24436: ST_TO_ADDR
// end ;
24437: LD_VAR 0 1
24441: RET
// every 1 do
24442: GO 24444
24444: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24445: CALL 24282 0 0
24449: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24450: LD_INT 0
24452: PPUSH
// if p2 = 100 then
24453: LD_VAR 0 2
24457: PUSH
24458: LD_INT 100
24460: EQUAL
24461: IFFALSE 25410
// begin if not StreamModeActive then
24463: LD_EXP 70
24467: NOT
24468: IFFALSE 24478
// StreamModeActive := true ;
24470: LD_ADDR_EXP 70
24474: PUSH
24475: LD_INT 1
24477: ST_TO_ADDR
// if p3 = 0 then
24478: LD_VAR 0 3
24482: PUSH
24483: LD_INT 0
24485: EQUAL
24486: IFFALSE 24492
// InitStreamMode ;
24488: CALL 25570 0 0
// if p3 = 1 then
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 1
24499: EQUAL
24500: IFFALSE 24510
// sRocket := true ;
24502: LD_ADDR_EXP 75
24506: PUSH
24507: LD_INT 1
24509: ST_TO_ADDR
// if p3 = 2 then
24510: LD_VAR 0 3
24514: PUSH
24515: LD_INT 2
24517: EQUAL
24518: IFFALSE 24528
// sSpeed := true ;
24520: LD_ADDR_EXP 74
24524: PUSH
24525: LD_INT 1
24527: ST_TO_ADDR
// if p3 = 3 then
24528: LD_VAR 0 3
24532: PUSH
24533: LD_INT 3
24535: EQUAL
24536: IFFALSE 24546
// sEngine := true ;
24538: LD_ADDR_EXP 76
24542: PUSH
24543: LD_INT 1
24545: ST_TO_ADDR
// if p3 = 4 then
24546: LD_VAR 0 3
24550: PUSH
24551: LD_INT 4
24553: EQUAL
24554: IFFALSE 24564
// sSpec := true ;
24556: LD_ADDR_EXP 73
24560: PUSH
24561: LD_INT 1
24563: ST_TO_ADDR
// if p3 = 5 then
24564: LD_VAR 0 3
24568: PUSH
24569: LD_INT 5
24571: EQUAL
24572: IFFALSE 24582
// sLevel := true ;
24574: LD_ADDR_EXP 77
24578: PUSH
24579: LD_INT 1
24581: ST_TO_ADDR
// if p3 = 6 then
24582: LD_VAR 0 3
24586: PUSH
24587: LD_INT 6
24589: EQUAL
24590: IFFALSE 24600
// sArmoury := true ;
24592: LD_ADDR_EXP 78
24596: PUSH
24597: LD_INT 1
24599: ST_TO_ADDR
// if p3 = 7 then
24600: LD_VAR 0 3
24604: PUSH
24605: LD_INT 7
24607: EQUAL
24608: IFFALSE 24618
// sRadar := true ;
24610: LD_ADDR_EXP 79
24614: PUSH
24615: LD_INT 1
24617: ST_TO_ADDR
// if p3 = 8 then
24618: LD_VAR 0 3
24622: PUSH
24623: LD_INT 8
24625: EQUAL
24626: IFFALSE 24636
// sBunker := true ;
24628: LD_ADDR_EXP 80
24632: PUSH
24633: LD_INT 1
24635: ST_TO_ADDR
// if p3 = 9 then
24636: LD_VAR 0 3
24640: PUSH
24641: LD_INT 9
24643: EQUAL
24644: IFFALSE 24654
// sHack := true ;
24646: LD_ADDR_EXP 81
24650: PUSH
24651: LD_INT 1
24653: ST_TO_ADDR
// if p3 = 10 then
24654: LD_VAR 0 3
24658: PUSH
24659: LD_INT 10
24661: EQUAL
24662: IFFALSE 24672
// sFire := true ;
24664: LD_ADDR_EXP 82
24668: PUSH
24669: LD_INT 1
24671: ST_TO_ADDR
// if p3 = 11 then
24672: LD_VAR 0 3
24676: PUSH
24677: LD_INT 11
24679: EQUAL
24680: IFFALSE 24690
// sRefresh := true ;
24682: LD_ADDR_EXP 83
24686: PUSH
24687: LD_INT 1
24689: ST_TO_ADDR
// if p3 = 12 then
24690: LD_VAR 0 3
24694: PUSH
24695: LD_INT 12
24697: EQUAL
24698: IFFALSE 24708
// sExp := true ;
24700: LD_ADDR_EXP 84
24704: PUSH
24705: LD_INT 1
24707: ST_TO_ADDR
// if p3 = 13 then
24708: LD_VAR 0 3
24712: PUSH
24713: LD_INT 13
24715: EQUAL
24716: IFFALSE 24726
// sDepot := true ;
24718: LD_ADDR_EXP 85
24722: PUSH
24723: LD_INT 1
24725: ST_TO_ADDR
// if p3 = 14 then
24726: LD_VAR 0 3
24730: PUSH
24731: LD_INT 14
24733: EQUAL
24734: IFFALSE 24744
// sFlag := true ;
24736: LD_ADDR_EXP 86
24740: PUSH
24741: LD_INT 1
24743: ST_TO_ADDR
// if p3 = 15 then
24744: LD_VAR 0 3
24748: PUSH
24749: LD_INT 15
24751: EQUAL
24752: IFFALSE 24762
// sKamikadze := true ;
24754: LD_ADDR_EXP 94
24758: PUSH
24759: LD_INT 1
24761: ST_TO_ADDR
// if p3 = 16 then
24762: LD_VAR 0 3
24766: PUSH
24767: LD_INT 16
24769: EQUAL
24770: IFFALSE 24780
// sTroll := true ;
24772: LD_ADDR_EXP 95
24776: PUSH
24777: LD_INT 1
24779: ST_TO_ADDR
// if p3 = 17 then
24780: LD_VAR 0 3
24784: PUSH
24785: LD_INT 17
24787: EQUAL
24788: IFFALSE 24798
// sSlow := true ;
24790: LD_ADDR_EXP 96
24794: PUSH
24795: LD_INT 1
24797: ST_TO_ADDR
// if p3 = 18 then
24798: LD_VAR 0 3
24802: PUSH
24803: LD_INT 18
24805: EQUAL
24806: IFFALSE 24816
// sLack := true ;
24808: LD_ADDR_EXP 97
24812: PUSH
24813: LD_INT 1
24815: ST_TO_ADDR
// if p3 = 19 then
24816: LD_VAR 0 3
24820: PUSH
24821: LD_INT 19
24823: EQUAL
24824: IFFALSE 24834
// sTank := true ;
24826: LD_ADDR_EXP 99
24830: PUSH
24831: LD_INT 1
24833: ST_TO_ADDR
// if p3 = 20 then
24834: LD_VAR 0 3
24838: PUSH
24839: LD_INT 20
24841: EQUAL
24842: IFFALSE 24852
// sRemote := true ;
24844: LD_ADDR_EXP 100
24848: PUSH
24849: LD_INT 1
24851: ST_TO_ADDR
// if p3 = 21 then
24852: LD_VAR 0 3
24856: PUSH
24857: LD_INT 21
24859: EQUAL
24860: IFFALSE 24870
// sPowell := true ;
24862: LD_ADDR_EXP 101
24866: PUSH
24867: LD_INT 1
24869: ST_TO_ADDR
// if p3 = 22 then
24870: LD_VAR 0 3
24874: PUSH
24875: LD_INT 22
24877: EQUAL
24878: IFFALSE 24888
// sTeleport := true ;
24880: LD_ADDR_EXP 104
24884: PUSH
24885: LD_INT 1
24887: ST_TO_ADDR
// if p3 = 23 then
24888: LD_VAR 0 3
24892: PUSH
24893: LD_INT 23
24895: EQUAL
24896: IFFALSE 24906
// sOilTower := true ;
24898: LD_ADDR_EXP 106
24902: PUSH
24903: LD_INT 1
24905: ST_TO_ADDR
// if p3 = 24 then
24906: LD_VAR 0 3
24910: PUSH
24911: LD_INT 24
24913: EQUAL
24914: IFFALSE 24924
// sShovel := true ;
24916: LD_ADDR_EXP 107
24920: PUSH
24921: LD_INT 1
24923: ST_TO_ADDR
// if p3 = 25 then
24924: LD_VAR 0 3
24928: PUSH
24929: LD_INT 25
24931: EQUAL
24932: IFFALSE 24942
// sSheik := true ;
24934: LD_ADDR_EXP 108
24938: PUSH
24939: LD_INT 1
24941: ST_TO_ADDR
// if p3 = 26 then
24942: LD_VAR 0 3
24946: PUSH
24947: LD_INT 26
24949: EQUAL
24950: IFFALSE 24960
// sEarthquake := true ;
24952: LD_ADDR_EXP 110
24956: PUSH
24957: LD_INT 1
24959: ST_TO_ADDR
// if p3 = 27 then
24960: LD_VAR 0 3
24964: PUSH
24965: LD_INT 27
24967: EQUAL
24968: IFFALSE 24978
// sAI := true ;
24970: LD_ADDR_EXP 111
24974: PUSH
24975: LD_INT 1
24977: ST_TO_ADDR
// if p3 = 28 then
24978: LD_VAR 0 3
24982: PUSH
24983: LD_INT 28
24985: EQUAL
24986: IFFALSE 24996
// sCargo := true ;
24988: LD_ADDR_EXP 114
24992: PUSH
24993: LD_INT 1
24995: ST_TO_ADDR
// if p3 = 29 then
24996: LD_VAR 0 3
25000: PUSH
25001: LD_INT 29
25003: EQUAL
25004: IFFALSE 25014
// sDLaser := true ;
25006: LD_ADDR_EXP 115
25010: PUSH
25011: LD_INT 1
25013: ST_TO_ADDR
// if p3 = 30 then
25014: LD_VAR 0 3
25018: PUSH
25019: LD_INT 30
25021: EQUAL
25022: IFFALSE 25032
// sExchange := true ;
25024: LD_ADDR_EXP 116
25028: PUSH
25029: LD_INT 1
25031: ST_TO_ADDR
// if p3 = 31 then
25032: LD_VAR 0 3
25036: PUSH
25037: LD_INT 31
25039: EQUAL
25040: IFFALSE 25050
// sFac := true ;
25042: LD_ADDR_EXP 117
25046: PUSH
25047: LD_INT 1
25049: ST_TO_ADDR
// if p3 = 32 then
25050: LD_VAR 0 3
25054: PUSH
25055: LD_INT 32
25057: EQUAL
25058: IFFALSE 25068
// sPower := true ;
25060: LD_ADDR_EXP 118
25064: PUSH
25065: LD_INT 1
25067: ST_TO_ADDR
// if p3 = 33 then
25068: LD_VAR 0 3
25072: PUSH
25073: LD_INT 33
25075: EQUAL
25076: IFFALSE 25086
// sRandom := true ;
25078: LD_ADDR_EXP 119
25082: PUSH
25083: LD_INT 1
25085: ST_TO_ADDR
// if p3 = 34 then
25086: LD_VAR 0 3
25090: PUSH
25091: LD_INT 34
25093: EQUAL
25094: IFFALSE 25104
// sShield := true ;
25096: LD_ADDR_EXP 120
25100: PUSH
25101: LD_INT 1
25103: ST_TO_ADDR
// if p3 = 35 then
25104: LD_VAR 0 3
25108: PUSH
25109: LD_INT 35
25111: EQUAL
25112: IFFALSE 25122
// sTime := true ;
25114: LD_ADDR_EXP 121
25118: PUSH
25119: LD_INT 1
25121: ST_TO_ADDR
// if p3 = 36 then
25122: LD_VAR 0 3
25126: PUSH
25127: LD_INT 36
25129: EQUAL
25130: IFFALSE 25140
// sTools := true ;
25132: LD_ADDR_EXP 122
25136: PUSH
25137: LD_INT 1
25139: ST_TO_ADDR
// if p3 = 101 then
25140: LD_VAR 0 3
25144: PUSH
25145: LD_INT 101
25147: EQUAL
25148: IFFALSE 25158
// sSold := true ;
25150: LD_ADDR_EXP 87
25154: PUSH
25155: LD_INT 1
25157: ST_TO_ADDR
// if p3 = 102 then
25158: LD_VAR 0 3
25162: PUSH
25163: LD_INT 102
25165: EQUAL
25166: IFFALSE 25176
// sDiff := true ;
25168: LD_ADDR_EXP 88
25172: PUSH
25173: LD_INT 1
25175: ST_TO_ADDR
// if p3 = 103 then
25176: LD_VAR 0 3
25180: PUSH
25181: LD_INT 103
25183: EQUAL
25184: IFFALSE 25194
// sFog := true ;
25186: LD_ADDR_EXP 91
25190: PUSH
25191: LD_INT 1
25193: ST_TO_ADDR
// if p3 = 104 then
25194: LD_VAR 0 3
25198: PUSH
25199: LD_INT 104
25201: EQUAL
25202: IFFALSE 25212
// sReset := true ;
25204: LD_ADDR_EXP 92
25208: PUSH
25209: LD_INT 1
25211: ST_TO_ADDR
// if p3 = 105 then
25212: LD_VAR 0 3
25216: PUSH
25217: LD_INT 105
25219: EQUAL
25220: IFFALSE 25230
// sSun := true ;
25222: LD_ADDR_EXP 93
25226: PUSH
25227: LD_INT 1
25229: ST_TO_ADDR
// if p3 = 106 then
25230: LD_VAR 0 3
25234: PUSH
25235: LD_INT 106
25237: EQUAL
25238: IFFALSE 25248
// sTiger := true ;
25240: LD_ADDR_EXP 89
25244: PUSH
25245: LD_INT 1
25247: ST_TO_ADDR
// if p3 = 107 then
25248: LD_VAR 0 3
25252: PUSH
25253: LD_INT 107
25255: EQUAL
25256: IFFALSE 25266
// sBomb := true ;
25258: LD_ADDR_EXP 90
25262: PUSH
25263: LD_INT 1
25265: ST_TO_ADDR
// if p3 = 108 then
25266: LD_VAR 0 3
25270: PUSH
25271: LD_INT 108
25273: EQUAL
25274: IFFALSE 25284
// sWound := true ;
25276: LD_ADDR_EXP 98
25280: PUSH
25281: LD_INT 1
25283: ST_TO_ADDR
// if p3 = 109 then
25284: LD_VAR 0 3
25288: PUSH
25289: LD_INT 109
25291: EQUAL
25292: IFFALSE 25302
// sBetray := true ;
25294: LD_ADDR_EXP 102
25298: PUSH
25299: LD_INT 1
25301: ST_TO_ADDR
// if p3 = 110 then
25302: LD_VAR 0 3
25306: PUSH
25307: LD_INT 110
25309: EQUAL
25310: IFFALSE 25320
// sContamin := true ;
25312: LD_ADDR_EXP 103
25316: PUSH
25317: LD_INT 1
25319: ST_TO_ADDR
// if p3 = 111 then
25320: LD_VAR 0 3
25324: PUSH
25325: LD_INT 111
25327: EQUAL
25328: IFFALSE 25338
// sOil := true ;
25330: LD_ADDR_EXP 105
25334: PUSH
25335: LD_INT 1
25337: ST_TO_ADDR
// if p3 = 112 then
25338: LD_VAR 0 3
25342: PUSH
25343: LD_INT 112
25345: EQUAL
25346: IFFALSE 25356
// sStu := true ;
25348: LD_ADDR_EXP 109
25352: PUSH
25353: LD_INT 1
25355: ST_TO_ADDR
// if p3 = 113 then
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 113
25363: EQUAL
25364: IFFALSE 25374
// sBazooka := true ;
25366: LD_ADDR_EXP 112
25370: PUSH
25371: LD_INT 1
25373: ST_TO_ADDR
// if p3 = 114 then
25374: LD_VAR 0 3
25378: PUSH
25379: LD_INT 114
25381: EQUAL
25382: IFFALSE 25392
// sMortar := true ;
25384: LD_ADDR_EXP 113
25388: PUSH
25389: LD_INT 1
25391: ST_TO_ADDR
// if p3 = 115 then
25392: LD_VAR 0 3
25396: PUSH
25397: LD_INT 115
25399: EQUAL
25400: IFFALSE 25410
// sRanger := true ;
25402: LD_ADDR_EXP 123
25406: PUSH
25407: LD_INT 1
25409: ST_TO_ADDR
// end ; if p2 = 101 then
25410: LD_VAR 0 2
25414: PUSH
25415: LD_INT 101
25417: EQUAL
25418: IFFALSE 25546
// begin case p3 of 1 :
25420: LD_VAR 0 3
25424: PUSH
25425: LD_INT 1
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25440
25433: POP
// hHackUnlimitedResources ; 2 :
25434: CALL 36583 0 0
25438: GO 25546
25440: LD_INT 2
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25455
25448: POP
// hHackSetLevel10 ; 3 :
25449: CALL 36716 0 0
25453: GO 25546
25455: LD_INT 3
25457: DOUBLE
25458: EQUAL
25459: IFTRUE 25463
25461: GO 25470
25463: POP
// hHackSetLevel10YourUnits ; 4 :
25464: CALL 36801 0 0
25468: GO 25546
25470: LD_INT 4
25472: DOUBLE
25473: EQUAL
25474: IFTRUE 25478
25476: GO 25485
25478: POP
// hHackInvincible ; 5 :
25479: CALL 37249 0 0
25483: GO 25546
25485: LD_INT 5
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25500
25493: POP
// hHackInvisible ; 6 :
25494: CALL 37360 0 0
25498: GO 25546
25500: LD_INT 6
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25515
25508: POP
// hHackChangeYourSide ; 7 :
25509: CALL 37417 0 0
25513: GO 25546
25515: LD_INT 7
25517: DOUBLE
25518: EQUAL
25519: IFTRUE 25523
25521: GO 25530
25523: POP
// hHackChangeUnitSide ; 8 :
25524: CALL 37459 0 0
25528: GO 25546
25530: LD_INT 8
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25545
25538: POP
// hHackFog ; end ;
25539: CALL 37560 0 0
25543: GO 25546
25545: POP
// end ; end ;
25546: LD_VAR 0 7
25550: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25551: GO 25553
25553: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25554: LD_STRING initStreamRollete();
25556: PPUSH
25557: CALL_OW 559
// InitStreamMode ;
25561: CALL 25570 0 0
// DefineStreamItems ( ) ;
25565: CALL 26010 0 0
// end ;
25569: END
// function InitStreamMode ; begin
25570: LD_INT 0
25572: PPUSH
// streamModeActive := false ;
25573: LD_ADDR_EXP 70
25577: PUSH
25578: LD_INT 0
25580: ST_TO_ADDR
// normalCounter := 36 ;
25581: LD_ADDR_EXP 71
25585: PUSH
25586: LD_INT 36
25588: ST_TO_ADDR
// hardcoreCounter := 16 ;
25589: LD_ADDR_EXP 72
25593: PUSH
25594: LD_INT 16
25596: ST_TO_ADDR
// sRocket := false ;
25597: LD_ADDR_EXP 75
25601: PUSH
25602: LD_INT 0
25604: ST_TO_ADDR
// sSpeed := false ;
25605: LD_ADDR_EXP 74
25609: PUSH
25610: LD_INT 0
25612: ST_TO_ADDR
// sEngine := false ;
25613: LD_ADDR_EXP 76
25617: PUSH
25618: LD_INT 0
25620: ST_TO_ADDR
// sSpec := false ;
25621: LD_ADDR_EXP 73
25625: PUSH
25626: LD_INT 0
25628: ST_TO_ADDR
// sLevel := false ;
25629: LD_ADDR_EXP 77
25633: PUSH
25634: LD_INT 0
25636: ST_TO_ADDR
// sArmoury := false ;
25637: LD_ADDR_EXP 78
25641: PUSH
25642: LD_INT 0
25644: ST_TO_ADDR
// sRadar := false ;
25645: LD_ADDR_EXP 79
25649: PUSH
25650: LD_INT 0
25652: ST_TO_ADDR
// sBunker := false ;
25653: LD_ADDR_EXP 80
25657: PUSH
25658: LD_INT 0
25660: ST_TO_ADDR
// sHack := false ;
25661: LD_ADDR_EXP 81
25665: PUSH
25666: LD_INT 0
25668: ST_TO_ADDR
// sFire := false ;
25669: LD_ADDR_EXP 82
25673: PUSH
25674: LD_INT 0
25676: ST_TO_ADDR
// sRefresh := false ;
25677: LD_ADDR_EXP 83
25681: PUSH
25682: LD_INT 0
25684: ST_TO_ADDR
// sExp := false ;
25685: LD_ADDR_EXP 84
25689: PUSH
25690: LD_INT 0
25692: ST_TO_ADDR
// sDepot := false ;
25693: LD_ADDR_EXP 85
25697: PUSH
25698: LD_INT 0
25700: ST_TO_ADDR
// sFlag := false ;
25701: LD_ADDR_EXP 86
25705: PUSH
25706: LD_INT 0
25708: ST_TO_ADDR
// sKamikadze := false ;
25709: LD_ADDR_EXP 94
25713: PUSH
25714: LD_INT 0
25716: ST_TO_ADDR
// sTroll := false ;
25717: LD_ADDR_EXP 95
25721: PUSH
25722: LD_INT 0
25724: ST_TO_ADDR
// sSlow := false ;
25725: LD_ADDR_EXP 96
25729: PUSH
25730: LD_INT 0
25732: ST_TO_ADDR
// sLack := false ;
25733: LD_ADDR_EXP 97
25737: PUSH
25738: LD_INT 0
25740: ST_TO_ADDR
// sTank := false ;
25741: LD_ADDR_EXP 99
25745: PUSH
25746: LD_INT 0
25748: ST_TO_ADDR
// sRemote := false ;
25749: LD_ADDR_EXP 100
25753: PUSH
25754: LD_INT 0
25756: ST_TO_ADDR
// sPowell := false ;
25757: LD_ADDR_EXP 101
25761: PUSH
25762: LD_INT 0
25764: ST_TO_ADDR
// sTeleport := false ;
25765: LD_ADDR_EXP 104
25769: PUSH
25770: LD_INT 0
25772: ST_TO_ADDR
// sOilTower := false ;
25773: LD_ADDR_EXP 106
25777: PUSH
25778: LD_INT 0
25780: ST_TO_ADDR
// sShovel := false ;
25781: LD_ADDR_EXP 107
25785: PUSH
25786: LD_INT 0
25788: ST_TO_ADDR
// sSheik := false ;
25789: LD_ADDR_EXP 108
25793: PUSH
25794: LD_INT 0
25796: ST_TO_ADDR
// sEarthquake := false ;
25797: LD_ADDR_EXP 110
25801: PUSH
25802: LD_INT 0
25804: ST_TO_ADDR
// sAI := false ;
25805: LD_ADDR_EXP 111
25809: PUSH
25810: LD_INT 0
25812: ST_TO_ADDR
// sCargo := false ;
25813: LD_ADDR_EXP 114
25817: PUSH
25818: LD_INT 0
25820: ST_TO_ADDR
// sDLaser := false ;
25821: LD_ADDR_EXP 115
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
// sExchange := false ;
25829: LD_ADDR_EXP 116
25833: PUSH
25834: LD_INT 0
25836: ST_TO_ADDR
// sFac := false ;
25837: LD_ADDR_EXP 117
25841: PUSH
25842: LD_INT 0
25844: ST_TO_ADDR
// sPower := false ;
25845: LD_ADDR_EXP 118
25849: PUSH
25850: LD_INT 0
25852: ST_TO_ADDR
// sRandom := false ;
25853: LD_ADDR_EXP 119
25857: PUSH
25858: LD_INT 0
25860: ST_TO_ADDR
// sShield := false ;
25861: LD_ADDR_EXP 120
25865: PUSH
25866: LD_INT 0
25868: ST_TO_ADDR
// sTime := false ;
25869: LD_ADDR_EXP 121
25873: PUSH
25874: LD_INT 0
25876: ST_TO_ADDR
// sTools := false ;
25877: LD_ADDR_EXP 122
25881: PUSH
25882: LD_INT 0
25884: ST_TO_ADDR
// sSold := false ;
25885: LD_ADDR_EXP 87
25889: PUSH
25890: LD_INT 0
25892: ST_TO_ADDR
// sDiff := false ;
25893: LD_ADDR_EXP 88
25897: PUSH
25898: LD_INT 0
25900: ST_TO_ADDR
// sFog := false ;
25901: LD_ADDR_EXP 91
25905: PUSH
25906: LD_INT 0
25908: ST_TO_ADDR
// sReset := false ;
25909: LD_ADDR_EXP 92
25913: PUSH
25914: LD_INT 0
25916: ST_TO_ADDR
// sSun := false ;
25917: LD_ADDR_EXP 93
25921: PUSH
25922: LD_INT 0
25924: ST_TO_ADDR
// sTiger := false ;
25925: LD_ADDR_EXP 89
25929: PUSH
25930: LD_INT 0
25932: ST_TO_ADDR
// sBomb := false ;
25933: LD_ADDR_EXP 90
25937: PUSH
25938: LD_INT 0
25940: ST_TO_ADDR
// sWound := false ;
25941: LD_ADDR_EXP 98
25945: PUSH
25946: LD_INT 0
25948: ST_TO_ADDR
// sBetray := false ;
25949: LD_ADDR_EXP 102
25953: PUSH
25954: LD_INT 0
25956: ST_TO_ADDR
// sContamin := false ;
25957: LD_ADDR_EXP 103
25961: PUSH
25962: LD_INT 0
25964: ST_TO_ADDR
// sOil := false ;
25965: LD_ADDR_EXP 105
25969: PUSH
25970: LD_INT 0
25972: ST_TO_ADDR
// sStu := false ;
25973: LD_ADDR_EXP 109
25977: PUSH
25978: LD_INT 0
25980: ST_TO_ADDR
// sBazooka := false ;
25981: LD_ADDR_EXP 112
25985: PUSH
25986: LD_INT 0
25988: ST_TO_ADDR
// sMortar := false ;
25989: LD_ADDR_EXP 113
25993: PUSH
25994: LD_INT 0
25996: ST_TO_ADDR
// sRanger := false ;
25997: LD_ADDR_EXP 123
26001: PUSH
26002: LD_INT 0
26004: ST_TO_ADDR
// end ;
26005: LD_VAR 0 1
26009: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
// result := [ ] ;
26017: LD_ADDR_VAR 0 1
26021: PUSH
26022: EMPTY
26023: ST_TO_ADDR
// if campaign_id = 1 then
26024: LD_OWVAR 69
26028: PUSH
26029: LD_INT 1
26031: EQUAL
26032: IFFALSE 28970
// begin case mission_number of 1 :
26034: LD_OWVAR 70
26038: PUSH
26039: LD_INT 1
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26111
26047: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 4
26058: PUSH
26059: LD_INT 11
26061: PUSH
26062: LD_INT 12
26064: PUSH
26065: LD_INT 15
26067: PUSH
26068: LD_INT 16
26070: PUSH
26071: LD_INT 22
26073: PUSH
26074: LD_INT 23
26076: PUSH
26077: LD_INT 26
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 101
26093: PUSH
26094: LD_INT 102
26096: PUSH
26097: LD_INT 106
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: ST_TO_ADDR
26109: GO 28968
26111: LD_INT 2
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26119
26117: GO 26191
26119: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26120: LD_ADDR_VAR 0 1
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 4
26130: PUSH
26131: LD_INT 11
26133: PUSH
26134: LD_INT 12
26136: PUSH
26137: LD_INT 15
26139: PUSH
26140: LD_INT 16
26142: PUSH
26143: LD_INT 22
26145: PUSH
26146: LD_INT 23
26148: PUSH
26149: LD_INT 26
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 101
26165: PUSH
26166: LD_INT 102
26168: PUSH
26169: LD_INT 105
26171: PUSH
26172: LD_INT 106
26174: PUSH
26175: LD_INT 108
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: ST_TO_ADDR
26189: GO 28968
26191: LD_INT 3
26193: DOUBLE
26194: EQUAL
26195: IFTRUE 26199
26197: GO 26275
26199: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26200: LD_ADDR_VAR 0 1
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 4
26210: PUSH
26211: LD_INT 5
26213: PUSH
26214: LD_INT 11
26216: PUSH
26217: LD_INT 12
26219: PUSH
26220: LD_INT 15
26222: PUSH
26223: LD_INT 16
26225: PUSH
26226: LD_INT 22
26228: PUSH
26229: LD_INT 26
26231: PUSH
26232: LD_INT 36
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 101
26249: PUSH
26250: LD_INT 102
26252: PUSH
26253: LD_INT 105
26255: PUSH
26256: LD_INT 106
26258: PUSH
26259: LD_INT 108
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: ST_TO_ADDR
26273: GO 28968
26275: LD_INT 4
26277: DOUBLE
26278: EQUAL
26279: IFTRUE 26283
26281: GO 26367
26283: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26284: LD_ADDR_VAR 0 1
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 4
26294: PUSH
26295: LD_INT 5
26297: PUSH
26298: LD_INT 8
26300: PUSH
26301: LD_INT 11
26303: PUSH
26304: LD_INT 12
26306: PUSH
26307: LD_INT 15
26309: PUSH
26310: LD_INT 16
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_INT 23
26318: PUSH
26319: LD_INT 26
26321: PUSH
26322: LD_INT 36
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 101
26341: PUSH
26342: LD_INT 102
26344: PUSH
26345: LD_INT 105
26347: PUSH
26348: LD_INT 106
26350: PUSH
26351: LD_INT 108
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: ST_TO_ADDR
26365: GO 28968
26367: LD_INT 5
26369: DOUBLE
26370: EQUAL
26371: IFTRUE 26375
26373: GO 26475
26375: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26376: LD_ADDR_VAR 0 1
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 4
26386: PUSH
26387: LD_INT 5
26389: PUSH
26390: LD_INT 6
26392: PUSH
26393: LD_INT 8
26395: PUSH
26396: LD_INT 11
26398: PUSH
26399: LD_INT 12
26401: PUSH
26402: LD_INT 15
26404: PUSH
26405: LD_INT 16
26407: PUSH
26408: LD_INT 22
26410: PUSH
26411: LD_INT 23
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 26
26419: PUSH
26420: LD_INT 36
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 101
26441: PUSH
26442: LD_INT 102
26444: PUSH
26445: LD_INT 105
26447: PUSH
26448: LD_INT 106
26450: PUSH
26451: LD_INT 108
26453: PUSH
26454: LD_INT 109
26456: PUSH
26457: LD_INT 112
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: ST_TO_ADDR
26473: GO 28968
26475: LD_INT 6
26477: DOUBLE
26478: EQUAL
26479: IFTRUE 26483
26481: GO 26603
26483: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 4
26494: PUSH
26495: LD_INT 5
26497: PUSH
26498: LD_INT 6
26500: PUSH
26501: LD_INT 8
26503: PUSH
26504: LD_INT 11
26506: PUSH
26507: LD_INT 12
26509: PUSH
26510: LD_INT 15
26512: PUSH
26513: LD_INT 16
26515: PUSH
26516: LD_INT 20
26518: PUSH
26519: LD_INT 21
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_INT 23
26527: PUSH
26528: LD_INT 25
26530: PUSH
26531: LD_INT 26
26533: PUSH
26534: LD_INT 30
26536: PUSH
26537: LD_INT 31
26539: PUSH
26540: LD_INT 32
26542: PUSH
26543: LD_INT 36
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 101
26569: PUSH
26570: LD_INT 102
26572: PUSH
26573: LD_INT 105
26575: PUSH
26576: LD_INT 106
26578: PUSH
26579: LD_INT 108
26581: PUSH
26582: LD_INT 109
26584: PUSH
26585: LD_INT 112
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: ST_TO_ADDR
26601: GO 28968
26603: LD_INT 7
26605: DOUBLE
26606: EQUAL
26607: IFTRUE 26611
26609: GO 26711
26611: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26612: LD_ADDR_VAR 0 1
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: LD_INT 4
26622: PUSH
26623: LD_INT 5
26625: PUSH
26626: LD_INT 7
26628: PUSH
26629: LD_INT 11
26631: PUSH
26632: LD_INT 12
26634: PUSH
26635: LD_INT 15
26637: PUSH
26638: LD_INT 16
26640: PUSH
26641: LD_INT 20
26643: PUSH
26644: LD_INT 21
26646: PUSH
26647: LD_INT 22
26649: PUSH
26650: LD_INT 23
26652: PUSH
26653: LD_INT 25
26655: PUSH
26656: LD_INT 26
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 101
26677: PUSH
26678: LD_INT 102
26680: PUSH
26681: LD_INT 103
26683: PUSH
26684: LD_INT 105
26686: PUSH
26687: LD_INT 106
26689: PUSH
26690: LD_INT 108
26692: PUSH
26693: LD_INT 112
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: ST_TO_ADDR
26709: GO 28968
26711: LD_INT 8
26713: DOUBLE
26714: EQUAL
26715: IFTRUE 26719
26717: GO 26847
26719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26720: LD_ADDR_VAR 0 1
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 4
26730: PUSH
26731: LD_INT 5
26733: PUSH
26734: LD_INT 6
26736: PUSH
26737: LD_INT 7
26739: PUSH
26740: LD_INT 8
26742: PUSH
26743: LD_INT 11
26745: PUSH
26746: LD_INT 12
26748: PUSH
26749: LD_INT 15
26751: PUSH
26752: LD_INT 16
26754: PUSH
26755: LD_INT 20
26757: PUSH
26758: LD_INT 21
26760: PUSH
26761: LD_INT 22
26763: PUSH
26764: LD_INT 23
26766: PUSH
26767: LD_INT 25
26769: PUSH
26770: LD_INT 26
26772: PUSH
26773: LD_INT 30
26775: PUSH
26776: LD_INT 31
26778: PUSH
26779: LD_INT 32
26781: PUSH
26782: LD_INT 36
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 101
26809: PUSH
26810: LD_INT 102
26812: PUSH
26813: LD_INT 103
26815: PUSH
26816: LD_INT 105
26818: PUSH
26819: LD_INT 106
26821: PUSH
26822: LD_INT 108
26824: PUSH
26825: LD_INT 109
26827: PUSH
26828: LD_INT 112
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: ST_TO_ADDR
26845: GO 28968
26847: LD_INT 9
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26991
26855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 4
26866: PUSH
26867: LD_INT 5
26869: PUSH
26870: LD_INT 6
26872: PUSH
26873: LD_INT 7
26875: PUSH
26876: LD_INT 8
26878: PUSH
26879: LD_INT 11
26881: PUSH
26882: LD_INT 12
26884: PUSH
26885: LD_INT 15
26887: PUSH
26888: LD_INT 16
26890: PUSH
26891: LD_INT 20
26893: PUSH
26894: LD_INT 21
26896: PUSH
26897: LD_INT 22
26899: PUSH
26900: LD_INT 23
26902: PUSH
26903: LD_INT 25
26905: PUSH
26906: LD_INT 26
26908: PUSH
26909: LD_INT 28
26911: PUSH
26912: LD_INT 30
26914: PUSH
26915: LD_INT 31
26917: PUSH
26918: LD_INT 32
26920: PUSH
26921: LD_INT 36
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 101
26949: PUSH
26950: LD_INT 102
26952: PUSH
26953: LD_INT 103
26955: PUSH
26956: LD_INT 105
26958: PUSH
26959: LD_INT 106
26961: PUSH
26962: LD_INT 108
26964: PUSH
26965: LD_INT 109
26967: PUSH
26968: LD_INT 112
26970: PUSH
26971: LD_INT 114
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: ST_TO_ADDR
26989: GO 28968
26991: LD_INT 10
26993: DOUBLE
26994: EQUAL
26995: IFTRUE 26999
26997: GO 27183
26999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
27000: LD_ADDR_VAR 0 1
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 4
27010: PUSH
27011: LD_INT 5
27013: PUSH
27014: LD_INT 6
27016: PUSH
27017: LD_INT 7
27019: PUSH
27020: LD_INT 8
27022: PUSH
27023: LD_INT 9
27025: PUSH
27026: LD_INT 10
27028: PUSH
27029: LD_INT 11
27031: PUSH
27032: LD_INT 12
27034: PUSH
27035: LD_INT 13
27037: PUSH
27038: LD_INT 14
27040: PUSH
27041: LD_INT 15
27043: PUSH
27044: LD_INT 16
27046: PUSH
27047: LD_INT 17
27049: PUSH
27050: LD_INT 18
27052: PUSH
27053: LD_INT 19
27055: PUSH
27056: LD_INT 20
27058: PUSH
27059: LD_INT 21
27061: PUSH
27062: LD_INT 22
27064: PUSH
27065: LD_INT 23
27067: PUSH
27068: LD_INT 24
27070: PUSH
27071: LD_INT 25
27073: PUSH
27074: LD_INT 26
27076: PUSH
27077: LD_INT 28
27079: PUSH
27080: LD_INT 30
27082: PUSH
27083: LD_INT 31
27085: PUSH
27086: LD_INT 32
27088: PUSH
27089: LD_INT 36
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 101
27125: PUSH
27126: LD_INT 102
27128: PUSH
27129: LD_INT 103
27131: PUSH
27132: LD_INT 104
27134: PUSH
27135: LD_INT 105
27137: PUSH
27138: LD_INT 106
27140: PUSH
27141: LD_INT 107
27143: PUSH
27144: LD_INT 108
27146: PUSH
27147: LD_INT 109
27149: PUSH
27150: LD_INT 110
27152: PUSH
27153: LD_INT 111
27155: PUSH
27156: LD_INT 112
27158: PUSH
27159: LD_INT 114
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: ST_TO_ADDR
27181: GO 28968
27183: LD_INT 11
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27383
27191: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27192: LD_ADDR_VAR 0 1
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: LD_INT 4
27205: PUSH
27206: LD_INT 5
27208: PUSH
27209: LD_INT 6
27211: PUSH
27212: LD_INT 7
27214: PUSH
27215: LD_INT 8
27217: PUSH
27218: LD_INT 9
27220: PUSH
27221: LD_INT 10
27223: PUSH
27224: LD_INT 11
27226: PUSH
27227: LD_INT 12
27229: PUSH
27230: LD_INT 13
27232: PUSH
27233: LD_INT 14
27235: PUSH
27236: LD_INT 15
27238: PUSH
27239: LD_INT 16
27241: PUSH
27242: LD_INT 17
27244: PUSH
27245: LD_INT 18
27247: PUSH
27248: LD_INT 19
27250: PUSH
27251: LD_INT 20
27253: PUSH
27254: LD_INT 21
27256: PUSH
27257: LD_INT 22
27259: PUSH
27260: LD_INT 23
27262: PUSH
27263: LD_INT 24
27265: PUSH
27266: LD_INT 25
27268: PUSH
27269: LD_INT 26
27271: PUSH
27272: LD_INT 28
27274: PUSH
27275: LD_INT 30
27277: PUSH
27278: LD_INT 31
27280: PUSH
27281: LD_INT 32
27283: PUSH
27284: LD_INT 34
27286: PUSH
27287: LD_INT 36
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 101
27325: PUSH
27326: LD_INT 102
27328: PUSH
27329: LD_INT 103
27331: PUSH
27332: LD_INT 104
27334: PUSH
27335: LD_INT 105
27337: PUSH
27338: LD_INT 106
27340: PUSH
27341: LD_INT 107
27343: PUSH
27344: LD_INT 108
27346: PUSH
27347: LD_INT 109
27349: PUSH
27350: LD_INT 110
27352: PUSH
27353: LD_INT 111
27355: PUSH
27356: LD_INT 112
27358: PUSH
27359: LD_INT 114
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: ST_TO_ADDR
27381: GO 28968
27383: LD_INT 12
27385: DOUBLE
27386: EQUAL
27387: IFTRUE 27391
27389: GO 27599
27391: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27392: LD_ADDR_VAR 0 1
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: LD_INT 4
27408: PUSH
27409: LD_INT 5
27411: PUSH
27412: LD_INT 6
27414: PUSH
27415: LD_INT 7
27417: PUSH
27418: LD_INT 8
27420: PUSH
27421: LD_INT 9
27423: PUSH
27424: LD_INT 10
27426: PUSH
27427: LD_INT 11
27429: PUSH
27430: LD_INT 12
27432: PUSH
27433: LD_INT 13
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: LD_INT 15
27441: PUSH
27442: LD_INT 16
27444: PUSH
27445: LD_INT 17
27447: PUSH
27448: LD_INT 18
27450: PUSH
27451: LD_INT 19
27453: PUSH
27454: LD_INT 20
27456: PUSH
27457: LD_INT 21
27459: PUSH
27460: LD_INT 22
27462: PUSH
27463: LD_INT 23
27465: PUSH
27466: LD_INT 24
27468: PUSH
27469: LD_INT 25
27471: PUSH
27472: LD_INT 26
27474: PUSH
27475: LD_INT 27
27477: PUSH
27478: LD_INT 28
27480: PUSH
27481: LD_INT 30
27483: PUSH
27484: LD_INT 31
27486: PUSH
27487: LD_INT 32
27489: PUSH
27490: LD_INT 33
27492: PUSH
27493: LD_INT 34
27495: PUSH
27496: LD_INT 36
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 101
27537: PUSH
27538: LD_INT 102
27540: PUSH
27541: LD_INT 103
27543: PUSH
27544: LD_INT 104
27546: PUSH
27547: LD_INT 105
27549: PUSH
27550: LD_INT 106
27552: PUSH
27553: LD_INT 107
27555: PUSH
27556: LD_INT 108
27558: PUSH
27559: LD_INT 109
27561: PUSH
27562: LD_INT 110
27564: PUSH
27565: LD_INT 111
27567: PUSH
27568: LD_INT 112
27570: PUSH
27571: LD_INT 113
27573: PUSH
27574: LD_INT 114
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: ST_TO_ADDR
27597: GO 28968
27599: LD_INT 13
27601: DOUBLE
27602: EQUAL
27603: IFTRUE 27607
27605: GO 27803
27607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27608: LD_ADDR_VAR 0 1
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: LD_INT 4
27624: PUSH
27625: LD_INT 5
27627: PUSH
27628: LD_INT 8
27630: PUSH
27631: LD_INT 9
27633: PUSH
27634: LD_INT 10
27636: PUSH
27637: LD_INT 11
27639: PUSH
27640: LD_INT 12
27642: PUSH
27643: LD_INT 14
27645: PUSH
27646: LD_INT 15
27648: PUSH
27649: LD_INT 16
27651: PUSH
27652: LD_INT 17
27654: PUSH
27655: LD_INT 18
27657: PUSH
27658: LD_INT 19
27660: PUSH
27661: LD_INT 20
27663: PUSH
27664: LD_INT 21
27666: PUSH
27667: LD_INT 22
27669: PUSH
27670: LD_INT 23
27672: PUSH
27673: LD_INT 24
27675: PUSH
27676: LD_INT 25
27678: PUSH
27679: LD_INT 26
27681: PUSH
27682: LD_INT 27
27684: PUSH
27685: LD_INT 28
27687: PUSH
27688: LD_INT 30
27690: PUSH
27691: LD_INT 31
27693: PUSH
27694: LD_INT 32
27696: PUSH
27697: LD_INT 33
27699: PUSH
27700: LD_INT 34
27702: PUSH
27703: LD_INT 36
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 101
27741: PUSH
27742: LD_INT 102
27744: PUSH
27745: LD_INT 103
27747: PUSH
27748: LD_INT 104
27750: PUSH
27751: LD_INT 105
27753: PUSH
27754: LD_INT 106
27756: PUSH
27757: LD_INT 107
27759: PUSH
27760: LD_INT 108
27762: PUSH
27763: LD_INT 109
27765: PUSH
27766: LD_INT 110
27768: PUSH
27769: LD_INT 111
27771: PUSH
27772: LD_INT 112
27774: PUSH
27775: LD_INT 113
27777: PUSH
27778: LD_INT 114
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: ST_TO_ADDR
27801: GO 28968
27803: LD_INT 14
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 28023
27811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27812: LD_ADDR_VAR 0 1
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 3
27825: PUSH
27826: LD_INT 4
27828: PUSH
27829: LD_INT 5
27831: PUSH
27832: LD_INT 6
27834: PUSH
27835: LD_INT 7
27837: PUSH
27838: LD_INT 8
27840: PUSH
27841: LD_INT 9
27843: PUSH
27844: LD_INT 10
27846: PUSH
27847: LD_INT 11
27849: PUSH
27850: LD_INT 12
27852: PUSH
27853: LD_INT 13
27855: PUSH
27856: LD_INT 14
27858: PUSH
27859: LD_INT 15
27861: PUSH
27862: LD_INT 16
27864: PUSH
27865: LD_INT 17
27867: PUSH
27868: LD_INT 18
27870: PUSH
27871: LD_INT 19
27873: PUSH
27874: LD_INT 20
27876: PUSH
27877: LD_INT 21
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_INT 23
27885: PUSH
27886: LD_INT 24
27888: PUSH
27889: LD_INT 25
27891: PUSH
27892: LD_INT 26
27894: PUSH
27895: LD_INT 27
27897: PUSH
27898: LD_INT 28
27900: PUSH
27901: LD_INT 29
27903: PUSH
27904: LD_INT 30
27906: PUSH
27907: LD_INT 31
27909: PUSH
27910: LD_INT 32
27912: PUSH
27913: LD_INT 33
27915: PUSH
27916: LD_INT 34
27918: PUSH
27919: LD_INT 36
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 101
27961: PUSH
27962: LD_INT 102
27964: PUSH
27965: LD_INT 103
27967: PUSH
27968: LD_INT 104
27970: PUSH
27971: LD_INT 105
27973: PUSH
27974: LD_INT 106
27976: PUSH
27977: LD_INT 107
27979: PUSH
27980: LD_INT 108
27982: PUSH
27983: LD_INT 109
27985: PUSH
27986: LD_INT 110
27988: PUSH
27989: LD_INT 111
27991: PUSH
27992: LD_INT 112
27994: PUSH
27995: LD_INT 113
27997: PUSH
27998: LD_INT 114
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: ST_TO_ADDR
28021: GO 28968
28023: LD_INT 15
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28031
28029: GO 28243
28031: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28032: LD_ADDR_VAR 0 1
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 3
28045: PUSH
28046: LD_INT 4
28048: PUSH
28049: LD_INT 5
28051: PUSH
28052: LD_INT 6
28054: PUSH
28055: LD_INT 7
28057: PUSH
28058: LD_INT 8
28060: PUSH
28061: LD_INT 9
28063: PUSH
28064: LD_INT 10
28066: PUSH
28067: LD_INT 11
28069: PUSH
28070: LD_INT 12
28072: PUSH
28073: LD_INT 13
28075: PUSH
28076: LD_INT 14
28078: PUSH
28079: LD_INT 15
28081: PUSH
28082: LD_INT 16
28084: PUSH
28085: LD_INT 17
28087: PUSH
28088: LD_INT 18
28090: PUSH
28091: LD_INT 19
28093: PUSH
28094: LD_INT 20
28096: PUSH
28097: LD_INT 21
28099: PUSH
28100: LD_INT 22
28102: PUSH
28103: LD_INT 23
28105: PUSH
28106: LD_INT 24
28108: PUSH
28109: LD_INT 25
28111: PUSH
28112: LD_INT 26
28114: PUSH
28115: LD_INT 27
28117: PUSH
28118: LD_INT 28
28120: PUSH
28121: LD_INT 29
28123: PUSH
28124: LD_INT 30
28126: PUSH
28127: LD_INT 31
28129: PUSH
28130: LD_INT 32
28132: PUSH
28133: LD_INT 33
28135: PUSH
28136: LD_INT 34
28138: PUSH
28139: LD_INT 36
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 101
28181: PUSH
28182: LD_INT 102
28184: PUSH
28185: LD_INT 103
28187: PUSH
28188: LD_INT 104
28190: PUSH
28191: LD_INT 105
28193: PUSH
28194: LD_INT 106
28196: PUSH
28197: LD_INT 107
28199: PUSH
28200: LD_INT 108
28202: PUSH
28203: LD_INT 109
28205: PUSH
28206: LD_INT 110
28208: PUSH
28209: LD_INT 111
28211: PUSH
28212: LD_INT 112
28214: PUSH
28215: LD_INT 113
28217: PUSH
28218: LD_INT 114
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: ST_TO_ADDR
28241: GO 28968
28243: LD_INT 16
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28375
28251: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28252: LD_ADDR_VAR 0 1
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 4
28262: PUSH
28263: LD_INT 5
28265: PUSH
28266: LD_INT 7
28268: PUSH
28269: LD_INT 11
28271: PUSH
28272: LD_INT 12
28274: PUSH
28275: LD_INT 15
28277: PUSH
28278: LD_INT 16
28280: PUSH
28281: LD_INT 20
28283: PUSH
28284: LD_INT 21
28286: PUSH
28287: LD_INT 22
28289: PUSH
28290: LD_INT 23
28292: PUSH
28293: LD_INT 25
28295: PUSH
28296: LD_INT 26
28298: PUSH
28299: LD_INT 30
28301: PUSH
28302: LD_INT 31
28304: PUSH
28305: LD_INT 32
28307: PUSH
28308: LD_INT 33
28310: PUSH
28311: LD_INT 34
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 101
28337: PUSH
28338: LD_INT 102
28340: PUSH
28341: LD_INT 103
28343: PUSH
28344: LD_INT 106
28346: PUSH
28347: LD_INT 108
28349: PUSH
28350: LD_INT 112
28352: PUSH
28353: LD_INT 113
28355: PUSH
28356: LD_INT 114
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: ST_TO_ADDR
28373: GO 28968
28375: LD_INT 17
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28595
28383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28384: LD_ADDR_VAR 0 1
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: LD_INT 6
28406: PUSH
28407: LD_INT 7
28409: PUSH
28410: LD_INT 8
28412: PUSH
28413: LD_INT 9
28415: PUSH
28416: LD_INT 10
28418: PUSH
28419: LD_INT 11
28421: PUSH
28422: LD_INT 12
28424: PUSH
28425: LD_INT 13
28427: PUSH
28428: LD_INT 14
28430: PUSH
28431: LD_INT 15
28433: PUSH
28434: LD_INT 16
28436: PUSH
28437: LD_INT 17
28439: PUSH
28440: LD_INT 18
28442: PUSH
28443: LD_INT 19
28445: PUSH
28446: LD_INT 20
28448: PUSH
28449: LD_INT 21
28451: PUSH
28452: LD_INT 22
28454: PUSH
28455: LD_INT 23
28457: PUSH
28458: LD_INT 24
28460: PUSH
28461: LD_INT 25
28463: PUSH
28464: LD_INT 26
28466: PUSH
28467: LD_INT 27
28469: PUSH
28470: LD_INT 28
28472: PUSH
28473: LD_INT 29
28475: PUSH
28476: LD_INT 30
28478: PUSH
28479: LD_INT 31
28481: PUSH
28482: LD_INT 32
28484: PUSH
28485: LD_INT 33
28487: PUSH
28488: LD_INT 34
28490: PUSH
28491: LD_INT 36
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 101
28533: PUSH
28534: LD_INT 102
28536: PUSH
28537: LD_INT 103
28539: PUSH
28540: LD_INT 104
28542: PUSH
28543: LD_INT 105
28545: PUSH
28546: LD_INT 106
28548: PUSH
28549: LD_INT 107
28551: PUSH
28552: LD_INT 108
28554: PUSH
28555: LD_INT 109
28557: PUSH
28558: LD_INT 110
28560: PUSH
28561: LD_INT 111
28563: PUSH
28564: LD_INT 112
28566: PUSH
28567: LD_INT 113
28569: PUSH
28570: LD_INT 114
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: ST_TO_ADDR
28593: GO 28968
28595: LD_INT 18
28597: DOUBLE
28598: EQUAL
28599: IFTRUE 28603
28601: GO 28739
28603: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: LD_INT 4
28614: PUSH
28615: LD_INT 5
28617: PUSH
28618: LD_INT 7
28620: PUSH
28621: LD_INT 11
28623: PUSH
28624: LD_INT 12
28626: PUSH
28627: LD_INT 15
28629: PUSH
28630: LD_INT 16
28632: PUSH
28633: LD_INT 20
28635: PUSH
28636: LD_INT 21
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_INT 23
28644: PUSH
28645: LD_INT 25
28647: PUSH
28648: LD_INT 26
28650: PUSH
28651: LD_INT 30
28653: PUSH
28654: LD_INT 31
28656: PUSH
28657: LD_INT 32
28659: PUSH
28660: LD_INT 33
28662: PUSH
28663: LD_INT 34
28665: PUSH
28666: LD_INT 35
28668: PUSH
28669: LD_INT 36
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 101
28697: PUSH
28698: LD_INT 102
28700: PUSH
28701: LD_INT 103
28703: PUSH
28704: LD_INT 106
28706: PUSH
28707: LD_INT 108
28709: PUSH
28710: LD_INT 112
28712: PUSH
28713: LD_INT 113
28715: PUSH
28716: LD_INT 114
28718: PUSH
28719: LD_INT 115
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: ST_TO_ADDR
28737: GO 28968
28739: LD_INT 19
28741: DOUBLE
28742: EQUAL
28743: IFTRUE 28747
28745: GO 28967
28747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28748: LD_ADDR_VAR 0 1
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: LD_INT 3
28761: PUSH
28762: LD_INT 4
28764: PUSH
28765: LD_INT 5
28767: PUSH
28768: LD_INT 6
28770: PUSH
28771: LD_INT 7
28773: PUSH
28774: LD_INT 8
28776: PUSH
28777: LD_INT 9
28779: PUSH
28780: LD_INT 10
28782: PUSH
28783: LD_INT 11
28785: PUSH
28786: LD_INT 12
28788: PUSH
28789: LD_INT 13
28791: PUSH
28792: LD_INT 14
28794: PUSH
28795: LD_INT 15
28797: PUSH
28798: LD_INT 16
28800: PUSH
28801: LD_INT 17
28803: PUSH
28804: LD_INT 18
28806: PUSH
28807: LD_INT 19
28809: PUSH
28810: LD_INT 20
28812: PUSH
28813: LD_INT 21
28815: PUSH
28816: LD_INT 22
28818: PUSH
28819: LD_INT 23
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: LD_INT 25
28827: PUSH
28828: LD_INT 26
28830: PUSH
28831: LD_INT 27
28833: PUSH
28834: LD_INT 28
28836: PUSH
28837: LD_INT 29
28839: PUSH
28840: LD_INT 30
28842: PUSH
28843: LD_INT 31
28845: PUSH
28846: LD_INT 32
28848: PUSH
28849: LD_INT 33
28851: PUSH
28852: LD_INT 34
28854: PUSH
28855: LD_INT 35
28857: PUSH
28858: LD_INT 36
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 101
28901: PUSH
28902: LD_INT 102
28904: PUSH
28905: LD_INT 103
28907: PUSH
28908: LD_INT 104
28910: PUSH
28911: LD_INT 105
28913: PUSH
28914: LD_INT 106
28916: PUSH
28917: LD_INT 107
28919: PUSH
28920: LD_INT 108
28922: PUSH
28923: LD_INT 109
28925: PUSH
28926: LD_INT 110
28928: PUSH
28929: LD_INT 111
28931: PUSH
28932: LD_INT 112
28934: PUSH
28935: LD_INT 113
28937: PUSH
28938: LD_INT 114
28940: PUSH
28941: LD_INT 115
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 28968
28967: POP
// end else
28968: GO 29187
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28970: LD_ADDR_VAR 0 1
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: LD_INT 4
28986: PUSH
28987: LD_INT 5
28989: PUSH
28990: LD_INT 6
28992: PUSH
28993: LD_INT 7
28995: PUSH
28996: LD_INT 8
28998: PUSH
28999: LD_INT 9
29001: PUSH
29002: LD_INT 10
29004: PUSH
29005: LD_INT 11
29007: PUSH
29008: LD_INT 12
29010: PUSH
29011: LD_INT 13
29013: PUSH
29014: LD_INT 14
29016: PUSH
29017: LD_INT 15
29019: PUSH
29020: LD_INT 16
29022: PUSH
29023: LD_INT 17
29025: PUSH
29026: LD_INT 18
29028: PUSH
29029: LD_INT 19
29031: PUSH
29032: LD_INT 20
29034: PUSH
29035: LD_INT 21
29037: PUSH
29038: LD_INT 22
29040: PUSH
29041: LD_INT 23
29043: PUSH
29044: LD_INT 24
29046: PUSH
29047: LD_INT 25
29049: PUSH
29050: LD_INT 26
29052: PUSH
29053: LD_INT 27
29055: PUSH
29056: LD_INT 28
29058: PUSH
29059: LD_INT 29
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 31
29067: PUSH
29068: LD_INT 32
29070: PUSH
29071: LD_INT 33
29073: PUSH
29074: LD_INT 34
29076: PUSH
29077: LD_INT 35
29079: PUSH
29080: LD_INT 36
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 101
29123: PUSH
29124: LD_INT 102
29126: PUSH
29127: LD_INT 103
29129: PUSH
29130: LD_INT 104
29132: PUSH
29133: LD_INT 105
29135: PUSH
29136: LD_INT 106
29138: PUSH
29139: LD_INT 107
29141: PUSH
29142: LD_INT 108
29144: PUSH
29145: LD_INT 109
29147: PUSH
29148: LD_INT 110
29150: PUSH
29151: LD_INT 111
29153: PUSH
29154: LD_INT 112
29156: PUSH
29157: LD_INT 113
29159: PUSH
29160: LD_INT 114
29162: PUSH
29163: LD_INT 115
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: ST_TO_ADDR
// if result then
29187: LD_VAR 0 1
29191: IFFALSE 29480
// begin normal :=  ;
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_STRING 
29200: ST_TO_ADDR
// hardcore :=  ;
29201: LD_ADDR_VAR 0 4
29205: PUSH
29206: LD_STRING 
29208: ST_TO_ADDR
// for i = 1 to normalCounter do
29209: LD_ADDR_VAR 0 5
29213: PUSH
29214: DOUBLE
29215: LD_INT 1
29217: DEC
29218: ST_TO_ADDR
29219: LD_EXP 71
29223: PUSH
29224: FOR_TO
29225: IFFALSE 29326
// begin tmp := 0 ;
29227: LD_ADDR_VAR 0 2
29231: PUSH
29232: LD_STRING 0
29234: ST_TO_ADDR
// if result [ 1 ] then
29235: LD_VAR 0 1
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: IFFALSE 29308
// if result [ 1 ] [ 1 ] = i then
29245: LD_VAR 0 1
29249: PUSH
29250: LD_INT 1
29252: ARRAY
29253: PUSH
29254: LD_INT 1
29256: ARRAY
29257: PUSH
29258: LD_VAR 0 5
29262: EQUAL
29263: IFFALSE 29308
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29265: LD_ADDR_VAR 0 1
29269: PUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: LD_INT 1
29277: PPUSH
29278: LD_VAR 0 1
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: PPUSH
29287: LD_INT 1
29289: PPUSH
29290: CALL_OW 3
29294: PPUSH
29295: CALL_OW 1
29299: ST_TO_ADDR
// tmp := 1 ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_STRING 1
29307: ST_TO_ADDR
// end ; normal := normal & tmp ;
29308: LD_ADDR_VAR 0 3
29312: PUSH
29313: LD_VAR 0 3
29317: PUSH
29318: LD_VAR 0 2
29322: STR
29323: ST_TO_ADDR
// end ;
29324: GO 29224
29326: POP
29327: POP
// for i = 1 to hardcoreCounter do
29328: LD_ADDR_VAR 0 5
29332: PUSH
29333: DOUBLE
29334: LD_INT 1
29336: DEC
29337: ST_TO_ADDR
29338: LD_EXP 72
29342: PUSH
29343: FOR_TO
29344: IFFALSE 29449
// begin tmp := 0 ;
29346: LD_ADDR_VAR 0 2
29350: PUSH
29351: LD_STRING 0
29353: ST_TO_ADDR
// if result [ 2 ] then
29354: LD_VAR 0 1
29358: PUSH
29359: LD_INT 2
29361: ARRAY
29362: IFFALSE 29431
// if result [ 2 ] [ 1 ] = 100 + i then
29364: LD_VAR 0 1
29368: PUSH
29369: LD_INT 2
29371: ARRAY
29372: PUSH
29373: LD_INT 1
29375: ARRAY
29376: PUSH
29377: LD_INT 100
29379: PUSH
29380: LD_VAR 0 5
29384: PLUS
29385: EQUAL
29386: IFFALSE 29431
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29388: LD_ADDR_VAR 0 1
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: LD_INT 2
29400: PPUSH
29401: LD_VAR 0 1
29405: PUSH
29406: LD_INT 2
29408: ARRAY
29409: PPUSH
29410: LD_INT 1
29412: PPUSH
29413: CALL_OW 3
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
// tmp := 1 ;
29423: LD_ADDR_VAR 0 2
29427: PUSH
29428: LD_STRING 1
29430: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: LD_VAR 0 4
29440: PUSH
29441: LD_VAR 0 2
29445: STR
29446: ST_TO_ADDR
// end ;
29447: GO 29343
29449: POP
29450: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29451: LD_STRING getStreamItemsFromMission("
29453: PUSH
29454: LD_VAR 0 3
29458: STR
29459: PUSH
29460: LD_STRING ","
29462: STR
29463: PUSH
29464: LD_VAR 0 4
29468: STR
29469: PUSH
29470: LD_STRING ")
29472: STR
29473: PPUSH
29474: CALL_OW 559
// end else
29478: GO 29487
// ToLua ( getStreamItemsFromMission("","") ) ;
29480: LD_STRING getStreamItemsFromMission("","")
29482: PPUSH
29483: CALL_OW 559
// end ;
29487: LD_VAR 0 1
29491: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29492: LD_EXP 70
29496: PUSH
29497: LD_EXP 75
29501: AND
29502: IFFALSE 29626
29504: GO 29506
29506: DISABLE
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
// begin enable ;
29511: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29512: LD_ADDR_VAR 0 2
29516: PUSH
29517: LD_INT 22
29519: PUSH
29520: LD_OWVAR 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: LD_INT 34
29534: PUSH
29535: LD_INT 7
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 34
29544: PUSH
29545: LD_INT 45
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 34
29554: PUSH
29555: LD_INT 28
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 34
29564: PUSH
29565: LD_INT 47
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PPUSH
29583: CALL_OW 69
29587: ST_TO_ADDR
// if not tmp then
29588: LD_VAR 0 2
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29626
// for i in tmp do
29597: LD_ADDR_VAR 0 1
29601: PUSH
29602: LD_VAR 0 2
29606: PUSH
29607: FOR_IN
29608: IFFALSE 29624
// begin SetLives ( i , 0 ) ;
29610: LD_VAR 0 1
29614: PPUSH
29615: LD_INT 0
29617: PPUSH
29618: CALL_OW 234
// end ;
29622: GO 29607
29624: POP
29625: POP
// end ;
29626: PPOPN 2
29628: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29629: LD_EXP 70
29633: PUSH
29634: LD_EXP 76
29638: AND
29639: IFFALSE 29723
29641: GO 29643
29643: DISABLE
29644: LD_INT 0
29646: PPUSH
29647: PPUSH
// begin enable ;
29648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29649: LD_ADDR_VAR 0 2
29653: PUSH
29654: LD_INT 22
29656: PUSH
29657: LD_OWVAR 2
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 32
29668: PUSH
29669: LD_INT 3
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 69
29684: ST_TO_ADDR
// if not tmp then
29685: LD_VAR 0 2
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 29723
// for i in tmp do
29694: LD_ADDR_VAR 0 1
29698: PUSH
29699: LD_VAR 0 2
29703: PUSH
29704: FOR_IN
29705: IFFALSE 29721
// begin SetLives ( i , 0 ) ;
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_INT 0
29714: PPUSH
29715: CALL_OW 234
// end ;
29719: GO 29704
29721: POP
29722: POP
// end ;
29723: PPOPN 2
29725: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29726: LD_EXP 70
29730: PUSH
29731: LD_EXP 73
29735: AND
29736: IFFALSE 29829
29738: GO 29740
29740: DISABLE
29741: LD_INT 0
29743: PPUSH
// begin enable ;
29744: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_INT 22
29752: PUSH
29753: LD_OWVAR 2
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 2
29764: PUSH
29765: LD_INT 25
29767: PUSH
29768: LD_INT 5
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 25
29777: PUSH
29778: LD_INT 9
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 25
29787: PUSH
29788: LD_INT 8
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 69
29809: PUSH
29810: FOR_IN
29811: IFFALSE 29827
// begin SetClass ( i , 1 ) ;
29813: LD_VAR 0 1
29817: PPUSH
29818: LD_INT 1
29820: PPUSH
29821: CALL_OW 336
// end ;
29825: GO 29810
29827: POP
29828: POP
// end ;
29829: PPOPN 1
29831: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29832: LD_EXP 70
29836: PUSH
29837: LD_EXP 74
29841: AND
29842: PUSH
29843: LD_OWVAR 65
29847: PUSH
29848: LD_INT 7
29850: LESS
29851: AND
29852: IFFALSE 29866
29854: GO 29856
29856: DISABLE
// begin enable ;
29857: ENABLE
// game_speed := 7 ;
29858: LD_ADDR_OWVAR 65
29862: PUSH
29863: LD_INT 7
29865: ST_TO_ADDR
// end ;
29866: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29867: LD_EXP 70
29871: PUSH
29872: LD_EXP 77
29876: AND
29877: IFFALSE 30079
29879: GO 29881
29881: DISABLE
29882: LD_INT 0
29884: PPUSH
29885: PPUSH
29886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_INT 81
29894: PUSH
29895: LD_OWVAR 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 21
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PPUSH
29918: CALL_OW 69
29922: ST_TO_ADDR
// if not tmp then
29923: LD_VAR 0 3
29927: NOT
29928: IFFALSE 29932
// exit ;
29930: GO 30079
// if tmp > 5 then
29932: LD_VAR 0 3
29936: PUSH
29937: LD_INT 5
29939: GREATER
29940: IFFALSE 29952
// k := 5 else
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 5
29949: ST_TO_ADDR
29950: GO 29962
// k := tmp ;
29952: LD_ADDR_VAR 0 2
29956: PUSH
29957: LD_VAR 0 3
29961: ST_TO_ADDR
// for i := 1 to k do
29962: LD_ADDR_VAR 0 1
29966: PUSH
29967: DOUBLE
29968: LD_INT 1
29970: DEC
29971: ST_TO_ADDR
29972: LD_VAR 0 2
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30077
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29980: LD_VAR 0 3
29984: PUSH
29985: LD_VAR 0 1
29989: ARRAY
29990: PPUSH
29991: LD_VAR 0 1
29995: PUSH
29996: LD_INT 4
29998: MOD
29999: PUSH
30000: LD_INT 1
30002: PLUS
30003: PPUSH
30004: CALL_OW 259
30008: PUSH
30009: LD_INT 10
30011: LESS
30012: IFFALSE 30075
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30014: LD_VAR 0 3
30018: PUSH
30019: LD_VAR 0 1
30023: ARRAY
30024: PPUSH
30025: LD_VAR 0 1
30029: PUSH
30030: LD_INT 4
30032: MOD
30033: PUSH
30034: LD_INT 1
30036: PLUS
30037: PPUSH
30038: LD_VAR 0 3
30042: PUSH
30043: LD_VAR 0 1
30047: ARRAY
30048: PPUSH
30049: LD_VAR 0 1
30053: PUSH
30054: LD_INT 4
30056: MOD
30057: PUSH
30058: LD_INT 1
30060: PLUS
30061: PPUSH
30062: CALL_OW 259
30066: PUSH
30067: LD_INT 1
30069: PLUS
30070: PPUSH
30071: CALL_OW 237
30075: GO 29977
30077: POP
30078: POP
// end ;
30079: PPOPN 3
30081: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30082: LD_EXP 70
30086: PUSH
30087: LD_EXP 78
30091: AND
30092: IFFALSE 30112
30094: GO 30096
30096: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30097: LD_INT 4
30099: PPUSH
30100: LD_OWVAR 2
30104: PPUSH
30105: LD_INT 0
30107: PPUSH
30108: CALL_OW 324
30112: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30113: LD_EXP 70
30117: PUSH
30118: LD_EXP 107
30122: AND
30123: IFFALSE 30143
30125: GO 30127
30127: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30128: LD_INT 19
30130: PPUSH
30131: LD_OWVAR 2
30135: PPUSH
30136: LD_INT 0
30138: PPUSH
30139: CALL_OW 324
30143: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30144: LD_EXP 70
30148: PUSH
30149: LD_EXP 79
30153: AND
30154: IFFALSE 30256
30156: GO 30158
30158: DISABLE
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
// begin enable ;
30163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30164: LD_ADDR_VAR 0 2
30168: PUSH
30169: LD_INT 22
30171: PUSH
30172: LD_OWVAR 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 34
30186: PUSH
30187: LD_INT 11
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 34
30196: PUSH
30197: LD_INT 30
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PPUSH
30213: CALL_OW 69
30217: ST_TO_ADDR
// if not tmp then
30218: LD_VAR 0 2
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30256
// for i in tmp do
30227: LD_ADDR_VAR 0 1
30231: PUSH
30232: LD_VAR 0 2
30236: PUSH
30237: FOR_IN
30238: IFFALSE 30254
// begin SetLives ( i , 0 ) ;
30240: LD_VAR 0 1
30244: PPUSH
30245: LD_INT 0
30247: PPUSH
30248: CALL_OW 234
// end ;
30252: GO 30237
30254: POP
30255: POP
// end ;
30256: PPOPN 2
30258: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30259: LD_EXP 70
30263: PUSH
30264: LD_EXP 80
30268: AND
30269: IFFALSE 30289
30271: GO 30273
30273: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30274: LD_INT 32
30276: PPUSH
30277: LD_OWVAR 2
30281: PPUSH
30282: LD_INT 0
30284: PPUSH
30285: CALL_OW 324
30289: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30290: LD_EXP 70
30294: PUSH
30295: LD_EXP 81
30299: AND
30300: IFFALSE 30481
30302: GO 30304
30304: DISABLE
30305: LD_INT 0
30307: PPUSH
30308: PPUSH
30309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30310: LD_ADDR_VAR 0 2
30314: PUSH
30315: LD_INT 22
30317: PUSH
30318: LD_OWVAR 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 33
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 69
30345: ST_TO_ADDR
// if not tmp then
30346: LD_VAR 0 2
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30481
// side := 0 ;
30355: LD_ADDR_VAR 0 3
30359: PUSH
30360: LD_INT 0
30362: ST_TO_ADDR
// for i := 1 to 8 do
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: DOUBLE
30369: LD_INT 1
30371: DEC
30372: ST_TO_ADDR
30373: LD_INT 8
30375: PUSH
30376: FOR_TO
30377: IFFALSE 30425
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30379: LD_OWVAR 2
30383: PUSH
30384: LD_VAR 0 1
30388: NONEQUAL
30389: PUSH
30390: LD_OWVAR 2
30394: PPUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 81
30404: PUSH
30405: LD_INT 2
30407: EQUAL
30408: AND
30409: IFFALSE 30423
// begin side := i ;
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_VAR 0 1
30420: ST_TO_ADDR
// break ;
30421: GO 30425
// end ;
30423: GO 30376
30425: POP
30426: POP
// if not side then
30427: LD_VAR 0 3
30431: NOT
30432: IFFALSE 30436
// exit ;
30434: GO 30481
// for i := 1 to tmp do
30436: LD_ADDR_VAR 0 1
30440: PUSH
30441: DOUBLE
30442: LD_INT 1
30444: DEC
30445: ST_TO_ADDR
30446: LD_VAR 0 2
30450: PUSH
30451: FOR_TO
30452: IFFALSE 30479
// if Prob ( 60 ) then
30454: LD_INT 60
30456: PPUSH
30457: CALL_OW 13
30461: IFFALSE 30477
// SetSide ( i , side ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_VAR 0 3
30472: PPUSH
30473: CALL_OW 235
30477: GO 30451
30479: POP
30480: POP
// end ;
30481: PPOPN 3
30483: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30484: LD_EXP 70
30488: PUSH
30489: LD_EXP 83
30493: AND
30494: IFFALSE 30613
30496: GO 30498
30498: DISABLE
30499: LD_INT 0
30501: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30502: LD_ADDR_VAR 0 1
30506: PUSH
30507: LD_INT 22
30509: PUSH
30510: LD_OWVAR 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 21
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 3
30531: PUSH
30532: LD_INT 23
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 69
30555: PUSH
30556: FOR_IN
30557: IFFALSE 30611
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 257
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 4
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: IN
30587: IFFALSE 30609
// SetClass ( un , rand ( 1 , 4 ) ) ;
30589: LD_VAR 0 1
30593: PPUSH
30594: LD_INT 1
30596: PPUSH
30597: LD_INT 4
30599: PPUSH
30600: CALL_OW 12
30604: PPUSH
30605: CALL_OW 336
30609: GO 30556
30611: POP
30612: POP
// end ;
30613: PPOPN 1
30615: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30616: LD_EXP 70
30620: PUSH
30621: LD_EXP 82
30625: AND
30626: IFFALSE 30705
30628: GO 30630
30630: DISABLE
30631: LD_INT 0
30633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30634: LD_ADDR_VAR 0 1
30638: PUSH
30639: LD_INT 22
30641: PUSH
30642: LD_OWVAR 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 21
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 69
30669: ST_TO_ADDR
// if not tmp then
30670: LD_VAR 0 1
30674: NOT
30675: IFFALSE 30679
// exit ;
30677: GO 30705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30679: LD_VAR 0 1
30683: PUSH
30684: LD_INT 1
30686: PPUSH
30687: LD_VAR 0 1
30691: PPUSH
30692: CALL_OW 12
30696: ARRAY
30697: PPUSH
30698: LD_INT 100
30700: PPUSH
30701: CALL_OW 234
// end ;
30705: PPOPN 1
30707: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30708: LD_EXP 70
30712: PUSH
30713: LD_EXP 84
30717: AND
30718: IFFALSE 30816
30720: GO 30722
30722: DISABLE
30723: LD_INT 0
30725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30726: LD_ADDR_VAR 0 1
30730: PUSH
30731: LD_INT 22
30733: PUSH
30734: LD_OWVAR 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 21
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PPUSH
30757: CALL_OW 69
30761: ST_TO_ADDR
// if not tmp then
30762: LD_VAR 0 1
30766: NOT
30767: IFFALSE 30771
// exit ;
30769: GO 30816
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30771: LD_VAR 0 1
30775: PUSH
30776: LD_INT 1
30778: PPUSH
30779: LD_VAR 0 1
30783: PPUSH
30784: CALL_OW 12
30788: ARRAY
30789: PPUSH
30790: LD_INT 1
30792: PPUSH
30793: LD_INT 4
30795: PPUSH
30796: CALL_OW 12
30800: PPUSH
30801: LD_INT 3000
30803: PPUSH
30804: LD_INT 9000
30806: PPUSH
30807: CALL_OW 12
30811: PPUSH
30812: CALL_OW 492
// end ;
30816: PPOPN 1
30818: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30819: LD_EXP 70
30823: PUSH
30824: LD_EXP 85
30828: AND
30829: IFFALSE 30849
30831: GO 30833
30833: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30834: LD_INT 1
30836: PPUSH
30837: LD_OWVAR 2
30841: PPUSH
30842: LD_INT 0
30844: PPUSH
30845: CALL_OW 324
30849: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30850: LD_EXP 70
30854: PUSH
30855: LD_EXP 86
30859: AND
30860: IFFALSE 30943
30862: GO 30864
30864: DISABLE
30865: LD_INT 0
30867: PPUSH
30868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30869: LD_ADDR_VAR 0 2
30873: PUSH
30874: LD_INT 22
30876: PUSH
30877: LD_OWVAR 2
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 21
30888: PUSH
30889: LD_INT 3
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PPUSH
30900: CALL_OW 69
30904: ST_TO_ADDR
// if not tmp then
30905: LD_VAR 0 2
30909: NOT
30910: IFFALSE 30914
// exit ;
30912: GO 30943
// for i in tmp do
30914: LD_ADDR_VAR 0 1
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: FOR_IN
30925: IFFALSE 30941
// SetBLevel ( i , 10 ) ;
30927: LD_VAR 0 1
30931: PPUSH
30932: LD_INT 10
30934: PPUSH
30935: CALL_OW 241
30939: GO 30924
30941: POP
30942: POP
// end ;
30943: PPOPN 2
30945: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30946: LD_EXP 70
30950: PUSH
30951: LD_EXP 87
30955: AND
30956: IFFALSE 31067
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
30964: PPUSH
30965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30966: LD_ADDR_VAR 0 3
30970: PUSH
30971: LD_INT 22
30973: PUSH
30974: LD_OWVAR 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 25
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PPUSH
30997: CALL_OW 69
31001: ST_TO_ADDR
// if not tmp then
31002: LD_VAR 0 3
31006: NOT
31007: IFFALSE 31011
// exit ;
31009: GO 31067
// un := tmp [ rand ( 1 , tmp ) ] ;
31011: LD_ADDR_VAR 0 2
31015: PUSH
31016: LD_VAR 0 3
31020: PUSH
31021: LD_INT 1
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: CALL_OW 12
31033: ARRAY
31034: ST_TO_ADDR
// if Crawls ( un ) then
31035: LD_VAR 0 2
31039: PPUSH
31040: CALL_OW 318
31044: IFFALSE 31055
// ComWalk ( un ) ;
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31055: LD_VAR 0 2
31059: PPUSH
31060: LD_INT 5
31062: PPUSH
31063: CALL_OW 336
// end ;
31067: PPOPN 3
31069: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31070: LD_EXP 70
31074: PUSH
31075: LD_EXP 88
31079: AND
31080: PUSH
31081: LD_OWVAR 67
31085: PUSH
31086: LD_INT 3
31088: LESS
31089: AND
31090: IFFALSE 31109
31092: GO 31094
31094: DISABLE
// Difficulty := Difficulty + 1 ;
31095: LD_ADDR_OWVAR 67
31099: PUSH
31100: LD_OWVAR 67
31104: PUSH
31105: LD_INT 1
31107: PLUS
31108: ST_TO_ADDR
31109: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31110: LD_EXP 70
31114: PUSH
31115: LD_EXP 89
31119: AND
31120: IFFALSE 31223
31122: GO 31124
31124: DISABLE
31125: LD_INT 0
31127: PPUSH
// begin for i := 1 to 5 do
31128: LD_ADDR_VAR 0 1
31132: PUSH
31133: DOUBLE
31134: LD_INT 1
31136: DEC
31137: ST_TO_ADDR
31138: LD_INT 5
31140: PUSH
31141: FOR_TO
31142: IFFALSE 31221
// begin uc_nation := nation_nature ;
31144: LD_ADDR_OWVAR 21
31148: PUSH
31149: LD_INT 0
31151: ST_TO_ADDR
// uc_side := 0 ;
31152: LD_ADDR_OWVAR 20
31156: PUSH
31157: LD_INT 0
31159: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31160: LD_ADDR_OWVAR 29
31164: PUSH
31165: LD_INT 12
31167: PUSH
31168: LD_INT 12
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: ST_TO_ADDR
// hc_agressivity := 20 ;
31175: LD_ADDR_OWVAR 35
31179: PUSH
31180: LD_INT 20
31182: ST_TO_ADDR
// hc_class := class_tiger ;
31183: LD_ADDR_OWVAR 28
31187: PUSH
31188: LD_INT 14
31190: ST_TO_ADDR
// hc_gallery :=  ;
31191: LD_ADDR_OWVAR 33
31195: PUSH
31196: LD_STRING 
31198: ST_TO_ADDR
// hc_name :=  ;
31199: LD_ADDR_OWVAR 26
31203: PUSH
31204: LD_STRING 
31206: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31207: CALL_OW 44
31211: PPUSH
31212: LD_INT 0
31214: PPUSH
31215: CALL_OW 51
// end ;
31219: GO 31141
31221: POP
31222: POP
// end ;
31223: PPOPN 1
31225: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31226: LD_EXP 70
31230: PUSH
31231: LD_EXP 90
31235: AND
31236: IFFALSE 31245
31238: GO 31240
31240: DISABLE
// StreamSibBomb ;
31241: CALL 31246 0 0
31245: END
// export function StreamSibBomb ; var i , x , y ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
// result := false ;
31252: LD_ADDR_VAR 0 1
31256: PUSH
31257: LD_INT 0
31259: ST_TO_ADDR
// for i := 1 to 16 do
31260: LD_ADDR_VAR 0 2
31264: PUSH
31265: DOUBLE
31266: LD_INT 1
31268: DEC
31269: ST_TO_ADDR
31270: LD_INT 16
31272: PUSH
31273: FOR_TO
31274: IFFALSE 31473
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_INT 10
31283: PUSH
31284: LD_INT 20
31286: PUSH
31287: LD_INT 30
31289: PUSH
31290: LD_INT 40
31292: PUSH
31293: LD_INT 50
31295: PUSH
31296: LD_INT 60
31298: PUSH
31299: LD_INT 70
31301: PUSH
31302: LD_INT 80
31304: PUSH
31305: LD_INT 90
31307: PUSH
31308: LD_INT 100
31310: PUSH
31311: LD_INT 110
31313: PUSH
31314: LD_INT 120
31316: PUSH
31317: LD_INT 130
31319: PUSH
31320: LD_INT 140
31322: PUSH
31323: LD_INT 150
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: PPUSH
31346: LD_INT 15
31348: PPUSH
31349: CALL_OW 12
31353: ARRAY
31354: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_INT 10
31362: PUSH
31363: LD_INT 20
31365: PUSH
31366: LD_INT 30
31368: PUSH
31369: LD_INT 40
31371: PUSH
31372: LD_INT 50
31374: PUSH
31375: LD_INT 60
31377: PUSH
31378: LD_INT 70
31380: PUSH
31381: LD_INT 80
31383: PUSH
31384: LD_INT 90
31386: PUSH
31387: LD_INT 100
31389: PUSH
31390: LD_INT 110
31392: PUSH
31393: LD_INT 120
31395: PUSH
31396: LD_INT 130
31398: PUSH
31399: LD_INT 140
31401: PUSH
31402: LD_INT 150
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PPUSH
31425: LD_INT 15
31427: PPUSH
31428: CALL_OW 12
31432: ARRAY
31433: ST_TO_ADDR
// if ValidHex ( x , y ) then
31434: LD_VAR 0 3
31438: PPUSH
31439: LD_VAR 0 4
31443: PPUSH
31444: CALL_OW 488
31448: IFFALSE 31471
// begin result := [ x , y ] ;
31450: LD_ADDR_VAR 0 1
31454: PUSH
31455: LD_VAR 0 3
31459: PUSH
31460: LD_VAR 0 4
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: ST_TO_ADDR
// break ;
31469: GO 31473
// end ; end ;
31471: GO 31273
31473: POP
31474: POP
// if result then
31475: LD_VAR 0 1
31479: IFFALSE 31539
// begin ToLua ( playSibBomb() ) ;
31481: LD_STRING playSibBomb()
31483: PPUSH
31484: CALL_OW 559
// wait ( 0 0$14 ) ;
31488: LD_INT 490
31490: PPUSH
31491: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31495: LD_VAR 0 1
31499: PUSH
31500: LD_INT 1
31502: ARRAY
31503: PPUSH
31504: LD_VAR 0 1
31508: PUSH
31509: LD_INT 2
31511: ARRAY
31512: PPUSH
31513: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31517: LD_VAR 0 1
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PPUSH
31526: LD_VAR 0 1
31530: PUSH
31531: LD_INT 2
31533: ARRAY
31534: PPUSH
31535: CALL_OW 429
// end ; end ;
31539: LD_VAR 0 1
31543: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31544: LD_EXP 70
31548: PUSH
31549: LD_EXP 92
31553: AND
31554: IFFALSE 31566
31556: GO 31558
31558: DISABLE
// YouLost (  ) ;
31559: LD_STRING 
31561: PPUSH
31562: CALL_OW 104
31566: END
// every 0 0$1 trigger StreamModeActive and sFog do
31567: LD_EXP 70
31571: PUSH
31572: LD_EXP 91
31576: AND
31577: IFFALSE 31591
31579: GO 31581
31581: DISABLE
// FogOff ( your_side ) ;
31582: LD_OWVAR 2
31586: PPUSH
31587: CALL_OW 344
31591: END
// every 0 0$1 trigger StreamModeActive and sSun do
31592: LD_EXP 70
31596: PUSH
31597: LD_EXP 93
31601: AND
31602: IFFALSE 31630
31604: GO 31606
31606: DISABLE
// begin solar_recharge_percent := 0 ;
31607: LD_ADDR_OWVAR 79
31611: PUSH
31612: LD_INT 0
31614: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31615: LD_INT 10500
31617: PPUSH
31618: CALL_OW 67
// solar_recharge_percent := 100 ;
31622: LD_ADDR_OWVAR 79
31626: PUSH
31627: LD_INT 100
31629: ST_TO_ADDR
// end ;
31630: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31631: LD_EXP 70
31635: PUSH
31636: LD_EXP 94
31640: AND
31641: IFFALSE 31880
31643: GO 31645
31645: DISABLE
31646: LD_INT 0
31648: PPUSH
31649: PPUSH
31650: PPUSH
// begin tmp := [ ] ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: EMPTY
31657: ST_TO_ADDR
// for i := 1 to 6 do
31658: LD_ADDR_VAR 0 1
31662: PUSH
31663: DOUBLE
31664: LD_INT 1
31666: DEC
31667: ST_TO_ADDR
31668: LD_INT 6
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31777
// begin uc_nation := nation_nature ;
31674: LD_ADDR_OWVAR 21
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
// uc_side := 0 ;
31682: LD_ADDR_OWVAR 20
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31690: LD_ADDR_OWVAR 29
31694: PUSH
31695: LD_INT 12
31697: PUSH
31698: LD_INT 12
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: ST_TO_ADDR
// hc_agressivity := 20 ;
31705: LD_ADDR_OWVAR 35
31709: PUSH
31710: LD_INT 20
31712: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31713: LD_ADDR_OWVAR 28
31717: PUSH
31718: LD_INT 17
31720: ST_TO_ADDR
// hc_gallery :=  ;
31721: LD_ADDR_OWVAR 33
31725: PUSH
31726: LD_STRING 
31728: ST_TO_ADDR
// hc_name :=  ;
31729: LD_ADDR_OWVAR 26
31733: PUSH
31734: LD_STRING 
31736: ST_TO_ADDR
// un := CreateHuman ;
31737: LD_ADDR_VAR 0 2
31741: PUSH
31742: CALL_OW 44
31746: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31747: LD_VAR 0 2
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 51
// tmp := tmp ^ un ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_VAR 0 3
31768: PUSH
31769: LD_VAR 0 2
31773: ADD
31774: ST_TO_ADDR
// end ;
31775: GO 31671
31777: POP
31778: POP
// repeat wait ( 0 0$1 ) ;
31779: LD_INT 35
31781: PPUSH
31782: CALL_OW 67
// for un in tmp do
31786: LD_ADDR_VAR 0 2
31790: PUSH
31791: LD_VAR 0 3
31795: PUSH
31796: FOR_IN
31797: IFFALSE 31871
// begin if IsDead ( un ) then
31799: LD_VAR 0 2
31803: PPUSH
31804: CALL_OW 301
31808: IFFALSE 31828
// begin tmp := tmp diff un ;
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_VAR 0 3
31819: PUSH
31820: LD_VAR 0 2
31824: DIFF
31825: ST_TO_ADDR
// continue ;
31826: GO 31796
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31828: LD_VAR 0 2
31832: PPUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 22
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 69
31854: PPUSH
31855: LD_VAR 0 2
31859: PPUSH
31860: CALL_OW 74
31864: PPUSH
31865: CALL_OW 115
// end ;
31869: GO 31796
31871: POP
31872: POP
// until not tmp ;
31873: LD_VAR 0 3
31877: NOT
31878: IFFALSE 31779
// end ;
31880: PPOPN 3
31882: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31883: LD_EXP 70
31887: PUSH
31888: LD_EXP 95
31892: AND
31893: IFFALSE 31947
31895: GO 31897
31897: DISABLE
// begin ToLua ( displayTroll(); ) ;
31898: LD_STRING displayTroll();
31900: PPUSH
31901: CALL_OW 559
// wait ( 3 3$00 ) ;
31905: LD_INT 6300
31907: PPUSH
31908: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31912: LD_STRING hideTroll();
31914: PPUSH
31915: CALL_OW 559
// wait ( 1 1$00 ) ;
31919: LD_INT 2100
31921: PPUSH
31922: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31926: LD_STRING displayTroll();
31928: PPUSH
31929: CALL_OW 559
// wait ( 1 1$00 ) ;
31933: LD_INT 2100
31935: PPUSH
31936: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31940: LD_STRING hideTroll();
31942: PPUSH
31943: CALL_OW 559
// end ;
31947: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31948: LD_EXP 70
31952: PUSH
31953: LD_EXP 96
31957: AND
31958: IFFALSE 32021
31960: GO 31962
31962: DISABLE
31963: LD_INT 0
31965: PPUSH
// begin p := 0 ;
31966: LD_ADDR_VAR 0 1
31970: PUSH
31971: LD_INT 0
31973: ST_TO_ADDR
// repeat game_speed := 1 ;
31974: LD_ADDR_OWVAR 65
31978: PUSH
31979: LD_INT 1
31981: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31982: LD_INT 35
31984: PPUSH
31985: CALL_OW 67
// p := p + 1 ;
31989: LD_ADDR_VAR 0 1
31993: PUSH
31994: LD_VAR 0 1
31998: PUSH
31999: LD_INT 1
32001: PLUS
32002: ST_TO_ADDR
// until p >= 60 ;
32003: LD_VAR 0 1
32007: PUSH
32008: LD_INT 60
32010: GREATEREQUAL
32011: IFFALSE 31974
// game_speed := 4 ;
32013: LD_ADDR_OWVAR 65
32017: PUSH
32018: LD_INT 4
32020: ST_TO_ADDR
// end ;
32021: PPOPN 1
32023: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32024: LD_EXP 70
32028: PUSH
32029: LD_EXP 97
32033: AND
32034: IFFALSE 32180
32036: GO 32038
32038: DISABLE
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32043: LD_ADDR_VAR 0 1
32047: PUSH
32048: LD_INT 22
32050: PUSH
32051: LD_OWVAR 2
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 30
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PPUSH
32092: CALL_OW 69
32096: ST_TO_ADDR
// if not depot then
32097: LD_VAR 0 1
32101: NOT
32102: IFFALSE 32106
// exit ;
32104: GO 32180
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32106: LD_ADDR_VAR 0 2
32110: PUSH
32111: LD_VAR 0 1
32115: PUSH
32116: LD_INT 1
32118: PPUSH
32119: LD_VAR 0 1
32123: PPUSH
32124: CALL_OW 12
32128: ARRAY
32129: PPUSH
32130: CALL_OW 274
32134: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32135: LD_VAR 0 2
32139: PPUSH
32140: LD_INT 1
32142: PPUSH
32143: LD_INT 0
32145: PPUSH
32146: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32150: LD_VAR 0 2
32154: PPUSH
32155: LD_INT 2
32157: PPUSH
32158: LD_INT 0
32160: PPUSH
32161: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32165: LD_VAR 0 2
32169: PPUSH
32170: LD_INT 3
32172: PPUSH
32173: LD_INT 0
32175: PPUSH
32176: CALL_OW 277
// end ;
32180: PPOPN 2
32182: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32183: LD_EXP 70
32187: PUSH
32188: LD_EXP 98
32192: AND
32193: IFFALSE 32290
32195: GO 32197
32197: DISABLE
32198: LD_INT 0
32200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32201: LD_ADDR_VAR 0 1
32205: PUSH
32206: LD_INT 22
32208: PUSH
32209: LD_OWVAR 2
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 21
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 23
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: LIST
32249: PPUSH
32250: CALL_OW 69
32254: ST_TO_ADDR
// if not tmp then
32255: LD_VAR 0 1
32259: NOT
32260: IFFALSE 32264
// exit ;
32262: GO 32290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32264: LD_VAR 0 1
32268: PUSH
32269: LD_INT 1
32271: PPUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 12
32281: ARRAY
32282: PPUSH
32283: LD_INT 200
32285: PPUSH
32286: CALL_OW 234
// end ;
32290: PPOPN 1
32292: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32293: LD_EXP 70
32297: PUSH
32298: LD_EXP 99
32302: AND
32303: IFFALSE 32382
32305: GO 32307
32307: DISABLE
32308: LD_INT 0
32310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32311: LD_ADDR_VAR 0 1
32315: PUSH
32316: LD_INT 22
32318: PUSH
32319: LD_OWVAR 2
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 21
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PPUSH
32342: CALL_OW 69
32346: ST_TO_ADDR
// if not tmp then
32347: LD_VAR 0 1
32351: NOT
32352: IFFALSE 32356
// exit ;
32354: GO 32382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32356: LD_VAR 0 1
32360: PUSH
32361: LD_INT 1
32363: PPUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 12
32373: ARRAY
32374: PPUSH
32375: LD_INT 60
32377: PPUSH
32378: CALL_OW 234
// end ;
32382: PPOPN 1
32384: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32385: LD_EXP 70
32389: PUSH
32390: LD_EXP 100
32394: AND
32395: IFFALSE 32494
32397: GO 32399
32399: DISABLE
32400: LD_INT 0
32402: PPUSH
32403: PPUSH
// begin enable ;
32404: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32405: LD_ADDR_VAR 0 1
32409: PUSH
32410: LD_INT 22
32412: PUSH
32413: LD_OWVAR 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 61
32424: PUSH
32425: EMPTY
32426: LIST
32427: PUSH
32428: LD_INT 33
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: ST_TO_ADDR
// if not tmp then
32448: LD_VAR 0 1
32452: NOT
32453: IFFALSE 32457
// exit ;
32455: GO 32494
// for i in tmp do
32457: LD_ADDR_VAR 0 2
32461: PUSH
32462: LD_VAR 0 1
32466: PUSH
32467: FOR_IN
32468: IFFALSE 32492
// if IsControledBy ( i ) then
32470: LD_VAR 0 2
32474: PPUSH
32475: CALL_OW 312
32479: IFFALSE 32490
// ComUnlink ( i ) ;
32481: LD_VAR 0 2
32485: PPUSH
32486: CALL_OW 136
32490: GO 32467
32492: POP
32493: POP
// end ;
32494: PPOPN 2
32496: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32497: LD_EXP 70
32501: PUSH
32502: LD_EXP 101
32506: AND
32507: IFFALSE 32647
32509: GO 32511
32511: DISABLE
32512: LD_INT 0
32514: PPUSH
32515: PPUSH
// begin ToLua ( displayPowell(); ) ;
32516: LD_STRING displayPowell();
32518: PPUSH
32519: CALL_OW 559
// uc_side := 0 ;
32523: LD_ADDR_OWVAR 20
32527: PUSH
32528: LD_INT 0
32530: ST_TO_ADDR
// uc_nation := 2 ;
32531: LD_ADDR_OWVAR 21
32535: PUSH
32536: LD_INT 2
32538: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32539: LD_ADDR_OWVAR 37
32543: PUSH
32544: LD_INT 14
32546: ST_TO_ADDR
// vc_engine := engine_siberite ;
32547: LD_ADDR_OWVAR 39
32551: PUSH
32552: LD_INT 3
32554: ST_TO_ADDR
// vc_control := control_apeman ;
32555: LD_ADDR_OWVAR 38
32559: PUSH
32560: LD_INT 5
32562: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32563: LD_ADDR_OWVAR 40
32567: PUSH
32568: LD_INT 29
32570: ST_TO_ADDR
// un := CreateVehicle ;
32571: LD_ADDR_VAR 0 2
32575: PUSH
32576: CALL_OW 45
32580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32581: LD_VAR 0 2
32585: PPUSH
32586: LD_INT 1
32588: PPUSH
32589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32593: LD_INT 35
32595: PPUSH
32596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32600: LD_VAR 0 2
32604: PPUSH
32605: LD_INT 22
32607: PUSH
32608: LD_OWVAR 2
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PPUSH
32617: CALL_OW 69
32621: PPUSH
32622: LD_VAR 0 2
32626: PPUSH
32627: CALL_OW 74
32631: PPUSH
32632: CALL_OW 115
// until IsDead ( un ) ;
32636: LD_VAR 0 2
32640: PPUSH
32641: CALL_OW 301
32645: IFFALSE 32593
// end ;
32647: PPOPN 2
32649: END
// every 0 0$1 trigger StreamModeActive and sStu do
32650: LD_EXP 70
32654: PUSH
32655: LD_EXP 109
32659: AND
32660: IFFALSE 32676
32662: GO 32664
32664: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32665: LD_STRING displayStucuk();
32667: PPUSH
32668: CALL_OW 559
// ResetFog ;
32672: CALL_OW 335
// end ;
32676: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32677: LD_EXP 70
32681: PUSH
32682: LD_EXP 102
32686: AND
32687: IFFALSE 32828
32689: GO 32691
32691: DISABLE
32692: LD_INT 0
32694: PPUSH
32695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32696: LD_ADDR_VAR 0 2
32700: PUSH
32701: LD_INT 22
32703: PUSH
32704: LD_OWVAR 2
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 21
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PPUSH
32727: CALL_OW 69
32731: ST_TO_ADDR
// if not tmp then
32732: LD_VAR 0 2
32736: NOT
32737: IFFALSE 32741
// exit ;
32739: GO 32828
// un := tmp [ rand ( 1 , tmp ) ] ;
32741: LD_ADDR_VAR 0 1
32745: PUSH
32746: LD_VAR 0 2
32750: PUSH
32751: LD_INT 1
32753: PPUSH
32754: LD_VAR 0 2
32758: PPUSH
32759: CALL_OW 12
32763: ARRAY
32764: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32765: LD_VAR 0 1
32769: PPUSH
32770: LD_INT 0
32772: PPUSH
32773: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32777: LD_VAR 0 1
32781: PPUSH
32782: LD_OWVAR 3
32786: PUSH
32787: LD_VAR 0 1
32791: DIFF
32792: PPUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 74
32802: PPUSH
32803: CALL_OW 115
// wait ( 0 0$20 ) ;
32807: LD_INT 700
32809: PPUSH
32810: CALL_OW 67
// SetSide ( un , your_side ) ;
32814: LD_VAR 0 1
32818: PPUSH
32819: LD_OWVAR 2
32823: PPUSH
32824: CALL_OW 235
// end ;
32828: PPOPN 2
32830: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32831: LD_EXP 70
32835: PUSH
32836: LD_EXP 103
32840: AND
32841: IFFALSE 32947
32843: GO 32845
32845: DISABLE
32846: LD_INT 0
32848: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32849: LD_ADDR_VAR 0 1
32853: PUSH
32854: LD_INT 22
32856: PUSH
32857: LD_OWVAR 2
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 30
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 30
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 69
32902: ST_TO_ADDR
// if not depot then
32903: LD_VAR 0 1
32907: NOT
32908: IFFALSE 32912
// exit ;
32910: GO 32947
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32912: LD_VAR 0 1
32916: PUSH
32917: LD_INT 1
32919: ARRAY
32920: PPUSH
32921: CALL_OW 250
32925: PPUSH
32926: LD_VAR 0 1
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: PPUSH
32935: CALL_OW 251
32939: PPUSH
32940: LD_INT 70
32942: PPUSH
32943: CALL_OW 495
// end ;
32947: PPOPN 1
32949: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32950: LD_EXP 70
32954: PUSH
32955: LD_EXP 104
32959: AND
32960: IFFALSE 33171
32962: GO 32964
32964: DISABLE
32965: LD_INT 0
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32972: LD_ADDR_VAR 0 5
32976: PUSH
32977: LD_INT 22
32979: PUSH
32980: LD_OWVAR 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 21
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PPUSH
33003: CALL_OW 69
33007: ST_TO_ADDR
// if not tmp then
33008: LD_VAR 0 5
33012: NOT
33013: IFFALSE 33017
// exit ;
33015: GO 33171
// for i in tmp do
33017: LD_ADDR_VAR 0 1
33021: PUSH
33022: LD_VAR 0 5
33026: PUSH
33027: FOR_IN
33028: IFFALSE 33169
// begin d := rand ( 0 , 5 ) ;
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: LD_INT 0
33037: PPUSH
33038: LD_INT 5
33040: PPUSH
33041: CALL_OW 12
33045: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33046: LD_ADDR_VAR 0 2
33050: PUSH
33051: LD_VAR 0 1
33055: PPUSH
33056: CALL_OW 250
33060: PPUSH
33061: LD_VAR 0 4
33065: PPUSH
33066: LD_INT 3
33068: PPUSH
33069: LD_INT 12
33071: PPUSH
33072: CALL_OW 12
33076: PPUSH
33077: CALL_OW 272
33081: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33082: LD_ADDR_VAR 0 3
33086: PUSH
33087: LD_VAR 0 1
33091: PPUSH
33092: CALL_OW 251
33096: PPUSH
33097: LD_VAR 0 4
33101: PPUSH
33102: LD_INT 3
33104: PPUSH
33105: LD_INT 12
33107: PPUSH
33108: CALL_OW 12
33112: PPUSH
33113: CALL_OW 273
33117: ST_TO_ADDR
// if ValidHex ( x , y ) then
33118: LD_VAR 0 2
33122: PPUSH
33123: LD_VAR 0 3
33127: PPUSH
33128: CALL_OW 488
33132: IFFALSE 33167
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33134: LD_VAR 0 1
33138: PPUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: LD_VAR 0 3
33148: PPUSH
33149: LD_INT 3
33151: PPUSH
33152: LD_INT 6
33154: PPUSH
33155: CALL_OW 12
33159: PPUSH
33160: LD_INT 1
33162: PPUSH
33163: CALL_OW 483
// end ;
33167: GO 33027
33169: POP
33170: POP
// end ;
33171: PPOPN 5
33173: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33174: LD_EXP 70
33178: PUSH
33179: LD_EXP 105
33183: AND
33184: IFFALSE 33278
33186: GO 33188
33188: DISABLE
33189: LD_INT 0
33191: PPUSH
33192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33193: LD_ADDR_VAR 0 2
33197: PUSH
33198: LD_INT 22
33200: PUSH
33201: LD_OWVAR 2
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 32
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 21
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: PPUSH
33235: CALL_OW 69
33239: ST_TO_ADDR
// if not tmp then
33240: LD_VAR 0 2
33244: NOT
33245: IFFALSE 33249
// exit ;
33247: GO 33278
// for i in tmp do
33249: LD_ADDR_VAR 0 1
33253: PUSH
33254: LD_VAR 0 2
33258: PUSH
33259: FOR_IN
33260: IFFALSE 33276
// SetFuel ( i , 0 ) ;
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_INT 0
33269: PPUSH
33270: CALL_OW 240
33274: GO 33259
33276: POP
33277: POP
// end ;
33278: PPOPN 2
33280: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33281: LD_EXP 70
33285: PUSH
33286: LD_EXP 106
33290: AND
33291: IFFALSE 33357
33293: GO 33295
33295: DISABLE
33296: LD_INT 0
33298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33299: LD_ADDR_VAR 0 1
33303: PUSH
33304: LD_INT 22
33306: PUSH
33307: LD_OWVAR 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 30
33318: PUSH
33319: LD_INT 29
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PPUSH
33330: CALL_OW 69
33334: ST_TO_ADDR
// if not tmp then
33335: LD_VAR 0 1
33339: NOT
33340: IFFALSE 33344
// exit ;
33342: GO 33357
// DestroyUnit ( tmp [ 1 ] ) ;
33344: LD_VAR 0 1
33348: PUSH
33349: LD_INT 1
33351: ARRAY
33352: PPUSH
33353: CALL_OW 65
// end ;
33357: PPOPN 1
33359: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33360: LD_EXP 70
33364: PUSH
33365: LD_EXP 108
33369: AND
33370: IFFALSE 33499
33372: GO 33374
33374: DISABLE
33375: LD_INT 0
33377: PPUSH
// begin uc_side := 0 ;
33378: LD_ADDR_OWVAR 20
33382: PUSH
33383: LD_INT 0
33385: ST_TO_ADDR
// uc_nation := nation_arabian ;
33386: LD_ADDR_OWVAR 21
33390: PUSH
33391: LD_INT 2
33393: ST_TO_ADDR
// hc_gallery :=  ;
33394: LD_ADDR_OWVAR 33
33398: PUSH
33399: LD_STRING 
33401: ST_TO_ADDR
// hc_name :=  ;
33402: LD_ADDR_OWVAR 26
33406: PUSH
33407: LD_STRING 
33409: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33410: LD_INT 1
33412: PPUSH
33413: LD_INT 11
33415: PPUSH
33416: LD_INT 10
33418: PPUSH
33419: CALL_OW 380
// un := CreateHuman ;
33423: LD_ADDR_VAR 0 1
33427: PUSH
33428: CALL_OW 44
33432: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33433: LD_VAR 0 1
33437: PPUSH
33438: LD_INT 1
33440: PPUSH
33441: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33445: LD_INT 35
33447: PPUSH
33448: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33452: LD_VAR 0 1
33456: PPUSH
33457: LD_INT 22
33459: PUSH
33460: LD_OWVAR 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 69
33473: PPUSH
33474: LD_VAR 0 1
33478: PPUSH
33479: CALL_OW 74
33483: PPUSH
33484: CALL_OW 115
// until IsDead ( un ) ;
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 301
33497: IFFALSE 33445
// end ;
33499: PPOPN 1
33501: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33502: LD_EXP 70
33506: PUSH
33507: LD_EXP 110
33511: AND
33512: IFFALSE 33524
33514: GO 33516
33516: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33517: LD_STRING earthquake(getX(game), 0, 32)
33519: PPUSH
33520: CALL_OW 559
33524: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33525: LD_EXP 70
33529: PUSH
33530: LD_EXP 111
33534: AND
33535: IFFALSE 33626
33537: GO 33539
33539: DISABLE
33540: LD_INT 0
33542: PPUSH
// begin enable ;
33543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33544: LD_ADDR_VAR 0 1
33548: PUSH
33549: LD_INT 22
33551: PUSH
33552: LD_OWVAR 2
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 21
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 33
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: PPUSH
33586: CALL_OW 69
33590: ST_TO_ADDR
// if not tmp then
33591: LD_VAR 0 1
33595: NOT
33596: IFFALSE 33600
// exit ;
33598: GO 33626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33600: LD_VAR 0 1
33604: PUSH
33605: LD_INT 1
33607: PPUSH
33608: LD_VAR 0 1
33612: PPUSH
33613: CALL_OW 12
33617: ARRAY
33618: PPUSH
33619: LD_INT 1
33621: PPUSH
33622: CALL_OW 234
// end ;
33626: PPOPN 1
33628: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33629: LD_EXP 70
33633: PUSH
33634: LD_EXP 112
33638: AND
33639: IFFALSE 33780
33641: GO 33643
33643: DISABLE
33644: LD_INT 0
33646: PPUSH
33647: PPUSH
33648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 22
33656: PUSH
33657: LD_OWVAR 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 25
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: ST_TO_ADDR
// if not tmp then
33685: LD_VAR 0 3
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 33780
// un := tmp [ rand ( 1 , tmp ) ] ;
33694: LD_ADDR_VAR 0 2
33698: PUSH
33699: LD_VAR 0 3
33703: PUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 3
33711: PPUSH
33712: CALL_OW 12
33716: ARRAY
33717: ST_TO_ADDR
// if Crawls ( un ) then
33718: LD_VAR 0 2
33722: PPUSH
33723: CALL_OW 318
33727: IFFALSE 33738
// ComWalk ( un ) ;
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33738: LD_VAR 0 2
33742: PPUSH
33743: LD_INT 9
33745: PPUSH
33746: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33750: LD_INT 28
33752: PPUSH
33753: LD_OWVAR 2
33757: PPUSH
33758: LD_INT 2
33760: PPUSH
33761: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33765: LD_INT 29
33767: PPUSH
33768: LD_OWVAR 2
33772: PPUSH
33773: LD_INT 2
33775: PPUSH
33776: CALL_OW 322
// end ;
33780: PPOPN 3
33782: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33783: LD_EXP 70
33787: PUSH
33788: LD_EXP 113
33792: AND
33793: IFFALSE 33904
33795: GO 33797
33797: DISABLE
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 22
33810: PUSH
33811: LD_OWVAR 2
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 25
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PPUSH
33834: CALL_OW 69
33838: ST_TO_ADDR
// if not tmp then
33839: LD_VAR 0 3
33843: NOT
33844: IFFALSE 33848
// exit ;
33846: GO 33904
// un := tmp [ rand ( 1 , tmp ) ] ;
33848: LD_ADDR_VAR 0 2
33852: PUSH
33853: LD_VAR 0 3
33857: PUSH
33858: LD_INT 1
33860: PPUSH
33861: LD_VAR 0 3
33865: PPUSH
33866: CALL_OW 12
33870: ARRAY
33871: ST_TO_ADDR
// if Crawls ( un ) then
33872: LD_VAR 0 2
33876: PPUSH
33877: CALL_OW 318
33881: IFFALSE 33892
// ComWalk ( un ) ;
33883: LD_VAR 0 2
33887: PPUSH
33888: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33892: LD_VAR 0 2
33896: PPUSH
33897: LD_INT 8
33899: PPUSH
33900: CALL_OW 336
// end ;
33904: PPOPN 3
33906: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33907: LD_EXP 70
33911: PUSH
33912: LD_EXP 114
33916: AND
33917: IFFALSE 34061
33919: GO 33921
33921: DISABLE
33922: LD_INT 0
33924: PPUSH
33925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33926: LD_ADDR_VAR 0 2
33930: PUSH
33931: LD_INT 22
33933: PUSH
33934: LD_OWVAR 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 21
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 34
33958: PUSH
33959: LD_INT 12
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 34
33968: PUSH
33969: LD_INT 51
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 34
33978: PUSH
33979: LD_INT 32
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: PPUSH
33997: CALL_OW 69
34001: ST_TO_ADDR
// if not tmp then
34002: LD_VAR 0 2
34006: NOT
34007: IFFALSE 34011
// exit ;
34009: GO 34061
// for i in tmp do
34011: LD_ADDR_VAR 0 1
34015: PUSH
34016: LD_VAR 0 2
34020: PUSH
34021: FOR_IN
34022: IFFALSE 34059
// if GetCargo ( i , mat_artifact ) = 0 then
34024: LD_VAR 0 1
34028: PPUSH
34029: LD_INT 4
34031: PPUSH
34032: CALL_OW 289
34036: PUSH
34037: LD_INT 0
34039: EQUAL
34040: IFFALSE 34057
// SetCargo ( i , mat_siberit , 100 ) ;
34042: LD_VAR 0 1
34046: PPUSH
34047: LD_INT 3
34049: PPUSH
34050: LD_INT 100
34052: PPUSH
34053: CALL_OW 290
34057: GO 34021
34059: POP
34060: POP
// end ;
34061: PPOPN 2
34063: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34064: LD_EXP 70
34068: PUSH
34069: LD_EXP 115
34073: AND
34074: IFFALSE 34257
34076: GO 34078
34078: DISABLE
34079: LD_INT 0
34081: PPUSH
34082: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34083: LD_ADDR_VAR 0 2
34087: PUSH
34088: LD_INT 22
34090: PUSH
34091: LD_OWVAR 2
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PPUSH
34100: CALL_OW 69
34104: ST_TO_ADDR
// if not tmp then
34105: LD_VAR 0 2
34109: NOT
34110: IFFALSE 34114
// exit ;
34112: GO 34257
// for i := 1 to 2 do
34114: LD_ADDR_VAR 0 1
34118: PUSH
34119: DOUBLE
34120: LD_INT 1
34122: DEC
34123: ST_TO_ADDR
34124: LD_INT 2
34126: PUSH
34127: FOR_TO
34128: IFFALSE 34255
// begin uc_side := your_side ;
34130: LD_ADDR_OWVAR 20
34134: PUSH
34135: LD_OWVAR 2
34139: ST_TO_ADDR
// uc_nation := nation_american ;
34140: LD_ADDR_OWVAR 21
34144: PUSH
34145: LD_INT 1
34147: ST_TO_ADDR
// vc_chassis := us_morphling ;
34148: LD_ADDR_OWVAR 37
34152: PUSH
34153: LD_INT 5
34155: ST_TO_ADDR
// vc_engine := engine_siberite ;
34156: LD_ADDR_OWVAR 39
34160: PUSH
34161: LD_INT 3
34163: ST_TO_ADDR
// vc_control := control_computer ;
34164: LD_ADDR_OWVAR 38
34168: PUSH
34169: LD_INT 3
34171: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34172: LD_ADDR_OWVAR 40
34176: PUSH
34177: LD_INT 10
34179: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34180: LD_VAR 0 2
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: CALL_OW 310
34193: NOT
34194: IFFALSE 34241
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34196: CALL_OW 45
34200: PPUSH
34201: LD_VAR 0 2
34205: PUSH
34206: LD_INT 1
34208: ARRAY
34209: PPUSH
34210: CALL_OW 250
34214: PPUSH
34215: LD_VAR 0 2
34219: PUSH
34220: LD_INT 1
34222: ARRAY
34223: PPUSH
34224: CALL_OW 251
34228: PPUSH
34229: LD_INT 12
34231: PPUSH
34232: LD_INT 1
34234: PPUSH
34235: CALL_OW 50
34239: GO 34253
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34241: CALL_OW 45
34245: PPUSH
34246: LD_INT 1
34248: PPUSH
34249: CALL_OW 51
// end ;
34253: GO 34127
34255: POP
34256: POP
// end ;
34257: PPOPN 2
34259: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34260: LD_EXP 70
34264: PUSH
34265: LD_EXP 116
34269: AND
34270: IFFALSE 34492
34272: GO 34274
34274: DISABLE
34275: LD_INT 0
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34283: LD_ADDR_VAR 0 6
34287: PUSH
34288: LD_INT 22
34290: PUSH
34291: LD_OWVAR 2
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 21
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 3
34312: PUSH
34313: LD_INT 23
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: PPUSH
34332: CALL_OW 69
34336: ST_TO_ADDR
// if not tmp then
34337: LD_VAR 0 6
34341: NOT
34342: IFFALSE 34346
// exit ;
34344: GO 34492
// s1 := rand ( 1 , 4 ) ;
34346: LD_ADDR_VAR 0 2
34350: PUSH
34351: LD_INT 1
34353: PPUSH
34354: LD_INT 4
34356: PPUSH
34357: CALL_OW 12
34361: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34362: LD_ADDR_VAR 0 4
34366: PUSH
34367: LD_VAR 0 6
34371: PUSH
34372: LD_INT 1
34374: ARRAY
34375: PPUSH
34376: LD_VAR 0 2
34380: PPUSH
34381: CALL_OW 259
34385: ST_TO_ADDR
// if s1 = 1 then
34386: LD_VAR 0 2
34390: PUSH
34391: LD_INT 1
34393: EQUAL
34394: IFFALSE 34414
// s2 := rand ( 2 , 4 ) else
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 2
34403: PPUSH
34404: LD_INT 4
34406: PPUSH
34407: CALL_OW 12
34411: ST_TO_ADDR
34412: GO 34422
// s2 := 1 ;
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34422: LD_ADDR_VAR 0 5
34426: PUSH
34427: LD_VAR 0 6
34431: PUSH
34432: LD_INT 1
34434: ARRAY
34435: PPUSH
34436: LD_VAR 0 3
34440: PPUSH
34441: CALL_OW 259
34445: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34446: LD_VAR 0 6
34450: PUSH
34451: LD_INT 1
34453: ARRAY
34454: PPUSH
34455: LD_VAR 0 2
34459: PPUSH
34460: LD_VAR 0 5
34464: PPUSH
34465: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34469: LD_VAR 0 6
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: PPUSH
34478: LD_VAR 0 3
34482: PPUSH
34483: LD_VAR 0 4
34487: PPUSH
34488: CALL_OW 237
// end ;
34492: PPOPN 6
34494: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34495: LD_EXP 70
34499: PUSH
34500: LD_EXP 117
34504: AND
34505: IFFALSE 34584
34507: GO 34509
34509: DISABLE
34510: LD_INT 0
34512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34513: LD_ADDR_VAR 0 1
34517: PUSH
34518: LD_INT 22
34520: PUSH
34521: LD_OWVAR 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 30
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 69
34548: ST_TO_ADDR
// if not tmp then
34549: LD_VAR 0 1
34553: NOT
34554: IFFALSE 34558
// exit ;
34556: GO 34584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34558: LD_VAR 0 1
34562: PUSH
34563: LD_INT 1
34565: PPUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 12
34575: ARRAY
34576: PPUSH
34577: LD_INT 1
34579: PPUSH
34580: CALL_OW 234
// end ;
34584: PPOPN 1
34586: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34587: LD_EXP 70
34591: PUSH
34592: LD_EXP 118
34596: AND
34597: IFFALSE 34709
34599: GO 34601
34601: DISABLE
34602: LD_INT 0
34604: PPUSH
34605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34606: LD_ADDR_VAR 0 2
34610: PUSH
34611: LD_INT 22
34613: PUSH
34614: LD_OWVAR 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 30
34628: PUSH
34629: LD_INT 27
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 30
34638: PUSH
34639: LD_INT 26
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 30
34648: PUSH
34649: LD_INT 28
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PPUSH
34666: CALL_OW 69
34670: ST_TO_ADDR
// if not tmp then
34671: LD_VAR 0 2
34675: NOT
34676: IFFALSE 34680
// exit ;
34678: GO 34709
// for i in tmp do
34680: LD_ADDR_VAR 0 1
34684: PUSH
34685: LD_VAR 0 2
34689: PUSH
34690: FOR_IN
34691: IFFALSE 34707
// SetLives ( i , 1 ) ;
34693: LD_VAR 0 1
34697: PPUSH
34698: LD_INT 1
34700: PPUSH
34701: CALL_OW 234
34705: GO 34690
34707: POP
34708: POP
// end ;
34709: PPOPN 2
34711: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34712: LD_EXP 70
34716: PUSH
34717: LD_EXP 119
34721: AND
34722: IFFALSE 34996
34724: GO 34726
34726: DISABLE
34727: LD_INT 0
34729: PPUSH
34730: PPUSH
34731: PPUSH
// begin i := rand ( 1 , 7 ) ;
34732: LD_ADDR_VAR 0 1
34736: PUSH
34737: LD_INT 1
34739: PPUSH
34740: LD_INT 7
34742: PPUSH
34743: CALL_OW 12
34747: ST_TO_ADDR
// case i of 1 :
34748: LD_VAR 0 1
34752: PUSH
34753: LD_INT 1
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34771
34761: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34762: LD_STRING earthquake(getX(game), 0, 32)
34764: PPUSH
34765: CALL_OW 559
34769: GO 34996
34771: LD_INT 2
34773: DOUBLE
34774: EQUAL
34775: IFTRUE 34779
34777: GO 34793
34779: POP
// begin ToLua ( displayStucuk(); ) ;
34780: LD_STRING displayStucuk();
34782: PPUSH
34783: CALL_OW 559
// ResetFog ;
34787: CALL_OW 335
// end ; 3 :
34791: GO 34996
34793: LD_INT 3
34795: DOUBLE
34796: EQUAL
34797: IFTRUE 34801
34799: GO 34905
34801: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34802: LD_ADDR_VAR 0 2
34806: PUSH
34807: LD_INT 22
34809: PUSH
34810: LD_OWVAR 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 25
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL_OW 69
34837: ST_TO_ADDR
// if not tmp then
34838: LD_VAR 0 2
34842: NOT
34843: IFFALSE 34847
// exit ;
34845: GO 34996
// un := tmp [ rand ( 1 , tmp ) ] ;
34847: LD_ADDR_VAR 0 3
34851: PUSH
34852: LD_VAR 0 2
34856: PUSH
34857: LD_INT 1
34859: PPUSH
34860: LD_VAR 0 2
34864: PPUSH
34865: CALL_OW 12
34869: ARRAY
34870: ST_TO_ADDR
// if Crawls ( un ) then
34871: LD_VAR 0 3
34875: PPUSH
34876: CALL_OW 318
34880: IFFALSE 34891
// ComWalk ( un ) ;
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34891: LD_VAR 0 3
34895: PPUSH
34896: LD_INT 8
34898: PPUSH
34899: CALL_OW 336
// end ; 4 :
34903: GO 34996
34905: LD_INT 4
34907: DOUBLE
34908: EQUAL
34909: IFTRUE 34913
34911: GO 34974
34913: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34914: LD_ADDR_VAR 0 2
34918: PUSH
34919: LD_INT 22
34921: PUSH
34922: LD_OWVAR 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: LD_INT 29
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PPUSH
34945: CALL_OW 69
34949: ST_TO_ADDR
// if not tmp then
34950: LD_VAR 0 2
34954: NOT
34955: IFFALSE 34959
// exit ;
34957: GO 34996
// DestroyUnit ( tmp [ 1 ] ) ;
34959: LD_VAR 0 2
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PPUSH
34968: CALL_OW 65
// end ; 5 .. 7 :
34972: GO 34996
34974: LD_INT 5
34976: DOUBLE
34977: GREATEREQUAL
34978: IFFALSE 34986
34980: LD_INT 7
34982: DOUBLE
34983: LESSEQUAL
34984: IFTRUE 34988
34986: GO 34995
34988: POP
// StreamSibBomb ; end ;
34989: CALL 31246 0 0
34993: GO 34996
34995: POP
// end ;
34996: PPOPN 3
34998: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34999: LD_EXP 70
35003: PUSH
35004: LD_EXP 120
35008: AND
35009: IFFALSE 35165
35011: GO 35013
35013: DISABLE
35014: LD_INT 0
35016: PPUSH
35017: PPUSH
35018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35019: LD_ADDR_VAR 0 2
35023: PUSH
35024: LD_INT 81
35026: PUSH
35027: LD_OWVAR 2
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 21
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 21
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PPUSH
35068: CALL_OW 69
35072: ST_TO_ADDR
// if not tmp then
35073: LD_VAR 0 2
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35165
// p := 0 ;
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_INT 0
35089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35090: LD_INT 35
35092: PPUSH
35093: CALL_OW 67
// p := p + 1 ;
35097: LD_ADDR_VAR 0 3
35101: PUSH
35102: LD_VAR 0 3
35106: PUSH
35107: LD_INT 1
35109: PLUS
35110: ST_TO_ADDR
// for i in tmp do
35111: LD_ADDR_VAR 0 1
35115: PUSH
35116: LD_VAR 0 2
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35153
// if GetLives ( i ) < 1000 then
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL_OW 256
35133: PUSH
35134: LD_INT 1000
35136: LESS
35137: IFFALSE 35151
// SetLives ( i , 1000 ) ;
35139: LD_VAR 0 1
35143: PPUSH
35144: LD_INT 1000
35146: PPUSH
35147: CALL_OW 234
35151: GO 35121
35153: POP
35154: POP
// until p > 20 ;
35155: LD_VAR 0 3
35159: PUSH
35160: LD_INT 20
35162: GREATER
35163: IFFALSE 35090
// end ;
35165: PPOPN 3
35167: END
// every 0 0$1 trigger StreamModeActive and sTime do
35168: LD_EXP 70
35172: PUSH
35173: LD_EXP 121
35177: AND
35178: IFFALSE 35213
35180: GO 35182
35182: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35183: LD_INT 28
35185: PPUSH
35186: LD_OWVAR 2
35190: PPUSH
35191: LD_INT 2
35193: PPUSH
35194: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35198: LD_INT 30
35200: PPUSH
35201: LD_OWVAR 2
35205: PPUSH
35206: LD_INT 2
35208: PPUSH
35209: CALL_OW 322
// end ;
35213: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35214: LD_EXP 70
35218: PUSH
35219: LD_EXP 122
35223: AND
35224: IFFALSE 35345
35226: GO 35228
35228: DISABLE
35229: LD_INT 0
35231: PPUSH
35232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35233: LD_ADDR_VAR 0 2
35237: PUSH
35238: LD_INT 22
35240: PUSH
35241: LD_OWVAR 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 21
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: LD_INT 23
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: PPUSH
35282: CALL_OW 69
35286: ST_TO_ADDR
// if not tmp then
35287: LD_VAR 0 2
35291: NOT
35292: IFFALSE 35296
// exit ;
35294: GO 35345
// for i in tmp do
35296: LD_ADDR_VAR 0 1
35300: PUSH
35301: LD_VAR 0 2
35305: PUSH
35306: FOR_IN
35307: IFFALSE 35343
// begin if Crawls ( i ) then
35309: LD_VAR 0 1
35313: PPUSH
35314: CALL_OW 318
35318: IFFALSE 35329
// ComWalk ( i ) ;
35320: LD_VAR 0 1
35324: PPUSH
35325: CALL_OW 138
// SetClass ( i , 2 ) ;
35329: LD_VAR 0 1
35333: PPUSH
35334: LD_INT 2
35336: PPUSH
35337: CALL_OW 336
// end ;
35341: GO 35306
35343: POP
35344: POP
// end ;
35345: PPOPN 2
35347: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35348: LD_EXP 70
35352: PUSH
35353: LD_EXP 123
35357: AND
35358: IFFALSE 35639
35360: GO 35362
35362: DISABLE
35363: LD_INT 0
35365: PPUSH
35366: PPUSH
35367: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35368: LD_OWVAR 2
35372: PPUSH
35373: LD_INT 9
35375: PPUSH
35376: LD_INT 1
35378: PPUSH
35379: LD_INT 1
35381: PPUSH
35382: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35386: LD_INT 9
35388: PPUSH
35389: LD_OWVAR 2
35393: PPUSH
35394: CALL_OW 343
// uc_side := 9 ;
35398: LD_ADDR_OWVAR 20
35402: PUSH
35403: LD_INT 9
35405: ST_TO_ADDR
// uc_nation := 2 ;
35406: LD_ADDR_OWVAR 21
35410: PUSH
35411: LD_INT 2
35413: ST_TO_ADDR
// hc_name := Dark Warrior ;
35414: LD_ADDR_OWVAR 26
35418: PUSH
35419: LD_STRING Dark Warrior
35421: ST_TO_ADDR
// hc_gallery :=  ;
35422: LD_ADDR_OWVAR 33
35426: PUSH
35427: LD_STRING 
35429: ST_TO_ADDR
// hc_noskilllimit := true ;
35430: LD_ADDR_OWVAR 76
35434: PUSH
35435: LD_INT 1
35437: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35438: LD_ADDR_OWVAR 31
35442: PUSH
35443: LD_INT 30
35445: PUSH
35446: LD_INT 30
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 30
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: ST_TO_ADDR
// un := CreateHuman ;
35461: LD_ADDR_VAR 0 3
35465: PUSH
35466: CALL_OW 44
35470: ST_TO_ADDR
// hc_noskilllimit := false ;
35471: LD_ADDR_OWVAR 76
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35479: LD_VAR 0 3
35483: PPUSH
35484: LD_INT 1
35486: PPUSH
35487: CALL_OW 51
// p := 0 ;
35491: LD_ADDR_VAR 0 2
35495: PUSH
35496: LD_INT 0
35498: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35499: LD_INT 35
35501: PPUSH
35502: CALL_OW 67
// p := p + 1 ;
35506: LD_ADDR_VAR 0 2
35510: PUSH
35511: LD_VAR 0 2
35515: PUSH
35516: LD_INT 1
35518: PLUS
35519: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35520: LD_VAR 0 3
35524: PPUSH
35525: CALL_OW 256
35529: PUSH
35530: LD_INT 1000
35532: LESS
35533: IFFALSE 35547
// SetLives ( un , 1000 ) ;
35535: LD_VAR 0 3
35539: PPUSH
35540: LD_INT 1000
35542: PPUSH
35543: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35547: LD_VAR 0 3
35551: PPUSH
35552: LD_INT 81
35554: PUSH
35555: LD_OWVAR 2
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 91
35566: PUSH
35567: LD_VAR 0 3
35571: PUSH
35572: LD_INT 30
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 69
35588: PPUSH
35589: LD_VAR 0 3
35593: PPUSH
35594: CALL_OW 74
35598: PPUSH
35599: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35603: LD_VAR 0 2
35607: PUSH
35608: LD_INT 60
35610: GREATER
35611: PUSH
35612: LD_VAR 0 3
35616: PPUSH
35617: CALL_OW 301
35621: OR
35622: IFFALSE 35499
// if un then
35624: LD_VAR 0 3
35628: IFFALSE 35639
// RemoveUnit ( un ) ;
35630: LD_VAR 0 3
35634: PPUSH
35635: CALL_OW 64
// end ;
35639: PPOPN 3
35641: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35642: LD_INT 0
35644: PPUSH
// case cmd of 301 :
35645: LD_VAR 0 1
35649: PUSH
35650: LD_INT 301
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35658
35656: GO 35690
35658: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35659: LD_VAR 0 6
35663: PPUSH
35664: LD_VAR 0 7
35668: PPUSH
35669: LD_VAR 0 8
35673: PPUSH
35674: LD_VAR 0 4
35678: PPUSH
35679: LD_VAR 0 5
35683: PPUSH
35684: CALL 36891 0 5
35688: GO 35811
35690: LD_INT 302
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35698
35696: GO 35735
35698: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35699: LD_VAR 0 6
35703: PPUSH
35704: LD_VAR 0 7
35708: PPUSH
35709: LD_VAR 0 8
35713: PPUSH
35714: LD_VAR 0 9
35718: PPUSH
35719: LD_VAR 0 4
35723: PPUSH
35724: LD_VAR 0 5
35728: PPUSH
35729: CALL 36982 0 6
35733: GO 35811
35735: LD_INT 303
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35780
35743: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35744: LD_VAR 0 6
35748: PPUSH
35749: LD_VAR 0 7
35753: PPUSH
35754: LD_VAR 0 8
35758: PPUSH
35759: LD_VAR 0 9
35763: PPUSH
35764: LD_VAR 0 4
35768: PPUSH
35769: LD_VAR 0 5
35773: PPUSH
35774: CALL 35816 0 6
35778: GO 35811
35780: LD_INT 304
35782: DOUBLE
35783: EQUAL
35784: IFTRUE 35788
35786: GO 35810
35788: POP
// hHackTeleport ( unit , x , y ) ; end ;
35789: LD_VAR 0 2
35793: PPUSH
35794: LD_VAR 0 4
35798: PPUSH
35799: LD_VAR 0 5
35803: PPUSH
35804: CALL 37575 0 3
35808: GO 35811
35810: POP
// end ;
35811: LD_VAR 0 12
35815: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35816: LD_INT 0
35818: PPUSH
35819: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35820: LD_VAR 0 1
35824: PUSH
35825: LD_INT 1
35827: LESS
35828: PUSH
35829: LD_VAR 0 1
35833: PUSH
35834: LD_INT 3
35836: GREATER
35837: OR
35838: PUSH
35839: LD_VAR 0 5
35843: PPUSH
35844: LD_VAR 0 6
35848: PPUSH
35849: CALL_OW 428
35853: OR
35854: IFFALSE 35858
// exit ;
35856: GO 36578
// uc_side := your_side ;
35858: LD_ADDR_OWVAR 20
35862: PUSH
35863: LD_OWVAR 2
35867: ST_TO_ADDR
// uc_nation := nation ;
35868: LD_ADDR_OWVAR 21
35872: PUSH
35873: LD_VAR 0 1
35877: ST_TO_ADDR
// bc_level = 1 ;
35878: LD_ADDR_OWVAR 43
35882: PUSH
35883: LD_INT 1
35885: ST_TO_ADDR
// case btype of 1 :
35886: LD_VAR 0 2
35890: PUSH
35891: LD_INT 1
35893: DOUBLE
35894: EQUAL
35895: IFTRUE 35899
35897: GO 35910
35899: POP
// bc_type := b_depot ; 2 :
35900: LD_ADDR_OWVAR 42
35904: PUSH
35905: LD_INT 0
35907: ST_TO_ADDR
35908: GO 36522
35910: LD_INT 2
35912: DOUBLE
35913: EQUAL
35914: IFTRUE 35918
35916: GO 35929
35918: POP
// bc_type := b_warehouse ; 3 :
35919: LD_ADDR_OWVAR 42
35923: PUSH
35924: LD_INT 1
35926: ST_TO_ADDR
35927: GO 36522
35929: LD_INT 3
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 35948
35937: POP
// bc_type := b_lab ; 4 .. 9 :
35938: LD_ADDR_OWVAR 42
35942: PUSH
35943: LD_INT 6
35945: ST_TO_ADDR
35946: GO 36522
35948: LD_INT 4
35950: DOUBLE
35951: GREATEREQUAL
35952: IFFALSE 35960
35954: LD_INT 9
35956: DOUBLE
35957: LESSEQUAL
35958: IFTRUE 35962
35960: GO 36014
35962: POP
// begin bc_type := b_lab_half ;
35963: LD_ADDR_OWVAR 42
35967: PUSH
35968: LD_INT 7
35970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35971: LD_ADDR_OWVAR 44
35975: PUSH
35976: LD_INT 10
35978: PUSH
35979: LD_INT 11
35981: PUSH
35982: LD_INT 12
35984: PUSH
35985: LD_INT 15
35987: PUSH
35988: LD_INT 14
35990: PUSH
35991: LD_INT 13
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: PUSH
36002: LD_VAR 0 2
36006: PUSH
36007: LD_INT 3
36009: MINUS
36010: ARRAY
36011: ST_TO_ADDR
// end ; 10 .. 13 :
36012: GO 36522
36014: LD_INT 10
36016: DOUBLE
36017: GREATEREQUAL
36018: IFFALSE 36026
36020: LD_INT 13
36022: DOUBLE
36023: LESSEQUAL
36024: IFTRUE 36028
36026: GO 36105
36028: POP
// begin bc_type := b_lab_full ;
36029: LD_ADDR_OWVAR 42
36033: PUSH
36034: LD_INT 8
36036: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36037: LD_ADDR_OWVAR 44
36041: PUSH
36042: LD_INT 10
36044: PUSH
36045: LD_INT 12
36047: PUSH
36048: LD_INT 14
36050: PUSH
36051: LD_INT 13
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: LD_VAR 0 2
36064: PUSH
36065: LD_INT 9
36067: MINUS
36068: ARRAY
36069: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36070: LD_ADDR_OWVAR 45
36074: PUSH
36075: LD_INT 11
36077: PUSH
36078: LD_INT 15
36080: PUSH
36081: LD_INT 12
36083: PUSH
36084: LD_INT 15
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: PUSH
36093: LD_VAR 0 2
36097: PUSH
36098: LD_INT 9
36100: MINUS
36101: ARRAY
36102: ST_TO_ADDR
// end ; 14 :
36103: GO 36522
36105: LD_INT 14
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36124
36113: POP
// bc_type := b_workshop ; 15 :
36114: LD_ADDR_OWVAR 42
36118: PUSH
36119: LD_INT 2
36121: ST_TO_ADDR
36122: GO 36522
36124: LD_INT 15
36126: DOUBLE
36127: EQUAL
36128: IFTRUE 36132
36130: GO 36143
36132: POP
// bc_type := b_factory ; 16 :
36133: LD_ADDR_OWVAR 42
36137: PUSH
36138: LD_INT 3
36140: ST_TO_ADDR
36141: GO 36522
36143: LD_INT 16
36145: DOUBLE
36146: EQUAL
36147: IFTRUE 36151
36149: GO 36162
36151: POP
// bc_type := b_ext_gun ; 17 :
36152: LD_ADDR_OWVAR 42
36156: PUSH
36157: LD_INT 17
36159: ST_TO_ADDR
36160: GO 36522
36162: LD_INT 17
36164: DOUBLE
36165: EQUAL
36166: IFTRUE 36170
36168: GO 36198
36170: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36171: LD_ADDR_OWVAR 42
36175: PUSH
36176: LD_INT 19
36178: PUSH
36179: LD_INT 23
36181: PUSH
36182: LD_INT 19
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_VAR 0 1
36194: ARRAY
36195: ST_TO_ADDR
36196: GO 36522
36198: LD_INT 18
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36206
36204: GO 36217
36206: POP
// bc_type := b_ext_radar ; 19 :
36207: LD_ADDR_OWVAR 42
36211: PUSH
36212: LD_INT 20
36214: ST_TO_ADDR
36215: GO 36522
36217: LD_INT 19
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36236
36225: POP
// bc_type := b_ext_radio ; 20 :
36226: LD_ADDR_OWVAR 42
36230: PUSH
36231: LD_INT 22
36233: ST_TO_ADDR
36234: GO 36522
36236: LD_INT 20
36238: DOUBLE
36239: EQUAL
36240: IFTRUE 36244
36242: GO 36255
36244: POP
// bc_type := b_ext_siberium ; 21 :
36245: LD_ADDR_OWVAR 42
36249: PUSH
36250: LD_INT 21
36252: ST_TO_ADDR
36253: GO 36522
36255: LD_INT 21
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36274
36263: POP
// bc_type := b_ext_computer ; 22 :
36264: LD_ADDR_OWVAR 42
36268: PUSH
36269: LD_INT 24
36271: ST_TO_ADDR
36272: GO 36522
36274: LD_INT 22
36276: DOUBLE
36277: EQUAL
36278: IFTRUE 36282
36280: GO 36293
36282: POP
// bc_type := b_ext_track ; 23 :
36283: LD_ADDR_OWVAR 42
36287: PUSH
36288: LD_INT 16
36290: ST_TO_ADDR
36291: GO 36522
36293: LD_INT 23
36295: DOUBLE
36296: EQUAL
36297: IFTRUE 36301
36299: GO 36312
36301: POP
// bc_type := b_ext_laser ; 24 :
36302: LD_ADDR_OWVAR 42
36306: PUSH
36307: LD_INT 25
36309: ST_TO_ADDR
36310: GO 36522
36312: LD_INT 24
36314: DOUBLE
36315: EQUAL
36316: IFTRUE 36320
36318: GO 36331
36320: POP
// bc_type := b_control_tower ; 25 :
36321: LD_ADDR_OWVAR 42
36325: PUSH
36326: LD_INT 36
36328: ST_TO_ADDR
36329: GO 36522
36331: LD_INT 25
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36339
36337: GO 36350
36339: POP
// bc_type := b_breastwork ; 26 :
36340: LD_ADDR_OWVAR 42
36344: PUSH
36345: LD_INT 31
36347: ST_TO_ADDR
36348: GO 36522
36350: LD_INT 26
36352: DOUBLE
36353: EQUAL
36354: IFTRUE 36358
36356: GO 36369
36358: POP
// bc_type := b_bunker ; 27 :
36359: LD_ADDR_OWVAR 42
36363: PUSH
36364: LD_INT 32
36366: ST_TO_ADDR
36367: GO 36522
36369: LD_INT 27
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36388
36377: POP
// bc_type := b_turret ; 28 :
36378: LD_ADDR_OWVAR 42
36382: PUSH
36383: LD_INT 33
36385: ST_TO_ADDR
36386: GO 36522
36388: LD_INT 28
36390: DOUBLE
36391: EQUAL
36392: IFTRUE 36396
36394: GO 36407
36396: POP
// bc_type := b_armoury ; 29 :
36397: LD_ADDR_OWVAR 42
36401: PUSH
36402: LD_INT 4
36404: ST_TO_ADDR
36405: GO 36522
36407: LD_INT 29
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36426
36415: POP
// bc_type := b_barracks ; 30 :
36416: LD_ADDR_OWVAR 42
36420: PUSH
36421: LD_INT 5
36423: ST_TO_ADDR
36424: GO 36522
36426: LD_INT 30
36428: DOUBLE
36429: EQUAL
36430: IFTRUE 36434
36432: GO 36445
36434: POP
// bc_type := b_solar_power ; 31 :
36435: LD_ADDR_OWVAR 42
36439: PUSH
36440: LD_INT 27
36442: ST_TO_ADDR
36443: GO 36522
36445: LD_INT 31
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36464
36453: POP
// bc_type := b_oil_power ; 32 :
36454: LD_ADDR_OWVAR 42
36458: PUSH
36459: LD_INT 26
36461: ST_TO_ADDR
36462: GO 36522
36464: LD_INT 32
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 36483
36472: POP
// bc_type := b_siberite_power ; 33 :
36473: LD_ADDR_OWVAR 42
36477: PUSH
36478: LD_INT 28
36480: ST_TO_ADDR
36481: GO 36522
36483: LD_INT 33
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36491
36489: GO 36502
36491: POP
// bc_type := b_oil_mine ; 34 :
36492: LD_ADDR_OWVAR 42
36496: PUSH
36497: LD_INT 29
36499: ST_TO_ADDR
36500: GO 36522
36502: LD_INT 34
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36521
36510: POP
// bc_type := b_siberite_mine ; end ;
36511: LD_ADDR_OWVAR 42
36515: PUSH
36516: LD_INT 30
36518: ST_TO_ADDR
36519: GO 36522
36521: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36522: LD_ADDR_VAR 0 8
36526: PUSH
36527: LD_VAR 0 5
36531: PPUSH
36532: LD_VAR 0 6
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: CALL_OW 47
36546: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36547: LD_OWVAR 42
36551: PUSH
36552: LD_INT 32
36554: PUSH
36555: LD_INT 33
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: IN
36562: IFFALSE 36578
// PlaceWeaponTurret ( b , weapon ) ;
36564: LD_VAR 0 8
36568: PPUSH
36569: LD_VAR 0 4
36573: PPUSH
36574: CALL_OW 431
// end ;
36578: LD_VAR 0 7
36582: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36583: LD_INT 0
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36589: LD_ADDR_VAR 0 4
36593: PUSH
36594: LD_INT 22
36596: PUSH
36597: LD_OWVAR 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 30
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 69
36642: ST_TO_ADDR
// if not tmp then
36643: LD_VAR 0 4
36647: NOT
36648: IFFALSE 36652
// exit ;
36650: GO 36711
// for i in tmp do
36652: LD_ADDR_VAR 0 2
36656: PUSH
36657: LD_VAR 0 4
36661: PUSH
36662: FOR_IN
36663: IFFALSE 36709
// for j = 1 to 3 do
36665: LD_ADDR_VAR 0 3
36669: PUSH
36670: DOUBLE
36671: LD_INT 1
36673: DEC
36674: ST_TO_ADDR
36675: LD_INT 3
36677: PUSH
36678: FOR_TO
36679: IFFALSE 36705
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36681: LD_VAR 0 2
36685: PPUSH
36686: CALL_OW 274
36690: PPUSH
36691: LD_VAR 0 3
36695: PPUSH
36696: LD_INT 99999
36698: PPUSH
36699: CALL_OW 277
36703: GO 36678
36705: POP
36706: POP
36707: GO 36662
36709: POP
36710: POP
// end ;
36711: LD_VAR 0 1
36715: RET
// export function hHackSetLevel10 ; var i , j ; begin
36716: LD_INT 0
36718: PPUSH
36719: PPUSH
36720: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36721: LD_ADDR_VAR 0 2
36725: PUSH
36726: LD_INT 21
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PPUSH
36736: CALL_OW 69
36740: PUSH
36741: FOR_IN
36742: IFFALSE 36794
// if IsSelected ( i ) then
36744: LD_VAR 0 2
36748: PPUSH
36749: CALL_OW 306
36753: IFFALSE 36792
// begin for j := 1 to 4 do
36755: LD_ADDR_VAR 0 3
36759: PUSH
36760: DOUBLE
36761: LD_INT 1
36763: DEC
36764: ST_TO_ADDR
36765: LD_INT 4
36767: PUSH
36768: FOR_TO
36769: IFFALSE 36790
// SetSkill ( i , j , 10 ) ;
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 3
36780: PPUSH
36781: LD_INT 10
36783: PPUSH
36784: CALL_OW 237
36788: GO 36768
36790: POP
36791: POP
// end ;
36792: GO 36741
36794: POP
36795: POP
// end ;
36796: LD_VAR 0 1
36800: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
36805: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36806: LD_ADDR_VAR 0 2
36810: PUSH
36811: LD_INT 22
36813: PUSH
36814: LD_OWVAR 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 21
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PPUSH
36837: CALL_OW 69
36841: PUSH
36842: FOR_IN
36843: IFFALSE 36884
// begin for j := 1 to 4 do
36845: LD_ADDR_VAR 0 3
36849: PUSH
36850: DOUBLE
36851: LD_INT 1
36853: DEC
36854: ST_TO_ADDR
36855: LD_INT 4
36857: PUSH
36858: FOR_TO
36859: IFFALSE 36880
// SetSkill ( i , j , 10 ) ;
36861: LD_VAR 0 2
36865: PPUSH
36866: LD_VAR 0 3
36870: PPUSH
36871: LD_INT 10
36873: PPUSH
36874: CALL_OW 237
36878: GO 36858
36880: POP
36881: POP
// end ;
36882: GO 36842
36884: POP
36885: POP
// end ;
36886: LD_VAR 0 1
36890: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36891: LD_INT 0
36893: PPUSH
// uc_side := your_side ;
36894: LD_ADDR_OWVAR 20
36898: PUSH
36899: LD_OWVAR 2
36903: ST_TO_ADDR
// uc_nation := nation ;
36904: LD_ADDR_OWVAR 21
36908: PUSH
36909: LD_VAR 0 1
36913: ST_TO_ADDR
// InitHc ;
36914: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36918: LD_INT 0
36920: PPUSH
36921: LD_VAR 0 2
36925: PPUSH
36926: LD_VAR 0 3
36930: PPUSH
36931: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36935: LD_VAR 0 4
36939: PPUSH
36940: LD_VAR 0 5
36944: PPUSH
36945: CALL_OW 428
36949: PUSH
36950: LD_INT 0
36952: EQUAL
36953: IFFALSE 36977
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36955: CALL_OW 44
36959: PPUSH
36960: LD_VAR 0 4
36964: PPUSH
36965: LD_VAR 0 5
36969: PPUSH
36970: LD_INT 1
36972: PPUSH
36973: CALL_OW 48
// end ;
36977: LD_VAR 0 6
36981: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36982: LD_INT 0
36984: PPUSH
36985: PPUSH
// uc_side := your_side ;
36986: LD_ADDR_OWVAR 20
36990: PUSH
36991: LD_OWVAR 2
36995: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36996: LD_VAR 0 1
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 3
37009: PUSH
37010: LD_INT 4
37012: PUSH
37013: LD_INT 5
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: IN
37023: IFFALSE 37035
// uc_nation := nation_american else
37025: LD_ADDR_OWVAR 21
37029: PUSH
37030: LD_INT 1
37032: ST_TO_ADDR
37033: GO 37078
// if chassis in [ 11 , 12 , 13 , 14 ] then
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 11
37042: PUSH
37043: LD_INT 12
37045: PUSH
37046: LD_INT 13
37048: PUSH
37049: LD_INT 14
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: IN
37058: IFFALSE 37070
// uc_nation := nation_arabian else
37060: LD_ADDR_OWVAR 21
37064: PUSH
37065: LD_INT 2
37067: ST_TO_ADDR
37068: GO 37078
// uc_nation := nation_russian ;
37070: LD_ADDR_OWVAR 21
37074: PUSH
37075: LD_INT 3
37077: ST_TO_ADDR
// vc_chassis := chassis ;
37078: LD_ADDR_OWVAR 37
37082: PUSH
37083: LD_VAR 0 1
37087: ST_TO_ADDR
// vc_engine := engine ;
37088: LD_ADDR_OWVAR 39
37092: PUSH
37093: LD_VAR 0 2
37097: ST_TO_ADDR
// vc_control := control ;
37098: LD_ADDR_OWVAR 38
37102: PUSH
37103: LD_VAR 0 3
37107: ST_TO_ADDR
// vc_weapon := weapon ;
37108: LD_ADDR_OWVAR 40
37112: PUSH
37113: LD_VAR 0 4
37117: ST_TO_ADDR
// un := CreateVehicle ;
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: CALL_OW 45
37127: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37128: LD_VAR 0 8
37132: PPUSH
37133: LD_INT 0
37135: PPUSH
37136: LD_INT 5
37138: PPUSH
37139: CALL_OW 12
37143: PPUSH
37144: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37148: LD_VAR 0 8
37152: PPUSH
37153: LD_VAR 0 5
37157: PPUSH
37158: LD_VAR 0 6
37162: PPUSH
37163: LD_INT 1
37165: PPUSH
37166: CALL_OW 48
// end ;
37170: LD_VAR 0 7
37174: RET
// export hInvincible ; every 1 do
37175: GO 37177
37177: DISABLE
// hInvincible := [ ] ;
37178: LD_ADDR_EXP 124
37182: PUSH
37183: EMPTY
37184: ST_TO_ADDR
37185: END
// every 10 do var i ;
37186: GO 37188
37188: DISABLE
37189: LD_INT 0
37191: PPUSH
// begin enable ;
37192: ENABLE
// if not hInvincible then
37193: LD_EXP 124
37197: NOT
37198: IFFALSE 37202
// exit ;
37200: GO 37246
// for i in hInvincible do
37202: LD_ADDR_VAR 0 1
37206: PUSH
37207: LD_EXP 124
37211: PUSH
37212: FOR_IN
37213: IFFALSE 37244
// if GetLives ( i ) < 1000 then
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 256
37224: PUSH
37225: LD_INT 1000
37227: LESS
37228: IFFALSE 37242
// SetLives ( i , 1000 ) ;
37230: LD_VAR 0 1
37234: PPUSH
37235: LD_INT 1000
37237: PPUSH
37238: CALL_OW 234
37242: GO 37212
37244: POP
37245: POP
// end ;
37246: PPOPN 1
37248: END
// export function hHackInvincible ; var i ; begin
37249: LD_INT 0
37251: PPUSH
37252: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37253: LD_ADDR_VAR 0 2
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: LD_INT 21
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 21
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 69
37290: PUSH
37291: FOR_IN
37292: IFFALSE 37353
// if IsSelected ( i ) then
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL_OW 306
37303: IFFALSE 37351
// begin if i in hInvincible then
37305: LD_VAR 0 2
37309: PUSH
37310: LD_EXP 124
37314: IN
37315: IFFALSE 37335
// hInvincible := hInvincible diff i else
37317: LD_ADDR_EXP 124
37321: PUSH
37322: LD_EXP 124
37326: PUSH
37327: LD_VAR 0 2
37331: DIFF
37332: ST_TO_ADDR
37333: GO 37351
// hInvincible := hInvincible union i ;
37335: LD_ADDR_EXP 124
37339: PUSH
37340: LD_EXP 124
37344: PUSH
37345: LD_VAR 0 2
37349: UNION
37350: ST_TO_ADDR
// end ;
37351: GO 37291
37353: POP
37354: POP
// end ;
37355: LD_VAR 0 1
37359: RET
// export function hHackInvisible ; var i , j ; begin
37360: LD_INT 0
37362: PPUSH
37363: PPUSH
37364: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37365: LD_ADDR_VAR 0 2
37369: PUSH
37370: LD_INT 21
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PPUSH
37380: CALL_OW 69
37384: PUSH
37385: FOR_IN
37386: IFFALSE 37410
// if IsSelected ( i ) then
37388: LD_VAR 0 2
37392: PPUSH
37393: CALL_OW 306
37397: IFFALSE 37408
// ComForceInvisible ( i ) ;
37399: LD_VAR 0 2
37403: PPUSH
37404: CALL_OW 496
37408: GO 37385
37410: POP
37411: POP
// end ;
37412: LD_VAR 0 1
37416: RET
// export function hHackChangeYourSide ; begin
37417: LD_INT 0
37419: PPUSH
// if your_side = 8 then
37420: LD_OWVAR 2
37424: PUSH
37425: LD_INT 8
37427: EQUAL
37428: IFFALSE 37440
// your_side := 0 else
37430: LD_ADDR_OWVAR 2
37434: PUSH
37435: LD_INT 0
37437: ST_TO_ADDR
37438: GO 37454
// your_side := your_side + 1 ;
37440: LD_ADDR_OWVAR 2
37444: PUSH
37445: LD_OWVAR 2
37449: PUSH
37450: LD_INT 1
37452: PLUS
37453: ST_TO_ADDR
// end ;
37454: LD_VAR 0 1
37458: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37459: LD_INT 0
37461: PPUSH
37462: PPUSH
37463: PPUSH
// for i in all_units do
37464: LD_ADDR_VAR 0 2
37468: PUSH
37469: LD_OWVAR 3
37473: PUSH
37474: FOR_IN
37475: IFFALSE 37553
// if IsSelected ( i ) then
37477: LD_VAR 0 2
37481: PPUSH
37482: CALL_OW 306
37486: IFFALSE 37551
// begin j := GetSide ( i ) ;
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: LD_VAR 0 2
37497: PPUSH
37498: CALL_OW 255
37502: ST_TO_ADDR
// if j = 8 then
37503: LD_VAR 0 3
37507: PUSH
37508: LD_INT 8
37510: EQUAL
37511: IFFALSE 37523
// j := 0 else
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: LD_INT 0
37520: ST_TO_ADDR
37521: GO 37537
// j := j + 1 ;
37523: LD_ADDR_VAR 0 3
37527: PUSH
37528: LD_VAR 0 3
37532: PUSH
37533: LD_INT 1
37535: PLUS
37536: ST_TO_ADDR
// SetSide ( i , j ) ;
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_VAR 0 3
37546: PPUSH
37547: CALL_OW 235
// end ;
37551: GO 37474
37553: POP
37554: POP
// end ;
37555: LD_VAR 0 1
37559: RET
// export function hHackFog ; begin
37560: LD_INT 0
37562: PPUSH
// FogOff ( true ) ;
37563: LD_INT 1
37565: PPUSH
37566: CALL_OW 344
// end ;
37570: LD_VAR 0 1
37574: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37575: LD_INT 0
37577: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_VAR 0 2
37587: PPUSH
37588: LD_VAR 0 3
37592: PPUSH
37593: LD_INT 1
37595: PPUSH
37596: LD_INT 1
37598: PPUSH
37599: CALL_OW 483
// CenterOnXY ( x , y ) ;
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: CALL_OW 84
// end ; end_of_file
37617: LD_VAR 0 4
37621: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37622: LD_INT 0
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL_OW 264
37637: PUSH
37638: LD_EXP 55
37642: EQUAL
37643: IFFALSE 37715
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37645: LD_INT 68
37647: PPUSH
37648: LD_VAR 0 1
37652: PPUSH
37653: CALL_OW 255
37657: PPUSH
37658: CALL_OW 321
37662: PUSH
37663: LD_INT 2
37665: EQUAL
37666: IFFALSE 37678
// eff := 70 else
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_INT 70
37675: ST_TO_ADDR
37676: GO 37686
// eff := 30 ;
37678: LD_ADDR_VAR 0 4
37682: PUSH
37683: LD_INT 30
37685: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 250
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 251
37705: PPUSH
37706: LD_VAR 0 4
37710: PPUSH
37711: CALL_OW 495
// end ; end ;
37715: LD_VAR 0 2
37719: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37720: LD_INT 0
37722: PPUSH
// end ;
37723: LD_VAR 0 4
37727: RET
// export function SOS_Command ( cmd ) ; begin
37728: LD_INT 0
37730: PPUSH
// end ;
37731: LD_VAR 0 2
37735: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37736: LD_INT 0
37738: PPUSH
// if cmd = 121 then
37739: LD_VAR 0 1
37743: PUSH
37744: LD_INT 121
37746: EQUAL
37747: IFFALSE 37749
// end ;
37749: LD_VAR 0 6
37753: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37754: LD_INT 0
37756: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37757: LD_VAR 0 1
37761: PUSH
37762: LD_INT 250
37764: EQUAL
37765: PUSH
37766: LD_VAR 0 2
37770: PPUSH
37771: CALL_OW 264
37775: PUSH
37776: LD_EXP 58
37780: EQUAL
37781: AND
37782: IFFALSE 37803
// MinerPlaceMine ( unit , x , y ) ;
37784: LD_VAR 0 2
37788: PPUSH
37789: LD_VAR 0 4
37793: PPUSH
37794: LD_VAR 0 5
37798: PPUSH
37799: CALL 40152 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37803: LD_VAR 0 1
37807: PUSH
37808: LD_INT 251
37810: EQUAL
37811: PUSH
37812: LD_VAR 0 2
37816: PPUSH
37817: CALL_OW 264
37821: PUSH
37822: LD_EXP 58
37826: EQUAL
37827: AND
37828: IFFALSE 37849
// MinerDetonateMine ( unit , x , y ) ;
37830: LD_VAR 0 2
37834: PPUSH
37835: LD_VAR 0 4
37839: PPUSH
37840: LD_VAR 0 5
37844: PPUSH
37845: CALL 40429 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37849: LD_VAR 0 1
37853: PUSH
37854: LD_INT 252
37856: EQUAL
37857: PUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: CALL_OW 264
37867: PUSH
37868: LD_EXP 58
37872: EQUAL
37873: AND
37874: IFFALSE 37895
// MinerCreateMinefield ( unit , x , y ) ;
37876: LD_VAR 0 2
37880: PPUSH
37881: LD_VAR 0 4
37885: PPUSH
37886: LD_VAR 0 5
37890: PPUSH
37891: CALL 40846 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37895: LD_VAR 0 1
37899: PUSH
37900: LD_INT 253
37902: EQUAL
37903: PUSH
37904: LD_VAR 0 2
37908: PPUSH
37909: CALL_OW 257
37913: PUSH
37914: LD_INT 5
37916: EQUAL
37917: AND
37918: IFFALSE 37939
// ComBinocular ( unit , x , y ) ;
37920: LD_VAR 0 2
37924: PPUSH
37925: LD_VAR 0 4
37929: PPUSH
37930: LD_VAR 0 5
37934: PPUSH
37935: CALL 41217 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37939: LD_VAR 0 1
37943: PUSH
37944: LD_INT 254
37946: EQUAL
37947: PUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 264
37957: PUSH
37958: LD_EXP 53
37962: EQUAL
37963: AND
37964: PUSH
37965: LD_VAR 0 3
37969: PPUSH
37970: CALL_OW 263
37974: PUSH
37975: LD_INT 3
37977: EQUAL
37978: AND
37979: IFFALSE 37995
// HackDestroyVehicle ( unit , selectedUnit ) ;
37981: LD_VAR 0 2
37985: PPUSH
37986: LD_VAR 0 3
37990: PPUSH
37991: CALL 39512 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37995: LD_VAR 0 1
37999: PUSH
38000: LD_INT 255
38002: EQUAL
38003: PUSH
38004: LD_VAR 0 2
38008: PPUSH
38009: CALL_OW 264
38013: PUSH
38014: LD_INT 14
38016: PUSH
38017: LD_INT 53
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: IN
38024: AND
38025: PUSH
38026: LD_VAR 0 4
38030: PPUSH
38031: LD_VAR 0 5
38035: PPUSH
38036: CALL_OW 488
38040: AND
38041: IFFALSE 38065
// CutTreeXYR ( unit , x , y , 12 ) ;
38043: LD_VAR 0 2
38047: PPUSH
38048: LD_VAR 0 4
38052: PPUSH
38053: LD_VAR 0 5
38057: PPUSH
38058: LD_INT 12
38060: PPUSH
38061: CALL 38078 0 4
// end ;
38065: LD_VAR 0 6
38069: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
38070: LD_INT 0
38072: PPUSH
// end ;
38073: LD_VAR 0 4
38077: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38089: LD_VAR 0 1
38093: NOT
38094: PUSH
38095: LD_VAR 0 2
38099: PPUSH
38100: LD_VAR 0 3
38104: PPUSH
38105: CALL_OW 488
38109: NOT
38110: OR
38111: PUSH
38112: LD_VAR 0 4
38116: NOT
38117: OR
38118: IFFALSE 38122
// exit ;
38120: GO 38462
// list := [ ] ;
38122: LD_ADDR_VAR 0 13
38126: PUSH
38127: EMPTY
38128: ST_TO_ADDR
// if x - r < 0 then
38129: LD_VAR 0 2
38133: PUSH
38134: LD_VAR 0 4
38138: MINUS
38139: PUSH
38140: LD_INT 0
38142: LESS
38143: IFFALSE 38155
// min_x := 0 else
38145: LD_ADDR_VAR 0 7
38149: PUSH
38150: LD_INT 0
38152: ST_TO_ADDR
38153: GO 38171
// min_x := x - r ;
38155: LD_ADDR_VAR 0 7
38159: PUSH
38160: LD_VAR 0 2
38164: PUSH
38165: LD_VAR 0 4
38169: MINUS
38170: ST_TO_ADDR
// if y - r < 0 then
38171: LD_VAR 0 3
38175: PUSH
38176: LD_VAR 0 4
38180: MINUS
38181: PUSH
38182: LD_INT 0
38184: LESS
38185: IFFALSE 38197
// min_y := 0 else
38187: LD_ADDR_VAR 0 8
38191: PUSH
38192: LD_INT 0
38194: ST_TO_ADDR
38195: GO 38213
// min_y := y - r ;
38197: LD_ADDR_VAR 0 8
38201: PUSH
38202: LD_VAR 0 3
38206: PUSH
38207: LD_VAR 0 4
38211: MINUS
38212: ST_TO_ADDR
// max_x := x + r ;
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_VAR 0 4
38227: PLUS
38228: ST_TO_ADDR
// max_y := y + r ;
38229: LD_ADDR_VAR 0 10
38233: PUSH
38234: LD_VAR 0 3
38238: PUSH
38239: LD_VAR 0 4
38243: PLUS
38244: ST_TO_ADDR
// for _x = min_x to max_x do
38245: LD_ADDR_VAR 0 11
38249: PUSH
38250: DOUBLE
38251: LD_VAR 0 7
38255: DEC
38256: ST_TO_ADDR
38257: LD_VAR 0 9
38261: PUSH
38262: FOR_TO
38263: IFFALSE 38380
// for _y = min_y to max_y do
38265: LD_ADDR_VAR 0 12
38269: PUSH
38270: DOUBLE
38271: LD_VAR 0 8
38275: DEC
38276: ST_TO_ADDR
38277: LD_VAR 0 10
38281: PUSH
38282: FOR_TO
38283: IFFALSE 38376
// begin if not ValidHex ( _x , _y ) then
38285: LD_VAR 0 11
38289: PPUSH
38290: LD_VAR 0 12
38294: PPUSH
38295: CALL_OW 488
38299: NOT
38300: IFFALSE 38304
// continue ;
38302: GO 38282
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38304: LD_VAR 0 11
38308: PPUSH
38309: LD_VAR 0 12
38313: PPUSH
38314: CALL_OW 351
38318: PUSH
38319: LD_VAR 0 11
38323: PPUSH
38324: LD_VAR 0 12
38328: PPUSH
38329: CALL_OW 554
38333: AND
38334: IFFALSE 38374
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38336: LD_ADDR_VAR 0 13
38340: PUSH
38341: LD_VAR 0 13
38345: PPUSH
38346: LD_VAR 0 13
38350: PUSH
38351: LD_INT 1
38353: PLUS
38354: PPUSH
38355: LD_VAR 0 11
38359: PUSH
38360: LD_VAR 0 12
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PPUSH
38369: CALL_OW 2
38373: ST_TO_ADDR
// end ;
38374: GO 38282
38376: POP
38377: POP
38378: GO 38262
38380: POP
38381: POP
// if not list then
38382: LD_VAR 0 13
38386: NOT
38387: IFFALSE 38391
// exit ;
38389: GO 38462
// for i in list do
38391: LD_ADDR_VAR 0 6
38395: PUSH
38396: LD_VAR 0 13
38400: PUSH
38401: FOR_IN
38402: IFFALSE 38460
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38404: LD_VAR 0 1
38408: PPUSH
38409: LD_STRING M
38411: PUSH
38412: LD_VAR 0 6
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PUSH
38421: LD_VAR 0 6
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: PPUSH
38454: CALL_OW 447
38458: GO 38401
38460: POP
38461: POP
// end ;
38462: LD_VAR 0 5
38466: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38467: LD_EXP 127
38471: NOT
38472: IFFALSE 38522
38474: GO 38476
38476: DISABLE
// begin initHack := true ;
38477: LD_ADDR_EXP 127
38481: PUSH
38482: LD_INT 1
38484: ST_TO_ADDR
// hackTanks := [ ] ;
38485: LD_ADDR_EXP 128
38489: PUSH
38490: EMPTY
38491: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38492: LD_ADDR_EXP 129
38496: PUSH
38497: EMPTY
38498: ST_TO_ADDR
// hackLimit := 3 ;
38499: LD_ADDR_EXP 130
38503: PUSH
38504: LD_INT 3
38506: ST_TO_ADDR
// hackDist := 12 ;
38507: LD_ADDR_EXP 131
38511: PUSH
38512: LD_INT 12
38514: ST_TO_ADDR
// hackCounter := [ ] ;
38515: LD_ADDR_EXP 132
38519: PUSH
38520: EMPTY
38521: ST_TO_ADDR
// end ;
38522: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38523: LD_EXP 127
38527: PUSH
38528: LD_INT 34
38530: PUSH
38531: LD_EXP 53
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL_OW 69
38544: AND
38545: IFFALSE 38800
38547: GO 38549
38549: DISABLE
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
// begin enable ;
38554: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38555: LD_ADDR_VAR 0 1
38559: PUSH
38560: LD_INT 34
38562: PUSH
38563: LD_EXP 53
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PPUSH
38572: CALL_OW 69
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38798
// begin if not i in hackTanks then
38580: LD_VAR 0 1
38584: PUSH
38585: LD_EXP 128
38589: IN
38590: NOT
38591: IFFALSE 38674
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38593: LD_ADDR_EXP 128
38597: PUSH
38598: LD_EXP 128
38602: PPUSH
38603: LD_EXP 128
38607: PUSH
38608: LD_INT 1
38610: PLUS
38611: PPUSH
38612: LD_VAR 0 1
38616: PPUSH
38617: CALL_OW 1
38621: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38622: LD_ADDR_EXP 129
38626: PUSH
38627: LD_EXP 129
38631: PPUSH
38632: LD_EXP 129
38636: PUSH
38637: LD_INT 1
38639: PLUS
38640: PPUSH
38641: EMPTY
38642: PPUSH
38643: CALL_OW 1
38647: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38648: LD_ADDR_EXP 132
38652: PUSH
38653: LD_EXP 132
38657: PPUSH
38658: LD_EXP 132
38662: PUSH
38663: LD_INT 1
38665: PLUS
38666: PPUSH
38667: EMPTY
38668: PPUSH
38669: CALL_OW 1
38673: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 302
38683: NOT
38684: IFFALSE 38697
// begin HackUnlinkAll ( i ) ;
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL 38803 0 1
// continue ;
38695: GO 38577
// end ; HackCheckCapturedStatus ( i ) ;
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL 39246 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38706: LD_ADDR_VAR 0 2
38710: PUSH
38711: LD_INT 81
38713: PUSH
38714: LD_VAR 0 1
38718: PPUSH
38719: CALL_OW 255
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 33
38730: PUSH
38731: LD_INT 3
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 91
38740: PUSH
38741: LD_VAR 0 1
38745: PUSH
38746: LD_EXP 131
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 50
38758: PUSH
38759: EMPTY
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: PPUSH
38768: CALL_OW 69
38772: ST_TO_ADDR
// if not tmp then
38773: LD_VAR 0 2
38777: NOT
38778: IFFALSE 38782
// continue ;
38780: GO 38577
// HackLink ( i , tmp ) ;
38782: LD_VAR 0 1
38786: PPUSH
38787: LD_VAR 0 2
38791: PPUSH
38792: CALL 38939 0 2
// end ;
38796: GO 38577
38798: POP
38799: POP
// end ;
38800: PPOPN 2
38802: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38803: LD_INT 0
38805: PPUSH
38806: PPUSH
38807: PPUSH
// if not hack in hackTanks then
38808: LD_VAR 0 1
38812: PUSH
38813: LD_EXP 128
38817: IN
38818: NOT
38819: IFFALSE 38823
// exit ;
38821: GO 38934
// index := GetElementIndex ( hackTanks , hack ) ;
38823: LD_ADDR_VAR 0 4
38827: PUSH
38828: LD_EXP 128
38832: PPUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL 46408 0 2
38842: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38843: LD_EXP 129
38847: PUSH
38848: LD_VAR 0 4
38852: ARRAY
38853: IFFALSE 38934
// begin for i in hackTanksCaptured [ index ] do
38855: LD_ADDR_VAR 0 3
38859: PUSH
38860: LD_EXP 129
38864: PUSH
38865: LD_VAR 0 4
38869: ARRAY
38870: PUSH
38871: FOR_IN
38872: IFFALSE 38898
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38874: LD_VAR 0 3
38878: PUSH
38879: LD_INT 1
38881: ARRAY
38882: PPUSH
38883: LD_VAR 0 3
38887: PUSH
38888: LD_INT 2
38890: ARRAY
38891: PPUSH
38892: CALL_OW 235
38896: GO 38871
38898: POP
38899: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38900: LD_ADDR_EXP 129
38904: PUSH
38905: LD_EXP 129
38909: PPUSH
38910: LD_VAR 0 4
38914: PPUSH
38915: EMPTY
38916: PPUSH
38917: CALL_OW 1
38921: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_INT 0
38929: PPUSH
38930: CALL_OW 505
// end ; end ;
38934: LD_VAR 0 2
38938: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38939: LD_INT 0
38941: PPUSH
38942: PPUSH
38943: PPUSH
// if not hack in hackTanks or not vehicles then
38944: LD_VAR 0 1
38948: PUSH
38949: LD_EXP 128
38953: IN
38954: NOT
38955: PUSH
38956: LD_VAR 0 2
38960: NOT
38961: OR
38962: IFFALSE 38966
// exit ;
38964: GO 39241
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38966: LD_ADDR_VAR 0 2
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: LD_VAR 0 2
38980: PPUSH
38981: LD_INT 1
38983: PPUSH
38984: LD_INT 1
38986: PPUSH
38987: CALL 47058 0 4
38991: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38992: LD_ADDR_VAR 0 5
38996: PUSH
38997: LD_EXP 128
39001: PPUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL 46408 0 2
39011: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39012: LD_EXP 129
39016: PUSH
39017: LD_VAR 0 5
39021: ARRAY
39022: PUSH
39023: LD_EXP 130
39027: LESS
39028: IFFALSE 39217
// begin for i := 1 to vehicles do
39030: LD_ADDR_VAR 0 4
39034: PUSH
39035: DOUBLE
39036: LD_INT 1
39038: DEC
39039: ST_TO_ADDR
39040: LD_VAR 0 2
39044: PUSH
39045: FOR_TO
39046: IFFALSE 39215
// begin if hackTanksCaptured [ index ] = hackLimit then
39048: LD_EXP 129
39052: PUSH
39053: LD_VAR 0 5
39057: ARRAY
39058: PUSH
39059: LD_EXP 130
39063: EQUAL
39064: IFFALSE 39068
// break ;
39066: GO 39215
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39068: LD_ADDR_EXP 132
39072: PUSH
39073: LD_EXP 132
39077: PPUSH
39078: LD_VAR 0 5
39082: PPUSH
39083: LD_EXP 132
39087: PUSH
39088: LD_VAR 0 5
39092: ARRAY
39093: PUSH
39094: LD_INT 1
39096: PLUS
39097: PPUSH
39098: CALL_OW 1
39102: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39103: LD_ADDR_EXP 129
39107: PUSH
39108: LD_EXP 129
39112: PPUSH
39113: LD_VAR 0 5
39117: PUSH
39118: LD_EXP 129
39122: PUSH
39123: LD_VAR 0 5
39127: ARRAY
39128: PUSH
39129: LD_INT 1
39131: PLUS
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PPUSH
39137: LD_VAR 0 2
39141: PUSH
39142: LD_VAR 0 4
39146: ARRAY
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_VAR 0 4
39157: ARRAY
39158: PPUSH
39159: CALL_OW 255
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PPUSH
39168: CALL 46623 0 3
39172: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39173: LD_VAR 0 2
39177: PUSH
39178: LD_VAR 0 4
39182: ARRAY
39183: PPUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 255
39193: PPUSH
39194: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39198: LD_VAR 0 2
39202: PUSH
39203: LD_VAR 0 4
39207: ARRAY
39208: PPUSH
39209: CALL_OW 141
// end ;
39213: GO 39045
39215: POP
39216: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_EXP 129
39226: PUSH
39227: LD_VAR 0 5
39231: ARRAY
39232: PUSH
39233: LD_INT 0
39235: PLUS
39236: PPUSH
39237: CALL_OW 505
// end ;
39241: LD_VAR 0 3
39245: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39246: LD_INT 0
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
// if not hack in hackTanks then
39252: LD_VAR 0 1
39256: PUSH
39257: LD_EXP 128
39261: IN
39262: NOT
39263: IFFALSE 39267
// exit ;
39265: GO 39507
// index := GetElementIndex ( hackTanks , hack ) ;
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_EXP 128
39276: PPUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL 46408 0 2
39286: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39287: LD_ADDR_VAR 0 3
39291: PUSH
39292: DOUBLE
39293: LD_EXP 129
39297: PUSH
39298: LD_VAR 0 4
39302: ARRAY
39303: INC
39304: ST_TO_ADDR
39305: LD_INT 1
39307: PUSH
39308: FOR_DOWNTO
39309: IFFALSE 39481
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_EXP 129
39320: PUSH
39321: LD_VAR 0 4
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 3
39331: ARRAY
39332: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39333: LD_VAR 0 5
39337: PUSH
39338: LD_INT 1
39340: ARRAY
39341: PPUSH
39342: CALL_OW 302
39346: NOT
39347: PUSH
39348: LD_VAR 0 5
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PPUSH
39357: CALL_OW 255
39361: PUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL_OW 255
39371: NONEQUAL
39372: OR
39373: IFFALSE 39479
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39375: LD_VAR 0 5
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PPUSH
39384: CALL_OW 305
39388: PUSH
39389: LD_VAR 0 5
39393: PUSH
39394: LD_INT 1
39396: ARRAY
39397: PPUSH
39398: CALL_OW 255
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 255
39412: EQUAL
39413: AND
39414: IFFALSE 39438
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39416: LD_VAR 0 5
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 5
39429: PUSH
39430: LD_INT 2
39432: ARRAY
39433: PPUSH
39434: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39438: LD_ADDR_EXP 129
39442: PUSH
39443: LD_EXP 129
39447: PPUSH
39448: LD_VAR 0 4
39452: PPUSH
39453: LD_EXP 129
39457: PUSH
39458: LD_VAR 0 4
39462: ARRAY
39463: PPUSH
39464: LD_VAR 0 3
39468: PPUSH
39469: CALL_OW 3
39473: PPUSH
39474: CALL_OW 1
39478: ST_TO_ADDR
// end ; end ;
39479: GO 39308
39481: POP
39482: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_EXP 129
39492: PUSH
39493: LD_VAR 0 4
39497: ARRAY
39498: PUSH
39499: LD_INT 0
39501: PLUS
39502: PPUSH
39503: CALL_OW 505
// end ;
39507: LD_VAR 0 2
39511: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39512: LD_INT 0
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
// if not hack in hackTanks then
39518: LD_VAR 0 1
39522: PUSH
39523: LD_EXP 128
39527: IN
39528: NOT
39529: IFFALSE 39533
// exit ;
39531: GO 39618
// index := GetElementIndex ( hackTanks , hack ) ;
39533: LD_ADDR_VAR 0 5
39537: PUSH
39538: LD_EXP 128
39542: PPUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL 46408 0 2
39552: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39553: LD_ADDR_VAR 0 4
39557: PUSH
39558: DOUBLE
39559: LD_INT 1
39561: DEC
39562: ST_TO_ADDR
39563: LD_EXP 129
39567: PUSH
39568: LD_VAR 0 5
39572: ARRAY
39573: PUSH
39574: FOR_TO
39575: IFFALSE 39616
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39577: LD_EXP 129
39581: PUSH
39582: LD_VAR 0 5
39586: ARRAY
39587: PUSH
39588: LD_VAR 0 4
39592: ARRAY
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: PUSH
39598: LD_VAR 0 2
39602: EQUAL
39603: IFFALSE 39614
// KillUnit ( vehicle ) ;
39605: LD_VAR 0 2
39609: PPUSH
39610: CALL_OW 66
39614: GO 39574
39616: POP
39617: POP
// end ;
39618: LD_VAR 0 3
39622: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39623: LD_EXP 133
39627: NOT
39628: IFFALSE 39663
39630: GO 39632
39632: DISABLE
// begin initMiner := true ;
39633: LD_ADDR_EXP 133
39637: PUSH
39638: LD_INT 1
39640: ST_TO_ADDR
// minersList := [ ] ;
39641: LD_ADDR_EXP 134
39645: PUSH
39646: EMPTY
39647: ST_TO_ADDR
// minerMinesList := [ ] ;
39648: LD_ADDR_EXP 135
39652: PUSH
39653: EMPTY
39654: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39655: LD_ADDR_EXP 136
39659: PUSH
39660: LD_INT 5
39662: ST_TO_ADDR
// end ;
39663: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39664: LD_EXP 133
39668: PUSH
39669: LD_INT 34
39671: PUSH
39672: LD_EXP 58
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PPUSH
39681: CALL_OW 69
39685: AND
39686: IFFALSE 40149
39688: GO 39690
39690: DISABLE
39691: LD_INT 0
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
// begin enable ;
39697: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39698: LD_ADDR_VAR 0 1
39702: PUSH
39703: LD_INT 34
39705: PUSH
39706: LD_EXP 58
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PPUSH
39715: CALL_OW 69
39719: PUSH
39720: FOR_IN
39721: IFFALSE 39793
// begin if not i in minersList then
39723: LD_VAR 0 1
39727: PUSH
39728: LD_EXP 134
39732: IN
39733: NOT
39734: IFFALSE 39791
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39736: LD_ADDR_EXP 134
39740: PUSH
39741: LD_EXP 134
39745: PPUSH
39746: LD_EXP 134
39750: PUSH
39751: LD_INT 1
39753: PLUS
39754: PPUSH
39755: LD_VAR 0 1
39759: PPUSH
39760: CALL_OW 1
39764: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39765: LD_ADDR_EXP 135
39769: PUSH
39770: LD_EXP 135
39774: PPUSH
39775: LD_EXP 135
39779: PUSH
39780: LD_INT 1
39782: PLUS
39783: PPUSH
39784: EMPTY
39785: PPUSH
39786: CALL_OW 1
39790: ST_TO_ADDR
// end end ;
39791: GO 39720
39793: POP
39794: POP
// for i := minerMinesList downto 1 do
39795: LD_ADDR_VAR 0 1
39799: PUSH
39800: DOUBLE
39801: LD_EXP 135
39805: INC
39806: ST_TO_ADDR
39807: LD_INT 1
39809: PUSH
39810: FOR_DOWNTO
39811: IFFALSE 40147
// begin if IsLive ( minersList [ i ] ) then
39813: LD_EXP 134
39817: PUSH
39818: LD_VAR 0 1
39822: ARRAY
39823: PPUSH
39824: CALL_OW 300
39828: IFFALSE 39856
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39830: LD_EXP 134
39834: PUSH
39835: LD_VAR 0 1
39839: ARRAY
39840: PPUSH
39841: LD_EXP 135
39845: PUSH
39846: LD_VAR 0 1
39850: ARRAY
39851: PPUSH
39852: CALL_OW 505
// if not minerMinesList [ i ] then
39856: LD_EXP 135
39860: PUSH
39861: LD_VAR 0 1
39865: ARRAY
39866: NOT
39867: IFFALSE 39871
// continue ;
39869: GO 39810
// for j := minerMinesList [ i ] downto 1 do
39871: LD_ADDR_VAR 0 2
39875: PUSH
39876: DOUBLE
39877: LD_EXP 135
39881: PUSH
39882: LD_VAR 0 1
39886: ARRAY
39887: INC
39888: ST_TO_ADDR
39889: LD_INT 1
39891: PUSH
39892: FOR_DOWNTO
39893: IFFALSE 40143
// begin side := GetSide ( minersList [ i ] ) ;
39895: LD_ADDR_VAR 0 3
39899: PUSH
39900: LD_EXP 134
39904: PUSH
39905: LD_VAR 0 1
39909: ARRAY
39910: PPUSH
39911: CALL_OW 255
39915: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39916: LD_ADDR_VAR 0 4
39920: PUSH
39921: LD_EXP 135
39925: PUSH
39926: LD_VAR 0 1
39930: ARRAY
39931: PUSH
39932: LD_VAR 0 2
39936: ARRAY
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PPUSH
39942: LD_EXP 135
39946: PUSH
39947: LD_VAR 0 1
39951: ARRAY
39952: PUSH
39953: LD_VAR 0 2
39957: ARRAY
39958: PUSH
39959: LD_INT 2
39961: ARRAY
39962: PPUSH
39963: CALL_OW 428
39967: ST_TO_ADDR
// if not tmp then
39968: LD_VAR 0 4
39972: NOT
39973: IFFALSE 39977
// continue ;
39975: GO 39892
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39977: LD_VAR 0 4
39981: PUSH
39982: LD_INT 81
39984: PUSH
39985: LD_VAR 0 3
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PPUSH
39994: CALL_OW 69
39998: IN
39999: PUSH
40000: LD_EXP 135
40004: PUSH
40005: LD_VAR 0 1
40009: ARRAY
40010: PUSH
40011: LD_VAR 0 2
40015: ARRAY
40016: PUSH
40017: LD_INT 1
40019: ARRAY
40020: PPUSH
40021: LD_EXP 135
40025: PUSH
40026: LD_VAR 0 1
40030: ARRAY
40031: PUSH
40032: LD_VAR 0 2
40036: ARRAY
40037: PUSH
40038: LD_INT 2
40040: ARRAY
40041: PPUSH
40042: CALL_OW 458
40046: AND
40047: IFFALSE 40141
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40049: LD_EXP 135
40053: PUSH
40054: LD_VAR 0 1
40058: ARRAY
40059: PUSH
40060: LD_VAR 0 2
40064: ARRAY
40065: PUSH
40066: LD_INT 1
40068: ARRAY
40069: PPUSH
40070: LD_EXP 135
40074: PUSH
40075: LD_VAR 0 1
40079: ARRAY
40080: PUSH
40081: LD_VAR 0 2
40085: ARRAY
40086: PUSH
40087: LD_INT 2
40089: ARRAY
40090: PPUSH
40091: LD_VAR 0 3
40095: PPUSH
40096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40100: LD_ADDR_EXP 135
40104: PUSH
40105: LD_EXP 135
40109: PPUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: LD_EXP 135
40119: PUSH
40120: LD_VAR 0 1
40124: ARRAY
40125: PPUSH
40126: LD_VAR 0 2
40130: PPUSH
40131: CALL_OW 3
40135: PPUSH
40136: CALL_OW 1
40140: ST_TO_ADDR
// end ; end ;
40141: GO 39892
40143: POP
40144: POP
// end ;
40145: GO 39810
40147: POP
40148: POP
// end ;
40149: PPOPN 4
40151: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
// result := false ;
40156: LD_ADDR_VAR 0 4
40160: PUSH
40161: LD_INT 0
40163: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40164: LD_VAR 0 1
40168: PPUSH
40169: CALL_OW 264
40173: PUSH
40174: LD_EXP 58
40178: EQUAL
40179: NOT
40180: IFFALSE 40184
// exit ;
40182: GO 40424
// index := GetElementIndex ( minersList , unit ) ;
40184: LD_ADDR_VAR 0 5
40188: PUSH
40189: LD_EXP 134
40193: PPUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: CALL 46408 0 2
40203: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40204: LD_EXP 135
40208: PUSH
40209: LD_VAR 0 5
40213: ARRAY
40214: PUSH
40215: LD_EXP 136
40219: GREATEREQUAL
40220: IFFALSE 40224
// exit ;
40222: GO 40424
// ComMoveXY ( unit , x , y ) ;
40224: LD_VAR 0 1
40228: PPUSH
40229: LD_VAR 0 2
40233: PPUSH
40234: LD_VAR 0 3
40238: PPUSH
40239: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40243: LD_INT 35
40245: PPUSH
40246: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40250: LD_VAR 0 1
40254: PPUSH
40255: LD_VAR 0 2
40259: PPUSH
40260: LD_VAR 0 3
40264: PPUSH
40265: CALL 77180 0 3
40269: NOT
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 314
40280: AND
40281: IFFALSE 40285
// exit ;
40283: GO 40424
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40285: LD_VAR 0 2
40289: PPUSH
40290: LD_VAR 0 3
40294: PPUSH
40295: CALL_OW 428
40299: PUSH
40300: LD_VAR 0 1
40304: EQUAL
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 314
40315: NOT
40316: AND
40317: IFFALSE 40243
// PlaySoundXY ( x , y , PlantMine ) ;
40319: LD_VAR 0 2
40323: PPUSH
40324: LD_VAR 0 3
40328: PPUSH
40329: LD_STRING PlantMine
40331: PPUSH
40332: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40336: LD_VAR 0 2
40340: PPUSH
40341: LD_VAR 0 3
40345: PPUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 255
40355: PPUSH
40356: LD_INT 0
40358: PPUSH
40359: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40363: LD_ADDR_EXP 135
40367: PUSH
40368: LD_EXP 135
40372: PPUSH
40373: LD_VAR 0 5
40377: PUSH
40378: LD_EXP 135
40382: PUSH
40383: LD_VAR 0 5
40387: ARRAY
40388: PUSH
40389: LD_INT 1
40391: PLUS
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PPUSH
40397: LD_VAR 0 2
40401: PUSH
40402: LD_VAR 0 3
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PPUSH
40411: CALL 46623 0 3
40415: ST_TO_ADDR
// result := true ;
40416: LD_ADDR_VAR 0 4
40420: PUSH
40421: LD_INT 1
40423: ST_TO_ADDR
// end ;
40424: LD_VAR 0 4
40428: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40429: LD_INT 0
40431: PPUSH
40432: PPUSH
40433: PPUSH
// if not unit in minersList then
40434: LD_VAR 0 1
40438: PUSH
40439: LD_EXP 134
40443: IN
40444: NOT
40445: IFFALSE 40449
// exit ;
40447: GO 40841
// index := GetElementIndex ( minersList , unit ) ;
40449: LD_ADDR_VAR 0 6
40453: PUSH
40454: LD_EXP 134
40458: PPUSH
40459: LD_VAR 0 1
40463: PPUSH
40464: CALL 46408 0 2
40468: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40469: LD_ADDR_VAR 0 5
40473: PUSH
40474: DOUBLE
40475: LD_EXP 135
40479: PUSH
40480: LD_VAR 0 6
40484: ARRAY
40485: INC
40486: ST_TO_ADDR
40487: LD_INT 1
40489: PUSH
40490: FOR_DOWNTO
40491: IFFALSE 40652
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40493: LD_EXP 135
40497: PUSH
40498: LD_VAR 0 6
40502: ARRAY
40503: PUSH
40504: LD_VAR 0 5
40508: ARRAY
40509: PUSH
40510: LD_INT 1
40512: ARRAY
40513: PUSH
40514: LD_VAR 0 2
40518: EQUAL
40519: PUSH
40520: LD_EXP 135
40524: PUSH
40525: LD_VAR 0 6
40529: ARRAY
40530: PUSH
40531: LD_VAR 0 5
40535: ARRAY
40536: PUSH
40537: LD_INT 2
40539: ARRAY
40540: PUSH
40541: LD_VAR 0 3
40545: EQUAL
40546: AND
40547: IFFALSE 40650
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40549: LD_EXP 135
40553: PUSH
40554: LD_VAR 0 6
40558: ARRAY
40559: PUSH
40560: LD_VAR 0 5
40564: ARRAY
40565: PUSH
40566: LD_INT 1
40568: ARRAY
40569: PPUSH
40570: LD_EXP 135
40574: PUSH
40575: LD_VAR 0 6
40579: ARRAY
40580: PUSH
40581: LD_VAR 0 5
40585: ARRAY
40586: PUSH
40587: LD_INT 2
40589: ARRAY
40590: PPUSH
40591: LD_VAR 0 1
40595: PPUSH
40596: CALL_OW 255
40600: PPUSH
40601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40605: LD_ADDR_EXP 135
40609: PUSH
40610: LD_EXP 135
40614: PPUSH
40615: LD_VAR 0 6
40619: PPUSH
40620: LD_EXP 135
40624: PUSH
40625: LD_VAR 0 6
40629: ARRAY
40630: PPUSH
40631: LD_VAR 0 5
40635: PPUSH
40636: CALL_OW 3
40640: PPUSH
40641: CALL_OW 1
40645: ST_TO_ADDR
// exit ;
40646: POP
40647: POP
40648: GO 40841
// end ; end ;
40650: GO 40490
40652: POP
40653: POP
// for i := minerMinesList [ index ] downto 1 do
40654: LD_ADDR_VAR 0 5
40658: PUSH
40659: DOUBLE
40660: LD_EXP 135
40664: PUSH
40665: LD_VAR 0 6
40669: ARRAY
40670: INC
40671: ST_TO_ADDR
40672: LD_INT 1
40674: PUSH
40675: FOR_DOWNTO
40676: IFFALSE 40839
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40678: LD_EXP 135
40682: PUSH
40683: LD_VAR 0 6
40687: ARRAY
40688: PUSH
40689: LD_VAR 0 5
40693: ARRAY
40694: PUSH
40695: LD_INT 1
40697: ARRAY
40698: PPUSH
40699: LD_EXP 135
40703: PUSH
40704: LD_VAR 0 6
40708: ARRAY
40709: PUSH
40710: LD_VAR 0 5
40714: ARRAY
40715: PUSH
40716: LD_INT 2
40718: ARRAY
40719: PPUSH
40720: LD_VAR 0 2
40724: PPUSH
40725: LD_VAR 0 3
40729: PPUSH
40730: CALL_OW 298
40734: PUSH
40735: LD_INT 6
40737: LESS
40738: IFFALSE 40837
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40740: LD_EXP 135
40744: PUSH
40745: LD_VAR 0 6
40749: ARRAY
40750: PUSH
40751: LD_VAR 0 5
40755: ARRAY
40756: PUSH
40757: LD_INT 1
40759: ARRAY
40760: PPUSH
40761: LD_EXP 135
40765: PUSH
40766: LD_VAR 0 6
40770: ARRAY
40771: PUSH
40772: LD_VAR 0 5
40776: ARRAY
40777: PUSH
40778: LD_INT 2
40780: ARRAY
40781: PPUSH
40782: LD_VAR 0 1
40786: PPUSH
40787: CALL_OW 255
40791: PPUSH
40792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40796: LD_ADDR_EXP 135
40800: PUSH
40801: LD_EXP 135
40805: PPUSH
40806: LD_VAR 0 6
40810: PPUSH
40811: LD_EXP 135
40815: PUSH
40816: LD_VAR 0 6
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 5
40826: PPUSH
40827: CALL_OW 3
40831: PPUSH
40832: CALL_OW 1
40836: ST_TO_ADDR
// end ; end ;
40837: GO 40675
40839: POP
40840: POP
// end ;
40841: LD_VAR 0 4
40845: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40846: LD_INT 0
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 264
40866: PUSH
40867: LD_EXP 58
40871: EQUAL
40872: NOT
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_EXP 134
40883: IN
40884: NOT
40885: OR
40886: IFFALSE 40890
// exit ;
40888: GO 41212
// index := GetElementIndex ( minersList , unit ) ;
40890: LD_ADDR_VAR 0 6
40894: PUSH
40895: LD_EXP 134
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL 46408 0 2
40909: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40910: LD_ADDR_VAR 0 8
40914: PUSH
40915: LD_EXP 136
40919: PUSH
40920: LD_EXP 135
40924: PUSH
40925: LD_VAR 0 6
40929: ARRAY
40930: MINUS
40931: ST_TO_ADDR
// if not minesFreeAmount then
40932: LD_VAR 0 8
40936: NOT
40937: IFFALSE 40941
// exit ;
40939: GO 41212
// tmp := [ ] ;
40941: LD_ADDR_VAR 0 7
40945: PUSH
40946: EMPTY
40947: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40948: LD_ADDR_VAR 0 5
40952: PUSH
40953: DOUBLE
40954: LD_INT 1
40956: DEC
40957: ST_TO_ADDR
40958: LD_VAR 0 8
40962: PUSH
40963: FOR_TO
40964: IFFALSE 41159
// begin _d := rand ( 0 , 5 ) ;
40966: LD_ADDR_VAR 0 11
40970: PUSH
40971: LD_INT 0
40973: PPUSH
40974: LD_INT 5
40976: PPUSH
40977: CALL_OW 12
40981: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40982: LD_ADDR_VAR 0 12
40986: PUSH
40987: LD_INT 2
40989: PPUSH
40990: LD_INT 6
40992: PPUSH
40993: CALL_OW 12
40997: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40998: LD_ADDR_VAR 0 9
41002: PUSH
41003: LD_VAR 0 2
41007: PPUSH
41008: LD_VAR 0 11
41012: PPUSH
41013: LD_VAR 0 12
41017: PPUSH
41018: CALL_OW 272
41022: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41023: LD_ADDR_VAR 0 10
41027: PUSH
41028: LD_VAR 0 3
41032: PPUSH
41033: LD_VAR 0 11
41037: PPUSH
41038: LD_VAR 0 12
41042: PPUSH
41043: CALL_OW 273
41047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41048: LD_VAR 0 9
41052: PPUSH
41053: LD_VAR 0 10
41057: PPUSH
41058: CALL_OW 488
41062: PUSH
41063: LD_VAR 0 9
41067: PUSH
41068: LD_VAR 0 10
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_VAR 0 7
41081: IN
41082: NOT
41083: AND
41084: PUSH
41085: LD_VAR 0 9
41089: PPUSH
41090: LD_VAR 0 10
41094: PPUSH
41095: CALL_OW 458
41099: NOT
41100: AND
41101: IFFALSE 41143
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41103: LD_ADDR_VAR 0 7
41107: PUSH
41108: LD_VAR 0 7
41112: PPUSH
41113: LD_VAR 0 7
41117: PUSH
41118: LD_INT 1
41120: PLUS
41121: PPUSH
41122: LD_VAR 0 9
41126: PUSH
41127: LD_VAR 0 10
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PPUSH
41136: CALL_OW 1
41140: ST_TO_ADDR
41141: GO 41157
// i := i - 1 ;
41143: LD_ADDR_VAR 0 5
41147: PUSH
41148: LD_VAR 0 5
41152: PUSH
41153: LD_INT 1
41155: MINUS
41156: ST_TO_ADDR
// end ;
41157: GO 40963
41159: POP
41160: POP
// for i in tmp do
41161: LD_ADDR_VAR 0 5
41165: PUSH
41166: LD_VAR 0 7
41170: PUSH
41171: FOR_IN
41172: IFFALSE 41210
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41174: LD_VAR 0 1
41178: PPUSH
41179: LD_VAR 0 5
41183: PUSH
41184: LD_INT 1
41186: ARRAY
41187: PPUSH
41188: LD_VAR 0 5
41192: PUSH
41193: LD_INT 2
41195: ARRAY
41196: PPUSH
41197: CALL 40152 0 3
41201: NOT
41202: IFFALSE 41208
// exit ;
41204: POP
41205: POP
41206: GO 41212
41208: GO 41171
41210: POP
41211: POP
// end ;
41212: LD_VAR 0 4
41216: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41217: LD_INT 0
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
// if not GetClass ( unit ) = class_sniper then
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 257
41235: PUSH
41236: LD_INT 5
41238: EQUAL
41239: NOT
41240: IFFALSE 41244
// exit ;
41242: GO 41632
// dist := 8 ;
41244: LD_ADDR_VAR 0 5
41248: PUSH
41249: LD_INT 8
41251: ST_TO_ADDR
// viewRange := 12 ;
41252: LD_ADDR_VAR 0 7
41256: PUSH
41257: LD_INT 12
41259: ST_TO_ADDR
// side := GetSide ( unit ) ;
41260: LD_ADDR_VAR 0 6
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: CALL_OW 255
41274: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41275: LD_INT 61
41277: PPUSH
41278: LD_VAR 0 6
41282: PPUSH
41283: CALL_OW 321
41287: PUSH
41288: LD_INT 2
41290: EQUAL
41291: IFFALSE 41301
// viewRange := 16 ;
41293: LD_ADDR_VAR 0 7
41297: PUSH
41298: LD_INT 16
41300: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_VAR 0 2
41310: PPUSH
41311: LD_VAR 0 3
41315: PPUSH
41316: CALL_OW 297
41320: PUSH
41321: LD_VAR 0 5
41325: GREATER
41326: IFFALSE 41405
// begin ComMoveXY ( unit , x , y ) ;
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: LD_VAR 0 3
41342: PPUSH
41343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41347: LD_INT 35
41349: PPUSH
41350: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41354: LD_VAR 0 1
41358: PPUSH
41359: LD_VAR 0 2
41363: PPUSH
41364: LD_VAR 0 3
41368: PPUSH
41369: CALL 77180 0 3
41373: NOT
41374: IFFALSE 41378
// exit ;
41376: GO 41632
// until GetDistUnitXY ( unit , x , y ) < dist ;
41378: LD_VAR 0 1
41382: PPUSH
41383: LD_VAR 0 2
41387: PPUSH
41388: LD_VAR 0 3
41392: PPUSH
41393: CALL_OW 297
41397: PUSH
41398: LD_VAR 0 5
41402: LESS
41403: IFFALSE 41347
// end ; ComTurnXY ( unit , x , y ) ;
41405: LD_VAR 0 1
41409: PPUSH
41410: LD_VAR 0 2
41414: PPUSH
41415: LD_VAR 0 3
41419: PPUSH
41420: CALL_OW 118
// wait ( 5 ) ;
41424: LD_INT 5
41426: PPUSH
41427: CALL_OW 67
// _d := GetDir ( unit ) ;
41431: LD_ADDR_VAR 0 10
41435: PUSH
41436: LD_VAR 0 1
41440: PPUSH
41441: CALL_OW 254
41445: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41446: LD_ADDR_VAR 0 8
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 250
41460: PPUSH
41461: LD_VAR 0 10
41465: PPUSH
41466: LD_VAR 0 5
41470: PPUSH
41471: CALL_OW 272
41475: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41476: LD_ADDR_VAR 0 9
41480: PUSH
41481: LD_VAR 0 1
41485: PPUSH
41486: CALL_OW 251
41490: PPUSH
41491: LD_VAR 0 10
41495: PPUSH
41496: LD_VAR 0 5
41500: PPUSH
41501: CALL_OW 273
41505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41506: LD_VAR 0 8
41510: PPUSH
41511: LD_VAR 0 9
41515: PPUSH
41516: CALL_OW 488
41520: NOT
41521: IFFALSE 41525
// exit ;
41523: GO 41632
// ComAnimCustom ( unit , 1 ) ;
41525: LD_VAR 0 1
41529: PPUSH
41530: LD_INT 1
41532: PPUSH
41533: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41537: LD_VAR 0 8
41541: PPUSH
41542: LD_VAR 0 9
41546: PPUSH
41547: LD_VAR 0 6
41551: PPUSH
41552: LD_VAR 0 7
41556: PPUSH
41557: CALL_OW 330
// repeat wait ( 1 ) ;
41561: LD_INT 1
41563: PPUSH
41564: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 316
41577: PUSH
41578: LD_VAR 0 1
41582: PPUSH
41583: CALL_OW 314
41587: OR
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 302
41598: NOT
41599: OR
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 301
41610: OR
41611: IFFALSE 41561
// RemoveSeeing ( _x , _y , side ) ;
41613: LD_VAR 0 8
41617: PPUSH
41618: LD_VAR 0 9
41622: PPUSH
41623: LD_VAR 0 6
41627: PPUSH
41628: CALL_OW 331
// end ; end_of_file
41632: LD_VAR 0 4
41636: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41637: LD_INT 0
41639: PPUSH
41640: PPUSH
// if exist_mode then
41641: LD_VAR 0 2
41645: IFFALSE 41670
// unit := CreateCharacter ( prefix & ident ) else
41647: LD_ADDR_VAR 0 5
41651: PUSH
41652: LD_VAR 0 3
41656: PUSH
41657: LD_VAR 0 1
41661: STR
41662: PPUSH
41663: CALL_OW 34
41667: ST_TO_ADDR
41668: GO 41685
// unit := NewCharacter ( ident ) ;
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 25
41684: ST_TO_ADDR
// result := unit ;
41685: LD_ADDR_VAR 0 4
41689: PUSH
41690: LD_VAR 0 5
41694: ST_TO_ADDR
// end ;
41695: LD_VAR 0 4
41699: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41700: LD_INT 0
41702: PPUSH
41703: PPUSH
// if not side or not nation then
41704: LD_VAR 0 1
41708: NOT
41709: PUSH
41710: LD_VAR 0 2
41714: NOT
41715: OR
41716: IFFALSE 41720
// exit ;
41718: GO 42488
// case nation of nation_american :
41720: LD_VAR 0 2
41724: PUSH
41725: LD_INT 1
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41733
41731: GO 41947
41733: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41734: LD_ADDR_VAR 0 4
41738: PUSH
41739: LD_INT 35
41741: PUSH
41742: LD_INT 45
41744: PUSH
41745: LD_INT 46
41747: PUSH
41748: LD_INT 47
41750: PUSH
41751: LD_INT 82
41753: PUSH
41754: LD_INT 83
41756: PUSH
41757: LD_INT 84
41759: PUSH
41760: LD_INT 85
41762: PUSH
41763: LD_INT 86
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 6
41774: PUSH
41775: LD_INT 15
41777: PUSH
41778: LD_INT 16
41780: PUSH
41781: LD_INT 7
41783: PUSH
41784: LD_INT 12
41786: PUSH
41787: LD_INT 13
41789: PUSH
41790: LD_INT 10
41792: PUSH
41793: LD_INT 14
41795: PUSH
41796: LD_INT 20
41798: PUSH
41799: LD_INT 21
41801: PUSH
41802: LD_INT 22
41804: PUSH
41805: LD_INT 25
41807: PUSH
41808: LD_INT 32
41810: PUSH
41811: LD_INT 27
41813: PUSH
41814: LD_INT 36
41816: PUSH
41817: LD_INT 69
41819: PUSH
41820: LD_INT 39
41822: PUSH
41823: LD_INT 34
41825: PUSH
41826: LD_INT 40
41828: PUSH
41829: LD_INT 48
41831: PUSH
41832: LD_INT 49
41834: PUSH
41835: LD_INT 50
41837: PUSH
41838: LD_INT 51
41840: PUSH
41841: LD_INT 52
41843: PUSH
41844: LD_INT 53
41846: PUSH
41847: LD_INT 54
41849: PUSH
41850: LD_INT 55
41852: PUSH
41853: LD_INT 56
41855: PUSH
41856: LD_INT 57
41858: PUSH
41859: LD_INT 58
41861: PUSH
41862: LD_INT 59
41864: PUSH
41865: LD_INT 60
41867: PUSH
41868: LD_INT 61
41870: PUSH
41871: LD_INT 62
41873: PUSH
41874: LD_INT 80
41876: PUSH
41877: LD_INT 82
41879: PUSH
41880: LD_INT 83
41882: PUSH
41883: LD_INT 84
41885: PUSH
41886: LD_INT 85
41888: PUSH
41889: LD_INT 86
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: ST_TO_ADDR
41945: GO 42412
41947: LD_INT 2
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41955
41953: GO 42181
41955: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41956: LD_ADDR_VAR 0 4
41960: PUSH
41961: LD_INT 35
41963: PUSH
41964: LD_INT 45
41966: PUSH
41967: LD_INT 46
41969: PUSH
41970: LD_INT 47
41972: PUSH
41973: LD_INT 82
41975: PUSH
41976: LD_INT 83
41978: PUSH
41979: LD_INT 84
41981: PUSH
41982: LD_INT 85
41984: PUSH
41985: LD_INT 87
41987: PUSH
41988: LD_INT 70
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 11
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 4
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: LD_INT 6
42008: PUSH
42009: LD_INT 15
42011: PUSH
42012: LD_INT 18
42014: PUSH
42015: LD_INT 7
42017: PUSH
42018: LD_INT 17
42020: PUSH
42021: LD_INT 8
42023: PUSH
42024: LD_INT 20
42026: PUSH
42027: LD_INT 21
42029: PUSH
42030: LD_INT 22
42032: PUSH
42033: LD_INT 72
42035: PUSH
42036: LD_INT 26
42038: PUSH
42039: LD_INT 69
42041: PUSH
42042: LD_INT 39
42044: PUSH
42045: LD_INT 40
42047: PUSH
42048: LD_INT 41
42050: PUSH
42051: LD_INT 42
42053: PUSH
42054: LD_INT 43
42056: PUSH
42057: LD_INT 48
42059: PUSH
42060: LD_INT 49
42062: PUSH
42063: LD_INT 50
42065: PUSH
42066: LD_INT 51
42068: PUSH
42069: LD_INT 52
42071: PUSH
42072: LD_INT 53
42074: PUSH
42075: LD_INT 54
42077: PUSH
42078: LD_INT 55
42080: PUSH
42081: LD_INT 56
42083: PUSH
42084: LD_INT 60
42086: PUSH
42087: LD_INT 61
42089: PUSH
42090: LD_INT 62
42092: PUSH
42093: LD_INT 66
42095: PUSH
42096: LD_INT 67
42098: PUSH
42099: LD_INT 68
42101: PUSH
42102: LD_INT 81
42104: PUSH
42105: LD_INT 82
42107: PUSH
42108: LD_INT 83
42110: PUSH
42111: LD_INT 84
42113: PUSH
42114: LD_INT 85
42116: PUSH
42117: LD_INT 87
42119: PUSH
42120: LD_INT 88
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
42179: GO 42412
42181: LD_INT 3
42183: DOUBLE
42184: EQUAL
42185: IFTRUE 42189
42187: GO 42411
42189: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42190: LD_ADDR_VAR 0 4
42194: PUSH
42195: LD_INT 46
42197: PUSH
42198: LD_INT 47
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 82
42209: PUSH
42210: LD_INT 83
42212: PUSH
42213: LD_INT 84
42215: PUSH
42216: LD_INT 85
42218: PUSH
42219: LD_INT 86
42221: PUSH
42222: LD_INT 11
42224: PUSH
42225: LD_INT 9
42227: PUSH
42228: LD_INT 20
42230: PUSH
42231: LD_INT 19
42233: PUSH
42234: LD_INT 21
42236: PUSH
42237: LD_INT 24
42239: PUSH
42240: LD_INT 22
42242: PUSH
42243: LD_INT 25
42245: PUSH
42246: LD_INT 28
42248: PUSH
42249: LD_INT 29
42251: PUSH
42252: LD_INT 30
42254: PUSH
42255: LD_INT 31
42257: PUSH
42258: LD_INT 37
42260: PUSH
42261: LD_INT 38
42263: PUSH
42264: LD_INT 32
42266: PUSH
42267: LD_INT 27
42269: PUSH
42270: LD_INT 33
42272: PUSH
42273: LD_INT 69
42275: PUSH
42276: LD_INT 39
42278: PUSH
42279: LD_INT 34
42281: PUSH
42282: LD_INT 40
42284: PUSH
42285: LD_INT 71
42287: PUSH
42288: LD_INT 23
42290: PUSH
42291: LD_INT 44
42293: PUSH
42294: LD_INT 48
42296: PUSH
42297: LD_INT 49
42299: PUSH
42300: LD_INT 50
42302: PUSH
42303: LD_INT 51
42305: PUSH
42306: LD_INT 52
42308: PUSH
42309: LD_INT 53
42311: PUSH
42312: LD_INT 54
42314: PUSH
42315: LD_INT 55
42317: PUSH
42318: LD_INT 56
42320: PUSH
42321: LD_INT 57
42323: PUSH
42324: LD_INT 58
42326: PUSH
42327: LD_INT 59
42329: PUSH
42330: LD_INT 63
42332: PUSH
42333: LD_INT 64
42335: PUSH
42336: LD_INT 65
42338: PUSH
42339: LD_INT 82
42341: PUSH
42342: LD_INT 83
42344: PUSH
42345: LD_INT 84
42347: PUSH
42348: LD_INT 85
42350: PUSH
42351: LD_INT 86
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
42409: GO 42412
42411: POP
// if state > - 1 and state < 3 then
42412: LD_VAR 0 3
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: GREATER
42421: PUSH
42422: LD_VAR 0 3
42426: PUSH
42427: LD_INT 3
42429: LESS
42430: AND
42431: IFFALSE 42488
// for i in result do
42433: LD_ADDR_VAR 0 5
42437: PUSH
42438: LD_VAR 0 4
42442: PUSH
42443: FOR_IN
42444: IFFALSE 42486
// if GetTech ( i , side ) <> state then
42446: LD_VAR 0 5
42450: PPUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 321
42460: PUSH
42461: LD_VAR 0 3
42465: NONEQUAL
42466: IFFALSE 42484
// result := result diff i ;
42468: LD_ADDR_VAR 0 4
42472: PUSH
42473: LD_VAR 0 4
42477: PUSH
42478: LD_VAR 0 5
42482: DIFF
42483: ST_TO_ADDR
42484: GO 42443
42486: POP
42487: POP
// end ;
42488: LD_VAR 0 4
42492: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42493: LD_INT 0
42495: PPUSH
42496: PPUSH
42497: PPUSH
// result := true ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_INT 1
42505: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42506: LD_ADDR_VAR 0 5
42510: PUSH
42511: LD_VAR 0 2
42515: PPUSH
42516: CALL_OW 480
42520: ST_TO_ADDR
// if not tmp then
42521: LD_VAR 0 5
42525: NOT
42526: IFFALSE 42530
// exit ;
42528: GO 42579
// for i in tmp do
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_VAR 0 5
42539: PUSH
42540: FOR_IN
42541: IFFALSE 42577
// if GetTech ( i , side ) <> state_researched then
42543: LD_VAR 0 4
42547: PPUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 321
42557: PUSH
42558: LD_INT 2
42560: NONEQUAL
42561: IFFALSE 42575
// begin result := false ;
42563: LD_ADDR_VAR 0 3
42567: PUSH
42568: LD_INT 0
42570: ST_TO_ADDR
// exit ;
42571: POP
42572: POP
42573: GO 42579
// end ;
42575: GO 42540
42577: POP
42578: POP
// end ;
42579: LD_VAR 0 3
42583: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42584: LD_INT 0
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42599: LD_VAR 0 1
42603: NOT
42604: PUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: CALL_OW 257
42614: PUSH
42615: LD_INT 9
42617: NONEQUAL
42618: OR
42619: IFFALSE 42623
// exit ;
42621: GO 43196
// side := GetSide ( unit ) ;
42623: LD_ADDR_VAR 0 9
42627: PUSH
42628: LD_VAR 0 1
42632: PPUSH
42633: CALL_OW 255
42637: ST_TO_ADDR
// tech_space := tech_spacanom ;
42638: LD_ADDR_VAR 0 12
42642: PUSH
42643: LD_INT 29
42645: ST_TO_ADDR
// tech_time := tech_taurad ;
42646: LD_ADDR_VAR 0 13
42650: PUSH
42651: LD_INT 28
42653: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42654: LD_ADDR_VAR 0 11
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: CALL_OW 310
42668: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42669: LD_VAR 0 11
42673: PPUSH
42674: CALL_OW 247
42678: PUSH
42679: LD_INT 2
42681: EQUAL
42682: IFFALSE 42686
// exit ;
42684: GO 43196
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42686: LD_ADDR_VAR 0 8
42690: PUSH
42691: LD_INT 81
42693: PUSH
42694: LD_VAR 0 9
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: LD_INT 21
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PPUSH
42724: CALL_OW 69
42728: ST_TO_ADDR
// if not tmp then
42729: LD_VAR 0 8
42733: NOT
42734: IFFALSE 42738
// exit ;
42736: GO 43196
// if in_unit then
42738: LD_VAR 0 11
42742: IFFALSE 42766
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42744: LD_ADDR_VAR 0 10
42748: PUSH
42749: LD_VAR 0 8
42753: PPUSH
42754: LD_VAR 0 11
42758: PPUSH
42759: CALL_OW 74
42763: ST_TO_ADDR
42764: GO 42786
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42766: LD_ADDR_VAR 0 10
42770: PUSH
42771: LD_VAR 0 8
42775: PPUSH
42776: LD_VAR 0 1
42780: PPUSH
42781: CALL_OW 74
42785: ST_TO_ADDR
// if not enemy then
42786: LD_VAR 0 10
42790: NOT
42791: IFFALSE 42795
// exit ;
42793: GO 43196
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42795: LD_VAR 0 11
42799: PUSH
42800: LD_VAR 0 11
42804: PPUSH
42805: LD_VAR 0 10
42809: PPUSH
42810: CALL_OW 296
42814: PUSH
42815: LD_INT 13
42817: GREATER
42818: AND
42819: PUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: LD_VAR 0 10
42829: PPUSH
42830: CALL_OW 296
42834: PUSH
42835: LD_INT 12
42837: GREATER
42838: OR
42839: IFFALSE 42843
// exit ;
42841: GO 43196
// missile := [ 1 ] ;
42843: LD_ADDR_VAR 0 14
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42854: LD_VAR 0 9
42858: PPUSH
42859: LD_VAR 0 12
42863: PPUSH
42864: CALL_OW 325
42868: IFFALSE 42897
// missile := Insert ( missile , missile + 1 , 2 ) ;
42870: LD_ADDR_VAR 0 14
42874: PUSH
42875: LD_VAR 0 14
42879: PPUSH
42880: LD_VAR 0 14
42884: PUSH
42885: LD_INT 1
42887: PLUS
42888: PPUSH
42889: LD_INT 2
42891: PPUSH
42892: CALL_OW 2
42896: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42897: LD_VAR 0 9
42901: PPUSH
42902: LD_VAR 0 13
42906: PPUSH
42907: CALL_OW 325
42911: PUSH
42912: LD_VAR 0 10
42916: PPUSH
42917: CALL_OW 255
42921: PPUSH
42922: LD_VAR 0 13
42926: PPUSH
42927: CALL_OW 325
42931: NOT
42932: AND
42933: IFFALSE 42962
// missile := Insert ( missile , missile + 1 , 3 ) ;
42935: LD_ADDR_VAR 0 14
42939: PUSH
42940: LD_VAR 0 14
42944: PPUSH
42945: LD_VAR 0 14
42949: PUSH
42950: LD_INT 1
42952: PLUS
42953: PPUSH
42954: LD_INT 3
42956: PPUSH
42957: CALL_OW 2
42961: ST_TO_ADDR
// if missile < 2 then
42962: LD_VAR 0 14
42966: PUSH
42967: LD_INT 2
42969: LESS
42970: IFFALSE 42974
// exit ;
42972: GO 43196
// x := GetX ( enemy ) ;
42974: LD_ADDR_VAR 0 4
42978: PUSH
42979: LD_VAR 0 10
42983: PPUSH
42984: CALL_OW 250
42988: ST_TO_ADDR
// y := GetY ( enemy ) ;
42989: LD_ADDR_VAR 0 5
42993: PUSH
42994: LD_VAR 0 10
42998: PPUSH
42999: CALL_OW 251
43003: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43004: LD_ADDR_VAR 0 6
43008: PUSH
43009: LD_VAR 0 4
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PPUSH
43018: LD_INT 1
43020: PPUSH
43021: CALL_OW 12
43025: PLUS
43026: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43027: LD_ADDR_VAR 0 7
43031: PUSH
43032: LD_VAR 0 5
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PPUSH
43041: LD_INT 1
43043: PPUSH
43044: CALL_OW 12
43048: PLUS
43049: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43050: LD_VAR 0 6
43054: PPUSH
43055: LD_VAR 0 7
43059: PPUSH
43060: CALL_OW 488
43064: NOT
43065: IFFALSE 43087
// begin _x := x ;
43067: LD_ADDR_VAR 0 6
43071: PUSH
43072: LD_VAR 0 4
43076: ST_TO_ADDR
// _y := y ;
43077: LD_ADDR_VAR 0 7
43081: PUSH
43082: LD_VAR 0 5
43086: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 1
43094: PPUSH
43095: LD_VAR 0 14
43099: PPUSH
43100: CALL_OW 12
43104: ST_TO_ADDR
// case i of 1 :
43105: LD_VAR 0 3
43109: PUSH
43110: LD_INT 1
43112: DOUBLE
43113: EQUAL
43114: IFTRUE 43118
43116: GO 43135
43118: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43119: LD_VAR 0 1
43123: PPUSH
43124: LD_VAR 0 10
43128: PPUSH
43129: CALL_OW 115
43133: GO 43196
43135: LD_INT 2
43137: DOUBLE
43138: EQUAL
43139: IFTRUE 43143
43141: GO 43165
43143: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43144: LD_VAR 0 1
43148: PPUSH
43149: LD_VAR 0 6
43153: PPUSH
43154: LD_VAR 0 7
43158: PPUSH
43159: CALL_OW 153
43163: GO 43196
43165: LD_INT 3
43167: DOUBLE
43168: EQUAL
43169: IFTRUE 43173
43171: GO 43195
43173: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43174: LD_VAR 0 1
43178: PPUSH
43179: LD_VAR 0 6
43183: PPUSH
43184: LD_VAR 0 7
43188: PPUSH
43189: CALL_OW 154
43193: GO 43196
43195: POP
// end ;
43196: LD_VAR 0 2
43200: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43201: LD_INT 0
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
// if not unit or not building then
43209: LD_VAR 0 1
43213: NOT
43214: PUSH
43215: LD_VAR 0 2
43219: NOT
43220: OR
43221: IFFALSE 43225
// exit ;
43223: GO 43383
// x := GetX ( building ) ;
43225: LD_ADDR_VAR 0 5
43229: PUSH
43230: LD_VAR 0 2
43234: PPUSH
43235: CALL_OW 250
43239: ST_TO_ADDR
// y := GetY ( building ) ;
43240: LD_ADDR_VAR 0 6
43244: PUSH
43245: LD_VAR 0 2
43249: PPUSH
43250: CALL_OW 251
43254: ST_TO_ADDR
// for i = 0 to 5 do
43255: LD_ADDR_VAR 0 4
43259: PUSH
43260: DOUBLE
43261: LD_INT 0
43263: DEC
43264: ST_TO_ADDR
43265: LD_INT 5
43267: PUSH
43268: FOR_TO
43269: IFFALSE 43381
// begin _x := ShiftX ( x , i , 3 ) ;
43271: LD_ADDR_VAR 0 7
43275: PUSH
43276: LD_VAR 0 5
43280: PPUSH
43281: LD_VAR 0 4
43285: PPUSH
43286: LD_INT 3
43288: PPUSH
43289: CALL_OW 272
43293: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43294: LD_ADDR_VAR 0 8
43298: PUSH
43299: LD_VAR 0 6
43303: PPUSH
43304: LD_VAR 0 4
43308: PPUSH
43309: LD_INT 3
43311: PPUSH
43312: CALL_OW 273
43316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43317: LD_VAR 0 7
43321: PPUSH
43322: LD_VAR 0 8
43326: PPUSH
43327: CALL_OW 488
43331: NOT
43332: IFFALSE 43336
// continue ;
43334: GO 43268
// if HexInfo ( _x , _y ) = 0 then
43336: LD_VAR 0 7
43340: PPUSH
43341: LD_VAR 0 8
43345: PPUSH
43346: CALL_OW 428
43350: PUSH
43351: LD_INT 0
43353: EQUAL
43354: IFFALSE 43379
// begin ComMoveXY ( unit , _x , _y ) ;
43356: LD_VAR 0 1
43360: PPUSH
43361: LD_VAR 0 7
43365: PPUSH
43366: LD_VAR 0 8
43370: PPUSH
43371: CALL_OW 111
// exit ;
43375: POP
43376: POP
43377: GO 43383
// end ; end ;
43379: GO 43268
43381: POP
43382: POP
// end ;
43383: LD_VAR 0 3
43387: RET
// export function ScanBase ( side , base_area ) ; begin
43388: LD_INT 0
43390: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43391: LD_ADDR_VAR 0 3
43395: PUSH
43396: LD_VAR 0 2
43400: PPUSH
43401: LD_INT 81
43403: PUSH
43404: LD_VAR 0 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PPUSH
43413: CALL_OW 70
43417: ST_TO_ADDR
// end ;
43418: LD_VAR 0 3
43422: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43423: LD_INT 0
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
// result := false ;
43429: LD_ADDR_VAR 0 2
43433: PUSH
43434: LD_INT 0
43436: ST_TO_ADDR
// side := GetSide ( unit ) ;
43437: LD_ADDR_VAR 0 3
43441: PUSH
43442: LD_VAR 0 1
43446: PPUSH
43447: CALL_OW 255
43451: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43452: LD_ADDR_VAR 0 4
43456: PUSH
43457: LD_VAR 0 1
43461: PPUSH
43462: CALL_OW 248
43466: ST_TO_ADDR
// case nat of 1 :
43467: LD_VAR 0 4
43471: PUSH
43472: LD_INT 1
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43491
43480: POP
// tech := tech_lassight ; 2 :
43481: LD_ADDR_VAR 0 5
43485: PUSH
43486: LD_INT 12
43488: ST_TO_ADDR
43489: GO 43530
43491: LD_INT 2
43493: DOUBLE
43494: EQUAL
43495: IFTRUE 43499
43497: GO 43510
43499: POP
// tech := tech_mortar ; 3 :
43500: LD_ADDR_VAR 0 5
43504: PUSH
43505: LD_INT 41
43507: ST_TO_ADDR
43508: GO 43530
43510: LD_INT 3
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43529
43518: POP
// tech := tech_bazooka ; end ;
43519: LD_ADDR_VAR 0 5
43523: PUSH
43524: LD_INT 44
43526: ST_TO_ADDR
43527: GO 43530
43529: POP
// if Researched ( side , tech ) then
43530: LD_VAR 0 3
43534: PPUSH
43535: LD_VAR 0 5
43539: PPUSH
43540: CALL_OW 325
43544: IFFALSE 43571
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43546: LD_ADDR_VAR 0 2
43550: PUSH
43551: LD_INT 5
43553: PUSH
43554: LD_INT 8
43556: PUSH
43557: LD_INT 9
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: PUSH
43565: LD_VAR 0 4
43569: ARRAY
43570: ST_TO_ADDR
// end ;
43571: LD_VAR 0 2
43575: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43576: LD_INT 0
43578: PPUSH
43579: PPUSH
43580: PPUSH
// if not mines then
43581: LD_VAR 0 2
43585: NOT
43586: IFFALSE 43590
// exit ;
43588: GO 43734
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43590: LD_ADDR_VAR 0 5
43594: PUSH
43595: LD_INT 81
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: LD_INT 21
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PPUSH
43628: CALL_OW 69
43632: ST_TO_ADDR
// for i in mines do
43633: LD_ADDR_VAR 0 4
43637: PUSH
43638: LD_VAR 0 2
43642: PUSH
43643: FOR_IN
43644: IFFALSE 43732
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43646: LD_VAR 0 4
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PPUSH
43655: LD_VAR 0 4
43659: PUSH
43660: LD_INT 2
43662: ARRAY
43663: PPUSH
43664: CALL_OW 458
43668: NOT
43669: IFFALSE 43673
// continue ;
43671: GO 43643
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43673: LD_VAR 0 4
43677: PUSH
43678: LD_INT 1
43680: ARRAY
43681: PPUSH
43682: LD_VAR 0 4
43686: PUSH
43687: LD_INT 2
43689: ARRAY
43690: PPUSH
43691: CALL_OW 428
43695: PUSH
43696: LD_VAR 0 5
43700: IN
43701: IFFALSE 43730
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43703: LD_VAR 0 4
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: LD_VAR 0 4
43716: PUSH
43717: LD_INT 2
43719: ARRAY
43720: PPUSH
43721: LD_VAR 0 1
43725: PPUSH
43726: CALL_OW 456
// end ;
43730: GO 43643
43732: POP
43733: POP
// end ;
43734: LD_VAR 0 3
43738: RET
// export function Count ( array ) ; var i ; begin
43739: LD_INT 0
43741: PPUSH
43742: PPUSH
// result := 0 ;
43743: LD_ADDR_VAR 0 2
43747: PUSH
43748: LD_INT 0
43750: ST_TO_ADDR
// for i in array do
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_VAR 0 1
43760: PUSH
43761: FOR_IN
43762: IFFALSE 43786
// if i then
43764: LD_VAR 0 3
43768: IFFALSE 43784
// result := result + 1 ;
43770: LD_ADDR_VAR 0 2
43774: PUSH
43775: LD_VAR 0 2
43779: PUSH
43780: LD_INT 1
43782: PLUS
43783: ST_TO_ADDR
43784: GO 43761
43786: POP
43787: POP
// end ;
43788: LD_VAR 0 2
43792: RET
// export function IsEmpty ( building ) ; begin
43793: LD_INT 0
43795: PPUSH
// if not building then
43796: LD_VAR 0 1
43800: NOT
43801: IFFALSE 43805
// exit ;
43803: GO 43848
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43805: LD_ADDR_VAR 0 2
43809: PUSH
43810: LD_VAR 0 1
43814: PUSH
43815: LD_INT 22
43817: PUSH
43818: LD_VAR 0 1
43822: PPUSH
43823: CALL_OW 255
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 58
43834: PUSH
43835: EMPTY
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PPUSH
43842: CALL_OW 69
43846: IN
43847: ST_TO_ADDR
// end ;
43848: LD_VAR 0 2
43852: RET
// export function IsNotFull ( building ) ; begin
43853: LD_INT 0
43855: PPUSH
// if not building then
43856: LD_VAR 0 1
43860: NOT
43861: IFFALSE 43865
// exit ;
43863: GO 43884
// result := UnitsInside ( building ) < 6 ;
43865: LD_ADDR_VAR 0 2
43869: PUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 313
43879: PUSH
43880: LD_INT 6
43882: LESS
43883: ST_TO_ADDR
// end ;
43884: LD_VAR 0 2
43888: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43889: LD_INT 0
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
// tmp := [ ] ;
43895: LD_ADDR_VAR 0 3
43899: PUSH
43900: EMPTY
43901: ST_TO_ADDR
// list := [ ] ;
43902: LD_ADDR_VAR 0 5
43906: PUSH
43907: EMPTY
43908: ST_TO_ADDR
// for i = 16 to 25 do
43909: LD_ADDR_VAR 0 4
43913: PUSH
43914: DOUBLE
43915: LD_INT 16
43917: DEC
43918: ST_TO_ADDR
43919: LD_INT 25
43921: PUSH
43922: FOR_TO
43923: IFFALSE 43996
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43925: LD_ADDR_VAR 0 3
43929: PUSH
43930: LD_VAR 0 3
43934: PUSH
43935: LD_INT 22
43937: PUSH
43938: LD_VAR 0 1
43942: PPUSH
43943: CALL_OW 255
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 91
43954: PUSH
43955: LD_VAR 0 1
43959: PUSH
43960: LD_INT 6
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 30
43970: PUSH
43971: LD_VAR 0 4
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: PPUSH
43988: CALL_OW 69
43992: ADD
43993: ST_TO_ADDR
43994: GO 43922
43996: POP
43997: POP
// for i = 1 to tmp do
43998: LD_ADDR_VAR 0 4
44002: PUSH
44003: DOUBLE
44004: LD_INT 1
44006: DEC
44007: ST_TO_ADDR
44008: LD_VAR 0 3
44012: PUSH
44013: FOR_TO
44014: IFFALSE 44102
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44016: LD_ADDR_VAR 0 5
44020: PUSH
44021: LD_VAR 0 5
44025: PUSH
44026: LD_VAR 0 3
44030: PUSH
44031: LD_VAR 0 4
44035: ARRAY
44036: PPUSH
44037: CALL_OW 266
44041: PUSH
44042: LD_VAR 0 3
44046: PUSH
44047: LD_VAR 0 4
44051: ARRAY
44052: PPUSH
44053: CALL_OW 250
44057: PUSH
44058: LD_VAR 0 3
44062: PUSH
44063: LD_VAR 0 4
44067: ARRAY
44068: PPUSH
44069: CALL_OW 251
44073: PUSH
44074: LD_VAR 0 3
44078: PUSH
44079: LD_VAR 0 4
44083: ARRAY
44084: PPUSH
44085: CALL_OW 254
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: ADD
44099: ST_TO_ADDR
44100: GO 44013
44102: POP
44103: POP
// result := list ;
44104: LD_ADDR_VAR 0 2
44108: PUSH
44109: LD_VAR 0 5
44113: ST_TO_ADDR
// end ;
44114: LD_VAR 0 2
44118: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44119: LD_INT 0
44121: PPUSH
44122: PPUSH
44123: PPUSH
44124: PPUSH
44125: PPUSH
44126: PPUSH
44127: PPUSH
// if not factory then
44128: LD_VAR 0 1
44132: NOT
44133: IFFALSE 44137
// exit ;
44135: GO 44730
// if control = control_apeman then
44137: LD_VAR 0 4
44141: PUSH
44142: LD_INT 5
44144: EQUAL
44145: IFFALSE 44254
// begin tmp := UnitsInside ( factory ) ;
44147: LD_ADDR_VAR 0 8
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 313
44161: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44162: LD_VAR 0 8
44166: PPUSH
44167: LD_INT 25
44169: PUSH
44170: LD_INT 12
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PPUSH
44177: CALL_OW 72
44181: NOT
44182: IFFALSE 44192
// control := control_manual ;
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: LD_INT 1
44191: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44192: LD_ADDR_VAR 0 8
44196: PUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL 43889 0 1
44206: ST_TO_ADDR
// if tmp then
44207: LD_VAR 0 8
44211: IFFALSE 44254
// begin for i in tmp do
44213: LD_ADDR_VAR 0 7
44217: PUSH
44218: LD_VAR 0 8
44222: PUSH
44223: FOR_IN
44224: IFFALSE 44252
// if i [ 1 ] = b_ext_radio then
44226: LD_VAR 0 7
44230: PUSH
44231: LD_INT 1
44233: ARRAY
44234: PUSH
44235: LD_INT 22
44237: EQUAL
44238: IFFALSE 44250
// begin control := control_remote ;
44240: LD_ADDR_VAR 0 4
44244: PUSH
44245: LD_INT 2
44247: ST_TO_ADDR
// break ;
44248: GO 44252
// end ;
44250: GO 44223
44252: POP
44253: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44254: LD_VAR 0 1
44258: PPUSH
44259: LD_VAR 0 2
44263: PPUSH
44264: LD_VAR 0 3
44268: PPUSH
44269: LD_VAR 0 4
44273: PPUSH
44274: LD_VAR 0 5
44278: PPUSH
44279: CALL_OW 448
44283: IFFALSE 44318
// begin result := [ chassis , engine , control , weapon ] ;
44285: LD_ADDR_VAR 0 6
44289: PUSH
44290: LD_VAR 0 2
44294: PUSH
44295: LD_VAR 0 3
44299: PUSH
44300: LD_VAR 0 4
44304: PUSH
44305: LD_VAR 0 5
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// exit ;
44316: GO 44730
// end ; _chassis := AvailableChassisList ( factory ) ;
44318: LD_ADDR_VAR 0 9
44322: PUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 475
44332: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44333: LD_ADDR_VAR 0 11
44337: PUSH
44338: LD_VAR 0 1
44342: PPUSH
44343: CALL_OW 476
44347: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44348: LD_ADDR_VAR 0 12
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 477
44362: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44363: LD_ADDR_VAR 0 10
44367: PUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 478
44377: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44378: LD_VAR 0 9
44382: NOT
44383: PUSH
44384: LD_VAR 0 11
44388: NOT
44389: OR
44390: PUSH
44391: LD_VAR 0 12
44395: NOT
44396: OR
44397: PUSH
44398: LD_VAR 0 10
44402: NOT
44403: OR
44404: IFFALSE 44439
// begin result := [ chassis , engine , control , weapon ] ;
44406: LD_ADDR_VAR 0 6
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_VAR 0 3
44420: PUSH
44421: LD_VAR 0 4
44425: PUSH
44426: LD_VAR 0 5
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// exit ;
44437: GO 44730
// end ; if not chassis in _chassis then
44439: LD_VAR 0 2
44443: PUSH
44444: LD_VAR 0 9
44448: IN
44449: NOT
44450: IFFALSE 44476
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44452: LD_ADDR_VAR 0 2
44456: PUSH
44457: LD_VAR 0 9
44461: PUSH
44462: LD_INT 1
44464: PPUSH
44465: LD_VAR 0 9
44469: PPUSH
44470: CALL_OW 12
44474: ARRAY
44475: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44476: LD_VAR 0 2
44480: PPUSH
44481: LD_VAR 0 3
44485: PPUSH
44486: CALL 44735 0 2
44490: NOT
44491: IFFALSE 44550
// repeat engine := _engine [ 1 ] ;
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_VAR 0 11
44502: PUSH
44503: LD_INT 1
44505: ARRAY
44506: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44507: LD_ADDR_VAR 0 11
44511: PUSH
44512: LD_VAR 0 11
44516: PPUSH
44517: LD_INT 1
44519: PPUSH
44520: CALL_OW 3
44524: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44525: LD_VAR 0 2
44529: PPUSH
44530: LD_VAR 0 3
44534: PPUSH
44535: CALL 44735 0 2
44539: PUSH
44540: LD_VAR 0 11
44544: PUSH
44545: EMPTY
44546: EQUAL
44547: OR
44548: IFFALSE 44493
// if not control in _control then
44550: LD_VAR 0 4
44554: PUSH
44555: LD_VAR 0 12
44559: IN
44560: NOT
44561: IFFALSE 44587
// control := _control [ rand ( 1 , _control ) ] ;
44563: LD_ADDR_VAR 0 4
44567: PUSH
44568: LD_VAR 0 12
44572: PUSH
44573: LD_INT 1
44575: PPUSH
44576: LD_VAR 0 12
44580: PPUSH
44581: CALL_OW 12
44585: ARRAY
44586: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44587: LD_VAR 0 2
44591: PPUSH
44592: LD_VAR 0 5
44596: PPUSH
44597: CALL 44955 0 2
44601: NOT
44602: IFFALSE 44661
// repeat weapon := _weapon [ 1 ] ;
44604: LD_ADDR_VAR 0 5
44608: PUSH
44609: LD_VAR 0 10
44613: PUSH
44614: LD_INT 1
44616: ARRAY
44617: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44618: LD_ADDR_VAR 0 10
44622: PUSH
44623: LD_VAR 0 10
44627: PPUSH
44628: LD_INT 1
44630: PPUSH
44631: CALL_OW 3
44635: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44636: LD_VAR 0 2
44640: PPUSH
44641: LD_VAR 0 5
44645: PPUSH
44646: CALL 44955 0 2
44650: PUSH
44651: LD_VAR 0 10
44655: PUSH
44656: EMPTY
44657: EQUAL
44658: OR
44659: IFFALSE 44604
// result := [ ] ;
44661: LD_ADDR_VAR 0 6
44665: PUSH
44666: EMPTY
44667: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44668: LD_VAR 0 1
44672: PPUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_VAR 0 3
44682: PPUSH
44683: LD_VAR 0 4
44687: PPUSH
44688: LD_VAR 0 5
44692: PPUSH
44693: CALL_OW 448
44697: IFFALSE 44730
// result := [ chassis , engine , control , weapon ] ;
44699: LD_ADDR_VAR 0 6
44703: PUSH
44704: LD_VAR 0 2
44708: PUSH
44709: LD_VAR 0 3
44713: PUSH
44714: LD_VAR 0 4
44718: PUSH
44719: LD_VAR 0 5
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// end ;
44730: LD_VAR 0 6
44734: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44735: LD_INT 0
44737: PPUSH
// if not chassis or not engine then
44738: LD_VAR 0 1
44742: NOT
44743: PUSH
44744: LD_VAR 0 2
44748: NOT
44749: OR
44750: IFFALSE 44754
// exit ;
44752: GO 44950
// case engine of engine_solar :
44754: LD_VAR 0 2
44758: PUSH
44759: LD_INT 2
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 44805
44767: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 11
44775: PUSH
44776: LD_INT 12
44778: PUSH
44779: LD_INT 13
44781: PUSH
44782: LD_INT 14
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
44803: GO 44934
44805: LD_INT 1
44807: DOUBLE
44808: EQUAL
44809: IFTRUE 44813
44811: GO 44875
44813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44814: LD_ADDR_VAR 0 3
44818: PUSH
44819: LD_INT 11
44821: PUSH
44822: LD_INT 12
44824: PUSH
44825: LD_INT 13
44827: PUSH
44828: LD_INT 14
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: LD_INT 4
44842: PUSH
44843: LD_INT 5
44845: PUSH
44846: LD_INT 21
44848: PUSH
44849: LD_INT 23
44851: PUSH
44852: LD_INT 22
44854: PUSH
44855: LD_INT 24
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
44873: GO 44934
44875: LD_INT 3
44877: DOUBLE
44878: EQUAL
44879: IFTRUE 44883
44881: GO 44933
44883: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44884: LD_ADDR_VAR 0 3
44888: PUSH
44889: LD_INT 13
44891: PUSH
44892: LD_INT 14
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: LD_INT 4
44903: PUSH
44904: LD_INT 5
44906: PUSH
44907: LD_INT 21
44909: PUSH
44910: LD_INT 22
44912: PUSH
44913: LD_INT 23
44915: PUSH
44916: LD_INT 24
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
44931: GO 44934
44933: POP
// result := ( chassis in result ) ;
44934: LD_ADDR_VAR 0 3
44938: PUSH
44939: LD_VAR 0 1
44943: PUSH
44944: LD_VAR 0 3
44948: IN
44949: ST_TO_ADDR
// end ;
44950: LD_VAR 0 3
44954: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44955: LD_INT 0
44957: PPUSH
// if not chassis or not weapon then
44958: LD_VAR 0 1
44962: NOT
44963: PUSH
44964: LD_VAR 0 2
44968: NOT
44969: OR
44970: IFFALSE 44974
// exit ;
44972: GO 46036
// case weapon of us_machine_gun :
44974: LD_VAR 0 2
44978: PUSH
44979: LD_INT 2
44981: DOUBLE
44982: EQUAL
44983: IFTRUE 44987
44985: GO 45017
44987: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44988: LD_ADDR_VAR 0 3
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: LD_INT 5
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
45015: GO 46020
45017: LD_INT 3
45019: DOUBLE
45020: EQUAL
45021: IFTRUE 45025
45023: GO 45055
45025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45026: LD_ADDR_VAR 0 3
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 4
45042: PUSH
45043: LD_INT 5
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
45053: GO 46020
45055: LD_INT 11
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45063
45061: GO 45093
45063: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45064: LD_ADDR_VAR 0 3
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: LD_INT 4
45080: PUSH
45081: LD_INT 5
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
45091: GO 46020
45093: LD_INT 4
45095: DOUBLE
45096: EQUAL
45097: IFTRUE 45101
45099: GO 45127
45101: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: LD_INT 4
45115: PUSH
45116: LD_INT 5
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 46020
45127: LD_INT 5
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45161
45135: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 4
45149: PUSH
45150: LD_INT 5
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
45159: GO 46020
45161: LD_INT 9
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45195
45169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
45193: GO 46020
45195: LD_INT 7
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45229
45203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45204: LD_ADDR_VAR 0 3
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: LD_INT 5
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
45227: GO 46020
45229: LD_INT 12
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45237
45235: GO 45263
45237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45238: LD_ADDR_VAR 0 3
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 4
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
45261: GO 46020
45263: LD_INT 13
45265: DOUBLE
45266: EQUAL
45267: IFTRUE 45271
45269: GO 45297
45271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45272: LD_ADDR_VAR 0 3
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
45295: GO 46020
45297: LD_INT 14
45299: DOUBLE
45300: EQUAL
45301: IFTRUE 45305
45303: GO 45323
45305: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45306: LD_ADDR_VAR 0 3
45310: PUSH
45311: LD_INT 4
45313: PUSH
45314: LD_INT 5
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: ST_TO_ADDR
45321: GO 46020
45323: LD_INT 6
45325: DOUBLE
45326: EQUAL
45327: IFTRUE 45331
45329: GO 45349
45331: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_INT 4
45339: PUSH
45340: LD_INT 5
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: ST_TO_ADDR
45347: GO 46020
45349: LD_INT 10
45351: DOUBLE
45352: EQUAL
45353: IFTRUE 45357
45355: GO 45375
45357: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45358: LD_ADDR_VAR 0 3
45362: PUSH
45363: LD_INT 4
45365: PUSH
45366: LD_INT 5
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: ST_TO_ADDR
45373: GO 46020
45375: LD_INT 22
45377: DOUBLE
45378: EQUAL
45379: IFTRUE 45383
45381: GO 45409
45383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45384: LD_ADDR_VAR 0 3
45388: PUSH
45389: LD_INT 11
45391: PUSH
45392: LD_INT 12
45394: PUSH
45395: LD_INT 13
45397: PUSH
45398: LD_INT 14
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: ST_TO_ADDR
45407: GO 46020
45409: LD_INT 23
45411: DOUBLE
45412: EQUAL
45413: IFTRUE 45417
45415: GO 45443
45417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45418: LD_ADDR_VAR 0 3
45422: PUSH
45423: LD_INT 11
45425: PUSH
45426: LD_INT 12
45428: PUSH
45429: LD_INT 13
45431: PUSH
45432: LD_INT 14
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
45441: GO 46020
45443: LD_INT 24
45445: DOUBLE
45446: EQUAL
45447: IFTRUE 45451
45449: GO 45477
45451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_INT 11
45459: PUSH
45460: LD_INT 12
45462: PUSH
45463: LD_INT 13
45465: PUSH
45466: LD_INT 14
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
45475: GO 46020
45477: LD_INT 30
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45511
45485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 11
45493: PUSH
45494: LD_INT 12
45496: PUSH
45497: LD_INT 13
45499: PUSH
45500: LD_INT 14
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
45509: GO 46020
45511: LD_INT 25
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45537
45519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_INT 13
45527: PUSH
45528: LD_INT 14
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: ST_TO_ADDR
45535: GO 46020
45537: LD_INT 27
45539: DOUBLE
45540: EQUAL
45541: IFTRUE 45545
45543: GO 45563
45545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45546: LD_ADDR_VAR 0 3
45550: PUSH
45551: LD_INT 13
45553: PUSH
45554: LD_INT 14
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: ST_TO_ADDR
45561: GO 46020
45563: LD_EXP 56
45567: DOUBLE
45568: EQUAL
45569: IFTRUE 45573
45571: GO 45599
45573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_INT 11
45581: PUSH
45582: LD_INT 12
45584: PUSH
45585: LD_INT 13
45587: PUSH
45588: LD_INT 14
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
45597: GO 46020
45599: LD_INT 28
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45607
45605: GO 45625
45607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45608: LD_ADDR_VAR 0 3
45612: PUSH
45613: LD_INT 13
45615: PUSH
45616: LD_INT 14
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: ST_TO_ADDR
45623: GO 46020
45625: LD_INT 29
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45651
45633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45634: LD_ADDR_VAR 0 3
45638: PUSH
45639: LD_INT 13
45641: PUSH
45642: LD_INT 14
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: ST_TO_ADDR
45649: GO 46020
45651: LD_INT 31
45653: DOUBLE
45654: EQUAL
45655: IFTRUE 45659
45657: GO 45677
45659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45660: LD_ADDR_VAR 0 3
45664: PUSH
45665: LD_INT 13
45667: PUSH
45668: LD_INT 14
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: ST_TO_ADDR
45675: GO 46020
45677: LD_INT 26
45679: DOUBLE
45680: EQUAL
45681: IFTRUE 45685
45683: GO 45703
45685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45686: LD_ADDR_VAR 0 3
45690: PUSH
45691: LD_INT 13
45693: PUSH
45694: LD_INT 14
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: ST_TO_ADDR
45701: GO 46020
45703: LD_INT 42
45705: DOUBLE
45706: EQUAL
45707: IFTRUE 45711
45709: GO 45737
45711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45712: LD_ADDR_VAR 0 3
45716: PUSH
45717: LD_INT 21
45719: PUSH
45720: LD_INT 22
45722: PUSH
45723: LD_INT 23
45725: PUSH
45726: LD_INT 24
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
45735: GO 46020
45737: LD_INT 43
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 45771
45745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45746: LD_ADDR_VAR 0 3
45750: PUSH
45751: LD_INT 21
45753: PUSH
45754: LD_INT 22
45756: PUSH
45757: LD_INT 23
45759: PUSH
45760: LD_INT 24
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
45769: GO 46020
45771: LD_INT 44
45773: DOUBLE
45774: EQUAL
45775: IFTRUE 45779
45777: GO 45805
45779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45780: LD_ADDR_VAR 0 3
45784: PUSH
45785: LD_INT 21
45787: PUSH
45788: LD_INT 22
45790: PUSH
45791: LD_INT 23
45793: PUSH
45794: LD_INT 24
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
45803: GO 46020
45805: LD_INT 45
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45839
45813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_INT 21
45821: PUSH
45822: LD_INT 22
45824: PUSH
45825: LD_INT 23
45827: PUSH
45828: LD_INT 24
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: ST_TO_ADDR
45837: GO 46020
45839: LD_INT 49
45841: DOUBLE
45842: EQUAL
45843: IFTRUE 45847
45845: GO 45873
45847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45848: LD_ADDR_VAR 0 3
45852: PUSH
45853: LD_INT 21
45855: PUSH
45856: LD_INT 22
45858: PUSH
45859: LD_INT 23
45861: PUSH
45862: LD_INT 24
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
45871: GO 46020
45873: LD_INT 51
45875: DOUBLE
45876: EQUAL
45877: IFTRUE 45881
45879: GO 45907
45881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45882: LD_ADDR_VAR 0 3
45886: PUSH
45887: LD_INT 21
45889: PUSH
45890: LD_INT 22
45892: PUSH
45893: LD_INT 23
45895: PUSH
45896: LD_INT 24
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
45905: GO 46020
45907: LD_INT 52
45909: DOUBLE
45910: EQUAL
45911: IFTRUE 45915
45913: GO 45941
45915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45916: LD_ADDR_VAR 0 3
45920: PUSH
45921: LD_INT 21
45923: PUSH
45924: LD_INT 22
45926: PUSH
45927: LD_INT 23
45929: PUSH
45930: LD_INT 24
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
45939: GO 46020
45941: LD_INT 53
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45949
45947: GO 45967
45949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45950: LD_ADDR_VAR 0 3
45954: PUSH
45955: LD_INT 23
45957: PUSH
45958: LD_INT 24
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: ST_TO_ADDR
45965: GO 46020
45967: LD_INT 46
45969: DOUBLE
45970: EQUAL
45971: IFTRUE 45975
45973: GO 45993
45975: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_INT 23
45983: PUSH
45984: LD_INT 24
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: ST_TO_ADDR
45991: GO 46020
45993: LD_INT 47
45995: DOUBLE
45996: EQUAL
45997: IFTRUE 46001
45999: GO 46019
46001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46002: LD_ADDR_VAR 0 3
46006: PUSH
46007: LD_INT 23
46009: PUSH
46010: LD_INT 24
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: ST_TO_ADDR
46017: GO 46020
46019: POP
// result := ( chassis in result ) ;
46020: LD_ADDR_VAR 0 3
46024: PUSH
46025: LD_VAR 0 1
46029: PUSH
46030: LD_VAR 0 3
46034: IN
46035: ST_TO_ADDR
// end ;
46036: LD_VAR 0 3
46040: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46041: LD_INT 0
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
// result := array ;
46050: LD_ADDR_VAR 0 5
46054: PUSH
46055: LD_VAR 0 1
46059: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46060: LD_VAR 0 1
46064: NOT
46065: PUSH
46066: LD_VAR 0 2
46070: NOT
46071: OR
46072: PUSH
46073: LD_VAR 0 3
46077: NOT
46078: OR
46079: PUSH
46080: LD_VAR 0 2
46084: PUSH
46085: LD_VAR 0 1
46089: GREATER
46090: OR
46091: PUSH
46092: LD_VAR 0 3
46096: PUSH
46097: LD_VAR 0 1
46101: GREATER
46102: OR
46103: IFFALSE 46107
// exit ;
46105: GO 46403
// if direction then
46107: LD_VAR 0 4
46111: IFFALSE 46175
// begin d := 1 ;
46113: LD_ADDR_VAR 0 9
46117: PUSH
46118: LD_INT 1
46120: ST_TO_ADDR
// if i_from > i_to then
46121: LD_VAR 0 2
46125: PUSH
46126: LD_VAR 0 3
46130: GREATER
46131: IFFALSE 46157
// length := ( array - i_from ) + i_to else
46133: LD_ADDR_VAR 0 11
46137: PUSH
46138: LD_VAR 0 1
46142: PUSH
46143: LD_VAR 0 2
46147: MINUS
46148: PUSH
46149: LD_VAR 0 3
46153: PLUS
46154: ST_TO_ADDR
46155: GO 46173
// length := i_to - i_from ;
46157: LD_ADDR_VAR 0 11
46161: PUSH
46162: LD_VAR 0 3
46166: PUSH
46167: LD_VAR 0 2
46171: MINUS
46172: ST_TO_ADDR
// end else
46173: GO 46236
// begin d := - 1 ;
46175: LD_ADDR_VAR 0 9
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: ST_TO_ADDR
// if i_from > i_to then
46184: LD_VAR 0 2
46188: PUSH
46189: LD_VAR 0 3
46193: GREATER
46194: IFFALSE 46214
// length := i_from - i_to else
46196: LD_ADDR_VAR 0 11
46200: PUSH
46201: LD_VAR 0 2
46205: PUSH
46206: LD_VAR 0 3
46210: MINUS
46211: ST_TO_ADDR
46212: GO 46236
// length := ( array - i_to ) + i_from ;
46214: LD_ADDR_VAR 0 11
46218: PUSH
46219: LD_VAR 0 1
46223: PUSH
46224: LD_VAR 0 3
46228: MINUS
46229: PUSH
46230: LD_VAR 0 2
46234: PLUS
46235: ST_TO_ADDR
// end ; if not length then
46236: LD_VAR 0 11
46240: NOT
46241: IFFALSE 46245
// exit ;
46243: GO 46403
// tmp := array ;
46245: LD_ADDR_VAR 0 10
46249: PUSH
46250: LD_VAR 0 1
46254: ST_TO_ADDR
// for i = 1 to length do
46255: LD_ADDR_VAR 0 6
46259: PUSH
46260: DOUBLE
46261: LD_INT 1
46263: DEC
46264: ST_TO_ADDR
46265: LD_VAR 0 11
46269: PUSH
46270: FOR_TO
46271: IFFALSE 46391
// begin for j = 1 to array do
46273: LD_ADDR_VAR 0 7
46277: PUSH
46278: DOUBLE
46279: LD_INT 1
46281: DEC
46282: ST_TO_ADDR
46283: LD_VAR 0 1
46287: PUSH
46288: FOR_TO
46289: IFFALSE 46377
// begin k := j + d ;
46291: LD_ADDR_VAR 0 8
46295: PUSH
46296: LD_VAR 0 7
46300: PUSH
46301: LD_VAR 0 9
46305: PLUS
46306: ST_TO_ADDR
// if k > array then
46307: LD_VAR 0 8
46311: PUSH
46312: LD_VAR 0 1
46316: GREATER
46317: IFFALSE 46327
// k := 1 ;
46319: LD_ADDR_VAR 0 8
46323: PUSH
46324: LD_INT 1
46326: ST_TO_ADDR
// if not k then
46327: LD_VAR 0 8
46331: NOT
46332: IFFALSE 46344
// k := array ;
46334: LD_ADDR_VAR 0 8
46338: PUSH
46339: LD_VAR 0 1
46343: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46344: LD_ADDR_VAR 0 10
46348: PUSH
46349: LD_VAR 0 10
46353: PPUSH
46354: LD_VAR 0 8
46358: PPUSH
46359: LD_VAR 0 1
46363: PUSH
46364: LD_VAR 0 7
46368: ARRAY
46369: PPUSH
46370: CALL_OW 1
46374: ST_TO_ADDR
// end ;
46375: GO 46288
46377: POP
46378: POP
// array := tmp ;
46379: LD_ADDR_VAR 0 1
46383: PUSH
46384: LD_VAR 0 10
46388: ST_TO_ADDR
// end ;
46389: GO 46270
46391: POP
46392: POP
// result := array ;
46393: LD_ADDR_VAR 0 5
46397: PUSH
46398: LD_VAR 0 1
46402: ST_TO_ADDR
// end ;
46403: LD_VAR 0 5
46407: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
// result := 0 ;
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: LD_INT 0
46419: ST_TO_ADDR
// if not array or not value in array then
46420: LD_VAR 0 1
46424: NOT
46425: PUSH
46426: LD_VAR 0 2
46430: PUSH
46431: LD_VAR 0 1
46435: IN
46436: NOT
46437: OR
46438: IFFALSE 46442
// exit ;
46440: GO 46496
// for i = 1 to array do
46442: LD_ADDR_VAR 0 4
46446: PUSH
46447: DOUBLE
46448: LD_INT 1
46450: DEC
46451: ST_TO_ADDR
46452: LD_VAR 0 1
46456: PUSH
46457: FOR_TO
46458: IFFALSE 46494
// if value = array [ i ] then
46460: LD_VAR 0 2
46464: PUSH
46465: LD_VAR 0 1
46469: PUSH
46470: LD_VAR 0 4
46474: ARRAY
46475: EQUAL
46476: IFFALSE 46492
// begin result := i ;
46478: LD_ADDR_VAR 0 3
46482: PUSH
46483: LD_VAR 0 4
46487: ST_TO_ADDR
// exit ;
46488: POP
46489: POP
46490: GO 46496
// end ;
46492: GO 46457
46494: POP
46495: POP
// end ;
46496: LD_VAR 0 3
46500: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46501: LD_INT 0
46503: PPUSH
// vc_chassis := chassis ;
46504: LD_ADDR_OWVAR 37
46508: PUSH
46509: LD_VAR 0 1
46513: ST_TO_ADDR
// vc_engine := engine ;
46514: LD_ADDR_OWVAR 39
46518: PUSH
46519: LD_VAR 0 2
46523: ST_TO_ADDR
// vc_control := control ;
46524: LD_ADDR_OWVAR 38
46528: PUSH
46529: LD_VAR 0 3
46533: ST_TO_ADDR
// vc_weapon := weapon ;
46534: LD_ADDR_OWVAR 40
46538: PUSH
46539: LD_VAR 0 4
46543: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46544: LD_ADDR_OWVAR 41
46548: PUSH
46549: LD_VAR 0 5
46553: ST_TO_ADDR
// end ;
46554: LD_VAR 0 6
46558: RET
// export function WantPlant ( unit ) ; var task ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
// result := false ;
46563: LD_ADDR_VAR 0 2
46567: PUSH
46568: LD_INT 0
46570: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46571: LD_ADDR_VAR 0 3
46575: PUSH
46576: LD_VAR 0 1
46580: PPUSH
46581: CALL_OW 437
46585: ST_TO_ADDR
// if task then
46586: LD_VAR 0 3
46590: IFFALSE 46618
// if task [ 1 ] [ 1 ] = p then
46592: LD_VAR 0 3
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PUSH
46601: LD_INT 1
46603: ARRAY
46604: PUSH
46605: LD_STRING p
46607: EQUAL
46608: IFFALSE 46618
// result := true ;
46610: LD_ADDR_VAR 0 2
46614: PUSH
46615: LD_INT 1
46617: ST_TO_ADDR
// end ;
46618: LD_VAR 0 2
46622: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46623: LD_INT 0
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
// if pos < 1 then
46629: LD_VAR 0 2
46633: PUSH
46634: LD_INT 1
46636: LESS
46637: IFFALSE 46641
// exit ;
46639: GO 46944
// if pos = 1 then
46641: LD_VAR 0 2
46645: PUSH
46646: LD_INT 1
46648: EQUAL
46649: IFFALSE 46682
// result := Replace ( arr , pos [ 1 ] , value ) else
46651: LD_ADDR_VAR 0 4
46655: PUSH
46656: LD_VAR 0 1
46660: PPUSH
46661: LD_VAR 0 2
46665: PUSH
46666: LD_INT 1
46668: ARRAY
46669: PPUSH
46670: LD_VAR 0 3
46674: PPUSH
46675: CALL_OW 1
46679: ST_TO_ADDR
46680: GO 46944
// begin tmp := arr ;
46682: LD_ADDR_VAR 0 6
46686: PUSH
46687: LD_VAR 0 1
46691: ST_TO_ADDR
// s_arr := [ tmp ] ;
46692: LD_ADDR_VAR 0 7
46696: PUSH
46697: LD_VAR 0 6
46701: PUSH
46702: EMPTY
46703: LIST
46704: ST_TO_ADDR
// for i = 1 to pos - 1 do
46705: LD_ADDR_VAR 0 5
46709: PUSH
46710: DOUBLE
46711: LD_INT 1
46713: DEC
46714: ST_TO_ADDR
46715: LD_VAR 0 2
46719: PUSH
46720: LD_INT 1
46722: MINUS
46723: PUSH
46724: FOR_TO
46725: IFFALSE 46770
// begin tmp := tmp [ pos [ i ] ] ;
46727: LD_ADDR_VAR 0 6
46731: PUSH
46732: LD_VAR 0 6
46736: PUSH
46737: LD_VAR 0 2
46741: PUSH
46742: LD_VAR 0 5
46746: ARRAY
46747: ARRAY
46748: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46749: LD_ADDR_VAR 0 7
46753: PUSH
46754: LD_VAR 0 7
46758: PUSH
46759: LD_VAR 0 6
46763: PUSH
46764: EMPTY
46765: LIST
46766: ADD
46767: ST_TO_ADDR
// end ;
46768: GO 46724
46770: POP
46771: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46772: LD_ADDR_VAR 0 6
46776: PUSH
46777: LD_VAR 0 6
46781: PPUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_VAR 0 2
46791: ARRAY
46792: PPUSH
46793: LD_VAR 0 3
46797: PPUSH
46798: CALL_OW 1
46802: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46803: LD_ADDR_VAR 0 7
46807: PUSH
46808: LD_VAR 0 7
46812: PPUSH
46813: LD_VAR 0 7
46817: PPUSH
46818: LD_VAR 0 6
46822: PPUSH
46823: CALL_OW 1
46827: ST_TO_ADDR
// for i = s_arr downto 2 do
46828: LD_ADDR_VAR 0 5
46832: PUSH
46833: DOUBLE
46834: LD_VAR 0 7
46838: INC
46839: ST_TO_ADDR
46840: LD_INT 2
46842: PUSH
46843: FOR_DOWNTO
46844: IFFALSE 46928
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46846: LD_ADDR_VAR 0 6
46850: PUSH
46851: LD_VAR 0 7
46855: PUSH
46856: LD_VAR 0 5
46860: PUSH
46861: LD_INT 1
46863: MINUS
46864: ARRAY
46865: PPUSH
46866: LD_VAR 0 2
46870: PUSH
46871: LD_VAR 0 5
46875: PUSH
46876: LD_INT 1
46878: MINUS
46879: ARRAY
46880: PPUSH
46881: LD_VAR 0 7
46885: PUSH
46886: LD_VAR 0 5
46890: ARRAY
46891: PPUSH
46892: CALL_OW 1
46896: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46897: LD_ADDR_VAR 0 7
46901: PUSH
46902: LD_VAR 0 7
46906: PPUSH
46907: LD_VAR 0 5
46911: PUSH
46912: LD_INT 1
46914: MINUS
46915: PPUSH
46916: LD_VAR 0 6
46920: PPUSH
46921: CALL_OW 1
46925: ST_TO_ADDR
// end ;
46926: GO 46843
46928: POP
46929: POP
// result := s_arr [ 1 ] ;
46930: LD_ADDR_VAR 0 4
46934: PUSH
46935: LD_VAR 0 7
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: ST_TO_ADDR
// end ; end ;
46944: LD_VAR 0 4
46948: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46949: LD_INT 0
46951: PPUSH
46952: PPUSH
// if not list then
46953: LD_VAR 0 1
46957: NOT
46958: IFFALSE 46962
// exit ;
46960: GO 47053
// i := list [ pos1 ] ;
46962: LD_ADDR_VAR 0 5
46966: PUSH
46967: LD_VAR 0 1
46971: PUSH
46972: LD_VAR 0 2
46976: ARRAY
46977: ST_TO_ADDR
// if not i then
46978: LD_VAR 0 5
46982: NOT
46983: IFFALSE 46987
// exit ;
46985: GO 47053
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46987: LD_ADDR_VAR 0 1
46991: PUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: LD_VAR 0 2
47001: PPUSH
47002: LD_VAR 0 1
47006: PUSH
47007: LD_VAR 0 3
47011: ARRAY
47012: PPUSH
47013: CALL_OW 1
47017: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47018: LD_ADDR_VAR 0 1
47022: PUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: LD_VAR 0 3
47032: PPUSH
47033: LD_VAR 0 5
47037: PPUSH
47038: CALL_OW 1
47042: ST_TO_ADDR
// result := list ;
47043: LD_ADDR_VAR 0 4
47047: PUSH
47048: LD_VAR 0 1
47052: ST_TO_ADDR
// end ;
47053: LD_VAR 0 4
47057: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47058: LD_INT 0
47060: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47061: LD_ADDR_VAR 0 5
47065: PUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 250
47075: PPUSH
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 251
47085: PPUSH
47086: LD_VAR 0 2
47090: PPUSH
47091: LD_VAR 0 3
47095: PPUSH
47096: LD_VAR 0 4
47100: PPUSH
47101: CALL 47111 0 5
47105: ST_TO_ADDR
// end ;
47106: LD_VAR 0 5
47110: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
// if not list then
47117: LD_VAR 0 3
47121: NOT
47122: IFFALSE 47126
// exit ;
47124: GO 47514
// result := [ ] ;
47126: LD_ADDR_VAR 0 6
47130: PUSH
47131: EMPTY
47132: ST_TO_ADDR
// for i in list do
47133: LD_ADDR_VAR 0 7
47137: PUSH
47138: LD_VAR 0 3
47142: PUSH
47143: FOR_IN
47144: IFFALSE 47346
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47146: LD_ADDR_VAR 0 9
47150: PUSH
47151: LD_VAR 0 7
47155: PPUSH
47156: LD_VAR 0 1
47160: PPUSH
47161: LD_VAR 0 2
47165: PPUSH
47166: CALL_OW 297
47170: ST_TO_ADDR
// if not result then
47171: LD_VAR 0 6
47175: NOT
47176: IFFALSE 47202
// result := [ [ i , tmp ] ] else
47178: LD_ADDR_VAR 0 6
47182: PUSH
47183: LD_VAR 0 7
47187: PUSH
47188: LD_VAR 0 9
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: EMPTY
47198: LIST
47199: ST_TO_ADDR
47200: GO 47344
// begin if result [ result ] [ 2 ] < tmp then
47202: LD_VAR 0 6
47206: PUSH
47207: LD_VAR 0 6
47211: ARRAY
47212: PUSH
47213: LD_INT 2
47215: ARRAY
47216: PUSH
47217: LD_VAR 0 9
47221: LESS
47222: IFFALSE 47264
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47224: LD_ADDR_VAR 0 6
47228: PUSH
47229: LD_VAR 0 6
47233: PPUSH
47234: LD_VAR 0 6
47238: PUSH
47239: LD_INT 1
47241: PLUS
47242: PPUSH
47243: LD_VAR 0 7
47247: PUSH
47248: LD_VAR 0 9
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PPUSH
47257: CALL_OW 2
47261: ST_TO_ADDR
47262: GO 47344
// for j = 1 to result do
47264: LD_ADDR_VAR 0 8
47268: PUSH
47269: DOUBLE
47270: LD_INT 1
47272: DEC
47273: ST_TO_ADDR
47274: LD_VAR 0 6
47278: PUSH
47279: FOR_TO
47280: IFFALSE 47342
// begin if tmp < result [ j ] [ 2 ] then
47282: LD_VAR 0 9
47286: PUSH
47287: LD_VAR 0 6
47291: PUSH
47292: LD_VAR 0 8
47296: ARRAY
47297: PUSH
47298: LD_INT 2
47300: ARRAY
47301: LESS
47302: IFFALSE 47340
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47304: LD_ADDR_VAR 0 6
47308: PUSH
47309: LD_VAR 0 6
47313: PPUSH
47314: LD_VAR 0 8
47318: PPUSH
47319: LD_VAR 0 7
47323: PUSH
47324: LD_VAR 0 9
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PPUSH
47333: CALL_OW 2
47337: ST_TO_ADDR
// break ;
47338: GO 47342
// end ; end ;
47340: GO 47279
47342: POP
47343: POP
// end ; end ;
47344: GO 47143
47346: POP
47347: POP
// if result and not asc then
47348: LD_VAR 0 6
47352: PUSH
47353: LD_VAR 0 4
47357: NOT
47358: AND
47359: IFFALSE 47434
// begin tmp := result ;
47361: LD_ADDR_VAR 0 9
47365: PUSH
47366: LD_VAR 0 6
47370: ST_TO_ADDR
// for i = tmp downto 1 do
47371: LD_ADDR_VAR 0 7
47375: PUSH
47376: DOUBLE
47377: LD_VAR 0 9
47381: INC
47382: ST_TO_ADDR
47383: LD_INT 1
47385: PUSH
47386: FOR_DOWNTO
47387: IFFALSE 47432
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47389: LD_ADDR_VAR 0 6
47393: PUSH
47394: LD_VAR 0 6
47398: PPUSH
47399: LD_VAR 0 9
47403: PUSH
47404: LD_VAR 0 7
47408: MINUS
47409: PUSH
47410: LD_INT 1
47412: PLUS
47413: PPUSH
47414: LD_VAR 0 9
47418: PUSH
47419: LD_VAR 0 7
47423: ARRAY
47424: PPUSH
47425: CALL_OW 1
47429: ST_TO_ADDR
47430: GO 47386
47432: POP
47433: POP
// end ; tmp := [ ] ;
47434: LD_ADDR_VAR 0 9
47438: PUSH
47439: EMPTY
47440: ST_TO_ADDR
// if mode then
47441: LD_VAR 0 5
47445: IFFALSE 47514
// begin for i = 1 to result do
47447: LD_ADDR_VAR 0 7
47451: PUSH
47452: DOUBLE
47453: LD_INT 1
47455: DEC
47456: ST_TO_ADDR
47457: LD_VAR 0 6
47461: PUSH
47462: FOR_TO
47463: IFFALSE 47502
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47465: LD_ADDR_VAR 0 9
47469: PUSH
47470: LD_VAR 0 9
47474: PPUSH
47475: LD_VAR 0 7
47479: PPUSH
47480: LD_VAR 0 6
47484: PUSH
47485: LD_VAR 0 7
47489: ARRAY
47490: PUSH
47491: LD_INT 1
47493: ARRAY
47494: PPUSH
47495: CALL_OW 1
47499: ST_TO_ADDR
47500: GO 47462
47502: POP
47503: POP
// result := tmp ;
47504: LD_ADDR_VAR 0 6
47508: PUSH
47509: LD_VAR 0 9
47513: ST_TO_ADDR
// end ; end ;
47514: LD_VAR 0 6
47518: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47519: LD_INT 0
47521: PPUSH
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: ST_TO_ADDR
// if not x or not y then
47549: LD_VAR 0 2
47553: NOT
47554: PUSH
47555: LD_VAR 0 3
47559: NOT
47560: OR
47561: IFFALSE 47565
// exit ;
47563: GO 49217
// if not range then
47565: LD_VAR 0 4
47569: NOT
47570: IFFALSE 47580
// range := 10 ;
47572: LD_ADDR_VAR 0 4
47576: PUSH
47577: LD_INT 10
47579: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47580: LD_ADDR_VAR 0 8
47584: PUSH
47585: LD_INT 81
47587: PUSH
47588: LD_VAR 0 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 92
47599: PUSH
47600: LD_VAR 0 2
47604: PUSH
47605: LD_VAR 0 3
47609: PUSH
47610: LD_VAR 0 4
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 21
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: PPUSH
47643: CALL_OW 69
47647: ST_TO_ADDR
// if not tmp then
47648: LD_VAR 0 8
47652: NOT
47653: IFFALSE 47657
// exit ;
47655: GO 49217
// for i in tmp do
47657: LD_ADDR_VAR 0 6
47661: PUSH
47662: LD_VAR 0 8
47666: PUSH
47667: FOR_IN
47668: IFFALSE 49192
// begin points := [ 0 , 0 , 0 ] ;
47670: LD_ADDR_VAR 0 9
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// bpoints := 1 ;
47689: LD_ADDR_VAR 0 10
47693: PUSH
47694: LD_INT 1
47696: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 247
47706: PUSH
47707: LD_INT 1
47709: DOUBLE
47710: EQUAL
47711: IFTRUE 47715
47713: GO 48293
47715: POP
// begin if GetClass ( i ) = 1 then
47716: LD_VAR 0 6
47720: PPUSH
47721: CALL_OW 257
47725: PUSH
47726: LD_INT 1
47728: EQUAL
47729: IFFALSE 47750
// points := [ 10 , 5 , 3 ] ;
47731: LD_ADDR_VAR 0 9
47735: PUSH
47736: LD_INT 10
47738: PUSH
47739: LD_INT 5
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47750: LD_VAR 0 6
47754: PPUSH
47755: CALL_OW 257
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: LD_INT 4
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: IN
47774: IFFALSE 47795
// points := [ 3 , 2 , 1 ] ;
47776: LD_ADDR_VAR 0 9
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47795: LD_VAR 0 6
47799: PPUSH
47800: CALL_OW 257
47804: PUSH
47805: LD_INT 5
47807: EQUAL
47808: IFFALSE 47829
// points := [ 130 , 5 , 2 ] ;
47810: LD_ADDR_VAR 0 9
47814: PUSH
47815: LD_INT 130
47817: PUSH
47818: LD_INT 5
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47829: LD_VAR 0 6
47833: PPUSH
47834: CALL_OW 257
47838: PUSH
47839: LD_INT 8
47841: EQUAL
47842: IFFALSE 47863
// points := [ 35 , 35 , 30 ] ;
47844: LD_ADDR_VAR 0 9
47848: PUSH
47849: LD_INT 35
47851: PUSH
47852: LD_INT 35
47854: PUSH
47855: LD_INT 30
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47863: LD_VAR 0 6
47867: PPUSH
47868: CALL_OW 257
47872: PUSH
47873: LD_INT 9
47875: EQUAL
47876: IFFALSE 47897
// points := [ 20 , 55 , 40 ] ;
47878: LD_ADDR_VAR 0 9
47882: PUSH
47883: LD_INT 20
47885: PUSH
47886: LD_INT 55
47888: PUSH
47889: LD_INT 40
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47897: LD_VAR 0 6
47901: PPUSH
47902: CALL_OW 257
47906: PUSH
47907: LD_INT 12
47909: PUSH
47910: LD_INT 16
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: IN
47917: IFFALSE 47938
// points := [ 5 , 3 , 2 ] ;
47919: LD_ADDR_VAR 0 9
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47938: LD_VAR 0 6
47942: PPUSH
47943: CALL_OW 257
47947: PUSH
47948: LD_INT 17
47950: EQUAL
47951: IFFALSE 47972
// points := [ 100 , 50 , 75 ] ;
47953: LD_ADDR_VAR 0 9
47957: PUSH
47958: LD_INT 100
47960: PUSH
47961: LD_INT 50
47963: PUSH
47964: LD_INT 75
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47972: LD_VAR 0 6
47976: PPUSH
47977: CALL_OW 257
47981: PUSH
47982: LD_INT 15
47984: EQUAL
47985: IFFALSE 48006
// points := [ 10 , 5 , 3 ] ;
47987: LD_ADDR_VAR 0 9
47991: PUSH
47992: LD_INT 10
47994: PUSH
47995: LD_INT 5
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48006: LD_VAR 0 6
48010: PPUSH
48011: CALL_OW 257
48015: PUSH
48016: LD_INT 14
48018: EQUAL
48019: IFFALSE 48040
// points := [ 10 , 0 , 0 ] ;
48021: LD_ADDR_VAR 0 9
48025: PUSH
48026: LD_INT 10
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48040: LD_VAR 0 6
48044: PPUSH
48045: CALL_OW 257
48049: PUSH
48050: LD_INT 11
48052: EQUAL
48053: IFFALSE 48074
// points := [ 30 , 10 , 5 ] ;
48055: LD_ADDR_VAR 0 9
48059: PUSH
48060: LD_INT 30
48062: PUSH
48063: LD_INT 10
48065: PUSH
48066: LD_INT 5
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48074: LD_VAR 0 1
48078: PPUSH
48079: LD_INT 5
48081: PPUSH
48082: CALL_OW 321
48086: PUSH
48087: LD_INT 2
48089: EQUAL
48090: IFFALSE 48107
// bpoints := bpoints * 1.8 ;
48092: LD_ADDR_VAR 0 10
48096: PUSH
48097: LD_VAR 0 10
48101: PUSH
48102: LD_REAL  1.80000000000000E+0000
48105: MUL
48106: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48107: LD_VAR 0 6
48111: PPUSH
48112: CALL_OW 257
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 4
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: IN
48135: PUSH
48136: LD_VAR 0 1
48140: PPUSH
48141: LD_INT 51
48143: PPUSH
48144: CALL_OW 321
48148: PUSH
48149: LD_INT 2
48151: EQUAL
48152: AND
48153: IFFALSE 48170
// bpoints := bpoints * 1.2 ;
48155: LD_ADDR_VAR 0 10
48159: PUSH
48160: LD_VAR 0 10
48164: PUSH
48165: LD_REAL  1.20000000000000E+0000
48168: MUL
48169: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48170: LD_VAR 0 6
48174: PPUSH
48175: CALL_OW 257
48179: PUSH
48180: LD_INT 5
48182: PUSH
48183: LD_INT 7
48185: PUSH
48186: LD_INT 9
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: IN
48194: PUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: LD_INT 52
48202: PPUSH
48203: CALL_OW 321
48207: PUSH
48208: LD_INT 2
48210: EQUAL
48211: AND
48212: IFFALSE 48229
// bpoints := bpoints * 1.5 ;
48214: LD_ADDR_VAR 0 10
48218: PUSH
48219: LD_VAR 0 10
48223: PUSH
48224: LD_REAL  1.50000000000000E+0000
48227: MUL
48228: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48229: LD_VAR 0 1
48233: PPUSH
48234: LD_INT 66
48236: PPUSH
48237: CALL_OW 321
48241: PUSH
48242: LD_INT 2
48244: EQUAL
48245: IFFALSE 48262
// bpoints := bpoints * 1.1 ;
48247: LD_ADDR_VAR 0 10
48251: PUSH
48252: LD_VAR 0 10
48256: PUSH
48257: LD_REAL  1.10000000000000E+0000
48260: MUL
48261: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48262: LD_ADDR_VAR 0 10
48266: PUSH
48267: LD_VAR 0 10
48271: PUSH
48272: LD_VAR 0 6
48276: PPUSH
48277: LD_INT 1
48279: PPUSH
48280: CALL_OW 259
48284: PUSH
48285: LD_REAL  1.15000000000000E+0000
48288: MUL
48289: MUL
48290: ST_TO_ADDR
// end ; unit_vehicle :
48291: GO 49121
48293: LD_INT 2
48295: DOUBLE
48296: EQUAL
48297: IFTRUE 48301
48299: GO 49109
48301: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48302: LD_VAR 0 6
48306: PPUSH
48307: CALL_OW 264
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 42
48317: PUSH
48318: LD_INT 24
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: IN
48326: IFFALSE 48347
// points := [ 25 , 5 , 3 ] ;
48328: LD_ADDR_VAR 0 9
48332: PUSH
48333: LD_INT 25
48335: PUSH
48336: LD_INT 5
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48347: LD_VAR 0 6
48351: PPUSH
48352: CALL_OW 264
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: LD_INT 43
48362: PUSH
48363: LD_INT 25
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: IN
48371: IFFALSE 48392
// points := [ 40 , 15 , 5 ] ;
48373: LD_ADDR_VAR 0 9
48377: PUSH
48378: LD_INT 40
48380: PUSH
48381: LD_INT 15
48383: PUSH
48384: LD_INT 5
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48392: LD_VAR 0 6
48396: PPUSH
48397: CALL_OW 264
48401: PUSH
48402: LD_INT 3
48404: PUSH
48405: LD_INT 23
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: IN
48412: IFFALSE 48433
// points := [ 7 , 25 , 8 ] ;
48414: LD_ADDR_VAR 0 9
48418: PUSH
48419: LD_INT 7
48421: PUSH
48422: LD_INT 25
48424: PUSH
48425: LD_INT 8
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48433: LD_VAR 0 6
48437: PPUSH
48438: CALL_OW 264
48442: PUSH
48443: LD_INT 5
48445: PUSH
48446: LD_INT 27
48448: PUSH
48449: LD_INT 44
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: IN
48457: IFFALSE 48478
// points := [ 14 , 50 , 16 ] ;
48459: LD_ADDR_VAR 0 9
48463: PUSH
48464: LD_INT 14
48466: PUSH
48467: LD_INT 50
48469: PUSH
48470: LD_INT 16
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48478: LD_VAR 0 6
48482: PPUSH
48483: CALL_OW 264
48487: PUSH
48488: LD_INT 6
48490: PUSH
48491: LD_INT 46
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: IN
48498: IFFALSE 48519
// points := [ 32 , 120 , 70 ] ;
48500: LD_ADDR_VAR 0 9
48504: PUSH
48505: LD_INT 32
48507: PUSH
48508: LD_INT 120
48510: PUSH
48511: LD_INT 70
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48519: LD_VAR 0 6
48523: PPUSH
48524: CALL_OW 264
48528: PUSH
48529: LD_INT 7
48531: PUSH
48532: LD_INT 28
48534: PUSH
48535: LD_INT 45
48537: PUSH
48538: LD_EXP 56
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: IN
48549: IFFALSE 48570
// points := [ 35 , 20 , 45 ] ;
48551: LD_ADDR_VAR 0 9
48555: PUSH
48556: LD_INT 35
48558: PUSH
48559: LD_INT 20
48561: PUSH
48562: LD_INT 45
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48570: LD_VAR 0 6
48574: PPUSH
48575: CALL_OW 264
48579: PUSH
48580: LD_INT 47
48582: PUSH
48583: EMPTY
48584: LIST
48585: IN
48586: IFFALSE 48607
// points := [ 67 , 45 , 75 ] ;
48588: LD_ADDR_VAR 0 9
48592: PUSH
48593: LD_INT 67
48595: PUSH
48596: LD_INT 45
48598: PUSH
48599: LD_INT 75
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48607: LD_VAR 0 6
48611: PPUSH
48612: CALL_OW 264
48616: PUSH
48617: LD_INT 26
48619: PUSH
48620: EMPTY
48621: LIST
48622: IN
48623: IFFALSE 48644
// points := [ 120 , 30 , 80 ] ;
48625: LD_ADDR_VAR 0 9
48629: PUSH
48630: LD_INT 120
48632: PUSH
48633: LD_INT 30
48635: PUSH
48636: LD_INT 80
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_INT 22
48656: PUSH
48657: EMPTY
48658: LIST
48659: IN
48660: IFFALSE 48681
// points := [ 40 , 1 , 1 ] ;
48662: LD_ADDR_VAR 0 9
48666: PUSH
48667: LD_INT 40
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48681: LD_VAR 0 6
48685: PPUSH
48686: CALL_OW 264
48690: PUSH
48691: LD_INT 29
48693: PUSH
48694: EMPTY
48695: LIST
48696: IN
48697: IFFALSE 48718
// points := [ 70 , 200 , 400 ] ;
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: LD_INT 70
48706: PUSH
48707: LD_INT 200
48709: PUSH
48710: LD_INT 400
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48718: LD_VAR 0 6
48722: PPUSH
48723: CALL_OW 264
48727: PUSH
48728: LD_INT 14
48730: PUSH
48731: LD_INT 53
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: IN
48738: IFFALSE 48759
// points := [ 40 , 10 , 20 ] ;
48740: LD_ADDR_VAR 0 9
48744: PUSH
48745: LD_INT 40
48747: PUSH
48748: LD_INT 10
48750: PUSH
48751: LD_INT 20
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48759: LD_VAR 0 6
48763: PPUSH
48764: CALL_OW 264
48768: PUSH
48769: LD_INT 9
48771: PUSH
48772: EMPTY
48773: LIST
48774: IN
48775: IFFALSE 48796
// points := [ 5 , 70 , 20 ] ;
48777: LD_ADDR_VAR 0 9
48781: PUSH
48782: LD_INT 5
48784: PUSH
48785: LD_INT 70
48787: PUSH
48788: LD_INT 20
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48796: LD_VAR 0 6
48800: PPUSH
48801: CALL_OW 264
48805: PUSH
48806: LD_INT 10
48808: PUSH
48809: EMPTY
48810: LIST
48811: IN
48812: IFFALSE 48833
// points := [ 35 , 110 , 70 ] ;
48814: LD_ADDR_VAR 0 9
48818: PUSH
48819: LD_INT 35
48821: PUSH
48822: LD_INT 110
48824: PUSH
48825: LD_INT 70
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48833: LD_VAR 0 6
48837: PPUSH
48838: CALL_OW 265
48842: PUSH
48843: LD_INT 25
48845: EQUAL
48846: IFFALSE 48867
// points := [ 80 , 65 , 100 ] ;
48848: LD_ADDR_VAR 0 9
48852: PUSH
48853: LD_INT 80
48855: PUSH
48856: LD_INT 65
48858: PUSH
48859: LD_INT 100
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48867: LD_VAR 0 6
48871: PPUSH
48872: CALL_OW 263
48876: PUSH
48877: LD_INT 1
48879: EQUAL
48880: IFFALSE 48915
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48882: LD_ADDR_VAR 0 10
48886: PUSH
48887: LD_VAR 0 10
48891: PUSH
48892: LD_VAR 0 6
48896: PPUSH
48897: CALL_OW 311
48901: PPUSH
48902: LD_INT 3
48904: PPUSH
48905: CALL_OW 259
48909: PUSH
48910: LD_INT 4
48912: MUL
48913: MUL
48914: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48915: LD_VAR 0 6
48919: PPUSH
48920: CALL_OW 263
48924: PUSH
48925: LD_INT 2
48927: EQUAL
48928: IFFALSE 48979
// begin j := IsControledBy ( i ) ;
48930: LD_ADDR_VAR 0 7
48934: PUSH
48935: LD_VAR 0 6
48939: PPUSH
48940: CALL_OW 312
48944: ST_TO_ADDR
// if j then
48945: LD_VAR 0 7
48949: IFFALSE 48979
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48951: LD_ADDR_VAR 0 10
48955: PUSH
48956: LD_VAR 0 10
48960: PUSH
48961: LD_VAR 0 7
48965: PPUSH
48966: LD_INT 3
48968: PPUSH
48969: CALL_OW 259
48973: PUSH
48974: LD_INT 3
48976: MUL
48977: MUL
48978: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48979: LD_VAR 0 6
48983: PPUSH
48984: CALL_OW 264
48988: PUSH
48989: LD_INT 5
48991: PUSH
48992: LD_INT 6
48994: PUSH
48995: LD_INT 46
48997: PUSH
48998: LD_INT 44
49000: PUSH
49001: LD_INT 47
49003: PUSH
49004: LD_INT 45
49006: PUSH
49007: LD_INT 28
49009: PUSH
49010: LD_INT 7
49012: PUSH
49013: LD_INT 27
49015: PUSH
49016: LD_INT 29
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: IN
49031: PUSH
49032: LD_VAR 0 1
49036: PPUSH
49037: LD_INT 52
49039: PPUSH
49040: CALL_OW 321
49044: PUSH
49045: LD_INT 2
49047: EQUAL
49048: AND
49049: IFFALSE 49066
// bpoints := bpoints * 1.2 ;
49051: LD_ADDR_VAR 0 10
49055: PUSH
49056: LD_VAR 0 10
49060: PUSH
49061: LD_REAL  1.20000000000000E+0000
49064: MUL
49065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49066: LD_VAR 0 6
49070: PPUSH
49071: CALL_OW 264
49075: PUSH
49076: LD_INT 6
49078: PUSH
49079: LD_INT 46
49081: PUSH
49082: LD_INT 47
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: IN
49090: IFFALSE 49107
// bpoints := bpoints * 1.2 ;
49092: LD_ADDR_VAR 0 10
49096: PUSH
49097: LD_VAR 0 10
49101: PUSH
49102: LD_REAL  1.20000000000000E+0000
49105: MUL
49106: ST_TO_ADDR
// end ; unit_building :
49107: GO 49121
49109: LD_INT 3
49111: DOUBLE
49112: EQUAL
49113: IFTRUE 49117
49115: GO 49120
49117: POP
// ; end ;
49118: GO 49121
49120: POP
// for j = 1 to 3 do
49121: LD_ADDR_VAR 0 7
49125: PUSH
49126: DOUBLE
49127: LD_INT 1
49129: DEC
49130: ST_TO_ADDR
49131: LD_INT 3
49133: PUSH
49134: FOR_TO
49135: IFFALSE 49188
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49137: LD_ADDR_VAR 0 5
49141: PUSH
49142: LD_VAR 0 5
49146: PPUSH
49147: LD_VAR 0 7
49151: PPUSH
49152: LD_VAR 0 5
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PUSH
49163: LD_VAR 0 9
49167: PUSH
49168: LD_VAR 0 7
49172: ARRAY
49173: PUSH
49174: LD_VAR 0 10
49178: MUL
49179: PLUS
49180: PPUSH
49181: CALL_OW 1
49185: ST_TO_ADDR
49186: GO 49134
49188: POP
49189: POP
// end ;
49190: GO 47667
49192: POP
49193: POP
// result := Replace ( result , 4 , tmp ) ;
49194: LD_ADDR_VAR 0 5
49198: PUSH
49199: LD_VAR 0 5
49203: PPUSH
49204: LD_INT 4
49206: PPUSH
49207: LD_VAR 0 8
49211: PPUSH
49212: CALL_OW 1
49216: ST_TO_ADDR
// end ;
49217: LD_VAR 0 5
49221: RET
// export function DangerAtRange ( unit , range ) ; begin
49222: LD_INT 0
49224: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49225: LD_ADDR_VAR 0 3
49229: PUSH
49230: LD_VAR 0 1
49234: PPUSH
49235: CALL_OW 255
49239: PPUSH
49240: LD_VAR 0 1
49244: PPUSH
49245: CALL_OW 250
49249: PPUSH
49250: LD_VAR 0 1
49254: PPUSH
49255: CALL_OW 251
49259: PPUSH
49260: LD_VAR 0 2
49264: PPUSH
49265: CALL 47519 0 4
49269: ST_TO_ADDR
// end ;
49270: LD_VAR 0 3
49274: RET
// export function DangerInArea ( side , area ) ; begin
49275: LD_INT 0
49277: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49278: LD_ADDR_VAR 0 3
49282: PUSH
49283: LD_VAR 0 2
49287: PPUSH
49288: LD_INT 81
49290: PUSH
49291: LD_VAR 0 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PPUSH
49300: CALL_OW 70
49304: ST_TO_ADDR
// end ;
49305: LD_VAR 0 3
49309: RET
// export function IsExtension ( b ) ; begin
49310: LD_INT 0
49312: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49313: LD_ADDR_VAR 0 2
49317: PUSH
49318: LD_VAR 0 1
49322: PUSH
49323: LD_INT 23
49325: PUSH
49326: LD_INT 20
49328: PUSH
49329: LD_INT 22
49331: PUSH
49332: LD_INT 17
49334: PUSH
49335: LD_INT 24
49337: PUSH
49338: LD_INT 21
49340: PUSH
49341: LD_INT 19
49343: PUSH
49344: LD_INT 16
49346: PUSH
49347: LD_INT 25
49349: PUSH
49350: LD_INT 18
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: IN
49365: ST_TO_ADDR
// end ;
49366: LD_VAR 0 2
49370: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49371: LD_INT 0
49373: PPUSH
49374: PPUSH
49375: PPUSH
// result := [ ] ;
49376: LD_ADDR_VAR 0 4
49380: PUSH
49381: EMPTY
49382: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49383: LD_ADDR_VAR 0 5
49387: PUSH
49388: LD_VAR 0 2
49392: PPUSH
49393: LD_INT 21
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PPUSH
49403: CALL_OW 70
49407: ST_TO_ADDR
// if not tmp then
49408: LD_VAR 0 5
49412: NOT
49413: IFFALSE 49417
// exit ;
49415: GO 49481
// if checkLink then
49417: LD_VAR 0 3
49421: IFFALSE 49471
// begin for i in tmp do
49423: LD_ADDR_VAR 0 6
49427: PUSH
49428: LD_VAR 0 5
49432: PUSH
49433: FOR_IN
49434: IFFALSE 49469
// if GetBase ( i ) <> base then
49436: LD_VAR 0 6
49440: PPUSH
49441: CALL_OW 274
49445: PUSH
49446: LD_VAR 0 1
49450: NONEQUAL
49451: IFFALSE 49467
// ComLinkToBase ( base , i ) ;
49453: LD_VAR 0 1
49457: PPUSH
49458: LD_VAR 0 6
49462: PPUSH
49463: CALL_OW 169
49467: GO 49433
49469: POP
49470: POP
// end ; result := tmp ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_VAR 0 5
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 4
49485: RET
// export function ComComplete ( units , b ) ; var i ; begin
49486: LD_INT 0
49488: PPUSH
49489: PPUSH
// if not units then
49490: LD_VAR 0 1
49494: NOT
49495: IFFALSE 49499
// exit ;
49497: GO 49589
// for i in units do
49499: LD_ADDR_VAR 0 4
49503: PUSH
49504: LD_VAR 0 1
49508: PUSH
49509: FOR_IN
49510: IFFALSE 49587
// if BuildingStatus ( b ) = bs_build then
49512: LD_VAR 0 2
49516: PPUSH
49517: CALL_OW 461
49521: PUSH
49522: LD_INT 1
49524: EQUAL
49525: IFFALSE 49585
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49527: LD_VAR 0 4
49531: PPUSH
49532: LD_STRING h
49534: PUSH
49535: LD_VAR 0 2
49539: PPUSH
49540: CALL_OW 250
49544: PUSH
49545: LD_VAR 0 2
49549: PPUSH
49550: CALL_OW 251
49554: PUSH
49555: LD_VAR 0 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: PPUSH
49581: CALL_OW 446
49585: GO 49509
49587: POP
49588: POP
// end ;
49589: LD_VAR 0 3
49593: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49594: LD_INT 0
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49602: LD_VAR 0 1
49606: NOT
49607: PUSH
49608: LD_VAR 0 1
49612: PPUSH
49613: CALL_OW 263
49617: PUSH
49618: LD_INT 2
49620: NONEQUAL
49621: OR
49622: IFFALSE 49626
// exit ;
49624: GO 49942
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49626: LD_ADDR_VAR 0 6
49630: PUSH
49631: LD_INT 22
49633: PUSH
49634: LD_VAR 0 1
49638: PPUSH
49639: CALL_OW 255
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 30
49653: PUSH
49654: LD_INT 36
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 34
49663: PUSH
49664: LD_INT 31
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PPUSH
49680: CALL_OW 69
49684: ST_TO_ADDR
// if not tmp then
49685: LD_VAR 0 6
49689: NOT
49690: IFFALSE 49694
// exit ;
49692: GO 49942
// result := [ ] ;
49694: LD_ADDR_VAR 0 2
49698: PUSH
49699: EMPTY
49700: ST_TO_ADDR
// for i in tmp do
49701: LD_ADDR_VAR 0 3
49705: PUSH
49706: LD_VAR 0 6
49710: PUSH
49711: FOR_IN
49712: IFFALSE 49783
// begin t := UnitsInside ( i ) ;
49714: LD_ADDR_VAR 0 4
49718: PUSH
49719: LD_VAR 0 3
49723: PPUSH
49724: CALL_OW 313
49728: ST_TO_ADDR
// if t then
49729: LD_VAR 0 4
49733: IFFALSE 49781
// for j in t do
49735: LD_ADDR_VAR 0 7
49739: PUSH
49740: LD_VAR 0 4
49744: PUSH
49745: FOR_IN
49746: IFFALSE 49779
// result := Replace ( result , result + 1 , j ) ;
49748: LD_ADDR_VAR 0 2
49752: PUSH
49753: LD_VAR 0 2
49757: PPUSH
49758: LD_VAR 0 2
49762: PUSH
49763: LD_INT 1
49765: PLUS
49766: PPUSH
49767: LD_VAR 0 7
49771: PPUSH
49772: CALL_OW 1
49776: ST_TO_ADDR
49777: GO 49745
49779: POP
49780: POP
// end ;
49781: GO 49711
49783: POP
49784: POP
// if not result then
49785: LD_VAR 0 2
49789: NOT
49790: IFFALSE 49794
// exit ;
49792: GO 49942
// mech := result [ 1 ] ;
49794: LD_ADDR_VAR 0 5
49798: PUSH
49799: LD_VAR 0 2
49803: PUSH
49804: LD_INT 1
49806: ARRAY
49807: ST_TO_ADDR
// if result > 1 then
49808: LD_VAR 0 2
49812: PUSH
49813: LD_INT 1
49815: GREATER
49816: IFFALSE 49928
// begin for i = 2 to result do
49818: LD_ADDR_VAR 0 3
49822: PUSH
49823: DOUBLE
49824: LD_INT 2
49826: DEC
49827: ST_TO_ADDR
49828: LD_VAR 0 2
49832: PUSH
49833: FOR_TO
49834: IFFALSE 49926
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49836: LD_ADDR_VAR 0 4
49840: PUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_VAR 0 3
49850: ARRAY
49851: PPUSH
49852: LD_INT 3
49854: PPUSH
49855: CALL_OW 259
49859: PUSH
49860: LD_VAR 0 2
49864: PUSH
49865: LD_VAR 0 3
49869: ARRAY
49870: PPUSH
49871: CALL_OW 432
49875: MINUS
49876: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49877: LD_VAR 0 4
49881: PUSH
49882: LD_VAR 0 5
49886: PPUSH
49887: LD_INT 3
49889: PPUSH
49890: CALL_OW 259
49894: PUSH
49895: LD_VAR 0 5
49899: PPUSH
49900: CALL_OW 432
49904: MINUS
49905: GREATEREQUAL
49906: IFFALSE 49924
// mech := result [ i ] ;
49908: LD_ADDR_VAR 0 5
49912: PUSH
49913: LD_VAR 0 2
49917: PUSH
49918: LD_VAR 0 3
49922: ARRAY
49923: ST_TO_ADDR
// end ;
49924: GO 49833
49926: POP
49927: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49928: LD_VAR 0 1
49932: PPUSH
49933: LD_VAR 0 5
49937: PPUSH
49938: CALL_OW 135
// end ;
49942: LD_VAR 0 2
49946: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49947: LD_INT 0
49949: PPUSH
49950: PPUSH
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
49958: PPUSH
49959: PPUSH
49960: PPUSH
49961: PPUSH
// result := [ ] ;
49962: LD_ADDR_VAR 0 7
49966: PUSH
49967: EMPTY
49968: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49969: LD_VAR 0 1
49973: PPUSH
49974: CALL_OW 266
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: IN
49989: NOT
49990: IFFALSE 49994
// exit ;
49992: GO 51628
// if name then
49994: LD_VAR 0 3
49998: IFFALSE 50014
// SetBName ( base_dep , name ) ;
50000: LD_VAR 0 1
50004: PPUSH
50005: LD_VAR 0 3
50009: PPUSH
50010: CALL_OW 500
// base := GetBase ( base_dep ) ;
50014: LD_ADDR_VAR 0 15
50018: PUSH
50019: LD_VAR 0 1
50023: PPUSH
50024: CALL_OW 274
50028: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50029: LD_ADDR_VAR 0 16
50033: PUSH
50034: LD_VAR 0 1
50038: PPUSH
50039: CALL_OW 255
50043: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50044: LD_ADDR_VAR 0 17
50048: PUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: CALL_OW 248
50058: ST_TO_ADDR
// if sources then
50059: LD_VAR 0 5
50063: IFFALSE 50110
// for i = 1 to 3 do
50065: LD_ADDR_VAR 0 8
50069: PUSH
50070: DOUBLE
50071: LD_INT 1
50073: DEC
50074: ST_TO_ADDR
50075: LD_INT 3
50077: PUSH
50078: FOR_TO
50079: IFFALSE 50108
// AddResourceType ( base , i , sources [ i ] ) ;
50081: LD_VAR 0 15
50085: PPUSH
50086: LD_VAR 0 8
50090: PPUSH
50091: LD_VAR 0 5
50095: PUSH
50096: LD_VAR 0 8
50100: ARRAY
50101: PPUSH
50102: CALL_OW 276
50106: GO 50078
50108: POP
50109: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50110: LD_ADDR_VAR 0 18
50114: PUSH
50115: LD_VAR 0 15
50119: PPUSH
50120: LD_VAR 0 2
50124: PPUSH
50125: LD_INT 1
50127: PPUSH
50128: CALL 49371 0 3
50132: ST_TO_ADDR
// InitHc ;
50133: CALL_OW 19
// InitUc ;
50137: CALL_OW 18
// uc_side := side ;
50141: LD_ADDR_OWVAR 20
50145: PUSH
50146: LD_VAR 0 16
50150: ST_TO_ADDR
// uc_nation := nation ;
50151: LD_ADDR_OWVAR 21
50155: PUSH
50156: LD_VAR 0 17
50160: ST_TO_ADDR
// if buildings then
50161: LD_VAR 0 18
50165: IFFALSE 51487
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50167: LD_ADDR_VAR 0 19
50171: PUSH
50172: LD_VAR 0 18
50176: PPUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 30
50182: PUSH
50183: LD_INT 29
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 30
50192: PUSH
50193: LD_INT 30
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: PPUSH
50205: CALL_OW 72
50209: ST_TO_ADDR
// if tmp then
50210: LD_VAR 0 19
50214: IFFALSE 50262
// for i in tmp do
50216: LD_ADDR_VAR 0 8
50220: PUSH
50221: LD_VAR 0 19
50225: PUSH
50226: FOR_IN
50227: IFFALSE 50260
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50229: LD_VAR 0 8
50233: PPUSH
50234: CALL_OW 250
50238: PPUSH
50239: LD_VAR 0 8
50243: PPUSH
50244: CALL_OW 251
50248: PPUSH
50249: LD_VAR 0 16
50253: PPUSH
50254: CALL_OW 441
50258: GO 50226
50260: POP
50261: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50262: LD_VAR 0 18
50266: PPUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 30
50272: PUSH
50273: LD_INT 32
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: LD_INT 33
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: PPUSH
50295: CALL_OW 72
50299: IFFALSE 50387
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50301: LD_ADDR_VAR 0 8
50305: PUSH
50306: LD_VAR 0 18
50310: PPUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 30
50316: PUSH
50317: LD_INT 32
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 30
50326: PUSH
50327: LD_INT 33
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: PPUSH
50339: CALL_OW 72
50343: PUSH
50344: FOR_IN
50345: IFFALSE 50385
// begin if not GetBWeapon ( i ) then
50347: LD_VAR 0 8
50351: PPUSH
50352: CALL_OW 269
50356: NOT
50357: IFFALSE 50383
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50359: LD_VAR 0 8
50363: PPUSH
50364: LD_VAR 0 8
50368: PPUSH
50369: LD_VAR 0 2
50373: PPUSH
50374: CALL 51633 0 2
50378: PPUSH
50379: CALL_OW 431
// end ;
50383: GO 50344
50385: POP
50386: POP
// end ; for i = 1 to personel do
50387: LD_ADDR_VAR 0 8
50391: PUSH
50392: DOUBLE
50393: LD_INT 1
50395: DEC
50396: ST_TO_ADDR
50397: LD_VAR 0 6
50401: PUSH
50402: FOR_TO
50403: IFFALSE 51467
// begin if i > 4 then
50405: LD_VAR 0 8
50409: PUSH
50410: LD_INT 4
50412: GREATER
50413: IFFALSE 50417
// break ;
50415: GO 51467
// case i of 1 :
50417: LD_VAR 0 8
50421: PUSH
50422: LD_INT 1
50424: DOUBLE
50425: EQUAL
50426: IFTRUE 50430
50428: GO 50510
50430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50431: LD_ADDR_VAR 0 12
50435: PUSH
50436: LD_VAR 0 18
50440: PPUSH
50441: LD_INT 22
50443: PUSH
50444: LD_VAR 0 16
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 58
50455: PUSH
50456: EMPTY
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 30
50464: PUSH
50465: LD_INT 32
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 30
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 30
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: PPUSH
50503: CALL_OW 72
50507: ST_TO_ADDR
50508: GO 50732
50510: LD_INT 2
50512: DOUBLE
50513: EQUAL
50514: IFTRUE 50518
50516: GO 50580
50518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50519: LD_ADDR_VAR 0 12
50523: PUSH
50524: LD_VAR 0 18
50528: PPUSH
50529: LD_INT 22
50531: PUSH
50532: LD_VAR 0 16
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 30
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 30
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PPUSH
50573: CALL_OW 72
50577: ST_TO_ADDR
50578: GO 50732
50580: LD_INT 3
50582: DOUBLE
50583: EQUAL
50584: IFTRUE 50588
50586: GO 50650
50588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50589: LD_ADDR_VAR 0 12
50593: PUSH
50594: LD_VAR 0 18
50598: PPUSH
50599: LD_INT 22
50601: PUSH
50602: LD_VAR 0 16
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 30
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 30
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PPUSH
50643: CALL_OW 72
50647: ST_TO_ADDR
50648: GO 50732
50650: LD_INT 4
50652: DOUBLE
50653: EQUAL
50654: IFTRUE 50658
50656: GO 50731
50658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50659: LD_ADDR_VAR 0 12
50663: PUSH
50664: LD_VAR 0 18
50668: PPUSH
50669: LD_INT 22
50671: PUSH
50672: LD_VAR 0 16
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 30
50686: PUSH
50687: LD_INT 6
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 30
50696: PUSH
50697: LD_INT 7
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_INT 8
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PPUSH
50724: CALL_OW 72
50728: ST_TO_ADDR
50729: GO 50732
50731: POP
// if i = 1 then
50732: LD_VAR 0 8
50736: PUSH
50737: LD_INT 1
50739: EQUAL
50740: IFFALSE 50851
// begin tmp := [ ] ;
50742: LD_ADDR_VAR 0 19
50746: PUSH
50747: EMPTY
50748: ST_TO_ADDR
// for j in f do
50749: LD_ADDR_VAR 0 9
50753: PUSH
50754: LD_VAR 0 12
50758: PUSH
50759: FOR_IN
50760: IFFALSE 50833
// if GetBType ( j ) = b_bunker then
50762: LD_VAR 0 9
50766: PPUSH
50767: CALL_OW 266
50771: PUSH
50772: LD_INT 32
50774: EQUAL
50775: IFFALSE 50802
// tmp := Insert ( tmp , 1 , j ) else
50777: LD_ADDR_VAR 0 19
50781: PUSH
50782: LD_VAR 0 19
50786: PPUSH
50787: LD_INT 1
50789: PPUSH
50790: LD_VAR 0 9
50794: PPUSH
50795: CALL_OW 2
50799: ST_TO_ADDR
50800: GO 50831
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50802: LD_ADDR_VAR 0 19
50806: PUSH
50807: LD_VAR 0 19
50811: PPUSH
50812: LD_VAR 0 19
50816: PUSH
50817: LD_INT 1
50819: PLUS
50820: PPUSH
50821: LD_VAR 0 9
50825: PPUSH
50826: CALL_OW 2
50830: ST_TO_ADDR
50831: GO 50759
50833: POP
50834: POP
// if tmp then
50835: LD_VAR 0 19
50839: IFFALSE 50851
// f := tmp ;
50841: LD_ADDR_VAR 0 12
50845: PUSH
50846: LD_VAR 0 19
50850: ST_TO_ADDR
// end ; x := personel [ i ] ;
50851: LD_ADDR_VAR 0 13
50855: PUSH
50856: LD_VAR 0 6
50860: PUSH
50861: LD_VAR 0 8
50865: ARRAY
50866: ST_TO_ADDR
// if x = - 1 then
50867: LD_VAR 0 13
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: EQUAL
50876: IFFALSE 51085
// begin for j in f do
50878: LD_ADDR_VAR 0 9
50882: PUSH
50883: LD_VAR 0 12
50887: PUSH
50888: FOR_IN
50889: IFFALSE 51081
// repeat InitHc ;
50891: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50895: LD_VAR 0 9
50899: PPUSH
50900: CALL_OW 266
50904: PUSH
50905: LD_INT 5
50907: EQUAL
50908: IFFALSE 50978
// begin if UnitsInside ( j ) < 3 then
50910: LD_VAR 0 9
50914: PPUSH
50915: CALL_OW 313
50919: PUSH
50920: LD_INT 3
50922: LESS
50923: IFFALSE 50959
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50925: LD_INT 0
50927: PPUSH
50928: LD_INT 5
50930: PUSH
50931: LD_INT 8
50933: PUSH
50934: LD_INT 9
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: PUSH
50942: LD_VAR 0 17
50946: ARRAY
50947: PPUSH
50948: LD_VAR 0 4
50952: PPUSH
50953: CALL_OW 380
50957: GO 50976
// PrepareHuman ( false , i , skill ) ;
50959: LD_INT 0
50961: PPUSH
50962: LD_VAR 0 8
50966: PPUSH
50967: LD_VAR 0 4
50971: PPUSH
50972: CALL_OW 380
// end else
50976: GO 50995
// PrepareHuman ( false , i , skill ) ;
50978: LD_INT 0
50980: PPUSH
50981: LD_VAR 0 8
50985: PPUSH
50986: LD_VAR 0 4
50990: PPUSH
50991: CALL_OW 380
// un := CreateHuman ;
50995: LD_ADDR_VAR 0 14
50999: PUSH
51000: CALL_OW 44
51004: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51005: LD_ADDR_VAR 0 7
51009: PUSH
51010: LD_VAR 0 7
51014: PPUSH
51015: LD_INT 1
51017: PPUSH
51018: LD_VAR 0 14
51022: PPUSH
51023: CALL_OW 2
51027: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51028: LD_VAR 0 14
51032: PPUSH
51033: LD_VAR 0 9
51037: PPUSH
51038: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51042: LD_VAR 0 9
51046: PPUSH
51047: CALL_OW 313
51051: PUSH
51052: LD_INT 6
51054: EQUAL
51055: PUSH
51056: LD_VAR 0 9
51060: PPUSH
51061: CALL_OW 266
51065: PUSH
51066: LD_INT 32
51068: PUSH
51069: LD_INT 31
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: IN
51076: OR
51077: IFFALSE 50891
51079: GO 50888
51081: POP
51082: POP
// end else
51083: GO 51465
// for j = 1 to x do
51085: LD_ADDR_VAR 0 9
51089: PUSH
51090: DOUBLE
51091: LD_INT 1
51093: DEC
51094: ST_TO_ADDR
51095: LD_VAR 0 13
51099: PUSH
51100: FOR_TO
51101: IFFALSE 51463
// begin InitHc ;
51103: CALL_OW 19
// if not f then
51107: LD_VAR 0 12
51111: NOT
51112: IFFALSE 51201
// begin PrepareHuman ( false , i , skill ) ;
51114: LD_INT 0
51116: PPUSH
51117: LD_VAR 0 8
51121: PPUSH
51122: LD_VAR 0 4
51126: PPUSH
51127: CALL_OW 380
// un := CreateHuman ;
51131: LD_ADDR_VAR 0 14
51135: PUSH
51136: CALL_OW 44
51140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51141: LD_ADDR_VAR 0 7
51145: PUSH
51146: LD_VAR 0 7
51150: PPUSH
51151: LD_INT 1
51153: PPUSH
51154: LD_VAR 0 14
51158: PPUSH
51159: CALL_OW 2
51163: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51164: LD_VAR 0 14
51168: PPUSH
51169: LD_VAR 0 1
51173: PPUSH
51174: CALL_OW 250
51178: PPUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 251
51188: PPUSH
51189: LD_INT 10
51191: PPUSH
51192: LD_INT 0
51194: PPUSH
51195: CALL_OW 50
// continue ;
51199: GO 51100
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51201: LD_VAR 0 12
51205: PUSH
51206: LD_INT 1
51208: ARRAY
51209: PPUSH
51210: CALL_OW 313
51214: PUSH
51215: LD_VAR 0 12
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PPUSH
51224: CALL_OW 266
51228: PUSH
51229: LD_INT 32
51231: PUSH
51232: LD_INT 31
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: IN
51239: AND
51240: PUSH
51241: LD_VAR 0 12
51245: PUSH
51246: LD_INT 1
51248: ARRAY
51249: PPUSH
51250: CALL_OW 313
51254: PUSH
51255: LD_INT 6
51257: EQUAL
51258: OR
51259: IFFALSE 51279
// f := Delete ( f , 1 ) ;
51261: LD_ADDR_VAR 0 12
51265: PUSH
51266: LD_VAR 0 12
51270: PPUSH
51271: LD_INT 1
51273: PPUSH
51274: CALL_OW 3
51278: ST_TO_ADDR
// if not f then
51279: LD_VAR 0 12
51283: NOT
51284: IFFALSE 51302
// begin x := x + 2 ;
51286: LD_ADDR_VAR 0 13
51290: PUSH
51291: LD_VAR 0 13
51295: PUSH
51296: LD_INT 2
51298: PLUS
51299: ST_TO_ADDR
// continue ;
51300: GO 51100
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51302: LD_VAR 0 12
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: PPUSH
51311: CALL_OW 266
51315: PUSH
51316: LD_INT 5
51318: EQUAL
51319: IFFALSE 51393
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51321: LD_VAR 0 12
51325: PUSH
51326: LD_INT 1
51328: ARRAY
51329: PPUSH
51330: CALL_OW 313
51334: PUSH
51335: LD_INT 3
51337: LESS
51338: IFFALSE 51374
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51340: LD_INT 0
51342: PPUSH
51343: LD_INT 5
51345: PUSH
51346: LD_INT 8
51348: PUSH
51349: LD_INT 9
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: PUSH
51357: LD_VAR 0 17
51361: ARRAY
51362: PPUSH
51363: LD_VAR 0 4
51367: PPUSH
51368: CALL_OW 380
51372: GO 51391
// PrepareHuman ( false , i , skill ) ;
51374: LD_INT 0
51376: PPUSH
51377: LD_VAR 0 8
51381: PPUSH
51382: LD_VAR 0 4
51386: PPUSH
51387: CALL_OW 380
// end else
51391: GO 51410
// PrepareHuman ( false , i , skill ) ;
51393: LD_INT 0
51395: PPUSH
51396: LD_VAR 0 8
51400: PPUSH
51401: LD_VAR 0 4
51405: PPUSH
51406: CALL_OW 380
// un := CreateHuman ;
51410: LD_ADDR_VAR 0 14
51414: PUSH
51415: CALL_OW 44
51419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51420: LD_ADDR_VAR 0 7
51424: PUSH
51425: LD_VAR 0 7
51429: PPUSH
51430: LD_INT 1
51432: PPUSH
51433: LD_VAR 0 14
51437: PPUSH
51438: CALL_OW 2
51442: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51443: LD_VAR 0 14
51447: PPUSH
51448: LD_VAR 0 12
51452: PUSH
51453: LD_INT 1
51455: ARRAY
51456: PPUSH
51457: CALL_OW 52
// end ;
51461: GO 51100
51463: POP
51464: POP
// end ;
51465: GO 50402
51467: POP
51468: POP
// result := result ^ buildings ;
51469: LD_ADDR_VAR 0 7
51473: PUSH
51474: LD_VAR 0 7
51478: PUSH
51479: LD_VAR 0 18
51483: ADD
51484: ST_TO_ADDR
// end else
51485: GO 51628
// begin for i = 1 to personel do
51487: LD_ADDR_VAR 0 8
51491: PUSH
51492: DOUBLE
51493: LD_INT 1
51495: DEC
51496: ST_TO_ADDR
51497: LD_VAR 0 6
51501: PUSH
51502: FOR_TO
51503: IFFALSE 51626
// begin if i > 4 then
51505: LD_VAR 0 8
51509: PUSH
51510: LD_INT 4
51512: GREATER
51513: IFFALSE 51517
// break ;
51515: GO 51626
// x := personel [ i ] ;
51517: LD_ADDR_VAR 0 13
51521: PUSH
51522: LD_VAR 0 6
51526: PUSH
51527: LD_VAR 0 8
51531: ARRAY
51532: ST_TO_ADDR
// if x = - 1 then
51533: LD_VAR 0 13
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: EQUAL
51542: IFFALSE 51546
// continue ;
51544: GO 51502
// PrepareHuman ( false , i , skill ) ;
51546: LD_INT 0
51548: PPUSH
51549: LD_VAR 0 8
51553: PPUSH
51554: LD_VAR 0 4
51558: PPUSH
51559: CALL_OW 380
// un := CreateHuman ;
51563: LD_ADDR_VAR 0 14
51567: PUSH
51568: CALL_OW 44
51572: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51573: LD_VAR 0 14
51577: PPUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 250
51587: PPUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 251
51597: PPUSH
51598: LD_INT 10
51600: PPUSH
51601: LD_INT 0
51603: PPUSH
51604: CALL_OW 50
// result := result ^ un ;
51608: LD_ADDR_VAR 0 7
51612: PUSH
51613: LD_VAR 0 7
51617: PUSH
51618: LD_VAR 0 14
51622: ADD
51623: ST_TO_ADDR
// end ;
51624: GO 51502
51626: POP
51627: POP
// end ; end ;
51628: LD_VAR 0 7
51632: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51633: LD_INT 0
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
51648: PPUSH
51649: PPUSH
51650: PPUSH
// result := false ;
51651: LD_ADDR_VAR 0 3
51655: PUSH
51656: LD_INT 0
51658: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51659: LD_VAR 0 1
51663: NOT
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 266
51674: PUSH
51675: LD_INT 32
51677: PUSH
51678: LD_INT 33
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: IN
51685: NOT
51686: OR
51687: IFFALSE 51691
// exit ;
51689: GO 52800
// nat := GetNation ( tower ) ;
51691: LD_ADDR_VAR 0 12
51695: PUSH
51696: LD_VAR 0 1
51700: PPUSH
51701: CALL_OW 248
51705: ST_TO_ADDR
// side := GetSide ( tower ) ;
51706: LD_ADDR_VAR 0 16
51710: PUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 255
51720: ST_TO_ADDR
// x := GetX ( tower ) ;
51721: LD_ADDR_VAR 0 10
51725: PUSH
51726: LD_VAR 0 1
51730: PPUSH
51731: CALL_OW 250
51735: ST_TO_ADDR
// y := GetY ( tower ) ;
51736: LD_ADDR_VAR 0 11
51740: PUSH
51741: LD_VAR 0 1
51745: PPUSH
51746: CALL_OW 251
51750: ST_TO_ADDR
// if not x or not y then
51751: LD_VAR 0 10
51755: NOT
51756: PUSH
51757: LD_VAR 0 11
51761: NOT
51762: OR
51763: IFFALSE 51767
// exit ;
51765: GO 52800
// weapon := 0 ;
51767: LD_ADDR_VAR 0 18
51771: PUSH
51772: LD_INT 0
51774: ST_TO_ADDR
// fac_list := [ ] ;
51775: LD_ADDR_VAR 0 17
51779: PUSH
51780: EMPTY
51781: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51782: LD_ADDR_VAR 0 6
51786: PUSH
51787: LD_VAR 0 1
51791: PPUSH
51792: CALL_OW 274
51796: PPUSH
51797: LD_VAR 0 2
51801: PPUSH
51802: LD_INT 0
51804: PPUSH
51805: CALL 49371 0 3
51809: PPUSH
51810: LD_INT 30
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PPUSH
51820: CALL_OW 72
51824: ST_TO_ADDR
// if not factories then
51825: LD_VAR 0 6
51829: NOT
51830: IFFALSE 51834
// exit ;
51832: GO 52800
// for i in factories do
51834: LD_ADDR_VAR 0 8
51838: PUSH
51839: LD_VAR 0 6
51843: PUSH
51844: FOR_IN
51845: IFFALSE 51870
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51847: LD_ADDR_VAR 0 17
51851: PUSH
51852: LD_VAR 0 17
51856: PUSH
51857: LD_VAR 0 8
51861: PPUSH
51862: CALL_OW 478
51866: UNION
51867: ST_TO_ADDR
51868: GO 51844
51870: POP
51871: POP
// if not fac_list then
51872: LD_VAR 0 17
51876: NOT
51877: IFFALSE 51881
// exit ;
51879: GO 52800
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51881: LD_ADDR_VAR 0 5
51885: PUSH
51886: LD_INT 4
51888: PUSH
51889: LD_INT 5
51891: PUSH
51892: LD_INT 9
51894: PUSH
51895: LD_INT 10
51897: PUSH
51898: LD_INT 6
51900: PUSH
51901: LD_INT 7
51903: PUSH
51904: LD_INT 11
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 27
51918: PUSH
51919: LD_INT 28
51921: PUSH
51922: LD_INT 26
51924: PUSH
51925: LD_INT 30
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 43
51936: PUSH
51937: LD_INT 44
51939: PUSH
51940: LD_INT 46
51942: PUSH
51943: LD_INT 45
51945: PUSH
51946: LD_INT 47
51948: PUSH
51949: LD_INT 49
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: PUSH
51965: LD_VAR 0 12
51969: ARRAY
51970: ST_TO_ADDR
// list := list isect fac_list ;
51971: LD_ADDR_VAR 0 5
51975: PUSH
51976: LD_VAR 0 5
51980: PUSH
51981: LD_VAR 0 17
51985: ISECT
51986: ST_TO_ADDR
// if not list then
51987: LD_VAR 0 5
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52800
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51996: LD_VAR 0 12
52000: PUSH
52001: LD_INT 3
52003: EQUAL
52004: PUSH
52005: LD_INT 49
52007: PUSH
52008: LD_VAR 0 5
52012: IN
52013: AND
52014: PUSH
52015: LD_INT 31
52017: PPUSH
52018: LD_VAR 0 16
52022: PPUSH
52023: CALL_OW 321
52027: PUSH
52028: LD_INT 2
52030: EQUAL
52031: AND
52032: IFFALSE 52092
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52034: LD_INT 22
52036: PUSH
52037: LD_VAR 0 16
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 35
52048: PUSH
52049: LD_INT 49
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 91
52058: PUSH
52059: LD_VAR 0 1
52063: PUSH
52064: LD_INT 10
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: PPUSH
52077: CALL_OW 69
52081: NOT
52082: IFFALSE 52092
// weapon := ru_time_lapser ;
52084: LD_ADDR_VAR 0 18
52088: PUSH
52089: LD_INT 49
52091: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52092: LD_VAR 0 12
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: IN
52107: PUSH
52108: LD_INT 11
52110: PUSH
52111: LD_VAR 0 5
52115: IN
52116: PUSH
52117: LD_INT 30
52119: PUSH
52120: LD_VAR 0 5
52124: IN
52125: OR
52126: AND
52127: PUSH
52128: LD_INT 6
52130: PPUSH
52131: LD_VAR 0 16
52135: PPUSH
52136: CALL_OW 321
52140: PUSH
52141: LD_INT 2
52143: EQUAL
52144: AND
52145: IFFALSE 52310
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52147: LD_INT 22
52149: PUSH
52150: LD_VAR 0 16
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 35
52164: PUSH
52165: LD_INT 11
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 35
52174: PUSH
52175: LD_INT 30
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 91
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_INT 18
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: PPUSH
52208: CALL_OW 69
52212: NOT
52213: PUSH
52214: LD_INT 22
52216: PUSH
52217: LD_VAR 0 16
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 30
52231: PUSH
52232: LD_INT 32
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 30
52241: PUSH
52242: LD_INT 33
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 91
52256: PUSH
52257: LD_VAR 0 1
52261: PUSH
52262: LD_INT 12
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: PUSH
52275: EMPTY
52276: LIST
52277: PPUSH
52278: CALL_OW 69
52282: PUSH
52283: LD_INT 2
52285: GREATER
52286: AND
52287: IFFALSE 52310
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52289: LD_ADDR_VAR 0 18
52293: PUSH
52294: LD_INT 11
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_VAR 0 12
52308: ARRAY
52309: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52310: LD_VAR 0 18
52314: NOT
52315: PUSH
52316: LD_INT 40
52318: PPUSH
52319: LD_VAR 0 16
52323: PPUSH
52324: CALL_OW 321
52328: PUSH
52329: LD_INT 2
52331: EQUAL
52332: AND
52333: PUSH
52334: LD_INT 7
52336: PUSH
52337: LD_VAR 0 5
52341: IN
52342: PUSH
52343: LD_INT 28
52345: PUSH
52346: LD_VAR 0 5
52350: IN
52351: OR
52352: PUSH
52353: LD_INT 45
52355: PUSH
52356: LD_VAR 0 5
52360: IN
52361: OR
52362: AND
52363: IFFALSE 52617
// begin hex := GetHexInfo ( x , y ) ;
52365: LD_ADDR_VAR 0 4
52369: PUSH
52370: LD_VAR 0 10
52374: PPUSH
52375: LD_VAR 0 11
52379: PPUSH
52380: CALL_OW 546
52384: ST_TO_ADDR
// if hex [ 1 ] then
52385: LD_VAR 0 4
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: IFFALSE 52397
// exit ;
52395: GO 52800
// height := hex [ 2 ] ;
52397: LD_ADDR_VAR 0 15
52401: PUSH
52402: LD_VAR 0 4
52406: PUSH
52407: LD_INT 2
52409: ARRAY
52410: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52411: LD_ADDR_VAR 0 14
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 5
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// for i in tmp do
52434: LD_ADDR_VAR 0 8
52438: PUSH
52439: LD_VAR 0 14
52443: PUSH
52444: FOR_IN
52445: IFFALSE 52615
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52447: LD_ADDR_VAR 0 9
52451: PUSH
52452: LD_VAR 0 10
52456: PPUSH
52457: LD_VAR 0 8
52461: PPUSH
52462: LD_INT 5
52464: PPUSH
52465: CALL_OW 272
52469: PUSH
52470: LD_VAR 0 11
52474: PPUSH
52475: LD_VAR 0 8
52479: PPUSH
52480: LD_INT 5
52482: PPUSH
52483: CALL_OW 273
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52492: LD_VAR 0 9
52496: PUSH
52497: LD_INT 1
52499: ARRAY
52500: PPUSH
52501: LD_VAR 0 9
52505: PUSH
52506: LD_INT 2
52508: ARRAY
52509: PPUSH
52510: CALL_OW 488
52514: IFFALSE 52613
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52516: LD_ADDR_VAR 0 4
52520: PUSH
52521: LD_VAR 0 9
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PPUSH
52530: LD_VAR 0 9
52534: PUSH
52535: LD_INT 2
52537: ARRAY
52538: PPUSH
52539: CALL_OW 546
52543: ST_TO_ADDR
// if hex [ 1 ] then
52544: LD_VAR 0 4
52548: PUSH
52549: LD_INT 1
52551: ARRAY
52552: IFFALSE 52556
// continue ;
52554: GO 52444
// h := hex [ 2 ] ;
52556: LD_ADDR_VAR 0 13
52560: PUSH
52561: LD_VAR 0 4
52565: PUSH
52566: LD_INT 2
52568: ARRAY
52569: ST_TO_ADDR
// if h + 7 < height then
52570: LD_VAR 0 13
52574: PUSH
52575: LD_INT 7
52577: PLUS
52578: PUSH
52579: LD_VAR 0 15
52583: LESS
52584: IFFALSE 52613
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52586: LD_ADDR_VAR 0 18
52590: PUSH
52591: LD_INT 7
52593: PUSH
52594: LD_INT 28
52596: PUSH
52597: LD_INT 45
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: PUSH
52605: LD_VAR 0 12
52609: ARRAY
52610: ST_TO_ADDR
// break ;
52611: GO 52615
// end ; end ; end ;
52613: GO 52444
52615: POP
52616: POP
// end ; if not weapon then
52617: LD_VAR 0 18
52621: NOT
52622: IFFALSE 52682
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52624: LD_ADDR_VAR 0 5
52628: PUSH
52629: LD_VAR 0 5
52633: PUSH
52634: LD_INT 11
52636: PUSH
52637: LD_INT 30
52639: PUSH
52640: LD_INT 49
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: DIFF
52648: ST_TO_ADDR
// if not list then
52649: LD_VAR 0 5
52653: NOT
52654: IFFALSE 52658
// exit ;
52656: GO 52800
// weapon := list [ rand ( 1 , list ) ] ;
52658: LD_ADDR_VAR 0 18
52662: PUSH
52663: LD_VAR 0 5
52667: PUSH
52668: LD_INT 1
52670: PPUSH
52671: LD_VAR 0 5
52675: PPUSH
52676: CALL_OW 12
52680: ARRAY
52681: ST_TO_ADDR
// end ; if weapon then
52682: LD_VAR 0 18
52686: IFFALSE 52800
// begin tmp := CostOfWeapon ( weapon ) ;
52688: LD_ADDR_VAR 0 14
52692: PUSH
52693: LD_VAR 0 18
52697: PPUSH
52698: CALL_OW 451
52702: ST_TO_ADDR
// j := GetBase ( tower ) ;
52703: LD_ADDR_VAR 0 9
52707: PUSH
52708: LD_VAR 0 1
52712: PPUSH
52713: CALL_OW 274
52717: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52718: LD_VAR 0 9
52722: PPUSH
52723: LD_INT 1
52725: PPUSH
52726: CALL_OW 275
52730: PUSH
52731: LD_VAR 0 14
52735: PUSH
52736: LD_INT 1
52738: ARRAY
52739: GREATEREQUAL
52740: PUSH
52741: LD_VAR 0 9
52745: PPUSH
52746: LD_INT 2
52748: PPUSH
52749: CALL_OW 275
52753: PUSH
52754: LD_VAR 0 14
52758: PUSH
52759: LD_INT 2
52761: ARRAY
52762: GREATEREQUAL
52763: AND
52764: PUSH
52765: LD_VAR 0 9
52769: PPUSH
52770: LD_INT 3
52772: PPUSH
52773: CALL_OW 275
52777: PUSH
52778: LD_VAR 0 14
52782: PUSH
52783: LD_INT 3
52785: ARRAY
52786: GREATEREQUAL
52787: AND
52788: IFFALSE 52800
// result := weapon ;
52790: LD_ADDR_VAR 0 3
52794: PUSH
52795: LD_VAR 0 18
52799: ST_TO_ADDR
// end ; end ;
52800: LD_VAR 0 3
52804: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52805: LD_INT 0
52807: PPUSH
52808: PPUSH
// result := true ;
52809: LD_ADDR_VAR 0 3
52813: PUSH
52814: LD_INT 1
52816: ST_TO_ADDR
// if array1 = array2 then
52817: LD_VAR 0 1
52821: PUSH
52822: LD_VAR 0 2
52826: EQUAL
52827: IFFALSE 52887
// begin for i = 1 to array1 do
52829: LD_ADDR_VAR 0 4
52833: PUSH
52834: DOUBLE
52835: LD_INT 1
52837: DEC
52838: ST_TO_ADDR
52839: LD_VAR 0 1
52843: PUSH
52844: FOR_TO
52845: IFFALSE 52883
// if array1 [ i ] <> array2 [ i ] then
52847: LD_VAR 0 1
52851: PUSH
52852: LD_VAR 0 4
52856: ARRAY
52857: PUSH
52858: LD_VAR 0 2
52862: PUSH
52863: LD_VAR 0 4
52867: ARRAY
52868: NONEQUAL
52869: IFFALSE 52881
// begin result := false ;
52871: LD_ADDR_VAR 0 3
52875: PUSH
52876: LD_INT 0
52878: ST_TO_ADDR
// break ;
52879: GO 52883
// end ;
52881: GO 52844
52883: POP
52884: POP
// end else
52885: GO 52895
// result := false ;
52887: LD_ADDR_VAR 0 3
52891: PUSH
52892: LD_INT 0
52894: ST_TO_ADDR
// end ;
52895: LD_VAR 0 3
52899: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52900: LD_INT 0
52902: PPUSH
52903: PPUSH
// if not array1 or not array2 then
52904: LD_VAR 0 1
52908: NOT
52909: PUSH
52910: LD_VAR 0 2
52914: NOT
52915: OR
52916: IFFALSE 52920
// exit ;
52918: GO 52984
// result := true ;
52920: LD_ADDR_VAR 0 3
52924: PUSH
52925: LD_INT 1
52927: ST_TO_ADDR
// for i = 1 to array1 do
52928: LD_ADDR_VAR 0 4
52932: PUSH
52933: DOUBLE
52934: LD_INT 1
52936: DEC
52937: ST_TO_ADDR
52938: LD_VAR 0 1
52942: PUSH
52943: FOR_TO
52944: IFFALSE 52982
// if array1 [ i ] <> array2 [ i ] then
52946: LD_VAR 0 1
52950: PUSH
52951: LD_VAR 0 4
52955: ARRAY
52956: PUSH
52957: LD_VAR 0 2
52961: PUSH
52962: LD_VAR 0 4
52966: ARRAY
52967: NONEQUAL
52968: IFFALSE 52980
// begin result := false ;
52970: LD_ADDR_VAR 0 3
52974: PUSH
52975: LD_INT 0
52977: ST_TO_ADDR
// break ;
52978: GO 52982
// end ;
52980: GO 52943
52982: POP
52983: POP
// end ;
52984: LD_VAR 0 3
52988: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52989: LD_INT 0
52991: PPUSH
52992: PPUSH
52993: PPUSH
// pom := GetBase ( fac ) ;
52994: LD_ADDR_VAR 0 5
52998: PUSH
52999: LD_VAR 0 1
53003: PPUSH
53004: CALL_OW 274
53008: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53009: LD_ADDR_VAR 0 4
53013: PUSH
53014: LD_VAR 0 2
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PPUSH
53023: LD_VAR 0 2
53027: PUSH
53028: LD_INT 2
53030: ARRAY
53031: PPUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 3
53039: ARRAY
53040: PPUSH
53041: LD_VAR 0 2
53045: PUSH
53046: LD_INT 4
53048: ARRAY
53049: PPUSH
53050: CALL_OW 449
53054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53055: LD_ADDR_VAR 0 3
53059: PUSH
53060: LD_VAR 0 5
53064: PPUSH
53065: LD_INT 1
53067: PPUSH
53068: CALL_OW 275
53072: PUSH
53073: LD_VAR 0 4
53077: PUSH
53078: LD_INT 1
53080: ARRAY
53081: GREATEREQUAL
53082: PUSH
53083: LD_VAR 0 5
53087: PPUSH
53088: LD_INT 2
53090: PPUSH
53091: CALL_OW 275
53095: PUSH
53096: LD_VAR 0 4
53100: PUSH
53101: LD_INT 2
53103: ARRAY
53104: GREATEREQUAL
53105: AND
53106: PUSH
53107: LD_VAR 0 5
53111: PPUSH
53112: LD_INT 3
53114: PPUSH
53115: CALL_OW 275
53119: PUSH
53120: LD_VAR 0 4
53124: PUSH
53125: LD_INT 3
53127: ARRAY
53128: GREATEREQUAL
53129: AND
53130: ST_TO_ADDR
// end ;
53131: LD_VAR 0 3
53135: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53136: LD_INT 0
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
// pom := GetBase ( building ) ;
53142: LD_ADDR_VAR 0 3
53146: PUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 274
53156: ST_TO_ADDR
// if not pom then
53157: LD_VAR 0 3
53161: NOT
53162: IFFALSE 53166
// exit ;
53164: GO 53336
// btype := GetBType ( building ) ;
53166: LD_ADDR_VAR 0 5
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 266
53180: ST_TO_ADDR
// if btype = b_armoury then
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 4
53188: EQUAL
53189: IFFALSE 53199
// btype := b_barracks ;
53191: LD_ADDR_VAR 0 5
53195: PUSH
53196: LD_INT 5
53198: ST_TO_ADDR
// if btype = b_depot then
53199: LD_VAR 0 5
53203: PUSH
53204: LD_INT 0
53206: EQUAL
53207: IFFALSE 53217
// btype := b_warehouse ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_INT 1
53216: ST_TO_ADDR
// if btype = b_workshop then
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 2
53224: EQUAL
53225: IFFALSE 53235
// btype := b_factory ;
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_INT 3
53234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53235: LD_ADDR_VAR 0 4
53239: PUSH
53240: LD_VAR 0 5
53244: PPUSH
53245: LD_VAR 0 1
53249: PPUSH
53250: CALL_OW 248
53254: PPUSH
53255: CALL_OW 450
53259: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53260: LD_ADDR_VAR 0 2
53264: PUSH
53265: LD_VAR 0 3
53269: PPUSH
53270: LD_INT 1
53272: PPUSH
53273: CALL_OW 275
53277: PUSH
53278: LD_VAR 0 4
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: GREATEREQUAL
53287: PUSH
53288: LD_VAR 0 3
53292: PPUSH
53293: LD_INT 2
53295: PPUSH
53296: CALL_OW 275
53300: PUSH
53301: LD_VAR 0 4
53305: PUSH
53306: LD_INT 2
53308: ARRAY
53309: GREATEREQUAL
53310: AND
53311: PUSH
53312: LD_VAR 0 3
53316: PPUSH
53317: LD_INT 3
53319: PPUSH
53320: CALL_OW 275
53324: PUSH
53325: LD_VAR 0 4
53329: PUSH
53330: LD_INT 3
53332: ARRAY
53333: GREATEREQUAL
53334: AND
53335: ST_TO_ADDR
// end ;
53336: LD_VAR 0 2
53340: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53341: LD_INT 0
53343: PPUSH
53344: PPUSH
53345: PPUSH
// pom := GetBase ( building ) ;
53346: LD_ADDR_VAR 0 4
53350: PUSH
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 274
53360: ST_TO_ADDR
// if not pom then
53361: LD_VAR 0 4
53365: NOT
53366: IFFALSE 53370
// exit ;
53368: GO 53471
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53370: LD_ADDR_VAR 0 5
53374: PUSH
53375: LD_VAR 0 2
53379: PPUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: CALL_OW 248
53389: PPUSH
53390: CALL_OW 450
53394: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53395: LD_ADDR_VAR 0 3
53399: PUSH
53400: LD_VAR 0 4
53404: PPUSH
53405: LD_INT 1
53407: PPUSH
53408: CALL_OW 275
53412: PUSH
53413: LD_VAR 0 5
53417: PUSH
53418: LD_INT 1
53420: ARRAY
53421: GREATEREQUAL
53422: PUSH
53423: LD_VAR 0 4
53427: PPUSH
53428: LD_INT 2
53430: PPUSH
53431: CALL_OW 275
53435: PUSH
53436: LD_VAR 0 5
53440: PUSH
53441: LD_INT 2
53443: ARRAY
53444: GREATEREQUAL
53445: AND
53446: PUSH
53447: LD_VAR 0 4
53451: PPUSH
53452: LD_INT 3
53454: PPUSH
53455: CALL_OW 275
53459: PUSH
53460: LD_VAR 0 5
53464: PUSH
53465: LD_INT 3
53467: ARRAY
53468: GREATEREQUAL
53469: AND
53470: ST_TO_ADDR
// end ;
53471: LD_VAR 0 3
53475: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53476: LD_INT 0
53478: PPUSH
53479: PPUSH
53480: PPUSH
53481: PPUSH
53482: PPUSH
53483: PPUSH
53484: PPUSH
53485: PPUSH
53486: PPUSH
53487: PPUSH
53488: PPUSH
// result := false ;
53489: LD_ADDR_VAR 0 8
53493: PUSH
53494: LD_INT 0
53496: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53497: LD_VAR 0 5
53501: NOT
53502: PUSH
53503: LD_VAR 0 1
53507: NOT
53508: OR
53509: PUSH
53510: LD_VAR 0 2
53514: NOT
53515: OR
53516: PUSH
53517: LD_VAR 0 3
53521: NOT
53522: OR
53523: IFFALSE 53527
// exit ;
53525: GO 54341
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53527: LD_ADDR_VAR 0 14
53531: PUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: LD_VAR 0 2
53541: PPUSH
53542: LD_VAR 0 3
53546: PPUSH
53547: LD_VAR 0 4
53551: PPUSH
53552: LD_VAR 0 5
53556: PUSH
53557: LD_INT 1
53559: ARRAY
53560: PPUSH
53561: CALL_OW 248
53565: PPUSH
53566: LD_INT 0
53568: PPUSH
53569: CALL 55578 0 6
53573: ST_TO_ADDR
// if not hexes then
53574: LD_VAR 0 14
53578: NOT
53579: IFFALSE 53583
// exit ;
53581: GO 54341
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53583: LD_ADDR_VAR 0 17
53587: PUSH
53588: LD_VAR 0 5
53592: PPUSH
53593: LD_INT 22
53595: PUSH
53596: LD_VAR 0 13
53600: PPUSH
53601: CALL_OW 255
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 30
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 30
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PPUSH
53642: CALL_OW 72
53646: ST_TO_ADDR
// for i = 1 to hexes do
53647: LD_ADDR_VAR 0 9
53651: PUSH
53652: DOUBLE
53653: LD_INT 1
53655: DEC
53656: ST_TO_ADDR
53657: LD_VAR 0 14
53661: PUSH
53662: FOR_TO
53663: IFFALSE 54339
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53665: LD_ADDR_VAR 0 13
53669: PUSH
53670: LD_VAR 0 14
53674: PUSH
53675: LD_VAR 0 9
53679: ARRAY
53680: PUSH
53681: LD_INT 1
53683: ARRAY
53684: PPUSH
53685: LD_VAR 0 14
53689: PUSH
53690: LD_VAR 0 9
53694: ARRAY
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PPUSH
53700: CALL_OW 428
53704: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53705: LD_VAR 0 14
53709: PUSH
53710: LD_VAR 0 9
53714: ARRAY
53715: PUSH
53716: LD_INT 1
53718: ARRAY
53719: PPUSH
53720: LD_VAR 0 14
53724: PUSH
53725: LD_VAR 0 9
53729: ARRAY
53730: PUSH
53731: LD_INT 2
53733: ARRAY
53734: PPUSH
53735: CALL_OW 351
53739: PUSH
53740: LD_VAR 0 14
53744: PUSH
53745: LD_VAR 0 9
53749: ARRAY
53750: PUSH
53751: LD_INT 1
53753: ARRAY
53754: PPUSH
53755: LD_VAR 0 14
53759: PUSH
53760: LD_VAR 0 9
53764: ARRAY
53765: PUSH
53766: LD_INT 2
53768: ARRAY
53769: PPUSH
53770: CALL_OW 488
53774: NOT
53775: OR
53776: PUSH
53777: LD_VAR 0 13
53781: PPUSH
53782: CALL_OW 247
53786: PUSH
53787: LD_INT 3
53789: EQUAL
53790: OR
53791: IFFALSE 53797
// exit ;
53793: POP
53794: POP
53795: GO 54341
// if not tmp then
53797: LD_VAR 0 13
53801: NOT
53802: IFFALSE 53806
// continue ;
53804: GO 53662
// result := true ;
53806: LD_ADDR_VAR 0 8
53810: PUSH
53811: LD_INT 1
53813: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53814: LD_VAR 0 6
53818: PUSH
53819: LD_VAR 0 13
53823: PPUSH
53824: CALL_OW 247
53828: PUSH
53829: LD_INT 2
53831: EQUAL
53832: AND
53833: PUSH
53834: LD_VAR 0 13
53838: PPUSH
53839: CALL_OW 263
53843: PUSH
53844: LD_INT 1
53846: EQUAL
53847: AND
53848: IFFALSE 54012
// begin if IsDrivenBy ( tmp ) then
53850: LD_VAR 0 13
53854: PPUSH
53855: CALL_OW 311
53859: IFFALSE 53863
// continue ;
53861: GO 53662
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53863: LD_VAR 0 6
53867: PPUSH
53868: LD_INT 3
53870: PUSH
53871: LD_INT 60
53873: PUSH
53874: EMPTY
53875: LIST
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: LD_INT 55
53886: PUSH
53887: EMPTY
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PPUSH
53898: CALL_OW 72
53902: IFFALSE 54010
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53904: LD_ADDR_VAR 0 18
53908: PUSH
53909: LD_VAR 0 6
53913: PPUSH
53914: LD_INT 3
53916: PUSH
53917: LD_INT 60
53919: PUSH
53920: EMPTY
53921: LIST
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: LD_INT 55
53932: PUSH
53933: EMPTY
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PPUSH
53944: CALL_OW 72
53948: PUSH
53949: LD_INT 1
53951: ARRAY
53952: ST_TO_ADDR
// if IsInUnit ( driver ) then
53953: LD_VAR 0 18
53957: PPUSH
53958: CALL_OW 310
53962: IFFALSE 53973
// ComExit ( driver ) ;
53964: LD_VAR 0 18
53968: PPUSH
53969: CALL 78762 0 1
// AddComEnterUnit ( driver , tmp ) ;
53973: LD_VAR 0 18
53977: PPUSH
53978: LD_VAR 0 13
53982: PPUSH
53983: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53987: LD_VAR 0 18
53991: PPUSH
53992: LD_VAR 0 7
53996: PPUSH
53997: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54001: LD_VAR 0 18
54005: PPUSH
54006: CALL_OW 181
// end ; continue ;
54010: GO 53662
// end ; if not cleaners or not tmp in cleaners then
54012: LD_VAR 0 6
54016: NOT
54017: PUSH
54018: LD_VAR 0 13
54022: PUSH
54023: LD_VAR 0 6
54027: IN
54028: NOT
54029: OR
54030: IFFALSE 54337
// begin if dep then
54032: LD_VAR 0 17
54036: IFFALSE 54172
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54038: LD_ADDR_VAR 0 16
54042: PUSH
54043: LD_VAR 0 17
54047: PUSH
54048: LD_INT 1
54050: ARRAY
54051: PPUSH
54052: CALL_OW 250
54056: PPUSH
54057: LD_VAR 0 17
54061: PUSH
54062: LD_INT 1
54064: ARRAY
54065: PPUSH
54066: CALL_OW 254
54070: PPUSH
54071: LD_INT 5
54073: PPUSH
54074: CALL_OW 272
54078: PUSH
54079: LD_VAR 0 17
54083: PUSH
54084: LD_INT 1
54086: ARRAY
54087: PPUSH
54088: CALL_OW 251
54092: PPUSH
54093: LD_VAR 0 17
54097: PUSH
54098: LD_INT 1
54100: ARRAY
54101: PPUSH
54102: CALL_OW 254
54106: PPUSH
54107: LD_INT 5
54109: PPUSH
54110: CALL_OW 273
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54119: LD_VAR 0 16
54123: PUSH
54124: LD_INT 1
54126: ARRAY
54127: PPUSH
54128: LD_VAR 0 16
54132: PUSH
54133: LD_INT 2
54135: ARRAY
54136: PPUSH
54137: CALL_OW 488
54141: IFFALSE 54172
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54143: LD_VAR 0 13
54147: PPUSH
54148: LD_VAR 0 16
54152: PUSH
54153: LD_INT 1
54155: ARRAY
54156: PPUSH
54157: LD_VAR 0 16
54161: PUSH
54162: LD_INT 2
54164: ARRAY
54165: PPUSH
54166: CALL_OW 111
// continue ;
54170: GO 53662
// end ; end ; r := GetDir ( tmp ) ;
54172: LD_ADDR_VAR 0 15
54176: PUSH
54177: LD_VAR 0 13
54181: PPUSH
54182: CALL_OW 254
54186: ST_TO_ADDR
// if r = 5 then
54187: LD_VAR 0 15
54191: PUSH
54192: LD_INT 5
54194: EQUAL
54195: IFFALSE 54205
// r := 0 ;
54197: LD_ADDR_VAR 0 15
54201: PUSH
54202: LD_INT 0
54204: ST_TO_ADDR
// for j = r to 5 do
54205: LD_ADDR_VAR 0 10
54209: PUSH
54210: DOUBLE
54211: LD_VAR 0 15
54215: DEC
54216: ST_TO_ADDR
54217: LD_INT 5
54219: PUSH
54220: FOR_TO
54221: IFFALSE 54335
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54223: LD_ADDR_VAR 0 11
54227: PUSH
54228: LD_VAR 0 13
54232: PPUSH
54233: CALL_OW 250
54237: PPUSH
54238: LD_VAR 0 10
54242: PPUSH
54243: LD_INT 2
54245: PPUSH
54246: CALL_OW 272
54250: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54251: LD_ADDR_VAR 0 12
54255: PUSH
54256: LD_VAR 0 13
54260: PPUSH
54261: CALL_OW 251
54265: PPUSH
54266: LD_VAR 0 10
54270: PPUSH
54271: LD_INT 2
54273: PPUSH
54274: CALL_OW 273
54278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54279: LD_VAR 0 11
54283: PPUSH
54284: LD_VAR 0 12
54288: PPUSH
54289: CALL_OW 488
54293: PUSH
54294: LD_VAR 0 11
54298: PPUSH
54299: LD_VAR 0 12
54303: PPUSH
54304: CALL_OW 428
54308: NOT
54309: AND
54310: IFFALSE 54333
// begin ComMoveXY ( tmp , _x , _y ) ;
54312: LD_VAR 0 13
54316: PPUSH
54317: LD_VAR 0 11
54321: PPUSH
54322: LD_VAR 0 12
54326: PPUSH
54327: CALL_OW 111
// break ;
54331: GO 54335
// end ; end ;
54333: GO 54220
54335: POP
54336: POP
// end ; end ;
54337: GO 53662
54339: POP
54340: POP
// end ;
54341: LD_VAR 0 8
54345: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54346: LD_INT 0
54348: PPUSH
// result := true ;
54349: LD_ADDR_VAR 0 3
54353: PUSH
54354: LD_INT 1
54356: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54357: LD_VAR 0 2
54361: PUSH
54362: LD_INT 24
54364: DOUBLE
54365: EQUAL
54366: IFTRUE 54376
54368: LD_INT 33
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54376
54374: GO 54401
54376: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54377: LD_ADDR_VAR 0 3
54381: PUSH
54382: LD_INT 32
54384: PPUSH
54385: LD_VAR 0 1
54389: PPUSH
54390: CALL_OW 321
54394: PUSH
54395: LD_INT 2
54397: EQUAL
54398: ST_TO_ADDR
54399: GO 54721
54401: LD_INT 20
54403: DOUBLE
54404: EQUAL
54405: IFTRUE 54409
54407: GO 54434
54409: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54410: LD_ADDR_VAR 0 3
54414: PUSH
54415: LD_INT 6
54417: PPUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 321
54427: PUSH
54428: LD_INT 2
54430: EQUAL
54431: ST_TO_ADDR
54432: GO 54721
54434: LD_INT 22
54436: DOUBLE
54437: EQUAL
54438: IFTRUE 54448
54440: LD_INT 36
54442: DOUBLE
54443: EQUAL
54444: IFTRUE 54448
54446: GO 54473
54448: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54449: LD_ADDR_VAR 0 3
54453: PUSH
54454: LD_INT 15
54456: PPUSH
54457: LD_VAR 0 1
54461: PPUSH
54462: CALL_OW 321
54466: PUSH
54467: LD_INT 2
54469: EQUAL
54470: ST_TO_ADDR
54471: GO 54721
54473: LD_INT 30
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54481
54479: GO 54506
54481: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54482: LD_ADDR_VAR 0 3
54486: PUSH
54487: LD_INT 20
54489: PPUSH
54490: LD_VAR 0 1
54494: PPUSH
54495: CALL_OW 321
54499: PUSH
54500: LD_INT 2
54502: EQUAL
54503: ST_TO_ADDR
54504: GO 54721
54506: LD_INT 28
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54520
54512: LD_INT 21
54514: DOUBLE
54515: EQUAL
54516: IFTRUE 54520
54518: GO 54545
54520: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54521: LD_ADDR_VAR 0 3
54525: PUSH
54526: LD_INT 21
54528: PPUSH
54529: LD_VAR 0 1
54533: PPUSH
54534: CALL_OW 321
54538: PUSH
54539: LD_INT 2
54541: EQUAL
54542: ST_TO_ADDR
54543: GO 54721
54545: LD_INT 16
54547: DOUBLE
54548: EQUAL
54549: IFTRUE 54553
54551: GO 54580
54553: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54554: LD_ADDR_VAR 0 3
54558: PUSH
54559: LD_EXP 63
54563: PPUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 321
54573: PUSH
54574: LD_INT 2
54576: EQUAL
54577: ST_TO_ADDR
54578: GO 54721
54580: LD_INT 19
54582: DOUBLE
54583: EQUAL
54584: IFTRUE 54594
54586: LD_INT 23
54588: DOUBLE
54589: EQUAL
54590: IFTRUE 54594
54592: GO 54621
54594: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54595: LD_ADDR_VAR 0 3
54599: PUSH
54600: LD_EXP 62
54604: PPUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 321
54614: PUSH
54615: LD_INT 2
54617: EQUAL
54618: ST_TO_ADDR
54619: GO 54721
54621: LD_INT 17
54623: DOUBLE
54624: EQUAL
54625: IFTRUE 54629
54627: GO 54654
54629: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54630: LD_ADDR_VAR 0 3
54634: PUSH
54635: LD_INT 39
54637: PPUSH
54638: LD_VAR 0 1
54642: PPUSH
54643: CALL_OW 321
54647: PUSH
54648: LD_INT 2
54650: EQUAL
54651: ST_TO_ADDR
54652: GO 54721
54654: LD_INT 18
54656: DOUBLE
54657: EQUAL
54658: IFTRUE 54662
54660: GO 54687
54662: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54663: LD_ADDR_VAR 0 3
54667: PUSH
54668: LD_INT 40
54670: PPUSH
54671: LD_VAR 0 1
54675: PPUSH
54676: CALL_OW 321
54680: PUSH
54681: LD_INT 2
54683: EQUAL
54684: ST_TO_ADDR
54685: GO 54721
54687: LD_INT 27
54689: DOUBLE
54690: EQUAL
54691: IFTRUE 54695
54693: GO 54720
54695: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54696: LD_ADDR_VAR 0 3
54700: PUSH
54701: LD_INT 35
54703: PPUSH
54704: LD_VAR 0 1
54708: PPUSH
54709: CALL_OW 321
54713: PUSH
54714: LD_INT 2
54716: EQUAL
54717: ST_TO_ADDR
54718: GO 54721
54720: POP
// end ;
54721: LD_VAR 0 3
54725: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54726: LD_INT 0
54728: PPUSH
54729: PPUSH
54730: PPUSH
54731: PPUSH
54732: PPUSH
54733: PPUSH
54734: PPUSH
54735: PPUSH
54736: PPUSH
54737: PPUSH
54738: PPUSH
// result := false ;
54739: LD_ADDR_VAR 0 6
54743: PUSH
54744: LD_INT 0
54746: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54747: LD_VAR 0 1
54751: NOT
54752: PUSH
54753: LD_VAR 0 1
54757: PPUSH
54758: CALL_OW 266
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: IN
54773: NOT
54774: OR
54775: PUSH
54776: LD_VAR 0 2
54780: NOT
54781: OR
54782: PUSH
54783: LD_VAR 0 5
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: IN
54814: NOT
54815: OR
54816: PUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: CALL_OW 488
54831: NOT
54832: OR
54833: IFFALSE 54837
// exit ;
54835: GO 55573
// side := GetSide ( depot ) ;
54837: LD_ADDR_VAR 0 9
54841: PUSH
54842: LD_VAR 0 1
54846: PPUSH
54847: CALL_OW 255
54851: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54852: LD_VAR 0 9
54856: PPUSH
54857: LD_VAR 0 2
54861: PPUSH
54862: CALL 54346 0 2
54866: NOT
54867: IFFALSE 54871
// exit ;
54869: GO 55573
// pom := GetBase ( depot ) ;
54871: LD_ADDR_VAR 0 10
54875: PUSH
54876: LD_VAR 0 1
54880: PPUSH
54881: CALL_OW 274
54885: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54886: LD_ADDR_VAR 0 11
54890: PUSH
54891: LD_VAR 0 2
54895: PPUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: CALL_OW 248
54905: PPUSH
54906: CALL_OW 450
54910: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54911: LD_VAR 0 10
54915: PPUSH
54916: LD_INT 1
54918: PPUSH
54919: CALL_OW 275
54923: PUSH
54924: LD_VAR 0 11
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: GREATEREQUAL
54933: PUSH
54934: LD_VAR 0 10
54938: PPUSH
54939: LD_INT 2
54941: PPUSH
54942: CALL_OW 275
54946: PUSH
54947: LD_VAR 0 11
54951: PUSH
54952: LD_INT 2
54954: ARRAY
54955: GREATEREQUAL
54956: AND
54957: PUSH
54958: LD_VAR 0 10
54962: PPUSH
54963: LD_INT 3
54965: PPUSH
54966: CALL_OW 275
54970: PUSH
54971: LD_VAR 0 11
54975: PUSH
54976: LD_INT 3
54978: ARRAY
54979: GREATEREQUAL
54980: AND
54981: NOT
54982: IFFALSE 54986
// exit ;
54984: GO 55573
// if GetBType ( depot ) = b_depot then
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 266
54995: PUSH
54996: LD_INT 0
54998: EQUAL
54999: IFFALSE 55011
// dist := 28 else
55001: LD_ADDR_VAR 0 14
55005: PUSH
55006: LD_INT 28
55008: ST_TO_ADDR
55009: GO 55019
// dist := 36 ;
55011: LD_ADDR_VAR 0 14
55015: PUSH
55016: LD_INT 36
55018: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55019: LD_VAR 0 1
55023: PPUSH
55024: LD_VAR 0 3
55028: PPUSH
55029: LD_VAR 0 4
55033: PPUSH
55034: CALL_OW 297
55038: PUSH
55039: LD_VAR 0 14
55043: GREATER
55044: IFFALSE 55048
// exit ;
55046: GO 55573
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55048: LD_ADDR_VAR 0 12
55052: PUSH
55053: LD_VAR 0 2
55057: PPUSH
55058: LD_VAR 0 3
55062: PPUSH
55063: LD_VAR 0 4
55067: PPUSH
55068: LD_VAR 0 5
55072: PPUSH
55073: LD_VAR 0 1
55077: PPUSH
55078: CALL_OW 248
55082: PPUSH
55083: LD_INT 0
55085: PPUSH
55086: CALL 55578 0 6
55090: ST_TO_ADDR
// if not hexes then
55091: LD_VAR 0 12
55095: NOT
55096: IFFALSE 55100
// exit ;
55098: GO 55573
// hex := GetHexInfo ( x , y ) ;
55100: LD_ADDR_VAR 0 15
55104: PUSH
55105: LD_VAR 0 3
55109: PPUSH
55110: LD_VAR 0 4
55114: PPUSH
55115: CALL_OW 546
55119: ST_TO_ADDR
// if hex [ 1 ] then
55120: LD_VAR 0 15
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: IFFALSE 55132
// exit ;
55130: GO 55573
// height := hex [ 2 ] ;
55132: LD_ADDR_VAR 0 13
55136: PUSH
55137: LD_VAR 0 15
55141: PUSH
55142: LD_INT 2
55144: ARRAY
55145: ST_TO_ADDR
// for i = 1 to hexes do
55146: LD_ADDR_VAR 0 7
55150: PUSH
55151: DOUBLE
55152: LD_INT 1
55154: DEC
55155: ST_TO_ADDR
55156: LD_VAR 0 12
55160: PUSH
55161: FOR_TO
55162: IFFALSE 55492
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55164: LD_VAR 0 12
55168: PUSH
55169: LD_VAR 0 7
55173: ARRAY
55174: PUSH
55175: LD_INT 1
55177: ARRAY
55178: PPUSH
55179: LD_VAR 0 12
55183: PUSH
55184: LD_VAR 0 7
55188: ARRAY
55189: PUSH
55190: LD_INT 2
55192: ARRAY
55193: PPUSH
55194: CALL_OW 488
55198: NOT
55199: PUSH
55200: LD_VAR 0 12
55204: PUSH
55205: LD_VAR 0 7
55209: ARRAY
55210: PUSH
55211: LD_INT 1
55213: ARRAY
55214: PPUSH
55215: LD_VAR 0 12
55219: PUSH
55220: LD_VAR 0 7
55224: ARRAY
55225: PUSH
55226: LD_INT 2
55228: ARRAY
55229: PPUSH
55230: CALL_OW 428
55234: PUSH
55235: LD_INT 0
55237: GREATER
55238: OR
55239: PUSH
55240: LD_VAR 0 12
55244: PUSH
55245: LD_VAR 0 7
55249: ARRAY
55250: PUSH
55251: LD_INT 1
55253: ARRAY
55254: PPUSH
55255: LD_VAR 0 12
55259: PUSH
55260: LD_VAR 0 7
55264: ARRAY
55265: PUSH
55266: LD_INT 2
55268: ARRAY
55269: PPUSH
55270: CALL_OW 351
55274: OR
55275: IFFALSE 55281
// exit ;
55277: POP
55278: POP
55279: GO 55573
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55281: LD_ADDR_VAR 0 8
55285: PUSH
55286: LD_VAR 0 12
55290: PUSH
55291: LD_VAR 0 7
55295: ARRAY
55296: PUSH
55297: LD_INT 1
55299: ARRAY
55300: PPUSH
55301: LD_VAR 0 12
55305: PUSH
55306: LD_VAR 0 7
55310: ARRAY
55311: PUSH
55312: LD_INT 2
55314: ARRAY
55315: PPUSH
55316: CALL_OW 546
55320: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55321: LD_VAR 0 8
55325: PUSH
55326: LD_INT 1
55328: ARRAY
55329: PUSH
55330: LD_VAR 0 8
55334: PUSH
55335: LD_INT 2
55337: ARRAY
55338: PUSH
55339: LD_VAR 0 13
55343: PUSH
55344: LD_INT 2
55346: PLUS
55347: GREATER
55348: OR
55349: PUSH
55350: LD_VAR 0 8
55354: PUSH
55355: LD_INT 2
55357: ARRAY
55358: PUSH
55359: LD_VAR 0 13
55363: PUSH
55364: LD_INT 2
55366: MINUS
55367: LESS
55368: OR
55369: PUSH
55370: LD_VAR 0 8
55374: PUSH
55375: LD_INT 3
55377: ARRAY
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 8
55384: PUSH
55385: LD_INT 9
55387: PUSH
55388: LD_INT 10
55390: PUSH
55391: LD_INT 11
55393: PUSH
55394: LD_INT 12
55396: PUSH
55397: LD_INT 13
55399: PUSH
55400: LD_INT 16
55402: PUSH
55403: LD_INT 17
55405: PUSH
55406: LD_INT 18
55408: PUSH
55409: LD_INT 19
55411: PUSH
55412: LD_INT 20
55414: PUSH
55415: LD_INT 21
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: IN
55433: NOT
55434: OR
55435: PUSH
55436: LD_VAR 0 8
55440: PUSH
55441: LD_INT 5
55443: ARRAY
55444: NOT
55445: OR
55446: PUSH
55447: LD_VAR 0 8
55451: PUSH
55452: LD_INT 6
55454: ARRAY
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 7
55464: PUSH
55465: LD_INT 9
55467: PUSH
55468: LD_INT 10
55470: PUSH
55471: LD_INT 11
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: IN
55482: NOT
55483: OR
55484: IFFALSE 55490
// exit ;
55486: POP
55487: POP
55488: GO 55573
// end ;
55490: GO 55161
55492: POP
55493: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55494: LD_VAR 0 9
55498: PPUSH
55499: LD_VAR 0 3
55503: PPUSH
55504: LD_VAR 0 4
55508: PPUSH
55509: LD_INT 20
55511: PPUSH
55512: CALL 47519 0 4
55516: PUSH
55517: LD_INT 4
55519: ARRAY
55520: IFFALSE 55524
// exit ;
55522: GO 55573
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55524: LD_VAR 0 2
55528: PUSH
55529: LD_INT 29
55531: PUSH
55532: LD_INT 30
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: IN
55539: PUSH
55540: LD_VAR 0 3
55544: PPUSH
55545: LD_VAR 0 4
55549: PPUSH
55550: LD_VAR 0 9
55554: PPUSH
55555: CALL_OW 440
55559: NOT
55560: AND
55561: IFFALSE 55565
// exit ;
55563: GO 55573
// result := true ;
55565: LD_ADDR_VAR 0 6
55569: PUSH
55570: LD_INT 1
55572: ST_TO_ADDR
// end ;
55573: LD_VAR 0 6
55577: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55578: LD_INT 0
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
55637: PPUSH
// result = [ ] ;
55638: LD_ADDR_VAR 0 7
55642: PUSH
55643: EMPTY
55644: ST_TO_ADDR
// temp_list = [ ] ;
55645: LD_ADDR_VAR 0 9
55649: PUSH
55650: EMPTY
55651: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55652: LD_VAR 0 4
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 5
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: IN
55683: NOT
55684: PUSH
55685: LD_VAR 0 1
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: IN
55700: PUSH
55701: LD_VAR 0 5
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: IN
55720: NOT
55721: AND
55722: OR
55723: IFFALSE 55727
// exit ;
55725: GO 74118
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55727: LD_VAR 0 1
55731: PUSH
55732: LD_INT 6
55734: PUSH
55735: LD_INT 7
55737: PUSH
55738: LD_INT 8
55740: PUSH
55741: LD_INT 13
55743: PUSH
55744: LD_INT 12
55746: PUSH
55747: LD_INT 15
55749: PUSH
55750: LD_INT 11
55752: PUSH
55753: LD_INT 14
55755: PUSH
55756: LD_INT 10
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: IN
55770: IFFALSE 55780
// btype = b_lab ;
55772: LD_ADDR_VAR 0 1
55776: PUSH
55777: LD_INT 6
55779: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55780: LD_VAR 0 6
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: IN
55799: NOT
55800: PUSH
55801: LD_VAR 0 1
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: LD_INT 6
55820: PUSH
55821: LD_INT 36
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: LD_INT 5
55829: PUSH
55830: LD_INT 31
55832: PUSH
55833: LD_INT 32
55835: PUSH
55836: LD_INT 33
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: IN
55852: NOT
55853: PUSH
55854: LD_VAR 0 6
55858: PUSH
55859: LD_INT 1
55861: EQUAL
55862: AND
55863: OR
55864: PUSH
55865: LD_VAR 0 1
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: IN
55880: NOT
55881: PUSH
55882: LD_VAR 0 6
55886: PUSH
55887: LD_INT 2
55889: EQUAL
55890: AND
55891: OR
55892: IFFALSE 55902
// mode = 0 ;
55894: LD_ADDR_VAR 0 6
55898: PUSH
55899: LD_INT 0
55901: ST_TO_ADDR
// case mode of 0 :
55902: LD_VAR 0 6
55906: PUSH
55907: LD_INT 0
55909: DOUBLE
55910: EQUAL
55911: IFTRUE 55915
55913: GO 67368
55915: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55916: LD_ADDR_VAR 0 11
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56109: LD_ADDR_VAR 0 12
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56305: LD_ADDR_VAR 0 13
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56504: LD_ADDR_VAR 0 14
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56700: LD_ADDR_VAR 0 15
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56893: LD_ADDR_VAR 0 16
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57086: LD_ADDR_VAR 0 17
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57316: LD_ADDR_VAR 0 18
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57546: LD_ADDR_VAR 0 19
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57776: LD_ADDR_VAR 0 20
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58006: LD_ADDR_VAR 0 21
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58236: LD_ADDR_VAR 0 22
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58466: LD_ADDR_VAR 0 23
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 2
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58746: LD_ADDR_VAR 0 24
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59022: LD_ADDR_VAR 0 25
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59296: LD_ADDR_VAR 0 26
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59572: LD_ADDR_VAR 0 27
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59852: LD_ADDR_VAR 0 28
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60134: LD_ADDR_VAR 0 29
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60413: LD_ADDR_VAR 0 30
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 3
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60691: LD_ADDR_VAR 0 31
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: NEG
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60969: LD_ADDR_VAR 0 32
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61247: LD_ADDR_VAR 0 33
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61526: LD_ADDR_VAR 0 34
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61806: LD_ADDR_VAR 0 35
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61918: LD_ADDR_VAR 0 36
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62030: LD_ADDR_VAR 0 37
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62142: LD_ADDR_VAR 0 38
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62254: LD_ADDR_VAR 0 39
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62366: LD_ADDR_VAR 0 40
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62478: LD_ADDR_VAR 0 41
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: NEG
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62828: LD_ADDR_VAR 0 42
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 3
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63178: LD_ADDR_VAR 0 43
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 3
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 3
63474: NEG
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63526: LD_ADDR_VAR 0 44
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 3
63823: NEG
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: NEG
63836: PUSH
63837: LD_INT 3
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63876: LD_ADDR_VAR 0 45
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64226: LD_ADDR_VAR 0 46
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 3
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 3
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 3
64522: NEG
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64574: LD_ADDR_VAR 0 47
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: NEG
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64725: LD_ADDR_VAR 0 48
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64872: LD_ADDR_VAR 0 49
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65016: LD_ADDR_VAR 0 50
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65160: LD_ADDR_VAR 0 51
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 1
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 2
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 2
65283: NEG
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65307: LD_ADDR_VAR 0 52
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: NEG
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 2
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65458: LD_ADDR_VAR 0 53
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65688: LD_ADDR_VAR 0 54
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: LD_INT 2
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65918: LD_ADDR_VAR 0 55
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 2
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66148: LD_ADDR_VAR 0 56
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66378: LD_ADDR_VAR 0 57
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 2
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: LD_INT 1
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 2
66565: NEG
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 2
66577: NEG
66578: PUSH
66579: LD_INT 2
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66608: LD_ADDR_VAR 0 58
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 1
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 2
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: NEG
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66838: LD_ADDR_VAR 0 59
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66926: LD_ADDR_VAR 0 60
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67014: LD_ADDR_VAR 0 61
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 1
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67102: LD_ADDR_VAR 0 62
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67190: LD_ADDR_VAR 0 63
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: LD_INT 1
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67278: LD_ADDR_VAR 0 64
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// end ; 1 :
67366: GO 73263
67368: LD_INT 1
67370: DOUBLE
67371: EQUAL
67372: IFTRUE 67376
67374: GO 69999
67376: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67377: LD_ADDR_VAR 0 11
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: LD_INT 3
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: LD_INT 2
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67421: LD_ADDR_VAR 0 12
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: LD_INT 1
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67462: LD_ADDR_VAR 0 13
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67502: LD_ADDR_VAR 0 14
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: LD_INT 3
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67543: LD_ADDR_VAR 0 15
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: NEG
67573: PUSH
67574: LD_INT 1
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67587: LD_ADDR_VAR 0 16
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: NEG
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67633: LD_ADDR_VAR 0 17
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: LD_INT 3
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: LIST
67676: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67677: LD_ADDR_VAR 0 18
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: LIST
67717: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67718: LD_ADDR_VAR 0 19
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: PUSH
67746: LD_INT 3
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67758: LD_ADDR_VAR 0 20
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67799: LD_ADDR_VAR 0 21
67803: PUSH
67804: LD_INT 2
67806: NEG
67807: PUSH
67808: LD_INT 1
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 3
67828: NEG
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67843: LD_ADDR_VAR 0 22
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: LD_INT 3
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67889: LD_ADDR_VAR 0 23
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: LD_INT 4
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: LD_INT 3
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67933: LD_ADDR_VAR 0 24
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 3
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 4
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67974: LD_ADDR_VAR 0 25
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 4
67991: PUSH
67992: LD_INT 3
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 3
68001: PUSH
68002: LD_INT 4
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: LIST
68013: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68014: LD_ADDR_VAR 0 26
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: LD_INT 4
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: LIST
68054: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68055: LD_ADDR_VAR 0 27
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 3
68073: NEG
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 4
68084: NEG
68085: PUSH
68086: LD_INT 1
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68099: LD_ADDR_VAR 0 28
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: LD_INT 4
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: NEG
68131: PUSH
68132: LD_INT 3
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68145: LD_ADDR_VAR 0 29
68149: PUSH
68150: LD_INT 1
68152: NEG
68153: PUSH
68154: LD_INT 3
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 3
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: LD_INT 2
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 1
68186: NEG
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 4
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 5
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: LD_INT 6
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: LD_INT 6
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: LD_INT 5
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68300: LD_ADDR_VAR 0 30
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 3
68328: PUSH
68329: LD_INT 1
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 3
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 5
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 5
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 5
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 6
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 6
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68443: LD_ADDR_VAR 0 31
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: LD_INT 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: LD_INT 3
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: LD_INT 3
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: LD_INT 4
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 5
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: LD_INT 5
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 6
68540: PUSH
68541: LD_INT 5
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 6
68550: PUSH
68551: LD_INT 6
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: LD_INT 6
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68582: LD_ADDR_VAR 0 32
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: LD_INT 4
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 1
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: LD_INT 5
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: LD_INT 4
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: LD_INT 6
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: LD_INT 6
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: LD_INT 5
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68725: LD_ADDR_VAR 0 33
68729: PUSH
68730: LD_INT 2
68732: NEG
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 4
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 5
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 5
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 6
68845: NEG
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 6
68856: NEG
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68880: LD_ADDR_VAR 0 34
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: NEG
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: NEG
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: LD_INT 4
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 4
68959: NEG
68960: PUSH
68961: LD_INT 5
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 5
68971: NEG
68972: PUSH
68973: LD_INT 4
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 5
68983: NEG
68984: PUSH
68985: LD_INT 5
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 5
68995: NEG
68996: PUSH
68997: LD_INT 6
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 6
69007: NEG
69008: PUSH
69009: LD_INT 5
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 6
69019: NEG
69020: PUSH
69021: LD_INT 6
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69043: LD_ADDR_VAR 0 41
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69087: LD_ADDR_VAR 0 42
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: LD_INT 0
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 2
69104: PUSH
69105: LD_INT 1
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 3
69115: PUSH
69116: LD_INT 1
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69128: LD_ADDR_VAR 0 43
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 3
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 2
69155: PUSH
69156: LD_INT 3
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69168: LD_ADDR_VAR 0 44
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: LIST
69208: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69209: LD_ADDR_VAR 0 45
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 2
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 3
69238: NEG
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: LIST
69252: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69253: LD_ADDR_VAR 0 46
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 2
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 3
69284: NEG
69285: PUSH
69286: LD_INT 2
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69299: LD_ADDR_VAR 0 47
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: LD_INT 3
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69332: LD_ADDR_VAR 0 48
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: LD_INT 2
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 2
69350: PUSH
69351: LD_INT 1
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69363: LD_ADDR_VAR 0 49
69367: PUSH
69368: LD_INT 3
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69392: LD_ADDR_VAR 0 50
69396: PUSH
69397: LD_INT 2
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69421: LD_ADDR_VAR 0 51
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: LD_INT 2
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 2
69439: NEG
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69452: LD_ADDR_VAR 0 52
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 3
69471: NEG
69472: PUSH
69473: LD_INT 2
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69485: LD_ADDR_VAR 0 53
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 0
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 1
69515: PUSH
69516: LD_INT 2
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: LIST
69528: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69529: LD_ADDR_VAR 0 54
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: LD_INT 1
69539: NEG
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: LD_INT 0
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: LIST
69569: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69570: LD_ADDR_VAR 0 55
69574: PUSH
69575: LD_INT 3
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: LIST
69609: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69610: LD_ADDR_VAR 0 56
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 3
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 1
69637: NEG
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: LIST
69650: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69651: LD_ADDR_VAR 0 57
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: NEG
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69695: LD_ADDR_VAR 0 58
69699: PUSH
69700: LD_INT 2
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 2
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 3
69726: NEG
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69741: LD_ADDR_VAR 0 59
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69785: LD_ADDR_VAR 0 60
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 2
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69826: LD_ADDR_VAR 0 61
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 2
69843: PUSH
69844: LD_INT 2
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 1
69853: PUSH
69854: LD_INT 2
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69866: LD_ADDR_VAR 0 62
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: LD_INT 2
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: LD_INT 1
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: LIST
69906: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69907: LD_ADDR_VAR 0 63
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69951: LD_ADDR_VAR 0 64
69955: PUSH
69956: LD_INT 1
69958: NEG
69959: PUSH
69960: LD_INT 2
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: LD_INT 1
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: LD_INT 2
69986: NEG
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: LIST
69996: ST_TO_ADDR
// end ; 2 :
69997: GO 73263
69999: LD_INT 2
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70007
70005: GO 73262
70007: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70008: LD_ADDR_VAR 0 29
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: LD_INT 1
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 5
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 5
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 3
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: LD_INT 1
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: LD_INT 2
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 5
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 4
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 3
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 4
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: LD_INT 4
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: LD_INT 4
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: LD_INT 3
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 1
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: LD_INT 5
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: LD_INT 5
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: LD_INT 4
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 1
70259: NEG
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: LD_INT 5
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 2
70280: NEG
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: NEG
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: NEG
70303: PUSH
70304: LD_INT 1
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: LD_INT 0
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 2
70325: NEG
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 4
70347: NEG
70348: PUSH
70349: LD_INT 0
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: LD_INT 1
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: LD_INT 2
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: NEG
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: NEG
70394: PUSH
70395: LD_INT 4
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: LD_INT 5
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 4
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: NEG
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 4
70441: NEG
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 5
70453: NEG
70454: PUSH
70455: LD_INT 4
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 5
70465: NEG
70466: PUSH
70467: LD_INT 5
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 3
70477: NEG
70478: PUSH
70479: LD_INT 5
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 5
70489: NEG
70490: PUSH
70491: LD_INT 3
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70546: LD_ADDR_VAR 0 30
70550: PUSH
70551: LD_INT 4
70553: PUSH
70554: LD_INT 4
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 4
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: LD_INT 4
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 5
70583: PUSH
70584: LD_INT 5
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: PUSH
70594: LD_INT 5
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: PUSH
70604: LD_INT 4
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 5
70623: PUSH
70624: LD_INT 3
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 3
70633: PUSH
70634: LD_INT 5
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 3
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 2
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 1
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: PUSH
70706: LD_INT 2
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: LD_INT 4
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 2
70725: NEG
70726: PUSH
70727: LD_INT 2
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: NEG
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 4
70747: NEG
70748: PUSH
70749: LD_INT 1
70751: NEG
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: LD_INT 0
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 3
70770: NEG
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: LD_INT 1
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: NEG
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 5
70803: NEG
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 5
70815: NEG
70816: PUSH
70817: LD_INT 2
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 3
70827: NEG
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 3
70838: NEG
70839: PUSH
70840: LD_INT 3
70842: NEG
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 3
70850: NEG
70851: PUSH
70852: LD_INT 4
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: LD_INT 3
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: NEG
70875: PUSH
70876: LD_INT 2
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: LD_INT 2
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: LD_INT 3
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: LD_INT 4
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 2
70922: NEG
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 4
70934: NEG
70935: PUSH
70936: LD_INT 2
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 0
70946: PUSH
70947: LD_INT 4
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: LD_INT 5
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: LD_INT 4
70971: NEG
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 1
70979: PUSH
70980: LD_INT 3
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: LD_INT 3
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 4
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: NEG
71014: PUSH
71015: LD_INT 5
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: LD_INT 3
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 2
71036: NEG
71037: PUSH
71038: LD_INT 5
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71093: LD_ADDR_VAR 0 31
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 4
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: LD_INT 4
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: LD_INT 5
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 5
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: LD_INT 4
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: LD_INT 3
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 5
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 3
71204: NEG
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 2
71227: NEG
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 3
71238: NEG
71239: PUSH
71240: LD_INT 1
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 4
71249: NEG
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 4
71272: NEG
71273: PUSH
71274: LD_INT 2
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 2
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: LD_INT 4
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 4
71307: NEG
71308: PUSH
71309: LD_INT 5
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: LD_INT 4
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: LD_INT 3
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 4
71343: NEG
71344: PUSH
71345: LD_INT 3
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 5
71355: NEG
71356: PUSH
71357: LD_INT 4
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 5
71367: NEG
71368: PUSH
71369: LD_INT 5
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 3
71379: NEG
71380: PUSH
71381: LD_INT 5
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 5
71391: NEG
71392: PUSH
71393: LD_INT 3
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: LD_INT 3
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 4
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: LD_INT 3
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 3
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: NEG
71471: PUSH
71472: LD_INT 4
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 2
71482: PUSH
71483: LD_INT 2
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 2
71493: NEG
71494: PUSH
71495: LD_INT 4
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 4
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 5
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 5
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 4
71546: PUSH
71547: LD_INT 1
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: LD_INT 1
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 3
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 5
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71643: LD_ADDR_VAR 0 32
71647: PUSH
71648: LD_INT 4
71650: NEG
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 4
71661: NEG
71662: PUSH
71663: LD_INT 1
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: NEG
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 3
71684: NEG
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 4
71695: NEG
71696: PUSH
71697: LD_INT 1
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 5
71706: NEG
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 5
71717: NEG
71718: PUSH
71719: LD_INT 1
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 5
71729: NEG
71730: PUSH
71731: LD_INT 2
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 3
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 3
71752: NEG
71753: PUSH
71754: LD_INT 3
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 3
71764: NEG
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 2
71776: NEG
71777: PUSH
71778: LD_INT 3
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: LD_INT 2
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 3
71800: NEG
71801: PUSH
71802: LD_INT 2
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 3
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: NEG
71825: PUSH
71826: LD_INT 4
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: LD_INT 4
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 4
71848: NEG
71849: PUSH
71850: LD_INT 2
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: LD_INT 4
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: LD_INT 5
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: PUSH
71883: LD_INT 4
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: LD_INT 3
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 3
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: LD_INT 4
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: NEG
71928: PUSH
71929: LD_INT 5
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: LD_INT 3
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 2
71950: NEG
71951: PUSH
71952: LD_INT 5
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: LD_INT 0
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 3
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 4
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 4
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 3
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 2
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 2
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 2
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 4
72045: PUSH
72046: LD_INT 2
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 4
72055: PUSH
72056: LD_INT 4
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: LD_INT 3
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 5
72075: PUSH
72076: LD_INT 4
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 5
72085: PUSH
72086: LD_INT 5
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 4
72095: PUSH
72096: LD_INT 5
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 3
72105: PUSH
72106: LD_INT 4
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 5
72125: PUSH
72126: LD_INT 3
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 3
72135: PUSH
72136: LD_INT 5
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72190: LD_ADDR_VAR 0 33
72194: PUSH
72195: LD_INT 4
72197: NEG
72198: PUSH
72199: LD_INT 4
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 4
72209: NEG
72210: PUSH
72211: LD_INT 5
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: LD_INT 4
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: LD_INT 3
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 4
72245: NEG
72246: PUSH
72247: LD_INT 3
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 5
72257: NEG
72258: PUSH
72259: LD_INT 4
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 5
72269: NEG
72270: PUSH
72271: LD_INT 5
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 3
72281: NEG
72282: PUSH
72283: LD_INT 5
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 5
72293: NEG
72294: PUSH
72295: LD_INT 3
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: LD_INT 3
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: LD_INT 4
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: LD_INT 3
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 1
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: LD_INT 2
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 1
72360: NEG
72361: PUSH
72362: LD_INT 3
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: NEG
72373: PUSH
72374: LD_INT 4
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: LD_INT 2
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 2
72395: NEG
72396: PUSH
72397: LD_INT 4
72399: NEG
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 4
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 4
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 5
72428: PUSH
72429: LD_INT 0
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 5
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 4
72448: PUSH
72449: LD_INT 1
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 3
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 3
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 3
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 5
72490: PUSH
72491: LD_INT 2
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 3
72500: PUSH
72501: LD_INT 3
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 3
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 4
72520: PUSH
72521: LD_INT 3
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 4
72530: PUSH
72531: LD_INT 4
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: LD_INT 4
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 2
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 2
72560: PUSH
72561: LD_INT 2
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 4
72570: PUSH
72571: LD_INT 2
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 2
72580: PUSH
72581: LD_INT 4
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 4
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 0
72600: PUSH
72601: LD_INT 3
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: LD_INT 4
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 1
72620: PUSH
72621: LD_INT 5
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: LD_INT 5
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: LD_INT 4
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 1
72651: NEG
72652: PUSH
72653: LD_INT 3
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: LD_INT 5
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 2
72672: NEG
72673: PUSH
72674: LD_INT 3
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72728: LD_ADDR_VAR 0 34
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_INT 4
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 5
72749: NEG
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 1
72757: PUSH
72758: LD_INT 4
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 1
72768: PUSH
72769: LD_INT 3
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 3
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 1
72790: NEG
72791: PUSH
72792: LD_INT 4
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 1
72802: NEG
72803: PUSH
72804: LD_INT 5
72806: NEG
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 2
72814: PUSH
72815: LD_INT 3
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: LD_INT 5
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 3
72837: PUSH
72838: LD_INT 0
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 3
72847: PUSH
72848: LD_INT 1
72850: NEG
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 4
72858: PUSH
72859: LD_INT 0
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 4
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 1
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: LD_INT 1
72901: NEG
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 2
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 4
72920: PUSH
72921: LD_INT 2
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 4
72930: PUSH
72931: LD_INT 4
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 4
72940: PUSH
72941: LD_INT 3
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 5
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 5
72960: PUSH
72961: LD_INT 5
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 4
72970: PUSH
72971: LD_INT 5
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 3
72980: PUSH
72981: LD_INT 4
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 3
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 5
73000: PUSH
73001: LD_INT 3
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: LD_INT 5
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 3
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 0
73030: PUSH
73031: LD_INT 2
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 1
73040: PUSH
73041: LD_INT 3
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 1
73050: PUSH
73051: LD_INT 4
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: LD_INT 4
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 1
73070: NEG
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 1
73081: NEG
73082: PUSH
73083: LD_INT 2
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: PUSH
73093: LD_INT 4
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 2
73102: NEG
73103: PUSH
73104: LD_INT 2
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 4
73113: NEG
73114: PUSH
73115: LD_INT 0
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 4
73124: NEG
73125: PUSH
73126: LD_INT 1
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 3
73136: NEG
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 3
73147: NEG
73148: PUSH
73149: LD_INT 1
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 4
73158: NEG
73159: PUSH
73160: LD_INT 1
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 5
73169: NEG
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 5
73180: NEG
73181: PUSH
73182: LD_INT 1
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 5
73192: NEG
73193: PUSH
73194: LD_INT 2
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 3
73204: NEG
73205: PUSH
73206: LD_INT 2
73208: PUSH
73209: EMPTY
73210: LIST
73211: LIST
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: ST_TO_ADDR
// end ; end ;
73260: GO 73263
73262: POP
// case btype of b_depot , b_warehouse :
73263: LD_VAR 0 1
73267: PUSH
73268: LD_INT 0
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73282
73274: LD_INT 1
73276: DOUBLE
73277: EQUAL
73278: IFTRUE 73282
73280: GO 73483
73282: POP
// case nation of nation_american :
73283: LD_VAR 0 5
73287: PUSH
73288: LD_INT 1
73290: DOUBLE
73291: EQUAL
73292: IFTRUE 73296
73294: GO 73352
73296: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73297: LD_ADDR_VAR 0 9
73301: PUSH
73302: LD_VAR 0 11
73306: PUSH
73307: LD_VAR 0 12
73311: PUSH
73312: LD_VAR 0 13
73316: PUSH
73317: LD_VAR 0 14
73321: PUSH
73322: LD_VAR 0 15
73326: PUSH
73327: LD_VAR 0 16
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: PUSH
73340: LD_VAR 0 4
73344: PUSH
73345: LD_INT 1
73347: PLUS
73348: ARRAY
73349: ST_TO_ADDR
73350: GO 73481
73352: LD_INT 2
73354: DOUBLE
73355: EQUAL
73356: IFTRUE 73360
73358: GO 73416
73360: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73361: LD_ADDR_VAR 0 9
73365: PUSH
73366: LD_VAR 0 17
73370: PUSH
73371: LD_VAR 0 18
73375: PUSH
73376: LD_VAR 0 19
73380: PUSH
73381: LD_VAR 0 20
73385: PUSH
73386: LD_VAR 0 21
73390: PUSH
73391: LD_VAR 0 22
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: PUSH
73404: LD_VAR 0 4
73408: PUSH
73409: LD_INT 1
73411: PLUS
73412: ARRAY
73413: ST_TO_ADDR
73414: GO 73481
73416: LD_INT 3
73418: DOUBLE
73419: EQUAL
73420: IFTRUE 73424
73422: GO 73480
73424: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73425: LD_ADDR_VAR 0 9
73429: PUSH
73430: LD_VAR 0 23
73434: PUSH
73435: LD_VAR 0 24
73439: PUSH
73440: LD_VAR 0 25
73444: PUSH
73445: LD_VAR 0 26
73449: PUSH
73450: LD_VAR 0 27
73454: PUSH
73455: LD_VAR 0 28
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: PUSH
73468: LD_VAR 0 4
73472: PUSH
73473: LD_INT 1
73475: PLUS
73476: ARRAY
73477: ST_TO_ADDR
73478: GO 73481
73480: POP
73481: GO 74036
73483: LD_INT 2
73485: DOUBLE
73486: EQUAL
73487: IFTRUE 73497
73489: LD_INT 3
73491: DOUBLE
73492: EQUAL
73493: IFTRUE 73497
73495: GO 73553
73497: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73498: LD_ADDR_VAR 0 9
73502: PUSH
73503: LD_VAR 0 29
73507: PUSH
73508: LD_VAR 0 30
73512: PUSH
73513: LD_VAR 0 31
73517: PUSH
73518: LD_VAR 0 32
73522: PUSH
73523: LD_VAR 0 33
73527: PUSH
73528: LD_VAR 0 34
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: PUSH
73541: LD_VAR 0 4
73545: PUSH
73546: LD_INT 1
73548: PLUS
73549: ARRAY
73550: ST_TO_ADDR
73551: GO 74036
73553: LD_INT 16
73555: DOUBLE
73556: EQUAL
73557: IFTRUE 73615
73559: LD_INT 17
73561: DOUBLE
73562: EQUAL
73563: IFTRUE 73615
73565: LD_INT 18
73567: DOUBLE
73568: EQUAL
73569: IFTRUE 73615
73571: LD_INT 19
73573: DOUBLE
73574: EQUAL
73575: IFTRUE 73615
73577: LD_INT 22
73579: DOUBLE
73580: EQUAL
73581: IFTRUE 73615
73583: LD_INT 20
73585: DOUBLE
73586: EQUAL
73587: IFTRUE 73615
73589: LD_INT 21
73591: DOUBLE
73592: EQUAL
73593: IFTRUE 73615
73595: LD_INT 23
73597: DOUBLE
73598: EQUAL
73599: IFTRUE 73615
73601: LD_INT 24
73603: DOUBLE
73604: EQUAL
73605: IFTRUE 73615
73607: LD_INT 25
73609: DOUBLE
73610: EQUAL
73611: IFTRUE 73615
73613: GO 73671
73615: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73616: LD_ADDR_VAR 0 9
73620: PUSH
73621: LD_VAR 0 35
73625: PUSH
73626: LD_VAR 0 36
73630: PUSH
73631: LD_VAR 0 37
73635: PUSH
73636: LD_VAR 0 38
73640: PUSH
73641: LD_VAR 0 39
73645: PUSH
73646: LD_VAR 0 40
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: PUSH
73659: LD_VAR 0 4
73663: PUSH
73664: LD_INT 1
73666: PLUS
73667: ARRAY
73668: ST_TO_ADDR
73669: GO 74036
73671: LD_INT 6
73673: DOUBLE
73674: EQUAL
73675: IFTRUE 73727
73677: LD_INT 7
73679: DOUBLE
73680: EQUAL
73681: IFTRUE 73727
73683: LD_INT 8
73685: DOUBLE
73686: EQUAL
73687: IFTRUE 73727
73689: LD_INT 13
73691: DOUBLE
73692: EQUAL
73693: IFTRUE 73727
73695: LD_INT 12
73697: DOUBLE
73698: EQUAL
73699: IFTRUE 73727
73701: LD_INT 15
73703: DOUBLE
73704: EQUAL
73705: IFTRUE 73727
73707: LD_INT 11
73709: DOUBLE
73710: EQUAL
73711: IFTRUE 73727
73713: LD_INT 14
73715: DOUBLE
73716: EQUAL
73717: IFTRUE 73727
73719: LD_INT 10
73721: DOUBLE
73722: EQUAL
73723: IFTRUE 73727
73725: GO 73783
73727: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73728: LD_ADDR_VAR 0 9
73732: PUSH
73733: LD_VAR 0 41
73737: PUSH
73738: LD_VAR 0 42
73742: PUSH
73743: LD_VAR 0 43
73747: PUSH
73748: LD_VAR 0 44
73752: PUSH
73753: LD_VAR 0 45
73757: PUSH
73758: LD_VAR 0 46
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: PUSH
73771: LD_VAR 0 4
73775: PUSH
73776: LD_INT 1
73778: PLUS
73779: ARRAY
73780: ST_TO_ADDR
73781: GO 74036
73783: LD_INT 36
73785: DOUBLE
73786: EQUAL
73787: IFTRUE 73791
73789: GO 73847
73791: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73792: LD_ADDR_VAR 0 9
73796: PUSH
73797: LD_VAR 0 47
73801: PUSH
73802: LD_VAR 0 48
73806: PUSH
73807: LD_VAR 0 49
73811: PUSH
73812: LD_VAR 0 50
73816: PUSH
73817: LD_VAR 0 51
73821: PUSH
73822: LD_VAR 0 52
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: PUSH
73835: LD_VAR 0 4
73839: PUSH
73840: LD_INT 1
73842: PLUS
73843: ARRAY
73844: ST_TO_ADDR
73845: GO 74036
73847: LD_INT 4
73849: DOUBLE
73850: EQUAL
73851: IFTRUE 73873
73853: LD_INT 5
73855: DOUBLE
73856: EQUAL
73857: IFTRUE 73873
73859: LD_INT 34
73861: DOUBLE
73862: EQUAL
73863: IFTRUE 73873
73865: LD_INT 37
73867: DOUBLE
73868: EQUAL
73869: IFTRUE 73873
73871: GO 73929
73873: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73874: LD_ADDR_VAR 0 9
73878: PUSH
73879: LD_VAR 0 53
73883: PUSH
73884: LD_VAR 0 54
73888: PUSH
73889: LD_VAR 0 55
73893: PUSH
73894: LD_VAR 0 56
73898: PUSH
73899: LD_VAR 0 57
73903: PUSH
73904: LD_VAR 0 58
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: PUSH
73917: LD_VAR 0 4
73921: PUSH
73922: LD_INT 1
73924: PLUS
73925: ARRAY
73926: ST_TO_ADDR
73927: GO 74036
73929: LD_INT 31
73931: DOUBLE
73932: EQUAL
73933: IFTRUE 73979
73935: LD_INT 32
73937: DOUBLE
73938: EQUAL
73939: IFTRUE 73979
73941: LD_INT 33
73943: DOUBLE
73944: EQUAL
73945: IFTRUE 73979
73947: LD_INT 27
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73979
73953: LD_INT 26
73955: DOUBLE
73956: EQUAL
73957: IFTRUE 73979
73959: LD_INT 28
73961: DOUBLE
73962: EQUAL
73963: IFTRUE 73979
73965: LD_INT 29
73967: DOUBLE
73968: EQUAL
73969: IFTRUE 73979
73971: LD_INT 30
73973: DOUBLE
73974: EQUAL
73975: IFTRUE 73979
73977: GO 74035
73979: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73980: LD_ADDR_VAR 0 9
73984: PUSH
73985: LD_VAR 0 59
73989: PUSH
73990: LD_VAR 0 60
73994: PUSH
73995: LD_VAR 0 61
73999: PUSH
74000: LD_VAR 0 62
74004: PUSH
74005: LD_VAR 0 63
74009: PUSH
74010: LD_VAR 0 64
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: PUSH
74023: LD_VAR 0 4
74027: PUSH
74028: LD_INT 1
74030: PLUS
74031: ARRAY
74032: ST_TO_ADDR
74033: GO 74036
74035: POP
// temp_list2 = [ ] ;
74036: LD_ADDR_VAR 0 10
74040: PUSH
74041: EMPTY
74042: ST_TO_ADDR
// for i in temp_list do
74043: LD_ADDR_VAR 0 8
74047: PUSH
74048: LD_VAR 0 9
74052: PUSH
74053: FOR_IN
74054: IFFALSE 74106
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74056: LD_ADDR_VAR 0 10
74060: PUSH
74061: LD_VAR 0 10
74065: PUSH
74066: LD_VAR 0 8
74070: PUSH
74071: LD_INT 1
74073: ARRAY
74074: PUSH
74075: LD_VAR 0 2
74079: PLUS
74080: PUSH
74081: LD_VAR 0 8
74085: PUSH
74086: LD_INT 2
74088: ARRAY
74089: PUSH
74090: LD_VAR 0 3
74094: PLUS
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: EMPTY
74101: LIST
74102: ADD
74103: ST_TO_ADDR
74104: GO 74053
74106: POP
74107: POP
// result = temp_list2 ;
74108: LD_ADDR_VAR 0 7
74112: PUSH
74113: LD_VAR 0 10
74117: ST_TO_ADDR
// end ;
74118: LD_VAR 0 7
74122: RET
// export function EnemyInRange ( unit , dist ) ; begin
74123: LD_INT 0
74125: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74126: LD_ADDR_VAR 0 3
74130: PUSH
74131: LD_VAR 0 1
74135: PPUSH
74136: CALL_OW 255
74140: PPUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: CALL_OW 250
74150: PPUSH
74151: LD_VAR 0 1
74155: PPUSH
74156: CALL_OW 251
74160: PPUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL 47519 0 4
74170: PUSH
74171: LD_INT 4
74173: ARRAY
74174: ST_TO_ADDR
// end ;
74175: LD_VAR 0 3
74179: RET
// export function PlayerSeeMe ( unit ) ; begin
74180: LD_INT 0
74182: PPUSH
// result := See ( your_side , unit ) ;
74183: LD_ADDR_VAR 0 2
74187: PUSH
74188: LD_OWVAR 2
74192: PPUSH
74193: LD_VAR 0 1
74197: PPUSH
74198: CALL_OW 292
74202: ST_TO_ADDR
// end ;
74203: LD_VAR 0 2
74207: RET
// export function ReverseDir ( unit ) ; begin
74208: LD_INT 0
74210: PPUSH
// if not unit then
74211: LD_VAR 0 1
74215: NOT
74216: IFFALSE 74220
// exit ;
74218: GO 74243
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74220: LD_ADDR_VAR 0 2
74224: PUSH
74225: LD_VAR 0 1
74229: PPUSH
74230: CALL_OW 254
74234: PUSH
74235: LD_INT 3
74237: PLUS
74238: PUSH
74239: LD_INT 6
74241: MOD
74242: ST_TO_ADDR
// end ;
74243: LD_VAR 0 2
74247: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74248: LD_INT 0
74250: PPUSH
74251: PPUSH
74252: PPUSH
74253: PPUSH
74254: PPUSH
// if not hexes then
74255: LD_VAR 0 2
74259: NOT
74260: IFFALSE 74264
// exit ;
74262: GO 74412
// dist := 9999 ;
74264: LD_ADDR_VAR 0 5
74268: PUSH
74269: LD_INT 9999
74271: ST_TO_ADDR
// for i = 1 to hexes do
74272: LD_ADDR_VAR 0 4
74276: PUSH
74277: DOUBLE
74278: LD_INT 1
74280: DEC
74281: ST_TO_ADDR
74282: LD_VAR 0 2
74286: PUSH
74287: FOR_TO
74288: IFFALSE 74400
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74290: LD_VAR 0 1
74294: PPUSH
74295: LD_VAR 0 2
74299: PUSH
74300: LD_VAR 0 4
74304: ARRAY
74305: PUSH
74306: LD_INT 1
74308: ARRAY
74309: PPUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_VAR 0 4
74319: ARRAY
74320: PUSH
74321: LD_INT 2
74323: ARRAY
74324: PPUSH
74325: CALL_OW 297
74329: PUSH
74330: LD_VAR 0 5
74334: LESS
74335: IFFALSE 74398
// begin hex := hexes [ i ] ;
74337: LD_ADDR_VAR 0 7
74341: PUSH
74342: LD_VAR 0 2
74346: PUSH
74347: LD_VAR 0 4
74351: ARRAY
74352: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74353: LD_ADDR_VAR 0 5
74357: PUSH
74358: LD_VAR 0 1
74362: PPUSH
74363: LD_VAR 0 2
74367: PUSH
74368: LD_VAR 0 4
74372: ARRAY
74373: PUSH
74374: LD_INT 1
74376: ARRAY
74377: PPUSH
74378: LD_VAR 0 2
74382: PUSH
74383: LD_VAR 0 4
74387: ARRAY
74388: PUSH
74389: LD_INT 2
74391: ARRAY
74392: PPUSH
74393: CALL_OW 297
74397: ST_TO_ADDR
// end ; end ;
74398: GO 74287
74400: POP
74401: POP
// result := hex ;
74402: LD_ADDR_VAR 0 3
74406: PUSH
74407: LD_VAR 0 7
74411: ST_TO_ADDR
// end ;
74412: LD_VAR 0 3
74416: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74417: LD_INT 0
74419: PPUSH
74420: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74421: LD_VAR 0 1
74425: NOT
74426: PUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 21
74434: PUSH
74435: LD_INT 2
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 23
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PPUSH
74456: CALL_OW 69
74460: IN
74461: NOT
74462: OR
74463: IFFALSE 74467
// exit ;
74465: GO 74514
// for i = 1 to 3 do
74467: LD_ADDR_VAR 0 3
74471: PUSH
74472: DOUBLE
74473: LD_INT 1
74475: DEC
74476: ST_TO_ADDR
74477: LD_INT 3
74479: PUSH
74480: FOR_TO
74481: IFFALSE 74512
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74483: LD_VAR 0 1
74487: PPUSH
74488: CALL_OW 250
74492: PPUSH
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL_OW 251
74502: PPUSH
74503: LD_INT 1
74505: PPUSH
74506: CALL_OW 453
74510: GO 74480
74512: POP
74513: POP
// end ;
74514: LD_VAR 0 2
74518: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
74524: PPUSH
74525: PPUSH
74526: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74527: LD_VAR 0 1
74531: NOT
74532: PUSH
74533: LD_VAR 0 2
74537: NOT
74538: OR
74539: PUSH
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 314
74549: OR
74550: IFFALSE 74554
// exit ;
74552: GO 74995
// x := GetX ( enemy_unit ) ;
74554: LD_ADDR_VAR 0 7
74558: PUSH
74559: LD_VAR 0 2
74563: PPUSH
74564: CALL_OW 250
74568: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74569: LD_ADDR_VAR 0 8
74573: PUSH
74574: LD_VAR 0 2
74578: PPUSH
74579: CALL_OW 251
74583: ST_TO_ADDR
// if not x or not y then
74584: LD_VAR 0 7
74588: NOT
74589: PUSH
74590: LD_VAR 0 8
74594: NOT
74595: OR
74596: IFFALSE 74600
// exit ;
74598: GO 74995
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74600: LD_ADDR_VAR 0 6
74604: PUSH
74605: LD_VAR 0 7
74609: PPUSH
74610: LD_INT 0
74612: PPUSH
74613: LD_INT 4
74615: PPUSH
74616: CALL_OW 272
74620: PUSH
74621: LD_VAR 0 8
74625: PPUSH
74626: LD_INT 0
74628: PPUSH
74629: LD_INT 4
74631: PPUSH
74632: CALL_OW 273
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_VAR 0 7
74645: PPUSH
74646: LD_INT 1
74648: PPUSH
74649: LD_INT 4
74651: PPUSH
74652: CALL_OW 272
74656: PUSH
74657: LD_VAR 0 8
74661: PPUSH
74662: LD_INT 1
74664: PPUSH
74665: LD_INT 4
74667: PPUSH
74668: CALL_OW 273
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PUSH
74677: LD_VAR 0 7
74681: PPUSH
74682: LD_INT 2
74684: PPUSH
74685: LD_INT 4
74687: PPUSH
74688: CALL_OW 272
74692: PUSH
74693: LD_VAR 0 8
74697: PPUSH
74698: LD_INT 2
74700: PPUSH
74701: LD_INT 4
74703: PPUSH
74704: CALL_OW 273
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_VAR 0 7
74717: PPUSH
74718: LD_INT 3
74720: PPUSH
74721: LD_INT 4
74723: PPUSH
74724: CALL_OW 272
74728: PUSH
74729: LD_VAR 0 8
74733: PPUSH
74734: LD_INT 3
74736: PPUSH
74737: LD_INT 4
74739: PPUSH
74740: CALL_OW 273
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_VAR 0 7
74753: PPUSH
74754: LD_INT 4
74756: PPUSH
74757: LD_INT 4
74759: PPUSH
74760: CALL_OW 272
74764: PUSH
74765: LD_VAR 0 8
74769: PPUSH
74770: LD_INT 4
74772: PPUSH
74773: LD_INT 4
74775: PPUSH
74776: CALL_OW 273
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_VAR 0 7
74789: PPUSH
74790: LD_INT 5
74792: PPUSH
74793: LD_INT 4
74795: PPUSH
74796: CALL_OW 272
74800: PUSH
74801: LD_VAR 0 8
74805: PPUSH
74806: LD_INT 5
74808: PPUSH
74809: LD_INT 4
74811: PPUSH
74812: CALL_OW 273
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: ST_TO_ADDR
// for i = tmp downto 1 do
74829: LD_ADDR_VAR 0 4
74833: PUSH
74834: DOUBLE
74835: LD_VAR 0 6
74839: INC
74840: ST_TO_ADDR
74841: LD_INT 1
74843: PUSH
74844: FOR_DOWNTO
74845: IFFALSE 74946
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74847: LD_VAR 0 6
74851: PUSH
74852: LD_VAR 0 4
74856: ARRAY
74857: PUSH
74858: LD_INT 1
74860: ARRAY
74861: PPUSH
74862: LD_VAR 0 6
74866: PUSH
74867: LD_VAR 0 4
74871: ARRAY
74872: PUSH
74873: LD_INT 2
74875: ARRAY
74876: PPUSH
74877: CALL_OW 488
74881: NOT
74882: PUSH
74883: LD_VAR 0 6
74887: PUSH
74888: LD_VAR 0 4
74892: ARRAY
74893: PUSH
74894: LD_INT 1
74896: ARRAY
74897: PPUSH
74898: LD_VAR 0 6
74902: PUSH
74903: LD_VAR 0 4
74907: ARRAY
74908: PUSH
74909: LD_INT 2
74911: ARRAY
74912: PPUSH
74913: CALL_OW 428
74917: PUSH
74918: LD_INT 0
74920: NONEQUAL
74921: OR
74922: IFFALSE 74944
// tmp := Delete ( tmp , i ) ;
74924: LD_ADDR_VAR 0 6
74928: PUSH
74929: LD_VAR 0 6
74933: PPUSH
74934: LD_VAR 0 4
74938: PPUSH
74939: CALL_OW 3
74943: ST_TO_ADDR
74944: GO 74844
74946: POP
74947: POP
// j := GetClosestHex ( unit , tmp ) ;
74948: LD_ADDR_VAR 0 5
74952: PUSH
74953: LD_VAR 0 1
74957: PPUSH
74958: LD_VAR 0 6
74962: PPUSH
74963: CALL 74248 0 2
74967: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74968: LD_VAR 0 1
74972: PPUSH
74973: LD_VAR 0 5
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: PPUSH
74982: LD_VAR 0 5
74986: PUSH
74987: LD_INT 2
74989: ARRAY
74990: PPUSH
74991: CALL_OW 111
// end ;
74995: LD_VAR 0 3
74999: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75000: LD_INT 0
75002: PPUSH
75003: PPUSH
75004: PPUSH
// uc_side = 0 ;
75005: LD_ADDR_OWVAR 20
75009: PUSH
75010: LD_INT 0
75012: ST_TO_ADDR
// uc_nation = 0 ;
75013: LD_ADDR_OWVAR 21
75017: PUSH
75018: LD_INT 0
75020: ST_TO_ADDR
// InitHc_All ( ) ;
75021: CALL_OW 584
// InitVc ;
75025: CALL_OW 20
// if mastodonts then
75029: LD_VAR 0 6
75033: IFFALSE 75100
// for i = 1 to mastodonts do
75035: LD_ADDR_VAR 0 11
75039: PUSH
75040: DOUBLE
75041: LD_INT 1
75043: DEC
75044: ST_TO_ADDR
75045: LD_VAR 0 6
75049: PUSH
75050: FOR_TO
75051: IFFALSE 75098
// begin vc_chassis := 31 ;
75053: LD_ADDR_OWVAR 37
75057: PUSH
75058: LD_INT 31
75060: ST_TO_ADDR
// vc_control := control_rider ;
75061: LD_ADDR_OWVAR 38
75065: PUSH
75066: LD_INT 4
75068: ST_TO_ADDR
// animal := CreateVehicle ;
75069: LD_ADDR_VAR 0 12
75073: PUSH
75074: CALL_OW 45
75078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75079: LD_VAR 0 12
75083: PPUSH
75084: LD_VAR 0 8
75088: PPUSH
75089: LD_INT 0
75091: PPUSH
75092: CALL 77288 0 3
// end ;
75096: GO 75050
75098: POP
75099: POP
// if horses then
75100: LD_VAR 0 5
75104: IFFALSE 75171
// for i = 1 to horses do
75106: LD_ADDR_VAR 0 11
75110: PUSH
75111: DOUBLE
75112: LD_INT 1
75114: DEC
75115: ST_TO_ADDR
75116: LD_VAR 0 5
75120: PUSH
75121: FOR_TO
75122: IFFALSE 75169
// begin hc_class := 21 ;
75124: LD_ADDR_OWVAR 28
75128: PUSH
75129: LD_INT 21
75131: ST_TO_ADDR
// hc_gallery :=  ;
75132: LD_ADDR_OWVAR 33
75136: PUSH
75137: LD_STRING 
75139: ST_TO_ADDR
// animal := CreateHuman ;
75140: LD_ADDR_VAR 0 12
75144: PUSH
75145: CALL_OW 44
75149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75150: LD_VAR 0 12
75154: PPUSH
75155: LD_VAR 0 8
75159: PPUSH
75160: LD_INT 0
75162: PPUSH
75163: CALL 77288 0 3
// end ;
75167: GO 75121
75169: POP
75170: POP
// if birds then
75171: LD_VAR 0 1
75175: IFFALSE 75242
// for i = 1 to birds do
75177: LD_ADDR_VAR 0 11
75181: PUSH
75182: DOUBLE
75183: LD_INT 1
75185: DEC
75186: ST_TO_ADDR
75187: LD_VAR 0 1
75191: PUSH
75192: FOR_TO
75193: IFFALSE 75240
// begin hc_class = 18 ;
75195: LD_ADDR_OWVAR 28
75199: PUSH
75200: LD_INT 18
75202: ST_TO_ADDR
// hc_gallery =  ;
75203: LD_ADDR_OWVAR 33
75207: PUSH
75208: LD_STRING 
75210: ST_TO_ADDR
// animal := CreateHuman ;
75211: LD_ADDR_VAR 0 12
75215: PUSH
75216: CALL_OW 44
75220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75221: LD_VAR 0 12
75225: PPUSH
75226: LD_VAR 0 8
75230: PPUSH
75231: LD_INT 0
75233: PPUSH
75234: CALL 77288 0 3
// end ;
75238: GO 75192
75240: POP
75241: POP
// if tigers then
75242: LD_VAR 0 2
75246: IFFALSE 75330
// for i = 1 to tigers do
75248: LD_ADDR_VAR 0 11
75252: PUSH
75253: DOUBLE
75254: LD_INT 1
75256: DEC
75257: ST_TO_ADDR
75258: LD_VAR 0 2
75262: PUSH
75263: FOR_TO
75264: IFFALSE 75328
// begin hc_class = class_tiger ;
75266: LD_ADDR_OWVAR 28
75270: PUSH
75271: LD_INT 14
75273: ST_TO_ADDR
// hc_gallery =  ;
75274: LD_ADDR_OWVAR 33
75278: PUSH
75279: LD_STRING 
75281: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75282: LD_ADDR_OWVAR 35
75286: PUSH
75287: LD_INT 7
75289: NEG
75290: PPUSH
75291: LD_INT 7
75293: PPUSH
75294: CALL_OW 12
75298: ST_TO_ADDR
// animal := CreateHuman ;
75299: LD_ADDR_VAR 0 12
75303: PUSH
75304: CALL_OW 44
75308: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75309: LD_VAR 0 12
75313: PPUSH
75314: LD_VAR 0 8
75318: PPUSH
75319: LD_INT 0
75321: PPUSH
75322: CALL 77288 0 3
// end ;
75326: GO 75263
75328: POP
75329: POP
// if apemans then
75330: LD_VAR 0 3
75334: IFFALSE 75457
// for i = 1 to apemans do
75336: LD_ADDR_VAR 0 11
75340: PUSH
75341: DOUBLE
75342: LD_INT 1
75344: DEC
75345: ST_TO_ADDR
75346: LD_VAR 0 3
75350: PUSH
75351: FOR_TO
75352: IFFALSE 75455
// begin hc_class = class_apeman ;
75354: LD_ADDR_OWVAR 28
75358: PUSH
75359: LD_INT 12
75361: ST_TO_ADDR
// hc_gallery =  ;
75362: LD_ADDR_OWVAR 33
75366: PUSH
75367: LD_STRING 
75369: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75370: LD_ADDR_OWVAR 35
75374: PUSH
75375: LD_INT 2
75377: NEG
75378: PPUSH
75379: LD_INT 2
75381: PPUSH
75382: CALL_OW 12
75386: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75387: LD_ADDR_OWVAR 31
75391: PUSH
75392: LD_INT 1
75394: PPUSH
75395: LD_INT 3
75397: PPUSH
75398: CALL_OW 12
75402: PUSH
75403: LD_INT 1
75405: PPUSH
75406: LD_INT 3
75408: PPUSH
75409: CALL_OW 12
75413: PUSH
75414: LD_INT 0
75416: PUSH
75417: LD_INT 0
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: ST_TO_ADDR
// animal := CreateHuman ;
75426: LD_ADDR_VAR 0 12
75430: PUSH
75431: CALL_OW 44
75435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75436: LD_VAR 0 12
75440: PPUSH
75441: LD_VAR 0 8
75445: PPUSH
75446: LD_INT 0
75448: PPUSH
75449: CALL 77288 0 3
// end ;
75453: GO 75351
75455: POP
75456: POP
// if enchidnas then
75457: LD_VAR 0 4
75461: IFFALSE 75528
// for i = 1 to enchidnas do
75463: LD_ADDR_VAR 0 11
75467: PUSH
75468: DOUBLE
75469: LD_INT 1
75471: DEC
75472: ST_TO_ADDR
75473: LD_VAR 0 4
75477: PUSH
75478: FOR_TO
75479: IFFALSE 75526
// begin hc_class = 13 ;
75481: LD_ADDR_OWVAR 28
75485: PUSH
75486: LD_INT 13
75488: ST_TO_ADDR
// hc_gallery =  ;
75489: LD_ADDR_OWVAR 33
75493: PUSH
75494: LD_STRING 
75496: ST_TO_ADDR
// animal := CreateHuman ;
75497: LD_ADDR_VAR 0 12
75501: PUSH
75502: CALL_OW 44
75506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75507: LD_VAR 0 12
75511: PPUSH
75512: LD_VAR 0 8
75516: PPUSH
75517: LD_INT 0
75519: PPUSH
75520: CALL 77288 0 3
// end ;
75524: GO 75478
75526: POP
75527: POP
// if fishes then
75528: LD_VAR 0 7
75532: IFFALSE 75599
// for i = 1 to fishes do
75534: LD_ADDR_VAR 0 11
75538: PUSH
75539: DOUBLE
75540: LD_INT 1
75542: DEC
75543: ST_TO_ADDR
75544: LD_VAR 0 7
75548: PUSH
75549: FOR_TO
75550: IFFALSE 75597
// begin hc_class = 20 ;
75552: LD_ADDR_OWVAR 28
75556: PUSH
75557: LD_INT 20
75559: ST_TO_ADDR
// hc_gallery =  ;
75560: LD_ADDR_OWVAR 33
75564: PUSH
75565: LD_STRING 
75567: ST_TO_ADDR
// animal := CreateHuman ;
75568: LD_ADDR_VAR 0 12
75572: PUSH
75573: CALL_OW 44
75577: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75578: LD_VAR 0 12
75582: PPUSH
75583: LD_VAR 0 9
75587: PPUSH
75588: LD_INT 0
75590: PPUSH
75591: CALL 77288 0 3
// end ;
75595: GO 75549
75597: POP
75598: POP
// end ;
75599: LD_VAR 0 10
75603: RET
// export function WantHeal ( sci , unit ) ; begin
75604: LD_INT 0
75606: PPUSH
// if GetTaskList ( sci ) > 0 then
75607: LD_VAR 0 1
75611: PPUSH
75612: CALL_OW 437
75616: PUSH
75617: LD_INT 0
75619: GREATER
75620: IFFALSE 75690
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75622: LD_VAR 0 1
75626: PPUSH
75627: CALL_OW 437
75631: PUSH
75632: LD_INT 1
75634: ARRAY
75635: PUSH
75636: LD_INT 1
75638: ARRAY
75639: PUSH
75640: LD_STRING l
75642: EQUAL
75643: PUSH
75644: LD_VAR 0 1
75648: PPUSH
75649: CALL_OW 437
75653: PUSH
75654: LD_INT 1
75656: ARRAY
75657: PUSH
75658: LD_INT 4
75660: ARRAY
75661: PUSH
75662: LD_VAR 0 2
75666: EQUAL
75667: AND
75668: IFFALSE 75680
// result := true else
75670: LD_ADDR_VAR 0 3
75674: PUSH
75675: LD_INT 1
75677: ST_TO_ADDR
75678: GO 75688
// result := false ;
75680: LD_ADDR_VAR 0 3
75684: PUSH
75685: LD_INT 0
75687: ST_TO_ADDR
// end else
75688: GO 75698
// result := false ;
75690: LD_ADDR_VAR 0 3
75694: PUSH
75695: LD_INT 0
75697: ST_TO_ADDR
// end ;
75698: LD_VAR 0 3
75702: RET
// export function HealTarget ( sci ) ; begin
75703: LD_INT 0
75705: PPUSH
// if not sci then
75706: LD_VAR 0 1
75710: NOT
75711: IFFALSE 75715
// exit ;
75713: GO 75780
// result := 0 ;
75715: LD_ADDR_VAR 0 2
75719: PUSH
75720: LD_INT 0
75722: ST_TO_ADDR
// if GetTaskList ( sci ) then
75723: LD_VAR 0 1
75727: PPUSH
75728: CALL_OW 437
75732: IFFALSE 75780
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75734: LD_VAR 0 1
75738: PPUSH
75739: CALL_OW 437
75743: PUSH
75744: LD_INT 1
75746: ARRAY
75747: PUSH
75748: LD_INT 1
75750: ARRAY
75751: PUSH
75752: LD_STRING l
75754: EQUAL
75755: IFFALSE 75780
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75757: LD_ADDR_VAR 0 2
75761: PUSH
75762: LD_VAR 0 1
75766: PPUSH
75767: CALL_OW 437
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: PUSH
75776: LD_INT 4
75778: ARRAY
75779: ST_TO_ADDR
// end ;
75780: LD_VAR 0 2
75784: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75785: LD_INT 0
75787: PPUSH
75788: PPUSH
75789: PPUSH
75790: PPUSH
// if not base_units then
75791: LD_VAR 0 1
75795: NOT
75796: IFFALSE 75800
// exit ;
75798: GO 75887
// result := false ;
75800: LD_ADDR_VAR 0 2
75804: PUSH
75805: LD_INT 0
75807: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75808: LD_ADDR_VAR 0 5
75812: PUSH
75813: LD_VAR 0 1
75817: PPUSH
75818: LD_INT 21
75820: PUSH
75821: LD_INT 3
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PPUSH
75828: CALL_OW 72
75832: ST_TO_ADDR
// if not tmp then
75833: LD_VAR 0 5
75837: NOT
75838: IFFALSE 75842
// exit ;
75840: GO 75887
// for i in tmp do
75842: LD_ADDR_VAR 0 3
75846: PUSH
75847: LD_VAR 0 5
75851: PUSH
75852: FOR_IN
75853: IFFALSE 75885
// begin result := EnemyInRange ( i , 22 ) ;
75855: LD_ADDR_VAR 0 2
75859: PUSH
75860: LD_VAR 0 3
75864: PPUSH
75865: LD_INT 22
75867: PPUSH
75868: CALL 74123 0 2
75872: ST_TO_ADDR
// if result then
75873: LD_VAR 0 2
75877: IFFALSE 75883
// exit ;
75879: POP
75880: POP
75881: GO 75887
// end ;
75883: GO 75852
75885: POP
75886: POP
// end ;
75887: LD_VAR 0 2
75891: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75892: LD_INT 0
75894: PPUSH
75895: PPUSH
// if not units then
75896: LD_VAR 0 1
75900: NOT
75901: IFFALSE 75905
// exit ;
75903: GO 75975
// result := [ ] ;
75905: LD_ADDR_VAR 0 3
75909: PUSH
75910: EMPTY
75911: ST_TO_ADDR
// for i in units do
75912: LD_ADDR_VAR 0 4
75916: PUSH
75917: LD_VAR 0 1
75921: PUSH
75922: FOR_IN
75923: IFFALSE 75973
// if GetTag ( i ) = tag then
75925: LD_VAR 0 4
75929: PPUSH
75930: CALL_OW 110
75934: PUSH
75935: LD_VAR 0 2
75939: EQUAL
75940: IFFALSE 75971
// result := Insert ( result , result + 1 , i ) ;
75942: LD_ADDR_VAR 0 3
75946: PUSH
75947: LD_VAR 0 3
75951: PPUSH
75952: LD_VAR 0 3
75956: PUSH
75957: LD_INT 1
75959: PLUS
75960: PPUSH
75961: LD_VAR 0 4
75965: PPUSH
75966: CALL_OW 2
75970: ST_TO_ADDR
75971: GO 75922
75973: POP
75974: POP
// end ;
75975: LD_VAR 0 3
75979: RET
// export function IsDriver ( un ) ; begin
75980: LD_INT 0
75982: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75983: LD_ADDR_VAR 0 2
75987: PUSH
75988: LD_VAR 0 1
75992: PUSH
75993: LD_INT 55
75995: PUSH
75996: EMPTY
75997: LIST
75998: PPUSH
75999: CALL_OW 69
76003: IN
76004: ST_TO_ADDR
// end ;
76005: LD_VAR 0 2
76009: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76010: LD_INT 0
76012: PPUSH
76013: PPUSH
// list := [ ] ;
76014: LD_ADDR_VAR 0 5
76018: PUSH
76019: EMPTY
76020: ST_TO_ADDR
// case d of 0 :
76021: LD_VAR 0 3
76025: PUSH
76026: LD_INT 0
76028: DOUBLE
76029: EQUAL
76030: IFTRUE 76034
76032: GO 76167
76034: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76035: LD_ADDR_VAR 0 5
76039: PUSH
76040: LD_VAR 0 1
76044: PUSH
76045: LD_INT 4
76047: MINUS
76048: PUSH
76049: LD_VAR 0 2
76053: PUSH
76054: LD_INT 4
76056: MINUS
76057: PUSH
76058: LD_INT 2
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: LIST
76065: PUSH
76066: LD_VAR 0 1
76070: PUSH
76071: LD_INT 3
76073: MINUS
76074: PUSH
76075: LD_VAR 0 2
76079: PUSH
76080: LD_INT 1
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: LIST
76087: PUSH
76088: LD_VAR 0 1
76092: PUSH
76093: LD_INT 4
76095: PLUS
76096: PUSH
76097: LD_VAR 0 2
76101: PUSH
76102: LD_INT 4
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: LIST
76109: PUSH
76110: LD_VAR 0 1
76114: PUSH
76115: LD_INT 3
76117: PLUS
76118: PUSH
76119: LD_VAR 0 2
76123: PUSH
76124: LD_INT 3
76126: PLUS
76127: PUSH
76128: LD_INT 5
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: LIST
76135: PUSH
76136: LD_VAR 0 1
76140: PUSH
76141: LD_VAR 0 2
76145: PUSH
76146: LD_INT 4
76148: PLUS
76149: PUSH
76150: LD_INT 0
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: ST_TO_ADDR
// end ; 1 :
76165: GO 76865
76167: LD_INT 1
76169: DOUBLE
76170: EQUAL
76171: IFTRUE 76175
76173: GO 76308
76175: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76176: LD_ADDR_VAR 0 5
76180: PUSH
76181: LD_VAR 0 1
76185: PUSH
76186: LD_VAR 0 2
76190: PUSH
76191: LD_INT 4
76193: MINUS
76194: PUSH
76195: LD_INT 3
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: LIST
76202: PUSH
76203: LD_VAR 0 1
76207: PUSH
76208: LD_INT 3
76210: MINUS
76211: PUSH
76212: LD_VAR 0 2
76216: PUSH
76217: LD_INT 3
76219: MINUS
76220: PUSH
76221: LD_INT 2
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: LIST
76228: PUSH
76229: LD_VAR 0 1
76233: PUSH
76234: LD_INT 4
76236: MINUS
76237: PUSH
76238: LD_VAR 0 2
76242: PUSH
76243: LD_INT 1
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: LIST
76250: PUSH
76251: LD_VAR 0 1
76255: PUSH
76256: LD_VAR 0 2
76260: PUSH
76261: LD_INT 3
76263: PLUS
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: LIST
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_INT 4
76280: PLUS
76281: PUSH
76282: LD_VAR 0 2
76286: PUSH
76287: LD_INT 4
76289: PLUS
76290: PUSH
76291: LD_INT 5
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: LIST
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: ST_TO_ADDR
// end ; 2 :
76306: GO 76865
76308: LD_INT 2
76310: DOUBLE
76311: EQUAL
76312: IFTRUE 76316
76314: GO 76445
76316: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76317: LD_ADDR_VAR 0 5
76321: PUSH
76322: LD_VAR 0 1
76326: PUSH
76327: LD_VAR 0 2
76331: PUSH
76332: LD_INT 3
76334: MINUS
76335: PUSH
76336: LD_INT 3
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: LIST
76343: PUSH
76344: LD_VAR 0 1
76348: PUSH
76349: LD_INT 4
76351: PLUS
76352: PUSH
76353: LD_VAR 0 2
76357: PUSH
76358: LD_INT 4
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: LIST
76365: PUSH
76366: LD_VAR 0 1
76370: PUSH
76371: LD_VAR 0 2
76375: PUSH
76376: LD_INT 4
76378: PLUS
76379: PUSH
76380: LD_INT 0
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: LIST
76387: PUSH
76388: LD_VAR 0 1
76392: PUSH
76393: LD_INT 3
76395: MINUS
76396: PUSH
76397: LD_VAR 0 2
76401: PUSH
76402: LD_INT 1
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: LIST
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_INT 4
76417: MINUS
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_INT 4
76426: MINUS
76427: PUSH
76428: LD_INT 2
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: LIST
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: ST_TO_ADDR
// end ; 3 :
76443: GO 76865
76445: LD_INT 3
76447: DOUBLE
76448: EQUAL
76449: IFTRUE 76453
76451: GO 76586
76453: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76454: LD_ADDR_VAR 0 5
76458: PUSH
76459: LD_VAR 0 1
76463: PUSH
76464: LD_INT 3
76466: PLUS
76467: PUSH
76468: LD_VAR 0 2
76472: PUSH
76473: LD_INT 4
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: LIST
76480: PUSH
76481: LD_VAR 0 1
76485: PUSH
76486: LD_INT 4
76488: PLUS
76489: PUSH
76490: LD_VAR 0 2
76494: PUSH
76495: LD_INT 4
76497: PLUS
76498: PUSH
76499: LD_INT 5
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: LIST
76506: PUSH
76507: LD_VAR 0 1
76511: PUSH
76512: LD_INT 4
76514: MINUS
76515: PUSH
76516: LD_VAR 0 2
76520: PUSH
76521: LD_INT 1
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: LIST
76528: PUSH
76529: LD_VAR 0 1
76533: PUSH
76534: LD_VAR 0 2
76538: PUSH
76539: LD_INT 4
76541: MINUS
76542: PUSH
76543: LD_INT 3
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: LIST
76550: PUSH
76551: LD_VAR 0 1
76555: PUSH
76556: LD_INT 3
76558: MINUS
76559: PUSH
76560: LD_VAR 0 2
76564: PUSH
76565: LD_INT 3
76567: MINUS
76568: PUSH
76569: LD_INT 2
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: ST_TO_ADDR
// end ; 4 :
76584: GO 76865
76586: LD_INT 4
76588: DOUBLE
76589: EQUAL
76590: IFTRUE 76594
76592: GO 76727
76594: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76595: LD_ADDR_VAR 0 5
76599: PUSH
76600: LD_VAR 0 1
76604: PUSH
76605: LD_VAR 0 2
76609: PUSH
76610: LD_INT 4
76612: PLUS
76613: PUSH
76614: LD_INT 0
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: LIST
76621: PUSH
76622: LD_VAR 0 1
76626: PUSH
76627: LD_INT 3
76629: PLUS
76630: PUSH
76631: LD_VAR 0 2
76635: PUSH
76636: LD_INT 3
76638: PLUS
76639: PUSH
76640: LD_INT 5
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: LIST
76647: PUSH
76648: LD_VAR 0 1
76652: PUSH
76653: LD_INT 4
76655: PLUS
76656: PUSH
76657: LD_VAR 0 2
76661: PUSH
76662: LD_INT 4
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: LIST
76669: PUSH
76670: LD_VAR 0 1
76674: PUSH
76675: LD_VAR 0 2
76679: PUSH
76680: LD_INT 3
76682: MINUS
76683: PUSH
76684: LD_INT 3
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: LIST
76691: PUSH
76692: LD_VAR 0 1
76696: PUSH
76697: LD_INT 4
76699: MINUS
76700: PUSH
76701: LD_VAR 0 2
76705: PUSH
76706: LD_INT 4
76708: MINUS
76709: PUSH
76710: LD_INT 2
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: LIST
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: ST_TO_ADDR
// end ; 5 :
76725: GO 76865
76727: LD_INT 5
76729: DOUBLE
76730: EQUAL
76731: IFTRUE 76735
76733: GO 76864
76735: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76736: LD_ADDR_VAR 0 5
76740: PUSH
76741: LD_VAR 0 1
76745: PUSH
76746: LD_INT 4
76748: MINUS
76749: PUSH
76750: LD_VAR 0 2
76754: PUSH
76755: LD_INT 1
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: LIST
76762: PUSH
76763: LD_VAR 0 1
76767: PUSH
76768: LD_VAR 0 2
76772: PUSH
76773: LD_INT 4
76775: MINUS
76776: PUSH
76777: LD_INT 3
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: LIST
76784: PUSH
76785: LD_VAR 0 1
76789: PUSH
76790: LD_INT 4
76792: PLUS
76793: PUSH
76794: LD_VAR 0 2
76798: PUSH
76799: LD_INT 4
76801: PLUS
76802: PUSH
76803: LD_INT 5
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: LIST
76810: PUSH
76811: LD_VAR 0 1
76815: PUSH
76816: LD_INT 3
76818: PLUS
76819: PUSH
76820: LD_VAR 0 2
76824: PUSH
76825: LD_INT 4
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: LIST
76832: PUSH
76833: LD_VAR 0 1
76837: PUSH
76838: LD_VAR 0 2
76842: PUSH
76843: LD_INT 3
76845: PLUS
76846: PUSH
76847: LD_INT 0
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: LIST
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: ST_TO_ADDR
// end ; end ;
76862: GO 76865
76864: POP
// result := list ;
76865: LD_ADDR_VAR 0 4
76869: PUSH
76870: LD_VAR 0 5
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 4
76879: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76880: LD_INT 0
76882: PPUSH
76883: PPUSH
76884: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76885: LD_VAR 0 1
76889: NOT
76890: PUSH
76891: LD_VAR 0 2
76895: PUSH
76896: LD_INT 1
76898: PUSH
76899: LD_INT 2
76901: PUSH
76902: LD_INT 3
76904: PUSH
76905: LD_INT 4
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: IN
76914: NOT
76915: OR
76916: IFFALSE 76920
// exit ;
76918: GO 77012
// tmp := [ ] ;
76920: LD_ADDR_VAR 0 5
76924: PUSH
76925: EMPTY
76926: ST_TO_ADDR
// for i in units do
76927: LD_ADDR_VAR 0 4
76931: PUSH
76932: LD_VAR 0 1
76936: PUSH
76937: FOR_IN
76938: IFFALSE 76981
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76940: LD_ADDR_VAR 0 5
76944: PUSH
76945: LD_VAR 0 5
76949: PPUSH
76950: LD_VAR 0 5
76954: PUSH
76955: LD_INT 1
76957: PLUS
76958: PPUSH
76959: LD_VAR 0 4
76963: PPUSH
76964: LD_VAR 0 2
76968: PPUSH
76969: CALL_OW 259
76973: PPUSH
76974: CALL_OW 2
76978: ST_TO_ADDR
76979: GO 76937
76981: POP
76982: POP
// if not tmp then
76983: LD_VAR 0 5
76987: NOT
76988: IFFALSE 76992
// exit ;
76990: GO 77012
// result := SortListByListDesc ( units , tmp ) ;
76992: LD_ADDR_VAR 0 3
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: LD_VAR 0 5
77006: PPUSH
77007: CALL_OW 77
77011: ST_TO_ADDR
// end ;
77012: LD_VAR 0 3
77016: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77017: LD_INT 0
77019: PPUSH
77020: PPUSH
77021: PPUSH
// result := false ;
77022: LD_ADDR_VAR 0 3
77026: PUSH
77027: LD_INT 0
77029: ST_TO_ADDR
// x := GetX ( building ) ;
77030: LD_ADDR_VAR 0 4
77034: PUSH
77035: LD_VAR 0 2
77039: PPUSH
77040: CALL_OW 250
77044: ST_TO_ADDR
// y := GetY ( building ) ;
77045: LD_ADDR_VAR 0 5
77049: PUSH
77050: LD_VAR 0 2
77054: PPUSH
77055: CALL_OW 251
77059: ST_TO_ADDR
// if not building or not x or not y then
77060: LD_VAR 0 2
77064: NOT
77065: PUSH
77066: LD_VAR 0 4
77070: NOT
77071: OR
77072: PUSH
77073: LD_VAR 0 5
77077: NOT
77078: OR
77079: IFFALSE 77083
// exit ;
77081: GO 77175
// if GetTaskList ( unit ) then
77083: LD_VAR 0 1
77087: PPUSH
77088: CALL_OW 437
77092: IFFALSE 77175
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77094: LD_STRING e
77096: PUSH
77097: LD_VAR 0 1
77101: PPUSH
77102: CALL_OW 437
77106: PUSH
77107: LD_INT 1
77109: ARRAY
77110: PUSH
77111: LD_INT 1
77113: ARRAY
77114: EQUAL
77115: PUSH
77116: LD_VAR 0 4
77120: PUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 437
77130: PUSH
77131: LD_INT 1
77133: ARRAY
77134: PUSH
77135: LD_INT 2
77137: ARRAY
77138: EQUAL
77139: AND
77140: PUSH
77141: LD_VAR 0 5
77145: PUSH
77146: LD_VAR 0 1
77150: PPUSH
77151: CALL_OW 437
77155: PUSH
77156: LD_INT 1
77158: ARRAY
77159: PUSH
77160: LD_INT 3
77162: ARRAY
77163: EQUAL
77164: AND
77165: IFFALSE 77175
// result := true end ;
77167: LD_ADDR_VAR 0 3
77171: PUSH
77172: LD_INT 1
77174: ST_TO_ADDR
// end ;
77175: LD_VAR 0 3
77179: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77180: LD_INT 0
77182: PPUSH
// result := false ;
77183: LD_ADDR_VAR 0 4
77187: PUSH
77188: LD_INT 0
77190: ST_TO_ADDR
// if GetTaskList ( unit ) then
77191: LD_VAR 0 1
77195: PPUSH
77196: CALL_OW 437
77200: IFFALSE 77283
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77202: LD_STRING M
77204: PUSH
77205: LD_VAR 0 1
77209: PPUSH
77210: CALL_OW 437
77214: PUSH
77215: LD_INT 1
77217: ARRAY
77218: PUSH
77219: LD_INT 1
77221: ARRAY
77222: EQUAL
77223: PUSH
77224: LD_VAR 0 2
77228: PUSH
77229: LD_VAR 0 1
77233: PPUSH
77234: CALL_OW 437
77238: PUSH
77239: LD_INT 1
77241: ARRAY
77242: PUSH
77243: LD_INT 2
77245: ARRAY
77246: EQUAL
77247: AND
77248: PUSH
77249: LD_VAR 0 3
77253: PUSH
77254: LD_VAR 0 1
77258: PPUSH
77259: CALL_OW 437
77263: PUSH
77264: LD_INT 1
77266: ARRAY
77267: PUSH
77268: LD_INT 3
77270: ARRAY
77271: EQUAL
77272: AND
77273: IFFALSE 77283
// result := true ;
77275: LD_ADDR_VAR 0 4
77279: PUSH
77280: LD_INT 1
77282: ST_TO_ADDR
// end ; end ;
77283: LD_VAR 0 4
77287: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77288: LD_INT 0
77290: PPUSH
77291: PPUSH
77292: PPUSH
77293: PPUSH
// if not unit or not area then
77294: LD_VAR 0 1
77298: NOT
77299: PUSH
77300: LD_VAR 0 2
77304: NOT
77305: OR
77306: IFFALSE 77310
// exit ;
77308: GO 77474
// tmp := AreaToList ( area , i ) ;
77310: LD_ADDR_VAR 0 6
77314: PUSH
77315: LD_VAR 0 2
77319: PPUSH
77320: LD_VAR 0 5
77324: PPUSH
77325: CALL_OW 517
77329: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77330: LD_ADDR_VAR 0 5
77334: PUSH
77335: DOUBLE
77336: LD_INT 1
77338: DEC
77339: ST_TO_ADDR
77340: LD_VAR 0 6
77344: PUSH
77345: LD_INT 1
77347: ARRAY
77348: PUSH
77349: FOR_TO
77350: IFFALSE 77472
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77352: LD_ADDR_VAR 0 7
77356: PUSH
77357: LD_VAR 0 6
77361: PUSH
77362: LD_INT 1
77364: ARRAY
77365: PUSH
77366: LD_VAR 0 5
77370: ARRAY
77371: PUSH
77372: LD_VAR 0 6
77376: PUSH
77377: LD_INT 2
77379: ARRAY
77380: PUSH
77381: LD_VAR 0 5
77385: ARRAY
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77391: LD_VAR 0 7
77395: PUSH
77396: LD_INT 1
77398: ARRAY
77399: PPUSH
77400: LD_VAR 0 7
77404: PUSH
77405: LD_INT 2
77407: ARRAY
77408: PPUSH
77409: CALL_OW 428
77413: PUSH
77414: LD_INT 0
77416: EQUAL
77417: IFFALSE 77470
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77419: LD_VAR 0 1
77423: PPUSH
77424: LD_VAR 0 7
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: PPUSH
77433: LD_VAR 0 7
77437: PUSH
77438: LD_INT 2
77440: ARRAY
77441: PPUSH
77442: LD_VAR 0 3
77446: PPUSH
77447: CALL_OW 48
// result := IsPlaced ( unit ) ;
77451: LD_ADDR_VAR 0 4
77455: PUSH
77456: LD_VAR 0 1
77460: PPUSH
77461: CALL_OW 305
77465: ST_TO_ADDR
// exit ;
77466: POP
77467: POP
77468: GO 77474
// end ; end ;
77470: GO 77349
77472: POP
77473: POP
// end ;
77474: LD_VAR 0 4
77478: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77479: LD_INT 0
77481: PPUSH
77482: PPUSH
77483: PPUSH
// if not side or side > 8 then
77484: LD_VAR 0 1
77488: NOT
77489: PUSH
77490: LD_VAR 0 1
77494: PUSH
77495: LD_INT 8
77497: GREATER
77498: OR
77499: IFFALSE 77503
// exit ;
77501: GO 77690
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77503: LD_ADDR_VAR 0 4
77507: PUSH
77508: LD_INT 22
77510: PUSH
77511: LD_VAR 0 1
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 21
77522: PUSH
77523: LD_INT 3
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PPUSH
77534: CALL_OW 69
77538: ST_TO_ADDR
// if not tmp then
77539: LD_VAR 0 4
77543: NOT
77544: IFFALSE 77548
// exit ;
77546: GO 77690
// enable_addtolog := true ;
77548: LD_ADDR_OWVAR 81
77552: PUSH
77553: LD_INT 1
77555: ST_TO_ADDR
// AddToLog ( [ ) ;
77556: LD_STRING [
77558: PPUSH
77559: CALL_OW 561
// for i in tmp do
77563: LD_ADDR_VAR 0 3
77567: PUSH
77568: LD_VAR 0 4
77572: PUSH
77573: FOR_IN
77574: IFFALSE 77681
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77576: LD_STRING [
77578: PUSH
77579: LD_VAR 0 3
77583: PPUSH
77584: CALL_OW 266
77588: STR
77589: PUSH
77590: LD_STRING , 
77592: STR
77593: PUSH
77594: LD_VAR 0 3
77598: PPUSH
77599: CALL_OW 250
77603: STR
77604: PUSH
77605: LD_STRING , 
77607: STR
77608: PUSH
77609: LD_VAR 0 3
77613: PPUSH
77614: CALL_OW 251
77618: STR
77619: PUSH
77620: LD_STRING , 
77622: STR
77623: PUSH
77624: LD_VAR 0 3
77628: PPUSH
77629: CALL_OW 254
77633: STR
77634: PUSH
77635: LD_STRING , 
77637: STR
77638: PUSH
77639: LD_VAR 0 3
77643: PPUSH
77644: LD_INT 1
77646: PPUSH
77647: CALL_OW 268
77651: STR
77652: PUSH
77653: LD_STRING , 
77655: STR
77656: PUSH
77657: LD_VAR 0 3
77661: PPUSH
77662: LD_INT 2
77664: PPUSH
77665: CALL_OW 268
77669: STR
77670: PUSH
77671: LD_STRING ],
77673: STR
77674: PPUSH
77675: CALL_OW 561
// end ;
77679: GO 77573
77681: POP
77682: POP
// AddToLog ( ]; ) ;
77683: LD_STRING ];
77685: PPUSH
77686: CALL_OW 561
// end ;
77690: LD_VAR 0 2
77694: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77695: LD_INT 0
77697: PPUSH
77698: PPUSH
77699: PPUSH
77700: PPUSH
77701: PPUSH
// if not area or not rate or not max then
77702: LD_VAR 0 1
77706: NOT
77707: PUSH
77708: LD_VAR 0 2
77712: NOT
77713: OR
77714: PUSH
77715: LD_VAR 0 4
77719: NOT
77720: OR
77721: IFFALSE 77725
// exit ;
77723: GO 77917
// while 1 do
77725: LD_INT 1
77727: IFFALSE 77917
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77729: LD_ADDR_VAR 0 9
77733: PUSH
77734: LD_VAR 0 1
77738: PPUSH
77739: LD_INT 1
77741: PPUSH
77742: CALL_OW 287
77746: PUSH
77747: LD_INT 10
77749: MUL
77750: ST_TO_ADDR
// r := rate / 10 ;
77751: LD_ADDR_VAR 0 7
77755: PUSH
77756: LD_VAR 0 2
77760: PUSH
77761: LD_INT 10
77763: DIVREAL
77764: ST_TO_ADDR
// time := 1 1$00 ;
77765: LD_ADDR_VAR 0 8
77769: PUSH
77770: LD_INT 2100
77772: ST_TO_ADDR
// if amount < min then
77773: LD_VAR 0 9
77777: PUSH
77778: LD_VAR 0 3
77782: LESS
77783: IFFALSE 77801
// r := r * 2 else
77785: LD_ADDR_VAR 0 7
77789: PUSH
77790: LD_VAR 0 7
77794: PUSH
77795: LD_INT 2
77797: MUL
77798: ST_TO_ADDR
77799: GO 77827
// if amount > max then
77801: LD_VAR 0 9
77805: PUSH
77806: LD_VAR 0 4
77810: GREATER
77811: IFFALSE 77827
// r := r / 2 ;
77813: LD_ADDR_VAR 0 7
77817: PUSH
77818: LD_VAR 0 7
77822: PUSH
77823: LD_INT 2
77825: DIVREAL
77826: ST_TO_ADDR
// time := time / r ;
77827: LD_ADDR_VAR 0 8
77831: PUSH
77832: LD_VAR 0 8
77836: PUSH
77837: LD_VAR 0 7
77841: DIVREAL
77842: ST_TO_ADDR
// if time < 0 then
77843: LD_VAR 0 8
77847: PUSH
77848: LD_INT 0
77850: LESS
77851: IFFALSE 77868
// time := time * - 1 ;
77853: LD_ADDR_VAR 0 8
77857: PUSH
77858: LD_VAR 0 8
77862: PUSH
77863: LD_INT 1
77865: NEG
77866: MUL
77867: ST_TO_ADDR
// wait ( time ) ;
77868: LD_VAR 0 8
77872: PPUSH
77873: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77877: LD_INT 35
77879: PPUSH
77880: LD_INT 875
77882: PPUSH
77883: CALL_OW 12
77887: PPUSH
77888: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77892: LD_INT 1
77894: PPUSH
77895: LD_INT 5
77897: PPUSH
77898: CALL_OW 12
77902: PPUSH
77903: LD_VAR 0 1
77907: PPUSH
77908: LD_INT 1
77910: PPUSH
77911: CALL_OW 55
// end ;
77915: GO 77725
// end ;
77917: LD_VAR 0 5
77921: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77922: LD_INT 0
77924: PPUSH
77925: PPUSH
77926: PPUSH
77927: PPUSH
77928: PPUSH
77929: PPUSH
77930: PPUSH
77931: PPUSH
// if not turrets or not factories then
77932: LD_VAR 0 1
77936: NOT
77937: PUSH
77938: LD_VAR 0 2
77942: NOT
77943: OR
77944: IFFALSE 77948
// exit ;
77946: GO 78255
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77948: LD_ADDR_VAR 0 10
77952: PUSH
77953: LD_INT 5
77955: PUSH
77956: LD_INT 6
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 2
77965: PUSH
77966: LD_INT 4
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 3
77975: PUSH
77976: LD_INT 5
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 24
77990: PUSH
77991: LD_INT 25
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: LD_INT 23
78000: PUSH
78001: LD_INT 27
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: EMPTY
78009: LIST
78010: LIST
78011: PUSH
78012: LD_INT 42
78014: PUSH
78015: LD_INT 43
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: PUSH
78022: LD_INT 44
78024: PUSH
78025: LD_INT 46
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 45
78034: PUSH
78035: LD_INT 47
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: LIST
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: LIST
78051: ST_TO_ADDR
// result := [ ] ;
78052: LD_ADDR_VAR 0 3
78056: PUSH
78057: EMPTY
78058: ST_TO_ADDR
// for i in turrets do
78059: LD_ADDR_VAR 0 4
78063: PUSH
78064: LD_VAR 0 1
78068: PUSH
78069: FOR_IN
78070: IFFALSE 78253
// begin nat := GetNation ( i ) ;
78072: LD_ADDR_VAR 0 7
78076: PUSH
78077: LD_VAR 0 4
78081: PPUSH
78082: CALL_OW 248
78086: ST_TO_ADDR
// weapon := 0 ;
78087: LD_ADDR_VAR 0 8
78091: PUSH
78092: LD_INT 0
78094: ST_TO_ADDR
// if not nat then
78095: LD_VAR 0 7
78099: NOT
78100: IFFALSE 78104
// continue ;
78102: GO 78069
// for j in list [ nat ] do
78104: LD_ADDR_VAR 0 5
78108: PUSH
78109: LD_VAR 0 10
78113: PUSH
78114: LD_VAR 0 7
78118: ARRAY
78119: PUSH
78120: FOR_IN
78121: IFFALSE 78162
// if GetBWeapon ( i ) = j [ 1 ] then
78123: LD_VAR 0 4
78127: PPUSH
78128: CALL_OW 269
78132: PUSH
78133: LD_VAR 0 5
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: EQUAL
78142: IFFALSE 78160
// begin weapon := j [ 2 ] ;
78144: LD_ADDR_VAR 0 8
78148: PUSH
78149: LD_VAR 0 5
78153: PUSH
78154: LD_INT 2
78156: ARRAY
78157: ST_TO_ADDR
// break ;
78158: GO 78162
// end ;
78160: GO 78120
78162: POP
78163: POP
// if not weapon then
78164: LD_VAR 0 8
78168: NOT
78169: IFFALSE 78173
// continue ;
78171: GO 78069
// for k in factories do
78173: LD_ADDR_VAR 0 6
78177: PUSH
78178: LD_VAR 0 2
78182: PUSH
78183: FOR_IN
78184: IFFALSE 78249
// begin weapons := AvailableWeaponList ( k ) ;
78186: LD_ADDR_VAR 0 9
78190: PUSH
78191: LD_VAR 0 6
78195: PPUSH
78196: CALL_OW 478
78200: ST_TO_ADDR
// if not weapons then
78201: LD_VAR 0 9
78205: NOT
78206: IFFALSE 78210
// continue ;
78208: GO 78183
// if weapon in weapons then
78210: LD_VAR 0 8
78214: PUSH
78215: LD_VAR 0 9
78219: IN
78220: IFFALSE 78247
// begin result := [ i , weapon ] ;
78222: LD_ADDR_VAR 0 3
78226: PUSH
78227: LD_VAR 0 4
78231: PUSH
78232: LD_VAR 0 8
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: ST_TO_ADDR
// exit ;
78241: POP
78242: POP
78243: POP
78244: POP
78245: GO 78255
// end ; end ;
78247: GO 78183
78249: POP
78250: POP
// end ;
78251: GO 78069
78253: POP
78254: POP
// end ;
78255: LD_VAR 0 3
78259: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78260: LD_INT 0
78262: PPUSH
// if not side or side > 8 then
78263: LD_VAR 0 3
78267: NOT
78268: PUSH
78269: LD_VAR 0 3
78273: PUSH
78274: LD_INT 8
78276: GREATER
78277: OR
78278: IFFALSE 78282
// exit ;
78280: GO 78341
// if not range then
78282: LD_VAR 0 4
78286: NOT
78287: IFFALSE 78298
// range := - 12 ;
78289: LD_ADDR_VAR 0 4
78293: PUSH
78294: LD_INT 12
78296: NEG
78297: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78298: LD_VAR 0 1
78302: PPUSH
78303: LD_VAR 0 2
78307: PPUSH
78308: LD_VAR 0 3
78312: PPUSH
78313: LD_VAR 0 4
78317: PPUSH
78318: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78322: LD_VAR 0 1
78326: PPUSH
78327: LD_VAR 0 2
78331: PPUSH
78332: LD_VAR 0 3
78336: PPUSH
78337: CALL_OW 331
// end ;
78341: LD_VAR 0 5
78345: RET
// export function Video ( mode ) ; begin
78346: LD_INT 0
78348: PPUSH
// ingame_video = mode ;
78349: LD_ADDR_OWVAR 52
78353: PUSH
78354: LD_VAR 0 1
78358: ST_TO_ADDR
// interface_hidden = mode ;
78359: LD_ADDR_OWVAR 54
78363: PUSH
78364: LD_VAR 0 1
78368: ST_TO_ADDR
// end ;
78369: LD_VAR 0 2
78373: RET
// export function Join ( array , element ) ; begin
78374: LD_INT 0
78376: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78377: LD_ADDR_VAR 0 3
78381: PUSH
78382: LD_VAR 0 1
78386: PPUSH
78387: LD_VAR 0 1
78391: PUSH
78392: LD_INT 1
78394: PLUS
78395: PPUSH
78396: LD_VAR 0 2
78400: PPUSH
78401: CALL_OW 1
78405: ST_TO_ADDR
// end ;
78406: LD_VAR 0 3
78410: RET
// export function JoinUnion ( array , element ) ; begin
78411: LD_INT 0
78413: PPUSH
// result := array union element ;
78414: LD_ADDR_VAR 0 3
78418: PUSH
78419: LD_VAR 0 1
78423: PUSH
78424: LD_VAR 0 2
78428: UNION
78429: ST_TO_ADDR
// end ;
78430: LD_VAR 0 3
78434: RET
// export function GetBehemoths ( side ) ; begin
78435: LD_INT 0
78437: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78438: LD_ADDR_VAR 0 2
78442: PUSH
78443: LD_INT 22
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: EMPTY
78452: LIST
78453: LIST
78454: PUSH
78455: LD_INT 31
78457: PUSH
78458: LD_INT 25
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PPUSH
78469: CALL_OW 69
78473: ST_TO_ADDR
// end ;
78474: LD_VAR 0 2
78478: RET
// export function Shuffle ( array ) ; var i , index ; begin
78479: LD_INT 0
78481: PPUSH
78482: PPUSH
78483: PPUSH
// result := [ ] ;
78484: LD_ADDR_VAR 0 2
78488: PUSH
78489: EMPTY
78490: ST_TO_ADDR
// if not array then
78491: LD_VAR 0 1
78495: NOT
78496: IFFALSE 78500
// exit ;
78498: GO 78599
// Randomize ;
78500: CALL_OW 10
// for i = array downto 1 do
78504: LD_ADDR_VAR 0 3
78508: PUSH
78509: DOUBLE
78510: LD_VAR 0 1
78514: INC
78515: ST_TO_ADDR
78516: LD_INT 1
78518: PUSH
78519: FOR_DOWNTO
78520: IFFALSE 78597
// begin index := rand ( 1 , array ) ;
78522: LD_ADDR_VAR 0 4
78526: PUSH
78527: LD_INT 1
78529: PPUSH
78530: LD_VAR 0 1
78534: PPUSH
78535: CALL_OW 12
78539: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78540: LD_ADDR_VAR 0 2
78544: PUSH
78545: LD_VAR 0 2
78549: PPUSH
78550: LD_VAR 0 2
78554: PUSH
78555: LD_INT 1
78557: PLUS
78558: PPUSH
78559: LD_VAR 0 1
78563: PUSH
78564: LD_VAR 0 4
78568: ARRAY
78569: PPUSH
78570: CALL_OW 2
78574: ST_TO_ADDR
// array := Delete ( array , index ) ;
78575: LD_ADDR_VAR 0 1
78579: PUSH
78580: LD_VAR 0 1
78584: PPUSH
78585: LD_VAR 0 4
78589: PPUSH
78590: CALL_OW 3
78594: ST_TO_ADDR
// end ;
78595: GO 78519
78597: POP
78598: POP
// end ;
78599: LD_VAR 0 2
78603: RET
// export function GetBaseMaterials ( base ) ; begin
78604: LD_INT 0
78606: PPUSH
// result := [ 0 , 0 , 0 ] ;
78607: LD_ADDR_VAR 0 2
78611: PUSH
78612: LD_INT 0
78614: PUSH
78615: LD_INT 0
78617: PUSH
78618: LD_INT 0
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: LIST
78625: ST_TO_ADDR
// if not base then
78626: LD_VAR 0 1
78630: NOT
78631: IFFALSE 78635
// exit ;
78633: GO 78684
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78635: LD_ADDR_VAR 0 2
78639: PUSH
78640: LD_VAR 0 1
78644: PPUSH
78645: LD_INT 1
78647: PPUSH
78648: CALL_OW 275
78652: PUSH
78653: LD_VAR 0 1
78657: PPUSH
78658: LD_INT 2
78660: PPUSH
78661: CALL_OW 275
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: LD_INT 3
78673: PPUSH
78674: CALL_OW 275
78678: PUSH
78679: EMPTY
78680: LIST
78681: LIST
78682: LIST
78683: ST_TO_ADDR
// end ;
78684: LD_VAR 0 2
78688: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78689: LD_INT 0
78691: PPUSH
78692: PPUSH
// result := array ;
78693: LD_ADDR_VAR 0 3
78697: PUSH
78698: LD_VAR 0 1
78702: ST_TO_ADDR
// if size > 0 then
78703: LD_VAR 0 2
78707: PUSH
78708: LD_INT 0
78710: GREATER
78711: IFFALSE 78757
// for i := array downto size do
78713: LD_ADDR_VAR 0 4
78717: PUSH
78718: DOUBLE
78719: LD_VAR 0 1
78723: INC
78724: ST_TO_ADDR
78725: LD_VAR 0 2
78729: PUSH
78730: FOR_DOWNTO
78731: IFFALSE 78755
// result := Delete ( result , result ) ;
78733: LD_ADDR_VAR 0 3
78737: PUSH
78738: LD_VAR 0 3
78742: PPUSH
78743: LD_VAR 0 3
78747: PPUSH
78748: CALL_OW 3
78752: ST_TO_ADDR
78753: GO 78730
78755: POP
78756: POP
// end ;
78757: LD_VAR 0 3
78761: RET
// export function ComExit ( unit ) ; var tmp ; begin
78762: LD_INT 0
78764: PPUSH
78765: PPUSH
// if not IsInUnit ( unit ) then
78766: LD_VAR 0 1
78770: PPUSH
78771: CALL_OW 310
78775: NOT
78776: IFFALSE 78780
// exit ;
78778: GO 78840
// tmp := IsInUnit ( unit ) ;
78780: LD_ADDR_VAR 0 3
78784: PUSH
78785: LD_VAR 0 1
78789: PPUSH
78790: CALL_OW 310
78794: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78795: LD_VAR 0 3
78799: PPUSH
78800: CALL_OW 247
78804: PUSH
78805: LD_INT 2
78807: EQUAL
78808: IFFALSE 78821
// ComExitVehicle ( unit ) else
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 121
78819: GO 78830
// ComExitBuilding ( unit ) ;
78821: LD_VAR 0 1
78825: PPUSH
78826: CALL_OW 122
// result := tmp ;
78830: LD_ADDR_VAR 0 2
78834: PUSH
78835: LD_VAR 0 3
78839: ST_TO_ADDR
// end ;
78840: LD_VAR 0 2
78844: RET
// export function ComExitAll ( units ) ; var i ; begin
78845: LD_INT 0
78847: PPUSH
78848: PPUSH
// if not units then
78849: LD_VAR 0 1
78853: NOT
78854: IFFALSE 78858
// exit ;
78856: GO 78884
// for i in units do
78858: LD_ADDR_VAR 0 3
78862: PUSH
78863: LD_VAR 0 1
78867: PUSH
78868: FOR_IN
78869: IFFALSE 78882
// ComExit ( i ) ;
78871: LD_VAR 0 3
78875: PPUSH
78876: CALL 78762 0 1
78880: GO 78868
78882: POP
78883: POP
// end ;
78884: LD_VAR 0 2
78888: RET
// export function ResetHc ; begin
78889: LD_INT 0
78891: PPUSH
// InitHc ;
78892: CALL_OW 19
// hc_importance := 0 ;
78896: LD_ADDR_OWVAR 32
78900: PUSH
78901: LD_INT 0
78903: ST_TO_ADDR
// end ;
78904: LD_VAR 0 1
78908: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78909: LD_INT 0
78911: PPUSH
78912: PPUSH
78913: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78914: LD_ADDR_VAR 0 6
78918: PUSH
78919: LD_VAR 0 1
78923: PUSH
78924: LD_VAR 0 3
78928: PLUS
78929: PUSH
78930: LD_INT 2
78932: DIV
78933: ST_TO_ADDR
// if _x < 0 then
78934: LD_VAR 0 6
78938: PUSH
78939: LD_INT 0
78941: LESS
78942: IFFALSE 78959
// _x := _x * - 1 ;
78944: LD_ADDR_VAR 0 6
78948: PUSH
78949: LD_VAR 0 6
78953: PUSH
78954: LD_INT 1
78956: NEG
78957: MUL
78958: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78959: LD_ADDR_VAR 0 7
78963: PUSH
78964: LD_VAR 0 2
78968: PUSH
78969: LD_VAR 0 4
78973: PLUS
78974: PUSH
78975: LD_INT 2
78977: DIV
78978: ST_TO_ADDR
// if _y < 0 then
78979: LD_VAR 0 7
78983: PUSH
78984: LD_INT 0
78986: LESS
78987: IFFALSE 79004
// _y := _y * - 1 ;
78989: LD_ADDR_VAR 0 7
78993: PUSH
78994: LD_VAR 0 7
78998: PUSH
78999: LD_INT 1
79001: NEG
79002: MUL
79003: ST_TO_ADDR
// result := [ _x , _y ] ;
79004: LD_ADDR_VAR 0 5
79008: PUSH
79009: LD_VAR 0 6
79013: PUSH
79014: LD_VAR 0 7
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: ST_TO_ADDR
// end ;
79023: LD_VAR 0 5
79027: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79028: LD_INT 0
79030: PPUSH
79031: PPUSH
79032: PPUSH
79033: PPUSH
// task := GetTaskList ( unit ) ;
79034: LD_ADDR_VAR 0 7
79038: PUSH
79039: LD_VAR 0 1
79043: PPUSH
79044: CALL_OW 437
79048: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79049: LD_VAR 0 7
79053: NOT
79054: PUSH
79055: LD_VAR 0 1
79059: PPUSH
79060: LD_VAR 0 2
79064: PPUSH
79065: CALL_OW 308
79069: NOT
79070: AND
79071: IFFALSE 79075
// exit ;
79073: GO 79193
// if IsInArea ( unit , area ) then
79075: LD_VAR 0 1
79079: PPUSH
79080: LD_VAR 0 2
79084: PPUSH
79085: CALL_OW 308
79089: IFFALSE 79107
// begin ComMoveToArea ( unit , goAway ) ;
79091: LD_VAR 0 1
79095: PPUSH
79096: LD_VAR 0 3
79100: PPUSH
79101: CALL_OW 113
// exit ;
79105: GO 79193
// end ; if task [ 1 ] [ 1 ] <> M then
79107: LD_VAR 0 7
79111: PUSH
79112: LD_INT 1
79114: ARRAY
79115: PUSH
79116: LD_INT 1
79118: ARRAY
79119: PUSH
79120: LD_STRING M
79122: NONEQUAL
79123: IFFALSE 79127
// exit ;
79125: GO 79193
// x := task [ 1 ] [ 2 ] ;
79127: LD_ADDR_VAR 0 5
79131: PUSH
79132: LD_VAR 0 7
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: PUSH
79141: LD_INT 2
79143: ARRAY
79144: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79145: LD_ADDR_VAR 0 6
79149: PUSH
79150: LD_VAR 0 7
79154: PUSH
79155: LD_INT 1
79157: ARRAY
79158: PUSH
79159: LD_INT 3
79161: ARRAY
79162: ST_TO_ADDR
// if InArea ( x , y , area ) then
79163: LD_VAR 0 5
79167: PPUSH
79168: LD_VAR 0 6
79172: PPUSH
79173: LD_VAR 0 2
79177: PPUSH
79178: CALL_OW 309
79182: IFFALSE 79193
// ComStop ( unit ) ;
79184: LD_VAR 0 1
79188: PPUSH
79189: CALL_OW 141
// end ;
79193: LD_VAR 0 4
79197: RET
// export function Abs ( value ) ; begin
79198: LD_INT 0
79200: PPUSH
// result := value ;
79201: LD_ADDR_VAR 0 2
79205: PUSH
79206: LD_VAR 0 1
79210: ST_TO_ADDR
// if value < 0 then
79211: LD_VAR 0 1
79215: PUSH
79216: LD_INT 0
79218: LESS
79219: IFFALSE 79236
// result := value * - 1 ;
79221: LD_ADDR_VAR 0 2
79225: PUSH
79226: LD_VAR 0 1
79230: PUSH
79231: LD_INT 1
79233: NEG
79234: MUL
79235: ST_TO_ADDR
// end ;
79236: LD_VAR 0 2
79240: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79241: LD_INT 0
79243: PPUSH
79244: PPUSH
79245: PPUSH
79246: PPUSH
79247: PPUSH
79248: PPUSH
79249: PPUSH
79250: PPUSH
// if not unit or not building then
79251: LD_VAR 0 1
79255: NOT
79256: PUSH
79257: LD_VAR 0 2
79261: NOT
79262: OR
79263: IFFALSE 79267
// exit ;
79265: GO 79493
// x := GetX ( building ) ;
79267: LD_ADDR_VAR 0 4
79271: PUSH
79272: LD_VAR 0 2
79276: PPUSH
79277: CALL_OW 250
79281: ST_TO_ADDR
// y := GetY ( building ) ;
79282: LD_ADDR_VAR 0 6
79286: PUSH
79287: LD_VAR 0 2
79291: PPUSH
79292: CALL_OW 251
79296: ST_TO_ADDR
// d := GetDir ( building ) ;
79297: LD_ADDR_VAR 0 8
79301: PUSH
79302: LD_VAR 0 2
79306: PPUSH
79307: CALL_OW 254
79311: ST_TO_ADDR
// r := 4 ;
79312: LD_ADDR_VAR 0 9
79316: PUSH
79317: LD_INT 4
79319: ST_TO_ADDR
// for i := 1 to 5 do
79320: LD_ADDR_VAR 0 10
79324: PUSH
79325: DOUBLE
79326: LD_INT 1
79328: DEC
79329: ST_TO_ADDR
79330: LD_INT 5
79332: PUSH
79333: FOR_TO
79334: IFFALSE 79491
// begin _x := ShiftX ( x , d , r + i ) ;
79336: LD_ADDR_VAR 0 5
79340: PUSH
79341: LD_VAR 0 4
79345: PPUSH
79346: LD_VAR 0 8
79350: PPUSH
79351: LD_VAR 0 9
79355: PUSH
79356: LD_VAR 0 10
79360: PLUS
79361: PPUSH
79362: CALL_OW 272
79366: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79367: LD_ADDR_VAR 0 7
79371: PUSH
79372: LD_VAR 0 6
79376: PPUSH
79377: LD_VAR 0 8
79381: PPUSH
79382: LD_VAR 0 9
79386: PUSH
79387: LD_VAR 0 10
79391: PLUS
79392: PPUSH
79393: CALL_OW 273
79397: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79398: LD_VAR 0 5
79402: PPUSH
79403: LD_VAR 0 7
79407: PPUSH
79408: CALL_OW 488
79412: PUSH
79413: LD_VAR 0 5
79417: PPUSH
79418: LD_VAR 0 7
79422: PPUSH
79423: CALL_OW 428
79427: PPUSH
79428: CALL_OW 247
79432: PUSH
79433: LD_INT 3
79435: PUSH
79436: LD_INT 2
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: IN
79443: NOT
79444: AND
79445: IFFALSE 79489
// begin ComMoveXY ( unit , _x , _y ) ;
79447: LD_VAR 0 1
79451: PPUSH
79452: LD_VAR 0 5
79456: PPUSH
79457: LD_VAR 0 7
79461: PPUSH
79462: CALL_OW 111
// result := [ _x , _y ] ;
79466: LD_ADDR_VAR 0 3
79470: PUSH
79471: LD_VAR 0 5
79475: PUSH
79476: LD_VAR 0 7
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: ST_TO_ADDR
// exit ;
79485: POP
79486: POP
79487: GO 79493
// end ; end ;
79489: GO 79333
79491: POP
79492: POP
// end ;
79493: LD_VAR 0 3
79497: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79498: LD_INT 0
79500: PPUSH
79501: PPUSH
79502: PPUSH
// result := 0 ;
79503: LD_ADDR_VAR 0 3
79507: PUSH
79508: LD_INT 0
79510: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79511: LD_VAR 0 1
79515: PUSH
79516: LD_INT 0
79518: LESS
79519: PUSH
79520: LD_VAR 0 1
79524: PUSH
79525: LD_INT 8
79527: GREATER
79528: OR
79529: PUSH
79530: LD_VAR 0 2
79534: PUSH
79535: LD_INT 0
79537: LESS
79538: OR
79539: PUSH
79540: LD_VAR 0 2
79544: PUSH
79545: LD_INT 8
79547: GREATER
79548: OR
79549: IFFALSE 79553
// exit ;
79551: GO 79628
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79553: LD_ADDR_VAR 0 4
79557: PUSH
79558: LD_INT 22
79560: PUSH
79561: LD_VAR 0 2
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PPUSH
79570: CALL_OW 69
79574: PUSH
79575: FOR_IN
79576: IFFALSE 79626
// begin un := UnitShoot ( i ) ;
79578: LD_ADDR_VAR 0 5
79582: PUSH
79583: LD_VAR 0 4
79587: PPUSH
79588: CALL_OW 504
79592: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79593: LD_VAR 0 5
79597: PPUSH
79598: CALL_OW 255
79602: PUSH
79603: LD_VAR 0 1
79607: EQUAL
79608: IFFALSE 79624
// begin result := un ;
79610: LD_ADDR_VAR 0 3
79614: PUSH
79615: LD_VAR 0 5
79619: ST_TO_ADDR
// exit ;
79620: POP
79621: POP
79622: GO 79628
// end ; end ;
79624: GO 79575
79626: POP
79627: POP
// end ;
79628: LD_VAR 0 3
79632: RET
// export function GetCargoBay ( units ) ; begin
79633: LD_INT 0
79635: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79636: LD_ADDR_VAR 0 2
79640: PUSH
79641: LD_VAR 0 1
79645: PPUSH
79646: LD_INT 2
79648: PUSH
79649: LD_INT 34
79651: PUSH
79652: LD_INT 12
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 34
79661: PUSH
79662: LD_INT 51
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: PUSH
79669: LD_INT 34
79671: PUSH
79672: LD_INT 32
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: LD_INT 34
79681: PUSH
79682: LD_EXP 52
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: PPUSH
79698: CALL_OW 72
79702: ST_TO_ADDR
// end ;
79703: LD_VAR 0 2
79707: RET
// export function Negate ( value ) ; begin
79708: LD_INT 0
79710: PPUSH
// result := not value ;
79711: LD_ADDR_VAR 0 2
79715: PUSH
79716: LD_VAR 0 1
79720: NOT
79721: ST_TO_ADDR
// end ;
79722: LD_VAR 0 2
79726: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
79727: LD_INT 0
79729: PPUSH
// if x1 = x2 then
79730: LD_VAR 0 1
79734: PUSH
79735: LD_VAR 0 3
79739: EQUAL
79740: IFFALSE 79774
// begin if y1 > y2 then
79742: LD_VAR 0 2
79746: PUSH
79747: LD_VAR 0 4
79751: GREATER
79752: IFFALSE 79764
// result := 0 else
79754: LD_ADDR_VAR 0 5
79758: PUSH
79759: LD_INT 0
79761: ST_TO_ADDR
79762: GO 79772
// result := 3 ;
79764: LD_ADDR_VAR 0 5
79768: PUSH
79769: LD_INT 3
79771: ST_TO_ADDR
// exit ;
79772: GO 79860
// end ; if y1 = y2 then
79774: LD_VAR 0 2
79778: PUSH
79779: LD_VAR 0 4
79783: EQUAL
79784: IFFALSE 79818
// begin if x1 > x2 then
79786: LD_VAR 0 1
79790: PUSH
79791: LD_VAR 0 3
79795: GREATER
79796: IFFALSE 79808
// result := 1 else
79798: LD_ADDR_VAR 0 5
79802: PUSH
79803: LD_INT 1
79805: ST_TO_ADDR
79806: GO 79816
// result := 4 ;
79808: LD_ADDR_VAR 0 5
79812: PUSH
79813: LD_INT 4
79815: ST_TO_ADDR
// exit ;
79816: GO 79860
// end ; if x1 > x2 and y1 > y2 then
79818: LD_VAR 0 1
79822: PUSH
79823: LD_VAR 0 3
79827: GREATER
79828: PUSH
79829: LD_VAR 0 2
79833: PUSH
79834: LD_VAR 0 4
79838: GREATER
79839: AND
79840: IFFALSE 79852
// result := 2 else
79842: LD_ADDR_VAR 0 5
79846: PUSH
79847: LD_INT 2
79849: ST_TO_ADDR
79850: GO 79860
// result := 5 ;
79852: LD_ADDR_VAR 0 5
79856: PUSH
79857: LD_INT 5
79859: ST_TO_ADDR
// end ;
79860: LD_VAR 0 5
79864: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79865: LD_INT 0
79867: PPUSH
79868: PPUSH
// if not driver or not IsInUnit ( driver ) then
79869: LD_VAR 0 1
79873: NOT
79874: PUSH
79875: LD_VAR 0 1
79879: PPUSH
79880: CALL_OW 310
79884: NOT
79885: OR
79886: IFFALSE 79890
// exit ;
79888: GO 79980
// vehicle := IsInUnit ( driver ) ;
79890: LD_ADDR_VAR 0 3
79894: PUSH
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL_OW 310
79904: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79905: LD_VAR 0 1
79909: PPUSH
79910: LD_STRING \
79912: PUSH
79913: LD_INT 0
79915: PUSH
79916: LD_INT 0
79918: PUSH
79919: LD_INT 0
79921: PUSH
79922: LD_INT 0
79924: PUSH
79925: LD_INT 0
79927: PUSH
79928: LD_INT 0
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: PUSH
79940: LD_STRING E
79942: PUSH
79943: LD_INT 0
79945: PUSH
79946: LD_INT 0
79948: PUSH
79949: LD_VAR 0 3
79953: PUSH
79954: LD_INT 0
79956: PUSH
79957: LD_INT 0
79959: PUSH
79960: LD_INT 0
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: LIST
79967: LIST
79968: LIST
79969: LIST
79970: LIST
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PPUSH
79976: CALL_OW 446
// end ;
79980: LD_VAR 0 2
79984: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79985: LD_INT 0
79987: PPUSH
79988: PPUSH
// if not driver or not IsInUnit ( driver ) then
79989: LD_VAR 0 1
79993: NOT
79994: PUSH
79995: LD_VAR 0 1
79999: PPUSH
80000: CALL_OW 310
80004: NOT
80005: OR
80006: IFFALSE 80010
// exit ;
80008: GO 80100
// vehicle := IsInUnit ( driver ) ;
80010: LD_ADDR_VAR 0 3
80014: PUSH
80015: LD_VAR 0 1
80019: PPUSH
80020: CALL_OW 310
80024: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80025: LD_VAR 0 1
80029: PPUSH
80030: LD_STRING \
80032: PUSH
80033: LD_INT 0
80035: PUSH
80036: LD_INT 0
80038: PUSH
80039: LD_INT 0
80041: PUSH
80042: LD_INT 0
80044: PUSH
80045: LD_INT 0
80047: PUSH
80048: LD_INT 0
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: LIST
80055: LIST
80056: LIST
80057: LIST
80058: LIST
80059: PUSH
80060: LD_STRING E
80062: PUSH
80063: LD_INT 0
80065: PUSH
80066: LD_INT 0
80068: PUSH
80069: LD_VAR 0 3
80073: PUSH
80074: LD_INT 0
80076: PUSH
80077: LD_INT 0
80079: PUSH
80080: LD_INT 0
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: LIST
80089: LIST
80090: LIST
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: PPUSH
80096: CALL_OW 447
// end ;
80100: LD_VAR 0 2
80104: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80105: LD_INT 0
80107: PPUSH
80108: PPUSH
80109: PPUSH
// tmp := [ ] ;
80110: LD_ADDR_VAR 0 5
80114: PUSH
80115: EMPTY
80116: ST_TO_ADDR
// for i in units do
80117: LD_ADDR_VAR 0 4
80121: PUSH
80122: LD_VAR 0 1
80126: PUSH
80127: FOR_IN
80128: IFFALSE 80166
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80130: LD_ADDR_VAR 0 5
80134: PUSH
80135: LD_VAR 0 5
80139: PPUSH
80140: LD_VAR 0 5
80144: PUSH
80145: LD_INT 1
80147: PLUS
80148: PPUSH
80149: LD_VAR 0 4
80153: PPUSH
80154: CALL_OW 256
80158: PPUSH
80159: CALL_OW 2
80163: ST_TO_ADDR
80164: GO 80127
80166: POP
80167: POP
// if not tmp then
80168: LD_VAR 0 5
80172: NOT
80173: IFFALSE 80177
// exit ;
80175: GO 80225
// if asc then
80177: LD_VAR 0 2
80181: IFFALSE 80205
// result := SortListByListAsc ( units , tmp ) else
80183: LD_ADDR_VAR 0 3
80187: PUSH
80188: LD_VAR 0 1
80192: PPUSH
80193: LD_VAR 0 5
80197: PPUSH
80198: CALL_OW 76
80202: ST_TO_ADDR
80203: GO 80225
// result := SortListByListDesc ( units , tmp ) ;
80205: LD_ADDR_VAR 0 3
80209: PUSH
80210: LD_VAR 0 1
80214: PPUSH
80215: LD_VAR 0 5
80219: PPUSH
80220: CALL_OW 77
80224: ST_TO_ADDR
// end ;
80225: LD_VAR 0 3
80229: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80230: LD_INT 0
80232: PPUSH
80233: PPUSH
// task := GetTaskList ( mech ) ;
80234: LD_ADDR_VAR 0 4
80238: PUSH
80239: LD_VAR 0 1
80243: PPUSH
80244: CALL_OW 437
80248: ST_TO_ADDR
// if not task then
80249: LD_VAR 0 4
80253: NOT
80254: IFFALSE 80258
// exit ;
80256: GO 80300
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80258: LD_ADDR_VAR 0 3
80262: PUSH
80263: LD_VAR 0 4
80267: PUSH
80268: LD_INT 1
80270: ARRAY
80271: PUSH
80272: LD_INT 1
80274: ARRAY
80275: PUSH
80276: LD_STRING r
80278: EQUAL
80279: PUSH
80280: LD_VAR 0 4
80284: PUSH
80285: LD_INT 1
80287: ARRAY
80288: PUSH
80289: LD_INT 4
80291: ARRAY
80292: PUSH
80293: LD_VAR 0 2
80297: EQUAL
80298: AND
80299: ST_TO_ADDR
// end ;
80300: LD_VAR 0 3
80304: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80305: LD_INT 0
80307: PPUSH
// SetDir ( unit , d ) ;
80308: LD_VAR 0 1
80312: PPUSH
80313: LD_VAR 0 4
80317: PPUSH
80318: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80322: LD_VAR 0 1
80326: PPUSH
80327: LD_VAR 0 2
80331: PPUSH
80332: LD_VAR 0 3
80336: PPUSH
80337: LD_VAR 0 5
80341: PPUSH
80342: CALL_OW 48
// end ;
80346: LD_VAR 0 6
80350: RET
// export function ToNaturalNumber ( number ) ; begin
80351: LD_INT 0
80353: PPUSH
// result := number div 1 ;
80354: LD_ADDR_VAR 0 2
80358: PUSH
80359: LD_VAR 0 1
80363: PUSH
80364: LD_INT 1
80366: DIV
80367: ST_TO_ADDR
// if number < 0 then
80368: LD_VAR 0 1
80372: PUSH
80373: LD_INT 0
80375: LESS
80376: IFFALSE 80386
// result := 0 ;
80378: LD_ADDR_VAR 0 2
80382: PUSH
80383: LD_INT 0
80385: ST_TO_ADDR
// end ;
80386: LD_VAR 0 2
80390: RET
// export function SortByClass ( units , class ) ; var un ; begin
80391: LD_INT 0
80393: PPUSH
80394: PPUSH
// if not units or not class then
80395: LD_VAR 0 1
80399: NOT
80400: PUSH
80401: LD_VAR 0 2
80405: NOT
80406: OR
80407: IFFALSE 80411
// exit ;
80409: GO 80506
// result := [ ] ;
80411: LD_ADDR_VAR 0 3
80415: PUSH
80416: EMPTY
80417: ST_TO_ADDR
// for un in units do
80418: LD_ADDR_VAR 0 4
80422: PUSH
80423: LD_VAR 0 1
80427: PUSH
80428: FOR_IN
80429: IFFALSE 80504
// if GetClass ( un ) = class then
80431: LD_VAR 0 4
80435: PPUSH
80436: CALL_OW 257
80440: PUSH
80441: LD_VAR 0 2
80445: EQUAL
80446: IFFALSE 80473
// result := Insert ( result , 1 , un ) else
80448: LD_ADDR_VAR 0 3
80452: PUSH
80453: LD_VAR 0 3
80457: PPUSH
80458: LD_INT 1
80460: PPUSH
80461: LD_VAR 0 4
80465: PPUSH
80466: CALL_OW 2
80470: ST_TO_ADDR
80471: GO 80502
// result := Replace ( result , result + 1 , un ) ;
80473: LD_ADDR_VAR 0 3
80477: PUSH
80478: LD_VAR 0 3
80482: PPUSH
80483: LD_VAR 0 3
80487: PUSH
80488: LD_INT 1
80490: PLUS
80491: PPUSH
80492: LD_VAR 0 4
80496: PPUSH
80497: CALL_OW 1
80501: ST_TO_ADDR
80502: GO 80428
80504: POP
80505: POP
// end ; end_of_file
80506: LD_VAR 0 3
80510: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80511: LD_VAR 0 1
80515: PUSH
80516: LD_INT 200
80518: DOUBLE
80519: GREATEREQUAL
80520: IFFALSE 80528
80522: LD_INT 299
80524: DOUBLE
80525: LESSEQUAL
80526: IFTRUE 80530
80528: GO 80562
80530: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80531: LD_VAR 0 1
80535: PPUSH
80536: LD_VAR 0 2
80540: PPUSH
80541: LD_VAR 0 3
80545: PPUSH
80546: LD_VAR 0 4
80550: PPUSH
80551: LD_VAR 0 5
80555: PPUSH
80556: CALL 37754 0 5
80560: GO 80639
80562: LD_INT 300
80564: DOUBLE
80565: GREATEREQUAL
80566: IFFALSE 80574
80568: LD_INT 399
80570: DOUBLE
80571: LESSEQUAL
80572: IFTRUE 80576
80574: GO 80638
80576: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80577: LD_VAR 0 1
80581: PPUSH
80582: LD_VAR 0 2
80586: PPUSH
80587: LD_VAR 0 3
80591: PPUSH
80592: LD_VAR 0 4
80596: PPUSH
80597: LD_VAR 0 5
80601: PPUSH
80602: LD_VAR 0 6
80606: PPUSH
80607: LD_VAR 0 7
80611: PPUSH
80612: LD_VAR 0 8
80616: PPUSH
80617: LD_VAR 0 9
80621: PPUSH
80622: LD_VAR 0 10
80626: PPUSH
80627: LD_VAR 0 11
80631: PPUSH
80632: CALL 35642 0 11
80636: GO 80639
80638: POP
// end ;
80639: PPOPN 11
80641: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80642: LD_VAR 0 1
80646: PPUSH
80647: LD_VAR 0 2
80651: PPUSH
80652: LD_VAR 0 3
80656: PPUSH
80657: LD_VAR 0 4
80661: PPUSH
80662: LD_VAR 0 5
80666: PPUSH
80667: CALL 37736 0 5
// end ; end_of_file
80671: PPOPN 5
80673: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80674: LD_VAR 0 1
80678: PPUSH
80679: LD_VAR 0 2
80683: PPUSH
80684: LD_VAR 0 3
80688: PPUSH
80689: LD_VAR 0 4
80693: PPUSH
80694: LD_VAR 0 5
80698: PPUSH
80699: LD_VAR 0 6
80703: PPUSH
80704: CALL 24450 0 6
// end ;
80708: PPOPN 6
80710: END
