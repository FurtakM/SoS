// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6634 0 0
// CreateNature ;
 290: CALL 23921 0 0
// PrepareRussian ;
 294: CALL 5857 0 0
// PrepareVehicles ;
 298: CALL 1629 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2050 0 0
// PreparePlayerApemans ;
 310: CALL 2192 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_EXP 44
 629: PPUSH
 630: CALL 41844 0 3
 634: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 635: LD_ADDR_EXP 14
 639: PUSH
 640: LD_STRING Harisson
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: LD_STRING 
 648: PPUSH
 649: CALL 41844 0 3
 653: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING DeltaDoctor
 661: PPUSH
 662: CALL_OW 34
 666: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: LD_INT 22
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: PUSH
 682: LD_INT 21
 684: PUSH
 685: LD_INT 2
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 58
 694: PUSH
 695: EMPTY
 696: LIST
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 69
 707: ST_TO_ADDR
// if veh > 0 then
 708: LD_VAR 0 2
 712: PUSH
 713: LD_INT 0
 715: GREATER
 716: IFFALSE 738
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_VAR 0 2
 727: PUSH
 728: LD_INT 1
 730: ARRAY
 731: PPUSH
 732: CALL_OW 52
// end else
 736: GO 753
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 738: LD_EXP 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 753: LD_STRING LisaIn06
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 30
 763: PUSH
 764: LD_INT 1
 766: EQUAL
 767: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 58
 796: PUSH
 797: EMPTY
 798: LIST
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PPUSH
 805: CALL_OW 69
 809: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 810: LD_ADDR_EXP 2
 814: PUSH
 815: LD_STRING Lisa
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_EXP 44
 825: PPUSH
 826: CALL 41844 0 3
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 861: LD_EXP 2
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 876: LD_STRING BobbyIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 999
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 933: LD_ADDR_EXP 3
 937: PUSH
 938: LD_STRING Bobby
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: LD_EXP 44
 948: PPUSH
 949: CALL 41844 0 3
 953: ST_TO_ADDR
// if veh > 0 then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 0
 961: GREATER
 962: IFFALSE 984
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 964: LD_EXP 3
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: CALL_OW 52
// end else
 982: GO 999
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_INT 2
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 999: LD_STRING CyrusIn06
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 30
1009: PUSH
1010: LD_INT 1
1012: EQUAL
1013: IFFALSE 1122
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 1
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 21
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 58
1042: PUSH
1043: EMPTY
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: PPUSH
1051: CALL_OW 69
1055: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1056: LD_ADDR_EXP 4
1060: PUSH
1061: LD_STRING Cyrus
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_EXP 44
1071: PPUSH
1072: CALL 41844 0 3
1076: ST_TO_ADDR
// if veh > 0 then
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 0
1084: GREATER
1085: IFFALSE 1107
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1087: LD_EXP 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_INT 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
// end else
1105: GO 1122
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1107: LD_EXP 4
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1122: LD_STRING FrankIn06
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 30
1132: PUSH
1133: LD_INT 1
1135: EQUAL
1136: IFFALSE 1245
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 58
1165: PUSH
1166: EMPTY
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
1179: LD_ADDR_EXP 5
1183: PUSH
1184: LD_STRING Frank
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_EXP 44
1194: PPUSH
1195: CALL 41844 0 3
1199: ST_TO_ADDR
// if veh > 0 then
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 0
1207: GREATER
1208: IFFALSE 1230
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 52
// end else
1228: GO 1245
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1230: LD_EXP 5
1234: PPUSH
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1245: LD_STRING BrownIn06
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: CALL_OW 30
1255: PUSH
1256: LD_INT 1
1258: EQUAL
1259: IFFALSE 1368
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 21
1278: PUSH
1279: LD_INT 2
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 58
1288: PUSH
1289: EMPTY
1290: LIST
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 69
1301: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1302: LD_ADDR_EXP 6
1306: PUSH
1307: LD_STRING Brown
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_EXP 44
1317: PPUSH
1318: CALL 41844 0 3
1322: ST_TO_ADDR
// if veh > 0 then
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 0
1330: GREATER
1331: IFFALSE 1353
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_VAR 0 2
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end else
1351: GO 1368
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1353: LD_EXP 6
1357: PPUSH
1358: LD_INT 2
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1368: LD_STRING DonaldsonIn06
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 30
1378: PUSH
1379: LD_INT 1
1381: EQUAL
1382: IFFALSE 1491
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 58
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1425: LD_ADDR_EXP 7
1429: PUSH
1430: LD_STRING Donaldson
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_EXP 44
1440: PPUSH
1441: CALL 41844 0 3
1445: ST_TO_ADDR
// if veh > 0 then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 0
1453: GREATER
1454: IFFALSE 1476
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1456: LD_EXP 7
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 1
1468: ARRAY
1469: PPUSH
1470: CALL_OW 52
// end else
1474: GO 1491
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1476: LD_EXP 7
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1491: LD_STRING GladstoneIn06
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 30
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1614
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1507: LD_ADDR_VAR 0 2
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 1
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 21
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 58
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
1548: LD_ADDR_EXP 8
1552: PUSH
1553: LD_STRING Gladstone
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_EXP 44
1563: PPUSH
1564: CALL 41844 0 3
1568: ST_TO_ADDR
// if veh > 0 then
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 0
1576: GREATER
1577: IFFALSE 1599
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1579: LD_EXP 8
1583: PPUSH
1584: LD_VAR 0 2
1588: PUSH
1589: LD_INT 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 52
// end else
1597: GO 1614
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1599: LD_EXP 8
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1614: LD_INT 66
1616: PPUSH
1617: LD_INT 4
1619: PPUSH
1620: CALL_OW 86
// end ;
1624: LD_VAR 0 1
1628: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
1635: PPUSH
1636: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1637: LD_ADDR_VAR 0 5
1641: PUSH
1642: LD_STRING 06_VehiclesIn06_1
1644: PPUSH
1645: EMPTY
1646: PPUSH
1647: CALL_OW 30
1651: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1652: LD_ADDR_EXP 40
1656: PUSH
1657: LD_STRING 06_ResourcesInCargo06_1
1659: PPUSH
1660: EMPTY
1661: PPUSH
1662: CALL_OW 30
1666: ST_TO_ADDR
// cargoList = [ ] ;
1667: LD_ADDR_VAR 0 6
1671: PUSH
1672: EMPTY
1673: ST_TO_ADDR
// uc_side = 1 ;
1674: LD_ADDR_OWVAR 20
1678: PUSH
1679: LD_INT 1
1681: ST_TO_ADDR
// if vehicles > 0 then
1682: LD_VAR 0 5
1686: PUSH
1687: LD_INT 0
1689: GREATER
1690: IFFALSE 2045
// begin for i := 1 to vehicles do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: DOUBLE
1698: LD_INT 1
1700: DEC
1701: ST_TO_ADDR
1702: LD_VAR 0 5
1706: PUSH
1707: FOR_TO
1708: IFFALSE 1857
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1710: LD_ADDR_OWVAR 21
1714: PUSH
1715: LD_VAR 0 5
1719: PUSH
1720: LD_VAR 0 2
1724: ARRAY
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1730: LD_ADDR_OWVAR 37
1734: PUSH
1735: LD_VAR 0 5
1739: PUSH
1740: LD_VAR 0 2
1744: ARRAY
1745: PUSH
1746: LD_INT 2
1748: ARRAY
1749: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1750: LD_ADDR_OWVAR 39
1754: PUSH
1755: LD_VAR 0 5
1759: PUSH
1760: LD_VAR 0 2
1764: ARRAY
1765: PUSH
1766: LD_INT 3
1768: ARRAY
1769: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_VAR 0 5
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 4
1788: ARRAY
1789: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1790: LD_ADDR_OWVAR 40
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PUSH
1806: LD_INT 5
1808: ARRAY
1809: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1810: LD_ADDR_OWVAR 41
1814: PUSH
1815: LD_INT 40
1817: ST_TO_ADDR
// veh = CreateVehicle ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: CALL_OW 45
1827: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1840: LD_VAR 0 4
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// end ;
1855: GO 1707
1857: POP
1858: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 21
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 12
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// if cargoList > 0 then
1904: LD_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: GREATER
1912: IFFALSE 2045
// for i = 1 to cargoList do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_VAR 0 6
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2043
// begin if resources > 0 then
1932: LD_EXP 40
1936: PUSH
1937: LD_INT 0
1939: GREATER
1940: IFFALSE 2041
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1942: LD_VAR 0 6
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: PPUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_EXP 40
1960: PUSH
1961: LD_VAR 0 2
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 2
1984: ARRAY
1985: PPUSH
1986: LD_INT 2
1988: PPUSH
1989: LD_EXP 40
1993: PUSH
1994: LD_VAR 0 2
1998: ARRAY
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PPUSH
2004: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 2
2017: ARRAY
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_EXP 40
2026: PUSH
2027: LD_VAR 0 2
2031: ARRAY
2032: PUSH
2033: LD_INT 3
2035: ARRAY
2036: PPUSH
2037: CALL_OW 291
// end ; end ;
2041: GO 1929
2043: POP
2044: POP
// end ; end ;
2045: LD_VAR 0 1
2049: RET
// export function PrepareOthers ; var i , veh ; begin
2050: LD_INT 0
2052: PPUSH
2053: PPUSH
2054: PPUSH
// uc_side = 1 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// uc_nation = 1 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2071: LD_ADDR_EXP 11
2075: PUSH
2076: LD_STRING OthersIn06
2078: PPUSH
2079: CALL_OW 31
2083: ST_TO_ADDR
// for i in others do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: LD_EXP 11
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2185
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2097: LD_ADDR_VAR 0 3
2101: PUSH
2102: LD_INT 22
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 58
2124: PUSH
2125: EMPTY
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: ST_TO_ADDR
// if veh > 0 then
2138: LD_VAR 0 3
2142: PUSH
2143: LD_INT 0
2145: GREATER
2146: IFFALSE 2168
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2148: LD_VAR 0 2
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 52
// end else
2166: GO 2183
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2168: LD_VAR 0 2
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 49
// end ; end ;
2183: GO 2094
2185: POP
2186: POP
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
// uc_side = 1 ;
2197: LD_ADDR_OWVAR 20
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// uc_nation = 0 ;
2205: LD_ADDR_OWVAR 21
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2213: LD_ADDR_EXP 12
2217: PUSH
2218: LD_STRING ApeIn06
2220: PPUSH
2221: CALL_OW 31
2225: ST_TO_ADDR
// for i in ape do
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_EXP 12
2235: PUSH
2236: FOR_IN
2237: IFFALSE 2256
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2239: LD_VAR 0 2
2243: PPUSH
2244: LD_INT 2
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
2254: GO 2236
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 1
2262: RET
// export function PrepareDenis ; var xy , i ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
// uc_side = 4 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 4
2275: ST_TO_ADDR
// uc_nation = 1 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: LD_INT 63
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PUSH
2299: LD_INT 70
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 83
2311: PUSH
2312: LD_INT 1
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 16
2321: PUSH
2322: LD_INT 1
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 27
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 38
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 5
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 54
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2379: LD_ADDR_EXP 9
2383: PUSH
2384: LD_STRING Denis
2386: PPUSH
2387: LD_INT 1
2389: PPUSH
2390: LD_EXP 44
2394: PPUSH
2395: CALL 41844 0 3
2399: ST_TO_ADDR
// for i = 1 to xy do
2400: LD_ADDR_VAR 0 3
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_TO
2416: IFFALSE 2515
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2418: LD_VAR 0 2
2422: PUSH
2423: LD_VAR 0 3
2427: ARRAY
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: CALL_OW 428
2452: PUSH
2453: LD_INT 0
2455: EQUAL
2456: IFFALSE 2513
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2458: LD_EXP 9
2462: PPUSH
2463: LD_VAR 0 2
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 2
2482: PUSH
2483: LD_VAR 0 3
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// if IsPlaced ( Denis ) then
2500: LD_EXP 9
2504: PPUSH
2505: CALL_OW 305
2509: IFFALSE 2513
// break ;
2511: GO 2515
// end ;
2513: GO 2415
2515: POP
2516: POP
// SetClass ( Denis , 4 ) ;
2517: LD_EXP 9
2521: PPUSH
2522: LD_INT 4
2524: PPUSH
2525: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2529: LD_EXP 9
2533: PPUSH
2534: LD_INT 750
2536: PPUSH
2537: CALL_OW 234
// end ;
2541: LD_VAR 0 1
2545: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2546: LD_INT 0
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
// area := HarrisonSupportArea ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 3
2560: ST_TO_ADDR
// dir := 2 ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_INT 2
2568: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2569: LD_VAR 0 4
2573: PPUSH
2574: LD_INT 21
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PPUSH
2584: CALL_OW 70
2588: IFFALSE 2606
// begin area := HarrisonSupportArea2 ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_INT 31
2597: ST_TO_ADDR
// dir := 1 ;
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// end ; uc_side = 1 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// uc_nation = 1 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// vc_engine = 1 ;
2622: LD_ADDR_OWVAR 39
2626: PUSH
2627: LD_INT 1
2629: ST_TO_ADDR
// vc_control = 1 ;
2630: LD_ADDR_OWVAR 38
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = 2 ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh = CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := 2 ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2825: LD_ADDR_EXP 17
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 17
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine = 1 ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control = 1 ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// vc_chassis = 2 ;
2873: LD_ADDR_OWVAR 37
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// veh = CreateVehicle ;
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2891: LD_VAR 0 3
2895: PPUSH
2896: LD_VAR 0 5
2900: PPUSH
2901: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_INT 50
2929: PPUSH
2930: CALL_OW 240
// hc_class := 1 ;
2934: LD_ADDR_OWVAR 28
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// hc_sex := sex_female ;
2942: LD_ADDR_OWVAR 27
2946: PUSH
2947: LD_INT 2
2949: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING SecondCharsGal
2957: ST_TO_ADDR
// hc_face_number := 45 ;
2958: LD_ADDR_OWVAR 34
2962: PUSH
2963: LD_INT 45
2965: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2966: LD_ADDR_OWVAR 29
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 10
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING Ingrid Jonsson
2988: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2989: LD_ADDR_OWVAR 30
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 0
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3012: LD_ADDR_OWVAR 31
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: CALL_OW 44
3044: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_VAR 0 3
3054: PPUSH
3055: CALL_OW 52
// end ;
3059: LD_VAR 0 1
3063: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3064: LD_INT 0
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_INT 22
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 23
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 26
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 69
3114: PUSH
3115: LD_EXP 3
3119: PUSH
3120: LD_EXP 4
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 5
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: DIFF
3147: ST_TO_ADDR
// for i in _tmp do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3200
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3161: LD_VAR 0 2
3165: PPUSH
3166: LD_INT 32
3168: PPUSH
3169: CALL_OW 308
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: CALL_OW 302
3183: AND
3184: IFFALSE 3198
// begin tmp := i ;
3186: LD_ADDR_VAR 0 3
3190: PUSH
3191: LD_VAR 0 2
3195: ST_TO_ADDR
// break ;
3196: GO 3200
// end ;
3198: GO 3158
3200: POP
3201: POP
// if not tmp then
3202: LD_VAR 0 3
3206: NOT
3207: IFFALSE 3219
// tmp := JMM ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: LD_EXP 1
3218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3219: LD_INT 35
3221: PPUSH
3222: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3226: LD_INT 81
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 92
3238: PUSH
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 250
3248: PUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL_OW 251
3258: PUSH
3259: LD_INT 22
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: NOT
3277: PUSH
3278: LD_INT 22
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 21
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 92
3300: PUSH
3301: LD_VAR 0 3
3305: PPUSH
3306: CALL_OW 250
3310: PUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 251
3320: PUSH
3321: LD_INT 20
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: AND
3340: IFFALSE 3219
// blockSpawn = 1 ;
3342: LD_ADDR_EXP 29
3346: PUSH
3347: LD_INT 1
3349: ST_TO_ADDR
// uc_side = 4 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3358: LD_ADDR_EXP 15
3362: PUSH
3363: LD_STRING Joan
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: LD_EXP 44
3373: PPUSH
3374: CALL 41844 0 3
3378: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 250
3393: PPUSH
3394: LD_VAR 0 3
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_INT 250
3421: PPUSH
3422: CALL_OW 234
// InGameOn ;
3426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3430: LD_EXP 15
3434: PPUSH
3435: CALL_OW 87
// wait ( 0 0$2 ) ;
3439: LD_INT 70
3441: PPUSH
3442: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: CALL_OW 122
// wait ( 0 0$1 ) ;
3464: LD_INT 35
3466: PPUSH
3467: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3471: LD_VAR 0 3
3475: PPUSH
3476: LD_EXP 15
3480: PPUSH
3481: CALL_OW 112
// wait ( 0 0$2 ) ;
3485: LD_INT 70
3487: PPUSH
3488: CALL_OW 67
// DialogueOn ;
3492: CALL_OW 6
// if tmp = JMM then
3496: LD_VAR 0 3
3500: PUSH
3501: LD_EXP 1
3505: EQUAL
3506: IFFALSE 3655
// begin ComTurnUnit ( JMM , Joan ) ;
3508: LD_EXP 1
3512: PPUSH
3513: LD_EXP 15
3517: PPUSH
3518: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3522: LD_EXP 1
3526: PPUSH
3527: LD_STRING D5b-JMM-1
3529: PPUSH
3530: CALL_OW 88
// DialogueOff ;
3534: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3538: LD_EXP 15
3542: PPUSH
3543: LD_INT 500
3545: PPUSH
3546: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3550: LD_EXP 15
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_EXP 15
3573: PPUSH
3574: CALL_OW 119
// wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// DialogueOn ;
3585: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D5b-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D5b-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D5b-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D5b-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D5b-Joan-3
3644: PPUSH
3645: CALL_OW 88
// DialogueOff ;
3649: CALL_OW 7
// end else
3653: GO 4029
// begin ComTurnUnit ( tmp , Joan ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_EXP 15
3664: PPUSH
3665: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_STRING D5a-Sol1-1
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3685: LD_EXP 15
3689: PPUSH
3690: LD_INT 500
3692: PPUSH
3693: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_VAR 0 3
3706: PPUSH
3707: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3711: LD_VAR 0 3
3715: PPUSH
3716: LD_EXP 15
3720: PPUSH
3721: CALL_OW 119
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// DialogueOn ;
3732: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3736: LD_EXP 15
3740: PPUSH
3741: LD_STRING D5a-Joan-1
3743: PPUSH
3744: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_STRING D5a-Sol1-2
3755: PPUSH
3756: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-2
3767: PPUSH
3768: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_STRING D5a-Sol1-3
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-3
3791: PPUSH
3792: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D5a-Sol1-4
3803: PPUSH
3804: CALL_OW 88
// DialogueOff ;
3808: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3812: LD_EXP 1
3816: PUSH
3817: LD_INT 55
3819: PUSH
3820: EMPTY
3821: LIST
3822: PPUSH
3823: CALL_OW 69
3827: IN
3828: IFFALSE 3851
// begin ComMoveUnit ( JMM , Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 15
3839: PPUSH
3840: CALL_OW 112
// wait ( 0 0$05 ) ;
3844: LD_INT 175
3846: PPUSH
3847: CALL_OW 67
// end ; ComExitVehicle ( JMM ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3860: LD_EXP 1
3864: PPUSH
3865: CALL_OW 122
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3883: LD_EXP 15
3887: PUSH
3888: LD_VAR 0 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_EXP 1
3901: PPUSH
3902: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3906: LD_EXP 15
3910: PPUSH
3911: LD_EXP 1
3915: PPUSH
3916: CALL_OW 296
3920: PUSH
3921: LD_INT 5
3923: LESS
3924: IFFALSE 3876
// ComTurnUnit ( Joan , JMM ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 119
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3965: LD_EXP 15
3969: PPUSH
3970: LD_STRING D5a-Joan-4
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D5a-JMM-4
3984: PPUSH
3985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3989: LD_EXP 15
3993: PPUSH
3994: LD_STRING D5a-Joan-5
3996: PPUSH
3997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4001: LD_EXP 1
4005: PPUSH
4006: LD_STRING D5a-JMM-5
4008: PPUSH
4009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4013: LD_EXP 15
4017: PPUSH
4018: LD_STRING D5a-Joan-6
4020: PPUSH
4021: CALL_OW 88
// DialogueOff ;
4025: CALL_OW 7
// end ; DialogueOn ;
4029: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D6-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4045: LD_EXP 15
4049: PPUSH
4050: LD_STRING D6-Joan-1
4052: PPUSH
4053: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4057: LD_EXP 1
4061: PPUSH
4062: LD_STRING D6-JMM-2
4064: PPUSH
4065: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4069: LD_EXP 15
4073: PPUSH
4074: LD_STRING D6-Joan-2
4076: PPUSH
4077: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D6-JMM-3
4088: PPUSH
4089: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4093: LD_EXP 15
4097: PPUSH
4098: LD_STRING D6-Joan-3
4100: PPUSH
4101: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4105: LD_EXP 1
4109: PPUSH
4110: LD_STRING D6-JMM-4
4112: PPUSH
4113: CALL_OW 88
// DialogueOff ;
4117: CALL_OW 7
// InGameOff ;
4121: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4125: LD_EXP 15
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4137: LD_STRING MJ
4139: PPUSH
4140: CALL_OW 337
// JoanStatus = 1 ;
4144: LD_ADDR_EXP 16
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// blockSpawn = 0 ;
4152: LD_ADDR_EXP 29
4156: PUSH
4157: LD_INT 0
4159: ST_TO_ADDR
// end ;
4160: LD_VAR 0 1
4164: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
// if not number or number > 8 then
4169: LD_VAR 0 1
4173: NOT
4174: PUSH
4175: LD_VAR 0 1
4179: PUSH
4180: LD_INT 8
4182: GREATER
4183: OR
4184: IFFALSE 4188
// exit ;
4186: GO 5752
// repeat wait ( 0 0$7 ) ;
4188: LD_INT 245
4190: PPUSH
4191: CALL_OW 67
// until blockSpawn = 0 ;
4195: LD_EXP 29
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4188
// uc_side = 1 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// uc_nation = 1 ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// InitHc ;
4221: CALL_OW 19
// if number = 1 then
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: EQUAL
4233: IFFALSE 4409
// begin hc_class := 3 ;
4235: LD_ADDR_OWVAR 28
4239: PUSH
4240: LD_INT 3
4242: ST_TO_ADDR
// hc_sex := sex_male ;
4243: LD_ADDR_OWVAR 27
4247: PUSH
4248: LD_INT 1
4250: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING SecondCharsGal
4258: ST_TO_ADDR
// hc_face_number := 55 ;
4259: LD_ADDR_OWVAR 34
4263: PUSH
4264: LD_INT 55
4266: ST_TO_ADDR
// hc_name := George McCarthy ;
4267: LD_ADDR_OWVAR 26
4271: PUSH
4272: LD_STRING George McCarthy
4274: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4275: LD_ADDR_OWVAR 29
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 10
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4290: LD_ADDR_OWVAR 30
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4313: LD_ADDR_OWVAR 31
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// un = CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 23
4353: PPUSH
4354: LD_INT 1
4356: PPUSH
4357: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: CALL_OW 87
// wait ( 0 0$1 ) ;
4370: LD_INT 35
4372: PPUSH
4373: CALL_OW 67
// DialogueOn ;
4377: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4381: LD_VAR 0 3
4385: PPUSH
4386: LD_STRING D11d-Sol4-1
4388: PPUSH
4389: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D11d-JMM-1
4400: PPUSH
4401: CALL_OW 88
// DialogueOff ;
4405: CALL_OW 7
// end ; if number = 2 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 2
4416: EQUAL
4417: IFFALSE 4593
// begin hc_class := 1 ;
4419: LD_ADDR_OWVAR 28
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// hc_sex := sex_male ;
4427: LD_ADDR_OWVAR 27
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4435: LD_ADDR_OWVAR 33
4439: PUSH
4440: LD_STRING AmGalRemake
4442: ST_TO_ADDR
// hc_face_number := 7 ;
4443: LD_ADDR_OWVAR 34
4447: PUSH
4448: LD_INT 7
4450: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4451: LD_ADDR_OWVAR 26
4455: PUSH
4456: LD_STRING Bobby Jordan
4458: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4459: LD_ADDR_OWVAR 29
4463: PUSH
4464: LD_INT 9
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4474: LD_ADDR_OWVAR 30
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 1
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4497: LD_ADDR_OWVAR 31
4501: PUSH
4502: LD_INT 2
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: LD_INT 1
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: ST_TO_ADDR
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 3
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: LD_INT 24
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 49
// wait ( 0 0$1 ) ;
4545: LD_INT 35
4547: PPUSH
4548: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: CALL_OW 87
// DialogueOn ;
4561: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: LD_STRING D11b-Sol3-1
4572: PPUSH
4573: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4577: LD_EXP 1
4581: PPUSH
4582: LD_STRING D11b-JMM-1
4584: PPUSH
4585: CALL_OW 88
// DialogueOff ;
4589: CALL_OW 7
// end ; if number = 3 then
4593: LD_VAR 0 1
4597: PUSH
4598: LD_INT 3
4600: EQUAL
4601: IFFALSE 4765
// begin hc_class := 1 ;
4603: LD_ADDR_OWVAR 28
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// hc_sex := sex_male ;
4611: LD_ADDR_OWVAR 27
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// hc_gallery := DJ ;
4619: LD_ADDR_OWVAR 33
4623: PUSH
4624: LD_STRING DJ
4626: ST_TO_ADDR
// hc_face_number := 1 ;
4627: LD_ADDR_OWVAR 34
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// hc_name := Darius Dajay ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING Darius Dajay
4642: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4643: LD_ADDR_OWVAR 29
4647: PUSH
4648: LD_INT 11
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4658: LD_ADDR_OWVAR 30
4662: PUSH
4663: LD_INT 2
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4681: LD_ADDR_OWVAR 31
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 25
4721: PPUSH
4722: LD_INT 1
4724: PPUSH
4725: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: CALL_OW 87
// wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// DialogueOn ;
4745: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_STRING D11f-Sol5-1
4756: PPUSH
4757: CALL_OW 88
// DialogueOff ;
4761: CALL_OW 7
// end ; if number = 4 then
4765: LD_VAR 0 1
4769: PUSH
4770: LD_INT 4
4772: EQUAL
4773: IFFALSE 4910
// begin hc_class := 2 ;
4775: LD_ADDR_OWVAR 28
4779: PUSH
4780: LD_INT 2
4782: ST_TO_ADDR
// hc_sex := sex_female ;
4783: LD_ADDR_OWVAR 27
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4791: LD_ADDR_OWVAR 33
4795: PUSH
4796: LD_STRING SecondCharsGal
4798: ST_TO_ADDR
// hc_face_number := 46 ;
4799: LD_ADDR_OWVAR 34
4803: PUSH
4804: LD_INT 46
4806: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4807: LD_ADDR_OWVAR 26
4811: PUSH
4812: LD_STRING Sylvia Creak
4814: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4815: LD_ADDR_OWVAR 29
4819: PUSH
4820: LD_INT 10
4822: PUSH
4823: LD_INT 9
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4830: LD_ADDR_OWVAR 30
4834: PUSH
4835: LD_INT 0
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4853: LD_ADDR_OWVAR 31
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// un = CreateHuman ;
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: CALL_OW 44
4885: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 26
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: CALL_OW 87
// end ; if number = 5 then
4910: LD_VAR 0 1
4914: PUSH
4915: LD_INT 5
4917: EQUAL
4918: IFFALSE 5094
// begin hc_class := 1 ;
4920: LD_ADDR_OWVAR 28
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// hc_sex := sex_female ;
4928: LD_ADDR_OWVAR 27
4932: PUSH
4933: LD_INT 2
4935: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4936: LD_ADDR_OWVAR 33
4940: PUSH
4941: LD_STRING SecondCharsGal
4943: ST_TO_ADDR
// hc_face_number := 37 ;
4944: LD_ADDR_OWVAR 34
4948: PUSH
4949: LD_INT 37
4951: ST_TO_ADDR
// hc_name := Malena Johnson ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_STRING Malena Johnson
4959: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4960: LD_ADDR_OWVAR 29
4964: PUSH
4965: LD_INT 11
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4975: LD_ADDR_OWVAR 30
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: LD_INT 1
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: LD_INT 0
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4998: LD_ADDR_OWVAR 31
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 1
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: ST_TO_ADDR
// un = CreateHuman ;
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: CALL_OW 44
5030: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 27
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5046: LD_VAR 0 3
5050: PPUSH
5051: CALL_OW 87
// wait ( 0 0$1 ) ;
5055: LD_INT 35
5057: PPUSH
5058: CALL_OW 67
// DialogueOn ;
5062: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: LD_STRING D11c-FSol3-1
5073: PPUSH
5074: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5078: LD_EXP 1
5082: PPUSH
5083: LD_STRING D11c-JMM-1
5085: PPUSH
5086: CALL_OW 88
// DialogueOff ;
5090: CALL_OW 7
// end ; if number = 6 then
5094: LD_VAR 0 1
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: IFFALSE 5276
// begin hc_class := 1 ;
5104: LD_ADDR_OWVAR 28
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// hc_sex := sex_male ;
5112: LD_ADDR_OWVAR 27
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5120: LD_ADDR_OWVAR 33
5124: PUSH
5125: LD_STRING AmGalRemake
5127: ST_TO_ADDR
// hc_face_number := 1 ;
5128: LD_ADDR_OWVAR 34
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// hc_name := Charles Brown ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING Charles Brown
5143: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5144: LD_ADDR_OWVAR 29
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 30
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5182: LD_ADDR_OWVAR 31
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 0
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// un = CreateHuman ;
5205: LD_ADDR_VAR 0 3
5209: PUSH
5210: CALL_OW 44
5214: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: LD_INT 28
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5230: LD_VAR 0 3
5234: PPUSH
5235: CALL_OW 87
// wait ( 0 0$1 ) ;
5239: LD_INT 35
5241: PPUSH
5242: CALL_OW 67
// DialogueOn ;
5246: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_STRING D4-Sol1-5
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// tempCharles = un ;
5266: LD_ADDR_EXP 13
5270: PUSH
5271: LD_VAR 0 3
5275: ST_TO_ADDR
// end ; if number = 7 then
5276: LD_VAR 0 1
5280: PUSH
5281: LD_INT 7
5283: EQUAL
5284: IFFALSE 5556
// begin hc_class := 1 ;
5286: LD_ADDR_OWVAR 28
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// hc_sex := sex_female ;
5294: LD_ADDR_OWVAR 27
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5302: LD_ADDR_OWVAR 33
5306: PUSH
5307: LD_STRING AmGalRemake
5309: ST_TO_ADDR
// hc_face_number := 2 ;
5310: LD_ADDR_OWVAR 34
5314: PUSH
5315: LD_INT 2
5317: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5318: LD_ADDR_OWVAR 26
5322: PUSH
5323: LD_STRING Rebecca Macdonald
5325: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5326: LD_ADDR_OWVAR 29
5330: PUSH
5331: LD_INT 10
5333: PUSH
5334: LD_INT 10
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5341: LD_ADDR_OWVAR 30
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: LD_INT 0
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5364: LD_ADDR_OWVAR 31
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: ST_TO_ADDR
// un = CreateHuman ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: CALL_OW 44
5396: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 29
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 87
// wait ( 0 0$1 ) ;
5421: LD_INT 35
5423: PPUSH
5424: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5428: LD_INT 30
5430: PPUSH
5431: LD_INT 22
5433: PUSH
5434: LD_INT 3
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 70
5445: IFFALSE 5556
// begin DialogueOn ;
5447: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: CALL_OW 250
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: CALL_OW 251
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: LD_INT 15
5476: NEG
5477: PPUSH
5478: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 250
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 251
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_STRING D11a-FSol2-1
5516: PPUSH
5517: CALL_OW 88
// DialogueOff ;
5521: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5525: LD_INT 3
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: CALL_OW 471
// wait ( 0 0$2 ) ;
5537: LD_INT 70
5539: PPUSH
5540: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5544: LD_INT 3
5546: PPUSH
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 472
// end ; end ; if number = 8 then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_INT 8
5563: EQUAL
5564: IFFALSE 5720
// begin hc_class := 1 ;
5566: LD_ADDR_OWVAR 28
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// hc_sex := sex_female ;
5574: LD_ADDR_OWVAR 27
5578: PUSH
5579: LD_INT 2
5581: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5582: LD_ADDR_OWVAR 33
5586: PUSH
5587: LD_STRING SecondCharsGal
5589: ST_TO_ADDR
// hc_face_number := 42 ;
5590: LD_ADDR_OWVAR 34
5594: PUSH
5595: LD_INT 42
5597: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5598: LD_ADDR_OWVAR 26
5602: PUSH
5603: LD_STRING Margherite Simpson
5605: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5606: LD_ADDR_OWVAR 29
5610: PUSH
5611: LD_INT 12
5613: PUSH
5614: LD_INT 10
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5621: LD_ADDR_OWVAR 30
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: LD_INT 0
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5644: LD_ADDR_OWVAR 31
5648: PUSH
5649: LD_INT 1
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: ST_TO_ADDR
// un = CreateHuman ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 44
5676: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_INT 33
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 87
// wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5708: LD_VAR 0 3
5712: PPUSH
5713: LD_STRING D11e-FSol4-1
5715: PPUSH
5716: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5720: LD_ADDR_EXP 45
5724: PUSH
5725: LD_EXP 45
5729: PUSH
5730: LD_VAR 0 3
5734: UNION
5735: ST_TO_ADDR
// arrivals := arrivals union un ;
5736: LD_ADDR_EXP 46
5740: PUSH
5741: LD_EXP 46
5745: PUSH
5746: LD_VAR 0 3
5750: UNION
5751: ST_TO_ADDR
// end ;
5752: LD_VAR 0 2
5756: RET
// every 0 0$1 do var i ;
5757: GO 5759
5759: DISABLE
5760: LD_INT 0
5762: PPUSH
// begin enable ;
5763: ENABLE
// if not ignoreTarget then
5764: LD_EXP 45
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5854
// for i in ignoreTarget do
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_EXP 45
5782: PUSH
5783: FOR_IN
5784: IFFALSE 5852
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5786: LD_INT 22
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 91
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 45
5825: DIFF
5826: PUSH
5827: LD_INT 1
5829: GREATER
5830: IFFALSE 5850
// begin ignoreTarget := ignoreTarget diff i ;
5832: LD_ADDR_EXP 45
5836: PUSH
5837: LD_EXP 45
5841: PUSH
5842: LD_VAR 0 1
5846: DIFF
5847: ST_TO_ADDR
// break ;
5848: GO 5852
// end ;
5850: GO 5783
5852: POP
5853: POP
// end ; end_of_file
5854: PPOPN 1
5856: END
// export function PrepareRussian ; var i ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// if Difficulty < 3 then
5861: LD_OWVAR 67
5865: PUSH
5866: LD_INT 3
5868: LESS
5869: IFFALSE 5886
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 81
5876: PPUSH
5877: CALL_OW 428
5881: PPUSH
5882: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 3
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: LD_EXP 34
5899: PPUSH
5900: LD_EXP 35
5904: PPUSH
5905: CALL_OW 12
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 4
5915: PPUSH
5916: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 8
5928: PPUSH
5929: LD_EXP 34
5933: PPUSH
5934: LD_EXP 35
5938: PPUSH
5939: CALL_OW 12
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 4
5949: PPUSH
5950: CALL 6388 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 3
5959: PPUSH
5960: LD_INT 67
5962: PPUSH
5963: LD_EXP 34
5967: PPUSH
5968: LD_EXP 35
5972: PPUSH
5973: CALL_OW 12
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 3
5993: PPUSH
5994: LD_INT 21
5996: PPUSH
5997: LD_EXP 34
6001: PPUSH
6002: LD_EXP 35
6006: PPUSH
6007: CALL_OW 12
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 6
6017: PPUSH
6018: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 3
6027: PPUSH
6028: LD_INT 17
6030: PPUSH
6031: LD_EXP 34
6035: PPUSH
6036: LD_EXP 35
6040: PPUSH
6041: CALL_OW 12
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 6
6051: PPUSH
6052: CALL 6388 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 3
6061: PPUSH
6062: LD_INT 32
6064: PPUSH
6065: LD_EXP 34
6069: PPUSH
6070: LD_EXP 35
6074: PPUSH
6075: CALL_OW 12
6079: PPUSH
6080: LD_INT 4
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL 6388 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 21
6107: PUSH
6108: LD_INT 3
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 30
6117: PUSH
6118: LD_INT 32
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: PUSH
6135: FOR_IN
6136: IFFALSE 6176
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 3
6143: PPUSH
6144: LD_VAR 0 2
6148: PPUSH
6149: LD_EXP 34
6153: PPUSH
6154: LD_EXP 35
6158: PPUSH
6159: CALL_OW 12
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 1
6169: PPUSH
6170: CALL 6388 0 6
6174: GO 6135
6176: POP
6177: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6178: LD_ADDR_VAR 0 2
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 21
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 30
6205: PUSH
6206: LD_INT 31
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6252
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6226: LD_EXP 34
6230: PPUSH
6231: LD_EXP 35
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 6498 0 2
6250: GO 6223
6252: POP
6253: POP
// end ; end_of_file
6254: LD_VAR 0 1
6258: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
6263: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6264: LD_ADDR_VAR 0 6
6268: PUSH
6269: LD_VAR 0 1
6273: PUSH
6274: LD_INT 1
6276: PPUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: CALL_OW 12
6286: ARRAY
6287: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6288: LD_VAR 0 6
6292: PPUSH
6293: CALL_OW 258
6297: PUSH
6298: LD_INT 1
6300: EQUAL
6301: IFFALSE 6319
// Say ( speaker , dialogMID ) else
6303: LD_VAR 0 6
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 88
6317: GO 6333
// Say ( speaker , dialogFID ) ;
6319: LD_VAR 0 6
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 88
// result := speaker ;
6333: LD_ADDR_VAR 0 4
6337: PUSH
6338: LD_VAR 0 6
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 4
6347: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// for i in charactersList do
6352: LD_ADDR_VAR 0 4
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: FOR_IN
6363: IFFALSE 6381
// SaveCharacters ( i , ident ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL_OW 38
6379: GO 6362
6381: POP
6382: POP
// end ;
6383: LD_VAR 0 3
6387: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
// for i = 1 to count do
6394: LD_ADDR_VAR 0 8
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_VAR 0 6
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6491
// begin uc_side = side ;
6412: LD_ADDR_OWVAR 20
6416: PUSH
6417: LD_VAR 0 1
6421: ST_TO_ADDR
// uc_nation = nation ;
6422: LD_ADDR_OWVAR 21
6426: PUSH
6427: LD_VAR 0 2
6431: ST_TO_ADDR
// hc_gallery =  ;
6432: LD_ADDR_OWVAR 33
6436: PUSH
6437: LD_STRING 
6439: ST_TO_ADDR
// hc_name =  ;
6440: LD_ADDR_OWVAR 26
6444: PUSH
6445: LD_STRING 
6447: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6448: LD_INT 0
6450: PPUSH
6451: LD_VAR 0 5
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL_OW 380
// un = CreateHuman ;
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6475: LD_VAR 0 10
6479: PPUSH
6480: LD_VAR 0 3
6484: PPUSH
6485: CALL_OW 52
// end ;
6489: GO 6409
6491: POP
6492: POP
// end ;
6493: LD_VAR 0 7
6497: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// uc_side := GetSide ( b ) ;
6503: LD_ADDR_OWVAR 20
6507: PUSH
6508: LD_VAR 0 2
6512: PPUSH
6513: CALL_OW 255
6517: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6518: LD_ADDR_OWVAR 21
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: CALL_OW 248
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_VAR 0 1
6543: PPUSH
6544: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6548: LD_ADDR_VAR 0 5
6552: PUSH
6553: LD_VAR 0 2
6557: PPUSH
6558: CALL_OW 254
6562: PUSH
6563: LD_INT 3
6565: MINUS
6566: ST_TO_ADDR
// if dir < 0 then
6567: LD_VAR 0 5
6571: PUSH
6572: LD_INT 0
6574: LESS
6575: IFFALSE 6591
// dir := 6 + dir ;
6577: LD_ADDR_VAR 0 5
6581: PUSH
6582: LD_INT 6
6584: PUSH
6585: LD_VAR 0 5
6589: PLUS
6590: ST_TO_ADDR
// un := CreateHuman ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: CALL_OW 44
6600: ST_TO_ADDR
// SetDir ( un , dir ) ;
6601: LD_VAR 0 4
6605: PPUSH
6606: LD_VAR 0 5
6610: PPUSH
6611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6615: LD_VAR 0 4
6619: PPUSH
6620: LD_VAR 0 2
6624: PPUSH
6625: CALL_OW 52
// end ;
6629: LD_VAR 0 3
6633: RET
// export function PrepareDifficulty ; begin
6634: LD_INT 0
6636: PPUSH
// if Difficulty = 1 then
6637: LD_OWVAR 67
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6663
// begin RuSolMinLevel = 2 ;
6647: LD_ADDR_EXP 34
6651: PUSH
6652: LD_INT 2
6654: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6655: LD_ADDR_EXP 35
6659: PUSH
6660: LD_INT 3
6662: ST_TO_ADDR
// end ; if Difficulty = 2 then
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 2
6670: EQUAL
6671: IFFALSE 6689
// begin RuSolMinLevel = 3 ;
6673: LD_ADDR_EXP 34
6677: PUSH
6678: LD_INT 3
6680: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6681: LD_ADDR_EXP 35
6685: PUSH
6686: LD_INT 5
6688: ST_TO_ADDR
// end ; if Difficulty = 3 then
6689: LD_OWVAR 67
6693: PUSH
6694: LD_INT 3
6696: EQUAL
6697: IFFALSE 6715
// begin RuSolMinLevel = 4 ;
6699: LD_ADDR_EXP 34
6703: PUSH
6704: LD_INT 4
6706: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6707: LD_ADDR_EXP 35
6711: PUSH
6712: LD_INT 6
6714: ST_TO_ADDR
// end ; end ;
6715: LD_VAR 0 1
6719: RET
// export function ShowQuery1 ; begin
6720: LD_INT 0
6722: PPUSH
// case query ( QKill ) of 1 :
6723: LD_STRING QKill
6725: PPUSH
6726: CALL_OW 97
6730: PUSH
6731: LD_INT 1
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6750
6739: POP
// begin result = 1 ;
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// end ; 2 :
6748: GO 6789
6750: LD_INT 2
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6769
6758: POP
// begin result = 2 ;
6759: LD_ADDR_VAR 0 1
6763: PUSH
6764: LD_INT 2
6766: ST_TO_ADDR
// end ; 3 :
6767: GO 6789
6769: LD_INT 3
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 6788
6777: POP
// begin result = 3 ;
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: LD_INT 3
6785: ST_TO_ADDR
// end ; end ;
6786: GO 6789
6788: POP
// end ;
6789: LD_VAR 0 1
6793: RET
// export function ShowQuery2 ; begin
6794: LD_INT 0
6796: PPUSH
// case query ( QKill2 ) of 1 :
6797: LD_STRING QKill2
6799: PPUSH
6800: CALL_OW 97
6804: PUSH
6805: LD_INT 1
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 6824
6813: POP
// begin result = 1 ;
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ; 2 :
6822: GO 6844
6824: LD_INT 2
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6843
6832: POP
// begin result = 2 ;
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// end ; end ;
6841: GO 6844
6843: POP
// end ;
6844: LD_VAR 0 1
6848: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6849: LD_INT 0
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6856: LD_ADDR_VAR 0 8
6860: PUSH
6861: LD_INT 48
6863: PUSH
6864: LD_INT 49
6866: PUSH
6867: LD_INT 50
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: LD_INT 51
6878: PUSH
6879: LD_INT 52
6881: PUSH
6882: LD_INT 69
6884: PUSH
6885: LD_INT 39
6887: PUSH
6888: LD_INT 34
6890: PUSH
6891: LD_INT 40
6893: PUSH
6894: LD_INT 53
6896: PUSH
6897: LD_INT 71
6899: PUSH
6900: LD_INT 57
6902: PUSH
6903: LD_INT 58
6905: PUSH
6906: LD_INT 44
6908: PUSH
6909: LD_INT 32
6911: PUSH
6912: LD_INT 27
6914: PUSH
6915: LD_INT 23
6917: PUSH
6918: LD_INT 33
6920: PUSH
6921: LD_INT 59
6923: PUSH
6924: LD_INT 54
6926: PUSH
6927: LD_INT 55
6929: PUSH
6930: LD_INT 56
6932: PUSH
6933: LD_INT 63
6935: PUSH
6936: LD_INT 64
6938: PUSH
6939: LD_INT 65
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: DOUBLE
6997: LD_INT 1
6999: DEC
7000: ST_TO_ADDR
7001: LD_VAR 0 8
7005: PUSH
7006: FOR_TO
7007: IFFALSE 7083
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
7009: LD_VAR 0 8
7013: PUSH
7014: LD_VAR 0 5
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 1
7032: EQUAL
7033: PUSH
7034: LD_VAR 0 8
7038: PUSH
7039: LD_VAR 0 5
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 482
7054: PUSH
7055: LD_INT 1
7057: EQUAL
7058: AND
7059: IFFALSE 7081
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
7061: LD_VAR 0 2
7065: PPUSH
7066: LD_VAR 0 8
7070: PUSH
7071: LD_VAR 0 5
7075: ARRAY
7076: PPUSH
7077: CALL_OW 184
7081: GO 7006
7083: POP
7084: POP
// end ;
7085: LD_VAR 0 4
7089: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
7094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: PUSH
7126: LD_VAR 0 3
7130: LESSEQUAL
7131: IFFALSE 7239
// begin for i = 1 to vehCount do
7133: LD_ADDR_VAR 0 9
7137: PUSH
7138: DOUBLE
7139: LD_INT 1
7141: DEC
7142: ST_TO_ADDR
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_TO
7149: IFFALSE 7237
// begin weapon = weaponTab [ i ] ;
7151: LD_ADDR_VAR 0 10
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: LD_VAR 0 9
7165: ARRAY
7166: ST_TO_ADDR
// if weapon = 46 then
7167: LD_VAR 0 10
7171: PUSH
7172: LD_INT 46
7174: EQUAL
7175: IFFALSE 7206
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7177: LD_VAR 0 2
7181: PPUSH
7182: LD_INT 24
7184: PPUSH
7185: LD_VAR 0 5
7189: PPUSH
7190: LD_VAR 0 6
7194: PPUSH
7195: LD_VAR 0 10
7199: PPUSH
7200: CALL_OW 185
// end else
7204: GO 7235
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PPUSH
7226: LD_VAR 0 10
7230: PPUSH
7231: CALL_OW 185
// end ; end ;
7235: GO 7148
7237: POP
7238: POP
// end ; end ;
7239: LD_VAR 0 8
7243: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7250: LD_ADDR_VAR 0 8
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_VAR 0 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: LD_INT 650
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: ST_TO_ADDR
// if damageVehicles > 0 then
7304: LD_VAR 0 8
7308: PUSH
7309: LD_INT 0
7311: GREATER
7312: IFFALSE 7333
// ComMoveXY ( damageVehicles , repX , repY ) ;
7314: LD_VAR 0 8
7318: PPUSH
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_VAR 0 4
7328: PPUSH
7329: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7333: LD_VAR 0 8
7337: PPUSH
7338: LD_INT 95
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 58
7355: PUSH
7356: EMPTY
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 72
7371: PUSH
7372: LD_INT 0
7374: GREATER
7375: IFFALSE 7442
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7377: LD_ADDR_VAR 0 6
7381: PUSH
7382: LD_VAR 0 8
7386: PPUSH
7387: LD_INT 95
7389: PUSH
7390: LD_VAR 0 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 72
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7440
// ComExitVehicle ( UnitsInside ( i ) ) ;
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 313
7433: PPUSH
7434: CALL_OW 121
7438: GO 7421
7440: POP
7441: POP
// end ;
7442: LD_VAR 0 5
7446: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7447: LD_INT 0
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7456: LD_ADDR_VAR 0 8
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 24
7485: PUSH
7486: LD_INT 660
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 58
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 34
7507: PUSH
7508: LD_INT 43
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 34
7517: PUSH
7518: LD_INT 44
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 34
7527: PUSH
7528: LD_INT 46
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 24
7581: PUSH
7582: LD_INT 1000
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: LD_INT 58
7594: PUSH
7595: EMPTY
7596: LIST
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 43
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 34
7613: PUSH
7614: LD_INT 44
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: LD_INT 46
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: PUSH
7653: LD_INT 5
7655: PUSH
7656: LD_INT 6
7658: PUSH
7659: LD_INT 6
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: LD_OWVAR 67
7671: ARRAY
7672: EQUAL
7673: IFFALSE 7929
// if seeEnemy = 0 then
7675: LD_VAR 0 11
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7929
// repeat wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_VAR 0 1
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 21
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 24
7721: PUSH
7722: LD_INT 660
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 3
7731: PUSH
7732: LD_INT 58
7734: PUSH
7735: EMPTY
7736: LIST
7737: PUSH
7738: LD_INT 2
7740: PUSH
7741: LD_INT 34
7743: PUSH
7744: LD_INT 43
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 44
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 46
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PPUSH
7788: CALL_OW 69
7792: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7793: LD_INT 22
7795: PUSH
7796: LD_VAR 0 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 95
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: NOT
7826: PUSH
7827: LD_VAR 0 11
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: AND
7836: IFFALSE 7891
// for i := 1 to wayX do
7838: LD_ADDR_VAR 0 6
7842: PUSH
7843: DOUBLE
7844: LD_INT 1
7846: DEC
7847: ST_TO_ADDR
7848: LD_VAR 0 3
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7889
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 3
7865: PUSH
7866: LD_VAR 0 6
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 4
7876: PUSH
7877: LD_VAR 0 6
7881: ARRAY
7882: PPUSH
7883: CALL_OW 114
7887: GO 7853
7889: POP
7890: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7891: LD_INT 22
7893: PUSH
7894: LD_VAR 0 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 95
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: PUSH
7924: LD_INT 0
7926: GREATER
7927: IFFALSE 7685
// seeEnemy = 1 ;
7929: LD_ADDR_VAR 0 11
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7937: LD_INT 35
7939: PPUSH
7940: CALL_OW 67
// for j in vehiclesOK do
7944: LD_ADDR_VAR 0 7
7948: PUSH
7949: LD_VAR 0 8
7953: PUSH
7954: FOR_IN
7955: IFFALSE 8168
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7957: LD_ADDR_VAR 0 9
7961: PUSH
7962: LD_INT 81
7964: PUSH
7965: LD_VAR 0 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 101
7976: PUSH
7977: LD_INT 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: PUSH
7993: LD_EXP 45
7997: DIFF
7998: PPUSH
7999: LD_VAR 0 7
8003: PPUSH
8004: CALL_OW 74
8008: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
8009: LD_ADDR_VAR 0 10
8013: PUSH
8014: LD_INT 81
8016: PUSH
8017: LD_VAR 0 1
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 101
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: LD_INT 59
8041: PUSH
8042: EMPTY
8043: LIST
8044: PUSH
8045: LD_INT 21
8047: PUSH
8048: LD_INT 1
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 21
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: LD_EXP 45
8088: DIFF
8089: PPUSH
8090: LD_VAR 0 7
8094: PPUSH
8095: CALL_OW 74
8099: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8100: LD_VAR 0 7
8104: PPUSH
8105: LD_VAR 0 9
8109: PPUSH
8110: CALL_OW 296
8114: PUSH
8115: LD_INT 8
8117: PLUS
8118: PUSH
8119: LD_VAR 0 7
8123: PPUSH
8124: LD_VAR 0 10
8128: PPUSH
8129: CALL_OW 296
8133: LESS
8134: IFFALSE 8152
// ComAttackUnit ( j , target1 ) else
8136: LD_VAR 0 7
8140: PPUSH
8141: LD_VAR 0 9
8145: PPUSH
8146: CALL_OW 115
8150: GO 8166
// ComAttackUnit ( j , target2 ) ;
8152: LD_VAR 0 7
8156: PPUSH
8157: LD_VAR 0 10
8161: PPUSH
8162: CALL_OW 115
// end ;
8166: GO 7954
8168: POP
8169: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8170: LD_INT 22
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 21
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 1000
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 58
8207: PUSH
8208: EMPTY
8209: LIST
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 34
8216: PUSH
8217: LD_INT 43
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 34
8226: PUSH
8227: LD_INT 44
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 34
8236: PUSH
8237: LD_INT 46
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 69
8265: PUSH
8266: LD_INT 0
8268: EQUAL
8269: IFFALSE 7937
// seeEnemy = 0 ;
8271: LD_ADDR_VAR 0 11
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// end ;
8279: LD_VAR 0 5
8283: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
8291: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8292: LD_ADDR_VAR 0 8
8296: PUSH
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 313
8306: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8307: LD_ADDR_VAR 0 9
8311: PUSH
8312: LD_VAR 0 3
8316: PPUSH
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 24
8341: PUSH
8342: LD_INT 750
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 54
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8373: LD_ADDR_VAR 0 6
8377: PUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_INT 22
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 3
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 1000
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: PPUSH
8430: CALL_OW 70
8434: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8435: LD_VAR 0 6
8439: NOT
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 24
8465: PUSH
8466: LD_INT 250
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PPUSH
8478: CALL_OW 69
8482: NOT
8483: AND
8484: IFFALSE 8488
// exit ;
8486: GO 8670
// if buildings_list > 0 and engineerOkInside then
8488: LD_VAR 0 6
8492: PUSH
8493: LD_INT 0
8495: GREATER
8496: PUSH
8497: LD_VAR 0 8
8501: AND
8502: IFFALSE 8513
// ComExitBuilding ( engineerOkInside ) ;
8504: LD_VAR 0 8
8508: PPUSH
8509: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8513: LD_VAR 0 6
8517: PUSH
8518: LD_INT 0
8520: GREATER
8521: PUSH
8522: LD_VAR 0 9
8526: PUSH
8527: LD_INT 0
8529: GREATER
8530: AND
8531: IFFALSE 8551
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8533: LD_VAR 0 9
8537: PPUSH
8538: LD_VAR 0 6
8542: PUSH
8543: LD_INT 1
8545: ARRAY
8546: PPUSH
8547: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8551: LD_VAR 0 6
8555: PUSH
8556: LD_INT 0
8558: EQUAL
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 0
8567: EQUAL
8568: AND
8569: PUSH
8570: LD_VAR 0 9
8574: PUSH
8575: LD_INT 0
8577: GREATER
8578: AND
8579: IFFALSE 8595
// ComEnterUnit ( engineerOkOutside , building ) ;
8581: LD_VAR 0 9
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8595: LD_VAR 0 9
8599: PUSH
8600: LD_INT 0
8602: GREATER
8603: PUSH
8604: LD_VAR 0 6
8608: PUSH
8609: LD_INT 0
8611: EQUAL
8612: AND
8613: PUSH
8614: LD_VAR 0 4
8618: PUSH
8619: LD_INT 0
8621: GREATER
8622: AND
8623: IFFALSE 8670
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8625: LD_VAR 0 9
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: LD_VAR 0 4
8643: PUSH
8644: LD_INT 2
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 4
8652: PUSH
8653: LD_INT 3
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 4
8661: PUSH
8662: LD_INT 4
8664: ARRAY
8665: PPUSH
8666: CALL_OW 145
// end ;
8670: LD_VAR 0 5
8674: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8675: LD_INT 0
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
8684: PPUSH
8685: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8686: LD_ADDR_VAR 0 6
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_VAR 0 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 25
8705: PUSH
8706: LD_INT 4
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 23
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 24
8725: PUSH
8726: LD_INT 251
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 69
8743: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8744: LD_ADDR_VAR 0 7
8748: PUSH
8749: LD_VAR 0 3
8753: PPUSH
8754: LD_INT 22
8756: PUSH
8757: LD_VAR 0 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 23
8768: PUSH
8769: LD_INT 2
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 4
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 50
8788: PUSH
8789: EMPTY
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 70
8802: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8803: LD_ADDR_VAR 0 10
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 25
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 3
8854: PUSH
8855: LD_INT 24
8857: PUSH
8858: LD_INT 750
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 70
8879: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8880: LD_ADDR_VAR 0 11
8884: PUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: LD_INT 22
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 21
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 3
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 1000
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8957: LD_VAR 0 10
8961: NOT
8962: PUSH
8963: LD_VAR 0 11
8967: NOT
8968: AND
8969: PUSH
8970: LD_VAR 0 6
8974: NOT
8975: AND
8976: IFFALSE 8980
// exit ;
8978: GO 9214
// if damageUnits > 0 and sci_list > 0 then
8980: LD_VAR 0 10
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: PUSH
8989: LD_VAR 0 6
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: AND
8998: IFFALSE 9014
// ComMoveToArea ( damageUnits , healArea ) ;
9000: LD_VAR 0 10
9004: PPUSH
9005: LD_VAR 0 2
9009: PPUSH
9010: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
9014: LD_VAR 0 11
9018: PUSH
9019: LD_INT 0
9021: GREATER
9022: PUSH
9023: LD_VAR 0 6
9027: PUSH
9028: LD_INT 0
9030: GREATER
9031: AND
9032: IFFALSE 9043
// ComExitBuilding ( sci_list ) ;
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
9043: LD_VAR 0 11
9047: PUSH
9048: LD_INT 0
9050: GREATER
9051: PUSH
9052: LD_VAR 0 7
9056: PUSH
9057: LD_INT 0
9059: GREATER
9060: AND
9061: IFFALSE 9081
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9063: LD_VAR 0 7
9067: PPUSH
9068: LD_VAR 0 11
9072: PUSH
9073: LD_INT 1
9075: ARRAY
9076: PPUSH
9077: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9081: LD_VAR 0 10
9085: PUSH
9086: LD_INT 0
9088: EQUAL
9089: PUSH
9090: LD_VAR 0 11
9094: PUSH
9095: LD_INT 0
9097: EQUAL
9098: AND
9099: PUSH
9100: LD_VAR 0 7
9104: PUSH
9105: LD_INT 0
9107: GREATER
9108: AND
9109: IFFALSE 9214
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 3
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 30
9140: PUSH
9141: LD_INT 8
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9158: LD_ADDR_VAR 0 13
9162: PUSH
9163: LD_INT 1
9165: PPUSH
9166: LD_VAR 0 12
9170: PPUSH
9171: CALL_OW 12
9175: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9176: LD_VAR 0 7
9180: PPUSH
9181: LD_INT 3
9183: PUSH
9184: LD_INT 60
9186: PUSH
9187: EMPTY
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 72
9198: PPUSH
9199: LD_VAR 0 12
9203: PUSH
9204: LD_VAR 0 13
9208: ARRAY
9209: PPUSH
9210: CALL_OW 120
// end ; end ;
9214: LD_VAR 0 5
9218: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9219: LD_INT 0
9221: PPUSH
9222: PPUSH
9223: PPUSH
9224: PPUSH
// tmpTab = [ ] ;
9225: LD_ADDR_VAR 0 6
9229: PUSH
9230: EMPTY
9231: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9232: LD_INT 22
9234: PUSH
9235: LD_VAR 0 1
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 32
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PPUSH
9258: CALL_OW 69
9262: PUSH
9263: LD_INT 0
9265: GREATER
9266: IFFALSE 9349
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: FOR_IN
9305: IFFALSE 9347
// begin for j in UnitsInside ( i ) do
9307: LD_ADDR_VAR 0 5
9311: PUSH
9312: LD_VAR 0 4
9316: PPUSH
9317: CALL_OW 313
9321: PUSH
9322: FOR_IN
9323: IFFALSE 9343
// tmpTab = tmpTab ^ j ;
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 6
9334: PUSH
9335: LD_VAR 0 5
9339: ADD
9340: ST_TO_ADDR
9341: GO 9322
9343: POP
9344: POP
// end ;
9345: GO 9304
9347: POP
9348: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9349: LD_VAR 0 6
9353: PPUSH
9354: LD_VAR 0 2
9358: PPUSH
9359: CALL_OW 250
9363: PPUSH
9364: LD_VAR 0 2
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: CALL_OW 114
// end ;
9378: LD_VAR 0 3
9382: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
// enable ;
9389: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9390: LD_ADDR_VAR 0 7
9394: PUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: CALL_OW 435
9404: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_INT 22
9412: PUSH
9413: LD_VAR 0 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_VAR 0 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9443: LD_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: GREATER
9451: PUSH
9452: LD_VAR 0 3
9456: PPUSH
9457: CALL_OW 435
9461: AND
9462: PUSH
9463: LD_VAR 0 7
9467: PUSH
9468: LD_INT 0
9470: GREATER
9471: AND
9472: IFFALSE 9521
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9474: LD_VAR 0 6
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 7
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 7
9496: PUSH
9497: LD_INT 2
9499: ARRAY
9500: PPUSH
9501: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9505: LD_VAR 0 6
9509: PUSH
9510: LD_INT 1
9512: ARRAY
9513: PPUSH
9514: LD_INT 100
9516: PPUSH
9517: CALL_OW 240
// end ; end ;
9521: LD_VAR 0 4
9525: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9536: LD_ADDR_VAR 0 6
9540: PUSH
9541: LD_VAR 0 2
9545: PPUSH
9546: LD_INT 22
9548: PUSH
9549: LD_VAR 0 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 56
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 24
9566: PUSH
9567: LD_INT 700
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 3
9576: PUSH
9577: LD_INT 60
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 5
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 9
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 70
9648: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9649: LD_ADDR_VAR 0 7
9653: PUSH
9654: LD_VAR 0 2
9658: PPUSH
9659: LD_INT 22
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 30
9673: PUSH
9674: LD_INT 32
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 58
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 251
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PPUSH
9703: CALL_OW 70
9707: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9708: LD_ADDR_VAR 0 9
9712: PUSH
9713: LD_VAR 0 2
9717: PPUSH
9718: LD_INT 22
9720: PUSH
9721: LD_VAR 0 1
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 30
9735: PUSH
9736: LD_INT 4
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 5
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 24
9760: PUSH
9761: LD_INT 251
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 70
9777: ST_TO_ADDR
// if barrackList > 0 then
9778: LD_VAR 0 9
9782: PUSH
9783: LD_INT 0
9785: GREATER
9786: IFFALSE 9934
// begin if turretList = 0 then
9788: LD_VAR 0 7
9792: PUSH
9793: LD_INT 0
9795: EQUAL
9796: IFFALSE 9838
// begin if soldiers_list > 0 then
9798: LD_VAR 0 6
9802: PUSH
9803: LD_INT 0
9805: GREATER
9806: IFFALSE 9836
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9808: LD_VAR 0 6
9812: PPUSH
9813: LD_VAR 0 9
9817: PUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_VAR 0 9
9825: PPUSH
9826: CALL_OW 12
9830: ARRAY
9831: PPUSH
9832: CALL_OW 120
// end else
9836: GO 9934
// begin for i in barrackList do
9838: LD_ADDR_VAR 0 4
9842: PUSH
9843: LD_VAR 0 9
9847: PUSH
9848: FOR_IN
9849: IFFALSE 9932
// begin insideUnits = UnitsInside ( i ) ;
9851: LD_ADDR_VAR 0 10
9855: PUSH
9856: LD_VAR 0 4
9860: PPUSH
9861: CALL_OW 313
9865: ST_TO_ADDR
// if insideUnits > 0 then
9866: LD_VAR 0 10
9870: PUSH
9871: LD_INT 0
9873: GREATER
9874: IFFALSE 9898
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9876: LD_VAR 0 10
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 7
9889: PUSH
9890: LD_INT 1
9892: ARRAY
9893: PPUSH
9894: CALL_OW 120
// if soldiers_list > 0 then
9898: LD_VAR 0 6
9902: PUSH
9903: LD_INT 0
9905: GREATER
9906: IFFALSE 9930
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9908: LD_VAR 0 6
9912: PUSH
9913: LD_INT 1
9915: ARRAY
9916: PPUSH
9917: LD_VAR 0 7
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: CALL_OW 120
// end ;
9930: GO 9848
9932: POP
9933: POP
// end ; end ; end ;
9934: LD_VAR 0 3
9938: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9946: LD_ADDR_VAR 0 6
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_VAR 0 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 31
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 32
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 30
9988: PUSH
9989: LD_INT 33
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10033: LD_ADDR_VAR 0 7
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 21
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 58
10062: PUSH
10063: EMPTY
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 0
10083: GREATER
10084: PUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_INT 0
10092: GREATER
10093: AND
10094: IFFALSE 10164
// begin for i in turretsList do
10096: LD_ADDR_VAR 0 4
10100: PUSH
10101: LD_VAR 0 6
10105: PUSH
10106: FOR_IN
10107: IFFALSE 10162
// begin for j in enemyBuildings do
10109: LD_ADDR_VAR 0 5
10113: PUSH
10114: LD_VAR 0 7
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10158
// begin if GetDistUnits ( i , j ) < 20 then
10122: LD_VAR 0 4
10126: PPUSH
10127: LD_VAR 0 5
10131: PPUSH
10132: CALL_OW 296
10136: PUSH
10137: LD_INT 20
10139: LESS
10140: IFFALSE 10156
// begin ComAttackUnit ( i , j ) ;
10142: LD_VAR 0 4
10146: PPUSH
10147: LD_VAR 0 5
10151: PPUSH
10152: CALL_OW 115
// end ; end ;
10156: GO 10119
10158: POP
10159: POP
// end ;
10160: GO 10106
10162: POP
10163: POP
// end ; end ;
10164: LD_VAR 0 3
10168: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10177: LD_ADDR_VAR 0 8
10181: PUSH
10182: LD_INT 22
10184: PUSH
10185: LD_VAR 0 1
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 21
10196: PUSH
10197: LD_INT 2
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 34
10206: PUSH
10207: LD_INT 52
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 69
10223: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10224: LD_ADDR_VAR 0 9
10228: PUSH
10229: LD_INT 22
10231: PUSH
10232: LD_VAR 0 1
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 1000
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10281: LD_VAR 0 9
10285: PUSH
10286: LD_INT 0
10288: GREATER
10289: PUSH
10290: LD_VAR 0 8
10294: PPUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 750
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: CALL_OW 72
10309: PUSH
10310: LD_INT 0
10312: GREATER
10313: AND
10314: IFFALSE 10349
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10316: LD_VAR 0 8
10320: PPUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 750
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 72
10335: PPUSH
10336: LD_VAR 0 9
10340: PUSH
10341: LD_INT 1
10343: ARRAY
10344: PPUSH
10345: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10349: LD_VAR 0 8
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 750
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PUSH
10376: LD_INT 0
10378: GREATER
10379: IFFALSE 10417
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10381: LD_VAR 0 8
10385: PPUSH
10386: LD_INT 3
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 750
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PPUSH
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10417: LD_VAR 0 8
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: PUSH
10426: LD_VAR 0 9
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: PUSH
10436: LD_VAR 0 3
10440: PUSH
10441: LD_INT 0
10443: GREATER
10444: AND
10445: IFFALSE 10492
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10447: LD_VAR 0 8
10451: PPUSH
10452: LD_VAR 0 3
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: LD_VAR 0 3
10465: PUSH
10466: LD_INT 2
10468: ARRAY
10469: PPUSH
10470: LD_VAR 0 3
10474: PUSH
10475: LD_INT 3
10477: ARRAY
10478: PPUSH
10479: LD_VAR 0 3
10483: PUSH
10484: LD_INT 4
10486: ARRAY
10487: PPUSH
10488: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_INT 22
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 2
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 34
10521: PUSH
10522: LD_INT 52
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: LD_INT 24
10534: PUSH
10535: LD_INT 750
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 70
10556: PUSH
10557: LD_INT 0
10559: GREATER
10560: IFFALSE 10762
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10562: LD_ADDR_VAR 0 5
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_INT 22
10574: PUSH
10575: LD_VAR 0 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 21
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 34
10596: PUSH
10597: LD_INT 52
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: LD_INT 24
10609: PUSH
10610: LD_INT 750
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 70
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10760
// begin mechTmp = UnitsInside ( i ) ;
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL_OW 313
10649: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10650: LD_VAR 0 6
10654: PPUSH
10655: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10659: LD_VAR 0 6
10663: PPUSH
10664: LD_VAR 0 7
10668: PPUSH
10669: CALL_OW 189
// wait ( 0 0$2 ) ;
10673: LD_INT 70
10675: PPUSH
10676: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10680: LD_VAR 0 6
10684: PPUSH
10685: LD_VAR 0 2
10689: PPUSH
10690: LD_INT 22
10692: PUSH
10693: LD_VAR 0 1
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 21
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 34
10714: PUSH
10715: LD_INT 52
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: LD_INT 1000
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 58
10734: PUSH
10735: EMPTY
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 70
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 180
// end ;
10758: GO 10632
10760: POP
10761: POP
// end ; end ;
10762: LD_VAR 0 4
10766: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10767: LD_INT 0
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
// for i = 1 to medicCount do
10780: LD_ADDR_VAR 0 14
10784: PUSH
10785: DOUBLE
10786: LD_INT 1
10788: DEC
10789: ST_TO_ADDR
10790: LD_VAR 0 7
10794: PUSH
10795: FOR_TO
10796: IFFALSE 10878
// begin uc_side = side ;
10798: LD_ADDR_OWVAR 20
10802: PUSH
10803: LD_VAR 0 1
10807: ST_TO_ADDR
// uc_nation = nation ;
10808: LD_ADDR_OWVAR 21
10812: PUSH
10813: LD_VAR 0 2
10817: ST_TO_ADDR
// hc_name =  ;
10818: LD_ADDR_OWVAR 26
10822: PUSH
10823: LD_STRING 
10825: ST_TO_ADDR
// hc_gallery =  ;
10826: LD_ADDR_OWVAR 33
10830: PUSH
10831: LD_STRING 
10833: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10834: LD_INT 0
10836: PPUSH
10837: LD_INT 4
10839: PPUSH
10840: LD_VAR 0 8
10844: PPUSH
10845: CALL_OW 380
// un = CreateHuman ;
10849: LD_ADDR_VAR 0 16
10853: PUSH
10854: CALL_OW 44
10858: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10859: LD_VAR 0 16
10863: PPUSH
10864: LD_VAR 0 9
10868: PPUSH
10869: LD_INT 0
10871: PPUSH
10872: CALL_OW 49
// end ;
10876: GO 10795
10878: POP
10879: POP
// for i = 1 to soldierCount do
10880: LD_ADDR_VAR 0 14
10884: PUSH
10885: DOUBLE
10886: LD_INT 1
10888: DEC
10889: ST_TO_ADDR
10890: LD_VAR 0 3
10894: PUSH
10895: FOR_TO
10896: IFFALSE 10978
// begin uc_side = side ;
10898: LD_ADDR_OWVAR 20
10902: PUSH
10903: LD_VAR 0 1
10907: ST_TO_ADDR
// uc_nation = nation ;
10908: LD_ADDR_OWVAR 21
10912: PUSH
10913: LD_VAR 0 2
10917: ST_TO_ADDR
// hc_name =  ;
10918: LD_ADDR_OWVAR 26
10922: PUSH
10923: LD_STRING 
10925: ST_TO_ADDR
// hc_gallery =  ;
10926: LD_ADDR_OWVAR 33
10930: PUSH
10931: LD_STRING 
10933: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10934: LD_INT 0
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 8
10944: PPUSH
10945: CALL_OW 380
// un = CreateHuman ;
10949: LD_ADDR_VAR 0 16
10953: PUSH
10954: CALL_OW 44
10958: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10959: LD_VAR 0 16
10963: PPUSH
10964: LD_VAR 0 9
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 49
// end ;
10976: GO 10895
10978: POP
10979: POP
// for i = 1 to sniperCount do
10980: LD_ADDR_VAR 0 14
10984: PUSH
10985: DOUBLE
10986: LD_INT 1
10988: DEC
10989: ST_TO_ADDR
10990: LD_VAR 0 4
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11078
// begin uc_side = side ;
10998: LD_ADDR_OWVAR 20
11002: PUSH
11003: LD_VAR 0 1
11007: ST_TO_ADDR
// uc_nation = nation ;
11008: LD_ADDR_OWVAR 21
11012: PUSH
11013: LD_VAR 0 2
11017: ST_TO_ADDR
// hc_name =  ;
11018: LD_ADDR_OWVAR 26
11022: PUSH
11023: LD_STRING 
11025: ST_TO_ADDR
// hc_gallery =  ;
11026: LD_ADDR_OWVAR 33
11030: PUSH
11031: LD_STRING 
11033: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
11034: LD_INT 0
11036: PPUSH
11037: LD_INT 5
11039: PPUSH
11040: LD_VAR 0 8
11044: PPUSH
11045: CALL_OW 380
// un = CreateHuman ;
11049: LD_ADDR_VAR 0 16
11053: PUSH
11054: CALL_OW 44
11058: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11059: LD_VAR 0 16
11063: PPUSH
11064: LD_VAR 0 9
11068: PPUSH
11069: LD_INT 0
11071: PPUSH
11072: CALL_OW 49
// end ;
11076: GO 10995
11078: POP
11079: POP
// for i = 1 to bazookCount do
11080: LD_ADDR_VAR 0 14
11084: PUSH
11085: DOUBLE
11086: LD_INT 1
11088: DEC
11089: ST_TO_ADDR
11090: LD_VAR 0 5
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11178
// begin uc_side = side ;
11098: LD_ADDR_OWVAR 20
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// uc_nation = nation ;
11108: LD_ADDR_OWVAR 21
11112: PUSH
11113: LD_VAR 0 2
11117: ST_TO_ADDR
// hc_name =  ;
11118: LD_ADDR_OWVAR 26
11122: PUSH
11123: LD_STRING 
11125: ST_TO_ADDR
// hc_gallery =  ;
11126: LD_ADDR_OWVAR 33
11130: PUSH
11131: LD_STRING 
11133: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11134: LD_INT 0
11136: PPUSH
11137: LD_INT 9
11139: PPUSH
11140: LD_VAR 0 8
11144: PPUSH
11145: CALL_OW 380
// un = CreateHuman ;
11149: LD_ADDR_VAR 0 16
11153: PUSH
11154: CALL_OW 44
11158: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11159: LD_VAR 0 16
11163: PPUSH
11164: LD_VAR 0 9
11168: PPUSH
11169: LD_INT 0
11171: PPUSH
11172: CALL_OW 49
// end ;
11176: GO 11095
11178: POP
11179: POP
// for i = 1 to mortalCount do
11180: LD_ADDR_VAR 0 14
11184: PUSH
11185: DOUBLE
11186: LD_INT 1
11188: DEC
11189: ST_TO_ADDR
11190: LD_VAR 0 6
11194: PUSH
11195: FOR_TO
11196: IFFALSE 11278
// begin uc_side = side ;
11198: LD_ADDR_OWVAR 20
11202: PUSH
11203: LD_VAR 0 1
11207: ST_TO_ADDR
// uc_nation = nation ;
11208: LD_ADDR_OWVAR 21
11212: PUSH
11213: LD_VAR 0 2
11217: ST_TO_ADDR
// hc_name =  ;
11218: LD_ADDR_OWVAR 26
11222: PUSH
11223: LD_STRING 
11225: ST_TO_ADDR
// hc_gallery =  ;
11226: LD_ADDR_OWVAR 33
11230: PUSH
11231: LD_STRING 
11233: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11234: LD_INT 0
11236: PPUSH
11237: LD_INT 8
11239: PPUSH
11240: LD_VAR 0 8
11244: PPUSH
11245: CALL_OW 380
// un = CreateHuman ;
11249: LD_ADDR_VAR 0 16
11253: PUSH
11254: CALL_OW 44
11258: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11259: LD_VAR 0 16
11263: PPUSH
11264: LD_VAR 0 9
11268: PPUSH
11269: LD_INT 0
11271: PPUSH
11272: CALL_OW 49
// end ;
11276: GO 11195
11278: POP
11279: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11280: LD_ADDR_VAR 0 19
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 1
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 25
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 25
11322: PUSH
11323: LD_INT 8
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 25
11332: PUSH
11333: LD_INT 9
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11356: LD_ADDR_VAR 0 18
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// for i in medic_list do
11392: LD_ADDR_VAR 0 14
11396: PUSH
11397: LD_VAR 0 18
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11421
// ComMoveToArea ( i , healArea ) ;
11405: LD_VAR 0 14
11409: PPUSH
11410: LD_VAR 0 10
11414: PPUSH
11415: CALL_OW 113
11419: GO 11402
11421: POP
11422: POP
// if strategy = 1 then
11423: LD_VAR 0 12
11427: PUSH
11428: LD_INT 1
11430: EQUAL
11431: IFFALSE 12148
// begin repeat wait ( 0 0$3 ) ;
11433: LD_INT 105
11435: PPUSH
11436: CALL_OW 67
// for i in soldiersOK_list do
11440: LD_ADDR_VAR 0 14
11444: PUSH
11445: LD_VAR 0 19
11449: PUSH
11450: FOR_IN
11451: IFFALSE 11485
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11453: LD_VAR 0 14
11457: PPUSH
11458: LD_INT 80
11460: PPUSH
11461: LD_INT 109
11463: PPUSH
11464: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11468: LD_VAR 0 14
11472: PPUSH
11473: LD_INT 39
11475: PPUSH
11476: LD_INT 49
11478: PPUSH
11479: CALL_OW 174
// end ;
11483: GO 11450
11485: POP
11486: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11487: LD_INT 13
11489: PPUSH
11490: LD_INT 22
11492: PUSH
11493: LD_VAR 0 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 70
11506: PUSH
11507: LD_INT 0
11509: GREATER
11510: IFFALSE 11433
// repeat wait ( 0 0$1 ) ;
11512: LD_INT 35
11514: PPUSH
11515: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11519: LD_ADDR_VAR 0 17
11523: PUSH
11524: LD_INT 22
11526: PUSH
11527: LD_VAR 0 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 550
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 24
11558: PUSH
11559: LD_INT 250
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11580: LD_ADDR_VAR 0 19
11584: PUSH
11585: LD_INT 22
11587: PUSH
11588: LD_VAR 0 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 8
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 9
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 1000
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if medicCount > 0 then
11667: LD_VAR 0 7
11671: PUSH
11672: LD_INT 0
11674: GREATER
11675: IFFALSE 11749
// begin if damageUnit_list > 0 then
11677: LD_VAR 0 17
11681: PUSH
11682: LD_INT 0
11684: GREATER
11685: IFFALSE 11749
// begin for i in damageUnit_list do
11687: LD_ADDR_VAR 0 14
11691: PUSH
11692: LD_VAR 0 17
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11747
// begin ComMoveToArea ( i , healArea ) ;
11700: LD_VAR 0 14
11704: PPUSH
11705: LD_VAR 0 10
11709: PPUSH
11710: CALL_OW 113
// for j in medic_list do
11714: LD_ADDR_VAR 0 15
11718: PUSH
11719: LD_VAR 0 18
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11743
// AddComHeal ( j , i ) ;
11727: LD_VAR 0 15
11731: PPUSH
11732: LD_VAR 0 14
11736: PPUSH
11737: CALL_OW 188
11741: GO 11724
11743: POP
11744: POP
// end ;
11745: GO 11697
11747: POP
11748: POP
// end ; end ; for i in soldiersOK_list do
11749: LD_ADDR_VAR 0 14
11753: PUSH
11754: LD_VAR 0 19
11758: PUSH
11759: FOR_IN
11760: IFFALSE 11942
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11762: LD_ADDR_VAR 0 22
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_VAR 0 11
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: PUSH
11784: LD_EXP 45
11788: DIFF
11789: PPUSH
11790: LD_VAR 0 14
11794: PPUSH
11795: CALL_OW 74
11799: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11800: LD_ADDR_VAR 0 23
11804: PUSH
11805: LD_INT 22
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 59
11822: PUSH
11823: EMPTY
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: PPUSH
11859: CALL_OW 69
11863: PPUSH
11864: LD_VAR 0 14
11868: PPUSH
11869: CALL_OW 74
11873: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 22
11883: PPUSH
11884: CALL_OW 296
11888: PUSH
11889: LD_INT 8
11891: PLUS
11892: PUSH
11893: LD_VAR 0 14
11897: PPUSH
11898: LD_VAR 0 23
11902: PPUSH
11903: CALL_OW 296
11907: LESS
11908: IFFALSE 11926
// begin ComAttackUnit ( i , target1 ) ;
11910: LD_VAR 0 14
11914: PPUSH
11915: LD_VAR 0 22
11919: PPUSH
11920: CALL_OW 115
// end else
11924: GO 11940
// begin ComAttackUnit ( i , target2 ) ;
11926: LD_VAR 0 14
11930: PPUSH
11931: LD_VAR 0 23
11935: PPUSH
11936: CALL_OW 115
// end ; end ;
11940: GO 11759
11942: POP
11943: POP
// for i in soldiersOK_list do
11944: LD_ADDR_VAR 0 14
11948: PUSH
11949: LD_VAR 0 19
11953: PUSH
11954: FOR_IN
11955: IFFALSE 12137
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11957: LD_ADDR_VAR 0 22
11961: PUSH
11962: LD_INT 22
11964: PUSH
11965: LD_VAR 0 11
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PPUSH
11974: CALL_OW 69
11978: PUSH
11979: LD_EXP 45
11983: DIFF
11984: PPUSH
11985: LD_VAR 0 14
11989: PPUSH
11990: CALL_OW 74
11994: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11995: LD_ADDR_VAR 0 23
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_VAR 0 11
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: LD_INT 59
12017: PUSH
12018: EMPTY
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: PPUSH
12059: LD_VAR 0 14
12063: PPUSH
12064: CALL_OW 74
12068: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12069: LD_VAR 0 14
12073: PPUSH
12074: LD_VAR 0 22
12078: PPUSH
12079: CALL_OW 296
12083: PUSH
12084: LD_INT 8
12086: PLUS
12087: PUSH
12088: LD_VAR 0 14
12092: PPUSH
12093: LD_VAR 0 23
12097: PPUSH
12098: CALL_OW 296
12102: LESS
12103: IFFALSE 12121
// begin ComAttackUnit ( i , target1 ) ;
12105: LD_VAR 0 14
12109: PPUSH
12110: LD_VAR 0 22
12114: PPUSH
12115: CALL_OW 115
// end else
12119: GO 12135
// begin ComAttackUnit ( i , target2 ) ;
12121: LD_VAR 0 14
12125: PPUSH
12126: LD_VAR 0 23
12130: PPUSH
12131: CALL_OW 115
// end ; end ;
12135: GO 11954
12137: POP
12138: POP
// until soldiersOK_list = [ ] ;
12139: LD_VAR 0 19
12143: PUSH
12144: EMPTY
12145: EQUAL
12146: IFFALSE 11512
// end ; if strategy = 2 then
12148: LD_VAR 0 12
12152: PUSH
12153: LD_INT 2
12155: EQUAL
12156: IFFALSE 12861
// begin repeat wait ( 0 0$1 ) ;
12158: LD_INT 35
12160: PPUSH
12161: CALL_OW 67
// for i in soldiersOK_list do
12165: LD_ADDR_VAR 0 14
12169: PUSH
12170: LD_VAR 0 19
12174: PUSH
12175: FOR_IN
12176: IFFALSE 12210
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12178: LD_VAR 0 14
12182: PPUSH
12183: LD_INT 117
12185: PPUSH
12186: LD_INT 97
12188: PPUSH
12189: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12193: LD_VAR 0 14
12197: PPUSH
12198: LD_INT 94
12200: PPUSH
12201: LD_INT 50
12203: PPUSH
12204: CALL_OW 174
// end ;
12208: GO 12175
12210: POP
12211: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12212: LD_INT 14
12214: PPUSH
12215: LD_INT 22
12217: PUSH
12218: LD_VAR 0 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 70
12231: PUSH
12232: LD_INT 0
12234: GREATER
12235: IFFALSE 12158
// repeat wait ( 0 0$3 ) ;
12237: LD_INT 105
12239: PPUSH
12240: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12244: LD_ADDR_VAR 0 17
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_VAR 0 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 550
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 24
12283: PUSH
12284: LD_INT 250
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12305: LD_ADDR_VAR 0 19
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: LD_INT 25
12327: PUSH
12328: LD_INT 1
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 25
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 8
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 9
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 24
12374: PUSH
12375: LD_INT 1000
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: ST_TO_ADDR
// if medicCount > 0 then
12392: LD_VAR 0 7
12396: PUSH
12397: LD_INT 0
12399: GREATER
12400: IFFALSE 12474
// begin if damageUnit_list > 0 then
12402: LD_VAR 0 17
12406: PUSH
12407: LD_INT 0
12409: GREATER
12410: IFFALSE 12474
// begin for i in damageUnit_list do
12412: LD_ADDR_VAR 0 14
12416: PUSH
12417: LD_VAR 0 17
12421: PUSH
12422: FOR_IN
12423: IFFALSE 12472
// begin ComMoveToArea ( i , healArea ) ;
12425: LD_VAR 0 14
12429: PPUSH
12430: LD_VAR 0 10
12434: PPUSH
12435: CALL_OW 113
// for j in medic_list do
12439: LD_ADDR_VAR 0 15
12443: PUSH
12444: LD_VAR 0 18
12448: PUSH
12449: FOR_IN
12450: IFFALSE 12468
// AddComHeal ( j , i ) ;
12452: LD_VAR 0 15
12456: PPUSH
12457: LD_VAR 0 14
12461: PPUSH
12462: CALL_OW 188
12466: GO 12449
12468: POP
12469: POP
// end ;
12470: GO 12422
12472: POP
12473: POP
// end ; end ; for i in soldiersOK_list do
12474: LD_ADDR_VAR 0 14
12478: PUSH
12479: LD_VAR 0 19
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12661
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12487: LD_ADDR_VAR 0 22
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 11
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: PPUSH
12509: LD_VAR 0 14
12513: PPUSH
12514: CALL_OW 74
12518: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12519: LD_ADDR_VAR 0 23
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_VAR 0 11
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 59
12541: PUSH
12542: EMPTY
12543: LIST
12544: PUSH
12545: LD_INT 21
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: PPUSH
12583: LD_VAR 0 14
12587: PPUSH
12588: CALL_OW 74
12592: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12593: LD_VAR 0 14
12597: PPUSH
12598: LD_VAR 0 22
12602: PPUSH
12603: CALL_OW 296
12607: PUSH
12608: LD_INT 8
12610: PLUS
12611: PUSH
12612: LD_VAR 0 14
12616: PPUSH
12617: LD_VAR 0 23
12621: PPUSH
12622: CALL_OW 296
12626: LESS
12627: IFFALSE 12645
// begin ComAttackUnit ( i , target1 ) ;
12629: LD_VAR 0 14
12633: PPUSH
12634: LD_VAR 0 22
12638: PPUSH
12639: CALL_OW 115
// end else
12643: GO 12659
// begin ComAttackUnit ( i , target2 ) ;
12645: LD_VAR 0 14
12649: PPUSH
12650: LD_VAR 0 23
12654: PPUSH
12655: CALL_OW 115
// end ; end ;
12659: GO 12484
12661: POP
12662: POP
// for i in soldiersOK_list do
12663: LD_ADDR_VAR 0 14
12667: PUSH
12668: LD_VAR 0 19
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12850
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12676: LD_ADDR_VAR 0 22
12680: PUSH
12681: LD_INT 22
12683: PUSH
12684: LD_VAR 0 11
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PPUSH
12698: LD_VAR 0 14
12702: PPUSH
12703: CALL_OW 74
12707: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12708: LD_ADDR_VAR 0 23
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 11
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: LD_INT 59
12730: PUSH
12731: EMPTY
12732: LIST
12733: PUSH
12734: LD_INT 21
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: PPUSH
12772: LD_VAR 0 14
12776: PPUSH
12777: CALL_OW 74
12781: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12782: LD_VAR 0 14
12786: PPUSH
12787: LD_VAR 0 22
12791: PPUSH
12792: CALL_OW 296
12796: PUSH
12797: LD_INT 8
12799: PLUS
12800: PUSH
12801: LD_VAR 0 14
12805: PPUSH
12806: LD_VAR 0 23
12810: PPUSH
12811: CALL_OW 296
12815: LESS
12816: IFFALSE 12834
// begin ComAttackUnit ( i , target1 ) ;
12818: LD_VAR 0 14
12822: PPUSH
12823: LD_VAR 0 22
12827: PPUSH
12828: CALL_OW 115
// end else
12832: GO 12848
// begin ComAttackUnit ( i , target2 ) ;
12834: LD_VAR 0 14
12838: PPUSH
12839: LD_VAR 0 23
12843: PPUSH
12844: CALL_OW 115
// end ; end ;
12848: GO 12673
12850: POP
12851: POP
// until soldiersOK_list = [ ] ;
12852: LD_VAR 0 19
12856: PUSH
12857: EMPTY
12858: EQUAL
12859: IFFALSE 12237
// end ; end ; end_of_file
12861: LD_VAR 0 13
12865: RET
// every 0 0$01 do
12866: GO 12868
12868: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12869: LD_INT 22
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 25
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: PUSH
12898: LD_INT 0
12900: EQUAL
12901: IFFALSE 12915
// SetClass ( JMM , 2 ) ;
12903: LD_EXP 1
12907: PPUSH
12908: LD_INT 2
12910: PPUSH
12911: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12915: LD_STRING M1
12917: PPUSH
12918: CALL_OW 337
// case difficulty of 1 :
12922: LD_OWVAR 67
12926: PUSH
12927: LD_INT 1
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12945
12935: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12936: LD_STRING M1-1
12938: PPUSH
12939: CALL_OW 337
12943: GO 12982
12945: LD_INT 2
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12963
12953: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12954: LD_STRING M1-2
12956: PPUSH
12957: CALL_OW 337
12961: GO 12982
12963: LD_INT 3
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 12981
12971: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12972: LD_STRING M1-3
12974: PPUSH
12975: CALL_OW 337
12979: GO 12982
12981: POP
// ChangeMissionObjectives ( M1cont ) ;
12982: LD_STRING M1cont
12984: PPUSH
12985: CALL_OW 337
// wait ( 0 0$2 ) ;
12989: LD_INT 70
12991: PPUSH
12992: CALL_OW 67
// SaveForQuickRestart ;
12996: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
13000: LD_INT 525
13002: PPUSH
13003: LD_INT 700
13005: PPUSH
13006: CALL_OW 12
13010: PPUSH
13011: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
13015: LD_INT 5
13017: PPUSH
13018: LD_INT 82
13020: PPUSH
13021: LD_INT 38
13023: PPUSH
13024: LD_INT 10
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 56
// wait ( 0 0$14 ) ;
13034: LD_INT 490
13036: PPUSH
13037: CALL_OW 67
// firstCrateSpawn := true ;
13041: LD_ADDR_EXP 41
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// end ;
13049: END
// every 0 0$02 trigger firstCrateSpawn do
13050: LD_EXP 41
13054: IFFALSE 13417
13056: GO 13058
13058: DISABLE
// begin if IsOk ( Lisa ) then
13059: LD_EXP 2
13063: PPUSH
13064: CALL_OW 302
13068: IFFALSE 13084
// Say ( Lisa , DR0-Lisa-1 ) else
13070: LD_EXP 2
13074: PPUSH
13075: LD_STRING DR0-Lisa-1
13077: PPUSH
13078: CALL_OW 88
13082: GO 13230
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13084: LD_INT 22
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 25
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 25
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: PUSH
13175: LD_EXP 1
13179: PUSH
13180: LD_EXP 8
13184: PUSH
13185: LD_EXP 5
13189: PUSH
13190: LD_EXP 6
13194: PUSH
13195: LD_EXP 7
13199: PUSH
13200: LD_EXP 4
13204: PUSH
13205: LD_EXP 3
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: DIFF
13219: PPUSH
13220: LD_STRING DR0-Sol1-1
13222: PPUSH
13223: LD_STRING DR0-Sol1-1
13225: PPUSH
13226: CALL 6259 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13230: LD_INT 22
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 21
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 26
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 25
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 25
13285: PUSH
13286: LD_INT 3
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 4
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PUSH
13321: LD_EXP 1
13325: PUSH
13326: LD_EXP 8
13330: PUSH
13331: LD_EXP 5
13335: PUSH
13336: LD_EXP 2
13340: PUSH
13341: LD_EXP 6
13345: PUSH
13346: LD_EXP 7
13350: PUSH
13351: LD_EXP 4
13355: PUSH
13356: LD_EXP 3
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: DIFF
13371: PPUSH
13372: LD_STRING DR0-Sol2-1
13374: PPUSH
13375: LD_STRING DR0-Sol2-1
13377: PPUSH
13378: CALL 6259 0 3
// if IsOk ( Cyrus ) then
13382: LD_EXP 4
13386: PPUSH
13387: CALL_OW 302
13391: IFFALSE 13405
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13393: LD_EXP 4
13397: PPUSH
13398: LD_STRING DR0-Cyrus-1
13400: PPUSH
13401: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13405: LD_EXP 1
13409: PPUSH
13410: LD_STRING DR0-JMM-1
13412: PPUSH
13413: CALL_OW 88
// end ;
13417: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13418: LD_EXP 5
13422: PPUSH
13423: CALL_OW 302
13427: PUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 16
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: PUSH
13457: LD_INT 0
13459: GREATER
13460: AND
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 463
13469: NOT
13470: AND
13471: IFFALSE 13749
13473: GO 13475
13475: DISABLE
// begin DialogueOn ;
13476: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13480: LD_EXP 5
13484: PPUSH
13485: LD_STRING D10-Frank-1
13487: PPUSH
13488: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13492: LD_INT 22
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 25
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: PUSH
13572: LD_EXP 1
13576: PUSH
13577: LD_EXP 5
13581: PUSH
13582: LD_EXP 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: DIFF
13592: PPUSH
13593: LD_STRING D10-Sol1-1
13595: PPUSH
13596: LD_STRING D10-FSol1-1
13598: PPUSH
13599: CALL 6259 0 3
// Say ( Frank , D10-Frank-2 ) ;
13603: LD_EXP 5
13607: PPUSH
13608: LD_STRING D10-Frank-2
13610: PPUSH
13611: CALL_OW 88
// if IsOK ( Lisa ) then
13615: LD_EXP 2
13619: PPUSH
13620: CALL_OW 302
13624: IFFALSE 13640
// begin Say ( Lisa , D10-Lisa-2 ) ;
13626: LD_EXP 2
13630: PPUSH
13631: LD_STRING D10-Lisa-2
13633: PPUSH
13634: CALL_OW 88
// end else
13638: GO 13745
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13640: LD_INT 22
13642: PUSH
13643: LD_INT 1
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 21
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 25
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 25
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 25
13685: PUSH
13686: LD_INT 3
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 4
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 69
13719: PUSH
13720: LD_EXP 1
13724: PUSH
13725: LD_EXP 5
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: DIFF
13734: PPUSH
13735: LD_STRING D10-Sol1-2
13737: PPUSH
13738: LD_STRING D10-FSol1-2
13740: PPUSH
13741: CALL 6259 0 3
// end ; DialogueOff ;
13745: CALL_OW 7
// end ;
13749: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 463
13757: NOT
13758: IFFALSE 14053
13760: GO 13762
13762: DISABLE
// begin HarrisonSupport ;
13763: CALL 2546 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13767: LD_EXP 17
13771: PPUSH
13772: CALL_OW 310
13776: PPUSH
13777: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13781: LD_EXP 17
13785: PPUSH
13786: LD_STRING DEng-Eng1-1
13788: PPUSH
13789: CALL_OW 88
// wait ( 1 1$0 ) ;
13793: LD_INT 2100
13795: PPUSH
13796: CALL_OW 67
// DialogueOn ;
13800: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13804: LD_EXP 14
13808: PPUSH
13809: LD_STRING DRem-Har-1
13811: PPUSH
13812: CALL_OW 94
// if contactWithRussian = 1 then
13816: LD_EXP 22
13820: PUSH
13821: LD_INT 1
13823: EQUAL
13824: IFFALSE 13840
// begin Say ( JMM , DRem-JMM-1 ) ;
13826: LD_EXP 1
13830: PPUSH
13831: LD_STRING DRem-JMM-1
13833: PPUSH
13834: CALL_OW 88
// end else
13838: GO 13852
// begin Say ( JMM , DRem-JMM-1a ) ;
13840: LD_EXP 1
13844: PPUSH
13845: LD_STRING DRem-JMM-1a
13847: PPUSH
13848: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13852: LD_EXP 14
13856: PPUSH
13857: LD_STRING DRem-Har-2
13859: PPUSH
13860: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13864: LD_STRING DenisInDelta
13866: PPUSH
13867: LD_INT 0
13869: PPUSH
13870: CALL_OW 30
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13894
// begin Say ( JMM , DRem-JMM-2 ) ;
13880: LD_EXP 1
13884: PPUSH
13885: LD_STRING DRem-JMM-2
13887: PPUSH
13888: CALL_OW 88
// end else
13892: GO 13906
// begin Say ( JMM , DRem-JMM-2a ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING DRem-JMM-2a
13901: PPUSH
13902: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13906: LD_EXP 14
13910: PPUSH
13911: LD_STRING DRem-Har-3
13913: PPUSH
13914: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13918: LD_EXP 1
13922: PPUSH
13923: LD_STRING DRem-JMM-3
13925: PPUSH
13926: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13930: LD_EXP 14
13934: PPUSH
13935: LD_STRING DRem-Har-4
13937: PPUSH
13938: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13942: LD_STRING DenisInDelta
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 30
13952: PUSH
13953: LD_INT 1
13955: EQUAL
13956: IFFALSE 14016
// begin Say ( JMM , DRem-JMM-4 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING DRem-JMM-4
13965: PPUSH
13966: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13970: LD_EXP 14
13974: PPUSH
13975: LD_STRING DRem-Har-5
13977: PPUSH
13978: CALL_OW 94
// DialogueOff ;
13982: CALL_OW 7
// wait ( 4 4$00 ) ;
13986: LD_INT 8400
13988: PPUSH
13989: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13993: LD_INT 35
13995: PPUSH
13996: CALL_OW 67
// until not InBattle ( 1 ) ;
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 463
14007: NOT
14008: IFFALSE 13993
// SpawnDenis ;
14010: CALL 14054 0 0
// end else
14014: GO 14053
// begin DialogueOff ;
14016: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14020: LD_INT 36
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14033: LD_INT 15
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14046: LD_STRING MR
14048: PPUSH
14049: CALL_OW 337
// end ; end ;
14053: END
// export function SpawnDenis ; var tmp ; begin
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
// PrepareDenis ;
14058: CALL 2263 0 0
// CenterNowOnUnits ( Denis ) ;
14062: LD_EXP 9
14066: PPUSH
14067: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14091: LD_EXP 9
14095: PPUSH
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_EXP 9
14105: PPUSH
14106: CALL_OW 74
14110: PPUSH
14111: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14115: LD_INT 35
14117: PPUSH
14118: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14122: LD_INT 22
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 91
14134: PUSH
14135: LD_EXP 9
14139: PUSH
14140: LD_INT 10
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: IFFALSE 14115
// SetSide ( Denis , 1 ) ;
14158: LD_EXP 9
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 235
// DialogueOn ;
14170: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14174: LD_EXP 9
14178: PPUSH
14179: LD_STRING DDen-Den-1
14181: PPUSH
14182: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14186: LD_EXP 1
14190: PPUSH
14191: LD_STRING DDen-JMM-1
14193: PPUSH
14194: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14198: LD_EXP 9
14202: PPUSH
14203: LD_STRING DDen-Den-2
14205: PPUSH
14206: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14210: LD_EXP 1
14214: PPUSH
14215: LD_STRING DDen-JMM-2
14217: PPUSH
14218: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14222: LD_EXP 9
14226: PPUSH
14227: LD_STRING DDen-Den-3
14229: PPUSH
14230: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14234: LD_EXP 1
14238: PPUSH
14239: LD_STRING DDen-JMM-3
14241: PPUSH
14242: CALL_OW 88
// DialogueOff ;
14246: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14250: LD_INT 36
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14263: LD_INT 15
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14276: LD_STRING MR
14278: PPUSH
14279: CALL_OW 337
// end ;
14283: LD_VAR 0 1
14287: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14288: CALL 14343 0 0
14292: PUSH
14293: LD_EXP 9
14297: PPUSH
14298: CALL_OW 302
14302: AND
14303: PUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 463
14311: NOT
14312: AND
14313: IFFALSE 14342
14315: GO 14317
14317: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14318: LD_EXP 9
14322: PPUSH
14323: LD_STRING DR1-Den-1
14325: PPUSH
14326: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14330: LD_EXP 1
14334: PPUSH
14335: LD_STRING DR1-JMM-1
14337: PPUSH
14338: CALL_OW 88
// end ;
14342: END
// function CheckOptoLab ; var i ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
// result = false ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: LD_INT 22
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: LD_INT 7
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 8
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: PUSH
14407: FOR_IN
14408: IFFALSE 14460
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 268
14422: PUSH
14423: LD_INT 15
14425: EQUAL
14426: PUSH
14427: LD_VAR 0 2
14431: PPUSH
14432: LD_INT 2
14434: PPUSH
14435: CALL_OW 268
14439: PUSH
14440: LD_INT 15
14442: EQUAL
14443: OR
14444: IFFALSE 14456
// begin result = true ;
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_INT 1
14453: ST_TO_ADDR
// break ;
14454: GO 14460
// end ; break ;
14456: GO 14460
// end ;
14458: GO 14407
14460: POP
14461: POP
// end ;
14462: LD_VAR 0 1
14466: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14467: LD_INT 15
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: PUSH
14482: LD_EXP 9
14486: PPUSH
14487: CALL_OW 302
14491: AND
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 463
14500: NOT
14501: AND
14502: IFFALSE 14734
14504: GO 14506
14506: DISABLE
// begin DialogueOn ;
14507: CALL_OW 6
// if IsOK ( Denis ) then
14511: LD_EXP 9
14515: PPUSH
14516: CALL_OW 302
14520: IFFALSE 14536
// begin Say ( Denis , DR2-Den-1 ) ;
14522: LD_EXP 9
14526: PPUSH
14527: LD_STRING DR2-Den-1
14529: PPUSH
14530: CALL_OW 88
// end else
14534: GO 14595
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14536: LD_INT 22
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 25
14558: PUSH
14559: LD_INT 4
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: PUSH
14576: LD_EXP 1
14580: PUSH
14581: EMPTY
14582: LIST
14583: DIFF
14584: PPUSH
14585: LD_STRING DR2-Sci1-1
14587: PPUSH
14588: LD_STRING DR2-FSci1-1
14590: PPUSH
14591: CALL 6259 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14595: LD_EXP 1
14599: PPUSH
14600: LD_STRING DR2-JMM-1
14602: PPUSH
14603: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14607: LD_INT 22
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 3
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: PUSH
14687: LD_EXP 1
14691: PUSH
14692: LD_EXP 9
14696: PUSH
14697: LD_EXP 8
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: DIFF
14707: PPUSH
14708: LD_STRING DR2-Sol1-1
14710: PPUSH
14711: LD_STRING DR2-Sol1-11
14713: PPUSH
14714: CALL 6259 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14718: LD_EXP 1
14722: PPUSH
14723: LD_STRING DR2-JMM-2
14725: PPUSH
14726: CALL_OW 88
// DialogueOff ;
14730: CALL_OW 7
// end ;
14734: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 30
14747: PUSH
14748: LD_INT 36
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PUSH
14764: LD_INT 0
14766: EQUAL
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 21
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 33
14790: PUSH
14791: LD_INT 2
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: PUSH
14808: LD_INT 0
14810: GREATER
14811: AND
14812: PUSH
14813: LD_EXP 23
14817: PUSH
14818: LD_INT 0
14820: EQUAL
14821: AND
14822: PUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 463
14830: NOT
14831: AND
14832: IFFALSE 14969
14834: GO 14836
14836: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14837: LD_INT 22
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 25
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 26
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: LD_EXP 1
14892: PUSH
14893: LD_EXP 6
14897: PUSH
14898: LD_EXP 7
14902: PUSH
14903: LD_EXP 9
14907: PUSH
14908: LD_EXP 15
14912: PUSH
14913: LD_EXP 3
14917: PUSH
14918: LD_EXP 4
14922: PUSH
14923: LD_EXP 2
14927: PUSH
14928: LD_EXP 5
14932: PUSH
14933: LD_EXP 8
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: DIFF
14950: PPUSH
14951: LD_STRING D3a-Mech1-1
14953: PPUSH
14954: LD_STRING D3a-Mech1-1
14956: PPUSH
14957: CALL 6259 0 3
// firstTower = 2 ;
14961: LD_ADDR_EXP 23
14965: PUSH
14966: LD_INT 2
14968: ST_TO_ADDR
// end ;
14969: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14970: LD_INT 22
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PPUSH
14994: CALL_OW 69
14998: PUSH
14999: LD_INT 0
15001: EQUAL
15002: IFFALSE 15117
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
15010: LD_ADDR_VAR 0 1
15014: PUSH
15015: LD_INT 22
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 25
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 25
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 25
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 4
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15115
// AddExperience ( i , 1 , 10000 ) ;
15098: LD_VAR 0 1
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 10000
15108: PPUSH
15109: CALL_OW 492
15113: GO 15095
15115: POP
15116: POP
// end ;
15117: PPOPN 1
15119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15120: LD_INT 22
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 36
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: LD_INT 0
15151: GREATER
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 21
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 33
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: PUSH
15198: CALL 15790 0 0
15202: AND
15203: PUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 463
15211: NOT
15212: AND
15213: IFFALSE 15787
15215: GO 15217
15217: DISABLE
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PPUSH
15254: CALL_OW 69
15258: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 21
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 33
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 69
15303: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15304: LD_ADDR_VAR 0 5
15308: PUSH
15309: EMPTY
15310: ST_TO_ADDR
// for i in tmpControlTowers do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_VAR 0 3
15320: PUSH
15321: FOR_IN
15322: IFFALSE 15785
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15324: LD_EXP 1
15328: PPUSH
15329: CALL_OW 310
15333: PUSH
15334: LD_VAR 0 1
15338: EQUAL
15339: PUSH
15340: LD_EXP 1
15344: PPUSH
15345: CALL_OW 257
15349: PUSH
15350: LD_INT 3
15352: EQUAL
15353: AND
15354: IFFALSE 15484
// begin InGameOn ;
15356: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15360: LD_VAR 0 4
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15373: LD_EXP 1
15377: PPUSH
15378: LD_STRING D4a-JMM-1
15380: PPUSH
15381: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15385: LD_VAR 0 4
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: LD_EXP 1
15398: PPUSH
15399: CALL_OW 53
// wait ( 0 0$1 ) ;
15403: LD_INT 35
15405: PPUSH
15406: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15410: LD_VAR 0 4
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: LD_VAR 0 4
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: CALL_OW 250
15432: PUSH
15433: LD_INT 3
15435: PLUS
15436: PPUSH
15437: LD_VAR 0 4
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PPUSH
15446: CALL_OW 251
15450: PUSH
15451: LD_INT 2
15453: MINUS
15454: PPUSH
15455: CALL_OW 111
// wait ( 0 0$2 ) ;
15459: LD_INT 70
15461: PPUSH
15462: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15466: LD_EXP 1
15470: PPUSH
15471: LD_STRING D4b-JMM-1
15473: PPUSH
15474: CALL_OW 88
// InGameOff ;
15478: CALL_OW 9
// end else
15482: GO 15783
// begin InGameOn ;
15484: CALL_OW 8
// for j in UnitsInside ( i ) do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: CALL_OW 313
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15539
// if GetClass ( j ) = 3 then
15506: LD_VAR 0 2
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 3
15518: EQUAL
15519: IFFALSE 15537
// tmpMechanicInside = tmpMechanicInside ^ j ;
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_VAR 0 5
15530: PUSH
15531: LD_VAR 0 2
15535: ADD
15536: ST_TO_ADDR
15537: GO 15503
15539: POP
15540: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15541: LD_VAR 0 5
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: CALL_OW 258
15554: PUSH
15555: LD_INT 1
15557: EQUAL
15558: IFFALSE 15576
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15560: LD_VAR 0 5
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: PPUSH
15569: LD_STRING D4a-Mech1-1
15571: PPUSH
15572: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15576: LD_VAR 0 5
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 258
15589: PUSH
15590: LD_INT 2
15592: EQUAL
15593: IFFALSE 15611
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15595: LD_VAR 0 5
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_STRING D4a-FMech1-1
15606: PPUSH
15607: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15611: LD_VAR 0 4
15615: PUSH
15616: LD_INT 1
15618: ARRAY
15619: PPUSH
15620: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15624: LD_VAR 0 4
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: LD_VAR 0 5
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: CALL_OW 53
// wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15653: LD_VAR 0 4
15657: PUSH
15658: LD_INT 1
15660: ARRAY
15661: PPUSH
15662: LD_VAR 0 4
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 250
15675: PUSH
15676: LD_INT 3
15678: PLUS
15679: PPUSH
15680: LD_VAR 0 4
15684: PUSH
15685: LD_INT 1
15687: ARRAY
15688: PPUSH
15689: CALL_OW 251
15693: PUSH
15694: LD_INT 2
15696: MINUS
15697: PPUSH
15698: CALL_OW 111
// wait ( 0 0$2 ) ;
15702: LD_INT 70
15704: PPUSH
15705: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15709: LD_VAR 0 5
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 258
15722: PUSH
15723: LD_INT 1
15725: EQUAL
15726: IFFALSE 15744
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15728: LD_VAR 0 5
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: LD_STRING D4b-Mech1-1
15739: PPUSH
15740: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15744: LD_VAR 0 5
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 258
15757: PUSH
15758: LD_INT 2
15760: EQUAL
15761: IFFALSE 15779
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15763: LD_VAR 0 5
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_STRING D4b-FMech1-1
15774: PPUSH
15775: CALL_OW 88
// InGameOff ;
15779: CALL_OW 9
// end ; end ;
15783: GO 15321
15785: POP
15786: POP
// end ;
15787: PPOPN 5
15789: END
// function CheckMehInside ; var i , j ; begin
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
15794: PPUSH
// result = false ;
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_INT 1
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 36
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: PUSH
15837: FOR_IN
15838: IFFALSE 15889
// begin for j in UnitsInside ( i ) do
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_VAR 0 2
15849: PPUSH
15850: CALL_OW 313
15854: PUSH
15855: FOR_IN
15856: IFFALSE 15885
// begin if GetClass ( j ) = 3 then
15858: LD_VAR 0 3
15862: PPUSH
15863: CALL_OW 257
15867: PUSH
15868: LD_INT 3
15870: EQUAL
15871: IFFALSE 15883
// begin result = true ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// break ;
15881: GO 15885
// end ; end ;
15883: GO 15855
15885: POP
15886: POP
// end ;
15887: GO 15837
15889: POP
15890: POP
// end ;
15891: LD_VAR 0 1
15895: RET
// every 12 12$0 do
15896: GO 15898
15898: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15906: LD_INT 1
15908: PPUSH
15909: CALL_OW 463
15913: NOT
15914: PUSH
15915: LD_INT 32
15917: PPUSH
15918: LD_INT 81
15920: PUSH
15921: LD_INT 1
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 70
15932: NOT
15933: AND
15934: IFFALSE 15899
// PrepareKurt ;
15936: CALL 19537 0 0
// end ;
15940: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
15941: LD_EXP 15
15945: PPUSH
15946: CALL_OW 302
15950: PUSH
15951: LD_EXP 15
15955: PPUSH
15956: CALL_OW 255
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: AND
15965: PUSH
15966: LD_EXP 2
15970: AND
15971: IFFALSE 16136
15973: GO 15975
15975: DISABLE
// begin wait ( 0 0$50 ) ;
15976: LD_INT 1750
15978: PPUSH
15979: CALL_OW 67
// if not IsOk ( Joan ) then
15983: LD_EXP 15
15987: PPUSH
15988: CALL_OW 302
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16136
// if IsOK ( Lisa ) then
15997: LD_EXP 2
16001: PPUSH
16002: CALL_OW 302
16006: IFFALSE 16136
// begin DialogueOn ;
16008: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
16012: LD_EXP 2
16016: PPUSH
16017: LD_STRING D7-Lisa-1
16019: PPUSH
16020: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
16024: LD_EXP 1
16028: PPUSH
16029: LD_STRING D7-JMM-1
16031: PPUSH
16032: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
16036: LD_EXP 2
16040: PPUSH
16041: LD_STRING D7-Lisa-2
16043: PPUSH
16044: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
16048: LD_EXP 1
16052: PPUSH
16053: LD_STRING D7-JMM-2
16055: PPUSH
16056: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
16060: LD_EXP 2
16064: PPUSH
16065: LD_STRING D7-Lisa-3
16067: PPUSH
16068: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
16072: LD_EXP 1
16076: PPUSH
16077: LD_STRING D7-JMM-3
16079: PPUSH
16080: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
16084: LD_EXP 2
16088: PPUSH
16089: LD_STRING D7-Lisa-4
16091: PPUSH
16092: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
16096: LD_EXP 1
16100: PPUSH
16101: LD_STRING D7-JMM-4
16103: PPUSH
16104: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16108: LD_EXP 1
16112: PPUSH
16113: LD_STRING D7-JMM-4a
16115: PPUSH
16116: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16120: LD_EXP 2
16124: PPUSH
16125: LD_STRING D7-Lisa-5
16127: PPUSH
16128: CALL_OW 88
// DialogueOff ;
16132: CALL_OW 7
// end ; end ;
16136: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16137: LD_EXP 13
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 91
16154: PUSH
16155: LD_EXP 13
16159: PUSH
16160: LD_INT 10
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 2
16170: PUSH
16171: LD_INT 25
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 25
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PUSH
16228: LD_INT 1
16230: GREATER
16231: AND
16232: IFFALSE 16249
16234: GO 16236
16236: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16237: LD_EXP 13
16241: PPUSH
16242: LD_STRING D5-Sol1-1
16244: PPUSH
16245: CALL_OW 88
// end ;
16249: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16250: LD_INT 22
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 33
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 69
16278: PUSH
16279: LD_INT 2
16281: GREATEREQUAL
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16287: LD_STRING MRa
16289: PPUSH
16290: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16294: LD_ADDR_EXP 28
16298: PUSH
16299: LD_INT 1
16301: ST_TO_ADDR
// end ;
16302: END
// every 2 2$00 do var i , last ;
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
// begin last := 8 ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_INT 8
16317: ST_TO_ADDR
// for i = 1 to last do
16318: LD_ADDR_VAR 0 1
16322: PUSH
16323: DOUBLE
16324: LD_INT 1
16326: DEC
16327: ST_TO_ADDR
16328: LD_VAR 0 2
16332: PUSH
16333: FOR_TO
16334: IFFALSE 16362
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16336: LD_INT 6300
16338: PPUSH
16339: LD_INT 12600
16341: PPUSH
16342: CALL_OW 12
16346: PPUSH
16347: CALL_OW 67
// PrepareRandoms ( i ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL 4165 0 1
// end ;
16360: GO 16333
16362: POP
16363: POP
// end ;
16364: PPOPN 2
16366: END
// every 5 5$20 do
16367: GO 16369
16369: DISABLE
// begin DialogueOn ;
16370: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16374: LD_EXP 10
16378: PPUSH
16379: LD_STRING D12a-Sci-1
16381: PPUSH
16382: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16386: LD_EXP 1
16390: PPUSH
16391: LD_STRING D12a-JMM-1
16393: PPUSH
16394: CALL_OW 88
// DialogueOff ;
16398: CALL_OW 7
// cratesStatus = 1 ;
16402: LD_ADDR_EXP 38
16406: PUSH
16407: LD_INT 1
16409: ST_TO_ADDR
// end ;
16410: END
// every 13 13$0 do
16411: GO 16413
16413: DISABLE
// begin DialogueOn ;
16414: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16418: LD_EXP 10
16422: PPUSH
16423: LD_STRING D12b-Sci-1
16425: PPUSH
16426: CALL_OW 94
// DialogueOff ;
16430: CALL_OW 7
// cratesStatus = 2 ;
16434: LD_ADDR_EXP 38
16438: PUSH
16439: LD_INT 2
16441: ST_TO_ADDR
// end ;
16442: END
// every 32 32$0 do
16443: GO 16445
16445: DISABLE
// begin DialogueOn ;
16446: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16450: LD_EXP 10
16454: PPUSH
16455: LD_STRING D12c-Sci-1
16457: PPUSH
16458: CALL_OW 94
// DialogueOff ;
16462: CALL_OW 7
// wait ( 3 3$0 ) ;
16466: LD_INT 6300
16468: PPUSH
16469: CALL_OW 67
// DialogueOn ;
16473: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16477: LD_EXP 10
16481: PPUSH
16482: LD_STRING D12d-Sci-1
16484: PPUSH
16485: CALL_OW 94
// DialogueOff ;
16489: CALL_OW 7
// cratesStatus = 1 ;
16493: LD_ADDR_EXP 38
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16501: LD_INT 1400
16503: PPUSH
16504: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16508: LD_INT 35
16510: PPUSH
16511: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 463
16522: NOT
16523: PUSH
16524: LD_INT 32
16526: PPUSH
16527: LD_INT 81
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 70
16541: NOT
16542: AND
16543: IFFALSE 16508
// PrepareJoan ;
16545: CALL 3064 0 0
// end ;
16549: END
// every 42 42$0 do
16550: GO 16552
16552: DISABLE
// begin DialogueOn ;
16553: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16557: LD_EXP 10
16561: PPUSH
16562: LD_STRING D12e-Sci-1
16564: PPUSH
16565: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16569: LD_EXP 1
16573: PPUSH
16574: LD_STRING D12e-JMM-1
16576: PPUSH
16577: CALL_OW 88
// DialogueOff ;
16581: CALL_OW 7
// cratesStatus = 2 ;
16585: LD_ADDR_EXP 38
16589: PUSH
16590: LD_INT 2
16592: ST_TO_ADDR
// end ;
16593: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16594: LD_INT 22
16596: PUSH
16597: LD_INT 6
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 21
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 34
16616: PUSH
16617: LD_INT 51
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: PUSH
16634: LD_INT 0
16636: GREATER
16637: IFFALSE 16720
16639: GO 16641
16641: DISABLE
16642: LD_INT 0
16644: PPUSH
// begin enable ;
16645: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16646: LD_ADDR_VAR 0 1
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_INT 6
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: LD_INT 21
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 21
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: PUSH
16698: FOR_IN
16699: IFFALSE 16718
// ComAgressiveMove ( i , 138 , 168 ) ;
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 138
16708: PPUSH
16709: LD_INT 168
16711: PPUSH
16712: CALL_OW 114
16716: GO 16698
16718: POP
16719: POP
// end ;
16720: PPOPN 1
16722: END
// every 0 0$1 do var i ;
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin enable ;
16729: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16730: LD_ADDR_VAR 0 1
16734: PUSH
16735: LD_INT 4
16737: PPUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_INT 3
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 22
16753: PUSH
16754: LD_INT 6
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: PPUSH
16769: CALL_OW 70
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16839
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16777: LD_INT 4
16779: PPUSH
16780: LD_INT 22
16782: PUSH
16783: LD_INT 6
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 34
16792: PUSH
16793: LD_INT 51
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 70
16808: PUSH
16809: LD_INT 0
16811: GREATER
16812: IFFALSE 16828
// sendedConvoys = sendedConvoys + 1 ;
16814: LD_ADDR_EXP 39
16818: PUSH
16819: LD_EXP 39
16823: PUSH
16824: LD_INT 1
16826: PLUS
16827: ST_TO_ADDR
// RemoveUnit ( i ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 64
// end ;
16837: GO 16774
16839: POP
16840: POP
// end ; end_of_file
16841: PPOPN 1
16843: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16844: LD_VAR 0 1
16848: PUSH
16849: LD_INT 1
16851: EQUAL
16852: PUSH
16853: LD_VAR 0 2
16857: PUSH
16858: LD_INT 3
16860: EQUAL
16861: AND
16862: IFFALSE 16872
// contactWithRussian = 1 ;
16864: LD_ADDR_EXP 22
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// end ;
16872: PPOPN 2
16874: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 266
16884: PUSH
16885: LD_INT 36
16887: EQUAL
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 255
16898: PUSH
16899: LD_INT 1
16901: EQUAL
16902: AND
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 33
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: PUSH
16944: LD_INT 0
16946: EQUAL
16947: AND
16948: PUSH
16949: LD_EXP 23
16953: PUSH
16954: LD_INT 0
16956: EQUAL
16957: AND
16958: IFFALSE 17038
// begin firstTower = 1 ;
16960: LD_ADDR_EXP 23
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16968: LD_INT 22
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 25
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: PUSH
17019: LD_EXP 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: DIFF
17027: PPUSH
17028: LD_STRING D3b-Mech1-1
17030: PPUSH
17031: LD_STRING D3b-Mech1-1
17033: PPUSH
17034: CALL 6259 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 266
17047: PUSH
17048: LD_INT 0
17050: EQUAL
17051: PUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 255
17061: PUSH
17062: LD_INT 1
17064: EQUAL
17065: AND
17066: IFFALSE 17080
// SetBName ( building , theta ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_STRING theta
17075: PPUSH
17076: CALL_OW 500
// if GetSide ( building ) = 3 then
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 255
17089: PUSH
17090: LD_INT 3
17092: EQUAL
17093: IFFALSE 17167
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17095: LD_ADDR_EXP 31
17099: PUSH
17100: LD_EXP 31
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 3
17112: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17113: LD_ADDR_EXP 31
17117: PUSH
17118: LD_EXP 31
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: CALL_OW 3
17130: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17131: LD_ADDR_EXP 31
17135: PUSH
17136: LD_EXP 31
17140: PPUSH
17141: LD_INT 1
17143: PPUSH
17144: CALL_OW 3
17148: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17149: LD_ADDR_EXP 31
17153: PUSH
17154: LD_EXP 31
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 3
17166: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 255
17176: PUSH
17177: LD_INT 3
17179: EQUAL
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 0
17193: EQUAL
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 266
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: OR
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 266
17219: PUSH
17220: LD_INT 4
17222: EQUAL
17223: OR
17224: PUSH
17225: EMPTY
17226: LIST
17227: AND
17228: IFFALSE 17239
// ComUpgrade ( building ) ;
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 3
17251: EQUAL
17252: PUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 266
17262: PUSH
17263: LD_INT 32
17265: EQUAL
17266: AND
17267: IFFALSE 17308
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 42
17276: PUSH
17277: LD_INT 43
17279: PUSH
17280: LD_INT 44
17282: PUSH
17283: LD_INT 46
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PPUSH
17295: LD_INT 4
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: PPUSH
17304: CALL_OW 208
// end ; end ;
17308: PPOPN 1
17310: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 22
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 23
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: IN
17356: IFFALSE 17372
// killCounter := killCounter + 1 ;
17358: LD_ADDR_EXP 47
17362: PUSH
17363: LD_EXP 47
17367: PUSH
17368: LD_INT 1
17370: PLUS
17371: ST_TO_ADDR
// if unit = JMM then
17372: LD_VAR 0 1
17376: PUSH
17377: LD_EXP 1
17381: EQUAL
17382: IFFALSE 17391
// YouLost ( JMM ) ;
17384: LD_STRING JMM
17386: PPUSH
17387: CALL_OW 104
// if unit = Joan then
17391: LD_VAR 0 1
17395: PUSH
17396: LD_EXP 15
17400: EQUAL
17401: IFFALSE 17411
// JoanStatus = 0 ;
17403: LD_ADDR_EXP 16
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 255
17420: PUSH
17421: LD_INT 1
17423: EQUAL
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 247
17434: PUSH
17435: LD_INT 1
17437: EQUAL
17438: AND
17439: IFFALSE 17515
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 257
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL_OW 257
17464: PUSH
17465: LD_INT 2
17467: EQUAL
17468: OR
17469: PUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 3
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 257
17494: PUSH
17495: LD_INT 4
17497: EQUAL
17498: OR
17499: IFFALSE 17515
// unitLost = unitLost + 1 ;
17501: LD_ADDR_EXP 30
17505: PUSH
17506: LD_EXP 30
17510: PUSH
17511: LD_INT 1
17513: PLUS
17514: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 255
17524: PUSH
17525: LD_INT 3
17527: EQUAL
17528: PUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 247
17538: PUSH
17539: LD_INT 3
17541: EQUAL
17542: AND
17543: IFFALSE 18235
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 31
17557: EQUAL
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 266
17568: PUSH
17569: LD_INT 32
17571: EQUAL
17572: OR
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 266
17583: PUSH
17584: LD_INT 36
17586: EQUAL
17587: OR
17588: PUSH
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 266
17598: PUSH
17599: LD_INT 0
17601: EQUAL
17602: OR
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 266
17613: PUSH
17614: LD_INT 24
17616: EQUAL
17617: OR
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 266
17628: PUSH
17629: LD_INT 17
17631: EQUAL
17632: OR
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 266
17643: PUSH
17644: LD_INT 25
17646: EQUAL
17647: OR
17648: PUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 266
17658: PUSH
17659: LD_INT 19
17661: EQUAL
17662: OR
17663: PUSH
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 266
17673: PUSH
17674: LD_INT 20
17676: EQUAL
17677: OR
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 266
17688: PUSH
17689: LD_INT 18
17691: EQUAL
17692: OR
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 266
17703: PUSH
17704: LD_INT 21
17706: EQUAL
17707: OR
17708: PUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: CALL_OW 266
17718: PUSH
17719: LD_INT 23
17721: EQUAL
17722: OR
17723: PUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 16
17736: EQUAL
17737: OR
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 6
17751: EQUAL
17752: OR
17753: PUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 266
17763: PUSH
17764: LD_INT 29
17766: EQUAL
17767: OR
17768: PUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 266
17778: PUSH
17779: LD_INT 26
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: CALL_OW 266
17793: PUSH
17794: LD_INT 30
17796: EQUAL
17797: OR
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: CALL_OW 266
17808: PUSH
17809: LD_INT 28
17811: EQUAL
17812: OR
17813: PUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 266
17823: PUSH
17824: LD_INT 27
17826: EQUAL
17827: OR
17828: PUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 266
17838: PUSH
17839: LD_INT 33
17841: EQUAL
17842: OR
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 266
17853: PUSH
17854: LD_INT 2
17856: EQUAL
17857: OR
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 266
17868: PUSH
17869: LD_INT 4
17871: EQUAL
17872: OR
17873: IFFALSE 17959
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17875: LD_ADDR_EXP 31
17879: PUSH
17880: LD_EXP 31
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 266
17894: ADD
17895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17896: LD_ADDR_EXP 31
17900: PUSH
17901: LD_EXP 31
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 250
17915: ADD
17916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17917: LD_ADDR_EXP 31
17921: PUSH
17922: LD_EXP 31
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 251
17936: ADD
17937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17938: LD_ADDR_EXP 31
17942: PUSH
17943: LD_EXP 31
17947: PUSH
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 254
17957: ADD
17958: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 266
17968: PUSH
17969: LD_INT 1
17971: EQUAL
17972: IFFALSE 18051
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17974: LD_ADDR_EXP 31
17978: PUSH
17979: LD_EXP 31
17983: PUSH
17984: LD_INT 0
17986: ADD
17987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17988: LD_ADDR_EXP 31
17992: PUSH
17993: LD_EXP 31
17997: PUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 250
18007: ADD
18008: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18009: LD_ADDR_EXP 31
18013: PUSH
18014: LD_EXP 31
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 251
18028: ADD
18029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18030: LD_ADDR_EXP 31
18034: PUSH
18035: LD_EXP 31
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 254
18049: ADD
18050: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 3
18063: EQUAL
18064: IFFALSE 18143
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18066: LD_ADDR_EXP 31
18070: PUSH
18071: LD_EXP 31
18075: PUSH
18076: LD_INT 2
18078: ADD
18079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18080: LD_ADDR_EXP 31
18084: PUSH
18085: LD_EXP 31
18089: PUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 250
18099: ADD
18100: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18101: LD_ADDR_EXP 31
18105: PUSH
18106: LD_EXP 31
18110: PUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 251
18120: ADD
18121: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18122: LD_ADDR_EXP 31
18126: PUSH
18127: LD_EXP 31
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 254
18141: ADD
18142: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 266
18152: PUSH
18153: LD_INT 5
18155: EQUAL
18156: IFFALSE 18235
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18158: LD_ADDR_EXP 31
18162: PUSH
18163: LD_EXP 31
18167: PUSH
18168: LD_INT 4
18170: ADD
18171: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18172: LD_ADDR_EXP 31
18176: PUSH
18177: LD_EXP 31
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 250
18191: ADD
18192: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18193: LD_ADDR_EXP 31
18197: PUSH
18198: LD_EXP 31
18202: PUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 251
18212: ADD
18213: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18214: LD_ADDR_EXP 31
18218: PUSH
18219: LD_EXP 31
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 254
18233: ADD
18234: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18235: LD_EXP 48
18239: PUSH
18240: LD_VAR 0 1
18244: PPUSH
18245: CALL_OW 257
18249: PUSH
18250: LD_INT 3
18252: EQUAL
18253: AND
18254: PUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 255
18264: PUSH
18265: LD_INT 3
18267: EQUAL
18268: AND
18269: PUSH
18270: LD_INT 21
18272: PPUSH
18273: CALL_OW 302
18277: AND
18278: PUSH
18279: LD_INT 21
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: AND
18291: IFFALSE 18373
// begin ruMechCounter := ruMechCounter - 1 ;
18293: LD_ADDR_EXP 48
18297: PUSH
18298: LD_EXP 48
18302: PUSH
18303: LD_INT 1
18305: MINUS
18306: ST_TO_ADDR
// uc_side = 3 ;
18307: LD_ADDR_OWVAR 20
18311: PUSH
18312: LD_INT 3
18314: ST_TO_ADDR
// uc_nation = 3 ;
18315: LD_ADDR_OWVAR 21
18319: PUSH
18320: LD_INT 3
18322: ST_TO_ADDR
// hc_gallery :=  ;
18323: LD_ADDR_OWVAR 33
18327: PUSH
18328: LD_STRING 
18330: ST_TO_ADDR
// hc_name :=  ;
18331: LD_ADDR_OWVAR 26
18335: PUSH
18336: LD_STRING 
18338: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18339: LD_INT 0
18341: PPUSH
18342: LD_EXP 34
18346: PPUSH
18347: LD_EXP 35
18351: PPUSH
18352: CALL_OW 12
18356: PPUSH
18357: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18361: CALL_OW 44
18365: PPUSH
18366: LD_INT 21
18368: PPUSH
18369: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 255
18382: PUSH
18383: LD_INT 3
18385: EQUAL
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 264
18396: PUSH
18397: LD_INT 52
18399: EQUAL
18400: AND
18401: PUSH
18402: LD_INT 21
18404: PPUSH
18405: CALL_OW 302
18409: AND
18410: PUSH
18411: LD_INT 21
18413: PPUSH
18414: CALL_OW 255
18418: PUSH
18419: LD_INT 3
18421: EQUAL
18422: AND
18423: IFFALSE 18444
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18425: LD_INT 21
18427: PPUSH
18428: LD_INT 22
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: LD_INT 52
18439: PPUSH
18440: CALL_OW 125
// end ;
18444: PPOPN 1
18446: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18447: LD_INT 0
18449: PPUSH
18450: PPUSH
18451: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 264
18461: PUSH
18462: LD_INT 51
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 3
18478: EQUAL
18479: AND
18480: IFFALSE 18542
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_INT 2
18489: PPUSH
18490: CALL_OW 274
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 275
18502: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18503: LD_INT 2
18505: PPUSH
18506: CALL_OW 274
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: LD_VAR 0 5
18518: PUSH
18519: LD_INT 100
18521: MINUS
18522: PPUSH
18523: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: LD_INT 100
18537: PPUSH
18538: CALL_OW 291
// end ; if building = rufabsupp then
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 17
18549: EQUAL
18550: IFFALSE 18564
// SetSide ( vehicle , 6 ) ;
18552: LD_VAR 0 1
18556: PPUSH
18557: LD_INT 6
18559: PPUSH
18560: CALL_OW 235
// end ;
18564: PPOPN 5
18566: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 255
18576: PUSH
18577: LD_INT 3
18579: EQUAL
18580: IFFALSE 18611
// begin tamedApemans = tamedApemans + 1 ;
18582: LD_ADDR_EXP 32
18586: PUSH
18587: LD_EXP 32
18591: PUSH
18592: LD_INT 1
18594: PLUS
18595: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 106
18603: PPUSH
18604: LD_INT 85
18606: PPUSH
18607: CALL_OW 111
// end ; end ;
18611: PPOPN 2
18613: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 255
18627: PUSH
18628: LD_INT 3
18630: EQUAL
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 247
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: AND
18646: IFFALSE 18755
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 264
18657: PUSH
18658: LD_INT 42
18660: EQUAL
18661: PUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 264
18671: PUSH
18672: LD_INT 43
18674: EQUAL
18675: OR
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 264
18686: PUSH
18687: LD_INT 44
18689: EQUAL
18690: OR
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 264
18701: PUSH
18702: LD_INT 46
18704: EQUAL
18705: OR
18706: IFFALSE 18755
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18708: LD_INT 21
18710: PPUSH
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 265
18720: PPUSH
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 262
18730: PPUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 263
18740: PPUSH
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 264
18750: PPUSH
18751: CALL_OW 185
// end ;
18755: PPOPN 3
18757: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 255
18767: PUSH
18768: LD_INT 3
18770: EQUAL
18771: PUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: CALL_OW 255
18781: PUSH
18782: LD_INT 3
18784: EQUAL
18785: AND
18786: PUSH
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 302
18796: AND
18797: IFFALSE 18839
// begin ComRepairVehicle ( human , vehicle ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_INT 100
18834: PPUSH
18835: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 255
18848: PUSH
18849: LD_INT 3
18851: EQUAL
18852: PUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: CALL_OW 255
18862: PUSH
18863: LD_INT 3
18865: EQUAL
18866: AND
18867: PUSH
18868: LD_INT 21
18870: PPUSH
18871: CALL_OW 302
18875: AND
18876: PUSH
18877: LD_VAR 0 1
18881: PPUSH
18882: CALL_OW 302
18886: NOT
18887: AND
18888: IFFALSE 18902
// ComEnterUnit ( human , rufab ) ;
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_INT 21
18897: PPUSH
18898: CALL_OW 120
// end ;
18902: PPOPN 2
18904: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18905: LD_VAR 0 1
18909: PUSH
18910: LD_INT 21
18912: EQUAL
18913: PUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 255
18923: PUSH
18924: LD_INT 3
18926: EQUAL
18927: AND
18928: IFFALSE 18942
// SetLives ( human , 1000 ) ;
18930: LD_VAR 0 2
18934: PPUSH
18935: LD_INT 1000
18937: PPUSH
18938: CALL_OW 234
// end ;
18942: PPOPN 2
18944: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL 37935 0 1
// end ; end_of_file
18954: PPOPN 1
18956: END
// every 0 0$30 trigger cratesStatus = 1 do
18957: LD_EXP 38
18961: PUSH
18962: LD_INT 1
18964: EQUAL
18965: IFFALSE 19018
18967: GO 18969
18969: DISABLE
// begin enable ;
18970: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
18971: LD_INT 350
18973: PUSH
18974: LD_INT 875
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 2
18986: PPUSH
18987: CALL_OW 12
18991: ARRAY
18992: PPUSH
18993: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
18997: LD_INT 1
18999: PPUSH
19000: LD_INT 5
19002: PPUSH
19003: CALL_OW 12
19007: PPUSH
19008: LD_INT 7
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: CALL_OW 55
// end ;
19018: END
// every 1 1$0 trigger cratesStatus = 2 do
19019: LD_EXP 38
19023: PUSH
19024: LD_INT 2
19026: EQUAL
19027: IFFALSE 19110
19029: GO 19031
19031: DISABLE
// begin enable ;
19032: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
19033: LD_INT 3150
19035: PUSH
19036: LD_INT 4550
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
19059: LD_INT 2
19061: PUSH
19062: LD_INT 5
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_INT 2
19074: PPUSH
19075: CALL_OW 12
19079: ARRAY
19080: PPUSH
19081: LD_INT 6
19083: PUSH
19084: LD_INT 7
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: PPUSH
19094: LD_INT 2
19096: PPUSH
19097: CALL_OW 12
19101: ARRAY
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 55
// end ;
19110: END
// every 0 0$30 + 0 0$10 do
19111: GO 19113
19113: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19114: LD_INT 4
19116: PUSH
19117: LD_INT 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_INT 2
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: LD_INT 7
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 55
// Wait ( 0 0$15 ) ;
19146: LD_INT 525
19148: PPUSH
19149: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19153: LD_INT 4
19155: PUSH
19156: LD_INT 5
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_INT 2
19168: PPUSH
19169: CALL_OW 12
19173: ARRAY
19174: PPUSH
19175: LD_INT 7
19177: PPUSH
19178: LD_INT 1
19180: PPUSH
19181: CALL_OW 55
// Wait ( 0 0$20 ) ;
19185: LD_INT 700
19187: PPUSH
19188: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19192: LD_INT 4
19194: PUSH
19195: LD_INT 5
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_INT 2
19207: PPUSH
19208: CALL_OW 12
19212: ARRAY
19213: PPUSH
19214: LD_INT 7
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 55
// end ; end_of_file
19224: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19225: LD_EXP 24
19229: PUSH
19230: LD_INT 1
19232: EQUAL
19233: IFFALSE 19534
19235: GO 19237
19237: DISABLE
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
19242: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19243: LD_ADDR_VAR 0 2
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: PPUSH
19301: CALL_OW 69
19305: ST_TO_ADDR
// for i in tmp do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19350
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_VAR 0 3
19328: PUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 274
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 275
19346: PLUS
19347: ST_TO_ADDR
19348: GO 19316
19350: POP
19351: POP
// strings = [ ] ;
19352: LD_ADDR_EXP 27
19356: PUSH
19357: EMPTY
19358: ST_TO_ADDR
// if tmp = 0 then
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 0
19366: EQUAL
19367: IFFALSE 19392
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19369: LD_ADDR_EXP 27
19373: PUSH
19374: LD_EXP 27
19378: PUSH
19379: LD_STRING #Am06-1
19381: PUSH
19382: LD_EXP 25
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ADD
19391: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19392: LD_VAR 0 2
19396: PUSH
19397: LD_INT 0
19399: GREATER
19400: PUSH
19401: LD_EXP 25
19405: PUSH
19406: LD_VAR 0 3
19410: GREATER
19411: AND
19412: IFFALSE 19443
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19414: LD_ADDR_EXP 27
19418: PUSH
19419: LD_EXP 27
19423: PUSH
19424: LD_STRING #Am06-1
19426: PUSH
19427: LD_EXP 25
19431: PUSH
19432: LD_VAR 0 3
19436: MINUS
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ADD
19442: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19443: LD_VAR 0 2
19447: PUSH
19448: LD_INT 0
19450: GREATER
19451: PUSH
19452: LD_EXP 25
19456: PUSH
19457: LD_VAR 0 3
19461: LESSEQUAL
19462: AND
19463: IFFALSE 19486
// strings = strings ^ [ #Am06-1 , 0 ] ;
19465: LD_ADDR_EXP 27
19469: PUSH
19470: LD_EXP 27
19474: PUSH
19475: LD_STRING #Am06-1
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: ADD
19485: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19486: LD_ADDR_EXP 26
19490: PUSH
19491: LD_EXP 26
19495: PUSH
19496: LD_INT 35
19498: MINUS
19499: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19500: LD_ADDR_EXP 27
19504: PUSH
19505: LD_EXP 27
19509: PUSH
19510: LD_STRING #Am06-2
19512: PUSH
19513: LD_EXP 26
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ADD
19522: ST_TO_ADDR
// display_strings = strings ;
19523: LD_ADDR_OWVAR 47
19527: PUSH
19528: LD_EXP 27
19532: ST_TO_ADDR
// enable ;
19533: ENABLE
// end ; end_of_file
19534: PPOPN 3
19536: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
19543: PPUSH
19544: PPUSH
19545: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 30
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19598: LD_INT 35
19600: PPUSH
19601: CALL_OW 67
// until depot ;
19605: LD_VAR 0 3
19609: IFFALSE 19546
// repeat wait ( 0 0$1 ) ;
19611: LD_INT 35
19613: PPUSH
19614: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: LD_INT 22
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 91
19635: PUSH
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 1
19643: ARRAY
19644: PUSH
19645: LD_INT 15
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 25
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 54
19718: PUSH
19719: EMPTY
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 55
19731: PUSH
19732: EMPTY
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: PUSH
19752: LD_EXP 2
19756: PUSH
19757: LD_EXP 3
19761: PUSH
19762: LD_EXP 4
19766: PUSH
19767: LD_EXP 5
19771: PUSH
19772: LD_EXP 7
19776: PUSH
19777: LD_EXP 8
19781: PUSH
19782: LD_EXP 9
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: PUSH
19796: LD_EXP 46
19800: ADD
19801: DIFF
19802: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19803: LD_VAR 0 4
19807: PUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 463
19815: NOT
19816: AND
19817: IFFALSE 19611
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19819: LD_ADDR_VAR 0 4
19823: PUSH
19824: LD_VAR 0 4
19828: PUSH
19829: LD_INT 1
19831: PPUSH
19832: LD_VAR 0 4
19836: PPUSH
19837: CALL_OW 12
19841: ARRAY
19842: ST_TO_ADDR
// blockSpawn = 1 ;
19843: LD_ADDR_EXP 29
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// uc_side = 2 ;
19851: LD_ADDR_OWVAR 20
19855: PUSH
19856: LD_INT 2
19858: ST_TO_ADDR
// uc_nation = 2 ;
19859: LD_ADDR_OWVAR 21
19863: PUSH
19864: LD_INT 2
19866: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ,  ) ;
19867: LD_ADDR_EXP 19
19871: PUSH
19872: LD_STRING Kurt
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: LD_STRING 
19880: PPUSH
19881: CALL 41844 0 3
19885: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19886: LD_EXP 19
19890: PPUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 250
19900: PPUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 251
19910: PPUSH
19911: LD_INT 5
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 50
// InGameOn ;
19921: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19925: LD_EXP 19
19929: PPUSH
19930: CALL_OW 87
// wait ( 0 0$2 ) ;
19934: LD_INT 70
19936: PPUSH
19937: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19941: LD_EXP 19
19945: PPUSH
19946: LD_VAR 0 4
19950: PPUSH
19951: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_EXP 19
19964: PPUSH
19965: CALL_OW 112
// wait ( 0 0$1 ) ;
19969: LD_INT 35
19971: PPUSH
19972: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19976: LD_VAR 0 4
19980: PPUSH
19981: LD_EXP 19
19985: PPUSH
19986: CALL_OW 119
// DialogueOn ;
19990: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19994: LD_EXP 19
19998: PPUSH
19999: LD_STRING D2-Kurt-1
20001: PPUSH
20002: CALL_OW 88
// if tmp = JMM then
20006: LD_VAR 0 4
20010: PUSH
20011: LD_EXP 1
20015: EQUAL
20016: IFFALSE 20108
// begin Say ( JMM , D2-JMM-1 ) ;
20018: LD_EXP 1
20022: PPUSH
20023: LD_STRING D2-JMM-1
20025: PPUSH
20026: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20030: LD_EXP 19
20034: PPUSH
20035: LD_STRING D2-Kurt-2
20037: PPUSH
20038: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
20042: LD_EXP 1
20046: PPUSH
20047: LD_STRING D2-JMM-2
20049: PPUSH
20050: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20054: LD_EXP 19
20058: PPUSH
20059: LD_STRING D2-Kurt-3
20061: PPUSH
20062: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
20066: LD_EXP 1
20070: PPUSH
20071: LD_STRING D2-JMM-3
20073: PPUSH
20074: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20078: LD_EXP 19
20082: PPUSH
20083: LD_STRING D2-Kurt-4
20085: PPUSH
20086: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
20090: LD_EXP 1
20094: PPUSH
20095: LD_STRING D2-JMM-4
20097: PPUSH
20098: CALL_OW 88
// DialogueOff ;
20102: CALL_OW 7
// end else
20106: GO 20418
// begin if GetSex ( tmp ) = 1 then
20108: LD_VAR 0 4
20112: PPUSH
20113: CALL_OW 258
20117: PUSH
20118: LD_INT 1
20120: EQUAL
20121: IFFALSE 20135
// Say ( tmp , D2-Sol1-1 ) ;
20123: LD_VAR 0 4
20127: PPUSH
20128: LD_STRING D2-Sol1-1
20130: PPUSH
20131: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20135: LD_VAR 0 4
20139: PPUSH
20140: CALL_OW 258
20144: PUSH
20145: LD_INT 2
20147: EQUAL
20148: IFFALSE 20162
// Say ( tmp , D2-FSol1-1 ) ;
20150: LD_VAR 0 4
20154: PPUSH
20155: LD_STRING D2-FSol1-1
20157: PPUSH
20158: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20162: LD_EXP 19
20166: PPUSH
20167: LD_STRING D2-Kurt-2
20169: PPUSH
20170: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 258
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 20201
// Say ( tmp , D2-Sol1-2 ) ;
20189: LD_VAR 0 4
20193: PPUSH
20194: LD_STRING D2-Sol1-2
20196: PPUSH
20197: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20201: LD_VAR 0 4
20205: PPUSH
20206: CALL_OW 258
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: IFFALSE 20228
// Say ( tmp , D2-FSol1-2 ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_STRING D2-FSol1-2
20223: PPUSH
20224: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20228: LD_EXP 19
20232: PPUSH
20233: LD_STRING D2-Kurt-3
20235: PPUSH
20236: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20240: LD_VAR 0 4
20244: PPUSH
20245: CALL_OW 258
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20267
// Say ( tmp , D2-Sol1-3 ) ;
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_STRING D2-Sol1-3
20262: PPUSH
20263: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20267: LD_VAR 0 4
20271: PPUSH
20272: CALL_OW 258
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20294
// Say ( tmp , D2-FSol1-3 ) ;
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_STRING D2-FSol1-3
20289: PPUSH
20290: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20294: LD_EXP 19
20298: PPUSH
20299: LD_STRING D2-Kurt-4
20301: PPUSH
20302: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20306: LD_VAR 0 4
20310: PPUSH
20311: CALL_OW 258
20315: PUSH
20316: LD_INT 1
20318: EQUAL
20319: IFFALSE 20333
// Say ( tmp , D2-Sol1-4 ) ;
20321: LD_VAR 0 4
20325: PPUSH
20326: LD_STRING D2-Sol1-4
20328: PPUSH
20329: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20333: LD_VAR 0 4
20337: PPUSH
20338: CALL_OW 258
20342: PUSH
20343: LD_INT 2
20345: EQUAL
20346: IFFALSE 20360
// Say ( tmp , D2-FSol1-4 ) ;
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_STRING D2-FSol1-4
20355: PPUSH
20356: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20360: LD_VAR 0 4
20364: PPUSH
20365: CALL_OW 258
20369: PUSH
20370: LD_INT 1
20372: EQUAL
20373: IFFALSE 20387
// Say ( tmp , D2-Sol1-5 ) ;
20375: LD_VAR 0 4
20379: PPUSH
20380: LD_STRING D2-Sol1-5
20382: PPUSH
20383: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20387: LD_VAR 0 4
20391: PPUSH
20392: CALL_OW 258
20396: PUSH
20397: LD_INT 2
20399: EQUAL
20400: IFFALSE 20414
// Say ( tmp , D2-FSol1-5 ) ;
20402: LD_VAR 0 4
20406: PPUSH
20407: LD_STRING D2-FSol1-5
20409: PPUSH
20410: CALL_OW 88
// DialogueOff ;
20414: CALL_OW 7
// end ; dec = ShowQuery1 ;
20418: LD_ADDR_VAR 0 6
20422: PUSH
20423: CALL 6720 0 0
20427: ST_TO_ADDR
// if dec = 1 then
20428: LD_VAR 0 6
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20498
// begin DialogueOn ;
20438: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20442: LD_EXP 19
20446: PPUSH
20447: LD_STRING D2a-Kurt-1
20449: PPUSH
20450: CALL_OW 88
// DialogueOff ;
20454: CALL_OW 7
// InGameOff ;
20458: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20462: LD_INT 1
20464: PPUSH
20465: LD_INT 2
20467: PPUSH
20468: LD_INT 2
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20478: LD_EXP 19
20482: PPUSH
20483: LD_INT 8
20485: PPUSH
20486: CALL_OW 113
// readyToEscape = 1 ;
20490: LD_ADDR_EXP 21
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// end ; if dec = 2 then
20498: LD_VAR 0 6
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: IFFALSE 21026
// begin DialogueOn ;
20508: CALL_OW 6
// if tmp = JMM then
20512: LD_VAR 0 4
20516: PUSH
20517: LD_EXP 1
20521: EQUAL
20522: IFFALSE 20578
// begin Say ( JMM , D2b-JMM-1 ) ;
20524: LD_EXP 1
20528: PPUSH
20529: LD_STRING D2b-JMM-1
20531: PPUSH
20532: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20536: LD_EXP 19
20540: PPUSH
20541: LD_STRING D2b-Kurt-1
20543: PPUSH
20544: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20548: LD_EXP 1
20552: PPUSH
20553: LD_STRING D2b-JMM-2
20555: PPUSH
20556: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20560: LD_EXP 19
20564: PPUSH
20565: LD_STRING D2b-Kurt-2
20567: PPUSH
20568: CALL_OW 88
// DialogueOff ;
20572: CALL_OW 7
// end else
20576: GO 20768
// begin if GetSex ( tmp ) = 1 then
20578: LD_VAR 0 4
20582: PPUSH
20583: CALL_OW 258
20587: PUSH
20588: LD_INT 1
20590: EQUAL
20591: IFFALSE 20605
// Say ( tmp , D2b-Sol1-1 ) ;
20593: LD_VAR 0 4
20597: PPUSH
20598: LD_STRING D2b-Sol1-1
20600: PPUSH
20601: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20605: LD_VAR 0 4
20609: PPUSH
20610: CALL_OW 258
20614: PUSH
20615: LD_INT 2
20617: EQUAL
20618: IFFALSE 20632
// Say ( tmp , D2b-FSol1-1 ) ;
20620: LD_VAR 0 4
20624: PPUSH
20625: LD_STRING D2b-FSol1-1
20627: PPUSH
20628: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20632: LD_EXP 19
20636: PPUSH
20637: LD_STRING D2b-Kurt-1
20639: PPUSH
20640: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20644: LD_VAR 0 4
20648: PPUSH
20649: CALL_OW 258
20653: PUSH
20654: LD_INT 1
20656: EQUAL
20657: IFFALSE 20671
// Say ( tmp , D2b-Sol1-2 ) ;
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_STRING D2b-Sol1-2
20666: PPUSH
20667: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20671: LD_VAR 0 4
20675: PPUSH
20676: CALL_OW 258
20680: PUSH
20681: LD_INT 2
20683: EQUAL
20684: IFFALSE 20698
// Say ( tmp , D2b-FSol1-2 ) ;
20686: LD_VAR 0 4
20690: PPUSH
20691: LD_STRING D2b-FSol1-2
20693: PPUSH
20694: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20698: LD_EXP 19
20702: PPUSH
20703: LD_STRING D2b-Kurt-2
20705: PPUSH
20706: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20710: LD_VAR 0 4
20714: PPUSH
20715: CALL_OW 258
20719: PUSH
20720: LD_INT 1
20722: EQUAL
20723: IFFALSE 20737
// Say ( tmp , D2c-Sol1-2 ) ;
20725: LD_VAR 0 4
20729: PPUSH
20730: LD_STRING D2c-Sol1-2
20732: PPUSH
20733: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20737: LD_VAR 0 4
20741: PPUSH
20742: CALL_OW 258
20746: PUSH
20747: LD_INT 2
20749: EQUAL
20750: IFFALSE 20764
// Say ( tmp , D2c-FSol1-2 ) ;
20752: LD_VAR 0 4
20756: PPUSH
20757: LD_STRING D2c-FSol1-2
20759: PPUSH
20760: CALL_OW 88
// DialogueOff ;
20764: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20768: LD_ADDR_VAR 0 7
20772: PUSH
20773: CALL 6794 0 0
20777: ST_TO_ADDR
// if dec2 = 1 then
20778: LD_VAR 0 7
20782: PUSH
20783: LD_INT 1
20785: EQUAL
20786: IFFALSE 20848
// begin DialogueOn ;
20788: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20792: LD_EXP 19
20796: PPUSH
20797: LD_STRING D2a-Kurt-1
20799: PPUSH
20800: CALL_OW 88
// DialogueOff ;
20804: CALL_OW 7
// InGameOff ;
20808: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20812: LD_INT 1
20814: PPUSH
20815: LD_INT 2
20817: PPUSH
20818: LD_INT 2
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20828: LD_EXP 19
20832: PPUSH
20833: LD_INT 8
20835: PPUSH
20836: CALL_OW 113
// readyToEscape = 1 ;
20840: LD_ADDR_EXP 21
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// end ; if dec2 = 2 then
20848: LD_VAR 0 7
20852: PUSH
20853: LD_INT 2
20855: EQUAL
20856: IFFALSE 21026
// begin if tmp = JMM then
20858: LD_VAR 0 4
20862: PUSH
20863: LD_EXP 1
20867: EQUAL
20868: IFFALSE 20928
// begin DialogueOn ;
20870: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20874: LD_EXP 1
20878: PPUSH
20879: LD_STRING D2c-JMM-1
20881: PPUSH
20882: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20886: LD_EXP 19
20890: PPUSH
20891: LD_STRING D2c-Kurt-1
20893: PPUSH
20894: CALL_OW 88
// DialogueOff ;
20898: CALL_OW 7
// InGameOff ;
20902: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20906: LD_EXP 19
20910: PPUSH
20911: LD_INT 8
20913: PPUSH
20914: CALL_OW 113
// readyToEscape = 1 ;
20918: LD_ADDR_EXP 21
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// end else
20926: GO 21026
// begin DialogueOn ;
20928: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20932: LD_VAR 0 4
20936: PPUSH
20937: CALL_OW 258
20941: PUSH
20942: LD_INT 1
20944: EQUAL
20945: IFFALSE 20959
// Say ( tmp , D2c-Sol1-1 ) ;
20947: LD_VAR 0 4
20951: PPUSH
20952: LD_STRING D2c-Sol1-1
20954: PPUSH
20955: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20959: LD_VAR 0 4
20963: PPUSH
20964: CALL_OW 258
20968: PUSH
20969: LD_INT 2
20971: EQUAL
20972: IFFALSE 20986
// Say ( tmp , D2c-FSol1-1 ) ;
20974: LD_VAR 0 4
20978: PPUSH
20979: LD_STRING D2c-FSol1-1
20981: PPUSH
20982: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20986: LD_EXP 19
20990: PPUSH
20991: LD_STRING D2c-Kurt-1
20993: PPUSH
20994: CALL_OW 88
// DialogueOff ;
20998: CALL_OW 7
// InGameOff ;
21002: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21006: LD_EXP 19
21010: PPUSH
21011: LD_INT 8
21013: PPUSH
21014: CALL_OW 113
// readyToEscape = 1 ;
21018: LD_ADDR_EXP 21
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 3
21033: EQUAL
21034: IFFALSE 21208
// begin DialogueOn ;
21036: CALL_OW 6
// if tmp = JMM then
21040: LD_VAR 0 4
21044: PUSH
21045: LD_EXP 1
21049: EQUAL
21050: IFFALSE 21110
// begin DialogueOn ;
21052: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
21056: LD_EXP 1
21060: PPUSH
21061: LD_STRING D2c-JMM-1
21063: PPUSH
21064: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21068: LD_EXP 19
21072: PPUSH
21073: LD_STRING D2c-Kurt-1
21075: PPUSH
21076: CALL_OW 88
// DialogueOff ;
21080: CALL_OW 7
// InGameOff ;
21084: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21088: LD_EXP 19
21092: PPUSH
21093: LD_INT 8
21095: PPUSH
21096: CALL_OW 113
// readyToEscape = 1 ;
21100: LD_ADDR_EXP 21
21104: PUSH
21105: LD_INT 1
21107: ST_TO_ADDR
// end else
21108: GO 21208
// begin DialogueOn ;
21110: CALL_OW 6
// if GetSex ( tmp ) = 1 then
21114: LD_VAR 0 4
21118: PPUSH
21119: CALL_OW 258
21123: PUSH
21124: LD_INT 1
21126: EQUAL
21127: IFFALSE 21141
// Say ( tmp , D2c-Sol1-1 ) ;
21129: LD_VAR 0 4
21133: PPUSH
21134: LD_STRING D2c-Sol1-1
21136: PPUSH
21137: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21141: LD_VAR 0 4
21145: PPUSH
21146: CALL_OW 258
21150: PUSH
21151: LD_INT 2
21153: EQUAL
21154: IFFALSE 21168
// Say ( tmp , D2c-FSol1-1 ) ;
21156: LD_VAR 0 4
21160: PPUSH
21161: LD_STRING D2c-FSol1-1
21163: PPUSH
21164: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21168: LD_EXP 19
21172: PPUSH
21173: LD_STRING D2c-Kurt-1
21175: PPUSH
21176: CALL_OW 88
// DialogueOff ;
21180: CALL_OW 7
// InGameOff ;
21184: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21188: LD_EXP 19
21192: PPUSH
21193: LD_INT 8
21195: PPUSH
21196: CALL_OW 113
// readyToEscape = 1 ;
21200: LD_ADDR_EXP 21
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21208: LD_ADDR_EXP 29
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21216: LD_INT 35
21218: PPUSH
21219: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21223: LD_EXP 19
21227: PPUSH
21228: LD_INT 8
21230: PPUSH
21231: CALL_OW 308
21235: PUSH
21236: LD_EXP 21
21240: AND
21241: PUSH
21242: LD_EXP 19
21246: PPUSH
21247: CALL_OW 301
21251: OR
21252: IFFALSE 21216
// if IsDead ( Kurt ) then
21254: LD_EXP 19
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21267
// exit ;
21265: GO 21336
// RemoveUnit ( Kurt ) ;
21267: LD_EXP 19
21271: PPUSH
21272: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21276: LD_EXP 19
21280: PPUSH
21281: LD_STRING Kurt
21283: PPUSH
21284: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21288: LD_INT 1
21290: PPUSH
21291: LD_INT 2
21293: PPUSH
21294: CALL_OW 81
21298: PUSH
21299: LD_INT 0
21301: EQUAL
21302: IFFALSE 21312
// KurtStatus = 1 ;
21304: LD_ADDR_EXP 20
21308: PUSH
21309: LD_INT 1
21311: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 2
21317: PPUSH
21318: CALL_OW 81
21322: PUSH
21323: LD_INT 2
21325: EQUAL
21326: IFFALSE 21336
// KurtStatus = 2 ;
21328: LD_ADDR_EXP 20
21332: PUSH
21333: LD_INT 2
21335: ST_TO_ADDR
// end ; end_of_file
21336: LD_VAR 0 1
21340: RET
// every 0 0$1 do
21341: GO 21343
21343: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21344: LD_INT 3
21346: PPUSH
21347: LD_INT 32
21349: PPUSH
21350: LD_INT 3
21352: PPUSH
21353: CALL 6849 0 3
21357: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21358: GO 21360
21360: DISABLE
21361: LD_INT 0
21363: PPUSH
// begin enemyWayX = [ ] ;
21364: LD_ADDR_EXP 49
21368: PUSH
21369: EMPTY
21370: ST_TO_ADDR
// enemyWayY = [ ] ;
21371: LD_ADDR_EXP 50
21375: PUSH
21376: EMPTY
21377: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21378: LD_ADDR_VAR 0 1
21382: PUSH
21383: LD_INT 1
21385: PPUSH
21386: LD_INT 2
21388: PPUSH
21389: CALL_OW 12
21393: ST_TO_ADDR
// if rnd = 1 then
21394: LD_VAR 0 1
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21442
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21404: LD_ADDR_EXP 49
21408: PUSH
21409: LD_INT 93
21411: PUSH
21412: LD_INT 84
21414: PUSH
21415: LD_INT 104
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21423: LD_ADDR_EXP 50
21427: PUSH
21428: LD_INT 51
21430: PUSH
21431: LD_INT 35
21433: PUSH
21434: LD_INT 28
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// end ; if rnd = 2 then
21442: LD_VAR 0 1
21446: PUSH
21447: LD_INT 2
21449: EQUAL
21450: IFFALSE 21506
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21452: LD_ADDR_EXP 49
21456: PUSH
21457: LD_INT 93
21459: PUSH
21460: LD_INT 52
21462: PUSH
21463: LD_INT 34
21465: PUSH
21466: LD_INT 28
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21479: LD_ADDR_EXP 50
21483: PUSH
21484: LD_INT 51
21486: PUSH
21487: LD_INT 45
21489: PUSH
21490: LD_INT 35
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 20
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// end ; enable ;
21506: ENABLE
// end ;
21507: PPOPN 1
21509: END
// every 0 0$1 do
21510: GO 21512
21512: DISABLE
// begin enable ;
21513: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21514: LD_INT 3
21516: PPUSH
21517: LD_INT 2
21519: PPUSH
21520: LD_INT 10
21522: PPUSH
21523: LD_EXP 31
21527: PPUSH
21528: CALL 8284 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21532: LD_INT 3
21534: PPUSH
21535: LD_INT 12
21537: PPUSH
21538: LD_EXP 31
21542: PPUSH
21543: CALL 10169 0 3
// if disableHealAI = 0 then
21547: LD_EXP 33
21551: PUSH
21552: LD_INT 0
21554: EQUAL
21555: IFFALSE 21576
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 9
21562: PPUSH
21563: LD_INT 10
21565: PPUSH
21566: LD_INT 32
21568: PUSH
21569: EMPTY
21570: LIST
21571: PPUSH
21572: CALL 8675 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21576: LD_INT 3
21578: PPUSH
21579: LD_INT 51
21581: PPUSH
21582: LD_INT 6
21584: PPUSH
21585: CALL 9383 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21589: LD_INT 3
21591: PPUSH
21592: LD_INT 12
21594: PPUSH
21595: LD_INT 121
21597: PPUSH
21598: LD_INT 100
21600: PPUSH
21601: CALL 7244 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 22
21610: PPUSH
21611: LD_EXP 49
21615: PPUSH
21616: LD_EXP 50
21620: PPUSH
21621: CALL 7447 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21625: LD_INT 3
21627: PPUSH
21628: LD_INT 10
21630: PPUSH
21631: CALL 9526 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21635: LD_INT 3
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: CALL 9939 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21645: LD_INT 2
21647: PPUSH
21648: CALL_OW 303
21652: PUSH
21653: LD_INT 2
21655: PPUSH
21656: CALL_OW 255
21660: PUSH
21661: LD_INT 1
21663: EQUAL
21664: OR
21665: IFFALSE 21677
// DefendDepot ( 3 , rudepo ) ;
21667: LD_INT 3
21669: PPUSH
21670: LD_INT 2
21672: PPUSH
21673: CALL 9219 0 2
// end ;
21677: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21678: LD_INT 22
21680: PUSH
21681: LD_INT 3
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 21
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 55
21700: PUSH
21701: EMPTY
21702: LIST
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 51
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: PUSH
21732: LD_INT 0
21734: EQUAL
21735: PUSH
21736: LD_INT 21
21738: PPUSH
21739: CALL_OW 255
21743: PUSH
21744: LD_INT 3
21746: EQUAL
21747: AND
21748: PUSH
21749: LD_INT 21
21751: PPUSH
21752: CALL_OW 302
21756: AND
21757: PUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 255
21765: PUSH
21766: LD_INT 3
21768: EQUAL
21769: AND
21770: PUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 302
21778: AND
21779: IFFALSE 21959
21781: GO 21783
21783: DISABLE
// begin enable ;
21784: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21785: LD_INT 2
21787: PPUSH
21788: CALL_OW 274
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: LD_INT 1000
21798: PPUSH
21799: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21803: LD_INT 3
21805: PPUSH
21806: LD_INT 21
21808: PPUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: LD_OWVAR 67
21827: ARRAY
21828: PPUSH
21829: LD_INT 43
21831: PUSH
21832: LD_INT 43
21834: PUSH
21835: LD_INT 44
21837: PUSH
21838: LD_INT 44
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 43
21849: PUSH
21850: LD_INT 43
21852: PUSH
21853: LD_INT 43
21855: PUSH
21856: LD_INT 44
21858: PUSH
21859: LD_INT 44
21861: PUSH
21862: LD_INT 46
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 43
21875: PUSH
21876: LD_INT 43
21878: PUSH
21879: LD_INT 43
21881: PUSH
21882: LD_INT 44
21884: PUSH
21885: LD_INT 44
21887: PUSH
21888: LD_INT 46
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_OWVAR 67
21908: ARRAY
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_INT 22
21918: PUSH
21919: LD_INT 22
21921: PUSH
21922: LD_INT 24
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PPUSH
21932: LD_INT 2
21934: PPUSH
21935: CALL_OW 12
21939: ARRAY
21940: PUSH
21941: LD_INT 24
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: LD_OWVAR 67
21953: ARRAY
21954: PPUSH
21955: CALL 7090 0 7
// end ;
21959: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21960: LD_INT 17
21962: PPUSH
21963: CALL_OW 255
21967: PUSH
21968: LD_INT 3
21970: EQUAL
21971: PUSH
21972: LD_INT 17
21974: PPUSH
21975: CALL_OW 302
21979: AND
21980: PUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 255
21988: PUSH
21989: LD_INT 3
21991: EQUAL
21992: AND
21993: PUSH
21994: LD_INT 2
21996: PPUSH
21997: CALL_OW 302
22001: AND
22002: IFFALSE 22069
22004: GO 22006
22006: DISABLE
// begin enable ;
22007: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
22008: LD_INT 17
22010: PPUSH
22011: LD_INT 22
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: LD_INT 42
22022: PUSH
22023: LD_INT 43
22025: PUSH
22026: LD_INT 44
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_INT 3
22039: PPUSH
22040: CALL_OW 12
22044: ARRAY
22045: PPUSH
22046: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
22050: LD_INT 17
22052: PPUSH
22053: LD_INT 22
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 51
22064: PPUSH
22065: CALL_OW 185
// end ;
22069: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
22070: LD_INT 17
22072: PPUSH
22073: CALL_OW 302
22077: PUSH
22078: LD_INT 17
22080: PPUSH
22081: CALL_OW 255
22085: PUSH
22086: LD_INT 3
22088: EQUAL
22089: AND
22090: PUSH
22091: LD_INT 2
22093: PPUSH
22094: CALL_OW 302
22098: AND
22099: PUSH
22100: LD_INT 2
22102: PPUSH
22103: CALL_OW 255
22107: PUSH
22108: LD_INT 3
22110: EQUAL
22111: AND
22112: PUSH
22113: LD_INT 17
22115: PPUSH
22116: CALL_OW 313
22120: NOT
22121: AND
22122: IFFALSE 22216
22124: GO 22126
22126: DISABLE
22127: LD_INT 0
22129: PPUSH
// begin for i = 1 to 6 do
22130: LD_ADDR_VAR 0 1
22134: PUSH
22135: DOUBLE
22136: LD_INT 1
22138: DEC
22139: ST_TO_ADDR
22140: LD_INT 6
22142: PUSH
22143: FOR_TO
22144: IFFALSE 22214
// begin uc_side = 3 ;
22146: LD_ADDR_OWVAR 20
22150: PUSH
22151: LD_INT 3
22153: ST_TO_ADDR
// uc_nation = 3 ;
22154: LD_ADDR_OWVAR 21
22158: PUSH
22159: LD_INT 3
22161: ST_TO_ADDR
// hc_gallery :=  ;
22162: LD_ADDR_OWVAR 33
22166: PUSH
22167: LD_STRING 
22169: ST_TO_ADDR
// hc_name :=  ;
22170: LD_ADDR_OWVAR 26
22174: PUSH
22175: LD_STRING 
22177: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22178: LD_INT 0
22180: PPUSH
22181: LD_EXP 34
22185: PPUSH
22186: LD_EXP 35
22190: PPUSH
22191: CALL_OW 12
22195: PPUSH
22196: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22200: CALL_OW 44
22204: PPUSH
22205: LD_INT 17
22207: PPUSH
22208: CALL_OW 52
// end ;
22212: GO 22143
22214: POP
22215: POP
// end ;
22216: PPOPN 1
22218: END
// every 2 2$0 do var i , j ;
22219: GO 22221
22221: DISABLE
22222: LD_INT 0
22224: PPUSH
22225: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22226: LD_INT 14700
22228: PUSH
22229: LD_INT 33600
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: PPUSH
22239: LD_INT 2
22241: PPUSH
22242: CALL_OW 12
22246: ARRAY
22247: PPUSH
22248: CALL_OW 67
// disableHealAI = 1 ;
22252: LD_ADDR_EXP 33
22256: PUSH
22257: LD_INT 1
22259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22260: LD_ADDR_VAR 0 1
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22308
// ComExitBuilding ( i ) ;
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 122
22306: GO 22294
22308: POP
22309: POP
// wait ( 0 0$1 ) ;
22310: LD_INT 35
22312: PPUSH
22313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22317: LD_INT 35
22319: PPUSH
22320: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: LD_INT 22
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 25
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: PUSH
22358: FOR_IN
22359: IFFALSE 22436
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 17
22368: PPUSH
22369: LD_INT 22
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 12
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PPUSH
22393: CALL_OW 70
22397: PUSH
22398: FOR_IN
22399: IFFALSE 22432
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: CALL_OW 250
22415: PPUSH
22416: LD_VAR 0 2
22420: PPUSH
22421: CALL_OW 251
22425: PPUSH
22426: CALL_OW 191
// end ;
22430: GO 22398
22432: POP
22433: POP
// end ;
22434: GO 22358
22436: POP
22437: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22438: LD_INT 22
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 25
22450: PUSH
22451: LD_INT 4
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: PUSH
22467: LD_INT 0
22469: EQUAL
22470: PUSH
22471: LD_EXP 32
22475: PUSH
22476: LD_INT 6
22478: PUSH
22479: LD_INT 7
22481: PUSH
22482: LD_INT 8
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: LD_OWVAR 67
22494: ARRAY
22495: GREATEREQUAL
22496: OR
22497: PUSH
22498: LD_INT 17
22500: PPUSH
22501: LD_INT 22
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PPUSH
22525: CALL_OW 70
22529: PUSH
22530: LD_INT 0
22532: EQUAL
22533: OR
22534: IFFALSE 22317
// disableHealAI = 0 ;
22536: LD_ADDR_EXP 33
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22544: LD_ADDR_VAR 0 1
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 25
22561: PUSH
22562: LD_INT 12
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: PUSH
22578: FOR_IN
22579: IFFALSE 22595
// SetClass ( i , 16 ) ;
22581: LD_VAR 0 1
22585: PPUSH
22586: LD_INT 16
22588: PPUSH
22589: CALL_OW 336
22593: GO 22578
22595: POP
22596: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 25
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: PUSH
22631: FOR_IN
22632: IFFALSE 22651
// ComMoveXY ( i , 113 , 94 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_INT 113
22641: PPUSH
22642: LD_INT 94
22644: PPUSH
22645: CALL_OW 111
22649: GO 22631
22651: POP
22652: POP
// end ;
22653: PPOPN 2
22655: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22656: LD_INT 21
22658: PPUSH
22659: CALL_OW 255
22663: PUSH
22664: LD_INT 3
22666: EQUAL
22667: PUSH
22668: LD_INT 21
22670: PPUSH
22671: CALL_OW 302
22675: AND
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 51
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: AND
22710: IFFALSE 22742
22712: GO 22714
22714: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22715: LD_INT 21
22717: PPUSH
22718: LD_INT 23
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: LD_INT 51
22729: PPUSH
22730: CALL_OW 185
// wait ( 5 5$0 ) ;
22734: LD_INT 10500
22736: PPUSH
22737: CALL_OW 67
// enable ;
22741: ENABLE
// end ; end_of_file
22742: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22743: LD_EXP 26
22747: PUSH
22748: LD_INT 0
22750: LESSEQUAL
22751: IFFALSE 22900
22753: GO 22755
22755: DISABLE
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 21
22778: PUSH
22779: LD_INT 3
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 30
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 30
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PPUSH
22819: CALL_OW 69
22823: ST_TO_ADDR
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22868
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_VAR 0 3
22846: PUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 274
22856: PPUSH
22857: LD_INT 1
22859: PPUSH
22860: CALL_OW 275
22864: PLUS
22865: ST_TO_ADDR
22866: GO 22834
22868: POP
22869: POP
// if yourCrates >= needCrates then
22870: LD_VAR 0 3
22874: PUSH
22875: LD_EXP 25
22879: GREATEREQUAL
22880: IFFALSE 22893
// FinishMission ( yourCrates ) else
22882: LD_VAR 0 3
22886: PPUSH
22887: CALL 22903 0 1
22891: GO 22900
// YouLost ( matmin ) ;
22893: LD_STRING matmin
22895: PPUSH
22896: CALL_OW 104
// end ;
22900: PPOPN 3
22902: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22903: LD_INT 0
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
// if killCounter = 0 then
22909: LD_EXP 47
22913: PUSH
22914: LD_INT 0
22916: EQUAL
22917: IFFALSE 22926
// SetAchievement ( ACH_SURV ) ;
22919: LD_STRING ACH_SURV
22921: PPUSH
22922: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22926: LD_INT 22
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PPUSH
22950: CALL_OW 69
22954: PUSH
22955: LD_INT 0
22957: EQUAL
22958: IFFALSE 22974
// begin wait ( 3 ) ;
22960: LD_INT 3
22962: PPUSH
22963: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22967: LD_STRING ACH_BASEDESTROYER
22969: PPUSH
22970: CALL_OW 543
// end ; m1 := false ;
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_INT 0
22981: ST_TO_ADDR
// m2 := false ;
22982: LD_ADDR_VAR 0 4
22986: PUSH
22987: LD_INT 0
22989: ST_TO_ADDR
// m3 := false ;
22990: LD_ADDR_VAR 0 5
22994: PUSH
22995: LD_INT 0
22997: ST_TO_ADDR
// if crates + 100 > crates then
22998: LD_VAR 0 1
23002: PUSH
23003: LD_INT 100
23005: PLUS
23006: PUSH
23007: LD_VAR 0 1
23011: GREATER
23012: IFFALSE 23044
// begin AddMedal ( cans , 1 ) ;
23014: LD_STRING cans
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
23024: LD_INT 1
23026: PPUSH
23027: LD_STRING 06_crates_1
23029: PPUSH
23030: CALL_OW 39
// m1 := true ;
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_INT 1
23041: ST_TO_ADDR
// end else
23042: GO 23065
// begin AddMedal ( cans , - 1 ) ;
23044: LD_STRING cans
23046: PPUSH
23047: LD_INT 1
23049: NEG
23050: PPUSH
23051: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
23055: LD_INT 0
23057: PPUSH
23058: LD_STRING 06_crates_1
23060: PPUSH
23061: CALL_OW 39
// end ; if unitLost < 3 then
23065: LD_EXP 30
23069: PUSH
23070: LD_INT 3
23072: LESS
23073: IFFALSE 23095
// begin AddMedal ( people , 1 ) ;
23075: LD_STRING people
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: CALL_OW 101
// m2 := true ;
23085: LD_ADDR_VAR 0 4
23089: PUSH
23090: LD_INT 1
23092: ST_TO_ADDR
// end else
23093: GO 23106
// begin AddMedal ( people , - 1 ) ;
23095: LD_STRING people
23097: PPUSH
23098: LD_INT 1
23100: NEG
23101: PPUSH
23102: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
23106: LD_EXP 28
23110: PPUSH
23111: LD_STRING 06_remoteVehs_1
23113: PPUSH
23114: CALL_OW 39
// if remoteVehiclesBuild = 1 then
23118: LD_EXP 28
23122: PUSH
23123: LD_INT 1
23125: EQUAL
23126: IFFALSE 23148
// begin AddMedal ( remote , 1 ) ;
23128: LD_STRING remote
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 101
// m3 := true ;
23138: LD_ADDR_VAR 0 5
23142: PUSH
23143: LD_INT 1
23145: ST_TO_ADDR
// end else
23146: GO 23188
// begin if GetTech ( 18 , 1 ) = state_enabled then
23148: LD_INT 18
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 321
23158: PUSH
23159: LD_INT 1
23161: EQUAL
23162: IFFALSE 23177
// begin AddMedal ( remote , - 1 ) ;
23164: LD_STRING remote
23166: PPUSH
23167: LD_INT 1
23169: NEG
23170: PPUSH
23171: CALL_OW 101
// end else
23175: GO 23188
// begin AddMedal ( remote , - 2 ) ;
23177: LD_STRING remote
23179: PPUSH
23180: LD_INT 2
23182: NEG
23183: PPUSH
23184: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23188: LD_VAR 0 3
23192: PUSH
23193: LD_VAR 0 4
23197: AND
23198: PUSH
23199: LD_VAR 0 5
23203: AND
23204: IFFALSE 23220
// begin wait ( 3 ) ;
23206: LD_INT 3
23208: PPUSH
23209: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23213: LD_STRING ACH_ASPEED_6
23215: PPUSH
23216: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23220: LD_OWVAR 67
23224: PUSH
23225: LD_INT 3
23227: EQUAL
23228: PUSH
23229: LD_VAR 0 3
23233: AND
23234: PUSH
23235: LD_VAR 0 4
23239: AND
23240: PUSH
23241: LD_VAR 0 5
23245: AND
23246: IFFALSE 23258
// SetAchievementEX ( ACH_AMER , 6 ) ;
23248: LD_STRING ACH_AMER
23250: PPUSH
23251: LD_INT 6
23253: PPUSH
23254: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23258: LD_EXP 20
23262: PPUSH
23263: LD_STRING 06_KurtStatus_1
23265: PPUSH
23266: CALL_OW 39
// GiveMedals ( Main ) ;
23270: LD_STRING Main
23272: PPUSH
23273: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23277: LD_INT 22
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 50
23299: PUSH
23300: EMPTY
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 4
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: PPUSH
23364: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23368: LD_EXP 1
23372: PPUSH
23373: LD_EXP 43
23377: PUSH
23378: LD_STRING JMM
23380: STR
23381: PPUSH
23382: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23386: LD_EXP 2
23390: PPUSH
23391: LD_EXP 43
23395: PUSH
23396: LD_STRING Lisa
23398: STR
23399: PPUSH
23400: CALL 6348 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23404: LD_EXP 3
23408: PPUSH
23409: LD_EXP 43
23413: PUSH
23414: LD_STRING Bobby
23416: STR
23417: PPUSH
23418: CALL 6348 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23422: LD_EXP 4
23426: PPUSH
23427: LD_EXP 43
23431: PUSH
23432: LD_STRING Cyrus
23434: STR
23435: PPUSH
23436: CALL 6348 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23440: LD_EXP 5
23444: PPUSH
23445: LD_EXP 43
23449: PUSH
23450: LD_STRING Frank
23452: STR
23453: PPUSH
23454: CALL 6348 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23458: LD_EXP 6
23462: PPUSH
23463: LD_EXP 43
23467: PUSH
23468: LD_STRING Brown
23470: STR
23471: PPUSH
23472: CALL 6348 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23476: LD_EXP 7
23480: PPUSH
23481: LD_EXP 43
23485: PUSH
23486: LD_STRING Donaldson
23488: STR
23489: PPUSH
23490: CALL 6348 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23494: LD_EXP 8
23498: PPUSH
23499: LD_EXP 43
23503: PUSH
23504: LD_STRING Gladstone
23506: STR
23507: PPUSH
23508: CALL 6348 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23512: LD_EXP 9
23516: PPUSH
23517: LD_EXP 43
23521: PUSH
23522: LD_STRING Denis
23524: STR
23525: PPUSH
23526: CALL 6348 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23530: LD_EXP 15
23534: PPUSH
23535: LD_EXP 43
23539: PUSH
23540: LD_STRING Joan
23542: STR
23543: PPUSH
23544: CALL 6348 0 2
// if IsLive ( Joan ) then
23548: LD_EXP 15
23552: PPUSH
23553: CALL_OW 300
23557: IFFALSE 23571
// SaveCharacters ( Joan , Joan ) ;
23559: LD_EXP 15
23563: PPUSH
23564: LD_STRING Joan
23566: PPUSH
23567: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23571: LD_EXP 16
23575: PPUSH
23576: LD_STRING 06_JoanStatus_1
23578: PPUSH
23579: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23583: LD_INT 50
23585: PUSH
23586: EMPTY
23587: LIST
23588: PUSH
23589: LD_INT 22
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: LD_INT 25
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 25
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 4
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PPUSH
23665: CALL_OW 69
23669: PUSH
23670: LD_EXP 1
23674: PUSH
23675: LD_EXP 2
23679: PUSH
23680: LD_EXP 3
23684: PUSH
23685: LD_EXP 4
23689: PUSH
23690: LD_EXP 5
23694: PUSH
23695: LD_EXP 6
23699: PUSH
23700: LD_EXP 7
23704: PUSH
23705: LD_EXP 8
23709: PUSH
23710: LD_EXP 9
23714: PUSH
23715: LD_EXP 15
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: DIFF
23732: PPUSH
23733: LD_STRING 06_other_survivors
23735: PPUSH
23736: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23740: LD_INT 50
23742: PUSH
23743: EMPTY
23744: LIST
23745: PUSH
23746: LD_INT 22
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 21
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 25
23771: PUSH
23772: LD_INT 12
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 25
23781: PUSH
23782: LD_INT 16
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: PPUSH
23805: LD_STRING 06_other_apemans
23807: PPUSH
23808: CALL_OW 38
// YouWin ;
23812: CALL_OW 103
// end ; end_of_file
23816: LD_VAR 0 2
23820: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23821: LD_EXP 39
23825: PUSH
23826: LD_INT 3
23828: EQUAL
23829: IFFALSE 23920
23831: GO 23833
23833: DISABLE
// begin enable ;
23834: ENABLE
// sendedConvoys = 0 ;
23835: LD_ADDR_EXP 39
23839: PUSH
23840: LD_INT 0
23842: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23843: LD_INT 6
23845: PPUSH
23846: LD_INT 3
23848: PPUSH
23849: LD_INT 3
23851: PUSH
23852: LD_INT 4
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: PUSH
23863: LD_OWVAR 67
23867: ARRAY
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: LD_INT 0
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: LD_INT 0
23880: PPUSH
23881: LD_EXP 34
23885: PPUSH
23886: LD_EXP 35
23890: PPUSH
23891: CALL_OW 12
23895: PPUSH
23896: LD_INT 16
23898: PPUSH
23899: LD_INT 15
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: LD_INT 2
23910: PPUSH
23911: CALL_OW 12
23915: PPUSH
23916: CALL 10767 0 12
// end ; end_of_file
23920: END
// export function CreateNature ; var i , un ; begin
23921: LD_INT 0
23923: PPUSH
23924: PPUSH
23925: PPUSH
// for i = 1 to Difficulty + 2 do
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_OWVAR 67
23940: PUSH
23941: LD_INT 2
23943: PLUS
23944: PUSH
23945: FOR_TO
23946: IFFALSE 24055
// begin hc_sex = sex_male ;
23948: LD_ADDR_OWVAR 27
23952: PUSH
23953: LD_INT 1
23955: ST_TO_ADDR
// uc_side = 0 ;
23956: LD_ADDR_OWVAR 20
23960: PUSH
23961: LD_INT 0
23963: ST_TO_ADDR
// uc_nation = nation_nature ;
23964: LD_ADDR_OWVAR 21
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
// hc_class = class_tiger ;
23972: LD_ADDR_OWVAR 28
23976: PUSH
23977: LD_INT 14
23979: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23980: LD_ADDR_OWVAR 31
23984: PUSH
23985: LD_EXP 35
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24005: LD_ADDR_OWVAR 35
24009: PUSH
24010: LD_INT 5
24012: NEG
24013: PPUSH
24014: LD_INT 5
24016: PPUSH
24017: CALL_OW 12
24021: PUSH
24022: LD_OWVAR 67
24026: MUL
24027: ST_TO_ADDR
// un = CreateHuman ;
24028: LD_ADDR_VAR 0 3
24032: PUSH
24033: CALL_OW 44
24037: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_INT 18
24045: PPUSH
24046: LD_INT 0
24048: PPUSH
24049: CALL_OW 49
// end ;
24053: GO 23945
24055: POP
24056: POP
// for i = 1 to rand ( 3 , 4 ) do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_INT 3
24069: PPUSH
24070: LD_INT 4
24072: PPUSH
24073: CALL_OW 12
24077: PUSH
24078: FOR_TO
24079: IFFALSE 24173
// begin hc_sex = sex_male ;
24081: LD_ADDR_OWVAR 27
24085: PUSH
24086: LD_INT 1
24088: ST_TO_ADDR
// uc_side = 0 ;
24089: LD_ADDR_OWVAR 20
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// uc_nation = nation_nature ;
24097: LD_ADDR_OWVAR 21
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
// hc_class = 18 ;
24105: LD_ADDR_OWVAR 28
24109: PUSH
24110: LD_INT 18
24112: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24113: LD_ADDR_OWVAR 31
24117: PUSH
24118: LD_EXP 35
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: ST_TO_ADDR
// hc_agressivity = 0 ;
24138: LD_ADDR_OWVAR 35
24142: PUSH
24143: LD_INT 0
24145: ST_TO_ADDR
// un = CreateHuman ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: CALL_OW 44
24155: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24156: LD_VAR 0 3
24160: PPUSH
24161: LD_INT 18
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: CALL_OW 49
// end ;
24171: GO 24078
24173: POP
24174: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24175: LD_ADDR_VAR 0 2
24179: PUSH
24180: DOUBLE
24181: LD_INT 1
24183: DEC
24184: ST_TO_ADDR
24185: LD_INT 1
24187: PPUSH
24188: LD_INT 3
24190: PPUSH
24191: CALL_OW 12
24195: PUSH
24196: LD_OWVAR 67
24200: PLUS
24201: PUSH
24202: FOR_TO
24203: IFFALSE 24352
// begin hc_sex = sex_male ;
24205: LD_ADDR_OWVAR 27
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// uc_side = 0 ;
24213: LD_ADDR_OWVAR 20
24217: PUSH
24218: LD_INT 0
24220: ST_TO_ADDR
// uc_nation = nation_nature ;
24221: LD_ADDR_OWVAR 21
24225: PUSH
24226: LD_INT 0
24228: ST_TO_ADDR
// hc_class = class_apeman ;
24229: LD_ADDR_OWVAR 28
24233: PUSH
24234: LD_INT 12
24236: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24237: LD_ADDR_OWVAR 31
24241: PUSH
24242: LD_INT 2
24244: PPUSH
24245: LD_INT 5
24247: PPUSH
24248: CALL_OW 12
24252: PUSH
24253: LD_INT 0
24255: PPUSH
24256: LD_INT 2
24258: PPUSH
24259: CALL_OW 12
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24276: LD_ADDR_OWVAR 35
24280: PUSH
24281: LD_INT 20
24283: PPUSH
24284: LD_INT 30
24286: PPUSH
24287: CALL_OW 12
24291: PUSH
24292: LD_INT 30
24294: PPUSH
24295: LD_INT 40
24297: PPUSH
24298: CALL_OW 12
24302: PUSH
24303: LD_INT 40
24305: PPUSH
24306: LD_INT 50
24308: PPUSH
24309: CALL_OW 12
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_OWVAR 67
24323: ARRAY
24324: ST_TO_ADDR
// un = CreateHuman ;
24325: LD_ADDR_VAR 0 3
24329: PUSH
24330: CALL_OW 44
24334: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24335: LD_VAR 0 3
24339: PPUSH
24340: LD_INT 19
24342: PPUSH
24343: LD_INT 0
24345: PPUSH
24346: CALL_OW 49
// end ;
24350: GO 24202
24352: POP
24353: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24354: LD_ADDR_VAR 0 2
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_INT 5
24366: PPUSH
24367: LD_INT 6
24369: PPUSH
24370: CALL_OW 12
24374: PUSH
24375: LD_OWVAR 67
24379: PLUS
24380: PUSH
24381: FOR_TO
24382: IFFALSE 24490
// begin hc_sex = sex_male ;
24384: LD_ADDR_OWVAR 27
24388: PUSH
24389: LD_INT 1
24391: ST_TO_ADDR
// uc_side = 0 ;
24392: LD_ADDR_OWVAR 20
24396: PUSH
24397: LD_INT 0
24399: ST_TO_ADDR
// uc_nation = nation_nature ;
24400: LD_ADDR_OWVAR 21
24404: PUSH
24405: LD_INT 0
24407: ST_TO_ADDR
// hc_class = class_apeman ;
24408: LD_ADDR_OWVAR 28
24412: PUSH
24413: LD_INT 12
24415: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24416: LD_ADDR_OWVAR 31
24420: PUSH
24421: LD_INT 2
24423: PPUSH
24424: LD_INT 5
24426: PPUSH
24427: CALL_OW 12
24431: PUSH
24432: LD_INT 0
24434: PPUSH
24435: LD_INT 2
24437: PPUSH
24438: CALL_OW 12
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// hc_agressivity = 0 ;
24455: LD_ADDR_OWVAR 35
24459: PUSH
24460: LD_INT 0
24462: ST_TO_ADDR
// un = CreateHuman ;
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: CALL_OW 44
24472: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24473: LD_VAR 0 3
24477: PPUSH
24478: LD_INT 20
24480: PPUSH
24481: LD_INT 0
24483: PPUSH
24484: CALL_OW 49
// end ;
24488: GO 24381
24490: POP
24491: POP
// end ; end_of_file end_of_file
24492: LD_VAR 0 1
24496: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24497: LD_INT 0
24499: PPUSH
// ar_miner := 81 ;
24500: LD_ADDR_EXP 58
24504: PUSH
24505: LD_INT 81
24507: ST_TO_ADDR
// ar_crane := 88 ;
24508: LD_ADDR_EXP 57
24512: PUSH
24513: LD_INT 88
24515: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24516: LD_ADDR_EXP 52
24520: PUSH
24521: LD_INT 89
24523: ST_TO_ADDR
// us_hack := 99 ;
24524: LD_ADDR_EXP 53
24528: PUSH
24529: LD_INT 99
24531: ST_TO_ADDR
// us_artillery := 97 ;
24532: LD_ADDR_EXP 54
24536: PUSH
24537: LD_INT 97
24539: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24540: LD_ADDR_EXP 55
24544: PUSH
24545: LD_INT 91
24547: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
24548: LD_ADDR_EXP 56
24552: PUSH
24553: LD_INT 92
24555: ST_TO_ADDR
// ru_radar := 98 ;
24556: LD_ADDR_EXP 51
24560: PUSH
24561: LD_INT 98
24563: ST_TO_ADDR
// tech_Artillery := 80 ;
24564: LD_ADDR_EXP 59
24568: PUSH
24569: LD_INT 80
24571: ST_TO_ADDR
// tech_RadMat := 81 ;
24572: LD_ADDR_EXP 60
24576: PUSH
24577: LD_INT 81
24579: ST_TO_ADDR
// tech_BasicTools := 82 ;
24580: LD_ADDR_EXP 61
24584: PUSH
24585: LD_INT 82
24587: ST_TO_ADDR
// tech_Cargo := 83 ;
24588: LD_ADDR_EXP 62
24592: PUSH
24593: LD_INT 83
24595: ST_TO_ADDR
// tech_Track := 84 ;
24596: LD_ADDR_EXP 63
24600: PUSH
24601: LD_INT 84
24603: ST_TO_ADDR
// tech_Crane := 85 ;
24604: LD_ADDR_EXP 64
24608: PUSH
24609: LD_INT 85
24611: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24612: LD_ADDR_EXP 65
24616: PUSH
24617: LD_INT 86
24619: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24620: LD_ADDR_EXP 66
24624: PUSH
24625: LD_INT 87
24627: ST_TO_ADDR
// class_mastodont := 31 ;
24628: LD_ADDR_EXP 67
24632: PUSH
24633: LD_INT 31
24635: ST_TO_ADDR
// class_horse := 21 ;
24636: LD_ADDR_EXP 68
24640: PUSH
24641: LD_INT 21
24643: ST_TO_ADDR
// end ;
24644: LD_VAR 0 1
24648: RET
// every 1 do
24649: GO 24651
24651: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24652: CALL 24497 0 0
24656: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24657: LD_INT 0
24659: PPUSH
// if p2 = 100 then
24660: LD_VAR 0 2
24664: PUSH
24665: LD_INT 100
24667: EQUAL
24668: IFFALSE 25617
// begin if not StreamModeActive then
24670: LD_EXP 69
24674: NOT
24675: IFFALSE 24685
// StreamModeActive := true ;
24677: LD_ADDR_EXP 69
24681: PUSH
24682: LD_INT 1
24684: ST_TO_ADDR
// if p3 = 0 then
24685: LD_VAR 0 3
24689: PUSH
24690: LD_INT 0
24692: EQUAL
24693: IFFALSE 24699
// InitStreamMode ;
24695: CALL 25777 0 0
// if p3 = 1 then
24699: LD_VAR 0 3
24703: PUSH
24704: LD_INT 1
24706: EQUAL
24707: IFFALSE 24717
// sRocket := true ;
24709: LD_ADDR_EXP 74
24713: PUSH
24714: LD_INT 1
24716: ST_TO_ADDR
// if p3 = 2 then
24717: LD_VAR 0 3
24721: PUSH
24722: LD_INT 2
24724: EQUAL
24725: IFFALSE 24735
// sSpeed := true ;
24727: LD_ADDR_EXP 73
24731: PUSH
24732: LD_INT 1
24734: ST_TO_ADDR
// if p3 = 3 then
24735: LD_VAR 0 3
24739: PUSH
24740: LD_INT 3
24742: EQUAL
24743: IFFALSE 24753
// sEngine := true ;
24745: LD_ADDR_EXP 75
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// if p3 = 4 then
24753: LD_VAR 0 3
24757: PUSH
24758: LD_INT 4
24760: EQUAL
24761: IFFALSE 24771
// sSpec := true ;
24763: LD_ADDR_EXP 72
24767: PUSH
24768: LD_INT 1
24770: ST_TO_ADDR
// if p3 = 5 then
24771: LD_VAR 0 3
24775: PUSH
24776: LD_INT 5
24778: EQUAL
24779: IFFALSE 24789
// sLevel := true ;
24781: LD_ADDR_EXP 76
24785: PUSH
24786: LD_INT 1
24788: ST_TO_ADDR
// if p3 = 6 then
24789: LD_VAR 0 3
24793: PUSH
24794: LD_INT 6
24796: EQUAL
24797: IFFALSE 24807
// sArmoury := true ;
24799: LD_ADDR_EXP 77
24803: PUSH
24804: LD_INT 1
24806: ST_TO_ADDR
// if p3 = 7 then
24807: LD_VAR 0 3
24811: PUSH
24812: LD_INT 7
24814: EQUAL
24815: IFFALSE 24825
// sRadar := true ;
24817: LD_ADDR_EXP 78
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// if p3 = 8 then
24825: LD_VAR 0 3
24829: PUSH
24830: LD_INT 8
24832: EQUAL
24833: IFFALSE 24843
// sBunker := true ;
24835: LD_ADDR_EXP 79
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// if p3 = 9 then
24843: LD_VAR 0 3
24847: PUSH
24848: LD_INT 9
24850: EQUAL
24851: IFFALSE 24861
// sHack := true ;
24853: LD_ADDR_EXP 80
24857: PUSH
24858: LD_INT 1
24860: ST_TO_ADDR
// if p3 = 10 then
24861: LD_VAR 0 3
24865: PUSH
24866: LD_INT 10
24868: EQUAL
24869: IFFALSE 24879
// sFire := true ;
24871: LD_ADDR_EXP 81
24875: PUSH
24876: LD_INT 1
24878: ST_TO_ADDR
// if p3 = 11 then
24879: LD_VAR 0 3
24883: PUSH
24884: LD_INT 11
24886: EQUAL
24887: IFFALSE 24897
// sRefresh := true ;
24889: LD_ADDR_EXP 82
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// if p3 = 12 then
24897: LD_VAR 0 3
24901: PUSH
24902: LD_INT 12
24904: EQUAL
24905: IFFALSE 24915
// sExp := true ;
24907: LD_ADDR_EXP 83
24911: PUSH
24912: LD_INT 1
24914: ST_TO_ADDR
// if p3 = 13 then
24915: LD_VAR 0 3
24919: PUSH
24920: LD_INT 13
24922: EQUAL
24923: IFFALSE 24933
// sDepot := true ;
24925: LD_ADDR_EXP 84
24929: PUSH
24930: LD_INT 1
24932: ST_TO_ADDR
// if p3 = 14 then
24933: LD_VAR 0 3
24937: PUSH
24938: LD_INT 14
24940: EQUAL
24941: IFFALSE 24951
// sFlag := true ;
24943: LD_ADDR_EXP 85
24947: PUSH
24948: LD_INT 1
24950: ST_TO_ADDR
// if p3 = 15 then
24951: LD_VAR 0 3
24955: PUSH
24956: LD_INT 15
24958: EQUAL
24959: IFFALSE 24969
// sKamikadze := true ;
24961: LD_ADDR_EXP 93
24965: PUSH
24966: LD_INT 1
24968: ST_TO_ADDR
// if p3 = 16 then
24969: LD_VAR 0 3
24973: PUSH
24974: LD_INT 16
24976: EQUAL
24977: IFFALSE 24987
// sTroll := true ;
24979: LD_ADDR_EXP 94
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// if p3 = 17 then
24987: LD_VAR 0 3
24991: PUSH
24992: LD_INT 17
24994: EQUAL
24995: IFFALSE 25005
// sSlow := true ;
24997: LD_ADDR_EXP 95
25001: PUSH
25002: LD_INT 1
25004: ST_TO_ADDR
// if p3 = 18 then
25005: LD_VAR 0 3
25009: PUSH
25010: LD_INT 18
25012: EQUAL
25013: IFFALSE 25023
// sLack := true ;
25015: LD_ADDR_EXP 96
25019: PUSH
25020: LD_INT 1
25022: ST_TO_ADDR
// if p3 = 19 then
25023: LD_VAR 0 3
25027: PUSH
25028: LD_INT 19
25030: EQUAL
25031: IFFALSE 25041
// sTank := true ;
25033: LD_ADDR_EXP 98
25037: PUSH
25038: LD_INT 1
25040: ST_TO_ADDR
// if p3 = 20 then
25041: LD_VAR 0 3
25045: PUSH
25046: LD_INT 20
25048: EQUAL
25049: IFFALSE 25059
// sRemote := true ;
25051: LD_ADDR_EXP 99
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// if p3 = 21 then
25059: LD_VAR 0 3
25063: PUSH
25064: LD_INT 21
25066: EQUAL
25067: IFFALSE 25077
// sPowell := true ;
25069: LD_ADDR_EXP 100
25073: PUSH
25074: LD_INT 1
25076: ST_TO_ADDR
// if p3 = 22 then
25077: LD_VAR 0 3
25081: PUSH
25082: LD_INT 22
25084: EQUAL
25085: IFFALSE 25095
// sTeleport := true ;
25087: LD_ADDR_EXP 103
25091: PUSH
25092: LD_INT 1
25094: ST_TO_ADDR
// if p3 = 23 then
25095: LD_VAR 0 3
25099: PUSH
25100: LD_INT 23
25102: EQUAL
25103: IFFALSE 25113
// sOilTower := true ;
25105: LD_ADDR_EXP 105
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
// if p3 = 24 then
25113: LD_VAR 0 3
25117: PUSH
25118: LD_INT 24
25120: EQUAL
25121: IFFALSE 25131
// sShovel := true ;
25123: LD_ADDR_EXP 106
25127: PUSH
25128: LD_INT 1
25130: ST_TO_ADDR
// if p3 = 25 then
25131: LD_VAR 0 3
25135: PUSH
25136: LD_INT 25
25138: EQUAL
25139: IFFALSE 25149
// sSheik := true ;
25141: LD_ADDR_EXP 107
25145: PUSH
25146: LD_INT 1
25148: ST_TO_ADDR
// if p3 = 26 then
25149: LD_VAR 0 3
25153: PUSH
25154: LD_INT 26
25156: EQUAL
25157: IFFALSE 25167
// sEarthquake := true ;
25159: LD_ADDR_EXP 109
25163: PUSH
25164: LD_INT 1
25166: ST_TO_ADDR
// if p3 = 27 then
25167: LD_VAR 0 3
25171: PUSH
25172: LD_INT 27
25174: EQUAL
25175: IFFALSE 25185
// sAI := true ;
25177: LD_ADDR_EXP 110
25181: PUSH
25182: LD_INT 1
25184: ST_TO_ADDR
// if p3 = 28 then
25185: LD_VAR 0 3
25189: PUSH
25190: LD_INT 28
25192: EQUAL
25193: IFFALSE 25203
// sCargo := true ;
25195: LD_ADDR_EXP 113
25199: PUSH
25200: LD_INT 1
25202: ST_TO_ADDR
// if p3 = 29 then
25203: LD_VAR 0 3
25207: PUSH
25208: LD_INT 29
25210: EQUAL
25211: IFFALSE 25221
// sDLaser := true ;
25213: LD_ADDR_EXP 114
25217: PUSH
25218: LD_INT 1
25220: ST_TO_ADDR
// if p3 = 30 then
25221: LD_VAR 0 3
25225: PUSH
25226: LD_INT 30
25228: EQUAL
25229: IFFALSE 25239
// sExchange := true ;
25231: LD_ADDR_EXP 115
25235: PUSH
25236: LD_INT 1
25238: ST_TO_ADDR
// if p3 = 31 then
25239: LD_VAR 0 3
25243: PUSH
25244: LD_INT 31
25246: EQUAL
25247: IFFALSE 25257
// sFac := true ;
25249: LD_ADDR_EXP 116
25253: PUSH
25254: LD_INT 1
25256: ST_TO_ADDR
// if p3 = 32 then
25257: LD_VAR 0 3
25261: PUSH
25262: LD_INT 32
25264: EQUAL
25265: IFFALSE 25275
// sPower := true ;
25267: LD_ADDR_EXP 117
25271: PUSH
25272: LD_INT 1
25274: ST_TO_ADDR
// if p3 = 33 then
25275: LD_VAR 0 3
25279: PUSH
25280: LD_INT 33
25282: EQUAL
25283: IFFALSE 25293
// sRandom := true ;
25285: LD_ADDR_EXP 118
25289: PUSH
25290: LD_INT 1
25292: ST_TO_ADDR
// if p3 = 34 then
25293: LD_VAR 0 3
25297: PUSH
25298: LD_INT 34
25300: EQUAL
25301: IFFALSE 25311
// sShield := true ;
25303: LD_ADDR_EXP 119
25307: PUSH
25308: LD_INT 1
25310: ST_TO_ADDR
// if p3 = 35 then
25311: LD_VAR 0 3
25315: PUSH
25316: LD_INT 35
25318: EQUAL
25319: IFFALSE 25329
// sTime := true ;
25321: LD_ADDR_EXP 120
25325: PUSH
25326: LD_INT 1
25328: ST_TO_ADDR
// if p3 = 36 then
25329: LD_VAR 0 3
25333: PUSH
25334: LD_INT 36
25336: EQUAL
25337: IFFALSE 25347
// sTools := true ;
25339: LD_ADDR_EXP 121
25343: PUSH
25344: LD_INT 1
25346: ST_TO_ADDR
// if p3 = 101 then
25347: LD_VAR 0 3
25351: PUSH
25352: LD_INT 101
25354: EQUAL
25355: IFFALSE 25365
// sSold := true ;
25357: LD_ADDR_EXP 86
25361: PUSH
25362: LD_INT 1
25364: ST_TO_ADDR
// if p3 = 102 then
25365: LD_VAR 0 3
25369: PUSH
25370: LD_INT 102
25372: EQUAL
25373: IFFALSE 25383
// sDiff := true ;
25375: LD_ADDR_EXP 87
25379: PUSH
25380: LD_INT 1
25382: ST_TO_ADDR
// if p3 = 103 then
25383: LD_VAR 0 3
25387: PUSH
25388: LD_INT 103
25390: EQUAL
25391: IFFALSE 25401
// sFog := true ;
25393: LD_ADDR_EXP 90
25397: PUSH
25398: LD_INT 1
25400: ST_TO_ADDR
// if p3 = 104 then
25401: LD_VAR 0 3
25405: PUSH
25406: LD_INT 104
25408: EQUAL
25409: IFFALSE 25419
// sReset := true ;
25411: LD_ADDR_EXP 91
25415: PUSH
25416: LD_INT 1
25418: ST_TO_ADDR
// if p3 = 105 then
25419: LD_VAR 0 3
25423: PUSH
25424: LD_INT 105
25426: EQUAL
25427: IFFALSE 25437
// sSun := true ;
25429: LD_ADDR_EXP 92
25433: PUSH
25434: LD_INT 1
25436: ST_TO_ADDR
// if p3 = 106 then
25437: LD_VAR 0 3
25441: PUSH
25442: LD_INT 106
25444: EQUAL
25445: IFFALSE 25455
// sTiger := true ;
25447: LD_ADDR_EXP 88
25451: PUSH
25452: LD_INT 1
25454: ST_TO_ADDR
// if p3 = 107 then
25455: LD_VAR 0 3
25459: PUSH
25460: LD_INT 107
25462: EQUAL
25463: IFFALSE 25473
// sBomb := true ;
25465: LD_ADDR_EXP 89
25469: PUSH
25470: LD_INT 1
25472: ST_TO_ADDR
// if p3 = 108 then
25473: LD_VAR 0 3
25477: PUSH
25478: LD_INT 108
25480: EQUAL
25481: IFFALSE 25491
// sWound := true ;
25483: LD_ADDR_EXP 97
25487: PUSH
25488: LD_INT 1
25490: ST_TO_ADDR
// if p3 = 109 then
25491: LD_VAR 0 3
25495: PUSH
25496: LD_INT 109
25498: EQUAL
25499: IFFALSE 25509
// sBetray := true ;
25501: LD_ADDR_EXP 101
25505: PUSH
25506: LD_INT 1
25508: ST_TO_ADDR
// if p3 = 110 then
25509: LD_VAR 0 3
25513: PUSH
25514: LD_INT 110
25516: EQUAL
25517: IFFALSE 25527
// sContamin := true ;
25519: LD_ADDR_EXP 102
25523: PUSH
25524: LD_INT 1
25526: ST_TO_ADDR
// if p3 = 111 then
25527: LD_VAR 0 3
25531: PUSH
25532: LD_INT 111
25534: EQUAL
25535: IFFALSE 25545
// sOil := true ;
25537: LD_ADDR_EXP 104
25541: PUSH
25542: LD_INT 1
25544: ST_TO_ADDR
// if p3 = 112 then
25545: LD_VAR 0 3
25549: PUSH
25550: LD_INT 112
25552: EQUAL
25553: IFFALSE 25563
// sStu := true ;
25555: LD_ADDR_EXP 108
25559: PUSH
25560: LD_INT 1
25562: ST_TO_ADDR
// if p3 = 113 then
25563: LD_VAR 0 3
25567: PUSH
25568: LD_INT 113
25570: EQUAL
25571: IFFALSE 25581
// sBazooka := true ;
25573: LD_ADDR_EXP 111
25577: PUSH
25578: LD_INT 1
25580: ST_TO_ADDR
// if p3 = 114 then
25581: LD_VAR 0 3
25585: PUSH
25586: LD_INT 114
25588: EQUAL
25589: IFFALSE 25599
// sMortar := true ;
25591: LD_ADDR_EXP 112
25595: PUSH
25596: LD_INT 1
25598: ST_TO_ADDR
// if p3 = 115 then
25599: LD_VAR 0 3
25603: PUSH
25604: LD_INT 115
25606: EQUAL
25607: IFFALSE 25617
// sRanger := true ;
25609: LD_ADDR_EXP 122
25613: PUSH
25614: LD_INT 1
25616: ST_TO_ADDR
// end ; if p2 = 101 then
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 101
25624: EQUAL
25625: IFFALSE 25753
// begin case p3 of 1 :
25627: LD_VAR 0 3
25631: PUSH
25632: LD_INT 1
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25647
25640: POP
// hHackUnlimitedResources ; 2 :
25641: CALL 36790 0 0
25645: GO 25753
25647: LD_INT 2
25649: DOUBLE
25650: EQUAL
25651: IFTRUE 25655
25653: GO 25662
25655: POP
// hHackSetLevel10 ; 3 :
25656: CALL 36923 0 0
25660: GO 25753
25662: LD_INT 3
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25677
25670: POP
// hHackSetLevel10YourUnits ; 4 :
25671: CALL 37008 0 0
25675: GO 25753
25677: LD_INT 4
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25692
25685: POP
// hHackInvincible ; 5 :
25686: CALL 37456 0 0
25690: GO 25753
25692: LD_INT 5
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25707
25700: POP
// hHackInvisible ; 6 :
25701: CALL 37567 0 0
25705: GO 25753
25707: LD_INT 6
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25722
25715: POP
// hHackChangeYourSide ; 7 :
25716: CALL 37624 0 0
25720: GO 25753
25722: LD_INT 7
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25737
25730: POP
// hHackChangeUnitSide ; 8 :
25731: CALL 37666 0 0
25735: GO 25753
25737: LD_INT 8
25739: DOUBLE
25740: EQUAL
25741: IFTRUE 25745
25743: GO 25752
25745: POP
// hHackFog ; end ;
25746: CALL 37767 0 0
25750: GO 25753
25752: POP
// end ; end ;
25753: LD_VAR 0 7
25757: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
25758: GO 25760
25760: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
25761: LD_STRING initStreamRollete();
25763: PPUSH
25764: CALL_OW 559
// InitStreamMode ;
25768: CALL 25777 0 0
// DefineStreamItems ( ) ;
25772: CALL 26217 0 0
// end ;
25776: END
// function InitStreamMode ; begin
25777: LD_INT 0
25779: PPUSH
// streamModeActive := false ;
25780: LD_ADDR_EXP 69
25784: PUSH
25785: LD_INT 0
25787: ST_TO_ADDR
// normalCounter := 36 ;
25788: LD_ADDR_EXP 70
25792: PUSH
25793: LD_INT 36
25795: ST_TO_ADDR
// hardcoreCounter := 16 ;
25796: LD_ADDR_EXP 71
25800: PUSH
25801: LD_INT 16
25803: ST_TO_ADDR
// sRocket := false ;
25804: LD_ADDR_EXP 74
25808: PUSH
25809: LD_INT 0
25811: ST_TO_ADDR
// sSpeed := false ;
25812: LD_ADDR_EXP 73
25816: PUSH
25817: LD_INT 0
25819: ST_TO_ADDR
// sEngine := false ;
25820: LD_ADDR_EXP 75
25824: PUSH
25825: LD_INT 0
25827: ST_TO_ADDR
// sSpec := false ;
25828: LD_ADDR_EXP 72
25832: PUSH
25833: LD_INT 0
25835: ST_TO_ADDR
// sLevel := false ;
25836: LD_ADDR_EXP 76
25840: PUSH
25841: LD_INT 0
25843: ST_TO_ADDR
// sArmoury := false ;
25844: LD_ADDR_EXP 77
25848: PUSH
25849: LD_INT 0
25851: ST_TO_ADDR
// sRadar := false ;
25852: LD_ADDR_EXP 78
25856: PUSH
25857: LD_INT 0
25859: ST_TO_ADDR
// sBunker := false ;
25860: LD_ADDR_EXP 79
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// sHack := false ;
25868: LD_ADDR_EXP 80
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// sFire := false ;
25876: LD_ADDR_EXP 81
25880: PUSH
25881: LD_INT 0
25883: ST_TO_ADDR
// sRefresh := false ;
25884: LD_ADDR_EXP 82
25888: PUSH
25889: LD_INT 0
25891: ST_TO_ADDR
// sExp := false ;
25892: LD_ADDR_EXP 83
25896: PUSH
25897: LD_INT 0
25899: ST_TO_ADDR
// sDepot := false ;
25900: LD_ADDR_EXP 84
25904: PUSH
25905: LD_INT 0
25907: ST_TO_ADDR
// sFlag := false ;
25908: LD_ADDR_EXP 85
25912: PUSH
25913: LD_INT 0
25915: ST_TO_ADDR
// sKamikadze := false ;
25916: LD_ADDR_EXP 93
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// sTroll := false ;
25924: LD_ADDR_EXP 94
25928: PUSH
25929: LD_INT 0
25931: ST_TO_ADDR
// sSlow := false ;
25932: LD_ADDR_EXP 95
25936: PUSH
25937: LD_INT 0
25939: ST_TO_ADDR
// sLack := false ;
25940: LD_ADDR_EXP 96
25944: PUSH
25945: LD_INT 0
25947: ST_TO_ADDR
// sTank := false ;
25948: LD_ADDR_EXP 98
25952: PUSH
25953: LD_INT 0
25955: ST_TO_ADDR
// sRemote := false ;
25956: LD_ADDR_EXP 99
25960: PUSH
25961: LD_INT 0
25963: ST_TO_ADDR
// sPowell := false ;
25964: LD_ADDR_EXP 100
25968: PUSH
25969: LD_INT 0
25971: ST_TO_ADDR
// sTeleport := false ;
25972: LD_ADDR_EXP 103
25976: PUSH
25977: LD_INT 0
25979: ST_TO_ADDR
// sOilTower := false ;
25980: LD_ADDR_EXP 105
25984: PUSH
25985: LD_INT 0
25987: ST_TO_ADDR
// sShovel := false ;
25988: LD_ADDR_EXP 106
25992: PUSH
25993: LD_INT 0
25995: ST_TO_ADDR
// sSheik := false ;
25996: LD_ADDR_EXP 107
26000: PUSH
26001: LD_INT 0
26003: ST_TO_ADDR
// sEarthquake := false ;
26004: LD_ADDR_EXP 109
26008: PUSH
26009: LD_INT 0
26011: ST_TO_ADDR
// sAI := false ;
26012: LD_ADDR_EXP 110
26016: PUSH
26017: LD_INT 0
26019: ST_TO_ADDR
// sCargo := false ;
26020: LD_ADDR_EXP 113
26024: PUSH
26025: LD_INT 0
26027: ST_TO_ADDR
// sDLaser := false ;
26028: LD_ADDR_EXP 114
26032: PUSH
26033: LD_INT 0
26035: ST_TO_ADDR
// sExchange := false ;
26036: LD_ADDR_EXP 115
26040: PUSH
26041: LD_INT 0
26043: ST_TO_ADDR
// sFac := false ;
26044: LD_ADDR_EXP 116
26048: PUSH
26049: LD_INT 0
26051: ST_TO_ADDR
// sPower := false ;
26052: LD_ADDR_EXP 117
26056: PUSH
26057: LD_INT 0
26059: ST_TO_ADDR
// sRandom := false ;
26060: LD_ADDR_EXP 118
26064: PUSH
26065: LD_INT 0
26067: ST_TO_ADDR
// sShield := false ;
26068: LD_ADDR_EXP 119
26072: PUSH
26073: LD_INT 0
26075: ST_TO_ADDR
// sTime := false ;
26076: LD_ADDR_EXP 120
26080: PUSH
26081: LD_INT 0
26083: ST_TO_ADDR
// sTools := false ;
26084: LD_ADDR_EXP 121
26088: PUSH
26089: LD_INT 0
26091: ST_TO_ADDR
// sSold := false ;
26092: LD_ADDR_EXP 86
26096: PUSH
26097: LD_INT 0
26099: ST_TO_ADDR
// sDiff := false ;
26100: LD_ADDR_EXP 87
26104: PUSH
26105: LD_INT 0
26107: ST_TO_ADDR
// sFog := false ;
26108: LD_ADDR_EXP 90
26112: PUSH
26113: LD_INT 0
26115: ST_TO_ADDR
// sReset := false ;
26116: LD_ADDR_EXP 91
26120: PUSH
26121: LD_INT 0
26123: ST_TO_ADDR
// sSun := false ;
26124: LD_ADDR_EXP 92
26128: PUSH
26129: LD_INT 0
26131: ST_TO_ADDR
// sTiger := false ;
26132: LD_ADDR_EXP 88
26136: PUSH
26137: LD_INT 0
26139: ST_TO_ADDR
// sBomb := false ;
26140: LD_ADDR_EXP 89
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// sWound := false ;
26148: LD_ADDR_EXP 97
26152: PUSH
26153: LD_INT 0
26155: ST_TO_ADDR
// sBetray := false ;
26156: LD_ADDR_EXP 101
26160: PUSH
26161: LD_INT 0
26163: ST_TO_ADDR
// sContamin := false ;
26164: LD_ADDR_EXP 102
26168: PUSH
26169: LD_INT 0
26171: ST_TO_ADDR
// sOil := false ;
26172: LD_ADDR_EXP 104
26176: PUSH
26177: LD_INT 0
26179: ST_TO_ADDR
// sStu := false ;
26180: LD_ADDR_EXP 108
26184: PUSH
26185: LD_INT 0
26187: ST_TO_ADDR
// sBazooka := false ;
26188: LD_ADDR_EXP 111
26192: PUSH
26193: LD_INT 0
26195: ST_TO_ADDR
// sMortar := false ;
26196: LD_ADDR_EXP 112
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// sRanger := false ;
26204: LD_ADDR_EXP 122
26208: PUSH
26209: LD_INT 0
26211: ST_TO_ADDR
// end ;
26212: LD_VAR 0 1
26216: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
// result := [ ] ;
26224: LD_ADDR_VAR 0 1
26228: PUSH
26229: EMPTY
26230: ST_TO_ADDR
// if campaign_id = 1 then
26231: LD_OWVAR 69
26235: PUSH
26236: LD_INT 1
26238: EQUAL
26239: IFFALSE 29177
// begin case mission_number of 1 :
26241: LD_OWVAR 70
26245: PUSH
26246: LD_INT 1
26248: DOUBLE
26249: EQUAL
26250: IFTRUE 26254
26252: GO 26318
26254: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
26255: LD_ADDR_VAR 0 1
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 4
26265: PUSH
26266: LD_INT 11
26268: PUSH
26269: LD_INT 12
26271: PUSH
26272: LD_INT 15
26274: PUSH
26275: LD_INT 16
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_INT 23
26283: PUSH
26284: LD_INT 26
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 101
26300: PUSH
26301: LD_INT 102
26303: PUSH
26304: LD_INT 106
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: ST_TO_ADDR
26316: GO 29175
26318: LD_INT 2
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26398
26326: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
26327: LD_ADDR_VAR 0 1
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 4
26337: PUSH
26338: LD_INT 11
26340: PUSH
26341: LD_INT 12
26343: PUSH
26344: LD_INT 15
26346: PUSH
26347: LD_INT 16
26349: PUSH
26350: LD_INT 22
26352: PUSH
26353: LD_INT 23
26355: PUSH
26356: LD_INT 26
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 101
26372: PUSH
26373: LD_INT 102
26375: PUSH
26376: LD_INT 105
26378: PUSH
26379: LD_INT 106
26381: PUSH
26382: LD_INT 108
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: ST_TO_ADDR
26396: GO 29175
26398: LD_INT 3
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26482
26406: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
26407: LD_ADDR_VAR 0 1
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 4
26417: PUSH
26418: LD_INT 5
26420: PUSH
26421: LD_INT 11
26423: PUSH
26424: LD_INT 12
26426: PUSH
26427: LD_INT 15
26429: PUSH
26430: LD_INT 16
26432: PUSH
26433: LD_INT 22
26435: PUSH
26436: LD_INT 26
26438: PUSH
26439: LD_INT 36
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 101
26456: PUSH
26457: LD_INT 102
26459: PUSH
26460: LD_INT 105
26462: PUSH
26463: LD_INT 106
26465: PUSH
26466: LD_INT 108
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: ST_TO_ADDR
26480: GO 29175
26482: LD_INT 4
26484: DOUBLE
26485: EQUAL
26486: IFTRUE 26490
26488: GO 26574
26490: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
26491: LD_ADDR_VAR 0 1
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: LD_INT 4
26501: PUSH
26502: LD_INT 5
26504: PUSH
26505: LD_INT 8
26507: PUSH
26508: LD_INT 11
26510: PUSH
26511: LD_INT 12
26513: PUSH
26514: LD_INT 15
26516: PUSH
26517: LD_INT 16
26519: PUSH
26520: LD_INT 22
26522: PUSH
26523: LD_INT 23
26525: PUSH
26526: LD_INT 26
26528: PUSH
26529: LD_INT 36
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 101
26548: PUSH
26549: LD_INT 102
26551: PUSH
26552: LD_INT 105
26554: PUSH
26555: LD_INT 106
26557: PUSH
26558: LD_INT 108
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: ST_TO_ADDR
26572: GO 29175
26574: LD_INT 5
26576: DOUBLE
26577: EQUAL
26578: IFTRUE 26582
26580: GO 26682
26582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
26583: LD_ADDR_VAR 0 1
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 4
26593: PUSH
26594: LD_INT 5
26596: PUSH
26597: LD_INT 6
26599: PUSH
26600: LD_INT 8
26602: PUSH
26603: LD_INT 11
26605: PUSH
26606: LD_INT 12
26608: PUSH
26609: LD_INT 15
26611: PUSH
26612: LD_INT 16
26614: PUSH
26615: LD_INT 22
26617: PUSH
26618: LD_INT 23
26620: PUSH
26621: LD_INT 25
26623: PUSH
26624: LD_INT 26
26626: PUSH
26627: LD_INT 36
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 101
26648: PUSH
26649: LD_INT 102
26651: PUSH
26652: LD_INT 105
26654: PUSH
26655: LD_INT 106
26657: PUSH
26658: LD_INT 108
26660: PUSH
26661: LD_INT 109
26663: PUSH
26664: LD_INT 112
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: ST_TO_ADDR
26680: GO 29175
26682: LD_INT 6
26684: DOUBLE
26685: EQUAL
26686: IFTRUE 26690
26688: GO 26810
26690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
26691: LD_ADDR_VAR 0 1
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 4
26701: PUSH
26702: LD_INT 5
26704: PUSH
26705: LD_INT 6
26707: PUSH
26708: LD_INT 8
26710: PUSH
26711: LD_INT 11
26713: PUSH
26714: LD_INT 12
26716: PUSH
26717: LD_INT 15
26719: PUSH
26720: LD_INT 16
26722: PUSH
26723: LD_INT 20
26725: PUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 22
26731: PUSH
26732: LD_INT 23
26734: PUSH
26735: LD_INT 25
26737: PUSH
26738: LD_INT 26
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 31
26746: PUSH
26747: LD_INT 32
26749: PUSH
26750: LD_INT 36
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 101
26776: PUSH
26777: LD_INT 102
26779: PUSH
26780: LD_INT 105
26782: PUSH
26783: LD_INT 106
26785: PUSH
26786: LD_INT 108
26788: PUSH
26789: LD_INT 109
26791: PUSH
26792: LD_INT 112
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: ST_TO_ADDR
26808: GO 29175
26810: LD_INT 7
26812: DOUBLE
26813: EQUAL
26814: IFTRUE 26818
26816: GO 26918
26818: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
26819: LD_ADDR_VAR 0 1
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 4
26829: PUSH
26830: LD_INT 5
26832: PUSH
26833: LD_INT 7
26835: PUSH
26836: LD_INT 11
26838: PUSH
26839: LD_INT 12
26841: PUSH
26842: LD_INT 15
26844: PUSH
26845: LD_INT 16
26847: PUSH
26848: LD_INT 20
26850: PUSH
26851: LD_INT 21
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 23
26859: PUSH
26860: LD_INT 25
26862: PUSH
26863: LD_INT 26
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 101
26884: PUSH
26885: LD_INT 102
26887: PUSH
26888: LD_INT 103
26890: PUSH
26891: LD_INT 105
26893: PUSH
26894: LD_INT 106
26896: PUSH
26897: LD_INT 108
26899: PUSH
26900: LD_INT 112
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: ST_TO_ADDR
26916: GO 29175
26918: LD_INT 8
26920: DOUBLE
26921: EQUAL
26922: IFTRUE 26926
26924: GO 27054
26926: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
26927: LD_ADDR_VAR 0 1
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 4
26937: PUSH
26938: LD_INT 5
26940: PUSH
26941: LD_INT 6
26943: PUSH
26944: LD_INT 7
26946: PUSH
26947: LD_INT 8
26949: PUSH
26950: LD_INT 11
26952: PUSH
26953: LD_INT 12
26955: PUSH
26956: LD_INT 15
26958: PUSH
26959: LD_INT 16
26961: PUSH
26962: LD_INT 20
26964: PUSH
26965: LD_INT 21
26967: PUSH
26968: LD_INT 22
26970: PUSH
26971: LD_INT 23
26973: PUSH
26974: LD_INT 25
26976: PUSH
26977: LD_INT 26
26979: PUSH
26980: LD_INT 30
26982: PUSH
26983: LD_INT 31
26985: PUSH
26986: LD_INT 32
26988: PUSH
26989: LD_INT 36
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 101
27016: PUSH
27017: LD_INT 102
27019: PUSH
27020: LD_INT 103
27022: PUSH
27023: LD_INT 105
27025: PUSH
27026: LD_INT 106
27028: PUSH
27029: LD_INT 108
27031: PUSH
27032: LD_INT 109
27034: PUSH
27035: LD_INT 112
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: ST_TO_ADDR
27052: GO 29175
27054: LD_INT 9
27056: DOUBLE
27057: EQUAL
27058: IFTRUE 27062
27060: GO 27198
27062: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
27063: LD_ADDR_VAR 0 1
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 4
27073: PUSH
27074: LD_INT 5
27076: PUSH
27077: LD_INT 6
27079: PUSH
27080: LD_INT 7
27082: PUSH
27083: LD_INT 8
27085: PUSH
27086: LD_INT 11
27088: PUSH
27089: LD_INT 12
27091: PUSH
27092: LD_INT 15
27094: PUSH
27095: LD_INT 16
27097: PUSH
27098: LD_INT 20
27100: PUSH
27101: LD_INT 21
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_INT 23
27109: PUSH
27110: LD_INT 25
27112: PUSH
27113: LD_INT 26
27115: PUSH
27116: LD_INT 28
27118: PUSH
27119: LD_INT 30
27121: PUSH
27122: LD_INT 31
27124: PUSH
27125: LD_INT 32
27127: PUSH
27128: LD_INT 36
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 101
27156: PUSH
27157: LD_INT 102
27159: PUSH
27160: LD_INT 103
27162: PUSH
27163: LD_INT 105
27165: PUSH
27166: LD_INT 106
27168: PUSH
27169: LD_INT 108
27171: PUSH
27172: LD_INT 109
27174: PUSH
27175: LD_INT 112
27177: PUSH
27178: LD_INT 114
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: ST_TO_ADDR
27196: GO 29175
27198: LD_INT 10
27200: DOUBLE
27201: EQUAL
27202: IFTRUE 27206
27204: GO 27390
27206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
27207: LD_ADDR_VAR 0 1
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 4
27217: PUSH
27218: LD_INT 5
27220: PUSH
27221: LD_INT 6
27223: PUSH
27224: LD_INT 7
27226: PUSH
27227: LD_INT 8
27229: PUSH
27230: LD_INT 9
27232: PUSH
27233: LD_INT 10
27235: PUSH
27236: LD_INT 11
27238: PUSH
27239: LD_INT 12
27241: PUSH
27242: LD_INT 13
27244: PUSH
27245: LD_INT 14
27247: PUSH
27248: LD_INT 15
27250: PUSH
27251: LD_INT 16
27253: PUSH
27254: LD_INT 17
27256: PUSH
27257: LD_INT 18
27259: PUSH
27260: LD_INT 19
27262: PUSH
27263: LD_INT 20
27265: PUSH
27266: LD_INT 21
27268: PUSH
27269: LD_INT 22
27271: PUSH
27272: LD_INT 23
27274: PUSH
27275: LD_INT 24
27277: PUSH
27278: LD_INT 25
27280: PUSH
27281: LD_INT 26
27283: PUSH
27284: LD_INT 28
27286: PUSH
27287: LD_INT 30
27289: PUSH
27290: LD_INT 31
27292: PUSH
27293: LD_INT 32
27295: PUSH
27296: LD_INT 36
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 101
27332: PUSH
27333: LD_INT 102
27335: PUSH
27336: LD_INT 103
27338: PUSH
27339: LD_INT 104
27341: PUSH
27342: LD_INT 105
27344: PUSH
27345: LD_INT 106
27347: PUSH
27348: LD_INT 107
27350: PUSH
27351: LD_INT 108
27353: PUSH
27354: LD_INT 109
27356: PUSH
27357: LD_INT 110
27359: PUSH
27360: LD_INT 111
27362: PUSH
27363: LD_INT 112
27365: PUSH
27366: LD_INT 114
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: ST_TO_ADDR
27388: GO 29175
27390: LD_INT 11
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27398
27396: GO 27590
27398: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
27399: LD_ADDR_VAR 0 1
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: LD_INT 4
27412: PUSH
27413: LD_INT 5
27415: PUSH
27416: LD_INT 6
27418: PUSH
27419: LD_INT 7
27421: PUSH
27422: LD_INT 8
27424: PUSH
27425: LD_INT 9
27427: PUSH
27428: LD_INT 10
27430: PUSH
27431: LD_INT 11
27433: PUSH
27434: LD_INT 12
27436: PUSH
27437: LD_INT 13
27439: PUSH
27440: LD_INT 14
27442: PUSH
27443: LD_INT 15
27445: PUSH
27446: LD_INT 16
27448: PUSH
27449: LD_INT 17
27451: PUSH
27452: LD_INT 18
27454: PUSH
27455: LD_INT 19
27457: PUSH
27458: LD_INT 20
27460: PUSH
27461: LD_INT 21
27463: PUSH
27464: LD_INT 22
27466: PUSH
27467: LD_INT 23
27469: PUSH
27470: LD_INT 24
27472: PUSH
27473: LD_INT 25
27475: PUSH
27476: LD_INT 26
27478: PUSH
27479: LD_INT 28
27481: PUSH
27482: LD_INT 30
27484: PUSH
27485: LD_INT 31
27487: PUSH
27488: LD_INT 32
27490: PUSH
27491: LD_INT 34
27493: PUSH
27494: LD_INT 36
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 101
27532: PUSH
27533: LD_INT 102
27535: PUSH
27536: LD_INT 103
27538: PUSH
27539: LD_INT 104
27541: PUSH
27542: LD_INT 105
27544: PUSH
27545: LD_INT 106
27547: PUSH
27548: LD_INT 107
27550: PUSH
27551: LD_INT 108
27553: PUSH
27554: LD_INT 109
27556: PUSH
27557: LD_INT 110
27559: PUSH
27560: LD_INT 111
27562: PUSH
27563: LD_INT 112
27565: PUSH
27566: LD_INT 114
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: ST_TO_ADDR
27588: GO 29175
27590: LD_INT 12
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 27806
27598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: LD_INT 4
27615: PUSH
27616: LD_INT 5
27618: PUSH
27619: LD_INT 6
27621: PUSH
27622: LD_INT 7
27624: PUSH
27625: LD_INT 8
27627: PUSH
27628: LD_INT 9
27630: PUSH
27631: LD_INT 10
27633: PUSH
27634: LD_INT 11
27636: PUSH
27637: LD_INT 12
27639: PUSH
27640: LD_INT 13
27642: PUSH
27643: LD_INT 14
27645: PUSH
27646: LD_INT 15
27648: PUSH
27649: LD_INT 16
27651: PUSH
27652: LD_INT 17
27654: PUSH
27655: LD_INT 18
27657: PUSH
27658: LD_INT 19
27660: PUSH
27661: LD_INT 20
27663: PUSH
27664: LD_INT 21
27666: PUSH
27667: LD_INT 22
27669: PUSH
27670: LD_INT 23
27672: PUSH
27673: LD_INT 24
27675: PUSH
27676: LD_INT 25
27678: PUSH
27679: LD_INT 26
27681: PUSH
27682: LD_INT 27
27684: PUSH
27685: LD_INT 28
27687: PUSH
27688: LD_INT 30
27690: PUSH
27691: LD_INT 31
27693: PUSH
27694: LD_INT 32
27696: PUSH
27697: LD_INT 33
27699: PUSH
27700: LD_INT 34
27702: PUSH
27703: LD_INT 36
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 101
27744: PUSH
27745: LD_INT 102
27747: PUSH
27748: LD_INT 103
27750: PUSH
27751: LD_INT 104
27753: PUSH
27754: LD_INT 105
27756: PUSH
27757: LD_INT 106
27759: PUSH
27760: LD_INT 107
27762: PUSH
27763: LD_INT 108
27765: PUSH
27766: LD_INT 109
27768: PUSH
27769: LD_INT 110
27771: PUSH
27772: LD_INT 111
27774: PUSH
27775: LD_INT 112
27777: PUSH
27778: LD_INT 113
27780: PUSH
27781: LD_INT 114
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: ST_TO_ADDR
27804: GO 29175
27806: LD_INT 13
27808: DOUBLE
27809: EQUAL
27810: IFTRUE 27814
27812: GO 28010
27814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
27815: LD_ADDR_VAR 0 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 3
27828: PUSH
27829: LD_INT 4
27831: PUSH
27832: LD_INT 5
27834: PUSH
27835: LD_INT 8
27837: PUSH
27838: LD_INT 9
27840: PUSH
27841: LD_INT 10
27843: PUSH
27844: LD_INT 11
27846: PUSH
27847: LD_INT 12
27849: PUSH
27850: LD_INT 14
27852: PUSH
27853: LD_INT 15
27855: PUSH
27856: LD_INT 16
27858: PUSH
27859: LD_INT 17
27861: PUSH
27862: LD_INT 18
27864: PUSH
27865: LD_INT 19
27867: PUSH
27868: LD_INT 20
27870: PUSH
27871: LD_INT 21
27873: PUSH
27874: LD_INT 22
27876: PUSH
27877: LD_INT 23
27879: PUSH
27880: LD_INT 24
27882: PUSH
27883: LD_INT 25
27885: PUSH
27886: LD_INT 26
27888: PUSH
27889: LD_INT 27
27891: PUSH
27892: LD_INT 28
27894: PUSH
27895: LD_INT 30
27897: PUSH
27898: LD_INT 31
27900: PUSH
27901: LD_INT 32
27903: PUSH
27904: LD_INT 33
27906: PUSH
27907: LD_INT 34
27909: PUSH
27910: LD_INT 36
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 101
27948: PUSH
27949: LD_INT 102
27951: PUSH
27952: LD_INT 103
27954: PUSH
27955: LD_INT 104
27957: PUSH
27958: LD_INT 105
27960: PUSH
27961: LD_INT 106
27963: PUSH
27964: LD_INT 107
27966: PUSH
27967: LD_INT 108
27969: PUSH
27970: LD_INT 109
27972: PUSH
27973: LD_INT 110
27975: PUSH
27976: LD_INT 111
27978: PUSH
27979: LD_INT 112
27981: PUSH
27982: LD_INT 113
27984: PUSH
27985: LD_INT 114
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: ST_TO_ADDR
28008: GO 29175
28010: LD_INT 14
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28230
28018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
28019: LD_ADDR_VAR 0 1
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: LD_INT 4
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: LD_INT 6
28041: PUSH
28042: LD_INT 7
28044: PUSH
28045: LD_INT 8
28047: PUSH
28048: LD_INT 9
28050: PUSH
28051: LD_INT 10
28053: PUSH
28054: LD_INT 11
28056: PUSH
28057: LD_INT 12
28059: PUSH
28060: LD_INT 13
28062: PUSH
28063: LD_INT 14
28065: PUSH
28066: LD_INT 15
28068: PUSH
28069: LD_INT 16
28071: PUSH
28072: LD_INT 17
28074: PUSH
28075: LD_INT 18
28077: PUSH
28078: LD_INT 19
28080: PUSH
28081: LD_INT 20
28083: PUSH
28084: LD_INT 21
28086: PUSH
28087: LD_INT 22
28089: PUSH
28090: LD_INT 23
28092: PUSH
28093: LD_INT 24
28095: PUSH
28096: LD_INT 25
28098: PUSH
28099: LD_INT 26
28101: PUSH
28102: LD_INT 27
28104: PUSH
28105: LD_INT 28
28107: PUSH
28108: LD_INT 29
28110: PUSH
28111: LD_INT 30
28113: PUSH
28114: LD_INT 31
28116: PUSH
28117: LD_INT 32
28119: PUSH
28120: LD_INT 33
28122: PUSH
28123: LD_INT 34
28125: PUSH
28126: LD_INT 36
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 101
28168: PUSH
28169: LD_INT 102
28171: PUSH
28172: LD_INT 103
28174: PUSH
28175: LD_INT 104
28177: PUSH
28178: LD_INT 105
28180: PUSH
28181: LD_INT 106
28183: PUSH
28184: LD_INT 107
28186: PUSH
28187: LD_INT 108
28189: PUSH
28190: LD_INT 109
28192: PUSH
28193: LD_INT 110
28195: PUSH
28196: LD_INT 111
28198: PUSH
28199: LD_INT 112
28201: PUSH
28202: LD_INT 113
28204: PUSH
28205: LD_INT 114
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: ST_TO_ADDR
28228: GO 29175
28230: LD_INT 15
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28450
28238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
28239: LD_ADDR_VAR 0 1
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: LD_INT 4
28255: PUSH
28256: LD_INT 5
28258: PUSH
28259: LD_INT 6
28261: PUSH
28262: LD_INT 7
28264: PUSH
28265: LD_INT 8
28267: PUSH
28268: LD_INT 9
28270: PUSH
28271: LD_INT 10
28273: PUSH
28274: LD_INT 11
28276: PUSH
28277: LD_INT 12
28279: PUSH
28280: LD_INT 13
28282: PUSH
28283: LD_INT 14
28285: PUSH
28286: LD_INT 15
28288: PUSH
28289: LD_INT 16
28291: PUSH
28292: LD_INT 17
28294: PUSH
28295: LD_INT 18
28297: PUSH
28298: LD_INT 19
28300: PUSH
28301: LD_INT 20
28303: PUSH
28304: LD_INT 21
28306: PUSH
28307: LD_INT 22
28309: PUSH
28310: LD_INT 23
28312: PUSH
28313: LD_INT 24
28315: PUSH
28316: LD_INT 25
28318: PUSH
28319: LD_INT 26
28321: PUSH
28322: LD_INT 27
28324: PUSH
28325: LD_INT 28
28327: PUSH
28328: LD_INT 29
28330: PUSH
28331: LD_INT 30
28333: PUSH
28334: LD_INT 31
28336: PUSH
28337: LD_INT 32
28339: PUSH
28340: LD_INT 33
28342: PUSH
28343: LD_INT 34
28345: PUSH
28346: LD_INT 36
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 101
28388: PUSH
28389: LD_INT 102
28391: PUSH
28392: LD_INT 103
28394: PUSH
28395: LD_INT 104
28397: PUSH
28398: LD_INT 105
28400: PUSH
28401: LD_INT 106
28403: PUSH
28404: LD_INT 107
28406: PUSH
28407: LD_INT 108
28409: PUSH
28410: LD_INT 109
28412: PUSH
28413: LD_INT 110
28415: PUSH
28416: LD_INT 111
28418: PUSH
28419: LD_INT 112
28421: PUSH
28422: LD_INT 113
28424: PUSH
28425: LD_INT 114
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: ST_TO_ADDR
28448: GO 29175
28450: LD_INT 16
28452: DOUBLE
28453: EQUAL
28454: IFTRUE 28458
28456: GO 28582
28458: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
28459: LD_ADDR_VAR 0 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: LD_INT 4
28469: PUSH
28470: LD_INT 5
28472: PUSH
28473: LD_INT 7
28475: PUSH
28476: LD_INT 11
28478: PUSH
28479: LD_INT 12
28481: PUSH
28482: LD_INT 15
28484: PUSH
28485: LD_INT 16
28487: PUSH
28488: LD_INT 20
28490: PUSH
28491: LD_INT 21
28493: PUSH
28494: LD_INT 22
28496: PUSH
28497: LD_INT 23
28499: PUSH
28500: LD_INT 25
28502: PUSH
28503: LD_INT 26
28505: PUSH
28506: LD_INT 30
28508: PUSH
28509: LD_INT 31
28511: PUSH
28512: LD_INT 32
28514: PUSH
28515: LD_INT 33
28517: PUSH
28518: LD_INT 34
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 101
28544: PUSH
28545: LD_INT 102
28547: PUSH
28548: LD_INT 103
28550: PUSH
28551: LD_INT 106
28553: PUSH
28554: LD_INT 108
28556: PUSH
28557: LD_INT 112
28559: PUSH
28560: LD_INT 113
28562: PUSH
28563: LD_INT 114
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: ST_TO_ADDR
28580: GO 29175
28582: LD_INT 17
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28802
28590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: LD_INT 3
28604: PUSH
28605: LD_INT 4
28607: PUSH
28608: LD_INT 5
28610: PUSH
28611: LD_INT 6
28613: PUSH
28614: LD_INT 7
28616: PUSH
28617: LD_INT 8
28619: PUSH
28620: LD_INT 9
28622: PUSH
28623: LD_INT 10
28625: PUSH
28626: LD_INT 11
28628: PUSH
28629: LD_INT 12
28631: PUSH
28632: LD_INT 13
28634: PUSH
28635: LD_INT 14
28637: PUSH
28638: LD_INT 15
28640: PUSH
28641: LD_INT 16
28643: PUSH
28644: LD_INT 17
28646: PUSH
28647: LD_INT 18
28649: PUSH
28650: LD_INT 19
28652: PUSH
28653: LD_INT 20
28655: PUSH
28656: LD_INT 21
28658: PUSH
28659: LD_INT 22
28661: PUSH
28662: LD_INT 23
28664: PUSH
28665: LD_INT 24
28667: PUSH
28668: LD_INT 25
28670: PUSH
28671: LD_INT 26
28673: PUSH
28674: LD_INT 27
28676: PUSH
28677: LD_INT 28
28679: PUSH
28680: LD_INT 29
28682: PUSH
28683: LD_INT 30
28685: PUSH
28686: LD_INT 31
28688: PUSH
28689: LD_INT 32
28691: PUSH
28692: LD_INT 33
28694: PUSH
28695: LD_INT 34
28697: PUSH
28698: LD_INT 36
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 101
28740: PUSH
28741: LD_INT 102
28743: PUSH
28744: LD_INT 103
28746: PUSH
28747: LD_INT 104
28749: PUSH
28750: LD_INT 105
28752: PUSH
28753: LD_INT 106
28755: PUSH
28756: LD_INT 107
28758: PUSH
28759: LD_INT 108
28761: PUSH
28762: LD_INT 109
28764: PUSH
28765: LD_INT 110
28767: PUSH
28768: LD_INT 111
28770: PUSH
28771: LD_INT 112
28773: PUSH
28774: LD_INT 113
28776: PUSH
28777: LD_INT 114
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: ST_TO_ADDR
28800: GO 29175
28802: LD_INT 18
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28946
28810: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
28811: LD_ADDR_VAR 0 1
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 4
28821: PUSH
28822: LD_INT 5
28824: PUSH
28825: LD_INT 7
28827: PUSH
28828: LD_INT 11
28830: PUSH
28831: LD_INT 12
28833: PUSH
28834: LD_INT 15
28836: PUSH
28837: LD_INT 16
28839: PUSH
28840: LD_INT 20
28842: PUSH
28843: LD_INT 21
28845: PUSH
28846: LD_INT 22
28848: PUSH
28849: LD_INT 23
28851: PUSH
28852: LD_INT 25
28854: PUSH
28855: LD_INT 26
28857: PUSH
28858: LD_INT 30
28860: PUSH
28861: LD_INT 31
28863: PUSH
28864: LD_INT 32
28866: PUSH
28867: LD_INT 33
28869: PUSH
28870: LD_INT 34
28872: PUSH
28873: LD_INT 35
28875: PUSH
28876: LD_INT 36
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 101
28904: PUSH
28905: LD_INT 102
28907: PUSH
28908: LD_INT 103
28910: PUSH
28911: LD_INT 106
28913: PUSH
28914: LD_INT 108
28916: PUSH
28917: LD_INT 112
28919: PUSH
28920: LD_INT 113
28922: PUSH
28923: LD_INT 114
28925: PUSH
28926: LD_INT 115
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: ST_TO_ADDR
28944: GO 29175
28946: LD_INT 19
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 29174
28954: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
28955: LD_ADDR_VAR 0 1
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: LD_INT 4
28971: PUSH
28972: LD_INT 5
28974: PUSH
28975: LD_INT 6
28977: PUSH
28978: LD_INT 7
28980: PUSH
28981: LD_INT 8
28983: PUSH
28984: LD_INT 9
28986: PUSH
28987: LD_INT 10
28989: PUSH
28990: LD_INT 11
28992: PUSH
28993: LD_INT 12
28995: PUSH
28996: LD_INT 13
28998: PUSH
28999: LD_INT 14
29001: PUSH
29002: LD_INT 15
29004: PUSH
29005: LD_INT 16
29007: PUSH
29008: LD_INT 17
29010: PUSH
29011: LD_INT 18
29013: PUSH
29014: LD_INT 19
29016: PUSH
29017: LD_INT 20
29019: PUSH
29020: LD_INT 21
29022: PUSH
29023: LD_INT 22
29025: PUSH
29026: LD_INT 23
29028: PUSH
29029: LD_INT 24
29031: PUSH
29032: LD_INT 25
29034: PUSH
29035: LD_INT 26
29037: PUSH
29038: LD_INT 27
29040: PUSH
29041: LD_INT 28
29043: PUSH
29044: LD_INT 29
29046: PUSH
29047: LD_INT 30
29049: PUSH
29050: LD_INT 31
29052: PUSH
29053: LD_INT 32
29055: PUSH
29056: LD_INT 33
29058: PUSH
29059: LD_INT 34
29061: PUSH
29062: LD_INT 35
29064: PUSH
29065: LD_INT 36
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 101
29108: PUSH
29109: LD_INT 102
29111: PUSH
29112: LD_INT 103
29114: PUSH
29115: LD_INT 104
29117: PUSH
29118: LD_INT 105
29120: PUSH
29121: LD_INT 106
29123: PUSH
29124: LD_INT 107
29126: PUSH
29127: LD_INT 108
29129: PUSH
29130: LD_INT 109
29132: PUSH
29133: LD_INT 110
29135: PUSH
29136: LD_INT 111
29138: PUSH
29139: LD_INT 112
29141: PUSH
29142: LD_INT 113
29144: PUSH
29145: LD_INT 114
29147: PUSH
29148: LD_INT 115
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: ST_TO_ADDR
29172: GO 29175
29174: POP
// end else
29175: GO 29394
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
29177: LD_ADDR_VAR 0 1
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: LD_INT 4
29193: PUSH
29194: LD_INT 5
29196: PUSH
29197: LD_INT 6
29199: PUSH
29200: LD_INT 7
29202: PUSH
29203: LD_INT 8
29205: PUSH
29206: LD_INT 9
29208: PUSH
29209: LD_INT 10
29211: PUSH
29212: LD_INT 11
29214: PUSH
29215: LD_INT 12
29217: PUSH
29218: LD_INT 13
29220: PUSH
29221: LD_INT 14
29223: PUSH
29224: LD_INT 15
29226: PUSH
29227: LD_INT 16
29229: PUSH
29230: LD_INT 17
29232: PUSH
29233: LD_INT 18
29235: PUSH
29236: LD_INT 19
29238: PUSH
29239: LD_INT 20
29241: PUSH
29242: LD_INT 21
29244: PUSH
29245: LD_INT 22
29247: PUSH
29248: LD_INT 23
29250: PUSH
29251: LD_INT 24
29253: PUSH
29254: LD_INT 25
29256: PUSH
29257: LD_INT 26
29259: PUSH
29260: LD_INT 27
29262: PUSH
29263: LD_INT 28
29265: PUSH
29266: LD_INT 29
29268: PUSH
29269: LD_INT 30
29271: PUSH
29272: LD_INT 31
29274: PUSH
29275: LD_INT 32
29277: PUSH
29278: LD_INT 33
29280: PUSH
29281: LD_INT 34
29283: PUSH
29284: LD_INT 35
29286: PUSH
29287: LD_INT 36
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 101
29330: PUSH
29331: LD_INT 102
29333: PUSH
29334: LD_INT 103
29336: PUSH
29337: LD_INT 104
29339: PUSH
29340: LD_INT 105
29342: PUSH
29343: LD_INT 106
29345: PUSH
29346: LD_INT 107
29348: PUSH
29349: LD_INT 108
29351: PUSH
29352: LD_INT 109
29354: PUSH
29355: LD_INT 110
29357: PUSH
29358: LD_INT 111
29360: PUSH
29361: LD_INT 112
29363: PUSH
29364: LD_INT 113
29366: PUSH
29367: LD_INT 114
29369: PUSH
29370: LD_INT 115
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// if result then
29394: LD_VAR 0 1
29398: IFFALSE 29687
// begin normal :=  ;
29400: LD_ADDR_VAR 0 3
29404: PUSH
29405: LD_STRING 
29407: ST_TO_ADDR
// hardcore :=  ;
29408: LD_ADDR_VAR 0 4
29412: PUSH
29413: LD_STRING 
29415: ST_TO_ADDR
// for i = 1 to normalCounter do
29416: LD_ADDR_VAR 0 5
29420: PUSH
29421: DOUBLE
29422: LD_INT 1
29424: DEC
29425: ST_TO_ADDR
29426: LD_EXP 70
29430: PUSH
29431: FOR_TO
29432: IFFALSE 29533
// begin tmp := 0 ;
29434: LD_ADDR_VAR 0 2
29438: PUSH
29439: LD_STRING 0
29441: ST_TO_ADDR
// if result [ 1 ] then
29442: LD_VAR 0 1
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: IFFALSE 29515
// if result [ 1 ] [ 1 ] = i then
29452: LD_VAR 0 1
29456: PUSH
29457: LD_INT 1
29459: ARRAY
29460: PUSH
29461: LD_INT 1
29463: ARRAY
29464: PUSH
29465: LD_VAR 0 5
29469: EQUAL
29470: IFFALSE 29515
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
29472: LD_ADDR_VAR 0 1
29476: PUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_INT 1
29484: PPUSH
29485: LD_VAR 0 1
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PPUSH
29494: LD_INT 1
29496: PPUSH
29497: CALL_OW 3
29501: PPUSH
29502: CALL_OW 1
29506: ST_TO_ADDR
// tmp := 1 ;
29507: LD_ADDR_VAR 0 2
29511: PUSH
29512: LD_STRING 1
29514: ST_TO_ADDR
// end ; normal := normal & tmp ;
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: LD_VAR 0 3
29524: PUSH
29525: LD_VAR 0 2
29529: STR
29530: ST_TO_ADDR
// end ;
29531: GO 29431
29533: POP
29534: POP
// for i = 1 to hardcoreCounter do
29535: LD_ADDR_VAR 0 5
29539: PUSH
29540: DOUBLE
29541: LD_INT 1
29543: DEC
29544: ST_TO_ADDR
29545: LD_EXP 71
29549: PUSH
29550: FOR_TO
29551: IFFALSE 29656
// begin tmp := 0 ;
29553: LD_ADDR_VAR 0 2
29557: PUSH
29558: LD_STRING 0
29560: ST_TO_ADDR
// if result [ 2 ] then
29561: LD_VAR 0 1
29565: PUSH
29566: LD_INT 2
29568: ARRAY
29569: IFFALSE 29638
// if result [ 2 ] [ 1 ] = 100 + i then
29571: LD_VAR 0 1
29575: PUSH
29576: LD_INT 2
29578: ARRAY
29579: PUSH
29580: LD_INT 1
29582: ARRAY
29583: PUSH
29584: LD_INT 100
29586: PUSH
29587: LD_VAR 0 5
29591: PLUS
29592: EQUAL
29593: IFFALSE 29638
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: LD_INT 2
29607: PPUSH
29608: LD_VAR 0 1
29612: PUSH
29613: LD_INT 2
29615: ARRAY
29616: PPUSH
29617: LD_INT 1
29619: PPUSH
29620: CALL_OW 3
29624: PPUSH
29625: CALL_OW 1
29629: ST_TO_ADDR
// tmp := 1 ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_STRING 1
29637: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
29638: LD_ADDR_VAR 0 4
29642: PUSH
29643: LD_VAR 0 4
29647: PUSH
29648: LD_VAR 0 2
29652: STR
29653: ST_TO_ADDR
// end ;
29654: GO 29550
29656: POP
29657: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
29658: LD_STRING getStreamItemsFromMission("
29660: PUSH
29661: LD_VAR 0 3
29665: STR
29666: PUSH
29667: LD_STRING ","
29669: STR
29670: PUSH
29671: LD_VAR 0 4
29675: STR
29676: PUSH
29677: LD_STRING ")
29679: STR
29680: PPUSH
29681: CALL_OW 559
// end else
29685: GO 29694
// ToLua ( getStreamItemsFromMission("","") ) ;
29687: LD_STRING getStreamItemsFromMission("","")
29689: PPUSH
29690: CALL_OW 559
// end ;
29694: LD_VAR 0 1
29698: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
29699: LD_EXP 69
29703: PUSH
29704: LD_EXP 74
29708: AND
29709: IFFALSE 29833
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
// begin enable ;
29718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: LD_INT 22
29726: PUSH
29727: LD_OWVAR 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 34
29741: PUSH
29742: LD_INT 7
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 34
29751: PUSH
29752: LD_INT 45
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 34
29761: PUSH
29762: LD_INT 28
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 34
29771: PUSH
29772: LD_INT 47
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PPUSH
29790: CALL_OW 69
29794: ST_TO_ADDR
// if not tmp then
29795: LD_VAR 0 2
29799: NOT
29800: IFFALSE 29804
// exit ;
29802: GO 29833
// for i in tmp do
29804: LD_ADDR_VAR 0 1
29808: PUSH
29809: LD_VAR 0 2
29813: PUSH
29814: FOR_IN
29815: IFFALSE 29831
// begin SetLives ( i , 0 ) ;
29817: LD_VAR 0 1
29821: PPUSH
29822: LD_INT 0
29824: PPUSH
29825: CALL_OW 234
// end ;
29829: GO 29814
29831: POP
29832: POP
// end ;
29833: PPOPN 2
29835: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
29836: LD_EXP 69
29840: PUSH
29841: LD_EXP 75
29845: AND
29846: IFFALSE 29930
29848: GO 29850
29850: DISABLE
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
// begin enable ;
29855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
29856: LD_ADDR_VAR 0 2
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_OWVAR 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 32
29875: PUSH
29876: LD_INT 3
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 69
29891: ST_TO_ADDR
// if not tmp then
29892: LD_VAR 0 2
29896: NOT
29897: IFFALSE 29901
// exit ;
29899: GO 29930
// for i in tmp do
29901: LD_ADDR_VAR 0 1
29905: PUSH
29906: LD_VAR 0 2
29910: PUSH
29911: FOR_IN
29912: IFFALSE 29928
// begin SetLives ( i , 0 ) ;
29914: LD_VAR 0 1
29918: PPUSH
29919: LD_INT 0
29921: PPUSH
29922: CALL_OW 234
// end ;
29926: GO 29911
29928: POP
29929: POP
// end ;
29930: PPOPN 2
29932: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
29933: LD_EXP 69
29937: PUSH
29938: LD_EXP 72
29942: AND
29943: IFFALSE 30036
29945: GO 29947
29947: DISABLE
29948: LD_INT 0
29950: PPUSH
// begin enable ;
29951: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
29952: LD_ADDR_VAR 0 1
29956: PUSH
29957: LD_INT 22
29959: PUSH
29960: LD_OWVAR 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 25
29974: PUSH
29975: LD_INT 5
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 25
29984: PUSH
29985: LD_INT 9
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 25
29994: PUSH
29995: LD_INT 8
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 69
30016: PUSH
30017: FOR_IN
30018: IFFALSE 30034
// begin SetClass ( i , 1 ) ;
30020: LD_VAR 0 1
30024: PPUSH
30025: LD_INT 1
30027: PPUSH
30028: CALL_OW 336
// end ;
30032: GO 30017
30034: POP
30035: POP
// end ;
30036: PPOPN 1
30038: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30039: LD_EXP 69
30043: PUSH
30044: LD_EXP 73
30048: AND
30049: PUSH
30050: LD_OWVAR 65
30054: PUSH
30055: LD_INT 7
30057: LESS
30058: AND
30059: IFFALSE 30073
30061: GO 30063
30063: DISABLE
// begin enable ;
30064: ENABLE
// game_speed := 7 ;
30065: LD_ADDR_OWVAR 65
30069: PUSH
30070: LD_INT 7
30072: ST_TO_ADDR
// end ;
30073: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30074: LD_EXP 69
30078: PUSH
30079: LD_EXP 76
30083: AND
30084: IFFALSE 30286
30086: GO 30088
30088: DISABLE
30089: LD_INT 0
30091: PPUSH
30092: PPUSH
30093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30094: LD_ADDR_VAR 0 3
30098: PUSH
30099: LD_INT 81
30101: PUSH
30102: LD_OWVAR 2
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 69
30129: ST_TO_ADDR
// if not tmp then
30130: LD_VAR 0 3
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 30286
// if tmp > 5 then
30139: LD_VAR 0 3
30143: PUSH
30144: LD_INT 5
30146: GREATER
30147: IFFALSE 30159
// k := 5 else
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: LD_INT 5
30156: ST_TO_ADDR
30157: GO 30169
// k := tmp ;
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: LD_VAR 0 3
30168: ST_TO_ADDR
// for i := 1 to k do
30169: LD_ADDR_VAR 0 1
30173: PUSH
30174: DOUBLE
30175: LD_INT 1
30177: DEC
30178: ST_TO_ADDR
30179: LD_VAR 0 2
30183: PUSH
30184: FOR_TO
30185: IFFALSE 30284
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30187: LD_VAR 0 3
30191: PUSH
30192: LD_VAR 0 1
30196: ARRAY
30197: PPUSH
30198: LD_VAR 0 1
30202: PUSH
30203: LD_INT 4
30205: MOD
30206: PUSH
30207: LD_INT 1
30209: PLUS
30210: PPUSH
30211: CALL_OW 259
30215: PUSH
30216: LD_INT 10
30218: LESS
30219: IFFALSE 30282
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30221: LD_VAR 0 3
30225: PUSH
30226: LD_VAR 0 1
30230: ARRAY
30231: PPUSH
30232: LD_VAR 0 1
30236: PUSH
30237: LD_INT 4
30239: MOD
30240: PUSH
30241: LD_INT 1
30243: PLUS
30244: PPUSH
30245: LD_VAR 0 3
30249: PUSH
30250: LD_VAR 0 1
30254: ARRAY
30255: PPUSH
30256: LD_VAR 0 1
30260: PUSH
30261: LD_INT 4
30263: MOD
30264: PUSH
30265: LD_INT 1
30267: PLUS
30268: PPUSH
30269: CALL_OW 259
30273: PUSH
30274: LD_INT 1
30276: PLUS
30277: PPUSH
30278: CALL_OW 237
30282: GO 30184
30284: POP
30285: POP
// end ;
30286: PPOPN 3
30288: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
30289: LD_EXP 69
30293: PUSH
30294: LD_EXP 77
30298: AND
30299: IFFALSE 30319
30301: GO 30303
30303: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
30304: LD_INT 4
30306: PPUSH
30307: LD_OWVAR 2
30311: PPUSH
30312: LD_INT 0
30314: PPUSH
30315: CALL_OW 324
30319: END
// every 0 0$1 trigger StreamModeActive and sShovel do
30320: LD_EXP 69
30324: PUSH
30325: LD_EXP 106
30329: AND
30330: IFFALSE 30350
30332: GO 30334
30334: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
30335: LD_INT 19
30337: PPUSH
30338: LD_OWVAR 2
30342: PPUSH
30343: LD_INT 0
30345: PPUSH
30346: CALL_OW 324
30350: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
30351: LD_EXP 69
30355: PUSH
30356: LD_EXP 78
30360: AND
30361: IFFALSE 30463
30363: GO 30365
30365: DISABLE
30366: LD_INT 0
30368: PPUSH
30369: PPUSH
// begin enable ;
30370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
30371: LD_ADDR_VAR 0 2
30375: PUSH
30376: LD_INT 22
30378: PUSH
30379: LD_OWVAR 2
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 34
30393: PUSH
30394: LD_INT 11
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 34
30403: PUSH
30404: LD_INT 30
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// if not tmp then
30425: LD_VAR 0 2
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 30463
// for i in tmp do
30434: LD_ADDR_VAR 0 1
30438: PUSH
30439: LD_VAR 0 2
30443: PUSH
30444: FOR_IN
30445: IFFALSE 30461
// begin SetLives ( i , 0 ) ;
30447: LD_VAR 0 1
30451: PPUSH
30452: LD_INT 0
30454: PPUSH
30455: CALL_OW 234
// end ;
30459: GO 30444
30461: POP
30462: POP
// end ;
30463: PPOPN 2
30465: END
// every 0 0$1 trigger StreamModeActive and sBunker do
30466: LD_EXP 69
30470: PUSH
30471: LD_EXP 79
30475: AND
30476: IFFALSE 30496
30478: GO 30480
30480: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
30481: LD_INT 32
30483: PPUSH
30484: LD_OWVAR 2
30488: PPUSH
30489: LD_INT 0
30491: PPUSH
30492: CALL_OW 324
30496: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
30497: LD_EXP 69
30501: PUSH
30502: LD_EXP 80
30506: AND
30507: IFFALSE 30688
30509: GO 30511
30511: DISABLE
30512: LD_INT 0
30514: PPUSH
30515: PPUSH
30516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
30517: LD_ADDR_VAR 0 2
30521: PUSH
30522: LD_INT 22
30524: PUSH
30525: LD_OWVAR 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 33
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PPUSH
30548: CALL_OW 69
30552: ST_TO_ADDR
// if not tmp then
30553: LD_VAR 0 2
30557: NOT
30558: IFFALSE 30562
// exit ;
30560: GO 30688
// side := 0 ;
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: LD_INT 0
30569: ST_TO_ADDR
// for i := 1 to 8 do
30570: LD_ADDR_VAR 0 1
30574: PUSH
30575: DOUBLE
30576: LD_INT 1
30578: DEC
30579: ST_TO_ADDR
30580: LD_INT 8
30582: PUSH
30583: FOR_TO
30584: IFFALSE 30632
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
30586: LD_OWVAR 2
30590: PUSH
30591: LD_VAR 0 1
30595: NONEQUAL
30596: PUSH
30597: LD_OWVAR 2
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL_OW 81
30611: PUSH
30612: LD_INT 2
30614: EQUAL
30615: AND
30616: IFFALSE 30630
// begin side := i ;
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_VAR 0 1
30627: ST_TO_ADDR
// break ;
30628: GO 30632
// end ;
30630: GO 30583
30632: POP
30633: POP
// if not side then
30634: LD_VAR 0 3
30638: NOT
30639: IFFALSE 30643
// exit ;
30641: GO 30688
// for i := 1 to tmp do
30643: LD_ADDR_VAR 0 1
30647: PUSH
30648: DOUBLE
30649: LD_INT 1
30651: DEC
30652: ST_TO_ADDR
30653: LD_VAR 0 2
30657: PUSH
30658: FOR_TO
30659: IFFALSE 30686
// if Prob ( 60 ) then
30661: LD_INT 60
30663: PPUSH
30664: CALL_OW 13
30668: IFFALSE 30684
// SetSide ( i , side ) ;
30670: LD_VAR 0 1
30674: PPUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: CALL_OW 235
30684: GO 30658
30686: POP
30687: POP
// end ;
30688: PPOPN 3
30690: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
30691: LD_EXP 69
30695: PUSH
30696: LD_EXP 82
30700: AND
30701: IFFALSE 30820
30703: GO 30705
30705: DISABLE
30706: LD_INT 0
30708: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
30709: LD_ADDR_VAR 0 1
30713: PUSH
30714: LD_INT 22
30716: PUSH
30717: LD_OWVAR 2
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 21
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 23
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: PUSH
30763: FOR_IN
30764: IFFALSE 30818
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 257
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 4
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: IN
30794: IFFALSE 30816
// SetClass ( un , rand ( 1 , 4 ) ) ;
30796: LD_VAR 0 1
30800: PPUSH
30801: LD_INT 1
30803: PPUSH
30804: LD_INT 4
30806: PPUSH
30807: CALL_OW 12
30811: PPUSH
30812: CALL_OW 336
30816: GO 30763
30818: POP
30819: POP
// end ;
30820: PPOPN 1
30822: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
30823: LD_EXP 69
30827: PUSH
30828: LD_EXP 81
30832: AND
30833: IFFALSE 30912
30835: GO 30837
30837: DISABLE
30838: LD_INT 0
30840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30841: LD_ADDR_VAR 0 1
30845: PUSH
30846: LD_INT 22
30848: PUSH
30849: LD_OWVAR 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 21
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: CALL_OW 69
30876: ST_TO_ADDR
// if not tmp then
30877: LD_VAR 0 1
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 30912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
30886: LD_VAR 0 1
30890: PUSH
30891: LD_INT 1
30893: PPUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: CALL_OW 12
30903: ARRAY
30904: PPUSH
30905: LD_INT 100
30907: PPUSH
30908: CALL_OW 234
// end ;
30912: PPOPN 1
30914: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
30915: LD_EXP 69
30919: PUSH
30920: LD_EXP 83
30924: AND
30925: IFFALSE 31023
30927: GO 30929
30929: DISABLE
30930: LD_INT 0
30932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30933: LD_ADDR_VAR 0 1
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_OWVAR 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PPUSH
30964: CALL_OW 69
30968: ST_TO_ADDR
// if not tmp then
30969: LD_VAR 0 1
30973: NOT
30974: IFFALSE 30978
// exit ;
30976: GO 31023
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30978: LD_VAR 0 1
30982: PUSH
30983: LD_INT 1
30985: PPUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 12
30995: ARRAY
30996: PPUSH
30997: LD_INT 1
30999: PPUSH
31000: LD_INT 4
31002: PPUSH
31003: CALL_OW 12
31007: PPUSH
31008: LD_INT 3000
31010: PPUSH
31011: LD_INT 9000
31013: PPUSH
31014: CALL_OW 12
31018: PPUSH
31019: CALL_OW 492
// end ;
31023: PPOPN 1
31025: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31026: LD_EXP 69
31030: PUSH
31031: LD_EXP 84
31035: AND
31036: IFFALSE 31056
31038: GO 31040
31040: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31041: LD_INT 1
31043: PPUSH
31044: LD_OWVAR 2
31048: PPUSH
31049: LD_INT 0
31051: PPUSH
31052: CALL_OW 324
31056: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31057: LD_EXP 69
31061: PUSH
31062: LD_EXP 85
31066: AND
31067: IFFALSE 31150
31069: GO 31071
31071: DISABLE
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 21
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: ST_TO_ADDR
// if not tmp then
31112: LD_VAR 0 2
31116: NOT
31117: IFFALSE 31121
// exit ;
31119: GO 31150
// for i in tmp do
31121: LD_ADDR_VAR 0 1
31125: PUSH
31126: LD_VAR 0 2
31130: PUSH
31131: FOR_IN
31132: IFFALSE 31148
// SetBLevel ( i , 10 ) ;
31134: LD_VAR 0 1
31138: PPUSH
31139: LD_INT 10
31141: PPUSH
31142: CALL_OW 241
31146: GO 31131
31148: POP
31149: POP
// end ;
31150: PPOPN 2
31152: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31153: LD_EXP 69
31157: PUSH
31158: LD_EXP 86
31162: AND
31163: IFFALSE 31274
31165: GO 31167
31167: DISABLE
31168: LD_INT 0
31170: PPUSH
31171: PPUSH
31172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 22
31180: PUSH
31181: LD_OWVAR 2
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 25
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PPUSH
31204: CALL_OW 69
31208: ST_TO_ADDR
// if not tmp then
31209: LD_VAR 0 3
31213: NOT
31214: IFFALSE 31218
// exit ;
31216: GO 31274
// un := tmp [ rand ( 1 , tmp ) ] ;
31218: LD_ADDR_VAR 0 2
31222: PUSH
31223: LD_VAR 0 3
31227: PUSH
31228: LD_INT 1
31230: PPUSH
31231: LD_VAR 0 3
31235: PPUSH
31236: CALL_OW 12
31240: ARRAY
31241: ST_TO_ADDR
// if Crawls ( un ) then
31242: LD_VAR 0 2
31246: PPUSH
31247: CALL_OW 318
31251: IFFALSE 31262
// ComWalk ( un ) ;
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31262: LD_VAR 0 2
31266: PPUSH
31267: LD_INT 5
31269: PPUSH
31270: CALL_OW 336
// end ;
31274: PPOPN 3
31276: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31277: LD_EXP 69
31281: PUSH
31282: LD_EXP 87
31286: AND
31287: PUSH
31288: LD_OWVAR 67
31292: PUSH
31293: LD_INT 3
31295: LESS
31296: AND
31297: IFFALSE 31316
31299: GO 31301
31301: DISABLE
// Difficulty := Difficulty + 1 ;
31302: LD_ADDR_OWVAR 67
31306: PUSH
31307: LD_OWVAR 67
31311: PUSH
31312: LD_INT 1
31314: PLUS
31315: ST_TO_ADDR
31316: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
31317: LD_EXP 69
31321: PUSH
31322: LD_EXP 88
31326: AND
31327: IFFALSE 31430
31329: GO 31331
31331: DISABLE
31332: LD_INT 0
31334: PPUSH
// begin for i := 1 to 5 do
31335: LD_ADDR_VAR 0 1
31339: PUSH
31340: DOUBLE
31341: LD_INT 1
31343: DEC
31344: ST_TO_ADDR
31345: LD_INT 5
31347: PUSH
31348: FOR_TO
31349: IFFALSE 31428
// begin uc_nation := nation_nature ;
31351: LD_ADDR_OWVAR 21
31355: PUSH
31356: LD_INT 0
31358: ST_TO_ADDR
// uc_side := 0 ;
31359: LD_ADDR_OWVAR 20
31363: PUSH
31364: LD_INT 0
31366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31367: LD_ADDR_OWVAR 29
31371: PUSH
31372: LD_INT 12
31374: PUSH
31375: LD_INT 12
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// hc_agressivity := 20 ;
31382: LD_ADDR_OWVAR 35
31386: PUSH
31387: LD_INT 20
31389: ST_TO_ADDR
// hc_class := class_tiger ;
31390: LD_ADDR_OWVAR 28
31394: PUSH
31395: LD_INT 14
31397: ST_TO_ADDR
// hc_gallery :=  ;
31398: LD_ADDR_OWVAR 33
31402: PUSH
31403: LD_STRING 
31405: ST_TO_ADDR
// hc_name :=  ;
31406: LD_ADDR_OWVAR 26
31410: PUSH
31411: LD_STRING 
31413: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
31414: CALL_OW 44
31418: PPUSH
31419: LD_INT 0
31421: PPUSH
31422: CALL_OW 51
// end ;
31426: GO 31348
31428: POP
31429: POP
// end ;
31430: PPOPN 1
31432: END
// every 0 0$1 trigger StreamModeActive and sBomb do
31433: LD_EXP 69
31437: PUSH
31438: LD_EXP 89
31442: AND
31443: IFFALSE 31452
31445: GO 31447
31447: DISABLE
// StreamSibBomb ;
31448: CALL 31453 0 0
31452: END
// export function StreamSibBomb ; var i , x , y ; begin
31453: LD_INT 0
31455: PPUSH
31456: PPUSH
31457: PPUSH
31458: PPUSH
// result := false ;
31459: LD_ADDR_VAR 0 1
31463: PUSH
31464: LD_INT 0
31466: ST_TO_ADDR
// for i := 1 to 16 do
31467: LD_ADDR_VAR 0 2
31471: PUSH
31472: DOUBLE
31473: LD_INT 1
31475: DEC
31476: ST_TO_ADDR
31477: LD_INT 16
31479: PUSH
31480: FOR_TO
31481: IFFALSE 31680
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_INT 10
31490: PUSH
31491: LD_INT 20
31493: PUSH
31494: LD_INT 30
31496: PUSH
31497: LD_INT 40
31499: PUSH
31500: LD_INT 50
31502: PUSH
31503: LD_INT 60
31505: PUSH
31506: LD_INT 70
31508: PUSH
31509: LD_INT 80
31511: PUSH
31512: LD_INT 90
31514: PUSH
31515: LD_INT 100
31517: PUSH
31518: LD_INT 110
31520: PUSH
31521: LD_INT 120
31523: PUSH
31524: LD_INT 130
31526: PUSH
31527: LD_INT 140
31529: PUSH
31530: LD_INT 150
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: PPUSH
31553: LD_INT 15
31555: PPUSH
31556: CALL_OW 12
31560: ARRAY
31561: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
31562: LD_ADDR_VAR 0 4
31566: PUSH
31567: LD_INT 10
31569: PUSH
31570: LD_INT 20
31572: PUSH
31573: LD_INT 30
31575: PUSH
31576: LD_INT 40
31578: PUSH
31579: LD_INT 50
31581: PUSH
31582: LD_INT 60
31584: PUSH
31585: LD_INT 70
31587: PUSH
31588: LD_INT 80
31590: PUSH
31591: LD_INT 90
31593: PUSH
31594: LD_INT 100
31596: PUSH
31597: LD_INT 110
31599: PUSH
31600: LD_INT 120
31602: PUSH
31603: LD_INT 130
31605: PUSH
31606: LD_INT 140
31608: PUSH
31609: LD_INT 150
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PPUSH
31632: LD_INT 15
31634: PPUSH
31635: CALL_OW 12
31639: ARRAY
31640: ST_TO_ADDR
// if ValidHex ( x , y ) then
31641: LD_VAR 0 3
31645: PPUSH
31646: LD_VAR 0 4
31650: PPUSH
31651: CALL_OW 488
31655: IFFALSE 31678
// begin result := [ x , y ] ;
31657: LD_ADDR_VAR 0 1
31661: PUSH
31662: LD_VAR 0 3
31666: PUSH
31667: LD_VAR 0 4
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: ST_TO_ADDR
// break ;
31676: GO 31680
// end ; end ;
31678: GO 31480
31680: POP
31681: POP
// if result then
31682: LD_VAR 0 1
31686: IFFALSE 31746
// begin ToLua ( playSibBomb() ) ;
31688: LD_STRING playSibBomb()
31690: PPUSH
31691: CALL_OW 559
// wait ( 0 0$14 ) ;
31695: LD_INT 490
31697: PPUSH
31698: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
31702: LD_VAR 0 1
31706: PUSH
31707: LD_INT 1
31709: ARRAY
31710: PPUSH
31711: LD_VAR 0 1
31715: PUSH
31716: LD_INT 2
31718: ARRAY
31719: PPUSH
31720: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
31724: LD_VAR 0 1
31728: PUSH
31729: LD_INT 1
31731: ARRAY
31732: PPUSH
31733: LD_VAR 0 1
31737: PUSH
31738: LD_INT 2
31740: ARRAY
31741: PPUSH
31742: CALL_OW 429
// end ; end ;
31746: LD_VAR 0 1
31750: RET
// every 0 0$1 trigger StreamModeActive and sReset do
31751: LD_EXP 69
31755: PUSH
31756: LD_EXP 91
31760: AND
31761: IFFALSE 31773
31763: GO 31765
31765: DISABLE
// YouLost (  ) ;
31766: LD_STRING 
31768: PPUSH
31769: CALL_OW 104
31773: END
// every 0 0$1 trigger StreamModeActive and sFog do
31774: LD_EXP 69
31778: PUSH
31779: LD_EXP 90
31783: AND
31784: IFFALSE 31798
31786: GO 31788
31788: DISABLE
// FogOff ( your_side ) ;
31789: LD_OWVAR 2
31793: PPUSH
31794: CALL_OW 344
31798: END
// every 0 0$1 trigger StreamModeActive and sSun do
31799: LD_EXP 69
31803: PUSH
31804: LD_EXP 92
31808: AND
31809: IFFALSE 31837
31811: GO 31813
31813: DISABLE
// begin solar_recharge_percent := 0 ;
31814: LD_ADDR_OWVAR 79
31818: PUSH
31819: LD_INT 0
31821: ST_TO_ADDR
// wait ( 5 5$00 ) ;
31822: LD_INT 10500
31824: PPUSH
31825: CALL_OW 67
// solar_recharge_percent := 100 ;
31829: LD_ADDR_OWVAR 79
31833: PUSH
31834: LD_INT 100
31836: ST_TO_ADDR
// end ;
31837: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
31838: LD_EXP 69
31842: PUSH
31843: LD_EXP 93
31847: AND
31848: IFFALSE 32087
31850: GO 31852
31852: DISABLE
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
31857: PPUSH
// begin tmp := [ ] ;
31858: LD_ADDR_VAR 0 3
31862: PUSH
31863: EMPTY
31864: ST_TO_ADDR
// for i := 1 to 6 do
31865: LD_ADDR_VAR 0 1
31869: PUSH
31870: DOUBLE
31871: LD_INT 1
31873: DEC
31874: ST_TO_ADDR
31875: LD_INT 6
31877: PUSH
31878: FOR_TO
31879: IFFALSE 31984
// begin uc_nation := nation_nature ;
31881: LD_ADDR_OWVAR 21
31885: PUSH
31886: LD_INT 0
31888: ST_TO_ADDR
// uc_side := 0 ;
31889: LD_ADDR_OWVAR 20
31893: PUSH
31894: LD_INT 0
31896: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
31897: LD_ADDR_OWVAR 29
31901: PUSH
31902: LD_INT 12
31904: PUSH
31905: LD_INT 12
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: ST_TO_ADDR
// hc_agressivity := 20 ;
31912: LD_ADDR_OWVAR 35
31916: PUSH
31917: LD_INT 20
31919: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
31920: LD_ADDR_OWVAR 28
31924: PUSH
31925: LD_INT 17
31927: ST_TO_ADDR
// hc_gallery :=  ;
31928: LD_ADDR_OWVAR 33
31932: PUSH
31933: LD_STRING 
31935: ST_TO_ADDR
// hc_name :=  ;
31936: LD_ADDR_OWVAR 26
31940: PUSH
31941: LD_STRING 
31943: ST_TO_ADDR
// un := CreateHuman ;
31944: LD_ADDR_VAR 0 2
31948: PUSH
31949: CALL_OW 44
31953: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
31954: LD_VAR 0 2
31958: PPUSH
31959: LD_INT 1
31961: PPUSH
31962: CALL_OW 51
// tmp := tmp ^ un ;
31966: LD_ADDR_VAR 0 3
31970: PUSH
31971: LD_VAR 0 3
31975: PUSH
31976: LD_VAR 0 2
31980: ADD
31981: ST_TO_ADDR
// end ;
31982: GO 31878
31984: POP
31985: POP
// repeat wait ( 0 0$1 ) ;
31986: LD_INT 35
31988: PPUSH
31989: CALL_OW 67
// for un in tmp do
31993: LD_ADDR_VAR 0 2
31997: PUSH
31998: LD_VAR 0 3
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32078
// begin if IsDead ( un ) then
32006: LD_VAR 0 2
32010: PPUSH
32011: CALL_OW 301
32015: IFFALSE 32035
// begin tmp := tmp diff un ;
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: LD_VAR 0 2
32031: DIFF
32032: ST_TO_ADDR
// continue ;
32033: GO 32003
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32035: LD_VAR 0 2
32039: PPUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 22
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PPUSH
32057: CALL_OW 69
32061: PPUSH
32062: LD_VAR 0 2
32066: PPUSH
32067: CALL_OW 74
32071: PPUSH
32072: CALL_OW 115
// end ;
32076: GO 32003
32078: POP
32079: POP
// until not tmp ;
32080: LD_VAR 0 3
32084: NOT
32085: IFFALSE 31986
// end ;
32087: PPOPN 3
32089: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32090: LD_EXP 69
32094: PUSH
32095: LD_EXP 94
32099: AND
32100: IFFALSE 32154
32102: GO 32104
32104: DISABLE
// begin ToLua ( displayTroll(); ) ;
32105: LD_STRING displayTroll();
32107: PPUSH
32108: CALL_OW 559
// wait ( 3 3$00 ) ;
32112: LD_INT 6300
32114: PPUSH
32115: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32119: LD_STRING hideTroll();
32121: PPUSH
32122: CALL_OW 559
// wait ( 1 1$00 ) ;
32126: LD_INT 2100
32128: PPUSH
32129: CALL_OW 67
// ToLua ( displayTroll(); ) ;
32133: LD_STRING displayTroll();
32135: PPUSH
32136: CALL_OW 559
// wait ( 1 1$00 ) ;
32140: LD_INT 2100
32142: PPUSH
32143: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32147: LD_STRING hideTroll();
32149: PPUSH
32150: CALL_OW 559
// end ;
32154: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32155: LD_EXP 69
32159: PUSH
32160: LD_EXP 95
32164: AND
32165: IFFALSE 32228
32167: GO 32169
32169: DISABLE
32170: LD_INT 0
32172: PPUSH
// begin p := 0 ;
32173: LD_ADDR_VAR 0 1
32177: PUSH
32178: LD_INT 0
32180: ST_TO_ADDR
// repeat game_speed := 1 ;
32181: LD_ADDR_OWVAR 65
32185: PUSH
32186: LD_INT 1
32188: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32189: LD_INT 35
32191: PPUSH
32192: CALL_OW 67
// p := p + 1 ;
32196: LD_ADDR_VAR 0 1
32200: PUSH
32201: LD_VAR 0 1
32205: PUSH
32206: LD_INT 1
32208: PLUS
32209: ST_TO_ADDR
// until p >= 60 ;
32210: LD_VAR 0 1
32214: PUSH
32215: LD_INT 60
32217: GREATEREQUAL
32218: IFFALSE 32181
// game_speed := 4 ;
32220: LD_ADDR_OWVAR 65
32224: PUSH
32225: LD_INT 4
32227: ST_TO_ADDR
// end ;
32228: PPOPN 1
32230: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32231: LD_EXP 69
32235: PUSH
32236: LD_EXP 96
32240: AND
32241: IFFALSE 32387
32243: GO 32245
32245: DISABLE
32246: LD_INT 0
32248: PPUSH
32249: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32250: LD_ADDR_VAR 0 1
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_OWVAR 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 30
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 30
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PPUSH
32299: CALL_OW 69
32303: ST_TO_ADDR
// if not depot then
32304: LD_VAR 0 1
32308: NOT
32309: IFFALSE 32313
// exit ;
32311: GO 32387
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32313: LD_ADDR_VAR 0 2
32317: PUSH
32318: LD_VAR 0 1
32322: PUSH
32323: LD_INT 1
32325: PPUSH
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 12
32335: ARRAY
32336: PPUSH
32337: CALL_OW 274
32341: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32342: LD_VAR 0 2
32346: PPUSH
32347: LD_INT 1
32349: PPUSH
32350: LD_INT 0
32352: PPUSH
32353: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32357: LD_VAR 0 2
32361: PPUSH
32362: LD_INT 2
32364: PPUSH
32365: LD_INT 0
32367: PPUSH
32368: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32372: LD_VAR 0 2
32376: PPUSH
32377: LD_INT 3
32379: PPUSH
32380: LD_INT 0
32382: PPUSH
32383: CALL_OW 277
// end ;
32387: PPOPN 2
32389: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32390: LD_EXP 69
32394: PUSH
32395: LD_EXP 97
32399: AND
32400: IFFALSE 32497
32402: GO 32404
32404: DISABLE
32405: LD_INT 0
32407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32408: LD_ADDR_VAR 0 1
32412: PUSH
32413: LD_INT 22
32415: PUSH
32416: LD_OWVAR 2
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 21
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: LD_INT 23
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: ST_TO_ADDR
// if not tmp then
32462: LD_VAR 0 1
32466: NOT
32467: IFFALSE 32471
// exit ;
32469: GO 32497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
32471: LD_VAR 0 1
32475: PUSH
32476: LD_INT 1
32478: PPUSH
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 12
32488: ARRAY
32489: PPUSH
32490: LD_INT 200
32492: PPUSH
32493: CALL_OW 234
// end ;
32497: PPOPN 1
32499: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
32500: LD_EXP 69
32504: PUSH
32505: LD_EXP 98
32509: AND
32510: IFFALSE 32589
32512: GO 32514
32514: DISABLE
32515: LD_INT 0
32517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
32518: LD_ADDR_VAR 0 1
32522: PUSH
32523: LD_INT 22
32525: PUSH
32526: LD_OWVAR 2
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 21
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PPUSH
32549: CALL_OW 69
32553: ST_TO_ADDR
// if not tmp then
32554: LD_VAR 0 1
32558: NOT
32559: IFFALSE 32563
// exit ;
32561: GO 32589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
32563: LD_VAR 0 1
32567: PUSH
32568: LD_INT 1
32570: PPUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 12
32580: ARRAY
32581: PPUSH
32582: LD_INT 60
32584: PPUSH
32585: CALL_OW 234
// end ;
32589: PPOPN 1
32591: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
32592: LD_EXP 69
32596: PUSH
32597: LD_EXP 99
32601: AND
32602: IFFALSE 32701
32604: GO 32606
32606: DISABLE
32607: LD_INT 0
32609: PPUSH
32610: PPUSH
// begin enable ;
32611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
32612: LD_ADDR_VAR 0 1
32616: PUSH
32617: LD_INT 22
32619: PUSH
32620: LD_OWVAR 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 61
32631: PUSH
32632: EMPTY
32633: LIST
32634: PUSH
32635: LD_INT 33
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: PPUSH
32650: CALL_OW 69
32654: ST_TO_ADDR
// if not tmp then
32655: LD_VAR 0 1
32659: NOT
32660: IFFALSE 32664
// exit ;
32662: GO 32701
// for i in tmp do
32664: LD_ADDR_VAR 0 2
32668: PUSH
32669: LD_VAR 0 1
32673: PUSH
32674: FOR_IN
32675: IFFALSE 32699
// if IsControledBy ( i ) then
32677: LD_VAR 0 2
32681: PPUSH
32682: CALL_OW 312
32686: IFFALSE 32697
// ComUnlink ( i ) ;
32688: LD_VAR 0 2
32692: PPUSH
32693: CALL_OW 136
32697: GO 32674
32699: POP
32700: POP
// end ;
32701: PPOPN 2
32703: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
32704: LD_EXP 69
32708: PUSH
32709: LD_EXP 100
32713: AND
32714: IFFALSE 32854
32716: GO 32718
32718: DISABLE
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
// begin ToLua ( displayPowell(); ) ;
32723: LD_STRING displayPowell();
32725: PPUSH
32726: CALL_OW 559
// uc_side := 0 ;
32730: LD_ADDR_OWVAR 20
32734: PUSH
32735: LD_INT 0
32737: ST_TO_ADDR
// uc_nation := 2 ;
32738: LD_ADDR_OWVAR 21
32742: PUSH
32743: LD_INT 2
32745: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32746: LD_ADDR_OWVAR 37
32750: PUSH
32751: LD_INT 14
32753: ST_TO_ADDR
// vc_engine := engine_siberite ;
32754: LD_ADDR_OWVAR 39
32758: PUSH
32759: LD_INT 3
32761: ST_TO_ADDR
// vc_control := control_apeman ;
32762: LD_ADDR_OWVAR 38
32766: PUSH
32767: LD_INT 5
32769: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
32770: LD_ADDR_OWVAR 40
32774: PUSH
32775: LD_INT 29
32777: ST_TO_ADDR
// un := CreateVehicle ;
32778: LD_ADDR_VAR 0 2
32782: PUSH
32783: CALL_OW 45
32787: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32788: LD_VAR 0 2
32792: PPUSH
32793: LD_INT 1
32795: PPUSH
32796: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32800: LD_INT 35
32802: PPUSH
32803: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32807: LD_VAR 0 2
32811: PPUSH
32812: LD_INT 22
32814: PUSH
32815: LD_OWVAR 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PPUSH
32824: CALL_OW 69
32828: PPUSH
32829: LD_VAR 0 2
32833: PPUSH
32834: CALL_OW 74
32838: PPUSH
32839: CALL_OW 115
// until IsDead ( un ) ;
32843: LD_VAR 0 2
32847: PPUSH
32848: CALL_OW 301
32852: IFFALSE 32800
// end ;
32854: PPOPN 2
32856: END
// every 0 0$1 trigger StreamModeActive and sStu do
32857: LD_EXP 69
32861: PUSH
32862: LD_EXP 108
32866: AND
32867: IFFALSE 32883
32869: GO 32871
32871: DISABLE
// begin ToLua ( displayStucuk(); ) ;
32872: LD_STRING displayStucuk();
32874: PPUSH
32875: CALL_OW 559
// ResetFog ;
32879: CALL_OW 335
// end ;
32883: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
32884: LD_EXP 69
32888: PUSH
32889: LD_EXP 101
32893: AND
32894: IFFALSE 33035
32896: GO 32898
32898: DISABLE
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32903: LD_ADDR_VAR 0 2
32907: PUSH
32908: LD_INT 22
32910: PUSH
32911: LD_OWVAR 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 21
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PPUSH
32934: CALL_OW 69
32938: ST_TO_ADDR
// if not tmp then
32939: LD_VAR 0 2
32943: NOT
32944: IFFALSE 32948
// exit ;
32946: GO 33035
// un := tmp [ rand ( 1 , tmp ) ] ;
32948: LD_ADDR_VAR 0 1
32952: PUSH
32953: LD_VAR 0 2
32957: PUSH
32958: LD_INT 1
32960: PPUSH
32961: LD_VAR 0 2
32965: PPUSH
32966: CALL_OW 12
32970: ARRAY
32971: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32972: LD_VAR 0 1
32976: PPUSH
32977: LD_INT 0
32979: PPUSH
32980: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32984: LD_VAR 0 1
32988: PPUSH
32989: LD_OWVAR 3
32993: PUSH
32994: LD_VAR 0 1
32998: DIFF
32999: PPUSH
33000: LD_VAR 0 1
33004: PPUSH
33005: CALL_OW 74
33009: PPUSH
33010: CALL_OW 115
// wait ( 0 0$20 ) ;
33014: LD_INT 700
33016: PPUSH
33017: CALL_OW 67
// SetSide ( un , your_side ) ;
33021: LD_VAR 0 1
33025: PPUSH
33026: LD_OWVAR 2
33030: PPUSH
33031: CALL_OW 235
// end ;
33035: PPOPN 2
33037: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33038: LD_EXP 69
33042: PUSH
33043: LD_EXP 102
33047: AND
33048: IFFALSE 33154
33050: GO 33052
33052: DISABLE
33053: LD_INT 0
33055: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33056: LD_ADDR_VAR 0 1
33060: PUSH
33061: LD_INT 22
33063: PUSH
33064: LD_OWVAR 2
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 30
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 30
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: ST_TO_ADDR
// if not depot then
33110: LD_VAR 0 1
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33154
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33119: LD_VAR 0 1
33123: PUSH
33124: LD_INT 1
33126: ARRAY
33127: PPUSH
33128: CALL_OW 250
33132: PPUSH
33133: LD_VAR 0 1
33137: PUSH
33138: LD_INT 1
33140: ARRAY
33141: PPUSH
33142: CALL_OW 251
33146: PPUSH
33147: LD_INT 70
33149: PPUSH
33150: CALL_OW 495
// end ;
33154: PPOPN 1
33156: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33157: LD_EXP 69
33161: PUSH
33162: LD_EXP 103
33166: AND
33167: IFFALSE 33378
33169: GO 33171
33171: DISABLE
33172: LD_INT 0
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_INT 22
33186: PUSH
33187: LD_OWVAR 2
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 21
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PPUSH
33210: CALL_OW 69
33214: ST_TO_ADDR
// if not tmp then
33215: LD_VAR 0 5
33219: NOT
33220: IFFALSE 33224
// exit ;
33222: GO 33378
// for i in tmp do
33224: LD_ADDR_VAR 0 1
33228: PUSH
33229: LD_VAR 0 5
33233: PUSH
33234: FOR_IN
33235: IFFALSE 33376
// begin d := rand ( 0 , 5 ) ;
33237: LD_ADDR_VAR 0 4
33241: PUSH
33242: LD_INT 0
33244: PPUSH
33245: LD_INT 5
33247: PPUSH
33248: CALL_OW 12
33252: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33253: LD_ADDR_VAR 0 2
33257: PUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: CALL_OW 250
33267: PPUSH
33268: LD_VAR 0 4
33272: PPUSH
33273: LD_INT 3
33275: PPUSH
33276: LD_INT 12
33278: PPUSH
33279: CALL_OW 12
33283: PPUSH
33284: CALL_OW 272
33288: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 251
33303: PPUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: LD_INT 3
33311: PPUSH
33312: LD_INT 12
33314: PPUSH
33315: CALL_OW 12
33319: PPUSH
33320: CALL_OW 273
33324: ST_TO_ADDR
// if ValidHex ( x , y ) then
33325: LD_VAR 0 2
33329: PPUSH
33330: LD_VAR 0 3
33334: PPUSH
33335: CALL_OW 488
33339: IFFALSE 33374
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33341: LD_VAR 0 1
33345: PPUSH
33346: LD_VAR 0 2
33350: PPUSH
33351: LD_VAR 0 3
33355: PPUSH
33356: LD_INT 3
33358: PPUSH
33359: LD_INT 6
33361: PPUSH
33362: CALL_OW 12
33366: PPUSH
33367: LD_INT 1
33369: PPUSH
33370: CALL_OW 483
// end ;
33374: GO 33234
33376: POP
33377: POP
// end ;
33378: PPOPN 5
33380: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33381: LD_EXP 69
33385: PUSH
33386: LD_EXP 104
33390: AND
33391: IFFALSE 33485
33393: GO 33395
33395: DISABLE
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: LD_OWVAR 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 32
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 21
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: PPUSH
33442: CALL_OW 69
33446: ST_TO_ADDR
// if not tmp then
33447: LD_VAR 0 2
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33485
// for i in tmp do
33456: LD_ADDR_VAR 0 1
33460: PUSH
33461: LD_VAR 0 2
33465: PUSH
33466: FOR_IN
33467: IFFALSE 33483
// SetFuel ( i , 0 ) ;
33469: LD_VAR 0 1
33473: PPUSH
33474: LD_INT 0
33476: PPUSH
33477: CALL_OW 240
33481: GO 33466
33483: POP
33484: POP
// end ;
33485: PPOPN 2
33487: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33488: LD_EXP 69
33492: PUSH
33493: LD_EXP 105
33497: AND
33498: IFFALSE 33564
33500: GO 33502
33502: DISABLE
33503: LD_INT 0
33505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33506: LD_ADDR_VAR 0 1
33510: PUSH
33511: LD_INT 22
33513: PUSH
33514: LD_OWVAR 2
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 30
33525: PUSH
33526: LD_INT 29
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PPUSH
33537: CALL_OW 69
33541: ST_TO_ADDR
// if not tmp then
33542: LD_VAR 0 1
33546: NOT
33547: IFFALSE 33551
// exit ;
33549: GO 33564
// DestroyUnit ( tmp [ 1 ] ) ;
33551: LD_VAR 0 1
33555: PUSH
33556: LD_INT 1
33558: ARRAY
33559: PPUSH
33560: CALL_OW 65
// end ;
33564: PPOPN 1
33566: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
33567: LD_EXP 69
33571: PUSH
33572: LD_EXP 107
33576: AND
33577: IFFALSE 33706
33579: GO 33581
33581: DISABLE
33582: LD_INT 0
33584: PPUSH
// begin uc_side := 0 ;
33585: LD_ADDR_OWVAR 20
33589: PUSH
33590: LD_INT 0
33592: ST_TO_ADDR
// uc_nation := nation_arabian ;
33593: LD_ADDR_OWVAR 21
33597: PUSH
33598: LD_INT 2
33600: ST_TO_ADDR
// hc_gallery :=  ;
33601: LD_ADDR_OWVAR 33
33605: PUSH
33606: LD_STRING 
33608: ST_TO_ADDR
// hc_name :=  ;
33609: LD_ADDR_OWVAR 26
33613: PUSH
33614: LD_STRING 
33616: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
33617: LD_INT 1
33619: PPUSH
33620: LD_INT 11
33622: PPUSH
33623: LD_INT 10
33625: PPUSH
33626: CALL_OW 380
// un := CreateHuman ;
33630: LD_ADDR_VAR 0 1
33634: PUSH
33635: CALL_OW 44
33639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33640: LD_VAR 0 1
33644: PPUSH
33645: LD_INT 1
33647: PPUSH
33648: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
33652: LD_INT 35
33654: PPUSH
33655: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
33659: LD_VAR 0 1
33663: PPUSH
33664: LD_INT 22
33666: PUSH
33667: LD_OWVAR 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 69
33680: PPUSH
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 74
33690: PPUSH
33691: CALL_OW 115
// until IsDead ( un ) ;
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 301
33704: IFFALSE 33652
// end ;
33706: PPOPN 1
33708: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
33709: LD_EXP 69
33713: PUSH
33714: LD_EXP 109
33718: AND
33719: IFFALSE 33731
33721: GO 33723
33723: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
33724: LD_STRING earthquake(getX(game), 0, 32)
33726: PPUSH
33727: CALL_OW 559
33731: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
33732: LD_EXP 69
33736: PUSH
33737: LD_EXP 110
33741: AND
33742: IFFALSE 33833
33744: GO 33746
33746: DISABLE
33747: LD_INT 0
33749: PPUSH
// begin enable ;
33750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
33751: LD_ADDR_VAR 0 1
33755: PUSH
33756: LD_INT 22
33758: PUSH
33759: LD_OWVAR 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 21
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 33
33780: PUSH
33781: LD_INT 3
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: PPUSH
33793: CALL_OW 69
33797: ST_TO_ADDR
// if not tmp then
33798: LD_VAR 0 1
33802: NOT
33803: IFFALSE 33807
// exit ;
33805: GO 33833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33807: LD_VAR 0 1
33811: PUSH
33812: LD_INT 1
33814: PPUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 12
33824: ARRAY
33825: PPUSH
33826: LD_INT 1
33828: PPUSH
33829: CALL_OW 234
// end ;
33833: PPOPN 1
33835: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
33836: LD_EXP 69
33840: PUSH
33841: LD_EXP 111
33845: AND
33846: IFFALSE 33987
33848: GO 33850
33850: DISABLE
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
33855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 22
33863: PUSH
33864: LD_OWVAR 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 25
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 69
33891: ST_TO_ADDR
// if not tmp then
33892: LD_VAR 0 3
33896: NOT
33897: IFFALSE 33901
// exit ;
33899: GO 33987
// un := tmp [ rand ( 1 , tmp ) ] ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_VAR 0 3
33910: PUSH
33911: LD_INT 1
33913: PPUSH
33914: LD_VAR 0 3
33918: PPUSH
33919: CALL_OW 12
33923: ARRAY
33924: ST_TO_ADDR
// if Crawls ( un ) then
33925: LD_VAR 0 2
33929: PPUSH
33930: CALL_OW 318
33934: IFFALSE 33945
// ComWalk ( un ) ;
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
33945: LD_VAR 0 2
33949: PPUSH
33950: LD_INT 9
33952: PPUSH
33953: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
33957: LD_INT 28
33959: PPUSH
33960: LD_OWVAR 2
33964: PPUSH
33965: LD_INT 2
33967: PPUSH
33968: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33972: LD_INT 29
33974: PPUSH
33975: LD_OWVAR 2
33979: PPUSH
33980: LD_INT 2
33982: PPUSH
33983: CALL_OW 322
// end ;
33987: PPOPN 3
33989: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33990: LD_EXP 69
33994: PUSH
33995: LD_EXP 112
33999: AND
34000: IFFALSE 34111
34002: GO 34004
34004: DISABLE
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_INT 22
34017: PUSH
34018: LD_OWVAR 2
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 25
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PPUSH
34041: CALL_OW 69
34045: ST_TO_ADDR
// if not tmp then
34046: LD_VAR 0 3
34050: NOT
34051: IFFALSE 34055
// exit ;
34053: GO 34111
// un := tmp [ rand ( 1 , tmp ) ] ;
34055: LD_ADDR_VAR 0 2
34059: PUSH
34060: LD_VAR 0 3
34064: PUSH
34065: LD_INT 1
34067: PPUSH
34068: LD_VAR 0 3
34072: PPUSH
34073: CALL_OW 12
34077: ARRAY
34078: ST_TO_ADDR
// if Crawls ( un ) then
34079: LD_VAR 0 2
34083: PPUSH
34084: CALL_OW 318
34088: IFFALSE 34099
// ComWalk ( un ) ;
34090: LD_VAR 0 2
34094: PPUSH
34095: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34099: LD_VAR 0 2
34103: PPUSH
34104: LD_INT 8
34106: PPUSH
34107: CALL_OW 336
// end ;
34111: PPOPN 3
34113: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
34114: LD_EXP 69
34118: PUSH
34119: LD_EXP 113
34123: AND
34124: IFFALSE 34268
34126: GO 34128
34128: DISABLE
34129: LD_INT 0
34131: PPUSH
34132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
34133: LD_ADDR_VAR 0 2
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_OWVAR 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 21
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 34
34165: PUSH
34166: LD_INT 12
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 34
34175: PUSH
34176: LD_INT 51
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 34
34185: PUSH
34186: LD_INT 32
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: PPUSH
34204: CALL_OW 69
34208: ST_TO_ADDR
// if not tmp then
34209: LD_VAR 0 2
34213: NOT
34214: IFFALSE 34218
// exit ;
34216: GO 34268
// for i in tmp do
34218: LD_ADDR_VAR 0 1
34222: PUSH
34223: LD_VAR 0 2
34227: PUSH
34228: FOR_IN
34229: IFFALSE 34266
// if GetCargo ( i , mat_artifact ) = 0 then
34231: LD_VAR 0 1
34235: PPUSH
34236: LD_INT 4
34238: PPUSH
34239: CALL_OW 289
34243: PUSH
34244: LD_INT 0
34246: EQUAL
34247: IFFALSE 34264
// SetCargo ( i , mat_siberit , 100 ) ;
34249: LD_VAR 0 1
34253: PPUSH
34254: LD_INT 3
34256: PPUSH
34257: LD_INT 100
34259: PPUSH
34260: CALL_OW 290
34264: GO 34228
34266: POP
34267: POP
// end ;
34268: PPOPN 2
34270: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
34271: LD_EXP 69
34275: PUSH
34276: LD_EXP 114
34280: AND
34281: IFFALSE 34464
34283: GO 34285
34285: DISABLE
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34290: LD_ADDR_VAR 0 2
34294: PUSH
34295: LD_INT 22
34297: PUSH
34298: LD_OWVAR 2
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PPUSH
34307: CALL_OW 69
34311: ST_TO_ADDR
// if not tmp then
34312: LD_VAR 0 2
34316: NOT
34317: IFFALSE 34321
// exit ;
34319: GO 34464
// for i := 1 to 2 do
34321: LD_ADDR_VAR 0 1
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_INT 2
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34462
// begin uc_side := your_side ;
34337: LD_ADDR_OWVAR 20
34341: PUSH
34342: LD_OWVAR 2
34346: ST_TO_ADDR
// uc_nation := nation_american ;
34347: LD_ADDR_OWVAR 21
34351: PUSH
34352: LD_INT 1
34354: ST_TO_ADDR
// vc_chassis := us_morphling ;
34355: LD_ADDR_OWVAR 37
34359: PUSH
34360: LD_INT 5
34362: ST_TO_ADDR
// vc_engine := engine_siberite ;
34363: LD_ADDR_OWVAR 39
34367: PUSH
34368: LD_INT 3
34370: ST_TO_ADDR
// vc_control := control_computer ;
34371: LD_ADDR_OWVAR 38
34375: PUSH
34376: LD_INT 3
34378: ST_TO_ADDR
// vc_weapon := us_double_laser ;
34379: LD_ADDR_OWVAR 40
34383: PUSH
34384: LD_INT 10
34386: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
34387: LD_VAR 0 2
34391: PUSH
34392: LD_INT 1
34394: ARRAY
34395: PPUSH
34396: CALL_OW 310
34400: NOT
34401: IFFALSE 34448
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
34403: CALL_OW 45
34407: PPUSH
34408: LD_VAR 0 2
34412: PUSH
34413: LD_INT 1
34415: ARRAY
34416: PPUSH
34417: CALL_OW 250
34421: PPUSH
34422: LD_VAR 0 2
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: PPUSH
34431: CALL_OW 251
34435: PPUSH
34436: LD_INT 12
34438: PPUSH
34439: LD_INT 1
34441: PPUSH
34442: CALL_OW 50
34446: GO 34460
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34448: CALL_OW 45
34452: PPUSH
34453: LD_INT 1
34455: PPUSH
34456: CALL_OW 51
// end ;
34460: GO 34334
34462: POP
34463: POP
// end ;
34464: PPOPN 2
34466: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
34467: LD_EXP 69
34471: PUSH
34472: LD_EXP 115
34476: AND
34477: IFFALSE 34699
34479: GO 34481
34481: DISABLE
34482: LD_INT 0
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34490: LD_ADDR_VAR 0 6
34494: PUSH
34495: LD_INT 22
34497: PUSH
34498: LD_OWVAR 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 21
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 23
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: PPUSH
34539: CALL_OW 69
34543: ST_TO_ADDR
// if not tmp then
34544: LD_VAR 0 6
34548: NOT
34549: IFFALSE 34553
// exit ;
34551: GO 34699
// s1 := rand ( 1 , 4 ) ;
34553: LD_ADDR_VAR 0 2
34557: PUSH
34558: LD_INT 1
34560: PPUSH
34561: LD_INT 4
34563: PPUSH
34564: CALL_OW 12
34568: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
34569: LD_ADDR_VAR 0 4
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: PPUSH
34583: LD_VAR 0 2
34587: PPUSH
34588: CALL_OW 259
34592: ST_TO_ADDR
// if s1 = 1 then
34593: LD_VAR 0 2
34597: PUSH
34598: LD_INT 1
34600: EQUAL
34601: IFFALSE 34621
// s2 := rand ( 2 , 4 ) else
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_INT 2
34610: PPUSH
34611: LD_INT 4
34613: PPUSH
34614: CALL_OW 12
34618: ST_TO_ADDR
34619: GO 34629
// s2 := 1 ;
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 1
34628: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
34629: LD_ADDR_VAR 0 5
34633: PUSH
34634: LD_VAR 0 6
34638: PUSH
34639: LD_INT 1
34641: ARRAY
34642: PPUSH
34643: LD_VAR 0 3
34647: PPUSH
34648: CALL_OW 259
34652: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
34653: LD_VAR 0 6
34657: PUSH
34658: LD_INT 1
34660: ARRAY
34661: PPUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: LD_VAR 0 5
34671: PPUSH
34672: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
34676: LD_VAR 0 6
34680: PUSH
34681: LD_INT 1
34683: ARRAY
34684: PPUSH
34685: LD_VAR 0 3
34689: PPUSH
34690: LD_VAR 0 4
34694: PPUSH
34695: CALL_OW 237
// end ;
34699: PPOPN 6
34701: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
34702: LD_EXP 69
34706: PUSH
34707: LD_EXP 116
34711: AND
34712: IFFALSE 34791
34714: GO 34716
34716: DISABLE
34717: LD_INT 0
34719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
34720: LD_ADDR_VAR 0 1
34724: PUSH
34725: LD_INT 22
34727: PUSH
34728: LD_OWVAR 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 30
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PPUSH
34751: CALL_OW 69
34755: ST_TO_ADDR
// if not tmp then
34756: LD_VAR 0 1
34760: NOT
34761: IFFALSE 34765
// exit ;
34763: GO 34791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
34765: LD_VAR 0 1
34769: PUSH
34770: LD_INT 1
34772: PPUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 12
34782: ARRAY
34783: PPUSH
34784: LD_INT 1
34786: PPUSH
34787: CALL_OW 234
// end ;
34791: PPOPN 1
34793: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
34794: LD_EXP 69
34798: PUSH
34799: LD_EXP 117
34803: AND
34804: IFFALSE 34916
34806: GO 34808
34808: DISABLE
34809: LD_INT 0
34811: PPUSH
34812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_INT 22
34820: PUSH
34821: LD_OWVAR 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: LD_INT 30
34835: PUSH
34836: LD_INT 27
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 30
34845: PUSH
34846: LD_INT 26
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 30
34855: PUSH
34856: LD_INT 28
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PPUSH
34873: CALL_OW 69
34877: ST_TO_ADDR
// if not tmp then
34878: LD_VAR 0 2
34882: NOT
34883: IFFALSE 34887
// exit ;
34885: GO 34916
// for i in tmp do
34887: LD_ADDR_VAR 0 1
34891: PUSH
34892: LD_VAR 0 2
34896: PUSH
34897: FOR_IN
34898: IFFALSE 34914
// SetLives ( i , 1 ) ;
34900: LD_VAR 0 1
34904: PPUSH
34905: LD_INT 1
34907: PPUSH
34908: CALL_OW 234
34912: GO 34897
34914: POP
34915: POP
// end ;
34916: PPOPN 2
34918: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
34919: LD_EXP 69
34923: PUSH
34924: LD_EXP 118
34928: AND
34929: IFFALSE 35203
34931: GO 34933
34933: DISABLE
34934: LD_INT 0
34936: PPUSH
34937: PPUSH
34938: PPUSH
// begin i := rand ( 1 , 7 ) ;
34939: LD_ADDR_VAR 0 1
34943: PUSH
34944: LD_INT 1
34946: PPUSH
34947: LD_INT 7
34949: PPUSH
34950: CALL_OW 12
34954: ST_TO_ADDR
// case i of 1 :
34955: LD_VAR 0 1
34959: PUSH
34960: LD_INT 1
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34978
34968: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34969: LD_STRING earthquake(getX(game), 0, 32)
34971: PPUSH
34972: CALL_OW 559
34976: GO 35203
34978: LD_INT 2
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35000
34986: POP
// begin ToLua ( displayStucuk(); ) ;
34987: LD_STRING displayStucuk();
34989: PPUSH
34990: CALL_OW 559
// ResetFog ;
34994: CALL_OW 335
// end ; 3 :
34998: GO 35203
35000: LD_INT 3
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35112
35008: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35009: LD_ADDR_VAR 0 2
35013: PUSH
35014: LD_INT 22
35016: PUSH
35017: LD_OWVAR 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 25
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PPUSH
35040: CALL_OW 69
35044: ST_TO_ADDR
// if not tmp then
35045: LD_VAR 0 2
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35203
// un := tmp [ rand ( 1 , tmp ) ] ;
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_VAR 0 2
35063: PUSH
35064: LD_INT 1
35066: PPUSH
35067: LD_VAR 0 2
35071: PPUSH
35072: CALL_OW 12
35076: ARRAY
35077: ST_TO_ADDR
// if Crawls ( un ) then
35078: LD_VAR 0 3
35082: PPUSH
35083: CALL_OW 318
35087: IFFALSE 35098
// ComWalk ( un ) ;
35089: LD_VAR 0 3
35093: PPUSH
35094: CALL_OW 138
// SetClass ( un , class_mortar ) ;
35098: LD_VAR 0 3
35102: PPUSH
35103: LD_INT 8
35105: PPUSH
35106: CALL_OW 336
// end ; 4 :
35110: GO 35203
35112: LD_INT 4
35114: DOUBLE
35115: EQUAL
35116: IFTRUE 35120
35118: GO 35181
35120: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35121: LD_ADDR_VAR 0 2
35125: PUSH
35126: LD_INT 22
35128: PUSH
35129: LD_OWVAR 2
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 30
35140: PUSH
35141: LD_INT 29
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PPUSH
35152: CALL_OW 69
35156: ST_TO_ADDR
// if not tmp then
35157: LD_VAR 0 2
35161: NOT
35162: IFFALSE 35166
// exit ;
35164: GO 35203
// DestroyUnit ( tmp [ 1 ] ) ;
35166: LD_VAR 0 2
35170: PUSH
35171: LD_INT 1
35173: ARRAY
35174: PPUSH
35175: CALL_OW 65
// end ; 5 .. 7 :
35179: GO 35203
35181: LD_INT 5
35183: DOUBLE
35184: GREATEREQUAL
35185: IFFALSE 35193
35187: LD_INT 7
35189: DOUBLE
35190: LESSEQUAL
35191: IFTRUE 35195
35193: GO 35202
35195: POP
// StreamSibBomb ; end ;
35196: CALL 31453 0 0
35200: GO 35203
35202: POP
// end ;
35203: PPOPN 3
35205: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
35206: LD_EXP 69
35210: PUSH
35211: LD_EXP 119
35215: AND
35216: IFFALSE 35372
35218: GO 35220
35220: DISABLE
35221: LD_INT 0
35223: PPUSH
35224: PPUSH
35225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
35226: LD_ADDR_VAR 0 2
35230: PUSH
35231: LD_INT 81
35233: PUSH
35234: LD_OWVAR 2
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 21
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 21
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PPUSH
35275: CALL_OW 69
35279: ST_TO_ADDR
// if not tmp then
35280: LD_VAR 0 2
35284: NOT
35285: IFFALSE 35289
// exit ;
35287: GO 35372
// p := 0 ;
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 0
35296: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35297: LD_INT 35
35299: PPUSH
35300: CALL_OW 67
// p := p + 1 ;
35304: LD_ADDR_VAR 0 3
35308: PUSH
35309: LD_VAR 0 3
35313: PUSH
35314: LD_INT 1
35316: PLUS
35317: ST_TO_ADDR
// for i in tmp do
35318: LD_ADDR_VAR 0 1
35322: PUSH
35323: LD_VAR 0 2
35327: PUSH
35328: FOR_IN
35329: IFFALSE 35360
// if GetLives ( i ) < 1000 then
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 256
35340: PUSH
35341: LD_INT 1000
35343: LESS
35344: IFFALSE 35358
// SetLives ( i , 1000 ) ;
35346: LD_VAR 0 1
35350: PPUSH
35351: LD_INT 1000
35353: PPUSH
35354: CALL_OW 234
35358: GO 35328
35360: POP
35361: POP
// until p > 20 ;
35362: LD_VAR 0 3
35366: PUSH
35367: LD_INT 20
35369: GREATER
35370: IFFALSE 35297
// end ;
35372: PPOPN 3
35374: END
// every 0 0$1 trigger StreamModeActive and sTime do
35375: LD_EXP 69
35379: PUSH
35380: LD_EXP 120
35384: AND
35385: IFFALSE 35420
35387: GO 35389
35389: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
35390: LD_INT 28
35392: PPUSH
35393: LD_OWVAR 2
35397: PPUSH
35398: LD_INT 2
35400: PPUSH
35401: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
35405: LD_INT 30
35407: PPUSH
35408: LD_OWVAR 2
35412: PPUSH
35413: LD_INT 2
35415: PPUSH
35416: CALL_OW 322
// end ;
35420: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
35421: LD_EXP 69
35425: PUSH
35426: LD_EXP 121
35430: AND
35431: IFFALSE 35552
35433: GO 35435
35435: DISABLE
35436: LD_INT 0
35438: PPUSH
35439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35440: LD_ADDR_VAR 0 2
35444: PUSH
35445: LD_INT 22
35447: PUSH
35448: LD_OWVAR 2
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 21
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 3
35469: PUSH
35470: LD_INT 23
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: PPUSH
35489: CALL_OW 69
35493: ST_TO_ADDR
// if not tmp then
35494: LD_VAR 0 2
35498: NOT
35499: IFFALSE 35503
// exit ;
35501: GO 35552
// for i in tmp do
35503: LD_ADDR_VAR 0 1
35507: PUSH
35508: LD_VAR 0 2
35512: PUSH
35513: FOR_IN
35514: IFFALSE 35550
// begin if Crawls ( i ) then
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 318
35525: IFFALSE 35536
// ComWalk ( i ) ;
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL_OW 138
// SetClass ( i , 2 ) ;
35536: LD_VAR 0 1
35540: PPUSH
35541: LD_INT 2
35543: PPUSH
35544: CALL_OW 336
// end ;
35548: GO 35513
35550: POP
35551: POP
// end ;
35552: PPOPN 2
35554: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
35555: LD_EXP 69
35559: PUSH
35560: LD_EXP 122
35564: AND
35565: IFFALSE 35846
35567: GO 35569
35569: DISABLE
35570: LD_INT 0
35572: PPUSH
35573: PPUSH
35574: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
35575: LD_OWVAR 2
35579: PPUSH
35580: LD_INT 9
35582: PPUSH
35583: LD_INT 1
35585: PPUSH
35586: LD_INT 1
35588: PPUSH
35589: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
35593: LD_INT 9
35595: PPUSH
35596: LD_OWVAR 2
35600: PPUSH
35601: CALL_OW 343
// uc_side := 9 ;
35605: LD_ADDR_OWVAR 20
35609: PUSH
35610: LD_INT 9
35612: ST_TO_ADDR
// uc_nation := 2 ;
35613: LD_ADDR_OWVAR 21
35617: PUSH
35618: LD_INT 2
35620: ST_TO_ADDR
// hc_name := Dark Warrior ;
35621: LD_ADDR_OWVAR 26
35625: PUSH
35626: LD_STRING Dark Warrior
35628: ST_TO_ADDR
// hc_gallery :=  ;
35629: LD_ADDR_OWVAR 33
35633: PUSH
35634: LD_STRING 
35636: ST_TO_ADDR
// hc_noskilllimit := true ;
35637: LD_ADDR_OWVAR 76
35641: PUSH
35642: LD_INT 1
35644: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
35645: LD_ADDR_OWVAR 31
35649: PUSH
35650: LD_INT 30
35652: PUSH
35653: LD_INT 30
35655: PUSH
35656: LD_INT 30
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
// un := CreateHuman ;
35668: LD_ADDR_VAR 0 3
35672: PUSH
35673: CALL_OW 44
35677: ST_TO_ADDR
// hc_noskilllimit := false ;
35678: LD_ADDR_OWVAR 76
35682: PUSH
35683: LD_INT 0
35685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35686: LD_VAR 0 3
35690: PPUSH
35691: LD_INT 1
35693: PPUSH
35694: CALL_OW 51
// p := 0 ;
35698: LD_ADDR_VAR 0 2
35702: PUSH
35703: LD_INT 0
35705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35706: LD_INT 35
35708: PPUSH
35709: CALL_OW 67
// p := p + 1 ;
35713: LD_ADDR_VAR 0 2
35717: PUSH
35718: LD_VAR 0 2
35722: PUSH
35723: LD_INT 1
35725: PLUS
35726: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
35727: LD_VAR 0 3
35731: PPUSH
35732: CALL_OW 256
35736: PUSH
35737: LD_INT 1000
35739: LESS
35740: IFFALSE 35754
// SetLives ( un , 1000 ) ;
35742: LD_VAR 0 3
35746: PPUSH
35747: LD_INT 1000
35749: PPUSH
35750: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
35754: LD_VAR 0 3
35758: PPUSH
35759: LD_INT 81
35761: PUSH
35762: LD_OWVAR 2
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 91
35773: PUSH
35774: LD_VAR 0 3
35778: PUSH
35779: LD_INT 30
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 69
35795: PPUSH
35796: LD_VAR 0 3
35800: PPUSH
35801: CALL_OW 74
35805: PPUSH
35806: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
35810: LD_VAR 0 2
35814: PUSH
35815: LD_INT 60
35817: GREATER
35818: PUSH
35819: LD_VAR 0 3
35823: PPUSH
35824: CALL_OW 301
35828: OR
35829: IFFALSE 35706
// if un then
35831: LD_VAR 0 3
35835: IFFALSE 35846
// RemoveUnit ( un ) ;
35837: LD_VAR 0 3
35841: PPUSH
35842: CALL_OW 64
// end ;
35846: PPOPN 3
35848: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
35849: LD_INT 0
35851: PPUSH
// case cmd of 301 :
35852: LD_VAR 0 1
35856: PUSH
35857: LD_INT 301
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35897
35865: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
35866: LD_VAR 0 6
35870: PPUSH
35871: LD_VAR 0 7
35875: PPUSH
35876: LD_VAR 0 8
35880: PPUSH
35881: LD_VAR 0 4
35885: PPUSH
35886: LD_VAR 0 5
35890: PPUSH
35891: CALL 37098 0 5
35895: GO 36018
35897: LD_INT 302
35899: DOUBLE
35900: EQUAL
35901: IFTRUE 35905
35903: GO 35942
35905: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
35906: LD_VAR 0 6
35910: PPUSH
35911: LD_VAR 0 7
35915: PPUSH
35916: LD_VAR 0 8
35920: PPUSH
35921: LD_VAR 0 9
35925: PPUSH
35926: LD_VAR 0 4
35930: PPUSH
35931: LD_VAR 0 5
35935: PPUSH
35936: CALL 37189 0 6
35940: GO 36018
35942: LD_INT 303
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35950
35948: GO 35987
35950: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
35951: LD_VAR 0 6
35955: PPUSH
35956: LD_VAR 0 7
35960: PPUSH
35961: LD_VAR 0 8
35965: PPUSH
35966: LD_VAR 0 9
35970: PPUSH
35971: LD_VAR 0 4
35975: PPUSH
35976: LD_VAR 0 5
35980: PPUSH
35981: CALL 36023 0 6
35985: GO 36018
35987: LD_INT 304
35989: DOUBLE
35990: EQUAL
35991: IFTRUE 35995
35993: GO 36017
35995: POP
// hHackTeleport ( unit , x , y ) ; end ;
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 4
36005: PPUSH
36006: LD_VAR 0 5
36010: PPUSH
36011: CALL 37782 0 3
36015: GO 36018
36017: POP
// end ;
36018: LD_VAR 0 12
36022: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
36023: LD_INT 0
36025: PPUSH
36026: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 1
36034: LESS
36035: PUSH
36036: LD_VAR 0 1
36040: PUSH
36041: LD_INT 3
36043: GREATER
36044: OR
36045: PUSH
36046: LD_VAR 0 5
36050: PPUSH
36051: LD_VAR 0 6
36055: PPUSH
36056: CALL_OW 428
36060: OR
36061: IFFALSE 36065
// exit ;
36063: GO 36785
// uc_side := your_side ;
36065: LD_ADDR_OWVAR 20
36069: PUSH
36070: LD_OWVAR 2
36074: ST_TO_ADDR
// uc_nation := nation ;
36075: LD_ADDR_OWVAR 21
36079: PUSH
36080: LD_VAR 0 1
36084: ST_TO_ADDR
// bc_level = 1 ;
36085: LD_ADDR_OWVAR 43
36089: PUSH
36090: LD_INT 1
36092: ST_TO_ADDR
// case btype of 1 :
36093: LD_VAR 0 2
36097: PUSH
36098: LD_INT 1
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36106
36104: GO 36117
36106: POP
// bc_type := b_depot ; 2 :
36107: LD_ADDR_OWVAR 42
36111: PUSH
36112: LD_INT 0
36114: ST_TO_ADDR
36115: GO 36729
36117: LD_INT 2
36119: DOUBLE
36120: EQUAL
36121: IFTRUE 36125
36123: GO 36136
36125: POP
// bc_type := b_warehouse ; 3 :
36126: LD_ADDR_OWVAR 42
36130: PUSH
36131: LD_INT 1
36133: ST_TO_ADDR
36134: GO 36729
36136: LD_INT 3
36138: DOUBLE
36139: EQUAL
36140: IFTRUE 36144
36142: GO 36155
36144: POP
// bc_type := b_lab ; 4 .. 9 :
36145: LD_ADDR_OWVAR 42
36149: PUSH
36150: LD_INT 6
36152: ST_TO_ADDR
36153: GO 36729
36155: LD_INT 4
36157: DOUBLE
36158: GREATEREQUAL
36159: IFFALSE 36167
36161: LD_INT 9
36163: DOUBLE
36164: LESSEQUAL
36165: IFTRUE 36169
36167: GO 36221
36169: POP
// begin bc_type := b_lab_half ;
36170: LD_ADDR_OWVAR 42
36174: PUSH
36175: LD_INT 7
36177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
36178: LD_ADDR_OWVAR 44
36182: PUSH
36183: LD_INT 10
36185: PUSH
36186: LD_INT 11
36188: PUSH
36189: LD_INT 12
36191: PUSH
36192: LD_INT 15
36194: PUSH
36195: LD_INT 14
36197: PUSH
36198: LD_INT 13
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: LD_VAR 0 2
36213: PUSH
36214: LD_INT 3
36216: MINUS
36217: ARRAY
36218: ST_TO_ADDR
// end ; 10 .. 13 :
36219: GO 36729
36221: LD_INT 10
36223: DOUBLE
36224: GREATEREQUAL
36225: IFFALSE 36233
36227: LD_INT 13
36229: DOUBLE
36230: LESSEQUAL
36231: IFTRUE 36235
36233: GO 36312
36235: POP
// begin bc_type := b_lab_full ;
36236: LD_ADDR_OWVAR 42
36240: PUSH
36241: LD_INT 8
36243: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
36244: LD_ADDR_OWVAR 44
36248: PUSH
36249: LD_INT 10
36251: PUSH
36252: LD_INT 12
36254: PUSH
36255: LD_INT 14
36257: PUSH
36258: LD_INT 13
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: LD_VAR 0 2
36271: PUSH
36272: LD_INT 9
36274: MINUS
36275: ARRAY
36276: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
36277: LD_ADDR_OWVAR 45
36281: PUSH
36282: LD_INT 11
36284: PUSH
36285: LD_INT 15
36287: PUSH
36288: LD_INT 12
36290: PUSH
36291: LD_INT 15
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: PUSH
36300: LD_VAR 0 2
36304: PUSH
36305: LD_INT 9
36307: MINUS
36308: ARRAY
36309: ST_TO_ADDR
// end ; 14 :
36310: GO 36729
36312: LD_INT 14
36314: DOUBLE
36315: EQUAL
36316: IFTRUE 36320
36318: GO 36331
36320: POP
// bc_type := b_workshop ; 15 :
36321: LD_ADDR_OWVAR 42
36325: PUSH
36326: LD_INT 2
36328: ST_TO_ADDR
36329: GO 36729
36331: LD_INT 15
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36339
36337: GO 36350
36339: POP
// bc_type := b_factory ; 16 :
36340: LD_ADDR_OWVAR 42
36344: PUSH
36345: LD_INT 3
36347: ST_TO_ADDR
36348: GO 36729
36350: LD_INT 16
36352: DOUBLE
36353: EQUAL
36354: IFTRUE 36358
36356: GO 36369
36358: POP
// bc_type := b_ext_gun ; 17 :
36359: LD_ADDR_OWVAR 42
36363: PUSH
36364: LD_INT 17
36366: ST_TO_ADDR
36367: GO 36729
36369: LD_INT 17
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36405
36377: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
36378: LD_ADDR_OWVAR 42
36382: PUSH
36383: LD_INT 19
36385: PUSH
36386: LD_INT 23
36388: PUSH
36389: LD_INT 19
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: PUSH
36397: LD_VAR 0 1
36401: ARRAY
36402: ST_TO_ADDR
36403: GO 36729
36405: LD_INT 18
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36413
36411: GO 36424
36413: POP
// bc_type := b_ext_radar ; 19 :
36414: LD_ADDR_OWVAR 42
36418: PUSH
36419: LD_INT 20
36421: ST_TO_ADDR
36422: GO 36729
36424: LD_INT 19
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36432
36430: GO 36443
36432: POP
// bc_type := b_ext_radio ; 20 :
36433: LD_ADDR_OWVAR 42
36437: PUSH
36438: LD_INT 22
36440: ST_TO_ADDR
36441: GO 36729
36443: LD_INT 20
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 36462
36451: POP
// bc_type := b_ext_siberium ; 21 :
36452: LD_ADDR_OWVAR 42
36456: PUSH
36457: LD_INT 21
36459: ST_TO_ADDR
36460: GO 36729
36462: LD_INT 21
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36470
36468: GO 36481
36470: POP
// bc_type := b_ext_computer ; 22 :
36471: LD_ADDR_OWVAR 42
36475: PUSH
36476: LD_INT 24
36478: ST_TO_ADDR
36479: GO 36729
36481: LD_INT 22
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36500
36489: POP
// bc_type := b_ext_track ; 23 :
36490: LD_ADDR_OWVAR 42
36494: PUSH
36495: LD_INT 16
36497: ST_TO_ADDR
36498: GO 36729
36500: LD_INT 23
36502: DOUBLE
36503: EQUAL
36504: IFTRUE 36508
36506: GO 36519
36508: POP
// bc_type := b_ext_laser ; 24 :
36509: LD_ADDR_OWVAR 42
36513: PUSH
36514: LD_INT 25
36516: ST_TO_ADDR
36517: GO 36729
36519: LD_INT 24
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36527
36525: GO 36538
36527: POP
// bc_type := b_control_tower ; 25 :
36528: LD_ADDR_OWVAR 42
36532: PUSH
36533: LD_INT 36
36535: ST_TO_ADDR
36536: GO 36729
36538: LD_INT 25
36540: DOUBLE
36541: EQUAL
36542: IFTRUE 36546
36544: GO 36557
36546: POP
// bc_type := b_breastwork ; 26 :
36547: LD_ADDR_OWVAR 42
36551: PUSH
36552: LD_INT 31
36554: ST_TO_ADDR
36555: GO 36729
36557: LD_INT 26
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36576
36565: POP
// bc_type := b_bunker ; 27 :
36566: LD_ADDR_OWVAR 42
36570: PUSH
36571: LD_INT 32
36573: ST_TO_ADDR
36574: GO 36729
36576: LD_INT 27
36578: DOUBLE
36579: EQUAL
36580: IFTRUE 36584
36582: GO 36595
36584: POP
// bc_type := b_turret ; 28 :
36585: LD_ADDR_OWVAR 42
36589: PUSH
36590: LD_INT 33
36592: ST_TO_ADDR
36593: GO 36729
36595: LD_INT 28
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36614
36603: POP
// bc_type := b_armoury ; 29 :
36604: LD_ADDR_OWVAR 42
36608: PUSH
36609: LD_INT 4
36611: ST_TO_ADDR
36612: GO 36729
36614: LD_INT 29
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36633
36622: POP
// bc_type := b_barracks ; 30 :
36623: LD_ADDR_OWVAR 42
36627: PUSH
36628: LD_INT 5
36630: ST_TO_ADDR
36631: GO 36729
36633: LD_INT 30
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36641
36639: GO 36652
36641: POP
// bc_type := b_solar_power ; 31 :
36642: LD_ADDR_OWVAR 42
36646: PUSH
36647: LD_INT 27
36649: ST_TO_ADDR
36650: GO 36729
36652: LD_INT 31
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36660
36658: GO 36671
36660: POP
// bc_type := b_oil_power ; 32 :
36661: LD_ADDR_OWVAR 42
36665: PUSH
36666: LD_INT 26
36668: ST_TO_ADDR
36669: GO 36729
36671: LD_INT 32
36673: DOUBLE
36674: EQUAL
36675: IFTRUE 36679
36677: GO 36690
36679: POP
// bc_type := b_siberite_power ; 33 :
36680: LD_ADDR_OWVAR 42
36684: PUSH
36685: LD_INT 28
36687: ST_TO_ADDR
36688: GO 36729
36690: LD_INT 33
36692: DOUBLE
36693: EQUAL
36694: IFTRUE 36698
36696: GO 36709
36698: POP
// bc_type := b_oil_mine ; 34 :
36699: LD_ADDR_OWVAR 42
36703: PUSH
36704: LD_INT 29
36706: ST_TO_ADDR
36707: GO 36729
36709: LD_INT 34
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36728
36717: POP
// bc_type := b_siberite_mine ; end ;
36718: LD_ADDR_OWVAR 42
36722: PUSH
36723: LD_INT 30
36725: ST_TO_ADDR
36726: GO 36729
36728: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
36729: LD_ADDR_VAR 0 8
36733: PUSH
36734: LD_VAR 0 5
36738: PPUSH
36739: LD_VAR 0 6
36743: PPUSH
36744: LD_VAR 0 3
36748: PPUSH
36749: CALL_OW 47
36753: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
36754: LD_OWVAR 42
36758: PUSH
36759: LD_INT 32
36761: PUSH
36762: LD_INT 33
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: IN
36769: IFFALSE 36785
// PlaceWeaponTurret ( b , weapon ) ;
36771: LD_VAR 0 8
36775: PPUSH
36776: LD_VAR 0 4
36780: PPUSH
36781: CALL_OW 431
// end ;
36785: LD_VAR 0 7
36789: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
36794: PPUSH
36795: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36796: LD_ADDR_VAR 0 4
36800: PUSH
36801: LD_INT 22
36803: PUSH
36804: LD_OWVAR 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 30
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 30
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PPUSH
36845: CALL_OW 69
36849: ST_TO_ADDR
// if not tmp then
36850: LD_VAR 0 4
36854: NOT
36855: IFFALSE 36859
// exit ;
36857: GO 36918
// for i in tmp do
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_VAR 0 4
36868: PUSH
36869: FOR_IN
36870: IFFALSE 36916
// for j = 1 to 3 do
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: DOUBLE
36878: LD_INT 1
36880: DEC
36881: ST_TO_ADDR
36882: LD_INT 3
36884: PUSH
36885: FOR_TO
36886: IFFALSE 36912
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
36888: LD_VAR 0 2
36892: PPUSH
36893: CALL_OW 274
36897: PPUSH
36898: LD_VAR 0 3
36902: PPUSH
36903: LD_INT 99999
36905: PPUSH
36906: CALL_OW 277
36910: GO 36885
36912: POP
36913: POP
36914: GO 36869
36916: POP
36917: POP
// end ;
36918: LD_VAR 0 1
36922: RET
// export function hHackSetLevel10 ; var i , j ; begin
36923: LD_INT 0
36925: PPUSH
36926: PPUSH
36927: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36928: LD_ADDR_VAR 0 2
36932: PUSH
36933: LD_INT 21
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PPUSH
36943: CALL_OW 69
36947: PUSH
36948: FOR_IN
36949: IFFALSE 37001
// if IsSelected ( i ) then
36951: LD_VAR 0 2
36955: PPUSH
36956: CALL_OW 306
36960: IFFALSE 36999
// begin for j := 1 to 4 do
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: DOUBLE
36968: LD_INT 1
36970: DEC
36971: ST_TO_ADDR
36972: LD_INT 4
36974: PUSH
36975: FOR_TO
36976: IFFALSE 36997
// SetSkill ( i , j , 10 ) ;
36978: LD_VAR 0 2
36982: PPUSH
36983: LD_VAR 0 3
36987: PPUSH
36988: LD_INT 10
36990: PPUSH
36991: CALL_OW 237
36995: GO 36975
36997: POP
36998: POP
// end ;
36999: GO 36948
37001: POP
37002: POP
// end ;
37003: LD_VAR 0 1
37007: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
37008: LD_INT 0
37010: PPUSH
37011: PPUSH
37012: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
37013: LD_ADDR_VAR 0 2
37017: PUSH
37018: LD_INT 22
37020: PUSH
37021: LD_OWVAR 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 21
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL_OW 69
37048: PUSH
37049: FOR_IN
37050: IFFALSE 37091
// begin for j := 1 to 4 do
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: DOUBLE
37058: LD_INT 1
37060: DEC
37061: ST_TO_ADDR
37062: LD_INT 4
37064: PUSH
37065: FOR_TO
37066: IFFALSE 37087
// SetSkill ( i , j , 10 ) ;
37068: LD_VAR 0 2
37072: PPUSH
37073: LD_VAR 0 3
37077: PPUSH
37078: LD_INT 10
37080: PPUSH
37081: CALL_OW 237
37085: GO 37065
37087: POP
37088: POP
// end ;
37089: GO 37049
37091: POP
37092: POP
// end ;
37093: LD_VAR 0 1
37097: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
37098: LD_INT 0
37100: PPUSH
// uc_side := your_side ;
37101: LD_ADDR_OWVAR 20
37105: PUSH
37106: LD_OWVAR 2
37110: ST_TO_ADDR
// uc_nation := nation ;
37111: LD_ADDR_OWVAR 21
37115: PUSH
37116: LD_VAR 0 1
37120: ST_TO_ADDR
// InitHc ;
37121: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
37125: LD_INT 0
37127: PPUSH
37128: LD_VAR 0 2
37132: PPUSH
37133: LD_VAR 0 3
37137: PPUSH
37138: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
37142: LD_VAR 0 4
37146: PPUSH
37147: LD_VAR 0 5
37151: PPUSH
37152: CALL_OW 428
37156: PUSH
37157: LD_INT 0
37159: EQUAL
37160: IFFALSE 37184
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
37162: CALL_OW 44
37166: PPUSH
37167: LD_VAR 0 4
37171: PPUSH
37172: LD_VAR 0 5
37176: PPUSH
37177: LD_INT 1
37179: PPUSH
37180: CALL_OW 48
// end ;
37184: LD_VAR 0 6
37188: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
37189: LD_INT 0
37191: PPUSH
37192: PPUSH
// uc_side := your_side ;
37193: LD_ADDR_OWVAR 20
37197: PUSH
37198: LD_OWVAR 2
37202: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
37203: LD_VAR 0 1
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: LD_INT 4
37219: PUSH
37220: LD_INT 5
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: IN
37230: IFFALSE 37242
// uc_nation := nation_american else
37232: LD_ADDR_OWVAR 21
37236: PUSH
37237: LD_INT 1
37239: ST_TO_ADDR
37240: GO 37285
// if chassis in [ 11 , 12 , 13 , 14 ] then
37242: LD_VAR 0 1
37246: PUSH
37247: LD_INT 11
37249: PUSH
37250: LD_INT 12
37252: PUSH
37253: LD_INT 13
37255: PUSH
37256: LD_INT 14
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: IN
37265: IFFALSE 37277
// uc_nation := nation_arabian else
37267: LD_ADDR_OWVAR 21
37271: PUSH
37272: LD_INT 2
37274: ST_TO_ADDR
37275: GO 37285
// uc_nation := nation_russian ;
37277: LD_ADDR_OWVAR 21
37281: PUSH
37282: LD_INT 3
37284: ST_TO_ADDR
// vc_chassis := chassis ;
37285: LD_ADDR_OWVAR 37
37289: PUSH
37290: LD_VAR 0 1
37294: ST_TO_ADDR
// vc_engine := engine ;
37295: LD_ADDR_OWVAR 39
37299: PUSH
37300: LD_VAR 0 2
37304: ST_TO_ADDR
// vc_control := control ;
37305: LD_ADDR_OWVAR 38
37309: PUSH
37310: LD_VAR 0 3
37314: ST_TO_ADDR
// vc_weapon := weapon ;
37315: LD_ADDR_OWVAR 40
37319: PUSH
37320: LD_VAR 0 4
37324: ST_TO_ADDR
// un := CreateVehicle ;
37325: LD_ADDR_VAR 0 8
37329: PUSH
37330: CALL_OW 45
37334: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
37335: LD_VAR 0 8
37339: PPUSH
37340: LD_INT 0
37342: PPUSH
37343: LD_INT 5
37345: PPUSH
37346: CALL_OW 12
37350: PPUSH
37351: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
37355: LD_VAR 0 8
37359: PPUSH
37360: LD_VAR 0 5
37364: PPUSH
37365: LD_VAR 0 6
37369: PPUSH
37370: LD_INT 1
37372: PPUSH
37373: CALL_OW 48
// end ;
37377: LD_VAR 0 7
37381: RET
// export hInvincible ; every 1 do
37382: GO 37384
37384: DISABLE
// hInvincible := [ ] ;
37385: LD_ADDR_EXP 123
37389: PUSH
37390: EMPTY
37391: ST_TO_ADDR
37392: END
// every 10 do var i ;
37393: GO 37395
37395: DISABLE
37396: LD_INT 0
37398: PPUSH
// begin enable ;
37399: ENABLE
// if not hInvincible then
37400: LD_EXP 123
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37453
// for i in hInvincible do
37409: LD_ADDR_VAR 0 1
37413: PUSH
37414: LD_EXP 123
37418: PUSH
37419: FOR_IN
37420: IFFALSE 37451
// if GetLives ( i ) < 1000 then
37422: LD_VAR 0 1
37426: PPUSH
37427: CALL_OW 256
37431: PUSH
37432: LD_INT 1000
37434: LESS
37435: IFFALSE 37449
// SetLives ( i , 1000 ) ;
37437: LD_VAR 0 1
37441: PPUSH
37442: LD_INT 1000
37444: PPUSH
37445: CALL_OW 234
37449: GO 37419
37451: POP
37452: POP
// end ;
37453: PPOPN 1
37455: END
// export function hHackInvincible ; var i ; begin
37456: LD_INT 0
37458: PPUSH
37459: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
37460: LD_ADDR_VAR 0 2
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 21
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 21
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: PPUSH
37493: CALL_OW 69
37497: PUSH
37498: FOR_IN
37499: IFFALSE 37560
// if IsSelected ( i ) then
37501: LD_VAR 0 2
37505: PPUSH
37506: CALL_OW 306
37510: IFFALSE 37558
// begin if i in hInvincible then
37512: LD_VAR 0 2
37516: PUSH
37517: LD_EXP 123
37521: IN
37522: IFFALSE 37542
// hInvincible := hInvincible diff i else
37524: LD_ADDR_EXP 123
37528: PUSH
37529: LD_EXP 123
37533: PUSH
37534: LD_VAR 0 2
37538: DIFF
37539: ST_TO_ADDR
37540: GO 37558
// hInvincible := hInvincible union i ;
37542: LD_ADDR_EXP 123
37546: PUSH
37547: LD_EXP 123
37551: PUSH
37552: LD_VAR 0 2
37556: UNION
37557: ST_TO_ADDR
// end ;
37558: GO 37498
37560: POP
37561: POP
// end ;
37562: LD_VAR 0 1
37566: RET
// export function hHackInvisible ; var i , j ; begin
37567: LD_INT 0
37569: PPUSH
37570: PPUSH
37571: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
37572: LD_ADDR_VAR 0 2
37576: PUSH
37577: LD_INT 21
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PPUSH
37587: CALL_OW 69
37591: PUSH
37592: FOR_IN
37593: IFFALSE 37617
// if IsSelected ( i ) then
37595: LD_VAR 0 2
37599: PPUSH
37600: CALL_OW 306
37604: IFFALSE 37615
// ComForceInvisible ( i ) ;
37606: LD_VAR 0 2
37610: PPUSH
37611: CALL_OW 496
37615: GO 37592
37617: POP
37618: POP
// end ;
37619: LD_VAR 0 1
37623: RET
// export function hHackChangeYourSide ; begin
37624: LD_INT 0
37626: PPUSH
// if your_side = 8 then
37627: LD_OWVAR 2
37631: PUSH
37632: LD_INT 8
37634: EQUAL
37635: IFFALSE 37647
// your_side := 0 else
37637: LD_ADDR_OWVAR 2
37641: PUSH
37642: LD_INT 0
37644: ST_TO_ADDR
37645: GO 37661
// your_side := your_side + 1 ;
37647: LD_ADDR_OWVAR 2
37651: PUSH
37652: LD_OWVAR 2
37656: PUSH
37657: LD_INT 1
37659: PLUS
37660: ST_TO_ADDR
// end ;
37661: LD_VAR 0 1
37665: RET
// export function hHackChangeUnitSide ; var i , j ; begin
37666: LD_INT 0
37668: PPUSH
37669: PPUSH
37670: PPUSH
// for i in all_units do
37671: LD_ADDR_VAR 0 2
37675: PUSH
37676: LD_OWVAR 3
37680: PUSH
37681: FOR_IN
37682: IFFALSE 37760
// if IsSelected ( i ) then
37684: LD_VAR 0 2
37688: PPUSH
37689: CALL_OW 306
37693: IFFALSE 37758
// begin j := GetSide ( i ) ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_VAR 0 2
37704: PPUSH
37705: CALL_OW 255
37709: ST_TO_ADDR
// if j = 8 then
37710: LD_VAR 0 3
37714: PUSH
37715: LD_INT 8
37717: EQUAL
37718: IFFALSE 37730
// j := 0 else
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
37728: GO 37744
// j := j + 1 ;
37730: LD_ADDR_VAR 0 3
37734: PUSH
37735: LD_VAR 0 3
37739: PUSH
37740: LD_INT 1
37742: PLUS
37743: ST_TO_ADDR
// SetSide ( i , j ) ;
37744: LD_VAR 0 2
37748: PPUSH
37749: LD_VAR 0 3
37753: PPUSH
37754: CALL_OW 235
// end ;
37758: GO 37681
37760: POP
37761: POP
// end ;
37762: LD_VAR 0 1
37766: RET
// export function hHackFog ; begin
37767: LD_INT 0
37769: PPUSH
// FogOff ( true ) ;
37770: LD_INT 1
37772: PPUSH
37773: CALL_OW 344
// end ;
37777: LD_VAR 0 1
37781: RET
// export function hHackTeleport ( unit , x , y ) ; begin
37782: LD_INT 0
37784: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
37785: LD_VAR 0 1
37789: PPUSH
37790: LD_VAR 0 2
37794: PPUSH
37795: LD_VAR 0 3
37799: PPUSH
37800: LD_INT 1
37802: PPUSH
37803: LD_INT 1
37805: PPUSH
37806: CALL_OW 483
// CenterOnXY ( x , y ) ;
37810: LD_VAR 0 2
37814: PPUSH
37815: LD_VAR 0 3
37819: PPUSH
37820: CALL_OW 84
// end ; end_of_file
37824: LD_VAR 0 4
37828: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37829: LD_INT 0
37831: PPUSH
37832: PPUSH
37833: PPUSH
37834: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37835: LD_VAR 0 1
37839: PPUSH
37840: CALL_OW 264
37844: PUSH
37845: LD_EXP 55
37849: EQUAL
37850: IFFALSE 37922
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37852: LD_INT 68
37854: PPUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 255
37864: PPUSH
37865: CALL_OW 321
37869: PUSH
37870: LD_INT 2
37872: EQUAL
37873: IFFALSE 37885
// eff := 70 else
37875: LD_ADDR_VAR 0 4
37879: PUSH
37880: LD_INT 70
37882: ST_TO_ADDR
37883: GO 37893
// eff := 30 ;
37885: LD_ADDR_VAR 0 4
37889: PUSH
37890: LD_INT 30
37892: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 250
37902: PPUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 251
37912: PPUSH
37913: LD_VAR 0 4
37917: PPUSH
37918: CALL_OW 495
// end ; end ;
37922: LD_VAR 0 2
37926: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37927: LD_INT 0
37929: PPUSH
// end ;
37930: LD_VAR 0 4
37934: RET
// export function SOS_Command ( cmd ) ; begin
37935: LD_INT 0
37937: PPUSH
// end ;
37938: LD_VAR 0 2
37942: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37943: LD_INT 0
37945: PPUSH
// if cmd = 121 then
37946: LD_VAR 0 1
37950: PUSH
37951: LD_INT 121
37953: EQUAL
37954: IFFALSE 37956
// end ;
37956: LD_VAR 0 6
37960: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37961: LD_INT 0
37963: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37964: LD_VAR 0 1
37968: PUSH
37969: LD_INT 250
37971: EQUAL
37972: PUSH
37973: LD_VAR 0 2
37977: PPUSH
37978: CALL_OW 264
37982: PUSH
37983: LD_EXP 58
37987: EQUAL
37988: AND
37989: IFFALSE 38010
// MinerPlaceMine ( unit , x , y ) ;
37991: LD_VAR 0 2
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: LD_VAR 0 5
38005: PPUSH
38006: CALL 40359 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38010: LD_VAR 0 1
38014: PUSH
38015: LD_INT 251
38017: EQUAL
38018: PUSH
38019: LD_VAR 0 2
38023: PPUSH
38024: CALL_OW 264
38028: PUSH
38029: LD_EXP 58
38033: EQUAL
38034: AND
38035: IFFALSE 38056
// MinerDetonateMine ( unit , x , y ) ;
38037: LD_VAR 0 2
38041: PPUSH
38042: LD_VAR 0 4
38046: PPUSH
38047: LD_VAR 0 5
38051: PPUSH
38052: CALL 40636 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38056: LD_VAR 0 1
38060: PUSH
38061: LD_INT 252
38063: EQUAL
38064: PUSH
38065: LD_VAR 0 2
38069: PPUSH
38070: CALL_OW 264
38074: PUSH
38075: LD_EXP 58
38079: EQUAL
38080: AND
38081: IFFALSE 38102
// MinerCreateMinefield ( unit , x , y ) ;
38083: LD_VAR 0 2
38087: PPUSH
38088: LD_VAR 0 4
38092: PPUSH
38093: LD_VAR 0 5
38097: PPUSH
38098: CALL 41053 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38102: LD_VAR 0 1
38106: PUSH
38107: LD_INT 253
38109: EQUAL
38110: PUSH
38111: LD_VAR 0 2
38115: PPUSH
38116: CALL_OW 257
38120: PUSH
38121: LD_INT 5
38123: EQUAL
38124: AND
38125: IFFALSE 38146
// ComBinocular ( unit , x , y ) ;
38127: LD_VAR 0 2
38131: PPUSH
38132: LD_VAR 0 4
38136: PPUSH
38137: LD_VAR 0 5
38141: PPUSH
38142: CALL 41424 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38146: LD_VAR 0 1
38150: PUSH
38151: LD_INT 254
38153: EQUAL
38154: PUSH
38155: LD_VAR 0 2
38159: PPUSH
38160: CALL_OW 264
38164: PUSH
38165: LD_EXP 53
38169: EQUAL
38170: AND
38171: PUSH
38172: LD_VAR 0 3
38176: PPUSH
38177: CALL_OW 263
38181: PUSH
38182: LD_INT 3
38184: EQUAL
38185: AND
38186: IFFALSE 38202
// HackDestroyVehicle ( unit , selectedUnit ) ;
38188: LD_VAR 0 2
38192: PPUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: CALL 39719 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38202: LD_VAR 0 1
38206: PUSH
38207: LD_INT 255
38209: EQUAL
38210: PUSH
38211: LD_VAR 0 2
38215: PPUSH
38216: CALL_OW 264
38220: PUSH
38221: LD_INT 14
38223: PUSH
38224: LD_INT 53
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: IN
38231: AND
38232: PUSH
38233: LD_VAR 0 4
38237: PPUSH
38238: LD_VAR 0 5
38242: PPUSH
38243: CALL_OW 488
38247: AND
38248: IFFALSE 38272
// CutTreeXYR ( unit , x , y , 12 ) ;
38250: LD_VAR 0 2
38254: PPUSH
38255: LD_VAR 0 4
38259: PPUSH
38260: LD_VAR 0 5
38264: PPUSH
38265: LD_INT 12
38267: PPUSH
38268: CALL 38285 0 4
// end ;
38272: LD_VAR 0 6
38276: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
38277: LD_INT 0
38279: PPUSH
// end ;
38280: LD_VAR 0 4
38284: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
38296: LD_VAR 0 1
38300: NOT
38301: PUSH
38302: LD_VAR 0 2
38306: PPUSH
38307: LD_VAR 0 3
38311: PPUSH
38312: CALL_OW 488
38316: NOT
38317: OR
38318: PUSH
38319: LD_VAR 0 4
38323: NOT
38324: OR
38325: IFFALSE 38329
// exit ;
38327: GO 38669
// list := [ ] ;
38329: LD_ADDR_VAR 0 13
38333: PUSH
38334: EMPTY
38335: ST_TO_ADDR
// if x - r < 0 then
38336: LD_VAR 0 2
38340: PUSH
38341: LD_VAR 0 4
38345: MINUS
38346: PUSH
38347: LD_INT 0
38349: LESS
38350: IFFALSE 38362
// min_x := 0 else
38352: LD_ADDR_VAR 0 7
38356: PUSH
38357: LD_INT 0
38359: ST_TO_ADDR
38360: GO 38378
// min_x := x - r ;
38362: LD_ADDR_VAR 0 7
38366: PUSH
38367: LD_VAR 0 2
38371: PUSH
38372: LD_VAR 0 4
38376: MINUS
38377: ST_TO_ADDR
// if y - r < 0 then
38378: LD_VAR 0 3
38382: PUSH
38383: LD_VAR 0 4
38387: MINUS
38388: PUSH
38389: LD_INT 0
38391: LESS
38392: IFFALSE 38404
// min_y := 0 else
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_INT 0
38401: ST_TO_ADDR
38402: GO 38420
// min_y := y - r ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_VAR 0 3
38413: PUSH
38414: LD_VAR 0 4
38418: MINUS
38419: ST_TO_ADDR
// max_x := x + r ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_VAR 0 2
38429: PUSH
38430: LD_VAR 0 4
38434: PLUS
38435: ST_TO_ADDR
// max_y := y + r ;
38436: LD_ADDR_VAR 0 10
38440: PUSH
38441: LD_VAR 0 3
38445: PUSH
38446: LD_VAR 0 4
38450: PLUS
38451: ST_TO_ADDR
// for _x = min_x to max_x do
38452: LD_ADDR_VAR 0 11
38456: PUSH
38457: DOUBLE
38458: LD_VAR 0 7
38462: DEC
38463: ST_TO_ADDR
38464: LD_VAR 0 9
38468: PUSH
38469: FOR_TO
38470: IFFALSE 38587
// for _y = min_y to max_y do
38472: LD_ADDR_VAR 0 12
38476: PUSH
38477: DOUBLE
38478: LD_VAR 0 8
38482: DEC
38483: ST_TO_ADDR
38484: LD_VAR 0 10
38488: PUSH
38489: FOR_TO
38490: IFFALSE 38583
// begin if not ValidHex ( _x , _y ) then
38492: LD_VAR 0 11
38496: PPUSH
38497: LD_VAR 0 12
38501: PPUSH
38502: CALL_OW 488
38506: NOT
38507: IFFALSE 38511
// continue ;
38509: GO 38489
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38511: LD_VAR 0 11
38515: PPUSH
38516: LD_VAR 0 12
38520: PPUSH
38521: CALL_OW 351
38525: PUSH
38526: LD_VAR 0 11
38530: PPUSH
38531: LD_VAR 0 12
38535: PPUSH
38536: CALL_OW 554
38540: AND
38541: IFFALSE 38581
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38543: LD_ADDR_VAR 0 13
38547: PUSH
38548: LD_VAR 0 13
38552: PPUSH
38553: LD_VAR 0 13
38557: PUSH
38558: LD_INT 1
38560: PLUS
38561: PPUSH
38562: LD_VAR 0 11
38566: PUSH
38567: LD_VAR 0 12
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 2
38580: ST_TO_ADDR
// end ;
38581: GO 38489
38583: POP
38584: POP
38585: GO 38469
38587: POP
38588: POP
// if not list then
38589: LD_VAR 0 13
38593: NOT
38594: IFFALSE 38598
// exit ;
38596: GO 38669
// for i in list do
38598: LD_ADDR_VAR 0 6
38602: PUSH
38603: LD_VAR 0 13
38607: PUSH
38608: FOR_IN
38609: IFFALSE 38667
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_STRING M
38618: PUSH
38619: LD_VAR 0 6
38623: PUSH
38624: LD_INT 1
38626: ARRAY
38627: PUSH
38628: LD_VAR 0 6
38632: PUSH
38633: LD_INT 2
38635: ARRAY
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: PPUSH
38661: CALL_OW 447
38665: GO 38608
38667: POP
38668: POP
// end ;
38669: LD_VAR 0 5
38673: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38674: LD_EXP 126
38678: NOT
38679: IFFALSE 38729
38681: GO 38683
38683: DISABLE
// begin initHack := true ;
38684: LD_ADDR_EXP 126
38688: PUSH
38689: LD_INT 1
38691: ST_TO_ADDR
// hackTanks := [ ] ;
38692: LD_ADDR_EXP 127
38696: PUSH
38697: EMPTY
38698: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38699: LD_ADDR_EXP 128
38703: PUSH
38704: EMPTY
38705: ST_TO_ADDR
// hackLimit := 3 ;
38706: LD_ADDR_EXP 129
38710: PUSH
38711: LD_INT 3
38713: ST_TO_ADDR
// hackDist := 12 ;
38714: LD_ADDR_EXP 130
38718: PUSH
38719: LD_INT 12
38721: ST_TO_ADDR
// hackCounter := [ ] ;
38722: LD_ADDR_EXP 131
38726: PUSH
38727: EMPTY
38728: ST_TO_ADDR
// end ;
38729: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38730: LD_EXP 126
38734: PUSH
38735: LD_INT 34
38737: PUSH
38738: LD_EXP 53
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PPUSH
38747: CALL_OW 69
38751: AND
38752: IFFALSE 39007
38754: GO 38756
38756: DISABLE
38757: LD_INT 0
38759: PPUSH
38760: PPUSH
// begin enable ;
38761: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38762: LD_ADDR_VAR 0 1
38766: PUSH
38767: LD_INT 34
38769: PUSH
38770: LD_EXP 53
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 69
38783: PUSH
38784: FOR_IN
38785: IFFALSE 39005
// begin if not i in hackTanks then
38787: LD_VAR 0 1
38791: PUSH
38792: LD_EXP 127
38796: IN
38797: NOT
38798: IFFALSE 38881
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38800: LD_ADDR_EXP 127
38804: PUSH
38805: LD_EXP 127
38809: PPUSH
38810: LD_EXP 127
38814: PUSH
38815: LD_INT 1
38817: PLUS
38818: PPUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: CALL_OW 1
38828: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38829: LD_ADDR_EXP 128
38833: PUSH
38834: LD_EXP 128
38838: PPUSH
38839: LD_EXP 128
38843: PUSH
38844: LD_INT 1
38846: PLUS
38847: PPUSH
38848: EMPTY
38849: PPUSH
38850: CALL_OW 1
38854: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38855: LD_ADDR_EXP 131
38859: PUSH
38860: LD_EXP 131
38864: PPUSH
38865: LD_EXP 131
38869: PUSH
38870: LD_INT 1
38872: PLUS
38873: PPUSH
38874: EMPTY
38875: PPUSH
38876: CALL_OW 1
38880: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 302
38890: NOT
38891: IFFALSE 38904
// begin HackUnlinkAll ( i ) ;
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL 39010 0 1
// continue ;
38902: GO 38784
// end ; HackCheckCapturedStatus ( i ) ;
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL 39453 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38913: LD_ADDR_VAR 0 2
38917: PUSH
38918: LD_INT 81
38920: PUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 255
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 33
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 91
38947: PUSH
38948: LD_VAR 0 1
38952: PUSH
38953: LD_EXP 130
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 50
38965: PUSH
38966: EMPTY
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 69
38979: ST_TO_ADDR
// if not tmp then
38980: LD_VAR 0 2
38984: NOT
38985: IFFALSE 38989
// continue ;
38987: GO 38784
// HackLink ( i , tmp ) ;
38989: LD_VAR 0 1
38993: PPUSH
38994: LD_VAR 0 2
38998: PPUSH
38999: CALL 39146 0 2
// end ;
39003: GO 38784
39005: POP
39006: POP
// end ;
39007: PPOPN 2
39009: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39010: LD_INT 0
39012: PPUSH
39013: PPUSH
39014: PPUSH
// if not hack in hackTanks then
39015: LD_VAR 0 1
39019: PUSH
39020: LD_EXP 127
39024: IN
39025: NOT
39026: IFFALSE 39030
// exit ;
39028: GO 39141
// index := GetElementIndex ( hackTanks , hack ) ;
39030: LD_ADDR_VAR 0 4
39034: PUSH
39035: LD_EXP 127
39039: PPUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL 46575 0 2
39049: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39050: LD_EXP 128
39054: PUSH
39055: LD_VAR 0 4
39059: ARRAY
39060: IFFALSE 39141
// begin for i in hackTanksCaptured [ index ] do
39062: LD_ADDR_VAR 0 3
39066: PUSH
39067: LD_EXP 128
39071: PUSH
39072: LD_VAR 0 4
39076: ARRAY
39077: PUSH
39078: FOR_IN
39079: IFFALSE 39105
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39081: LD_VAR 0 3
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PPUSH
39090: LD_VAR 0 3
39094: PUSH
39095: LD_INT 2
39097: ARRAY
39098: PPUSH
39099: CALL_OW 235
39103: GO 39078
39105: POP
39106: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39107: LD_ADDR_EXP 128
39111: PUSH
39112: LD_EXP 128
39116: PPUSH
39117: LD_VAR 0 4
39121: PPUSH
39122: EMPTY
39123: PPUSH
39124: CALL_OW 1
39128: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39129: LD_VAR 0 1
39133: PPUSH
39134: LD_INT 0
39136: PPUSH
39137: CALL_OW 505
// end ; end ;
39141: LD_VAR 0 2
39145: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39146: LD_INT 0
39148: PPUSH
39149: PPUSH
39150: PPUSH
// if not hack in hackTanks or not vehicles then
39151: LD_VAR 0 1
39155: PUSH
39156: LD_EXP 127
39160: IN
39161: NOT
39162: PUSH
39163: LD_VAR 0 2
39167: NOT
39168: OR
39169: IFFALSE 39173
// exit ;
39171: GO 39448
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39173: LD_ADDR_VAR 0 2
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: LD_VAR 0 2
39187: PPUSH
39188: LD_INT 1
39190: PPUSH
39191: LD_INT 1
39193: PPUSH
39194: CALL 47225 0 4
39198: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39199: LD_ADDR_VAR 0 5
39203: PUSH
39204: LD_EXP 127
39208: PPUSH
39209: LD_VAR 0 1
39213: PPUSH
39214: CALL 46575 0 2
39218: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39219: LD_EXP 128
39223: PUSH
39224: LD_VAR 0 5
39228: ARRAY
39229: PUSH
39230: LD_EXP 129
39234: LESS
39235: IFFALSE 39424
// begin for i := 1 to vehicles do
39237: LD_ADDR_VAR 0 4
39241: PUSH
39242: DOUBLE
39243: LD_INT 1
39245: DEC
39246: ST_TO_ADDR
39247: LD_VAR 0 2
39251: PUSH
39252: FOR_TO
39253: IFFALSE 39422
// begin if hackTanksCaptured [ index ] = hackLimit then
39255: LD_EXP 128
39259: PUSH
39260: LD_VAR 0 5
39264: ARRAY
39265: PUSH
39266: LD_EXP 129
39270: EQUAL
39271: IFFALSE 39275
// break ;
39273: GO 39422
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39275: LD_ADDR_EXP 131
39279: PUSH
39280: LD_EXP 131
39284: PPUSH
39285: LD_VAR 0 5
39289: PPUSH
39290: LD_EXP 131
39294: PUSH
39295: LD_VAR 0 5
39299: ARRAY
39300: PUSH
39301: LD_INT 1
39303: PLUS
39304: PPUSH
39305: CALL_OW 1
39309: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39310: LD_ADDR_EXP 128
39314: PUSH
39315: LD_EXP 128
39319: PPUSH
39320: LD_VAR 0 5
39324: PUSH
39325: LD_EXP 128
39329: PUSH
39330: LD_VAR 0 5
39334: ARRAY
39335: PUSH
39336: LD_INT 1
39338: PLUS
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PPUSH
39344: LD_VAR 0 2
39348: PUSH
39349: LD_VAR 0 4
39353: ARRAY
39354: PUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_VAR 0 4
39364: ARRAY
39365: PPUSH
39366: CALL_OW 255
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PPUSH
39375: CALL 46790 0 3
39379: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39380: LD_VAR 0 2
39384: PUSH
39385: LD_VAR 0 4
39389: ARRAY
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 255
39400: PPUSH
39401: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39405: LD_VAR 0 2
39409: PUSH
39410: LD_VAR 0 4
39414: ARRAY
39415: PPUSH
39416: CALL_OW 141
// end ;
39420: GO 39252
39422: POP
39423: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39424: LD_VAR 0 1
39428: PPUSH
39429: LD_EXP 128
39433: PUSH
39434: LD_VAR 0 5
39438: ARRAY
39439: PUSH
39440: LD_INT 0
39442: PLUS
39443: PPUSH
39444: CALL_OW 505
// end ;
39448: LD_VAR 0 3
39452: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39453: LD_INT 0
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
// if not hack in hackTanks then
39459: LD_VAR 0 1
39463: PUSH
39464: LD_EXP 127
39468: IN
39469: NOT
39470: IFFALSE 39474
// exit ;
39472: GO 39714
// index := GetElementIndex ( hackTanks , hack ) ;
39474: LD_ADDR_VAR 0 4
39478: PUSH
39479: LD_EXP 127
39483: PPUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL 46575 0 2
39493: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: DOUBLE
39500: LD_EXP 128
39504: PUSH
39505: LD_VAR 0 4
39509: ARRAY
39510: INC
39511: ST_TO_ADDR
39512: LD_INT 1
39514: PUSH
39515: FOR_DOWNTO
39516: IFFALSE 39688
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_EXP 128
39527: PUSH
39528: LD_VAR 0 4
39532: ARRAY
39533: PUSH
39534: LD_VAR 0 3
39538: ARRAY
39539: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39540: LD_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: PPUSH
39549: CALL_OW 302
39553: NOT
39554: PUSH
39555: LD_VAR 0 5
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: PPUSH
39564: CALL_OW 255
39568: PUSH
39569: LD_VAR 0 1
39573: PPUSH
39574: CALL_OW 255
39578: NONEQUAL
39579: OR
39580: IFFALSE 39686
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39582: LD_VAR 0 5
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: PPUSH
39591: CALL_OW 305
39595: PUSH
39596: LD_VAR 0 5
39600: PUSH
39601: LD_INT 1
39603: ARRAY
39604: PPUSH
39605: CALL_OW 255
39609: PUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 255
39619: EQUAL
39620: AND
39621: IFFALSE 39645
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39623: LD_VAR 0 5
39627: PUSH
39628: LD_INT 1
39630: ARRAY
39631: PPUSH
39632: LD_VAR 0 5
39636: PUSH
39637: LD_INT 2
39639: ARRAY
39640: PPUSH
39641: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39645: LD_ADDR_EXP 128
39649: PUSH
39650: LD_EXP 128
39654: PPUSH
39655: LD_VAR 0 4
39659: PPUSH
39660: LD_EXP 128
39664: PUSH
39665: LD_VAR 0 4
39669: ARRAY
39670: PPUSH
39671: LD_VAR 0 3
39675: PPUSH
39676: CALL_OW 3
39680: PPUSH
39681: CALL_OW 1
39685: ST_TO_ADDR
// end ; end ;
39686: GO 39515
39688: POP
39689: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39690: LD_VAR 0 1
39694: PPUSH
39695: LD_EXP 128
39699: PUSH
39700: LD_VAR 0 4
39704: ARRAY
39705: PUSH
39706: LD_INT 0
39708: PLUS
39709: PPUSH
39710: CALL_OW 505
// end ;
39714: LD_VAR 0 2
39718: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39719: LD_INT 0
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
// if not hack in hackTanks then
39725: LD_VAR 0 1
39729: PUSH
39730: LD_EXP 127
39734: IN
39735: NOT
39736: IFFALSE 39740
// exit ;
39738: GO 39825
// index := GetElementIndex ( hackTanks , hack ) ;
39740: LD_ADDR_VAR 0 5
39744: PUSH
39745: LD_EXP 127
39749: PPUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL 46575 0 2
39759: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: DOUBLE
39766: LD_INT 1
39768: DEC
39769: ST_TO_ADDR
39770: LD_EXP 128
39774: PUSH
39775: LD_VAR 0 5
39779: ARRAY
39780: PUSH
39781: FOR_TO
39782: IFFALSE 39823
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39784: LD_EXP 128
39788: PUSH
39789: LD_VAR 0 5
39793: ARRAY
39794: PUSH
39795: LD_VAR 0 4
39799: ARRAY
39800: PUSH
39801: LD_INT 1
39803: ARRAY
39804: PUSH
39805: LD_VAR 0 2
39809: EQUAL
39810: IFFALSE 39821
// KillUnit ( vehicle ) ;
39812: LD_VAR 0 2
39816: PPUSH
39817: CALL_OW 66
39821: GO 39781
39823: POP
39824: POP
// end ;
39825: LD_VAR 0 3
39829: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39830: LD_EXP 132
39834: NOT
39835: IFFALSE 39870
39837: GO 39839
39839: DISABLE
// begin initMiner := true ;
39840: LD_ADDR_EXP 132
39844: PUSH
39845: LD_INT 1
39847: ST_TO_ADDR
// minersList := [ ] ;
39848: LD_ADDR_EXP 133
39852: PUSH
39853: EMPTY
39854: ST_TO_ADDR
// minerMinesList := [ ] ;
39855: LD_ADDR_EXP 134
39859: PUSH
39860: EMPTY
39861: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39862: LD_ADDR_EXP 135
39866: PUSH
39867: LD_INT 5
39869: ST_TO_ADDR
// end ;
39870: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39871: LD_EXP 132
39875: PUSH
39876: LD_INT 34
39878: PUSH
39879: LD_EXP 58
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PPUSH
39888: CALL_OW 69
39892: AND
39893: IFFALSE 40356
39895: GO 39897
39897: DISABLE
39898: LD_INT 0
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
// begin enable ;
39904: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39905: LD_ADDR_VAR 0 1
39909: PUSH
39910: LD_INT 34
39912: PUSH
39913: LD_EXP 58
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PPUSH
39922: CALL_OW 69
39926: PUSH
39927: FOR_IN
39928: IFFALSE 40000
// begin if not i in minersList then
39930: LD_VAR 0 1
39934: PUSH
39935: LD_EXP 133
39939: IN
39940: NOT
39941: IFFALSE 39998
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39943: LD_ADDR_EXP 133
39947: PUSH
39948: LD_EXP 133
39952: PPUSH
39953: LD_EXP 133
39957: PUSH
39958: LD_INT 1
39960: PLUS
39961: PPUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 1
39971: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39972: LD_ADDR_EXP 134
39976: PUSH
39977: LD_EXP 134
39981: PPUSH
39982: LD_EXP 134
39986: PUSH
39987: LD_INT 1
39989: PLUS
39990: PPUSH
39991: EMPTY
39992: PPUSH
39993: CALL_OW 1
39997: ST_TO_ADDR
// end end ;
39998: GO 39927
40000: POP
40001: POP
// for i := minerMinesList downto 1 do
40002: LD_ADDR_VAR 0 1
40006: PUSH
40007: DOUBLE
40008: LD_EXP 134
40012: INC
40013: ST_TO_ADDR
40014: LD_INT 1
40016: PUSH
40017: FOR_DOWNTO
40018: IFFALSE 40354
// begin if IsLive ( minersList [ i ] ) then
40020: LD_EXP 133
40024: PUSH
40025: LD_VAR 0 1
40029: ARRAY
40030: PPUSH
40031: CALL_OW 300
40035: IFFALSE 40063
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40037: LD_EXP 133
40041: PUSH
40042: LD_VAR 0 1
40046: ARRAY
40047: PPUSH
40048: LD_EXP 134
40052: PUSH
40053: LD_VAR 0 1
40057: ARRAY
40058: PPUSH
40059: CALL_OW 505
// if not minerMinesList [ i ] then
40063: LD_EXP 134
40067: PUSH
40068: LD_VAR 0 1
40072: ARRAY
40073: NOT
40074: IFFALSE 40078
// continue ;
40076: GO 40017
// for j := minerMinesList [ i ] downto 1 do
40078: LD_ADDR_VAR 0 2
40082: PUSH
40083: DOUBLE
40084: LD_EXP 134
40088: PUSH
40089: LD_VAR 0 1
40093: ARRAY
40094: INC
40095: ST_TO_ADDR
40096: LD_INT 1
40098: PUSH
40099: FOR_DOWNTO
40100: IFFALSE 40350
// begin side := GetSide ( minersList [ i ] ) ;
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_EXP 133
40111: PUSH
40112: LD_VAR 0 1
40116: ARRAY
40117: PPUSH
40118: CALL_OW 255
40122: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40123: LD_ADDR_VAR 0 4
40127: PUSH
40128: LD_EXP 134
40132: PUSH
40133: LD_VAR 0 1
40137: ARRAY
40138: PUSH
40139: LD_VAR 0 2
40143: ARRAY
40144: PUSH
40145: LD_INT 1
40147: ARRAY
40148: PPUSH
40149: LD_EXP 134
40153: PUSH
40154: LD_VAR 0 1
40158: ARRAY
40159: PUSH
40160: LD_VAR 0 2
40164: ARRAY
40165: PUSH
40166: LD_INT 2
40168: ARRAY
40169: PPUSH
40170: CALL_OW 428
40174: ST_TO_ADDR
// if not tmp then
40175: LD_VAR 0 4
40179: NOT
40180: IFFALSE 40184
// continue ;
40182: GO 40099
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40184: LD_VAR 0 4
40188: PUSH
40189: LD_INT 81
40191: PUSH
40192: LD_VAR 0 3
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PPUSH
40201: CALL_OW 69
40205: IN
40206: PUSH
40207: LD_EXP 134
40211: PUSH
40212: LD_VAR 0 1
40216: ARRAY
40217: PUSH
40218: LD_VAR 0 2
40222: ARRAY
40223: PUSH
40224: LD_INT 1
40226: ARRAY
40227: PPUSH
40228: LD_EXP 134
40232: PUSH
40233: LD_VAR 0 1
40237: ARRAY
40238: PUSH
40239: LD_VAR 0 2
40243: ARRAY
40244: PUSH
40245: LD_INT 2
40247: ARRAY
40248: PPUSH
40249: CALL_OW 458
40253: AND
40254: IFFALSE 40348
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40256: LD_EXP 134
40260: PUSH
40261: LD_VAR 0 1
40265: ARRAY
40266: PUSH
40267: LD_VAR 0 2
40271: ARRAY
40272: PUSH
40273: LD_INT 1
40275: ARRAY
40276: PPUSH
40277: LD_EXP 134
40281: PUSH
40282: LD_VAR 0 1
40286: ARRAY
40287: PUSH
40288: LD_VAR 0 2
40292: ARRAY
40293: PUSH
40294: LD_INT 2
40296: ARRAY
40297: PPUSH
40298: LD_VAR 0 3
40302: PPUSH
40303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40307: LD_ADDR_EXP 134
40311: PUSH
40312: LD_EXP 134
40316: PPUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: LD_EXP 134
40326: PUSH
40327: LD_VAR 0 1
40331: ARRAY
40332: PPUSH
40333: LD_VAR 0 2
40337: PPUSH
40338: CALL_OW 3
40342: PPUSH
40343: CALL_OW 1
40347: ST_TO_ADDR
// end ; end ;
40348: GO 40099
40350: POP
40351: POP
// end ;
40352: GO 40017
40354: POP
40355: POP
// end ;
40356: PPOPN 4
40358: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40359: LD_INT 0
40361: PPUSH
40362: PPUSH
// result := false ;
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: LD_INT 0
40370: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40371: LD_VAR 0 1
40375: PPUSH
40376: CALL_OW 264
40380: PUSH
40381: LD_EXP 58
40385: EQUAL
40386: NOT
40387: IFFALSE 40391
// exit ;
40389: GO 40631
// index := GetElementIndex ( minersList , unit ) ;
40391: LD_ADDR_VAR 0 5
40395: PUSH
40396: LD_EXP 133
40400: PPUSH
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL 46575 0 2
40410: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40411: LD_EXP 134
40415: PUSH
40416: LD_VAR 0 5
40420: ARRAY
40421: PUSH
40422: LD_EXP 135
40426: GREATEREQUAL
40427: IFFALSE 40431
// exit ;
40429: GO 40631
// ComMoveXY ( unit , x , y ) ;
40431: LD_VAR 0 1
40435: PPUSH
40436: LD_VAR 0 2
40440: PPUSH
40441: LD_VAR 0 3
40445: PPUSH
40446: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40450: LD_INT 35
40452: PPUSH
40453: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40457: LD_VAR 0 1
40461: PPUSH
40462: LD_VAR 0 2
40466: PPUSH
40467: LD_VAR 0 3
40471: PPUSH
40472: CALL 76972 0 3
40476: NOT
40477: PUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: CALL_OW 314
40487: AND
40488: IFFALSE 40492
// exit ;
40490: GO 40631
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40492: LD_VAR 0 2
40496: PPUSH
40497: LD_VAR 0 3
40501: PPUSH
40502: CALL_OW 428
40506: PUSH
40507: LD_VAR 0 1
40511: EQUAL
40512: PUSH
40513: LD_VAR 0 1
40517: PPUSH
40518: CALL_OW 314
40522: NOT
40523: AND
40524: IFFALSE 40450
// PlaySoundXY ( x , y , PlantMine ) ;
40526: LD_VAR 0 2
40530: PPUSH
40531: LD_VAR 0 3
40535: PPUSH
40536: LD_STRING PlantMine
40538: PPUSH
40539: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40543: LD_VAR 0 2
40547: PPUSH
40548: LD_VAR 0 3
40552: PPUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 255
40562: PPUSH
40563: LD_INT 0
40565: PPUSH
40566: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40570: LD_ADDR_EXP 134
40574: PUSH
40575: LD_EXP 134
40579: PPUSH
40580: LD_VAR 0 5
40584: PUSH
40585: LD_EXP 134
40589: PUSH
40590: LD_VAR 0 5
40594: ARRAY
40595: PUSH
40596: LD_INT 1
40598: PLUS
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PPUSH
40604: LD_VAR 0 2
40608: PUSH
40609: LD_VAR 0 3
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PPUSH
40618: CALL 46790 0 3
40622: ST_TO_ADDR
// result := true ;
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: LD_INT 1
40630: ST_TO_ADDR
// end ;
40631: LD_VAR 0 4
40635: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
40640: PPUSH
// if not unit in minersList then
40641: LD_VAR 0 1
40645: PUSH
40646: LD_EXP 133
40650: IN
40651: NOT
40652: IFFALSE 40656
// exit ;
40654: GO 41048
// index := GetElementIndex ( minersList , unit ) ;
40656: LD_ADDR_VAR 0 6
40660: PUSH
40661: LD_EXP 133
40665: PPUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL 46575 0 2
40675: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40676: LD_ADDR_VAR 0 5
40680: PUSH
40681: DOUBLE
40682: LD_EXP 134
40686: PUSH
40687: LD_VAR 0 6
40691: ARRAY
40692: INC
40693: ST_TO_ADDR
40694: LD_INT 1
40696: PUSH
40697: FOR_DOWNTO
40698: IFFALSE 40859
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40700: LD_EXP 134
40704: PUSH
40705: LD_VAR 0 6
40709: ARRAY
40710: PUSH
40711: LD_VAR 0 5
40715: ARRAY
40716: PUSH
40717: LD_INT 1
40719: ARRAY
40720: PUSH
40721: LD_VAR 0 2
40725: EQUAL
40726: PUSH
40727: LD_EXP 134
40731: PUSH
40732: LD_VAR 0 6
40736: ARRAY
40737: PUSH
40738: LD_VAR 0 5
40742: ARRAY
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: PUSH
40748: LD_VAR 0 3
40752: EQUAL
40753: AND
40754: IFFALSE 40857
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40756: LD_EXP 134
40760: PUSH
40761: LD_VAR 0 6
40765: ARRAY
40766: PUSH
40767: LD_VAR 0 5
40771: ARRAY
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: LD_EXP 134
40781: PUSH
40782: LD_VAR 0 6
40786: ARRAY
40787: PUSH
40788: LD_VAR 0 5
40792: ARRAY
40793: PUSH
40794: LD_INT 2
40796: ARRAY
40797: PPUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 255
40807: PPUSH
40808: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40812: LD_ADDR_EXP 134
40816: PUSH
40817: LD_EXP 134
40821: PPUSH
40822: LD_VAR 0 6
40826: PPUSH
40827: LD_EXP 134
40831: PUSH
40832: LD_VAR 0 6
40836: ARRAY
40837: PPUSH
40838: LD_VAR 0 5
40842: PPUSH
40843: CALL_OW 3
40847: PPUSH
40848: CALL_OW 1
40852: ST_TO_ADDR
// exit ;
40853: POP
40854: POP
40855: GO 41048
// end ; end ;
40857: GO 40697
40859: POP
40860: POP
// for i := minerMinesList [ index ] downto 1 do
40861: LD_ADDR_VAR 0 5
40865: PUSH
40866: DOUBLE
40867: LD_EXP 134
40871: PUSH
40872: LD_VAR 0 6
40876: ARRAY
40877: INC
40878: ST_TO_ADDR
40879: LD_INT 1
40881: PUSH
40882: FOR_DOWNTO
40883: IFFALSE 41046
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40885: LD_EXP 134
40889: PUSH
40890: LD_VAR 0 6
40894: ARRAY
40895: PUSH
40896: LD_VAR 0 5
40900: ARRAY
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: LD_EXP 134
40910: PUSH
40911: LD_VAR 0 6
40915: ARRAY
40916: PUSH
40917: LD_VAR 0 5
40921: ARRAY
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: PPUSH
40927: LD_VAR 0 2
40931: PPUSH
40932: LD_VAR 0 3
40936: PPUSH
40937: CALL_OW 298
40941: PUSH
40942: LD_INT 6
40944: LESS
40945: IFFALSE 41044
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40947: LD_EXP 134
40951: PUSH
40952: LD_VAR 0 6
40956: ARRAY
40957: PUSH
40958: LD_VAR 0 5
40962: ARRAY
40963: PUSH
40964: LD_INT 1
40966: ARRAY
40967: PPUSH
40968: LD_EXP 134
40972: PUSH
40973: LD_VAR 0 6
40977: ARRAY
40978: PUSH
40979: LD_VAR 0 5
40983: ARRAY
40984: PUSH
40985: LD_INT 2
40987: ARRAY
40988: PPUSH
40989: LD_VAR 0 1
40993: PPUSH
40994: CALL_OW 255
40998: PPUSH
40999: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41003: LD_ADDR_EXP 134
41007: PUSH
41008: LD_EXP 134
41012: PPUSH
41013: LD_VAR 0 6
41017: PPUSH
41018: LD_EXP 134
41022: PUSH
41023: LD_VAR 0 6
41027: ARRAY
41028: PPUSH
41029: LD_VAR 0 5
41033: PPUSH
41034: CALL_OW 3
41038: PPUSH
41039: CALL_OW 1
41043: ST_TO_ADDR
// end ; end ;
41044: GO 40882
41046: POP
41047: POP
// end ;
41048: LD_VAR 0 4
41052: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41064: LD_VAR 0 1
41068: PPUSH
41069: CALL_OW 264
41073: PUSH
41074: LD_EXP 58
41078: EQUAL
41079: NOT
41080: PUSH
41081: LD_VAR 0 1
41085: PUSH
41086: LD_EXP 133
41090: IN
41091: NOT
41092: OR
41093: IFFALSE 41097
// exit ;
41095: GO 41419
// index := GetElementIndex ( minersList , unit ) ;
41097: LD_ADDR_VAR 0 6
41101: PUSH
41102: LD_EXP 133
41106: PPUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL 46575 0 2
41116: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41117: LD_ADDR_VAR 0 8
41121: PUSH
41122: LD_EXP 135
41126: PUSH
41127: LD_EXP 134
41131: PUSH
41132: LD_VAR 0 6
41136: ARRAY
41137: MINUS
41138: ST_TO_ADDR
// if not minesFreeAmount then
41139: LD_VAR 0 8
41143: NOT
41144: IFFALSE 41148
// exit ;
41146: GO 41419
// tmp := [ ] ;
41148: LD_ADDR_VAR 0 7
41152: PUSH
41153: EMPTY
41154: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41155: LD_ADDR_VAR 0 5
41159: PUSH
41160: DOUBLE
41161: LD_INT 1
41163: DEC
41164: ST_TO_ADDR
41165: LD_VAR 0 8
41169: PUSH
41170: FOR_TO
41171: IFFALSE 41366
// begin _d := rand ( 0 , 5 ) ;
41173: LD_ADDR_VAR 0 11
41177: PUSH
41178: LD_INT 0
41180: PPUSH
41181: LD_INT 5
41183: PPUSH
41184: CALL_OW 12
41188: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41189: LD_ADDR_VAR 0 12
41193: PUSH
41194: LD_INT 2
41196: PPUSH
41197: LD_INT 6
41199: PPUSH
41200: CALL_OW 12
41204: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41205: LD_ADDR_VAR 0 9
41209: PUSH
41210: LD_VAR 0 2
41214: PPUSH
41215: LD_VAR 0 11
41219: PPUSH
41220: LD_VAR 0 12
41224: PPUSH
41225: CALL_OW 272
41229: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41230: LD_ADDR_VAR 0 10
41234: PUSH
41235: LD_VAR 0 3
41239: PPUSH
41240: LD_VAR 0 11
41244: PPUSH
41245: LD_VAR 0 12
41249: PPUSH
41250: CALL_OW 273
41254: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41255: LD_VAR 0 9
41259: PPUSH
41260: LD_VAR 0 10
41264: PPUSH
41265: CALL_OW 488
41269: PUSH
41270: LD_VAR 0 9
41274: PUSH
41275: LD_VAR 0 10
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_VAR 0 7
41288: IN
41289: NOT
41290: AND
41291: PUSH
41292: LD_VAR 0 9
41296: PPUSH
41297: LD_VAR 0 10
41301: PPUSH
41302: CALL_OW 458
41306: NOT
41307: AND
41308: IFFALSE 41350
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41310: LD_ADDR_VAR 0 7
41314: PUSH
41315: LD_VAR 0 7
41319: PPUSH
41320: LD_VAR 0 7
41324: PUSH
41325: LD_INT 1
41327: PLUS
41328: PPUSH
41329: LD_VAR 0 9
41333: PUSH
41334: LD_VAR 0 10
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL_OW 1
41347: ST_TO_ADDR
41348: GO 41364
// i := i - 1 ;
41350: LD_ADDR_VAR 0 5
41354: PUSH
41355: LD_VAR 0 5
41359: PUSH
41360: LD_INT 1
41362: MINUS
41363: ST_TO_ADDR
// end ;
41364: GO 41170
41366: POP
41367: POP
// for i in tmp do
41368: LD_ADDR_VAR 0 5
41372: PUSH
41373: LD_VAR 0 7
41377: PUSH
41378: FOR_IN
41379: IFFALSE 41417
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 5
41390: PUSH
41391: LD_INT 1
41393: ARRAY
41394: PPUSH
41395: LD_VAR 0 5
41399: PUSH
41400: LD_INT 2
41402: ARRAY
41403: PPUSH
41404: CALL 40359 0 3
41408: NOT
41409: IFFALSE 41415
// exit ;
41411: POP
41412: POP
41413: GO 41419
41415: GO 41378
41417: POP
41418: POP
// end ;
41419: LD_VAR 0 4
41423: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41424: LD_INT 0
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
// if not GetClass ( unit ) = class_sniper then
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 257
41442: PUSH
41443: LD_INT 5
41445: EQUAL
41446: NOT
41447: IFFALSE 41451
// exit ;
41449: GO 41839
// dist := 8 ;
41451: LD_ADDR_VAR 0 5
41455: PUSH
41456: LD_INT 8
41458: ST_TO_ADDR
// viewRange := 12 ;
41459: LD_ADDR_VAR 0 7
41463: PUSH
41464: LD_INT 12
41466: ST_TO_ADDR
// side := GetSide ( unit ) ;
41467: LD_ADDR_VAR 0 6
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 255
41481: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41482: LD_INT 61
41484: PPUSH
41485: LD_VAR 0 6
41489: PPUSH
41490: CALL_OW 321
41494: PUSH
41495: LD_INT 2
41497: EQUAL
41498: IFFALSE 41508
// viewRange := 16 ;
41500: LD_ADDR_VAR 0 7
41504: PUSH
41505: LD_INT 16
41507: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41508: LD_VAR 0 1
41512: PPUSH
41513: LD_VAR 0 2
41517: PPUSH
41518: LD_VAR 0 3
41522: PPUSH
41523: CALL_OW 297
41527: PUSH
41528: LD_VAR 0 5
41532: GREATER
41533: IFFALSE 41612
// begin ComMoveXY ( unit , x , y ) ;
41535: LD_VAR 0 1
41539: PPUSH
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_VAR 0 3
41549: PPUSH
41550: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41554: LD_INT 35
41556: PPUSH
41557: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41561: LD_VAR 0 1
41565: PPUSH
41566: LD_VAR 0 2
41570: PPUSH
41571: LD_VAR 0 3
41575: PPUSH
41576: CALL 76972 0 3
41580: NOT
41581: IFFALSE 41585
// exit ;
41583: GO 41839
// until GetDistUnitXY ( unit , x , y ) < dist ;
41585: LD_VAR 0 1
41589: PPUSH
41590: LD_VAR 0 2
41594: PPUSH
41595: LD_VAR 0 3
41599: PPUSH
41600: CALL_OW 297
41604: PUSH
41605: LD_VAR 0 5
41609: LESS
41610: IFFALSE 41554
// end ; ComTurnXY ( unit , x , y ) ;
41612: LD_VAR 0 1
41616: PPUSH
41617: LD_VAR 0 2
41621: PPUSH
41622: LD_VAR 0 3
41626: PPUSH
41627: CALL_OW 118
// wait ( 5 ) ;
41631: LD_INT 5
41633: PPUSH
41634: CALL_OW 67
// _d := GetDir ( unit ) ;
41638: LD_ADDR_VAR 0 10
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 254
41652: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41653: LD_ADDR_VAR 0 8
41657: PUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 250
41667: PPUSH
41668: LD_VAR 0 10
41672: PPUSH
41673: LD_VAR 0 5
41677: PPUSH
41678: CALL_OW 272
41682: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41683: LD_ADDR_VAR 0 9
41687: PUSH
41688: LD_VAR 0 1
41692: PPUSH
41693: CALL_OW 251
41697: PPUSH
41698: LD_VAR 0 10
41702: PPUSH
41703: LD_VAR 0 5
41707: PPUSH
41708: CALL_OW 273
41712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41713: LD_VAR 0 8
41717: PPUSH
41718: LD_VAR 0 9
41722: PPUSH
41723: CALL_OW 488
41727: NOT
41728: IFFALSE 41732
// exit ;
41730: GO 41839
// ComAnimCustom ( unit , 1 ) ;
41732: LD_VAR 0 1
41736: PPUSH
41737: LD_INT 1
41739: PPUSH
41740: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_VAR 0 9
41753: PPUSH
41754: LD_VAR 0 6
41758: PPUSH
41759: LD_VAR 0 7
41763: PPUSH
41764: CALL_OW 330
// repeat wait ( 1 ) ;
41768: LD_INT 1
41770: PPUSH
41771: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 316
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 314
41794: OR
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 302
41805: NOT
41806: OR
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 301
41817: OR
41818: IFFALSE 41768
// RemoveSeeing ( _x , _y , side ) ;
41820: LD_VAR 0 8
41824: PPUSH
41825: LD_VAR 0 9
41829: PPUSH
41830: LD_VAR 0 6
41834: PPUSH
41835: CALL_OW 331
// end ; end_of_file
41839: LD_VAR 0 4
41843: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41844: LD_INT 0
41846: PPUSH
41847: PPUSH
// if exist_mode then
41848: LD_VAR 0 2
41852: IFFALSE 41877
// unit := CreateCharacter ( prefix & ident ) else
41854: LD_ADDR_VAR 0 5
41858: PUSH
41859: LD_VAR 0 3
41863: PUSH
41864: LD_VAR 0 1
41868: STR
41869: PPUSH
41870: CALL_OW 34
41874: ST_TO_ADDR
41875: GO 41892
// unit := NewCharacter ( ident ) ;
41877: LD_ADDR_VAR 0 5
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 25
41891: ST_TO_ADDR
// result := unit ;
41892: LD_ADDR_VAR 0 4
41896: PUSH
41897: LD_VAR 0 5
41901: ST_TO_ADDR
// end ;
41902: LD_VAR 0 4
41906: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41907: LD_INT 0
41909: PPUSH
41910: PPUSH
// if not side or not nation then
41911: LD_VAR 0 1
41915: NOT
41916: PUSH
41917: LD_VAR 0 2
41921: NOT
41922: OR
41923: IFFALSE 41927
// exit ;
41925: GO 42691
// case nation of nation_american :
41927: LD_VAR 0 2
41931: PUSH
41932: LD_INT 1
41934: DOUBLE
41935: EQUAL
41936: IFTRUE 41940
41938: GO 42154
41940: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41941: LD_ADDR_VAR 0 4
41945: PUSH
41946: LD_INT 35
41948: PUSH
41949: LD_INT 45
41951: PUSH
41952: LD_INT 46
41954: PUSH
41955: LD_INT 47
41957: PUSH
41958: LD_INT 82
41960: PUSH
41961: LD_INT 83
41963: PUSH
41964: LD_INT 84
41966: PUSH
41967: LD_INT 85
41969: PUSH
41970: LD_INT 86
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 6
41981: PUSH
41982: LD_INT 15
41984: PUSH
41985: LD_INT 16
41987: PUSH
41988: LD_INT 7
41990: PUSH
41991: LD_INT 12
41993: PUSH
41994: LD_INT 13
41996: PUSH
41997: LD_INT 10
41999: PUSH
42000: LD_INT 14
42002: PUSH
42003: LD_INT 20
42005: PUSH
42006: LD_INT 21
42008: PUSH
42009: LD_INT 22
42011: PUSH
42012: LD_INT 25
42014: PUSH
42015: LD_INT 32
42017: PUSH
42018: LD_INT 27
42020: PUSH
42021: LD_INT 36
42023: PUSH
42024: LD_INT 69
42026: PUSH
42027: LD_INT 39
42029: PUSH
42030: LD_INT 34
42032: PUSH
42033: LD_INT 40
42035: PUSH
42036: LD_INT 48
42038: PUSH
42039: LD_INT 49
42041: PUSH
42042: LD_INT 50
42044: PUSH
42045: LD_INT 51
42047: PUSH
42048: LD_INT 52
42050: PUSH
42051: LD_INT 53
42053: PUSH
42054: LD_INT 54
42056: PUSH
42057: LD_INT 55
42059: PUSH
42060: LD_INT 56
42062: PUSH
42063: LD_INT 57
42065: PUSH
42066: LD_INT 58
42068: PUSH
42069: LD_INT 59
42071: PUSH
42072: LD_INT 60
42074: PUSH
42075: LD_INT 61
42077: PUSH
42078: LD_INT 62
42080: PUSH
42081: LD_INT 80
42083: PUSH
42084: LD_INT 82
42086: PUSH
42087: LD_INT 83
42089: PUSH
42090: LD_INT 84
42092: PUSH
42093: LD_INT 85
42095: PUSH
42096: LD_INT 86
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
42152: GO 42615
42154: LD_INT 2
42156: DOUBLE
42157: EQUAL
42158: IFTRUE 42162
42160: GO 42384
42162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
42163: LD_ADDR_VAR 0 4
42167: PUSH
42168: LD_INT 35
42170: PUSH
42171: LD_INT 45
42173: PUSH
42174: LD_INT 46
42176: PUSH
42177: LD_INT 47
42179: PUSH
42180: LD_INT 82
42182: PUSH
42183: LD_INT 83
42185: PUSH
42186: LD_INT 84
42188: PUSH
42189: LD_INT 85
42191: PUSH
42192: LD_INT 87
42194: PUSH
42195: LD_INT 70
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 11
42203: PUSH
42204: LD_INT 3
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: LD_INT 5
42212: PUSH
42213: LD_INT 6
42215: PUSH
42216: LD_INT 15
42218: PUSH
42219: LD_INT 18
42221: PUSH
42222: LD_INT 7
42224: PUSH
42225: LD_INT 17
42227: PUSH
42228: LD_INT 8
42230: PUSH
42231: LD_INT 20
42233: PUSH
42234: LD_INT 21
42236: PUSH
42237: LD_INT 22
42239: PUSH
42240: LD_INT 72
42242: PUSH
42243: LD_INT 26
42245: PUSH
42246: LD_INT 69
42248: PUSH
42249: LD_INT 39
42251: PUSH
42252: LD_INT 40
42254: PUSH
42255: LD_INT 41
42257: PUSH
42258: LD_INT 42
42260: PUSH
42261: LD_INT 43
42263: PUSH
42264: LD_INT 48
42266: PUSH
42267: LD_INT 49
42269: PUSH
42270: LD_INT 50
42272: PUSH
42273: LD_INT 51
42275: PUSH
42276: LD_INT 52
42278: PUSH
42279: LD_INT 53
42281: PUSH
42282: LD_INT 54
42284: PUSH
42285: LD_INT 55
42287: PUSH
42288: LD_INT 56
42290: PUSH
42291: LD_INT 60
42293: PUSH
42294: LD_INT 61
42296: PUSH
42297: LD_INT 62
42299: PUSH
42300: LD_INT 66
42302: PUSH
42303: LD_INT 67
42305: PUSH
42306: LD_INT 68
42308: PUSH
42309: LD_INT 81
42311: PUSH
42312: LD_INT 82
42314: PUSH
42315: LD_INT 83
42317: PUSH
42318: LD_INT 84
42320: PUSH
42321: LD_INT 85
42323: PUSH
42324: LD_INT 87
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
42382: GO 42615
42384: LD_INT 3
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42392
42390: GO 42614
42392: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42393: LD_ADDR_VAR 0 4
42397: PUSH
42398: LD_INT 46
42400: PUSH
42401: LD_INT 47
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 82
42412: PUSH
42413: LD_INT 83
42415: PUSH
42416: LD_INT 84
42418: PUSH
42419: LD_INT 85
42421: PUSH
42422: LD_INT 86
42424: PUSH
42425: LD_INT 11
42427: PUSH
42428: LD_INT 9
42430: PUSH
42431: LD_INT 20
42433: PUSH
42434: LD_INT 19
42436: PUSH
42437: LD_INT 21
42439: PUSH
42440: LD_INT 24
42442: PUSH
42443: LD_INT 22
42445: PUSH
42446: LD_INT 25
42448: PUSH
42449: LD_INT 28
42451: PUSH
42452: LD_INT 29
42454: PUSH
42455: LD_INT 30
42457: PUSH
42458: LD_INT 31
42460: PUSH
42461: LD_INT 37
42463: PUSH
42464: LD_INT 38
42466: PUSH
42467: LD_INT 32
42469: PUSH
42470: LD_INT 27
42472: PUSH
42473: LD_INT 33
42475: PUSH
42476: LD_INT 69
42478: PUSH
42479: LD_INT 39
42481: PUSH
42482: LD_INT 34
42484: PUSH
42485: LD_INT 40
42487: PUSH
42488: LD_INT 71
42490: PUSH
42491: LD_INT 23
42493: PUSH
42494: LD_INT 44
42496: PUSH
42497: LD_INT 48
42499: PUSH
42500: LD_INT 49
42502: PUSH
42503: LD_INT 50
42505: PUSH
42506: LD_INT 51
42508: PUSH
42509: LD_INT 52
42511: PUSH
42512: LD_INT 53
42514: PUSH
42515: LD_INT 54
42517: PUSH
42518: LD_INT 55
42520: PUSH
42521: LD_INT 56
42523: PUSH
42524: LD_INT 57
42526: PUSH
42527: LD_INT 58
42529: PUSH
42530: LD_INT 59
42532: PUSH
42533: LD_INT 63
42535: PUSH
42536: LD_INT 64
42538: PUSH
42539: LD_INT 65
42541: PUSH
42542: LD_INT 82
42544: PUSH
42545: LD_INT 83
42547: PUSH
42548: LD_INT 84
42550: PUSH
42551: LD_INT 85
42553: PUSH
42554: LD_INT 86
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: ST_TO_ADDR
42612: GO 42615
42614: POP
// if state > - 1 and state < 3 then
42615: LD_VAR 0 3
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: GREATER
42624: PUSH
42625: LD_VAR 0 3
42629: PUSH
42630: LD_INT 3
42632: LESS
42633: AND
42634: IFFALSE 42691
// for i in result do
42636: LD_ADDR_VAR 0 5
42640: PUSH
42641: LD_VAR 0 4
42645: PUSH
42646: FOR_IN
42647: IFFALSE 42689
// if GetTech ( i , side ) <> state then
42649: LD_VAR 0 5
42653: PPUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 321
42663: PUSH
42664: LD_VAR 0 3
42668: NONEQUAL
42669: IFFALSE 42687
// result := result diff i ;
42671: LD_ADDR_VAR 0 4
42675: PUSH
42676: LD_VAR 0 4
42680: PUSH
42681: LD_VAR 0 5
42685: DIFF
42686: ST_TO_ADDR
42687: GO 42646
42689: POP
42690: POP
// end ;
42691: LD_VAR 0 4
42695: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42696: LD_INT 0
42698: PPUSH
42699: PPUSH
42700: PPUSH
// result := true ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_INT 1
42708: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42709: LD_ADDR_VAR 0 5
42713: PUSH
42714: LD_VAR 0 2
42718: PPUSH
42719: CALL_OW 480
42723: ST_TO_ADDR
// if not tmp then
42724: LD_VAR 0 5
42728: NOT
42729: IFFALSE 42733
// exit ;
42731: GO 42782
// for i in tmp do
42733: LD_ADDR_VAR 0 4
42737: PUSH
42738: LD_VAR 0 5
42742: PUSH
42743: FOR_IN
42744: IFFALSE 42780
// if GetTech ( i , side ) <> state_researched then
42746: LD_VAR 0 4
42750: PPUSH
42751: LD_VAR 0 1
42755: PPUSH
42756: CALL_OW 321
42760: PUSH
42761: LD_INT 2
42763: NONEQUAL
42764: IFFALSE 42778
// begin result := false ;
42766: LD_ADDR_VAR 0 3
42770: PUSH
42771: LD_INT 0
42773: ST_TO_ADDR
// exit ;
42774: POP
42775: POP
42776: GO 42782
// end ;
42778: GO 42743
42780: POP
42781: POP
// end ;
42782: LD_VAR 0 3
42786: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42802: LD_VAR 0 1
42806: NOT
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 257
42817: PUSH
42818: LD_INT 9
42820: NONEQUAL
42821: OR
42822: IFFALSE 42826
// exit ;
42824: GO 43399
// side := GetSide ( unit ) ;
42826: LD_ADDR_VAR 0 9
42830: PUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 255
42840: ST_TO_ADDR
// tech_space := tech_spacanom ;
42841: LD_ADDR_VAR 0 12
42845: PUSH
42846: LD_INT 29
42848: ST_TO_ADDR
// tech_time := tech_taurad ;
42849: LD_ADDR_VAR 0 13
42853: PUSH
42854: LD_INT 28
42856: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42857: LD_ADDR_VAR 0 11
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 310
42871: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42872: LD_VAR 0 11
42876: PPUSH
42877: CALL_OW 247
42881: PUSH
42882: LD_INT 2
42884: EQUAL
42885: IFFALSE 42889
// exit ;
42887: GO 43399
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42889: LD_ADDR_VAR 0 8
42893: PUSH
42894: LD_INT 81
42896: PUSH
42897: LD_VAR 0 9
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 21
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PPUSH
42927: CALL_OW 69
42931: ST_TO_ADDR
// if not tmp then
42932: LD_VAR 0 8
42936: NOT
42937: IFFALSE 42941
// exit ;
42939: GO 43399
// if in_unit then
42941: LD_VAR 0 11
42945: IFFALSE 42969
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42947: LD_ADDR_VAR 0 10
42951: PUSH
42952: LD_VAR 0 8
42956: PPUSH
42957: LD_VAR 0 11
42961: PPUSH
42962: CALL_OW 74
42966: ST_TO_ADDR
42967: GO 42989
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42969: LD_ADDR_VAR 0 10
42973: PUSH
42974: LD_VAR 0 8
42978: PPUSH
42979: LD_VAR 0 1
42983: PPUSH
42984: CALL_OW 74
42988: ST_TO_ADDR
// if not enemy then
42989: LD_VAR 0 10
42993: NOT
42994: IFFALSE 42998
// exit ;
42996: GO 43399
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42998: LD_VAR 0 11
43002: PUSH
43003: LD_VAR 0 11
43007: PPUSH
43008: LD_VAR 0 10
43012: PPUSH
43013: CALL_OW 296
43017: PUSH
43018: LD_INT 13
43020: GREATER
43021: AND
43022: PUSH
43023: LD_VAR 0 1
43027: PPUSH
43028: LD_VAR 0 10
43032: PPUSH
43033: CALL_OW 296
43037: PUSH
43038: LD_INT 12
43040: GREATER
43041: OR
43042: IFFALSE 43046
// exit ;
43044: GO 43399
// missile := [ 1 ] ;
43046: LD_ADDR_VAR 0 14
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43057: LD_VAR 0 9
43061: PPUSH
43062: LD_VAR 0 12
43066: PPUSH
43067: CALL_OW 325
43071: IFFALSE 43100
// missile := Insert ( missile , missile + 1 , 2 ) ;
43073: LD_ADDR_VAR 0 14
43077: PUSH
43078: LD_VAR 0 14
43082: PPUSH
43083: LD_VAR 0 14
43087: PUSH
43088: LD_INT 1
43090: PLUS
43091: PPUSH
43092: LD_INT 2
43094: PPUSH
43095: CALL_OW 2
43099: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43100: LD_VAR 0 9
43104: PPUSH
43105: LD_VAR 0 13
43109: PPUSH
43110: CALL_OW 325
43114: PUSH
43115: LD_VAR 0 10
43119: PPUSH
43120: CALL_OW 255
43124: PPUSH
43125: LD_VAR 0 13
43129: PPUSH
43130: CALL_OW 325
43134: NOT
43135: AND
43136: IFFALSE 43165
// missile := Insert ( missile , missile + 1 , 3 ) ;
43138: LD_ADDR_VAR 0 14
43142: PUSH
43143: LD_VAR 0 14
43147: PPUSH
43148: LD_VAR 0 14
43152: PUSH
43153: LD_INT 1
43155: PLUS
43156: PPUSH
43157: LD_INT 3
43159: PPUSH
43160: CALL_OW 2
43164: ST_TO_ADDR
// if missile < 2 then
43165: LD_VAR 0 14
43169: PUSH
43170: LD_INT 2
43172: LESS
43173: IFFALSE 43177
// exit ;
43175: GO 43399
// x := GetX ( enemy ) ;
43177: LD_ADDR_VAR 0 4
43181: PUSH
43182: LD_VAR 0 10
43186: PPUSH
43187: CALL_OW 250
43191: ST_TO_ADDR
// y := GetY ( enemy ) ;
43192: LD_ADDR_VAR 0 5
43196: PUSH
43197: LD_VAR 0 10
43201: PPUSH
43202: CALL_OW 251
43206: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43207: LD_ADDR_VAR 0 6
43211: PUSH
43212: LD_VAR 0 4
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PPUSH
43221: LD_INT 1
43223: PPUSH
43224: CALL_OW 12
43228: PLUS
43229: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43230: LD_ADDR_VAR 0 7
43234: PUSH
43235: LD_VAR 0 5
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PPUSH
43244: LD_INT 1
43246: PPUSH
43247: CALL_OW 12
43251: PLUS
43252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43253: LD_VAR 0 6
43257: PPUSH
43258: LD_VAR 0 7
43262: PPUSH
43263: CALL_OW 488
43267: NOT
43268: IFFALSE 43290
// begin _x := x ;
43270: LD_ADDR_VAR 0 6
43274: PUSH
43275: LD_VAR 0 4
43279: ST_TO_ADDR
// _y := y ;
43280: LD_ADDR_VAR 0 7
43284: PUSH
43285: LD_VAR 0 5
43289: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43290: LD_ADDR_VAR 0 3
43294: PUSH
43295: LD_INT 1
43297: PPUSH
43298: LD_VAR 0 14
43302: PPUSH
43303: CALL_OW 12
43307: ST_TO_ADDR
// case i of 1 :
43308: LD_VAR 0 3
43312: PUSH
43313: LD_INT 1
43315: DOUBLE
43316: EQUAL
43317: IFTRUE 43321
43319: GO 43338
43321: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43322: LD_VAR 0 1
43326: PPUSH
43327: LD_VAR 0 10
43331: PPUSH
43332: CALL_OW 115
43336: GO 43399
43338: LD_INT 2
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43368
43346: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43347: LD_VAR 0 1
43351: PPUSH
43352: LD_VAR 0 6
43356: PPUSH
43357: LD_VAR 0 7
43361: PPUSH
43362: CALL_OW 153
43366: GO 43399
43368: LD_INT 3
43370: DOUBLE
43371: EQUAL
43372: IFTRUE 43376
43374: GO 43398
43376: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43377: LD_VAR 0 1
43381: PPUSH
43382: LD_VAR 0 6
43386: PPUSH
43387: LD_VAR 0 7
43391: PPUSH
43392: CALL_OW 154
43396: GO 43399
43398: POP
// end ;
43399: LD_VAR 0 2
43403: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43404: LD_INT 0
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
// if not unit or not building then
43412: LD_VAR 0 1
43416: NOT
43417: PUSH
43418: LD_VAR 0 2
43422: NOT
43423: OR
43424: IFFALSE 43428
// exit ;
43426: GO 43586
// x := GetX ( building ) ;
43428: LD_ADDR_VAR 0 5
43432: PUSH
43433: LD_VAR 0 2
43437: PPUSH
43438: CALL_OW 250
43442: ST_TO_ADDR
// y := GetY ( building ) ;
43443: LD_ADDR_VAR 0 6
43447: PUSH
43448: LD_VAR 0 2
43452: PPUSH
43453: CALL_OW 251
43457: ST_TO_ADDR
// for i = 0 to 5 do
43458: LD_ADDR_VAR 0 4
43462: PUSH
43463: DOUBLE
43464: LD_INT 0
43466: DEC
43467: ST_TO_ADDR
43468: LD_INT 5
43470: PUSH
43471: FOR_TO
43472: IFFALSE 43584
// begin _x := ShiftX ( x , i , 3 ) ;
43474: LD_ADDR_VAR 0 7
43478: PUSH
43479: LD_VAR 0 5
43483: PPUSH
43484: LD_VAR 0 4
43488: PPUSH
43489: LD_INT 3
43491: PPUSH
43492: CALL_OW 272
43496: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43497: LD_ADDR_VAR 0 8
43501: PUSH
43502: LD_VAR 0 6
43506: PPUSH
43507: LD_VAR 0 4
43511: PPUSH
43512: LD_INT 3
43514: PPUSH
43515: CALL_OW 273
43519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43520: LD_VAR 0 7
43524: PPUSH
43525: LD_VAR 0 8
43529: PPUSH
43530: CALL_OW 488
43534: NOT
43535: IFFALSE 43539
// continue ;
43537: GO 43471
// if HexInfo ( _x , _y ) = 0 then
43539: LD_VAR 0 7
43543: PPUSH
43544: LD_VAR 0 8
43548: PPUSH
43549: CALL_OW 428
43553: PUSH
43554: LD_INT 0
43556: EQUAL
43557: IFFALSE 43582
// begin ComMoveXY ( unit , _x , _y ) ;
43559: LD_VAR 0 1
43563: PPUSH
43564: LD_VAR 0 7
43568: PPUSH
43569: LD_VAR 0 8
43573: PPUSH
43574: CALL_OW 111
// exit ;
43578: POP
43579: POP
43580: GO 43586
// end ; end ;
43582: GO 43471
43584: POP
43585: POP
// end ;
43586: LD_VAR 0 3
43590: RET
// export function ScanBase ( side , base_area ) ; begin
43591: LD_INT 0
43593: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_VAR 0 2
43603: PPUSH
43604: LD_INT 81
43606: PUSH
43607: LD_VAR 0 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PPUSH
43616: CALL_OW 70
43620: ST_TO_ADDR
// end ;
43621: LD_VAR 0 3
43625: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43626: LD_INT 0
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
// result := false ;
43632: LD_ADDR_VAR 0 2
43636: PUSH
43637: LD_INT 0
43639: ST_TO_ADDR
// side := GetSide ( unit ) ;
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: CALL_OW 255
43654: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43655: LD_ADDR_VAR 0 4
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 248
43669: ST_TO_ADDR
// case nat of 1 :
43670: LD_VAR 0 4
43674: PUSH
43675: LD_INT 1
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43694
43683: POP
// tech := tech_lassight ; 2 :
43684: LD_ADDR_VAR 0 5
43688: PUSH
43689: LD_INT 12
43691: ST_TO_ADDR
43692: GO 43733
43694: LD_INT 2
43696: DOUBLE
43697: EQUAL
43698: IFTRUE 43702
43700: GO 43713
43702: POP
// tech := tech_mortar ; 3 :
43703: LD_ADDR_VAR 0 5
43707: PUSH
43708: LD_INT 41
43710: ST_TO_ADDR
43711: GO 43733
43713: LD_INT 3
43715: DOUBLE
43716: EQUAL
43717: IFTRUE 43721
43719: GO 43732
43721: POP
// tech := tech_bazooka ; end ;
43722: LD_ADDR_VAR 0 5
43726: PUSH
43727: LD_INT 44
43729: ST_TO_ADDR
43730: GO 43733
43732: POP
// if Researched ( side , tech ) then
43733: LD_VAR 0 3
43737: PPUSH
43738: LD_VAR 0 5
43742: PPUSH
43743: CALL_OW 325
43747: IFFALSE 43774
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43749: LD_ADDR_VAR 0 2
43753: PUSH
43754: LD_INT 5
43756: PUSH
43757: LD_INT 8
43759: PUSH
43760: LD_INT 9
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: LD_VAR 0 4
43772: ARRAY
43773: ST_TO_ADDR
// end ;
43774: LD_VAR 0 2
43778: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43779: LD_INT 0
43781: PPUSH
43782: PPUSH
43783: PPUSH
// if not mines then
43784: LD_VAR 0 2
43788: NOT
43789: IFFALSE 43793
// exit ;
43791: GO 43937
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43793: LD_ADDR_VAR 0 5
43797: PUSH
43798: LD_INT 81
43800: PUSH
43801: LD_VAR 0 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: LD_INT 21
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PPUSH
43831: CALL_OW 69
43835: ST_TO_ADDR
// for i in mines do
43836: LD_ADDR_VAR 0 4
43840: PUSH
43841: LD_VAR 0 2
43845: PUSH
43846: FOR_IN
43847: IFFALSE 43935
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43849: LD_VAR 0 4
43853: PUSH
43854: LD_INT 1
43856: ARRAY
43857: PPUSH
43858: LD_VAR 0 4
43862: PUSH
43863: LD_INT 2
43865: ARRAY
43866: PPUSH
43867: CALL_OW 458
43871: NOT
43872: IFFALSE 43876
// continue ;
43874: GO 43846
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43876: LD_VAR 0 4
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: LD_VAR 0 4
43889: PUSH
43890: LD_INT 2
43892: ARRAY
43893: PPUSH
43894: CALL_OW 428
43898: PUSH
43899: LD_VAR 0 5
43903: IN
43904: IFFALSE 43933
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43906: LD_VAR 0 4
43910: PUSH
43911: LD_INT 1
43913: ARRAY
43914: PPUSH
43915: LD_VAR 0 4
43919: PUSH
43920: LD_INT 2
43922: ARRAY
43923: PPUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 456
// end ;
43933: GO 43846
43935: POP
43936: POP
// end ;
43937: LD_VAR 0 3
43941: RET
// export function Count ( array ) ; var i ; begin
43942: LD_INT 0
43944: PPUSH
43945: PPUSH
// result := 0 ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: LD_INT 0
43953: ST_TO_ADDR
// for i in array do
43954: LD_ADDR_VAR 0 3
43958: PUSH
43959: LD_VAR 0 1
43963: PUSH
43964: FOR_IN
43965: IFFALSE 43989
// if i then
43967: LD_VAR 0 3
43971: IFFALSE 43987
// result := result + 1 ;
43973: LD_ADDR_VAR 0 2
43977: PUSH
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 1
43985: PLUS
43986: ST_TO_ADDR
43987: GO 43964
43989: POP
43990: POP
// end ;
43991: LD_VAR 0 2
43995: RET
// export function IsEmpty ( building ) ; begin
43996: LD_INT 0
43998: PPUSH
// if not building then
43999: LD_VAR 0 1
44003: NOT
44004: IFFALSE 44008
// exit ;
44006: GO 44051
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44008: LD_ADDR_VAR 0 2
44012: PUSH
44013: LD_VAR 0 1
44017: PUSH
44018: LD_INT 22
44020: PUSH
44021: LD_VAR 0 1
44025: PPUSH
44026: CALL_OW 255
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 58
44037: PUSH
44038: EMPTY
44039: LIST
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PPUSH
44045: CALL_OW 69
44049: IN
44050: ST_TO_ADDR
// end ;
44051: LD_VAR 0 2
44055: RET
// export function IsNotFull ( building ) ; begin
44056: LD_INT 0
44058: PPUSH
// if not building then
44059: LD_VAR 0 1
44063: NOT
44064: IFFALSE 44068
// exit ;
44066: GO 44087
// result := UnitsInside ( building ) < 6 ;
44068: LD_ADDR_VAR 0 2
44072: PUSH
44073: LD_VAR 0 1
44077: PPUSH
44078: CALL_OW 313
44082: PUSH
44083: LD_INT 6
44085: LESS
44086: ST_TO_ADDR
// end ;
44087: LD_VAR 0 2
44091: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44092: LD_INT 0
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
// tmp := [ ] ;
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: EMPTY
44104: ST_TO_ADDR
// list := [ ] ;
44105: LD_ADDR_VAR 0 5
44109: PUSH
44110: EMPTY
44111: ST_TO_ADDR
// for i = 16 to 25 do
44112: LD_ADDR_VAR 0 4
44116: PUSH
44117: DOUBLE
44118: LD_INT 16
44120: DEC
44121: ST_TO_ADDR
44122: LD_INT 25
44124: PUSH
44125: FOR_TO
44126: IFFALSE 44199
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44128: LD_ADDR_VAR 0 3
44132: PUSH
44133: LD_VAR 0 3
44137: PUSH
44138: LD_INT 22
44140: PUSH
44141: LD_VAR 0 1
44145: PPUSH
44146: CALL_OW 255
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 91
44157: PUSH
44158: LD_VAR 0 1
44162: PUSH
44163: LD_INT 6
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 30
44173: PUSH
44174: LD_VAR 0 4
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: PUSH
44188: EMPTY
44189: LIST
44190: PPUSH
44191: CALL_OW 69
44195: ADD
44196: ST_TO_ADDR
44197: GO 44125
44199: POP
44200: POP
// for i = 1 to tmp do
44201: LD_ADDR_VAR 0 4
44205: PUSH
44206: DOUBLE
44207: LD_INT 1
44209: DEC
44210: ST_TO_ADDR
44211: LD_VAR 0 3
44215: PUSH
44216: FOR_TO
44217: IFFALSE 44305
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44219: LD_ADDR_VAR 0 5
44223: PUSH
44224: LD_VAR 0 5
44228: PUSH
44229: LD_VAR 0 3
44233: PUSH
44234: LD_VAR 0 4
44238: ARRAY
44239: PPUSH
44240: CALL_OW 266
44244: PUSH
44245: LD_VAR 0 3
44249: PUSH
44250: LD_VAR 0 4
44254: ARRAY
44255: PPUSH
44256: CALL_OW 250
44260: PUSH
44261: LD_VAR 0 3
44265: PUSH
44266: LD_VAR 0 4
44270: ARRAY
44271: PPUSH
44272: CALL_OW 251
44276: PUSH
44277: LD_VAR 0 3
44281: PUSH
44282: LD_VAR 0 4
44286: ARRAY
44287: PPUSH
44288: CALL_OW 254
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: ADD
44302: ST_TO_ADDR
44303: GO 44216
44305: POP
44306: POP
// result := list ;
44307: LD_ADDR_VAR 0 2
44311: PUSH
44312: LD_VAR 0 5
44316: ST_TO_ADDR
// end ;
44317: LD_VAR 0 2
44321: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44322: LD_INT 0
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
// if not factory then
44331: LD_VAR 0 1
44335: NOT
44336: IFFALSE 44340
// exit ;
44338: GO 44933
// if control = control_apeman then
44340: LD_VAR 0 4
44344: PUSH
44345: LD_INT 5
44347: EQUAL
44348: IFFALSE 44457
// begin tmp := UnitsInside ( factory ) ;
44350: LD_ADDR_VAR 0 8
44354: PUSH
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 313
44364: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44365: LD_VAR 0 8
44369: PPUSH
44370: LD_INT 25
44372: PUSH
44373: LD_INT 12
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PPUSH
44380: CALL_OW 72
44384: NOT
44385: IFFALSE 44395
// control := control_manual ;
44387: LD_ADDR_VAR 0 4
44391: PUSH
44392: LD_INT 1
44394: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44395: LD_ADDR_VAR 0 8
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL 44092 0 1
44409: ST_TO_ADDR
// if tmp then
44410: LD_VAR 0 8
44414: IFFALSE 44457
// begin for i in tmp do
44416: LD_ADDR_VAR 0 7
44420: PUSH
44421: LD_VAR 0 8
44425: PUSH
44426: FOR_IN
44427: IFFALSE 44455
// if i [ 1 ] = b_ext_radio then
44429: LD_VAR 0 7
44433: PUSH
44434: LD_INT 1
44436: ARRAY
44437: PUSH
44438: LD_INT 22
44440: EQUAL
44441: IFFALSE 44453
// begin control := control_remote ;
44443: LD_ADDR_VAR 0 4
44447: PUSH
44448: LD_INT 2
44450: ST_TO_ADDR
// break ;
44451: GO 44455
// end ;
44453: GO 44426
44455: POP
44456: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44457: LD_VAR 0 1
44461: PPUSH
44462: LD_VAR 0 2
44466: PPUSH
44467: LD_VAR 0 3
44471: PPUSH
44472: LD_VAR 0 4
44476: PPUSH
44477: LD_VAR 0 5
44481: PPUSH
44482: CALL_OW 448
44486: IFFALSE 44521
// begin result := [ chassis , engine , control , weapon ] ;
44488: LD_ADDR_VAR 0 6
44492: PUSH
44493: LD_VAR 0 2
44497: PUSH
44498: LD_VAR 0 3
44502: PUSH
44503: LD_VAR 0 4
44507: PUSH
44508: LD_VAR 0 5
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: ST_TO_ADDR
// exit ;
44519: GO 44933
// end ; _chassis := AvailableChassisList ( factory ) ;
44521: LD_ADDR_VAR 0 9
44525: PUSH
44526: LD_VAR 0 1
44530: PPUSH
44531: CALL_OW 475
44535: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44536: LD_ADDR_VAR 0 11
44540: PUSH
44541: LD_VAR 0 1
44545: PPUSH
44546: CALL_OW 476
44550: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44551: LD_ADDR_VAR 0 12
44555: PUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 477
44565: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44566: LD_ADDR_VAR 0 10
44570: PUSH
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 478
44580: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44581: LD_VAR 0 9
44585: NOT
44586: PUSH
44587: LD_VAR 0 11
44591: NOT
44592: OR
44593: PUSH
44594: LD_VAR 0 12
44598: NOT
44599: OR
44600: PUSH
44601: LD_VAR 0 10
44605: NOT
44606: OR
44607: IFFALSE 44642
// begin result := [ chassis , engine , control , weapon ] ;
44609: LD_ADDR_VAR 0 6
44613: PUSH
44614: LD_VAR 0 2
44618: PUSH
44619: LD_VAR 0 3
44623: PUSH
44624: LD_VAR 0 4
44628: PUSH
44629: LD_VAR 0 5
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// exit ;
44640: GO 44933
// end ; if not chassis in _chassis then
44642: LD_VAR 0 2
44646: PUSH
44647: LD_VAR 0 9
44651: IN
44652: NOT
44653: IFFALSE 44679
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44655: LD_ADDR_VAR 0 2
44659: PUSH
44660: LD_VAR 0 9
44664: PUSH
44665: LD_INT 1
44667: PPUSH
44668: LD_VAR 0 9
44672: PPUSH
44673: CALL_OW 12
44677: ARRAY
44678: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44679: LD_VAR 0 2
44683: PPUSH
44684: LD_VAR 0 3
44688: PPUSH
44689: CALL 44938 0 2
44693: NOT
44694: IFFALSE 44753
// repeat engine := _engine [ 1 ] ;
44696: LD_ADDR_VAR 0 3
44700: PUSH
44701: LD_VAR 0 11
44705: PUSH
44706: LD_INT 1
44708: ARRAY
44709: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44710: LD_ADDR_VAR 0 11
44714: PUSH
44715: LD_VAR 0 11
44719: PPUSH
44720: LD_INT 1
44722: PPUSH
44723: CALL_OW 3
44727: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44728: LD_VAR 0 2
44732: PPUSH
44733: LD_VAR 0 3
44737: PPUSH
44738: CALL 44938 0 2
44742: PUSH
44743: LD_VAR 0 11
44747: PUSH
44748: EMPTY
44749: EQUAL
44750: OR
44751: IFFALSE 44696
// if not control in _control then
44753: LD_VAR 0 4
44757: PUSH
44758: LD_VAR 0 12
44762: IN
44763: NOT
44764: IFFALSE 44790
// control := _control [ rand ( 1 , _control ) ] ;
44766: LD_ADDR_VAR 0 4
44770: PUSH
44771: LD_VAR 0 12
44775: PUSH
44776: LD_INT 1
44778: PPUSH
44779: LD_VAR 0 12
44783: PPUSH
44784: CALL_OW 12
44788: ARRAY
44789: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44790: LD_VAR 0 2
44794: PPUSH
44795: LD_VAR 0 5
44799: PPUSH
44800: CALL 45158 0 2
44804: NOT
44805: IFFALSE 44864
// repeat weapon := _weapon [ 1 ] ;
44807: LD_ADDR_VAR 0 5
44811: PUSH
44812: LD_VAR 0 10
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44821: LD_ADDR_VAR 0 10
44825: PUSH
44826: LD_VAR 0 10
44830: PPUSH
44831: LD_INT 1
44833: PPUSH
44834: CALL_OW 3
44838: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44839: LD_VAR 0 2
44843: PPUSH
44844: LD_VAR 0 5
44848: PPUSH
44849: CALL 45158 0 2
44853: PUSH
44854: LD_VAR 0 10
44858: PUSH
44859: EMPTY
44860: EQUAL
44861: OR
44862: IFFALSE 44807
// result := [ ] ;
44864: LD_ADDR_VAR 0 6
44868: PUSH
44869: EMPTY
44870: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44871: LD_VAR 0 1
44875: PPUSH
44876: LD_VAR 0 2
44880: PPUSH
44881: LD_VAR 0 3
44885: PPUSH
44886: LD_VAR 0 4
44890: PPUSH
44891: LD_VAR 0 5
44895: PPUSH
44896: CALL_OW 448
44900: IFFALSE 44933
// result := [ chassis , engine , control , weapon ] ;
44902: LD_ADDR_VAR 0 6
44906: PUSH
44907: LD_VAR 0 2
44911: PUSH
44912: LD_VAR 0 3
44916: PUSH
44917: LD_VAR 0 4
44921: PUSH
44922: LD_VAR 0 5
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// end ;
44933: LD_VAR 0 6
44937: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44938: LD_INT 0
44940: PPUSH
// if not chassis or not engine then
44941: LD_VAR 0 1
44945: NOT
44946: PUSH
44947: LD_VAR 0 2
44951: NOT
44952: OR
44953: IFFALSE 44957
// exit ;
44955: GO 45153
// case engine of engine_solar :
44957: LD_VAR 0 2
44961: PUSH
44962: LD_INT 2
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 44970
44968: GO 45008
44970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44971: LD_ADDR_VAR 0 3
44975: PUSH
44976: LD_INT 11
44978: PUSH
44979: LD_INT 12
44981: PUSH
44982: LD_INT 13
44984: PUSH
44985: LD_INT 14
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
45006: GO 45137
45008: LD_INT 1
45010: DOUBLE
45011: EQUAL
45012: IFTRUE 45016
45014: GO 45078
45016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45017: LD_ADDR_VAR 0 3
45021: PUSH
45022: LD_INT 11
45024: PUSH
45025: LD_INT 12
45027: PUSH
45028: LD_INT 13
45030: PUSH
45031: LD_INT 14
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: LD_INT 4
45045: PUSH
45046: LD_INT 5
45048: PUSH
45049: LD_INT 21
45051: PUSH
45052: LD_INT 23
45054: PUSH
45055: LD_INT 22
45057: PUSH
45058: LD_INT 24
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: ST_TO_ADDR
45076: GO 45137
45078: LD_INT 3
45080: DOUBLE
45081: EQUAL
45082: IFTRUE 45086
45084: GO 45136
45086: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 13
45094: PUSH
45095: LD_INT 14
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: LD_INT 5
45109: PUSH
45110: LD_INT 21
45112: PUSH
45113: LD_INT 22
45115: PUSH
45116: LD_INT 23
45118: PUSH
45119: LD_INT 24
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
45134: GO 45137
45136: POP
// result := ( chassis in result ) ;
45137: LD_ADDR_VAR 0 3
45141: PUSH
45142: LD_VAR 0 1
45146: PUSH
45147: LD_VAR 0 3
45151: IN
45152: ST_TO_ADDR
// end ;
45153: LD_VAR 0 3
45157: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45158: LD_INT 0
45160: PPUSH
// if not chassis or not weapon then
45161: LD_VAR 0 1
45165: NOT
45166: PUSH
45167: LD_VAR 0 2
45171: NOT
45172: OR
45173: IFFALSE 45177
// exit ;
45175: GO 46203
// case weapon of us_machine_gun :
45177: LD_VAR 0 2
45181: PUSH
45182: LD_INT 2
45184: DOUBLE
45185: EQUAL
45186: IFTRUE 45190
45188: GO 45220
45190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 4
45207: PUSH
45208: LD_INT 5
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
45218: GO 46187
45220: LD_INT 3
45222: DOUBLE
45223: EQUAL
45224: IFTRUE 45228
45226: GO 45258
45228: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45229: LD_ADDR_VAR 0 3
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 4
45245: PUSH
45246: LD_INT 5
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
45256: GO 46187
45258: LD_INT 11
45260: DOUBLE
45261: EQUAL
45262: IFTRUE 45266
45264: GO 45296
45266: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45267: LD_ADDR_VAR 0 3
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 4
45283: PUSH
45284: LD_INT 5
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
45294: GO 46187
45296: LD_INT 4
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45330
45304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: LD_INT 4
45318: PUSH
45319: LD_INT 5
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: ST_TO_ADDR
45328: GO 46187
45330: LD_INT 5
45332: DOUBLE
45333: EQUAL
45334: IFTRUE 45338
45336: GO 45364
45338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45339: LD_ADDR_VAR 0 3
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 4
45352: PUSH
45353: LD_INT 5
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
45362: GO 46187
45364: LD_INT 9
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45398
45372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: LD_INT 4
45386: PUSH
45387: LD_INT 5
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
45396: GO 46187
45398: LD_INT 7
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45406
45404: GO 45432
45406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45407: LD_ADDR_VAR 0 3
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
45430: GO 46187
45432: LD_INT 12
45434: DOUBLE
45435: EQUAL
45436: IFTRUE 45440
45438: GO 45466
45440: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45441: LD_ADDR_VAR 0 3
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 4
45454: PUSH
45455: LD_INT 5
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
45464: GO 46187
45466: LD_INT 13
45468: DOUBLE
45469: EQUAL
45470: IFTRUE 45474
45472: GO 45500
45474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: LD_INT 4
45488: PUSH
45489: LD_INT 5
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
45498: GO 46187
45500: LD_INT 14
45502: DOUBLE
45503: EQUAL
45504: IFTRUE 45508
45506: GO 45526
45508: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45509: LD_ADDR_VAR 0 3
45513: PUSH
45514: LD_INT 4
45516: PUSH
45517: LD_INT 5
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: ST_TO_ADDR
45524: GO 46187
45526: LD_INT 6
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45552
45534: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: LD_INT 5
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: ST_TO_ADDR
45550: GO 46187
45552: LD_INT 10
45554: DOUBLE
45555: EQUAL
45556: IFTRUE 45560
45558: GO 45578
45560: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45561: LD_ADDR_VAR 0 3
45565: PUSH
45566: LD_INT 4
45568: PUSH
45569: LD_INT 5
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: ST_TO_ADDR
45576: GO 46187
45578: LD_INT 22
45580: DOUBLE
45581: EQUAL
45582: IFTRUE 45586
45584: GO 45612
45586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_INT 11
45594: PUSH
45595: LD_INT 12
45597: PUSH
45598: LD_INT 13
45600: PUSH
45601: LD_INT 14
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: ST_TO_ADDR
45610: GO 46187
45612: LD_INT 23
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45646
45620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45621: LD_ADDR_VAR 0 3
45625: PUSH
45626: LD_INT 11
45628: PUSH
45629: LD_INT 12
45631: PUSH
45632: LD_INT 13
45634: PUSH
45635: LD_INT 14
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: ST_TO_ADDR
45644: GO 46187
45646: LD_INT 24
45648: DOUBLE
45649: EQUAL
45650: IFTRUE 45654
45652: GO 45680
45654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45655: LD_ADDR_VAR 0 3
45659: PUSH
45660: LD_INT 11
45662: PUSH
45663: LD_INT 12
45665: PUSH
45666: LD_INT 13
45668: PUSH
45669: LD_INT 14
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
45678: GO 46187
45680: LD_INT 30
45682: DOUBLE
45683: EQUAL
45684: IFTRUE 45688
45686: GO 45714
45688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45689: LD_ADDR_VAR 0 3
45693: PUSH
45694: LD_INT 11
45696: PUSH
45697: LD_INT 12
45699: PUSH
45700: LD_INT 13
45702: PUSH
45703: LD_INT 14
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
45712: GO 46187
45714: LD_INT 25
45716: DOUBLE
45717: EQUAL
45718: IFTRUE 45722
45720: GO 45740
45722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45723: LD_ADDR_VAR 0 3
45727: PUSH
45728: LD_INT 13
45730: PUSH
45731: LD_INT 14
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: ST_TO_ADDR
45738: GO 46187
45740: LD_INT 27
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45748
45746: GO 45766
45748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45749: LD_ADDR_VAR 0 3
45753: PUSH
45754: LD_INT 13
45756: PUSH
45757: LD_INT 14
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: ST_TO_ADDR
45764: GO 46187
45766: LD_INT 28
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45774
45772: GO 45792
45774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45775: LD_ADDR_VAR 0 3
45779: PUSH
45780: LD_INT 13
45782: PUSH
45783: LD_INT 14
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: ST_TO_ADDR
45790: GO 46187
45792: LD_INT 29
45794: DOUBLE
45795: EQUAL
45796: IFTRUE 45800
45798: GO 45818
45800: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45801: LD_ADDR_VAR 0 3
45805: PUSH
45806: LD_INT 13
45808: PUSH
45809: LD_INT 14
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: ST_TO_ADDR
45816: GO 46187
45818: LD_INT 31
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45844
45826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45827: LD_ADDR_VAR 0 3
45831: PUSH
45832: LD_INT 13
45834: PUSH
45835: LD_INT 14
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: ST_TO_ADDR
45842: GO 46187
45844: LD_INT 26
45846: DOUBLE
45847: EQUAL
45848: IFTRUE 45852
45850: GO 45870
45852: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45853: LD_ADDR_VAR 0 3
45857: PUSH
45858: LD_INT 13
45860: PUSH
45861: LD_INT 14
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: ST_TO_ADDR
45868: GO 46187
45870: LD_INT 42
45872: DOUBLE
45873: EQUAL
45874: IFTRUE 45878
45876: GO 45904
45878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45879: LD_ADDR_VAR 0 3
45883: PUSH
45884: LD_INT 21
45886: PUSH
45887: LD_INT 22
45889: PUSH
45890: LD_INT 23
45892: PUSH
45893: LD_INT 24
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
45902: GO 46187
45904: LD_INT 43
45906: DOUBLE
45907: EQUAL
45908: IFTRUE 45912
45910: GO 45938
45912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_INT 21
45920: PUSH
45921: LD_INT 22
45923: PUSH
45924: LD_INT 23
45926: PUSH
45927: LD_INT 24
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
45936: GO 46187
45938: LD_INT 44
45940: DOUBLE
45941: EQUAL
45942: IFTRUE 45946
45944: GO 45972
45946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_INT 21
45954: PUSH
45955: LD_INT 22
45957: PUSH
45958: LD_INT 23
45960: PUSH
45961: LD_INT 24
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
45970: GO 46187
45972: LD_INT 45
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45980
45978: GO 46006
45980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45981: LD_ADDR_VAR 0 3
45985: PUSH
45986: LD_INT 21
45988: PUSH
45989: LD_INT 22
45991: PUSH
45992: LD_INT 23
45994: PUSH
45995: LD_INT 24
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
46004: GO 46187
46006: LD_INT 49
46008: DOUBLE
46009: EQUAL
46010: IFTRUE 46014
46012: GO 46040
46014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46015: LD_ADDR_VAR 0 3
46019: PUSH
46020: LD_INT 21
46022: PUSH
46023: LD_INT 22
46025: PUSH
46026: LD_INT 23
46028: PUSH
46029: LD_INT 24
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: ST_TO_ADDR
46038: GO 46187
46040: LD_INT 51
46042: DOUBLE
46043: EQUAL
46044: IFTRUE 46048
46046: GO 46074
46048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46049: LD_ADDR_VAR 0 3
46053: PUSH
46054: LD_INT 21
46056: PUSH
46057: LD_INT 22
46059: PUSH
46060: LD_INT 23
46062: PUSH
46063: LD_INT 24
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
46072: GO 46187
46074: LD_INT 52
46076: DOUBLE
46077: EQUAL
46078: IFTRUE 46082
46080: GO 46108
46082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46083: LD_ADDR_VAR 0 3
46087: PUSH
46088: LD_INT 21
46090: PUSH
46091: LD_INT 22
46093: PUSH
46094: LD_INT 23
46096: PUSH
46097: LD_INT 24
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
46106: GO 46187
46108: LD_INT 53
46110: DOUBLE
46111: EQUAL
46112: IFTRUE 46116
46114: GO 46134
46116: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46117: LD_ADDR_VAR 0 3
46121: PUSH
46122: LD_INT 23
46124: PUSH
46125: LD_INT 24
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: ST_TO_ADDR
46132: GO 46187
46134: LD_INT 46
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46142
46140: GO 46160
46142: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46143: LD_ADDR_VAR 0 3
46147: PUSH
46148: LD_INT 23
46150: PUSH
46151: LD_INT 24
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: ST_TO_ADDR
46158: GO 46187
46160: LD_INT 47
46162: DOUBLE
46163: EQUAL
46164: IFTRUE 46168
46166: GO 46186
46168: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46169: LD_ADDR_VAR 0 3
46173: PUSH
46174: LD_INT 23
46176: PUSH
46177: LD_INT 24
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: ST_TO_ADDR
46184: GO 46187
46186: POP
// result := ( chassis in result ) ;
46187: LD_ADDR_VAR 0 3
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: LD_VAR 0 3
46201: IN
46202: ST_TO_ADDR
// end ;
46203: LD_VAR 0 3
46207: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46208: LD_INT 0
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
// result := array ;
46217: LD_ADDR_VAR 0 5
46221: PUSH
46222: LD_VAR 0 1
46226: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46227: LD_VAR 0 1
46231: NOT
46232: PUSH
46233: LD_VAR 0 2
46237: NOT
46238: OR
46239: PUSH
46240: LD_VAR 0 3
46244: NOT
46245: OR
46246: PUSH
46247: LD_VAR 0 2
46251: PUSH
46252: LD_VAR 0 1
46256: GREATER
46257: OR
46258: PUSH
46259: LD_VAR 0 3
46263: PUSH
46264: LD_VAR 0 1
46268: GREATER
46269: OR
46270: IFFALSE 46274
// exit ;
46272: GO 46570
// if direction then
46274: LD_VAR 0 4
46278: IFFALSE 46342
// begin d := 1 ;
46280: LD_ADDR_VAR 0 9
46284: PUSH
46285: LD_INT 1
46287: ST_TO_ADDR
// if i_from > i_to then
46288: LD_VAR 0 2
46292: PUSH
46293: LD_VAR 0 3
46297: GREATER
46298: IFFALSE 46324
// length := ( array - i_from ) + i_to else
46300: LD_ADDR_VAR 0 11
46304: PUSH
46305: LD_VAR 0 1
46309: PUSH
46310: LD_VAR 0 2
46314: MINUS
46315: PUSH
46316: LD_VAR 0 3
46320: PLUS
46321: ST_TO_ADDR
46322: GO 46340
// length := i_to - i_from ;
46324: LD_ADDR_VAR 0 11
46328: PUSH
46329: LD_VAR 0 3
46333: PUSH
46334: LD_VAR 0 2
46338: MINUS
46339: ST_TO_ADDR
// end else
46340: GO 46403
// begin d := - 1 ;
46342: LD_ADDR_VAR 0 9
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: ST_TO_ADDR
// if i_from > i_to then
46351: LD_VAR 0 2
46355: PUSH
46356: LD_VAR 0 3
46360: GREATER
46361: IFFALSE 46381
// length := i_from - i_to else
46363: LD_ADDR_VAR 0 11
46367: PUSH
46368: LD_VAR 0 2
46372: PUSH
46373: LD_VAR 0 3
46377: MINUS
46378: ST_TO_ADDR
46379: GO 46403
// length := ( array - i_to ) + i_from ;
46381: LD_ADDR_VAR 0 11
46385: PUSH
46386: LD_VAR 0 1
46390: PUSH
46391: LD_VAR 0 3
46395: MINUS
46396: PUSH
46397: LD_VAR 0 2
46401: PLUS
46402: ST_TO_ADDR
// end ; if not length then
46403: LD_VAR 0 11
46407: NOT
46408: IFFALSE 46412
// exit ;
46410: GO 46570
// tmp := array ;
46412: LD_ADDR_VAR 0 10
46416: PUSH
46417: LD_VAR 0 1
46421: ST_TO_ADDR
// for i = 1 to length do
46422: LD_ADDR_VAR 0 6
46426: PUSH
46427: DOUBLE
46428: LD_INT 1
46430: DEC
46431: ST_TO_ADDR
46432: LD_VAR 0 11
46436: PUSH
46437: FOR_TO
46438: IFFALSE 46558
// begin for j = 1 to array do
46440: LD_ADDR_VAR 0 7
46444: PUSH
46445: DOUBLE
46446: LD_INT 1
46448: DEC
46449: ST_TO_ADDR
46450: LD_VAR 0 1
46454: PUSH
46455: FOR_TO
46456: IFFALSE 46544
// begin k := j + d ;
46458: LD_ADDR_VAR 0 8
46462: PUSH
46463: LD_VAR 0 7
46467: PUSH
46468: LD_VAR 0 9
46472: PLUS
46473: ST_TO_ADDR
// if k > array then
46474: LD_VAR 0 8
46478: PUSH
46479: LD_VAR 0 1
46483: GREATER
46484: IFFALSE 46494
// k := 1 ;
46486: LD_ADDR_VAR 0 8
46490: PUSH
46491: LD_INT 1
46493: ST_TO_ADDR
// if not k then
46494: LD_VAR 0 8
46498: NOT
46499: IFFALSE 46511
// k := array ;
46501: LD_ADDR_VAR 0 8
46505: PUSH
46506: LD_VAR 0 1
46510: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46511: LD_ADDR_VAR 0 10
46515: PUSH
46516: LD_VAR 0 10
46520: PPUSH
46521: LD_VAR 0 8
46525: PPUSH
46526: LD_VAR 0 1
46530: PUSH
46531: LD_VAR 0 7
46535: ARRAY
46536: PPUSH
46537: CALL_OW 1
46541: ST_TO_ADDR
// end ;
46542: GO 46455
46544: POP
46545: POP
// array := tmp ;
46546: LD_ADDR_VAR 0 1
46550: PUSH
46551: LD_VAR 0 10
46555: ST_TO_ADDR
// end ;
46556: GO 46437
46558: POP
46559: POP
// result := array ;
46560: LD_ADDR_VAR 0 5
46564: PUSH
46565: LD_VAR 0 1
46569: ST_TO_ADDR
// end ;
46570: LD_VAR 0 5
46574: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46575: LD_INT 0
46577: PPUSH
46578: PPUSH
// result := 0 ;
46579: LD_ADDR_VAR 0 3
46583: PUSH
46584: LD_INT 0
46586: ST_TO_ADDR
// if not array or not value in array then
46587: LD_VAR 0 1
46591: NOT
46592: PUSH
46593: LD_VAR 0 2
46597: PUSH
46598: LD_VAR 0 1
46602: IN
46603: NOT
46604: OR
46605: IFFALSE 46609
// exit ;
46607: GO 46663
// for i = 1 to array do
46609: LD_ADDR_VAR 0 4
46613: PUSH
46614: DOUBLE
46615: LD_INT 1
46617: DEC
46618: ST_TO_ADDR
46619: LD_VAR 0 1
46623: PUSH
46624: FOR_TO
46625: IFFALSE 46661
// if value = array [ i ] then
46627: LD_VAR 0 2
46631: PUSH
46632: LD_VAR 0 1
46636: PUSH
46637: LD_VAR 0 4
46641: ARRAY
46642: EQUAL
46643: IFFALSE 46659
// begin result := i ;
46645: LD_ADDR_VAR 0 3
46649: PUSH
46650: LD_VAR 0 4
46654: ST_TO_ADDR
// exit ;
46655: POP
46656: POP
46657: GO 46663
// end ;
46659: GO 46624
46661: POP
46662: POP
// end ;
46663: LD_VAR 0 3
46667: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46668: LD_INT 0
46670: PPUSH
// vc_chassis := chassis ;
46671: LD_ADDR_OWVAR 37
46675: PUSH
46676: LD_VAR 0 1
46680: ST_TO_ADDR
// vc_engine := engine ;
46681: LD_ADDR_OWVAR 39
46685: PUSH
46686: LD_VAR 0 2
46690: ST_TO_ADDR
// vc_control := control ;
46691: LD_ADDR_OWVAR 38
46695: PUSH
46696: LD_VAR 0 3
46700: ST_TO_ADDR
// vc_weapon := weapon ;
46701: LD_ADDR_OWVAR 40
46705: PUSH
46706: LD_VAR 0 4
46710: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46711: LD_ADDR_OWVAR 41
46715: PUSH
46716: LD_VAR 0 5
46720: ST_TO_ADDR
// end ;
46721: LD_VAR 0 6
46725: RET
// export function WantPlant ( unit ) ; var task ; begin
46726: LD_INT 0
46728: PPUSH
46729: PPUSH
// result := false ;
46730: LD_ADDR_VAR 0 2
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46738: LD_ADDR_VAR 0 3
46742: PUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 437
46752: ST_TO_ADDR
// if task then
46753: LD_VAR 0 3
46757: IFFALSE 46785
// if task [ 1 ] [ 1 ] = p then
46759: LD_VAR 0 3
46763: PUSH
46764: LD_INT 1
46766: ARRAY
46767: PUSH
46768: LD_INT 1
46770: ARRAY
46771: PUSH
46772: LD_STRING p
46774: EQUAL
46775: IFFALSE 46785
// result := true ;
46777: LD_ADDR_VAR 0 2
46781: PUSH
46782: LD_INT 1
46784: ST_TO_ADDR
// end ;
46785: LD_VAR 0 2
46789: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46790: LD_INT 0
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
// if pos < 1 then
46796: LD_VAR 0 2
46800: PUSH
46801: LD_INT 1
46803: LESS
46804: IFFALSE 46808
// exit ;
46806: GO 47111
// if pos = 1 then
46808: LD_VAR 0 2
46812: PUSH
46813: LD_INT 1
46815: EQUAL
46816: IFFALSE 46849
// result := Replace ( arr , pos [ 1 ] , value ) else
46818: LD_ADDR_VAR 0 4
46822: PUSH
46823: LD_VAR 0 1
46827: PPUSH
46828: LD_VAR 0 2
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: PPUSH
46837: LD_VAR 0 3
46841: PPUSH
46842: CALL_OW 1
46846: ST_TO_ADDR
46847: GO 47111
// begin tmp := arr ;
46849: LD_ADDR_VAR 0 6
46853: PUSH
46854: LD_VAR 0 1
46858: ST_TO_ADDR
// s_arr := [ tmp ] ;
46859: LD_ADDR_VAR 0 7
46863: PUSH
46864: LD_VAR 0 6
46868: PUSH
46869: EMPTY
46870: LIST
46871: ST_TO_ADDR
// for i = 1 to pos - 1 do
46872: LD_ADDR_VAR 0 5
46876: PUSH
46877: DOUBLE
46878: LD_INT 1
46880: DEC
46881: ST_TO_ADDR
46882: LD_VAR 0 2
46886: PUSH
46887: LD_INT 1
46889: MINUS
46890: PUSH
46891: FOR_TO
46892: IFFALSE 46937
// begin tmp := tmp [ pos [ i ] ] ;
46894: LD_ADDR_VAR 0 6
46898: PUSH
46899: LD_VAR 0 6
46903: PUSH
46904: LD_VAR 0 2
46908: PUSH
46909: LD_VAR 0 5
46913: ARRAY
46914: ARRAY
46915: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46916: LD_ADDR_VAR 0 7
46920: PUSH
46921: LD_VAR 0 7
46925: PUSH
46926: LD_VAR 0 6
46930: PUSH
46931: EMPTY
46932: LIST
46933: ADD
46934: ST_TO_ADDR
// end ;
46935: GO 46891
46937: POP
46938: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46939: LD_ADDR_VAR 0 6
46943: PUSH
46944: LD_VAR 0 6
46948: PPUSH
46949: LD_VAR 0 2
46953: PUSH
46954: LD_VAR 0 2
46958: ARRAY
46959: PPUSH
46960: LD_VAR 0 3
46964: PPUSH
46965: CALL_OW 1
46969: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46970: LD_ADDR_VAR 0 7
46974: PUSH
46975: LD_VAR 0 7
46979: PPUSH
46980: LD_VAR 0 7
46984: PPUSH
46985: LD_VAR 0 6
46989: PPUSH
46990: CALL_OW 1
46994: ST_TO_ADDR
// for i = s_arr downto 2 do
46995: LD_ADDR_VAR 0 5
46999: PUSH
47000: DOUBLE
47001: LD_VAR 0 7
47005: INC
47006: ST_TO_ADDR
47007: LD_INT 2
47009: PUSH
47010: FOR_DOWNTO
47011: IFFALSE 47095
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47013: LD_ADDR_VAR 0 6
47017: PUSH
47018: LD_VAR 0 7
47022: PUSH
47023: LD_VAR 0 5
47027: PUSH
47028: LD_INT 1
47030: MINUS
47031: ARRAY
47032: PPUSH
47033: LD_VAR 0 2
47037: PUSH
47038: LD_VAR 0 5
47042: PUSH
47043: LD_INT 1
47045: MINUS
47046: ARRAY
47047: PPUSH
47048: LD_VAR 0 7
47052: PUSH
47053: LD_VAR 0 5
47057: ARRAY
47058: PPUSH
47059: CALL_OW 1
47063: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47064: LD_ADDR_VAR 0 7
47068: PUSH
47069: LD_VAR 0 7
47073: PPUSH
47074: LD_VAR 0 5
47078: PUSH
47079: LD_INT 1
47081: MINUS
47082: PPUSH
47083: LD_VAR 0 6
47087: PPUSH
47088: CALL_OW 1
47092: ST_TO_ADDR
// end ;
47093: GO 47010
47095: POP
47096: POP
// result := s_arr [ 1 ] ;
47097: LD_ADDR_VAR 0 4
47101: PUSH
47102: LD_VAR 0 7
47106: PUSH
47107: LD_INT 1
47109: ARRAY
47110: ST_TO_ADDR
// end ; end ;
47111: LD_VAR 0 4
47115: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47116: LD_INT 0
47118: PPUSH
47119: PPUSH
// if not list then
47120: LD_VAR 0 1
47124: NOT
47125: IFFALSE 47129
// exit ;
47127: GO 47220
// i := list [ pos1 ] ;
47129: LD_ADDR_VAR 0 5
47133: PUSH
47134: LD_VAR 0 1
47138: PUSH
47139: LD_VAR 0 2
47143: ARRAY
47144: ST_TO_ADDR
// if not i then
47145: LD_VAR 0 5
47149: NOT
47150: IFFALSE 47154
// exit ;
47152: GO 47220
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47154: LD_ADDR_VAR 0 1
47158: PUSH
47159: LD_VAR 0 1
47163: PPUSH
47164: LD_VAR 0 2
47168: PPUSH
47169: LD_VAR 0 1
47173: PUSH
47174: LD_VAR 0 3
47178: ARRAY
47179: PPUSH
47180: CALL_OW 1
47184: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47185: LD_ADDR_VAR 0 1
47189: PUSH
47190: LD_VAR 0 1
47194: PPUSH
47195: LD_VAR 0 3
47199: PPUSH
47200: LD_VAR 0 5
47204: PPUSH
47205: CALL_OW 1
47209: ST_TO_ADDR
// result := list ;
47210: LD_ADDR_VAR 0 4
47214: PUSH
47215: LD_VAR 0 1
47219: ST_TO_ADDR
// end ;
47220: LD_VAR 0 4
47224: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47225: LD_INT 0
47227: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47228: LD_ADDR_VAR 0 5
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 250
47242: PPUSH
47243: LD_VAR 0 1
47247: PPUSH
47248: CALL_OW 251
47252: PPUSH
47253: LD_VAR 0 2
47257: PPUSH
47258: LD_VAR 0 3
47262: PPUSH
47263: LD_VAR 0 4
47267: PPUSH
47268: CALL 47278 0 5
47272: ST_TO_ADDR
// end ;
47273: LD_VAR 0 5
47277: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
47282: PPUSH
47283: PPUSH
// if not list then
47284: LD_VAR 0 3
47288: NOT
47289: IFFALSE 47293
// exit ;
47291: GO 47681
// result := [ ] ;
47293: LD_ADDR_VAR 0 6
47297: PUSH
47298: EMPTY
47299: ST_TO_ADDR
// for i in list do
47300: LD_ADDR_VAR 0 7
47304: PUSH
47305: LD_VAR 0 3
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47513
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47313: LD_ADDR_VAR 0 9
47317: PUSH
47318: LD_VAR 0 7
47322: PPUSH
47323: LD_VAR 0 1
47327: PPUSH
47328: LD_VAR 0 2
47332: PPUSH
47333: CALL_OW 297
47337: ST_TO_ADDR
// if not result then
47338: LD_VAR 0 6
47342: NOT
47343: IFFALSE 47369
// result := [ [ i , tmp ] ] else
47345: LD_ADDR_VAR 0 6
47349: PUSH
47350: LD_VAR 0 7
47354: PUSH
47355: LD_VAR 0 9
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: ST_TO_ADDR
47367: GO 47511
// begin if result [ result ] [ 2 ] < tmp then
47369: LD_VAR 0 6
47373: PUSH
47374: LD_VAR 0 6
47378: ARRAY
47379: PUSH
47380: LD_INT 2
47382: ARRAY
47383: PUSH
47384: LD_VAR 0 9
47388: LESS
47389: IFFALSE 47431
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47391: LD_ADDR_VAR 0 6
47395: PUSH
47396: LD_VAR 0 6
47400: PPUSH
47401: LD_VAR 0 6
47405: PUSH
47406: LD_INT 1
47408: PLUS
47409: PPUSH
47410: LD_VAR 0 7
47414: PUSH
47415: LD_VAR 0 9
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PPUSH
47424: CALL_OW 2
47428: ST_TO_ADDR
47429: GO 47511
// for j = 1 to result do
47431: LD_ADDR_VAR 0 8
47435: PUSH
47436: DOUBLE
47437: LD_INT 1
47439: DEC
47440: ST_TO_ADDR
47441: LD_VAR 0 6
47445: PUSH
47446: FOR_TO
47447: IFFALSE 47509
// begin if tmp < result [ j ] [ 2 ] then
47449: LD_VAR 0 9
47453: PUSH
47454: LD_VAR 0 6
47458: PUSH
47459: LD_VAR 0 8
47463: ARRAY
47464: PUSH
47465: LD_INT 2
47467: ARRAY
47468: LESS
47469: IFFALSE 47507
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47471: LD_ADDR_VAR 0 6
47475: PUSH
47476: LD_VAR 0 6
47480: PPUSH
47481: LD_VAR 0 8
47485: PPUSH
47486: LD_VAR 0 7
47490: PUSH
47491: LD_VAR 0 9
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 2
47504: ST_TO_ADDR
// break ;
47505: GO 47509
// end ; end ;
47507: GO 47446
47509: POP
47510: POP
// end ; end ;
47511: GO 47310
47513: POP
47514: POP
// if result and not asc then
47515: LD_VAR 0 6
47519: PUSH
47520: LD_VAR 0 4
47524: NOT
47525: AND
47526: IFFALSE 47601
// begin tmp := result ;
47528: LD_ADDR_VAR 0 9
47532: PUSH
47533: LD_VAR 0 6
47537: ST_TO_ADDR
// for i = tmp downto 1 do
47538: LD_ADDR_VAR 0 7
47542: PUSH
47543: DOUBLE
47544: LD_VAR 0 9
47548: INC
47549: ST_TO_ADDR
47550: LD_INT 1
47552: PUSH
47553: FOR_DOWNTO
47554: IFFALSE 47599
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47556: LD_ADDR_VAR 0 6
47560: PUSH
47561: LD_VAR 0 6
47565: PPUSH
47566: LD_VAR 0 9
47570: PUSH
47571: LD_VAR 0 7
47575: MINUS
47576: PUSH
47577: LD_INT 1
47579: PLUS
47580: PPUSH
47581: LD_VAR 0 9
47585: PUSH
47586: LD_VAR 0 7
47590: ARRAY
47591: PPUSH
47592: CALL_OW 1
47596: ST_TO_ADDR
47597: GO 47553
47599: POP
47600: POP
// end ; tmp := [ ] ;
47601: LD_ADDR_VAR 0 9
47605: PUSH
47606: EMPTY
47607: ST_TO_ADDR
// if mode then
47608: LD_VAR 0 5
47612: IFFALSE 47681
// begin for i = 1 to result do
47614: LD_ADDR_VAR 0 7
47618: PUSH
47619: DOUBLE
47620: LD_INT 1
47622: DEC
47623: ST_TO_ADDR
47624: LD_VAR 0 6
47628: PUSH
47629: FOR_TO
47630: IFFALSE 47669
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47632: LD_ADDR_VAR 0 9
47636: PUSH
47637: LD_VAR 0 9
47641: PPUSH
47642: LD_VAR 0 7
47646: PPUSH
47647: LD_VAR 0 6
47651: PUSH
47652: LD_VAR 0 7
47656: ARRAY
47657: PUSH
47658: LD_INT 1
47660: ARRAY
47661: PPUSH
47662: CALL_OW 1
47666: ST_TO_ADDR
47667: GO 47629
47669: POP
47670: POP
// result := tmp ;
47671: LD_ADDR_VAR 0 6
47675: PUSH
47676: LD_VAR 0 9
47680: ST_TO_ADDR
// end ; end ;
47681: LD_VAR 0 6
47685: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47686: LD_INT 0
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47694: LD_ADDR_VAR 0 5
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
// if not x or not y then
47716: LD_VAR 0 2
47720: NOT
47721: PUSH
47722: LD_VAR 0 3
47726: NOT
47727: OR
47728: IFFALSE 47732
// exit ;
47730: GO 49378
// if not range then
47732: LD_VAR 0 4
47736: NOT
47737: IFFALSE 47747
// range := 10 ;
47739: LD_ADDR_VAR 0 4
47743: PUSH
47744: LD_INT 10
47746: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47747: LD_ADDR_VAR 0 8
47751: PUSH
47752: LD_INT 81
47754: PUSH
47755: LD_VAR 0 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 92
47766: PUSH
47767: LD_VAR 0 2
47771: PUSH
47772: LD_VAR 0 3
47776: PUSH
47777: LD_VAR 0 4
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: LD_INT 21
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: PPUSH
47810: CALL_OW 69
47814: ST_TO_ADDR
// if not tmp then
47815: LD_VAR 0 8
47819: NOT
47820: IFFALSE 47824
// exit ;
47822: GO 49378
// for i in tmp do
47824: LD_ADDR_VAR 0 6
47828: PUSH
47829: LD_VAR 0 8
47833: PUSH
47834: FOR_IN
47835: IFFALSE 49353
// begin points := [ 0 , 0 , 0 ] ;
47837: LD_ADDR_VAR 0 9
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: ST_TO_ADDR
// bpoints := 1 ;
47856: LD_ADDR_VAR 0 10
47860: PUSH
47861: LD_INT 1
47863: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47864: LD_VAR 0 6
47868: PPUSH
47869: CALL_OW 247
47873: PUSH
47874: LD_INT 1
47876: DOUBLE
47877: EQUAL
47878: IFTRUE 47882
47880: GO 48460
47882: POP
// begin if GetClass ( i ) = 1 then
47883: LD_VAR 0 6
47887: PPUSH
47888: CALL_OW 257
47892: PUSH
47893: LD_INT 1
47895: EQUAL
47896: IFFALSE 47917
// points := [ 10 , 5 , 3 ] ;
47898: LD_ADDR_VAR 0 9
47902: PUSH
47903: LD_INT 10
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47917: LD_VAR 0 6
47921: PPUSH
47922: CALL_OW 257
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 4
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: IN
47941: IFFALSE 47962
// points := [ 3 , 2 , 1 ] ;
47943: LD_ADDR_VAR 0 9
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47962: LD_VAR 0 6
47966: PPUSH
47967: CALL_OW 257
47971: PUSH
47972: LD_INT 5
47974: EQUAL
47975: IFFALSE 47996
// points := [ 130 , 5 , 2 ] ;
47977: LD_ADDR_VAR 0 9
47981: PUSH
47982: LD_INT 130
47984: PUSH
47985: LD_INT 5
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47996: LD_VAR 0 6
48000: PPUSH
48001: CALL_OW 257
48005: PUSH
48006: LD_INT 8
48008: EQUAL
48009: IFFALSE 48030
// points := [ 35 , 35 , 30 ] ;
48011: LD_ADDR_VAR 0 9
48015: PUSH
48016: LD_INT 35
48018: PUSH
48019: LD_INT 35
48021: PUSH
48022: LD_INT 30
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48030: LD_VAR 0 6
48034: PPUSH
48035: CALL_OW 257
48039: PUSH
48040: LD_INT 9
48042: EQUAL
48043: IFFALSE 48064
// points := [ 20 , 55 , 40 ] ;
48045: LD_ADDR_VAR 0 9
48049: PUSH
48050: LD_INT 20
48052: PUSH
48053: LD_INT 55
48055: PUSH
48056: LD_INT 40
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48064: LD_VAR 0 6
48068: PPUSH
48069: CALL_OW 257
48073: PUSH
48074: LD_INT 12
48076: PUSH
48077: LD_INT 16
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: IN
48084: IFFALSE 48105
// points := [ 5 , 3 , 2 ] ;
48086: LD_ADDR_VAR 0 9
48090: PUSH
48091: LD_INT 5
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48105: LD_VAR 0 6
48109: PPUSH
48110: CALL_OW 257
48114: PUSH
48115: LD_INT 17
48117: EQUAL
48118: IFFALSE 48139
// points := [ 100 , 50 , 75 ] ;
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_INT 100
48127: PUSH
48128: LD_INT 50
48130: PUSH
48131: LD_INT 75
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48139: LD_VAR 0 6
48143: PPUSH
48144: CALL_OW 257
48148: PUSH
48149: LD_INT 15
48151: EQUAL
48152: IFFALSE 48173
// points := [ 10 , 5 , 3 ] ;
48154: LD_ADDR_VAR 0 9
48158: PUSH
48159: LD_INT 10
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48173: LD_VAR 0 6
48177: PPUSH
48178: CALL_OW 257
48182: PUSH
48183: LD_INT 14
48185: EQUAL
48186: IFFALSE 48207
// points := [ 10 , 0 , 0 ] ;
48188: LD_ADDR_VAR 0 9
48192: PUSH
48193: LD_INT 10
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48207: LD_VAR 0 6
48211: PPUSH
48212: CALL_OW 257
48216: PUSH
48217: LD_INT 11
48219: EQUAL
48220: IFFALSE 48241
// points := [ 30 , 10 , 5 ] ;
48222: LD_ADDR_VAR 0 9
48226: PUSH
48227: LD_INT 30
48229: PUSH
48230: LD_INT 10
48232: PUSH
48233: LD_INT 5
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48241: LD_VAR 0 1
48245: PPUSH
48246: LD_INT 5
48248: PPUSH
48249: CALL_OW 321
48253: PUSH
48254: LD_INT 2
48256: EQUAL
48257: IFFALSE 48274
// bpoints := bpoints * 1.8 ;
48259: LD_ADDR_VAR 0 10
48263: PUSH
48264: LD_VAR 0 10
48268: PUSH
48269: LD_REAL  1.80000000000000E+0000
48272: MUL
48273: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48274: LD_VAR 0 6
48278: PPUSH
48279: CALL_OW 257
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: LD_INT 4
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: IN
48302: PUSH
48303: LD_VAR 0 1
48307: PPUSH
48308: LD_INT 51
48310: PPUSH
48311: CALL_OW 321
48315: PUSH
48316: LD_INT 2
48318: EQUAL
48319: AND
48320: IFFALSE 48337
// bpoints := bpoints * 1.2 ;
48322: LD_ADDR_VAR 0 10
48326: PUSH
48327: LD_VAR 0 10
48331: PUSH
48332: LD_REAL  1.20000000000000E+0000
48335: MUL
48336: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48337: LD_VAR 0 6
48341: PPUSH
48342: CALL_OW 257
48346: PUSH
48347: LD_INT 5
48349: PUSH
48350: LD_INT 7
48352: PUSH
48353: LD_INT 9
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: IN
48361: PUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: LD_INT 52
48369: PPUSH
48370: CALL_OW 321
48374: PUSH
48375: LD_INT 2
48377: EQUAL
48378: AND
48379: IFFALSE 48396
// bpoints := bpoints * 1.5 ;
48381: LD_ADDR_VAR 0 10
48385: PUSH
48386: LD_VAR 0 10
48390: PUSH
48391: LD_REAL  1.50000000000000E+0000
48394: MUL
48395: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48396: LD_VAR 0 1
48400: PPUSH
48401: LD_INT 66
48403: PPUSH
48404: CALL_OW 321
48408: PUSH
48409: LD_INT 2
48411: EQUAL
48412: IFFALSE 48429
// bpoints := bpoints * 1.1 ;
48414: LD_ADDR_VAR 0 10
48418: PUSH
48419: LD_VAR 0 10
48423: PUSH
48424: LD_REAL  1.10000000000000E+0000
48427: MUL
48428: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48429: LD_ADDR_VAR 0 10
48433: PUSH
48434: LD_VAR 0 10
48438: PUSH
48439: LD_VAR 0 6
48443: PPUSH
48444: LD_INT 1
48446: PPUSH
48447: CALL_OW 259
48451: PUSH
48452: LD_REAL  1.15000000000000E+0000
48455: MUL
48456: MUL
48457: ST_TO_ADDR
// end ; unit_vehicle :
48458: GO 49282
48460: LD_INT 2
48462: DOUBLE
48463: EQUAL
48464: IFTRUE 48468
48466: GO 49270
48468: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48469: LD_VAR 0 6
48473: PPUSH
48474: CALL_OW 264
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: LD_INT 42
48484: PUSH
48485: LD_INT 24
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: IN
48493: IFFALSE 48514
// points := [ 25 , 5 , 3 ] ;
48495: LD_ADDR_VAR 0 9
48499: PUSH
48500: LD_INT 25
48502: PUSH
48503: LD_INT 5
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48514: LD_VAR 0 6
48518: PPUSH
48519: CALL_OW 264
48523: PUSH
48524: LD_INT 4
48526: PUSH
48527: LD_INT 43
48529: PUSH
48530: LD_INT 25
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: IN
48538: IFFALSE 48559
// points := [ 40 , 15 , 5 ] ;
48540: LD_ADDR_VAR 0 9
48544: PUSH
48545: LD_INT 40
48547: PUSH
48548: LD_INT 15
48550: PUSH
48551: LD_INT 5
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48559: LD_VAR 0 6
48563: PPUSH
48564: CALL_OW 264
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 23
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: IN
48579: IFFALSE 48600
// points := [ 7 , 25 , 8 ] ;
48581: LD_ADDR_VAR 0 9
48585: PUSH
48586: LD_INT 7
48588: PUSH
48589: LD_INT 25
48591: PUSH
48592: LD_INT 8
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48600: LD_VAR 0 6
48604: PPUSH
48605: CALL_OW 264
48609: PUSH
48610: LD_INT 5
48612: PUSH
48613: LD_INT 27
48615: PUSH
48616: LD_INT 44
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: IN
48624: IFFALSE 48645
// points := [ 14 , 50 , 16 ] ;
48626: LD_ADDR_VAR 0 9
48630: PUSH
48631: LD_INT 14
48633: PUSH
48634: LD_INT 50
48636: PUSH
48637: LD_INT 16
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48645: LD_VAR 0 6
48649: PPUSH
48650: CALL_OW 264
48654: PUSH
48655: LD_INT 6
48657: PUSH
48658: LD_INT 46
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: IN
48665: IFFALSE 48686
// points := [ 32 , 120 , 70 ] ;
48667: LD_ADDR_VAR 0 9
48671: PUSH
48672: LD_INT 32
48674: PUSH
48675: LD_INT 120
48677: PUSH
48678: LD_INT 70
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
48686: LD_VAR 0 6
48690: PPUSH
48691: CALL_OW 264
48695: PUSH
48696: LD_INT 7
48698: PUSH
48699: LD_INT 28
48701: PUSH
48702: LD_INT 45
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: IN
48710: IFFALSE 48731
// points := [ 35 , 20 , 45 ] ;
48712: LD_ADDR_VAR 0 9
48716: PUSH
48717: LD_INT 35
48719: PUSH
48720: LD_INT 20
48722: PUSH
48723: LD_INT 45
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48731: LD_VAR 0 6
48735: PPUSH
48736: CALL_OW 264
48740: PUSH
48741: LD_INT 47
48743: PUSH
48744: EMPTY
48745: LIST
48746: IN
48747: IFFALSE 48768
// points := [ 67 , 45 , 75 ] ;
48749: LD_ADDR_VAR 0 9
48753: PUSH
48754: LD_INT 67
48756: PUSH
48757: LD_INT 45
48759: PUSH
48760: LD_INT 75
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48768: LD_VAR 0 6
48772: PPUSH
48773: CALL_OW 264
48777: PUSH
48778: LD_INT 26
48780: PUSH
48781: EMPTY
48782: LIST
48783: IN
48784: IFFALSE 48805
// points := [ 120 , 30 , 80 ] ;
48786: LD_ADDR_VAR 0 9
48790: PUSH
48791: LD_INT 120
48793: PUSH
48794: LD_INT 30
48796: PUSH
48797: LD_INT 80
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48805: LD_VAR 0 6
48809: PPUSH
48810: CALL_OW 264
48814: PUSH
48815: LD_INT 22
48817: PUSH
48818: EMPTY
48819: LIST
48820: IN
48821: IFFALSE 48842
// points := [ 40 , 1 , 1 ] ;
48823: LD_ADDR_VAR 0 9
48827: PUSH
48828: LD_INT 40
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48842: LD_VAR 0 6
48846: PPUSH
48847: CALL_OW 264
48851: PUSH
48852: LD_INT 29
48854: PUSH
48855: EMPTY
48856: LIST
48857: IN
48858: IFFALSE 48879
// points := [ 70 , 200 , 400 ] ;
48860: LD_ADDR_VAR 0 9
48864: PUSH
48865: LD_INT 70
48867: PUSH
48868: LD_INT 200
48870: PUSH
48871: LD_INT 400
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48879: LD_VAR 0 6
48883: PPUSH
48884: CALL_OW 264
48888: PUSH
48889: LD_INT 14
48891: PUSH
48892: LD_INT 53
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: IN
48899: IFFALSE 48920
// points := [ 40 , 10 , 20 ] ;
48901: LD_ADDR_VAR 0 9
48905: PUSH
48906: LD_INT 40
48908: PUSH
48909: LD_INT 10
48911: PUSH
48912: LD_INT 20
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48920: LD_VAR 0 6
48924: PPUSH
48925: CALL_OW 264
48929: PUSH
48930: LD_INT 9
48932: PUSH
48933: EMPTY
48934: LIST
48935: IN
48936: IFFALSE 48957
// points := [ 5 , 70 , 20 ] ;
48938: LD_ADDR_VAR 0 9
48942: PUSH
48943: LD_INT 5
48945: PUSH
48946: LD_INT 70
48948: PUSH
48949: LD_INT 20
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48957: LD_VAR 0 6
48961: PPUSH
48962: CALL_OW 264
48966: PUSH
48967: LD_INT 10
48969: PUSH
48970: EMPTY
48971: LIST
48972: IN
48973: IFFALSE 48994
// points := [ 35 , 110 , 70 ] ;
48975: LD_ADDR_VAR 0 9
48979: PUSH
48980: LD_INT 35
48982: PUSH
48983: LD_INT 110
48985: PUSH
48986: LD_INT 70
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48994: LD_VAR 0 6
48998: PPUSH
48999: CALL_OW 265
49003: PUSH
49004: LD_INT 25
49006: EQUAL
49007: IFFALSE 49028
// points := [ 80 , 65 , 100 ] ;
49009: LD_ADDR_VAR 0 9
49013: PUSH
49014: LD_INT 80
49016: PUSH
49017: LD_INT 65
49019: PUSH
49020: LD_INT 100
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49028: LD_VAR 0 6
49032: PPUSH
49033: CALL_OW 263
49037: PUSH
49038: LD_INT 1
49040: EQUAL
49041: IFFALSE 49076
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49043: LD_ADDR_VAR 0 10
49047: PUSH
49048: LD_VAR 0 10
49052: PUSH
49053: LD_VAR 0 6
49057: PPUSH
49058: CALL_OW 311
49062: PPUSH
49063: LD_INT 3
49065: PPUSH
49066: CALL_OW 259
49070: PUSH
49071: LD_INT 4
49073: MUL
49074: MUL
49075: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49076: LD_VAR 0 6
49080: PPUSH
49081: CALL_OW 263
49085: PUSH
49086: LD_INT 2
49088: EQUAL
49089: IFFALSE 49140
// begin j := IsControledBy ( i ) ;
49091: LD_ADDR_VAR 0 7
49095: PUSH
49096: LD_VAR 0 6
49100: PPUSH
49101: CALL_OW 312
49105: ST_TO_ADDR
// if j then
49106: LD_VAR 0 7
49110: IFFALSE 49140
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: LD_VAR 0 10
49121: PUSH
49122: LD_VAR 0 7
49126: PPUSH
49127: LD_INT 3
49129: PPUSH
49130: CALL_OW 259
49134: PUSH
49135: LD_INT 3
49137: MUL
49138: MUL
49139: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49140: LD_VAR 0 6
49144: PPUSH
49145: CALL_OW 264
49149: PUSH
49150: LD_INT 5
49152: PUSH
49153: LD_INT 6
49155: PUSH
49156: LD_INT 46
49158: PUSH
49159: LD_INT 44
49161: PUSH
49162: LD_INT 47
49164: PUSH
49165: LD_INT 45
49167: PUSH
49168: LD_INT 28
49170: PUSH
49171: LD_INT 7
49173: PUSH
49174: LD_INT 27
49176: PUSH
49177: LD_INT 29
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: IN
49192: PUSH
49193: LD_VAR 0 1
49197: PPUSH
49198: LD_INT 52
49200: PPUSH
49201: CALL_OW 321
49205: PUSH
49206: LD_INT 2
49208: EQUAL
49209: AND
49210: IFFALSE 49227
// bpoints := bpoints * 1.2 ;
49212: LD_ADDR_VAR 0 10
49216: PUSH
49217: LD_VAR 0 10
49221: PUSH
49222: LD_REAL  1.20000000000000E+0000
49225: MUL
49226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49227: LD_VAR 0 6
49231: PPUSH
49232: CALL_OW 264
49236: PUSH
49237: LD_INT 6
49239: PUSH
49240: LD_INT 46
49242: PUSH
49243: LD_INT 47
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: IN
49251: IFFALSE 49268
// bpoints := bpoints * 1.2 ;
49253: LD_ADDR_VAR 0 10
49257: PUSH
49258: LD_VAR 0 10
49262: PUSH
49263: LD_REAL  1.20000000000000E+0000
49266: MUL
49267: ST_TO_ADDR
// end ; unit_building :
49268: GO 49282
49270: LD_INT 3
49272: DOUBLE
49273: EQUAL
49274: IFTRUE 49278
49276: GO 49281
49278: POP
// ; end ;
49279: GO 49282
49281: POP
// for j = 1 to 3 do
49282: LD_ADDR_VAR 0 7
49286: PUSH
49287: DOUBLE
49288: LD_INT 1
49290: DEC
49291: ST_TO_ADDR
49292: LD_INT 3
49294: PUSH
49295: FOR_TO
49296: IFFALSE 49349
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49298: LD_ADDR_VAR 0 5
49302: PUSH
49303: LD_VAR 0 5
49307: PPUSH
49308: LD_VAR 0 7
49312: PPUSH
49313: LD_VAR 0 5
49317: PUSH
49318: LD_VAR 0 7
49322: ARRAY
49323: PUSH
49324: LD_VAR 0 9
49328: PUSH
49329: LD_VAR 0 7
49333: ARRAY
49334: PUSH
49335: LD_VAR 0 10
49339: MUL
49340: PLUS
49341: PPUSH
49342: CALL_OW 1
49346: ST_TO_ADDR
49347: GO 49295
49349: POP
49350: POP
// end ;
49351: GO 47834
49353: POP
49354: POP
// result := Replace ( result , 4 , tmp ) ;
49355: LD_ADDR_VAR 0 5
49359: PUSH
49360: LD_VAR 0 5
49364: PPUSH
49365: LD_INT 4
49367: PPUSH
49368: LD_VAR 0 8
49372: PPUSH
49373: CALL_OW 1
49377: ST_TO_ADDR
// end ;
49378: LD_VAR 0 5
49382: RET
// export function DangerAtRange ( unit , range ) ; begin
49383: LD_INT 0
49385: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 255
49400: PPUSH
49401: LD_VAR 0 1
49405: PPUSH
49406: CALL_OW 250
49410: PPUSH
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL_OW 251
49420: PPUSH
49421: LD_VAR 0 2
49425: PPUSH
49426: CALL 47686 0 4
49430: ST_TO_ADDR
// end ;
49431: LD_VAR 0 3
49435: RET
// export function DangerInArea ( side , area ) ; begin
49436: LD_INT 0
49438: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49439: LD_ADDR_VAR 0 3
49443: PUSH
49444: LD_VAR 0 2
49448: PPUSH
49449: LD_INT 81
49451: PUSH
49452: LD_VAR 0 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PPUSH
49461: CALL_OW 70
49465: ST_TO_ADDR
// end ;
49466: LD_VAR 0 3
49470: RET
// export function IsExtension ( b ) ; begin
49471: LD_INT 0
49473: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49474: LD_ADDR_VAR 0 2
49478: PUSH
49479: LD_VAR 0 1
49483: PUSH
49484: LD_INT 23
49486: PUSH
49487: LD_INT 20
49489: PUSH
49490: LD_INT 22
49492: PUSH
49493: LD_INT 17
49495: PUSH
49496: LD_INT 24
49498: PUSH
49499: LD_INT 21
49501: PUSH
49502: LD_INT 19
49504: PUSH
49505: LD_INT 16
49507: PUSH
49508: LD_INT 25
49510: PUSH
49511: LD_INT 18
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: IN
49526: ST_TO_ADDR
// end ;
49527: LD_VAR 0 2
49531: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49532: LD_INT 0
49534: PPUSH
49535: PPUSH
49536: PPUSH
// result := [ ] ;
49537: LD_ADDR_VAR 0 4
49541: PUSH
49542: EMPTY
49543: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49544: LD_ADDR_VAR 0 5
49548: PUSH
49549: LD_VAR 0 2
49553: PPUSH
49554: LD_INT 21
49556: PUSH
49557: LD_INT 3
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PPUSH
49564: CALL_OW 70
49568: ST_TO_ADDR
// if not tmp then
49569: LD_VAR 0 5
49573: NOT
49574: IFFALSE 49578
// exit ;
49576: GO 49642
// if checkLink then
49578: LD_VAR 0 3
49582: IFFALSE 49632
// begin for i in tmp do
49584: LD_ADDR_VAR 0 6
49588: PUSH
49589: LD_VAR 0 5
49593: PUSH
49594: FOR_IN
49595: IFFALSE 49630
// if GetBase ( i ) <> base then
49597: LD_VAR 0 6
49601: PPUSH
49602: CALL_OW 274
49606: PUSH
49607: LD_VAR 0 1
49611: NONEQUAL
49612: IFFALSE 49628
// ComLinkToBase ( base , i ) ;
49614: LD_VAR 0 1
49618: PPUSH
49619: LD_VAR 0 6
49623: PPUSH
49624: CALL_OW 169
49628: GO 49594
49630: POP
49631: POP
// end ; result := tmp ;
49632: LD_ADDR_VAR 0 4
49636: PUSH
49637: LD_VAR 0 5
49641: ST_TO_ADDR
// end ;
49642: LD_VAR 0 4
49646: RET
// export function ComComplete ( units , b ) ; var i ; begin
49647: LD_INT 0
49649: PPUSH
49650: PPUSH
// if not units then
49651: LD_VAR 0 1
49655: NOT
49656: IFFALSE 49660
// exit ;
49658: GO 49750
// for i in units do
49660: LD_ADDR_VAR 0 4
49664: PUSH
49665: LD_VAR 0 1
49669: PUSH
49670: FOR_IN
49671: IFFALSE 49748
// if BuildingStatus ( b ) = bs_build then
49673: LD_VAR 0 2
49677: PPUSH
49678: CALL_OW 461
49682: PUSH
49683: LD_INT 1
49685: EQUAL
49686: IFFALSE 49746
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49688: LD_VAR 0 4
49692: PPUSH
49693: LD_STRING h
49695: PUSH
49696: LD_VAR 0 2
49700: PPUSH
49701: CALL_OW 250
49705: PUSH
49706: LD_VAR 0 2
49710: PPUSH
49711: CALL_OW 251
49715: PUSH
49716: LD_VAR 0 2
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: PPUSH
49742: CALL_OW 446
49746: GO 49670
49748: POP
49749: POP
// end ;
49750: LD_VAR 0 3
49754: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49755: LD_INT 0
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
49763: LD_VAR 0 1
49767: NOT
49768: PUSH
49769: LD_VAR 0 1
49773: PPUSH
49774: CALL_OW 263
49778: PUSH
49779: LD_INT 2
49781: EQUAL
49782: NOT
49783: OR
49784: IFFALSE 49788
// exit ;
49786: GO 50104
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49788: LD_ADDR_VAR 0 6
49792: PUSH
49793: LD_INT 22
49795: PUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 255
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 30
49815: PUSH
49816: LD_INT 36
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 34
49825: PUSH
49826: LD_INT 31
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PPUSH
49842: CALL_OW 69
49846: ST_TO_ADDR
// if not tmp then
49847: LD_VAR 0 6
49851: NOT
49852: IFFALSE 49856
// exit ;
49854: GO 50104
// result := [ ] ;
49856: LD_ADDR_VAR 0 2
49860: PUSH
49861: EMPTY
49862: ST_TO_ADDR
// for i in tmp do
49863: LD_ADDR_VAR 0 3
49867: PUSH
49868: LD_VAR 0 6
49872: PUSH
49873: FOR_IN
49874: IFFALSE 49945
// begin t := UnitsInside ( i ) ;
49876: LD_ADDR_VAR 0 4
49880: PUSH
49881: LD_VAR 0 3
49885: PPUSH
49886: CALL_OW 313
49890: ST_TO_ADDR
// if t then
49891: LD_VAR 0 4
49895: IFFALSE 49943
// for j in t do
49897: LD_ADDR_VAR 0 7
49901: PUSH
49902: LD_VAR 0 4
49906: PUSH
49907: FOR_IN
49908: IFFALSE 49941
// result := Insert ( result , result + 1 , j ) ;
49910: LD_ADDR_VAR 0 2
49914: PUSH
49915: LD_VAR 0 2
49919: PPUSH
49920: LD_VAR 0 2
49924: PUSH
49925: LD_INT 1
49927: PLUS
49928: PPUSH
49929: LD_VAR 0 7
49933: PPUSH
49934: CALL_OW 2
49938: ST_TO_ADDR
49939: GO 49907
49941: POP
49942: POP
// end ;
49943: GO 49873
49945: POP
49946: POP
// if not result then
49947: LD_VAR 0 2
49951: NOT
49952: IFFALSE 49956
// exit ;
49954: GO 50104
// mech := result [ 1 ] ;
49956: LD_ADDR_VAR 0 5
49960: PUSH
49961: LD_VAR 0 2
49965: PUSH
49966: LD_INT 1
49968: ARRAY
49969: ST_TO_ADDR
// if result > 1 then
49970: LD_VAR 0 2
49974: PUSH
49975: LD_INT 1
49977: GREATER
49978: IFFALSE 50090
// for i = 2 to result do
49980: LD_ADDR_VAR 0 3
49984: PUSH
49985: DOUBLE
49986: LD_INT 2
49988: DEC
49989: ST_TO_ADDR
49990: LD_VAR 0 2
49994: PUSH
49995: FOR_TO
49996: IFFALSE 50088
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49998: LD_ADDR_VAR 0 4
50002: PUSH
50003: LD_VAR 0 2
50007: PUSH
50008: LD_VAR 0 3
50012: ARRAY
50013: PPUSH
50014: LD_INT 3
50016: PPUSH
50017: CALL_OW 259
50021: PUSH
50022: LD_VAR 0 2
50026: PUSH
50027: LD_VAR 0 3
50031: ARRAY
50032: PPUSH
50033: CALL_OW 432
50037: MINUS
50038: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50039: LD_VAR 0 4
50043: PUSH
50044: LD_VAR 0 5
50048: PPUSH
50049: LD_INT 3
50051: PPUSH
50052: CALL_OW 259
50056: PUSH
50057: LD_VAR 0 5
50061: PPUSH
50062: CALL_OW 432
50066: MINUS
50067: GREATEREQUAL
50068: IFFALSE 50086
// mech := result [ i ] ;
50070: LD_ADDR_VAR 0 5
50074: PUSH
50075: LD_VAR 0 2
50079: PUSH
50080: LD_VAR 0 3
50084: ARRAY
50085: ST_TO_ADDR
// end ;
50086: GO 49995
50088: POP
50089: POP
// ComLinkTo ( vehicle , mech ) ;
50090: LD_VAR 0 1
50094: PPUSH
50095: LD_VAR 0 5
50099: PPUSH
50100: CALL_OW 135
// end ;
50104: LD_VAR 0 2
50108: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50109: LD_INT 0
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
// result := [ ] ;
50124: LD_ADDR_VAR 0 7
50128: PUSH
50129: EMPTY
50130: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50131: LD_VAR 0 1
50135: PPUSH
50136: CALL_OW 266
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: IN
50151: NOT
50152: IFFALSE 50156
// exit ;
50154: GO 51790
// if name then
50156: LD_VAR 0 3
50160: IFFALSE 50176
// SetBName ( base_dep , name ) ;
50162: LD_VAR 0 1
50166: PPUSH
50167: LD_VAR 0 3
50171: PPUSH
50172: CALL_OW 500
// base := GetBase ( base_dep ) ;
50176: LD_ADDR_VAR 0 15
50180: PUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 274
50190: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50191: LD_ADDR_VAR 0 16
50195: PUSH
50196: LD_VAR 0 1
50200: PPUSH
50201: CALL_OW 255
50205: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50206: LD_ADDR_VAR 0 17
50210: PUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 248
50220: ST_TO_ADDR
// if sources then
50221: LD_VAR 0 5
50225: IFFALSE 50272
// for i = 1 to 3 do
50227: LD_ADDR_VAR 0 8
50231: PUSH
50232: DOUBLE
50233: LD_INT 1
50235: DEC
50236: ST_TO_ADDR
50237: LD_INT 3
50239: PUSH
50240: FOR_TO
50241: IFFALSE 50270
// AddResourceType ( base , i , sources [ i ] ) ;
50243: LD_VAR 0 15
50247: PPUSH
50248: LD_VAR 0 8
50252: PPUSH
50253: LD_VAR 0 5
50257: PUSH
50258: LD_VAR 0 8
50262: ARRAY
50263: PPUSH
50264: CALL_OW 276
50268: GO 50240
50270: POP
50271: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50272: LD_ADDR_VAR 0 18
50276: PUSH
50277: LD_VAR 0 15
50281: PPUSH
50282: LD_VAR 0 2
50286: PPUSH
50287: LD_INT 1
50289: PPUSH
50290: CALL 49532 0 3
50294: ST_TO_ADDR
// InitHc ;
50295: CALL_OW 19
// InitUc ;
50299: CALL_OW 18
// uc_side := side ;
50303: LD_ADDR_OWVAR 20
50307: PUSH
50308: LD_VAR 0 16
50312: ST_TO_ADDR
// uc_nation := nation ;
50313: LD_ADDR_OWVAR 21
50317: PUSH
50318: LD_VAR 0 17
50322: ST_TO_ADDR
// if buildings then
50323: LD_VAR 0 18
50327: IFFALSE 51649
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50329: LD_ADDR_VAR 0 19
50333: PUSH
50334: LD_VAR 0 18
50338: PPUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 29
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: LD_INT 30
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PPUSH
50367: CALL_OW 72
50371: ST_TO_ADDR
// if tmp then
50372: LD_VAR 0 19
50376: IFFALSE 50424
// for i in tmp do
50378: LD_ADDR_VAR 0 8
50382: PUSH
50383: LD_VAR 0 19
50387: PUSH
50388: FOR_IN
50389: IFFALSE 50422
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50391: LD_VAR 0 8
50395: PPUSH
50396: CALL_OW 250
50400: PPUSH
50401: LD_VAR 0 8
50405: PPUSH
50406: CALL_OW 251
50410: PPUSH
50411: LD_VAR 0 16
50415: PPUSH
50416: CALL_OW 441
50420: GO 50388
50422: POP
50423: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50424: LD_VAR 0 18
50428: PPUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 30
50434: PUSH
50435: LD_INT 32
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 30
50444: PUSH
50445: LD_INT 33
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: PPUSH
50457: CALL_OW 72
50461: IFFALSE 50549
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50463: LD_ADDR_VAR 0 8
50467: PUSH
50468: LD_VAR 0 18
50472: PPUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 30
50478: PUSH
50479: LD_INT 32
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 30
50488: PUSH
50489: LD_INT 33
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: PPUSH
50501: CALL_OW 72
50505: PUSH
50506: FOR_IN
50507: IFFALSE 50547
// begin if not GetBWeapon ( i ) then
50509: LD_VAR 0 8
50513: PPUSH
50514: CALL_OW 269
50518: NOT
50519: IFFALSE 50545
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50521: LD_VAR 0 8
50525: PPUSH
50526: LD_VAR 0 8
50530: PPUSH
50531: LD_VAR 0 2
50535: PPUSH
50536: CALL 51795 0 2
50540: PPUSH
50541: CALL_OW 431
// end ;
50545: GO 50506
50547: POP
50548: POP
// end ; for i = 1 to personel do
50549: LD_ADDR_VAR 0 8
50553: PUSH
50554: DOUBLE
50555: LD_INT 1
50557: DEC
50558: ST_TO_ADDR
50559: LD_VAR 0 6
50563: PUSH
50564: FOR_TO
50565: IFFALSE 51629
// begin if i > 4 then
50567: LD_VAR 0 8
50571: PUSH
50572: LD_INT 4
50574: GREATER
50575: IFFALSE 50579
// break ;
50577: GO 51629
// case i of 1 :
50579: LD_VAR 0 8
50583: PUSH
50584: LD_INT 1
50586: DOUBLE
50587: EQUAL
50588: IFTRUE 50592
50590: GO 50672
50592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50593: LD_ADDR_VAR 0 12
50597: PUSH
50598: LD_VAR 0 18
50602: PPUSH
50603: LD_INT 22
50605: PUSH
50606: LD_VAR 0 16
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 58
50617: PUSH
50618: EMPTY
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 30
50626: PUSH
50627: LD_INT 32
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 30
50636: PUSH
50637: LD_INT 4
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 30
50646: PUSH
50647: LD_INT 5
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: PPUSH
50665: CALL_OW 72
50669: ST_TO_ADDR
50670: GO 50894
50672: LD_INT 2
50674: DOUBLE
50675: EQUAL
50676: IFTRUE 50680
50678: GO 50742
50680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50681: LD_ADDR_VAR 0 12
50685: PUSH
50686: LD_VAR 0 18
50690: PPUSH
50691: LD_INT 22
50693: PUSH
50694: LD_VAR 0 16
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 30
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 30
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PPUSH
50735: CALL_OW 72
50739: ST_TO_ADDR
50740: GO 50894
50742: LD_INT 3
50744: DOUBLE
50745: EQUAL
50746: IFTRUE 50750
50748: GO 50812
50750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50751: LD_ADDR_VAR 0 12
50755: PUSH
50756: LD_VAR 0 18
50760: PPUSH
50761: LD_INT 22
50763: PUSH
50764: LD_VAR 0 16
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: LD_INT 30
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 30
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PPUSH
50805: CALL_OW 72
50809: ST_TO_ADDR
50810: GO 50894
50812: LD_INT 4
50814: DOUBLE
50815: EQUAL
50816: IFTRUE 50820
50818: GO 50893
50820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50821: LD_ADDR_VAR 0 12
50825: PUSH
50826: LD_VAR 0 18
50830: PPUSH
50831: LD_INT 22
50833: PUSH
50834: LD_VAR 0 16
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 30
50848: PUSH
50849: LD_INT 6
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 30
50858: PUSH
50859: LD_INT 7
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 30
50868: PUSH
50869: LD_INT 8
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PPUSH
50886: CALL_OW 72
50890: ST_TO_ADDR
50891: GO 50894
50893: POP
// if i = 1 then
50894: LD_VAR 0 8
50898: PUSH
50899: LD_INT 1
50901: EQUAL
50902: IFFALSE 51013
// begin tmp := [ ] ;
50904: LD_ADDR_VAR 0 19
50908: PUSH
50909: EMPTY
50910: ST_TO_ADDR
// for j in f do
50911: LD_ADDR_VAR 0 9
50915: PUSH
50916: LD_VAR 0 12
50920: PUSH
50921: FOR_IN
50922: IFFALSE 50995
// if GetBType ( j ) = b_bunker then
50924: LD_VAR 0 9
50928: PPUSH
50929: CALL_OW 266
50933: PUSH
50934: LD_INT 32
50936: EQUAL
50937: IFFALSE 50964
// tmp := Insert ( tmp , 1 , j ) else
50939: LD_ADDR_VAR 0 19
50943: PUSH
50944: LD_VAR 0 19
50948: PPUSH
50949: LD_INT 1
50951: PPUSH
50952: LD_VAR 0 9
50956: PPUSH
50957: CALL_OW 2
50961: ST_TO_ADDR
50962: GO 50993
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50964: LD_ADDR_VAR 0 19
50968: PUSH
50969: LD_VAR 0 19
50973: PPUSH
50974: LD_VAR 0 19
50978: PUSH
50979: LD_INT 1
50981: PLUS
50982: PPUSH
50983: LD_VAR 0 9
50987: PPUSH
50988: CALL_OW 2
50992: ST_TO_ADDR
50993: GO 50921
50995: POP
50996: POP
// if tmp then
50997: LD_VAR 0 19
51001: IFFALSE 51013
// f := tmp ;
51003: LD_ADDR_VAR 0 12
51007: PUSH
51008: LD_VAR 0 19
51012: ST_TO_ADDR
// end ; x := personel [ i ] ;
51013: LD_ADDR_VAR 0 13
51017: PUSH
51018: LD_VAR 0 6
51022: PUSH
51023: LD_VAR 0 8
51027: ARRAY
51028: ST_TO_ADDR
// if x = - 1 then
51029: LD_VAR 0 13
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: EQUAL
51038: IFFALSE 51247
// begin for j in f do
51040: LD_ADDR_VAR 0 9
51044: PUSH
51045: LD_VAR 0 12
51049: PUSH
51050: FOR_IN
51051: IFFALSE 51243
// repeat InitHc ;
51053: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51057: LD_VAR 0 9
51061: PPUSH
51062: CALL_OW 266
51066: PUSH
51067: LD_INT 5
51069: EQUAL
51070: IFFALSE 51140
// begin if UnitsInside ( j ) < 3 then
51072: LD_VAR 0 9
51076: PPUSH
51077: CALL_OW 313
51081: PUSH
51082: LD_INT 3
51084: LESS
51085: IFFALSE 51121
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51087: LD_INT 0
51089: PPUSH
51090: LD_INT 5
51092: PUSH
51093: LD_INT 8
51095: PUSH
51096: LD_INT 9
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: PUSH
51104: LD_VAR 0 17
51108: ARRAY
51109: PPUSH
51110: LD_VAR 0 4
51114: PPUSH
51115: CALL_OW 380
51119: GO 51138
// PrepareHuman ( false , i , skill ) ;
51121: LD_INT 0
51123: PPUSH
51124: LD_VAR 0 8
51128: PPUSH
51129: LD_VAR 0 4
51133: PPUSH
51134: CALL_OW 380
// end else
51138: GO 51157
// PrepareHuman ( false , i , skill ) ;
51140: LD_INT 0
51142: PPUSH
51143: LD_VAR 0 8
51147: PPUSH
51148: LD_VAR 0 4
51152: PPUSH
51153: CALL_OW 380
// un := CreateHuman ;
51157: LD_ADDR_VAR 0 14
51161: PUSH
51162: CALL_OW 44
51166: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51167: LD_ADDR_VAR 0 7
51171: PUSH
51172: LD_VAR 0 7
51176: PPUSH
51177: LD_INT 1
51179: PPUSH
51180: LD_VAR 0 14
51184: PPUSH
51185: CALL_OW 2
51189: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51190: LD_VAR 0 14
51194: PPUSH
51195: LD_VAR 0 9
51199: PPUSH
51200: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51204: LD_VAR 0 9
51208: PPUSH
51209: CALL_OW 313
51213: PUSH
51214: LD_INT 6
51216: EQUAL
51217: PUSH
51218: LD_VAR 0 9
51222: PPUSH
51223: CALL_OW 266
51227: PUSH
51228: LD_INT 32
51230: PUSH
51231: LD_INT 31
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: IN
51238: OR
51239: IFFALSE 51053
51241: GO 51050
51243: POP
51244: POP
// end else
51245: GO 51627
// for j = 1 to x do
51247: LD_ADDR_VAR 0 9
51251: PUSH
51252: DOUBLE
51253: LD_INT 1
51255: DEC
51256: ST_TO_ADDR
51257: LD_VAR 0 13
51261: PUSH
51262: FOR_TO
51263: IFFALSE 51625
// begin InitHc ;
51265: CALL_OW 19
// if not f then
51269: LD_VAR 0 12
51273: NOT
51274: IFFALSE 51363
// begin PrepareHuman ( false , i , skill ) ;
51276: LD_INT 0
51278: PPUSH
51279: LD_VAR 0 8
51283: PPUSH
51284: LD_VAR 0 4
51288: PPUSH
51289: CALL_OW 380
// un := CreateHuman ;
51293: LD_ADDR_VAR 0 14
51297: PUSH
51298: CALL_OW 44
51302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51303: LD_ADDR_VAR 0 7
51307: PUSH
51308: LD_VAR 0 7
51312: PPUSH
51313: LD_INT 1
51315: PPUSH
51316: LD_VAR 0 14
51320: PPUSH
51321: CALL_OW 2
51325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51326: LD_VAR 0 14
51330: PPUSH
51331: LD_VAR 0 1
51335: PPUSH
51336: CALL_OW 250
51340: PPUSH
51341: LD_VAR 0 1
51345: PPUSH
51346: CALL_OW 251
51350: PPUSH
51351: LD_INT 10
51353: PPUSH
51354: LD_INT 0
51356: PPUSH
51357: CALL_OW 50
// continue ;
51361: GO 51262
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51363: LD_VAR 0 12
51367: PUSH
51368: LD_INT 1
51370: ARRAY
51371: PPUSH
51372: CALL_OW 313
51376: PUSH
51377: LD_VAR 0 12
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PPUSH
51386: CALL_OW 266
51390: PUSH
51391: LD_INT 32
51393: PUSH
51394: LD_INT 31
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: IN
51401: AND
51402: PUSH
51403: LD_VAR 0 12
51407: PUSH
51408: LD_INT 1
51410: ARRAY
51411: PPUSH
51412: CALL_OW 313
51416: PUSH
51417: LD_INT 6
51419: EQUAL
51420: OR
51421: IFFALSE 51441
// f := Delete ( f , 1 ) ;
51423: LD_ADDR_VAR 0 12
51427: PUSH
51428: LD_VAR 0 12
51432: PPUSH
51433: LD_INT 1
51435: PPUSH
51436: CALL_OW 3
51440: ST_TO_ADDR
// if not f then
51441: LD_VAR 0 12
51445: NOT
51446: IFFALSE 51464
// begin x := x + 2 ;
51448: LD_ADDR_VAR 0 13
51452: PUSH
51453: LD_VAR 0 13
51457: PUSH
51458: LD_INT 2
51460: PLUS
51461: ST_TO_ADDR
// continue ;
51462: GO 51262
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51464: LD_VAR 0 12
51468: PUSH
51469: LD_INT 1
51471: ARRAY
51472: PPUSH
51473: CALL_OW 266
51477: PUSH
51478: LD_INT 5
51480: EQUAL
51481: IFFALSE 51555
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51483: LD_VAR 0 12
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: PPUSH
51492: CALL_OW 313
51496: PUSH
51497: LD_INT 3
51499: LESS
51500: IFFALSE 51536
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51502: LD_INT 0
51504: PPUSH
51505: LD_INT 5
51507: PUSH
51508: LD_INT 8
51510: PUSH
51511: LD_INT 9
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: LD_VAR 0 17
51523: ARRAY
51524: PPUSH
51525: LD_VAR 0 4
51529: PPUSH
51530: CALL_OW 380
51534: GO 51553
// PrepareHuman ( false , i , skill ) ;
51536: LD_INT 0
51538: PPUSH
51539: LD_VAR 0 8
51543: PPUSH
51544: LD_VAR 0 4
51548: PPUSH
51549: CALL_OW 380
// end else
51553: GO 51572
// PrepareHuman ( false , i , skill ) ;
51555: LD_INT 0
51557: PPUSH
51558: LD_VAR 0 8
51562: PPUSH
51563: LD_VAR 0 4
51567: PPUSH
51568: CALL_OW 380
// un := CreateHuman ;
51572: LD_ADDR_VAR 0 14
51576: PUSH
51577: CALL_OW 44
51581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51582: LD_ADDR_VAR 0 7
51586: PUSH
51587: LD_VAR 0 7
51591: PPUSH
51592: LD_INT 1
51594: PPUSH
51595: LD_VAR 0 14
51599: PPUSH
51600: CALL_OW 2
51604: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51605: LD_VAR 0 14
51609: PPUSH
51610: LD_VAR 0 12
51614: PUSH
51615: LD_INT 1
51617: ARRAY
51618: PPUSH
51619: CALL_OW 52
// end ;
51623: GO 51262
51625: POP
51626: POP
// end ;
51627: GO 50564
51629: POP
51630: POP
// result := result ^ buildings ;
51631: LD_ADDR_VAR 0 7
51635: PUSH
51636: LD_VAR 0 7
51640: PUSH
51641: LD_VAR 0 18
51645: ADD
51646: ST_TO_ADDR
// end else
51647: GO 51790
// begin for i = 1 to personel do
51649: LD_ADDR_VAR 0 8
51653: PUSH
51654: DOUBLE
51655: LD_INT 1
51657: DEC
51658: ST_TO_ADDR
51659: LD_VAR 0 6
51663: PUSH
51664: FOR_TO
51665: IFFALSE 51788
// begin if i > 4 then
51667: LD_VAR 0 8
51671: PUSH
51672: LD_INT 4
51674: GREATER
51675: IFFALSE 51679
// break ;
51677: GO 51788
// x := personel [ i ] ;
51679: LD_ADDR_VAR 0 13
51683: PUSH
51684: LD_VAR 0 6
51688: PUSH
51689: LD_VAR 0 8
51693: ARRAY
51694: ST_TO_ADDR
// if x = - 1 then
51695: LD_VAR 0 13
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: EQUAL
51704: IFFALSE 51708
// continue ;
51706: GO 51664
// PrepareHuman ( false , i , skill ) ;
51708: LD_INT 0
51710: PPUSH
51711: LD_VAR 0 8
51715: PPUSH
51716: LD_VAR 0 4
51720: PPUSH
51721: CALL_OW 380
// un := CreateHuman ;
51725: LD_ADDR_VAR 0 14
51729: PUSH
51730: CALL_OW 44
51734: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51735: LD_VAR 0 14
51739: PPUSH
51740: LD_VAR 0 1
51744: PPUSH
51745: CALL_OW 250
51749: PPUSH
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 251
51759: PPUSH
51760: LD_INT 10
51762: PPUSH
51763: LD_INT 0
51765: PPUSH
51766: CALL_OW 50
// result := result ^ un ;
51770: LD_ADDR_VAR 0 7
51774: PUSH
51775: LD_VAR 0 7
51779: PUSH
51780: LD_VAR 0 14
51784: ADD
51785: ST_TO_ADDR
// end ;
51786: GO 51664
51788: POP
51789: POP
// end ; end ;
51790: LD_VAR 0 7
51794: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51795: LD_INT 0
51797: PPUSH
51798: PPUSH
51799: PPUSH
51800: PPUSH
51801: PPUSH
51802: PPUSH
51803: PPUSH
51804: PPUSH
51805: PPUSH
51806: PPUSH
51807: PPUSH
51808: PPUSH
51809: PPUSH
51810: PPUSH
51811: PPUSH
51812: PPUSH
// result := false ;
51813: LD_ADDR_VAR 0 3
51817: PUSH
51818: LD_INT 0
51820: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51821: LD_VAR 0 1
51825: NOT
51826: PUSH
51827: LD_VAR 0 1
51831: PPUSH
51832: CALL_OW 266
51836: PUSH
51837: LD_INT 32
51839: PUSH
51840: LD_INT 33
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: IN
51847: NOT
51848: OR
51849: IFFALSE 51853
// exit ;
51851: GO 52992
// nat := GetNation ( tower ) ;
51853: LD_ADDR_VAR 0 12
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 248
51867: ST_TO_ADDR
// side := GetSide ( tower ) ;
51868: LD_ADDR_VAR 0 16
51872: PUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 255
51882: ST_TO_ADDR
// x := GetX ( tower ) ;
51883: LD_ADDR_VAR 0 10
51887: PUSH
51888: LD_VAR 0 1
51892: PPUSH
51893: CALL_OW 250
51897: ST_TO_ADDR
// y := GetY ( tower ) ;
51898: LD_ADDR_VAR 0 11
51902: PUSH
51903: LD_VAR 0 1
51907: PPUSH
51908: CALL_OW 251
51912: ST_TO_ADDR
// if not x or not y then
51913: LD_VAR 0 10
51917: NOT
51918: PUSH
51919: LD_VAR 0 11
51923: NOT
51924: OR
51925: IFFALSE 51929
// exit ;
51927: GO 52992
// weapon := 0 ;
51929: LD_ADDR_VAR 0 18
51933: PUSH
51934: LD_INT 0
51936: ST_TO_ADDR
// fac_list := [ ] ;
51937: LD_ADDR_VAR 0 17
51941: PUSH
51942: EMPTY
51943: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51944: LD_ADDR_VAR 0 6
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: CALL_OW 274
51958: PPUSH
51959: LD_VAR 0 2
51963: PPUSH
51964: LD_INT 0
51966: PPUSH
51967: CALL 49532 0 3
51971: PPUSH
51972: LD_INT 30
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PPUSH
51982: CALL_OW 72
51986: ST_TO_ADDR
// if not factories then
51987: LD_VAR 0 6
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52992
// for i in factories do
51996: LD_ADDR_VAR 0 8
52000: PUSH
52001: LD_VAR 0 6
52005: PUSH
52006: FOR_IN
52007: IFFALSE 52032
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52009: LD_ADDR_VAR 0 17
52013: PUSH
52014: LD_VAR 0 17
52018: PUSH
52019: LD_VAR 0 8
52023: PPUSH
52024: CALL_OW 478
52028: UNION
52029: ST_TO_ADDR
52030: GO 52006
52032: POP
52033: POP
// if not fac_list then
52034: LD_VAR 0 17
52038: NOT
52039: IFFALSE 52043
// exit ;
52041: GO 52992
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52043: LD_ADDR_VAR 0 5
52047: PUSH
52048: LD_INT 4
52050: PUSH
52051: LD_INT 5
52053: PUSH
52054: LD_INT 9
52056: PUSH
52057: LD_INT 10
52059: PUSH
52060: LD_INT 6
52062: PUSH
52063: LD_INT 7
52065: PUSH
52066: LD_INT 11
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 27
52080: PUSH
52081: LD_INT 28
52083: PUSH
52084: LD_INT 26
52086: PUSH
52087: LD_INT 30
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 43
52098: PUSH
52099: LD_INT 44
52101: PUSH
52102: LD_INT 46
52104: PUSH
52105: LD_INT 45
52107: PUSH
52108: LD_INT 47
52110: PUSH
52111: LD_INT 49
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: LD_VAR 0 12
52131: ARRAY
52132: ST_TO_ADDR
// for i in list do
52133: LD_ADDR_VAR 0 8
52137: PUSH
52138: LD_VAR 0 5
52142: PUSH
52143: FOR_IN
52144: IFFALSE 52177
// if not i in fac_list then
52146: LD_VAR 0 8
52150: PUSH
52151: LD_VAR 0 17
52155: IN
52156: NOT
52157: IFFALSE 52175
// list := list diff i ;
52159: LD_ADDR_VAR 0 5
52163: PUSH
52164: LD_VAR 0 5
52168: PUSH
52169: LD_VAR 0 8
52173: DIFF
52174: ST_TO_ADDR
52175: GO 52143
52177: POP
52178: POP
// if not list then
52179: LD_VAR 0 5
52183: NOT
52184: IFFALSE 52188
// exit ;
52186: GO 52992
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52188: LD_VAR 0 12
52192: PUSH
52193: LD_INT 3
52195: EQUAL
52196: PUSH
52197: LD_INT 49
52199: PUSH
52200: LD_VAR 0 5
52204: IN
52205: AND
52206: PUSH
52207: LD_INT 31
52209: PPUSH
52210: LD_VAR 0 16
52214: PPUSH
52215: CALL_OW 321
52219: PUSH
52220: LD_INT 2
52222: EQUAL
52223: AND
52224: IFFALSE 52284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52226: LD_INT 22
52228: PUSH
52229: LD_VAR 0 16
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 35
52240: PUSH
52241: LD_INT 49
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 91
52250: PUSH
52251: LD_VAR 0 1
52255: PUSH
52256: LD_INT 10
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: PPUSH
52269: CALL_OW 69
52273: NOT
52274: IFFALSE 52284
// weapon := ru_time_lapser ;
52276: LD_ADDR_VAR 0 18
52280: PUSH
52281: LD_INT 49
52283: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52284: LD_VAR 0 12
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: IN
52299: PUSH
52300: LD_INT 11
52302: PUSH
52303: LD_VAR 0 5
52307: IN
52308: PUSH
52309: LD_INT 30
52311: PUSH
52312: LD_VAR 0 5
52316: IN
52317: OR
52318: AND
52319: PUSH
52320: LD_INT 6
52322: PPUSH
52323: LD_VAR 0 16
52327: PPUSH
52328: CALL_OW 321
52332: PUSH
52333: LD_INT 2
52335: EQUAL
52336: AND
52337: IFFALSE 52502
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52339: LD_INT 22
52341: PUSH
52342: LD_VAR 0 16
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 35
52356: PUSH
52357: LD_INT 11
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 35
52366: PUSH
52367: LD_INT 30
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 91
52381: PUSH
52382: LD_VAR 0 1
52386: PUSH
52387: LD_INT 18
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: LIST
52399: PPUSH
52400: CALL_OW 69
52404: NOT
52405: PUSH
52406: LD_INT 22
52408: PUSH
52409: LD_VAR 0 16
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 30
52423: PUSH
52424: LD_INT 32
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 30
52433: PUSH
52434: LD_INT 33
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 91
52448: PUSH
52449: LD_VAR 0 1
52453: PUSH
52454: LD_INT 12
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: PUSH
52467: EMPTY
52468: LIST
52469: PPUSH
52470: CALL_OW 69
52474: PUSH
52475: LD_INT 2
52477: GREATER
52478: AND
52479: IFFALSE 52502
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52481: LD_ADDR_VAR 0 18
52485: PUSH
52486: LD_INT 11
52488: PUSH
52489: LD_INT 30
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_VAR 0 12
52500: ARRAY
52501: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52502: LD_VAR 0 18
52506: NOT
52507: PUSH
52508: LD_INT 40
52510: PPUSH
52511: LD_VAR 0 16
52515: PPUSH
52516: CALL_OW 321
52520: PUSH
52521: LD_INT 2
52523: EQUAL
52524: AND
52525: PUSH
52526: LD_INT 7
52528: PUSH
52529: LD_VAR 0 5
52533: IN
52534: PUSH
52535: LD_INT 28
52537: PUSH
52538: LD_VAR 0 5
52542: IN
52543: OR
52544: PUSH
52545: LD_INT 45
52547: PUSH
52548: LD_VAR 0 5
52552: IN
52553: OR
52554: AND
52555: IFFALSE 52809
// begin hex := GetHexInfo ( x , y ) ;
52557: LD_ADDR_VAR 0 4
52561: PUSH
52562: LD_VAR 0 10
52566: PPUSH
52567: LD_VAR 0 11
52571: PPUSH
52572: CALL_OW 546
52576: ST_TO_ADDR
// if hex [ 1 ] then
52577: LD_VAR 0 4
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: IFFALSE 52589
// exit ;
52587: GO 52992
// height := hex [ 2 ] ;
52589: LD_ADDR_VAR 0 15
52593: PUSH
52594: LD_VAR 0 4
52598: PUSH
52599: LD_INT 2
52601: ARRAY
52602: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52603: LD_ADDR_VAR 0 14
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// for i in tmp do
52626: LD_ADDR_VAR 0 8
52630: PUSH
52631: LD_VAR 0 14
52635: PUSH
52636: FOR_IN
52637: IFFALSE 52807
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52639: LD_ADDR_VAR 0 9
52643: PUSH
52644: LD_VAR 0 10
52648: PPUSH
52649: LD_VAR 0 8
52653: PPUSH
52654: LD_INT 5
52656: PPUSH
52657: CALL_OW 272
52661: PUSH
52662: LD_VAR 0 11
52666: PPUSH
52667: LD_VAR 0 8
52671: PPUSH
52672: LD_INT 5
52674: PPUSH
52675: CALL_OW 273
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52684: LD_VAR 0 9
52688: PUSH
52689: LD_INT 1
52691: ARRAY
52692: PPUSH
52693: LD_VAR 0 9
52697: PUSH
52698: LD_INT 2
52700: ARRAY
52701: PPUSH
52702: CALL_OW 488
52706: IFFALSE 52805
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52708: LD_ADDR_VAR 0 4
52712: PUSH
52713: LD_VAR 0 9
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PPUSH
52722: LD_VAR 0 9
52726: PUSH
52727: LD_INT 2
52729: ARRAY
52730: PPUSH
52731: CALL_OW 546
52735: ST_TO_ADDR
// if hex [ 1 ] then
52736: LD_VAR 0 4
52740: PUSH
52741: LD_INT 1
52743: ARRAY
52744: IFFALSE 52748
// continue ;
52746: GO 52636
// h := hex [ 2 ] ;
52748: LD_ADDR_VAR 0 13
52752: PUSH
52753: LD_VAR 0 4
52757: PUSH
52758: LD_INT 2
52760: ARRAY
52761: ST_TO_ADDR
// if h + 7 < height then
52762: LD_VAR 0 13
52766: PUSH
52767: LD_INT 7
52769: PLUS
52770: PUSH
52771: LD_VAR 0 15
52775: LESS
52776: IFFALSE 52805
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52778: LD_ADDR_VAR 0 18
52782: PUSH
52783: LD_INT 7
52785: PUSH
52786: LD_INT 28
52788: PUSH
52789: LD_INT 45
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: LD_VAR 0 12
52801: ARRAY
52802: ST_TO_ADDR
// break ;
52803: GO 52807
// end ; end ; end ;
52805: GO 52636
52807: POP
52808: POP
// end ; if not weapon then
52809: LD_VAR 0 18
52813: NOT
52814: IFFALSE 52874
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52816: LD_ADDR_VAR 0 5
52820: PUSH
52821: LD_VAR 0 5
52825: PUSH
52826: LD_INT 11
52828: PUSH
52829: LD_INT 30
52831: PUSH
52832: LD_INT 49
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: DIFF
52840: ST_TO_ADDR
// if not list then
52841: LD_VAR 0 5
52845: NOT
52846: IFFALSE 52850
// exit ;
52848: GO 52992
// weapon := list [ rand ( 1 , list ) ] ;
52850: LD_ADDR_VAR 0 18
52854: PUSH
52855: LD_VAR 0 5
52859: PUSH
52860: LD_INT 1
52862: PPUSH
52863: LD_VAR 0 5
52867: PPUSH
52868: CALL_OW 12
52872: ARRAY
52873: ST_TO_ADDR
// end ; if weapon then
52874: LD_VAR 0 18
52878: IFFALSE 52992
// begin tmp := CostOfWeapon ( weapon ) ;
52880: LD_ADDR_VAR 0 14
52884: PUSH
52885: LD_VAR 0 18
52889: PPUSH
52890: CALL_OW 451
52894: ST_TO_ADDR
// j := GetBase ( tower ) ;
52895: LD_ADDR_VAR 0 9
52899: PUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: CALL_OW 274
52909: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52910: LD_VAR 0 9
52914: PPUSH
52915: LD_INT 1
52917: PPUSH
52918: CALL_OW 275
52922: PUSH
52923: LD_VAR 0 14
52927: PUSH
52928: LD_INT 1
52930: ARRAY
52931: GREATEREQUAL
52932: PUSH
52933: LD_VAR 0 9
52937: PPUSH
52938: LD_INT 2
52940: PPUSH
52941: CALL_OW 275
52945: PUSH
52946: LD_VAR 0 14
52950: PUSH
52951: LD_INT 2
52953: ARRAY
52954: GREATEREQUAL
52955: AND
52956: PUSH
52957: LD_VAR 0 9
52961: PPUSH
52962: LD_INT 3
52964: PPUSH
52965: CALL_OW 275
52969: PUSH
52970: LD_VAR 0 14
52974: PUSH
52975: LD_INT 3
52977: ARRAY
52978: GREATEREQUAL
52979: AND
52980: IFFALSE 52992
// result := weapon ;
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_VAR 0 18
52991: ST_TO_ADDR
// end ; end ;
52992: LD_VAR 0 3
52996: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52997: LD_INT 0
52999: PPUSH
53000: PPUSH
// result := true ;
53001: LD_ADDR_VAR 0 3
53005: PUSH
53006: LD_INT 1
53008: ST_TO_ADDR
// if array1 = array2 then
53009: LD_VAR 0 1
53013: PUSH
53014: LD_VAR 0 2
53018: EQUAL
53019: IFFALSE 53079
// begin for i = 1 to array1 do
53021: LD_ADDR_VAR 0 4
53025: PUSH
53026: DOUBLE
53027: LD_INT 1
53029: DEC
53030: ST_TO_ADDR
53031: LD_VAR 0 1
53035: PUSH
53036: FOR_TO
53037: IFFALSE 53075
// if array1 [ i ] <> array2 [ i ] then
53039: LD_VAR 0 1
53043: PUSH
53044: LD_VAR 0 4
53048: ARRAY
53049: PUSH
53050: LD_VAR 0 2
53054: PUSH
53055: LD_VAR 0 4
53059: ARRAY
53060: NONEQUAL
53061: IFFALSE 53073
// begin result := false ;
53063: LD_ADDR_VAR 0 3
53067: PUSH
53068: LD_INT 0
53070: ST_TO_ADDR
// break ;
53071: GO 53075
// end ;
53073: GO 53036
53075: POP
53076: POP
// end else
53077: GO 53087
// result := false ;
53079: LD_ADDR_VAR 0 3
53083: PUSH
53084: LD_INT 0
53086: ST_TO_ADDR
// end ;
53087: LD_VAR 0 3
53091: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53092: LD_INT 0
53094: PPUSH
53095: PPUSH
// if not array1 or not array2 then
53096: LD_VAR 0 1
53100: NOT
53101: PUSH
53102: LD_VAR 0 2
53106: NOT
53107: OR
53108: IFFALSE 53112
// exit ;
53110: GO 53176
// result := true ;
53112: LD_ADDR_VAR 0 3
53116: PUSH
53117: LD_INT 1
53119: ST_TO_ADDR
// for i = 1 to array1 do
53120: LD_ADDR_VAR 0 4
53124: PUSH
53125: DOUBLE
53126: LD_INT 1
53128: DEC
53129: ST_TO_ADDR
53130: LD_VAR 0 1
53134: PUSH
53135: FOR_TO
53136: IFFALSE 53174
// if array1 [ i ] <> array2 [ i ] then
53138: LD_VAR 0 1
53142: PUSH
53143: LD_VAR 0 4
53147: ARRAY
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_VAR 0 4
53158: ARRAY
53159: NONEQUAL
53160: IFFALSE 53172
// begin result := false ;
53162: LD_ADDR_VAR 0 3
53166: PUSH
53167: LD_INT 0
53169: ST_TO_ADDR
// break ;
53170: GO 53174
// end ;
53172: GO 53135
53174: POP
53175: POP
// end ;
53176: LD_VAR 0 3
53180: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53181: LD_INT 0
53183: PPUSH
53184: PPUSH
53185: PPUSH
// pom := GetBase ( fac ) ;
53186: LD_ADDR_VAR 0 5
53190: PUSH
53191: LD_VAR 0 1
53195: PPUSH
53196: CALL_OW 274
53200: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53201: LD_ADDR_VAR 0 4
53205: PUSH
53206: LD_VAR 0 2
53210: PUSH
53211: LD_INT 1
53213: ARRAY
53214: PPUSH
53215: LD_VAR 0 2
53219: PUSH
53220: LD_INT 2
53222: ARRAY
53223: PPUSH
53224: LD_VAR 0 2
53228: PUSH
53229: LD_INT 3
53231: ARRAY
53232: PPUSH
53233: LD_VAR 0 2
53237: PUSH
53238: LD_INT 4
53240: ARRAY
53241: PPUSH
53242: CALL_OW 449
53246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53247: LD_ADDR_VAR 0 3
53251: PUSH
53252: LD_VAR 0 5
53256: PPUSH
53257: LD_INT 1
53259: PPUSH
53260: CALL_OW 275
53264: PUSH
53265: LD_VAR 0 4
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: GREATEREQUAL
53274: PUSH
53275: LD_VAR 0 5
53279: PPUSH
53280: LD_INT 2
53282: PPUSH
53283: CALL_OW 275
53287: PUSH
53288: LD_VAR 0 4
53292: PUSH
53293: LD_INT 2
53295: ARRAY
53296: GREATEREQUAL
53297: AND
53298: PUSH
53299: LD_VAR 0 5
53303: PPUSH
53304: LD_INT 3
53306: PPUSH
53307: CALL_OW 275
53311: PUSH
53312: LD_VAR 0 4
53316: PUSH
53317: LD_INT 3
53319: ARRAY
53320: GREATEREQUAL
53321: AND
53322: ST_TO_ADDR
// end ;
53323: LD_VAR 0 3
53327: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53328: LD_INT 0
53330: PPUSH
53331: PPUSH
53332: PPUSH
53333: PPUSH
// pom := GetBase ( building ) ;
53334: LD_ADDR_VAR 0 3
53338: PUSH
53339: LD_VAR 0 1
53343: PPUSH
53344: CALL_OW 274
53348: ST_TO_ADDR
// if not pom then
53349: LD_VAR 0 3
53353: NOT
53354: IFFALSE 53358
// exit ;
53356: GO 53528
// btype := GetBType ( building ) ;
53358: LD_ADDR_VAR 0 5
53362: PUSH
53363: LD_VAR 0 1
53367: PPUSH
53368: CALL_OW 266
53372: ST_TO_ADDR
// if btype = b_armoury then
53373: LD_VAR 0 5
53377: PUSH
53378: LD_INT 4
53380: EQUAL
53381: IFFALSE 53391
// btype := b_barracks ;
53383: LD_ADDR_VAR 0 5
53387: PUSH
53388: LD_INT 5
53390: ST_TO_ADDR
// if btype = b_depot then
53391: LD_VAR 0 5
53395: PUSH
53396: LD_INT 0
53398: EQUAL
53399: IFFALSE 53409
// btype := b_warehouse ;
53401: LD_ADDR_VAR 0 5
53405: PUSH
53406: LD_INT 1
53408: ST_TO_ADDR
// if btype = b_workshop then
53409: LD_VAR 0 5
53413: PUSH
53414: LD_INT 2
53416: EQUAL
53417: IFFALSE 53427
// btype := b_factory ;
53419: LD_ADDR_VAR 0 5
53423: PUSH
53424: LD_INT 3
53426: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53427: LD_ADDR_VAR 0 4
53431: PUSH
53432: LD_VAR 0 5
53436: PPUSH
53437: LD_VAR 0 1
53441: PPUSH
53442: CALL_OW 248
53446: PPUSH
53447: CALL_OW 450
53451: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53452: LD_ADDR_VAR 0 2
53456: PUSH
53457: LD_VAR 0 3
53461: PPUSH
53462: LD_INT 1
53464: PPUSH
53465: CALL_OW 275
53469: PUSH
53470: LD_VAR 0 4
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: GREATEREQUAL
53479: PUSH
53480: LD_VAR 0 3
53484: PPUSH
53485: LD_INT 2
53487: PPUSH
53488: CALL_OW 275
53492: PUSH
53493: LD_VAR 0 4
53497: PUSH
53498: LD_INT 2
53500: ARRAY
53501: GREATEREQUAL
53502: AND
53503: PUSH
53504: LD_VAR 0 3
53508: PPUSH
53509: LD_INT 3
53511: PPUSH
53512: CALL_OW 275
53516: PUSH
53517: LD_VAR 0 4
53521: PUSH
53522: LD_INT 3
53524: ARRAY
53525: GREATEREQUAL
53526: AND
53527: ST_TO_ADDR
// end ;
53528: LD_VAR 0 2
53532: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53533: LD_INT 0
53535: PPUSH
53536: PPUSH
53537: PPUSH
// pom := GetBase ( building ) ;
53538: LD_ADDR_VAR 0 4
53542: PUSH
53543: LD_VAR 0 1
53547: PPUSH
53548: CALL_OW 274
53552: ST_TO_ADDR
// if not pom then
53553: LD_VAR 0 4
53557: NOT
53558: IFFALSE 53562
// exit ;
53560: GO 53663
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53562: LD_ADDR_VAR 0 5
53566: PUSH
53567: LD_VAR 0 2
53571: PPUSH
53572: LD_VAR 0 1
53576: PPUSH
53577: CALL_OW 248
53581: PPUSH
53582: CALL_OW 450
53586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_VAR 0 4
53596: PPUSH
53597: LD_INT 1
53599: PPUSH
53600: CALL_OW 275
53604: PUSH
53605: LD_VAR 0 5
53609: PUSH
53610: LD_INT 1
53612: ARRAY
53613: GREATEREQUAL
53614: PUSH
53615: LD_VAR 0 4
53619: PPUSH
53620: LD_INT 2
53622: PPUSH
53623: CALL_OW 275
53627: PUSH
53628: LD_VAR 0 5
53632: PUSH
53633: LD_INT 2
53635: ARRAY
53636: GREATEREQUAL
53637: AND
53638: PUSH
53639: LD_VAR 0 4
53643: PPUSH
53644: LD_INT 3
53646: PPUSH
53647: CALL_OW 275
53651: PUSH
53652: LD_VAR 0 5
53656: PUSH
53657: LD_INT 3
53659: ARRAY
53660: GREATEREQUAL
53661: AND
53662: ST_TO_ADDR
// end ;
53663: LD_VAR 0 3
53667: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53668: LD_INT 0
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
53675: PPUSH
53676: PPUSH
53677: PPUSH
53678: PPUSH
53679: PPUSH
53680: PPUSH
// result := false ;
53681: LD_ADDR_VAR 0 8
53685: PUSH
53686: LD_INT 0
53688: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53689: LD_VAR 0 5
53693: NOT
53694: PUSH
53695: LD_VAR 0 1
53699: NOT
53700: OR
53701: PUSH
53702: LD_VAR 0 2
53706: NOT
53707: OR
53708: PUSH
53709: LD_VAR 0 3
53713: NOT
53714: OR
53715: IFFALSE 53719
// exit ;
53717: GO 54533
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53719: LD_ADDR_VAR 0 14
53723: PUSH
53724: LD_VAR 0 1
53728: PPUSH
53729: LD_VAR 0 2
53733: PPUSH
53734: LD_VAR 0 3
53738: PPUSH
53739: LD_VAR 0 4
53743: PPUSH
53744: LD_VAR 0 5
53748: PUSH
53749: LD_INT 1
53751: ARRAY
53752: PPUSH
53753: CALL_OW 248
53757: PPUSH
53758: LD_INT 0
53760: PPUSH
53761: CALL 55370 0 6
53765: ST_TO_ADDR
// if not hexes then
53766: LD_VAR 0 14
53770: NOT
53771: IFFALSE 53775
// exit ;
53773: GO 54533
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53775: LD_ADDR_VAR 0 17
53779: PUSH
53780: LD_VAR 0 5
53784: PPUSH
53785: LD_INT 22
53787: PUSH
53788: LD_VAR 0 13
53792: PPUSH
53793: CALL_OW 255
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 30
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 30
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PPUSH
53834: CALL_OW 72
53838: ST_TO_ADDR
// for i = 1 to hexes do
53839: LD_ADDR_VAR 0 9
53843: PUSH
53844: DOUBLE
53845: LD_INT 1
53847: DEC
53848: ST_TO_ADDR
53849: LD_VAR 0 14
53853: PUSH
53854: FOR_TO
53855: IFFALSE 54531
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53857: LD_ADDR_VAR 0 13
53861: PUSH
53862: LD_VAR 0 14
53866: PUSH
53867: LD_VAR 0 9
53871: ARRAY
53872: PUSH
53873: LD_INT 1
53875: ARRAY
53876: PPUSH
53877: LD_VAR 0 14
53881: PUSH
53882: LD_VAR 0 9
53886: ARRAY
53887: PUSH
53888: LD_INT 2
53890: ARRAY
53891: PPUSH
53892: CALL_OW 428
53896: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53897: LD_VAR 0 14
53901: PUSH
53902: LD_VAR 0 9
53906: ARRAY
53907: PUSH
53908: LD_INT 1
53910: ARRAY
53911: PPUSH
53912: LD_VAR 0 14
53916: PUSH
53917: LD_VAR 0 9
53921: ARRAY
53922: PUSH
53923: LD_INT 2
53925: ARRAY
53926: PPUSH
53927: CALL_OW 351
53931: PUSH
53932: LD_VAR 0 14
53936: PUSH
53937: LD_VAR 0 9
53941: ARRAY
53942: PUSH
53943: LD_INT 1
53945: ARRAY
53946: PPUSH
53947: LD_VAR 0 14
53951: PUSH
53952: LD_VAR 0 9
53956: ARRAY
53957: PUSH
53958: LD_INT 2
53960: ARRAY
53961: PPUSH
53962: CALL_OW 488
53966: NOT
53967: OR
53968: PUSH
53969: LD_VAR 0 13
53973: PPUSH
53974: CALL_OW 247
53978: PUSH
53979: LD_INT 3
53981: EQUAL
53982: OR
53983: IFFALSE 53989
// exit ;
53985: POP
53986: POP
53987: GO 54533
// if not tmp then
53989: LD_VAR 0 13
53993: NOT
53994: IFFALSE 53998
// continue ;
53996: GO 53854
// result := true ;
53998: LD_ADDR_VAR 0 8
54002: PUSH
54003: LD_INT 1
54005: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54006: LD_VAR 0 6
54010: PUSH
54011: LD_VAR 0 13
54015: PPUSH
54016: CALL_OW 247
54020: PUSH
54021: LD_INT 2
54023: EQUAL
54024: AND
54025: PUSH
54026: LD_VAR 0 13
54030: PPUSH
54031: CALL_OW 263
54035: PUSH
54036: LD_INT 1
54038: EQUAL
54039: AND
54040: IFFALSE 54204
// begin if IsDrivenBy ( tmp ) then
54042: LD_VAR 0 13
54046: PPUSH
54047: CALL_OW 311
54051: IFFALSE 54055
// continue ;
54053: GO 53854
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54055: LD_VAR 0 6
54059: PPUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 60
54065: PUSH
54066: EMPTY
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: LD_INT 55
54078: PUSH
54079: EMPTY
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PPUSH
54090: CALL_OW 72
54094: IFFALSE 54202
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54096: LD_ADDR_VAR 0 18
54100: PUSH
54101: LD_VAR 0 6
54105: PPUSH
54106: LD_INT 3
54108: PUSH
54109: LD_INT 60
54111: PUSH
54112: EMPTY
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: LD_INT 55
54124: PUSH
54125: EMPTY
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PPUSH
54136: CALL_OW 72
54140: PUSH
54141: LD_INT 1
54143: ARRAY
54144: ST_TO_ADDR
// if IsInUnit ( driver ) then
54145: LD_VAR 0 18
54149: PPUSH
54150: CALL_OW 310
54154: IFFALSE 54165
// ComExit ( driver ) ;
54156: LD_VAR 0 18
54160: PPUSH
54161: CALL 78554 0 1
// AddComEnterUnit ( driver , tmp ) ;
54165: LD_VAR 0 18
54169: PPUSH
54170: LD_VAR 0 13
54174: PPUSH
54175: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54179: LD_VAR 0 18
54183: PPUSH
54184: LD_VAR 0 7
54188: PPUSH
54189: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54193: LD_VAR 0 18
54197: PPUSH
54198: CALL_OW 181
// end ; continue ;
54202: GO 53854
// end ; if not cleaners or not tmp in cleaners then
54204: LD_VAR 0 6
54208: NOT
54209: PUSH
54210: LD_VAR 0 13
54214: PUSH
54215: LD_VAR 0 6
54219: IN
54220: NOT
54221: OR
54222: IFFALSE 54529
// begin if dep then
54224: LD_VAR 0 17
54228: IFFALSE 54364
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54230: LD_ADDR_VAR 0 16
54234: PUSH
54235: LD_VAR 0 17
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PPUSH
54244: CALL_OW 250
54248: PPUSH
54249: LD_VAR 0 17
54253: PUSH
54254: LD_INT 1
54256: ARRAY
54257: PPUSH
54258: CALL_OW 254
54262: PPUSH
54263: LD_INT 5
54265: PPUSH
54266: CALL_OW 272
54270: PUSH
54271: LD_VAR 0 17
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PPUSH
54280: CALL_OW 251
54284: PPUSH
54285: LD_VAR 0 17
54289: PUSH
54290: LD_INT 1
54292: ARRAY
54293: PPUSH
54294: CALL_OW 254
54298: PPUSH
54299: LD_INT 5
54301: PPUSH
54302: CALL_OW 273
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54311: LD_VAR 0 16
54315: PUSH
54316: LD_INT 1
54318: ARRAY
54319: PPUSH
54320: LD_VAR 0 16
54324: PUSH
54325: LD_INT 2
54327: ARRAY
54328: PPUSH
54329: CALL_OW 488
54333: IFFALSE 54364
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54335: LD_VAR 0 13
54339: PPUSH
54340: LD_VAR 0 16
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: PPUSH
54349: LD_VAR 0 16
54353: PUSH
54354: LD_INT 2
54356: ARRAY
54357: PPUSH
54358: CALL_OW 111
// continue ;
54362: GO 53854
// end ; end ; r := GetDir ( tmp ) ;
54364: LD_ADDR_VAR 0 15
54368: PUSH
54369: LD_VAR 0 13
54373: PPUSH
54374: CALL_OW 254
54378: ST_TO_ADDR
// if r = 5 then
54379: LD_VAR 0 15
54383: PUSH
54384: LD_INT 5
54386: EQUAL
54387: IFFALSE 54397
// r := 0 ;
54389: LD_ADDR_VAR 0 15
54393: PUSH
54394: LD_INT 0
54396: ST_TO_ADDR
// for j = r to 5 do
54397: LD_ADDR_VAR 0 10
54401: PUSH
54402: DOUBLE
54403: LD_VAR 0 15
54407: DEC
54408: ST_TO_ADDR
54409: LD_INT 5
54411: PUSH
54412: FOR_TO
54413: IFFALSE 54527
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54415: LD_ADDR_VAR 0 11
54419: PUSH
54420: LD_VAR 0 13
54424: PPUSH
54425: CALL_OW 250
54429: PPUSH
54430: LD_VAR 0 10
54434: PPUSH
54435: LD_INT 2
54437: PPUSH
54438: CALL_OW 272
54442: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54443: LD_ADDR_VAR 0 12
54447: PUSH
54448: LD_VAR 0 13
54452: PPUSH
54453: CALL_OW 251
54457: PPUSH
54458: LD_VAR 0 10
54462: PPUSH
54463: LD_INT 2
54465: PPUSH
54466: CALL_OW 273
54470: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54471: LD_VAR 0 11
54475: PPUSH
54476: LD_VAR 0 12
54480: PPUSH
54481: CALL_OW 488
54485: PUSH
54486: LD_VAR 0 11
54490: PPUSH
54491: LD_VAR 0 12
54495: PPUSH
54496: CALL_OW 428
54500: NOT
54501: AND
54502: IFFALSE 54525
// begin ComMoveXY ( tmp , _x , _y ) ;
54504: LD_VAR 0 13
54508: PPUSH
54509: LD_VAR 0 11
54513: PPUSH
54514: LD_VAR 0 12
54518: PPUSH
54519: CALL_OW 111
// break ;
54523: GO 54527
// end ; end ;
54525: GO 54412
54527: POP
54528: POP
// end ; end ;
54529: GO 53854
54531: POP
54532: POP
// end ;
54533: LD_VAR 0 8
54537: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
54538: LD_INT 0
54540: PPUSH
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
54549: PPUSH
// result := false ;
54550: LD_ADDR_VAR 0 6
54554: PUSH
54555: LD_INT 0
54557: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54558: LD_VAR 0 1
54562: NOT
54563: PUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 266
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: IN
54584: NOT
54585: OR
54586: PUSH
54587: LD_VAR 0 2
54591: NOT
54592: OR
54593: PUSH
54594: LD_VAR 0 5
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: LD_INT 5
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: IN
54625: NOT
54626: OR
54627: PUSH
54628: LD_VAR 0 3
54632: PPUSH
54633: LD_VAR 0 4
54637: PPUSH
54638: CALL_OW 488
54642: NOT
54643: OR
54644: IFFALSE 54648
// exit ;
54646: GO 55365
// pom := GetBase ( depot ) ;
54648: LD_ADDR_VAR 0 10
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: CALL_OW 274
54662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54663: LD_ADDR_VAR 0 11
54667: PUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_VAR 0 1
54677: PPUSH
54678: CALL_OW 248
54682: PPUSH
54683: CALL_OW 450
54687: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54688: LD_VAR 0 10
54692: PPUSH
54693: LD_INT 1
54695: PPUSH
54696: CALL_OW 275
54700: PUSH
54701: LD_VAR 0 11
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: GREATEREQUAL
54710: PUSH
54711: LD_VAR 0 10
54715: PPUSH
54716: LD_INT 2
54718: PPUSH
54719: CALL_OW 275
54723: PUSH
54724: LD_VAR 0 11
54728: PUSH
54729: LD_INT 2
54731: ARRAY
54732: GREATEREQUAL
54733: AND
54734: PUSH
54735: LD_VAR 0 10
54739: PPUSH
54740: LD_INT 3
54742: PPUSH
54743: CALL_OW 275
54747: PUSH
54748: LD_VAR 0 11
54752: PUSH
54753: LD_INT 3
54755: ARRAY
54756: GREATEREQUAL
54757: AND
54758: NOT
54759: IFFALSE 54763
// exit ;
54761: GO 55365
// if GetBType ( depot ) = b_depot then
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 266
54772: PUSH
54773: LD_INT 0
54775: EQUAL
54776: IFFALSE 54788
// dist := 28 else
54778: LD_ADDR_VAR 0 14
54782: PUSH
54783: LD_INT 28
54785: ST_TO_ADDR
54786: GO 54796
// dist := 36 ;
54788: LD_ADDR_VAR 0 14
54792: PUSH
54793: LD_INT 36
54795: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54796: LD_VAR 0 1
54800: PPUSH
54801: LD_VAR 0 3
54805: PPUSH
54806: LD_VAR 0 4
54810: PPUSH
54811: CALL_OW 297
54815: PUSH
54816: LD_VAR 0 14
54820: GREATER
54821: IFFALSE 54825
// exit ;
54823: GO 55365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54825: LD_ADDR_VAR 0 12
54829: PUSH
54830: LD_VAR 0 2
54834: PPUSH
54835: LD_VAR 0 3
54839: PPUSH
54840: LD_VAR 0 4
54844: PPUSH
54845: LD_VAR 0 5
54849: PPUSH
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 248
54859: PPUSH
54860: LD_INT 0
54862: PPUSH
54863: CALL 55370 0 6
54867: ST_TO_ADDR
// if not hexes then
54868: LD_VAR 0 12
54872: NOT
54873: IFFALSE 54877
// exit ;
54875: GO 55365
// hex := GetHexInfo ( x , y ) ;
54877: LD_ADDR_VAR 0 15
54881: PUSH
54882: LD_VAR 0 3
54886: PPUSH
54887: LD_VAR 0 4
54891: PPUSH
54892: CALL_OW 546
54896: ST_TO_ADDR
// if hex [ 1 ] then
54897: LD_VAR 0 15
54901: PUSH
54902: LD_INT 1
54904: ARRAY
54905: IFFALSE 54909
// exit ;
54907: GO 55365
// height := hex [ 2 ] ;
54909: LD_ADDR_VAR 0 13
54913: PUSH
54914: LD_VAR 0 15
54918: PUSH
54919: LD_INT 2
54921: ARRAY
54922: ST_TO_ADDR
// for i = 1 to hexes do
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: DOUBLE
54929: LD_INT 1
54931: DEC
54932: ST_TO_ADDR
54933: LD_VAR 0 12
54937: PUSH
54938: FOR_TO
54939: IFFALSE 55269
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54941: LD_VAR 0 12
54945: PUSH
54946: LD_VAR 0 7
54950: ARRAY
54951: PUSH
54952: LD_INT 1
54954: ARRAY
54955: PPUSH
54956: LD_VAR 0 12
54960: PUSH
54961: LD_VAR 0 7
54965: ARRAY
54966: PUSH
54967: LD_INT 2
54969: ARRAY
54970: PPUSH
54971: CALL_OW 488
54975: NOT
54976: PUSH
54977: LD_VAR 0 12
54981: PUSH
54982: LD_VAR 0 7
54986: ARRAY
54987: PUSH
54988: LD_INT 1
54990: ARRAY
54991: PPUSH
54992: LD_VAR 0 12
54996: PUSH
54997: LD_VAR 0 7
55001: ARRAY
55002: PUSH
55003: LD_INT 2
55005: ARRAY
55006: PPUSH
55007: CALL_OW 428
55011: PUSH
55012: LD_INT 0
55014: GREATER
55015: OR
55016: PUSH
55017: LD_VAR 0 12
55021: PUSH
55022: LD_VAR 0 7
55026: ARRAY
55027: PUSH
55028: LD_INT 1
55030: ARRAY
55031: PPUSH
55032: LD_VAR 0 12
55036: PUSH
55037: LD_VAR 0 7
55041: ARRAY
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: PPUSH
55047: CALL_OW 351
55051: OR
55052: IFFALSE 55058
// exit ;
55054: POP
55055: POP
55056: GO 55365
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55058: LD_ADDR_VAR 0 8
55062: PUSH
55063: LD_VAR 0 12
55067: PUSH
55068: LD_VAR 0 7
55072: ARRAY
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PPUSH
55078: LD_VAR 0 12
55082: PUSH
55083: LD_VAR 0 7
55087: ARRAY
55088: PUSH
55089: LD_INT 2
55091: ARRAY
55092: PPUSH
55093: CALL_OW 546
55097: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55098: LD_VAR 0 8
55102: PUSH
55103: LD_INT 1
55105: ARRAY
55106: PUSH
55107: LD_VAR 0 8
55111: PUSH
55112: LD_INT 2
55114: ARRAY
55115: PUSH
55116: LD_VAR 0 13
55120: PUSH
55121: LD_INT 2
55123: PLUS
55124: GREATER
55125: OR
55126: PUSH
55127: LD_VAR 0 8
55131: PUSH
55132: LD_INT 2
55134: ARRAY
55135: PUSH
55136: LD_VAR 0 13
55140: PUSH
55141: LD_INT 2
55143: MINUS
55144: LESS
55145: OR
55146: PUSH
55147: LD_VAR 0 8
55151: PUSH
55152: LD_INT 3
55154: ARRAY
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 8
55161: PUSH
55162: LD_INT 9
55164: PUSH
55165: LD_INT 10
55167: PUSH
55168: LD_INT 11
55170: PUSH
55171: LD_INT 12
55173: PUSH
55174: LD_INT 13
55176: PUSH
55177: LD_INT 16
55179: PUSH
55180: LD_INT 17
55182: PUSH
55183: LD_INT 18
55185: PUSH
55186: LD_INT 19
55188: PUSH
55189: LD_INT 20
55191: PUSH
55192: LD_INT 21
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: IN
55210: NOT
55211: OR
55212: PUSH
55213: LD_VAR 0 8
55217: PUSH
55218: LD_INT 5
55220: ARRAY
55221: NOT
55222: OR
55223: PUSH
55224: LD_VAR 0 8
55228: PUSH
55229: LD_INT 6
55231: ARRAY
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 7
55241: PUSH
55242: LD_INT 9
55244: PUSH
55245: LD_INT 10
55247: PUSH
55248: LD_INT 11
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: IN
55259: NOT
55260: OR
55261: IFFALSE 55267
// exit ;
55263: POP
55264: POP
55265: GO 55365
// end ;
55267: GO 54938
55269: POP
55270: POP
// side := GetSide ( depot ) ;
55271: LD_ADDR_VAR 0 9
55275: PUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: CALL_OW 255
55285: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55286: LD_VAR 0 9
55290: PPUSH
55291: LD_VAR 0 3
55295: PPUSH
55296: LD_VAR 0 4
55300: PPUSH
55301: LD_INT 20
55303: PPUSH
55304: CALL 47686 0 4
55308: PUSH
55309: LD_INT 4
55311: ARRAY
55312: IFFALSE 55316
// exit ;
55314: GO 55365
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55316: LD_VAR 0 2
55320: PUSH
55321: LD_INT 29
55323: PUSH
55324: LD_INT 30
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: IN
55331: PUSH
55332: LD_VAR 0 3
55336: PPUSH
55337: LD_VAR 0 4
55341: PPUSH
55342: LD_VAR 0 9
55346: PPUSH
55347: CALL_OW 440
55351: NOT
55352: AND
55353: IFFALSE 55357
// exit ;
55355: GO 55365
// result := true ;
55357: LD_ADDR_VAR 0 6
55361: PUSH
55362: LD_INT 1
55364: ST_TO_ADDR
// end ;
55365: LD_VAR 0 6
55369: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55370: LD_INT 0
55372: PPUSH
55373: PPUSH
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
55424: PPUSH
55425: PPUSH
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
// result = [ ] ;
55430: LD_ADDR_VAR 0 7
55434: PUSH
55435: EMPTY
55436: ST_TO_ADDR
// temp_list = [ ] ;
55437: LD_ADDR_VAR 0 9
55441: PUSH
55442: EMPTY
55443: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55444: LD_VAR 0 4
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 5
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: IN
55475: NOT
55476: PUSH
55477: LD_VAR 0 1
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: IN
55492: PUSH
55493: LD_VAR 0 5
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: IN
55512: NOT
55513: AND
55514: OR
55515: IFFALSE 55519
// exit ;
55517: GO 73910
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55519: LD_VAR 0 1
55523: PUSH
55524: LD_INT 6
55526: PUSH
55527: LD_INT 7
55529: PUSH
55530: LD_INT 8
55532: PUSH
55533: LD_INT 13
55535: PUSH
55536: LD_INT 12
55538: PUSH
55539: LD_INT 15
55541: PUSH
55542: LD_INT 11
55544: PUSH
55545: LD_INT 14
55547: PUSH
55548: LD_INT 10
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: IN
55562: IFFALSE 55572
// btype = b_lab ;
55564: LD_ADDR_VAR 0 1
55568: PUSH
55569: LD_INT 6
55571: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55572: LD_VAR 0 6
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: IN
55591: NOT
55592: PUSH
55593: LD_VAR 0 1
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 6
55612: PUSH
55613: LD_INT 36
55615: PUSH
55616: LD_INT 4
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: LD_INT 31
55624: PUSH
55625: LD_INT 32
55627: PUSH
55628: LD_INT 33
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: IN
55644: NOT
55645: PUSH
55646: LD_VAR 0 6
55650: PUSH
55651: LD_INT 1
55653: EQUAL
55654: AND
55655: OR
55656: PUSH
55657: LD_VAR 0 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: IN
55672: NOT
55673: PUSH
55674: LD_VAR 0 6
55678: PUSH
55679: LD_INT 2
55681: EQUAL
55682: AND
55683: OR
55684: IFFALSE 55694
// mode = 0 ;
55686: LD_ADDR_VAR 0 6
55690: PUSH
55691: LD_INT 0
55693: ST_TO_ADDR
// case mode of 0 :
55694: LD_VAR 0 6
55698: PUSH
55699: LD_INT 0
55701: DOUBLE
55702: EQUAL
55703: IFTRUE 55707
55705: GO 67160
55707: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55708: LD_ADDR_VAR 0 11
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55901: LD_ADDR_VAR 0 12
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56097: LD_ADDR_VAR 0 13
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 3
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56296: LD_ADDR_VAR 0 14
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56492: LD_ADDR_VAR 0 15
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56685: LD_ADDR_VAR 0 16
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56878: LD_ADDR_VAR 0 17
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57108: LD_ADDR_VAR 0 18
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57338: LD_ADDR_VAR 0 19
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57568: LD_ADDR_VAR 0 20
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57798: LD_ADDR_VAR 0 21
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58028: LD_ADDR_VAR 0 22
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58258: LD_ADDR_VAR 0 23
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58538: LD_ADDR_VAR 0 24
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58814: LD_ADDR_VAR 0 25
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59088: LD_ADDR_VAR 0 26
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59364: LD_ADDR_VAR 0 27
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59644: LD_ADDR_VAR 0 28
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59926: LD_ADDR_VAR 0 29
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60205: LD_ADDR_VAR 0 30
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: NEG
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: LD_INT 3
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60483: LD_ADDR_VAR 0 31
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 2
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60761: LD_ADDR_VAR 0 32
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61039: LD_ADDR_VAR 0 33
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61318: LD_ADDR_VAR 0 34
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 3
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61598: LD_ADDR_VAR 0 35
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61710: LD_ADDR_VAR 0 36
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61822: LD_ADDR_VAR 0 37
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61934: LD_ADDR_VAR 0 38
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62046: LD_ADDR_VAR 0 39
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 2
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62158: LD_ADDR_VAR 0 40
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62270: LD_ADDR_VAR 0 41
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: LD_INT 2
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: LD_INT 3
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62620: LD_ADDR_VAR 0 42
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: NEG
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 3
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: NEG
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62970: LD_ADDR_VAR 0 43
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 3
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63318: LD_ADDR_VAR 0 44
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: LD_INT 2
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 3
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: NEG
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63668: LD_ADDR_VAR 0 45
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 0
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: LD_INT 2
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: LD_INT 3
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64018: LD_ADDR_VAR 0 46
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 3
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: NEG
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 3
64325: NEG
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64366: LD_ADDR_VAR 0 47
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64517: LD_ADDR_VAR 0 48
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 2
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64664: LD_ADDR_VAR 0 49
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64808: LD_ADDR_VAR 0 50
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64952: LD_ADDR_VAR 0 51
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65099: LD_ADDR_VAR 0 52
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65250: LD_ADDR_VAR 0 53
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: LD_INT 2
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 2
65449: NEG
65450: PUSH
65451: LD_INT 2
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65480: LD_ADDR_VAR 0 54
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 2
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 2
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: LD_INT 2
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65710: LD_ADDR_VAR 0 55
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 2
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65940: LD_ADDR_VAR 0 56
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 1
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: NEG
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 2
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66170: LD_ADDR_VAR 0 57
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 2
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: NEG
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 2
66369: NEG
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66400: LD_ADDR_VAR 0 58
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: LD_INT 1
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: LD_INT 2
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 2
66587: NEG
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66630: LD_ADDR_VAR 0 59
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 1
66688: NEG
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: NEG
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66718: LD_ADDR_VAR 0 60
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66806: LD_ADDR_VAR 0 61
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66894: LD_ADDR_VAR 0 62
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 1
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66982: LD_ADDR_VAR 0 63
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67070: LD_ADDR_VAR 0 64
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 1
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: ST_TO_ADDR
// end ; 1 :
67158: GO 73055
67160: LD_INT 1
67162: DOUBLE
67163: EQUAL
67164: IFTRUE 67168
67166: GO 69791
67168: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67169: LD_ADDR_VAR 0 11
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: LD_INT 3
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67213: LD_ADDR_VAR 0 12
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 3
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67254: LD_ADDR_VAR 0 13
67258: PUSH
67259: LD_INT 3
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: LD_INT 3
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67294: LD_ADDR_VAR 0 14
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: LD_INT 3
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: NEG
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67335: LD_ADDR_VAR 0 15
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: NEG
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67379: LD_ADDR_VAR 0 16
67383: PUSH
67384: LD_INT 2
67386: NEG
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 3
67410: NEG
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67425: LD_ADDR_VAR 0 17
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 3
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 1
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67469: LD_ADDR_VAR 0 18
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 3
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: LIST
67509: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67510: LD_ADDR_VAR 0 19
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67550: LD_ADDR_VAR 0 20
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: LD_INT 3
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67591: LD_ADDR_VAR 0 21
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: LIST
67634: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67635: LD_ADDR_VAR 0 22
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: LD_INT 3
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 3
67666: NEG
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67681: LD_ADDR_VAR 0 23
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: LD_INT 3
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: LD_INT 4
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 1
67711: PUSH
67712: LD_INT 3
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67725: LD_ADDR_VAR 0 24
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: LD_INT 1
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67766: LD_ADDR_VAR 0 25
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 4
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67806: LD_ADDR_VAR 0 26
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: LIST
67846: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67847: LD_ADDR_VAR 0 27
67851: PUSH
67852: LD_INT 3
67854: NEG
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 3
67865: NEG
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 4
67876: NEG
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: LIST
67890: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67891: LD_ADDR_VAR 0 28
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: LD_INT 3
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 4
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 4
67922: NEG
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67937: LD_ADDR_VAR 0 29
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: LD_INT 2
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: LD_INT 4
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 4
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 1
68012: NEG
68013: PUSH
68014: LD_INT 5
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 5
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 1
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: LD_INT 6
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 6
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 5
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68092: LD_ADDR_VAR 0 30
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: LD_INT 1
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: LD_INT 1
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 5
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 5
68182: PUSH
68183: LD_INT 1
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 5
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 6
68203: PUSH
68204: LD_INT 0
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 6
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68235: LD_ADDR_VAR 0 31
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 4
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 5
68302: PUSH
68303: LD_INT 4
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 5
68312: PUSH
68313: LD_INT 5
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 4
68322: PUSH
68323: LD_INT 5
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 6
68332: PUSH
68333: LD_INT 5
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 6
68342: PUSH
68343: LD_INT 6
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 5
68352: PUSH
68353: LD_INT 6
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68374: LD_ADDR_VAR 0 32
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 1
68401: NEG
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: LD_INT 4
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: LD_INT 4
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: LD_INT 3
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 1
68443: PUSH
68444: LD_INT 5
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: LD_INT 5
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: LD_INT 4
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: LD_INT 6
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: LD_INT 6
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68517: LD_ADDR_VAR 0 33
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 3
68535: NEG
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 4
68569: NEG
68570: PUSH
68571: LD_INT 0
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 4
68580: NEG
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 4
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 5
68603: NEG
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 5
68614: NEG
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 5
68626: NEG
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 6
68637: NEG
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 6
68648: NEG
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68672: LD_ADDR_VAR 0 34
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: LD_INT 2
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 3
68703: NEG
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 4
68727: NEG
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 4
68739: NEG
68740: PUSH
68741: LD_INT 4
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 4
68751: NEG
68752: PUSH
68753: LD_INT 5
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 5
68763: NEG
68764: PUSH
68765: LD_INT 4
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 5
68775: NEG
68776: PUSH
68777: LD_INT 5
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: LD_INT 6
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 6
68799: NEG
68800: PUSH
68801: LD_INT 5
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 6
68811: NEG
68812: PUSH
68813: LD_INT 6
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68835: LD_ADDR_VAR 0 41
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68879: LD_ADDR_VAR 0 42
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 3
68907: PUSH
68908: LD_INT 1
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68920: LD_ADDR_VAR 0 43
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: LD_INT 2
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: LD_INT 3
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68960: LD_ADDR_VAR 0 44
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: NEG
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: LIST
69000: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69001: LD_ADDR_VAR 0 45
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 1
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69045: LD_ADDR_VAR 0 46
69049: PUSH
69050: LD_INT 2
69052: NEG
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 2
69064: NEG
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69091: LD_ADDR_VAR 0 47
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: LD_INT 3
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69124: LD_ADDR_VAR 0 48
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69155: LD_ADDR_VAR 0 49
69159: PUSH
69160: LD_INT 3
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69184: LD_ADDR_VAR 0 50
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: PUSH
69202: LD_INT 3
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69213: LD_ADDR_VAR 0 51
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69244: LD_ADDR_VAR 0 52
69248: PUSH
69249: LD_INT 3
69251: NEG
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69277: LD_ADDR_VAR 0 53
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69321: LD_ADDR_VAR 0 54
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69362: LD_ADDR_VAR 0 55
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: LD_INT 3
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69402: LD_ADDR_VAR 0 56
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 3
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: LD_INT 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: LIST
69442: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69443: LD_ADDR_VAR 0 57
69447: PUSH
69448: LD_INT 2
69450: NEG
69451: PUSH
69452: LD_INT 1
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 3
69461: NEG
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: NEG
69473: PUSH
69474: LD_INT 1
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69487: LD_ADDR_VAR 0 58
69491: PUSH
69492: LD_INT 2
69494: NEG
69495: PUSH
69496: LD_INT 3
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 3
69506: NEG
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69533: LD_ADDR_VAR 0 59
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: LD_INT 2
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: LD_INT 2
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: LIST
69576: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69577: LD_ADDR_VAR 0 60
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: LIST
69617: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69618: LD_ADDR_VAR 0 61
69622: PUSH
69623: LD_INT 2
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 2
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 1
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: LIST
69657: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69658: LD_ADDR_VAR 0 62
69662: PUSH
69663: LD_INT 1
69665: PUSH
69666: LD_INT 2
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69699: LD_ADDR_VAR 0 63
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: LD_INT 0
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 2
69728: NEG
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69743: LD_ADDR_VAR 0 64
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: LD_INT 2
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: LIST
69788: ST_TO_ADDR
// end ; 2 :
69789: GO 73055
69791: LD_INT 2
69793: DOUBLE
69794: EQUAL
69795: IFTRUE 69799
69797: GO 73054
69799: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69800: LD_ADDR_VAR 0 29
69804: PUSH
69805: LD_INT 4
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 5
69828: PUSH
69829: LD_INT 0
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 5
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 4
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 3
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: LD_INT 2
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 5
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: LD_INT 3
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: LD_INT 2
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: LD_INT 3
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 4
69930: PUSH
69931: LD_INT 4
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 4
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 3
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: LD_INT 5
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 5
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 1
70040: NEG
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 1
70051: NEG
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: LD_INT 5
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 2
70072: NEG
70073: PUSH
70074: LD_INT 3
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 3
70083: NEG
70084: PUSH
70085: LD_INT 0
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: NEG
70095: PUSH
70096: LD_INT 1
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 2
70106: NEG
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 2
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 3
70128: NEG
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 4
70139: NEG
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 4
70150: NEG
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: NEG
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: NEG
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 4
70185: NEG
70186: PUSH
70187: LD_INT 4
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 4
70197: NEG
70198: PUSH
70199: LD_INT 5
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 3
70209: NEG
70210: PUSH
70211: LD_INT 4
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 3
70221: NEG
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: NEG
70234: PUSH
70235: LD_INT 3
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 5
70245: NEG
70246: PUSH
70247: LD_INT 4
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 5
70257: NEG
70258: PUSH
70259: LD_INT 5
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: NEG
70270: PUSH
70271: LD_INT 5
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 5
70281: NEG
70282: PUSH
70283: LD_INT 3
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70338: LD_ADDR_VAR 0 30
70342: PUSH
70343: LD_INT 4
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 4
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: PUSH
70366: LD_INT 4
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 5
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 4
70385: PUSH
70386: LD_INT 5
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: LD_INT 4
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 5
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: LD_INT 5
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: LD_INT 3
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: LD_INT 3
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: LD_INT 4
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 2
70517: NEG
70518: PUSH
70519: LD_INT 2
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 4
70528: NEG
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 4
70539: NEG
70540: PUSH
70541: LD_INT 1
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 3
70551: NEG
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 4
70573: NEG
70574: PUSH
70575: LD_INT 1
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: NEG
70596: PUSH
70597: LD_INT 1
70599: NEG
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 5
70607: NEG
70608: PUSH
70609: LD_INT 2
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 3
70619: NEG
70620: PUSH
70621: LD_INT 2
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 3
70630: NEG
70631: PUSH
70632: LD_INT 3
70634: NEG
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 3
70642: NEG
70643: PUSH
70644: LD_INT 4
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 2
70654: NEG
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 2
70666: NEG
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 3
70678: NEG
70679: PUSH
70680: LD_INT 2
70682: NEG
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 4
70690: NEG
70691: PUSH
70692: LD_INT 3
70694: NEG
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: LD_INT 4
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 2
70714: NEG
70715: PUSH
70716: LD_INT 4
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 4
70726: NEG
70727: PUSH
70728: LD_INT 2
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: LD_INT 4
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: LD_INT 5
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: LD_INT 4
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: LD_INT 3
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 3
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: LD_INT 4
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: LD_INT 5
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: LD_INT 3
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 2
70828: NEG
70829: PUSH
70830: LD_INT 5
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70885: LD_ADDR_VAR 0 31
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 4
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 0
70902: PUSH
70903: LD_INT 3
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: LD_INT 4
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: LD_INT 5
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 0
70932: PUSH
70933: LD_INT 5
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 1
70942: NEG
70943: PUSH
70944: LD_INT 4
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 1
70953: NEG
70954: PUSH
70955: LD_INT 3
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: PUSH
70965: LD_INT 5
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 2
70974: NEG
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: NEG
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 3
70996: NEG
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 2
71008: NEG
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 2
71019: NEG
71020: PUSH
71021: LD_INT 1
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 3
71030: NEG
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 4
71041: NEG
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 4
71052: NEG
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 4
71064: NEG
71065: PUSH
71066: LD_INT 2
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 2
71076: NEG
71077: PUSH
71078: LD_INT 2
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 4
71087: NEG
71088: PUSH
71089: LD_INT 4
71091: NEG
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 4
71099: NEG
71100: PUSH
71101: LD_INT 5
71103: NEG
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 3
71111: NEG
71112: PUSH
71113: LD_INT 4
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 3
71123: NEG
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 4
71135: NEG
71136: PUSH
71137: LD_INT 3
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 5
71147: NEG
71148: PUSH
71149: LD_INT 4
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 5
71159: NEG
71160: PUSH
71161: LD_INT 5
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 3
71171: NEG
71172: PUSH
71173: LD_INT 5
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 5
71183: NEG
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: LD_INT 3
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: LD_INT 4
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 1
71217: PUSH
71218: LD_INT 3
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: LD_INT 2
71231: NEG
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 2
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 1
71250: NEG
71251: PUSH
71252: LD_INT 3
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: LD_INT 4
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 2
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 2
71285: NEG
71286: PUSH
71287: LD_INT 4
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 4
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: LD_INT 1
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 5
71318: PUSH
71319: LD_INT 0
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 5
71328: PUSH
71329: LD_INT 1
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 4
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 3
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 5
71380: PUSH
71381: LD_INT 2
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71435: LD_ADDR_VAR 0 32
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: NEG
71454: PUSH
71455: LD_INT 1
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 3
71465: NEG
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 3
71476: NEG
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: LD_INT 1
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 5
71498: NEG
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 5
71509: NEG
71510: PUSH
71511: LD_INT 1
71513: NEG
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 5
71521: NEG
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 3
71544: NEG
71545: PUSH
71546: LD_INT 3
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 3
71556: NEG
71557: PUSH
71558: LD_INT 4
71560: NEG
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: LD_INT 3
71572: NEG
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 3
71592: NEG
71593: PUSH
71594: LD_INT 2
71596: NEG
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 4
71604: NEG
71605: PUSH
71606: LD_INT 3
71608: NEG
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 4
71616: NEG
71617: PUSH
71618: LD_INT 4
71620: NEG
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 2
71628: NEG
71629: PUSH
71630: LD_INT 4
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 4
71640: NEG
71641: PUSH
71642: LD_INT 2
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 0
71652: PUSH
71653: LD_INT 4
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 5
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 1
71674: PUSH
71675: LD_INT 4
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: LD_INT 3
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 3
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: LD_INT 4
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 1
71719: NEG
71720: PUSH
71721: LD_INT 5
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 2
71731: PUSH
71732: LD_INT 3
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 2
71742: NEG
71743: PUSH
71744: LD_INT 5
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: LD_INT 0
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 3
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 4
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 4
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 3
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 2
71805: PUSH
71806: LD_INT 0
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 2
71815: PUSH
71816: LD_INT 1
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: LD_INT 2
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 4
71837: PUSH
71838: LD_INT 2
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 4
71847: PUSH
71848: LD_INT 4
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 4
71857: PUSH
71858: LD_INT 3
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 5
71867: PUSH
71868: LD_INT 4
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 5
71877: PUSH
71878: LD_INT 5
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 4
71887: PUSH
71888: LD_INT 5
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 3
71897: PUSH
71898: LD_INT 4
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 5
71917: PUSH
71918: LD_INT 3
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 3
71927: PUSH
71928: LD_INT 5
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71982: LD_ADDR_VAR 0 33
71986: PUSH
71987: LD_INT 4
71989: NEG
71990: PUSH
71991: LD_INT 4
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 4
72001: NEG
72002: PUSH
72003: LD_INT 5
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 3
72013: NEG
72014: PUSH
72015: LD_INT 4
72017: NEG
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 3
72025: NEG
72026: PUSH
72027: LD_INT 3
72029: NEG
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 4
72037: NEG
72038: PUSH
72039: LD_INT 3
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 5
72049: NEG
72050: PUSH
72051: LD_INT 4
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 5
72061: NEG
72062: PUSH
72063: LD_INT 5
72065: NEG
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 3
72073: NEG
72074: PUSH
72075: LD_INT 5
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 5
72085: NEG
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: LD_INT 3
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 4
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: LD_INT 3
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: PUSH
72131: LD_INT 2
72133: NEG
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 2
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 1
72152: NEG
72153: PUSH
72154: LD_INT 3
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 1
72164: NEG
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 2
72176: PUSH
72177: LD_INT 2
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 2
72187: NEG
72188: PUSH
72189: LD_INT 4
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 4
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 4
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 5
72220: PUSH
72221: LD_INT 0
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 5
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 3
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 5
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 3
72292: PUSH
72293: LD_INT 3
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 3
72302: PUSH
72303: LD_INT 2
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 4
72312: PUSH
72313: LD_INT 3
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 4
72322: PUSH
72323: LD_INT 4
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 3
72332: PUSH
72333: LD_INT 4
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 2
72342: PUSH
72343: LD_INT 3
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: PUSH
72353: LD_INT 2
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 4
72362: PUSH
72363: LD_INT 2
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: LD_INT 4
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 4
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 3
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 1
72402: PUSH
72403: LD_INT 4
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 1
72412: PUSH
72413: LD_INT 5
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: LD_INT 5
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: LD_INT 4
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 1
72443: NEG
72444: PUSH
72445: LD_INT 3
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: LD_INT 5
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: NEG
72465: PUSH
72466: LD_INT 3
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72520: LD_ADDR_VAR 0 34
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: LD_INT 4
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 0
72538: PUSH
72539: LD_INT 5
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 1
72549: PUSH
72550: LD_INT 4
72552: NEG
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 1
72560: PUSH
72561: LD_INT 3
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 0
72571: PUSH
72572: LD_INT 3
72574: NEG
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 1
72582: NEG
72583: PUSH
72584: LD_INT 4
72586: NEG
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 1
72594: NEG
72595: PUSH
72596: LD_INT 5
72598: NEG
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 2
72606: PUSH
72607: LD_INT 3
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 2
72617: NEG
72618: PUSH
72619: LD_INT 5
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 3
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 3
72639: PUSH
72640: LD_INT 1
72642: NEG
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 4
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 4
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: LD_INT 1
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 2
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: LD_INT 1
72693: NEG
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: LD_INT 2
72704: NEG
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: LD_INT 2
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 4
72722: PUSH
72723: LD_INT 4
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 4
72732: PUSH
72733: LD_INT 3
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 5
72742: PUSH
72743: LD_INT 4
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 5
72752: PUSH
72753: LD_INT 5
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 4
72762: PUSH
72763: LD_INT 5
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 3
72772: PUSH
72773: LD_INT 4
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 3
72782: PUSH
72783: LD_INT 3
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 5
72792: PUSH
72793: LD_INT 3
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: LD_INT 5
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: LD_INT 3
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 2
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 1
72832: PUSH
72833: LD_INT 3
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 1
72842: PUSH
72843: LD_INT 4
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 4
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 1
72862: NEG
72863: PUSH
72864: LD_INT 3
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 1
72873: NEG
72874: PUSH
72875: LD_INT 2
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 2
72884: PUSH
72885: LD_INT 4
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 2
72894: NEG
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 4
72905: NEG
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 4
72916: NEG
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 3
72928: NEG
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 3
72939: NEG
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 4
72950: NEG
72951: PUSH
72952: LD_INT 1
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 5
72961: NEG
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 5
72972: NEG
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 5
72984: NEG
72985: PUSH
72986: LD_INT 2
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 3
72996: NEG
72997: PUSH
72998: LD_INT 2
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: ST_TO_ADDR
// end ; end ;
73052: GO 73055
73054: POP
// case btype of b_depot , b_warehouse :
73055: LD_VAR 0 1
73059: PUSH
73060: LD_INT 0
73062: DOUBLE
73063: EQUAL
73064: IFTRUE 73074
73066: LD_INT 1
73068: DOUBLE
73069: EQUAL
73070: IFTRUE 73074
73072: GO 73275
73074: POP
// case nation of nation_american :
73075: LD_VAR 0 5
73079: PUSH
73080: LD_INT 1
73082: DOUBLE
73083: EQUAL
73084: IFTRUE 73088
73086: GO 73144
73088: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73089: LD_ADDR_VAR 0 9
73093: PUSH
73094: LD_VAR 0 11
73098: PUSH
73099: LD_VAR 0 12
73103: PUSH
73104: LD_VAR 0 13
73108: PUSH
73109: LD_VAR 0 14
73113: PUSH
73114: LD_VAR 0 15
73118: PUSH
73119: LD_VAR 0 16
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: PUSH
73132: LD_VAR 0 4
73136: PUSH
73137: LD_INT 1
73139: PLUS
73140: ARRAY
73141: ST_TO_ADDR
73142: GO 73273
73144: LD_INT 2
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73152
73150: GO 73208
73152: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73153: LD_ADDR_VAR 0 9
73157: PUSH
73158: LD_VAR 0 17
73162: PUSH
73163: LD_VAR 0 18
73167: PUSH
73168: LD_VAR 0 19
73172: PUSH
73173: LD_VAR 0 20
73177: PUSH
73178: LD_VAR 0 21
73182: PUSH
73183: LD_VAR 0 22
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: PUSH
73196: LD_VAR 0 4
73200: PUSH
73201: LD_INT 1
73203: PLUS
73204: ARRAY
73205: ST_TO_ADDR
73206: GO 73273
73208: LD_INT 3
73210: DOUBLE
73211: EQUAL
73212: IFTRUE 73216
73214: GO 73272
73216: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73217: LD_ADDR_VAR 0 9
73221: PUSH
73222: LD_VAR 0 23
73226: PUSH
73227: LD_VAR 0 24
73231: PUSH
73232: LD_VAR 0 25
73236: PUSH
73237: LD_VAR 0 26
73241: PUSH
73242: LD_VAR 0 27
73246: PUSH
73247: LD_VAR 0 28
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: PUSH
73260: LD_VAR 0 4
73264: PUSH
73265: LD_INT 1
73267: PLUS
73268: ARRAY
73269: ST_TO_ADDR
73270: GO 73273
73272: POP
73273: GO 73828
73275: LD_INT 2
73277: DOUBLE
73278: EQUAL
73279: IFTRUE 73289
73281: LD_INT 3
73283: DOUBLE
73284: EQUAL
73285: IFTRUE 73289
73287: GO 73345
73289: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73290: LD_ADDR_VAR 0 9
73294: PUSH
73295: LD_VAR 0 29
73299: PUSH
73300: LD_VAR 0 30
73304: PUSH
73305: LD_VAR 0 31
73309: PUSH
73310: LD_VAR 0 32
73314: PUSH
73315: LD_VAR 0 33
73319: PUSH
73320: LD_VAR 0 34
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: PUSH
73333: LD_VAR 0 4
73337: PUSH
73338: LD_INT 1
73340: PLUS
73341: ARRAY
73342: ST_TO_ADDR
73343: GO 73828
73345: LD_INT 16
73347: DOUBLE
73348: EQUAL
73349: IFTRUE 73407
73351: LD_INT 17
73353: DOUBLE
73354: EQUAL
73355: IFTRUE 73407
73357: LD_INT 18
73359: DOUBLE
73360: EQUAL
73361: IFTRUE 73407
73363: LD_INT 19
73365: DOUBLE
73366: EQUAL
73367: IFTRUE 73407
73369: LD_INT 22
73371: DOUBLE
73372: EQUAL
73373: IFTRUE 73407
73375: LD_INT 20
73377: DOUBLE
73378: EQUAL
73379: IFTRUE 73407
73381: LD_INT 21
73383: DOUBLE
73384: EQUAL
73385: IFTRUE 73407
73387: LD_INT 23
73389: DOUBLE
73390: EQUAL
73391: IFTRUE 73407
73393: LD_INT 24
73395: DOUBLE
73396: EQUAL
73397: IFTRUE 73407
73399: LD_INT 25
73401: DOUBLE
73402: EQUAL
73403: IFTRUE 73407
73405: GO 73463
73407: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73408: LD_ADDR_VAR 0 9
73412: PUSH
73413: LD_VAR 0 35
73417: PUSH
73418: LD_VAR 0 36
73422: PUSH
73423: LD_VAR 0 37
73427: PUSH
73428: LD_VAR 0 38
73432: PUSH
73433: LD_VAR 0 39
73437: PUSH
73438: LD_VAR 0 40
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: PUSH
73451: LD_VAR 0 4
73455: PUSH
73456: LD_INT 1
73458: PLUS
73459: ARRAY
73460: ST_TO_ADDR
73461: GO 73828
73463: LD_INT 6
73465: DOUBLE
73466: EQUAL
73467: IFTRUE 73519
73469: LD_INT 7
73471: DOUBLE
73472: EQUAL
73473: IFTRUE 73519
73475: LD_INT 8
73477: DOUBLE
73478: EQUAL
73479: IFTRUE 73519
73481: LD_INT 13
73483: DOUBLE
73484: EQUAL
73485: IFTRUE 73519
73487: LD_INT 12
73489: DOUBLE
73490: EQUAL
73491: IFTRUE 73519
73493: LD_INT 15
73495: DOUBLE
73496: EQUAL
73497: IFTRUE 73519
73499: LD_INT 11
73501: DOUBLE
73502: EQUAL
73503: IFTRUE 73519
73505: LD_INT 14
73507: DOUBLE
73508: EQUAL
73509: IFTRUE 73519
73511: LD_INT 10
73513: DOUBLE
73514: EQUAL
73515: IFTRUE 73519
73517: GO 73575
73519: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73520: LD_ADDR_VAR 0 9
73524: PUSH
73525: LD_VAR 0 41
73529: PUSH
73530: LD_VAR 0 42
73534: PUSH
73535: LD_VAR 0 43
73539: PUSH
73540: LD_VAR 0 44
73544: PUSH
73545: LD_VAR 0 45
73549: PUSH
73550: LD_VAR 0 46
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: PUSH
73563: LD_VAR 0 4
73567: PUSH
73568: LD_INT 1
73570: PLUS
73571: ARRAY
73572: ST_TO_ADDR
73573: GO 73828
73575: LD_INT 36
73577: DOUBLE
73578: EQUAL
73579: IFTRUE 73583
73581: GO 73639
73583: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73584: LD_ADDR_VAR 0 9
73588: PUSH
73589: LD_VAR 0 47
73593: PUSH
73594: LD_VAR 0 48
73598: PUSH
73599: LD_VAR 0 49
73603: PUSH
73604: LD_VAR 0 50
73608: PUSH
73609: LD_VAR 0 51
73613: PUSH
73614: LD_VAR 0 52
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: PUSH
73627: LD_VAR 0 4
73631: PUSH
73632: LD_INT 1
73634: PLUS
73635: ARRAY
73636: ST_TO_ADDR
73637: GO 73828
73639: LD_INT 4
73641: DOUBLE
73642: EQUAL
73643: IFTRUE 73665
73645: LD_INT 5
73647: DOUBLE
73648: EQUAL
73649: IFTRUE 73665
73651: LD_INT 34
73653: DOUBLE
73654: EQUAL
73655: IFTRUE 73665
73657: LD_INT 37
73659: DOUBLE
73660: EQUAL
73661: IFTRUE 73665
73663: GO 73721
73665: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73666: LD_ADDR_VAR 0 9
73670: PUSH
73671: LD_VAR 0 53
73675: PUSH
73676: LD_VAR 0 54
73680: PUSH
73681: LD_VAR 0 55
73685: PUSH
73686: LD_VAR 0 56
73690: PUSH
73691: LD_VAR 0 57
73695: PUSH
73696: LD_VAR 0 58
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: PUSH
73709: LD_VAR 0 4
73713: PUSH
73714: LD_INT 1
73716: PLUS
73717: ARRAY
73718: ST_TO_ADDR
73719: GO 73828
73721: LD_INT 31
73723: DOUBLE
73724: EQUAL
73725: IFTRUE 73771
73727: LD_INT 32
73729: DOUBLE
73730: EQUAL
73731: IFTRUE 73771
73733: LD_INT 33
73735: DOUBLE
73736: EQUAL
73737: IFTRUE 73771
73739: LD_INT 27
73741: DOUBLE
73742: EQUAL
73743: IFTRUE 73771
73745: LD_INT 26
73747: DOUBLE
73748: EQUAL
73749: IFTRUE 73771
73751: LD_INT 28
73753: DOUBLE
73754: EQUAL
73755: IFTRUE 73771
73757: LD_INT 29
73759: DOUBLE
73760: EQUAL
73761: IFTRUE 73771
73763: LD_INT 30
73765: DOUBLE
73766: EQUAL
73767: IFTRUE 73771
73769: GO 73827
73771: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73772: LD_ADDR_VAR 0 9
73776: PUSH
73777: LD_VAR 0 59
73781: PUSH
73782: LD_VAR 0 60
73786: PUSH
73787: LD_VAR 0 61
73791: PUSH
73792: LD_VAR 0 62
73796: PUSH
73797: LD_VAR 0 63
73801: PUSH
73802: LD_VAR 0 64
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: PUSH
73815: LD_VAR 0 4
73819: PUSH
73820: LD_INT 1
73822: PLUS
73823: ARRAY
73824: ST_TO_ADDR
73825: GO 73828
73827: POP
// temp_list2 = [ ] ;
73828: LD_ADDR_VAR 0 10
73832: PUSH
73833: EMPTY
73834: ST_TO_ADDR
// for i in temp_list do
73835: LD_ADDR_VAR 0 8
73839: PUSH
73840: LD_VAR 0 9
73844: PUSH
73845: FOR_IN
73846: IFFALSE 73898
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73848: LD_ADDR_VAR 0 10
73852: PUSH
73853: LD_VAR 0 10
73857: PUSH
73858: LD_VAR 0 8
73862: PUSH
73863: LD_INT 1
73865: ARRAY
73866: PUSH
73867: LD_VAR 0 2
73871: PLUS
73872: PUSH
73873: LD_VAR 0 8
73877: PUSH
73878: LD_INT 2
73880: ARRAY
73881: PUSH
73882: LD_VAR 0 3
73886: PLUS
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: ADD
73895: ST_TO_ADDR
73896: GO 73845
73898: POP
73899: POP
// result = temp_list2 ;
73900: LD_ADDR_VAR 0 7
73904: PUSH
73905: LD_VAR 0 10
73909: ST_TO_ADDR
// end ;
73910: LD_VAR 0 7
73914: RET
// export function EnemyInRange ( unit , dist ) ; begin
73915: LD_INT 0
73917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 1
73927: PPUSH
73928: CALL_OW 255
73932: PPUSH
73933: LD_VAR 0 1
73937: PPUSH
73938: CALL_OW 250
73942: PPUSH
73943: LD_VAR 0 1
73947: PPUSH
73948: CALL_OW 251
73952: PPUSH
73953: LD_VAR 0 2
73957: PPUSH
73958: CALL 47686 0 4
73962: PUSH
73963: LD_INT 4
73965: ARRAY
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 3
73971: RET
// export function PlayerSeeMe ( unit ) ; begin
73972: LD_INT 0
73974: PPUSH
// result := See ( your_side , unit ) ;
73975: LD_ADDR_VAR 0 2
73979: PUSH
73980: LD_OWVAR 2
73984: PPUSH
73985: LD_VAR 0 1
73989: PPUSH
73990: CALL_OW 292
73994: ST_TO_ADDR
// end ;
73995: LD_VAR 0 2
73999: RET
// export function ReverseDir ( unit ) ; begin
74000: LD_INT 0
74002: PPUSH
// if not unit then
74003: LD_VAR 0 1
74007: NOT
74008: IFFALSE 74012
// exit ;
74010: GO 74035
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74012: LD_ADDR_VAR 0 2
74016: PUSH
74017: LD_VAR 0 1
74021: PPUSH
74022: CALL_OW 254
74026: PUSH
74027: LD_INT 3
74029: PLUS
74030: PUSH
74031: LD_INT 6
74033: MOD
74034: ST_TO_ADDR
// end ;
74035: LD_VAR 0 2
74039: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74040: LD_INT 0
74042: PPUSH
74043: PPUSH
74044: PPUSH
74045: PPUSH
74046: PPUSH
// if not hexes then
74047: LD_VAR 0 2
74051: NOT
74052: IFFALSE 74056
// exit ;
74054: GO 74204
// dist := 9999 ;
74056: LD_ADDR_VAR 0 5
74060: PUSH
74061: LD_INT 9999
74063: ST_TO_ADDR
// for i = 1 to hexes do
74064: LD_ADDR_VAR 0 4
74068: PUSH
74069: DOUBLE
74070: LD_INT 1
74072: DEC
74073: ST_TO_ADDR
74074: LD_VAR 0 2
74078: PUSH
74079: FOR_TO
74080: IFFALSE 74192
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74082: LD_VAR 0 1
74086: PPUSH
74087: LD_VAR 0 2
74091: PUSH
74092: LD_VAR 0 4
74096: ARRAY
74097: PUSH
74098: LD_INT 1
74100: ARRAY
74101: PPUSH
74102: LD_VAR 0 2
74106: PUSH
74107: LD_VAR 0 4
74111: ARRAY
74112: PUSH
74113: LD_INT 2
74115: ARRAY
74116: PPUSH
74117: CALL_OW 297
74121: PUSH
74122: LD_VAR 0 5
74126: LESS
74127: IFFALSE 74190
// begin hex := hexes [ i ] ;
74129: LD_ADDR_VAR 0 7
74133: PUSH
74134: LD_VAR 0 2
74138: PUSH
74139: LD_VAR 0 4
74143: ARRAY
74144: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74145: LD_ADDR_VAR 0 5
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_VAR 0 4
74164: ARRAY
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PPUSH
74170: LD_VAR 0 2
74174: PUSH
74175: LD_VAR 0 4
74179: ARRAY
74180: PUSH
74181: LD_INT 2
74183: ARRAY
74184: PPUSH
74185: CALL_OW 297
74189: ST_TO_ADDR
// end ; end ;
74190: GO 74079
74192: POP
74193: POP
// result := hex ;
74194: LD_ADDR_VAR 0 3
74198: PUSH
74199: LD_VAR 0 7
74203: ST_TO_ADDR
// end ;
74204: LD_VAR 0 3
74208: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74209: LD_INT 0
74211: PPUSH
74212: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74213: LD_VAR 0 1
74217: NOT
74218: PUSH
74219: LD_VAR 0 1
74223: PUSH
74224: LD_INT 21
74226: PUSH
74227: LD_INT 2
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 23
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PPUSH
74248: CALL_OW 69
74252: IN
74253: NOT
74254: OR
74255: IFFALSE 74259
// exit ;
74257: GO 74306
// for i = 1 to 3 do
74259: LD_ADDR_VAR 0 3
74263: PUSH
74264: DOUBLE
74265: LD_INT 1
74267: DEC
74268: ST_TO_ADDR
74269: LD_INT 3
74271: PUSH
74272: FOR_TO
74273: IFFALSE 74304
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74275: LD_VAR 0 1
74279: PPUSH
74280: CALL_OW 250
74284: PPUSH
74285: LD_VAR 0 1
74289: PPUSH
74290: CALL_OW 251
74294: PPUSH
74295: LD_INT 1
74297: PPUSH
74298: CALL_OW 453
74302: GO 74272
74304: POP
74305: POP
// end ;
74306: LD_VAR 0 2
74310: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74311: LD_INT 0
74313: PPUSH
74314: PPUSH
74315: PPUSH
74316: PPUSH
74317: PPUSH
74318: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74319: LD_VAR 0 1
74323: NOT
74324: PUSH
74325: LD_VAR 0 2
74329: NOT
74330: OR
74331: PUSH
74332: LD_VAR 0 1
74336: PPUSH
74337: CALL_OW 314
74341: OR
74342: IFFALSE 74346
// exit ;
74344: GO 74787
// x := GetX ( enemy_unit ) ;
74346: LD_ADDR_VAR 0 7
74350: PUSH
74351: LD_VAR 0 2
74355: PPUSH
74356: CALL_OW 250
74360: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74361: LD_ADDR_VAR 0 8
74365: PUSH
74366: LD_VAR 0 2
74370: PPUSH
74371: CALL_OW 251
74375: ST_TO_ADDR
// if not x or not y then
74376: LD_VAR 0 7
74380: NOT
74381: PUSH
74382: LD_VAR 0 8
74386: NOT
74387: OR
74388: IFFALSE 74392
// exit ;
74390: GO 74787
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74392: LD_ADDR_VAR 0 6
74396: PUSH
74397: LD_VAR 0 7
74401: PPUSH
74402: LD_INT 0
74404: PPUSH
74405: LD_INT 4
74407: PPUSH
74408: CALL_OW 272
74412: PUSH
74413: LD_VAR 0 8
74417: PPUSH
74418: LD_INT 0
74420: PPUSH
74421: LD_INT 4
74423: PPUSH
74424: CALL_OW 273
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_VAR 0 7
74437: PPUSH
74438: LD_INT 1
74440: PPUSH
74441: LD_INT 4
74443: PPUSH
74444: CALL_OW 272
74448: PUSH
74449: LD_VAR 0 8
74453: PPUSH
74454: LD_INT 1
74456: PPUSH
74457: LD_INT 4
74459: PPUSH
74460: CALL_OW 273
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_VAR 0 7
74473: PPUSH
74474: LD_INT 2
74476: PPUSH
74477: LD_INT 4
74479: PPUSH
74480: CALL_OW 272
74484: PUSH
74485: LD_VAR 0 8
74489: PPUSH
74490: LD_INT 2
74492: PPUSH
74493: LD_INT 4
74495: PPUSH
74496: CALL_OW 273
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_VAR 0 7
74509: PPUSH
74510: LD_INT 3
74512: PPUSH
74513: LD_INT 4
74515: PPUSH
74516: CALL_OW 272
74520: PUSH
74521: LD_VAR 0 8
74525: PPUSH
74526: LD_INT 3
74528: PPUSH
74529: LD_INT 4
74531: PPUSH
74532: CALL_OW 273
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_VAR 0 7
74545: PPUSH
74546: LD_INT 4
74548: PPUSH
74549: LD_INT 4
74551: PPUSH
74552: CALL_OW 272
74556: PUSH
74557: LD_VAR 0 8
74561: PPUSH
74562: LD_INT 4
74564: PPUSH
74565: LD_INT 4
74567: PPUSH
74568: CALL_OW 273
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_VAR 0 7
74581: PPUSH
74582: LD_INT 5
74584: PPUSH
74585: LD_INT 4
74587: PPUSH
74588: CALL_OW 272
74592: PUSH
74593: LD_VAR 0 8
74597: PPUSH
74598: LD_INT 5
74600: PPUSH
74601: LD_INT 4
74603: PPUSH
74604: CALL_OW 273
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: ST_TO_ADDR
// for i = tmp downto 1 do
74621: LD_ADDR_VAR 0 4
74625: PUSH
74626: DOUBLE
74627: LD_VAR 0 6
74631: INC
74632: ST_TO_ADDR
74633: LD_INT 1
74635: PUSH
74636: FOR_DOWNTO
74637: IFFALSE 74738
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74639: LD_VAR 0 6
74643: PUSH
74644: LD_VAR 0 4
74648: ARRAY
74649: PUSH
74650: LD_INT 1
74652: ARRAY
74653: PPUSH
74654: LD_VAR 0 6
74658: PUSH
74659: LD_VAR 0 4
74663: ARRAY
74664: PUSH
74665: LD_INT 2
74667: ARRAY
74668: PPUSH
74669: CALL_OW 488
74673: NOT
74674: PUSH
74675: LD_VAR 0 6
74679: PUSH
74680: LD_VAR 0 4
74684: ARRAY
74685: PUSH
74686: LD_INT 1
74688: ARRAY
74689: PPUSH
74690: LD_VAR 0 6
74694: PUSH
74695: LD_VAR 0 4
74699: ARRAY
74700: PUSH
74701: LD_INT 2
74703: ARRAY
74704: PPUSH
74705: CALL_OW 428
74709: PUSH
74710: LD_INT 0
74712: NONEQUAL
74713: OR
74714: IFFALSE 74736
// tmp := Delete ( tmp , i ) ;
74716: LD_ADDR_VAR 0 6
74720: PUSH
74721: LD_VAR 0 6
74725: PPUSH
74726: LD_VAR 0 4
74730: PPUSH
74731: CALL_OW 3
74735: ST_TO_ADDR
74736: GO 74636
74738: POP
74739: POP
// j := GetClosestHex ( unit , tmp ) ;
74740: LD_ADDR_VAR 0 5
74744: PUSH
74745: LD_VAR 0 1
74749: PPUSH
74750: LD_VAR 0 6
74754: PPUSH
74755: CALL 74040 0 2
74759: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74760: LD_VAR 0 1
74764: PPUSH
74765: LD_VAR 0 5
74769: PUSH
74770: LD_INT 1
74772: ARRAY
74773: PPUSH
74774: LD_VAR 0 5
74778: PUSH
74779: LD_INT 2
74781: ARRAY
74782: PPUSH
74783: CALL_OW 111
// end ;
74787: LD_VAR 0 3
74791: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74792: LD_INT 0
74794: PPUSH
74795: PPUSH
74796: PPUSH
// uc_side = 0 ;
74797: LD_ADDR_OWVAR 20
74801: PUSH
74802: LD_INT 0
74804: ST_TO_ADDR
// uc_nation = 0 ;
74805: LD_ADDR_OWVAR 21
74809: PUSH
74810: LD_INT 0
74812: ST_TO_ADDR
// InitHc_All ( ) ;
74813: CALL_OW 584
// InitVc ;
74817: CALL_OW 20
// if mastodonts then
74821: LD_VAR 0 6
74825: IFFALSE 74892
// for i = 1 to mastodonts do
74827: LD_ADDR_VAR 0 11
74831: PUSH
74832: DOUBLE
74833: LD_INT 1
74835: DEC
74836: ST_TO_ADDR
74837: LD_VAR 0 6
74841: PUSH
74842: FOR_TO
74843: IFFALSE 74890
// begin vc_chassis := 31 ;
74845: LD_ADDR_OWVAR 37
74849: PUSH
74850: LD_INT 31
74852: ST_TO_ADDR
// vc_control := control_rider ;
74853: LD_ADDR_OWVAR 38
74857: PUSH
74858: LD_INT 4
74860: ST_TO_ADDR
// animal := CreateVehicle ;
74861: LD_ADDR_VAR 0 12
74865: PUSH
74866: CALL_OW 45
74870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74871: LD_VAR 0 12
74875: PPUSH
74876: LD_VAR 0 8
74880: PPUSH
74881: LD_INT 0
74883: PPUSH
74884: CALL 77080 0 3
// end ;
74888: GO 74842
74890: POP
74891: POP
// if horses then
74892: LD_VAR 0 5
74896: IFFALSE 74963
// for i = 1 to horses do
74898: LD_ADDR_VAR 0 11
74902: PUSH
74903: DOUBLE
74904: LD_INT 1
74906: DEC
74907: ST_TO_ADDR
74908: LD_VAR 0 5
74912: PUSH
74913: FOR_TO
74914: IFFALSE 74961
// begin hc_class := 21 ;
74916: LD_ADDR_OWVAR 28
74920: PUSH
74921: LD_INT 21
74923: ST_TO_ADDR
// hc_gallery :=  ;
74924: LD_ADDR_OWVAR 33
74928: PUSH
74929: LD_STRING 
74931: ST_TO_ADDR
// animal := CreateHuman ;
74932: LD_ADDR_VAR 0 12
74936: PUSH
74937: CALL_OW 44
74941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74942: LD_VAR 0 12
74946: PPUSH
74947: LD_VAR 0 8
74951: PPUSH
74952: LD_INT 0
74954: PPUSH
74955: CALL 77080 0 3
// end ;
74959: GO 74913
74961: POP
74962: POP
// if birds then
74963: LD_VAR 0 1
74967: IFFALSE 75034
// for i = 1 to birds do
74969: LD_ADDR_VAR 0 11
74973: PUSH
74974: DOUBLE
74975: LD_INT 1
74977: DEC
74978: ST_TO_ADDR
74979: LD_VAR 0 1
74983: PUSH
74984: FOR_TO
74985: IFFALSE 75032
// begin hc_class = 18 ;
74987: LD_ADDR_OWVAR 28
74991: PUSH
74992: LD_INT 18
74994: ST_TO_ADDR
// hc_gallery =  ;
74995: LD_ADDR_OWVAR 33
74999: PUSH
75000: LD_STRING 
75002: ST_TO_ADDR
// animal := CreateHuman ;
75003: LD_ADDR_VAR 0 12
75007: PUSH
75008: CALL_OW 44
75012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75013: LD_VAR 0 12
75017: PPUSH
75018: LD_VAR 0 8
75022: PPUSH
75023: LD_INT 0
75025: PPUSH
75026: CALL 77080 0 3
// end ;
75030: GO 74984
75032: POP
75033: POP
// if tigers then
75034: LD_VAR 0 2
75038: IFFALSE 75122
// for i = 1 to tigers do
75040: LD_ADDR_VAR 0 11
75044: PUSH
75045: DOUBLE
75046: LD_INT 1
75048: DEC
75049: ST_TO_ADDR
75050: LD_VAR 0 2
75054: PUSH
75055: FOR_TO
75056: IFFALSE 75120
// begin hc_class = class_tiger ;
75058: LD_ADDR_OWVAR 28
75062: PUSH
75063: LD_INT 14
75065: ST_TO_ADDR
// hc_gallery =  ;
75066: LD_ADDR_OWVAR 33
75070: PUSH
75071: LD_STRING 
75073: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75074: LD_ADDR_OWVAR 35
75078: PUSH
75079: LD_INT 7
75081: NEG
75082: PPUSH
75083: LD_INT 7
75085: PPUSH
75086: CALL_OW 12
75090: ST_TO_ADDR
// animal := CreateHuman ;
75091: LD_ADDR_VAR 0 12
75095: PUSH
75096: CALL_OW 44
75100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75101: LD_VAR 0 12
75105: PPUSH
75106: LD_VAR 0 8
75110: PPUSH
75111: LD_INT 0
75113: PPUSH
75114: CALL 77080 0 3
// end ;
75118: GO 75055
75120: POP
75121: POP
// if apemans then
75122: LD_VAR 0 3
75126: IFFALSE 75249
// for i = 1 to apemans do
75128: LD_ADDR_VAR 0 11
75132: PUSH
75133: DOUBLE
75134: LD_INT 1
75136: DEC
75137: ST_TO_ADDR
75138: LD_VAR 0 3
75142: PUSH
75143: FOR_TO
75144: IFFALSE 75247
// begin hc_class = class_apeman ;
75146: LD_ADDR_OWVAR 28
75150: PUSH
75151: LD_INT 12
75153: ST_TO_ADDR
// hc_gallery =  ;
75154: LD_ADDR_OWVAR 33
75158: PUSH
75159: LD_STRING 
75161: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
75162: LD_ADDR_OWVAR 35
75166: PUSH
75167: LD_INT 5
75169: NEG
75170: PPUSH
75171: LD_INT 5
75173: PPUSH
75174: CALL_OW 12
75178: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75179: LD_ADDR_OWVAR 31
75183: PUSH
75184: LD_INT 1
75186: PPUSH
75187: LD_INT 3
75189: PPUSH
75190: CALL_OW 12
75194: PUSH
75195: LD_INT 1
75197: PPUSH
75198: LD_INT 3
75200: PPUSH
75201: CALL_OW 12
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: LD_INT 0
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: ST_TO_ADDR
// animal := CreateHuman ;
75218: LD_ADDR_VAR 0 12
75222: PUSH
75223: CALL_OW 44
75227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75228: LD_VAR 0 12
75232: PPUSH
75233: LD_VAR 0 8
75237: PPUSH
75238: LD_INT 0
75240: PPUSH
75241: CALL 77080 0 3
// end ;
75245: GO 75143
75247: POP
75248: POP
// if enchidnas then
75249: LD_VAR 0 4
75253: IFFALSE 75320
// for i = 1 to enchidnas do
75255: LD_ADDR_VAR 0 11
75259: PUSH
75260: DOUBLE
75261: LD_INT 1
75263: DEC
75264: ST_TO_ADDR
75265: LD_VAR 0 4
75269: PUSH
75270: FOR_TO
75271: IFFALSE 75318
// begin hc_class = 13 ;
75273: LD_ADDR_OWVAR 28
75277: PUSH
75278: LD_INT 13
75280: ST_TO_ADDR
// hc_gallery =  ;
75281: LD_ADDR_OWVAR 33
75285: PUSH
75286: LD_STRING 
75288: ST_TO_ADDR
// animal := CreateHuman ;
75289: LD_ADDR_VAR 0 12
75293: PUSH
75294: CALL_OW 44
75298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75299: LD_VAR 0 12
75303: PPUSH
75304: LD_VAR 0 8
75308: PPUSH
75309: LD_INT 0
75311: PPUSH
75312: CALL 77080 0 3
// end ;
75316: GO 75270
75318: POP
75319: POP
// if fishes then
75320: LD_VAR 0 7
75324: IFFALSE 75391
// for i = 1 to fishes do
75326: LD_ADDR_VAR 0 11
75330: PUSH
75331: DOUBLE
75332: LD_INT 1
75334: DEC
75335: ST_TO_ADDR
75336: LD_VAR 0 7
75340: PUSH
75341: FOR_TO
75342: IFFALSE 75389
// begin hc_class = 20 ;
75344: LD_ADDR_OWVAR 28
75348: PUSH
75349: LD_INT 20
75351: ST_TO_ADDR
// hc_gallery =  ;
75352: LD_ADDR_OWVAR 33
75356: PUSH
75357: LD_STRING 
75359: ST_TO_ADDR
// animal := CreateHuman ;
75360: LD_ADDR_VAR 0 12
75364: PUSH
75365: CALL_OW 44
75369: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75370: LD_VAR 0 12
75374: PPUSH
75375: LD_VAR 0 9
75379: PPUSH
75380: LD_INT 0
75382: PPUSH
75383: CALL 77080 0 3
// end ;
75387: GO 75341
75389: POP
75390: POP
// end ;
75391: LD_VAR 0 10
75395: RET
// export function WantHeal ( sci , unit ) ; begin
75396: LD_INT 0
75398: PPUSH
// if GetTaskList ( sci ) > 0 then
75399: LD_VAR 0 1
75403: PPUSH
75404: CALL_OW 437
75408: PUSH
75409: LD_INT 0
75411: GREATER
75412: IFFALSE 75482
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75414: LD_VAR 0 1
75418: PPUSH
75419: CALL_OW 437
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 1
75430: ARRAY
75431: PUSH
75432: LD_STRING l
75434: EQUAL
75435: PUSH
75436: LD_VAR 0 1
75440: PPUSH
75441: CALL_OW 437
75445: PUSH
75446: LD_INT 1
75448: ARRAY
75449: PUSH
75450: LD_INT 4
75452: ARRAY
75453: PUSH
75454: LD_VAR 0 2
75458: EQUAL
75459: AND
75460: IFFALSE 75472
// result := true else
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: LD_INT 1
75469: ST_TO_ADDR
75470: GO 75480
// result := false ;
75472: LD_ADDR_VAR 0 3
75476: PUSH
75477: LD_INT 0
75479: ST_TO_ADDR
// end else
75480: GO 75490
// result := false ;
75482: LD_ADDR_VAR 0 3
75486: PUSH
75487: LD_INT 0
75489: ST_TO_ADDR
// end ;
75490: LD_VAR 0 3
75494: RET
// export function HealTarget ( sci ) ; begin
75495: LD_INT 0
75497: PPUSH
// if not sci then
75498: LD_VAR 0 1
75502: NOT
75503: IFFALSE 75507
// exit ;
75505: GO 75572
// result := 0 ;
75507: LD_ADDR_VAR 0 2
75511: PUSH
75512: LD_INT 0
75514: ST_TO_ADDR
// if GetTaskList ( sci ) then
75515: LD_VAR 0 1
75519: PPUSH
75520: CALL_OW 437
75524: IFFALSE 75572
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75526: LD_VAR 0 1
75530: PPUSH
75531: CALL_OW 437
75535: PUSH
75536: LD_INT 1
75538: ARRAY
75539: PUSH
75540: LD_INT 1
75542: ARRAY
75543: PUSH
75544: LD_STRING l
75546: EQUAL
75547: IFFALSE 75572
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75549: LD_ADDR_VAR 0 2
75553: PUSH
75554: LD_VAR 0 1
75558: PPUSH
75559: CALL_OW 437
75563: PUSH
75564: LD_INT 1
75566: ARRAY
75567: PUSH
75568: LD_INT 4
75570: ARRAY
75571: ST_TO_ADDR
// end ;
75572: LD_VAR 0 2
75576: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75577: LD_INT 0
75579: PPUSH
75580: PPUSH
75581: PPUSH
75582: PPUSH
// if not base_units then
75583: LD_VAR 0 1
75587: NOT
75588: IFFALSE 75592
// exit ;
75590: GO 75679
// result := false ;
75592: LD_ADDR_VAR 0 2
75596: PUSH
75597: LD_INT 0
75599: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75600: LD_ADDR_VAR 0 5
75604: PUSH
75605: LD_VAR 0 1
75609: PPUSH
75610: LD_INT 21
75612: PUSH
75613: LD_INT 3
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PPUSH
75620: CALL_OW 72
75624: ST_TO_ADDR
// if not tmp then
75625: LD_VAR 0 5
75629: NOT
75630: IFFALSE 75634
// exit ;
75632: GO 75679
// for i in tmp do
75634: LD_ADDR_VAR 0 3
75638: PUSH
75639: LD_VAR 0 5
75643: PUSH
75644: FOR_IN
75645: IFFALSE 75677
// begin result := EnemyInRange ( i , 22 ) ;
75647: LD_ADDR_VAR 0 2
75651: PUSH
75652: LD_VAR 0 3
75656: PPUSH
75657: LD_INT 22
75659: PPUSH
75660: CALL 73915 0 2
75664: ST_TO_ADDR
// if result then
75665: LD_VAR 0 2
75669: IFFALSE 75675
// exit ;
75671: POP
75672: POP
75673: GO 75679
// end ;
75675: GO 75644
75677: POP
75678: POP
// end ;
75679: LD_VAR 0 2
75683: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75684: LD_INT 0
75686: PPUSH
75687: PPUSH
// if not units then
75688: LD_VAR 0 1
75692: NOT
75693: IFFALSE 75697
// exit ;
75695: GO 75767
// result := [ ] ;
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: EMPTY
75703: ST_TO_ADDR
// for i in units do
75704: LD_ADDR_VAR 0 4
75708: PUSH
75709: LD_VAR 0 1
75713: PUSH
75714: FOR_IN
75715: IFFALSE 75765
// if GetTag ( i ) = tag then
75717: LD_VAR 0 4
75721: PPUSH
75722: CALL_OW 110
75726: PUSH
75727: LD_VAR 0 2
75731: EQUAL
75732: IFFALSE 75763
// result := Insert ( result , result + 1 , i ) ;
75734: LD_ADDR_VAR 0 3
75738: PUSH
75739: LD_VAR 0 3
75743: PPUSH
75744: LD_VAR 0 3
75748: PUSH
75749: LD_INT 1
75751: PLUS
75752: PPUSH
75753: LD_VAR 0 4
75757: PPUSH
75758: CALL_OW 2
75762: ST_TO_ADDR
75763: GO 75714
75765: POP
75766: POP
// end ;
75767: LD_VAR 0 3
75771: RET
// export function IsDriver ( un ) ; begin
75772: LD_INT 0
75774: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75775: LD_ADDR_VAR 0 2
75779: PUSH
75780: LD_VAR 0 1
75784: PUSH
75785: LD_INT 55
75787: PUSH
75788: EMPTY
75789: LIST
75790: PPUSH
75791: CALL_OW 69
75795: IN
75796: ST_TO_ADDR
// end ;
75797: LD_VAR 0 2
75801: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75802: LD_INT 0
75804: PPUSH
75805: PPUSH
// list := [ ] ;
75806: LD_ADDR_VAR 0 5
75810: PUSH
75811: EMPTY
75812: ST_TO_ADDR
// case d of 0 :
75813: LD_VAR 0 3
75817: PUSH
75818: LD_INT 0
75820: DOUBLE
75821: EQUAL
75822: IFTRUE 75826
75824: GO 75959
75826: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75827: LD_ADDR_VAR 0 5
75831: PUSH
75832: LD_VAR 0 1
75836: PUSH
75837: LD_INT 4
75839: MINUS
75840: PUSH
75841: LD_VAR 0 2
75845: PUSH
75846: LD_INT 4
75848: MINUS
75849: PUSH
75850: LD_INT 2
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: LIST
75857: PUSH
75858: LD_VAR 0 1
75862: PUSH
75863: LD_INT 3
75865: MINUS
75866: PUSH
75867: LD_VAR 0 2
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: LIST
75879: PUSH
75880: LD_VAR 0 1
75884: PUSH
75885: LD_INT 4
75887: PLUS
75888: PUSH
75889: LD_VAR 0 2
75893: PUSH
75894: LD_INT 4
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: PUSH
75902: LD_VAR 0 1
75906: PUSH
75907: LD_INT 3
75909: PLUS
75910: PUSH
75911: LD_VAR 0 2
75915: PUSH
75916: LD_INT 3
75918: PLUS
75919: PUSH
75920: LD_INT 5
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: LIST
75927: PUSH
75928: LD_VAR 0 1
75932: PUSH
75933: LD_VAR 0 2
75937: PUSH
75938: LD_INT 4
75940: PLUS
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: ST_TO_ADDR
// end ; 1 :
75957: GO 76657
75959: LD_INT 1
75961: DOUBLE
75962: EQUAL
75963: IFTRUE 75967
75965: GO 76100
75967: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75968: LD_ADDR_VAR 0 5
75972: PUSH
75973: LD_VAR 0 1
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_INT 4
75985: MINUS
75986: PUSH
75987: LD_INT 3
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: LIST
75994: PUSH
75995: LD_VAR 0 1
75999: PUSH
76000: LD_INT 3
76002: MINUS
76003: PUSH
76004: LD_VAR 0 2
76008: PUSH
76009: LD_INT 3
76011: MINUS
76012: PUSH
76013: LD_INT 2
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: LIST
76020: PUSH
76021: LD_VAR 0 1
76025: PUSH
76026: LD_INT 4
76028: MINUS
76029: PUSH
76030: LD_VAR 0 2
76034: PUSH
76035: LD_INT 1
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: PUSH
76043: LD_VAR 0 1
76047: PUSH
76048: LD_VAR 0 2
76052: PUSH
76053: LD_INT 3
76055: PLUS
76056: PUSH
76057: LD_INT 0
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: LIST
76064: PUSH
76065: LD_VAR 0 1
76069: PUSH
76070: LD_INT 4
76072: PLUS
76073: PUSH
76074: LD_VAR 0 2
76078: PUSH
76079: LD_INT 4
76081: PLUS
76082: PUSH
76083: LD_INT 5
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: LIST
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: ST_TO_ADDR
// end ; 2 :
76098: GO 76657
76100: LD_INT 2
76102: DOUBLE
76103: EQUAL
76104: IFTRUE 76108
76106: GO 76237
76108: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76109: LD_ADDR_VAR 0 5
76113: PUSH
76114: LD_VAR 0 1
76118: PUSH
76119: LD_VAR 0 2
76123: PUSH
76124: LD_INT 3
76126: MINUS
76127: PUSH
76128: LD_INT 3
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: LIST
76135: PUSH
76136: LD_VAR 0 1
76140: PUSH
76141: LD_INT 4
76143: PLUS
76144: PUSH
76145: LD_VAR 0 2
76149: PUSH
76150: LD_INT 4
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: PUSH
76158: LD_VAR 0 1
76162: PUSH
76163: LD_VAR 0 2
76167: PUSH
76168: LD_INT 4
76170: PLUS
76171: PUSH
76172: LD_INT 0
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: LIST
76179: PUSH
76180: LD_VAR 0 1
76184: PUSH
76185: LD_INT 3
76187: MINUS
76188: PUSH
76189: LD_VAR 0 2
76193: PUSH
76194: LD_INT 1
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: LIST
76201: PUSH
76202: LD_VAR 0 1
76206: PUSH
76207: LD_INT 4
76209: MINUS
76210: PUSH
76211: LD_VAR 0 2
76215: PUSH
76216: LD_INT 4
76218: MINUS
76219: PUSH
76220: LD_INT 2
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: ST_TO_ADDR
// end ; 3 :
76235: GO 76657
76237: LD_INT 3
76239: DOUBLE
76240: EQUAL
76241: IFTRUE 76245
76243: GO 76378
76245: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76246: LD_ADDR_VAR 0 5
76250: PUSH
76251: LD_VAR 0 1
76255: PUSH
76256: LD_INT 3
76258: PLUS
76259: PUSH
76260: LD_VAR 0 2
76264: PUSH
76265: LD_INT 4
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: LIST
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_INT 4
76280: PLUS
76281: PUSH
76282: LD_VAR 0 2
76286: PUSH
76287: LD_INT 4
76289: PLUS
76290: PUSH
76291: LD_INT 5
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: LIST
76298: PUSH
76299: LD_VAR 0 1
76303: PUSH
76304: LD_INT 4
76306: MINUS
76307: PUSH
76308: LD_VAR 0 2
76312: PUSH
76313: LD_INT 1
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: LIST
76320: PUSH
76321: LD_VAR 0 1
76325: PUSH
76326: LD_VAR 0 2
76330: PUSH
76331: LD_INT 4
76333: MINUS
76334: PUSH
76335: LD_INT 3
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: LIST
76342: PUSH
76343: LD_VAR 0 1
76347: PUSH
76348: LD_INT 3
76350: MINUS
76351: PUSH
76352: LD_VAR 0 2
76356: PUSH
76357: LD_INT 3
76359: MINUS
76360: PUSH
76361: LD_INT 2
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: ST_TO_ADDR
// end ; 4 :
76376: GO 76657
76378: LD_INT 4
76380: DOUBLE
76381: EQUAL
76382: IFTRUE 76386
76384: GO 76519
76386: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76387: LD_ADDR_VAR 0 5
76391: PUSH
76392: LD_VAR 0 1
76396: PUSH
76397: LD_VAR 0 2
76401: PUSH
76402: LD_INT 4
76404: PLUS
76405: PUSH
76406: LD_INT 0
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: LIST
76413: PUSH
76414: LD_VAR 0 1
76418: PUSH
76419: LD_INT 3
76421: PLUS
76422: PUSH
76423: LD_VAR 0 2
76427: PUSH
76428: LD_INT 3
76430: PLUS
76431: PUSH
76432: LD_INT 5
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: LIST
76439: PUSH
76440: LD_VAR 0 1
76444: PUSH
76445: LD_INT 4
76447: PLUS
76448: PUSH
76449: LD_VAR 0 2
76453: PUSH
76454: LD_INT 4
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: LIST
76461: PUSH
76462: LD_VAR 0 1
76466: PUSH
76467: LD_VAR 0 2
76471: PUSH
76472: LD_INT 3
76474: MINUS
76475: PUSH
76476: LD_INT 3
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: LIST
76483: PUSH
76484: LD_VAR 0 1
76488: PUSH
76489: LD_INT 4
76491: MINUS
76492: PUSH
76493: LD_VAR 0 2
76497: PUSH
76498: LD_INT 4
76500: MINUS
76501: PUSH
76502: LD_INT 2
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: LIST
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: ST_TO_ADDR
// end ; 5 :
76517: GO 76657
76519: LD_INT 5
76521: DOUBLE
76522: EQUAL
76523: IFTRUE 76527
76525: GO 76656
76527: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76528: LD_ADDR_VAR 0 5
76532: PUSH
76533: LD_VAR 0 1
76537: PUSH
76538: LD_INT 4
76540: MINUS
76541: PUSH
76542: LD_VAR 0 2
76546: PUSH
76547: LD_INT 1
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: LIST
76554: PUSH
76555: LD_VAR 0 1
76559: PUSH
76560: LD_VAR 0 2
76564: PUSH
76565: LD_INT 4
76567: MINUS
76568: PUSH
76569: LD_INT 3
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: PUSH
76577: LD_VAR 0 1
76581: PUSH
76582: LD_INT 4
76584: PLUS
76585: PUSH
76586: LD_VAR 0 2
76590: PUSH
76591: LD_INT 4
76593: PLUS
76594: PUSH
76595: LD_INT 5
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: LIST
76602: PUSH
76603: LD_VAR 0 1
76607: PUSH
76608: LD_INT 3
76610: PLUS
76611: PUSH
76612: LD_VAR 0 2
76616: PUSH
76617: LD_INT 4
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: LIST
76624: PUSH
76625: LD_VAR 0 1
76629: PUSH
76630: LD_VAR 0 2
76634: PUSH
76635: LD_INT 3
76637: PLUS
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: LIST
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: ST_TO_ADDR
// end ; end ;
76654: GO 76657
76656: POP
// result := list ;
76657: LD_ADDR_VAR 0 4
76661: PUSH
76662: LD_VAR 0 5
76666: ST_TO_ADDR
// end ;
76667: LD_VAR 0 4
76671: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76672: LD_INT 0
76674: PPUSH
76675: PPUSH
76676: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76677: LD_VAR 0 1
76681: NOT
76682: PUSH
76683: LD_VAR 0 2
76687: PUSH
76688: LD_INT 1
76690: PUSH
76691: LD_INT 2
76693: PUSH
76694: LD_INT 3
76696: PUSH
76697: LD_INT 4
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: IN
76706: NOT
76707: OR
76708: IFFALSE 76712
// exit ;
76710: GO 76804
// tmp := [ ] ;
76712: LD_ADDR_VAR 0 5
76716: PUSH
76717: EMPTY
76718: ST_TO_ADDR
// for i in units do
76719: LD_ADDR_VAR 0 4
76723: PUSH
76724: LD_VAR 0 1
76728: PUSH
76729: FOR_IN
76730: IFFALSE 76773
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
76732: LD_ADDR_VAR 0 5
76736: PUSH
76737: LD_VAR 0 5
76741: PPUSH
76742: LD_VAR 0 5
76746: PUSH
76747: LD_INT 1
76749: PLUS
76750: PPUSH
76751: LD_VAR 0 4
76755: PPUSH
76756: LD_VAR 0 2
76760: PPUSH
76761: CALL_OW 259
76765: PPUSH
76766: CALL_OW 2
76770: ST_TO_ADDR
76771: GO 76729
76773: POP
76774: POP
// if not tmp then
76775: LD_VAR 0 5
76779: NOT
76780: IFFALSE 76784
// exit ;
76782: GO 76804
// result := SortListByListDesc ( units , tmp ) ;
76784: LD_ADDR_VAR 0 3
76788: PUSH
76789: LD_VAR 0 1
76793: PPUSH
76794: LD_VAR 0 5
76798: PPUSH
76799: CALL_OW 77
76803: ST_TO_ADDR
// end ;
76804: LD_VAR 0 3
76808: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76809: LD_INT 0
76811: PPUSH
76812: PPUSH
76813: PPUSH
// result := false ;
76814: LD_ADDR_VAR 0 3
76818: PUSH
76819: LD_INT 0
76821: ST_TO_ADDR
// x := GetX ( building ) ;
76822: LD_ADDR_VAR 0 4
76826: PUSH
76827: LD_VAR 0 2
76831: PPUSH
76832: CALL_OW 250
76836: ST_TO_ADDR
// y := GetY ( building ) ;
76837: LD_ADDR_VAR 0 5
76841: PUSH
76842: LD_VAR 0 2
76846: PPUSH
76847: CALL_OW 251
76851: ST_TO_ADDR
// if not building or not x or not y then
76852: LD_VAR 0 2
76856: NOT
76857: PUSH
76858: LD_VAR 0 4
76862: NOT
76863: OR
76864: PUSH
76865: LD_VAR 0 5
76869: NOT
76870: OR
76871: IFFALSE 76875
// exit ;
76873: GO 76967
// if GetTaskList ( unit ) then
76875: LD_VAR 0 1
76879: PPUSH
76880: CALL_OW 437
76884: IFFALSE 76967
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76886: LD_STRING e
76888: PUSH
76889: LD_VAR 0 1
76893: PPUSH
76894: CALL_OW 437
76898: PUSH
76899: LD_INT 1
76901: ARRAY
76902: PUSH
76903: LD_INT 1
76905: ARRAY
76906: EQUAL
76907: PUSH
76908: LD_VAR 0 4
76912: PUSH
76913: LD_VAR 0 1
76917: PPUSH
76918: CALL_OW 437
76922: PUSH
76923: LD_INT 1
76925: ARRAY
76926: PUSH
76927: LD_INT 2
76929: ARRAY
76930: EQUAL
76931: AND
76932: PUSH
76933: LD_VAR 0 5
76937: PUSH
76938: LD_VAR 0 1
76942: PPUSH
76943: CALL_OW 437
76947: PUSH
76948: LD_INT 1
76950: ARRAY
76951: PUSH
76952: LD_INT 3
76954: ARRAY
76955: EQUAL
76956: AND
76957: IFFALSE 76967
// result := true end ;
76959: LD_ADDR_VAR 0 3
76963: PUSH
76964: LD_INT 1
76966: ST_TO_ADDR
// end ;
76967: LD_VAR 0 3
76971: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76972: LD_INT 0
76974: PPUSH
// result := false ;
76975: LD_ADDR_VAR 0 4
76979: PUSH
76980: LD_INT 0
76982: ST_TO_ADDR
// if GetTaskList ( unit ) then
76983: LD_VAR 0 1
76987: PPUSH
76988: CALL_OW 437
76992: IFFALSE 77075
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76994: LD_STRING M
76996: PUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: CALL_OW 437
77006: PUSH
77007: LD_INT 1
77009: ARRAY
77010: PUSH
77011: LD_INT 1
77013: ARRAY
77014: EQUAL
77015: PUSH
77016: LD_VAR 0 2
77020: PUSH
77021: LD_VAR 0 1
77025: PPUSH
77026: CALL_OW 437
77030: PUSH
77031: LD_INT 1
77033: ARRAY
77034: PUSH
77035: LD_INT 2
77037: ARRAY
77038: EQUAL
77039: AND
77040: PUSH
77041: LD_VAR 0 3
77045: PUSH
77046: LD_VAR 0 1
77050: PPUSH
77051: CALL_OW 437
77055: PUSH
77056: LD_INT 1
77058: ARRAY
77059: PUSH
77060: LD_INT 3
77062: ARRAY
77063: EQUAL
77064: AND
77065: IFFALSE 77075
// result := true ;
77067: LD_ADDR_VAR 0 4
77071: PUSH
77072: LD_INT 1
77074: ST_TO_ADDR
// end ; end ;
77075: LD_VAR 0 4
77079: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77080: LD_INT 0
77082: PPUSH
77083: PPUSH
77084: PPUSH
77085: PPUSH
// if not unit or not area then
77086: LD_VAR 0 1
77090: NOT
77091: PUSH
77092: LD_VAR 0 2
77096: NOT
77097: OR
77098: IFFALSE 77102
// exit ;
77100: GO 77266
// tmp := AreaToList ( area , i ) ;
77102: LD_ADDR_VAR 0 6
77106: PUSH
77107: LD_VAR 0 2
77111: PPUSH
77112: LD_VAR 0 5
77116: PPUSH
77117: CALL_OW 517
77121: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77122: LD_ADDR_VAR 0 5
77126: PUSH
77127: DOUBLE
77128: LD_INT 1
77130: DEC
77131: ST_TO_ADDR
77132: LD_VAR 0 6
77136: PUSH
77137: LD_INT 1
77139: ARRAY
77140: PUSH
77141: FOR_TO
77142: IFFALSE 77264
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77144: LD_ADDR_VAR 0 7
77148: PUSH
77149: LD_VAR 0 6
77153: PUSH
77154: LD_INT 1
77156: ARRAY
77157: PUSH
77158: LD_VAR 0 5
77162: ARRAY
77163: PUSH
77164: LD_VAR 0 6
77168: PUSH
77169: LD_INT 2
77171: ARRAY
77172: PUSH
77173: LD_VAR 0 5
77177: ARRAY
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77183: LD_VAR 0 7
77187: PUSH
77188: LD_INT 1
77190: ARRAY
77191: PPUSH
77192: LD_VAR 0 7
77196: PUSH
77197: LD_INT 2
77199: ARRAY
77200: PPUSH
77201: CALL_OW 428
77205: PUSH
77206: LD_INT 0
77208: EQUAL
77209: IFFALSE 77262
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77211: LD_VAR 0 1
77215: PPUSH
77216: LD_VAR 0 7
77220: PUSH
77221: LD_INT 1
77223: ARRAY
77224: PPUSH
77225: LD_VAR 0 7
77229: PUSH
77230: LD_INT 2
77232: ARRAY
77233: PPUSH
77234: LD_VAR 0 3
77238: PPUSH
77239: CALL_OW 48
// result := IsPlaced ( unit ) ;
77243: LD_ADDR_VAR 0 4
77247: PUSH
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 305
77257: ST_TO_ADDR
// exit ;
77258: POP
77259: POP
77260: GO 77266
// end ; end ;
77262: GO 77141
77264: POP
77265: POP
// end ;
77266: LD_VAR 0 4
77270: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77271: LD_INT 0
77273: PPUSH
77274: PPUSH
77275: PPUSH
// if not side or side > 8 then
77276: LD_VAR 0 1
77280: NOT
77281: PUSH
77282: LD_VAR 0 1
77286: PUSH
77287: LD_INT 8
77289: GREATER
77290: OR
77291: IFFALSE 77295
// exit ;
77293: GO 77482
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77295: LD_ADDR_VAR 0 4
77299: PUSH
77300: LD_INT 22
77302: PUSH
77303: LD_VAR 0 1
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 21
77314: PUSH
77315: LD_INT 3
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PPUSH
77326: CALL_OW 69
77330: ST_TO_ADDR
// if not tmp then
77331: LD_VAR 0 4
77335: NOT
77336: IFFALSE 77340
// exit ;
77338: GO 77482
// enable_addtolog := true ;
77340: LD_ADDR_OWVAR 81
77344: PUSH
77345: LD_INT 1
77347: ST_TO_ADDR
// AddToLog ( [ ) ;
77348: LD_STRING [
77350: PPUSH
77351: CALL_OW 561
// for i in tmp do
77355: LD_ADDR_VAR 0 3
77359: PUSH
77360: LD_VAR 0 4
77364: PUSH
77365: FOR_IN
77366: IFFALSE 77473
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77368: LD_STRING [
77370: PUSH
77371: LD_VAR 0 3
77375: PPUSH
77376: CALL_OW 266
77380: STR
77381: PUSH
77382: LD_STRING , 
77384: STR
77385: PUSH
77386: LD_VAR 0 3
77390: PPUSH
77391: CALL_OW 250
77395: STR
77396: PUSH
77397: LD_STRING , 
77399: STR
77400: PUSH
77401: LD_VAR 0 3
77405: PPUSH
77406: CALL_OW 251
77410: STR
77411: PUSH
77412: LD_STRING , 
77414: STR
77415: PUSH
77416: LD_VAR 0 3
77420: PPUSH
77421: CALL_OW 254
77425: STR
77426: PUSH
77427: LD_STRING , 
77429: STR
77430: PUSH
77431: LD_VAR 0 3
77435: PPUSH
77436: LD_INT 1
77438: PPUSH
77439: CALL_OW 268
77443: STR
77444: PUSH
77445: LD_STRING , 
77447: STR
77448: PUSH
77449: LD_VAR 0 3
77453: PPUSH
77454: LD_INT 2
77456: PPUSH
77457: CALL_OW 268
77461: STR
77462: PUSH
77463: LD_STRING ],
77465: STR
77466: PPUSH
77467: CALL_OW 561
// end ;
77471: GO 77365
77473: POP
77474: POP
// AddToLog ( ]; ) ;
77475: LD_STRING ];
77477: PPUSH
77478: CALL_OW 561
// end ;
77482: LD_VAR 0 2
77486: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77487: LD_INT 0
77489: PPUSH
77490: PPUSH
77491: PPUSH
77492: PPUSH
77493: PPUSH
// if not area or not rate or not max then
77494: LD_VAR 0 1
77498: NOT
77499: PUSH
77500: LD_VAR 0 2
77504: NOT
77505: OR
77506: PUSH
77507: LD_VAR 0 4
77511: NOT
77512: OR
77513: IFFALSE 77517
// exit ;
77515: GO 77709
// while 1 do
77517: LD_INT 1
77519: IFFALSE 77709
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77521: LD_ADDR_VAR 0 9
77525: PUSH
77526: LD_VAR 0 1
77530: PPUSH
77531: LD_INT 1
77533: PPUSH
77534: CALL_OW 287
77538: PUSH
77539: LD_INT 10
77541: MUL
77542: ST_TO_ADDR
// r := rate / 10 ;
77543: LD_ADDR_VAR 0 7
77547: PUSH
77548: LD_VAR 0 2
77552: PUSH
77553: LD_INT 10
77555: DIVREAL
77556: ST_TO_ADDR
// time := 1 1$00 ;
77557: LD_ADDR_VAR 0 8
77561: PUSH
77562: LD_INT 2100
77564: ST_TO_ADDR
// if amount < min then
77565: LD_VAR 0 9
77569: PUSH
77570: LD_VAR 0 3
77574: LESS
77575: IFFALSE 77593
// r := r * 2 else
77577: LD_ADDR_VAR 0 7
77581: PUSH
77582: LD_VAR 0 7
77586: PUSH
77587: LD_INT 2
77589: MUL
77590: ST_TO_ADDR
77591: GO 77619
// if amount > max then
77593: LD_VAR 0 9
77597: PUSH
77598: LD_VAR 0 4
77602: GREATER
77603: IFFALSE 77619
// r := r / 2 ;
77605: LD_ADDR_VAR 0 7
77609: PUSH
77610: LD_VAR 0 7
77614: PUSH
77615: LD_INT 2
77617: DIVREAL
77618: ST_TO_ADDR
// time := time / r ;
77619: LD_ADDR_VAR 0 8
77623: PUSH
77624: LD_VAR 0 8
77628: PUSH
77629: LD_VAR 0 7
77633: DIVREAL
77634: ST_TO_ADDR
// if time < 0 then
77635: LD_VAR 0 8
77639: PUSH
77640: LD_INT 0
77642: LESS
77643: IFFALSE 77660
// time := time * - 1 ;
77645: LD_ADDR_VAR 0 8
77649: PUSH
77650: LD_VAR 0 8
77654: PUSH
77655: LD_INT 1
77657: NEG
77658: MUL
77659: ST_TO_ADDR
// wait ( time ) ;
77660: LD_VAR 0 8
77664: PPUSH
77665: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77669: LD_INT 35
77671: PPUSH
77672: LD_INT 875
77674: PPUSH
77675: CALL_OW 12
77679: PPUSH
77680: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77684: LD_INT 1
77686: PPUSH
77687: LD_INT 5
77689: PPUSH
77690: CALL_OW 12
77694: PPUSH
77695: LD_VAR 0 1
77699: PPUSH
77700: LD_INT 1
77702: PPUSH
77703: CALL_OW 55
// end ;
77707: GO 77517
// end ;
77709: LD_VAR 0 5
77713: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77714: LD_INT 0
77716: PPUSH
77717: PPUSH
77718: PPUSH
77719: PPUSH
77720: PPUSH
77721: PPUSH
77722: PPUSH
77723: PPUSH
// if not turrets or not factories then
77724: LD_VAR 0 1
77728: NOT
77729: PUSH
77730: LD_VAR 0 2
77734: NOT
77735: OR
77736: IFFALSE 77740
// exit ;
77738: GO 78047
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77740: LD_ADDR_VAR 0 10
77744: PUSH
77745: LD_INT 5
77747: PUSH
77748: LD_INT 6
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 2
77757: PUSH
77758: LD_INT 4
77760: PUSH
77761: EMPTY
77762: LIST
77763: LIST
77764: PUSH
77765: LD_INT 3
77767: PUSH
77768: LD_INT 5
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 24
77782: PUSH
77783: LD_INT 25
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 23
77792: PUSH
77793: LD_INT 27
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 42
77806: PUSH
77807: LD_INT 43
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 44
77816: PUSH
77817: LD_INT 46
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PUSH
77824: LD_INT 45
77826: PUSH
77827: LD_INT 47
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: LIST
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: ST_TO_ADDR
// result := [ ] ;
77844: LD_ADDR_VAR 0 3
77848: PUSH
77849: EMPTY
77850: ST_TO_ADDR
// for i in turrets do
77851: LD_ADDR_VAR 0 4
77855: PUSH
77856: LD_VAR 0 1
77860: PUSH
77861: FOR_IN
77862: IFFALSE 78045
// begin nat := GetNation ( i ) ;
77864: LD_ADDR_VAR 0 7
77868: PUSH
77869: LD_VAR 0 4
77873: PPUSH
77874: CALL_OW 248
77878: ST_TO_ADDR
// weapon := 0 ;
77879: LD_ADDR_VAR 0 8
77883: PUSH
77884: LD_INT 0
77886: ST_TO_ADDR
// if not nat then
77887: LD_VAR 0 7
77891: NOT
77892: IFFALSE 77896
// continue ;
77894: GO 77861
// for j in list [ nat ] do
77896: LD_ADDR_VAR 0 5
77900: PUSH
77901: LD_VAR 0 10
77905: PUSH
77906: LD_VAR 0 7
77910: ARRAY
77911: PUSH
77912: FOR_IN
77913: IFFALSE 77954
// if GetBWeapon ( i ) = j [ 1 ] then
77915: LD_VAR 0 4
77919: PPUSH
77920: CALL_OW 269
77924: PUSH
77925: LD_VAR 0 5
77929: PUSH
77930: LD_INT 1
77932: ARRAY
77933: EQUAL
77934: IFFALSE 77952
// begin weapon := j [ 2 ] ;
77936: LD_ADDR_VAR 0 8
77940: PUSH
77941: LD_VAR 0 5
77945: PUSH
77946: LD_INT 2
77948: ARRAY
77949: ST_TO_ADDR
// break ;
77950: GO 77954
// end ;
77952: GO 77912
77954: POP
77955: POP
// if not weapon then
77956: LD_VAR 0 8
77960: NOT
77961: IFFALSE 77965
// continue ;
77963: GO 77861
// for k in factories do
77965: LD_ADDR_VAR 0 6
77969: PUSH
77970: LD_VAR 0 2
77974: PUSH
77975: FOR_IN
77976: IFFALSE 78041
// begin weapons := AvailableWeaponList ( k ) ;
77978: LD_ADDR_VAR 0 9
77982: PUSH
77983: LD_VAR 0 6
77987: PPUSH
77988: CALL_OW 478
77992: ST_TO_ADDR
// if not weapons then
77993: LD_VAR 0 9
77997: NOT
77998: IFFALSE 78002
// continue ;
78000: GO 77975
// if weapon in weapons then
78002: LD_VAR 0 8
78006: PUSH
78007: LD_VAR 0 9
78011: IN
78012: IFFALSE 78039
// begin result := [ i , weapon ] ;
78014: LD_ADDR_VAR 0 3
78018: PUSH
78019: LD_VAR 0 4
78023: PUSH
78024: LD_VAR 0 8
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: ST_TO_ADDR
// exit ;
78033: POP
78034: POP
78035: POP
78036: POP
78037: GO 78047
// end ; end ;
78039: GO 77975
78041: POP
78042: POP
// end ;
78043: GO 77861
78045: POP
78046: POP
// end ;
78047: LD_VAR 0 3
78051: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78052: LD_INT 0
78054: PPUSH
// if not side or side > 8 then
78055: LD_VAR 0 3
78059: NOT
78060: PUSH
78061: LD_VAR 0 3
78065: PUSH
78066: LD_INT 8
78068: GREATER
78069: OR
78070: IFFALSE 78074
// exit ;
78072: GO 78133
// if not range then
78074: LD_VAR 0 4
78078: NOT
78079: IFFALSE 78090
// range := - 12 ;
78081: LD_ADDR_VAR 0 4
78085: PUSH
78086: LD_INT 12
78088: NEG
78089: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78090: LD_VAR 0 1
78094: PPUSH
78095: LD_VAR 0 2
78099: PPUSH
78100: LD_VAR 0 3
78104: PPUSH
78105: LD_VAR 0 4
78109: PPUSH
78110: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78114: LD_VAR 0 1
78118: PPUSH
78119: LD_VAR 0 2
78123: PPUSH
78124: LD_VAR 0 3
78128: PPUSH
78129: CALL_OW 331
// end ;
78133: LD_VAR 0 5
78137: RET
// export function Video ( mode ) ; begin
78138: LD_INT 0
78140: PPUSH
// ingame_video = mode ;
78141: LD_ADDR_OWVAR 52
78145: PUSH
78146: LD_VAR 0 1
78150: ST_TO_ADDR
// interface_hidden = mode ;
78151: LD_ADDR_OWVAR 54
78155: PUSH
78156: LD_VAR 0 1
78160: ST_TO_ADDR
// end ;
78161: LD_VAR 0 2
78165: RET
// export function Join ( array , element ) ; begin
78166: LD_INT 0
78168: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78169: LD_ADDR_VAR 0 3
78173: PUSH
78174: LD_VAR 0 1
78178: PPUSH
78179: LD_VAR 0 1
78183: PUSH
78184: LD_INT 1
78186: PLUS
78187: PPUSH
78188: LD_VAR 0 2
78192: PPUSH
78193: CALL_OW 1
78197: ST_TO_ADDR
// end ;
78198: LD_VAR 0 3
78202: RET
// export function JoinUnion ( array , element ) ; begin
78203: LD_INT 0
78205: PPUSH
// result := array union element ;
78206: LD_ADDR_VAR 0 3
78210: PUSH
78211: LD_VAR 0 1
78215: PUSH
78216: LD_VAR 0 2
78220: UNION
78221: ST_TO_ADDR
// end ;
78222: LD_VAR 0 3
78226: RET
// export function GetBehemoths ( side ) ; begin
78227: LD_INT 0
78229: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78230: LD_ADDR_VAR 0 2
78234: PUSH
78235: LD_INT 22
78237: PUSH
78238: LD_VAR 0 1
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PUSH
78247: LD_INT 31
78249: PUSH
78250: LD_INT 25
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PPUSH
78261: CALL_OW 69
78265: ST_TO_ADDR
// end ;
78266: LD_VAR 0 2
78270: RET
// export function Shuffle ( array ) ; var i , index ; begin
78271: LD_INT 0
78273: PPUSH
78274: PPUSH
78275: PPUSH
// result := [ ] ;
78276: LD_ADDR_VAR 0 2
78280: PUSH
78281: EMPTY
78282: ST_TO_ADDR
// if not array then
78283: LD_VAR 0 1
78287: NOT
78288: IFFALSE 78292
// exit ;
78290: GO 78391
// Randomize ;
78292: CALL_OW 10
// for i = array downto 1 do
78296: LD_ADDR_VAR 0 3
78300: PUSH
78301: DOUBLE
78302: LD_VAR 0 1
78306: INC
78307: ST_TO_ADDR
78308: LD_INT 1
78310: PUSH
78311: FOR_DOWNTO
78312: IFFALSE 78389
// begin index := rand ( 1 , array ) ;
78314: LD_ADDR_VAR 0 4
78318: PUSH
78319: LD_INT 1
78321: PPUSH
78322: LD_VAR 0 1
78326: PPUSH
78327: CALL_OW 12
78331: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78332: LD_ADDR_VAR 0 2
78336: PUSH
78337: LD_VAR 0 2
78341: PPUSH
78342: LD_VAR 0 2
78346: PUSH
78347: LD_INT 1
78349: PLUS
78350: PPUSH
78351: LD_VAR 0 1
78355: PUSH
78356: LD_VAR 0 4
78360: ARRAY
78361: PPUSH
78362: CALL_OW 2
78366: ST_TO_ADDR
// array := Delete ( array , index ) ;
78367: LD_ADDR_VAR 0 1
78371: PUSH
78372: LD_VAR 0 1
78376: PPUSH
78377: LD_VAR 0 4
78381: PPUSH
78382: CALL_OW 3
78386: ST_TO_ADDR
// end ;
78387: GO 78311
78389: POP
78390: POP
// end ;
78391: LD_VAR 0 2
78395: RET
// export function GetBaseMaterials ( base ) ; begin
78396: LD_INT 0
78398: PPUSH
// result := [ 0 , 0 , 0 ] ;
78399: LD_ADDR_VAR 0 2
78403: PUSH
78404: LD_INT 0
78406: PUSH
78407: LD_INT 0
78409: PUSH
78410: LD_INT 0
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: ST_TO_ADDR
// if not base then
78418: LD_VAR 0 1
78422: NOT
78423: IFFALSE 78427
// exit ;
78425: GO 78476
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78427: LD_ADDR_VAR 0 2
78431: PUSH
78432: LD_VAR 0 1
78436: PPUSH
78437: LD_INT 1
78439: PPUSH
78440: CALL_OW 275
78444: PUSH
78445: LD_VAR 0 1
78449: PPUSH
78450: LD_INT 2
78452: PPUSH
78453: CALL_OW 275
78457: PUSH
78458: LD_VAR 0 1
78462: PPUSH
78463: LD_INT 3
78465: PPUSH
78466: CALL_OW 275
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: LIST
78475: ST_TO_ADDR
// end ;
78476: LD_VAR 0 2
78480: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78481: LD_INT 0
78483: PPUSH
78484: PPUSH
// result := array ;
78485: LD_ADDR_VAR 0 3
78489: PUSH
78490: LD_VAR 0 1
78494: ST_TO_ADDR
// if size > 0 then
78495: LD_VAR 0 2
78499: PUSH
78500: LD_INT 0
78502: GREATER
78503: IFFALSE 78549
// for i := array downto size do
78505: LD_ADDR_VAR 0 4
78509: PUSH
78510: DOUBLE
78511: LD_VAR 0 1
78515: INC
78516: ST_TO_ADDR
78517: LD_VAR 0 2
78521: PUSH
78522: FOR_DOWNTO
78523: IFFALSE 78547
// result := Delete ( result , result ) ;
78525: LD_ADDR_VAR 0 3
78529: PUSH
78530: LD_VAR 0 3
78534: PPUSH
78535: LD_VAR 0 3
78539: PPUSH
78540: CALL_OW 3
78544: ST_TO_ADDR
78545: GO 78522
78547: POP
78548: POP
// end ;
78549: LD_VAR 0 3
78553: RET
// export function ComExit ( unit ) ; var tmp ; begin
78554: LD_INT 0
78556: PPUSH
78557: PPUSH
// if not IsInUnit ( unit ) then
78558: LD_VAR 0 1
78562: PPUSH
78563: CALL_OW 310
78567: NOT
78568: IFFALSE 78572
// exit ;
78570: GO 78632
// tmp := IsInUnit ( unit ) ;
78572: LD_ADDR_VAR 0 3
78576: PUSH
78577: LD_VAR 0 1
78581: PPUSH
78582: CALL_OW 310
78586: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78587: LD_VAR 0 3
78591: PPUSH
78592: CALL_OW 247
78596: PUSH
78597: LD_INT 2
78599: EQUAL
78600: IFFALSE 78613
// ComExitVehicle ( unit ) else
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 121
78611: GO 78622
// ComExitBuilding ( unit ) ;
78613: LD_VAR 0 1
78617: PPUSH
78618: CALL_OW 122
// result := tmp ;
78622: LD_ADDR_VAR 0 2
78626: PUSH
78627: LD_VAR 0 3
78631: ST_TO_ADDR
// end ;
78632: LD_VAR 0 2
78636: RET
// export function ComExitAll ( units ) ; var i ; begin
78637: LD_INT 0
78639: PPUSH
78640: PPUSH
// if not units then
78641: LD_VAR 0 1
78645: NOT
78646: IFFALSE 78650
// exit ;
78648: GO 78676
// for i in units do
78650: LD_ADDR_VAR 0 3
78654: PUSH
78655: LD_VAR 0 1
78659: PUSH
78660: FOR_IN
78661: IFFALSE 78674
// ComExit ( i ) ;
78663: LD_VAR 0 3
78667: PPUSH
78668: CALL 78554 0 1
78672: GO 78660
78674: POP
78675: POP
// end ;
78676: LD_VAR 0 2
78680: RET
// export function ResetHc ; begin
78681: LD_INT 0
78683: PPUSH
// InitHc ;
78684: CALL_OW 19
// hc_importance := 0 ;
78688: LD_ADDR_OWVAR 32
78692: PUSH
78693: LD_INT 0
78695: ST_TO_ADDR
// end ;
78696: LD_VAR 0 1
78700: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78701: LD_INT 0
78703: PPUSH
78704: PPUSH
78705: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78706: LD_ADDR_VAR 0 6
78710: PUSH
78711: LD_VAR 0 1
78715: PUSH
78716: LD_VAR 0 3
78720: PLUS
78721: PUSH
78722: LD_INT 2
78724: DIV
78725: ST_TO_ADDR
// if _x < 0 then
78726: LD_VAR 0 6
78730: PUSH
78731: LD_INT 0
78733: LESS
78734: IFFALSE 78751
// _x := _x * - 1 ;
78736: LD_ADDR_VAR 0 6
78740: PUSH
78741: LD_VAR 0 6
78745: PUSH
78746: LD_INT 1
78748: NEG
78749: MUL
78750: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78751: LD_ADDR_VAR 0 7
78755: PUSH
78756: LD_VAR 0 2
78760: PUSH
78761: LD_VAR 0 4
78765: PLUS
78766: PUSH
78767: LD_INT 2
78769: DIV
78770: ST_TO_ADDR
// if _y < 0 then
78771: LD_VAR 0 7
78775: PUSH
78776: LD_INT 0
78778: LESS
78779: IFFALSE 78796
// _y := _y * - 1 ;
78781: LD_ADDR_VAR 0 7
78785: PUSH
78786: LD_VAR 0 7
78790: PUSH
78791: LD_INT 1
78793: NEG
78794: MUL
78795: ST_TO_ADDR
// result := [ _x , _y ] ;
78796: LD_ADDR_VAR 0 5
78800: PUSH
78801: LD_VAR 0 6
78805: PUSH
78806: LD_VAR 0 7
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: ST_TO_ADDR
// end ;
78815: LD_VAR 0 5
78819: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
78824: PPUSH
78825: PPUSH
// task := GetTaskList ( unit ) ;
78826: LD_ADDR_VAR 0 7
78830: PUSH
78831: LD_VAR 0 1
78835: PPUSH
78836: CALL_OW 437
78840: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78841: LD_VAR 0 7
78845: NOT
78846: PUSH
78847: LD_VAR 0 1
78851: PPUSH
78852: LD_VAR 0 2
78856: PPUSH
78857: CALL_OW 308
78861: NOT
78862: AND
78863: IFFALSE 78867
// exit ;
78865: GO 78985
// if IsInArea ( unit , area ) then
78867: LD_VAR 0 1
78871: PPUSH
78872: LD_VAR 0 2
78876: PPUSH
78877: CALL_OW 308
78881: IFFALSE 78899
// begin ComMoveToArea ( unit , goAway ) ;
78883: LD_VAR 0 1
78887: PPUSH
78888: LD_VAR 0 3
78892: PPUSH
78893: CALL_OW 113
// exit ;
78897: GO 78985
// end ; if task [ 1 ] [ 1 ] <> M then
78899: LD_VAR 0 7
78903: PUSH
78904: LD_INT 1
78906: ARRAY
78907: PUSH
78908: LD_INT 1
78910: ARRAY
78911: PUSH
78912: LD_STRING M
78914: NONEQUAL
78915: IFFALSE 78919
// exit ;
78917: GO 78985
// x := task [ 1 ] [ 2 ] ;
78919: LD_ADDR_VAR 0 5
78923: PUSH
78924: LD_VAR 0 7
78928: PUSH
78929: LD_INT 1
78931: ARRAY
78932: PUSH
78933: LD_INT 2
78935: ARRAY
78936: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78937: LD_ADDR_VAR 0 6
78941: PUSH
78942: LD_VAR 0 7
78946: PUSH
78947: LD_INT 1
78949: ARRAY
78950: PUSH
78951: LD_INT 3
78953: ARRAY
78954: ST_TO_ADDR
// if InArea ( x , y , area ) then
78955: LD_VAR 0 5
78959: PPUSH
78960: LD_VAR 0 6
78964: PPUSH
78965: LD_VAR 0 2
78969: PPUSH
78970: CALL_OW 309
78974: IFFALSE 78985
// ComStop ( unit ) ;
78976: LD_VAR 0 1
78980: PPUSH
78981: CALL_OW 141
// end ;
78985: LD_VAR 0 4
78989: RET
// export function Abs ( value ) ; begin
78990: LD_INT 0
78992: PPUSH
// result := value ;
78993: LD_ADDR_VAR 0 2
78997: PUSH
78998: LD_VAR 0 1
79002: ST_TO_ADDR
// if value < 0 then
79003: LD_VAR 0 1
79007: PUSH
79008: LD_INT 0
79010: LESS
79011: IFFALSE 79028
// result := value * - 1 ;
79013: LD_ADDR_VAR 0 2
79017: PUSH
79018: LD_VAR 0 1
79022: PUSH
79023: LD_INT 1
79025: NEG
79026: MUL
79027: ST_TO_ADDR
// end ;
79028: LD_VAR 0 2
79032: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79033: LD_INT 0
79035: PPUSH
79036: PPUSH
79037: PPUSH
79038: PPUSH
79039: PPUSH
79040: PPUSH
79041: PPUSH
79042: PPUSH
// if not unit or not building then
79043: LD_VAR 0 1
79047: NOT
79048: PUSH
79049: LD_VAR 0 2
79053: NOT
79054: OR
79055: IFFALSE 79059
// exit ;
79057: GO 79285
// x := GetX ( building ) ;
79059: LD_ADDR_VAR 0 4
79063: PUSH
79064: LD_VAR 0 2
79068: PPUSH
79069: CALL_OW 250
79073: ST_TO_ADDR
// y := GetY ( building ) ;
79074: LD_ADDR_VAR 0 6
79078: PUSH
79079: LD_VAR 0 2
79083: PPUSH
79084: CALL_OW 251
79088: ST_TO_ADDR
// d := GetDir ( building ) ;
79089: LD_ADDR_VAR 0 8
79093: PUSH
79094: LD_VAR 0 2
79098: PPUSH
79099: CALL_OW 254
79103: ST_TO_ADDR
// r := 4 ;
79104: LD_ADDR_VAR 0 9
79108: PUSH
79109: LD_INT 4
79111: ST_TO_ADDR
// for i := 1 to 5 do
79112: LD_ADDR_VAR 0 10
79116: PUSH
79117: DOUBLE
79118: LD_INT 1
79120: DEC
79121: ST_TO_ADDR
79122: LD_INT 5
79124: PUSH
79125: FOR_TO
79126: IFFALSE 79283
// begin _x := ShiftX ( x , d , r + i ) ;
79128: LD_ADDR_VAR 0 5
79132: PUSH
79133: LD_VAR 0 4
79137: PPUSH
79138: LD_VAR 0 8
79142: PPUSH
79143: LD_VAR 0 9
79147: PUSH
79148: LD_VAR 0 10
79152: PLUS
79153: PPUSH
79154: CALL_OW 272
79158: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79159: LD_ADDR_VAR 0 7
79163: PUSH
79164: LD_VAR 0 6
79168: PPUSH
79169: LD_VAR 0 8
79173: PPUSH
79174: LD_VAR 0 9
79178: PUSH
79179: LD_VAR 0 10
79183: PLUS
79184: PPUSH
79185: CALL_OW 273
79189: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79190: LD_VAR 0 5
79194: PPUSH
79195: LD_VAR 0 7
79199: PPUSH
79200: CALL_OW 488
79204: PUSH
79205: LD_VAR 0 5
79209: PPUSH
79210: LD_VAR 0 7
79214: PPUSH
79215: CALL_OW 428
79219: PPUSH
79220: CALL_OW 247
79224: PUSH
79225: LD_INT 3
79227: PUSH
79228: LD_INT 2
79230: PUSH
79231: EMPTY
79232: LIST
79233: LIST
79234: IN
79235: NOT
79236: AND
79237: IFFALSE 79281
// begin ComMoveXY ( unit , _x , _y ) ;
79239: LD_VAR 0 1
79243: PPUSH
79244: LD_VAR 0 5
79248: PPUSH
79249: LD_VAR 0 7
79253: PPUSH
79254: CALL_OW 111
// result := [ _x , _y ] ;
79258: LD_ADDR_VAR 0 3
79262: PUSH
79263: LD_VAR 0 5
79267: PUSH
79268: LD_VAR 0 7
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: ST_TO_ADDR
// exit ;
79277: POP
79278: POP
79279: GO 79285
// end ; end ;
79281: GO 79125
79283: POP
79284: POP
// end ;
79285: LD_VAR 0 3
79289: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79290: LD_INT 0
79292: PPUSH
79293: PPUSH
79294: PPUSH
// result := 0 ;
79295: LD_ADDR_VAR 0 3
79299: PUSH
79300: LD_INT 0
79302: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79303: LD_VAR 0 1
79307: PUSH
79308: LD_INT 0
79310: LESS
79311: PUSH
79312: LD_VAR 0 1
79316: PUSH
79317: LD_INT 8
79319: GREATER
79320: OR
79321: PUSH
79322: LD_VAR 0 2
79326: PUSH
79327: LD_INT 0
79329: LESS
79330: OR
79331: PUSH
79332: LD_VAR 0 2
79336: PUSH
79337: LD_INT 8
79339: GREATER
79340: OR
79341: IFFALSE 79345
// exit ;
79343: GO 79420
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79345: LD_ADDR_VAR 0 4
79349: PUSH
79350: LD_INT 22
79352: PUSH
79353: LD_VAR 0 2
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PPUSH
79362: CALL_OW 69
79366: PUSH
79367: FOR_IN
79368: IFFALSE 79418
// begin un := UnitShoot ( i ) ;
79370: LD_ADDR_VAR 0 5
79374: PUSH
79375: LD_VAR 0 4
79379: PPUSH
79380: CALL_OW 504
79384: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79385: LD_VAR 0 5
79389: PPUSH
79390: CALL_OW 255
79394: PUSH
79395: LD_VAR 0 1
79399: EQUAL
79400: IFFALSE 79416
// begin result := un ;
79402: LD_ADDR_VAR 0 3
79406: PUSH
79407: LD_VAR 0 5
79411: ST_TO_ADDR
// exit ;
79412: POP
79413: POP
79414: GO 79420
// end ; end ;
79416: GO 79367
79418: POP
79419: POP
// end ;
79420: LD_VAR 0 3
79424: RET
// export function GetCargoBay ( units ) ; begin
79425: LD_INT 0
79427: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79428: LD_ADDR_VAR 0 2
79432: PUSH
79433: LD_VAR 0 1
79437: PPUSH
79438: LD_INT 2
79440: PUSH
79441: LD_INT 34
79443: PUSH
79444: LD_INT 12
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PUSH
79451: LD_INT 34
79453: PUSH
79454: LD_INT 51
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 34
79463: PUSH
79464: LD_INT 32
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: PUSH
79471: LD_INT 34
79473: PUSH
79474: LD_EXP 52
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: PPUSH
79490: CALL_OW 72
79494: ST_TO_ADDR
// end ; end_of_file
79495: LD_VAR 0 2
79499: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79500: LD_VAR 0 1
79504: PUSH
79505: LD_INT 200
79507: DOUBLE
79508: GREATEREQUAL
79509: IFFALSE 79517
79511: LD_INT 299
79513: DOUBLE
79514: LESSEQUAL
79515: IFTRUE 79519
79517: GO 79551
79519: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79520: LD_VAR 0 1
79524: PPUSH
79525: LD_VAR 0 2
79529: PPUSH
79530: LD_VAR 0 3
79534: PPUSH
79535: LD_VAR 0 4
79539: PPUSH
79540: LD_VAR 0 5
79544: PPUSH
79545: CALL 37961 0 5
79549: GO 79628
79551: LD_INT 300
79553: DOUBLE
79554: GREATEREQUAL
79555: IFFALSE 79563
79557: LD_INT 399
79559: DOUBLE
79560: LESSEQUAL
79561: IFTRUE 79565
79563: GO 79627
79565: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79566: LD_VAR 0 1
79570: PPUSH
79571: LD_VAR 0 2
79575: PPUSH
79576: LD_VAR 0 3
79580: PPUSH
79581: LD_VAR 0 4
79585: PPUSH
79586: LD_VAR 0 5
79590: PPUSH
79591: LD_VAR 0 6
79595: PPUSH
79596: LD_VAR 0 7
79600: PPUSH
79601: LD_VAR 0 8
79605: PPUSH
79606: LD_VAR 0 9
79610: PPUSH
79611: LD_VAR 0 10
79615: PPUSH
79616: LD_VAR 0 11
79620: PPUSH
79621: CALL 35849 0 11
79625: GO 79628
79627: POP
// end ;
79628: PPOPN 11
79630: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79631: LD_VAR 0 1
79635: PPUSH
79636: LD_VAR 0 2
79640: PPUSH
79641: LD_VAR 0 3
79645: PPUSH
79646: LD_VAR 0 4
79650: PPUSH
79651: LD_VAR 0 5
79655: PPUSH
79656: CALL 37943 0 5
// end ; end_of_file
79660: PPOPN 5
79662: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79663: LD_VAR 0 1
79667: PPUSH
79668: LD_VAR 0 2
79672: PPUSH
79673: LD_VAR 0 3
79677: PPUSH
79678: LD_VAR 0 4
79682: PPUSH
79683: LD_VAR 0 5
79687: PPUSH
79688: LD_VAR 0 6
79692: PPUSH
79693: CALL 24657 0 6
// end ;
79697: PPOPN 6
79699: END
