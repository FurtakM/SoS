// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7932 0 0
// CreateNature ;
  57: CALL 21455 0 0
// PrepareRussian ;
  61: CALL 5816 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11251 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 43279 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 43279 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 43279 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 43279 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 43279 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 43279 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 43279 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 43279 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 43279 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 43279 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 43279 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side := 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation := 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// hc_class := class_engineer ;
2618: LD_ADDR_OWVAR 28
2622: PUSH
2623: LD_INT 2
2625: ST_TO_ADDR
// hc_sex := sex_male ;
2626: LD_ADDR_OWVAR 27
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2634: LD_ADDR_OWVAR 33
2638: PUSH
2639: LD_STRING SecondCharsGal
2641: ST_TO_ADDR
// hc_face_number := 52 ;
2642: LD_ADDR_OWVAR 34
2646: PUSH
2647: LD_INT 52
2649: ST_TO_ADDR
// hc_name := Craig Brown ;
2650: LD_ADDR_OWVAR 26
2654: PUSH
2655: LD_STRING Craig Brown
2657: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2658: LD_ADDR_OWVAR 29
2662: PUSH
2663: LD_INT 10
2665: PUSH
2666: LD_INT 10
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2673: LD_ADDR_OWVAR 30
2677: PUSH
2678: LD_INT 0
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2696: LD_ADDR_OWVAR 31
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: LD_INT 0
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2719: LD_ADDR_EXP 18
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// hc_class := class_soldier ;
2729: LD_ADDR_OWVAR 28
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// hc_sex := sex_female ;
2737: LD_ADDR_OWVAR 27
2741: PUSH
2742: LD_INT 2
2744: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2745: LD_ADDR_OWVAR 33
2749: PUSH
2750: LD_STRING SecondCharsGal
2752: ST_TO_ADDR
// hc_face_number := 42 ;
2753: LD_ADDR_OWVAR 34
2757: PUSH
2758: LD_INT 42
2760: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2761: LD_ADDR_OWVAR 29
2765: PUSH
2766: LD_INT 11
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2776: LD_ADDR_OWVAR 26
2780: PUSH
2781: LD_STRING Ingrid Jonsson
2783: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2784: LD_ADDR_OWVAR 30
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: LD_INT 1
2794: PUSH
2795: LD_INT 0
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2807: LD_ADDR_OWVAR 31
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: LD_INT 0
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: ST_TO_ADDR
// HarrSupp2 := CreateHuman ;
2830: LD_ADDR_EXP 19
2834: PUSH
2835: CALL_OW 44
2839: ST_TO_ADDR
// vc_engine := engine_combustion ;
2840: LD_ADDR_OWVAR 39
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// vc_control := control_manual ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 1
2855: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 5
2863: PUSH
2864: LD_INT 5
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PUSH
2879: LD_OWVAR 67
2883: ARRAY
2884: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2885: LD_ADDR_OWVAR 37
2889: PUSH
2890: LD_INT 2
2892: ST_TO_ADDR
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 3
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_VAR 0 5
2912: PPUSH
2913: CALL_OW 233
// repeat wait ( 10 ) ;
2917: LD_INT 10
2919: PPUSH
2920: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 49
2941: IFFALSE 2917
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2943: LD_EXP 18
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: CALL_OW 52
// SetFuel ( veh , 50 ) ;
2957: LD_VAR 0 3
2961: PPUSH
2962: LD_INT 50
2964: PPUSH
2965: CALL_OW 240
// uc_side := 1 ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// uc_nation := 1 ;
2977: LD_ADDR_OWVAR 21
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2985: LD_ADDR_OWVAR 40
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_OWVAR 67
3012: ARRAY
3013: ST_TO_ADDR
// veh := CreateVehicle ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: CALL_OW 45
3023: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_VAR 0 5
3033: PPUSH
3034: CALL_OW 233
// repeat wait ( 10 ) ;
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
3045: LD_VAR 0 3
3049: PPUSH
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
3062: IFFALSE 3038
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3064: LD_EXP 19
3068: PPUSH
3069: LD_VAR 0 3
3073: PPUSH
3074: CALL_OW 52
// SetFuel ( veh , 50 ) ;
3078: LD_VAR 0 3
3082: PPUSH
3083: LD_INT 50
3085: PPUSH
3086: CALL_OW 240
// end ;
3090: LD_VAR 0 1
3094: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3095: LD_INT 0
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 23
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 26
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 69
3145: PUSH
3146: LD_EXP 3
3150: PUSH
3151: LD_EXP 4
3155: PUSH
3156: LD_EXP 8
3160: PUSH
3161: LD_EXP 9
3165: PUSH
3166: LD_EXP 5
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: DIFF
3178: ST_TO_ADDR
// for i in _tmp do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_VAR 0 4
3188: PUSH
3189: FOR_IN
3190: IFFALSE 3231
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 32
3199: PPUSH
3200: CALL_OW 308
3204: PUSH
3205: LD_VAR 0 2
3209: PPUSH
3210: CALL_OW 302
3214: AND
3215: IFFALSE 3229
// begin tmp := i ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_VAR 0 2
3226: ST_TO_ADDR
// break ;
3227: GO 3231
// end ;
3229: GO 3189
3231: POP
3232: POP
// if not tmp then
3233: LD_VAR 0 3
3237: NOT
3238: IFFALSE 3250
// tmp := JMM ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_EXP 1
3249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3250: LD_INT 35
3252: PPUSH
3253: CALL_OW 67
// if IsDead ( tmp ) then
3257: LD_VAR 0 3
3261: PPUSH
3262: CALL_OW 301
3266: IFFALSE 3278
// tmp := JMM ;
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: LD_EXP 1
3277: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3278: LD_INT 81
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 91
3290: PUSH
3291: LD_VAR 0 3
3295: PUSH
3296: LD_INT 15
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PPUSH
3308: CALL_OW 69
3312: NOT
3313: PUSH
3314: LD_EXP 27
3318: PUSH
3319: LD_INT 6300
3321: LESS
3322: OR
3323: IFFALSE 3250
// blockSpawn := 1 ;
3325: LD_ADDR_EXP 30
3329: PUSH
3330: LD_INT 1
3332: ST_TO_ADDR
// uc_side := 4 ;
3333: LD_ADDR_OWVAR 20
3337: PUSH
3338: LD_INT 4
3340: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3341: LD_ADDR_EXP 16
3345: PUSH
3346: LD_STRING Joan
3348: PPUSH
3349: LD_INT 0
3351: PPUSH
3352: LD_EXP 44
3356: PPUSH
3357: CALL 43279 0 3
3361: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3362: LD_EXP 16
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 250
3376: PPUSH
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 251
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3397: LD_EXP 16
3401: PPUSH
3402: LD_INT 250
3404: PPUSH
3405: CALL_OW 234
// InGameOn ;
3409: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3413: LD_EXP 16
3417: PPUSH
3418: CALL_OW 87
// wait ( 0 0$2 ) ;
3422: LD_INT 70
3424: PPUSH
3425: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: CALL_OW 122
// wait ( 0 0$1 ) ;
3447: LD_INT 35
3449: PPUSH
3450: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_EXP 16
3463: PPUSH
3464: CALL_OW 112
// wait ( 0 0$2 ) ;
3468: LD_INT 70
3470: PPUSH
3471: CALL_OW 67
// DialogueOn ;
3475: CALL_OW 6
// if tmp = JMM then
3479: LD_VAR 0 3
3483: PUSH
3484: LD_EXP 1
3488: EQUAL
3489: IFFALSE 3638
// begin ComTurnUnit ( JMM , Joan ) ;
3491: LD_EXP 1
3495: PPUSH
3496: LD_EXP 16
3500: PPUSH
3501: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING D5b-JMM-1
3512: PPUSH
3513: CALL_OW 88
// DialogueOff ;
3517: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3521: LD_EXP 16
3525: PPUSH
3526: LD_INT 500
3528: PPUSH
3529: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3533: LD_EXP 16
3537: PPUSH
3538: LD_EXP 1
3542: PPUSH
3543: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 119
// wait ( 0 0$1 ) ;
3561: LD_INT 35
3563: PPUSH
3564: CALL_OW 67
// DialogueOn ;
3568: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3572: LD_EXP 16
3576: PPUSH
3577: LD_STRING D5b-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D5b-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3596: LD_EXP 16
3600: PPUSH
3601: LD_STRING D5b-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D5b-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3620: LD_EXP 16
3624: PPUSH
3625: LD_STRING D5b-Joan-3
3627: PPUSH
3628: CALL_OW 88
// DialogueOff ;
3632: CALL_OW 7
// end else
3636: GO 4104
// begin ComTurnUnit ( tmp , Joan ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3652: LD_VAR 0 3
3656: PPUSH
3657: LD_STRING D5a-Sol1-1
3659: PPUSH
3660: CALL_OW 88
// DialogueOff ;
3664: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3668: LD_EXP 16
3672: PPUSH
3673: LD_INT 500
3675: PPUSH
3676: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3680: LD_EXP 16
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 119
// wait ( 0 0$1 ) ;
3708: LD_INT 35
3710: PPUSH
3711: CALL_OW 67
// DialogueOn ;
3715: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_STRING D5a-Joan-1
3726: PPUSH
3727: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_STRING D5a-Sol1-2
3738: PPUSH
3739: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3743: LD_EXP 16
3747: PPUSH
3748: LD_STRING D5a-Joan-2
3750: PPUSH
3751: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3755: LD_VAR 0 3
3759: PPUSH
3760: LD_STRING D5a-Sol1-3
3762: PPUSH
3763: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3767: LD_EXP 16
3771: PPUSH
3772: LD_STRING D5a-Joan-3
3774: PPUSH
3775: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_STRING D5a-Sol1-4
3786: PPUSH
3787: CALL_OW 88
// DialogueOff ;
3791: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3795: LD_EXP 1
3799: PPUSH
3800: LD_EXP 16
3804: PPUSH
3805: CALL_OW 296
3809: PUSH
3810: LD_INT 10
3812: GREATER
3813: IFFALSE 3896
// begin InGameOff ;
3815: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3819: LD_EXP 16
3823: PPUSH
3824: LD_VAR 0 3
3828: PPUSH
3829: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3840: LD_EXP 1
3844: PPUSH
3845: LD_EXP 16
3849: PPUSH
3850: CALL_OW 296
3854: PUSH
3855: LD_INT 8
3857: LESS
3858: PUSH
3859: LD_EXP 16
3863: PPUSH
3864: CALL_OW 301
3868: OR
3869: IFFALSE 3833
// if IsDead ( Joan ) then
3871: LD_EXP 16
3875: PPUSH
3876: CALL_OW 301
3880: IFFALSE 3892
// begin blockSpawn := false ;
3882: LD_ADDR_EXP 30
3886: PUSH
3887: LD_INT 0
3889: ST_TO_ADDR
// exit ;
3890: GO 4235
// end ; InGameOn ;
3892: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3896: LD_EXP 1
3900: PUSH
3901: LD_INT 55
3903: PUSH
3904: EMPTY
3905: LIST
3906: PPUSH
3907: CALL_OW 69
3911: IN
3912: IFFALSE 3935
// begin ComMoveUnit ( JMM , Joan ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_EXP 16
3923: PPUSH
3924: CALL_OW 112
// wait ( 0 0$05 ) ;
3928: LD_INT 175
3930: PPUSH
3931: CALL_OW 67
// end ; ComExit ( JMM ) ;
3935: LD_EXP 1
3939: PPUSH
3940: CALL 81472 0 1
// wait ( 0 0$1 ) ;
3944: LD_INT 35
3946: PPUSH
3947: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3951: LD_INT 35
3953: PPUSH
3954: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3958: LD_EXP 16
3962: PUSH
3963: LD_VAR 0 3
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: LD_EXP 1
3976: PPUSH
3977: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 1
3990: PPUSH
3991: CALL_OW 296
3995: PUSH
3996: LD_INT 5
3998: LESS
3999: IFFALSE 3951
// ComTurnUnit ( Joan , JMM ) ;
4001: LD_EXP 16
4005: PPUSH
4006: LD_EXP 1
4010: PPUSH
4011: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4015: LD_EXP 1
4019: PPUSH
4020: LD_EXP 16
4024: PPUSH
4025: CALL_OW 119
// wait ( 0 0$1 ) ;
4029: LD_INT 35
4031: PPUSH
4032: CALL_OW 67
// DialogueOn ;
4036: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4040: LD_EXP 16
4044: PPUSH
4045: LD_STRING D5a-Joan-4
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4052: LD_EXP 1
4056: PPUSH
4057: LD_STRING D5a-JMM-4
4059: PPUSH
4060: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4064: LD_EXP 16
4068: PPUSH
4069: LD_STRING D5a-Joan-5
4071: PPUSH
4072: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4076: LD_EXP 1
4080: PPUSH
4081: LD_STRING D5a-JMM-5
4083: PPUSH
4084: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4088: LD_EXP 16
4092: PPUSH
4093: LD_STRING D5a-Joan-6
4095: PPUSH
4096: CALL_OW 88
// DialogueOff ;
4100: CALL_OW 7
// end ; DialogueOn ;
4104: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4108: LD_EXP 1
4112: PPUSH
4113: LD_STRING D6-JMM-1
4115: PPUSH
4116: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4120: LD_EXP 16
4124: PPUSH
4125: LD_STRING D6-Joan-1
4127: PPUSH
4128: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4132: LD_EXP 1
4136: PPUSH
4137: LD_STRING D6-JMM-2
4139: PPUSH
4140: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4144: LD_EXP 16
4148: PPUSH
4149: LD_STRING D6-Joan-2
4151: PPUSH
4152: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4156: LD_EXP 1
4160: PPUSH
4161: LD_STRING D6-JMM-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4168: LD_EXP 16
4172: PPUSH
4173: LD_STRING D6-Joan-3
4175: PPUSH
4176: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING D6-JMM-4
4187: PPUSH
4188: CALL_OW 88
// DialogueOff ;
4192: CALL_OW 7
// InGameOff ;
4196: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4200: LD_EXP 16
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4212: LD_STRING MJ
4214: PPUSH
4215: CALL_OW 337
// joanStatus = 1 ;
4219: LD_ADDR_EXP 17
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// blockSpawn = 0 ;
4227: LD_ADDR_EXP 30
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4240: LD_INT 0
4242: PPUSH
4243: PPUSH
// if not number or number > 8 then
4244: LD_VAR 0 1
4248: NOT
4249: PUSH
4250: LD_VAR 0 1
4254: PUSH
4255: LD_INT 8
4257: GREATER
4258: OR
4259: IFFALSE 4263
// exit ;
4261: GO 5811
// repeat wait ( 0 0$7 ) ;
4263: LD_INT 245
4265: PPUSH
4266: CALL_OW 67
// until blockSpawn = 0 ;
4270: LD_EXP 30
4274: PUSH
4275: LD_INT 0
4277: EQUAL
4278: IFFALSE 4263
// uc_side := 1 ;
4280: LD_ADDR_OWVAR 20
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// uc_nation := 1 ;
4288: LD_ADDR_OWVAR 21
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// InitHc ;
4296: CALL_OW 19
// if number = 1 then
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: EQUAL
4308: IFFALSE 4484
// begin hc_class := 3 ;
4310: LD_ADDR_OWVAR 28
4314: PUSH
4315: LD_INT 3
4317: ST_TO_ADDR
// hc_sex := sex_male ;
4318: LD_ADDR_OWVAR 27
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4326: LD_ADDR_OWVAR 33
4330: PUSH
4331: LD_STRING SecondCharsGal
4333: ST_TO_ADDR
// hc_face_number := 55 ;
4334: LD_ADDR_OWVAR 34
4338: PUSH
4339: LD_INT 55
4341: ST_TO_ADDR
// hc_name := George McCarthy ;
4342: LD_ADDR_OWVAR 26
4346: PUSH
4347: LD_STRING George McCarthy
4349: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4350: LD_ADDR_OWVAR 29
4354: PUSH
4355: LD_INT 11
4357: PUSH
4358: LD_INT 10
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4365: LD_ADDR_OWVAR 30
4369: PUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4388: LD_ADDR_OWVAR 31
4392: PUSH
4393: LD_INT 0
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: ST_TO_ADDR
// un = CreateHuman ;
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: CALL_OW 44
4420: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: LD_INT 23
4428: PPUSH
4429: LD_INT 1
4431: PPUSH
4432: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4436: LD_VAR 0 3
4440: PPUSH
4441: CALL_OW 87
// wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// DialogueOn ;
4452: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_STRING D11d-Sol4-1
4463: PPUSH
4464: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4468: LD_EXP 1
4472: PPUSH
4473: LD_STRING D11d-JMM-1
4475: PPUSH
4476: CALL_OW 88
// DialogueOff ;
4480: CALL_OW 7
// end ; if number = 2 then
4484: LD_VAR 0 1
4488: PUSH
4489: LD_INT 2
4491: EQUAL
4492: IFFALSE 4668
// begin hc_class := 1 ;
4494: LD_ADDR_OWVAR 28
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// hc_sex := sex_male ;
4502: LD_ADDR_OWVAR 27
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4510: LD_ADDR_OWVAR 33
4514: PUSH
4515: LD_STRING AmGalRemake
4517: ST_TO_ADDR
// hc_face_number := 7 ;
4518: LD_ADDR_OWVAR 34
4522: PUSH
4523: LD_INT 7
4525: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING Bobby Jordan
4533: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4534: LD_ADDR_OWVAR 29
4538: PUSH
4539: LD_INT 9
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4549: LD_ADDR_OWVAR 30
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4572: LD_ADDR_OWVAR 31
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: ST_TO_ADDR
// un = CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4605: LD_VAR 0 3
4609: PPUSH
4610: LD_INT 24
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 49
// wait ( 0 0$1 ) ;
4620: LD_INT 35
4622: PPUSH
4623: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: CALL_OW 87
// DialogueOn ;
4636: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4640: LD_VAR 0 3
4644: PPUSH
4645: LD_STRING D11b-Sol3-1
4647: PPUSH
4648: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4652: LD_EXP 1
4656: PPUSH
4657: LD_STRING D11b-JMM-1
4659: PPUSH
4660: CALL_OW 88
// DialogueOff ;
4664: CALL_OW 7
// end ; if number = 3 then
4668: LD_VAR 0 1
4672: PUSH
4673: LD_INT 3
4675: EQUAL
4676: IFFALSE 4840
// begin hc_class := 1 ;
4678: LD_ADDR_OWVAR 28
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// hc_sex := sex_male ;
4686: LD_ADDR_OWVAR 27
4690: PUSH
4691: LD_INT 1
4693: ST_TO_ADDR
// hc_gallery := DJ ;
4694: LD_ADDR_OWVAR 33
4698: PUSH
4699: LD_STRING DJ
4701: ST_TO_ADDR
// hc_face_number := 1 ;
4702: LD_ADDR_OWVAR 34
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// hc_name := Darius Dajay ;
4710: LD_ADDR_OWVAR 26
4714: PUSH
4715: LD_STRING Darius Dajay
4717: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4718: LD_ADDR_OWVAR 29
4722: PUSH
4723: LD_INT 11
4725: PUSH
4726: LD_INT 11
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4733: LD_ADDR_OWVAR 30
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4756: LD_ADDR_OWVAR 31
4760: PUSH
4761: LD_INT 5
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 0
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: ST_TO_ADDR
// un = CreateHuman ;
4779: LD_ADDR_VAR 0 3
4783: PUSH
4784: CALL_OW 44
4788: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 25
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4804: LD_VAR 0 3
4808: PPUSH
4809: CALL_OW 87
// wait ( 0 0$1 ) ;
4813: LD_INT 35
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_STRING D11f-Sol5-1
4831: PPUSH
4832: CALL_OW 88
// DialogueOff ;
4836: CALL_OW 7
// end ; if number = 4 then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 4
4847: EQUAL
4848: IFFALSE 4985
// begin hc_class := 2 ;
4850: LD_ADDR_OWVAR 28
4854: PUSH
4855: LD_INT 2
4857: ST_TO_ADDR
// hc_sex := sex_female ;
4858: LD_ADDR_OWVAR 27
4862: PUSH
4863: LD_INT 2
4865: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4866: LD_ADDR_OWVAR 33
4870: PUSH
4871: LD_STRING SecondCharsGal
4873: ST_TO_ADDR
// hc_face_number := 46 ;
4874: LD_ADDR_OWVAR 34
4878: PUSH
4879: LD_INT 46
4881: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4882: LD_ADDR_OWVAR 26
4886: PUSH
4887: LD_STRING Sylvia Creak
4889: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4890: LD_ADDR_OWVAR 29
4894: PUSH
4895: LD_INT 10
4897: PUSH
4898: LD_INT 9
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4905: LD_ADDR_OWVAR 30
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4928: LD_ADDR_OWVAR 31
4932: PUSH
4933: LD_INT 1
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 1
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
// un = CreateHuman ;
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: CALL_OW 44
4960: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_INT 26
4968: PPUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 87
// end ; if number = 5 then
4985: LD_VAR 0 1
4989: PUSH
4990: LD_INT 5
4992: EQUAL
4993: IFFALSE 5169
// begin hc_class := 1 ;
4995: LD_ADDR_OWVAR 28
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// hc_sex := sex_female ;
5003: LD_ADDR_OWVAR 27
5007: PUSH
5008: LD_INT 2
5010: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5011: LD_ADDR_OWVAR 33
5015: PUSH
5016: LD_STRING SecondCharsGal
5018: ST_TO_ADDR
// hc_face_number := 37 ;
5019: LD_ADDR_OWVAR 34
5023: PUSH
5024: LD_INT 37
5026: ST_TO_ADDR
// hc_name := Malena Johnson ;
5027: LD_ADDR_OWVAR 26
5031: PUSH
5032: LD_STRING Malena Johnson
5034: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5035: LD_ADDR_OWVAR 29
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5050: LD_ADDR_OWVAR 30
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 2
5060: PUSH
5061: LD_INT 0
5063: PUSH
5064: LD_INT 0
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5073: LD_ADDR_OWVAR 31
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 2
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// un = CreateHuman ;
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: CALL_OW 44
5105: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5106: LD_VAR 0 3
5110: PPUSH
5111: LD_INT 27
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5121: LD_VAR 0 3
5125: PPUSH
5126: CALL_OW 87
// wait ( 0 0$1 ) ;
5130: LD_INT 35
5132: PPUSH
5133: CALL_OW 67
// DialogueOn ;
5137: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_STRING D11c-FSol3-1
5148: PPUSH
5149: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5153: LD_EXP 1
5157: PPUSH
5158: LD_STRING D11c-JMM-1
5160: PPUSH
5161: CALL_OW 88
// DialogueOff ;
5165: CALL_OW 7
// end ; if number = 6 then
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 6
5176: EQUAL
5177: IFFALSE 5351
// begin hc_class := 1 ;
5179: LD_ADDR_OWVAR 28
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// hc_sex := sex_male ;
5187: LD_ADDR_OWVAR 27
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5195: LD_ADDR_OWVAR 33
5199: PUSH
5200: LD_STRING AmGalRemake
5202: ST_TO_ADDR
// hc_face_number := 1 ;
5203: LD_ADDR_OWVAR 34
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// hc_name := Charles Brown ;
5211: LD_ADDR_OWVAR 26
5215: PUSH
5216: LD_STRING Charles Brown
5218: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5219: LD_ADDR_OWVAR 29
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 11
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5234: LD_ADDR_OWVAR 30
5238: PUSH
5239: LD_INT 3
5241: PUSH
5242: LD_INT 0
5244: PUSH
5245: LD_INT 0
5247: PUSH
5248: LD_INT 0
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5257: LD_ADDR_OWVAR 31
5261: PUSH
5262: LD_INT 3
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: ST_TO_ADDR
// un = CreateHuman ;
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: CALL_OW 44
5289: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5290: LD_VAR 0 3
5294: PPUSH
5295: LD_INT 28
5297: PPUSH
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5305: LD_VAR 0 3
5309: PPUSH
5310: CALL_OW 87
// wait ( 0 0$1 ) ;
5314: LD_INT 35
5316: PPUSH
5317: CALL_OW 67
// DialogueOn ;
5321: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: LD_STRING D4-Sol1-5
5332: PPUSH
5333: CALL_OW 88
// DialogueOff ;
5337: CALL_OW 7
// tempCharles = un ;
5341: LD_ADDR_EXP 14
5345: PUSH
5346: LD_VAR 0 3
5350: ST_TO_ADDR
// end ; if number = 7 then
5351: LD_VAR 0 1
5355: PUSH
5356: LD_INT 7
5358: EQUAL
5359: IFFALSE 5631
// begin hc_class := 1 ;
5361: LD_ADDR_OWVAR 28
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// hc_sex := sex_female ;
5369: LD_ADDR_OWVAR 27
5373: PUSH
5374: LD_INT 2
5376: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5377: LD_ADDR_OWVAR 33
5381: PUSH
5382: LD_STRING AmGalRemake
5384: ST_TO_ADDR
// hc_face_number := 2 ;
5385: LD_ADDR_OWVAR 34
5389: PUSH
5390: LD_INT 2
5392: ST_TO_ADDR
// hc_name := Johanna Holland ;
5393: LD_ADDR_OWVAR 26
5397: PUSH
5398: LD_STRING Johanna Holland
5400: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5401: LD_ADDR_OWVAR 29
5405: PUSH
5406: LD_INT 10
5408: PUSH
5409: LD_INT 10
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5416: LD_ADDR_OWVAR 30
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: LD_INT 0
5429: PUSH
5430: LD_INT 1
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5439: LD_ADDR_OWVAR 31
5443: PUSH
5444: LD_INT 3
5446: PUSH
5447: LD_INT 0
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: ST_TO_ADDR
// un = CreateHuman ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: CALL_OW 44
5471: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5472: LD_VAR 0 3
5476: PPUSH
5477: LD_INT 29
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 87
// wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5503: LD_INT 30
5505: PPUSH
5506: LD_INT 22
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 70
5520: IFFALSE 5631
// begin DialogueOn ;
5522: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 250
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 251
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_INT 15
5551: NEG
5552: PPUSH
5553: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 250
5566: PPUSH
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 251
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_STRING D11a-FSol2-1
5591: PPUSH
5592: CALL_OW 88
// DialogueOff ;
5596: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5600: LD_INT 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 471
// wait ( 0 0$2 ) ;
5612: LD_INT 70
5614: PPUSH
5615: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5619: LD_INT 3
5621: PPUSH
5622: LD_VAR 0 3
5626: PPUSH
5627: CALL_OW 472
// end ; end ; if number = 8 then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_INT 8
5638: EQUAL
5639: IFFALSE 5795
// begin hc_class := 1 ;
5641: LD_ADDR_OWVAR 28
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// hc_sex := sex_female ;
5649: LD_ADDR_OWVAR 27
5653: PUSH
5654: LD_INT 2
5656: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5657: LD_ADDR_OWVAR 33
5661: PUSH
5662: LD_STRING SecondCharsGal
5664: ST_TO_ADDR
// hc_face_number := 45 ;
5665: LD_ADDR_OWVAR 34
5669: PUSH
5670: LD_INT 45
5672: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5673: LD_ADDR_OWVAR 26
5677: PUSH
5678: LD_STRING Margherite Simpson
5680: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5681: LD_ADDR_OWVAR 29
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 10
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5696: LD_ADDR_OWVAR 30
5700: PUSH
5701: LD_INT 1
5703: PUSH
5704: LD_INT 2
5706: PUSH
5707: LD_INT 0
5709: PUSH
5710: LD_INT 0
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5719: LD_ADDR_OWVAR 31
5723: PUSH
5724: LD_INT 2
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: ST_TO_ADDR
// un = CreateHuman ;
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: CALL_OW 44
5751: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5752: LD_VAR 0 3
5756: PPUSH
5757: LD_INT 33
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5767: LD_VAR 0 3
5771: PPUSH
5772: CALL_OW 87
// wait ( 0 0$1 ) ;
5776: LD_INT 35
5778: PPUSH
5779: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_STRING D11e-FSol4-1
5790: PPUSH
5791: CALL_OW 88
// end ; arrivals := arrivals union un ;
5795: LD_ADDR_EXP 45
5799: PUSH
5800: LD_EXP 45
5804: PUSH
5805: LD_VAR 0 3
5809: UNION
5810: ST_TO_ADDR
// end ; end_of_file
5811: LD_VAR 0 2
5815: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
// ruAttackers := [ ] ;
5820: LD_ADDR_EXP 48
5824: PUSH
5825: EMPTY
5826: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5827: LD_ADDR_EXP 49
5831: PUSH
5832: EMPTY
5833: ST_TO_ADDR
// if Difficulty < 3 then
5834: LD_OWVAR 67
5838: PUSH
5839: LD_INT 3
5841: LESS
5842: IFFALSE 5859
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5844: LD_INT 130
5846: PPUSH
5847: LD_INT 81
5849: PPUSH
5850: CALL_OW 428
5854: PPUSH
5855: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5859: LD_INT 3
5861: PPUSH
5862: LD_INT 3
5864: PPUSH
5865: LD_INT 2
5867: PPUSH
5868: LD_EXP 35
5872: PPUSH
5873: LD_EXP 36
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: LD_INT 4
5888: PPUSH
5889: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5893: LD_INT 3
5895: PPUSH
5896: LD_INT 3
5898: PPUSH
5899: LD_INT 8
5901: PPUSH
5902: LD_EXP 35
5906: PPUSH
5907: LD_EXP 36
5911: PPUSH
5912: CALL_OW 12
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 4
5922: PPUSH
5923: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5927: LD_INT 3
5929: PPUSH
5930: LD_INT 3
5932: PPUSH
5933: LD_INT 67
5935: PPUSH
5936: LD_EXP 35
5940: PPUSH
5941: LD_EXP 36
5945: PPUSH
5946: CALL_OW 12
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 2
5956: PPUSH
5957: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 21
5969: PPUSH
5970: LD_EXP 35
5974: PPUSH
5975: LD_EXP 36
5979: PPUSH
5980: CALL_OW 12
5984: PPUSH
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 6
5990: PPUSH
5991: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5995: LD_INT 3
5997: PPUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 17
6003: PPUSH
6004: LD_EXP 35
6008: PPUSH
6009: LD_EXP 36
6013: PPUSH
6014: CALL_OW 12
6018: PPUSH
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 6
6024: PPUSH
6025: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6029: LD_INT 3
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: LD_INT 32
6037: PPUSH
6038: LD_EXP 35
6042: PPUSH
6043: LD_EXP 36
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: LD_INT 4
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL 7686 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6063: LD_ADDR_VAR 0 2
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 30
6090: PUSH
6091: LD_INT 32
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 69
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6149
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 3
6116: PPUSH
6117: LD_VAR 0 2
6121: PPUSH
6122: LD_EXP 35
6126: PPUSH
6127: LD_EXP 36
6131: PPUSH
6132: CALL_OW 12
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL 7686 0 6
6147: GO 6108
6149: POP
6150: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 21
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 30
6178: PUSH
6179: LD_INT 31
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: PUSH
6196: FOR_IN
6197: IFFALSE 6225
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6199: LD_EXP 35
6203: PPUSH
6204: LD_EXP 36
6208: PPUSH
6209: CALL_OW 12
6213: PPUSH
6214: LD_VAR 0 2
6218: PPUSH
6219: CALL 7796 0 2
6223: GO 6196
6225: POP
6226: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6227: LD_INT 3
6229: PPUSH
6230: LD_INT 32
6232: PPUSH
6233: LD_INT 3
6235: PPUSH
6236: CALL 8075 0 3
// end ;
6240: LD_VAR 0 1
6244: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 3
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 32
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 69
6273: IFFALSE 6350
6275: GO 6277
6277: DISABLE
6278: LD_INT 0
6280: PPUSH
// begin enable ;
6281: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6282: LD_ADDR_VAR 0 1
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 32
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: PUSH
6316: FOR_IN
6317: IFFALSE 6348
// if GetFuel ( i ) < 3 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 261
6328: PUSH
6329: LD_INT 3
6331: LESS
6332: IFFALSE 6346
// SetFuel ( i , 3 ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 3
6341: PPUSH
6342: CALL_OW 240
6346: GO 6316
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6353: LD_OWVAR 67
6357: PUSH
6358: LD_INT 1
6360: GREATER
6361: IFFALSE 6930
6363: GO 6365
6365: DISABLE
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// begin uc_side := 3 ;
6372: LD_ADDR_OWVAR 20
6376: PUSH
6377: LD_INT 3
6379: ST_TO_ADDR
// uc_nation := 3 ;
6380: LD_ADDR_OWVAR 21
6384: PUSH
6385: LD_INT 3
6387: ST_TO_ADDR
// for i := 1 to 2 do
6388: LD_ADDR_VAR 0 1
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 2
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6516
// begin InitHC_All ( ) ;
6404: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: LD_INT 6
6419: PUSH
6420: LD_INT 6
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: LD_OWVAR 67
6433: ARRAY
6434: PPUSH
6435: CALL_OW 381
// un := CreateHuman ;
6439: LD_ADDR_VAR 0 2
6443: PUSH
6444: CALL_OW 44
6448: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_INT 91
6456: PPUSH
6457: LD_INT 87
6459: PPUSH
6460: LD_INT 3
6462: PPUSH
6463: LD_INT 0
6465: PPUSH
6466: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6470: LD_ADDR_EXP 49
6474: PUSH
6475: LD_EXP 49
6479: PPUSH
6480: LD_EXP 49
6484: PUSH
6485: LD_INT 1
6487: PLUS
6488: PPUSH
6489: LD_VAR 0 2
6493: PPUSH
6494: CALL_OW 1
6498: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_INT 46
6506: PPUSH
6507: LD_INT 78
6509: PPUSH
6510: CALL_OW 114
// end ;
6514: GO 6401
6516: POP
6517: POP
// if Difficulty > 2 then
6518: LD_OWVAR 67
6522: PUSH
6523: LD_INT 2
6525: GREATER
6526: IFFALSE 6658
// begin for i := 1 to 3 do
6528: LD_ADDR_VAR 0 1
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 3
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6656
// begin InitHC_All ( ) ;
6544: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6548: LD_INT 0
6550: PPUSH
6551: LD_INT 4
6553: PUSH
6554: LD_INT 5
6556: PUSH
6557: LD_INT 6
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: PUSH
6569: LD_OWVAR 67
6573: ARRAY
6574: PPUSH
6575: CALL_OW 381
// un := CreateHuman ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: CALL_OW 44
6588: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6589: LD_VAR 0 2
6593: PPUSH
6594: LD_INT 91
6596: PPUSH
6597: LD_INT 87
6599: PPUSH
6600: LD_INT 3
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6610: LD_ADDR_EXP 49
6614: PUSH
6615: LD_EXP 49
6619: PPUSH
6620: LD_EXP 49
6624: PUSH
6625: LD_INT 1
6627: PLUS
6628: PPUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: CALL_OW 1
6638: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6639: LD_VAR 0 2
6643: PPUSH
6644: LD_INT 89
6646: PPUSH
6647: LD_INT 148
6649: PPUSH
6650: CALL_OW 114
// end ;
6654: GO 6541
6656: POP
6657: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 33
6665: PUSH
6666: LD_INT 61
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 49
6675: PUSH
6676: LD_INT 85
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 76
6685: PUSH
6686: LD_INT 99
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 81
6695: PUSH
6696: LD_INT 135
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 111
6705: PUSH
6706: LD_INT 155
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 147
6715: PUSH
6716: LD_INT 158
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6731: LD_INT 1050
6733: PPUSH
6734: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_EXP 49
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6921
// begin un := ruAttackersInForest [ i ] ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_EXP 49
6765: PUSH
6766: LD_VAR 0 1
6770: ARRAY
6771: ST_TO_ADDR
// tag := GetTag ( un ) ;
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 110
6786: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 302
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 314
6806: NOT
6807: AND
6808: IFFALSE 6919
// begin if tag <> i then
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 1
6819: NONEQUAL
6820: IFFALSE 6848
// begin SetTag ( un , i ) ;
6822: LD_VAR 0 2
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 109
// tag := i ;
6836: LD_ADDR_VAR 0 4
6840: PUSH
6841: LD_VAR 0 1
6845: ST_TO_ADDR
// end else
6846: GO 6880
// begin SetTag ( un , i + 1 ) ;
6848: LD_VAR 0 2
6852: PPUSH
6853: LD_VAR 0 1
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: PPUSH
6862: CALL_OW 109
// tag := i + 1 ;
6866: LD_ADDR_VAR 0 4
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 3
6889: PUSH
6890: LD_VAR 0 4
6894: ARRAY
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_VAR 0 3
6904: PUSH
6905: LD_VAR 0 4
6909: ARRAY
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: CALL_OW 114
// end ; end ;
6919: GO 6753
6921: POP
6922: POP
// until not ruAttackersInForest ;
6923: LD_EXP 49
6927: NOT
6928: IFFALSE 6731
// end ;
6930: PPOPN 4
6932: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6933: LD_INT 10
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 70
6950: IFFALSE 7299
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
// begin enable ;
6961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_INT 3
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 111
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7007: LD_ADDR_VAR 0 3
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 3
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 50
7024: PUSH
7025: EMPTY
7026: LIST
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: ST_TO_ADDR
// if not tmp then
7066: LD_VAR 0 2
7070: NOT
7071: IFFALSE 7169
// begin if not bar then
7073: LD_VAR 0 3
7077: NOT
7078: IFFALSE 7083
// begin disable ;
7080: DISABLE
// exit ;
7081: GO 7299
// end ; tmp := [ ] ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: EMPTY
7089: ST_TO_ADDR
// for i in bar do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_VAR 0 3
7099: PUSH
7100: FOR_IN
7101: IFFALSE 7126
// tmp := tmp union UnitsInside ( i ) ;
7103: LD_ADDR_VAR 0 2
7107: PUSH
7108: LD_VAR 0 2
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 313
7122: UNION
7123: ST_TO_ADDR
7124: GO 7100
7126: POP
7127: POP
// if not tmp then
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7138
// begin disable ;
7135: DISABLE
// exit ;
7136: GO 7299
// end ; for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 2
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7165
// SetTag ( i , 111 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: LD_INT 111
7158: PPUSH
7159: CALL_OW 109
7163: GO 7148
7165: POP
7166: POP
// end else
7167: GO 7299
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7169: LD_ADDR_VAR 0 4
7173: PUSH
7174: LD_INT 10
7176: PPUSH
7177: LD_INT 22
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 70
7191: ST_TO_ADDR
// for i in tmp do
7192: LD_ADDR_VAR 0 1
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: FOR_IN
7203: IFFALSE 7297
// if IsOk ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 302
7214: IFFALSE 7295
// begin if IsInUnit ( i ) then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 310
7225: IFFALSE 7236
// ComExitBuilding ( i ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 122
// wait ( 3 ) ;
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7243: LD_VAR 0 1
7247: PPUSH
7248: LD_VAR 0 4
7252: PPUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 74
7262: PPUSH
7263: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 12
7289: ARRAY
7290: PPUSH
7291: CALL_OW 180
// end ;
7295: GO 7202
7297: POP
7298: POP
// end ; end ;
7299: PPOPN 4
7301: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7302: LD_OWVAR 1
7306: PUSH
7307: LD_INT 4200
7309: GREATER
7310: PUSH
7311: LD_INT 50
7313: PPUSH
7314: CALL_OW 13
7318: AND
7319: IFFALSE 7410
7321: GO 7323
7323: DISABLE
7324: LD_INT 0
7326: PPUSH
// begin uc_side := 3 ;
7327: LD_ADDR_OWVAR 20
7331: PUSH
7332: LD_INT 3
7334: ST_TO_ADDR
// uc_nation := nation_russian ;
7335: LD_ADDR_OWVAR 21
7339: PUSH
7340: LD_INT 3
7342: ST_TO_ADDR
// InitHC_All ( ) ;
7343: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7347: LD_INT 0
7349: PPUSH
7350: LD_INT 2
7352: PPUSH
7353: CALL_OW 382
// un := CreateHuman ;
7357: LD_ADDR_VAR 0 1
7361: PUSH
7362: CALL_OW 44
7366: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7367: LD_VAR 0 1
7371: PPUSH
7372: LD_INT 51
7374: PPUSH
7375: LD_INT 7
7377: PPUSH
7378: LD_INT 12
7380: PPUSH
7381: LD_INT 1
7383: PPUSH
7384: CALL_OW 50
// wait ( 0 0$1 ) ;
7388: LD_INT 35
7390: PPUSH
7391: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 106
7402: PPUSH
7403: LD_INT 83
7405: PPUSH
7406: CALL_OW 111
// end ;
7410: PPOPN 1
7412: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7413: LD_OWVAR 1
7417: PUSH
7418: LD_INT 21000
7420: GREATER
7421: PUSH
7422: LD_INT 45
7424: PPUSH
7425: CALL_OW 13
7429: AND
7430: IFFALSE 7545
7432: GO 7434
7434: DISABLE
7435: LD_INT 0
7437: PPUSH
// begin uc_side := 3 ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_INT 3
7445: ST_TO_ADDR
// uc_nation := nation_russian ;
7446: LD_ADDR_OWVAR 21
7450: PUSH
7451: LD_INT 3
7453: ST_TO_ADDR
// InitHC_All ( ) ;
7454: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7458: LD_INT 0
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 384
// un := CreateHuman ;
7468: LD_ADDR_VAR 0 1
7472: PUSH
7473: CALL_OW 44
7477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_INT 91
7485: PPUSH
7486: LD_INT 18
7488: PPUSH
7489: LD_INT 15
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 50
// wait ( 0 0$1 ) ;
7499: LD_INT 35
7501: PPUSH
7502: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 106
7513: PPUSH
7514: LD_INT 83
7516: PPUSH
7517: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_INT 67
7528: PPUSH
7529: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 183
// end ; end_of_file
7545: PPOPN 1
7547: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
7552: PPUSH
// if not characters then
7553: LD_VAR 0 1
7557: NOT
7558: IFFALSE 7562
// exit ;
7560: GO 7641
// speaker := characters [ rand ( 1 , characters ) ] ;
7562: LD_ADDR_VAR 0 6
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PPUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 12
7584: ARRAY
7585: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 258
7595: PUSH
7596: LD_INT 1
7598: EQUAL
7599: IFFALSE 7617
// Say ( speaker , dialogMID ) else
7601: LD_VAR 0 6
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 88
7615: GO 7631
// Say ( speaker , dialogFID ) ;
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_VAR 0 3
7626: PPUSH
7627: CALL_OW 88
// result := speaker ;
7631: LD_ADDR_VAR 0 4
7635: PUSH
7636: LD_VAR 0 6
7640: ST_TO_ADDR
// end ;
7641: LD_VAR 0 4
7645: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// for i in charactersList do
7650: LD_ADDR_VAR 0 4
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: FOR_IN
7661: IFFALSE 7679
// SaveCharacters ( i , ident ) ;
7663: LD_VAR 0 4
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 38
7677: GO 7660
7679: POP
7680: POP
// end ;
7681: LD_VAR 0 3
7685: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7686: LD_INT 0
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
// for i := 1 to count do
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_VAR 0 6
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7789
// begin uc_side = side ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_VAR 0 1
7719: ST_TO_ADDR
// uc_nation = nation ;
7720: LD_ADDR_OWVAR 21
7724: PUSH
7725: LD_VAR 0 2
7729: ST_TO_ADDR
// hc_gallery =  ;
7730: LD_ADDR_OWVAR 33
7734: PUSH
7735: LD_STRING 
7737: ST_TO_ADDR
// hc_name =  ;
7738: LD_ADDR_OWVAR 26
7742: PUSH
7743: LD_STRING 
7745: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7746: LD_INT 0
7748: PPUSH
7749: LD_VAR 0 5
7753: PPUSH
7754: LD_VAR 0 4
7758: PPUSH
7759: CALL_OW 380
// un = CreateHuman ;
7763: LD_ADDR_VAR 0 10
7767: PUSH
7768: CALL_OW 44
7772: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7773: LD_VAR 0 10
7777: PPUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 52
// end ;
7787: GO 7707
7789: POP
7790: POP
// end ;
7791: LD_VAR 0 7
7795: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7796: LD_INT 0
7798: PPUSH
7799: PPUSH
7800: PPUSH
// uc_side := GetSide ( b ) ;
7801: LD_ADDR_OWVAR 20
7805: PUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: CALL_OW 255
7815: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7816: LD_ADDR_OWVAR 21
7820: PUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL_OW 248
7830: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7831: LD_INT 0
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7846: LD_ADDR_VAR 0 5
7850: PUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL_OW 254
7860: PUSH
7861: LD_INT 3
7863: MINUS
7864: ST_TO_ADDR
// if dir < 0 then
7865: LD_VAR 0 5
7869: PUSH
7870: LD_INT 0
7872: LESS
7873: IFFALSE 7889
// dir := 6 + dir ;
7875: LD_ADDR_VAR 0 5
7879: PUSH
7880: LD_INT 6
7882: PUSH
7883: LD_VAR 0 5
7887: PLUS
7888: ST_TO_ADDR
// un := CreateHuman ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: CALL_OW 44
7898: ST_TO_ADDR
// SetDir ( un , dir ) ;
7899: LD_VAR 0 4
7903: PPUSH
7904: LD_VAR 0 5
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7913: LD_VAR 0 4
7917: PPUSH
7918: LD_VAR 0 2
7922: PPUSH
7923: CALL_OW 52
// end ;
7927: LD_VAR 0 3
7931: RET
// export function PrepareDifficulty ; begin
7932: LD_INT 0
7934: PPUSH
// case Difficulty of 1 :
7935: LD_OWVAR 67
7939: PUSH
7940: LD_INT 1
7942: DOUBLE
7943: EQUAL
7944: IFTRUE 7948
7946: GO 7967
7948: POP
// begin RuSolMinLevel = 2 ;
7949: LD_ADDR_EXP 35
7953: PUSH
7954: LD_INT 2
7956: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7957: LD_ADDR_EXP 36
7961: PUSH
7962: LD_INT 3
7964: ST_TO_ADDR
// end ; 2 :
7965: GO 8028
7967: LD_INT 2
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 7994
7975: POP
// begin RuSolMinLevel = 3 ;
7976: LD_ADDR_EXP 35
7980: PUSH
7981: LD_INT 3
7983: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7984: LD_ADDR_EXP 36
7988: PUSH
7989: LD_INT 5
7991: ST_TO_ADDR
// end ; 3 .. 4 :
7992: GO 8028
7994: LD_INT 3
7996: DOUBLE
7997: GREATEREQUAL
7998: IFFALSE 8006
8000: LD_INT 4
8002: DOUBLE
8003: LESSEQUAL
8004: IFTRUE 8008
8006: GO 8027
8008: POP
// begin RuSolMinLevel = 4 ;
8009: LD_ADDR_EXP 35
8013: PUSH
8014: LD_INT 4
8016: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8017: LD_ADDR_EXP 36
8021: PUSH
8022: LD_INT 6
8024: ST_TO_ADDR
// end ; end ;
8025: GO 8028
8027: POP
// end ;
8028: LD_VAR 0 1
8032: RET
// export function ShowQuery1 ; begin
8033: LD_INT 0
8035: PPUSH
// result := Query ( QKill ) ;
8036: LD_ADDR_VAR 0 1
8040: PUSH
8041: LD_STRING QKill
8043: PPUSH
8044: CALL_OW 97
8048: ST_TO_ADDR
// end ;
8049: LD_VAR 0 1
8053: RET
// export function ShowQuery2 ; begin
8054: LD_INT 0
8056: PPUSH
// result := Query ( QKill2 ) ;
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_STRING QKill2
8064: PPUSH
8065: CALL_OW 97
8069: ST_TO_ADDR
// end ;
8070: LD_VAR 0 1
8074: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8081: LD_ADDR_VAR 0 7
8085: PUSH
8086: LD_INT 48
8088: PUSH
8089: LD_INT 49
8091: PUSH
8092: LD_INT 50
8094: PUSH
8095: LD_INT 20
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: LD_INT 51
8103: PUSH
8104: LD_INT 52
8106: PUSH
8107: LD_INT 69
8109: PUSH
8110: LD_INT 39
8112: PUSH
8113: LD_INT 34
8115: PUSH
8116: LD_INT 40
8118: PUSH
8119: LD_INT 53
8121: PUSH
8122: LD_INT 71
8124: PUSH
8125: LD_INT 57
8127: PUSH
8128: LD_INT 58
8130: PUSH
8131: LD_INT 44
8133: PUSH
8134: LD_INT 32
8136: PUSH
8137: LD_INT 27
8139: PUSH
8140: LD_INT 23
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 59
8148: PUSH
8149: LD_INT 54
8151: PUSH
8152: LD_INT 55
8154: PUSH
8155: LD_INT 56
8157: PUSH
8158: LD_INT 63
8160: PUSH
8161: LD_INT 64
8163: PUSH
8164: LD_INT 65
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 31
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: ST_TO_ADDR
// for i = 1 to list do
8236: LD_ADDR_VAR 0 5
8240: PUSH
8241: DOUBLE
8242: LD_INT 1
8244: DEC
8245: ST_TO_ADDR
8246: LD_VAR 0 7
8250: PUSH
8251: FOR_TO
8252: IFFALSE 8324
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8254: LD_VAR 0 7
8258: PUSH
8259: LD_VAR 0 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 321
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: PUSH
8279: LD_VAR 0 7
8283: PUSH
8284: LD_VAR 0 5
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 3
8294: PPUSH
8295: CALL_OW 482
8299: AND
8300: IFFALSE 8322
// AddComResearch ( lab , list [ i ] ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_VAR 0 7
8311: PUSH
8312: LD_VAR 0 5
8316: ARRAY
8317: PPUSH
8318: CALL_OW 184
8322: GO 8251
8324: POP
8325: POP
// end ;
8326: LD_VAR 0 4
8330: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
8335: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: LD_VAR 0 3
8371: LESSEQUAL
8372: IFFALSE 8480
// begin for i = 1 to vehCount do
8374: LD_ADDR_VAR 0 9
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 3
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8478
// begin weapon := weaponTab [ i ] ;
8392: LD_ADDR_VAR 0 10
8396: PUSH
8397: LD_VAR 0 4
8401: PUSH
8402: LD_VAR 0 9
8406: ARRAY
8407: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_INT 46
8415: EQUAL
8416: IFFALSE 8447
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 24
8425: PPUSH
8426: LD_VAR 0 5
8430: PPUSH
8431: LD_VAR 0 6
8435: PPUSH
8436: LD_VAR 0 10
8440: PPUSH
8441: CALL_OW 185
8445: GO 8476
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: LD_VAR 0 5
8461: PPUSH
8462: LD_VAR 0 6
8466: PPUSH
8467: LD_VAR 0 10
8471: PPUSH
8472: CALL_OW 185
// end ;
8476: GO 8389
8478: POP
8479: POP
// end ; end ;
8480: LD_VAR 0 8
8484: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8493: LD_ADDR_VAR 0 8
8497: PUSH
8498: LD_VAR 0 2
8502: PPUSH
8503: CALL_OW 313
8507: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8508: LD_ADDR_VAR 0 9
8512: PUSH
8513: LD_VAR 0 3
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_VAR 0 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 25
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 24
8542: PUSH
8543: LD_INT 750
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 54
8555: PUSH
8556: EMPTY
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 70
8573: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8574: LD_ADDR_VAR 0 6
8578: PUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 1000
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8636: LD_VAR 0 6
8640: NOT
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 250
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: NOT
8684: AND
8685: IFFALSE 8689
// exit ;
8687: GO 8847
// if buildingsList and engineerOkInside then
8689: LD_VAR 0 6
8693: PUSH
8694: LD_VAR 0 8
8698: AND
8699: IFFALSE 8710
// ComExitBuilding ( engineerOkInside ) ;
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 122
// if buildingsList and engineerOkOutside then
8710: LD_VAR 0 6
8714: PUSH
8715: LD_VAR 0 9
8719: AND
8720: IFFALSE 8740
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8722: LD_VAR 0 9
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8740: LD_VAR 0 6
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_VAR 0 4
8753: PUSH
8754: LD_INT 0
8756: EQUAL
8757: AND
8758: PUSH
8759: LD_VAR 0 9
8763: AND
8764: IFFALSE 8780
// ComEnterUnit ( engineerOkOutside , depot ) ;
8766: LD_VAR 0 9
8770: PPUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8780: LD_VAR 0 9
8784: PUSH
8785: LD_VAR 0 6
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: AND
8794: PUSH
8795: LD_VAR 0 4
8799: AND
8800: IFFALSE 8847
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8802: LD_VAR 0 9
8806: PPUSH
8807: LD_VAR 0 4
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 2
8823: ARRAY
8824: PPUSH
8825: LD_VAR 0 4
8829: PUSH
8830: LD_INT 3
8832: ARRAY
8833: PPUSH
8834: LD_VAR 0 4
8838: PUSH
8839: LD_INT 4
8841: ARRAY
8842: PPUSH
8843: CALL_OW 145
// end ;
8847: LD_VAR 0 5
8851: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8852: LD_INT 0
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8863: LD_ADDR_VAR 0 6
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 23
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 251
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 69
8920: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 22
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 23
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 25
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 50
8965: PUSH
8966: EMPTY
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 70
8979: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8980: LD_ADDR_VAR 0 10
8984: PUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 3
9014: PUSH
9015: LD_INT 25
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 24
9034: PUSH
9035: LD_INT 750
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 70
9056: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9057: LD_ADDR_VAR 0 11
9061: PUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: LD_INT 22
9069: PUSH
9070: LD_VAR 0 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 1
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 3
9091: PUSH
9092: LD_INT 25
9094: PUSH
9095: LD_INT 3
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: LD_INT 24
9111: PUSH
9112: LD_INT 1000
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 70
9133: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9134: LD_VAR 0 10
9138: NOT
9139: PUSH
9140: LD_VAR 0 11
9144: NOT
9145: AND
9146: PUSH
9147: LD_VAR 0 6
9151: NOT
9152: AND
9153: IFFALSE 9157
// exit ;
9155: GO 9363
// if damageUnits and sci_list then
9157: LD_VAR 0 10
9161: PUSH
9162: LD_VAR 0 6
9166: AND
9167: IFFALSE 9183
// ComMoveToArea ( damageUnits , healArea ) ;
9169: LD_VAR 0 10
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 113
// if unitsToHeal and sci_list then
9183: LD_VAR 0 11
9187: PUSH
9188: LD_VAR 0 6
9192: AND
9193: IFFALSE 9204
// ComExitBuilding ( sci_list ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9204: LD_VAR 0 11
9208: PUSH
9209: LD_VAR 0 7
9213: AND
9214: IFFALSE 9234
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9216: LD_VAR 0 7
9220: PPUSH
9221: LD_VAR 0 11
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9234: LD_VAR 0 10
9238: PUSH
9239: LD_INT 0
9241: EQUAL
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_INT 0
9250: EQUAL
9251: AND
9252: PUSH
9253: LD_VAR 0 7
9257: AND
9258: IFFALSE 9363
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9260: LD_ADDR_VAR 0 12
9264: PUSH
9265: LD_INT 22
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 3
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 30
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PPUSH
9302: CALL_OW 69
9306: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9307: LD_ADDR_VAR 0 13
9311: PUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 12
9319: PPUSH
9320: CALL_OW 12
9324: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9325: LD_VAR 0 7
9329: PPUSH
9330: LD_INT 3
9332: PUSH
9333: LD_INT 60
9335: PUSH
9336: EMPTY
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 72
9347: PPUSH
9348: LD_VAR 0 12
9352: PUSH
9353: LD_VAR 0 13
9357: ARRAY
9358: PPUSH
9359: CALL_OW 120
// end ; end ;
9363: LD_VAR 0 5
9367: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9368: LD_INT 0
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// tmp := [ ] ;
9375: LD_ADDR_VAR 0 6
9379: PUSH
9380: EMPTY
9381: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_INT 22
9389: PUSH
9390: LD_VAR 0 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 32
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: ST_TO_ADDR
// if bunkers then
9418: LD_VAR 0 7
9422: IFFALSE 9492
// for i in bunkers do
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 7
9433: PUSH
9434: FOR_IN
9435: IFFALSE 9490
// for j in UnitsInside ( i ) do
9437: LD_ADDR_VAR 0 5
9441: PUSH
9442: LD_VAR 0 4
9446: PPUSH
9447: CALL_OW 313
9451: PUSH
9452: FOR_IN
9453: IFFALSE 9486
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9455: LD_ADDR_VAR 0 6
9459: PUSH
9460: LD_VAR 0 6
9464: PPUSH
9465: LD_VAR 0 6
9469: PUSH
9470: LD_INT 1
9472: PLUS
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: CALL_OW 1
9483: ST_TO_ADDR
9484: GO 9452
9486: POP
9487: POP
9488: GO 9434
9490: POP
9491: POP
// if tmp then
9492: LD_VAR 0 6
9496: IFFALSE 9536
// begin ComExitBuilding ( tmp ) ;
9498: LD_VAR 0 6
9502: PPUSH
9503: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 250
9521: PPUSH
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 251
9531: PPUSH
9532: CALL_OW 174
// end ; end ;
9536: LD_VAR 0 3
9540: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
// enable ;
9546: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: CALL_OW 435
9561: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9562: LD_ADDR_VAR 0 5
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 34
9581: PUSH
9582: LD_VAR 0 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PPUSH
9595: CALL_OW 69
9599: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9600: LD_VAR 0 5
9604: PUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: CALL_OW 435
9614: AND
9615: PUSH
9616: LD_VAR 0 6
9620: AND
9621: IFFALSE 9654
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9623: LD_VAR 0 5
9627: PUSH
9628: LD_INT 1
9630: ARRAY
9631: PPUSH
9632: LD_VAR 0 6
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 6
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: CALL_OW 177
// end ;
9654: LD_VAR 0 4
9658: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9669: LD_ADDR_VAR 0 6
9673: PUSH
9674: LD_VAR 0 2
9678: PPUSH
9679: LD_INT 22
9681: PUSH
9682: LD_VAR 0 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 56
9693: PUSH
9694: EMPTY
9695: LIST
9696: PUSH
9697: LD_INT 24
9699: PUSH
9700: LD_INT 700
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 60
9712: PUSH
9713: EMPTY
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 9
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 70
9781: PUSH
9782: LD_EXP 48
9786: PUSH
9787: LD_EXP 49
9791: UNION
9792: DIFF
9793: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 22
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 30
9818: PUSH
9819: LD_INT 32
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 58
9828: PUSH
9829: EMPTY
9830: LIST
9831: PUSH
9832: LD_INT 24
9834: PUSH
9835: LD_INT 251
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 70
9852: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9853: LD_ADDR_VAR 0 9
9857: PUSH
9858: LD_VAR 0 2
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_VAR 0 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 4
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 30
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 24
9905: PUSH
9906: LD_INT 251
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PPUSH
9918: CALL_OW 70
9922: ST_TO_ADDR
// if barrackList then
9923: LD_VAR 0 9
9927: IFFALSE 10083
// begin if turretList = 0 then
9929: LD_VAR 0 7
9933: PUSH
9934: LD_INT 0
9936: EQUAL
9937: IFFALSE 9975
// begin if soldiersList then
9939: LD_VAR 0 6
9943: IFFALSE 9973
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_VAR 0 9
9954: PUSH
9955: LD_INT 1
9957: PPUSH
9958: LD_VAR 0 9
9962: PPUSH
9963: CALL_OW 12
9967: ARRAY
9968: PPUSH
9969: CALL_OW 120
// end else
9973: GO 10083
// begin for i in barrackList do
9975: LD_ADDR_VAR 0 4
9979: PUSH
9980: LD_VAR 0 9
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10081
// begin if not turretList then
9988: LD_VAR 0 7
9992: NOT
9993: IFFALSE 9999
// exit ;
9995: POP
9996: POP
9997: GO 10083
// insideUnits = UnitsInside ( i ) ;
9999: LD_ADDR_VAR 0 10
10003: PUSH
10004: LD_VAR 0 4
10008: PPUSH
10009: CALL_OW 313
10013: ST_TO_ADDR
// if insideUnits then
10014: LD_VAR 0 10
10018: IFFALSE 10079
// begin tmp := insideUnits [ 1 ] ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 10
10029: PUSH
10030: LD_INT 1
10032: ARRAY
10033: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10034: LD_VAR 0 8
10038: PPUSH
10039: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10043: LD_VAR 0 8
10047: PPUSH
10048: LD_VAR 0 7
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_VAR 0 7
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 3
10078: ST_TO_ADDR
// end ; end ;
10079: GO 9985
10081: POP
10082: POP
// end ; end ; end ;
10083: LD_VAR 0 3
10087: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10088: LD_INT 0
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 34
10125: PUSH
10126: LD_INT 52
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: ST_TO_ADDR
// if not craneList then
10143: LD_VAR 0 8
10147: NOT
10148: IFFALSE 10152
// exit ;
10150: GO 10586
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10152: LD_ADDR_VAR 0 9
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: LD_VAR 0 1
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 21
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: LD_INT 24
10184: PUSH
10185: LD_INT 1000
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10209: LD_VAR 0 9
10213: PUSH
10214: LD_VAR 0 8
10218: PPUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 750
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: CALL_OW 72
10233: AND
10234: IFFALSE 10269
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_INT 24
10243: PUSH
10244: LD_INT 750
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 72
10255: PPUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: ARRAY
10264: PPUSH
10265: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 750
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 72
10295: IFFALSE 10333
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_INT 3
10304: PUSH
10305: LD_INT 24
10307: PUSH
10308: LD_INT 750
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: PPUSH
10324: LD_VAR 0 2
10328: PPUSH
10329: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10333: LD_VAR 0 8
10337: PUSH
10338: LD_VAR 0 9
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: AND
10347: PUSH
10348: LD_VAR 0 3
10352: AND
10353: IFFALSE 10400
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10355: LD_VAR 0 8
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 1
10367: ARRAY
10368: PPUSH
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 2
10376: ARRAY
10377: PPUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 3
10385: ARRAY
10386: PPUSH
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 4
10394: ARRAY
10395: PPUSH
10396: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10400: LD_ADDR_VAR 0 7
10404: PUSH
10405: LD_VAR 0 2
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 52
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 750
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 70
10469: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: LD_INT 22
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 2
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 0
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 30
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 70
10528: ST_TO_ADDR
// if crane then
10529: LD_VAR 0 7
10533: IFFALSE 10586
// for i in crane do
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_VAR 0 7
10544: PUSH
10545: FOR_IN
10546: IFFALSE 10584
// begin if dep then
10548: LD_VAR 0 6
10552: IFFALSE 10568
// ComMoveUnit ( i , dep ) ;
10554: LD_VAR 0 5
10558: PPUSH
10559: LD_VAR 0 6
10563: PPUSH
10564: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: CALL_OW 311
10577: PPUSH
10578: CALL 82894 0 1
// end ;
10582: GO 10545
10584: POP
10585: POP
// end ;
10586: LD_VAR 0 4
10590: RET
// export function BuildBulldozer ; begin
10591: LD_INT 0
10593: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10594: LD_INT 17
10596: PPUSH
10597: CALL_OW 302
10601: NOT
10602: PUSH
10603: LD_INT 17
10605: PPUSH
10606: CALL_OW 255
10610: PUSH
10611: LD_INT 3
10613: NONEQUAL
10614: OR
10615: IFFALSE 10619
// exit ;
10617: GO 10638
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10619: LD_INT 17
10621: PPUSH
10622: LD_INT 24
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: LD_INT 53
10633: PPUSH
10634: CALL_OW 185
// end ;
10638: LD_VAR 0 1
10642: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// if not bulldozer then
10650: LD_VAR 0 1
10654: NOT
10655: IFFALSE 10659
// exit ;
10657: GO 10941
// list := ListEnvironmentArea ( area ) ;
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: LD_VAR 0 2
10668: PPUSH
10669: CALL_OW 353
10673: ST_TO_ADDR
// tmp := [ ] ;
10674: LD_ADDR_VAR 0 6
10678: PUSH
10679: EMPTY
10680: ST_TO_ADDR
// for i = 1 to list do
10681: LD_ADDR_VAR 0 4
10685: PUSH
10686: DOUBLE
10687: LD_INT 1
10689: DEC
10690: ST_TO_ADDR
10691: LD_VAR 0 5
10695: PUSH
10696: FOR_TO
10697: IFFALSE 10795
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10699: LD_VAR 0 5
10703: PUSH
10704: LD_VAR 0 4
10708: ARRAY
10709: PUSH
10710: LD_INT 1
10712: ARRAY
10713: PPUSH
10714: LD_VAR 0 5
10718: PUSH
10719: LD_VAR 0 4
10723: ARRAY
10724: PUSH
10725: LD_INT 2
10727: ARRAY
10728: PPUSH
10729: CALL_OW 554
10733: IFFALSE 10793
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10735: LD_ADDR_VAR 0 6
10739: PUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: LD_VAR 0 6
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: PUSH
10769: LD_VAR 0 5
10773: PUSH
10774: LD_VAR 0 4
10778: ARRAY
10779: PUSH
10780: LD_INT 2
10782: ARRAY
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 1
10792: ST_TO_ADDR
// end ;
10793: GO 10696
10795: POP
10796: POP
// ComStop ( bulldozer ) ;
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10806: LD_ADDR_VAR 0 7
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 250
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 251
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// for i = tmp downto 1 do
10835: LD_ADDR_VAR 0 4
10839: PUSH
10840: DOUBLE
10841: LD_VAR 0 6
10845: INC
10846: ST_TO_ADDR
10847: LD_INT 1
10849: PUSH
10850: FOR_DOWNTO
10851: IFFALSE 10939
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10853: LD_ADDR_VAR 0 7
10857: PUSH
10858: LD_VAR 0 7
10862: PUSH
10863: LD_INT 1
10865: ARRAY
10866: PPUSH
10867: LD_VAR 0 7
10871: PUSH
10872: LD_INT 2
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL 11042 0 3
10885: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10886: LD_VAR 0 1
10890: PPUSH
10891: LD_VAR 0 7
10895: PUSH
10896: LD_INT 1
10898: ARRAY
10899: PPUSH
10900: LD_VAR 0 7
10904: PUSH
10905: LD_INT 2
10907: ARRAY
10908: PPUSH
10909: CALL 10946 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10913: LD_ADDR_VAR 0 6
10917: PUSH
10918: LD_VAR 0 6
10922: PPUSH
10923: LD_VAR 0 7
10927: PUSH
10928: LD_INT 3
10930: ARRAY
10931: PPUSH
10932: CALL_OW 3
10936: ST_TO_ADDR
// end ;
10937: GO 10850
10939: POP
10940: POP
// end ;
10941: LD_VAR 0 3
10945: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10946: LD_INT 0
10948: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10949: LD_VAR 0 2
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: CALL_OW 351
10963: PUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: CALL_OW 554
10978: AND
10979: PUSH
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: CALL_OW 488
10994: AND
10995: PUSH
10996: LD_VAR 0 2
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 428
11010: PUSH
11011: LD_INT 1
11013: NEG
11014: EQUAL
11015: AND
11016: IFFALSE 11037
// AddComMoveXY ( bulldozer , x , y ) ;
11018: LD_VAR 0 1
11022: PPUSH
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: CALL_OW 171
// end ;
11037: LD_VAR 0 4
11041: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11042: LD_INT 0
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
11048: PPUSH
11049: PPUSH
11050: PPUSH
// dist := 99999 ;
11051: LD_ADDR_VAR 0 6
11055: PUSH
11056: LD_INT 99999
11058: ST_TO_ADDR
// for i = 1 to list do
11059: LD_ADDR_VAR 0 5
11063: PUSH
11064: DOUBLE
11065: LD_INT 1
11067: DEC
11068: ST_TO_ADDR
11069: LD_VAR 0 3
11073: PUSH
11074: FOR_TO
11075: IFFALSE 11213
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11077: LD_ADDR_VAR 0 7
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_VAR 0 2
11091: PPUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 5
11101: ARRAY
11102: PUSH
11103: LD_INT 1
11105: ARRAY
11106: PPUSH
11107: LD_VAR 0 3
11111: PUSH
11112: LD_VAR 0 5
11116: ARRAY
11117: PUSH
11118: LD_INT 2
11120: ARRAY
11121: PPUSH
11122: CALL_OW 298
11126: ST_TO_ADDR
// if d = 0 then
11127: LD_VAR 0 7
11131: PUSH
11132: LD_INT 0
11134: EQUAL
11135: IFFALSE 11139
// continue ;
11137: GO 11074
// if d < dist then
11139: LD_VAR 0 7
11143: PUSH
11144: LD_VAR 0 6
11148: LESS
11149: IFFALSE 11211
// begin _x := list [ i ] [ 1 ] ;
11151: LD_ADDR_VAR 0 8
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 5
11165: ARRAY
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11171: LD_ADDR_VAR 0 9
11175: PUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 5
11185: ARRAY
11186: PUSH
11187: LD_INT 2
11189: ARRAY
11190: ST_TO_ADDR
// _i := i ;
11191: LD_ADDR_VAR 0 10
11195: PUSH
11196: LD_VAR 0 5
11200: ST_TO_ADDR
// dist := d ;
11201: LD_ADDR_VAR 0 6
11205: PUSH
11206: LD_VAR 0 7
11210: ST_TO_ADDR
// end ; end ;
11211: GO 11074
11213: POP
11214: POP
// result := [ _x , _y , _i , dist ] ;
11215: LD_ADDR_VAR 0 4
11219: PUSH
11220: LD_VAR 0 8
11224: PUSH
11225: LD_VAR 0 9
11229: PUSH
11230: LD_VAR 0 10
11234: PUSH
11235: LD_VAR 0 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: ST_TO_ADDR
// end ; end_of_file
11246: LD_VAR 0 4
11250: RET
// export function Action ; begin
11251: LD_INT 0
11253: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11254: LD_INT 66
11256: PPUSH
11257: LD_INT 4
11259: PPUSH
11260: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11264: LD_INT 22
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: PUSH
11293: LD_INT 0
11295: EQUAL
11296: IFFALSE 11310
// SetClass ( JMM , 2 ) ;
11298: LD_EXP 1
11302: PPUSH
11303: LD_INT 2
11305: PPUSH
11306: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11310: LD_STRING M1
11312: PPUSH
11313: CALL_OW 337
// case Difficulty of 1 :
11317: LD_OWVAR 67
11321: PUSH
11322: LD_INT 1
11324: DOUBLE
11325: EQUAL
11326: IFTRUE 11330
11328: GO 11340
11330: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11331: LD_STRING M1-1
11333: PPUSH
11334: CALL_OW 337
11338: GO 11395
11340: LD_INT 2
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11358
11348: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11349: LD_STRING M1-2
11351: PPUSH
11352: CALL_OW 337
11356: GO 11395
11358: LD_INT 3
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11376
11366: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11367: LD_STRING M1-3
11369: PPUSH
11370: CALL_OW 337
11374: GO 11395
11376: LD_INT 4
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11394
11384: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11385: LD_STRING M1-4
11387: PPUSH
11388: CALL_OW 337
11392: GO 11395
11394: POP
// ChangeMissionObjectives ( M1cont ) ;
11395: LD_STRING M1cont
11397: PPUSH
11398: CALL_OW 337
// SaveForQuickRestart ;
11402: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11406: LD_INT 525
11408: PPUSH
11409: LD_INT 700
11411: PPUSH
11412: CALL_OW 12
11416: PPUSH
11417: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11421: LD_INT 5
11423: PPUSH
11424: LD_INT 82
11426: PPUSH
11427: LD_INT 38
11429: PPUSH
11430: LD_INT 10
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 56
// wait ( 0 0$14 ) ;
11440: LD_INT 490
11442: PPUSH
11443: CALL_OW 67
// firstCrateSpawn := true ;
11447: LD_ADDR_EXP 41
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// end ;
11455: LD_VAR 0 1
11459: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11460: LD_EXP 41
11464: IFFALSE 11853
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
// begin if IsOk ( Lisa ) then
11472: LD_EXP 2
11476: PPUSH
11477: CALL_OW 302
11481: IFFALSE 11497
// Say ( Lisa , DR0-Lisa-1 ) else
11483: LD_EXP 2
11487: PPUSH
11488: LD_STRING DR0-Lisa-1
11490: PPUSH
11491: CALL_OW 88
11495: GO 11643
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 21
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 26
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 3
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 4
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: PUSH
11588: LD_EXP 1
11592: PUSH
11593: LD_EXP 8
11597: PUSH
11598: LD_EXP 5
11602: PUSH
11603: LD_EXP 6
11607: PUSH
11608: LD_EXP 7
11612: PUSH
11613: LD_EXP 4
11617: PUSH
11618: LD_EXP 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: DIFF
11632: PPUSH
11633: LD_STRING DR0-Sol1-1
11635: PPUSH
11636: LD_STRING DR0-Sol1-1
11638: PPUSH
11639: CALL 7548 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 21
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: LD_INT 1
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 4
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 1
11743: PUSH
11744: LD_EXP 8
11748: PUSH
11749: LD_EXP 5
11753: PUSH
11754: LD_EXP 2
11758: PUSH
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: LD_EXP 4
11773: PUSH
11774: LD_EXP 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: DIFF
11789: PPUSH
11790: LD_STRING DR0-Sol2-1
11792: PPUSH
11793: LD_STRING DR0-Sol2-1
11795: PPUSH
11796: CALL 7548 0 3
11800: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11801: LD_EXP 4
11805: PPUSH
11806: CALL_OW 302
11810: IFFALSE 11824
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11812: LD_EXP 4
11816: PPUSH
11817: LD_STRING DR0-Cyrus-1
11819: PPUSH
11820: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11824: LD_EXP 2
11828: PPUSH
11829: CALL_OW 302
11833: PUSH
11834: LD_VAR 0 1
11838: OR
11839: IFFALSE 11853
// Say ( JMM , DR0-JMM-1 ) ;
11841: LD_EXP 1
11845: PPUSH
11846: LD_STRING DR0-JMM-1
11848: PPUSH
11849: CALL_OW 88
// end ;
11853: PPOPN 1
11855: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11856: LD_EXP 5
11860: PPUSH
11861: CALL_OW 302
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 25
11878: PUSH
11879: LD_INT 16
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PUSH
11895: LD_INT 0
11897: GREATER
11898: AND
11899: PUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 463
11907: NOT
11908: AND
11909: IFFALSE 12187
11911: GO 11913
11913: DISABLE
// begin DialogueOn ;
11914: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11918: LD_EXP 5
11922: PPUSH
11923: LD_STRING D10-Frank-1
11925: PPUSH
11926: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11930: LD_INT 22
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 21
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 25
11985: PUSH
11986: LD_INT 4
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PUSH
12010: LD_EXP 1
12014: PUSH
12015: LD_EXP 5
12019: PUSH
12020: LD_EXP 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: DIFF
12030: PPUSH
12031: LD_STRING D10-Sol1-1
12033: PPUSH
12034: LD_STRING D10-FSol1-1
12036: PPUSH
12037: CALL 7548 0 3
// Say ( Frank , D10-Frank-2 ) ;
12041: LD_EXP 5
12045: PPUSH
12046: LD_STRING D10-Frank-2
12048: PPUSH
12049: CALL_OW 88
// if IsOk ( Lisa ) then
12053: LD_EXP 2
12057: PPUSH
12058: CALL_OW 302
12062: IFFALSE 12078
// Say ( Lisa , D10-Lisa-2 ) else
12064: LD_EXP 2
12068: PPUSH
12069: LD_STRING D10-Lisa-2
12071: PPUSH
12072: CALL_OW 88
12076: GO 12183
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12078: LD_INT 22
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 25
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: LD_EXP 1
12162: PUSH
12163: LD_EXP 5
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: DIFF
12172: PPUSH
12173: LD_STRING D10-Sol1-2
12175: PPUSH
12176: LD_STRING D10-FSol1-2
12178: PPUSH
12179: CALL 7548 0 3
// DialogueOff ;
12183: CALL_OW 7
// end ;
12187: END
// every 0 0$30 trigger not InBattle ( 1 ) and tick > 10 10$00 do
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 463
12195: NOT
12196: PUSH
12197: LD_OWVAR 1
12201: PUSH
12202: LD_INT 21000
12204: GREATER
12205: AND
12206: IFFALSE 12489
12208: GO 12210
12210: DISABLE
// begin HarrisonSupport ;
12211: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12215: LD_EXP 18
12219: PPUSH
12220: CALL_OW 310
12224: PPUSH
12225: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12229: LD_EXP 18
12233: PPUSH
12234: LD_STRING DEng-Eng1-1
12236: PPUSH
12237: CALL_OW 88
// wait ( 1 1$0 ) ;
12241: LD_INT 2100
12243: PPUSH
12244: CALL_OW 67
// DialogueOn ;
12248: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12252: LD_EXP 15
12256: PPUSH
12257: LD_STRING DRem-Har-1
12259: PPUSH
12260: CALL_OW 94
// if contactWithRussian then
12264: LD_EXP 23
12268: IFFALSE 12284
// Say ( JMM , DRem-JMM-1 ) else
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING DRem-JMM-1
12277: PPUSH
12278: CALL_OW 88
12282: GO 12296
// Say ( JMM , DRem-JMM-1a ) ;
12284: LD_EXP 1
12288: PPUSH
12289: LD_STRING DRem-JMM-1a
12291: PPUSH
12292: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12296: LD_EXP 15
12300: PPUSH
12301: LD_STRING DRem-Har-2
12303: PPUSH
12304: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12308: LD_STRING DenisInDelta
12310: PPUSH
12311: LD_INT 0
12313: PPUSH
12314: CALL_OW 30
12318: IFFALSE 12334
// Say ( JMM , DRem-JMM-2 ) else
12320: LD_EXP 1
12324: PPUSH
12325: LD_STRING DRem-JMM-2
12327: PPUSH
12328: CALL_OW 88
12332: GO 12346
// Say ( JMM , DRem-JMM-2a ) ;
12334: LD_EXP 1
12338: PPUSH
12339: LD_STRING DRem-JMM-2a
12341: PPUSH
12342: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12346: LD_EXP 15
12350: PPUSH
12351: LD_STRING DRem-Har-3
12353: PPUSH
12354: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12358: LD_EXP 1
12362: PPUSH
12363: LD_STRING DRem-JMM-3
12365: PPUSH
12366: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12370: LD_EXP 15
12374: PPUSH
12375: LD_STRING DRem-Har-4
12377: PPUSH
12378: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12382: LD_STRING DenisInDelta
12384: PPUSH
12385: LD_INT 0
12387: PPUSH
12388: CALL_OW 30
12392: IFFALSE 12452
// begin Say ( JMM , DRem-JMM-4 ) ;
12394: LD_EXP 1
12398: PPUSH
12399: LD_STRING DRem-JMM-4
12401: PPUSH
12402: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12406: LD_EXP 15
12410: PPUSH
12411: LD_STRING DRem-Har-5
12413: PPUSH
12414: CALL_OW 94
// DialogueOff ;
12418: CALL_OW 7
// wait ( 4 4$00 ) ;
12422: LD_INT 8400
12424: PPUSH
12425: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12429: LD_INT 35
12431: PPUSH
12432: CALL_OW 67
// until not InBattle ( 1 ) ;
12436: LD_INT 1
12438: PPUSH
12439: CALL_OW 463
12443: NOT
12444: IFFALSE 12429
// SpawnDenis ;
12446: CALL 12490 0 0
// end else
12450: GO 12489
// begin DialogueOff ;
12452: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12456: LD_INT 36
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12469: LD_INT 15
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12482: LD_STRING MR
12484: PPUSH
12485: CALL_OW 337
// end ; end ;
12489: END
// export function SpawnDenis ; var tmp ; begin
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
// PrepareDenis ;
12494: CALL 2244 0 0
// if not Denis then
12498: LD_EXP 9
12502: NOT
12503: IFFALSE 12507
// exit ;
12505: GO 12728
// CenterNowOnUnits ( Denis ) ;
12507: LD_EXP 9
12511: PPUSH
12512: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 22
12523: PUSH
12524: LD_INT 1
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PPUSH
12531: CALL_OW 69
12535: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12536: LD_EXP 9
12540: PPUSH
12541: LD_VAR 0 2
12545: PPUSH
12546: LD_EXP 9
12550: PPUSH
12551: CALL_OW 74
12555: PPUSH
12556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12560: LD_INT 35
12562: PPUSH
12563: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 91
12579: PUSH
12580: LD_EXP 9
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: IFFALSE 12560
// SetSide ( Denis , 1 ) ;
12603: LD_EXP 9
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 235
// DialogueOn ;
12615: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12619: LD_EXP 9
12623: PPUSH
12624: LD_STRING DDen-Den-1
12626: PPUSH
12627: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12631: LD_EXP 1
12635: PPUSH
12636: LD_STRING DDen-JMM-1
12638: PPUSH
12639: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12643: LD_EXP 9
12647: PPUSH
12648: LD_STRING DDen-Den-2
12650: PPUSH
12651: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12655: LD_EXP 1
12659: PPUSH
12660: LD_STRING DDen-JMM-2
12662: PPUSH
12663: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12667: LD_EXP 9
12671: PPUSH
12672: LD_STRING DDen-Den-3
12674: PPUSH
12675: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12679: LD_EXP 1
12683: PPUSH
12684: LD_STRING DDen-JMM-3
12686: PPUSH
12687: CALL_OW 88
// DialogueOff ;
12691: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12695: LD_INT 36
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12708: LD_INT 15
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12721: LD_STRING MR
12723: PPUSH
12724: CALL_OW 337
// end ;
12728: LD_VAR 0 1
12732: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12733: LD_INT 22
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 30
12745: PUSH
12746: LD_INT 15
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: PUSH
12762: LD_EXP 9
12766: PPUSH
12767: CALL_OW 302
12771: AND
12772: PUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 463
12780: NOT
12781: AND
12782: IFFALSE 12811
12784: GO 12786
12786: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12787: LD_EXP 9
12791: PPUSH
12792: LD_STRING DR1-Den-1
12794: PPUSH
12795: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12799: LD_EXP 1
12803: PPUSH
12804: LD_STRING DR1-JMM-1
12806: PPUSH
12807: CALL_OW 88
// end ;
12811: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12812: LD_INT 15
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 321
12822: PUSH
12823: LD_INT 2
12825: EQUAL
12826: PUSH
12827: LD_EXP 9
12831: PPUSH
12832: CALL_OW 302
12836: AND
12837: PUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 463
12845: NOT
12846: AND
12847: IFFALSE 13056
12849: GO 12851
12851: DISABLE
// begin DialogueOn ;
12852: CALL_OW 6
// if IsOK ( Denis ) then
12856: LD_EXP 9
12860: PPUSH
12861: CALL_OW 302
12865: IFFALSE 12881
// Say ( Denis , DR2-Den-1 ) else
12867: LD_EXP 9
12871: PPUSH
12872: LD_STRING DR2-Den-1
12874: PPUSH
12875: CALL_OW 88
12879: GO 12940
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12881: LD_INT 22
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 25
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: PUSH
12921: LD_EXP 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: DIFF
12929: PPUSH
12930: LD_STRING DR2-Sci1-1
12932: PPUSH
12933: LD_STRING DR2-FSci1-1
12935: PPUSH
12936: CALL 7548 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12940: LD_EXP 1
12944: PPUSH
12945: LD_STRING DR2-JMM-1
12947: PPUSH
12948: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12952: LD_INT 22
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 26
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 23
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: PUSH
13003: LD_EXP 1
13007: PUSH
13008: LD_EXP 9
13012: PUSH
13013: LD_EXP 8
13017: PUSH
13018: LD_EXP 5
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: DIFF
13029: PPUSH
13030: LD_STRING DR2-Sol1-1
13032: PPUSH
13033: LD_STRING 
13035: PPUSH
13036: CALL 7548 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13040: LD_EXP 1
13044: PPUSH
13045: LD_STRING DR2-JMM-2
13047: PPUSH
13048: CALL_OW 88
// DialogueOff ;
13052: CALL_OW 7
// end ;
13056: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13057: LD_INT 22
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 36
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PUSH
13086: LD_INT 0
13088: EQUAL
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PUSH
13130: LD_INT 0
13132: GREATER
13133: AND
13134: PUSH
13135: LD_EXP 24
13139: PUSH
13140: LD_INT 0
13142: EQUAL
13143: AND
13144: PUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 463
13152: NOT
13153: AND
13154: IFFALSE 13291
13156: GO 13158
13158: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13159: LD_INT 22
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PPUSH
13205: CALL_OW 69
13209: PUSH
13210: LD_EXP 1
13214: PUSH
13215: LD_EXP 6
13219: PUSH
13220: LD_EXP 7
13224: PUSH
13225: LD_EXP 9
13229: PUSH
13230: LD_EXP 16
13234: PUSH
13235: LD_EXP 3
13239: PUSH
13240: LD_EXP 4
13244: PUSH
13245: LD_EXP 2
13249: PUSH
13250: LD_EXP 5
13254: PUSH
13255: LD_EXP 8
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: DIFF
13272: PPUSH
13273: LD_STRING D3a-Mech1-1
13275: PPUSH
13276: LD_STRING 
13278: PPUSH
13279: CALL 7548 0 3
// firstTower = 2 ;
13283: LD_ADDR_EXP 24
13287: PUSH
13288: LD_INT 2
13290: ST_TO_ADDR
// end ;
13291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 3
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PUSH
13321: LD_INT 0
13323: EQUAL
13324: IFFALSE 13455
13326: GO 13328
13328: DISABLE
13329: LD_INT 0
13331: PPUSH
// begin stop_talking := true ;
13332: LD_ADDR_OWVAR 56
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 21
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: FOR_IN
13426: IFFALSE 13445
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13428: LD_VAR 0 1
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 7500
13438: PPUSH
13439: CALL_OW 591
13443: GO 13425
13445: POP
13446: POP
// stop_talking := false ;
13447: LD_ADDR_OWVAR 56
13451: PUSH
13452: LD_INT 0
13454: ST_TO_ADDR
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13458: LD_INT 22
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 30
13470: PUSH
13471: LD_INT 36
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 33
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: AND
13527: PUSH
13528: CALL 14080 0 0
13532: AND
13533: PUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 463
13541: NOT
13542: AND
13543: IFFALSE 14077
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13555: LD_ADDR_VAR 0 3
13559: PUSH
13560: LD_INT 22
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: LD_INT 36
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13589: LD_ADDR_VAR 0 4
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 21
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 33
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: PPUSH
13629: CALL_OW 69
13633: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13634: LD_ADDR_VAR 0 5
13638: PUSH
13639: EMPTY
13640: ST_TO_ADDR
// for i in tmpControlTowers do
13641: LD_ADDR_VAR 0 1
13645: PUSH
13646: LD_VAR 0 3
13650: PUSH
13651: FOR_IN
13652: IFFALSE 14075
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13654: LD_EXP 1
13658: PPUSH
13659: CALL_OW 310
13663: PUSH
13664: LD_VAR 0 1
13668: EQUAL
13669: PUSH
13670: LD_EXP 1
13674: PPUSH
13675: CALL_OW 257
13679: PUSH
13680: LD_INT 3
13682: EQUAL
13683: AND
13684: IFFALSE 13818
// begin InGameOn ;
13686: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13690: LD_VAR 0 4
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13703: LD_EXP 1
13707: PPUSH
13708: LD_STRING D4a-JMM-1
13710: PPUSH
13711: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13715: LD_VAR 0 4
13719: PUSH
13720: LD_INT 1
13722: ARRAY
13723: PPUSH
13724: LD_EXP 1
13728: PPUSH
13729: CALL_OW 53
// wait ( 0 0$1 ) ;
13733: LD_INT 35
13735: PPUSH
13736: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13740: LD_VAR 0 4
13744: PUSH
13745: LD_INT 1
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 4
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: CALL_OW 250
13762: PUSH
13763: LD_INT 3
13765: PLUS
13766: PPUSH
13767: LD_VAR 0 4
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PPUSH
13776: CALL_OW 251
13780: PUSH
13781: LD_INT 2
13783: MINUS
13784: PPUSH
13785: CALL_OW 111
// wait ( 0 0$2 ) ;
13789: LD_INT 70
13791: PPUSH
13792: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13796: LD_EXP 1
13800: PPUSH
13801: LD_STRING D4b-JMM-1
13803: PPUSH
13804: CALL_OW 88
// InGameOff ;
13808: CALL_OW 9
// exit ;
13812: POP
13813: POP
13814: GO 14077
// end else
13816: GO 14073
// begin InGameOn ;
13818: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13822: LD_ADDR_VAR 0 5
13826: PUSH
13827: LD_VAR 0 1
13831: PPUSH
13832: CALL_OW 313
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 3
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: ST_TO_ADDR
// if not tmpMechanicInside then
13852: LD_VAR 0 5
13856: NOT
13857: IFFALSE 13861
// continue ;
13859: GO 13651
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13861: LD_VAR 0 5
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: CALL_OW 258
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13898
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13880: LD_VAR 0 5
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: PPUSH
13889: LD_STRING D4a-Mech1-1
13891: PPUSH
13892: CALL_OW 88
13896: GO 13914
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13898: LD_VAR 0 5
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: PPUSH
13907: LD_STRING D4a-FMech1-1
13909: PPUSH
13910: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13914: LD_VAR 0 4
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PPUSH
13923: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13927: LD_VAR 0 4
13931: PUSH
13932: LD_INT 1
13934: ARRAY
13935: PPUSH
13936: LD_VAR 0 5
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: CALL_OW 53
// wait ( 0 0$1 ) ;
13949: LD_INT 35
13951: PPUSH
13952: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13956: LD_VAR 0 4
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: PPUSH
13965: LD_VAR 0 4
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 250
13978: PUSH
13979: LD_INT 3
13981: PLUS
13982: PPUSH
13983: LD_VAR 0 4
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: PPUSH
13992: CALL_OW 251
13996: PUSH
13997: LD_INT 2
13999: MINUS
14000: PPUSH
14001: CALL_OW 111
// wait ( 0 0$2 ) ;
14005: LD_INT 70
14007: PPUSH
14008: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
14012: LD_VAR 0 5
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 258
14025: PUSH
14026: LD_INT 1
14028: EQUAL
14029: IFFALSE 14049
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14031: LD_VAR 0 5
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_STRING D4b-Mech1-1
14042: PPUSH
14043: CALL_OW 88
14047: GO 14065
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14049: LD_VAR 0 5
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: LD_STRING D4b-FMech1-1
14060: PPUSH
14061: CALL_OW 88
// InGameOff ;
14065: CALL_OW 9
// exit ;
14069: POP
14070: POP
14071: GO 14077
// end ; end ;
14073: GO 13651
14075: POP
14076: POP
// end ;
14077: PPOPN 5
14079: END
// function CheckMehInside ; var i , j , tmp ; begin
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
// result := false ;
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 30
14111: PUSH
14112: LD_INT 36
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: ST_TO_ADDR
// if not tmp then
14128: LD_VAR 0 4
14132: NOT
14133: IFFALSE 14137
// exit ;
14135: GO 14201
// for i in tmp do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_VAR 0 4
14146: PUSH
14147: FOR_IN
14148: IFFALSE 14199
// for j in UnitsInside ( i ) do
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_VAR 0 2
14159: PPUSH
14160: CALL_OW 313
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14195
// if GetClass ( j ) = class_mechanic then
14168: LD_VAR 0 3
14172: PPUSH
14173: CALL_OW 257
14177: PUSH
14178: LD_INT 3
14180: EQUAL
14181: IFFALSE 14193
// begin result := true ;
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: ST_TO_ADDR
// break ;
14191: GO 14195
// end ;
14193: GO 14165
14195: POP
14196: POP
14197: GO 14147
14199: POP
14200: POP
// end ;
14201: LD_VAR 0 1
14205: RET
// every 12 12$0 do
14206: GO 14208
14208: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14209: LD_INT 35
14211: PPUSH
14212: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 463
14223: NOT
14224: PUSH
14225: LD_INT 32
14227: PPUSH
14228: LD_INT 81
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PPUSH
14238: CALL_OW 70
14242: NOT
14243: AND
14244: PUSH
14245: LD_EXP 27
14249: PUSH
14250: LD_INT 10500
14252: LESS
14253: OR
14254: IFFALSE 14209
// PrepareKurt ;
14256: CALL 16889 0 0
// end ;
14260: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14261: LD_EXP 16
14265: PPUSH
14266: CALL_OW 302
14270: PUSH
14271: LD_EXP 16
14275: PPUSH
14276: CALL_OW 255
14280: PUSH
14281: LD_INT 1
14283: EQUAL
14284: AND
14285: PUSH
14286: LD_EXP 2
14290: AND
14291: IFFALSE 14456
14293: GO 14295
14295: DISABLE
// begin wait ( 0 0$50 ) ;
14296: LD_INT 1750
14298: PPUSH
14299: CALL_OW 67
// if not IsOk ( Joan ) then
14303: LD_EXP 16
14307: PPUSH
14308: CALL_OW 302
14312: NOT
14313: IFFALSE 14317
// exit ;
14315: GO 14456
// if IsOK ( Lisa ) then
14317: LD_EXP 2
14321: PPUSH
14322: CALL_OW 302
14326: IFFALSE 14456
// begin DialogueOn ;
14328: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14332: LD_EXP 2
14336: PPUSH
14337: LD_STRING D7-Lisa-1
14339: PPUSH
14340: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14344: LD_EXP 1
14348: PPUSH
14349: LD_STRING D7-JMM-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14356: LD_EXP 2
14360: PPUSH
14361: LD_STRING D7-Lisa-2
14363: PPUSH
14364: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14368: LD_EXP 1
14372: PPUSH
14373: LD_STRING D7-JMM-2
14375: PPUSH
14376: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14380: LD_EXP 2
14384: PPUSH
14385: LD_STRING D7-Lisa-3
14387: PPUSH
14388: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14392: LD_EXP 1
14396: PPUSH
14397: LD_STRING D7-JMM-3
14399: PPUSH
14400: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14404: LD_EXP 2
14408: PPUSH
14409: LD_STRING D7-Lisa-4
14411: PPUSH
14412: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14416: LD_EXP 1
14420: PPUSH
14421: LD_STRING D7-JMM-4
14423: PPUSH
14424: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14428: LD_EXP 1
14432: PPUSH
14433: LD_STRING D7-JMM-4a
14435: PPUSH
14436: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14440: LD_EXP 2
14444: PPUSH
14445: LD_STRING D7-Lisa-5
14447: PPUSH
14448: CALL_OW 88
// DialogueOff ;
14452: CALL_OW 7
// end ; end ;
14456: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14457: LD_EXP 14
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 91
14474: PUSH
14475: LD_EXP 14
14479: PUSH
14480: LD_INT 10
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 25
14523: PUSH
14524: LD_INT 4
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: PPUSH
14543: CALL_OW 69
14547: PUSH
14548: LD_INT 1
14550: GREATER
14551: AND
14552: IFFALSE 14569
14554: GO 14556
14556: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14557: LD_EXP 14
14561: PPUSH
14562: LD_STRING D5-Sol1-1
14564: PPUSH
14565: CALL_OW 88
14569: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14570: LD_INT 22
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 33
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: PUSH
14599: LD_INT 2
14601: GREATEREQUAL
14602: IFFALSE 14622
14604: GO 14606
14606: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14607: LD_STRING MRa
14609: PPUSH
14610: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14614: LD_ADDR_EXP 29
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// end ;
14622: END
// every 2 2$00 do var i , last ;
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
// begin last := 8 ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_INT 8
14637: ST_TO_ADDR
// for i := 1 to last do
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: DOUBLE
14644: LD_INT 1
14646: DEC
14647: ST_TO_ADDR
14648: LD_VAR 0 2
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14682
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14656: LD_INT 6300
14658: PPUSH
14659: LD_INT 12600
14661: PPUSH
14662: CALL_OW 12
14666: PPUSH
14667: CALL_OW 67
// PrepareRandoms ( i ) ;
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL 4240 0 1
// end ;
14680: GO 14653
14682: POP
14683: POP
// end ;
14684: PPOPN 2
14686: END
// every 5 5$20 do
14687: GO 14689
14689: DISABLE
// begin DialogueOn ;
14690: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14694: LD_EXP 10
14698: PPUSH
14699: LD_STRING D12a-Sci-1
14701: PPUSH
14702: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14706: LD_EXP 1
14710: PPUSH
14711: LD_STRING D12a-JMM-1
14713: PPUSH
14714: CALL_OW 88
// DialogueOff ;
14718: CALL_OW 7
// cratesStatus := 1 ;
14722: LD_ADDR_EXP 39
14726: PUSH
14727: LD_INT 1
14729: ST_TO_ADDR
// end ;
14730: END
// every 13 13$0 do
14731: GO 14733
14733: DISABLE
// begin DialogueOn ;
14734: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14738: LD_EXP 10
14742: PPUSH
14743: LD_STRING D12b-Sci-1
14745: PPUSH
14746: CALL_OW 94
// DialogueOff ;
14750: CALL_OW 7
// cratesStatus := 2 ;
14754: LD_ADDR_EXP 39
14758: PUSH
14759: LD_INT 2
14761: ST_TO_ADDR
// BuildBulldozer ;
14762: CALL 10591 0 0
// end ;
14766: END
// every 32 32$0 do
14767: GO 14769
14769: DISABLE
// begin DialogueOn ;
14770: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14774: LD_EXP 10
14778: PPUSH
14779: LD_STRING D12c-Sci-1
14781: PPUSH
14782: CALL_OW 94
// DialogueOff ;
14786: CALL_OW 7
// wait ( 3 3$0 ) ;
14790: LD_INT 6300
14792: PPUSH
14793: CALL_OW 67
// DialogueOn ;
14797: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14801: LD_EXP 10
14805: PPUSH
14806: LD_STRING D12d-Sci-1
14808: PPUSH
14809: CALL_OW 94
// DialogueOff ;
14813: CALL_OW 7
// cratesStatus = 1 ;
14817: LD_ADDR_EXP 39
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14825: CALL 21233 0 0
// wait ( 2 2$30 ) ;
14829: LD_INT 5250
14831: PPUSH
14832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14836: LD_INT 35
14838: PPUSH
14839: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 463
14850: NOT
14851: PUSH
14852: LD_INT 32
14854: PPUSH
14855: LD_INT 81
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 70
14869: NOT
14870: AND
14871: PUSH
14872: LD_EXP 27
14876: PUSH
14877: LD_INT 6300
14879: LESS
14880: OR
14881: IFFALSE 14836
// PrepareJoan ;
14883: CALL 3095 0 0
// end ;
14887: END
// every 42 42$0 do
14888: GO 14890
14890: DISABLE
// begin DialogueOn ;
14891: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14895: LD_EXP 10
14899: PPUSH
14900: LD_STRING D12e-Sci-1
14902: PPUSH
14903: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14907: LD_EXP 1
14911: PPUSH
14912: LD_STRING D12e-JMM-1
14914: PPUSH
14915: CALL_OW 88
// DialogueOff ;
14919: CALL_OW 7
// cratesStatus := 2 ;
14923: LD_ADDR_EXP 39
14927: PUSH
14928: LD_INT 2
14930: ST_TO_ADDR
// end ; end_of_file
14931: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14932: LD_VAR 0 1
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: LD_INT 3
14948: EQUAL
14949: AND
14950: IFFALSE 14960
// contactWithRussian := 1 ;
14952: LD_ADDR_EXP 23
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// end ;
14960: PPOPN 2
14962: END
// on BuildingComplete ( building ) do var i ;
14963: LD_INT 0
14965: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL_OW 266
14975: PUSH
14976: LD_INT 36
14978: EQUAL
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 255
14989: PUSH
14990: LD_INT 1
14992: EQUAL
14993: AND
14994: PUSH
14995: LD_EXP 24
14999: PUSH
15000: LD_INT 0
15002: EQUAL
15003: AND
15004: IFFALSE 15084
// begin firstTower = 1 ;
15006: LD_ADDR_EXP 24
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15014: LD_INT 22
15016: PUSH
15017: LD_INT 1
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 21
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 25
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 26
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 69
15064: PUSH
15065: LD_EXP 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: DIFF
15073: PPUSH
15074: LD_STRING D3b-Mech1-1
15076: PPUSH
15077: LD_STRING D3b-Mech1-1
15079: PPUSH
15080: CALL 7548 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 266
15093: PUSH
15094: LD_INT 0
15096: EQUAL
15097: PUSH
15098: LD_VAR 0 1
15102: PPUSH
15103: CALL_OW 255
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: AND
15112: IFFALSE 15126
// SetBName ( building , theta ) ;
15114: LD_VAR 0 1
15118: PPUSH
15119: LD_STRING theta
15121: PPUSH
15122: CALL_OW 500
// if GetSide ( building ) = 3 then
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 255
15135: PUSH
15136: LD_INT 3
15138: EQUAL
15139: IFFALSE 15179
// begin for i := 1 to 4 do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_INT 4
15153: PUSH
15154: FOR_TO
15155: IFFALSE 15177
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15157: LD_ADDR_EXP 32
15161: PUSH
15162: LD_EXP 32
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 3
15174: ST_TO_ADDR
15175: GO 15154
15177: POP
15178: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 255
15188: PUSH
15189: LD_INT 3
15191: EQUAL
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 266
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: PUSH
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 266
15216: PUSH
15217: LD_INT 2
15219: EQUAL
15220: OR
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 266
15231: PUSH
15232: LD_INT 4
15234: EQUAL
15235: OR
15236: PUSH
15237: EMPTY
15238: LIST
15239: AND
15240: IFFALSE 15251
// ComUpgrade ( building ) ;
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 255
15260: PUSH
15261: LD_INT 3
15263: EQUAL
15264: PUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 266
15274: PUSH
15275: LD_INT 32
15277: EQUAL
15278: AND
15279: IFFALSE 15320
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_INT 42
15288: PUSH
15289: LD_INT 43
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: LD_INT 46
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 1
15306: PPUSH
15307: LD_INT 4
15309: PPUSH
15310: CALL_OW 12
15314: ARRAY
15315: PPUSH
15316: CALL_OW 208
// end ;
15320: PPOPN 2
15322: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL 37945 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15332: LD_VAR 0 1
15336: PUSH
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 23
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: IN
15377: IFFALSE 15393
// killCounter := killCounter + 1 ;
15379: LD_ADDR_EXP 46
15383: PUSH
15384: LD_EXP 46
15388: PUSH
15389: LD_INT 1
15391: PLUS
15392: ST_TO_ADDR
// if unit in ruAttackersInForest then
15393: LD_VAR 0 1
15397: PUSH
15398: LD_EXP 49
15402: IN
15403: IFFALSE 15421
// ruAttackersInForest := ruAttackersInForest diff unit ;
15405: LD_ADDR_EXP 49
15409: PUSH
15410: LD_EXP 49
15414: PUSH
15415: LD_VAR 0 1
15419: DIFF
15420: ST_TO_ADDR
// if unit in ruAttackers then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_EXP 48
15430: IN
15431: IFFALSE 15449
// ruAttackers := ruAttackers diff unit ;
15433: LD_ADDR_EXP 48
15437: PUSH
15438: LD_EXP 48
15442: PUSH
15443: LD_VAR 0 1
15447: DIFF
15448: ST_TO_ADDR
// if unit = JMM then
15449: LD_VAR 0 1
15453: PUSH
15454: LD_EXP 1
15458: EQUAL
15459: IFFALSE 15468
// YouLost ( JMM ) ;
15461: LD_STRING JMM
15463: PPUSH
15464: CALL_OW 104
// if unit = Joan then
15468: LD_VAR 0 1
15472: PUSH
15473: LD_EXP 16
15477: EQUAL
15478: IFFALSE 15488
// JoanStatus := 0 ;
15480: LD_ADDR_EXP 17
15484: PUSH
15485: LD_INT 0
15487: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 255
15497: PUSH
15498: LD_INT 1
15500: EQUAL
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 247
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: AND
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 248
15526: PUSH
15527: LD_INT 1
15529: EQUAL
15530: AND
15531: IFFALSE 15547
// unitLost = unitLost + 1 ;
15533: LD_ADDR_EXP 31
15537: PUSH
15538: LD_EXP 31
15542: PUSH
15543: LD_INT 1
15545: PLUS
15546: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 255
15556: PUSH
15557: LD_INT 3
15559: EQUAL
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 247
15570: PUSH
15571: LD_INT 3
15573: EQUAL
15574: AND
15575: PUSH
15576: LD_VAR 0 1
15580: PPUSH
15581: CALL_OW 266
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: LD_INT 5
15591: PUSH
15592: LD_INT 32
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: IN
15604: AND
15605: IFFALSE 15691
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15607: LD_ADDR_EXP 32
15611: PUSH
15612: LD_EXP 32
15616: PUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 266
15626: ADD
15627: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15628: LD_ADDR_EXP 32
15632: PUSH
15633: LD_EXP 32
15637: PUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 250
15647: ADD
15648: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15649: LD_ADDR_EXP 32
15653: PUSH
15654: LD_EXP 32
15658: PUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 251
15668: ADD
15669: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15670: LD_ADDR_EXP 32
15674: PUSH
15675: LD_EXP 32
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 254
15689: ADD
15690: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15691: LD_EXP 47
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 257
15705: PUSH
15706: LD_INT 3
15708: EQUAL
15709: AND
15710: PUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 255
15720: PUSH
15721: LD_INT 3
15723: EQUAL
15724: AND
15725: PUSH
15726: LD_INT 21
15728: PPUSH
15729: CALL_OW 302
15733: AND
15734: PUSH
15735: LD_INT 21
15737: PPUSH
15738: CALL_OW 255
15742: PUSH
15743: LD_INT 3
15745: EQUAL
15746: AND
15747: IFFALSE 15829
// begin ruMechCounter := ruMechCounter - 1 ;
15749: LD_ADDR_EXP 47
15753: PUSH
15754: LD_EXP 47
15758: PUSH
15759: LD_INT 1
15761: MINUS
15762: ST_TO_ADDR
// uc_side := 3 ;
15763: LD_ADDR_OWVAR 20
15767: PUSH
15768: LD_INT 3
15770: ST_TO_ADDR
// uc_nation := 3 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 3
15778: ST_TO_ADDR
// hc_gallery :=  ;
15779: LD_ADDR_OWVAR 33
15783: PUSH
15784: LD_STRING 
15786: ST_TO_ADDR
// hc_name :=  ;
15787: LD_ADDR_OWVAR 26
15791: PUSH
15792: LD_STRING 
15794: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15795: LD_INT 0
15797: PPUSH
15798: LD_EXP 35
15802: PPUSH
15803: LD_EXP 36
15807: PPUSH
15808: CALL_OW 12
15812: PPUSH
15813: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15817: CALL_OW 44
15821: PPUSH
15822: LD_INT 21
15824: PPUSH
15825: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15829: LD_VAR 0 1
15833: PPUSH
15834: CALL_OW 255
15838: PUSH
15839: LD_INT 3
15841: EQUAL
15842: PUSH
15843: LD_VAR 0 1
15847: PPUSH
15848: CALL_OW 264
15852: PUSH
15853: LD_INT 52
15855: EQUAL
15856: AND
15857: PUSH
15858: LD_INT 21
15860: PPUSH
15861: CALL_OW 302
15865: AND
15866: PUSH
15867: LD_INT 21
15869: PPUSH
15870: CALL_OW 255
15874: PUSH
15875: LD_INT 3
15877: EQUAL
15878: AND
15879: IFFALSE 15900
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15881: LD_INT 21
15883: PPUSH
15884: LD_INT 22
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_INT 52
15895: PPUSH
15896: CALL_OW 125
// end ;
15900: PPOPN 1
15902: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15903: LD_INT 0
15905: PPUSH
15906: PPUSH
15907: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15908: LD_VAR 0 1
15912: PPUSH
15913: LD_VAR 0 2
15917: PPUSH
15918: CALL 38003 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 255
15931: PUSH
15932: LD_INT 3
15934: EQUAL
15935: PUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 264
15945: PUSH
15946: LD_INT 51
15948: PUSH
15949: LD_INT 52
15951: PUSH
15952: LD_INT 53
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: IN
15960: NOT
15961: AND
15962: IFFALSE 15993
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15964: LD_ADDR_EXP 48
15968: PUSH
15969: LD_EXP 48
15973: PPUSH
15974: LD_EXP 48
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: PPUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 1
15992: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 264
16002: PUSH
16003: LD_INT 53
16005: EQUAL
16006: IFFALSE 16161
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: LD_INT 60
16015: PPUSH
16016: LD_INT 85
16018: PPUSH
16019: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_INT 43
16030: PPUSH
16031: LD_INT 69
16033: PPUSH
16034: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 37
16045: PPUSH
16046: LD_INT 46
16048: PPUSH
16049: CALL_OW 171
// wait ( 0 0$1 ) ;
16053: LD_INT 35
16055: PPUSH
16056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16060: LD_INT 35
16062: PPUSH
16063: CALL_OW 67
// until not HasTask ( vehicle ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 314
16076: NOT
16077: IFFALSE 16060
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_INT 34
16086: PPUSH
16087: CALL 10643 0 2
// repeat wait ( 0 0$1 ) ;
16091: LD_INT 35
16093: PPUSH
16094: CALL_OW 67
// until not HasTask ( vehicle ) ;
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 314
16107: NOT
16108: IFFALSE 16091
// un := IsDrivenBy ( vehicle ) ;
16110: LD_ADDR_VAR 0 4
16114: PUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 311
16124: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16125: LD_VAR 0 4
16129: PPUSH
16130: LD_INT 96
16132: PPUSH
16133: LD_INT 77
16135: PPUSH
16136: CALL_OW 171
// AddComExitVehicle ( un ) ;
16140: LD_VAR 0 4
16144: PPUSH
16145: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16149: LD_VAR 0 4
16153: PPUSH
16154: LD_INT 17
16156: PPUSH
16157: CALL_OW 180
// end ; end ;
16161: PPOPN 5
16163: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 255
16173: PUSH
16174: LD_INT 3
16176: EQUAL
16177: IFFALSE 16208
// begin tamedApemans = tamedApemans + 1 ;
16179: LD_ADDR_EXP 33
16183: PUSH
16184: LD_EXP 33
16188: PUSH
16189: LD_INT 1
16191: PLUS
16192: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_INT 106
16200: PPUSH
16201: LD_INT 85
16203: PPUSH
16204: CALL_OW 111
// end ; end ;
16208: PPOPN 2
16210: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 255
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 255
16234: PUSH
16235: LD_INT 3
16237: EQUAL
16238: AND
16239: PUSH
16240: LD_INT 21
16242: PPUSH
16243: CALL_OW 302
16247: AND
16248: IFFALSE 16262
// ComEnterUnit ( human , rufab ) ;
16250: LD_VAR 0 1
16254: PPUSH
16255: LD_INT 21
16257: PPUSH
16258: CALL_OW 120
// end ;
16262: PPOPN 4
16264: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16265: LD_VAR 0 1
16269: PUSH
16270: LD_INT 21
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 255
16283: PUSH
16284: LD_INT 3
16286: EQUAL
16287: AND
16288: IFFALSE 16302
// SetLives ( human , 1000 ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_INT 1000
16297: PPUSH
16298: CALL_OW 234
// end ;
16302: PPOPN 2
16304: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 37987 0 1
// end ; end_of_file
16314: PPOPN 1
16316: END
// every 0 0$30 trigger cratesStatus = 1 do
16317: LD_EXP 39
16321: PUSH
16322: LD_INT 1
16324: EQUAL
16325: IFFALSE 16378
16327: GO 16329
16329: DISABLE
// begin enable ;
16330: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16331: LD_INT 350
16333: PUSH
16334: LD_INT 875
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: CALL_OW 12
16351: ARRAY
16352: PPUSH
16353: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16357: LD_INT 1
16359: PPUSH
16360: LD_INT 5
16362: PPUSH
16363: CALL_OW 12
16367: PPUSH
16368: LD_INT 7
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 55
// end ;
16378: END
// every 1 1$0 trigger cratesStatus = 2 do
16379: LD_EXP 39
16383: PUSH
16384: LD_INT 2
16386: EQUAL
16387: IFFALSE 16470
16389: GO 16391
16391: DISABLE
// begin enable ;
16392: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16393: LD_INT 3150
16395: PUSH
16396: LD_INT 4550
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: PPUSH
16406: LD_INT 2
16408: PPUSH
16409: CALL_OW 12
16413: ARRAY
16414: PPUSH
16415: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16419: LD_INT 2
16421: PUSH
16422: LD_INT 5
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 2
16434: PPUSH
16435: CALL_OW 12
16439: ARRAY
16440: PPUSH
16441: LD_INT 6
16443: PUSH
16444: LD_INT 7
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 1
16453: PPUSH
16454: LD_INT 2
16456: PPUSH
16457: CALL_OW 12
16461: ARRAY
16462: PPUSH
16463: LD_INT 1
16465: PPUSH
16466: CALL_OW 55
// end ;
16470: END
// every 0 0$30 + 0 0$10 do
16471: GO 16473
16473: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16474: LD_INT 4
16476: PUSH
16477: LD_INT 5
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: PPUSH
16487: LD_INT 2
16489: PPUSH
16490: CALL_OW 12
16494: ARRAY
16495: PPUSH
16496: LD_INT 7
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 55
// Wait ( 0 0$15 ) ;
16506: LD_INT 525
16508: PPUSH
16509: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16513: LD_INT 4
16515: PUSH
16516: LD_INT 5
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 2
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PPUSH
16535: LD_INT 7
16537: PPUSH
16538: LD_INT 1
16540: PPUSH
16541: CALL_OW 55
// Wait ( 0 0$20 ) ;
16545: LD_INT 700
16547: PPUSH
16548: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16552: LD_INT 4
16554: PUSH
16555: LD_INT 5
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_INT 2
16567: PPUSH
16568: CALL_OW 12
16572: ARRAY
16573: PPUSH
16574: LD_INT 7
16576: PPUSH
16577: LD_INT 1
16579: PPUSH
16580: CALL_OW 55
// end ; end_of_file
16584: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16585: LD_EXP 25
16589: PUSH
16590: LD_INT 1
16592: EQUAL
16593: IFFALSE 16886
16595: GO 16597
16597: DISABLE
16598: LD_INT 0
16600: PPUSH
16601: PPUSH
16602: PPUSH
// begin enable ;
16603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: LD_INT 22
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 21
16621: PUSH
16622: LD_INT 3
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 30
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 69
16666: ST_TO_ADDR
// for i in tmp do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_VAR 0 2
16676: PUSH
16677: FOR_IN
16678: IFFALSE 16711
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_VAR 0 3
16689: PUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 274
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 275
16707: PLUS
16708: ST_TO_ADDR
16709: GO 16677
16711: POP
16712: POP
// strings = [ ] ;
16713: LD_ADDR_EXP 28
16717: PUSH
16718: EMPTY
16719: ST_TO_ADDR
// if tmp = 0 then
16720: LD_VAR 0 2
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: IFFALSE 16753
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16730: LD_ADDR_EXP 28
16734: PUSH
16735: LD_EXP 28
16739: PUSH
16740: LD_STRING #Am06-1
16742: PUSH
16743: LD_EXP 26
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: ADD
16752: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16753: LD_VAR 0 2
16757: PUSH
16758: LD_EXP 26
16762: PUSH
16763: LD_VAR 0 3
16767: GREATER
16768: AND
16769: IFFALSE 16800
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16771: LD_ADDR_EXP 28
16775: PUSH
16776: LD_EXP 28
16780: PUSH
16781: LD_STRING #Am06-1
16783: PUSH
16784: LD_EXP 26
16788: PUSH
16789: LD_VAR 0 3
16793: MINUS
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: ADD
16799: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16800: LD_VAR 0 2
16804: PUSH
16805: LD_EXP 26
16809: PUSH
16810: LD_VAR 0 3
16814: LESSEQUAL
16815: AND
16816: IFFALSE 16839
// strings = strings ^ [ #Am06-1 , 0 ] ;
16818: LD_ADDR_EXP 28
16822: PUSH
16823: LD_EXP 28
16827: PUSH
16828: LD_STRING #Am06-1
16830: PUSH
16831: LD_INT 0
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ADD
16838: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16839: LD_ADDR_EXP 27
16843: PUSH
16844: LD_EXP 27
16848: PUSH
16849: LD_INT 35
16851: MINUS
16852: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16853: LD_ADDR_EXP 28
16857: PUSH
16858: LD_EXP 28
16862: PUSH
16863: LD_STRING #Am06-2
16865: PUSH
16866: LD_EXP 27
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: ADD
16875: ST_TO_ADDR
// display_strings = strings ;
16876: LD_ADDR_OWVAR 47
16880: PUSH
16881: LD_EXP 28
16885: ST_TO_ADDR
// end ; end_of_file
16886: PPOPN 3
16888: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16889: LD_INT 0
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16899: LD_ADDR_VAR 0 3
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 30
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16951: LD_INT 35
16953: PPUSH
16954: CALL_OW 67
// until depot ;
16958: LD_VAR 0 3
16962: IFFALSE 16899
// forceJMM := false ;
16964: LD_ADDR_VAR 0 8
16968: PUSH
16969: LD_INT 0
16971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16972: LD_INT 35
16974: PPUSH
16975: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16979: LD_ADDR_VAR 0 4
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 91
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PUSH
17006: LD_INT 15
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 25
17049: PUSH
17050: LD_INT 3
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 25
17059: PUSH
17060: LD_INT 4
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 3
17076: PUSH
17077: LD_INT 54
17079: PUSH
17080: EMPTY
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: LD_INT 55
17092: PUSH
17093: EMPTY
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: PUSH
17113: LD_EXP 2
17117: PUSH
17118: LD_EXP 3
17122: PUSH
17123: LD_EXP 4
17127: PUSH
17128: LD_EXP 5
17132: PUSH
17133: LD_EXP 7
17137: PUSH
17138: LD_EXP 8
17142: PUSH
17143: LD_EXP 9
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: DIFF
17157: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17158: LD_EXP 27
17162: PUSH
17163: LD_INT 21000
17165: LESS
17166: IFFALSE 17178
// begin forceJMM := true ;
17168: LD_ADDR_VAR 0 8
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// break ;
17176: GO 17194
// end ; until tmp and not InBattle ( 1 ) ;
17178: LD_VAR 0 4
17182: PUSH
17183: LD_INT 1
17185: PPUSH
17186: CALL_OW 463
17190: NOT
17191: AND
17192: IFFALSE 16972
// if not forceJMM then
17194: LD_VAR 0 8
17198: NOT
17199: IFFALSE 17227
// tmp := tmp [ rand ( 1 , tmp ) ] else
17201: LD_ADDR_VAR 0 4
17205: PUSH
17206: LD_VAR 0 4
17210: PUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_VAR 0 4
17218: PPUSH
17219: CALL_OW 12
17223: ARRAY
17224: ST_TO_ADDR
17225: GO 17237
// tmp := JMM ;
17227: LD_ADDR_VAR 0 4
17231: PUSH
17232: LD_EXP 1
17236: ST_TO_ADDR
// blockSpawn := 1 ;
17237: LD_ADDR_EXP 30
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// uc_side := 2 ;
17245: LD_ADDR_OWVAR 20
17249: PUSH
17250: LD_INT 2
17252: ST_TO_ADDR
// uc_nation := 2 ;
17253: LD_ADDR_OWVAR 21
17257: PUSH
17258: LD_INT 2
17260: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17261: LD_ADDR_EXP 20
17265: PUSH
17266: LD_STRING Kurt
17268: PPUSH
17269: LD_INT 0
17271: PPUSH
17272: LD_STRING 
17274: PPUSH
17275: CALL 43279 0 3
17279: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17280: LD_EXP 20
17284: PPUSH
17285: LD_VAR 0 4
17289: PPUSH
17290: CALL_OW 250
17294: PPUSH
17295: LD_VAR 0 4
17299: PPUSH
17300: CALL_OW 251
17304: PPUSH
17305: LD_INT 5
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 50
// InGameOn ;
17315: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17319: LD_EXP 20
17323: PPUSH
17324: CALL_OW 87
// wait ( 0 0$2 ) ;
17328: LD_INT 70
17330: PPUSH
17331: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17335: LD_EXP 20
17339: PPUSH
17340: LD_VAR 0 4
17344: PPUSH
17345: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17349: LD_VAR 0 4
17353: PPUSH
17354: LD_EXP 20
17358: PPUSH
17359: CALL_OW 112
// wait ( 0 0$1 ) ;
17363: LD_INT 35
17365: PPUSH
17366: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17370: LD_VAR 0 4
17374: PPUSH
17375: LD_EXP 20
17379: PPUSH
17380: CALL_OW 119
// DialogueOn ;
17384: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17388: LD_EXP 20
17392: PPUSH
17393: LD_STRING D2-Kurt-1
17395: PPUSH
17396: CALL_OW 88
// if tmp = JMM then
17400: LD_VAR 0 4
17404: PUSH
17405: LD_EXP 1
17409: EQUAL
17410: IFFALSE 17502
// begin Say ( JMM , D2-JMM-1 ) ;
17412: LD_EXP 1
17416: PPUSH
17417: LD_STRING D2-JMM-1
17419: PPUSH
17420: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17424: LD_EXP 20
17428: PPUSH
17429: LD_STRING D2-Kurt-2
17431: PPUSH
17432: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17436: LD_EXP 1
17440: PPUSH
17441: LD_STRING D2-JMM-2
17443: PPUSH
17444: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17448: LD_EXP 20
17452: PPUSH
17453: LD_STRING D2-Kurt-3
17455: PPUSH
17456: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17460: LD_EXP 1
17464: PPUSH
17465: LD_STRING D2-JMM-3
17467: PPUSH
17468: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17472: LD_EXP 20
17476: PPUSH
17477: LD_STRING D2-Kurt-4
17479: PPUSH
17480: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17484: LD_EXP 1
17488: PPUSH
17489: LD_STRING D2-JMM-4
17491: PPUSH
17492: CALL_OW 88
// DialogueOff ;
17496: CALL_OW 7
// end else
17500: GO 17730
// begin if GetSex ( tmp ) = 1 then
17502: LD_VAR 0 4
17506: PPUSH
17507: CALL_OW 258
17511: PUSH
17512: LD_INT 1
17514: EQUAL
17515: IFFALSE 17531
// Say ( tmp , D2-Sol1-1 ) else
17517: LD_VAR 0 4
17521: PPUSH
17522: LD_STRING D2-Sol1-1
17524: PPUSH
17525: CALL_OW 88
17529: GO 17543
// Say ( tmp , D2-FSol1-1 ) ;
17531: LD_VAR 0 4
17535: PPUSH
17536: LD_STRING D2-FSol1-1
17538: PPUSH
17539: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17543: LD_EXP 20
17547: PPUSH
17548: LD_STRING D2-Kurt-2
17550: PPUSH
17551: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17555: LD_VAR 0 4
17559: PPUSH
17560: CALL_OW 258
17564: PUSH
17565: LD_INT 1
17567: EQUAL
17568: IFFALSE 17584
// Say ( tmp , D2-Sol1-2 ) else
17570: LD_VAR 0 4
17574: PPUSH
17575: LD_STRING D2-Sol1-2
17577: PPUSH
17578: CALL_OW 88
17582: GO 17596
// Say ( tmp , D2-FSol1-2 ) ;
17584: LD_VAR 0 4
17588: PPUSH
17589: LD_STRING D2-FSol1-2
17591: PPUSH
17592: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17596: LD_EXP 20
17600: PPUSH
17601: LD_STRING D2-Kurt-3
17603: PPUSH
17604: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17608: LD_VAR 0 4
17612: PPUSH
17613: CALL_OW 258
17617: PUSH
17618: LD_INT 1
17620: EQUAL
17621: IFFALSE 17637
// Say ( tmp , D2-Sol1-3 ) else
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_STRING D2-Sol1-3
17630: PPUSH
17631: CALL_OW 88
17635: GO 17649
// Say ( tmp , D2-FSol1-3 ) ;
17637: LD_VAR 0 4
17641: PPUSH
17642: LD_STRING D2-FSol1-3
17644: PPUSH
17645: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17649: LD_EXP 20
17653: PPUSH
17654: LD_STRING D2-Kurt-4
17656: PPUSH
17657: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17661: LD_VAR 0 4
17665: PPUSH
17666: CALL_OW 258
17670: PUSH
17671: LD_INT 1
17673: EQUAL
17674: IFFALSE 17702
// begin Say ( tmp , D2-Sol1-4 ) ;
17676: LD_VAR 0 4
17680: PPUSH
17681: LD_STRING D2-Sol1-4
17683: PPUSH
17684: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17688: LD_VAR 0 4
17692: PPUSH
17693: LD_STRING D2-Sol1-5
17695: PPUSH
17696: CALL_OW 88
// end else
17700: GO 17726
// begin Say ( tmp , D2-FSol1-4 ) ;
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_STRING D2-FSol1-4
17709: PPUSH
17710: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17714: LD_VAR 0 4
17718: PPUSH
17719: LD_STRING D2-FSol1-5
17721: PPUSH
17722: CALL_OW 88
// end ; DialogueOff ;
17726: CALL_OW 7
// end ; dec := ShowQuery1 ;
17730: LD_ADDR_VAR 0 6
17734: PUSH
17735: CALL 8033 0 0
17739: ST_TO_ADDR
// if dec = 1 then
17740: LD_VAR 0 6
17744: PUSH
17745: LD_INT 1
17747: EQUAL
17748: IFFALSE 17810
// begin DialogueOn ;
17750: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17754: LD_EXP 20
17758: PPUSH
17759: LD_STRING D2a-Kurt-1
17761: PPUSH
17762: CALL_OW 88
// DialogueOff ;
17766: CALL_OW 7
// InGameOff ;
17770: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17774: LD_INT 1
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: LD_INT 2
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17790: LD_EXP 20
17794: PPUSH
17795: LD_INT 8
17797: PPUSH
17798: CALL_OW 113
// readyToEscape := 1 ;
17802: LD_ADDR_EXP 22
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// end ; if dec = 2 then
17810: LD_VAR 0 6
17814: PUSH
17815: LD_INT 2
17817: EQUAL
17818: IFFALSE 18286
// begin DialogueOn ;
17820: CALL_OW 6
// if tmp = JMM then
17824: LD_VAR 0 4
17828: PUSH
17829: LD_EXP 1
17833: EQUAL
17834: IFFALSE 17890
// begin Say ( JMM , D2b-JMM-1 ) ;
17836: LD_EXP 1
17840: PPUSH
17841: LD_STRING D2b-JMM-1
17843: PPUSH
17844: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17848: LD_EXP 20
17852: PPUSH
17853: LD_STRING D2b-Kurt-1
17855: PPUSH
17856: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17860: LD_EXP 1
17864: PPUSH
17865: LD_STRING D2b-JMM-2
17867: PPUSH
17868: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17872: LD_EXP 20
17876: PPUSH
17877: LD_STRING D2b-Kurt-2
17879: PPUSH
17880: CALL_OW 88
// DialogueOff ;
17884: CALL_OW 7
// end else
17888: GO 18041
// begin if GetSex ( tmp ) = 1 then
17890: LD_VAR 0 4
17894: PPUSH
17895: CALL_OW 258
17899: PUSH
17900: LD_INT 1
17902: EQUAL
17903: IFFALSE 17919
// Say ( tmp , D2b-Sol1-1 ) else
17905: LD_VAR 0 4
17909: PPUSH
17910: LD_STRING D2b-Sol1-1
17912: PPUSH
17913: CALL_OW 88
17917: GO 17931
// Say ( tmp , D2b-FSol1-1 ) ;
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_STRING D2b-FSol1-1
17926: PPUSH
17927: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17931: LD_EXP 20
17935: PPUSH
17936: LD_STRING D2b-Kurt-1
17938: PPUSH
17939: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17943: LD_VAR 0 4
17947: PPUSH
17948: CALL_OW 258
17952: PUSH
17953: LD_INT 1
17955: EQUAL
17956: IFFALSE 17972
// Say ( tmp , D2b-Sol1-2 ) else
17958: LD_VAR 0 4
17962: PPUSH
17963: LD_STRING D2b-Sol1-2
17965: PPUSH
17966: CALL_OW 88
17970: GO 17984
// Say ( tmp , D2b-FSol1-2 ) ;
17972: LD_VAR 0 4
17976: PPUSH
17977: LD_STRING D2b-FSol1-2
17979: PPUSH
17980: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17984: LD_EXP 20
17988: PPUSH
17989: LD_STRING D2b-Kurt-2
17991: PPUSH
17992: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17996: LD_VAR 0 4
18000: PPUSH
18001: CALL_OW 258
18005: PUSH
18006: LD_INT 1
18008: EQUAL
18009: IFFALSE 18025
// Say ( tmp , D2c-Sol1-2 ) else
18011: LD_VAR 0 4
18015: PPUSH
18016: LD_STRING D2c-Sol1-2
18018: PPUSH
18019: CALL_OW 88
18023: GO 18037
// Say ( tmp , D2c-FSol1-2 ) ;
18025: LD_VAR 0 4
18029: PPUSH
18030: LD_STRING D2c-FSol1-2
18032: PPUSH
18033: CALL_OW 88
// DialogueOff ;
18037: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18041: LD_ADDR_VAR 0 7
18045: PUSH
18046: CALL 8054 0 0
18050: ST_TO_ADDR
// if dec2 = 1 then
18051: LD_VAR 0 7
18055: PUSH
18056: LD_INT 1
18058: EQUAL
18059: IFFALSE 18121
// begin DialogueOn ;
18061: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18065: LD_EXP 20
18069: PPUSH
18070: LD_STRING D2a-Kurt-1
18072: PPUSH
18073: CALL_OW 88
// DialogueOff ;
18077: CALL_OW 7
// InGameOff ;
18081: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18085: LD_INT 1
18087: PPUSH
18088: LD_INT 2
18090: PPUSH
18091: LD_INT 2
18093: PPUSH
18094: LD_INT 1
18096: PPUSH
18097: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18101: LD_EXP 20
18105: PPUSH
18106: LD_INT 8
18108: PPUSH
18109: CALL_OW 113
// readyToEscape := 1 ;
18113: LD_ADDR_EXP 22
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; if dec2 = 2 then
18121: LD_VAR 0 7
18125: PUSH
18126: LD_INT 2
18128: EQUAL
18129: IFFALSE 18286
// begin if tmp = JMM then
18131: LD_VAR 0 4
18135: PUSH
18136: LD_EXP 1
18140: EQUAL
18141: IFFALSE 18201
// begin DialogueOn ;
18143: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_STRING D2c-JMM-1
18154: PPUSH
18155: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18159: LD_EXP 20
18163: PPUSH
18164: LD_STRING D2c-Kurt-1
18166: PPUSH
18167: CALL_OW 88
// DialogueOff ;
18171: CALL_OW 7
// InGameOff ;
18175: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18179: LD_EXP 20
18183: PPUSH
18184: LD_INT 8
18186: PPUSH
18187: CALL_OW 113
// readyToEscape := 1 ;
18191: LD_ADDR_EXP 22
18195: PUSH
18196: LD_INT 1
18198: ST_TO_ADDR
// end else
18199: GO 18286
// begin DialogueOn ;
18201: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18205: LD_VAR 0 4
18209: PPUSH
18210: CALL_OW 258
18214: PUSH
18215: LD_INT 1
18217: EQUAL
18218: IFFALSE 18234
// Say ( tmp , D2c-Sol1-1 ) else
18220: LD_VAR 0 4
18224: PPUSH
18225: LD_STRING D2c-Sol1-1
18227: PPUSH
18228: CALL_OW 88
18232: GO 18246
// Say ( tmp , D2c-FSol1-1 ) ;
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_STRING D2c-FSol1-1
18241: PPUSH
18242: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18246: LD_EXP 20
18250: PPUSH
18251: LD_STRING D2c-Kurt-1
18253: PPUSH
18254: CALL_OW 88
// DialogueOff ;
18258: CALL_OW 7
// InGameOff ;
18262: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18266: LD_EXP 20
18270: PPUSH
18271: LD_INT 8
18273: PPUSH
18274: CALL_OW 113
// readyToEscape := 1 ;
18278: LD_ADDR_EXP 22
18282: PUSH
18283: LD_INT 1
18285: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18286: LD_VAR 0 6
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: IFFALSE 18455
// begin DialogueOn ;
18296: CALL_OW 6
// if tmp = JMM then
18300: LD_VAR 0 4
18304: PUSH
18305: LD_EXP 1
18309: EQUAL
18310: IFFALSE 18370
// begin DialogueOn ;
18312: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18316: LD_EXP 1
18320: PPUSH
18321: LD_STRING D2c-JMM-1
18323: PPUSH
18324: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18328: LD_EXP 20
18332: PPUSH
18333: LD_STRING D2c-Kurt-1
18335: PPUSH
18336: CALL_OW 88
// DialogueOff ;
18340: CALL_OW 7
// InGameOff ;
18344: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18348: LD_EXP 20
18352: PPUSH
18353: LD_INT 8
18355: PPUSH
18356: CALL_OW 113
// readyToEscape := 1 ;
18360: LD_ADDR_EXP 22
18364: PUSH
18365: LD_INT 1
18367: ST_TO_ADDR
// end else
18368: GO 18455
// begin DialogueOn ;
18370: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18374: LD_VAR 0 4
18378: PPUSH
18379: CALL_OW 258
18383: PUSH
18384: LD_INT 1
18386: EQUAL
18387: IFFALSE 18403
// Say ( tmp , D2c-Sol1-1 ) else
18389: LD_VAR 0 4
18393: PPUSH
18394: LD_STRING D2c-Sol1-1
18396: PPUSH
18397: CALL_OW 88
18401: GO 18415
// Say ( tmp , D2c-FSol1-1 ) ;
18403: LD_VAR 0 4
18407: PPUSH
18408: LD_STRING D2c-FSol1-1
18410: PPUSH
18411: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18415: LD_EXP 20
18419: PPUSH
18420: LD_STRING D2c-Kurt-1
18422: PPUSH
18423: CALL_OW 88
// DialogueOff ;
18427: CALL_OW 7
// InGameOff ;
18431: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18435: LD_EXP 20
18439: PPUSH
18440: LD_INT 8
18442: PPUSH
18443: CALL_OW 113
// readyToEscape := 1 ;
18447: LD_ADDR_EXP 22
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18455: LD_ADDR_EXP 30
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18463: LD_INT 35
18465: PPUSH
18466: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18470: LD_EXP 20
18474: PPUSH
18475: LD_INT 8
18477: PPUSH
18478: CALL_OW 308
18482: PUSH
18483: LD_EXP 22
18487: AND
18488: PUSH
18489: LD_EXP 20
18493: PPUSH
18494: CALL_OW 301
18498: OR
18499: IFFALSE 18463
// if IsDead ( Kurt ) then
18501: LD_EXP 20
18505: PPUSH
18506: CALL_OW 301
18510: IFFALSE 18514
// exit ;
18512: GO 18569
// RemoveUnit ( Kurt ) ;
18514: LD_EXP 20
18518: PPUSH
18519: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18523: LD_EXP 20
18527: PPUSH
18528: LD_STRING Kurt
18530: PPUSH
18531: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18535: LD_INT 1
18537: PPUSH
18538: LD_INT 2
18540: PPUSH
18541: CALL_OW 81
18545: PUSH
18546: LD_INT 0
18548: EQUAL
18549: IFFALSE 18561
// kurtStatus = 1 else
18551: LD_ADDR_EXP 21
18555: PUSH
18556: LD_INT 1
18558: ST_TO_ADDR
18559: GO 18569
// kurtStatus = 2 ;
18561: LD_ADDR_EXP 21
18565: PUSH
18566: LD_INT 2
18568: ST_TO_ADDR
// end ; end_of_file
18569: LD_VAR 0 1
18573: RET
// every 0 0$2 do
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18578: LD_INT 3
18580: PPUSH
18581: LD_INT 2
18583: PPUSH
18584: LD_INT 10
18586: PPUSH
18587: LD_EXP 32
18591: PPUSH
18592: CALL 8485 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18596: LD_INT 3
18598: PPUSH
18599: LD_INT 12
18601: PPUSH
18602: LD_EXP 32
18606: PPUSH
18607: CALL 10088 0 3
// if disableHealAI = 0 then
18611: LD_EXP 34
18615: PUSH
18616: LD_INT 0
18618: EQUAL
18619: IFFALSE 18640
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18621: LD_INT 3
18623: PPUSH
18624: LD_INT 9
18626: PPUSH
18627: LD_INT 10
18629: PPUSH
18630: LD_INT 32
18632: PUSH
18633: EMPTY
18634: LIST
18635: PPUSH
18636: CALL 8852 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18640: LD_INT 3
18642: PPUSH
18643: LD_INT 51
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL 9541 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18653: LD_INT 2
18655: PPUSH
18656: CALL_OW 303
18660: PUSH
18661: LD_INT 2
18663: PPUSH
18664: CALL_OW 255
18668: PUSH
18669: LD_INT 1
18671: EQUAL
18672: OR
18673: IFFALSE 18687
// DefendDepot ( 3 , rudepo ) else
18675: LD_INT 3
18677: PPUSH
18678: LD_INT 2
18680: PPUSH
18681: CALL 9368 0 2
18685: GO 18697
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18687: LD_INT 3
18689: PPUSH
18690: LD_INT 10
18692: PPUSH
18693: CALL 9659 0 2
// end ;
18697: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18698: LD_INT 22
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 21
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 55
18720: PUSH
18721: EMPTY
18722: LIST
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: LD_INT 34
18729: PUSH
18730: LD_INT 51
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: PPUSH
18747: CALL_OW 69
18751: PUSH
18752: LD_INT 0
18754: EQUAL
18755: PUSH
18756: LD_INT 21
18758: PPUSH
18759: CALL_OW 255
18763: PUSH
18764: LD_INT 3
18766: EQUAL
18767: AND
18768: PUSH
18769: LD_INT 21
18771: PPUSH
18772: CALL_OW 302
18776: AND
18777: PUSH
18778: LD_INT 2
18780: PPUSH
18781: CALL_OW 255
18785: PUSH
18786: LD_INT 3
18788: EQUAL
18789: AND
18790: PUSH
18791: LD_INT 2
18793: PPUSH
18794: CALL_OW 302
18798: AND
18799: PUSH
18800: LD_INT 21
18802: PPUSH
18803: CALL_OW 313
18807: AND
18808: PUSH
18809: LD_EXP 48
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: LD_INT 6
18822: PUSH
18823: LD_INT 6
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_OWVAR 67
18836: ARRAY
18837: LESS
18838: AND
18839: IFFALSE 19060
18841: GO 18843
18843: DISABLE
// begin enable ;
18844: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18845: LD_INT 2
18847: PPUSH
18848: CALL_OW 274
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: LD_INT 2000
18858: PPUSH
18859: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18863: LD_INT 3
18865: PPUSH
18866: LD_INT 21
18868: PPUSH
18869: LD_INT 4
18871: PUSH
18872: LD_INT 5
18874: PUSH
18875: LD_INT 6
18877: PUSH
18878: LD_INT 6
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_OWVAR 67
18891: ARRAY
18892: PUSH
18893: LD_EXP 48
18897: MINUS
18898: PPUSH
18899: LD_INT 43
18901: PUSH
18902: LD_INT 43
18904: PUSH
18905: LD_INT 44
18907: PUSH
18908: LD_INT 44
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 43
18919: PUSH
18920: LD_INT 43
18922: PUSH
18923: LD_INT 43
18925: PUSH
18926: LD_INT 44
18928: PUSH
18929: LD_INT 44
18931: PUSH
18932: LD_INT 46
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 43
18945: PUSH
18946: LD_INT 43
18948: PUSH
18949: LD_INT 43
18951: PUSH
18952: LD_INT 44
18954: PUSH
18955: LD_INT 44
18957: PUSH
18958: LD_INT 46
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 43
18971: PUSH
18972: LD_INT 43
18974: PUSH
18975: LD_INT 44
18977: PUSH
18978: LD_INT 46
18980: PUSH
18981: LD_INT 46
18983: PUSH
18984: LD_INT 46
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: PUSH
19001: LD_OWVAR 67
19005: ARRAY
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 22
19018: PUSH
19019: LD_INT 24
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 2
19031: PPUSH
19032: CALL_OW 12
19036: ARRAY
19037: PUSH
19038: LD_INT 24
19040: PUSH
19041: LD_INT 24
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PUSH
19050: LD_OWVAR 67
19054: ARRAY
19055: PPUSH
19056: CALL 8331 0 7
// end ;
19060: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19061: LD_INT 17
19063: PPUSH
19064: CALL_OW 255
19068: PUSH
19069: LD_INT 3
19071: EQUAL
19072: PUSH
19073: LD_INT 17
19075: PPUSH
19076: CALL_OW 302
19080: AND
19081: PUSH
19082: LD_INT 2
19084: PPUSH
19085: CALL_OW 255
19089: PUSH
19090: LD_INT 3
19092: EQUAL
19093: AND
19094: PUSH
19095: LD_INT 2
19097: PPUSH
19098: CALL_OW 302
19102: AND
19103: PUSH
19104: LD_EXP 48
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 6
19117: PUSH
19118: LD_INT 7
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: PUSH
19127: LD_OWVAR 67
19131: ARRAY
19132: LESS
19133: AND
19134: IFFALSE 19182
19136: GO 19138
19138: DISABLE
// begin enable ;
19139: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19140: LD_INT 17
19142: PPUSH
19143: LD_INT 22
19145: PPUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: LD_INT 42
19154: PUSH
19155: LD_INT 43
19157: PUSH
19158: LD_INT 44
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_INT 3
19171: PPUSH
19172: CALL_OW 12
19176: ARRAY
19177: PPUSH
19178: CALL_OW 185
// end ;
19182: END
// every 2 2$0 do var i , j ;
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19190: LD_INT 14700
19192: PUSH
19193: LD_INT 33600
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PPUSH
19203: LD_INT 2
19205: PPUSH
19206: CALL_OW 12
19210: ARRAY
19211: PPUSH
19212: CALL_OW 67
// disableHealAI = 1 ;
19216: LD_ADDR_EXP 34
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19224: LD_ADDR_VAR 0 1
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_INT 3
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 25
19241: PUSH
19242: LD_INT 4
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: FOR_IN
19259: IFFALSE 19272
// ComExitBuilding ( i ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: CALL_OW 122
19270: GO 19258
19272: POP
19273: POP
// wait ( 0 0$1 ) ;
19274: LD_INT 35
19276: PPUSH
19277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19281: LD_INT 35
19283: PPUSH
19284: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19288: LD_ADDR_VAR 0 1
19292: PUSH
19293: LD_INT 22
19295: PUSH
19296: LD_INT 3
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 25
19305: PUSH
19306: LD_INT 4
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PPUSH
19317: CALL_OW 69
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19400
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 17
19332: PPUSH
19333: LD_INT 22
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 25
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: CALL_OW 70
19361: PUSH
19362: FOR_IN
19363: IFFALSE 19396
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19365: LD_VAR 0 1
19369: PPUSH
19370: LD_VAR 0 2
19374: PPUSH
19375: CALL_OW 250
19379: PPUSH
19380: LD_VAR 0 2
19384: PPUSH
19385: CALL_OW 251
19389: PPUSH
19390: CALL_OW 191
19394: GO 19362
19396: POP
19397: POP
19398: GO 19322
19400: POP
19401: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19402: LD_INT 22
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 69
19430: PUSH
19431: LD_INT 0
19433: EQUAL
19434: PUSH
19435: LD_EXP 33
19439: PUSH
19440: LD_INT 6
19442: PUSH
19443: LD_INT 7
19445: PUSH
19446: LD_INT 8
19448: PUSH
19449: LD_INT 8
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PUSH
19458: LD_OWVAR 67
19462: ARRAY
19463: GREATEREQUAL
19464: OR
19465: PUSH
19466: LD_INT 17
19468: PPUSH
19469: LD_INT 22
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 12
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 70
19497: PUSH
19498: LD_INT 0
19500: EQUAL
19501: OR
19502: IFFALSE 19281
// disableHealAI = 0 ;
19504: LD_ADDR_EXP 34
19508: PUSH
19509: LD_INT 0
19511: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19512: LD_ADDR_VAR 0 1
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 25
19529: PUSH
19530: LD_INT 12
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetClass ( i , 16 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 16
19556: PPUSH
19557: CALL_OW 336
19561: GO 19546
19563: POP
19564: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19565: LD_ADDR_VAR 0 1
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_INT 3
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 4
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: PUSH
19599: FOR_IN
19600: IFFALSE 19616
// ComEnterUnit ( i , rulab ) ;
19602: LD_VAR 0 1
19606: PPUSH
19607: LD_INT 32
19609: PPUSH
19610: CALL_OW 120
19614: GO 19599
19616: POP
19617: POP
// end ; end_of_file
19618: PPOPN 2
19620: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19621: LD_EXP 27
19625: PUSH
19626: LD_INT 0
19628: LESSEQUAL
19629: IFFALSE 19783
19631: GO 19633
19633: DISABLE
19634: LD_INT 0
19636: PPUSH
19637: PPUSH
19638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: LD_INT 22
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 21
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 30
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 30
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: ST_TO_ADDR
// for i in tmp do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: LD_VAR 0 2
19711: PUSH
19712: FOR_IN
19713: IFFALSE 19746
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19715: LD_ADDR_VAR 0 3
19719: PUSH
19720: LD_VAR 0 3
19724: PUSH
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 274
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 275
19742: PLUS
19743: ST_TO_ADDR
19744: GO 19712
19746: POP
19747: POP
// if yourCrates >= needCrates then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_EXP 26
19757: GREATEREQUAL
19758: IFFALSE 19776
// FinishMission ( yourCrates , needCrates ) else
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_EXP 26
19769: PPUSH
19770: CALL 19786 0 2
19774: GO 19783
// YouLost ( matmin ) ;
19776: LD_STRING matmin
19778: PPUSH
19779: CALL_OW 104
// end ;
19783: PPOPN 3
19785: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19786: LD_INT 0
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19792: LD_EXP 46
19796: PUSH
19797: LD_INT 8
19799: GREATEREQUAL
19800: PUSH
19801: LD_EXP 46
19805: PUSH
19806: LD_EXP 45
19810: PPUSH
19811: LD_INT 50
19813: PUSH
19814: EMPTY
19815: LIST
19816: PPUSH
19817: CALL_OW 72
19821: GREATEREQUAL
19822: OR
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 23
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 50
19856: PUSH
19857: EMPTY
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: PUSH
19871: LD_INT 5
19873: LESS
19874: OR
19875: IFFALSE 19886
// begin YouLost ( Troops ) ;
19877: LD_STRING Troops
19879: PPUSH
19880: CALL_OW 104
// exit ;
19884: GO 20843
// end ; if killCounter = 0 then
19886: LD_EXP 46
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: IFFALSE 19903
// SetAchievement ( ACH_SURV ) ;
19896: LD_STRING ACH_SURV
19898: PPUSH
19899: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19903: LD_INT 22
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PPUSH
19927: CALL_OW 69
19931: PUSH
19932: LD_INT 0
19934: EQUAL
19935: IFFALSE 19951
// begin wait ( 3 ) ;
19937: LD_INT 3
19939: PPUSH
19940: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19944: LD_STRING ACH_BASEDESTROYER
19946: PPUSH
19947: CALL_OW 543
// end ; m1 := false ;
19951: LD_ADDR_VAR 0 4
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// m2 := false ;
19959: LD_ADDR_VAR 0 5
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// m3 := false ;
19967: LD_ADDR_VAR 0 6
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19975: LD_VAR 0 1
19979: PUSH
19980: LD_INT 100
19982: PUSH
19983: LD_INT 140
19985: PUSH
19986: LD_INT 180
19988: PUSH
19989: LD_INT 220
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PUSH
19998: LD_OWVAR 67
20002: ARRAY
20003: PLUS
20004: PUSH
20005: LD_VAR 0 2
20009: GREATER
20010: IFFALSE 20042
// begin AddMedal ( cans , 1 ) ;
20012: LD_STRING cans
20014: PPUSH
20015: LD_INT 1
20017: PPUSH
20018: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20022: LD_INT 1
20024: PPUSH
20025: LD_STRING 06_crates_1
20027: PPUSH
20028: CALL_OW 39
// m1 := true ;
20032: LD_ADDR_VAR 0 4
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// end else
20040: GO 20063
// begin AddMedal ( cans , - 1 ) ;
20042: LD_STRING cans
20044: PPUSH
20045: LD_INT 1
20047: NEG
20048: PPUSH
20049: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20053: LD_INT 0
20055: PPUSH
20056: LD_STRING 06_crates_1
20058: PPUSH
20059: CALL_OW 39
// end ; if unitLost < 3 then
20063: LD_EXP 31
20067: PUSH
20068: LD_INT 3
20070: LESS
20071: IFFALSE 20093
// begin AddMedal ( people , 1 ) ;
20073: LD_STRING people
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 101
// m2 := true ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// end else
20091: GO 20104
// AddMedal ( people , - 1 ) ;
20093: LD_STRING people
20095: PPUSH
20096: LD_INT 1
20098: NEG
20099: PPUSH
20100: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20104: LD_EXP 29
20108: PPUSH
20109: LD_STRING 06_remoteVehs_1
20111: PPUSH
20112: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20116: LD_EXP 29
20120: PUSH
20121: LD_INT 1
20123: EQUAL
20124: IFFALSE 20146
// begin AddMedal ( remote , 1 ) ;
20126: LD_STRING remote
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 101
// m3 := true ;
20136: LD_ADDR_VAR 0 6
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// end else
20144: GO 20186
// begin if GetTech ( 18 , 1 ) = state_enabled then
20146: LD_INT 18
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 321
20156: PUSH
20157: LD_INT 1
20159: EQUAL
20160: IFFALSE 20175
// AddMedal ( remote , - 1 ) else
20162: LD_STRING remote
20164: PPUSH
20165: LD_INT 1
20167: NEG
20168: PPUSH
20169: CALL_OW 101
20173: GO 20186
// AddMedal ( remote , - 2 ) ;
20175: LD_STRING remote
20177: PPUSH
20178: LD_INT 2
20180: NEG
20181: PPUSH
20182: CALL_OW 101
// end ; if m1 and m2 and m3 then
20186: LD_VAR 0 4
20190: PUSH
20191: LD_VAR 0 5
20195: AND
20196: PUSH
20197: LD_VAR 0 6
20201: AND
20202: IFFALSE 20218
// begin wait ( 3 ) ;
20204: LD_INT 3
20206: PPUSH
20207: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20211: LD_STRING ACH_ASPEED_6
20213: PPUSH
20214: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20218: LD_OWVAR 67
20222: PUSH
20223: LD_INT 3
20225: GREATEREQUAL
20226: PUSH
20227: LD_VAR 0 4
20231: AND
20232: PUSH
20233: LD_VAR 0 5
20237: AND
20238: PUSH
20239: LD_VAR 0 6
20243: AND
20244: IFFALSE 20256
// SetAchievementEX ( ACH_AMER , 6 ) ;
20246: LD_STRING ACH_AMER
20248: PPUSH
20249: LD_INT 6
20251: PPUSH
20252: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20256: LD_EXP 21
20260: PPUSH
20261: LD_STRING 06_KurtStatus_1
20263: PPUSH
20264: CALL_OW 39
// GiveMedals ( Main ) ;
20268: LD_STRING Main
20270: PPUSH
20271: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20275: LD_INT 22
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 21
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 50
20297: PUSH
20298: EMPTY
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 25
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 25
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 25
20336: PUSH
20337: LD_INT 4
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: PPUSH
20362: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20366: LD_EXP 1
20370: PPUSH
20371: LD_EXP 43
20375: PUSH
20376: LD_STRING JMM
20378: STR
20379: PPUSH
20380: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20384: LD_EXP 2
20388: PPUSH
20389: LD_EXP 43
20393: PUSH
20394: LD_STRING Lisa
20396: STR
20397: PPUSH
20398: CALL 7646 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20402: LD_EXP 3
20406: PPUSH
20407: LD_EXP 43
20411: PUSH
20412: LD_STRING Bobby
20414: STR
20415: PPUSH
20416: CALL 7646 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20420: LD_EXP 4
20424: PPUSH
20425: LD_EXP 43
20429: PUSH
20430: LD_STRING Cyrus
20432: STR
20433: PPUSH
20434: CALL 7646 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20438: LD_EXP 5
20442: PPUSH
20443: LD_EXP 43
20447: PUSH
20448: LD_STRING Frank
20450: STR
20451: PPUSH
20452: CALL 7646 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20456: LD_EXP 6
20460: PPUSH
20461: LD_EXP 43
20465: PUSH
20466: LD_STRING Brown
20468: STR
20469: PPUSH
20470: CALL 7646 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20474: LD_EXP 7
20478: PPUSH
20479: LD_EXP 43
20483: PUSH
20484: LD_STRING Donaldson
20486: STR
20487: PPUSH
20488: CALL 7646 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20492: LD_EXP 8
20496: PPUSH
20497: LD_EXP 43
20501: PUSH
20502: LD_STRING Gladstone
20504: STR
20505: PPUSH
20506: CALL 7646 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20510: LD_EXP 9
20514: PPUSH
20515: LD_EXP 43
20519: PUSH
20520: LD_STRING Denis
20522: STR
20523: PPUSH
20524: CALL 7646 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20528: LD_EXP 16
20532: PPUSH
20533: LD_EXP 43
20537: PUSH
20538: LD_STRING Joan
20540: STR
20541: PPUSH
20542: CALL 7646 0 2
// if IsLive ( Mike ) then
20546: LD_EXP 11
20550: PPUSH
20551: CALL_OW 300
20555: IFFALSE 20575
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20557: LD_EXP 11
20561: PPUSH
20562: LD_EXP 43
20566: PUSH
20567: LD_STRING Mike
20569: STR
20570: PPUSH
20571: CALL_OW 38
// if IsLive ( Joan ) then
20575: LD_EXP 16
20579: PPUSH
20580: CALL_OW 300
20584: IFFALSE 20598
// SaveCharacters ( Joan , Joan ) ;
20586: LD_EXP 16
20590: PPUSH
20591: LD_STRING Joan
20593: PPUSH
20594: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20598: LD_EXP 17
20602: PPUSH
20603: LD_STRING 06_JoanStatus_1
20605: PPUSH
20606: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20610: LD_INT 50
20612: PUSH
20613: EMPTY
20614: LIST
20615: PUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 21
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: LD_INT 25
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 25
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 25
20671: PUSH
20672: LD_INT 4
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: PPUSH
20692: CALL_OW 69
20696: PUSH
20697: LD_EXP 1
20701: PUSH
20702: LD_EXP 2
20706: PUSH
20707: LD_EXP 3
20711: PUSH
20712: LD_EXP 4
20716: PUSH
20717: LD_EXP 5
20721: PUSH
20722: LD_EXP 6
20726: PUSH
20727: LD_EXP 7
20731: PUSH
20732: LD_EXP 8
20736: PUSH
20737: LD_EXP 9
20741: PUSH
20742: LD_EXP 16
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: DIFF
20759: PPUSH
20760: LD_STRING 06_other_survivors
20762: PPUSH
20763: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20767: LD_INT 50
20769: PUSH
20770: EMPTY
20771: LIST
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 21
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 25
20798: PUSH
20799: LD_INT 12
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 25
20808: PUSH
20809: LD_INT 16
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: PPUSH
20832: LD_STRING 06_other_apemans
20834: PPUSH
20835: CALL_OW 38
// YouWin ;
20839: CALL_OW 103
// end ; end_of_file
20843: LD_VAR 0 3
20847: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20848: LD_EXP 48
20852: PUSH
20853: LD_OWVAR 1
20857: PUSH
20858: LD_INT 23100
20860: PUSH
20861: LD_INT 21000
20863: PUSH
20864: LD_INT 18900
20866: PUSH
20867: LD_INT 16800
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_OWVAR 67
20880: ARRAY
20881: GREATER
20882: AND
20883: IFFALSE 21230
20885: GO 20887
20887: DISABLE
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
// begin enable ;
20894: ENABLE
// for i in ruAttackers do
20895: LD_ADDR_VAR 0 1
20899: PUSH
20900: LD_EXP 48
20904: PUSH
20905: FOR_IN
20906: IFFALSE 21228
// begin if not IsDrivenBy ( i ) then
20908: LD_VAR 0 1
20912: PPUSH
20913: CALL_OW 311
20917: NOT
20918: IFFALSE 20922
// continue ;
20920: GO 20905
// if i mod 2 = 0 then
20922: LD_VAR 0 1
20926: PUSH
20927: LD_INT 2
20929: MOD
20930: PUSH
20931: LD_INT 0
20933: EQUAL
20934: IFFALSE 20989
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 91
20943: PUSH
20944: LD_INT 52
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 82
20953: PUSH
20954: LD_INT 34
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 90
20963: PUSH
20964: LD_INT 26
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 86
20973: PUSH
20974: LD_INT 16
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 21084
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_INT 91
20996: PUSH
20997: LD_INT 52
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 68
21006: PUSH
21007: LD_INT 46
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 48
21016: PUSH
21017: LD_INT 43
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 44
21026: PUSH
21027: LD_INT 42
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 33
21036: PUSH
21037: LD_INT 34
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 29
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 30
21056: PUSH
21057: LD_INT 19
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 38
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 256
21093: PUSH
21094: LD_INT 1000
21096: EQUAL
21097: IFFALSE 21115
// AgressiveMove ( i , path ) else
21099: LD_VAR 0 1
21103: PPUSH
21104: LD_VAR 0 3
21108: PPUSH
21109: CALL 83684 0 2
21113: GO 21226
// if GetLives ( i ) < 650 then
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 256
21124: PUSH
21125: LD_INT 650
21127: LESS
21128: IFFALSE 21226
// begin if not IsInArea ( i , russianRepairArea ) then
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_INT 12
21137: PPUSH
21138: CALL_OW 308
21142: NOT
21143: IFFALSE 21212
// begin SetTag ( i , 0 ) ;
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_INT 0
21152: PPUSH
21153: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21157: LD_VAR 0 1
21161: PPUSH
21162: CALL_OW 261
21166: PUSH
21167: LD_INT 50
21169: LESS
21170: PUSH
21171: LD_INT 21
21173: PPUSH
21174: CALL_OW 302
21178: AND
21179: IFFALSE 21195
// ComMoveUnit ( i , rufab ) else
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_INT 21
21188: PPUSH
21189: CALL_OW 112
21193: GO 21210
// ComMoveXY ( i , 121 , 99 ) ;
21195: LD_VAR 0 1
21199: PPUSH
21200: LD_INT 121
21202: PPUSH
21203: LD_INT 99
21205: PPUSH
21206: CALL_OW 111
// end else
21210: GO 21226
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 311
21221: PPUSH
21222: CALL 82774 0 1
// end ; end ;
21226: GO 20905
21228: POP
21229: POP
// end ;
21230: PPOPN 4
21232: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21233: LD_INT 0
21235: PPUSH
21236: PPUSH
21237: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21238: LD_ADDR_VAR 0 2
21242: PUSH
21243: DOUBLE
21244: LD_INT 1
21246: DEC
21247: ST_TO_ADDR
21248: LD_INT 4
21250: PUSH
21251: LD_INT 5
21253: PUSH
21254: LD_INT 6
21256: PUSH
21257: LD_INT 6
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: PUSH
21266: LD_OWVAR 67
21270: ARRAY
21271: PUSH
21272: FOR_TO
21273: IFFALSE 21448
// begin uc_side := 3 ;
21275: LD_ADDR_OWVAR 20
21279: PUSH
21280: LD_INT 3
21282: ST_TO_ADDR
// uc_nation := 3 ;
21283: LD_ADDR_OWVAR 21
21287: PUSH
21288: LD_INT 3
21290: ST_TO_ADDR
// InitHC_All ( ) ;
21291: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21295: LD_INT 0
21297: PPUSH
21298: LD_INT 4
21300: PUSH
21301: LD_INT 5
21303: PUSH
21304: LD_INT 6
21306: PUSH
21307: LD_INT 6
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: LD_OWVAR 67
21320: ARRAY
21321: PPUSH
21322: CALL_OW 381
// un := CreateHuman ;
21326: LD_ADDR_VAR 0 3
21330: PUSH
21331: CALL_OW 44
21335: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_INT 127
21343: PPUSH
21344: LD_INT 62
21346: PPUSH
21347: LD_INT 3
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21357: LD_ADDR_EXP 49
21361: PUSH
21362: LD_EXP 49
21366: PPUSH
21367: LD_EXP 49
21371: PUSH
21372: LD_INT 1
21374: PLUS
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: CALL_OW 1
21385: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21386: LD_VAR 0 3
21390: PPUSH
21391: LD_INT 83
21393: PPUSH
21394: LD_INT 49
21396: PPUSH
21397: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21401: LD_VAR 0 3
21405: PPUSH
21406: LD_INT 49
21408: PPUSH
21409: LD_INT 43
21411: PPUSH
21412: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21416: LD_VAR 0 3
21420: PPUSH
21421: LD_INT 31
21423: PPUSH
21424: LD_INT 15
21426: PPUSH
21427: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21431: LD_VAR 0 3
21435: PPUSH
21436: LD_INT 63
21438: PPUSH
21439: LD_INT 9
21441: PPUSH
21442: CALL_OW 174
// end ;
21446: GO 21272
21448: POP
21449: POP
// end ; end_of_file
21450: LD_VAR 0 1
21454: RET
// export function CreateNature ; var i , un ; begin
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
// for i := 1 to Difficulty + 2 do
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: DOUBLE
21466: LD_INT 1
21468: DEC
21469: ST_TO_ADDR
21470: LD_OWVAR 67
21474: PUSH
21475: LD_INT 2
21477: PLUS
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21589
// begin hc_sex := sex_male ;
21482: LD_ADDR_OWVAR 27
21486: PUSH
21487: LD_INT 1
21489: ST_TO_ADDR
// uc_side := 0 ;
21490: LD_ADDR_OWVAR 20
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// uc_nation := nation_nature ;
21498: LD_ADDR_OWVAR 21
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// hc_class := class_tiger ;
21506: LD_ADDR_OWVAR 28
21510: PUSH
21511: LD_INT 14
21513: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21514: LD_ADDR_OWVAR 31
21518: PUSH
21519: LD_EXP 36
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21539: LD_ADDR_OWVAR 35
21543: PUSH
21544: LD_INT 5
21546: NEG
21547: PPUSH
21548: LD_INT 5
21550: PPUSH
21551: CALL_OW 12
21555: PUSH
21556: LD_OWVAR 67
21560: MUL
21561: ST_TO_ADDR
// un := CreateHuman ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: CALL_OW 44
21571: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 18
21579: PPUSH
21580: LD_INT 0
21582: PPUSH
21583: CALL_OW 49
// end ;
21587: GO 21479
21589: POP
21590: POP
// for i = 1 to rand ( 3 , 4 ) do
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_INT 3
21603: PPUSH
21604: LD_INT 4
21606: PPUSH
21607: CALL_OW 12
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21683
// begin hc_class := class_phororhacos ;
21615: LD_ADDR_OWVAR 28
21619: PUSH
21620: LD_INT 18
21622: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21623: LD_ADDR_OWVAR 31
21627: PUSH
21628: LD_EXP 36
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: ST_TO_ADDR
// hc_agressivity := 0 ;
21648: LD_ADDR_OWVAR 35
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// un = CreateHuman ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: CALL_OW 44
21665: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 18
21673: PPUSH
21674: LD_INT 0
21676: PPUSH
21677: CALL_OW 49
// end ;
21681: GO 21612
21683: POP
21684: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21685: LD_ADDR_VAR 0 2
21689: PUSH
21690: DOUBLE
21691: LD_INT 1
21693: DEC
21694: ST_TO_ADDR
21695: LD_INT 3
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: LD_OWVAR 67
21717: ARRAY
21718: PUSH
21719: FOR_TO
21720: IFFALSE 21861
// begin hc_class := class_apeman ;
21722: LD_ADDR_OWVAR 28
21726: PUSH
21727: LD_INT 12
21729: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21730: LD_ADDR_OWVAR 31
21734: PUSH
21735: LD_INT 2
21737: PPUSH
21738: LD_INT 5
21740: PPUSH
21741: CALL_OW 12
21745: PUSH
21746: LD_INT 0
21748: PPUSH
21749: LD_INT 2
21751: PPUSH
21752: CALL_OW 12
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21769: LD_ADDR_OWVAR 35
21773: PUSH
21774: LD_INT 5
21776: NEG
21777: PPUSH
21778: LD_INT 10
21780: PPUSH
21781: CALL_OW 12
21785: PUSH
21786: LD_INT 10
21788: NEG
21789: PPUSH
21790: LD_INT 20
21792: PPUSH
21793: CALL_OW 12
21797: PUSH
21798: LD_INT 20
21800: NEG
21801: PPUSH
21802: LD_INT 25
21804: PPUSH
21805: CALL_OW 12
21809: PUSH
21810: LD_INT 30
21812: NEG
21813: PPUSH
21814: LD_INT 30
21816: PPUSH
21817: CALL_OW 12
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_OWVAR 67
21832: ARRAY
21833: ST_TO_ADDR
// un := CreateHuman ;
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: CALL_OW 44
21843: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21844: LD_VAR 0 3
21848: PPUSH
21849: LD_INT 19
21851: PPUSH
21852: LD_INT 0
21854: PPUSH
21855: CALL_OW 49
// end ;
21859: GO 21719
21861: POP
21862: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: DOUBLE
21869: LD_INT 1
21871: DEC
21872: ST_TO_ADDR
21873: LD_INT 3
21875: PUSH
21876: LD_INT 4
21878: PUSH
21879: LD_INT 5
21881: PUSH
21882: LD_INT 6
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: LD_OWVAR 67
21895: ARRAY
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21991
// begin hc_class := class_apeman ;
21900: LD_ADDR_OWVAR 28
21904: PUSH
21905: LD_INT 12
21907: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21908: LD_ADDR_OWVAR 31
21912: PUSH
21913: LD_INT 2
21915: PPUSH
21916: LD_INT 5
21918: PPUSH
21919: CALL_OW 12
21923: PUSH
21924: LD_INT 0
21926: PPUSH
21927: LD_INT 2
21929: PPUSH
21930: CALL_OW 12
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21947: LD_ADDR_OWVAR 35
21951: PUSH
21952: LD_INT 15
21954: NEG
21955: PPUSH
21956: LD_INT 15
21958: PPUSH
21959: CALL_OW 12
21963: ST_TO_ADDR
// un = CreateHuman ;
21964: LD_ADDR_VAR 0 3
21968: PUSH
21969: CALL_OW 44
21973: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21974: LD_VAR 0 3
21978: PPUSH
21979: LD_INT 20
21981: PPUSH
21982: LD_INT 0
21984: PPUSH
21985: CALL_OW 49
// end ;
21989: GO 21897
21991: POP
21992: POP
// end ; end_of_file end_of_file
21993: LD_VAR 0 1
21997: RET
// export globalGameSaveCounter ; every 0 0$1 do
21998: GO 22000
22000: DISABLE
// begin enable ;
22001: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
22002: LD_STRING updateTimer(
22004: PUSH
22005: LD_OWVAR 1
22009: STR
22010: PUSH
22011: LD_STRING );
22013: STR
22014: PPUSH
22015: CALL_OW 559
// end ;
22019: END
// every 0 0$1 do
22020: GO 22022
22022: DISABLE
// begin globalGameSaveCounter := 0 ;
22023: LD_ADDR_EXP 50
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22031: LD_STRING setGameSaveCounter(0)
22033: PPUSH
22034: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22038: LD_STRING initStreamRollete();
22040: PPUSH
22041: CALL_OW 559
// InitStreamMode ;
22045: CALL 23388 0 0
// DefineStreamItems ( false ) ;
22049: LD_INT 0
22051: PPUSH
22052: CALL 23852 0 1
// end ;
22056: END
// export function SOS_MapStart ( ) ; begin
22057: LD_INT 0
22059: PPUSH
// if streamModeActive then
22060: LD_EXP 51
22064: IFFALSE 22073
// DefineStreamItems ( true ) ;
22066: LD_INT 1
22068: PPUSH
22069: CALL 23852 0 1
// UpdateLuaVariables ( ) ;
22073: CALL 22090 0 0
// UpdateFactoryWaypoints ( ) ;
22077: CALL 36854 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22081: CALL 37106 0 0
// end ;
22085: LD_VAR 0 1
22089: RET
// function UpdateLuaVariables ( ) ; begin
22090: LD_INT 0
22092: PPUSH
// if globalGameSaveCounter then
22093: LD_EXP 50
22097: IFFALSE 22131
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22099: LD_ADDR_EXP 50
22103: PUSH
22104: LD_EXP 50
22108: PPUSH
22109: CALL 82435 0 1
22113: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22114: LD_STRING setGameSaveCounter(
22116: PUSH
22117: LD_EXP 50
22121: STR
22122: PUSH
22123: LD_STRING )
22125: STR
22126: PPUSH
22127: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22131: LD_STRING setGameDifficulty(
22133: PUSH
22134: LD_OWVAR 67
22138: STR
22139: PUSH
22140: LD_STRING )
22142: STR
22143: PPUSH
22144: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22148: LD_STRING displayDifficulty(
22150: PUSH
22151: LD_OWVAR 67
22155: STR
22156: PUSH
22157: LD_STRING )
22159: STR
22160: PPUSH
22161: CALL_OW 559
// end ;
22165: LD_VAR 0 1
22169: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22170: LD_INT 0
22172: PPUSH
// if p2 = stream_mode then
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 100
22180: EQUAL
22181: IFFALSE 23184
// begin if not StreamModeActive then
22183: LD_EXP 51
22187: NOT
22188: IFFALSE 22198
// StreamModeActive := true ;
22190: LD_ADDR_EXP 51
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
// if p3 = 0 then
22198: LD_VAR 0 3
22202: PUSH
22203: LD_INT 0
22205: EQUAL
22206: IFFALSE 22212
// InitStreamMode ;
22208: CALL 23388 0 0
// if p3 = 1 then
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 1
22219: EQUAL
22220: IFFALSE 22230
// sRocket := true ;
22222: LD_ADDR_EXP 56
22226: PUSH
22227: LD_INT 1
22229: ST_TO_ADDR
// if p3 = 2 then
22230: LD_VAR 0 3
22234: PUSH
22235: LD_INT 2
22237: EQUAL
22238: IFFALSE 22248
// sSpeed := true ;
22240: LD_ADDR_EXP 55
22244: PUSH
22245: LD_INT 1
22247: ST_TO_ADDR
// if p3 = 3 then
22248: LD_VAR 0 3
22252: PUSH
22253: LD_INT 3
22255: EQUAL
22256: IFFALSE 22266
// sEngine := true ;
22258: LD_ADDR_EXP 57
22262: PUSH
22263: LD_INT 1
22265: ST_TO_ADDR
// if p3 = 4 then
22266: LD_VAR 0 3
22270: PUSH
22271: LD_INT 4
22273: EQUAL
22274: IFFALSE 22284
// sSpec := true ;
22276: LD_ADDR_EXP 54
22280: PUSH
22281: LD_INT 1
22283: ST_TO_ADDR
// if p3 = 5 then
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 5
22291: EQUAL
22292: IFFALSE 22302
// sLevel := true ;
22294: LD_ADDR_EXP 58
22298: PUSH
22299: LD_INT 1
22301: ST_TO_ADDR
// if p3 = 6 then
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 6
22309: EQUAL
22310: IFFALSE 22320
// sArmoury := true ;
22312: LD_ADDR_EXP 59
22316: PUSH
22317: LD_INT 1
22319: ST_TO_ADDR
// if p3 = 7 then
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 7
22327: EQUAL
22328: IFFALSE 22338
// sRadar := true ;
22330: LD_ADDR_EXP 60
22334: PUSH
22335: LD_INT 1
22337: ST_TO_ADDR
// if p3 = 8 then
22338: LD_VAR 0 3
22342: PUSH
22343: LD_INT 8
22345: EQUAL
22346: IFFALSE 22356
// sBunker := true ;
22348: LD_ADDR_EXP 61
22352: PUSH
22353: LD_INT 1
22355: ST_TO_ADDR
// if p3 = 9 then
22356: LD_VAR 0 3
22360: PUSH
22361: LD_INT 9
22363: EQUAL
22364: IFFALSE 22374
// sHack := true ;
22366: LD_ADDR_EXP 62
22370: PUSH
22371: LD_INT 1
22373: ST_TO_ADDR
// if p3 = 10 then
22374: LD_VAR 0 3
22378: PUSH
22379: LD_INT 10
22381: EQUAL
22382: IFFALSE 22392
// sFire := true ;
22384: LD_ADDR_EXP 63
22388: PUSH
22389: LD_INT 1
22391: ST_TO_ADDR
// if p3 = 11 then
22392: LD_VAR 0 3
22396: PUSH
22397: LD_INT 11
22399: EQUAL
22400: IFFALSE 22410
// sRefresh := true ;
22402: LD_ADDR_EXP 64
22406: PUSH
22407: LD_INT 1
22409: ST_TO_ADDR
// if p3 = 12 then
22410: LD_VAR 0 3
22414: PUSH
22415: LD_INT 12
22417: EQUAL
22418: IFFALSE 22428
// sExp := true ;
22420: LD_ADDR_EXP 65
22424: PUSH
22425: LD_INT 1
22427: ST_TO_ADDR
// if p3 = 13 then
22428: LD_VAR 0 3
22432: PUSH
22433: LD_INT 13
22435: EQUAL
22436: IFFALSE 22446
// sDepot := true ;
22438: LD_ADDR_EXP 66
22442: PUSH
22443: LD_INT 1
22445: ST_TO_ADDR
// if p3 = 14 then
22446: LD_VAR 0 3
22450: PUSH
22451: LD_INT 14
22453: EQUAL
22454: IFFALSE 22464
// sFlag := true ;
22456: LD_ADDR_EXP 67
22460: PUSH
22461: LD_INT 1
22463: ST_TO_ADDR
// if p3 = 15 then
22464: LD_VAR 0 3
22468: PUSH
22469: LD_INT 15
22471: EQUAL
22472: IFFALSE 22482
// sKamikadze := true ;
22474: LD_ADDR_EXP 75
22478: PUSH
22479: LD_INT 1
22481: ST_TO_ADDR
// if p3 = 16 then
22482: LD_VAR 0 3
22486: PUSH
22487: LD_INT 16
22489: EQUAL
22490: IFFALSE 22500
// sTroll := true ;
22492: LD_ADDR_EXP 76
22496: PUSH
22497: LD_INT 1
22499: ST_TO_ADDR
// if p3 = 17 then
22500: LD_VAR 0 3
22504: PUSH
22505: LD_INT 17
22507: EQUAL
22508: IFFALSE 22518
// sSlow := true ;
22510: LD_ADDR_EXP 77
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// if p3 = 18 then
22518: LD_VAR 0 3
22522: PUSH
22523: LD_INT 18
22525: EQUAL
22526: IFFALSE 22536
// sLack := true ;
22528: LD_ADDR_EXP 78
22532: PUSH
22533: LD_INT 1
22535: ST_TO_ADDR
// if p3 = 19 then
22536: LD_VAR 0 3
22540: PUSH
22541: LD_INT 19
22543: EQUAL
22544: IFFALSE 22554
// sTank := true ;
22546: LD_ADDR_EXP 80
22550: PUSH
22551: LD_INT 1
22553: ST_TO_ADDR
// if p3 = 20 then
22554: LD_VAR 0 3
22558: PUSH
22559: LD_INT 20
22561: EQUAL
22562: IFFALSE 22572
// sRemote := true ;
22564: LD_ADDR_EXP 81
22568: PUSH
22569: LD_INT 1
22571: ST_TO_ADDR
// if p3 = 21 then
22572: LD_VAR 0 3
22576: PUSH
22577: LD_INT 21
22579: EQUAL
22580: IFFALSE 22590
// sPowell := true ;
22582: LD_ADDR_EXP 82
22586: PUSH
22587: LD_INT 1
22589: ST_TO_ADDR
// if p3 = 22 then
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 22
22597: EQUAL
22598: IFFALSE 22608
// sTeleport := true ;
22600: LD_ADDR_EXP 85
22604: PUSH
22605: LD_INT 1
22607: ST_TO_ADDR
// if p3 = 23 then
22608: LD_VAR 0 3
22612: PUSH
22613: LD_INT 23
22615: EQUAL
22616: IFFALSE 22626
// sOilTower := true ;
22618: LD_ADDR_EXP 87
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
// if p3 = 24 then
22626: LD_VAR 0 3
22630: PUSH
22631: LD_INT 24
22633: EQUAL
22634: IFFALSE 22644
// sShovel := true ;
22636: LD_ADDR_EXP 88
22640: PUSH
22641: LD_INT 1
22643: ST_TO_ADDR
// if p3 = 25 then
22644: LD_VAR 0 3
22648: PUSH
22649: LD_INT 25
22651: EQUAL
22652: IFFALSE 22662
// sSheik := true ;
22654: LD_ADDR_EXP 89
22658: PUSH
22659: LD_INT 1
22661: ST_TO_ADDR
// if p3 = 26 then
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 26
22669: EQUAL
22670: IFFALSE 22680
// sEarthquake := true ;
22672: LD_ADDR_EXP 91
22676: PUSH
22677: LD_INT 1
22679: ST_TO_ADDR
// if p3 = 27 then
22680: LD_VAR 0 3
22684: PUSH
22685: LD_INT 27
22687: EQUAL
22688: IFFALSE 22698
// sAI := true ;
22690: LD_ADDR_EXP 92
22694: PUSH
22695: LD_INT 1
22697: ST_TO_ADDR
// if p3 = 28 then
22698: LD_VAR 0 3
22702: PUSH
22703: LD_INT 28
22705: EQUAL
22706: IFFALSE 22716
// sCargo := true ;
22708: LD_ADDR_EXP 95
22712: PUSH
22713: LD_INT 1
22715: ST_TO_ADDR
// if p3 = 29 then
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 29
22723: EQUAL
22724: IFFALSE 22734
// sDLaser := true ;
22726: LD_ADDR_EXP 96
22730: PUSH
22731: LD_INT 1
22733: ST_TO_ADDR
// if p3 = 30 then
22734: LD_VAR 0 3
22738: PUSH
22739: LD_INT 30
22741: EQUAL
22742: IFFALSE 22752
// sExchange := true ;
22744: LD_ADDR_EXP 97
22748: PUSH
22749: LD_INT 1
22751: ST_TO_ADDR
// if p3 = 31 then
22752: LD_VAR 0 3
22756: PUSH
22757: LD_INT 31
22759: EQUAL
22760: IFFALSE 22770
// sFac := true ;
22762: LD_ADDR_EXP 98
22766: PUSH
22767: LD_INT 1
22769: ST_TO_ADDR
// if p3 = 32 then
22770: LD_VAR 0 3
22774: PUSH
22775: LD_INT 32
22777: EQUAL
22778: IFFALSE 22788
// sPower := true ;
22780: LD_ADDR_EXP 99
22784: PUSH
22785: LD_INT 1
22787: ST_TO_ADDR
// if p3 = 33 then
22788: LD_VAR 0 3
22792: PUSH
22793: LD_INT 33
22795: EQUAL
22796: IFFALSE 22806
// sRandom := true ;
22798: LD_ADDR_EXP 100
22802: PUSH
22803: LD_INT 1
22805: ST_TO_ADDR
// if p3 = 34 then
22806: LD_VAR 0 3
22810: PUSH
22811: LD_INT 34
22813: EQUAL
22814: IFFALSE 22824
// sShield := true ;
22816: LD_ADDR_EXP 101
22820: PUSH
22821: LD_INT 1
22823: ST_TO_ADDR
// if p3 = 35 then
22824: LD_VAR 0 3
22828: PUSH
22829: LD_INT 35
22831: EQUAL
22832: IFFALSE 22842
// sTime := true ;
22834: LD_ADDR_EXP 102
22838: PUSH
22839: LD_INT 1
22841: ST_TO_ADDR
// if p3 = 36 then
22842: LD_VAR 0 3
22846: PUSH
22847: LD_INT 36
22849: EQUAL
22850: IFFALSE 22860
// sTools := true ;
22852: LD_ADDR_EXP 103
22856: PUSH
22857: LD_INT 1
22859: ST_TO_ADDR
// if p3 = 101 then
22860: LD_VAR 0 3
22864: PUSH
22865: LD_INT 101
22867: EQUAL
22868: IFFALSE 22878
// sSold := true ;
22870: LD_ADDR_EXP 68
22874: PUSH
22875: LD_INT 1
22877: ST_TO_ADDR
// if p3 = 102 then
22878: LD_VAR 0 3
22882: PUSH
22883: LD_INT 102
22885: EQUAL
22886: IFFALSE 22896
// sDiff := true ;
22888: LD_ADDR_EXP 69
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// if p3 = 103 then
22896: LD_VAR 0 3
22900: PUSH
22901: LD_INT 103
22903: EQUAL
22904: IFFALSE 22914
// sFog := true ;
22906: LD_ADDR_EXP 72
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// if p3 = 104 then
22914: LD_VAR 0 3
22918: PUSH
22919: LD_INT 104
22921: EQUAL
22922: IFFALSE 22932
// sReset := true ;
22924: LD_ADDR_EXP 73
22928: PUSH
22929: LD_INT 1
22931: ST_TO_ADDR
// if p3 = 105 then
22932: LD_VAR 0 3
22936: PUSH
22937: LD_INT 105
22939: EQUAL
22940: IFFALSE 22950
// sSun := true ;
22942: LD_ADDR_EXP 74
22946: PUSH
22947: LD_INT 1
22949: ST_TO_ADDR
// if p3 = 106 then
22950: LD_VAR 0 3
22954: PUSH
22955: LD_INT 106
22957: EQUAL
22958: IFFALSE 22968
// sTiger := true ;
22960: LD_ADDR_EXP 70
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// if p3 = 107 then
22968: LD_VAR 0 3
22972: PUSH
22973: LD_INT 107
22975: EQUAL
22976: IFFALSE 22986
// sBomb := true ;
22978: LD_ADDR_EXP 71
22982: PUSH
22983: LD_INT 1
22985: ST_TO_ADDR
// if p3 = 108 then
22986: LD_VAR 0 3
22990: PUSH
22991: LD_INT 108
22993: EQUAL
22994: IFFALSE 23004
// sWound := true ;
22996: LD_ADDR_EXP 79
23000: PUSH
23001: LD_INT 1
23003: ST_TO_ADDR
// if p3 = 109 then
23004: LD_VAR 0 3
23008: PUSH
23009: LD_INT 109
23011: EQUAL
23012: IFFALSE 23022
// sBetray := true ;
23014: LD_ADDR_EXP 83
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
// if p3 = 110 then
23022: LD_VAR 0 3
23026: PUSH
23027: LD_INT 110
23029: EQUAL
23030: IFFALSE 23040
// sContamin := true ;
23032: LD_ADDR_EXP 84
23036: PUSH
23037: LD_INT 1
23039: ST_TO_ADDR
// if p3 = 111 then
23040: LD_VAR 0 3
23044: PUSH
23045: LD_INT 111
23047: EQUAL
23048: IFFALSE 23058
// sOil := true ;
23050: LD_ADDR_EXP 86
23054: PUSH
23055: LD_INT 1
23057: ST_TO_ADDR
// if p3 = 112 then
23058: LD_VAR 0 3
23062: PUSH
23063: LD_INT 112
23065: EQUAL
23066: IFFALSE 23076
// sStu := true ;
23068: LD_ADDR_EXP 90
23072: PUSH
23073: LD_INT 1
23075: ST_TO_ADDR
// if p3 = 113 then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_INT 113
23083: EQUAL
23084: IFFALSE 23094
// sBazooka := true ;
23086: LD_ADDR_EXP 93
23090: PUSH
23091: LD_INT 1
23093: ST_TO_ADDR
// if p3 = 114 then
23094: LD_VAR 0 3
23098: PUSH
23099: LD_INT 114
23101: EQUAL
23102: IFFALSE 23112
// sMortar := true ;
23104: LD_ADDR_EXP 94
23108: PUSH
23109: LD_INT 1
23111: ST_TO_ADDR
// if p3 = 115 then
23112: LD_VAR 0 3
23116: PUSH
23117: LD_INT 115
23119: EQUAL
23120: IFFALSE 23130
// sRanger := true ;
23122: LD_ADDR_EXP 104
23126: PUSH
23127: LD_INT 1
23129: ST_TO_ADDR
// if p3 = 116 then
23130: LD_VAR 0 3
23134: PUSH
23135: LD_INT 116
23137: EQUAL
23138: IFFALSE 23148
// sComputer := true ;
23140: LD_ADDR_EXP 105
23144: PUSH
23145: LD_INT 1
23147: ST_TO_ADDR
// if p3 = 117 then
23148: LD_VAR 0 3
23152: PUSH
23153: LD_INT 117
23155: EQUAL
23156: IFFALSE 23166
// s30 := true ;
23158: LD_ADDR_EXP 106
23162: PUSH
23163: LD_INT 1
23165: ST_TO_ADDR
// if p3 = 118 then
23166: LD_VAR 0 3
23170: PUSH
23171: LD_INT 118
23173: EQUAL
23174: IFFALSE 23184
// s60 := true ;
23176: LD_ADDR_EXP 107
23180: PUSH
23181: LD_INT 1
23183: ST_TO_ADDR
// end ; if p2 = hack_mode then
23184: LD_VAR 0 2
23188: PUSH
23189: LD_INT 101
23191: EQUAL
23192: IFFALSE 23320
// begin case p3 of 1 :
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 1
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23214
23207: POP
// hHackUnlimitedResources ; 2 :
23208: CALL 35467 0 0
23212: GO 23320
23214: LD_INT 2
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23229
23222: POP
// hHackSetLevel10 ; 3 :
23223: CALL 35600 0 0
23227: GO 23320
23229: LD_INT 3
23231: DOUBLE
23232: EQUAL
23233: IFTRUE 23237
23235: GO 23244
23237: POP
// hHackSetLevel10YourUnits ; 4 :
23238: CALL 35685 0 0
23242: GO 23320
23244: LD_INT 4
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23259
23252: POP
// hHackInvincible ; 5 :
23253: CALL 36133 0 0
23257: GO 23320
23259: LD_INT 5
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23274
23267: POP
// hHackInvisible ; 6 :
23268: CALL 36244 0 0
23272: GO 23320
23274: LD_INT 6
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23289
23282: POP
// hHackChangeYourSide ; 7 :
23283: CALL 36301 0 0
23287: GO 23320
23289: LD_INT 7
23291: DOUBLE
23292: EQUAL
23293: IFTRUE 23297
23295: GO 23304
23297: POP
// hHackChangeUnitSide ; 8 :
23298: CALL 36343 0 0
23302: GO 23320
23304: LD_INT 8
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23319
23312: POP
// hHackFog ; end ;
23313: CALL 36444 0 0
23317: GO 23320
23319: POP
// end ; if p2 = game_save_mode then
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 102
23327: EQUAL
23328: IFFALSE 23383
// begin if p3 = 1 then
23330: LD_VAR 0 3
23334: PUSH
23335: LD_INT 1
23337: EQUAL
23338: IFFALSE 23350
// globalGameSaveCounter := p4 ;
23340: LD_ADDR_EXP 50
23344: PUSH
23345: LD_VAR 0 4
23349: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23350: LD_VAR 0 3
23354: PUSH
23355: LD_INT 2
23357: EQUAL
23358: PUSH
23359: LD_EXP 50
23363: AND
23364: IFFALSE 23383
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23366: LD_STRING setGameSaveCounter(
23368: PUSH
23369: LD_EXP 50
23373: STR
23374: PUSH
23375: LD_STRING )
23377: STR
23378: PPUSH
23379: CALL_OW 559
// end ; end ;
23383: LD_VAR 0 7
23387: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23388: LD_INT 0
23390: PPUSH
// streamModeActive := false ;
23391: LD_ADDR_EXP 51
23395: PUSH
23396: LD_INT 0
23398: ST_TO_ADDR
// normalCounter := 36 ;
23399: LD_ADDR_EXP 52
23403: PUSH
23404: LD_INT 36
23406: ST_TO_ADDR
// hardcoreCounter := 18 ;
23407: LD_ADDR_EXP 53
23411: PUSH
23412: LD_INT 18
23414: ST_TO_ADDR
// sRocket := false ;
23415: LD_ADDR_EXP 56
23419: PUSH
23420: LD_INT 0
23422: ST_TO_ADDR
// sSpeed := false ;
23423: LD_ADDR_EXP 55
23427: PUSH
23428: LD_INT 0
23430: ST_TO_ADDR
// sEngine := false ;
23431: LD_ADDR_EXP 57
23435: PUSH
23436: LD_INT 0
23438: ST_TO_ADDR
// sSpec := false ;
23439: LD_ADDR_EXP 54
23443: PUSH
23444: LD_INT 0
23446: ST_TO_ADDR
// sLevel := false ;
23447: LD_ADDR_EXP 58
23451: PUSH
23452: LD_INT 0
23454: ST_TO_ADDR
// sArmoury := false ;
23455: LD_ADDR_EXP 59
23459: PUSH
23460: LD_INT 0
23462: ST_TO_ADDR
// sRadar := false ;
23463: LD_ADDR_EXP 60
23467: PUSH
23468: LD_INT 0
23470: ST_TO_ADDR
// sBunker := false ;
23471: LD_ADDR_EXP 61
23475: PUSH
23476: LD_INT 0
23478: ST_TO_ADDR
// sHack := false ;
23479: LD_ADDR_EXP 62
23483: PUSH
23484: LD_INT 0
23486: ST_TO_ADDR
// sFire := false ;
23487: LD_ADDR_EXP 63
23491: PUSH
23492: LD_INT 0
23494: ST_TO_ADDR
// sRefresh := false ;
23495: LD_ADDR_EXP 64
23499: PUSH
23500: LD_INT 0
23502: ST_TO_ADDR
// sExp := false ;
23503: LD_ADDR_EXP 65
23507: PUSH
23508: LD_INT 0
23510: ST_TO_ADDR
// sDepot := false ;
23511: LD_ADDR_EXP 66
23515: PUSH
23516: LD_INT 0
23518: ST_TO_ADDR
// sFlag := false ;
23519: LD_ADDR_EXP 67
23523: PUSH
23524: LD_INT 0
23526: ST_TO_ADDR
// sKamikadze := false ;
23527: LD_ADDR_EXP 75
23531: PUSH
23532: LD_INT 0
23534: ST_TO_ADDR
// sTroll := false ;
23535: LD_ADDR_EXP 76
23539: PUSH
23540: LD_INT 0
23542: ST_TO_ADDR
// sSlow := false ;
23543: LD_ADDR_EXP 77
23547: PUSH
23548: LD_INT 0
23550: ST_TO_ADDR
// sLack := false ;
23551: LD_ADDR_EXP 78
23555: PUSH
23556: LD_INT 0
23558: ST_TO_ADDR
// sTank := false ;
23559: LD_ADDR_EXP 80
23563: PUSH
23564: LD_INT 0
23566: ST_TO_ADDR
// sRemote := false ;
23567: LD_ADDR_EXP 81
23571: PUSH
23572: LD_INT 0
23574: ST_TO_ADDR
// sPowell := false ;
23575: LD_ADDR_EXP 82
23579: PUSH
23580: LD_INT 0
23582: ST_TO_ADDR
// sTeleport := false ;
23583: LD_ADDR_EXP 85
23587: PUSH
23588: LD_INT 0
23590: ST_TO_ADDR
// sOilTower := false ;
23591: LD_ADDR_EXP 87
23595: PUSH
23596: LD_INT 0
23598: ST_TO_ADDR
// sShovel := false ;
23599: LD_ADDR_EXP 88
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// sSheik := false ;
23607: LD_ADDR_EXP 89
23611: PUSH
23612: LD_INT 0
23614: ST_TO_ADDR
// sEarthquake := false ;
23615: LD_ADDR_EXP 91
23619: PUSH
23620: LD_INT 0
23622: ST_TO_ADDR
// sAI := false ;
23623: LD_ADDR_EXP 92
23627: PUSH
23628: LD_INT 0
23630: ST_TO_ADDR
// sCargo := false ;
23631: LD_ADDR_EXP 95
23635: PUSH
23636: LD_INT 0
23638: ST_TO_ADDR
// sDLaser := false ;
23639: LD_ADDR_EXP 96
23643: PUSH
23644: LD_INT 0
23646: ST_TO_ADDR
// sExchange := false ;
23647: LD_ADDR_EXP 97
23651: PUSH
23652: LD_INT 0
23654: ST_TO_ADDR
// sFac := false ;
23655: LD_ADDR_EXP 98
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
// sPower := false ;
23663: LD_ADDR_EXP 99
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// sRandom := false ;
23671: LD_ADDR_EXP 100
23675: PUSH
23676: LD_INT 0
23678: ST_TO_ADDR
// sShield := false ;
23679: LD_ADDR_EXP 101
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// sTime := false ;
23687: LD_ADDR_EXP 102
23691: PUSH
23692: LD_INT 0
23694: ST_TO_ADDR
// sTools := false ;
23695: LD_ADDR_EXP 103
23699: PUSH
23700: LD_INT 0
23702: ST_TO_ADDR
// sSold := false ;
23703: LD_ADDR_EXP 68
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// sDiff := false ;
23711: LD_ADDR_EXP 69
23715: PUSH
23716: LD_INT 0
23718: ST_TO_ADDR
// sFog := false ;
23719: LD_ADDR_EXP 72
23723: PUSH
23724: LD_INT 0
23726: ST_TO_ADDR
// sReset := false ;
23727: LD_ADDR_EXP 73
23731: PUSH
23732: LD_INT 0
23734: ST_TO_ADDR
// sSun := false ;
23735: LD_ADDR_EXP 74
23739: PUSH
23740: LD_INT 0
23742: ST_TO_ADDR
// sTiger := false ;
23743: LD_ADDR_EXP 70
23747: PUSH
23748: LD_INT 0
23750: ST_TO_ADDR
// sBomb := false ;
23751: LD_ADDR_EXP 71
23755: PUSH
23756: LD_INT 0
23758: ST_TO_ADDR
// sWound := false ;
23759: LD_ADDR_EXP 79
23763: PUSH
23764: LD_INT 0
23766: ST_TO_ADDR
// sBetray := false ;
23767: LD_ADDR_EXP 83
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// sContamin := false ;
23775: LD_ADDR_EXP 84
23779: PUSH
23780: LD_INT 0
23782: ST_TO_ADDR
// sOil := false ;
23783: LD_ADDR_EXP 86
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// sStu := false ;
23791: LD_ADDR_EXP 90
23795: PUSH
23796: LD_INT 0
23798: ST_TO_ADDR
// sBazooka := false ;
23799: LD_ADDR_EXP 93
23803: PUSH
23804: LD_INT 0
23806: ST_TO_ADDR
// sMortar := false ;
23807: LD_ADDR_EXP 94
23811: PUSH
23812: LD_INT 0
23814: ST_TO_ADDR
// sRanger := false ;
23815: LD_ADDR_EXP 104
23819: PUSH
23820: LD_INT 0
23822: ST_TO_ADDR
// sComputer := false ;
23823: LD_ADDR_EXP 105
23827: PUSH
23828: LD_INT 0
23830: ST_TO_ADDR
// s30 := false ;
23831: LD_ADDR_EXP 106
23835: PUSH
23836: LD_INT 0
23838: ST_TO_ADDR
// s60 := false ;
23839: LD_ADDR_EXP 107
23843: PUSH
23844: LD_INT 0
23846: ST_TO_ADDR
// end ;
23847: LD_VAR 0 1
23851: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23852: LD_INT 0
23854: PPUSH
23855: PPUSH
23856: PPUSH
23857: PPUSH
23858: PPUSH
23859: PPUSH
23860: PPUSH
// result := [ ] ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: EMPTY
23867: ST_TO_ADDR
// if campaign_id = 1 then
23868: LD_OWVAR 69
23872: PUSH
23873: LD_INT 1
23875: EQUAL
23876: IFFALSE 27042
// begin case mission_number of 1 :
23878: LD_OWVAR 70
23882: PUSH
23883: LD_INT 1
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23967
23891: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: LD_INT 4
23902: PUSH
23903: LD_INT 11
23905: PUSH
23906: LD_INT 12
23908: PUSH
23909: LD_INT 15
23911: PUSH
23912: LD_INT 16
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 23
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 101
23937: PUSH
23938: LD_INT 102
23940: PUSH
23941: LD_INT 106
23943: PUSH
23944: LD_INT 116
23946: PUSH
23947: LD_INT 117
23949: PUSH
23950: LD_INT 118
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 27040
23967: LD_INT 2
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24059
23975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23976: LD_ADDR_VAR 0 2
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 11
23989: PUSH
23990: LD_INT 12
23992: PUSH
23993: LD_INT 15
23995: PUSH
23996: LD_INT 16
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 26
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 101
24021: PUSH
24022: LD_INT 102
24024: PUSH
24025: LD_INT 105
24027: PUSH
24028: LD_INT 106
24030: PUSH
24031: LD_INT 108
24033: PUSH
24034: LD_INT 116
24036: PUSH
24037: LD_INT 117
24039: PUSH
24040: LD_INT 118
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: ST_TO_ADDR
24057: GO 27040
24059: LD_INT 3
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24155
24067: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 4
24078: PUSH
24079: LD_INT 5
24081: PUSH
24082: LD_INT 11
24084: PUSH
24085: LD_INT 12
24087: PUSH
24088: LD_INT 15
24090: PUSH
24091: LD_INT 16
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 26
24099: PUSH
24100: LD_INT 36
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 101
24117: PUSH
24118: LD_INT 102
24120: PUSH
24121: LD_INT 105
24123: PUSH
24124: LD_INT 106
24126: PUSH
24127: LD_INT 108
24129: PUSH
24130: LD_INT 116
24132: PUSH
24133: LD_INT 117
24135: PUSH
24136: LD_INT 118
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: ST_TO_ADDR
24153: GO 27040
24155: LD_INT 4
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24259
24163: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24164: LD_ADDR_VAR 0 2
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 4
24174: PUSH
24175: LD_INT 5
24177: PUSH
24178: LD_INT 8
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 15
24189: PUSH
24190: LD_INT 16
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_INT 23
24198: PUSH
24199: LD_INT 26
24201: PUSH
24202: LD_INT 36
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 101
24221: PUSH
24222: LD_INT 102
24224: PUSH
24225: LD_INT 105
24227: PUSH
24228: LD_INT 106
24230: PUSH
24231: LD_INT 108
24233: PUSH
24234: LD_INT 116
24236: PUSH
24237: LD_INT 117
24239: PUSH
24240: LD_INT 118
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: ST_TO_ADDR
24257: GO 27040
24259: LD_INT 5
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24379
24267: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24268: LD_ADDR_VAR 0 2
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 4
24278: PUSH
24279: LD_INT 5
24281: PUSH
24282: LD_INT 6
24284: PUSH
24285: LD_INT 8
24287: PUSH
24288: LD_INT 11
24290: PUSH
24291: LD_INT 12
24293: PUSH
24294: LD_INT 15
24296: PUSH
24297: LD_INT 16
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_INT 23
24305: PUSH
24306: LD_INT 25
24308: PUSH
24309: LD_INT 26
24311: PUSH
24312: LD_INT 36
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 101
24333: PUSH
24334: LD_INT 102
24336: PUSH
24337: LD_INT 105
24339: PUSH
24340: LD_INT 106
24342: PUSH
24343: LD_INT 108
24345: PUSH
24346: LD_INT 109
24348: PUSH
24349: LD_INT 112
24351: PUSH
24352: LD_INT 116
24354: PUSH
24355: LD_INT 117
24357: PUSH
24358: LD_INT 118
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: ST_TO_ADDR
24377: GO 27040
24379: LD_INT 6
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24519
24387: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24388: LD_ADDR_VAR 0 2
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 4
24398: PUSH
24399: LD_INT 5
24401: PUSH
24402: LD_INT 6
24404: PUSH
24405: LD_INT 8
24407: PUSH
24408: LD_INT 11
24410: PUSH
24411: LD_INT 12
24413: PUSH
24414: LD_INT 15
24416: PUSH
24417: LD_INT 16
24419: PUSH
24420: LD_INT 20
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 22
24428: PUSH
24429: LD_INT 23
24431: PUSH
24432: LD_INT 25
24434: PUSH
24435: LD_INT 26
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 31
24443: PUSH
24444: LD_INT 32
24446: PUSH
24447: LD_INT 36
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 101
24473: PUSH
24474: LD_INT 102
24476: PUSH
24477: LD_INT 105
24479: PUSH
24480: LD_INT 106
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 112
24491: PUSH
24492: LD_INT 116
24494: PUSH
24495: LD_INT 117
24497: PUSH
24498: LD_INT 118
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 27040
24519: LD_INT 7
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24639
24527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24528: LD_ADDR_VAR 0 2
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: LD_INT 7
24544: PUSH
24545: LD_INT 11
24547: PUSH
24548: LD_INT 12
24550: PUSH
24551: LD_INT 15
24553: PUSH
24554: LD_INT 16
24556: PUSH
24557: LD_INT 20
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 22
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 25
24571: PUSH
24572: LD_INT 26
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 101
24593: PUSH
24594: LD_INT 102
24596: PUSH
24597: LD_INT 103
24599: PUSH
24600: LD_INT 105
24602: PUSH
24603: LD_INT 106
24605: PUSH
24606: LD_INT 108
24608: PUSH
24609: LD_INT 112
24611: PUSH
24612: LD_INT 116
24614: PUSH
24615: LD_INT 117
24617: PUSH
24618: LD_INT 118
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 27040
24639: LD_INT 8
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24787
24647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 4
24658: PUSH
24659: LD_INT 5
24661: PUSH
24662: LD_INT 6
24664: PUSH
24665: LD_INT 7
24667: PUSH
24668: LD_INT 8
24670: PUSH
24671: LD_INT 11
24673: PUSH
24674: LD_INT 12
24676: PUSH
24677: LD_INT 15
24679: PUSH
24680: LD_INT 16
24682: PUSH
24683: LD_INT 20
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_INT 23
24694: PUSH
24695: LD_INT 25
24697: PUSH
24698: LD_INT 26
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: LD_INT 31
24706: PUSH
24707: LD_INT 32
24709: PUSH
24710: LD_INT 36
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 101
24737: PUSH
24738: LD_INT 102
24740: PUSH
24741: LD_INT 103
24743: PUSH
24744: LD_INT 105
24746: PUSH
24747: LD_INT 106
24749: PUSH
24750: LD_INT 108
24752: PUSH
24753: LD_INT 109
24755: PUSH
24756: LD_INT 112
24758: PUSH
24759: LD_INT 116
24761: PUSH
24762: LD_INT 117
24764: PUSH
24765: LD_INT 118
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: ST_TO_ADDR
24785: GO 27040
24787: LD_INT 9
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24943
24795: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24796: LD_ADDR_VAR 0 2
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: LD_INT 6
24812: PUSH
24813: LD_INT 7
24815: PUSH
24816: LD_INT 8
24818: PUSH
24819: LD_INT 11
24821: PUSH
24822: LD_INT 12
24824: PUSH
24825: LD_INT 15
24827: PUSH
24828: LD_INT 16
24830: PUSH
24831: LD_INT 20
24833: PUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 22
24839: PUSH
24840: LD_INT 23
24842: PUSH
24843: LD_INT 25
24845: PUSH
24846: LD_INT 26
24848: PUSH
24849: LD_INT 28
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 31
24857: PUSH
24858: LD_INT 32
24860: PUSH
24861: LD_INT 36
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 101
24889: PUSH
24890: LD_INT 102
24892: PUSH
24893: LD_INT 103
24895: PUSH
24896: LD_INT 105
24898: PUSH
24899: LD_INT 106
24901: PUSH
24902: LD_INT 108
24904: PUSH
24905: LD_INT 109
24907: PUSH
24908: LD_INT 112
24910: PUSH
24911: LD_INT 114
24913: PUSH
24914: LD_INT 116
24916: PUSH
24917: LD_INT 117
24919: PUSH
24920: LD_INT 118
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: ST_TO_ADDR
24941: GO 27040
24943: LD_INT 10
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 25147
24951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 4
24962: PUSH
24963: LD_INT 5
24965: PUSH
24966: LD_INT 6
24968: PUSH
24969: LD_INT 7
24971: PUSH
24972: LD_INT 8
24974: PUSH
24975: LD_INT 9
24977: PUSH
24978: LD_INT 10
24980: PUSH
24981: LD_INT 11
24983: PUSH
24984: LD_INT 12
24986: PUSH
24987: LD_INT 13
24989: PUSH
24990: LD_INT 14
24992: PUSH
24993: LD_INT 15
24995: PUSH
24996: LD_INT 16
24998: PUSH
24999: LD_INT 17
25001: PUSH
25002: LD_INT 18
25004: PUSH
25005: LD_INT 19
25007: PUSH
25008: LD_INT 20
25010: PUSH
25011: LD_INT 21
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_INT 23
25019: PUSH
25020: LD_INT 24
25022: PUSH
25023: LD_INT 25
25025: PUSH
25026: LD_INT 26
25028: PUSH
25029: LD_INT 28
25031: PUSH
25032: LD_INT 30
25034: PUSH
25035: LD_INT 31
25037: PUSH
25038: LD_INT 32
25040: PUSH
25041: LD_INT 36
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 101
25077: PUSH
25078: LD_INT 102
25080: PUSH
25081: LD_INT 103
25083: PUSH
25084: LD_INT 104
25086: PUSH
25087: LD_INT 105
25089: PUSH
25090: LD_INT 106
25092: PUSH
25093: LD_INT 107
25095: PUSH
25096: LD_INT 108
25098: PUSH
25099: LD_INT 109
25101: PUSH
25102: LD_INT 110
25104: PUSH
25105: LD_INT 111
25107: PUSH
25108: LD_INT 112
25110: PUSH
25111: LD_INT 114
25113: PUSH
25114: LD_INT 116
25116: PUSH
25117: LD_INT 117
25119: PUSH
25120: LD_INT 118
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 27040
25147: LD_INT 11
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25359
25155: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: LD_INT 4
25169: PUSH
25170: LD_INT 5
25172: PUSH
25173: LD_INT 6
25175: PUSH
25176: LD_INT 7
25178: PUSH
25179: LD_INT 8
25181: PUSH
25182: LD_INT 9
25184: PUSH
25185: LD_INT 10
25187: PUSH
25188: LD_INT 11
25190: PUSH
25191: LD_INT 12
25193: PUSH
25194: LD_INT 13
25196: PUSH
25197: LD_INT 14
25199: PUSH
25200: LD_INT 15
25202: PUSH
25203: LD_INT 16
25205: PUSH
25206: LD_INT 17
25208: PUSH
25209: LD_INT 18
25211: PUSH
25212: LD_INT 19
25214: PUSH
25215: LD_INT 20
25217: PUSH
25218: LD_INT 21
25220: PUSH
25221: LD_INT 22
25223: PUSH
25224: LD_INT 23
25226: PUSH
25227: LD_INT 24
25229: PUSH
25230: LD_INT 25
25232: PUSH
25233: LD_INT 26
25235: PUSH
25236: LD_INT 28
25238: PUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 31
25244: PUSH
25245: LD_INT 32
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 36
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 101
25289: PUSH
25290: LD_INT 102
25292: PUSH
25293: LD_INT 103
25295: PUSH
25296: LD_INT 104
25298: PUSH
25299: LD_INT 105
25301: PUSH
25302: LD_INT 106
25304: PUSH
25305: LD_INT 107
25307: PUSH
25308: LD_INT 108
25310: PUSH
25311: LD_INT 109
25313: PUSH
25314: LD_INT 110
25316: PUSH
25317: LD_INT 111
25319: PUSH
25320: LD_INT 112
25322: PUSH
25323: LD_INT 114
25325: PUSH
25326: LD_INT 116
25328: PUSH
25329: LD_INT 117
25331: PUSH
25332: LD_INT 118
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: ST_TO_ADDR
25357: GO 27040
25359: LD_INT 12
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25587
25367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25368: LD_ADDR_VAR 0 2
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: LD_INT 4
25384: PUSH
25385: LD_INT 5
25387: PUSH
25388: LD_INT 6
25390: PUSH
25391: LD_INT 7
25393: PUSH
25394: LD_INT 8
25396: PUSH
25397: LD_INT 9
25399: PUSH
25400: LD_INT 10
25402: PUSH
25403: LD_INT 11
25405: PUSH
25406: LD_INT 12
25408: PUSH
25409: LD_INT 13
25411: PUSH
25412: LD_INT 14
25414: PUSH
25415: LD_INT 15
25417: PUSH
25418: LD_INT 16
25420: PUSH
25421: LD_INT 17
25423: PUSH
25424: LD_INT 18
25426: PUSH
25427: LD_INT 19
25429: PUSH
25430: LD_INT 20
25432: PUSH
25433: LD_INT 21
25435: PUSH
25436: LD_INT 22
25438: PUSH
25439: LD_INT 23
25441: PUSH
25442: LD_INT 24
25444: PUSH
25445: LD_INT 25
25447: PUSH
25448: LD_INT 26
25450: PUSH
25451: LD_INT 27
25453: PUSH
25454: LD_INT 28
25456: PUSH
25457: LD_INT 30
25459: PUSH
25460: LD_INT 31
25462: PUSH
25463: LD_INT 32
25465: PUSH
25466: LD_INT 33
25468: PUSH
25469: LD_INT 34
25471: PUSH
25472: LD_INT 36
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 101
25513: PUSH
25514: LD_INT 102
25516: PUSH
25517: LD_INT 103
25519: PUSH
25520: LD_INT 104
25522: PUSH
25523: LD_INT 105
25525: PUSH
25526: LD_INT 106
25528: PUSH
25529: LD_INT 107
25531: PUSH
25532: LD_INT 108
25534: PUSH
25535: LD_INT 109
25537: PUSH
25538: LD_INT 110
25540: PUSH
25541: LD_INT 111
25543: PUSH
25544: LD_INT 112
25546: PUSH
25547: LD_INT 113
25549: PUSH
25550: LD_INT 114
25552: PUSH
25553: LD_INT 116
25555: PUSH
25556: LD_INT 117
25558: PUSH
25559: LD_INT 118
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 27040
25587: LD_INT 13
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25803
25595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25596: LD_ADDR_VAR 0 2
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 4
25612: PUSH
25613: LD_INT 5
25615: PUSH
25616: LD_INT 8
25618: PUSH
25619: LD_INT 9
25621: PUSH
25622: LD_INT 10
25624: PUSH
25625: LD_INT 11
25627: PUSH
25628: LD_INT 12
25630: PUSH
25631: LD_INT 14
25633: PUSH
25634: LD_INT 15
25636: PUSH
25637: LD_INT 16
25639: PUSH
25640: LD_INT 17
25642: PUSH
25643: LD_INT 18
25645: PUSH
25646: LD_INT 19
25648: PUSH
25649: LD_INT 20
25651: PUSH
25652: LD_INT 21
25654: PUSH
25655: LD_INT 22
25657: PUSH
25658: LD_INT 23
25660: PUSH
25661: LD_INT 24
25663: PUSH
25664: LD_INT 25
25666: PUSH
25667: LD_INT 26
25669: PUSH
25670: LD_INT 27
25672: PUSH
25673: LD_INT 28
25675: PUSH
25676: LD_INT 30
25678: PUSH
25679: LD_INT 31
25681: PUSH
25682: LD_INT 32
25684: PUSH
25685: LD_INT 33
25687: PUSH
25688: LD_INT 34
25690: PUSH
25691: LD_INT 36
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 101
25729: PUSH
25730: LD_INT 102
25732: PUSH
25733: LD_INT 103
25735: PUSH
25736: LD_INT 104
25738: PUSH
25739: LD_INT 105
25741: PUSH
25742: LD_INT 106
25744: PUSH
25745: LD_INT 107
25747: PUSH
25748: LD_INT 108
25750: PUSH
25751: LD_INT 109
25753: PUSH
25754: LD_INT 110
25756: PUSH
25757: LD_INT 111
25759: PUSH
25760: LD_INT 112
25762: PUSH
25763: LD_INT 113
25765: PUSH
25766: LD_INT 114
25768: PUSH
25769: LD_INT 116
25771: PUSH
25772: LD_INT 117
25774: PUSH
25775: LD_INT 118
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: ST_TO_ADDR
25801: GO 27040
25803: LD_INT 14
25805: DOUBLE
25806: EQUAL
25807: IFTRUE 25811
25809: GO 26035
25811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: LD_INT 4
25828: PUSH
25829: LD_INT 5
25831: PUSH
25832: LD_INT 6
25834: PUSH
25835: LD_INT 7
25837: PUSH
25838: LD_INT 8
25840: PUSH
25841: LD_INT 9
25843: PUSH
25844: LD_INT 10
25846: PUSH
25847: LD_INT 11
25849: PUSH
25850: LD_INT 12
25852: PUSH
25853: LD_INT 13
25855: PUSH
25856: LD_INT 14
25858: PUSH
25859: LD_INT 15
25861: PUSH
25862: LD_INT 16
25864: PUSH
25865: LD_INT 17
25867: PUSH
25868: LD_INT 18
25870: PUSH
25871: LD_INT 19
25873: PUSH
25874: LD_INT 20
25876: PUSH
25877: LD_INT 21
25879: PUSH
25880: LD_INT 22
25882: PUSH
25883: LD_INT 23
25885: PUSH
25886: LD_INT 24
25888: PUSH
25889: LD_INT 25
25891: PUSH
25892: LD_INT 26
25894: PUSH
25895: LD_INT 27
25897: PUSH
25898: LD_INT 28
25900: PUSH
25901: LD_INT 29
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 31
25909: PUSH
25910: LD_INT 32
25912: PUSH
25913: LD_INT 33
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 36
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 101
25961: PUSH
25962: LD_INT 102
25964: PUSH
25965: LD_INT 103
25967: PUSH
25968: LD_INT 104
25970: PUSH
25971: LD_INT 105
25973: PUSH
25974: LD_INT 106
25976: PUSH
25977: LD_INT 107
25979: PUSH
25980: LD_INT 108
25982: PUSH
25983: LD_INT 109
25985: PUSH
25986: LD_INT 110
25988: PUSH
25989: LD_INT 111
25991: PUSH
25992: LD_INT 112
25994: PUSH
25995: LD_INT 113
25997: PUSH
25998: LD_INT 114
26000: PUSH
26001: LD_INT 116
26003: PUSH
26004: LD_INT 117
26006: PUSH
26007: LD_INT 118
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 27040
26035: LD_INT 15
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26267
26043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: LD_INT 6
26066: PUSH
26067: LD_INT 7
26069: PUSH
26070: LD_INT 8
26072: PUSH
26073: LD_INT 9
26075: PUSH
26076: LD_INT 10
26078: PUSH
26079: LD_INT 11
26081: PUSH
26082: LD_INT 12
26084: PUSH
26085: LD_INT 13
26087: PUSH
26088: LD_INT 14
26090: PUSH
26091: LD_INT 15
26093: PUSH
26094: LD_INT 16
26096: PUSH
26097: LD_INT 17
26099: PUSH
26100: LD_INT 18
26102: PUSH
26103: LD_INT 19
26105: PUSH
26106: LD_INT 20
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_INT 23
26117: PUSH
26118: LD_INT 24
26120: PUSH
26121: LD_INT 25
26123: PUSH
26124: LD_INT 26
26126: PUSH
26127: LD_INT 27
26129: PUSH
26130: LD_INT 28
26132: PUSH
26133: LD_INT 29
26135: PUSH
26136: LD_INT 30
26138: PUSH
26139: LD_INT 31
26141: PUSH
26142: LD_INT 32
26144: PUSH
26145: LD_INT 33
26147: PUSH
26148: LD_INT 34
26150: PUSH
26151: LD_INT 36
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 101
26193: PUSH
26194: LD_INT 102
26196: PUSH
26197: LD_INT 103
26199: PUSH
26200: LD_INT 104
26202: PUSH
26203: LD_INT 105
26205: PUSH
26206: LD_INT 106
26208: PUSH
26209: LD_INT 107
26211: PUSH
26212: LD_INT 108
26214: PUSH
26215: LD_INT 109
26217: PUSH
26218: LD_INT 110
26220: PUSH
26221: LD_INT 111
26223: PUSH
26224: LD_INT 112
26226: PUSH
26227: LD_INT 113
26229: PUSH
26230: LD_INT 114
26232: PUSH
26233: LD_INT 116
26235: PUSH
26236: LD_INT 117
26238: PUSH
26239: LD_INT 118
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: ST_TO_ADDR
26265: GO 27040
26267: LD_INT 16
26269: DOUBLE
26270: EQUAL
26271: IFTRUE 26275
26273: GO 26411
26275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26276: LD_ADDR_VAR 0 2
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 4
26286: PUSH
26287: LD_INT 5
26289: PUSH
26290: LD_INT 7
26292: PUSH
26293: LD_INT 11
26295: PUSH
26296: LD_INT 12
26298: PUSH
26299: LD_INT 15
26301: PUSH
26302: LD_INT 16
26304: PUSH
26305: LD_INT 20
26307: PUSH
26308: LD_INT 21
26310: PUSH
26311: LD_INT 22
26313: PUSH
26314: LD_INT 23
26316: PUSH
26317: LD_INT 25
26319: PUSH
26320: LD_INT 26
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 31
26328: PUSH
26329: LD_INT 32
26331: PUSH
26332: LD_INT 33
26334: PUSH
26335: LD_INT 34
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 101
26361: PUSH
26362: LD_INT 102
26364: PUSH
26365: LD_INT 103
26367: PUSH
26368: LD_INT 106
26370: PUSH
26371: LD_INT 108
26373: PUSH
26374: LD_INT 112
26376: PUSH
26377: LD_INT 113
26379: PUSH
26380: LD_INT 114
26382: PUSH
26383: LD_INT 116
26385: PUSH
26386: LD_INT 117
26388: PUSH
26389: LD_INT 118
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: ST_TO_ADDR
26409: GO 27040
26411: LD_INT 17
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 26643
26419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26420: LD_ADDR_VAR 0 2
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 4
26436: PUSH
26437: LD_INT 5
26439: PUSH
26440: LD_INT 6
26442: PUSH
26443: LD_INT 7
26445: PUSH
26446: LD_INT 8
26448: PUSH
26449: LD_INT 9
26451: PUSH
26452: LD_INT 10
26454: PUSH
26455: LD_INT 11
26457: PUSH
26458: LD_INT 12
26460: PUSH
26461: LD_INT 13
26463: PUSH
26464: LD_INT 14
26466: PUSH
26467: LD_INT 15
26469: PUSH
26470: LD_INT 16
26472: PUSH
26473: LD_INT 17
26475: PUSH
26476: LD_INT 18
26478: PUSH
26479: LD_INT 19
26481: PUSH
26482: LD_INT 20
26484: PUSH
26485: LD_INT 21
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_INT 23
26493: PUSH
26494: LD_INT 24
26496: PUSH
26497: LD_INT 25
26499: PUSH
26500: LD_INT 26
26502: PUSH
26503: LD_INT 27
26505: PUSH
26506: LD_INT 28
26508: PUSH
26509: LD_INT 29
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 31
26517: PUSH
26518: LD_INT 32
26520: PUSH
26521: LD_INT 33
26523: PUSH
26524: LD_INT 34
26526: PUSH
26527: LD_INT 36
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 101
26569: PUSH
26570: LD_INT 102
26572: PUSH
26573: LD_INT 103
26575: PUSH
26576: LD_INT 104
26578: PUSH
26579: LD_INT 105
26581: PUSH
26582: LD_INT 106
26584: PUSH
26585: LD_INT 107
26587: PUSH
26588: LD_INT 108
26590: PUSH
26591: LD_INT 109
26593: PUSH
26594: LD_INT 110
26596: PUSH
26597: LD_INT 111
26599: PUSH
26600: LD_INT 112
26602: PUSH
26603: LD_INT 113
26605: PUSH
26606: LD_INT 114
26608: PUSH
26609: LD_INT 116
26611: PUSH
26612: LD_INT 117
26614: PUSH
26615: LD_INT 118
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: ST_TO_ADDR
26641: GO 27040
26643: LD_INT 18
26645: DOUBLE
26646: EQUAL
26647: IFTRUE 26651
26649: GO 26799
26651: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 4
26662: PUSH
26663: LD_INT 5
26665: PUSH
26666: LD_INT 7
26668: PUSH
26669: LD_INT 11
26671: PUSH
26672: LD_INT 12
26674: PUSH
26675: LD_INT 15
26677: PUSH
26678: LD_INT 16
26680: PUSH
26681: LD_INT 20
26683: PUSH
26684: LD_INT 21
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_INT 23
26692: PUSH
26693: LD_INT 25
26695: PUSH
26696: LD_INT 26
26698: PUSH
26699: LD_INT 30
26701: PUSH
26702: LD_INT 31
26704: PUSH
26705: LD_INT 32
26707: PUSH
26708: LD_INT 33
26710: PUSH
26711: LD_INT 34
26713: PUSH
26714: LD_INT 35
26716: PUSH
26717: LD_INT 36
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 101
26745: PUSH
26746: LD_INT 102
26748: PUSH
26749: LD_INT 103
26751: PUSH
26752: LD_INT 106
26754: PUSH
26755: LD_INT 108
26757: PUSH
26758: LD_INT 112
26760: PUSH
26761: LD_INT 113
26763: PUSH
26764: LD_INT 114
26766: PUSH
26767: LD_INT 115
26769: PUSH
26770: LD_INT 116
26772: PUSH
26773: LD_INT 117
26775: PUSH
26776: LD_INT 118
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: ST_TO_ADDR
26797: GO 27040
26799: LD_INT 19
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 27039
26807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26808: LD_ADDR_VAR 0 2
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: LD_INT 4
26824: PUSH
26825: LD_INT 5
26827: PUSH
26828: LD_INT 6
26830: PUSH
26831: LD_INT 7
26833: PUSH
26834: LD_INT 8
26836: PUSH
26837: LD_INT 9
26839: PUSH
26840: LD_INT 10
26842: PUSH
26843: LD_INT 11
26845: PUSH
26846: LD_INT 12
26848: PUSH
26849: LD_INT 13
26851: PUSH
26852: LD_INT 14
26854: PUSH
26855: LD_INT 15
26857: PUSH
26858: LD_INT 16
26860: PUSH
26861: LD_INT 17
26863: PUSH
26864: LD_INT 18
26866: PUSH
26867: LD_INT 19
26869: PUSH
26870: LD_INT 20
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 22
26878: PUSH
26879: LD_INT 23
26881: PUSH
26882: LD_INT 24
26884: PUSH
26885: LD_INT 25
26887: PUSH
26888: LD_INT 26
26890: PUSH
26891: LD_INT 27
26893: PUSH
26894: LD_INT 28
26896: PUSH
26897: LD_INT 29
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 31
26905: PUSH
26906: LD_INT 32
26908: PUSH
26909: LD_INT 33
26911: PUSH
26912: LD_INT 34
26914: PUSH
26915: LD_INT 35
26917: PUSH
26918: LD_INT 36
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 101
26961: PUSH
26962: LD_INT 102
26964: PUSH
26965: LD_INT 103
26967: PUSH
26968: LD_INT 104
26970: PUSH
26971: LD_INT 105
26973: PUSH
26974: LD_INT 106
26976: PUSH
26977: LD_INT 107
26979: PUSH
26980: LD_INT 108
26982: PUSH
26983: LD_INT 109
26985: PUSH
26986: LD_INT 110
26988: PUSH
26989: LD_INT 111
26991: PUSH
26992: LD_INT 112
26994: PUSH
26995: LD_INT 113
26997: PUSH
26998: LD_INT 114
27000: PUSH
27001: LD_INT 115
27003: PUSH
27004: LD_INT 116
27006: PUSH
27007: LD_INT 117
27009: PUSH
27010: LD_INT 118
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: ST_TO_ADDR
27037: GO 27040
27039: POP
// end else
27040: GO 27271
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27042: LD_ADDR_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: LD_INT 4
27058: PUSH
27059: LD_INT 5
27061: PUSH
27062: LD_INT 6
27064: PUSH
27065: LD_INT 7
27067: PUSH
27068: LD_INT 8
27070: PUSH
27071: LD_INT 9
27073: PUSH
27074: LD_INT 10
27076: PUSH
27077: LD_INT 11
27079: PUSH
27080: LD_INT 12
27082: PUSH
27083: LD_INT 13
27085: PUSH
27086: LD_INT 14
27088: PUSH
27089: LD_INT 15
27091: PUSH
27092: LD_INT 16
27094: PUSH
27095: LD_INT 17
27097: PUSH
27098: LD_INT 18
27100: PUSH
27101: LD_INT 19
27103: PUSH
27104: LD_INT 20
27106: PUSH
27107: LD_INT 21
27109: PUSH
27110: LD_INT 22
27112: PUSH
27113: LD_INT 23
27115: PUSH
27116: LD_INT 24
27118: PUSH
27119: LD_INT 25
27121: PUSH
27122: LD_INT 26
27124: PUSH
27125: LD_INT 27
27127: PUSH
27128: LD_INT 28
27130: PUSH
27131: LD_INT 29
27133: PUSH
27134: LD_INT 30
27136: PUSH
27137: LD_INT 31
27139: PUSH
27140: LD_INT 32
27142: PUSH
27143: LD_INT 33
27145: PUSH
27146: LD_INT 34
27148: PUSH
27149: LD_INT 35
27151: PUSH
27152: LD_INT 36
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 101
27195: PUSH
27196: LD_INT 102
27198: PUSH
27199: LD_INT 103
27201: PUSH
27202: LD_INT 104
27204: PUSH
27205: LD_INT 105
27207: PUSH
27208: LD_INT 106
27210: PUSH
27211: LD_INT 107
27213: PUSH
27214: LD_INT 108
27216: PUSH
27217: LD_INT 109
27219: PUSH
27220: LD_INT 110
27222: PUSH
27223: LD_INT 111
27225: PUSH
27226: LD_INT 112
27228: PUSH
27229: LD_INT 113
27231: PUSH
27232: LD_INT 114
27234: PUSH
27235: LD_INT 115
27237: PUSH
27238: LD_INT 116
27240: PUSH
27241: LD_INT 117
27243: PUSH
27244: LD_INT 118
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: ST_TO_ADDR
// if result then
27271: LD_VAR 0 2
27275: IFFALSE 28061
// begin normal :=  ;
27277: LD_ADDR_VAR 0 5
27281: PUSH
27282: LD_STRING 
27284: ST_TO_ADDR
// hardcore :=  ;
27285: LD_ADDR_VAR 0 6
27289: PUSH
27290: LD_STRING 
27292: ST_TO_ADDR
// active :=  ;
27293: LD_ADDR_VAR 0 7
27297: PUSH
27298: LD_STRING 
27300: ST_TO_ADDR
// for i = 1 to normalCounter do
27301: LD_ADDR_VAR 0 8
27305: PUSH
27306: DOUBLE
27307: LD_INT 1
27309: DEC
27310: ST_TO_ADDR
27311: LD_EXP 52
27315: PUSH
27316: FOR_TO
27317: IFFALSE 27418
// begin tmp := 0 ;
27319: LD_ADDR_VAR 0 3
27323: PUSH
27324: LD_STRING 0
27326: ST_TO_ADDR
// if result [ 1 ] then
27327: LD_VAR 0 2
27331: PUSH
27332: LD_INT 1
27334: ARRAY
27335: IFFALSE 27400
// if result [ 1 ] [ 1 ] = i then
27337: LD_VAR 0 2
27341: PUSH
27342: LD_INT 1
27344: ARRAY
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: LD_VAR 0 8
27354: EQUAL
27355: IFFALSE 27400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27357: LD_ADDR_VAR 0 2
27361: PUSH
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_VAR 0 2
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: CALL_OW 3
27386: PPUSH
27387: CALL_OW 1
27391: ST_TO_ADDR
// tmp := 1 ;
27392: LD_ADDR_VAR 0 3
27396: PUSH
27397: LD_STRING 1
27399: ST_TO_ADDR
// end ; normal := normal & tmp ;
27400: LD_ADDR_VAR 0 5
27404: PUSH
27405: LD_VAR 0 5
27409: PUSH
27410: LD_VAR 0 3
27414: STR
27415: ST_TO_ADDR
// end ;
27416: GO 27316
27418: POP
27419: POP
// for i = 1 to hardcoreCounter do
27420: LD_ADDR_VAR 0 8
27424: PUSH
27425: DOUBLE
27426: LD_INT 1
27428: DEC
27429: ST_TO_ADDR
27430: LD_EXP 53
27434: PUSH
27435: FOR_TO
27436: IFFALSE 27541
// begin tmp := 0 ;
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_STRING 0
27445: ST_TO_ADDR
// if result [ 2 ] then
27446: LD_VAR 0 2
27450: PUSH
27451: LD_INT 2
27453: ARRAY
27454: IFFALSE 27523
// if result [ 2 ] [ 1 ] = 100 + i then
27456: LD_VAR 0 2
27460: PUSH
27461: LD_INT 2
27463: ARRAY
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: PUSH
27469: LD_INT 100
27471: PUSH
27472: LD_VAR 0 8
27476: PLUS
27477: EQUAL
27478: IFFALSE 27523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27480: LD_ADDR_VAR 0 2
27484: PUSH
27485: LD_VAR 0 2
27489: PPUSH
27490: LD_INT 2
27492: PPUSH
27493: LD_VAR 0 2
27497: PUSH
27498: LD_INT 2
27500: ARRAY
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: CALL_OW 3
27509: PPUSH
27510: CALL_OW 1
27514: ST_TO_ADDR
// tmp := 1 ;
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_STRING 1
27522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27523: LD_ADDR_VAR 0 6
27527: PUSH
27528: LD_VAR 0 6
27532: PUSH
27533: LD_VAR 0 3
27537: STR
27538: ST_TO_ADDR
// end ;
27539: GO 27435
27541: POP
27542: POP
// if isGameLoad then
27543: LD_VAR 0 1
27547: IFFALSE 28022
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27549: LD_ADDR_VAR 0 4
27553: PUSH
27554: LD_EXP 56
27558: PUSH
27559: LD_EXP 55
27563: PUSH
27564: LD_EXP 57
27568: PUSH
27569: LD_EXP 54
27573: PUSH
27574: LD_EXP 58
27578: PUSH
27579: LD_EXP 59
27583: PUSH
27584: LD_EXP 60
27588: PUSH
27589: LD_EXP 61
27593: PUSH
27594: LD_EXP 62
27598: PUSH
27599: LD_EXP 63
27603: PUSH
27604: LD_EXP 64
27608: PUSH
27609: LD_EXP 65
27613: PUSH
27614: LD_EXP 66
27618: PUSH
27619: LD_EXP 67
27623: PUSH
27624: LD_EXP 75
27628: PUSH
27629: LD_EXP 76
27633: PUSH
27634: LD_EXP 77
27638: PUSH
27639: LD_EXP 78
27643: PUSH
27644: LD_EXP 80
27648: PUSH
27649: LD_EXP 81
27653: PUSH
27654: LD_EXP 82
27658: PUSH
27659: LD_EXP 85
27663: PUSH
27664: LD_EXP 87
27668: PUSH
27669: LD_EXP 88
27673: PUSH
27674: LD_EXP 89
27678: PUSH
27679: LD_EXP 91
27683: PUSH
27684: LD_EXP 92
27688: PUSH
27689: LD_EXP 95
27693: PUSH
27694: LD_EXP 96
27698: PUSH
27699: LD_EXP 97
27703: PUSH
27704: LD_EXP 98
27708: PUSH
27709: LD_EXP 99
27713: PUSH
27714: LD_EXP 100
27718: PUSH
27719: LD_EXP 101
27723: PUSH
27724: LD_EXP 102
27728: PUSH
27729: LD_EXP 103
27733: PUSH
27734: LD_EXP 68
27738: PUSH
27739: LD_EXP 69
27743: PUSH
27744: LD_EXP 72
27748: PUSH
27749: LD_EXP 73
27753: PUSH
27754: LD_EXP 74
27758: PUSH
27759: LD_EXP 70
27763: PUSH
27764: LD_EXP 71
27768: PUSH
27769: LD_EXP 79
27773: PUSH
27774: LD_EXP 83
27778: PUSH
27779: LD_EXP 84
27783: PUSH
27784: LD_EXP 86
27788: PUSH
27789: LD_EXP 90
27793: PUSH
27794: LD_EXP 93
27798: PUSH
27799: LD_EXP 94
27803: PUSH
27804: LD_EXP 104
27808: PUSH
27809: LD_EXP 105
27813: PUSH
27814: LD_EXP 106
27818: PUSH
27819: LD_EXP 107
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// tmp :=  ;
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_STRING 
27887: ST_TO_ADDR
// for i = 1 to normalCounter do
27888: LD_ADDR_VAR 0 8
27892: PUSH
27893: DOUBLE
27894: LD_INT 1
27896: DEC
27897: ST_TO_ADDR
27898: LD_EXP 52
27902: PUSH
27903: FOR_TO
27904: IFFALSE 27940
// begin if flags [ i ] then
27906: LD_VAR 0 4
27910: PUSH
27911: LD_VAR 0 8
27915: ARRAY
27916: IFFALSE 27938
// tmp := tmp & i & ; ;
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_VAR 0 3
27927: PUSH
27928: LD_VAR 0 8
27932: STR
27933: PUSH
27934: LD_STRING ;
27936: STR
27937: ST_TO_ADDR
// end ;
27938: GO 27903
27940: POP
27941: POP
// for i = 1 to hardcoreCounter do
27942: LD_ADDR_VAR 0 8
27946: PUSH
27947: DOUBLE
27948: LD_INT 1
27950: DEC
27951: ST_TO_ADDR
27952: LD_EXP 53
27956: PUSH
27957: FOR_TO
27958: IFFALSE 28004
// begin if flags [ normalCounter + i ] then
27960: LD_VAR 0 4
27964: PUSH
27965: LD_EXP 52
27969: PUSH
27970: LD_VAR 0 8
27974: PLUS
27975: ARRAY
27976: IFFALSE 28002
// tmp := tmp & ( 100 + i ) & ; ;
27978: LD_ADDR_VAR 0 3
27982: PUSH
27983: LD_VAR 0 3
27987: PUSH
27988: LD_INT 100
27990: PUSH
27991: LD_VAR 0 8
27995: PLUS
27996: STR
27997: PUSH
27998: LD_STRING ;
28000: STR
28001: ST_TO_ADDR
// end ;
28002: GO 27957
28004: POP
28005: POP
// if tmp then
28006: LD_VAR 0 3
28010: IFFALSE 28022
// active := tmp ;
28012: LD_ADDR_VAR 0 7
28016: PUSH
28017: LD_VAR 0 3
28021: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28022: LD_STRING getStreamItemsFromMission("
28024: PUSH
28025: LD_VAR 0 5
28029: STR
28030: PUSH
28031: LD_STRING ","
28033: STR
28034: PUSH
28035: LD_VAR 0 6
28039: STR
28040: PUSH
28041: LD_STRING ","
28043: STR
28044: PUSH
28045: LD_VAR 0 7
28049: STR
28050: PUSH
28051: LD_STRING ")
28053: STR
28054: PPUSH
28055: CALL_OW 559
// end else
28059: GO 28068
// ToLua ( getStreamItemsFromMission("","","") ) ;
28061: LD_STRING getStreamItemsFromMission("","","")
28063: PPUSH
28064: CALL_OW 559
// end ;
28068: LD_VAR 0 2
28072: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28073: LD_EXP 51
28077: PUSH
28078: LD_EXP 56
28082: AND
28083: IFFALSE 28207
28085: GO 28087
28087: DISABLE
28088: LD_INT 0
28090: PPUSH
28091: PPUSH
// begin enable ;
28092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28093: LD_ADDR_VAR 0 2
28097: PUSH
28098: LD_INT 22
28100: PUSH
28101: LD_OWVAR 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 34
28115: PUSH
28116: LD_INT 7
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 34
28125: PUSH
28126: LD_INT 45
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 34
28135: PUSH
28136: LD_INT 28
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 34
28145: PUSH
28146: LD_INT 47
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 2
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28207
// for i in tmp do
28178: LD_ADDR_VAR 0 1
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28205
// begin SetLives ( i , 0 ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: CALL_OW 234
// end ;
28203: GO 28188
28205: POP
28206: POP
// end ;
28207: PPOPN 2
28209: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28210: LD_EXP 51
28214: PUSH
28215: LD_EXP 57
28219: AND
28220: IFFALSE 28304
28222: GO 28224
28224: DISABLE
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
// begin enable ;
28229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28230: LD_ADDR_VAR 0 2
28234: PUSH
28235: LD_INT 22
28237: PUSH
28238: LD_OWVAR 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 32
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL_OW 69
28265: ST_TO_ADDR
// if not tmp then
28266: LD_VAR 0 2
28270: NOT
28271: IFFALSE 28275
// exit ;
28273: GO 28304
// for i in tmp do
28275: LD_ADDR_VAR 0 1
28279: PUSH
28280: LD_VAR 0 2
28284: PUSH
28285: FOR_IN
28286: IFFALSE 28302
// begin SetLives ( i , 0 ) ;
28288: LD_VAR 0 1
28292: PPUSH
28293: LD_INT 0
28295: PPUSH
28296: CALL_OW 234
// end ;
28300: GO 28285
28302: POP
28303: POP
// end ;
28304: PPOPN 2
28306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28307: LD_EXP 51
28311: PUSH
28312: LD_EXP 54
28316: AND
28317: IFFALSE 28410
28319: GO 28321
28321: DISABLE
28322: LD_INT 0
28324: PPUSH
// begin enable ;
28325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_OWVAR 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 5
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 25
28358: PUSH
28359: LD_INT 9
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 25
28368: PUSH
28369: LD_INT 8
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: PUSH
28391: FOR_IN
28392: IFFALSE 28408
// begin SetClass ( i , 1 ) ;
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: CALL_OW 336
// end ;
28406: GO 28391
28408: POP
28409: POP
// end ;
28410: PPOPN 1
28412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28413: LD_EXP 51
28417: PUSH
28418: LD_EXP 55
28422: AND
28423: PUSH
28424: LD_OWVAR 65
28428: PUSH
28429: LD_INT 7
28431: LESS
28432: AND
28433: IFFALSE 28447
28435: GO 28437
28437: DISABLE
// begin enable ;
28438: ENABLE
// game_speed := 7 ;
28439: LD_ADDR_OWVAR 65
28443: PUSH
28444: LD_INT 7
28446: ST_TO_ADDR
// end ;
28447: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28448: LD_EXP 51
28452: PUSH
28453: LD_EXP 58
28457: AND
28458: IFFALSE 28660
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
28467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28468: LD_ADDR_VAR 0 3
28472: PUSH
28473: LD_INT 81
28475: PUSH
28476: LD_OWVAR 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 21
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PPUSH
28499: CALL_OW 69
28503: ST_TO_ADDR
// if not tmp then
28504: LD_VAR 0 3
28508: NOT
28509: IFFALSE 28513
// exit ;
28511: GO 28660
// if tmp > 5 then
28513: LD_VAR 0 3
28517: PUSH
28518: LD_INT 5
28520: GREATER
28521: IFFALSE 28533
// k := 5 else
28523: LD_ADDR_VAR 0 2
28527: PUSH
28528: LD_INT 5
28530: ST_TO_ADDR
28531: GO 28543
// k := tmp ;
28533: LD_ADDR_VAR 0 2
28537: PUSH
28538: LD_VAR 0 3
28542: ST_TO_ADDR
// for i := 1 to k do
28543: LD_ADDR_VAR 0 1
28547: PUSH
28548: DOUBLE
28549: LD_INT 1
28551: DEC
28552: ST_TO_ADDR
28553: LD_VAR 0 2
28557: PUSH
28558: FOR_TO
28559: IFFALSE 28658
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28561: LD_VAR 0 3
28565: PUSH
28566: LD_VAR 0 1
28570: ARRAY
28571: PPUSH
28572: LD_VAR 0 1
28576: PUSH
28577: LD_INT 4
28579: MOD
28580: PUSH
28581: LD_INT 1
28583: PLUS
28584: PPUSH
28585: CALL_OW 259
28589: PUSH
28590: LD_INT 10
28592: LESS
28593: IFFALSE 28656
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28595: LD_VAR 0 3
28599: PUSH
28600: LD_VAR 0 1
28604: ARRAY
28605: PPUSH
28606: LD_VAR 0 1
28610: PUSH
28611: LD_INT 4
28613: MOD
28614: PUSH
28615: LD_INT 1
28617: PLUS
28618: PPUSH
28619: LD_VAR 0 3
28623: PUSH
28624: LD_VAR 0 1
28628: ARRAY
28629: PPUSH
28630: LD_VAR 0 1
28634: PUSH
28635: LD_INT 4
28637: MOD
28638: PUSH
28639: LD_INT 1
28641: PLUS
28642: PPUSH
28643: CALL_OW 259
28647: PUSH
28648: LD_INT 1
28650: PLUS
28651: PPUSH
28652: CALL_OW 237
28656: GO 28558
28658: POP
28659: POP
// end ;
28660: PPOPN 3
28662: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28663: LD_EXP 51
28667: PUSH
28668: LD_EXP 59
28672: AND
28673: IFFALSE 28693
28675: GO 28677
28677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28678: LD_INT 4
28680: PPUSH
28681: LD_OWVAR 2
28685: PPUSH
28686: LD_INT 0
28688: PPUSH
28689: CALL_OW 324
28693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28694: LD_EXP 51
28698: PUSH
28699: LD_EXP 88
28703: AND
28704: IFFALSE 28724
28706: GO 28708
28708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28709: LD_INT 19
28711: PPUSH
28712: LD_OWVAR 2
28716: PPUSH
28717: LD_INT 0
28719: PPUSH
28720: CALL_OW 324
28724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28725: LD_EXP 51
28729: PUSH
28730: LD_EXP 60
28734: AND
28735: IFFALSE 28837
28737: GO 28739
28739: DISABLE
28740: LD_INT 0
28742: PPUSH
28743: PPUSH
// begin enable ;
28744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_INT 22
28752: PUSH
28753: LD_OWVAR 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 34
28767: PUSH
28768: LD_INT 11
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 34
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PPUSH
28794: CALL_OW 69
28798: ST_TO_ADDR
// if not tmp then
28799: LD_VAR 0 2
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 28837
// for i in tmp do
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_VAR 0 2
28817: PUSH
28818: FOR_IN
28819: IFFALSE 28835
// begin SetLives ( i , 0 ) ;
28821: LD_VAR 0 1
28825: PPUSH
28826: LD_INT 0
28828: PPUSH
28829: CALL_OW 234
// end ;
28833: GO 28818
28835: POP
28836: POP
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28840: LD_EXP 51
28844: PUSH
28845: LD_EXP 61
28849: AND
28850: IFFALSE 28870
28852: GO 28854
28854: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28855: LD_INT 32
28857: PPUSH
28858: LD_OWVAR 2
28862: PPUSH
28863: LD_INT 0
28865: PPUSH
28866: CALL_OW 324
28870: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28871: LD_EXP 51
28875: PUSH
28876: LD_EXP 62
28880: AND
28881: IFFALSE 29062
28883: GO 28885
28885: DISABLE
28886: LD_INT 0
28888: PPUSH
28889: PPUSH
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28891: LD_ADDR_VAR 0 2
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 33
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 69
28926: ST_TO_ADDR
// if not tmp then
28927: LD_VAR 0 2
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29062
// side := 0 ;
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: LD_INT 0
28943: ST_TO_ADDR
// for i := 1 to 8 do
28944: LD_ADDR_VAR 0 1
28948: PUSH
28949: DOUBLE
28950: LD_INT 1
28952: DEC
28953: ST_TO_ADDR
28954: LD_INT 8
28956: PUSH
28957: FOR_TO
28958: IFFALSE 29006
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28960: LD_OWVAR 2
28964: PUSH
28965: LD_VAR 0 1
28969: NONEQUAL
28970: PUSH
28971: LD_OWVAR 2
28975: PPUSH
28976: LD_VAR 0 1
28980: PPUSH
28981: CALL_OW 81
28985: PUSH
28986: LD_INT 2
28988: EQUAL
28989: AND
28990: IFFALSE 29004
// begin side := i ;
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: LD_VAR 0 1
29001: ST_TO_ADDR
// break ;
29002: GO 29006
// end ;
29004: GO 28957
29006: POP
29007: POP
// if not side then
29008: LD_VAR 0 3
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29062
// for i := 1 to tmp do
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: DOUBLE
29023: LD_INT 1
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 2
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29060
// if Prob ( 60 ) then
29035: LD_INT 60
29037: PPUSH
29038: CALL_OW 13
29042: IFFALSE 29058
// SetSide ( i , side ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_VAR 0 3
29053: PPUSH
29054: CALL_OW 235
29058: GO 29032
29060: POP
29061: POP
// end ;
29062: PPOPN 3
29064: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29065: LD_EXP 51
29069: PUSH
29070: LD_EXP 64
29074: AND
29075: IFFALSE 29194
29077: GO 29079
29079: DISABLE
29080: LD_INT 0
29082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29083: LD_ADDR_VAR 0 1
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_OWVAR 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 23
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: PPUSH
29132: CALL_OW 69
29136: PUSH
29137: FOR_IN
29138: IFFALSE 29192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 257
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: IN
29168: IFFALSE 29190
// SetClass ( un , rand ( 1 , 4 ) ) ;
29170: LD_VAR 0 1
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: LD_INT 4
29180: PPUSH
29181: CALL_OW 12
29185: PPUSH
29186: CALL_OW 336
29190: GO 29137
29192: POP
29193: POP
// end ;
29194: PPOPN 1
29196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29197: LD_EXP 51
29201: PUSH
29202: LD_EXP 63
29206: AND
29207: IFFALSE 29286
29209: GO 29211
29211: DISABLE
29212: LD_INT 0
29214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29215: LD_ADDR_VAR 0 1
29219: PUSH
29220: LD_INT 22
29222: PUSH
29223: LD_OWVAR 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 21
29234: PUSH
29235: LD_INT 3
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: ST_TO_ADDR
// if not tmp then
29251: LD_VAR 0 1
29255: NOT
29256: IFFALSE 29260
// exit ;
29258: GO 29286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 1
29267: PPUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 12
29277: ARRAY
29278: PPUSH
29279: LD_INT 100
29281: PPUSH
29282: CALL_OW 234
// end ;
29286: PPOPN 1
29288: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29289: LD_EXP 51
29293: PUSH
29294: LD_EXP 65
29298: AND
29299: IFFALSE 29397
29301: GO 29303
29303: DISABLE
29304: LD_INT 0
29306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29307: LD_ADDR_VAR 0 1
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_OWVAR 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: ST_TO_ADDR
// if not tmp then
29343: LD_VAR 0 1
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29352: LD_VAR 0 1
29356: PUSH
29357: LD_INT 1
29359: PPUSH
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 12
29369: ARRAY
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 4
29376: PPUSH
29377: CALL_OW 12
29381: PPUSH
29382: LD_INT 3000
29384: PPUSH
29385: LD_INT 9000
29387: PPUSH
29388: CALL_OW 12
29392: PPUSH
29393: CALL_OW 492
// end ;
29397: PPOPN 1
29399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29400: LD_EXP 51
29404: PUSH
29405: LD_EXP 66
29409: AND
29410: IFFALSE 29430
29412: GO 29414
29414: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29415: LD_INT 1
29417: PPUSH
29418: LD_OWVAR 2
29422: PPUSH
29423: LD_INT 0
29425: PPUSH
29426: CALL_OW 324
29430: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29431: LD_EXP 51
29435: PUSH
29436: LD_EXP 67
29440: AND
29441: IFFALSE 29524
29443: GO 29445
29445: DISABLE
29446: LD_INT 0
29448: PPUSH
29449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29450: LD_ADDR_VAR 0 2
29454: PUSH
29455: LD_INT 22
29457: PUSH
29458: LD_OWVAR 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 21
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: ST_TO_ADDR
// if not tmp then
29486: LD_VAR 0 2
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29524
// for i in tmp do
29495: LD_ADDR_VAR 0 1
29499: PUSH
29500: LD_VAR 0 2
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29522
// SetBLevel ( i , 10 ) ;
29508: LD_VAR 0 1
29512: PPUSH
29513: LD_INT 10
29515: PPUSH
29516: CALL_OW 241
29520: GO 29505
29522: POP
29523: POP
// end ;
29524: PPOPN 2
29526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29527: LD_EXP 51
29531: PUSH
29532: LD_EXP 68
29536: AND
29537: IFFALSE 29648
29539: GO 29541
29541: DISABLE
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29547: LD_ADDR_VAR 0 3
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 25
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: ST_TO_ADDR
// if not tmp then
29583: LD_VAR 0 3
29587: NOT
29588: IFFALSE 29592
// exit ;
29590: GO 29648
// un := tmp [ rand ( 1 , tmp ) ] ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_VAR 0 3
29601: PUSH
29602: LD_INT 1
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL_OW 12
29614: ARRAY
29615: ST_TO_ADDR
// if Crawls ( un ) then
29616: LD_VAR 0 2
29620: PPUSH
29621: CALL_OW 318
29625: IFFALSE 29636
// ComWalk ( un ) ;
29627: LD_VAR 0 2
29631: PPUSH
29632: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29636: LD_VAR 0 2
29640: PPUSH
29641: LD_INT 5
29643: PPUSH
29644: CALL_OW 336
// end ;
29648: PPOPN 3
29650: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29651: LD_EXP 51
29655: PUSH
29656: LD_EXP 69
29660: AND
29661: PUSH
29662: LD_OWVAR 67
29666: PUSH
29667: LD_INT 4
29669: LESS
29670: AND
29671: IFFALSE 29690
29673: GO 29675
29675: DISABLE
// begin Difficulty := Difficulty + 1 ;
29676: LD_ADDR_OWVAR 67
29680: PUSH
29681: LD_OWVAR 67
29685: PUSH
29686: LD_INT 1
29688: PLUS
29689: ST_TO_ADDR
// end ;
29690: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29691: LD_EXP 51
29695: PUSH
29696: LD_EXP 70
29700: AND
29701: IFFALSE 29804
29703: GO 29705
29705: DISABLE
29706: LD_INT 0
29708: PPUSH
// begin for i := 1 to 5 do
29709: LD_ADDR_VAR 0 1
29713: PUSH
29714: DOUBLE
29715: LD_INT 1
29717: DEC
29718: ST_TO_ADDR
29719: LD_INT 5
29721: PUSH
29722: FOR_TO
29723: IFFALSE 29802
// begin uc_nation := nation_nature ;
29725: LD_ADDR_OWVAR 21
29729: PUSH
29730: LD_INT 0
29732: ST_TO_ADDR
// uc_side := 0 ;
29733: LD_ADDR_OWVAR 20
29737: PUSH
29738: LD_INT 0
29740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29741: LD_ADDR_OWVAR 29
29745: PUSH
29746: LD_INT 12
29748: PUSH
29749: LD_INT 12
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// hc_agressivity := 20 ;
29756: LD_ADDR_OWVAR 35
29760: PUSH
29761: LD_INT 20
29763: ST_TO_ADDR
// hc_class := class_tiger ;
29764: LD_ADDR_OWVAR 28
29768: PUSH
29769: LD_INT 14
29771: ST_TO_ADDR
// hc_gallery :=  ;
29772: LD_ADDR_OWVAR 33
29776: PUSH
29777: LD_STRING 
29779: ST_TO_ADDR
// hc_name :=  ;
29780: LD_ADDR_OWVAR 26
29784: PUSH
29785: LD_STRING 
29787: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29788: CALL_OW 44
29792: PPUSH
29793: LD_INT 0
29795: PPUSH
29796: CALL_OW 51
// end ;
29800: GO 29722
29802: POP
29803: POP
// end ;
29804: PPOPN 1
29806: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29807: LD_EXP 51
29811: PUSH
29812: LD_EXP 71
29816: AND
29817: IFFALSE 29826
29819: GO 29821
29821: DISABLE
// StreamSibBomb ;
29822: CALL 29827 0 0
29826: END
// export function StreamSibBomb ; var i , x , y ; begin
29827: LD_INT 0
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
// result := false ;
29833: LD_ADDR_VAR 0 1
29837: PUSH
29838: LD_INT 0
29840: ST_TO_ADDR
// for i := 1 to 16 do
29841: LD_ADDR_VAR 0 2
29845: PUSH
29846: DOUBLE
29847: LD_INT 1
29849: DEC
29850: ST_TO_ADDR
29851: LD_INT 16
29853: PUSH
29854: FOR_TO
29855: IFFALSE 30054
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29857: LD_ADDR_VAR 0 3
29861: PUSH
29862: LD_INT 10
29864: PUSH
29865: LD_INT 20
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 40
29873: PUSH
29874: LD_INT 50
29876: PUSH
29877: LD_INT 60
29879: PUSH
29880: LD_INT 70
29882: PUSH
29883: LD_INT 80
29885: PUSH
29886: LD_INT 90
29888: PUSH
29889: LD_INT 100
29891: PUSH
29892: LD_INT 110
29894: PUSH
29895: LD_INT 120
29897: PUSH
29898: LD_INT 130
29900: PUSH
29901: LD_INT 140
29903: PUSH
29904: LD_INT 150
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: PPUSH
29927: LD_INT 15
29929: PPUSH
29930: CALL_OW 12
29934: ARRAY
29935: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29936: LD_ADDR_VAR 0 4
29940: PUSH
29941: LD_INT 10
29943: PUSH
29944: LD_INT 20
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 40
29952: PUSH
29953: LD_INT 50
29955: PUSH
29956: LD_INT 60
29958: PUSH
29959: LD_INT 70
29961: PUSH
29962: LD_INT 80
29964: PUSH
29965: LD_INT 90
29967: PUSH
29968: LD_INT 100
29970: PUSH
29971: LD_INT 110
29973: PUSH
29974: LD_INT 120
29976: PUSH
29977: LD_INT 130
29979: PUSH
29980: LD_INT 140
29982: PUSH
29983: LD_INT 150
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_INT 15
30008: PPUSH
30009: CALL_OW 12
30013: ARRAY
30014: ST_TO_ADDR
// if ValidHex ( x , y ) then
30015: LD_VAR 0 3
30019: PPUSH
30020: LD_VAR 0 4
30024: PPUSH
30025: CALL_OW 488
30029: IFFALSE 30052
// begin result := [ x , y ] ;
30031: LD_ADDR_VAR 0 1
30035: PUSH
30036: LD_VAR 0 3
30040: PUSH
30041: LD_VAR 0 4
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// break ;
30050: GO 30054
// end ; end ;
30052: GO 29854
30054: POP
30055: POP
// if result then
30056: LD_VAR 0 1
30060: IFFALSE 30120
// begin ToLua ( playSibBomb() ) ;
30062: LD_STRING playSibBomb()
30064: PPUSH
30065: CALL_OW 559
// wait ( 0 0$14 ) ;
30069: LD_INT 490
30071: PPUSH
30072: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30076: LD_VAR 0 1
30080: PUSH
30081: LD_INT 1
30083: ARRAY
30084: PPUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 2
30092: ARRAY
30093: PPUSH
30094: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30098: LD_VAR 0 1
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_VAR 0 1
30111: PUSH
30112: LD_INT 2
30114: ARRAY
30115: PPUSH
30116: CALL_OW 429
// end ; end ;
30120: LD_VAR 0 1
30124: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30125: LD_EXP 51
30129: PUSH
30130: LD_EXP 73
30134: AND
30135: IFFALSE 30147
30137: GO 30139
30139: DISABLE
// YouLost (  ) ;
30140: LD_STRING 
30142: PPUSH
30143: CALL_OW 104
30147: END
// every 0 0$1 trigger StreamModeActive and sFog do
30148: LD_EXP 51
30152: PUSH
30153: LD_EXP 72
30157: AND
30158: IFFALSE 30172
30160: GO 30162
30162: DISABLE
// FogOff ( your_side ) ;
30163: LD_OWVAR 2
30167: PPUSH
30168: CALL_OW 344
30172: END
// every 0 0$1 trigger StreamModeActive and sSun do
30173: LD_EXP 51
30177: PUSH
30178: LD_EXP 74
30182: AND
30183: IFFALSE 30211
30185: GO 30187
30187: DISABLE
// begin solar_recharge_percent := 0 ;
30188: LD_ADDR_OWVAR 79
30192: PUSH
30193: LD_INT 0
30195: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30196: LD_INT 10500
30198: PPUSH
30199: CALL_OW 67
// solar_recharge_percent := 100 ;
30203: LD_ADDR_OWVAR 79
30207: PUSH
30208: LD_INT 100
30210: ST_TO_ADDR
// end ;
30211: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30212: LD_EXP 51
30216: PUSH
30217: LD_EXP 75
30221: AND
30222: IFFALSE 30461
30224: GO 30226
30226: DISABLE
30227: LD_INT 0
30229: PPUSH
30230: PPUSH
30231: PPUSH
// begin tmp := [ ] ;
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: EMPTY
30238: ST_TO_ADDR
// for i := 1 to 6 do
30239: LD_ADDR_VAR 0 1
30243: PUSH
30244: DOUBLE
30245: LD_INT 1
30247: DEC
30248: ST_TO_ADDR
30249: LD_INT 6
30251: PUSH
30252: FOR_TO
30253: IFFALSE 30358
// begin uc_nation := nation_nature ;
30255: LD_ADDR_OWVAR 21
30259: PUSH
30260: LD_INT 0
30262: ST_TO_ADDR
// uc_side := 0 ;
30263: LD_ADDR_OWVAR 20
30267: PUSH
30268: LD_INT 0
30270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30271: LD_ADDR_OWVAR 29
30275: PUSH
30276: LD_INT 12
30278: PUSH
30279: LD_INT 12
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: ST_TO_ADDR
// hc_agressivity := 20 ;
30286: LD_ADDR_OWVAR 35
30290: PUSH
30291: LD_INT 20
30293: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30294: LD_ADDR_OWVAR 28
30298: PUSH
30299: LD_INT 17
30301: ST_TO_ADDR
// hc_gallery :=  ;
30302: LD_ADDR_OWVAR 33
30306: PUSH
30307: LD_STRING 
30309: ST_TO_ADDR
// hc_name :=  ;
30310: LD_ADDR_OWVAR 26
30314: PUSH
30315: LD_STRING 
30317: ST_TO_ADDR
// un := CreateHuman ;
30318: LD_ADDR_VAR 0 2
30322: PUSH
30323: CALL_OW 44
30327: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30328: LD_VAR 0 2
30332: PPUSH
30333: LD_INT 1
30335: PPUSH
30336: CALL_OW 51
// tmp := tmp ^ un ;
30340: LD_ADDR_VAR 0 3
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_VAR 0 2
30354: ADD
30355: ST_TO_ADDR
// end ;
30356: GO 30252
30358: POP
30359: POP
// repeat wait ( 0 0$1 ) ;
30360: LD_INT 35
30362: PPUSH
30363: CALL_OW 67
// for un in tmp do
30367: LD_ADDR_VAR 0 2
30371: PUSH
30372: LD_VAR 0 3
30376: PUSH
30377: FOR_IN
30378: IFFALSE 30452
// begin if IsDead ( un ) then
30380: LD_VAR 0 2
30384: PPUSH
30385: CALL_OW 301
30389: IFFALSE 30409
// begin tmp := tmp diff un ;
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: LD_VAR 0 3
30400: PUSH
30401: LD_VAR 0 2
30405: DIFF
30406: ST_TO_ADDR
// continue ;
30407: GO 30377
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30409: LD_VAR 0 2
30413: PPUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PPUSH
30431: CALL_OW 69
30435: PPUSH
30436: LD_VAR 0 2
30440: PPUSH
30441: CALL_OW 74
30445: PPUSH
30446: CALL_OW 115
// end ;
30450: GO 30377
30452: POP
30453: POP
// until not tmp ;
30454: LD_VAR 0 3
30458: NOT
30459: IFFALSE 30360
// end ;
30461: PPOPN 3
30463: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30464: LD_EXP 51
30468: PUSH
30469: LD_EXP 76
30473: AND
30474: IFFALSE 30528
30476: GO 30478
30478: DISABLE
// begin ToLua ( displayTroll(); ) ;
30479: LD_STRING displayTroll();
30481: PPUSH
30482: CALL_OW 559
// wait ( 3 3$00 ) ;
30486: LD_INT 6300
30488: PPUSH
30489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30493: LD_STRING hideTroll();
30495: PPUSH
30496: CALL_OW 559
// wait ( 1 1$00 ) ;
30500: LD_INT 2100
30502: PPUSH
30503: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30507: LD_STRING displayTroll();
30509: PPUSH
30510: CALL_OW 559
// wait ( 1 1$00 ) ;
30514: LD_INT 2100
30516: PPUSH
30517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30521: LD_STRING hideTroll();
30523: PPUSH
30524: CALL_OW 559
// end ;
30528: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30529: LD_EXP 51
30533: PUSH
30534: LD_EXP 77
30538: AND
30539: IFFALSE 30602
30541: GO 30543
30543: DISABLE
30544: LD_INT 0
30546: PPUSH
// begin p := 0 ;
30547: LD_ADDR_VAR 0 1
30551: PUSH
30552: LD_INT 0
30554: ST_TO_ADDR
// repeat game_speed := 1 ;
30555: LD_ADDR_OWVAR 65
30559: PUSH
30560: LD_INT 1
30562: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30563: LD_INT 35
30565: PPUSH
30566: CALL_OW 67
// p := p + 1 ;
30570: LD_ADDR_VAR 0 1
30574: PUSH
30575: LD_VAR 0 1
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: ST_TO_ADDR
// until p >= 60 ;
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 60
30591: GREATEREQUAL
30592: IFFALSE 30555
// game_speed := 4 ;
30594: LD_ADDR_OWVAR 65
30598: PUSH
30599: LD_INT 4
30601: ST_TO_ADDR
// end ;
30602: PPOPN 1
30604: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30605: LD_EXP 51
30609: PUSH
30610: LD_EXP 78
30614: AND
30615: IFFALSE 30761
30617: GO 30619
30619: DISABLE
30620: LD_INT 0
30622: PPUSH
30623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30624: LD_ADDR_VAR 0 1
30628: PUSH
30629: LD_INT 22
30631: PUSH
30632: LD_OWVAR 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 30
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: ST_TO_ADDR
// if not depot then
30678: LD_VAR 0 1
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 30761
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_VAR 0 1
30696: PUSH
30697: LD_INT 1
30699: PPUSH
30700: LD_VAR 0 1
30704: PPUSH
30705: CALL_OW 12
30709: ARRAY
30710: PPUSH
30711: CALL_OW 274
30715: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30716: LD_VAR 0 2
30720: PPUSH
30721: LD_INT 1
30723: PPUSH
30724: LD_INT 0
30726: PPUSH
30727: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30731: LD_VAR 0 2
30735: PPUSH
30736: LD_INT 2
30738: PPUSH
30739: LD_INT 0
30741: PPUSH
30742: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30746: LD_VAR 0 2
30750: PPUSH
30751: LD_INT 3
30753: PPUSH
30754: LD_INT 0
30756: PPUSH
30757: CALL_OW 277
// end ;
30761: PPOPN 2
30763: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30764: LD_EXP 51
30768: PUSH
30769: LD_EXP 79
30773: AND
30774: IFFALSE 30871
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_OWVAR 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 21
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 23
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: ST_TO_ADDR
// if not tmp then
30836: LD_VAR 0 1
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 30871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30845: LD_VAR 0 1
30849: PUSH
30850: LD_INT 1
30852: PPUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 12
30862: ARRAY
30863: PPUSH
30864: LD_INT 200
30866: PPUSH
30867: CALL_OW 234
// end ;
30871: PPOPN 1
30873: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30874: LD_EXP 51
30878: PUSH
30879: LD_EXP 80
30883: AND
30884: IFFALSE 30963
30886: GO 30888
30888: DISABLE
30889: LD_INT 0
30891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30892: LD_ADDR_VAR 0 1
30896: PUSH
30897: LD_INT 22
30899: PUSH
30900: LD_OWVAR 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 21
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PPUSH
30923: CALL_OW 69
30927: ST_TO_ADDR
// if not tmp then
30928: LD_VAR 0 1
30932: NOT
30933: IFFALSE 30937
// exit ;
30935: GO 30963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30937: LD_VAR 0 1
30941: PUSH
30942: LD_INT 1
30944: PPUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 12
30954: ARRAY
30955: PPUSH
30956: LD_INT 60
30958: PPUSH
30959: CALL_OW 234
// end ;
30963: PPOPN 1
30965: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30966: LD_EXP 51
30970: PUSH
30971: LD_EXP 81
30975: AND
30976: IFFALSE 31075
30978: GO 30980
30980: DISABLE
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
// begin enable ;
30985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30986: LD_ADDR_VAR 0 1
30990: PUSH
30991: LD_INT 22
30993: PUSH
30994: LD_OWVAR 2
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 61
31005: PUSH
31006: EMPTY
31007: LIST
31008: PUSH
31009: LD_INT 33
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: PPUSH
31024: CALL_OW 69
31028: ST_TO_ADDR
// if not tmp then
31029: LD_VAR 0 1
31033: NOT
31034: IFFALSE 31038
// exit ;
31036: GO 31075
// for i in tmp do
31038: LD_ADDR_VAR 0 2
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: FOR_IN
31049: IFFALSE 31073
// if IsControledBy ( i ) then
31051: LD_VAR 0 2
31055: PPUSH
31056: CALL_OW 312
31060: IFFALSE 31071
// ComUnlink ( i ) ;
31062: LD_VAR 0 2
31066: PPUSH
31067: CALL_OW 136
31071: GO 31048
31073: POP
31074: POP
// end ;
31075: PPOPN 2
31077: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31078: LD_EXP 51
31082: PUSH
31083: LD_EXP 82
31087: AND
31088: IFFALSE 31228
31090: GO 31092
31092: DISABLE
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
// begin ToLua ( displayPowell(); ) ;
31097: LD_STRING displayPowell();
31099: PPUSH
31100: CALL_OW 559
// uc_side := 0 ;
31104: LD_ADDR_OWVAR 20
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// uc_nation := 2 ;
31112: LD_ADDR_OWVAR 21
31116: PUSH
31117: LD_INT 2
31119: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31120: LD_ADDR_OWVAR 37
31124: PUSH
31125: LD_INT 14
31127: ST_TO_ADDR
// vc_engine := engine_siberite ;
31128: LD_ADDR_OWVAR 39
31132: PUSH
31133: LD_INT 3
31135: ST_TO_ADDR
// vc_control := control_apeman ;
31136: LD_ADDR_OWVAR 38
31140: PUSH
31141: LD_INT 5
31143: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31144: LD_ADDR_OWVAR 40
31148: PUSH
31149: LD_INT 29
31151: ST_TO_ADDR
// un := CreateVehicle ;
31152: LD_ADDR_VAR 0 2
31156: PUSH
31157: CALL_OW 45
31161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31162: LD_VAR 0 2
31166: PPUSH
31167: LD_INT 1
31169: PPUSH
31170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31174: LD_INT 35
31176: PPUSH
31177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31181: LD_VAR 0 2
31185: PPUSH
31186: LD_INT 22
31188: PUSH
31189: LD_OWVAR 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PPUSH
31198: CALL_OW 69
31202: PPUSH
31203: LD_VAR 0 2
31207: PPUSH
31208: CALL_OW 74
31212: PPUSH
31213: CALL_OW 115
// until IsDead ( un ) ;
31217: LD_VAR 0 2
31221: PPUSH
31222: CALL_OW 301
31226: IFFALSE 31174
// end ;
31228: PPOPN 2
31230: END
// every 0 0$1 trigger StreamModeActive and sStu do
31231: LD_EXP 51
31235: PUSH
31236: LD_EXP 90
31240: AND
31241: IFFALSE 31257
31243: GO 31245
31245: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31246: LD_STRING displayStucuk();
31248: PPUSH
31249: CALL_OW 559
// ResetFog ;
31253: CALL_OW 335
// end ;
31257: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31258: LD_EXP 51
31262: PUSH
31263: LD_EXP 83
31267: AND
31268: IFFALSE 31409
31270: GO 31272
31272: DISABLE
31273: LD_INT 0
31275: PPUSH
31276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31277: LD_ADDR_VAR 0 2
31281: PUSH
31282: LD_INT 22
31284: PUSH
31285: LD_OWVAR 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 21
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PPUSH
31308: CALL_OW 69
31312: ST_TO_ADDR
// if not tmp then
31313: LD_VAR 0 2
31317: NOT
31318: IFFALSE 31322
// exit ;
31320: GO 31409
// un := tmp [ rand ( 1 , tmp ) ] ;
31322: LD_ADDR_VAR 0 1
31326: PUSH
31327: LD_VAR 0 2
31331: PUSH
31332: LD_INT 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: CALL_OW 12
31344: ARRAY
31345: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31346: LD_VAR 0 1
31350: PPUSH
31351: LD_INT 0
31353: PPUSH
31354: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31358: LD_VAR 0 1
31362: PPUSH
31363: LD_OWVAR 3
31367: PUSH
31368: LD_VAR 0 1
31372: DIFF
31373: PPUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 74
31383: PPUSH
31384: CALL_OW 115
// wait ( 0 0$20 ) ;
31388: LD_INT 700
31390: PPUSH
31391: CALL_OW 67
// SetSide ( un , your_side ) ;
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_OWVAR 2
31404: PPUSH
31405: CALL_OW 235
// end ;
31409: PPOPN 2
31411: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31412: LD_EXP 51
31416: PUSH
31417: LD_EXP 84
31421: AND
31422: IFFALSE 31528
31424: GO 31426
31426: DISABLE
31427: LD_INT 0
31429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31430: LD_ADDR_VAR 0 1
31434: PUSH
31435: LD_INT 22
31437: PUSH
31438: LD_OWVAR 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 30
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 30
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PPUSH
31479: CALL_OW 69
31483: ST_TO_ADDR
// if not depot then
31484: LD_VAR 0 1
31488: NOT
31489: IFFALSE 31493
// exit ;
31491: GO 31528
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31493: LD_VAR 0 1
31497: PUSH
31498: LD_INT 1
31500: ARRAY
31501: PPUSH
31502: CALL_OW 250
31506: PPUSH
31507: LD_VAR 0 1
31511: PUSH
31512: LD_INT 1
31514: ARRAY
31515: PPUSH
31516: CALL_OW 251
31520: PPUSH
31521: LD_INT 70
31523: PPUSH
31524: CALL_OW 495
// end ;
31528: PPOPN 1
31530: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31531: LD_EXP 51
31535: PUSH
31536: LD_EXP 85
31540: AND
31541: IFFALSE 31752
31543: GO 31545
31545: DISABLE
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
31552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31553: LD_ADDR_VAR 0 5
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_OWVAR 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 21
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PPUSH
31584: CALL_OW 69
31588: ST_TO_ADDR
// if not tmp then
31589: LD_VAR 0 5
31593: NOT
31594: IFFALSE 31598
// exit ;
31596: GO 31752
// for i in tmp do
31598: LD_ADDR_VAR 0 1
31602: PUSH
31603: LD_VAR 0 5
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31750
// begin d := rand ( 0 , 5 ) ;
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_INT 0
31618: PPUSH
31619: LD_INT 5
31621: PPUSH
31622: CALL_OW 12
31626: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31627: LD_ADDR_VAR 0 2
31631: PUSH
31632: LD_VAR 0 1
31636: PPUSH
31637: CALL_OW 250
31641: PPUSH
31642: LD_VAR 0 4
31646: PPUSH
31647: LD_INT 3
31649: PPUSH
31650: LD_INT 12
31652: PPUSH
31653: CALL_OW 12
31657: PPUSH
31658: CALL_OW 272
31662: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_VAR 0 1
31672: PPUSH
31673: CALL_OW 251
31677: PPUSH
31678: LD_VAR 0 4
31682: PPUSH
31683: LD_INT 3
31685: PPUSH
31686: LD_INT 12
31688: PPUSH
31689: CALL_OW 12
31693: PPUSH
31694: CALL_OW 273
31698: ST_TO_ADDR
// if ValidHex ( x , y ) then
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 3
31708: PPUSH
31709: CALL_OW 488
31713: IFFALSE 31748
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31715: LD_VAR 0 1
31719: PPUSH
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_VAR 0 3
31729: PPUSH
31730: LD_INT 3
31732: PPUSH
31733: LD_INT 6
31735: PPUSH
31736: CALL_OW 12
31740: PPUSH
31741: LD_INT 1
31743: PPUSH
31744: CALL_OW 483
// end ;
31748: GO 31608
31750: POP
31751: POP
// end ;
31752: PPOPN 5
31754: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31755: LD_EXP 51
31759: PUSH
31760: LD_EXP 86
31764: AND
31765: IFFALSE 31859
31767: GO 31769
31769: DISABLE
31770: LD_INT 0
31772: PPUSH
31773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31774: LD_ADDR_VAR 0 2
31778: PUSH
31779: LD_INT 22
31781: PUSH
31782: LD_OWVAR 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 32
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: PPUSH
31816: CALL_OW 69
31820: ST_TO_ADDR
// if not tmp then
31821: LD_VAR 0 2
31825: NOT
31826: IFFALSE 31830
// exit ;
31828: GO 31859
// for i in tmp do
31830: LD_ADDR_VAR 0 1
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: FOR_IN
31841: IFFALSE 31857
// SetFuel ( i , 0 ) ;
31843: LD_VAR 0 1
31847: PPUSH
31848: LD_INT 0
31850: PPUSH
31851: CALL_OW 240
31855: GO 31840
31857: POP
31858: POP
// end ;
31859: PPOPN 2
31861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31862: LD_EXP 51
31866: PUSH
31867: LD_EXP 87
31871: AND
31872: IFFALSE 31938
31874: GO 31876
31876: DISABLE
31877: LD_INT 0
31879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31880: LD_ADDR_VAR 0 1
31884: PUSH
31885: LD_INT 22
31887: PUSH
31888: LD_OWVAR 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 30
31899: PUSH
31900: LD_INT 29
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PPUSH
31911: CALL_OW 69
31915: ST_TO_ADDR
// if not tmp then
31916: LD_VAR 0 1
31920: NOT
31921: IFFALSE 31925
// exit ;
31923: GO 31938
// DestroyUnit ( tmp [ 1 ] ) ;
31925: LD_VAR 0 1
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: PPUSH
31934: CALL_OW 65
// end ;
31938: PPOPN 1
31940: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31941: LD_EXP 51
31945: PUSH
31946: LD_EXP 89
31950: AND
31951: IFFALSE 32080
31953: GO 31955
31955: DISABLE
31956: LD_INT 0
31958: PPUSH
// begin uc_side := 0 ;
31959: LD_ADDR_OWVAR 20
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// uc_nation := nation_arabian ;
31967: LD_ADDR_OWVAR 21
31971: PUSH
31972: LD_INT 2
31974: ST_TO_ADDR
// hc_gallery :=  ;
31975: LD_ADDR_OWVAR 33
31979: PUSH
31980: LD_STRING 
31982: ST_TO_ADDR
// hc_name :=  ;
31983: LD_ADDR_OWVAR 26
31987: PUSH
31988: LD_STRING 
31990: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31991: LD_INT 1
31993: PPUSH
31994: LD_INT 11
31996: PPUSH
31997: LD_INT 10
31999: PPUSH
32000: CALL_OW 380
// un := CreateHuman ;
32004: LD_ADDR_VAR 0 1
32008: PUSH
32009: CALL_OW 44
32013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32026: LD_INT 35
32028: PPUSH
32029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: LD_INT 22
32040: PUSH
32041: LD_OWVAR 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PPUSH
32050: CALL_OW 69
32054: PPUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 74
32064: PPUSH
32065: CALL_OW 115
// until IsDead ( un ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 301
32078: IFFALSE 32026
// end ;
32080: PPOPN 1
32082: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32083: LD_EXP 51
32087: PUSH
32088: LD_EXP 91
32092: AND
32093: IFFALSE 32105
32095: GO 32097
32097: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32098: LD_STRING earthquake(getX(game), 0, 32)
32100: PPUSH
32101: CALL_OW 559
32105: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32106: LD_EXP 51
32110: PUSH
32111: LD_EXP 92
32115: AND
32116: IFFALSE 32207
32118: GO 32120
32120: DISABLE
32121: LD_INT 0
32123: PPUSH
// begin enable ;
32124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32125: LD_ADDR_VAR 0 1
32129: PUSH
32130: LD_INT 22
32132: PUSH
32133: LD_OWVAR 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 33
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 1
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 1
32188: PPUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 12
32198: ARRAY
32199: PPUSH
32200: LD_INT 1
32202: PPUSH
32203: CALL_OW 234
// end ;
32207: PPOPN 1
32209: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32210: LD_EXP 51
32214: PUSH
32215: LD_EXP 93
32219: AND
32220: IFFALSE 32361
32222: GO 32224
32224: DISABLE
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
32229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32230: LD_ADDR_VAR 0 3
32234: PUSH
32235: LD_INT 22
32237: PUSH
32238: LD_OWVAR 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 25
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PPUSH
32261: CALL_OW 69
32265: ST_TO_ADDR
// if not tmp then
32266: LD_VAR 0 3
32270: NOT
32271: IFFALSE 32275
// exit ;
32273: GO 32361
// un := tmp [ rand ( 1 , tmp ) ] ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 3
32284: PUSH
32285: LD_INT 1
32287: PPUSH
32288: LD_VAR 0 3
32292: PPUSH
32293: CALL_OW 12
32297: ARRAY
32298: ST_TO_ADDR
// if Crawls ( un ) then
32299: LD_VAR 0 2
32303: PPUSH
32304: CALL_OW 318
32308: IFFALSE 32319
// ComWalk ( un ) ;
32310: LD_VAR 0 2
32314: PPUSH
32315: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_INT 9
32326: PPUSH
32327: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32331: LD_INT 28
32333: PPUSH
32334: LD_OWVAR 2
32338: PPUSH
32339: LD_INT 2
32341: PPUSH
32342: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32346: LD_INT 29
32348: PPUSH
32349: LD_OWVAR 2
32353: PPUSH
32354: LD_INT 2
32356: PPUSH
32357: CALL_OW 322
// end ;
32361: PPOPN 3
32363: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32364: LD_EXP 51
32368: PUSH
32369: LD_EXP 94
32373: AND
32374: IFFALSE 32485
32376: GO 32378
32378: DISABLE
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
32383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_OWVAR 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 25
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 69
32419: ST_TO_ADDR
// if not tmp then
32420: LD_VAR 0 3
32424: NOT
32425: IFFALSE 32429
// exit ;
32427: GO 32485
// un := tmp [ rand ( 1 , tmp ) ] ;
32429: LD_ADDR_VAR 0 2
32433: PUSH
32434: LD_VAR 0 3
32438: PUSH
32439: LD_INT 1
32441: PPUSH
32442: LD_VAR 0 3
32446: PPUSH
32447: CALL_OW 12
32451: ARRAY
32452: ST_TO_ADDR
// if Crawls ( un ) then
32453: LD_VAR 0 2
32457: PPUSH
32458: CALL_OW 318
32462: IFFALSE 32473
// ComWalk ( un ) ;
32464: LD_VAR 0 2
32468: PPUSH
32469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32473: LD_VAR 0 2
32477: PPUSH
32478: LD_INT 8
32480: PPUSH
32481: CALL_OW 336
// end ;
32485: PPOPN 3
32487: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32488: LD_EXP 51
32492: PUSH
32493: LD_EXP 95
32497: AND
32498: IFFALSE 32642
32500: GO 32502
32502: DISABLE
32503: LD_INT 0
32505: PPUSH
32506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32507: LD_ADDR_VAR 0 2
32511: PUSH
32512: LD_INT 22
32514: PUSH
32515: LD_OWVAR 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 21
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 34
32539: PUSH
32540: LD_INT 12
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 34
32549: PUSH
32550: LD_INT 51
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 34
32559: PUSH
32560: LD_INT 32
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 69
32582: ST_TO_ADDR
// if not tmp then
32583: LD_VAR 0 2
32587: NOT
32588: IFFALSE 32592
// exit ;
32590: GO 32642
// for i in tmp do
32592: LD_ADDR_VAR 0 1
32596: PUSH
32597: LD_VAR 0 2
32601: PUSH
32602: FOR_IN
32603: IFFALSE 32640
// if GetCargo ( i , mat_artifact ) = 0 then
32605: LD_VAR 0 1
32609: PPUSH
32610: LD_INT 4
32612: PPUSH
32613: CALL_OW 289
32617: PUSH
32618: LD_INT 0
32620: EQUAL
32621: IFFALSE 32638
// SetCargo ( i , mat_siberit , 100 ) ;
32623: LD_VAR 0 1
32627: PPUSH
32628: LD_INT 3
32630: PPUSH
32631: LD_INT 100
32633: PPUSH
32634: CALL_OW 290
32638: GO 32602
32640: POP
32641: POP
// end ;
32642: PPOPN 2
32644: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32645: LD_EXP 51
32649: PUSH
32650: LD_EXP 96
32654: AND
32655: IFFALSE 32838
32657: GO 32659
32659: DISABLE
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32664: LD_ADDR_VAR 0 2
32668: PUSH
32669: LD_INT 22
32671: PUSH
32672: LD_OWVAR 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 69
32685: ST_TO_ADDR
// if not tmp then
32686: LD_VAR 0 2
32690: NOT
32691: IFFALSE 32695
// exit ;
32693: GO 32838
// for i := 1 to 2 do
32695: LD_ADDR_VAR 0 1
32699: PUSH
32700: DOUBLE
32701: LD_INT 1
32703: DEC
32704: ST_TO_ADDR
32705: LD_INT 2
32707: PUSH
32708: FOR_TO
32709: IFFALSE 32836
// begin uc_side := your_side ;
32711: LD_ADDR_OWVAR 20
32715: PUSH
32716: LD_OWVAR 2
32720: ST_TO_ADDR
// uc_nation := nation_american ;
32721: LD_ADDR_OWVAR 21
32725: PUSH
32726: LD_INT 1
32728: ST_TO_ADDR
// vc_chassis := us_morphling ;
32729: LD_ADDR_OWVAR 37
32733: PUSH
32734: LD_INT 5
32736: ST_TO_ADDR
// vc_engine := engine_siberite ;
32737: LD_ADDR_OWVAR 39
32741: PUSH
32742: LD_INT 3
32744: ST_TO_ADDR
// vc_control := control_computer ;
32745: LD_ADDR_OWVAR 38
32749: PUSH
32750: LD_INT 3
32752: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32753: LD_ADDR_OWVAR 40
32757: PUSH
32758: LD_INT 10
32760: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32761: LD_VAR 0 2
32765: PUSH
32766: LD_INT 1
32768: ARRAY
32769: PPUSH
32770: CALL_OW 310
32774: NOT
32775: IFFALSE 32822
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32777: CALL_OW 45
32781: PPUSH
32782: LD_VAR 0 2
32786: PUSH
32787: LD_INT 1
32789: ARRAY
32790: PPUSH
32791: CALL_OW 250
32795: PPUSH
32796: LD_VAR 0 2
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: PPUSH
32805: CALL_OW 251
32809: PPUSH
32810: LD_INT 12
32812: PPUSH
32813: LD_INT 1
32815: PPUSH
32816: CALL_OW 50
32820: GO 32834
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32822: CALL_OW 45
32826: PPUSH
32827: LD_INT 1
32829: PPUSH
32830: CALL_OW 51
// end ;
32834: GO 32708
32836: POP
32837: POP
// end ;
32838: PPOPN 2
32840: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32841: LD_EXP 51
32845: PUSH
32846: LD_EXP 97
32850: AND
32851: IFFALSE 33073
32853: GO 32855
32855: DISABLE
32856: LD_INT 0
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_INT 22
32871: PUSH
32872: LD_OWVAR 2
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 23
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: ST_TO_ADDR
// if not tmp then
32918: LD_VAR 0 6
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 33073
// s1 := rand ( 1 , 4 ) ;
32927: LD_ADDR_VAR 0 2
32931: PUSH
32932: LD_INT 1
32934: PPUSH
32935: LD_INT 4
32937: PPUSH
32938: CALL_OW 12
32942: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_VAR 0 6
32952: PUSH
32953: LD_INT 1
32955: ARRAY
32956: PPUSH
32957: LD_VAR 0 2
32961: PPUSH
32962: CALL_OW 259
32966: ST_TO_ADDR
// if s1 = 1 then
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 1
32974: EQUAL
32975: IFFALSE 32995
// s2 := rand ( 2 , 4 ) else
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 2
32984: PPUSH
32985: LD_INT 4
32987: PPUSH
32988: CALL_OW 12
32992: ST_TO_ADDR
32993: GO 33003
// s2 := 1 ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33003: LD_ADDR_VAR 0 5
33007: PUSH
33008: LD_VAR 0 6
33012: PUSH
33013: LD_INT 1
33015: ARRAY
33016: PPUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL_OW 259
33026: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33027: LD_VAR 0 6
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PPUSH
33036: LD_VAR 0 2
33040: PPUSH
33041: LD_VAR 0 5
33045: PPUSH
33046: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33050: LD_VAR 0 6
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: LD_VAR 0 3
33063: PPUSH
33064: LD_VAR 0 4
33068: PPUSH
33069: CALL_OW 237
// end ;
33073: PPOPN 6
33075: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33076: LD_EXP 51
33080: PUSH
33081: LD_EXP 98
33085: AND
33086: IFFALSE 33165
33088: GO 33090
33090: DISABLE
33091: LD_INT 0
33093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33094: LD_ADDR_VAR 0 1
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_OWVAR 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PPUSH
33125: CALL_OW 69
33129: ST_TO_ADDR
// if not tmp then
33130: LD_VAR 0 1
33134: NOT
33135: IFFALSE 33139
// exit ;
33137: GO 33165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33139: LD_VAR 0 1
33143: PUSH
33144: LD_INT 1
33146: PPUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 12
33156: ARRAY
33157: PPUSH
33158: LD_INT 1
33160: PPUSH
33161: CALL_OW 234
// end ;
33165: PPOPN 1
33167: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33168: LD_EXP 51
33172: PUSH
33173: LD_EXP 99
33177: AND
33178: IFFALSE 33290
33180: GO 33182
33182: DISABLE
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_INT 22
33194: PUSH
33195: LD_OWVAR 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 27
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 30
33219: PUSH
33220: LD_INT 26
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 30
33229: PUSH
33230: LD_INT 28
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PPUSH
33247: CALL_OW 69
33251: ST_TO_ADDR
// if not tmp then
33252: LD_VAR 0 2
33256: NOT
33257: IFFALSE 33261
// exit ;
33259: GO 33290
// for i in tmp do
33261: LD_ADDR_VAR 0 1
33265: PUSH
33266: LD_VAR 0 2
33270: PUSH
33271: FOR_IN
33272: IFFALSE 33288
// SetLives ( i , 1 ) ;
33274: LD_VAR 0 1
33278: PPUSH
33279: LD_INT 1
33281: PPUSH
33282: CALL_OW 234
33286: GO 33271
33288: POP
33289: POP
// end ;
33290: PPOPN 2
33292: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33293: LD_EXP 51
33297: PUSH
33298: LD_EXP 100
33302: AND
33303: IFFALSE 33590
33305: GO 33307
33307: DISABLE
33308: LD_INT 0
33310: PPUSH
33311: PPUSH
33312: PPUSH
// begin i := rand ( 1 , 7 ) ;
33313: LD_ADDR_VAR 0 1
33317: PUSH
33318: LD_INT 1
33320: PPUSH
33321: LD_INT 7
33323: PPUSH
33324: CALL_OW 12
33328: ST_TO_ADDR
// case i of 1 :
33329: LD_VAR 0 1
33333: PUSH
33334: LD_INT 1
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33352
33342: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33343: LD_STRING earthquake(getX(game), 0, 32)
33345: PPUSH
33346: CALL_OW 559
33350: GO 33590
33352: LD_INT 2
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33374
33360: POP
// begin ToLua ( displayStucuk(); ) ;
33361: LD_STRING displayStucuk();
33363: PPUSH
33364: CALL_OW 559
// ResetFog ;
33368: CALL_OW 335
// end ; 3 :
33372: GO 33590
33374: LD_INT 3
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33486
33382: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33383: LD_ADDR_VAR 0 2
33387: PUSH
33388: LD_INT 22
33390: PUSH
33391: LD_OWVAR 2
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 25
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 69
33418: ST_TO_ADDR
// if not tmp then
33419: LD_VAR 0 2
33423: NOT
33424: IFFALSE 33428
// exit ;
33426: GO 33590
// un := tmp [ rand ( 1 , tmp ) ] ;
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_VAR 0 2
33437: PUSH
33438: LD_INT 1
33440: PPUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 12
33450: ARRAY
33451: ST_TO_ADDR
// if Crawls ( un ) then
33452: LD_VAR 0 3
33456: PPUSH
33457: CALL_OW 318
33461: IFFALSE 33472
// ComWalk ( un ) ;
33463: LD_VAR 0 3
33467: PPUSH
33468: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33472: LD_VAR 0 3
33476: PPUSH
33477: LD_INT 8
33479: PPUSH
33480: CALL_OW 336
// end ; 4 :
33484: GO 33590
33486: LD_INT 4
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33568
33494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33495: LD_ADDR_VAR 0 2
33499: PUSH
33500: LD_INT 22
33502: PUSH
33503: LD_OWVAR 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 30
33514: PUSH
33515: LD_INT 29
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PPUSH
33526: CALL_OW 69
33530: ST_TO_ADDR
// if not tmp then
33531: LD_VAR 0 2
33535: NOT
33536: IFFALSE 33540
// exit ;
33538: GO 33590
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33540: LD_VAR 0 2
33544: PUSH
33545: LD_INT 1
33547: ARRAY
33548: PPUSH
33549: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33553: LD_VAR 0 2
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: CALL_OW 65
// end ; 5 .. 7 :
33566: GO 33590
33568: LD_INT 5
33570: DOUBLE
33571: GREATEREQUAL
33572: IFFALSE 33580
33574: LD_INT 7
33576: DOUBLE
33577: LESSEQUAL
33578: IFTRUE 33582
33580: GO 33589
33582: POP
// StreamSibBomb ; end ;
33583: CALL 29827 0 0
33587: GO 33590
33589: POP
// end ;
33590: PPOPN 3
33592: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33593: LD_EXP 51
33597: PUSH
33598: LD_EXP 101
33602: AND
33603: IFFALSE 33759
33605: GO 33607
33607: DISABLE
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 81
33620: PUSH
33621: LD_OWVAR 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 21
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PPUSH
33662: CALL_OW 69
33666: ST_TO_ADDR
// if not tmp then
33667: LD_VAR 0 2
33671: NOT
33672: IFFALSE 33676
// exit ;
33674: GO 33759
// p := 0 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 0
33683: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33684: LD_INT 35
33686: PPUSH
33687: CALL_OW 67
// p := p + 1 ;
33691: LD_ADDR_VAR 0 3
33695: PUSH
33696: LD_VAR 0 3
33700: PUSH
33701: LD_INT 1
33703: PLUS
33704: ST_TO_ADDR
// for i in tmp do
33705: LD_ADDR_VAR 0 1
33709: PUSH
33710: LD_VAR 0 2
33714: PUSH
33715: FOR_IN
33716: IFFALSE 33747
// if GetLives ( i ) < 1000 then
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 256
33727: PUSH
33728: LD_INT 1000
33730: LESS
33731: IFFALSE 33745
// SetLives ( i , 1000 ) ;
33733: LD_VAR 0 1
33737: PPUSH
33738: LD_INT 1000
33740: PPUSH
33741: CALL_OW 234
33745: GO 33715
33747: POP
33748: POP
// until p > 20 ;
33749: LD_VAR 0 3
33753: PUSH
33754: LD_INT 20
33756: GREATER
33757: IFFALSE 33684
// end ;
33759: PPOPN 3
33761: END
// every 0 0$1 trigger StreamModeActive and sTime do
33762: LD_EXP 51
33766: PUSH
33767: LD_EXP 102
33771: AND
33772: IFFALSE 33807
33774: GO 33776
33776: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33777: LD_INT 28
33779: PPUSH
33780: LD_OWVAR 2
33784: PPUSH
33785: LD_INT 2
33787: PPUSH
33788: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33792: LD_INT 30
33794: PPUSH
33795: LD_OWVAR 2
33799: PPUSH
33800: LD_INT 2
33802: PPUSH
33803: CALL_OW 322
// end ;
33807: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33808: LD_EXP 51
33812: PUSH
33813: LD_EXP 103
33817: AND
33818: IFFALSE 33939
33820: GO 33822
33822: DISABLE
33823: LD_INT 0
33825: PPUSH
33826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33827: LD_ADDR_VAR 0 2
33831: PUSH
33832: LD_INT 22
33834: PUSH
33835: LD_OWVAR 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 21
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 23
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: PPUSH
33876: CALL_OW 69
33880: ST_TO_ADDR
// if not tmp then
33881: LD_VAR 0 2
33885: NOT
33886: IFFALSE 33890
// exit ;
33888: GO 33939
// for i in tmp do
33890: LD_ADDR_VAR 0 1
33894: PUSH
33895: LD_VAR 0 2
33899: PUSH
33900: FOR_IN
33901: IFFALSE 33937
// begin if Crawls ( i ) then
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 318
33912: IFFALSE 33923
// ComWalk ( i ) ;
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 138
// SetClass ( i , 2 ) ;
33923: LD_VAR 0 1
33927: PPUSH
33928: LD_INT 2
33930: PPUSH
33931: CALL_OW 336
// end ;
33935: GO 33900
33937: POP
33938: POP
// end ;
33939: PPOPN 2
33941: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33942: LD_EXP 51
33946: PUSH
33947: LD_EXP 104
33951: AND
33952: IFFALSE 34240
33954: GO 33956
33956: DISABLE
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
33961: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33962: LD_OWVAR 2
33966: PPUSH
33967: LD_INT 9
33969: PPUSH
33970: LD_INT 1
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33980: LD_INT 9
33982: PPUSH
33983: LD_OWVAR 2
33987: PPUSH
33988: CALL_OW 343
// uc_side := 9 ;
33992: LD_ADDR_OWVAR 20
33996: PUSH
33997: LD_INT 9
33999: ST_TO_ADDR
// uc_nation := 2 ;
34000: LD_ADDR_OWVAR 21
34004: PUSH
34005: LD_INT 2
34007: ST_TO_ADDR
// hc_name := Dark Warrior ;
34008: LD_ADDR_OWVAR 26
34012: PUSH
34013: LD_STRING Dark Warrior
34015: ST_TO_ADDR
// hc_gallery :=  ;
34016: LD_ADDR_OWVAR 33
34020: PUSH
34021: LD_STRING 
34023: ST_TO_ADDR
// hc_noskilllimit := true ;
34024: LD_ADDR_OWVAR 76
34028: PUSH
34029: LD_INT 1
34031: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34032: LD_ADDR_OWVAR 31
34036: PUSH
34037: LD_INT 30
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 30
34045: PUSH
34046: LD_INT 30
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
// un := CreateHuman ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: CALL_OW 44
34064: ST_TO_ADDR
// hc_noskilllimit := false ;
34065: LD_ADDR_OWVAR 76
34069: PUSH
34070: LD_INT 0
34072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34073: LD_VAR 0 3
34077: PPUSH
34078: LD_INT 1
34080: PPUSH
34081: CALL_OW 51
// ToLua ( playRanger() ) ;
34085: LD_STRING playRanger()
34087: PPUSH
34088: CALL_OW 559
// p := 0 ;
34092: LD_ADDR_VAR 0 2
34096: PUSH
34097: LD_INT 0
34099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34100: LD_INT 35
34102: PPUSH
34103: CALL_OW 67
// p := p + 1 ;
34107: LD_ADDR_VAR 0 2
34111: PUSH
34112: LD_VAR 0 2
34116: PUSH
34117: LD_INT 1
34119: PLUS
34120: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34121: LD_VAR 0 3
34125: PPUSH
34126: CALL_OW 256
34130: PUSH
34131: LD_INT 1000
34133: LESS
34134: IFFALSE 34148
// SetLives ( un , 1000 ) ;
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_INT 1000
34143: PPUSH
34144: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34148: LD_VAR 0 3
34152: PPUSH
34153: LD_INT 81
34155: PUSH
34156: LD_OWVAR 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 91
34167: PUSH
34168: LD_VAR 0 3
34172: PUSH
34173: LD_INT 30
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PPUSH
34185: CALL_OW 69
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: CALL_OW 74
34199: PPUSH
34200: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34204: LD_VAR 0 2
34208: PUSH
34209: LD_INT 80
34211: GREATER
34212: PUSH
34213: LD_VAR 0 3
34217: PPUSH
34218: CALL_OW 301
34222: OR
34223: IFFALSE 34100
// if un then
34225: LD_VAR 0 3
34229: IFFALSE 34240
// RemoveUnit ( un ) ;
34231: LD_VAR 0 3
34235: PPUSH
34236: CALL_OW 64
// end ;
34240: PPOPN 3
34242: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34243: LD_EXP 105
34247: IFFALSE 34363
34249: GO 34251
34251: DISABLE
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 81
34264: PUSH
34265: LD_OWVAR 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 21
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PPUSH
34288: CALL_OW 69
34292: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34293: LD_STRING playComputer()
34295: PPUSH
34296: CALL_OW 559
// if not tmp then
34300: LD_VAR 0 2
34304: NOT
34305: IFFALSE 34309
// exit ;
34307: GO 34363
// for i in tmp do
34309: LD_ADDR_VAR 0 1
34313: PUSH
34314: LD_VAR 0 2
34318: PUSH
34319: FOR_IN
34320: IFFALSE 34361
// for j := 1 to 4 do
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: DOUBLE
34328: LD_INT 1
34330: DEC
34331: ST_TO_ADDR
34332: LD_INT 4
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34357
// SetSkill ( i , j , 10 ) ;
34338: LD_VAR 0 1
34342: PPUSH
34343: LD_VAR 0 3
34347: PPUSH
34348: LD_INT 10
34350: PPUSH
34351: CALL_OW 237
34355: GO 34335
34357: POP
34358: POP
34359: GO 34319
34361: POP
34362: POP
// end ;
34363: PPOPN 3
34365: END
// every 0 0$1 trigger s30 do var i , tmp ;
34366: LD_EXP 106
34370: IFFALSE 34439
34372: GO 34374
34374: DISABLE
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34379: LD_ADDR_VAR 0 2
34383: PUSH
34384: LD_INT 22
34386: PUSH
34387: LD_OWVAR 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL_OW 69
34400: ST_TO_ADDR
// if not tmp then
34401: LD_VAR 0 2
34405: NOT
34406: IFFALSE 34410
// exit ;
34408: GO 34439
// for i in tmp do
34410: LD_ADDR_VAR 0 1
34414: PUSH
34415: LD_VAR 0 2
34419: PUSH
34420: FOR_IN
34421: IFFALSE 34437
// SetLives ( i , 300 ) ;
34423: LD_VAR 0 1
34427: PPUSH
34428: LD_INT 300
34430: PPUSH
34431: CALL_OW 234
34435: GO 34420
34437: POP
34438: POP
// end ;
34439: PPOPN 2
34441: END
// every 0 0$1 trigger s60 do var i , tmp ;
34442: LD_EXP 107
34446: IFFALSE 34515
34448: GO 34450
34450: DISABLE
34451: LD_INT 0
34453: PPUSH
34454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34455: LD_ADDR_VAR 0 2
34459: PUSH
34460: LD_INT 22
34462: PUSH
34463: LD_OWVAR 2
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PPUSH
34472: CALL_OW 69
34476: ST_TO_ADDR
// if not tmp then
34477: LD_VAR 0 2
34481: NOT
34482: IFFALSE 34486
// exit ;
34484: GO 34515
// for i in tmp do
34486: LD_ADDR_VAR 0 1
34490: PUSH
34491: LD_VAR 0 2
34495: PUSH
34496: FOR_IN
34497: IFFALSE 34513
// SetLives ( i , 600 ) ;
34499: LD_VAR 0 1
34503: PPUSH
34504: LD_INT 600
34506: PPUSH
34507: CALL_OW 234
34511: GO 34496
34513: POP
34514: POP
// end ;
34515: PPOPN 2
34517: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34518: LD_INT 0
34520: PPUSH
// case cmd of 301 :
34521: LD_VAR 0 1
34525: PUSH
34526: LD_INT 301
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34566
34534: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34535: LD_VAR 0 6
34539: PPUSH
34540: LD_VAR 0 7
34544: PPUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_VAR 0 5
34559: PPUSH
34560: CALL 35775 0 5
34564: GO 34687
34566: LD_INT 302
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34611
34574: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34575: LD_VAR 0 6
34579: PPUSH
34580: LD_VAR 0 7
34584: PPUSH
34585: LD_VAR 0 8
34589: PPUSH
34590: LD_VAR 0 9
34594: PPUSH
34595: LD_VAR 0 4
34599: PPUSH
34600: LD_VAR 0 5
34604: PPUSH
34605: CALL 35866 0 6
34609: GO 34687
34611: LD_INT 303
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34619
34617: GO 34656
34619: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34620: LD_VAR 0 6
34624: PPUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: LD_VAR 0 8
34634: PPUSH
34635: LD_VAR 0 9
34639: PPUSH
34640: LD_VAR 0 4
34644: PPUSH
34645: LD_VAR 0 5
34649: PPUSH
34650: CALL 34692 0 6
34654: GO 34687
34656: LD_INT 304
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34686
34664: POP
// hHackTeleport ( unit , x , y ) ; end ;
34665: LD_VAR 0 2
34669: PPUSH
34670: LD_VAR 0 4
34674: PPUSH
34675: LD_VAR 0 5
34679: PPUSH
34680: CALL 36459 0 3
34684: GO 34687
34686: POP
// end ;
34687: LD_VAR 0 12
34691: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34692: LD_INT 0
34694: PPUSH
34695: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34696: LD_VAR 0 1
34700: PUSH
34701: LD_INT 1
34703: LESS
34704: PUSH
34705: LD_VAR 0 1
34709: PUSH
34710: LD_INT 3
34712: GREATER
34713: OR
34714: PUSH
34715: LD_VAR 0 5
34719: PPUSH
34720: LD_VAR 0 6
34724: PPUSH
34725: CALL_OW 428
34729: OR
34730: IFFALSE 34734
// exit ;
34732: GO 35462
// uc_side := your_side ;
34734: LD_ADDR_OWVAR 20
34738: PUSH
34739: LD_OWVAR 2
34743: ST_TO_ADDR
// uc_nation := nation ;
34744: LD_ADDR_OWVAR 21
34748: PUSH
34749: LD_VAR 0 1
34753: ST_TO_ADDR
// bc_level = 1 ;
34754: LD_ADDR_OWVAR 43
34758: PUSH
34759: LD_INT 1
34761: ST_TO_ADDR
// case btype of 1 :
34762: LD_VAR 0 2
34766: PUSH
34767: LD_INT 1
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34786
34775: POP
// bc_type := b_depot ; 2 :
34776: LD_ADDR_OWVAR 42
34780: PUSH
34781: LD_INT 0
34783: ST_TO_ADDR
34784: GO 35406
34786: LD_INT 2
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34805
34794: POP
// bc_type := b_warehouse ; 3 :
34795: LD_ADDR_OWVAR 42
34799: PUSH
34800: LD_INT 1
34802: ST_TO_ADDR
34803: GO 35406
34805: LD_INT 3
34807: DOUBLE
34808: EQUAL
34809: IFTRUE 34813
34811: GO 34824
34813: POP
// bc_type := b_lab ; 4 .. 9 :
34814: LD_ADDR_OWVAR 42
34818: PUSH
34819: LD_INT 6
34821: ST_TO_ADDR
34822: GO 35406
34824: LD_INT 4
34826: DOUBLE
34827: GREATEREQUAL
34828: IFFALSE 34836
34830: LD_INT 9
34832: DOUBLE
34833: LESSEQUAL
34834: IFTRUE 34838
34836: GO 34898
34838: POP
// begin bc_type := b_lab_half ;
34839: LD_ADDR_OWVAR 42
34843: PUSH
34844: LD_INT 7
34846: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34847: LD_ADDR_OWVAR 44
34851: PUSH
34852: LD_INT 10
34854: PUSH
34855: LD_INT 11
34857: PUSH
34858: LD_INT 12
34860: PUSH
34861: LD_INT 15
34863: PUSH
34864: LD_INT 14
34866: PUSH
34867: LD_INT 13
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 2
34882: PUSH
34883: LD_INT 3
34885: MINUS
34886: ARRAY
34887: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34888: LD_ADDR_OWVAR 45
34892: PUSH
34893: LD_INT 9
34895: ST_TO_ADDR
// end ; 10 .. 13 :
34896: GO 35406
34898: LD_INT 10
34900: DOUBLE
34901: GREATEREQUAL
34902: IFFALSE 34910
34904: LD_INT 13
34906: DOUBLE
34907: LESSEQUAL
34908: IFTRUE 34912
34910: GO 34989
34912: POP
// begin bc_type := b_lab_full ;
34913: LD_ADDR_OWVAR 42
34917: PUSH
34918: LD_INT 8
34920: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34921: LD_ADDR_OWVAR 44
34925: PUSH
34926: LD_INT 10
34928: PUSH
34929: LD_INT 12
34931: PUSH
34932: LD_INT 14
34934: PUSH
34935: LD_INT 13
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_INT 9
34951: MINUS
34952: ARRAY
34953: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34954: LD_ADDR_OWVAR 45
34958: PUSH
34959: LD_INT 11
34961: PUSH
34962: LD_INT 15
34964: PUSH
34965: LD_INT 12
34967: PUSH
34968: LD_INT 15
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: PUSH
34977: LD_VAR 0 2
34981: PUSH
34982: LD_INT 9
34984: MINUS
34985: ARRAY
34986: ST_TO_ADDR
// end ; 14 :
34987: GO 35406
34989: LD_INT 14
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35008
34997: POP
// bc_type := b_workshop ; 15 :
34998: LD_ADDR_OWVAR 42
35002: PUSH
35003: LD_INT 2
35005: ST_TO_ADDR
35006: GO 35406
35008: LD_INT 15
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35027
35016: POP
// bc_type := b_factory ; 16 :
35017: LD_ADDR_OWVAR 42
35021: PUSH
35022: LD_INT 3
35024: ST_TO_ADDR
35025: GO 35406
35027: LD_INT 16
35029: DOUBLE
35030: EQUAL
35031: IFTRUE 35035
35033: GO 35046
35035: POP
// bc_type := b_ext_gun ; 17 :
35036: LD_ADDR_OWVAR 42
35040: PUSH
35041: LD_INT 17
35043: ST_TO_ADDR
35044: GO 35406
35046: LD_INT 17
35048: DOUBLE
35049: EQUAL
35050: IFTRUE 35054
35052: GO 35082
35054: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35055: LD_ADDR_OWVAR 42
35059: PUSH
35060: LD_INT 19
35062: PUSH
35063: LD_INT 23
35065: PUSH
35066: LD_INT 19
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 1
35078: ARRAY
35079: ST_TO_ADDR
35080: GO 35406
35082: LD_INT 18
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35101
35090: POP
// bc_type := b_ext_radar ; 19 :
35091: LD_ADDR_OWVAR 42
35095: PUSH
35096: LD_INT 20
35098: ST_TO_ADDR
35099: GO 35406
35101: LD_INT 19
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35120
35109: POP
// bc_type := b_ext_radio ; 20 :
35110: LD_ADDR_OWVAR 42
35114: PUSH
35115: LD_INT 22
35117: ST_TO_ADDR
35118: GO 35406
35120: LD_INT 20
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35139
35128: POP
// bc_type := b_ext_siberium ; 21 :
35129: LD_ADDR_OWVAR 42
35133: PUSH
35134: LD_INT 21
35136: ST_TO_ADDR
35137: GO 35406
35139: LD_INT 21
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35158
35147: POP
// bc_type := b_ext_computer ; 22 :
35148: LD_ADDR_OWVAR 42
35152: PUSH
35153: LD_INT 24
35155: ST_TO_ADDR
35156: GO 35406
35158: LD_INT 22
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35177
35166: POP
// bc_type := b_ext_track ; 23 :
35167: LD_ADDR_OWVAR 42
35171: PUSH
35172: LD_INT 16
35174: ST_TO_ADDR
35175: GO 35406
35177: LD_INT 23
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35185
35183: GO 35196
35185: POP
// bc_type := b_ext_laser ; 24 :
35186: LD_ADDR_OWVAR 42
35190: PUSH
35191: LD_INT 25
35193: ST_TO_ADDR
35194: GO 35406
35196: LD_INT 24
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35204
35202: GO 35215
35204: POP
// bc_type := b_control_tower ; 25 :
35205: LD_ADDR_OWVAR 42
35209: PUSH
35210: LD_INT 36
35212: ST_TO_ADDR
35213: GO 35406
35215: LD_INT 25
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35223
35221: GO 35234
35223: POP
// bc_type := b_breastwork ; 26 :
35224: LD_ADDR_OWVAR 42
35228: PUSH
35229: LD_INT 31
35231: ST_TO_ADDR
35232: GO 35406
35234: LD_INT 26
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35242
35240: GO 35253
35242: POP
// bc_type := b_bunker ; 27 :
35243: LD_ADDR_OWVAR 42
35247: PUSH
35248: LD_INT 32
35250: ST_TO_ADDR
35251: GO 35406
35253: LD_INT 27
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35272
35261: POP
// bc_type := b_turret ; 28 :
35262: LD_ADDR_OWVAR 42
35266: PUSH
35267: LD_INT 33
35269: ST_TO_ADDR
35270: GO 35406
35272: LD_INT 28
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35291
35280: POP
// bc_type := b_armoury ; 29 :
35281: LD_ADDR_OWVAR 42
35285: PUSH
35286: LD_INT 4
35288: ST_TO_ADDR
35289: GO 35406
35291: LD_INT 29
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35299
35297: GO 35310
35299: POP
// bc_type := b_barracks ; 30 :
35300: LD_ADDR_OWVAR 42
35304: PUSH
35305: LD_INT 5
35307: ST_TO_ADDR
35308: GO 35406
35310: LD_INT 30
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35329
35318: POP
// bc_type := b_solar_power ; 31 :
35319: LD_ADDR_OWVAR 42
35323: PUSH
35324: LD_INT 27
35326: ST_TO_ADDR
35327: GO 35406
35329: LD_INT 31
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35348
35337: POP
// bc_type := b_oil_power ; 32 :
35338: LD_ADDR_OWVAR 42
35342: PUSH
35343: LD_INT 26
35345: ST_TO_ADDR
35346: GO 35406
35348: LD_INT 32
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35367
35356: POP
// bc_type := b_siberite_power ; 33 :
35357: LD_ADDR_OWVAR 42
35361: PUSH
35362: LD_INT 28
35364: ST_TO_ADDR
35365: GO 35406
35367: LD_INT 33
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35386
35375: POP
// bc_type := b_oil_mine ; 34 :
35376: LD_ADDR_OWVAR 42
35380: PUSH
35381: LD_INT 29
35383: ST_TO_ADDR
35384: GO 35406
35386: LD_INT 34
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35394
35392: GO 35405
35394: POP
// bc_type := b_siberite_mine ; end ;
35395: LD_ADDR_OWVAR 42
35399: PUSH
35400: LD_INT 30
35402: ST_TO_ADDR
35403: GO 35406
35405: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35406: LD_ADDR_VAR 0 8
35410: PUSH
35411: LD_VAR 0 5
35415: PPUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: LD_VAR 0 3
35425: PPUSH
35426: CALL_OW 47
35430: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35431: LD_OWVAR 42
35435: PUSH
35436: LD_INT 32
35438: PUSH
35439: LD_INT 33
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: IN
35446: IFFALSE 35462
// PlaceWeaponTurret ( b , weapon ) ;
35448: LD_VAR 0 8
35452: PPUSH
35453: LD_VAR 0 4
35457: PPUSH
35458: CALL_OW 431
// end ;
35462: LD_VAR 0 7
35466: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35473: LD_ADDR_VAR 0 4
35477: PUSH
35478: LD_INT 22
35480: PUSH
35481: LD_OWVAR 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 30
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL_OW 69
35526: ST_TO_ADDR
// if not tmp then
35527: LD_VAR 0 4
35531: NOT
35532: IFFALSE 35536
// exit ;
35534: GO 35595
// for i in tmp do
35536: LD_ADDR_VAR 0 2
35540: PUSH
35541: LD_VAR 0 4
35545: PUSH
35546: FOR_IN
35547: IFFALSE 35593
// for j = 1 to 3 do
35549: LD_ADDR_VAR 0 3
35553: PUSH
35554: DOUBLE
35555: LD_INT 1
35557: DEC
35558: ST_TO_ADDR
35559: LD_INT 3
35561: PUSH
35562: FOR_TO
35563: IFFALSE 35589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35565: LD_VAR 0 2
35569: PPUSH
35570: CALL_OW 274
35574: PPUSH
35575: LD_VAR 0 3
35579: PPUSH
35580: LD_INT 99999
35582: PPUSH
35583: CALL_OW 277
35587: GO 35562
35589: POP
35590: POP
35591: GO 35546
35593: POP
35594: POP
// end ;
35595: LD_VAR 0 1
35599: RET
// export function hHackSetLevel10 ; var i , j ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35605: LD_ADDR_VAR 0 2
35609: PUSH
35610: LD_INT 21
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: PUSH
35625: FOR_IN
35626: IFFALSE 35678
// if IsSelected ( i ) then
35628: LD_VAR 0 2
35632: PPUSH
35633: CALL_OW 306
35637: IFFALSE 35676
// begin for j := 1 to 4 do
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: DOUBLE
35645: LD_INT 1
35647: DEC
35648: ST_TO_ADDR
35649: LD_INT 4
35651: PUSH
35652: FOR_TO
35653: IFFALSE 35674
// SetSkill ( i , j , 10 ) ;
35655: LD_VAR 0 2
35659: PPUSH
35660: LD_VAR 0 3
35664: PPUSH
35665: LD_INT 10
35667: PPUSH
35668: CALL_OW 237
35672: GO 35652
35674: POP
35675: POP
// end ;
35676: GO 35625
35678: POP
35679: POP
// end ;
35680: LD_VAR 0 1
35684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35685: LD_INT 0
35687: PPUSH
35688: PPUSH
35689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35690: LD_ADDR_VAR 0 2
35694: PUSH
35695: LD_INT 22
35697: PUSH
35698: LD_OWVAR 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 21
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PPUSH
35721: CALL_OW 69
35725: PUSH
35726: FOR_IN
35727: IFFALSE 35768
// begin for j := 1 to 4 do
35729: LD_ADDR_VAR 0 3
35733: PUSH
35734: DOUBLE
35735: LD_INT 1
35737: DEC
35738: ST_TO_ADDR
35739: LD_INT 4
35741: PUSH
35742: FOR_TO
35743: IFFALSE 35764
// SetSkill ( i , j , 10 ) ;
35745: LD_VAR 0 2
35749: PPUSH
35750: LD_VAR 0 3
35754: PPUSH
35755: LD_INT 10
35757: PPUSH
35758: CALL_OW 237
35762: GO 35742
35764: POP
35765: POP
// end ;
35766: GO 35726
35768: POP
35769: POP
// end ;
35770: LD_VAR 0 1
35774: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35775: LD_INT 0
35777: PPUSH
// uc_side := your_side ;
35778: LD_ADDR_OWVAR 20
35782: PUSH
35783: LD_OWVAR 2
35787: ST_TO_ADDR
// uc_nation := nation ;
35788: LD_ADDR_OWVAR 21
35792: PUSH
35793: LD_VAR 0 1
35797: ST_TO_ADDR
// InitHc ;
35798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35802: LD_INT 0
35804: PPUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: LD_VAR 0 3
35814: PPUSH
35815: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35819: LD_VAR 0 4
35823: PPUSH
35824: LD_VAR 0 5
35828: PPUSH
35829: CALL_OW 428
35833: PUSH
35834: LD_INT 0
35836: EQUAL
35837: IFFALSE 35861
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35839: CALL_OW 44
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_INT 1
35856: PPUSH
35857: CALL_OW 48
// end ;
35861: LD_VAR 0 6
35865: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
// uc_side := your_side ;
35870: LD_ADDR_OWVAR 20
35874: PUSH
35875: LD_OWVAR 2
35879: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35880: LD_VAR 0 1
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: LD_INT 4
35896: PUSH
35897: LD_INT 5
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: IN
35907: IFFALSE 35919
// uc_nation := nation_american else
35909: LD_ADDR_OWVAR 21
35913: PUSH
35914: LD_INT 1
35916: ST_TO_ADDR
35917: GO 35962
// if chassis in [ 11 , 12 , 13 , 14 ] then
35919: LD_VAR 0 1
35923: PUSH
35924: LD_INT 11
35926: PUSH
35927: LD_INT 12
35929: PUSH
35930: LD_INT 13
35932: PUSH
35933: LD_INT 14
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: IN
35942: IFFALSE 35954
// uc_nation := nation_arabian else
35944: LD_ADDR_OWVAR 21
35948: PUSH
35949: LD_INT 2
35951: ST_TO_ADDR
35952: GO 35962
// uc_nation := nation_russian ;
35954: LD_ADDR_OWVAR 21
35958: PUSH
35959: LD_INT 3
35961: ST_TO_ADDR
// vc_chassis := chassis ;
35962: LD_ADDR_OWVAR 37
35966: PUSH
35967: LD_VAR 0 1
35971: ST_TO_ADDR
// vc_engine := engine ;
35972: LD_ADDR_OWVAR 39
35976: PUSH
35977: LD_VAR 0 2
35981: ST_TO_ADDR
// vc_control := control ;
35982: LD_ADDR_OWVAR 38
35986: PUSH
35987: LD_VAR 0 3
35991: ST_TO_ADDR
// vc_weapon := weapon ;
35992: LD_ADDR_OWVAR 40
35996: PUSH
35997: LD_VAR 0 4
36001: ST_TO_ADDR
// un := CreateVehicle ;
36002: LD_ADDR_VAR 0 8
36006: PUSH
36007: CALL_OW 45
36011: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36012: LD_VAR 0 8
36016: PPUSH
36017: LD_INT 0
36019: PPUSH
36020: LD_INT 5
36022: PPUSH
36023: CALL_OW 12
36027: PPUSH
36028: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36032: LD_VAR 0 8
36036: PPUSH
36037: LD_VAR 0 5
36041: PPUSH
36042: LD_VAR 0 6
36046: PPUSH
36047: LD_INT 1
36049: PPUSH
36050: CALL_OW 48
// end ;
36054: LD_VAR 0 7
36058: RET
// export hInvincible ; every 1 do
36059: GO 36061
36061: DISABLE
// hInvincible := [ ] ;
36062: LD_ADDR_EXP 108
36066: PUSH
36067: EMPTY
36068: ST_TO_ADDR
36069: END
// every 10 do var i ;
36070: GO 36072
36072: DISABLE
36073: LD_INT 0
36075: PPUSH
// begin enable ;
36076: ENABLE
// if not hInvincible then
36077: LD_EXP 108
36081: NOT
36082: IFFALSE 36086
// exit ;
36084: GO 36130
// for i in hInvincible do
36086: LD_ADDR_VAR 0 1
36090: PUSH
36091: LD_EXP 108
36095: PUSH
36096: FOR_IN
36097: IFFALSE 36128
// if GetLives ( i ) < 1000 then
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 256
36108: PUSH
36109: LD_INT 1000
36111: LESS
36112: IFFALSE 36126
// SetLives ( i , 1000 ) ;
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 1000
36121: PPUSH
36122: CALL_OW 234
36126: GO 36096
36128: POP
36129: POP
// end ;
36130: PPOPN 1
36132: END
// export function hHackInvincible ; var i ; begin
36133: LD_INT 0
36135: PPUSH
36136: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36137: LD_ADDR_VAR 0 2
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 21
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 21
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: PUSH
36175: FOR_IN
36176: IFFALSE 36237
// if IsSelected ( i ) then
36178: LD_VAR 0 2
36182: PPUSH
36183: CALL_OW 306
36187: IFFALSE 36235
// begin if i in hInvincible then
36189: LD_VAR 0 2
36193: PUSH
36194: LD_EXP 108
36198: IN
36199: IFFALSE 36219
// hInvincible := hInvincible diff i else
36201: LD_ADDR_EXP 108
36205: PUSH
36206: LD_EXP 108
36210: PUSH
36211: LD_VAR 0 2
36215: DIFF
36216: ST_TO_ADDR
36217: GO 36235
// hInvincible := hInvincible union i ;
36219: LD_ADDR_EXP 108
36223: PUSH
36224: LD_EXP 108
36228: PUSH
36229: LD_VAR 0 2
36233: UNION
36234: ST_TO_ADDR
// end ;
36235: GO 36175
36237: POP
36238: POP
// end ;
36239: LD_VAR 0 1
36243: RET
// export function hHackInvisible ; var i , j ; begin
36244: LD_INT 0
36246: PPUSH
36247: PPUSH
36248: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36249: LD_ADDR_VAR 0 2
36253: PUSH
36254: LD_INT 21
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PPUSH
36264: CALL_OW 69
36268: PUSH
36269: FOR_IN
36270: IFFALSE 36294
// if IsSelected ( i ) then
36272: LD_VAR 0 2
36276: PPUSH
36277: CALL_OW 306
36281: IFFALSE 36292
// ComForceInvisible ( i ) ;
36283: LD_VAR 0 2
36287: PPUSH
36288: CALL_OW 496
36292: GO 36269
36294: POP
36295: POP
// end ;
36296: LD_VAR 0 1
36300: RET
// export function hHackChangeYourSide ; begin
36301: LD_INT 0
36303: PPUSH
// if your_side = 8 then
36304: LD_OWVAR 2
36308: PUSH
36309: LD_INT 8
36311: EQUAL
36312: IFFALSE 36324
// your_side := 0 else
36314: LD_ADDR_OWVAR 2
36318: PUSH
36319: LD_INT 0
36321: ST_TO_ADDR
36322: GO 36338
// your_side := your_side + 1 ;
36324: LD_ADDR_OWVAR 2
36328: PUSH
36329: LD_OWVAR 2
36333: PUSH
36334: LD_INT 1
36336: PLUS
36337: ST_TO_ADDR
// end ;
36338: LD_VAR 0 1
36342: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36343: LD_INT 0
36345: PPUSH
36346: PPUSH
36347: PPUSH
// for i in all_units do
36348: LD_ADDR_VAR 0 2
36352: PUSH
36353: LD_OWVAR 3
36357: PUSH
36358: FOR_IN
36359: IFFALSE 36437
// if IsSelected ( i ) then
36361: LD_VAR 0 2
36365: PPUSH
36366: CALL_OW 306
36370: IFFALSE 36435
// begin j := GetSide ( i ) ;
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_VAR 0 2
36381: PPUSH
36382: CALL_OW 255
36386: ST_TO_ADDR
// if j = 8 then
36387: LD_VAR 0 3
36391: PUSH
36392: LD_INT 8
36394: EQUAL
36395: IFFALSE 36407
// j := 0 else
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 0
36404: ST_TO_ADDR
36405: GO 36421
// j := j + 1 ;
36407: LD_ADDR_VAR 0 3
36411: PUSH
36412: LD_VAR 0 3
36416: PUSH
36417: LD_INT 1
36419: PLUS
36420: ST_TO_ADDR
// SetSide ( i , j ) ;
36421: LD_VAR 0 2
36425: PPUSH
36426: LD_VAR 0 3
36430: PPUSH
36431: CALL_OW 235
// end ;
36435: GO 36358
36437: POP
36438: POP
// end ;
36439: LD_VAR 0 1
36443: RET
// export function hHackFog ; begin
36444: LD_INT 0
36446: PPUSH
// FogOff ( true ) ;
36447: LD_INT 1
36449: PPUSH
36450: CALL_OW 344
// end ;
36454: LD_VAR 0 1
36458: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36459: LD_INT 0
36461: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_VAR 0 2
36471: PPUSH
36472: LD_VAR 0 3
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: LD_INT 1
36482: PPUSH
36483: CALL_OW 483
// CenterOnXY ( x , y ) ;
36487: LD_VAR 0 2
36491: PPUSH
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 84
// end ;
36501: LD_VAR 0 4
36505: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36510: LD_VAR 0 1
36514: NOT
36515: PUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PPUSH
36526: CALL_OW 488
36530: NOT
36531: OR
36532: PUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 266
36542: PUSH
36543: LD_INT 3
36545: NONEQUAL
36546: PUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 247
36556: PUSH
36557: LD_INT 1
36559: EQUAL
36560: NOT
36561: AND
36562: OR
36563: IFFALSE 36567
// exit ;
36565: GO 36849
// if GetType ( factory ) = unit_human then
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 247
36576: PUSH
36577: LD_INT 1
36579: EQUAL
36580: IFFALSE 36597
// factory := IsInUnit ( factory ) ;
36582: LD_ADDR_VAR 0 1
36586: PUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 310
36596: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 266
36606: PUSH
36607: LD_INT 3
36609: NONEQUAL
36610: IFFALSE 36614
// exit ;
36612: GO 36849
// for i := 1 to Count ( factoryWaypoints ) do
36614: LD_ADDR_VAR 0 5
36618: PUSH
36619: DOUBLE
36620: LD_INT 1
36622: DEC
36623: ST_TO_ADDR
36624: LD_EXP 109
36628: PPUSH
36629: CALL 45465 0 1
36633: PUSH
36634: FOR_TO
36635: IFFALSE 36797
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36637: LD_VAR 0 2
36641: PPUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: CALL_OW 428
36651: PUSH
36652: LD_EXP 109
36656: PUSH
36657: LD_VAR 0 5
36661: ARRAY
36662: PUSH
36663: LD_INT 2
36665: ARRAY
36666: EQUAL
36667: IFFALSE 36699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36669: LD_ADDR_EXP 109
36673: PUSH
36674: LD_EXP 109
36678: PPUSH
36679: LD_VAR 0 5
36683: PPUSH
36684: CALL_OW 3
36688: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36689: CALL 36854 0 0
// exit ;
36693: POP
36694: POP
36695: GO 36849
// end else
36697: GO 36795
// if factory = factoryWaypoints [ i ] [ 2 ] then
36699: LD_VAR 0 1
36703: PUSH
36704: LD_EXP 109
36708: PUSH
36709: LD_VAR 0 5
36713: ARRAY
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: EQUAL
36719: IFFALSE 36795
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36721: LD_ADDR_EXP 109
36725: PUSH
36726: LD_EXP 109
36730: PPUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL_OW 3
36740: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36741: LD_ADDR_EXP 109
36745: PUSH
36746: LD_EXP 109
36750: PPUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 255
36760: PUSH
36761: LD_VAR 0 1
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_VAR 0 3
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: PPUSH
36782: CALL 81074 0 2
36786: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36787: CALL 36854 0 0
// exit ;
36791: POP
36792: POP
36793: GO 36849
// end ; end ;
36795: GO 36634
36797: POP
36798: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36799: LD_ADDR_EXP 109
36803: PUSH
36804: LD_EXP 109
36808: PPUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 255
36818: PUSH
36819: LD_VAR 0 1
36823: PUSH
36824: LD_VAR 0 2
36828: PUSH
36829: LD_VAR 0 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: PPUSH
36840: CALL 81074 0 2
36844: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36845: CALL 36854 0 0
// end ;
36849: LD_VAR 0 4
36853: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36854: LD_INT 0
36856: PPUSH
36857: PPUSH
36858: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36859: LD_STRING resetFactoryWaypoint();
36861: PPUSH
36862: CALL_OW 559
// if factoryWaypoints then
36866: LD_EXP 109
36870: IFFALSE 36991
// begin list := factoryWaypoints ;
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_EXP 109
36881: ST_TO_ADDR
// for i := 1 to list do
36882: LD_ADDR_VAR 0 2
36886: PUSH
36887: DOUBLE
36888: LD_INT 1
36890: DEC
36891: ST_TO_ADDR
36892: LD_VAR 0 3
36896: PUSH
36897: FOR_TO
36898: IFFALSE 36989
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36900: LD_STRING setFactoryWaypointXY(
36902: PUSH
36903: LD_VAR 0 3
36907: PUSH
36908: LD_VAR 0 2
36912: ARRAY
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: STR
36918: PUSH
36919: LD_STRING ,
36921: STR
36922: PUSH
36923: LD_VAR 0 3
36927: PUSH
36928: LD_VAR 0 2
36932: ARRAY
36933: PUSH
36934: LD_INT 2
36936: ARRAY
36937: STR
36938: PUSH
36939: LD_STRING ,
36941: STR
36942: PUSH
36943: LD_VAR 0 3
36947: PUSH
36948: LD_VAR 0 2
36952: ARRAY
36953: PUSH
36954: LD_INT 3
36956: ARRAY
36957: STR
36958: PUSH
36959: LD_STRING ,
36961: STR
36962: PUSH
36963: LD_VAR 0 3
36967: PUSH
36968: LD_VAR 0 2
36972: ARRAY
36973: PUSH
36974: LD_INT 4
36976: ARRAY
36977: STR
36978: PUSH
36979: LD_STRING )
36981: STR
36982: PPUSH
36983: CALL_OW 559
36987: GO 36897
36989: POP
36990: POP
// end ; end ;
36991: LD_VAR 0 1
36995: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36996: LD_INT 0
36998: PPUSH
// if HexInfo ( x , y ) = warehouse then
36999: LD_VAR 0 2
37003: PPUSH
37004: LD_VAR 0 3
37008: PPUSH
37009: CALL_OW 428
37013: PUSH
37014: LD_VAR 0 1
37018: EQUAL
37019: IFFALSE 37046
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
37021: LD_ADDR_EXP 111
37025: PUSH
37026: LD_EXP 111
37030: PPUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_INT 0
37038: PPUSH
37039: CALL_OW 1
37043: ST_TO_ADDR
37044: GO 37097
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
37046: LD_ADDR_EXP 111
37050: PUSH
37051: LD_EXP 111
37055: PPUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 255
37070: PUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 3
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL_OW 1
37096: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
37097: CALL 37106 0 0
// end ;
37101: LD_VAR 0 4
37105: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
37110: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
37111: LD_STRING resetWarehouseGatheringPoints();
37113: PPUSH
37114: CALL_OW 559
// if warehouseGatheringPoints then
37118: LD_EXP 111
37122: IFFALSE 37248
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_EXP 111
37133: PPUSH
37134: CALL 84842 0 1
37138: ST_TO_ADDR
// for i := 1 to list do
37139: LD_ADDR_VAR 0 2
37143: PUSH
37144: DOUBLE
37145: LD_INT 1
37147: DEC
37148: ST_TO_ADDR
37149: LD_VAR 0 3
37153: PUSH
37154: FOR_TO
37155: IFFALSE 37246
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37157: LD_STRING setWarehouseGatheringPointXY(
37159: PUSH
37160: LD_VAR 0 3
37164: PUSH
37165: LD_VAR 0 2
37169: ARRAY
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: STR
37175: PUSH
37176: LD_STRING ,
37178: STR
37179: PUSH
37180: LD_VAR 0 3
37184: PUSH
37185: LD_VAR 0 2
37189: ARRAY
37190: PUSH
37191: LD_INT 2
37193: ARRAY
37194: STR
37195: PUSH
37196: LD_STRING ,
37198: STR
37199: PUSH
37200: LD_VAR 0 3
37204: PUSH
37205: LD_VAR 0 2
37209: ARRAY
37210: PUSH
37211: LD_INT 3
37213: ARRAY
37214: STR
37215: PUSH
37216: LD_STRING ,
37218: STR
37219: PUSH
37220: LD_VAR 0 3
37224: PUSH
37225: LD_VAR 0 2
37229: ARRAY
37230: PUSH
37231: LD_INT 4
37233: ARRAY
37234: STR
37235: PUSH
37236: LD_STRING )
37238: STR
37239: PPUSH
37240: CALL_OW 559
37244: GO 37154
37246: POP
37247: POP
// end ; end ;
37248: LD_VAR 0 1
37252: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37253: LD_EXP 111
37257: IFFALSE 37942
37259: GO 37261
37261: DISABLE
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// begin enable ;
37273: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37274: LD_ADDR_VAR 0 3
37278: PUSH
37279: LD_EXP 111
37283: PPUSH
37284: CALL 84842 0 1
37288: ST_TO_ADDR
// if not list then
37289: LD_VAR 0 3
37293: NOT
37294: IFFALSE 37298
// exit ;
37296: GO 37942
// for i := 1 to list do
37298: LD_ADDR_VAR 0 1
37302: PUSH
37303: DOUBLE
37304: LD_INT 1
37306: DEC
37307: ST_TO_ADDR
37308: LD_VAR 0 3
37312: PUSH
37313: FOR_TO
37314: IFFALSE 37940
// begin depot := list [ i ] [ 2 ] ;
37316: LD_ADDR_VAR 0 8
37320: PUSH
37321: LD_VAR 0 3
37325: PUSH
37326: LD_VAR 0 1
37330: ARRAY
37331: PUSH
37332: LD_INT 2
37334: ARRAY
37335: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37336: LD_ADDR_VAR 0 5
37340: PUSH
37341: LD_VAR 0 3
37345: PUSH
37346: LD_VAR 0 1
37350: ARRAY
37351: PUSH
37352: LD_INT 1
37354: ARRAY
37355: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37356: LD_VAR 0 8
37360: PPUSH
37361: CALL_OW 301
37365: PUSH
37366: LD_VAR 0 5
37370: PUSH
37371: LD_VAR 0 8
37375: PPUSH
37376: CALL_OW 255
37380: NONEQUAL
37381: OR
37382: IFFALSE 37411
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37384: LD_ADDR_EXP 111
37388: PUSH
37389: LD_EXP 111
37393: PPUSH
37394: LD_VAR 0 8
37398: PPUSH
37399: LD_INT 0
37401: PPUSH
37402: CALL_OW 1
37406: ST_TO_ADDR
// exit ;
37407: POP
37408: POP
37409: GO 37942
// end ; x := list [ i ] [ 3 ] ;
37411: LD_ADDR_VAR 0 6
37415: PUSH
37416: LD_VAR 0 3
37420: PUSH
37421: LD_VAR 0 1
37425: ARRAY
37426: PUSH
37427: LD_INT 3
37429: ARRAY
37430: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37431: LD_ADDR_VAR 0 7
37435: PUSH
37436: LD_VAR 0 3
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PUSH
37447: LD_INT 4
37449: ARRAY
37450: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37451: LD_ADDR_VAR 0 9
37455: PUSH
37456: LD_VAR 0 6
37460: PPUSH
37461: LD_VAR 0 7
37465: PPUSH
37466: LD_INT 16
37468: PPUSH
37469: CALL 83426 0 3
37473: ST_TO_ADDR
// if not cratesNearbyPoint then
37474: LD_VAR 0 9
37478: NOT
37479: IFFALSE 37485
// exit ;
37481: POP
37482: POP
37483: GO 37942
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37485: LD_ADDR_VAR 0 4
37489: PUSH
37490: LD_INT 22
37492: PUSH
37493: LD_VAR 0 5
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 60
37507: PUSH
37508: EMPTY
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 91
37517: PUSH
37518: LD_VAR 0 8
37522: PUSH
37523: LD_INT 6
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 25
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 25
37546: PUSH
37547: LD_INT 16
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: PPUSH
37565: CALL_OW 69
37569: PUSH
37570: LD_VAR 0 8
37574: PPUSH
37575: CALL_OW 313
37579: PPUSH
37580: LD_INT 3
37582: PUSH
37583: LD_INT 60
37585: PUSH
37586: EMPTY
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 25
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 25
37608: PUSH
37609: LD_INT 16
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PPUSH
37625: CALL_OW 72
37629: UNION
37630: ST_TO_ADDR
// if tmp then
37631: LD_VAR 0 4
37635: IFFALSE 37715
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_VAR 0 4
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL 81389 0 2
37654: ST_TO_ADDR
// for j in tmp do
37655: LD_ADDR_VAR 0 2
37659: PUSH
37660: LD_VAR 0 4
37664: PUSH
37665: FOR_IN
37666: IFFALSE 37709
// begin if IsInUnit ( j ) then
37668: LD_VAR 0 2
37672: PPUSH
37673: CALL_OW 310
37677: IFFALSE 37688
// ComExit ( j ) ;
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL 81472 0 1
// AddComCollect ( j , x , y ) ;
37688: LD_VAR 0 2
37692: PPUSH
37693: LD_VAR 0 6
37697: PPUSH
37698: LD_VAR 0 7
37702: PPUSH
37703: CALL_OW 177
// end ;
37707: GO 37665
37709: POP
37710: POP
// exit ;
37711: POP
37712: POP
37713: GO 37942
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37715: LD_ADDR_VAR 0 4
37719: PUSH
37720: LD_INT 22
37722: PUSH
37723: LD_VAR 0 5
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 91
37734: PUSH
37735: LD_VAR 0 8
37739: PUSH
37740: LD_INT 8
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 34
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 34
37763: PUSH
37764: LD_INT 51
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 34
37773: PUSH
37774: LD_INT 32
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 34
37783: PUSH
37784: LD_INT 89
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL_OW 69
37807: ST_TO_ADDR
// if tmp then
37808: LD_VAR 0 4
37812: IFFALSE 37938
// begin for j in tmp do
37814: LD_ADDR_VAR 0 2
37818: PUSH
37819: LD_VAR 0 4
37823: PUSH
37824: FOR_IN
37825: IFFALSE 37936
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37827: LD_VAR 0 2
37831: PPUSH
37832: CALL_OW 262
37836: PUSH
37837: LD_INT 3
37839: EQUAL
37840: PUSH
37841: LD_VAR 0 2
37845: PPUSH
37846: CALL_OW 261
37850: PUSH
37851: LD_INT 20
37853: GREATER
37854: OR
37855: PUSH
37856: LD_VAR 0 2
37860: PPUSH
37861: CALL_OW 314
37865: NOT
37866: AND
37867: PUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: CALL_OW 263
37877: PUSH
37878: LD_INT 1
37880: NONEQUAL
37881: PUSH
37882: LD_VAR 0 2
37886: PPUSH
37887: CALL_OW 311
37891: OR
37892: AND
37893: IFFALSE 37934
// begin ComCollect ( j , x , y ) ;
37895: LD_VAR 0 2
37899: PPUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: LD_VAR 0 7
37909: PPUSH
37910: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 8
37923: PPUSH
37924: CALL_OW 172
// exit ;
37928: POP
37929: POP
37930: POP
37931: POP
37932: GO 37942
// end ;
37934: GO 37824
37936: POP
37937: POP
// end ; end ;
37938: GO 37313
37940: POP
37941: POP
// end ; end_of_file
37942: PPOPN 9
37944: END
// export function SOS_UnitDestroyed ( un ) ; begin
37945: LD_INT 0
37947: PPUSH
// ComRadiation ( un ) ;
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL 38984 0 1
// end ;
37957: LD_VAR 0 2
37961: RET
// export function SOS_UnitKamikazed ( un ) ; begin
37962: LD_INT 0
37964: PPUSH
// ComRadiation ( un ) ;
37965: LD_VAR 0 1
37969: PPUSH
37970: CALL 38984 0 1
// end ;
37974: LD_VAR 0 2
37978: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37979: LD_INT 0
37981: PPUSH
// end ;
37982: LD_VAR 0 4
37986: RET
// export function SOS_Command ( cmd ) ; begin
37987: LD_INT 0
37989: PPUSH
// end ;
37990: LD_VAR 0 2
37994: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37995: LD_INT 0
37997: PPUSH
// end ;
37998: LD_VAR 0 6
38002: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
// if not vehicle or not factory then
38009: LD_VAR 0 1
38013: NOT
38014: PUSH
38015: LD_VAR 0 2
38019: NOT
38020: OR
38021: IFFALSE 38025
// exit ;
38023: GO 38575
// if not factoryWaypoints then
38025: LD_EXP 109
38029: NOT
38030: IFFALSE 38034
// exit ;
38032: GO 38575
// for i := 1 to Count ( factoryWaypoints ) do
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: DOUBLE
38040: LD_INT 1
38042: DEC
38043: ST_TO_ADDR
38044: LD_EXP 109
38048: PPUSH
38049: CALL 45465 0 1
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38573
// if factoryWaypoints [ i ] [ 2 ] = factory then
38057: LD_EXP 109
38061: PUSH
38062: LD_VAR 0 4
38066: ARRAY
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PUSH
38072: LD_VAR 0 2
38076: EQUAL
38077: IFFALSE 38571
// begin if GetControl ( vehicle ) = control_manual then
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 263
38088: PUSH
38089: LD_INT 1
38091: EQUAL
38092: IFFALSE 38454
// begin driver := IsDrivenBy ( vehicle ) ;
38094: LD_ADDR_VAR 0 5
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 311
38108: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
38109: LD_VAR 0 5
38113: PUSH
38114: LD_EXP 110
38118: IN
38119: PUSH
38120: LD_VAR 0 1
38124: PUSH
38125: LD_EXP 110
38129: IN
38130: OR
38131: IFFALSE 38137
// exit ;
38133: POP
38134: POP
38135: GO 38575
// if not HasTask ( driver ) then
38137: LD_VAR 0 5
38141: PPUSH
38142: CALL_OW 314
38146: NOT
38147: IFFALSE 38452
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
38149: LD_ADDR_EXP 110
38153: PUSH
38154: LD_EXP 110
38158: PPUSH
38159: LD_VAR 0 5
38163: PPUSH
38164: CALL 81074 0 2
38168: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
38169: LD_ADDR_EXP 110
38173: PUSH
38174: LD_EXP 110
38178: PPUSH
38179: LD_VAR 0 1
38183: PPUSH
38184: CALL 81074 0 2
38188: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38189: LD_ADDR_VAR 0 6
38193: PUSH
38194: LD_EXP 109
38198: PUSH
38199: LD_VAR 0 4
38203: ARRAY
38204: PUSH
38205: LD_INT 3
38207: ARRAY
38208: PPUSH
38209: LD_EXP 109
38213: PUSH
38214: LD_VAR 0 4
38218: ARRAY
38219: PUSH
38220: LD_INT 4
38222: ARRAY
38223: PPUSH
38224: CALL_OW 428
38228: ST_TO_ADDR
// if hex then
38229: LD_VAR 0 6
38233: IFFALSE 38251
// ComMoveUnit ( driver , hex ) else
38235: LD_VAR 0 5
38239: PPUSH
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 112
38249: GO 38335
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_EXP 109
38260: PUSH
38261: LD_VAR 0 4
38265: ARRAY
38266: PUSH
38267: LD_INT 3
38269: ARRAY
38270: PPUSH
38271: LD_EXP 109
38275: PUSH
38276: LD_VAR 0 4
38280: ARRAY
38281: PUSH
38282: LD_INT 4
38284: ARRAY
38285: PPUSH
38286: CALL_OW 297
38290: PUSH
38291: LD_INT 0
38293: GREATER
38294: IFFALSE 38335
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38296: LD_VAR 0 5
38300: PPUSH
38301: LD_EXP 109
38305: PUSH
38306: LD_VAR 0 4
38310: ARRAY
38311: PUSH
38312: LD_INT 3
38314: ARRAY
38315: PPUSH
38316: LD_EXP 109
38320: PUSH
38321: LD_VAR 0 4
38325: ARRAY
38326: PUSH
38327: LD_INT 4
38329: ARRAY
38330: PPUSH
38331: CALL_OW 111
// AddComExitVehicle ( driver ) ;
38335: LD_VAR 0 5
38339: PPUSH
38340: CALL_OW 181
// if Multiplayer then
38344: LD_OWVAR 4
38348: IFFALSE 38397
// begin repeat wait ( 10 ) ;
38350: LD_INT 10
38352: PPUSH
38353: CALL_OW 67
// until not IsInUnit ( driver ) ;
38357: LD_VAR 0 5
38361: PPUSH
38362: CALL_OW 310
38366: NOT
38367: IFFALSE 38350
// if not HasTask ( driver ) then
38369: LD_VAR 0 5
38373: PPUSH
38374: CALL_OW 314
38378: NOT
38379: IFFALSE 38395
// ComEnterUnit ( driver , factory ) ;
38381: LD_VAR 0 5
38385: PPUSH
38386: LD_VAR 0 2
38390: PPUSH
38391: CALL_OW 120
// end else
38395: GO 38411
// AddComEnterUnit ( driver , factory ) ;
38397: LD_VAR 0 5
38401: PPUSH
38402: LD_VAR 0 2
38406: PPUSH
38407: CALL_OW 180
// wait ( 0 0$1 ) ;
38411: LD_INT 35
38413: PPUSH
38414: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
38418: LD_ADDR_EXP 110
38422: PUSH
38423: LD_EXP 110
38427: PUSH
38428: LD_VAR 0 5
38432: DIFF
38433: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
38434: LD_ADDR_EXP 110
38438: PUSH
38439: LD_EXP 110
38443: PUSH
38444: LD_VAR 0 1
38448: DIFF
38449: ST_TO_ADDR
// break ;
38450: GO 38573
// end ; end else
38452: GO 38571
// if GetControl ( vehicle ) = control_remote then
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 263
38463: PUSH
38464: LD_INT 2
38466: EQUAL
38467: IFFALSE 38530
// begin wait ( 0 0$2 ) ;
38469: LD_INT 70
38471: PPUSH
38472: CALL_OW 67
// if Connect ( vehicle ) then
38476: LD_VAR 0 1
38480: PPUSH
38481: CALL 51671 0 1
38485: IFFALSE 38526
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38487: LD_VAR 0 1
38491: PPUSH
38492: LD_EXP 109
38496: PUSH
38497: LD_VAR 0 4
38501: ARRAY
38502: PUSH
38503: LD_INT 3
38505: ARRAY
38506: PPUSH
38507: LD_EXP 109
38511: PUSH
38512: LD_VAR 0 4
38516: ARRAY
38517: PUSH
38518: LD_INT 4
38520: ARRAY
38521: PPUSH
38522: CALL_OW 171
// break ;
38526: GO 38573
// end else
38528: GO 38571
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38530: LD_VAR 0 1
38534: PPUSH
38535: LD_EXP 109
38539: PUSH
38540: LD_VAR 0 4
38544: ARRAY
38545: PUSH
38546: LD_INT 3
38548: ARRAY
38549: PPUSH
38550: LD_EXP 109
38554: PUSH
38555: LD_VAR 0 4
38559: ARRAY
38560: PUSH
38561: LD_INT 4
38563: ARRAY
38564: PPUSH
38565: CALL_OW 171
// break ;
38569: GO 38573
// end ; end ;
38571: GO 38054
38573: POP
38574: POP
// end ;
38575: LD_VAR 0 3
38579: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38580: LD_INT 0
38582: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38583: LD_VAR 0 1
38587: PUSH
38588: LD_INT 250
38590: EQUAL
38591: PUSH
38592: LD_VAR 0 2
38596: PPUSH
38597: CALL_OW 264
38601: PUSH
38602: LD_INT 81
38604: EQUAL
38605: AND
38606: IFFALSE 38627
// MinerPlaceMine ( unit , x , y ) ;
38608: LD_VAR 0 2
38612: PPUSH
38613: LD_VAR 0 4
38617: PPUSH
38618: LD_VAR 0 5
38622: PPUSH
38623: CALL 41719 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38627: LD_VAR 0 1
38631: PUSH
38632: LD_INT 251
38634: EQUAL
38635: PUSH
38636: LD_VAR 0 2
38640: PPUSH
38641: CALL_OW 264
38645: PUSH
38646: LD_INT 81
38648: EQUAL
38649: AND
38650: IFFALSE 38671
// MinerDetonateMine ( unit , x , y ) ;
38652: LD_VAR 0 2
38656: PPUSH
38657: LD_VAR 0 4
38661: PPUSH
38662: LD_VAR 0 5
38666: PPUSH
38667: CALL 41994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38671: LD_VAR 0 1
38675: PUSH
38676: LD_INT 252
38678: EQUAL
38679: PUSH
38680: LD_VAR 0 2
38684: PPUSH
38685: CALL_OW 264
38689: PUSH
38690: LD_INT 81
38692: EQUAL
38693: AND
38694: IFFALSE 38715
// MinerCreateMinefield ( unit , x , y ) ;
38696: LD_VAR 0 2
38700: PPUSH
38701: LD_VAR 0 4
38705: PPUSH
38706: LD_VAR 0 5
38710: PPUSH
38711: CALL 42411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38715: LD_VAR 0 1
38719: PUSH
38720: LD_INT 253
38722: EQUAL
38723: PUSH
38724: LD_VAR 0 2
38728: PPUSH
38729: CALL_OW 257
38733: PUSH
38734: LD_INT 5
38736: EQUAL
38737: AND
38738: IFFALSE 38759
// ComBinocular ( unit , x , y ) ;
38740: LD_VAR 0 2
38744: PPUSH
38745: LD_VAR 0 4
38749: PPUSH
38750: LD_VAR 0 5
38754: PPUSH
38755: CALL 42780 0 3
// if selectedUnit then
38759: LD_VAR 0 3
38763: IFFALSE 38819
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38765: LD_VAR 0 1
38769: PUSH
38770: LD_INT 254
38772: EQUAL
38773: PUSH
38774: LD_VAR 0 2
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 99
38786: EQUAL
38787: AND
38788: PUSH
38789: LD_VAR 0 3
38793: PPUSH
38794: CALL_OW 263
38798: PUSH
38799: LD_INT 3
38801: EQUAL
38802: AND
38803: IFFALSE 38819
// HackDestroyVehicle ( unit , selectedUnit ) ;
38805: LD_VAR 0 2
38809: PPUSH
38810: LD_VAR 0 3
38814: PPUSH
38815: CALL 41083 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 255
38826: EQUAL
38827: PUSH
38828: LD_VAR 0 2
38832: PPUSH
38833: CALL_OW 264
38837: PUSH
38838: LD_INT 14
38840: PUSH
38841: LD_INT 53
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: IN
38848: AND
38849: PUSH
38850: LD_VAR 0 4
38854: PPUSH
38855: LD_VAR 0 5
38859: PPUSH
38860: CALL_OW 488
38864: AND
38865: IFFALSE 38889
// CutTreeXYR ( unit , x , y , 12 ) ;
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_VAR 0 4
38876: PPUSH
38877: LD_VAR 0 5
38881: PPUSH
38882: LD_INT 12
38884: PPUSH
38885: CALL 39080 0 4
// if cmd = 256 then
38889: LD_VAR 0 1
38893: PUSH
38894: LD_INT 256
38896: EQUAL
38897: IFFALSE 38918
// SetFactoryWaypoint ( unit , x , y ) ;
38899: LD_VAR 0 2
38903: PPUSH
38904: LD_VAR 0 4
38908: PPUSH
38909: LD_VAR 0 5
38913: PPUSH
38914: CALL 36506 0 3
// if cmd = 257 then
38918: LD_VAR 0 1
38922: PUSH
38923: LD_INT 257
38925: EQUAL
38926: IFFALSE 38947
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_VAR 0 4
38937: PPUSH
38938: LD_VAR 0 5
38942: PPUSH
38943: CALL 36996 0 3
// if cmd = 258 then
38947: LD_VAR 0 1
38951: PUSH
38952: LD_INT 258
38954: EQUAL
38955: IFFALSE 38979
// BurnTreeXYR ( unit , x , y , 8 ) ;
38957: LD_VAR 0 2
38961: PPUSH
38962: LD_VAR 0 4
38966: PPUSH
38967: LD_VAR 0 5
38971: PPUSH
38972: LD_INT 8
38974: PPUSH
38975: CALL 39474 0 4
// end ;
38979: LD_VAR 0 6
38983: RET
// export function ComRadiation ( un ) ; var eff ; begin
38984: LD_INT 0
38986: PPUSH
38987: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 264
38997: PUSH
38998: LD_INT 91
39000: NONEQUAL
39001: IFFALSE 39005
// exit ;
39003: GO 39075
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39005: LD_INT 68
39007: PPUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: CALL_OW 255
39017: PPUSH
39018: CALL_OW 321
39022: PUSH
39023: LD_INT 2
39025: EQUAL
39026: IFFALSE 39038
// eff := 50 else
39028: LD_ADDR_VAR 0 3
39032: PUSH
39033: LD_INT 50
39035: ST_TO_ADDR
39036: GO 39046
// eff := 25 ;
39038: LD_ADDR_VAR 0 3
39042: PUSH
39043: LD_INT 25
39045: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 250
39055: PPUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 251
39065: PPUSH
39066: LD_VAR 0 3
39070: PPUSH
39071: CALL_OW 495
// end ;
39075: LD_VAR 0 2
39079: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39080: LD_INT 0
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
39086: PPUSH
39087: PPUSH
39088: PPUSH
39089: PPUSH
39090: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
39091: LD_VAR 0 1
39095: PPUSH
39096: CALL_OW 302
39100: NOT
39101: PUSH
39102: LD_VAR 0 2
39106: PPUSH
39107: LD_VAR 0 3
39111: PPUSH
39112: CALL_OW 488
39116: NOT
39117: OR
39118: PUSH
39119: LD_VAR 0 4
39123: NOT
39124: OR
39125: IFFALSE 39129
// exit ;
39127: GO 39469
// list := [ ] ;
39129: LD_ADDR_VAR 0 13
39133: PUSH
39134: EMPTY
39135: ST_TO_ADDR
// if x - r < 0 then
39136: LD_VAR 0 2
39140: PUSH
39141: LD_VAR 0 4
39145: MINUS
39146: PUSH
39147: LD_INT 0
39149: LESS
39150: IFFALSE 39162
// min_x := 0 else
39152: LD_ADDR_VAR 0 7
39156: PUSH
39157: LD_INT 0
39159: ST_TO_ADDR
39160: GO 39178
// min_x := x - r ;
39162: LD_ADDR_VAR 0 7
39166: PUSH
39167: LD_VAR 0 2
39171: PUSH
39172: LD_VAR 0 4
39176: MINUS
39177: ST_TO_ADDR
// if y - r < 0 then
39178: LD_VAR 0 3
39182: PUSH
39183: LD_VAR 0 4
39187: MINUS
39188: PUSH
39189: LD_INT 0
39191: LESS
39192: IFFALSE 39204
// min_y := 0 else
39194: LD_ADDR_VAR 0 8
39198: PUSH
39199: LD_INT 0
39201: ST_TO_ADDR
39202: GO 39220
// min_y := y - r ;
39204: LD_ADDR_VAR 0 8
39208: PUSH
39209: LD_VAR 0 3
39213: PUSH
39214: LD_VAR 0 4
39218: MINUS
39219: ST_TO_ADDR
// max_x := x + r ;
39220: LD_ADDR_VAR 0 9
39224: PUSH
39225: LD_VAR 0 2
39229: PUSH
39230: LD_VAR 0 4
39234: PLUS
39235: ST_TO_ADDR
// max_y := y + r ;
39236: LD_ADDR_VAR 0 10
39240: PUSH
39241: LD_VAR 0 3
39245: PUSH
39246: LD_VAR 0 4
39250: PLUS
39251: ST_TO_ADDR
// for _x = min_x to max_x do
39252: LD_ADDR_VAR 0 11
39256: PUSH
39257: DOUBLE
39258: LD_VAR 0 7
39262: DEC
39263: ST_TO_ADDR
39264: LD_VAR 0 9
39268: PUSH
39269: FOR_TO
39270: IFFALSE 39387
// for _y = min_y to max_y do
39272: LD_ADDR_VAR 0 12
39276: PUSH
39277: DOUBLE
39278: LD_VAR 0 8
39282: DEC
39283: ST_TO_ADDR
39284: LD_VAR 0 10
39288: PUSH
39289: FOR_TO
39290: IFFALSE 39383
// begin if not ValidHex ( _x , _y ) then
39292: LD_VAR 0 11
39296: PPUSH
39297: LD_VAR 0 12
39301: PPUSH
39302: CALL_OW 488
39306: NOT
39307: IFFALSE 39311
// continue ;
39309: GO 39289
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39311: LD_VAR 0 11
39315: PPUSH
39316: LD_VAR 0 12
39320: PPUSH
39321: CALL_OW 351
39325: PUSH
39326: LD_VAR 0 11
39330: PPUSH
39331: LD_VAR 0 12
39335: PPUSH
39336: CALL_OW 554
39340: AND
39341: IFFALSE 39381
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39343: LD_ADDR_VAR 0 13
39347: PUSH
39348: LD_VAR 0 13
39352: PPUSH
39353: LD_VAR 0 13
39357: PUSH
39358: LD_INT 1
39360: PLUS
39361: PPUSH
39362: LD_VAR 0 11
39366: PUSH
39367: LD_VAR 0 12
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PPUSH
39376: CALL_OW 2
39380: ST_TO_ADDR
// end ;
39381: GO 39289
39383: POP
39384: POP
39385: GO 39269
39387: POP
39388: POP
// if not list then
39389: LD_VAR 0 13
39393: NOT
39394: IFFALSE 39398
// exit ;
39396: GO 39469
// for i in list do
39398: LD_ADDR_VAR 0 6
39402: PUSH
39403: LD_VAR 0 13
39407: PUSH
39408: FOR_IN
39409: IFFALSE 39467
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_STRING M
39418: PUSH
39419: LD_VAR 0 6
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PUSH
39428: LD_VAR 0 6
39432: PUSH
39433: LD_INT 2
39435: ARRAY
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: PUSH
39458: EMPTY
39459: LIST
39460: PPUSH
39461: CALL_OW 447
39465: GO 39408
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 5
39473: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
39474: LD_INT 0
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
39486: LD_VAR 0 1
39490: PPUSH
39491: CALL_OW 302
39495: NOT
39496: PUSH
39497: LD_VAR 0 2
39501: PPUSH
39502: LD_VAR 0 3
39506: PPUSH
39507: CALL_OW 488
39511: NOT
39512: OR
39513: PUSH
39514: LD_VAR 0 4
39518: NOT
39519: OR
39520: IFFALSE 39524
// exit ;
39522: GO 40037
// list := [ ] ;
39524: LD_ADDR_VAR 0 13
39528: PUSH
39529: EMPTY
39530: ST_TO_ADDR
// if x - r < 0 then
39531: LD_VAR 0 2
39535: PUSH
39536: LD_VAR 0 4
39540: MINUS
39541: PUSH
39542: LD_INT 0
39544: LESS
39545: IFFALSE 39557
// min_x := 0 else
39547: LD_ADDR_VAR 0 7
39551: PUSH
39552: LD_INT 0
39554: ST_TO_ADDR
39555: GO 39573
// min_x := x - r ;
39557: LD_ADDR_VAR 0 7
39561: PUSH
39562: LD_VAR 0 2
39566: PUSH
39567: LD_VAR 0 4
39571: MINUS
39572: ST_TO_ADDR
// if y - r < 0 then
39573: LD_VAR 0 3
39577: PUSH
39578: LD_VAR 0 4
39582: MINUS
39583: PUSH
39584: LD_INT 0
39586: LESS
39587: IFFALSE 39599
// min_y := 0 else
39589: LD_ADDR_VAR 0 8
39593: PUSH
39594: LD_INT 0
39596: ST_TO_ADDR
39597: GO 39615
// min_y := y - r ;
39599: LD_ADDR_VAR 0 8
39603: PUSH
39604: LD_VAR 0 3
39608: PUSH
39609: LD_VAR 0 4
39613: MINUS
39614: ST_TO_ADDR
// max_x := x + r ;
39615: LD_ADDR_VAR 0 9
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_VAR 0 4
39629: PLUS
39630: ST_TO_ADDR
// max_y := y + r ;
39631: LD_ADDR_VAR 0 10
39635: PUSH
39636: LD_VAR 0 3
39640: PUSH
39641: LD_VAR 0 4
39645: PLUS
39646: ST_TO_ADDR
// for _x = min_x to max_x do
39647: LD_ADDR_VAR 0 11
39651: PUSH
39652: DOUBLE
39653: LD_VAR 0 7
39657: DEC
39658: ST_TO_ADDR
39659: LD_VAR 0 9
39663: PUSH
39664: FOR_TO
39665: IFFALSE 39782
// for _y = min_y to max_y do
39667: LD_ADDR_VAR 0 12
39671: PUSH
39672: DOUBLE
39673: LD_VAR 0 8
39677: DEC
39678: ST_TO_ADDR
39679: LD_VAR 0 10
39683: PUSH
39684: FOR_TO
39685: IFFALSE 39778
// begin if not ValidHex ( _x , _y ) then
39687: LD_VAR 0 11
39691: PPUSH
39692: LD_VAR 0 12
39696: PPUSH
39697: CALL_OW 488
39701: NOT
39702: IFFALSE 39706
// continue ;
39704: GO 39684
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39706: LD_VAR 0 11
39710: PPUSH
39711: LD_VAR 0 12
39715: PPUSH
39716: CALL_OW 351
39720: PUSH
39721: LD_VAR 0 11
39725: PPUSH
39726: LD_VAR 0 12
39730: PPUSH
39731: CALL_OW 554
39735: AND
39736: IFFALSE 39776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39738: LD_ADDR_VAR 0 13
39742: PUSH
39743: LD_VAR 0 13
39747: PPUSH
39748: LD_VAR 0 13
39752: PUSH
39753: LD_INT 1
39755: PLUS
39756: PPUSH
39757: LD_VAR 0 11
39761: PUSH
39762: LD_VAR 0 12
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PPUSH
39771: CALL_OW 2
39775: ST_TO_ADDR
// end ;
39776: GO 39684
39778: POP
39779: POP
39780: GO 39664
39782: POP
39783: POP
// if not list then
39784: LD_VAR 0 13
39788: NOT
39789: IFFALSE 39793
// exit ;
39791: GO 40037
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39793: LD_ADDR_VAR 0 13
39797: PUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: LD_VAR 0 13
39807: PPUSH
39808: LD_INT 1
39810: PPUSH
39811: LD_INT 1
39813: PPUSH
39814: CALL 48813 0 4
39818: ST_TO_ADDR
// ComStop ( flame ) ;
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 141
// for i in list do
39828: LD_ADDR_VAR 0 6
39832: PUSH
39833: LD_VAR 0 13
39837: PUSH
39838: FOR_IN
39839: IFFALSE 39870
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39841: LD_VAR 0 1
39845: PPUSH
39846: LD_VAR 0 6
39850: PUSH
39851: LD_INT 1
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 6
39859: PUSH
39860: LD_INT 2
39862: ARRAY
39863: PPUSH
39864: CALL_OW 176
39868: GO 39838
39870: POP
39871: POP
// repeat wait ( 0 0$1 ) ;
39872: LD_INT 35
39874: PPUSH
39875: CALL_OW 67
// task := GetTaskList ( flame ) ;
39879: LD_ADDR_VAR 0 14
39883: PUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 437
39893: ST_TO_ADDR
// if not task then
39894: LD_VAR 0 14
39898: NOT
39899: IFFALSE 39903
// exit ;
39901: GO 40037
// if task [ 1 ] [ 1 ] <> | then
39903: LD_VAR 0 14
39907: PUSH
39908: LD_INT 1
39910: ARRAY
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PUSH
39916: LD_STRING |
39918: NONEQUAL
39919: IFFALSE 39923
// exit ;
39921: GO 40037
// _x := task [ 1 ] [ 2 ] ;
39923: LD_ADDR_VAR 0 11
39927: PUSH
39928: LD_VAR 0 14
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PUSH
39937: LD_INT 2
39939: ARRAY
39940: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39941: LD_ADDR_VAR 0 12
39945: PUSH
39946: LD_VAR 0 14
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PUSH
39955: LD_INT 3
39957: ARRAY
39958: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39959: LD_VAR 0 11
39963: PPUSH
39964: LD_VAR 0 12
39968: PPUSH
39969: CALL_OW 351
39973: NOT
39974: PUSH
39975: LD_VAR 0 11
39979: PPUSH
39980: LD_VAR 0 12
39984: PPUSH
39985: CALL_OW 554
39989: NOT
39990: OR
39991: IFFALSE 40025
// begin task := Delete ( task , 1 ) ;
39993: LD_ADDR_VAR 0 14
39997: PUSH
39998: LD_VAR 0 14
40002: PPUSH
40003: LD_INT 1
40005: PPUSH
40006: CALL_OW 3
40010: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 14
40020: PPUSH
40021: CALL_OW 446
// end ; until not HasTask ( flame ) ;
40025: LD_VAR 0 1
40029: PPUSH
40030: CALL_OW 314
40034: NOT
40035: IFFALSE 39872
// end ;
40037: LD_VAR 0 5
40041: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40042: LD_EXP 113
40046: NOT
40047: IFFALSE 40097
40049: GO 40051
40051: DISABLE
// begin initHack := true ;
40052: LD_ADDR_EXP 113
40056: PUSH
40057: LD_INT 1
40059: ST_TO_ADDR
// hackTanks := [ ] ;
40060: LD_ADDR_EXP 114
40064: PUSH
40065: EMPTY
40066: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40067: LD_ADDR_EXP 115
40071: PUSH
40072: EMPTY
40073: ST_TO_ADDR
// hackLimit := 3 ;
40074: LD_ADDR_EXP 116
40078: PUSH
40079: LD_INT 3
40081: ST_TO_ADDR
// hackDist := 12 ;
40082: LD_ADDR_EXP 117
40086: PUSH
40087: LD_INT 12
40089: ST_TO_ADDR
// hackCounter := [ ] ;
40090: LD_ADDR_EXP 118
40094: PUSH
40095: EMPTY
40096: ST_TO_ADDR
// end ;
40097: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40098: LD_EXP 113
40102: PUSH
40103: LD_INT 34
40105: PUSH
40106: LD_INT 99
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PPUSH
40113: CALL_OW 69
40117: AND
40118: IFFALSE 40371
40120: GO 40122
40122: DISABLE
40123: LD_INT 0
40125: PPUSH
40126: PPUSH
// begin enable ;
40127: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40128: LD_ADDR_VAR 0 1
40132: PUSH
40133: LD_INT 34
40135: PUSH
40136: LD_INT 99
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 69
40147: PUSH
40148: FOR_IN
40149: IFFALSE 40369
// begin if not i in hackTanks then
40151: LD_VAR 0 1
40155: PUSH
40156: LD_EXP 114
40160: IN
40161: NOT
40162: IFFALSE 40245
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40164: LD_ADDR_EXP 114
40168: PUSH
40169: LD_EXP 114
40173: PPUSH
40174: LD_EXP 114
40178: PUSH
40179: LD_INT 1
40181: PLUS
40182: PPUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 1
40192: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40193: LD_ADDR_EXP 115
40197: PUSH
40198: LD_EXP 115
40202: PPUSH
40203: LD_EXP 115
40207: PUSH
40208: LD_INT 1
40210: PLUS
40211: PPUSH
40212: EMPTY
40213: PPUSH
40214: CALL_OW 1
40218: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40219: LD_ADDR_EXP 118
40223: PUSH
40224: LD_EXP 118
40228: PPUSH
40229: LD_EXP 118
40233: PUSH
40234: LD_INT 1
40236: PLUS
40237: PPUSH
40238: EMPTY
40239: PPUSH
40240: CALL_OW 1
40244: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 302
40254: NOT
40255: IFFALSE 40268
// begin HackUnlinkAll ( i ) ;
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL 40374 0 1
// continue ;
40266: GO 40148
// end ; HackCheckCapturedStatus ( i ) ;
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL 40817 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40277: LD_ADDR_VAR 0 2
40281: PUSH
40282: LD_INT 81
40284: PUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 255
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 33
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 91
40311: PUSH
40312: LD_VAR 0 1
40316: PUSH
40317: LD_EXP 117
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 50
40329: PUSH
40330: EMPTY
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: PPUSH
40339: CALL_OW 69
40343: ST_TO_ADDR
// if not tmp then
40344: LD_VAR 0 2
40348: NOT
40349: IFFALSE 40353
// continue ;
40351: GO 40148
// HackLink ( i , tmp ) ;
40353: LD_VAR 0 1
40357: PPUSH
40358: LD_VAR 0 2
40362: PPUSH
40363: CALL 40510 0 2
// end ;
40367: GO 40148
40369: POP
40370: POP
// end ;
40371: PPOPN 2
40373: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40374: LD_INT 0
40376: PPUSH
40377: PPUSH
40378: PPUSH
// if not hack in hackTanks then
40379: LD_VAR 0 1
40383: PUSH
40384: LD_EXP 114
40388: IN
40389: NOT
40390: IFFALSE 40394
// exit ;
40392: GO 40505
// index := GetElementIndex ( hackTanks , hack ) ;
40394: LD_ADDR_VAR 0 4
40398: PUSH
40399: LD_EXP 114
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL 48110 0 2
40413: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40414: LD_EXP 115
40418: PUSH
40419: LD_VAR 0 4
40423: ARRAY
40424: IFFALSE 40505
// begin for i in hackTanksCaptured [ index ] do
40426: LD_ADDR_VAR 0 3
40430: PUSH
40431: LD_EXP 115
40435: PUSH
40436: LD_VAR 0 4
40440: ARRAY
40441: PUSH
40442: FOR_IN
40443: IFFALSE 40469
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40445: LD_VAR 0 3
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PPUSH
40454: LD_VAR 0 3
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: PPUSH
40463: CALL_OW 235
40467: GO 40442
40469: POP
40470: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40471: LD_ADDR_EXP 115
40475: PUSH
40476: LD_EXP 115
40480: PPUSH
40481: LD_VAR 0 4
40485: PPUSH
40486: EMPTY
40487: PPUSH
40488: CALL_OW 1
40492: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40493: LD_VAR 0 1
40497: PPUSH
40498: LD_INT 0
40500: PPUSH
40501: CALL_OW 505
// end ; end ;
40505: LD_VAR 0 2
40509: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40510: LD_INT 0
40512: PPUSH
40513: PPUSH
40514: PPUSH
// if not hack in hackTanks or not vehicles then
40515: LD_VAR 0 1
40519: PUSH
40520: LD_EXP 114
40524: IN
40525: NOT
40526: PUSH
40527: LD_VAR 0 2
40531: NOT
40532: OR
40533: IFFALSE 40537
// exit ;
40535: GO 40812
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40537: LD_ADDR_VAR 0 2
40541: PUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: LD_INT 1
40554: PPUSH
40555: LD_INT 1
40557: PPUSH
40558: CALL 48760 0 4
40562: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40563: LD_ADDR_VAR 0 5
40567: PUSH
40568: LD_EXP 114
40572: PPUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: CALL 48110 0 2
40582: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40583: LD_EXP 115
40587: PUSH
40588: LD_VAR 0 5
40592: ARRAY
40593: PUSH
40594: LD_EXP 116
40598: LESS
40599: IFFALSE 40788
// begin for i := 1 to vehicles do
40601: LD_ADDR_VAR 0 4
40605: PUSH
40606: DOUBLE
40607: LD_INT 1
40609: DEC
40610: ST_TO_ADDR
40611: LD_VAR 0 2
40615: PUSH
40616: FOR_TO
40617: IFFALSE 40786
// begin if hackTanksCaptured [ index ] = hackLimit then
40619: LD_EXP 115
40623: PUSH
40624: LD_VAR 0 5
40628: ARRAY
40629: PUSH
40630: LD_EXP 116
40634: EQUAL
40635: IFFALSE 40639
// break ;
40637: GO 40786
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40639: LD_ADDR_EXP 118
40643: PUSH
40644: LD_EXP 118
40648: PPUSH
40649: LD_VAR 0 5
40653: PPUSH
40654: LD_EXP 118
40658: PUSH
40659: LD_VAR 0 5
40663: ARRAY
40664: PUSH
40665: LD_INT 1
40667: PLUS
40668: PPUSH
40669: CALL_OW 1
40673: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40674: LD_ADDR_EXP 115
40678: PUSH
40679: LD_EXP 115
40683: PPUSH
40684: LD_VAR 0 5
40688: PUSH
40689: LD_EXP 115
40693: PUSH
40694: LD_VAR 0 5
40698: ARRAY
40699: PUSH
40700: LD_INT 1
40702: PLUS
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: LD_VAR 0 2
40712: PUSH
40713: LD_VAR 0 4
40717: ARRAY
40718: PUSH
40719: LD_VAR 0 2
40723: PUSH
40724: LD_VAR 0 4
40728: ARRAY
40729: PPUSH
40730: CALL_OW 255
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PPUSH
40739: CALL 48325 0 3
40743: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40744: LD_VAR 0 2
40748: PUSH
40749: LD_VAR 0 4
40753: ARRAY
40754: PPUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 255
40764: PPUSH
40765: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40769: LD_VAR 0 2
40773: PUSH
40774: LD_VAR 0 4
40778: ARRAY
40779: PPUSH
40780: CALL_OW 141
// end ;
40784: GO 40616
40786: POP
40787: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_EXP 115
40797: PUSH
40798: LD_VAR 0 5
40802: ARRAY
40803: PUSH
40804: LD_INT 0
40806: PLUS
40807: PPUSH
40808: CALL_OW 505
// end ;
40812: LD_VAR 0 3
40816: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40817: LD_INT 0
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
// if not hack in hackTanks then
40823: LD_VAR 0 1
40827: PUSH
40828: LD_EXP 114
40832: IN
40833: NOT
40834: IFFALSE 40838
// exit ;
40836: GO 41078
// index := GetElementIndex ( hackTanks , hack ) ;
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_EXP 114
40847: PPUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL 48110 0 2
40857: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40858: LD_ADDR_VAR 0 3
40862: PUSH
40863: DOUBLE
40864: LD_EXP 115
40868: PUSH
40869: LD_VAR 0 4
40873: ARRAY
40874: INC
40875: ST_TO_ADDR
40876: LD_INT 1
40878: PUSH
40879: FOR_DOWNTO
40880: IFFALSE 41052
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40882: LD_ADDR_VAR 0 5
40886: PUSH
40887: LD_EXP 115
40891: PUSH
40892: LD_VAR 0 4
40896: ARRAY
40897: PUSH
40898: LD_VAR 0 3
40902: ARRAY
40903: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40904: LD_VAR 0 5
40908: PUSH
40909: LD_INT 1
40911: ARRAY
40912: PPUSH
40913: CALL_OW 302
40917: NOT
40918: PUSH
40919: LD_VAR 0 5
40923: PUSH
40924: LD_INT 1
40926: ARRAY
40927: PPUSH
40928: CALL_OW 255
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 255
40942: NONEQUAL
40943: OR
40944: IFFALSE 41050
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40946: LD_VAR 0 5
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PPUSH
40955: CALL_OW 305
40959: PUSH
40960: LD_VAR 0 5
40964: PUSH
40965: LD_INT 1
40967: ARRAY
40968: PPUSH
40969: CALL_OW 255
40973: PUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: CALL_OW 255
40983: EQUAL
40984: AND
40985: IFFALSE 41009
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40987: LD_VAR 0 5
40991: PUSH
40992: LD_INT 1
40994: ARRAY
40995: PPUSH
40996: LD_VAR 0 5
41000: PUSH
41001: LD_INT 2
41003: ARRAY
41004: PPUSH
41005: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41009: LD_ADDR_EXP 115
41013: PUSH
41014: LD_EXP 115
41018: PPUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: LD_EXP 115
41028: PUSH
41029: LD_VAR 0 4
41033: ARRAY
41034: PPUSH
41035: LD_VAR 0 3
41039: PPUSH
41040: CALL_OW 3
41044: PPUSH
41045: CALL_OW 1
41049: ST_TO_ADDR
// end ; end ;
41050: GO 40879
41052: POP
41053: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41054: LD_VAR 0 1
41058: PPUSH
41059: LD_EXP 115
41063: PUSH
41064: LD_VAR 0 4
41068: ARRAY
41069: PUSH
41070: LD_INT 0
41072: PLUS
41073: PPUSH
41074: CALL_OW 505
// end ;
41078: LD_VAR 0 2
41082: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41083: LD_INT 0
41085: PPUSH
41086: PPUSH
41087: PPUSH
41088: PPUSH
// if not hack in hackTanks then
41089: LD_VAR 0 1
41093: PUSH
41094: LD_EXP 114
41098: IN
41099: NOT
41100: IFFALSE 41104
// exit ;
41102: GO 41189
// index := GetElementIndex ( hackTanks , hack ) ;
41104: LD_ADDR_VAR 0 5
41108: PUSH
41109: LD_EXP 114
41113: PPUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: CALL 48110 0 2
41123: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41124: LD_ADDR_VAR 0 4
41128: PUSH
41129: DOUBLE
41130: LD_INT 1
41132: DEC
41133: ST_TO_ADDR
41134: LD_EXP 115
41138: PUSH
41139: LD_VAR 0 5
41143: ARRAY
41144: PUSH
41145: FOR_TO
41146: IFFALSE 41187
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41148: LD_EXP 115
41152: PUSH
41153: LD_VAR 0 5
41157: ARRAY
41158: PUSH
41159: LD_VAR 0 4
41163: ARRAY
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PUSH
41169: LD_VAR 0 2
41173: EQUAL
41174: IFFALSE 41185
// KillUnit ( vehicle ) ;
41176: LD_VAR 0 2
41180: PPUSH
41181: CALL_OW 66
41185: GO 41145
41187: POP
41188: POP
// end ;
41189: LD_VAR 0 3
41193: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
41194: LD_EXP 119
41198: NOT
41199: IFFALSE 41234
41201: GO 41203
41203: DISABLE
// begin initMiner := true ;
41204: LD_ADDR_EXP 119
41208: PUSH
41209: LD_INT 1
41211: ST_TO_ADDR
// minersList := [ ] ;
41212: LD_ADDR_EXP 120
41216: PUSH
41217: EMPTY
41218: ST_TO_ADDR
// minerMinesList := [ ] ;
41219: LD_ADDR_EXP 121
41223: PUSH
41224: EMPTY
41225: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
41226: LD_ADDR_EXP 122
41230: PUSH
41231: LD_INT 5
41233: ST_TO_ADDR
// end ;
41234: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
41235: LD_EXP 119
41239: PUSH
41240: LD_INT 34
41242: PUSH
41243: LD_INT 81
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: CALL_OW 69
41254: AND
41255: IFFALSE 41716
41257: GO 41259
41259: DISABLE
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
// begin enable ;
41266: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41267: LD_ADDR_VAR 0 1
41271: PUSH
41272: LD_INT 34
41274: PUSH
41275: LD_INT 81
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PPUSH
41282: CALL_OW 69
41286: PUSH
41287: FOR_IN
41288: IFFALSE 41360
// begin if not i in minersList then
41290: LD_VAR 0 1
41294: PUSH
41295: LD_EXP 120
41299: IN
41300: NOT
41301: IFFALSE 41358
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41303: LD_ADDR_EXP 120
41307: PUSH
41308: LD_EXP 120
41312: PPUSH
41313: LD_EXP 120
41317: PUSH
41318: LD_INT 1
41320: PLUS
41321: PPUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 1
41331: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41332: LD_ADDR_EXP 121
41336: PUSH
41337: LD_EXP 121
41341: PPUSH
41342: LD_EXP 121
41346: PUSH
41347: LD_INT 1
41349: PLUS
41350: PPUSH
41351: EMPTY
41352: PPUSH
41353: CALL_OW 1
41357: ST_TO_ADDR
// end end ;
41358: GO 41287
41360: POP
41361: POP
// for i := minerMinesList downto 1 do
41362: LD_ADDR_VAR 0 1
41366: PUSH
41367: DOUBLE
41368: LD_EXP 121
41372: INC
41373: ST_TO_ADDR
41374: LD_INT 1
41376: PUSH
41377: FOR_DOWNTO
41378: IFFALSE 41714
// begin if IsLive ( minersList [ i ] ) then
41380: LD_EXP 120
41384: PUSH
41385: LD_VAR 0 1
41389: ARRAY
41390: PPUSH
41391: CALL_OW 300
41395: IFFALSE 41423
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
41397: LD_EXP 120
41401: PUSH
41402: LD_VAR 0 1
41406: ARRAY
41407: PPUSH
41408: LD_EXP 121
41412: PUSH
41413: LD_VAR 0 1
41417: ARRAY
41418: PPUSH
41419: CALL_OW 505
// if not minerMinesList [ i ] then
41423: LD_EXP 121
41427: PUSH
41428: LD_VAR 0 1
41432: ARRAY
41433: NOT
41434: IFFALSE 41438
// continue ;
41436: GO 41377
// for j := minerMinesList [ i ] downto 1 do
41438: LD_ADDR_VAR 0 2
41442: PUSH
41443: DOUBLE
41444: LD_EXP 121
41448: PUSH
41449: LD_VAR 0 1
41453: ARRAY
41454: INC
41455: ST_TO_ADDR
41456: LD_INT 1
41458: PUSH
41459: FOR_DOWNTO
41460: IFFALSE 41710
// begin side := GetSide ( minersList [ i ] ) ;
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_EXP 120
41471: PUSH
41472: LD_VAR 0 1
41476: ARRAY
41477: PPUSH
41478: CALL_OW 255
41482: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
41483: LD_ADDR_VAR 0 4
41487: PUSH
41488: LD_EXP 121
41492: PUSH
41493: LD_VAR 0 1
41497: ARRAY
41498: PUSH
41499: LD_VAR 0 2
41503: ARRAY
41504: PUSH
41505: LD_INT 1
41507: ARRAY
41508: PPUSH
41509: LD_EXP 121
41513: PUSH
41514: LD_VAR 0 1
41518: ARRAY
41519: PUSH
41520: LD_VAR 0 2
41524: ARRAY
41525: PUSH
41526: LD_INT 2
41528: ARRAY
41529: PPUSH
41530: CALL_OW 428
41534: ST_TO_ADDR
// if not tmp then
41535: LD_VAR 0 4
41539: NOT
41540: IFFALSE 41544
// continue ;
41542: GO 41459
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41544: LD_VAR 0 4
41548: PUSH
41549: LD_INT 81
41551: PUSH
41552: LD_VAR 0 3
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PPUSH
41561: CALL_OW 69
41565: IN
41566: PUSH
41567: LD_EXP 121
41571: PUSH
41572: LD_VAR 0 1
41576: ARRAY
41577: PUSH
41578: LD_VAR 0 2
41582: ARRAY
41583: PUSH
41584: LD_INT 1
41586: ARRAY
41587: PPUSH
41588: LD_EXP 121
41592: PUSH
41593: LD_VAR 0 1
41597: ARRAY
41598: PUSH
41599: LD_VAR 0 2
41603: ARRAY
41604: PUSH
41605: LD_INT 2
41607: ARRAY
41608: PPUSH
41609: CALL_OW 458
41613: AND
41614: IFFALSE 41708
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41616: LD_EXP 121
41620: PUSH
41621: LD_VAR 0 1
41625: ARRAY
41626: PUSH
41627: LD_VAR 0 2
41631: ARRAY
41632: PUSH
41633: LD_INT 1
41635: ARRAY
41636: PPUSH
41637: LD_EXP 121
41641: PUSH
41642: LD_VAR 0 1
41646: ARRAY
41647: PUSH
41648: LD_VAR 0 2
41652: ARRAY
41653: PUSH
41654: LD_INT 2
41656: ARRAY
41657: PPUSH
41658: LD_VAR 0 3
41662: PPUSH
41663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41667: LD_ADDR_EXP 121
41671: PUSH
41672: LD_EXP 121
41676: PPUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: LD_EXP 121
41686: PUSH
41687: LD_VAR 0 1
41691: ARRAY
41692: PPUSH
41693: LD_VAR 0 2
41697: PPUSH
41698: CALL_OW 3
41702: PPUSH
41703: CALL_OW 1
41707: ST_TO_ADDR
// end ; end ;
41708: GO 41459
41710: POP
41711: POP
// end ;
41712: GO 41377
41714: POP
41715: POP
// end ;
41716: PPOPN 4
41718: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41719: LD_INT 0
41721: PPUSH
41722: PPUSH
// result := false ;
41723: LD_ADDR_VAR 0 4
41727: PUSH
41728: LD_INT 0
41730: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 264
41740: PUSH
41741: LD_INT 81
41743: EQUAL
41744: NOT
41745: IFFALSE 41749
// exit ;
41747: GO 41989
// index := GetElementIndex ( minersList , unit ) ;
41749: LD_ADDR_VAR 0 5
41753: PUSH
41754: LD_EXP 120
41758: PPUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL 48110 0 2
41768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41769: LD_EXP 121
41773: PUSH
41774: LD_VAR 0 5
41778: ARRAY
41779: PUSH
41780: LD_EXP 122
41784: GREATEREQUAL
41785: IFFALSE 41789
// exit ;
41787: GO 41989
// ComMoveXY ( unit , x , y ) ;
41789: LD_VAR 0 1
41793: PPUSH
41794: LD_VAR 0 2
41798: PPUSH
41799: LD_VAR 0 3
41803: PPUSH
41804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41808: LD_INT 35
41810: PPUSH
41811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41815: LD_VAR 0 1
41819: PPUSH
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL 79871 0 3
41834: NOT
41835: PUSH
41836: LD_VAR 0 1
41840: PPUSH
41841: CALL_OW 314
41845: AND
41846: IFFALSE 41850
// exit ;
41848: GO 41989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41850: LD_VAR 0 2
41854: PPUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: CALL_OW 428
41864: PUSH
41865: LD_VAR 0 1
41869: EQUAL
41870: PUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 314
41880: NOT
41881: AND
41882: IFFALSE 41808
// PlaySoundXY ( x , y , PlantMine ) ;
41884: LD_VAR 0 2
41888: PPUSH
41889: LD_VAR 0 3
41893: PPUSH
41894: LD_STRING PlantMine
41896: PPUSH
41897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41901: LD_VAR 0 2
41905: PPUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 255
41920: PPUSH
41921: LD_INT 0
41923: PPUSH
41924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41928: LD_ADDR_EXP 121
41932: PUSH
41933: LD_EXP 121
41937: PPUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_EXP 121
41947: PUSH
41948: LD_VAR 0 5
41952: ARRAY
41953: PUSH
41954: LD_INT 1
41956: PLUS
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PPUSH
41962: LD_VAR 0 2
41966: PUSH
41967: LD_VAR 0 3
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL 48325 0 3
41980: ST_TO_ADDR
// result := true ;
41981: LD_ADDR_VAR 0 4
41985: PUSH
41986: LD_INT 1
41988: ST_TO_ADDR
// end ;
41989: LD_VAR 0 4
41993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
41998: PPUSH
// if not unit in minersList then
41999: LD_VAR 0 1
42003: PUSH
42004: LD_EXP 120
42008: IN
42009: NOT
42010: IFFALSE 42014
// exit ;
42012: GO 42406
// index := GetElementIndex ( minersList , unit ) ;
42014: LD_ADDR_VAR 0 6
42018: PUSH
42019: LD_EXP 120
42023: PPUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL 48110 0 2
42033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: DOUBLE
42040: LD_EXP 121
42044: PUSH
42045: LD_VAR 0 6
42049: ARRAY
42050: INC
42051: ST_TO_ADDR
42052: LD_INT 1
42054: PUSH
42055: FOR_DOWNTO
42056: IFFALSE 42217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42058: LD_EXP 121
42062: PUSH
42063: LD_VAR 0 6
42067: ARRAY
42068: PUSH
42069: LD_VAR 0 5
42073: ARRAY
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: PUSH
42079: LD_VAR 0 2
42083: EQUAL
42084: PUSH
42085: LD_EXP 121
42089: PUSH
42090: LD_VAR 0 6
42094: ARRAY
42095: PUSH
42096: LD_VAR 0 5
42100: ARRAY
42101: PUSH
42102: LD_INT 2
42104: ARRAY
42105: PUSH
42106: LD_VAR 0 3
42110: EQUAL
42111: AND
42112: IFFALSE 42215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42114: LD_EXP 121
42118: PUSH
42119: LD_VAR 0 6
42123: ARRAY
42124: PUSH
42125: LD_VAR 0 5
42129: ARRAY
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: PPUSH
42135: LD_EXP 121
42139: PUSH
42140: LD_VAR 0 6
42144: ARRAY
42145: PUSH
42146: LD_VAR 0 5
42150: ARRAY
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PPUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 255
42165: PPUSH
42166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42170: LD_ADDR_EXP 121
42174: PUSH
42175: LD_EXP 121
42179: PPUSH
42180: LD_VAR 0 6
42184: PPUSH
42185: LD_EXP 121
42189: PUSH
42190: LD_VAR 0 6
42194: ARRAY
42195: PPUSH
42196: LD_VAR 0 5
42200: PPUSH
42201: CALL_OW 3
42205: PPUSH
42206: CALL_OW 1
42210: ST_TO_ADDR
// exit ;
42211: POP
42212: POP
42213: GO 42406
// end ; end ;
42215: GO 42055
42217: POP
42218: POP
// for i := minerMinesList [ index ] downto 1 do
42219: LD_ADDR_VAR 0 5
42223: PUSH
42224: DOUBLE
42225: LD_EXP 121
42229: PUSH
42230: LD_VAR 0 6
42234: ARRAY
42235: INC
42236: ST_TO_ADDR
42237: LD_INT 1
42239: PUSH
42240: FOR_DOWNTO
42241: IFFALSE 42404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42243: LD_EXP 121
42247: PUSH
42248: LD_VAR 0 6
42252: ARRAY
42253: PUSH
42254: LD_VAR 0 5
42258: ARRAY
42259: PUSH
42260: LD_INT 1
42262: ARRAY
42263: PPUSH
42264: LD_EXP 121
42268: PUSH
42269: LD_VAR 0 6
42273: ARRAY
42274: PUSH
42275: LD_VAR 0 5
42279: ARRAY
42280: PUSH
42281: LD_INT 2
42283: ARRAY
42284: PPUSH
42285: LD_VAR 0 2
42289: PPUSH
42290: LD_VAR 0 3
42294: PPUSH
42295: CALL_OW 298
42299: PUSH
42300: LD_INT 6
42302: LESS
42303: IFFALSE 42402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42305: LD_EXP 121
42309: PUSH
42310: LD_VAR 0 6
42314: ARRAY
42315: PUSH
42316: LD_VAR 0 5
42320: ARRAY
42321: PUSH
42322: LD_INT 1
42324: ARRAY
42325: PPUSH
42326: LD_EXP 121
42330: PUSH
42331: LD_VAR 0 6
42335: ARRAY
42336: PUSH
42337: LD_VAR 0 5
42341: ARRAY
42342: PUSH
42343: LD_INT 2
42345: ARRAY
42346: PPUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: CALL_OW 255
42356: PPUSH
42357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42361: LD_ADDR_EXP 121
42365: PUSH
42366: LD_EXP 121
42370: PPUSH
42371: LD_VAR 0 6
42375: PPUSH
42376: LD_EXP 121
42380: PUSH
42381: LD_VAR 0 6
42385: ARRAY
42386: PPUSH
42387: LD_VAR 0 5
42391: PPUSH
42392: CALL_OW 3
42396: PPUSH
42397: CALL_OW 1
42401: ST_TO_ADDR
// end ; end ;
42402: GO 42240
42404: POP
42405: POP
// end ;
42406: LD_VAR 0 4
42410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
42411: LD_INT 0
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 264
42431: PUSH
42432: LD_INT 81
42434: EQUAL
42435: NOT
42436: PUSH
42437: LD_VAR 0 1
42441: PUSH
42442: LD_EXP 120
42446: IN
42447: NOT
42448: OR
42449: IFFALSE 42453
// exit ;
42451: GO 42775
// index := GetElementIndex ( minersList , unit ) ;
42453: LD_ADDR_VAR 0 6
42457: PUSH
42458: LD_EXP 120
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL 48110 0 2
42472: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
42473: LD_ADDR_VAR 0 8
42477: PUSH
42478: LD_EXP 122
42482: PUSH
42483: LD_EXP 121
42487: PUSH
42488: LD_VAR 0 6
42492: ARRAY
42493: MINUS
42494: ST_TO_ADDR
// if not minesFreeAmount then
42495: LD_VAR 0 8
42499: NOT
42500: IFFALSE 42504
// exit ;
42502: GO 42775
// tmp := [ ] ;
42504: LD_ADDR_VAR 0 7
42508: PUSH
42509: EMPTY
42510: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42511: LD_ADDR_VAR 0 5
42515: PUSH
42516: DOUBLE
42517: LD_INT 1
42519: DEC
42520: ST_TO_ADDR
42521: LD_VAR 0 8
42525: PUSH
42526: FOR_TO
42527: IFFALSE 42722
// begin _d := rand ( 0 , 5 ) ;
42529: LD_ADDR_VAR 0 11
42533: PUSH
42534: LD_INT 0
42536: PPUSH
42537: LD_INT 5
42539: PPUSH
42540: CALL_OW 12
42544: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42545: LD_ADDR_VAR 0 12
42549: PUSH
42550: LD_INT 2
42552: PPUSH
42553: LD_INT 6
42555: PPUSH
42556: CALL_OW 12
42560: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42561: LD_ADDR_VAR 0 9
42565: PUSH
42566: LD_VAR 0 2
42570: PPUSH
42571: LD_VAR 0 11
42575: PPUSH
42576: LD_VAR 0 12
42580: PPUSH
42581: CALL_OW 272
42585: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42586: LD_ADDR_VAR 0 10
42590: PUSH
42591: LD_VAR 0 3
42595: PPUSH
42596: LD_VAR 0 11
42600: PPUSH
42601: LD_VAR 0 12
42605: PPUSH
42606: CALL_OW 273
42610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42611: LD_VAR 0 9
42615: PPUSH
42616: LD_VAR 0 10
42620: PPUSH
42621: CALL_OW 488
42625: PUSH
42626: LD_VAR 0 9
42630: PUSH
42631: LD_VAR 0 10
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_VAR 0 7
42644: IN
42645: NOT
42646: AND
42647: PUSH
42648: LD_VAR 0 9
42652: PPUSH
42653: LD_VAR 0 10
42657: PPUSH
42658: CALL_OW 458
42662: NOT
42663: AND
42664: IFFALSE 42706
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42666: LD_ADDR_VAR 0 7
42670: PUSH
42671: LD_VAR 0 7
42675: PPUSH
42676: LD_VAR 0 7
42680: PUSH
42681: LD_INT 1
42683: PLUS
42684: PPUSH
42685: LD_VAR 0 9
42689: PUSH
42690: LD_VAR 0 10
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PPUSH
42699: CALL_OW 1
42703: ST_TO_ADDR
42704: GO 42720
// i := i - 1 ;
42706: LD_ADDR_VAR 0 5
42710: PUSH
42711: LD_VAR 0 5
42715: PUSH
42716: LD_INT 1
42718: MINUS
42719: ST_TO_ADDR
// end ;
42720: GO 42526
42722: POP
42723: POP
// for i in tmp do
42724: LD_ADDR_VAR 0 5
42728: PUSH
42729: LD_VAR 0 7
42733: PUSH
42734: FOR_IN
42735: IFFALSE 42773
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42737: LD_VAR 0 1
42741: PPUSH
42742: LD_VAR 0 5
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PPUSH
42751: LD_VAR 0 5
42755: PUSH
42756: LD_INT 2
42758: ARRAY
42759: PPUSH
42760: CALL 41719 0 3
42764: NOT
42765: IFFALSE 42771
// exit ;
42767: POP
42768: POP
42769: GO 42775
42771: GO 42734
42773: POP
42774: POP
// end ;
42775: LD_VAR 0 4
42779: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
42780: LD_INT 0
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
// if GetClass ( unit ) <> class_sniper then
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 257
42800: PUSH
42801: LD_INT 5
42803: NONEQUAL
42804: IFFALSE 42808
// exit ;
42806: GO 43274
// dist := 8 ;
42808: LD_ADDR_VAR 0 5
42812: PUSH
42813: LD_INT 8
42815: ST_TO_ADDR
// viewRange := 12 ;
42816: LD_ADDR_VAR 0 8
42820: PUSH
42821: LD_INT 12
42823: ST_TO_ADDR
// side := GetSide ( unit ) ;
42824: LD_ADDR_VAR 0 6
42828: PUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: CALL_OW 255
42838: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42839: LD_INT 61
42841: PPUSH
42842: LD_VAR 0 6
42846: PPUSH
42847: CALL_OW 321
42851: PUSH
42852: LD_INT 2
42854: EQUAL
42855: IFFALSE 42865
// viewRange := 16 ;
42857: LD_ADDR_VAR 0 8
42861: PUSH
42862: LD_INT 16
42864: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42865: LD_VAR 0 1
42869: PPUSH
42870: LD_VAR 0 2
42874: PPUSH
42875: LD_VAR 0 3
42879: PPUSH
42880: CALL_OW 297
42884: PUSH
42885: LD_VAR 0 5
42889: GREATER
42890: IFFALSE 42969
// begin ComMoveXY ( unit , x , y ) ;
42892: LD_VAR 0 1
42896: PPUSH
42897: LD_VAR 0 2
42901: PPUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42911: LD_INT 35
42913: PPUSH
42914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42918: LD_VAR 0 1
42922: PPUSH
42923: LD_VAR 0 2
42927: PPUSH
42928: LD_VAR 0 3
42932: PPUSH
42933: CALL 79871 0 3
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 43274
// until GetDistUnitXY ( unit , x , y ) < dist ;
42942: LD_VAR 0 1
42946: PPUSH
42947: LD_VAR 0 2
42951: PPUSH
42952: LD_VAR 0 3
42956: PPUSH
42957: CALL_OW 297
42961: PUSH
42962: LD_VAR 0 5
42966: LESS
42967: IFFALSE 42911
// end ; ComTurnXY ( unit , x , y ) ;
42969: LD_VAR 0 1
42973: PPUSH
42974: LD_VAR 0 2
42978: PPUSH
42979: LD_VAR 0 3
42983: PPUSH
42984: CALL_OW 118
// repeat if Multiplayer then
42988: LD_OWVAR 4
42992: IFFALSE 43003
// wait ( 35 ) else
42994: LD_INT 35
42996: PPUSH
42997: CALL_OW 67
43001: GO 43010
// wait ( 5 ) ;
43003: LD_INT 5
43005: PPUSH
43006: CALL_OW 67
// _d := GetDir ( unit ) ;
43010: LD_ADDR_VAR 0 11
43014: PUSH
43015: LD_VAR 0 1
43019: PPUSH
43020: CALL_OW 254
43024: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
43025: LD_ADDR_VAR 0 7
43029: PUSH
43030: LD_VAR 0 1
43034: PPUSH
43035: CALL_OW 250
43039: PPUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: CALL_OW 251
43049: PPUSH
43050: LD_VAR 0 2
43054: PPUSH
43055: LD_VAR 0 3
43059: PPUSH
43060: CALL 82479 0 4
43064: ST_TO_ADDR
// until dir = _d ;
43065: LD_VAR 0 7
43069: PUSH
43070: LD_VAR 0 11
43074: EQUAL
43075: IFFALSE 42988
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
43077: LD_ADDR_VAR 0 9
43081: PUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 250
43091: PPUSH
43092: LD_VAR 0 7
43096: PPUSH
43097: LD_VAR 0 5
43101: PPUSH
43102: CALL_OW 272
43106: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
43107: LD_ADDR_VAR 0 10
43111: PUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 251
43121: PPUSH
43122: LD_VAR 0 7
43126: PPUSH
43127: LD_VAR 0 5
43131: PPUSH
43132: CALL_OW 273
43136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43137: LD_VAR 0 9
43141: PPUSH
43142: LD_VAR 0 10
43146: PPUSH
43147: CALL_OW 488
43151: NOT
43152: IFFALSE 43156
// exit ;
43154: GO 43274
// ComAnimCustom ( unit , 1 ) ;
43156: LD_VAR 0 1
43160: PPUSH
43161: LD_INT 1
43163: PPUSH
43164: CALL_OW 592
// p := 0 ;
43168: LD_ADDR_VAR 0 12
43172: PUSH
43173: LD_INT 0
43175: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43176: LD_VAR 0 9
43180: PPUSH
43181: LD_VAR 0 10
43185: PPUSH
43186: LD_VAR 0 6
43190: PPUSH
43191: LD_VAR 0 8
43195: PPUSH
43196: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
43200: LD_INT 35
43202: PPUSH
43203: CALL_OW 67
// p := Inc ( p ) ;
43207: LD_ADDR_VAR 0 12
43211: PUSH
43212: LD_VAR 0 12
43216: PPUSH
43217: CALL 82435 0 1
43221: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
43222: LD_VAR 0 12
43226: PUSH
43227: LD_INT 3
43229: EQUAL
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: CALL_OW 302
43240: NOT
43241: OR
43242: PUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 301
43252: OR
43253: IFFALSE 43200
// RemoveSeeing ( _x , _y , side ) ;
43255: LD_VAR 0 9
43259: PPUSH
43260: LD_VAR 0 10
43264: PPUSH
43265: LD_VAR 0 6
43269: PPUSH
43270: CALL_OW 331
// end ; end_of_file
43274: LD_VAR 0 4
43278: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43279: LD_INT 0
43281: PPUSH
43282: PPUSH
// if exist_mode then
43283: LD_VAR 0 2
43287: IFFALSE 43333
// begin unit := CreateCharacter ( prefix & ident ) ;
43289: LD_ADDR_VAR 0 5
43293: PUSH
43294: LD_VAR 0 3
43298: PUSH
43299: LD_VAR 0 1
43303: STR
43304: PPUSH
43305: CALL_OW 34
43309: ST_TO_ADDR
// if unit then
43310: LD_VAR 0 5
43314: IFFALSE 43331
// DeleteCharacters ( prefix & ident ) ;
43316: LD_VAR 0 3
43320: PUSH
43321: LD_VAR 0 1
43325: STR
43326: PPUSH
43327: CALL_OW 40
// end else
43331: GO 43348
// unit := NewCharacter ( ident ) ;
43333: LD_ADDR_VAR 0 5
43337: PUSH
43338: LD_VAR 0 1
43342: PPUSH
43343: CALL_OW 25
43347: ST_TO_ADDR
// result := unit ;
43348: LD_ADDR_VAR 0 4
43352: PUSH
43353: LD_VAR 0 5
43357: ST_TO_ADDR
// end ;
43358: LD_VAR 0 4
43362: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43363: LD_INT 0
43365: PPUSH
43366: PPUSH
// if exist_mode then
43367: LD_VAR 0 2
43371: IFFALSE 43396
// unit := CreateCharacter ( prefix & ident ) else
43373: LD_ADDR_VAR 0 5
43377: PUSH
43378: LD_VAR 0 3
43382: PUSH
43383: LD_VAR 0 1
43387: STR
43388: PPUSH
43389: CALL_OW 34
43393: ST_TO_ADDR
43394: GO 43411
// unit := NewCharacter ( ident ) ;
43396: LD_ADDR_VAR 0 5
43400: PUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 25
43410: ST_TO_ADDR
// result := unit ;
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: LD_VAR 0 5
43420: ST_TO_ADDR
// end ;
43421: LD_VAR 0 4
43425: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43426: LD_INT 0
43428: PPUSH
43429: PPUSH
// if not side or not nation then
43430: LD_VAR 0 1
43434: NOT
43435: PUSH
43436: LD_VAR 0 2
43440: NOT
43441: OR
43442: IFFALSE 43446
// exit ;
43444: GO 44214
// case nation of nation_american :
43446: LD_VAR 0 2
43450: PUSH
43451: LD_INT 1
43453: DOUBLE
43454: EQUAL
43455: IFTRUE 43459
43457: GO 43673
43459: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: LD_INT 35
43467: PUSH
43468: LD_INT 45
43470: PUSH
43471: LD_INT 46
43473: PUSH
43474: LD_INT 47
43476: PUSH
43477: LD_INT 82
43479: PUSH
43480: LD_INT 83
43482: PUSH
43483: LD_INT 84
43485: PUSH
43486: LD_INT 85
43488: PUSH
43489: LD_INT 86
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 6
43500: PUSH
43501: LD_INT 15
43503: PUSH
43504: LD_INT 16
43506: PUSH
43507: LD_INT 7
43509: PUSH
43510: LD_INT 12
43512: PUSH
43513: LD_INT 13
43515: PUSH
43516: LD_INT 10
43518: PUSH
43519: LD_INT 14
43521: PUSH
43522: LD_INT 20
43524: PUSH
43525: LD_INT 21
43527: PUSH
43528: LD_INT 22
43530: PUSH
43531: LD_INT 25
43533: PUSH
43534: LD_INT 32
43536: PUSH
43537: LD_INT 27
43539: PUSH
43540: LD_INT 36
43542: PUSH
43543: LD_INT 69
43545: PUSH
43546: LD_INT 39
43548: PUSH
43549: LD_INT 34
43551: PUSH
43552: LD_INT 40
43554: PUSH
43555: LD_INT 48
43557: PUSH
43558: LD_INT 49
43560: PUSH
43561: LD_INT 50
43563: PUSH
43564: LD_INT 51
43566: PUSH
43567: LD_INT 52
43569: PUSH
43570: LD_INT 53
43572: PUSH
43573: LD_INT 54
43575: PUSH
43576: LD_INT 55
43578: PUSH
43579: LD_INT 56
43581: PUSH
43582: LD_INT 57
43584: PUSH
43585: LD_INT 58
43587: PUSH
43588: LD_INT 59
43590: PUSH
43591: LD_INT 60
43593: PUSH
43594: LD_INT 61
43596: PUSH
43597: LD_INT 62
43599: PUSH
43600: LD_INT 80
43602: PUSH
43603: LD_INT 82
43605: PUSH
43606: LD_INT 83
43608: PUSH
43609: LD_INT 84
43611: PUSH
43612: LD_INT 85
43614: PUSH
43615: LD_INT 86
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
43671: GO 44138
43673: LD_INT 2
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43907
43681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43682: LD_ADDR_VAR 0 4
43686: PUSH
43687: LD_INT 35
43689: PUSH
43690: LD_INT 45
43692: PUSH
43693: LD_INT 46
43695: PUSH
43696: LD_INT 47
43698: PUSH
43699: LD_INT 82
43701: PUSH
43702: LD_INT 83
43704: PUSH
43705: LD_INT 84
43707: PUSH
43708: LD_INT 85
43710: PUSH
43711: LD_INT 87
43713: PUSH
43714: LD_INT 70
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 11
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: LD_INT 5
43731: PUSH
43732: LD_INT 6
43734: PUSH
43735: LD_INT 15
43737: PUSH
43738: LD_INT 18
43740: PUSH
43741: LD_INT 7
43743: PUSH
43744: LD_INT 17
43746: PUSH
43747: LD_INT 8
43749: PUSH
43750: LD_INT 20
43752: PUSH
43753: LD_INT 21
43755: PUSH
43756: LD_INT 22
43758: PUSH
43759: LD_INT 72
43761: PUSH
43762: LD_INT 26
43764: PUSH
43765: LD_INT 69
43767: PUSH
43768: LD_INT 39
43770: PUSH
43771: LD_INT 40
43773: PUSH
43774: LD_INT 41
43776: PUSH
43777: LD_INT 42
43779: PUSH
43780: LD_INT 43
43782: PUSH
43783: LD_INT 48
43785: PUSH
43786: LD_INT 49
43788: PUSH
43789: LD_INT 50
43791: PUSH
43792: LD_INT 51
43794: PUSH
43795: LD_INT 52
43797: PUSH
43798: LD_INT 53
43800: PUSH
43801: LD_INT 54
43803: PUSH
43804: LD_INT 55
43806: PUSH
43807: LD_INT 56
43809: PUSH
43810: LD_INT 60
43812: PUSH
43813: LD_INT 61
43815: PUSH
43816: LD_INT 62
43818: PUSH
43819: LD_INT 66
43821: PUSH
43822: LD_INT 67
43824: PUSH
43825: LD_INT 68
43827: PUSH
43828: LD_INT 81
43830: PUSH
43831: LD_INT 82
43833: PUSH
43834: LD_INT 83
43836: PUSH
43837: LD_INT 84
43839: PUSH
43840: LD_INT 85
43842: PUSH
43843: LD_INT 87
43845: PUSH
43846: LD_INT 88
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
43905: GO 44138
43907: LD_INT 3
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 44137
43915: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43916: LD_ADDR_VAR 0 4
43920: PUSH
43921: LD_INT 46
43923: PUSH
43924: LD_INT 47
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 82
43935: PUSH
43936: LD_INT 83
43938: PUSH
43939: LD_INT 84
43941: PUSH
43942: LD_INT 85
43944: PUSH
43945: LD_INT 86
43947: PUSH
43948: LD_INT 11
43950: PUSH
43951: LD_INT 9
43953: PUSH
43954: LD_INT 20
43956: PUSH
43957: LD_INT 19
43959: PUSH
43960: LD_INT 21
43962: PUSH
43963: LD_INT 24
43965: PUSH
43966: LD_INT 22
43968: PUSH
43969: LD_INT 25
43971: PUSH
43972: LD_INT 28
43974: PUSH
43975: LD_INT 29
43977: PUSH
43978: LD_INT 30
43980: PUSH
43981: LD_INT 31
43983: PUSH
43984: LD_INT 37
43986: PUSH
43987: LD_INT 38
43989: PUSH
43990: LD_INT 32
43992: PUSH
43993: LD_INT 27
43995: PUSH
43996: LD_INT 33
43998: PUSH
43999: LD_INT 69
44001: PUSH
44002: LD_INT 39
44004: PUSH
44005: LD_INT 34
44007: PUSH
44008: LD_INT 40
44010: PUSH
44011: LD_INT 71
44013: PUSH
44014: LD_INT 23
44016: PUSH
44017: LD_INT 44
44019: PUSH
44020: LD_INT 48
44022: PUSH
44023: LD_INT 49
44025: PUSH
44026: LD_INT 50
44028: PUSH
44029: LD_INT 51
44031: PUSH
44032: LD_INT 52
44034: PUSH
44035: LD_INT 53
44037: PUSH
44038: LD_INT 54
44040: PUSH
44041: LD_INT 55
44043: PUSH
44044: LD_INT 56
44046: PUSH
44047: LD_INT 57
44049: PUSH
44050: LD_INT 58
44052: PUSH
44053: LD_INT 59
44055: PUSH
44056: LD_INT 63
44058: PUSH
44059: LD_INT 64
44061: PUSH
44062: LD_INT 65
44064: PUSH
44065: LD_INT 82
44067: PUSH
44068: LD_INT 83
44070: PUSH
44071: LD_INT 84
44073: PUSH
44074: LD_INT 85
44076: PUSH
44077: LD_INT 86
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
44135: GO 44138
44137: POP
// if state > - 1 and state < 3 then
44138: LD_VAR 0 3
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: GREATER
44147: PUSH
44148: LD_VAR 0 3
44152: PUSH
44153: LD_INT 3
44155: LESS
44156: AND
44157: IFFALSE 44214
// for i in result do
44159: LD_ADDR_VAR 0 5
44163: PUSH
44164: LD_VAR 0 4
44168: PUSH
44169: FOR_IN
44170: IFFALSE 44212
// if GetTech ( i , side ) <> state then
44172: LD_VAR 0 5
44176: PPUSH
44177: LD_VAR 0 1
44181: PPUSH
44182: CALL_OW 321
44186: PUSH
44187: LD_VAR 0 3
44191: NONEQUAL
44192: IFFALSE 44210
// result := result diff i ;
44194: LD_ADDR_VAR 0 4
44198: PUSH
44199: LD_VAR 0 4
44203: PUSH
44204: LD_VAR 0 5
44208: DIFF
44209: ST_TO_ADDR
44210: GO 44169
44212: POP
44213: POP
// end ;
44214: LD_VAR 0 4
44218: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44219: LD_INT 0
44221: PPUSH
44222: PPUSH
44223: PPUSH
// result := true ;
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 1
44231: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44232: LD_ADDR_VAR 0 5
44236: PUSH
44237: LD_VAR 0 2
44241: PPUSH
44242: CALL_OW 480
44246: ST_TO_ADDR
// if not tmp then
44247: LD_VAR 0 5
44251: NOT
44252: IFFALSE 44256
// exit ;
44254: GO 44305
// for i in tmp do
44256: LD_ADDR_VAR 0 4
44260: PUSH
44261: LD_VAR 0 5
44265: PUSH
44266: FOR_IN
44267: IFFALSE 44303
// if GetTech ( i , side ) <> state_researched then
44269: LD_VAR 0 4
44273: PPUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 321
44283: PUSH
44284: LD_INT 2
44286: NONEQUAL
44287: IFFALSE 44301
// begin result := false ;
44289: LD_ADDR_VAR 0 3
44293: PUSH
44294: LD_INT 0
44296: ST_TO_ADDR
// exit ;
44297: POP
44298: POP
44299: GO 44305
// end ;
44301: GO 44266
44303: POP
44304: POP
// end ;
44305: LD_VAR 0 3
44309: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44325: LD_VAR 0 1
44329: NOT
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 257
44340: PUSH
44341: LD_INT 9
44343: NONEQUAL
44344: OR
44345: IFFALSE 44349
// exit ;
44347: GO 44922
// side := GetSide ( unit ) ;
44349: LD_ADDR_VAR 0 9
44353: PUSH
44354: LD_VAR 0 1
44358: PPUSH
44359: CALL_OW 255
44363: ST_TO_ADDR
// tech_space := tech_spacanom ;
44364: LD_ADDR_VAR 0 12
44368: PUSH
44369: LD_INT 29
44371: ST_TO_ADDR
// tech_time := tech_taurad ;
44372: LD_ADDR_VAR 0 13
44376: PUSH
44377: LD_INT 28
44379: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44380: LD_ADDR_VAR 0 11
44384: PUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 310
44394: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44395: LD_VAR 0 11
44399: PPUSH
44400: CALL_OW 247
44404: PUSH
44405: LD_INT 2
44407: EQUAL
44408: IFFALSE 44412
// exit ;
44410: GO 44922
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44412: LD_ADDR_VAR 0 8
44416: PUSH
44417: LD_INT 81
44419: PUSH
44420: LD_VAR 0 9
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 21
44434: PUSH
44435: LD_INT 3
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PPUSH
44450: CALL_OW 69
44454: ST_TO_ADDR
// if not tmp then
44455: LD_VAR 0 8
44459: NOT
44460: IFFALSE 44464
// exit ;
44462: GO 44922
// if in_unit then
44464: LD_VAR 0 11
44468: IFFALSE 44492
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44470: LD_ADDR_VAR 0 10
44474: PUSH
44475: LD_VAR 0 8
44479: PPUSH
44480: LD_VAR 0 11
44484: PPUSH
44485: CALL_OW 74
44489: ST_TO_ADDR
44490: GO 44512
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44492: LD_ADDR_VAR 0 10
44496: PUSH
44497: LD_VAR 0 8
44501: PPUSH
44502: LD_VAR 0 1
44506: PPUSH
44507: CALL_OW 74
44511: ST_TO_ADDR
// if not enemy then
44512: LD_VAR 0 10
44516: NOT
44517: IFFALSE 44521
// exit ;
44519: GO 44922
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44521: LD_VAR 0 11
44525: PUSH
44526: LD_VAR 0 11
44530: PPUSH
44531: LD_VAR 0 10
44535: PPUSH
44536: CALL_OW 296
44540: PUSH
44541: LD_INT 13
44543: GREATER
44544: AND
44545: PUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: LD_VAR 0 10
44555: PPUSH
44556: CALL_OW 296
44560: PUSH
44561: LD_INT 12
44563: GREATER
44564: OR
44565: IFFALSE 44569
// exit ;
44567: GO 44922
// missile := [ 1 ] ;
44569: LD_ADDR_VAR 0 14
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44580: LD_VAR 0 9
44584: PPUSH
44585: LD_VAR 0 12
44589: PPUSH
44590: CALL_OW 325
44594: IFFALSE 44623
// missile := Replace ( missile , missile + 1 , 2 ) ;
44596: LD_ADDR_VAR 0 14
44600: PUSH
44601: LD_VAR 0 14
44605: PPUSH
44606: LD_VAR 0 14
44610: PUSH
44611: LD_INT 1
44613: PLUS
44614: PPUSH
44615: LD_INT 2
44617: PPUSH
44618: CALL_OW 1
44622: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44623: LD_VAR 0 9
44627: PPUSH
44628: LD_VAR 0 13
44632: PPUSH
44633: CALL_OW 325
44637: PUSH
44638: LD_VAR 0 10
44642: PPUSH
44643: CALL_OW 255
44647: PPUSH
44648: LD_VAR 0 13
44652: PPUSH
44653: CALL_OW 325
44657: NOT
44658: AND
44659: IFFALSE 44688
// missile := Replace ( missile , missile + 1 , 3 ) ;
44661: LD_ADDR_VAR 0 14
44665: PUSH
44666: LD_VAR 0 14
44670: PPUSH
44671: LD_VAR 0 14
44675: PUSH
44676: LD_INT 1
44678: PLUS
44679: PPUSH
44680: LD_INT 3
44682: PPUSH
44683: CALL_OW 1
44687: ST_TO_ADDR
// if missile < 2 then
44688: LD_VAR 0 14
44692: PUSH
44693: LD_INT 2
44695: LESS
44696: IFFALSE 44700
// exit ;
44698: GO 44922
// x := GetX ( enemy ) ;
44700: LD_ADDR_VAR 0 4
44704: PUSH
44705: LD_VAR 0 10
44709: PPUSH
44710: CALL_OW 250
44714: ST_TO_ADDR
// y := GetY ( enemy ) ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: LD_VAR 0 10
44724: PPUSH
44725: CALL_OW 251
44729: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44730: LD_ADDR_VAR 0 6
44734: PUSH
44735: LD_VAR 0 4
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PPUSH
44744: LD_INT 1
44746: PPUSH
44747: CALL_OW 12
44751: PLUS
44752: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44753: LD_ADDR_VAR 0 7
44757: PUSH
44758: LD_VAR 0 5
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PPUSH
44767: LD_INT 1
44769: PPUSH
44770: CALL_OW 12
44774: PLUS
44775: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44776: LD_VAR 0 6
44780: PPUSH
44781: LD_VAR 0 7
44785: PPUSH
44786: CALL_OW 488
44790: NOT
44791: IFFALSE 44813
// begin _x := x ;
44793: LD_ADDR_VAR 0 6
44797: PUSH
44798: LD_VAR 0 4
44802: ST_TO_ADDR
// _y := y ;
44803: LD_ADDR_VAR 0 7
44807: PUSH
44808: LD_VAR 0 5
44812: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_INT 1
44820: PPUSH
44821: LD_VAR 0 14
44825: PPUSH
44826: CALL_OW 12
44830: ST_TO_ADDR
// case i of 1 :
44831: LD_VAR 0 3
44835: PUSH
44836: LD_INT 1
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44844
44842: GO 44861
44844: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_VAR 0 10
44854: PPUSH
44855: CALL_OW 115
44859: GO 44922
44861: LD_INT 2
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 44891
44869: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44870: LD_VAR 0 1
44874: PPUSH
44875: LD_VAR 0 6
44879: PPUSH
44880: LD_VAR 0 7
44884: PPUSH
44885: CALL_OW 153
44889: GO 44922
44891: LD_INT 3
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44899
44897: GO 44921
44899: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44900: LD_VAR 0 1
44904: PPUSH
44905: LD_VAR 0 6
44909: PPUSH
44910: LD_VAR 0 7
44914: PPUSH
44915: CALL_OW 154
44919: GO 44922
44921: POP
// end ;
44922: LD_VAR 0 2
44926: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44927: LD_INT 0
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
44934: PPUSH
// if not unit or not building then
44935: LD_VAR 0 1
44939: NOT
44940: PUSH
44941: LD_VAR 0 2
44945: NOT
44946: OR
44947: IFFALSE 44951
// exit ;
44949: GO 45109
// x := GetX ( building ) ;
44951: LD_ADDR_VAR 0 5
44955: PUSH
44956: LD_VAR 0 2
44960: PPUSH
44961: CALL_OW 250
44965: ST_TO_ADDR
// y := GetY ( building ) ;
44966: LD_ADDR_VAR 0 6
44970: PUSH
44971: LD_VAR 0 2
44975: PPUSH
44976: CALL_OW 251
44980: ST_TO_ADDR
// for i = 0 to 5 do
44981: LD_ADDR_VAR 0 4
44985: PUSH
44986: DOUBLE
44987: LD_INT 0
44989: DEC
44990: ST_TO_ADDR
44991: LD_INT 5
44993: PUSH
44994: FOR_TO
44995: IFFALSE 45107
// begin _x := ShiftX ( x , i , 3 ) ;
44997: LD_ADDR_VAR 0 7
45001: PUSH
45002: LD_VAR 0 5
45006: PPUSH
45007: LD_VAR 0 4
45011: PPUSH
45012: LD_INT 3
45014: PPUSH
45015: CALL_OW 272
45019: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45020: LD_ADDR_VAR 0 8
45024: PUSH
45025: LD_VAR 0 6
45029: PPUSH
45030: LD_VAR 0 4
45034: PPUSH
45035: LD_INT 3
45037: PPUSH
45038: CALL_OW 273
45042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45043: LD_VAR 0 7
45047: PPUSH
45048: LD_VAR 0 8
45052: PPUSH
45053: CALL_OW 488
45057: NOT
45058: IFFALSE 45062
// continue ;
45060: GO 44994
// if HexInfo ( _x , _y ) = 0 then
45062: LD_VAR 0 7
45066: PPUSH
45067: LD_VAR 0 8
45071: PPUSH
45072: CALL_OW 428
45076: PUSH
45077: LD_INT 0
45079: EQUAL
45080: IFFALSE 45105
// begin ComMoveXY ( unit , _x , _y ) ;
45082: LD_VAR 0 1
45086: PPUSH
45087: LD_VAR 0 7
45091: PPUSH
45092: LD_VAR 0 8
45096: PPUSH
45097: CALL_OW 111
// exit ;
45101: POP
45102: POP
45103: GO 45109
// end ; end ;
45105: GO 44994
45107: POP
45108: POP
// end ;
45109: LD_VAR 0 3
45113: RET
// export function ScanBase ( side , base_area ) ; begin
45114: LD_INT 0
45116: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45117: LD_ADDR_VAR 0 3
45121: PUSH
45122: LD_VAR 0 2
45126: PPUSH
45127: LD_INT 81
45129: PUSH
45130: LD_VAR 0 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PPUSH
45139: CALL_OW 70
45143: ST_TO_ADDR
// end ;
45144: LD_VAR 0 3
45148: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45149: LD_INT 0
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
// result := false ;
45155: LD_ADDR_VAR 0 2
45159: PUSH
45160: LD_INT 0
45162: ST_TO_ADDR
// side := GetSide ( unit ) ;
45163: LD_ADDR_VAR 0 3
45167: PUSH
45168: LD_VAR 0 1
45172: PPUSH
45173: CALL_OW 255
45177: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 1
45187: PPUSH
45188: CALL_OW 248
45192: ST_TO_ADDR
// case nat of 1 :
45193: LD_VAR 0 4
45197: PUSH
45198: LD_INT 1
45200: DOUBLE
45201: EQUAL
45202: IFTRUE 45206
45204: GO 45217
45206: POP
// tech := tech_lassight ; 2 :
45207: LD_ADDR_VAR 0 5
45211: PUSH
45212: LD_INT 12
45214: ST_TO_ADDR
45215: GO 45256
45217: LD_INT 2
45219: DOUBLE
45220: EQUAL
45221: IFTRUE 45225
45223: GO 45236
45225: POP
// tech := tech_mortar ; 3 :
45226: LD_ADDR_VAR 0 5
45230: PUSH
45231: LD_INT 41
45233: ST_TO_ADDR
45234: GO 45256
45236: LD_INT 3
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45255
45244: POP
// tech := tech_bazooka ; end ;
45245: LD_ADDR_VAR 0 5
45249: PUSH
45250: LD_INT 44
45252: ST_TO_ADDR
45253: GO 45256
45255: POP
// if Researched ( side , tech ) then
45256: LD_VAR 0 3
45260: PPUSH
45261: LD_VAR 0 5
45265: PPUSH
45266: CALL_OW 325
45270: IFFALSE 45297
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45272: LD_ADDR_VAR 0 2
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 8
45282: PUSH
45283: LD_INT 9
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: PUSH
45291: LD_VAR 0 4
45295: ARRAY
45296: ST_TO_ADDR
// end ;
45297: LD_VAR 0 2
45301: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45302: LD_INT 0
45304: PPUSH
45305: PPUSH
45306: PPUSH
// if not mines then
45307: LD_VAR 0 2
45311: NOT
45312: IFFALSE 45316
// exit ;
45314: GO 45460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45316: LD_ADDR_VAR 0 5
45320: PUSH
45321: LD_INT 81
45323: PUSH
45324: LD_VAR 0 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: PUSH
45336: LD_INT 21
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PPUSH
45354: CALL_OW 69
45358: ST_TO_ADDR
// for i in mines do
45359: LD_ADDR_VAR 0 4
45363: PUSH
45364: LD_VAR 0 2
45368: PUSH
45369: FOR_IN
45370: IFFALSE 45458
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45372: LD_VAR 0 4
45376: PUSH
45377: LD_INT 1
45379: ARRAY
45380: PPUSH
45381: LD_VAR 0 4
45385: PUSH
45386: LD_INT 2
45388: ARRAY
45389: PPUSH
45390: CALL_OW 458
45394: NOT
45395: IFFALSE 45399
// continue ;
45397: GO 45369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45399: LD_VAR 0 4
45403: PUSH
45404: LD_INT 1
45406: ARRAY
45407: PPUSH
45408: LD_VAR 0 4
45412: PUSH
45413: LD_INT 2
45415: ARRAY
45416: PPUSH
45417: CALL_OW 428
45421: PUSH
45422: LD_VAR 0 5
45426: IN
45427: IFFALSE 45456
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45429: LD_VAR 0 4
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: LD_VAR 0 4
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: PPUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 456
// end ;
45456: GO 45369
45458: POP
45459: POP
// end ;
45460: LD_VAR 0 3
45464: RET
// export function Count ( array ) ; begin
45465: LD_INT 0
45467: PPUSH
// result := array + 0 ;
45468: LD_ADDR_VAR 0 2
45472: PUSH
45473: LD_VAR 0 1
45477: PUSH
45478: LD_INT 0
45480: PLUS
45481: ST_TO_ADDR
// end ;
45482: LD_VAR 0 2
45486: RET
// export function IsEmpty ( building ) ; begin
45487: LD_INT 0
45489: PPUSH
// if not building then
45490: LD_VAR 0 1
45494: NOT
45495: IFFALSE 45499
// exit ;
45497: GO 45542
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45499: LD_ADDR_VAR 0 2
45503: PUSH
45504: LD_VAR 0 1
45508: PUSH
45509: LD_INT 22
45511: PUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL_OW 255
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 58
45528: PUSH
45529: EMPTY
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PPUSH
45536: CALL_OW 69
45540: IN
45541: ST_TO_ADDR
// end ;
45542: LD_VAR 0 2
45546: RET
// export function IsNotFull ( building ) ; var places ; begin
45547: LD_INT 0
45549: PPUSH
45550: PPUSH
// if not building then
45551: LD_VAR 0 1
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 45588
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45560: LD_ADDR_VAR 0 2
45564: PUSH
45565: LD_VAR 0 1
45569: PPUSH
45570: LD_INT 3
45572: PUSH
45573: LD_INT 62
45575: PUSH
45576: EMPTY
45577: LIST
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PPUSH
45583: CALL_OW 72
45587: ST_TO_ADDR
// end ;
45588: LD_VAR 0 2
45592: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45593: LD_INT 0
45595: PPUSH
45596: PPUSH
45597: PPUSH
45598: PPUSH
// tmp := [ ] ;
45599: LD_ADDR_VAR 0 3
45603: PUSH
45604: EMPTY
45605: ST_TO_ADDR
// list := [ ] ;
45606: LD_ADDR_VAR 0 5
45610: PUSH
45611: EMPTY
45612: ST_TO_ADDR
// for i = 16 to 25 do
45613: LD_ADDR_VAR 0 4
45617: PUSH
45618: DOUBLE
45619: LD_INT 16
45621: DEC
45622: ST_TO_ADDR
45623: LD_INT 25
45625: PUSH
45626: FOR_TO
45627: IFFALSE 45700
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45629: LD_ADDR_VAR 0 3
45633: PUSH
45634: LD_VAR 0 3
45638: PUSH
45639: LD_INT 22
45641: PUSH
45642: LD_VAR 0 1
45646: PPUSH
45647: CALL_OW 255
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 91
45658: PUSH
45659: LD_VAR 0 1
45663: PUSH
45664: LD_INT 6
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 30
45674: PUSH
45675: LD_VAR 0 4
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: PPUSH
45692: CALL_OW 69
45696: ADD
45697: ST_TO_ADDR
45698: GO 45626
45700: POP
45701: POP
// for i = 1 to tmp do
45702: LD_ADDR_VAR 0 4
45706: PUSH
45707: DOUBLE
45708: LD_INT 1
45710: DEC
45711: ST_TO_ADDR
45712: LD_VAR 0 3
45716: PUSH
45717: FOR_TO
45718: IFFALSE 45806
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45720: LD_ADDR_VAR 0 5
45724: PUSH
45725: LD_VAR 0 5
45729: PUSH
45730: LD_VAR 0 3
45734: PUSH
45735: LD_VAR 0 4
45739: ARRAY
45740: PPUSH
45741: CALL_OW 266
45745: PUSH
45746: LD_VAR 0 3
45750: PUSH
45751: LD_VAR 0 4
45755: ARRAY
45756: PPUSH
45757: CALL_OW 250
45761: PUSH
45762: LD_VAR 0 3
45766: PUSH
45767: LD_VAR 0 4
45771: ARRAY
45772: PPUSH
45773: CALL_OW 251
45777: PUSH
45778: LD_VAR 0 3
45782: PUSH
45783: LD_VAR 0 4
45787: ARRAY
45788: PPUSH
45789: CALL_OW 254
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: PUSH
45800: EMPTY
45801: LIST
45802: ADD
45803: ST_TO_ADDR
45804: GO 45717
45806: POP
45807: POP
// result := list ;
45808: LD_ADDR_VAR 0 2
45812: PUSH
45813: LD_VAR 0 5
45817: ST_TO_ADDR
// end ;
45818: LD_VAR 0 2
45822: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45823: LD_INT 0
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
// if not factory then
45832: LD_VAR 0 1
45836: NOT
45837: IFFALSE 45841
// exit ;
45839: GO 46434
// if control = control_apeman then
45841: LD_VAR 0 4
45845: PUSH
45846: LD_INT 5
45848: EQUAL
45849: IFFALSE 45958
// begin tmp := UnitsInside ( factory ) ;
45851: LD_ADDR_VAR 0 8
45855: PUSH
45856: LD_VAR 0 1
45860: PPUSH
45861: CALL_OW 313
45865: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45866: LD_VAR 0 8
45870: PPUSH
45871: LD_INT 25
45873: PUSH
45874: LD_INT 12
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PPUSH
45881: CALL_OW 72
45885: NOT
45886: IFFALSE 45896
// control := control_manual ;
45888: LD_ADDR_VAR 0 4
45892: PUSH
45893: LD_INT 1
45895: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45896: LD_ADDR_VAR 0 8
45900: PUSH
45901: LD_VAR 0 1
45905: PPUSH
45906: CALL 45593 0 1
45910: ST_TO_ADDR
// if tmp then
45911: LD_VAR 0 8
45915: IFFALSE 45958
// begin for i in tmp do
45917: LD_ADDR_VAR 0 7
45921: PUSH
45922: LD_VAR 0 8
45926: PUSH
45927: FOR_IN
45928: IFFALSE 45956
// if i [ 1 ] = b_ext_radio then
45930: LD_VAR 0 7
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PUSH
45939: LD_INT 22
45941: EQUAL
45942: IFFALSE 45954
// begin control := control_remote ;
45944: LD_ADDR_VAR 0 4
45948: PUSH
45949: LD_INT 2
45951: ST_TO_ADDR
// break ;
45952: GO 45956
// end ;
45954: GO 45927
45956: POP
45957: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45958: LD_VAR 0 1
45962: PPUSH
45963: LD_VAR 0 2
45967: PPUSH
45968: LD_VAR 0 3
45972: PPUSH
45973: LD_VAR 0 4
45977: PPUSH
45978: LD_VAR 0 5
45982: PPUSH
45983: CALL_OW 448
45987: IFFALSE 46022
// begin result := [ chassis , engine , control , weapon ] ;
45989: LD_ADDR_VAR 0 6
45993: PUSH
45994: LD_VAR 0 2
45998: PUSH
45999: LD_VAR 0 3
46003: PUSH
46004: LD_VAR 0 4
46008: PUSH
46009: LD_VAR 0 5
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// exit ;
46020: GO 46434
// end ; _chassis := AvailableChassisList ( factory ) ;
46022: LD_ADDR_VAR 0 9
46026: PUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 475
46036: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46037: LD_ADDR_VAR 0 11
46041: PUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: CALL_OW 476
46051: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46052: LD_ADDR_VAR 0 12
46056: PUSH
46057: LD_VAR 0 1
46061: PPUSH
46062: CALL_OW 477
46066: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46067: LD_ADDR_VAR 0 10
46071: PUSH
46072: LD_VAR 0 1
46076: PPUSH
46077: CALL_OW 478
46081: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46082: LD_VAR 0 9
46086: NOT
46087: PUSH
46088: LD_VAR 0 11
46092: NOT
46093: OR
46094: PUSH
46095: LD_VAR 0 12
46099: NOT
46100: OR
46101: PUSH
46102: LD_VAR 0 10
46106: NOT
46107: OR
46108: IFFALSE 46143
// begin result := [ chassis , engine , control , weapon ] ;
46110: LD_ADDR_VAR 0 6
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_VAR 0 3
46124: PUSH
46125: LD_VAR 0 4
46129: PUSH
46130: LD_VAR 0 5
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// exit ;
46141: GO 46434
// end ; if not chassis in _chassis then
46143: LD_VAR 0 2
46147: PUSH
46148: LD_VAR 0 9
46152: IN
46153: NOT
46154: IFFALSE 46180
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46156: LD_ADDR_VAR 0 2
46160: PUSH
46161: LD_VAR 0 9
46165: PUSH
46166: LD_INT 1
46168: PPUSH
46169: LD_VAR 0 9
46173: PPUSH
46174: CALL_OW 12
46178: ARRAY
46179: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46180: LD_VAR 0 2
46184: PPUSH
46185: LD_VAR 0 3
46189: PPUSH
46190: CALL 46439 0 2
46194: NOT
46195: IFFALSE 46254
// repeat engine := _engine [ 1 ] ;
46197: LD_ADDR_VAR 0 3
46201: PUSH
46202: LD_VAR 0 11
46206: PUSH
46207: LD_INT 1
46209: ARRAY
46210: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46211: LD_ADDR_VAR 0 11
46215: PUSH
46216: LD_VAR 0 11
46220: PPUSH
46221: LD_INT 1
46223: PPUSH
46224: CALL_OW 3
46228: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46229: LD_VAR 0 2
46233: PPUSH
46234: LD_VAR 0 3
46238: PPUSH
46239: CALL 46439 0 2
46243: PUSH
46244: LD_VAR 0 11
46248: PUSH
46249: EMPTY
46250: EQUAL
46251: OR
46252: IFFALSE 46197
// if not control in _control then
46254: LD_VAR 0 4
46258: PUSH
46259: LD_VAR 0 12
46263: IN
46264: NOT
46265: IFFALSE 46291
// control := _control [ rand ( 1 , _control ) ] ;
46267: LD_ADDR_VAR 0 4
46271: PUSH
46272: LD_VAR 0 12
46276: PUSH
46277: LD_INT 1
46279: PPUSH
46280: LD_VAR 0 12
46284: PPUSH
46285: CALL_OW 12
46289: ARRAY
46290: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46291: LD_VAR 0 2
46295: PPUSH
46296: LD_VAR 0 5
46300: PPUSH
46301: CALL 46659 0 2
46305: NOT
46306: IFFALSE 46365
// repeat weapon := _weapon [ 1 ] ;
46308: LD_ADDR_VAR 0 5
46312: PUSH
46313: LD_VAR 0 10
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46322: LD_ADDR_VAR 0 10
46326: PUSH
46327: LD_VAR 0 10
46331: PPUSH
46332: LD_INT 1
46334: PPUSH
46335: CALL_OW 3
46339: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46340: LD_VAR 0 2
46344: PPUSH
46345: LD_VAR 0 5
46349: PPUSH
46350: CALL 46659 0 2
46354: PUSH
46355: LD_VAR 0 10
46359: PUSH
46360: EMPTY
46361: EQUAL
46362: OR
46363: IFFALSE 46308
// result := [ ] ;
46365: LD_ADDR_VAR 0 6
46369: PUSH
46370: EMPTY
46371: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46372: LD_VAR 0 1
46376: PPUSH
46377: LD_VAR 0 2
46381: PPUSH
46382: LD_VAR 0 3
46386: PPUSH
46387: LD_VAR 0 4
46391: PPUSH
46392: LD_VAR 0 5
46396: PPUSH
46397: CALL_OW 448
46401: IFFALSE 46434
// result := [ chassis , engine , control , weapon ] ;
46403: LD_ADDR_VAR 0 6
46407: PUSH
46408: LD_VAR 0 2
46412: PUSH
46413: LD_VAR 0 3
46417: PUSH
46418: LD_VAR 0 4
46422: PUSH
46423: LD_VAR 0 5
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// end ;
46434: LD_VAR 0 6
46438: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46439: LD_INT 0
46441: PPUSH
// if not chassis or not engine then
46442: LD_VAR 0 1
46446: NOT
46447: PUSH
46448: LD_VAR 0 2
46452: NOT
46453: OR
46454: IFFALSE 46458
// exit ;
46456: GO 46654
// case engine of engine_solar :
46458: LD_VAR 0 2
46462: PUSH
46463: LD_INT 2
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 46509
46471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46472: LD_ADDR_VAR 0 3
46476: PUSH
46477: LD_INT 11
46479: PUSH
46480: LD_INT 12
46482: PUSH
46483: LD_INT 13
46485: PUSH
46486: LD_INT 14
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
46507: GO 46638
46509: LD_INT 1
46511: DOUBLE
46512: EQUAL
46513: IFTRUE 46517
46515: GO 46579
46517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_INT 11
46525: PUSH
46526: LD_INT 12
46528: PUSH
46529: LD_INT 13
46531: PUSH
46532: LD_INT 14
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 4
46546: PUSH
46547: LD_INT 5
46549: PUSH
46550: LD_INT 21
46552: PUSH
46553: LD_INT 23
46555: PUSH
46556: LD_INT 22
46558: PUSH
46559: LD_INT 24
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: ST_TO_ADDR
46577: GO 46638
46579: LD_INT 3
46581: DOUBLE
46582: EQUAL
46583: IFTRUE 46587
46585: GO 46637
46587: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46588: LD_ADDR_VAR 0 3
46592: PUSH
46593: LD_INT 13
46595: PUSH
46596: LD_INT 14
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: LD_INT 4
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: LD_INT 21
46613: PUSH
46614: LD_INT 22
46616: PUSH
46617: LD_INT 23
46619: PUSH
46620: LD_INT 24
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
46635: GO 46638
46637: POP
// result := ( chassis in result ) ;
46638: LD_ADDR_VAR 0 3
46642: PUSH
46643: LD_VAR 0 1
46647: PUSH
46648: LD_VAR 0 3
46652: IN
46653: ST_TO_ADDR
// end ;
46654: LD_VAR 0 3
46658: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46659: LD_INT 0
46661: PPUSH
// if not chassis or not weapon then
46662: LD_VAR 0 1
46666: NOT
46667: PUSH
46668: LD_VAR 0 2
46672: NOT
46673: OR
46674: IFFALSE 46678
// exit ;
46676: GO 47738
// case weapon of us_machine_gun :
46678: LD_VAR 0 2
46682: PUSH
46683: LD_INT 2
46685: DOUBLE
46686: EQUAL
46687: IFTRUE 46691
46689: GO 46721
46691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46692: LD_ADDR_VAR 0 3
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: LD_INT 4
46708: PUSH
46709: LD_INT 5
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: ST_TO_ADDR
46719: GO 47722
46721: LD_INT 3
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46729
46727: GO 46759
46729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46730: LD_ADDR_VAR 0 3
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: LD_INT 5
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
46757: GO 47722
46759: LD_INT 11
46761: DOUBLE
46762: EQUAL
46763: IFTRUE 46767
46765: GO 46797
46767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46768: LD_ADDR_VAR 0 3
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 4
46784: PUSH
46785: LD_INT 5
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
46795: GO 47722
46797: LD_INT 4
46799: DOUBLE
46800: EQUAL
46801: IFTRUE 46805
46803: GO 46831
46805: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46806: LD_ADDR_VAR 0 3
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: LD_INT 4
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
46829: GO 47722
46831: LD_INT 5
46833: DOUBLE
46834: EQUAL
46835: IFTRUE 46839
46837: GO 46865
46839: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46840: LD_ADDR_VAR 0 3
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 4
46853: PUSH
46854: LD_INT 5
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
46863: GO 47722
46865: LD_INT 9
46867: DOUBLE
46868: EQUAL
46869: IFTRUE 46873
46871: GO 46899
46873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46874: LD_ADDR_VAR 0 3
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 3
46884: PUSH
46885: LD_INT 4
46887: PUSH
46888: LD_INT 5
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
46897: GO 47722
46899: LD_INT 7
46901: DOUBLE
46902: EQUAL
46903: IFTRUE 46907
46905: GO 46933
46907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46908: LD_ADDR_VAR 0 3
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: LD_INT 4
46921: PUSH
46922: LD_INT 5
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: ST_TO_ADDR
46931: GO 47722
46933: LD_INT 12
46935: DOUBLE
46936: EQUAL
46937: IFTRUE 46941
46939: GO 46967
46941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46942: LD_ADDR_VAR 0 3
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: LD_INT 4
46955: PUSH
46956: LD_INT 5
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: ST_TO_ADDR
46965: GO 47722
46967: LD_INT 13
46969: DOUBLE
46970: EQUAL
46971: IFTRUE 46975
46973: GO 47001
46975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46976: LD_ADDR_VAR 0 3
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: LD_INT 5
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
46999: GO 47722
47001: LD_INT 14
47003: DOUBLE
47004: EQUAL
47005: IFTRUE 47009
47007: GO 47027
47009: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47010: LD_ADDR_VAR 0 3
47014: PUSH
47015: LD_INT 4
47017: PUSH
47018: LD_INT 5
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: ST_TO_ADDR
47025: GO 47722
47027: LD_INT 6
47029: DOUBLE
47030: EQUAL
47031: IFTRUE 47035
47033: GO 47053
47035: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47036: LD_ADDR_VAR 0 3
47040: PUSH
47041: LD_INT 4
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: ST_TO_ADDR
47051: GO 47722
47053: LD_INT 10
47055: DOUBLE
47056: EQUAL
47057: IFTRUE 47061
47059: GO 47079
47061: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47062: LD_ADDR_VAR 0 3
47066: PUSH
47067: LD_INT 4
47069: PUSH
47070: LD_INT 5
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: ST_TO_ADDR
47077: GO 47722
47079: LD_INT 22
47081: DOUBLE
47082: EQUAL
47083: IFTRUE 47087
47085: GO 47113
47087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47088: LD_ADDR_VAR 0 3
47092: PUSH
47093: LD_INT 11
47095: PUSH
47096: LD_INT 12
47098: PUSH
47099: LD_INT 13
47101: PUSH
47102: LD_INT 14
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: ST_TO_ADDR
47111: GO 47722
47113: LD_INT 23
47115: DOUBLE
47116: EQUAL
47117: IFTRUE 47121
47119: GO 47147
47121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47122: LD_ADDR_VAR 0 3
47126: PUSH
47127: LD_INT 11
47129: PUSH
47130: LD_INT 12
47132: PUSH
47133: LD_INT 13
47135: PUSH
47136: LD_INT 14
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: ST_TO_ADDR
47145: GO 47722
47147: LD_INT 24
47149: DOUBLE
47150: EQUAL
47151: IFTRUE 47155
47153: GO 47181
47155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47156: LD_ADDR_VAR 0 3
47160: PUSH
47161: LD_INT 11
47163: PUSH
47164: LD_INT 12
47166: PUSH
47167: LD_INT 13
47169: PUSH
47170: LD_INT 14
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
47179: GO 47722
47181: LD_INT 30
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47215
47189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47190: LD_ADDR_VAR 0 3
47194: PUSH
47195: LD_INT 11
47197: PUSH
47198: LD_INT 12
47200: PUSH
47201: LD_INT 13
47203: PUSH
47204: LD_INT 14
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
47213: GO 47722
47215: LD_INT 25
47217: DOUBLE
47218: EQUAL
47219: IFTRUE 47223
47221: GO 47241
47223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47224: LD_ADDR_VAR 0 3
47228: PUSH
47229: LD_INT 13
47231: PUSH
47232: LD_INT 14
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: ST_TO_ADDR
47239: GO 47722
47241: LD_INT 27
47243: DOUBLE
47244: EQUAL
47245: IFTRUE 47249
47247: GO 47267
47249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47250: LD_ADDR_VAR 0 3
47254: PUSH
47255: LD_INT 13
47257: PUSH
47258: LD_INT 14
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: ST_TO_ADDR
47265: GO 47722
47267: LD_INT 92
47269: DOUBLE
47270: EQUAL
47271: IFTRUE 47275
47273: GO 47301
47275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47276: LD_ADDR_VAR 0 3
47280: PUSH
47281: LD_INT 11
47283: PUSH
47284: LD_INT 12
47286: PUSH
47287: LD_INT 13
47289: PUSH
47290: LD_INT 14
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
47299: GO 47722
47301: LD_INT 28
47303: DOUBLE
47304: EQUAL
47305: IFTRUE 47309
47307: GO 47327
47309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: LD_INT 13
47317: PUSH
47318: LD_INT 14
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: ST_TO_ADDR
47325: GO 47722
47327: LD_INT 29
47329: DOUBLE
47330: EQUAL
47331: IFTRUE 47335
47333: GO 47353
47335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47336: LD_ADDR_VAR 0 3
47340: PUSH
47341: LD_INT 13
47343: PUSH
47344: LD_INT 14
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: ST_TO_ADDR
47351: GO 47722
47353: LD_INT 31
47355: DOUBLE
47356: EQUAL
47357: IFTRUE 47361
47359: GO 47379
47361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47362: LD_ADDR_VAR 0 3
47366: PUSH
47367: LD_INT 13
47369: PUSH
47370: LD_INT 14
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: ST_TO_ADDR
47377: GO 47722
47379: LD_INT 26
47381: DOUBLE
47382: EQUAL
47383: IFTRUE 47387
47385: GO 47405
47387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47388: LD_ADDR_VAR 0 3
47392: PUSH
47393: LD_INT 13
47395: PUSH
47396: LD_INT 14
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: ST_TO_ADDR
47403: GO 47722
47405: LD_INT 42
47407: DOUBLE
47408: EQUAL
47409: IFTRUE 47413
47411: GO 47439
47413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47414: LD_ADDR_VAR 0 3
47418: PUSH
47419: LD_INT 21
47421: PUSH
47422: LD_INT 22
47424: PUSH
47425: LD_INT 23
47427: PUSH
47428: LD_INT 24
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: ST_TO_ADDR
47437: GO 47722
47439: LD_INT 43
47441: DOUBLE
47442: EQUAL
47443: IFTRUE 47447
47445: GO 47473
47447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47448: LD_ADDR_VAR 0 3
47452: PUSH
47453: LD_INT 21
47455: PUSH
47456: LD_INT 22
47458: PUSH
47459: LD_INT 23
47461: PUSH
47462: LD_INT 24
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
47471: GO 47722
47473: LD_INT 44
47475: DOUBLE
47476: EQUAL
47477: IFTRUE 47481
47479: GO 47507
47481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47482: LD_ADDR_VAR 0 3
47486: PUSH
47487: LD_INT 21
47489: PUSH
47490: LD_INT 22
47492: PUSH
47493: LD_INT 23
47495: PUSH
47496: LD_INT 24
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: ST_TO_ADDR
47505: GO 47722
47507: LD_INT 45
47509: DOUBLE
47510: EQUAL
47511: IFTRUE 47515
47513: GO 47541
47515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47516: LD_ADDR_VAR 0 3
47520: PUSH
47521: LD_INT 21
47523: PUSH
47524: LD_INT 22
47526: PUSH
47527: LD_INT 23
47529: PUSH
47530: LD_INT 24
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
47539: GO 47722
47541: LD_INT 49
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47549
47547: GO 47575
47549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47550: LD_ADDR_VAR 0 3
47554: PUSH
47555: LD_INT 21
47557: PUSH
47558: LD_INT 22
47560: PUSH
47561: LD_INT 23
47563: PUSH
47564: LD_INT 24
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
47573: GO 47722
47575: LD_INT 51
47577: DOUBLE
47578: EQUAL
47579: IFTRUE 47583
47581: GO 47609
47583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47584: LD_ADDR_VAR 0 3
47588: PUSH
47589: LD_INT 21
47591: PUSH
47592: LD_INT 22
47594: PUSH
47595: LD_INT 23
47597: PUSH
47598: LD_INT 24
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
47607: GO 47722
47609: LD_INT 52
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 47643
47617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47618: LD_ADDR_VAR 0 3
47622: PUSH
47623: LD_INT 21
47625: PUSH
47626: LD_INT 22
47628: PUSH
47629: LD_INT 23
47631: PUSH
47632: LD_INT 24
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: ST_TO_ADDR
47641: GO 47722
47643: LD_INT 53
47645: DOUBLE
47646: EQUAL
47647: IFTRUE 47651
47649: GO 47669
47651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47652: LD_ADDR_VAR 0 3
47656: PUSH
47657: LD_INT 23
47659: PUSH
47660: LD_INT 24
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: ST_TO_ADDR
47667: GO 47722
47669: LD_INT 46
47671: DOUBLE
47672: EQUAL
47673: IFTRUE 47677
47675: GO 47695
47677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47678: LD_ADDR_VAR 0 3
47682: PUSH
47683: LD_INT 23
47685: PUSH
47686: LD_INT 24
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: ST_TO_ADDR
47693: GO 47722
47695: LD_INT 47
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 47721
47703: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47704: LD_ADDR_VAR 0 3
47708: PUSH
47709: LD_INT 23
47711: PUSH
47712: LD_INT 24
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: ST_TO_ADDR
47719: GO 47722
47721: POP
// result := ( chassis in result ) ;
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: LD_VAR 0 1
47731: PUSH
47732: LD_VAR 0 3
47736: IN
47737: ST_TO_ADDR
// end ;
47738: LD_VAR 0 3
47742: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47743: LD_INT 0
47745: PPUSH
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
// result := array ;
47752: LD_ADDR_VAR 0 5
47756: PUSH
47757: LD_VAR 0 1
47761: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47762: LD_VAR 0 1
47766: NOT
47767: PUSH
47768: LD_VAR 0 2
47772: NOT
47773: OR
47774: PUSH
47775: LD_VAR 0 3
47779: NOT
47780: OR
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_VAR 0 1
47791: GREATER
47792: OR
47793: PUSH
47794: LD_VAR 0 3
47798: PUSH
47799: LD_VAR 0 1
47803: GREATER
47804: OR
47805: IFFALSE 47809
// exit ;
47807: GO 48105
// if direction then
47809: LD_VAR 0 4
47813: IFFALSE 47877
// begin d := 1 ;
47815: LD_ADDR_VAR 0 9
47819: PUSH
47820: LD_INT 1
47822: ST_TO_ADDR
// if i_from > i_to then
47823: LD_VAR 0 2
47827: PUSH
47828: LD_VAR 0 3
47832: GREATER
47833: IFFALSE 47859
// length := ( array - i_from ) + i_to else
47835: LD_ADDR_VAR 0 11
47839: PUSH
47840: LD_VAR 0 1
47844: PUSH
47845: LD_VAR 0 2
47849: MINUS
47850: PUSH
47851: LD_VAR 0 3
47855: PLUS
47856: ST_TO_ADDR
47857: GO 47875
// length := i_to - i_from ;
47859: LD_ADDR_VAR 0 11
47863: PUSH
47864: LD_VAR 0 3
47868: PUSH
47869: LD_VAR 0 2
47873: MINUS
47874: ST_TO_ADDR
// end else
47875: GO 47938
// begin d := - 1 ;
47877: LD_ADDR_VAR 0 9
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: ST_TO_ADDR
// if i_from > i_to then
47886: LD_VAR 0 2
47890: PUSH
47891: LD_VAR 0 3
47895: GREATER
47896: IFFALSE 47916
// length := i_from - i_to else
47898: LD_ADDR_VAR 0 11
47902: PUSH
47903: LD_VAR 0 2
47907: PUSH
47908: LD_VAR 0 3
47912: MINUS
47913: ST_TO_ADDR
47914: GO 47938
// length := ( array - i_to ) + i_from ;
47916: LD_ADDR_VAR 0 11
47920: PUSH
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 3
47930: MINUS
47931: PUSH
47932: LD_VAR 0 2
47936: PLUS
47937: ST_TO_ADDR
// end ; if not length then
47938: LD_VAR 0 11
47942: NOT
47943: IFFALSE 47947
// exit ;
47945: GO 48105
// tmp := array ;
47947: LD_ADDR_VAR 0 10
47951: PUSH
47952: LD_VAR 0 1
47956: ST_TO_ADDR
// for i = 1 to length do
47957: LD_ADDR_VAR 0 6
47961: PUSH
47962: DOUBLE
47963: LD_INT 1
47965: DEC
47966: ST_TO_ADDR
47967: LD_VAR 0 11
47971: PUSH
47972: FOR_TO
47973: IFFALSE 48093
// begin for j = 1 to array do
47975: LD_ADDR_VAR 0 7
47979: PUSH
47980: DOUBLE
47981: LD_INT 1
47983: DEC
47984: ST_TO_ADDR
47985: LD_VAR 0 1
47989: PUSH
47990: FOR_TO
47991: IFFALSE 48079
// begin k := j + d ;
47993: LD_ADDR_VAR 0 8
47997: PUSH
47998: LD_VAR 0 7
48002: PUSH
48003: LD_VAR 0 9
48007: PLUS
48008: ST_TO_ADDR
// if k > array then
48009: LD_VAR 0 8
48013: PUSH
48014: LD_VAR 0 1
48018: GREATER
48019: IFFALSE 48029
// k := 1 ;
48021: LD_ADDR_VAR 0 8
48025: PUSH
48026: LD_INT 1
48028: ST_TO_ADDR
// if not k then
48029: LD_VAR 0 8
48033: NOT
48034: IFFALSE 48046
// k := array ;
48036: LD_ADDR_VAR 0 8
48040: PUSH
48041: LD_VAR 0 1
48045: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48046: LD_ADDR_VAR 0 10
48050: PUSH
48051: LD_VAR 0 10
48055: PPUSH
48056: LD_VAR 0 8
48060: PPUSH
48061: LD_VAR 0 1
48065: PUSH
48066: LD_VAR 0 7
48070: ARRAY
48071: PPUSH
48072: CALL_OW 1
48076: ST_TO_ADDR
// end ;
48077: GO 47990
48079: POP
48080: POP
// array := tmp ;
48081: LD_ADDR_VAR 0 1
48085: PUSH
48086: LD_VAR 0 10
48090: ST_TO_ADDR
// end ;
48091: GO 47972
48093: POP
48094: POP
// result := array ;
48095: LD_ADDR_VAR 0 5
48099: PUSH
48100: LD_VAR 0 1
48104: ST_TO_ADDR
// end ;
48105: LD_VAR 0 5
48109: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48110: LD_INT 0
48112: PPUSH
48113: PPUSH
// result := 0 ;
48114: LD_ADDR_VAR 0 3
48118: PUSH
48119: LD_INT 0
48121: ST_TO_ADDR
// if not array or not value in array then
48122: LD_VAR 0 1
48126: NOT
48127: PUSH
48128: LD_VAR 0 2
48132: PUSH
48133: LD_VAR 0 1
48137: IN
48138: NOT
48139: OR
48140: IFFALSE 48144
// exit ;
48142: GO 48198
// for i = 1 to array do
48144: LD_ADDR_VAR 0 4
48148: PUSH
48149: DOUBLE
48150: LD_INT 1
48152: DEC
48153: ST_TO_ADDR
48154: LD_VAR 0 1
48158: PUSH
48159: FOR_TO
48160: IFFALSE 48196
// if value = array [ i ] then
48162: LD_VAR 0 2
48166: PUSH
48167: LD_VAR 0 1
48171: PUSH
48172: LD_VAR 0 4
48176: ARRAY
48177: EQUAL
48178: IFFALSE 48194
// begin result := i ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_VAR 0 4
48189: ST_TO_ADDR
// exit ;
48190: POP
48191: POP
48192: GO 48198
// end ;
48194: GO 48159
48196: POP
48197: POP
// end ;
48198: LD_VAR 0 3
48202: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48203: LD_INT 0
48205: PPUSH
// vc_chassis := chassis ;
48206: LD_ADDR_OWVAR 37
48210: PUSH
48211: LD_VAR 0 1
48215: ST_TO_ADDR
// vc_engine := engine ;
48216: LD_ADDR_OWVAR 39
48220: PUSH
48221: LD_VAR 0 2
48225: ST_TO_ADDR
// vc_control := control ;
48226: LD_ADDR_OWVAR 38
48230: PUSH
48231: LD_VAR 0 3
48235: ST_TO_ADDR
// vc_weapon := weapon ;
48236: LD_ADDR_OWVAR 40
48240: PUSH
48241: LD_VAR 0 4
48245: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48246: LD_ADDR_OWVAR 41
48250: PUSH
48251: LD_VAR 0 5
48255: ST_TO_ADDR
// end ;
48256: LD_VAR 0 6
48260: RET
// export function WantPlant ( unit ) ; var task ; begin
48261: LD_INT 0
48263: PPUSH
48264: PPUSH
// result := false ;
48265: LD_ADDR_VAR 0 2
48269: PUSH
48270: LD_INT 0
48272: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48273: LD_ADDR_VAR 0 3
48277: PUSH
48278: LD_VAR 0 1
48282: PPUSH
48283: CALL_OW 437
48287: ST_TO_ADDR
// if task then
48288: LD_VAR 0 3
48292: IFFALSE 48320
// if task [ 1 ] [ 1 ] = p then
48294: LD_VAR 0 3
48298: PUSH
48299: LD_INT 1
48301: ARRAY
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PUSH
48307: LD_STRING p
48309: EQUAL
48310: IFFALSE 48320
// result := true ;
48312: LD_ADDR_VAR 0 2
48316: PUSH
48317: LD_INT 1
48319: ST_TO_ADDR
// end ;
48320: LD_VAR 0 2
48324: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48325: LD_INT 0
48327: PPUSH
48328: PPUSH
48329: PPUSH
48330: PPUSH
// if pos < 1 then
48331: LD_VAR 0 2
48335: PUSH
48336: LD_INT 1
48338: LESS
48339: IFFALSE 48343
// exit ;
48341: GO 48646
// if pos = 1 then
48343: LD_VAR 0 2
48347: PUSH
48348: LD_INT 1
48350: EQUAL
48351: IFFALSE 48384
// result := Replace ( arr , pos [ 1 ] , value ) else
48353: LD_ADDR_VAR 0 4
48357: PUSH
48358: LD_VAR 0 1
48362: PPUSH
48363: LD_VAR 0 2
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: PPUSH
48372: LD_VAR 0 3
48376: PPUSH
48377: CALL_OW 1
48381: ST_TO_ADDR
48382: GO 48646
// begin tmp := arr ;
48384: LD_ADDR_VAR 0 6
48388: PUSH
48389: LD_VAR 0 1
48393: ST_TO_ADDR
// s_arr := [ tmp ] ;
48394: LD_ADDR_VAR 0 7
48398: PUSH
48399: LD_VAR 0 6
48403: PUSH
48404: EMPTY
48405: LIST
48406: ST_TO_ADDR
// for i = 1 to pos - 1 do
48407: LD_ADDR_VAR 0 5
48411: PUSH
48412: DOUBLE
48413: LD_INT 1
48415: DEC
48416: ST_TO_ADDR
48417: LD_VAR 0 2
48421: PUSH
48422: LD_INT 1
48424: MINUS
48425: PUSH
48426: FOR_TO
48427: IFFALSE 48472
// begin tmp := tmp [ pos [ i ] ] ;
48429: LD_ADDR_VAR 0 6
48433: PUSH
48434: LD_VAR 0 6
48438: PUSH
48439: LD_VAR 0 2
48443: PUSH
48444: LD_VAR 0 5
48448: ARRAY
48449: ARRAY
48450: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48451: LD_ADDR_VAR 0 7
48455: PUSH
48456: LD_VAR 0 7
48460: PUSH
48461: LD_VAR 0 6
48465: PUSH
48466: EMPTY
48467: LIST
48468: ADD
48469: ST_TO_ADDR
// end ;
48470: GO 48426
48472: POP
48473: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48474: LD_ADDR_VAR 0 6
48478: PUSH
48479: LD_VAR 0 6
48483: PPUSH
48484: LD_VAR 0 2
48488: PUSH
48489: LD_VAR 0 2
48493: ARRAY
48494: PPUSH
48495: LD_VAR 0 3
48499: PPUSH
48500: CALL_OW 1
48504: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48505: LD_ADDR_VAR 0 7
48509: PUSH
48510: LD_VAR 0 7
48514: PPUSH
48515: LD_VAR 0 7
48519: PPUSH
48520: LD_VAR 0 6
48524: PPUSH
48525: CALL_OW 1
48529: ST_TO_ADDR
// for i = s_arr downto 2 do
48530: LD_ADDR_VAR 0 5
48534: PUSH
48535: DOUBLE
48536: LD_VAR 0 7
48540: INC
48541: ST_TO_ADDR
48542: LD_INT 2
48544: PUSH
48545: FOR_DOWNTO
48546: IFFALSE 48630
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48548: LD_ADDR_VAR 0 6
48552: PUSH
48553: LD_VAR 0 7
48557: PUSH
48558: LD_VAR 0 5
48562: PUSH
48563: LD_INT 1
48565: MINUS
48566: ARRAY
48567: PPUSH
48568: LD_VAR 0 2
48572: PUSH
48573: LD_VAR 0 5
48577: PUSH
48578: LD_INT 1
48580: MINUS
48581: ARRAY
48582: PPUSH
48583: LD_VAR 0 7
48587: PUSH
48588: LD_VAR 0 5
48592: ARRAY
48593: PPUSH
48594: CALL_OW 1
48598: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48599: LD_ADDR_VAR 0 7
48603: PUSH
48604: LD_VAR 0 7
48608: PPUSH
48609: LD_VAR 0 5
48613: PUSH
48614: LD_INT 1
48616: MINUS
48617: PPUSH
48618: LD_VAR 0 6
48622: PPUSH
48623: CALL_OW 1
48627: ST_TO_ADDR
// end ;
48628: GO 48545
48630: POP
48631: POP
// result := s_arr [ 1 ] ;
48632: LD_ADDR_VAR 0 4
48636: PUSH
48637: LD_VAR 0 7
48641: PUSH
48642: LD_INT 1
48644: ARRAY
48645: ST_TO_ADDR
// end ; end ;
48646: LD_VAR 0 4
48650: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48651: LD_INT 0
48653: PPUSH
48654: PPUSH
// if not list then
48655: LD_VAR 0 1
48659: NOT
48660: IFFALSE 48664
// exit ;
48662: GO 48755
// i := list [ pos1 ] ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: LD_VAR 0 2
48678: ARRAY
48679: ST_TO_ADDR
// if not i then
48680: LD_VAR 0 5
48684: NOT
48685: IFFALSE 48689
// exit ;
48687: GO 48755
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48689: LD_ADDR_VAR 0 1
48693: PUSH
48694: LD_VAR 0 1
48698: PPUSH
48699: LD_VAR 0 2
48703: PPUSH
48704: LD_VAR 0 1
48708: PUSH
48709: LD_VAR 0 3
48713: ARRAY
48714: PPUSH
48715: CALL_OW 1
48719: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48720: LD_ADDR_VAR 0 1
48724: PUSH
48725: LD_VAR 0 1
48729: PPUSH
48730: LD_VAR 0 3
48734: PPUSH
48735: LD_VAR 0 5
48739: PPUSH
48740: CALL_OW 1
48744: ST_TO_ADDR
// result := list ;
48745: LD_ADDR_VAR 0 4
48749: PUSH
48750: LD_VAR 0 1
48754: ST_TO_ADDR
// end ;
48755: LD_VAR 0 4
48759: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48760: LD_INT 0
48762: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48763: LD_ADDR_VAR 0 5
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 250
48777: PPUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 251
48787: PPUSH
48788: LD_VAR 0 2
48792: PPUSH
48793: LD_VAR 0 3
48797: PPUSH
48798: LD_VAR 0 4
48802: PPUSH
48803: CALL 49181 0 5
48807: ST_TO_ADDR
// end ;
48808: LD_VAR 0 5
48812: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48813: LD_INT 0
48815: PPUSH
48816: PPUSH
48817: PPUSH
48818: PPUSH
// if not list or not unit then
48819: LD_VAR 0 2
48823: NOT
48824: PUSH
48825: LD_VAR 0 1
48829: NOT
48830: OR
48831: IFFALSE 48835
// exit ;
48833: GO 49176
// result := [ ] ;
48835: LD_ADDR_VAR 0 5
48839: PUSH
48840: EMPTY
48841: ST_TO_ADDR
// for i in list do
48842: LD_ADDR_VAR 0 6
48846: PUSH
48847: LD_VAR 0 2
48851: PUSH
48852: FOR_IN
48853: IFFALSE 49071
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48855: LD_ADDR_VAR 0 8
48859: PUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: LD_VAR 0 6
48869: PUSH
48870: LD_INT 1
48872: ARRAY
48873: PPUSH
48874: LD_VAR 0 6
48878: PUSH
48879: LD_INT 2
48881: ARRAY
48882: PPUSH
48883: CALL_OW 297
48887: ST_TO_ADDR
// if not Count ( result ) then
48888: LD_VAR 0 5
48892: PPUSH
48893: CALL 45465 0 1
48897: NOT
48898: IFFALSE 48931
// begin result := Join ( result , [ i , tmp ] ) ;
48900: LD_ADDR_VAR 0 5
48904: PUSH
48905: LD_VAR 0 5
48909: PPUSH
48910: LD_VAR 0 6
48914: PUSH
48915: LD_VAR 0 8
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PPUSH
48924: CALL 81074 0 2
48928: ST_TO_ADDR
// continue ;
48929: GO 48852
// end ; if result [ result ] [ 2 ] <= tmp then
48931: LD_VAR 0 5
48935: PUSH
48936: LD_VAR 0 5
48940: ARRAY
48941: PUSH
48942: LD_INT 2
48944: ARRAY
48945: PUSH
48946: LD_VAR 0 8
48950: LESSEQUAL
48951: IFFALSE 48984
// result := Join ( result , [ i , tmp ] ) else
48953: LD_ADDR_VAR 0 5
48957: PUSH
48958: LD_VAR 0 5
48962: PPUSH
48963: LD_VAR 0 6
48967: PUSH
48968: LD_VAR 0 8
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PPUSH
48977: CALL 81074 0 2
48981: ST_TO_ADDR
48982: GO 49069
// begin for j := 1 to Count ( result ) do
48984: LD_ADDR_VAR 0 7
48988: PUSH
48989: DOUBLE
48990: LD_INT 1
48992: DEC
48993: ST_TO_ADDR
48994: LD_VAR 0 5
48998: PPUSH
48999: CALL 45465 0 1
49003: PUSH
49004: FOR_TO
49005: IFFALSE 49067
// begin if tmp < result [ j ] [ 2 ] then
49007: LD_VAR 0 8
49011: PUSH
49012: LD_VAR 0 5
49016: PUSH
49017: LD_VAR 0 7
49021: ARRAY
49022: PUSH
49023: LD_INT 2
49025: ARRAY
49026: LESS
49027: IFFALSE 49065
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49029: LD_ADDR_VAR 0 5
49033: PUSH
49034: LD_VAR 0 5
49038: PPUSH
49039: LD_VAR 0 7
49043: PPUSH
49044: LD_VAR 0 6
49048: PUSH
49049: LD_VAR 0 8
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PPUSH
49058: CALL_OW 2
49062: ST_TO_ADDR
// break ;
49063: GO 49067
// end ; end ;
49065: GO 49004
49067: POP
49068: POP
// end ; end ;
49069: GO 48852
49071: POP
49072: POP
// if result and not asc then
49073: LD_VAR 0 5
49077: PUSH
49078: LD_VAR 0 3
49082: NOT
49083: AND
49084: IFFALSE 49101
// result := ReverseArray ( result ) ;
49086: LD_ADDR_VAR 0 5
49090: PUSH
49091: LD_VAR 0 5
49095: PPUSH
49096: CALL 76341 0 1
49100: ST_TO_ADDR
// tmp := [ ] ;
49101: LD_ADDR_VAR 0 8
49105: PUSH
49106: EMPTY
49107: ST_TO_ADDR
// if mode then
49108: LD_VAR 0 4
49112: IFFALSE 49176
// begin for i := 1 to result do
49114: LD_ADDR_VAR 0 6
49118: PUSH
49119: DOUBLE
49120: LD_INT 1
49122: DEC
49123: ST_TO_ADDR
49124: LD_VAR 0 5
49128: PUSH
49129: FOR_TO
49130: IFFALSE 49164
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49132: LD_ADDR_VAR 0 8
49136: PUSH
49137: LD_VAR 0 8
49141: PPUSH
49142: LD_VAR 0 5
49146: PUSH
49147: LD_VAR 0 6
49151: ARRAY
49152: PUSH
49153: LD_INT 1
49155: ARRAY
49156: PPUSH
49157: CALL 81074 0 2
49161: ST_TO_ADDR
49162: GO 49129
49164: POP
49165: POP
// result := tmp ;
49166: LD_ADDR_VAR 0 5
49170: PUSH
49171: LD_VAR 0 8
49175: ST_TO_ADDR
// end ; end ;
49176: LD_VAR 0 5
49180: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49181: LD_INT 0
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
// if not list then
49187: LD_VAR 0 3
49191: NOT
49192: IFFALSE 49196
// exit ;
49194: GO 49584
// result := [ ] ;
49196: LD_ADDR_VAR 0 6
49200: PUSH
49201: EMPTY
49202: ST_TO_ADDR
// for i in list do
49203: LD_ADDR_VAR 0 7
49207: PUSH
49208: LD_VAR 0 3
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49416
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49216: LD_ADDR_VAR 0 9
49220: PUSH
49221: LD_VAR 0 7
49225: PPUSH
49226: LD_VAR 0 1
49230: PPUSH
49231: LD_VAR 0 2
49235: PPUSH
49236: CALL_OW 297
49240: ST_TO_ADDR
// if not result then
49241: LD_VAR 0 6
49245: NOT
49246: IFFALSE 49272
// result := [ [ i , tmp ] ] else
49248: LD_ADDR_VAR 0 6
49252: PUSH
49253: LD_VAR 0 7
49257: PUSH
49258: LD_VAR 0 9
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: ST_TO_ADDR
49270: GO 49414
// begin if result [ result ] [ 2 ] <= tmp then
49272: LD_VAR 0 6
49276: PUSH
49277: LD_VAR 0 6
49281: ARRAY
49282: PUSH
49283: LD_INT 2
49285: ARRAY
49286: PUSH
49287: LD_VAR 0 9
49291: LESSEQUAL
49292: IFFALSE 49334
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49294: LD_ADDR_VAR 0 6
49298: PUSH
49299: LD_VAR 0 6
49303: PPUSH
49304: LD_VAR 0 6
49308: PUSH
49309: LD_INT 1
49311: PLUS
49312: PPUSH
49313: LD_VAR 0 7
49317: PUSH
49318: LD_VAR 0 9
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PPUSH
49327: CALL_OW 2
49331: ST_TO_ADDR
49332: GO 49414
// for j := 1 to result do
49334: LD_ADDR_VAR 0 8
49338: PUSH
49339: DOUBLE
49340: LD_INT 1
49342: DEC
49343: ST_TO_ADDR
49344: LD_VAR 0 6
49348: PUSH
49349: FOR_TO
49350: IFFALSE 49412
// begin if tmp < result [ j ] [ 2 ] then
49352: LD_VAR 0 9
49356: PUSH
49357: LD_VAR 0 6
49361: PUSH
49362: LD_VAR 0 8
49366: ARRAY
49367: PUSH
49368: LD_INT 2
49370: ARRAY
49371: LESS
49372: IFFALSE 49410
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49374: LD_ADDR_VAR 0 6
49378: PUSH
49379: LD_VAR 0 6
49383: PPUSH
49384: LD_VAR 0 8
49388: PPUSH
49389: LD_VAR 0 7
49393: PUSH
49394: LD_VAR 0 9
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PPUSH
49403: CALL_OW 2
49407: ST_TO_ADDR
// break ;
49408: GO 49412
// end ; end ;
49410: GO 49349
49412: POP
49413: POP
// end ; end ;
49414: GO 49213
49416: POP
49417: POP
// if result and not asc then
49418: LD_VAR 0 6
49422: PUSH
49423: LD_VAR 0 4
49427: NOT
49428: AND
49429: IFFALSE 49504
// begin tmp := result ;
49431: LD_ADDR_VAR 0 9
49435: PUSH
49436: LD_VAR 0 6
49440: ST_TO_ADDR
// for i = tmp downto 1 do
49441: LD_ADDR_VAR 0 7
49445: PUSH
49446: DOUBLE
49447: LD_VAR 0 9
49451: INC
49452: ST_TO_ADDR
49453: LD_INT 1
49455: PUSH
49456: FOR_DOWNTO
49457: IFFALSE 49502
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49459: LD_ADDR_VAR 0 6
49463: PUSH
49464: LD_VAR 0 6
49468: PPUSH
49469: LD_VAR 0 9
49473: PUSH
49474: LD_VAR 0 7
49478: MINUS
49479: PUSH
49480: LD_INT 1
49482: PLUS
49483: PPUSH
49484: LD_VAR 0 9
49488: PUSH
49489: LD_VAR 0 7
49493: ARRAY
49494: PPUSH
49495: CALL_OW 1
49499: ST_TO_ADDR
49500: GO 49456
49502: POP
49503: POP
// end ; tmp := [ ] ;
49504: LD_ADDR_VAR 0 9
49508: PUSH
49509: EMPTY
49510: ST_TO_ADDR
// if mode then
49511: LD_VAR 0 5
49515: IFFALSE 49584
// begin for i = 1 to result do
49517: LD_ADDR_VAR 0 7
49521: PUSH
49522: DOUBLE
49523: LD_INT 1
49525: DEC
49526: ST_TO_ADDR
49527: LD_VAR 0 6
49531: PUSH
49532: FOR_TO
49533: IFFALSE 49572
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49535: LD_ADDR_VAR 0 9
49539: PUSH
49540: LD_VAR 0 9
49544: PPUSH
49545: LD_VAR 0 7
49549: PPUSH
49550: LD_VAR 0 6
49554: PUSH
49555: LD_VAR 0 7
49559: ARRAY
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: PPUSH
49565: CALL_OW 1
49569: ST_TO_ADDR
49570: GO 49532
49572: POP
49573: POP
// result := tmp ;
49574: LD_ADDR_VAR 0 6
49578: PUSH
49579: LD_VAR 0 9
49583: ST_TO_ADDR
// end ; end ;
49584: LD_VAR 0 6
49588: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49589: LD_INT 0
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49597: LD_ADDR_VAR 0 5
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// if not x or not y then
49619: LD_VAR 0 2
49623: NOT
49624: PUSH
49625: LD_VAR 0 3
49629: NOT
49630: OR
49631: IFFALSE 49635
// exit ;
49633: GO 51285
// if not range then
49635: LD_VAR 0 4
49639: NOT
49640: IFFALSE 49650
// range := 10 ;
49642: LD_ADDR_VAR 0 4
49646: PUSH
49647: LD_INT 10
49649: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49650: LD_ADDR_VAR 0 8
49654: PUSH
49655: LD_INT 81
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 92
49669: PUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_VAR 0 3
49679: PUSH
49680: LD_VAR 0 4
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 21
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: LIST
49712: PPUSH
49713: CALL_OW 69
49717: ST_TO_ADDR
// if not tmp then
49718: LD_VAR 0 8
49722: NOT
49723: IFFALSE 49727
// exit ;
49725: GO 51285
// for i in tmp do
49727: LD_ADDR_VAR 0 6
49731: PUSH
49732: LD_VAR 0 8
49736: PUSH
49737: FOR_IN
49738: IFFALSE 51260
// begin points := [ 0 , 0 , 0 ] ;
49740: LD_ADDR_VAR 0 9
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// bpoints := 1 ;
49759: LD_ADDR_VAR 0 10
49763: PUSH
49764: LD_INT 1
49766: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49767: LD_VAR 0 6
49771: PPUSH
49772: CALL_OW 247
49776: PUSH
49777: LD_INT 1
49779: DOUBLE
49780: EQUAL
49781: IFTRUE 49785
49783: GO 50363
49785: POP
// begin if GetClass ( i ) = 1 then
49786: LD_VAR 0 6
49790: PPUSH
49791: CALL_OW 257
49795: PUSH
49796: LD_INT 1
49798: EQUAL
49799: IFFALSE 49820
// points := [ 10 , 5 , 3 ] ;
49801: LD_ADDR_VAR 0 9
49805: PUSH
49806: LD_INT 10
49808: PUSH
49809: LD_INT 5
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49820: LD_VAR 0 6
49824: PPUSH
49825: CALL_OW 257
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: IN
49844: IFFALSE 49865
// points := [ 3 , 2 , 1 ] ;
49846: LD_ADDR_VAR 0 9
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49865: LD_VAR 0 6
49869: PPUSH
49870: CALL_OW 257
49874: PUSH
49875: LD_INT 5
49877: EQUAL
49878: IFFALSE 49899
// points := [ 130 , 5 , 2 ] ;
49880: LD_ADDR_VAR 0 9
49884: PUSH
49885: LD_INT 130
49887: PUSH
49888: LD_INT 5
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49899: LD_VAR 0 6
49903: PPUSH
49904: CALL_OW 257
49908: PUSH
49909: LD_INT 8
49911: EQUAL
49912: IFFALSE 49933
// points := [ 35 , 35 , 30 ] ;
49914: LD_ADDR_VAR 0 9
49918: PUSH
49919: LD_INT 35
49921: PUSH
49922: LD_INT 35
49924: PUSH
49925: LD_INT 30
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49933: LD_VAR 0 6
49937: PPUSH
49938: CALL_OW 257
49942: PUSH
49943: LD_INT 9
49945: EQUAL
49946: IFFALSE 49967
// points := [ 20 , 55 , 40 ] ;
49948: LD_ADDR_VAR 0 9
49952: PUSH
49953: LD_INT 20
49955: PUSH
49956: LD_INT 55
49958: PUSH
49959: LD_INT 40
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49967: LD_VAR 0 6
49971: PPUSH
49972: CALL_OW 257
49976: PUSH
49977: LD_INT 12
49979: PUSH
49980: LD_INT 16
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: IN
49987: IFFALSE 50008
// points := [ 5 , 3 , 2 ] ;
49989: LD_ADDR_VAR 0 9
49993: PUSH
49994: LD_INT 5
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: LIST
50007: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50008: LD_VAR 0 6
50012: PPUSH
50013: CALL_OW 257
50017: PUSH
50018: LD_INT 17
50020: EQUAL
50021: IFFALSE 50042
// points := [ 100 , 50 , 75 ] ;
50023: LD_ADDR_VAR 0 9
50027: PUSH
50028: LD_INT 100
50030: PUSH
50031: LD_INT 50
50033: PUSH
50034: LD_INT 75
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50042: LD_VAR 0 6
50046: PPUSH
50047: CALL_OW 257
50051: PUSH
50052: LD_INT 15
50054: EQUAL
50055: IFFALSE 50076
// points := [ 10 , 5 , 3 ] ;
50057: LD_ADDR_VAR 0 9
50061: PUSH
50062: LD_INT 10
50064: PUSH
50065: LD_INT 5
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50076: LD_VAR 0 6
50080: PPUSH
50081: CALL_OW 257
50085: PUSH
50086: LD_INT 14
50088: EQUAL
50089: IFFALSE 50110
// points := [ 10 , 0 , 0 ] ;
50091: LD_ADDR_VAR 0 9
50095: PUSH
50096: LD_INT 10
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50110: LD_VAR 0 6
50114: PPUSH
50115: CALL_OW 257
50119: PUSH
50120: LD_INT 11
50122: EQUAL
50123: IFFALSE 50144
// points := [ 30 , 10 , 5 ] ;
50125: LD_ADDR_VAR 0 9
50129: PUSH
50130: LD_INT 30
50132: PUSH
50133: LD_INT 10
50135: PUSH
50136: LD_INT 5
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50144: LD_VAR 0 1
50148: PPUSH
50149: LD_INT 5
50151: PPUSH
50152: CALL_OW 321
50156: PUSH
50157: LD_INT 2
50159: EQUAL
50160: IFFALSE 50177
// bpoints := bpoints * 1.8 ;
50162: LD_ADDR_VAR 0 10
50166: PUSH
50167: LD_VAR 0 10
50171: PUSH
50172: LD_REAL  1.80000000000000E+0000
50175: MUL
50176: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50177: LD_VAR 0 6
50181: PPUSH
50182: CALL_OW 257
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 4
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: IN
50205: PUSH
50206: LD_VAR 0 1
50210: PPUSH
50211: LD_INT 51
50213: PPUSH
50214: CALL_OW 321
50218: PUSH
50219: LD_INT 2
50221: EQUAL
50222: AND
50223: IFFALSE 50240
// bpoints := bpoints * 1.2 ;
50225: LD_ADDR_VAR 0 10
50229: PUSH
50230: LD_VAR 0 10
50234: PUSH
50235: LD_REAL  1.20000000000000E+0000
50238: MUL
50239: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50240: LD_VAR 0 6
50244: PPUSH
50245: CALL_OW 257
50249: PUSH
50250: LD_INT 5
50252: PUSH
50253: LD_INT 7
50255: PUSH
50256: LD_INT 9
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: IN
50264: PUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: LD_INT 52
50272: PPUSH
50273: CALL_OW 321
50277: PUSH
50278: LD_INT 2
50280: EQUAL
50281: AND
50282: IFFALSE 50299
// bpoints := bpoints * 1.5 ;
50284: LD_ADDR_VAR 0 10
50288: PUSH
50289: LD_VAR 0 10
50293: PUSH
50294: LD_REAL  1.50000000000000E+0000
50297: MUL
50298: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50299: LD_VAR 0 1
50303: PPUSH
50304: LD_INT 66
50306: PPUSH
50307: CALL_OW 321
50311: PUSH
50312: LD_INT 2
50314: EQUAL
50315: IFFALSE 50332
// bpoints := bpoints * 1.1 ;
50317: LD_ADDR_VAR 0 10
50321: PUSH
50322: LD_VAR 0 10
50326: PUSH
50327: LD_REAL  1.10000000000000E+0000
50330: MUL
50331: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50332: LD_ADDR_VAR 0 10
50336: PUSH
50337: LD_VAR 0 10
50341: PUSH
50342: LD_VAR 0 6
50346: PPUSH
50347: LD_INT 1
50349: PPUSH
50350: CALL_OW 259
50354: PUSH
50355: LD_REAL  1.15000000000000E+0000
50358: MUL
50359: MUL
50360: ST_TO_ADDR
// end ; unit_vehicle :
50361: GO 51189
50363: LD_INT 2
50365: DOUBLE
50366: EQUAL
50367: IFTRUE 50371
50369: GO 51177
50371: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50372: LD_VAR 0 6
50376: PPUSH
50377: CALL_OW 264
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 42
50387: PUSH
50388: LD_INT 24
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: IN
50396: IFFALSE 50417
// points := [ 25 , 5 , 3 ] ;
50398: LD_ADDR_VAR 0 9
50402: PUSH
50403: LD_INT 25
50405: PUSH
50406: LD_INT 5
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50417: LD_VAR 0 6
50421: PPUSH
50422: CALL_OW 264
50426: PUSH
50427: LD_INT 4
50429: PUSH
50430: LD_INT 43
50432: PUSH
50433: LD_INT 25
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: IN
50441: IFFALSE 50462
// points := [ 40 , 15 , 5 ] ;
50443: LD_ADDR_VAR 0 9
50447: PUSH
50448: LD_INT 40
50450: PUSH
50451: LD_INT 15
50453: PUSH
50454: LD_INT 5
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50462: LD_VAR 0 6
50466: PPUSH
50467: CALL_OW 264
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 23
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: IN
50482: IFFALSE 50503
// points := [ 7 , 25 , 8 ] ;
50484: LD_ADDR_VAR 0 9
50488: PUSH
50489: LD_INT 7
50491: PUSH
50492: LD_INT 25
50494: PUSH
50495: LD_INT 8
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: LIST
50502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50503: LD_VAR 0 6
50507: PPUSH
50508: CALL_OW 264
50512: PUSH
50513: LD_INT 5
50515: PUSH
50516: LD_INT 27
50518: PUSH
50519: LD_INT 44
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: IN
50527: IFFALSE 50548
// points := [ 14 , 50 , 16 ] ;
50529: LD_ADDR_VAR 0 9
50533: PUSH
50534: LD_INT 14
50536: PUSH
50537: LD_INT 50
50539: PUSH
50540: LD_INT 16
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: LIST
50547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50548: LD_VAR 0 6
50552: PPUSH
50553: CALL_OW 264
50557: PUSH
50558: LD_INT 6
50560: PUSH
50561: LD_INT 46
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: IN
50568: IFFALSE 50589
// points := [ 32 , 120 , 70 ] ;
50570: LD_ADDR_VAR 0 9
50574: PUSH
50575: LD_INT 32
50577: PUSH
50578: LD_INT 120
50580: PUSH
50581: LD_INT 70
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50589: LD_VAR 0 6
50593: PPUSH
50594: CALL_OW 264
50598: PUSH
50599: LD_INT 7
50601: PUSH
50602: LD_INT 28
50604: PUSH
50605: LD_INT 45
50607: PUSH
50608: LD_INT 92
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: IN
50617: IFFALSE 50638
// points := [ 35 , 20 , 45 ] ;
50619: LD_ADDR_VAR 0 9
50623: PUSH
50624: LD_INT 35
50626: PUSH
50627: LD_INT 20
50629: PUSH
50630: LD_INT 45
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50638: LD_VAR 0 6
50642: PPUSH
50643: CALL_OW 264
50647: PUSH
50648: LD_INT 47
50650: PUSH
50651: EMPTY
50652: LIST
50653: IN
50654: IFFALSE 50675
// points := [ 67 , 45 , 75 ] ;
50656: LD_ADDR_VAR 0 9
50660: PUSH
50661: LD_INT 67
50663: PUSH
50664: LD_INT 45
50666: PUSH
50667: LD_INT 75
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50675: LD_VAR 0 6
50679: PPUSH
50680: CALL_OW 264
50684: PUSH
50685: LD_INT 26
50687: PUSH
50688: EMPTY
50689: LIST
50690: IN
50691: IFFALSE 50712
// points := [ 120 , 30 , 80 ] ;
50693: LD_ADDR_VAR 0 9
50697: PUSH
50698: LD_INT 120
50700: PUSH
50701: LD_INT 30
50703: PUSH
50704: LD_INT 80
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50712: LD_VAR 0 6
50716: PPUSH
50717: CALL_OW 264
50721: PUSH
50722: LD_INT 22
50724: PUSH
50725: EMPTY
50726: LIST
50727: IN
50728: IFFALSE 50749
// points := [ 40 , 1 , 1 ] ;
50730: LD_ADDR_VAR 0 9
50734: PUSH
50735: LD_INT 40
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: LIST
50748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50749: LD_VAR 0 6
50753: PPUSH
50754: CALL_OW 264
50758: PUSH
50759: LD_INT 29
50761: PUSH
50762: EMPTY
50763: LIST
50764: IN
50765: IFFALSE 50786
// points := [ 70 , 200 , 400 ] ;
50767: LD_ADDR_VAR 0 9
50771: PUSH
50772: LD_INT 70
50774: PUSH
50775: LD_INT 200
50777: PUSH
50778: LD_INT 400
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50786: LD_VAR 0 6
50790: PPUSH
50791: CALL_OW 264
50795: PUSH
50796: LD_INT 14
50798: PUSH
50799: LD_INT 53
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: IN
50806: IFFALSE 50827
// points := [ 40 , 10 , 20 ] ;
50808: LD_ADDR_VAR 0 9
50812: PUSH
50813: LD_INT 40
50815: PUSH
50816: LD_INT 10
50818: PUSH
50819: LD_INT 20
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50827: LD_VAR 0 6
50831: PPUSH
50832: CALL_OW 264
50836: PUSH
50837: LD_INT 9
50839: PUSH
50840: EMPTY
50841: LIST
50842: IN
50843: IFFALSE 50864
// points := [ 5 , 70 , 20 ] ;
50845: LD_ADDR_VAR 0 9
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: LD_INT 70
50855: PUSH
50856: LD_INT 20
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50864: LD_VAR 0 6
50868: PPUSH
50869: CALL_OW 264
50873: PUSH
50874: LD_INT 10
50876: PUSH
50877: EMPTY
50878: LIST
50879: IN
50880: IFFALSE 50901
// points := [ 35 , 110 , 70 ] ;
50882: LD_ADDR_VAR 0 9
50886: PUSH
50887: LD_INT 35
50889: PUSH
50890: LD_INT 110
50892: PUSH
50893: LD_INT 70
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50901: LD_VAR 0 6
50905: PPUSH
50906: CALL_OW 265
50910: PUSH
50911: LD_INT 25
50913: EQUAL
50914: IFFALSE 50935
// points := [ 80 , 65 , 100 ] ;
50916: LD_ADDR_VAR 0 9
50920: PUSH
50921: LD_INT 80
50923: PUSH
50924: LD_INT 65
50926: PUSH
50927: LD_INT 100
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50935: LD_VAR 0 6
50939: PPUSH
50940: CALL_OW 263
50944: PUSH
50945: LD_INT 1
50947: EQUAL
50948: IFFALSE 50983
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50950: LD_ADDR_VAR 0 10
50954: PUSH
50955: LD_VAR 0 10
50959: PUSH
50960: LD_VAR 0 6
50964: PPUSH
50965: CALL_OW 311
50969: PPUSH
50970: LD_INT 3
50972: PPUSH
50973: CALL_OW 259
50977: PUSH
50978: LD_INT 4
50980: MUL
50981: MUL
50982: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50983: LD_VAR 0 6
50987: PPUSH
50988: CALL_OW 263
50992: PUSH
50993: LD_INT 2
50995: EQUAL
50996: IFFALSE 51047
// begin j := IsControledBy ( i ) ;
50998: LD_ADDR_VAR 0 7
51002: PUSH
51003: LD_VAR 0 6
51007: PPUSH
51008: CALL_OW 312
51012: ST_TO_ADDR
// if j then
51013: LD_VAR 0 7
51017: IFFALSE 51047
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51019: LD_ADDR_VAR 0 10
51023: PUSH
51024: LD_VAR 0 10
51028: PUSH
51029: LD_VAR 0 7
51033: PPUSH
51034: LD_INT 3
51036: PPUSH
51037: CALL_OW 259
51041: PUSH
51042: LD_INT 3
51044: MUL
51045: MUL
51046: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51047: LD_VAR 0 6
51051: PPUSH
51052: CALL_OW 264
51056: PUSH
51057: LD_INT 5
51059: PUSH
51060: LD_INT 6
51062: PUSH
51063: LD_INT 46
51065: PUSH
51066: LD_INT 44
51068: PUSH
51069: LD_INT 47
51071: PUSH
51072: LD_INT 45
51074: PUSH
51075: LD_INT 28
51077: PUSH
51078: LD_INT 7
51080: PUSH
51081: LD_INT 27
51083: PUSH
51084: LD_INT 29
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: IN
51099: PUSH
51100: LD_VAR 0 1
51104: PPUSH
51105: LD_INT 52
51107: PPUSH
51108: CALL_OW 321
51112: PUSH
51113: LD_INT 2
51115: EQUAL
51116: AND
51117: IFFALSE 51134
// bpoints := bpoints * 1.2 ;
51119: LD_ADDR_VAR 0 10
51123: PUSH
51124: LD_VAR 0 10
51128: PUSH
51129: LD_REAL  1.20000000000000E+0000
51132: MUL
51133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51134: LD_VAR 0 6
51138: PPUSH
51139: CALL_OW 264
51143: PUSH
51144: LD_INT 6
51146: PUSH
51147: LD_INT 46
51149: PUSH
51150: LD_INT 47
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: IN
51158: IFFALSE 51175
// bpoints := bpoints * 1.2 ;
51160: LD_ADDR_VAR 0 10
51164: PUSH
51165: LD_VAR 0 10
51169: PUSH
51170: LD_REAL  1.20000000000000E+0000
51173: MUL
51174: ST_TO_ADDR
// end ; unit_building :
51175: GO 51189
51177: LD_INT 3
51179: DOUBLE
51180: EQUAL
51181: IFTRUE 51185
51183: GO 51188
51185: POP
// ; end ;
51186: GO 51189
51188: POP
// for j = 1 to 3 do
51189: LD_ADDR_VAR 0 7
51193: PUSH
51194: DOUBLE
51195: LD_INT 1
51197: DEC
51198: ST_TO_ADDR
51199: LD_INT 3
51201: PUSH
51202: FOR_TO
51203: IFFALSE 51256
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51205: LD_ADDR_VAR 0 5
51209: PUSH
51210: LD_VAR 0 5
51214: PPUSH
51215: LD_VAR 0 7
51219: PPUSH
51220: LD_VAR 0 5
51224: PUSH
51225: LD_VAR 0 7
51229: ARRAY
51230: PUSH
51231: LD_VAR 0 9
51235: PUSH
51236: LD_VAR 0 7
51240: ARRAY
51241: PUSH
51242: LD_VAR 0 10
51246: MUL
51247: PLUS
51248: PPUSH
51249: CALL_OW 1
51253: ST_TO_ADDR
51254: GO 51202
51256: POP
51257: POP
// end ;
51258: GO 49737
51260: POP
51261: POP
// result := Replace ( result , 4 , tmp ) ;
51262: LD_ADDR_VAR 0 5
51266: PUSH
51267: LD_VAR 0 5
51271: PPUSH
51272: LD_INT 4
51274: PPUSH
51275: LD_VAR 0 8
51279: PPUSH
51280: CALL_OW 1
51284: ST_TO_ADDR
// end ;
51285: LD_VAR 0 5
51289: RET
// export function DangerAtRange ( unit , range ) ; begin
51290: LD_INT 0
51292: PPUSH
// if not unit then
51293: LD_VAR 0 1
51297: NOT
51298: IFFALSE 51302
// exit ;
51300: GO 51347
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51302: LD_ADDR_VAR 0 3
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 255
51316: PPUSH
51317: LD_VAR 0 1
51321: PPUSH
51322: CALL_OW 250
51326: PPUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: CALL_OW 251
51336: PPUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: CALL 49589 0 4
51346: ST_TO_ADDR
// end ;
51347: LD_VAR 0 3
51351: RET
// export function DangerInArea ( side , area ) ; begin
51352: LD_INT 0
51354: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51355: LD_ADDR_VAR 0 3
51359: PUSH
51360: LD_VAR 0 2
51364: PPUSH
51365: LD_INT 81
51367: PUSH
51368: LD_VAR 0 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PPUSH
51377: CALL_OW 70
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function IsExtension ( b ) ; begin
51387: LD_INT 0
51389: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51390: LD_ADDR_VAR 0 2
51394: PUSH
51395: LD_VAR 0 1
51399: PUSH
51400: LD_INT 23
51402: PUSH
51403: LD_INT 20
51405: PUSH
51406: LD_INT 22
51408: PUSH
51409: LD_INT 17
51411: PUSH
51412: LD_INT 24
51414: PUSH
51415: LD_INT 21
51417: PUSH
51418: LD_INT 19
51420: PUSH
51421: LD_INT 16
51423: PUSH
51424: LD_INT 25
51426: PUSH
51427: LD_INT 18
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: IN
51442: ST_TO_ADDR
// end ;
51443: LD_VAR 0 2
51447: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51448: LD_INT 0
51450: PPUSH
51451: PPUSH
51452: PPUSH
// result := [ ] ;
51453: LD_ADDR_VAR 0 4
51457: PUSH
51458: EMPTY
51459: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51460: LD_ADDR_VAR 0 5
51464: PUSH
51465: LD_VAR 0 2
51469: PPUSH
51470: LD_INT 21
51472: PUSH
51473: LD_INT 3
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PPUSH
51480: CALL_OW 70
51484: ST_TO_ADDR
// if not tmp then
51485: LD_VAR 0 5
51489: NOT
51490: IFFALSE 51494
// exit ;
51492: GO 51558
// if checkLink then
51494: LD_VAR 0 3
51498: IFFALSE 51548
// begin for i in tmp do
51500: LD_ADDR_VAR 0 6
51504: PUSH
51505: LD_VAR 0 5
51509: PUSH
51510: FOR_IN
51511: IFFALSE 51546
// if GetBase ( i ) <> base then
51513: LD_VAR 0 6
51517: PPUSH
51518: CALL_OW 274
51522: PUSH
51523: LD_VAR 0 1
51527: NONEQUAL
51528: IFFALSE 51544
// ComLinkToBase ( base , i ) ;
51530: LD_VAR 0 1
51534: PPUSH
51535: LD_VAR 0 6
51539: PPUSH
51540: CALL_OW 169
51544: GO 51510
51546: POP
51547: POP
// end ; result := tmp ;
51548: LD_ADDR_VAR 0 4
51552: PUSH
51553: LD_VAR 0 5
51557: ST_TO_ADDR
// end ;
51558: LD_VAR 0 4
51562: RET
// export function ComComplete ( units , b ) ; var i ; begin
51563: LD_INT 0
51565: PPUSH
51566: PPUSH
// if not units then
51567: LD_VAR 0 1
51571: NOT
51572: IFFALSE 51576
// exit ;
51574: GO 51666
// for i in units do
51576: LD_ADDR_VAR 0 4
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: FOR_IN
51587: IFFALSE 51664
// if BuildingStatus ( b ) = bs_build then
51589: LD_VAR 0 2
51593: PPUSH
51594: CALL_OW 461
51598: PUSH
51599: LD_INT 1
51601: EQUAL
51602: IFFALSE 51662
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51604: LD_VAR 0 4
51608: PPUSH
51609: LD_STRING h
51611: PUSH
51612: LD_VAR 0 2
51616: PPUSH
51617: CALL_OW 250
51621: PUSH
51622: LD_VAR 0 2
51626: PPUSH
51627: CALL_OW 251
51631: PUSH
51632: LD_VAR 0 2
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: PPUSH
51658: CALL_OW 446
51662: GO 51586
51664: POP
51665: POP
// end ;
51666: LD_VAR 0 3
51670: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51671: LD_INT 0
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51679: LD_VAR 0 1
51683: NOT
51684: PUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 263
51694: PUSH
51695: LD_INT 2
51697: NONEQUAL
51698: OR
51699: IFFALSE 51703
// exit ;
51701: GO 52019
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51703: LD_ADDR_VAR 0 6
51707: PUSH
51708: LD_INT 22
51710: PUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 255
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 30
51730: PUSH
51731: LD_INT 36
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 34
51740: PUSH
51741: LD_INT 31
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PPUSH
51757: CALL_OW 69
51761: ST_TO_ADDR
// if not tmp then
51762: LD_VAR 0 6
51766: NOT
51767: IFFALSE 51771
// exit ;
51769: GO 52019
// result := [ ] ;
51771: LD_ADDR_VAR 0 2
51775: PUSH
51776: EMPTY
51777: ST_TO_ADDR
// for i in tmp do
51778: LD_ADDR_VAR 0 3
51782: PUSH
51783: LD_VAR 0 6
51787: PUSH
51788: FOR_IN
51789: IFFALSE 51860
// begin t := UnitsInside ( i ) ;
51791: LD_ADDR_VAR 0 4
51795: PUSH
51796: LD_VAR 0 3
51800: PPUSH
51801: CALL_OW 313
51805: ST_TO_ADDR
// if t then
51806: LD_VAR 0 4
51810: IFFALSE 51858
// for j in t do
51812: LD_ADDR_VAR 0 7
51816: PUSH
51817: LD_VAR 0 4
51821: PUSH
51822: FOR_IN
51823: IFFALSE 51856
// result := Replace ( result , result + 1 , j ) ;
51825: LD_ADDR_VAR 0 2
51829: PUSH
51830: LD_VAR 0 2
51834: PPUSH
51835: LD_VAR 0 2
51839: PUSH
51840: LD_INT 1
51842: PLUS
51843: PPUSH
51844: LD_VAR 0 7
51848: PPUSH
51849: CALL_OW 1
51853: ST_TO_ADDR
51854: GO 51822
51856: POP
51857: POP
// end ;
51858: GO 51788
51860: POP
51861: POP
// if not result then
51862: LD_VAR 0 2
51866: NOT
51867: IFFALSE 51871
// exit ;
51869: GO 52019
// mech := result [ 1 ] ;
51871: LD_ADDR_VAR 0 5
51875: PUSH
51876: LD_VAR 0 2
51880: PUSH
51881: LD_INT 1
51883: ARRAY
51884: ST_TO_ADDR
// if result > 1 then
51885: LD_VAR 0 2
51889: PUSH
51890: LD_INT 1
51892: GREATER
51893: IFFALSE 52005
// begin for i = 2 to result do
51895: LD_ADDR_VAR 0 3
51899: PUSH
51900: DOUBLE
51901: LD_INT 2
51903: DEC
51904: ST_TO_ADDR
51905: LD_VAR 0 2
51909: PUSH
51910: FOR_TO
51911: IFFALSE 52003
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51913: LD_ADDR_VAR 0 4
51917: PUSH
51918: LD_VAR 0 2
51922: PUSH
51923: LD_VAR 0 3
51927: ARRAY
51928: PPUSH
51929: LD_INT 3
51931: PPUSH
51932: CALL_OW 259
51936: PUSH
51937: LD_VAR 0 2
51941: PUSH
51942: LD_VAR 0 3
51946: ARRAY
51947: PPUSH
51948: CALL_OW 432
51952: MINUS
51953: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51954: LD_VAR 0 4
51958: PUSH
51959: LD_VAR 0 5
51963: PPUSH
51964: LD_INT 3
51966: PPUSH
51967: CALL_OW 259
51971: PUSH
51972: LD_VAR 0 5
51976: PPUSH
51977: CALL_OW 432
51981: MINUS
51982: GREATEREQUAL
51983: IFFALSE 52001
// mech := result [ i ] ;
51985: LD_ADDR_VAR 0 5
51989: PUSH
51990: LD_VAR 0 2
51994: PUSH
51995: LD_VAR 0 3
51999: ARRAY
52000: ST_TO_ADDR
// end ;
52001: GO 51910
52003: POP
52004: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52005: LD_VAR 0 1
52009: PPUSH
52010: LD_VAR 0 5
52014: PPUSH
52015: CALL_OW 135
// end ;
52019: LD_VAR 0 2
52023: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52024: LD_INT 0
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
// result := [ ] ;
52039: LD_ADDR_VAR 0 7
52043: PUSH
52044: EMPTY
52045: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 266
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: IN
52066: NOT
52067: IFFALSE 52071
// exit ;
52069: GO 53705
// if name then
52071: LD_VAR 0 3
52075: IFFALSE 52091
// SetBName ( base_dep , name ) ;
52077: LD_VAR 0 1
52081: PPUSH
52082: LD_VAR 0 3
52086: PPUSH
52087: CALL_OW 500
// base := GetBase ( base_dep ) ;
52091: LD_ADDR_VAR 0 15
52095: PUSH
52096: LD_VAR 0 1
52100: PPUSH
52101: CALL_OW 274
52105: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52106: LD_ADDR_VAR 0 16
52110: PUSH
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL_OW 255
52120: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52121: LD_ADDR_VAR 0 17
52125: PUSH
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 248
52135: ST_TO_ADDR
// if sources then
52136: LD_VAR 0 5
52140: IFFALSE 52187
// for i = 1 to 3 do
52142: LD_ADDR_VAR 0 8
52146: PUSH
52147: DOUBLE
52148: LD_INT 1
52150: DEC
52151: ST_TO_ADDR
52152: LD_INT 3
52154: PUSH
52155: FOR_TO
52156: IFFALSE 52185
// AddResourceType ( base , i , sources [ i ] ) ;
52158: LD_VAR 0 15
52162: PPUSH
52163: LD_VAR 0 8
52167: PPUSH
52168: LD_VAR 0 5
52172: PUSH
52173: LD_VAR 0 8
52177: ARRAY
52178: PPUSH
52179: CALL_OW 276
52183: GO 52155
52185: POP
52186: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52187: LD_ADDR_VAR 0 18
52191: PUSH
52192: LD_VAR 0 15
52196: PPUSH
52197: LD_VAR 0 2
52201: PPUSH
52202: LD_INT 1
52204: PPUSH
52205: CALL 51448 0 3
52209: ST_TO_ADDR
// InitHc ;
52210: CALL_OW 19
// InitUc ;
52214: CALL_OW 18
// uc_side := side ;
52218: LD_ADDR_OWVAR 20
52222: PUSH
52223: LD_VAR 0 16
52227: ST_TO_ADDR
// uc_nation := nation ;
52228: LD_ADDR_OWVAR 21
52232: PUSH
52233: LD_VAR 0 17
52237: ST_TO_ADDR
// if buildings then
52238: LD_VAR 0 18
52242: IFFALSE 53564
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52244: LD_ADDR_VAR 0 19
52248: PUSH
52249: LD_VAR 0 18
52253: PPUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 30
52259: PUSH
52260: LD_INT 29
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 30
52269: PUSH
52270: LD_INT 30
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: PPUSH
52282: CALL_OW 72
52286: ST_TO_ADDR
// if tmp then
52287: LD_VAR 0 19
52291: IFFALSE 52339
// for i in tmp do
52293: LD_ADDR_VAR 0 8
52297: PUSH
52298: LD_VAR 0 19
52302: PUSH
52303: FOR_IN
52304: IFFALSE 52337
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52306: LD_VAR 0 8
52310: PPUSH
52311: CALL_OW 250
52315: PPUSH
52316: LD_VAR 0 8
52320: PPUSH
52321: CALL_OW 251
52325: PPUSH
52326: LD_VAR 0 16
52330: PPUSH
52331: CALL_OW 441
52335: GO 52303
52337: POP
52338: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52339: LD_VAR 0 18
52343: PPUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 30
52349: PUSH
52350: LD_INT 32
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 30
52359: PUSH
52360: LD_INT 33
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: PPUSH
52372: CALL_OW 72
52376: IFFALSE 52464
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52378: LD_ADDR_VAR 0 8
52382: PUSH
52383: LD_VAR 0 18
52387: PPUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 30
52393: PUSH
52394: LD_INT 32
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 30
52403: PUSH
52404: LD_INT 33
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: PPUSH
52416: CALL_OW 72
52420: PUSH
52421: FOR_IN
52422: IFFALSE 52462
// begin if not GetBWeapon ( i ) then
52424: LD_VAR 0 8
52428: PPUSH
52429: CALL_OW 269
52433: NOT
52434: IFFALSE 52460
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52436: LD_VAR 0 8
52440: PPUSH
52441: LD_VAR 0 8
52445: PPUSH
52446: LD_VAR 0 2
52450: PPUSH
52451: CALL 53710 0 2
52455: PPUSH
52456: CALL_OW 431
// end ;
52460: GO 52421
52462: POP
52463: POP
// end ; for i = 1 to personel do
52464: LD_ADDR_VAR 0 8
52468: PUSH
52469: DOUBLE
52470: LD_INT 1
52472: DEC
52473: ST_TO_ADDR
52474: LD_VAR 0 6
52478: PUSH
52479: FOR_TO
52480: IFFALSE 53544
// begin if i > 4 then
52482: LD_VAR 0 8
52486: PUSH
52487: LD_INT 4
52489: GREATER
52490: IFFALSE 52494
// break ;
52492: GO 53544
// case i of 1 :
52494: LD_VAR 0 8
52498: PUSH
52499: LD_INT 1
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 52587
52507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52508: LD_ADDR_VAR 0 12
52512: PUSH
52513: LD_VAR 0 18
52517: PPUSH
52518: LD_INT 22
52520: PUSH
52521: LD_VAR 0 16
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 58
52532: PUSH
52533: EMPTY
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 30
52541: PUSH
52542: LD_INT 32
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 30
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 30
52561: PUSH
52562: LD_INT 5
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: PPUSH
52580: CALL_OW 72
52584: ST_TO_ADDR
52585: GO 52809
52587: LD_INT 2
52589: DOUBLE
52590: EQUAL
52591: IFTRUE 52595
52593: GO 52657
52595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52596: LD_ADDR_VAR 0 12
52600: PUSH
52601: LD_VAR 0 18
52605: PPUSH
52606: LD_INT 22
52608: PUSH
52609: LD_VAR 0 16
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 30
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 30
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PPUSH
52650: CALL_OW 72
52654: ST_TO_ADDR
52655: GO 52809
52657: LD_INT 3
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52665
52663: GO 52727
52665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52666: LD_ADDR_VAR 0 12
52670: PUSH
52671: LD_VAR 0 18
52675: PPUSH
52676: LD_INT 22
52678: PUSH
52679: LD_VAR 0 16
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 30
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 30
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PPUSH
52720: CALL_OW 72
52724: ST_TO_ADDR
52725: GO 52809
52727: LD_INT 4
52729: DOUBLE
52730: EQUAL
52731: IFTRUE 52735
52733: GO 52808
52735: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52736: LD_ADDR_VAR 0 12
52740: PUSH
52741: LD_VAR 0 18
52745: PPUSH
52746: LD_INT 22
52748: PUSH
52749: LD_VAR 0 16
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 30
52763: PUSH
52764: LD_INT 6
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 30
52773: PUSH
52774: LD_INT 7
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 30
52783: PUSH
52784: LD_INT 8
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PPUSH
52801: CALL_OW 72
52805: ST_TO_ADDR
52806: GO 52809
52808: POP
// if i = 1 then
52809: LD_VAR 0 8
52813: PUSH
52814: LD_INT 1
52816: EQUAL
52817: IFFALSE 52928
// begin tmp := [ ] ;
52819: LD_ADDR_VAR 0 19
52823: PUSH
52824: EMPTY
52825: ST_TO_ADDR
// for j in f do
52826: LD_ADDR_VAR 0 9
52830: PUSH
52831: LD_VAR 0 12
52835: PUSH
52836: FOR_IN
52837: IFFALSE 52910
// if GetBType ( j ) = b_bunker then
52839: LD_VAR 0 9
52843: PPUSH
52844: CALL_OW 266
52848: PUSH
52849: LD_INT 32
52851: EQUAL
52852: IFFALSE 52879
// tmp := Insert ( tmp , 1 , j ) else
52854: LD_ADDR_VAR 0 19
52858: PUSH
52859: LD_VAR 0 19
52863: PPUSH
52864: LD_INT 1
52866: PPUSH
52867: LD_VAR 0 9
52871: PPUSH
52872: CALL_OW 2
52876: ST_TO_ADDR
52877: GO 52908
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52879: LD_ADDR_VAR 0 19
52883: PUSH
52884: LD_VAR 0 19
52888: PPUSH
52889: LD_VAR 0 19
52893: PUSH
52894: LD_INT 1
52896: PLUS
52897: PPUSH
52898: LD_VAR 0 9
52902: PPUSH
52903: CALL_OW 2
52907: ST_TO_ADDR
52908: GO 52836
52910: POP
52911: POP
// if tmp then
52912: LD_VAR 0 19
52916: IFFALSE 52928
// f := tmp ;
52918: LD_ADDR_VAR 0 12
52922: PUSH
52923: LD_VAR 0 19
52927: ST_TO_ADDR
// end ; x := personel [ i ] ;
52928: LD_ADDR_VAR 0 13
52932: PUSH
52933: LD_VAR 0 6
52937: PUSH
52938: LD_VAR 0 8
52942: ARRAY
52943: ST_TO_ADDR
// if x = - 1 then
52944: LD_VAR 0 13
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: EQUAL
52953: IFFALSE 53162
// begin for j in f do
52955: LD_ADDR_VAR 0 9
52959: PUSH
52960: LD_VAR 0 12
52964: PUSH
52965: FOR_IN
52966: IFFALSE 53158
// repeat InitHc ;
52968: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52972: LD_VAR 0 9
52976: PPUSH
52977: CALL_OW 266
52981: PUSH
52982: LD_INT 5
52984: EQUAL
52985: IFFALSE 53055
// begin if UnitsInside ( j ) < 3 then
52987: LD_VAR 0 9
52991: PPUSH
52992: CALL_OW 313
52996: PUSH
52997: LD_INT 3
52999: LESS
53000: IFFALSE 53036
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53002: LD_INT 0
53004: PPUSH
53005: LD_INT 5
53007: PUSH
53008: LD_INT 8
53010: PUSH
53011: LD_INT 9
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: PUSH
53019: LD_VAR 0 17
53023: ARRAY
53024: PPUSH
53025: LD_VAR 0 4
53029: PPUSH
53030: CALL_OW 380
53034: GO 53053
// PrepareHuman ( false , i , skill ) ;
53036: LD_INT 0
53038: PPUSH
53039: LD_VAR 0 8
53043: PPUSH
53044: LD_VAR 0 4
53048: PPUSH
53049: CALL_OW 380
// end else
53053: GO 53072
// PrepareHuman ( false , i , skill ) ;
53055: LD_INT 0
53057: PPUSH
53058: LD_VAR 0 8
53062: PPUSH
53063: LD_VAR 0 4
53067: PPUSH
53068: CALL_OW 380
// un := CreateHuman ;
53072: LD_ADDR_VAR 0 14
53076: PUSH
53077: CALL_OW 44
53081: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53082: LD_ADDR_VAR 0 7
53086: PUSH
53087: LD_VAR 0 7
53091: PPUSH
53092: LD_INT 1
53094: PPUSH
53095: LD_VAR 0 14
53099: PPUSH
53100: CALL_OW 2
53104: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53105: LD_VAR 0 14
53109: PPUSH
53110: LD_VAR 0 9
53114: PPUSH
53115: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53119: LD_VAR 0 9
53123: PPUSH
53124: CALL_OW 313
53128: PUSH
53129: LD_INT 6
53131: EQUAL
53132: PUSH
53133: LD_VAR 0 9
53137: PPUSH
53138: CALL_OW 266
53142: PUSH
53143: LD_INT 32
53145: PUSH
53146: LD_INT 31
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: IN
53153: OR
53154: IFFALSE 52968
53156: GO 52965
53158: POP
53159: POP
// end else
53160: GO 53542
// for j = 1 to x do
53162: LD_ADDR_VAR 0 9
53166: PUSH
53167: DOUBLE
53168: LD_INT 1
53170: DEC
53171: ST_TO_ADDR
53172: LD_VAR 0 13
53176: PUSH
53177: FOR_TO
53178: IFFALSE 53540
// begin InitHc ;
53180: CALL_OW 19
// if not f then
53184: LD_VAR 0 12
53188: NOT
53189: IFFALSE 53278
// begin PrepareHuman ( false , i , skill ) ;
53191: LD_INT 0
53193: PPUSH
53194: LD_VAR 0 8
53198: PPUSH
53199: LD_VAR 0 4
53203: PPUSH
53204: CALL_OW 380
// un := CreateHuman ;
53208: LD_ADDR_VAR 0 14
53212: PUSH
53213: CALL_OW 44
53217: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53218: LD_ADDR_VAR 0 7
53222: PUSH
53223: LD_VAR 0 7
53227: PPUSH
53228: LD_INT 1
53230: PPUSH
53231: LD_VAR 0 14
53235: PPUSH
53236: CALL_OW 2
53240: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53241: LD_VAR 0 14
53245: PPUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 250
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 251
53265: PPUSH
53266: LD_INT 10
53268: PPUSH
53269: LD_INT 0
53271: PPUSH
53272: CALL_OW 50
// continue ;
53276: GO 53177
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53278: LD_VAR 0 12
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PPUSH
53287: CALL_OW 313
53291: PUSH
53292: LD_VAR 0 12
53296: PUSH
53297: LD_INT 1
53299: ARRAY
53300: PPUSH
53301: CALL_OW 266
53305: PUSH
53306: LD_INT 32
53308: PUSH
53309: LD_INT 31
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: IN
53316: AND
53317: PUSH
53318: LD_VAR 0 12
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PPUSH
53327: CALL_OW 313
53331: PUSH
53332: LD_INT 6
53334: EQUAL
53335: OR
53336: IFFALSE 53356
// f := Delete ( f , 1 ) ;
53338: LD_ADDR_VAR 0 12
53342: PUSH
53343: LD_VAR 0 12
53347: PPUSH
53348: LD_INT 1
53350: PPUSH
53351: CALL_OW 3
53355: ST_TO_ADDR
// if not f then
53356: LD_VAR 0 12
53360: NOT
53361: IFFALSE 53379
// begin x := x + 2 ;
53363: LD_ADDR_VAR 0 13
53367: PUSH
53368: LD_VAR 0 13
53372: PUSH
53373: LD_INT 2
53375: PLUS
53376: ST_TO_ADDR
// continue ;
53377: GO 53177
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53379: LD_VAR 0 12
53383: PUSH
53384: LD_INT 1
53386: ARRAY
53387: PPUSH
53388: CALL_OW 266
53392: PUSH
53393: LD_INT 5
53395: EQUAL
53396: IFFALSE 53470
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53398: LD_VAR 0 12
53402: PUSH
53403: LD_INT 1
53405: ARRAY
53406: PPUSH
53407: CALL_OW 313
53411: PUSH
53412: LD_INT 3
53414: LESS
53415: IFFALSE 53451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53417: LD_INT 0
53419: PPUSH
53420: LD_INT 5
53422: PUSH
53423: LD_INT 8
53425: PUSH
53426: LD_INT 9
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: PUSH
53434: LD_VAR 0 17
53438: ARRAY
53439: PPUSH
53440: LD_VAR 0 4
53444: PPUSH
53445: CALL_OW 380
53449: GO 53468
// PrepareHuman ( false , i , skill ) ;
53451: LD_INT 0
53453: PPUSH
53454: LD_VAR 0 8
53458: PPUSH
53459: LD_VAR 0 4
53463: PPUSH
53464: CALL_OW 380
// end else
53468: GO 53487
// PrepareHuman ( false , i , skill ) ;
53470: LD_INT 0
53472: PPUSH
53473: LD_VAR 0 8
53477: PPUSH
53478: LD_VAR 0 4
53482: PPUSH
53483: CALL_OW 380
// un := CreateHuman ;
53487: LD_ADDR_VAR 0 14
53491: PUSH
53492: CALL_OW 44
53496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53497: LD_ADDR_VAR 0 7
53501: PUSH
53502: LD_VAR 0 7
53506: PPUSH
53507: LD_INT 1
53509: PPUSH
53510: LD_VAR 0 14
53514: PPUSH
53515: CALL_OW 2
53519: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53520: LD_VAR 0 14
53524: PPUSH
53525: LD_VAR 0 12
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: CALL_OW 52
// end ;
53538: GO 53177
53540: POP
53541: POP
// end ;
53542: GO 52479
53544: POP
53545: POP
// result := result ^ buildings ;
53546: LD_ADDR_VAR 0 7
53550: PUSH
53551: LD_VAR 0 7
53555: PUSH
53556: LD_VAR 0 18
53560: ADD
53561: ST_TO_ADDR
// end else
53562: GO 53705
// begin for i = 1 to personel do
53564: LD_ADDR_VAR 0 8
53568: PUSH
53569: DOUBLE
53570: LD_INT 1
53572: DEC
53573: ST_TO_ADDR
53574: LD_VAR 0 6
53578: PUSH
53579: FOR_TO
53580: IFFALSE 53703
// begin if i > 4 then
53582: LD_VAR 0 8
53586: PUSH
53587: LD_INT 4
53589: GREATER
53590: IFFALSE 53594
// break ;
53592: GO 53703
// x := personel [ i ] ;
53594: LD_ADDR_VAR 0 13
53598: PUSH
53599: LD_VAR 0 6
53603: PUSH
53604: LD_VAR 0 8
53608: ARRAY
53609: ST_TO_ADDR
// if x = - 1 then
53610: LD_VAR 0 13
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: EQUAL
53619: IFFALSE 53623
// continue ;
53621: GO 53579
// PrepareHuman ( false , i , skill ) ;
53623: LD_INT 0
53625: PPUSH
53626: LD_VAR 0 8
53630: PPUSH
53631: LD_VAR 0 4
53635: PPUSH
53636: CALL_OW 380
// un := CreateHuman ;
53640: LD_ADDR_VAR 0 14
53644: PUSH
53645: CALL_OW 44
53649: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53650: LD_VAR 0 14
53654: PPUSH
53655: LD_VAR 0 1
53659: PPUSH
53660: CALL_OW 250
53664: PPUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 251
53674: PPUSH
53675: LD_INT 10
53677: PPUSH
53678: LD_INT 0
53680: PPUSH
53681: CALL_OW 50
// result := result ^ un ;
53685: LD_ADDR_VAR 0 7
53689: PUSH
53690: LD_VAR 0 7
53694: PUSH
53695: LD_VAR 0 14
53699: ADD
53700: ST_TO_ADDR
// end ;
53701: GO 53579
53703: POP
53704: POP
// end ; end ;
53705: LD_VAR 0 7
53709: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53710: LD_INT 0
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
// result := false ;
53728: LD_ADDR_VAR 0 3
53732: PUSH
53733: LD_INT 0
53735: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53736: LD_VAR 0 1
53740: NOT
53741: PUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: CALL_OW 266
53751: PUSH
53752: LD_INT 32
53754: PUSH
53755: LD_INT 33
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: IN
53762: NOT
53763: OR
53764: IFFALSE 53768
// exit ;
53766: GO 54877
// nat := GetNation ( tower ) ;
53768: LD_ADDR_VAR 0 12
53772: PUSH
53773: LD_VAR 0 1
53777: PPUSH
53778: CALL_OW 248
53782: ST_TO_ADDR
// side := GetSide ( tower ) ;
53783: LD_ADDR_VAR 0 16
53787: PUSH
53788: LD_VAR 0 1
53792: PPUSH
53793: CALL_OW 255
53797: ST_TO_ADDR
// x := GetX ( tower ) ;
53798: LD_ADDR_VAR 0 10
53802: PUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: CALL_OW 250
53812: ST_TO_ADDR
// y := GetY ( tower ) ;
53813: LD_ADDR_VAR 0 11
53817: PUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 251
53827: ST_TO_ADDR
// if not x or not y then
53828: LD_VAR 0 10
53832: NOT
53833: PUSH
53834: LD_VAR 0 11
53838: NOT
53839: OR
53840: IFFALSE 53844
// exit ;
53842: GO 54877
// weapon := 0 ;
53844: LD_ADDR_VAR 0 18
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// fac_list := [ ] ;
53852: LD_ADDR_VAR 0 17
53856: PUSH
53857: EMPTY
53858: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53859: LD_ADDR_VAR 0 6
53863: PUSH
53864: LD_VAR 0 1
53868: PPUSH
53869: CALL_OW 274
53873: PPUSH
53874: LD_VAR 0 2
53878: PPUSH
53879: LD_INT 0
53881: PPUSH
53882: CALL 51448 0 3
53886: PPUSH
53887: LD_INT 30
53889: PUSH
53890: LD_INT 3
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PPUSH
53897: CALL_OW 72
53901: ST_TO_ADDR
// if not factories then
53902: LD_VAR 0 6
53906: NOT
53907: IFFALSE 53911
// exit ;
53909: GO 54877
// for i in factories do
53911: LD_ADDR_VAR 0 8
53915: PUSH
53916: LD_VAR 0 6
53920: PUSH
53921: FOR_IN
53922: IFFALSE 53947
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53924: LD_ADDR_VAR 0 17
53928: PUSH
53929: LD_VAR 0 17
53933: PUSH
53934: LD_VAR 0 8
53938: PPUSH
53939: CALL_OW 478
53943: UNION
53944: ST_TO_ADDR
53945: GO 53921
53947: POP
53948: POP
// if not fac_list then
53949: LD_VAR 0 17
53953: NOT
53954: IFFALSE 53958
// exit ;
53956: GO 54877
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53958: LD_ADDR_VAR 0 5
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: LD_INT 5
53968: PUSH
53969: LD_INT 9
53971: PUSH
53972: LD_INT 10
53974: PUSH
53975: LD_INT 6
53977: PUSH
53978: LD_INT 7
53980: PUSH
53981: LD_INT 11
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 27
53995: PUSH
53996: LD_INT 28
53998: PUSH
53999: LD_INT 26
54001: PUSH
54002: LD_INT 30
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 43
54013: PUSH
54014: LD_INT 44
54016: PUSH
54017: LD_INT 46
54019: PUSH
54020: LD_INT 45
54022: PUSH
54023: LD_INT 47
54025: PUSH
54026: LD_INT 49
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: PUSH
54042: LD_VAR 0 12
54046: ARRAY
54047: ST_TO_ADDR
// list := list isect fac_list ;
54048: LD_ADDR_VAR 0 5
54052: PUSH
54053: LD_VAR 0 5
54057: PUSH
54058: LD_VAR 0 17
54062: ISECT
54063: ST_TO_ADDR
// if not list then
54064: LD_VAR 0 5
54068: NOT
54069: IFFALSE 54073
// exit ;
54071: GO 54877
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54073: LD_VAR 0 12
54077: PUSH
54078: LD_INT 3
54080: EQUAL
54081: PUSH
54082: LD_INT 49
54084: PUSH
54085: LD_VAR 0 5
54089: IN
54090: AND
54091: PUSH
54092: LD_INT 31
54094: PPUSH
54095: LD_VAR 0 16
54099: PPUSH
54100: CALL_OW 321
54104: PUSH
54105: LD_INT 2
54107: EQUAL
54108: AND
54109: IFFALSE 54169
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54111: LD_INT 22
54113: PUSH
54114: LD_VAR 0 16
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 35
54125: PUSH
54126: LD_INT 49
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 91
54135: PUSH
54136: LD_VAR 0 1
54140: PUSH
54141: LD_INT 10
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: PPUSH
54154: CALL_OW 69
54158: NOT
54159: IFFALSE 54169
// weapon := ru_time_lapser ;
54161: LD_ADDR_VAR 0 18
54165: PUSH
54166: LD_INT 49
54168: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54169: LD_VAR 0 12
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: IN
54184: PUSH
54185: LD_INT 11
54187: PUSH
54188: LD_VAR 0 5
54192: IN
54193: PUSH
54194: LD_INT 30
54196: PUSH
54197: LD_VAR 0 5
54201: IN
54202: OR
54203: AND
54204: PUSH
54205: LD_INT 6
54207: PPUSH
54208: LD_VAR 0 16
54212: PPUSH
54213: CALL_OW 321
54217: PUSH
54218: LD_INT 2
54220: EQUAL
54221: AND
54222: IFFALSE 54387
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54224: LD_INT 22
54226: PUSH
54227: LD_VAR 0 16
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: LD_INT 35
54241: PUSH
54242: LD_INT 11
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 35
54251: PUSH
54252: LD_INT 30
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 91
54266: PUSH
54267: LD_VAR 0 1
54271: PUSH
54272: LD_INT 18
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: PPUSH
54285: CALL_OW 69
54289: NOT
54290: PUSH
54291: LD_INT 22
54293: PUSH
54294: LD_VAR 0 16
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 30
54308: PUSH
54309: LD_INT 32
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 30
54318: PUSH
54319: LD_INT 33
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 91
54333: PUSH
54334: LD_VAR 0 1
54338: PUSH
54339: LD_INT 12
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: PPUSH
54355: CALL_OW 69
54359: PUSH
54360: LD_INT 2
54362: GREATER
54363: AND
54364: IFFALSE 54387
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54366: LD_ADDR_VAR 0 18
54370: PUSH
54371: LD_INT 11
54373: PUSH
54374: LD_INT 30
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_VAR 0 12
54385: ARRAY
54386: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54387: LD_VAR 0 18
54391: NOT
54392: PUSH
54393: LD_INT 40
54395: PPUSH
54396: LD_VAR 0 16
54400: PPUSH
54401: CALL_OW 321
54405: PUSH
54406: LD_INT 2
54408: EQUAL
54409: AND
54410: PUSH
54411: LD_INT 7
54413: PUSH
54414: LD_VAR 0 5
54418: IN
54419: PUSH
54420: LD_INT 28
54422: PUSH
54423: LD_VAR 0 5
54427: IN
54428: OR
54429: PUSH
54430: LD_INT 45
54432: PUSH
54433: LD_VAR 0 5
54437: IN
54438: OR
54439: AND
54440: IFFALSE 54694
// begin hex := GetHexInfo ( x , y ) ;
54442: LD_ADDR_VAR 0 4
54446: PUSH
54447: LD_VAR 0 10
54451: PPUSH
54452: LD_VAR 0 11
54456: PPUSH
54457: CALL_OW 546
54461: ST_TO_ADDR
// if hex [ 1 ] then
54462: LD_VAR 0 4
54466: PUSH
54467: LD_INT 1
54469: ARRAY
54470: IFFALSE 54474
// exit ;
54472: GO 54877
// height := hex [ 2 ] ;
54474: LD_ADDR_VAR 0 15
54478: PUSH
54479: LD_VAR 0 4
54483: PUSH
54484: LD_INT 2
54486: ARRAY
54487: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54488: LD_ADDR_VAR 0 14
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// for i in tmp do
54511: LD_ADDR_VAR 0 8
54515: PUSH
54516: LD_VAR 0 14
54520: PUSH
54521: FOR_IN
54522: IFFALSE 54692
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54524: LD_ADDR_VAR 0 9
54528: PUSH
54529: LD_VAR 0 10
54533: PPUSH
54534: LD_VAR 0 8
54538: PPUSH
54539: LD_INT 5
54541: PPUSH
54542: CALL_OW 272
54546: PUSH
54547: LD_VAR 0 11
54551: PPUSH
54552: LD_VAR 0 8
54556: PPUSH
54557: LD_INT 5
54559: PPUSH
54560: CALL_OW 273
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54569: LD_VAR 0 9
54573: PUSH
54574: LD_INT 1
54576: ARRAY
54577: PPUSH
54578: LD_VAR 0 9
54582: PUSH
54583: LD_INT 2
54585: ARRAY
54586: PPUSH
54587: CALL_OW 488
54591: IFFALSE 54690
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54593: LD_ADDR_VAR 0 4
54597: PUSH
54598: LD_VAR 0 9
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PPUSH
54607: LD_VAR 0 9
54611: PUSH
54612: LD_INT 2
54614: ARRAY
54615: PPUSH
54616: CALL_OW 546
54620: ST_TO_ADDR
// if hex [ 1 ] then
54621: LD_VAR 0 4
54625: PUSH
54626: LD_INT 1
54628: ARRAY
54629: IFFALSE 54633
// continue ;
54631: GO 54521
// h := hex [ 2 ] ;
54633: LD_ADDR_VAR 0 13
54637: PUSH
54638: LD_VAR 0 4
54642: PUSH
54643: LD_INT 2
54645: ARRAY
54646: ST_TO_ADDR
// if h + 7 < height then
54647: LD_VAR 0 13
54651: PUSH
54652: LD_INT 7
54654: PLUS
54655: PUSH
54656: LD_VAR 0 15
54660: LESS
54661: IFFALSE 54690
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54663: LD_ADDR_VAR 0 18
54667: PUSH
54668: LD_INT 7
54670: PUSH
54671: LD_INT 28
54673: PUSH
54674: LD_INT 45
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: PUSH
54682: LD_VAR 0 12
54686: ARRAY
54687: ST_TO_ADDR
// break ;
54688: GO 54692
// end ; end ; end ;
54690: GO 54521
54692: POP
54693: POP
// end ; if not weapon then
54694: LD_VAR 0 18
54698: NOT
54699: IFFALSE 54759
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54701: LD_ADDR_VAR 0 5
54705: PUSH
54706: LD_VAR 0 5
54710: PUSH
54711: LD_INT 11
54713: PUSH
54714: LD_INT 30
54716: PUSH
54717: LD_INT 49
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: DIFF
54725: ST_TO_ADDR
// if not list then
54726: LD_VAR 0 5
54730: NOT
54731: IFFALSE 54735
// exit ;
54733: GO 54877
// weapon := list [ rand ( 1 , list ) ] ;
54735: LD_ADDR_VAR 0 18
54739: PUSH
54740: LD_VAR 0 5
54744: PUSH
54745: LD_INT 1
54747: PPUSH
54748: LD_VAR 0 5
54752: PPUSH
54753: CALL_OW 12
54757: ARRAY
54758: ST_TO_ADDR
// end ; if weapon then
54759: LD_VAR 0 18
54763: IFFALSE 54877
// begin tmp := CostOfWeapon ( weapon ) ;
54765: LD_ADDR_VAR 0 14
54769: PUSH
54770: LD_VAR 0 18
54774: PPUSH
54775: CALL_OW 451
54779: ST_TO_ADDR
// j := GetBase ( tower ) ;
54780: LD_ADDR_VAR 0 9
54784: PUSH
54785: LD_VAR 0 1
54789: PPUSH
54790: CALL_OW 274
54794: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54795: LD_VAR 0 9
54799: PPUSH
54800: LD_INT 1
54802: PPUSH
54803: CALL_OW 275
54807: PUSH
54808: LD_VAR 0 14
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: GREATEREQUAL
54817: PUSH
54818: LD_VAR 0 9
54822: PPUSH
54823: LD_INT 2
54825: PPUSH
54826: CALL_OW 275
54830: PUSH
54831: LD_VAR 0 14
54835: PUSH
54836: LD_INT 2
54838: ARRAY
54839: GREATEREQUAL
54840: AND
54841: PUSH
54842: LD_VAR 0 9
54846: PPUSH
54847: LD_INT 3
54849: PPUSH
54850: CALL_OW 275
54854: PUSH
54855: LD_VAR 0 14
54859: PUSH
54860: LD_INT 3
54862: ARRAY
54863: GREATEREQUAL
54864: AND
54865: IFFALSE 54877
// result := weapon ;
54867: LD_ADDR_VAR 0 3
54871: PUSH
54872: LD_VAR 0 18
54876: ST_TO_ADDR
// end ; end ;
54877: LD_VAR 0 3
54881: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
// result := true ;
54886: LD_ADDR_VAR 0 3
54890: PUSH
54891: LD_INT 1
54893: ST_TO_ADDR
// if array1 = array2 then
54894: LD_VAR 0 1
54898: PUSH
54899: LD_VAR 0 2
54903: EQUAL
54904: IFFALSE 54964
// begin for i = 1 to array1 do
54906: LD_ADDR_VAR 0 4
54910: PUSH
54911: DOUBLE
54912: LD_INT 1
54914: DEC
54915: ST_TO_ADDR
54916: LD_VAR 0 1
54920: PUSH
54921: FOR_TO
54922: IFFALSE 54960
// if array1 [ i ] <> array2 [ i ] then
54924: LD_VAR 0 1
54928: PUSH
54929: LD_VAR 0 4
54933: ARRAY
54934: PUSH
54935: LD_VAR 0 2
54939: PUSH
54940: LD_VAR 0 4
54944: ARRAY
54945: NONEQUAL
54946: IFFALSE 54958
// begin result := false ;
54948: LD_ADDR_VAR 0 3
54952: PUSH
54953: LD_INT 0
54955: ST_TO_ADDR
// break ;
54956: GO 54960
// end ;
54958: GO 54921
54960: POP
54961: POP
// end else
54962: GO 54972
// result := false ;
54964: LD_ADDR_VAR 0 3
54968: PUSH
54969: LD_INT 0
54971: ST_TO_ADDR
// end ;
54972: LD_VAR 0 3
54976: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54977: LD_INT 0
54979: PPUSH
54980: PPUSH
// if not array1 or not array2 then
54981: LD_VAR 0 1
54985: NOT
54986: PUSH
54987: LD_VAR 0 2
54991: NOT
54992: OR
54993: IFFALSE 54997
// exit ;
54995: GO 55061
// result := true ;
54997: LD_ADDR_VAR 0 3
55001: PUSH
55002: LD_INT 1
55004: ST_TO_ADDR
// for i = 1 to array1 do
55005: LD_ADDR_VAR 0 4
55009: PUSH
55010: DOUBLE
55011: LD_INT 1
55013: DEC
55014: ST_TO_ADDR
55015: LD_VAR 0 1
55019: PUSH
55020: FOR_TO
55021: IFFALSE 55059
// if array1 [ i ] <> array2 [ i ] then
55023: LD_VAR 0 1
55027: PUSH
55028: LD_VAR 0 4
55032: ARRAY
55033: PUSH
55034: LD_VAR 0 2
55038: PUSH
55039: LD_VAR 0 4
55043: ARRAY
55044: NONEQUAL
55045: IFFALSE 55057
// begin result := false ;
55047: LD_ADDR_VAR 0 3
55051: PUSH
55052: LD_INT 0
55054: ST_TO_ADDR
// break ;
55055: GO 55059
// end ;
55057: GO 55020
55059: POP
55060: POP
// end ;
55061: LD_VAR 0 3
55065: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55066: LD_INT 0
55068: PPUSH
55069: PPUSH
55070: PPUSH
// pom := GetBase ( fac ) ;
55071: LD_ADDR_VAR 0 5
55075: PUSH
55076: LD_VAR 0 1
55080: PPUSH
55081: CALL_OW 274
55085: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55086: LD_ADDR_VAR 0 4
55090: PUSH
55091: LD_VAR 0 2
55095: PUSH
55096: LD_INT 1
55098: ARRAY
55099: PPUSH
55100: LD_VAR 0 2
55104: PUSH
55105: LD_INT 2
55107: ARRAY
55108: PPUSH
55109: LD_VAR 0 2
55113: PUSH
55114: LD_INT 3
55116: ARRAY
55117: PPUSH
55118: LD_VAR 0 2
55122: PUSH
55123: LD_INT 4
55125: ARRAY
55126: PPUSH
55127: CALL_OW 449
55131: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55132: LD_ADDR_VAR 0 3
55136: PUSH
55137: LD_VAR 0 5
55141: PPUSH
55142: LD_INT 1
55144: PPUSH
55145: CALL_OW 275
55149: PUSH
55150: LD_VAR 0 4
55154: PUSH
55155: LD_INT 1
55157: ARRAY
55158: GREATEREQUAL
55159: PUSH
55160: LD_VAR 0 5
55164: PPUSH
55165: LD_INT 2
55167: PPUSH
55168: CALL_OW 275
55172: PUSH
55173: LD_VAR 0 4
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: GREATEREQUAL
55182: AND
55183: PUSH
55184: LD_VAR 0 5
55188: PPUSH
55189: LD_INT 3
55191: PPUSH
55192: CALL_OW 275
55196: PUSH
55197: LD_VAR 0 4
55201: PUSH
55202: LD_INT 3
55204: ARRAY
55205: GREATEREQUAL
55206: AND
55207: ST_TO_ADDR
// end ;
55208: LD_VAR 0 3
55212: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55213: LD_INT 0
55215: PPUSH
55216: PPUSH
55217: PPUSH
55218: PPUSH
// pom := GetBase ( building ) ;
55219: LD_ADDR_VAR 0 3
55223: PUSH
55224: LD_VAR 0 1
55228: PPUSH
55229: CALL_OW 274
55233: ST_TO_ADDR
// if not pom then
55234: LD_VAR 0 3
55238: NOT
55239: IFFALSE 55243
// exit ;
55241: GO 55413
// btype := GetBType ( building ) ;
55243: LD_ADDR_VAR 0 5
55247: PUSH
55248: LD_VAR 0 1
55252: PPUSH
55253: CALL_OW 266
55257: ST_TO_ADDR
// if btype = b_armoury then
55258: LD_VAR 0 5
55262: PUSH
55263: LD_INT 4
55265: EQUAL
55266: IFFALSE 55276
// btype := b_barracks ;
55268: LD_ADDR_VAR 0 5
55272: PUSH
55273: LD_INT 5
55275: ST_TO_ADDR
// if btype = b_depot then
55276: LD_VAR 0 5
55280: PUSH
55281: LD_INT 0
55283: EQUAL
55284: IFFALSE 55294
// btype := b_warehouse ;
55286: LD_ADDR_VAR 0 5
55290: PUSH
55291: LD_INT 1
55293: ST_TO_ADDR
// if btype = b_workshop then
55294: LD_VAR 0 5
55298: PUSH
55299: LD_INT 2
55301: EQUAL
55302: IFFALSE 55312
// btype := b_factory ;
55304: LD_ADDR_VAR 0 5
55308: PUSH
55309: LD_INT 3
55311: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55312: LD_ADDR_VAR 0 4
55316: PUSH
55317: LD_VAR 0 5
55321: PPUSH
55322: LD_VAR 0 1
55326: PPUSH
55327: CALL_OW 248
55331: PPUSH
55332: CALL_OW 450
55336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55337: LD_ADDR_VAR 0 2
55341: PUSH
55342: LD_VAR 0 3
55346: PPUSH
55347: LD_INT 1
55349: PPUSH
55350: CALL_OW 275
55354: PUSH
55355: LD_VAR 0 4
55359: PUSH
55360: LD_INT 1
55362: ARRAY
55363: GREATEREQUAL
55364: PUSH
55365: LD_VAR 0 3
55369: PPUSH
55370: LD_INT 2
55372: PPUSH
55373: CALL_OW 275
55377: PUSH
55378: LD_VAR 0 4
55382: PUSH
55383: LD_INT 2
55385: ARRAY
55386: GREATEREQUAL
55387: AND
55388: PUSH
55389: LD_VAR 0 3
55393: PPUSH
55394: LD_INT 3
55396: PPUSH
55397: CALL_OW 275
55401: PUSH
55402: LD_VAR 0 4
55406: PUSH
55407: LD_INT 3
55409: ARRAY
55410: GREATEREQUAL
55411: AND
55412: ST_TO_ADDR
// end ;
55413: LD_VAR 0 2
55417: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55418: LD_INT 0
55420: PPUSH
55421: PPUSH
55422: PPUSH
// pom := GetBase ( building ) ;
55423: LD_ADDR_VAR 0 4
55427: PUSH
55428: LD_VAR 0 1
55432: PPUSH
55433: CALL_OW 274
55437: ST_TO_ADDR
// if not pom then
55438: LD_VAR 0 4
55442: NOT
55443: IFFALSE 55447
// exit ;
55445: GO 55548
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55447: LD_ADDR_VAR 0 5
55451: PUSH
55452: LD_VAR 0 2
55456: PPUSH
55457: LD_VAR 0 1
55461: PPUSH
55462: CALL_OW 248
55466: PPUSH
55467: CALL_OW 450
55471: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55472: LD_ADDR_VAR 0 3
55476: PUSH
55477: LD_VAR 0 4
55481: PPUSH
55482: LD_INT 1
55484: PPUSH
55485: CALL_OW 275
55489: PUSH
55490: LD_VAR 0 5
55494: PUSH
55495: LD_INT 1
55497: ARRAY
55498: GREATEREQUAL
55499: PUSH
55500: LD_VAR 0 4
55504: PPUSH
55505: LD_INT 2
55507: PPUSH
55508: CALL_OW 275
55512: PUSH
55513: LD_VAR 0 5
55517: PUSH
55518: LD_INT 2
55520: ARRAY
55521: GREATEREQUAL
55522: AND
55523: PUSH
55524: LD_VAR 0 4
55528: PPUSH
55529: LD_INT 3
55531: PPUSH
55532: CALL_OW 275
55536: PUSH
55537: LD_VAR 0 5
55541: PUSH
55542: LD_INT 3
55544: ARRAY
55545: GREATEREQUAL
55546: AND
55547: ST_TO_ADDR
// end ;
55548: LD_VAR 0 3
55552: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55553: LD_INT 0
55555: PPUSH
55556: PPUSH
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
55562: PPUSH
55563: PPUSH
55564: PPUSH
55565: PPUSH
// result := false ;
55566: LD_ADDR_VAR 0 8
55570: PUSH
55571: LD_INT 0
55573: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55574: LD_VAR 0 5
55578: NOT
55579: PUSH
55580: LD_VAR 0 1
55584: NOT
55585: OR
55586: PUSH
55587: LD_VAR 0 2
55591: NOT
55592: OR
55593: PUSH
55594: LD_VAR 0 3
55598: NOT
55599: OR
55600: IFFALSE 55604
// exit ;
55602: GO 56418
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55604: LD_ADDR_VAR 0 14
55608: PUSH
55609: LD_VAR 0 1
55613: PPUSH
55614: LD_VAR 0 2
55618: PPUSH
55619: LD_VAR 0 3
55623: PPUSH
55624: LD_VAR 0 4
55628: PPUSH
55629: LD_VAR 0 5
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PPUSH
55638: CALL_OW 248
55642: PPUSH
55643: LD_INT 0
55645: PPUSH
55646: CALL 57671 0 6
55650: ST_TO_ADDR
// if not hexes then
55651: LD_VAR 0 14
55655: NOT
55656: IFFALSE 55660
// exit ;
55658: GO 56418
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55660: LD_ADDR_VAR 0 17
55664: PUSH
55665: LD_VAR 0 5
55669: PPUSH
55670: LD_INT 22
55672: PUSH
55673: LD_VAR 0 13
55677: PPUSH
55678: CALL_OW 255
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 30
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 30
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PPUSH
55719: CALL_OW 72
55723: ST_TO_ADDR
// for i = 1 to hexes do
55724: LD_ADDR_VAR 0 9
55728: PUSH
55729: DOUBLE
55730: LD_INT 1
55732: DEC
55733: ST_TO_ADDR
55734: LD_VAR 0 14
55738: PUSH
55739: FOR_TO
55740: IFFALSE 56416
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55742: LD_ADDR_VAR 0 13
55746: PUSH
55747: LD_VAR 0 14
55751: PUSH
55752: LD_VAR 0 9
55756: ARRAY
55757: PUSH
55758: LD_INT 1
55760: ARRAY
55761: PPUSH
55762: LD_VAR 0 14
55766: PUSH
55767: LD_VAR 0 9
55771: ARRAY
55772: PUSH
55773: LD_INT 2
55775: ARRAY
55776: PPUSH
55777: CALL_OW 428
55781: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55782: LD_VAR 0 14
55786: PUSH
55787: LD_VAR 0 9
55791: ARRAY
55792: PUSH
55793: LD_INT 1
55795: ARRAY
55796: PPUSH
55797: LD_VAR 0 14
55801: PUSH
55802: LD_VAR 0 9
55806: ARRAY
55807: PUSH
55808: LD_INT 2
55810: ARRAY
55811: PPUSH
55812: CALL_OW 351
55816: PUSH
55817: LD_VAR 0 14
55821: PUSH
55822: LD_VAR 0 9
55826: ARRAY
55827: PUSH
55828: LD_INT 1
55830: ARRAY
55831: PPUSH
55832: LD_VAR 0 14
55836: PUSH
55837: LD_VAR 0 9
55841: ARRAY
55842: PUSH
55843: LD_INT 2
55845: ARRAY
55846: PPUSH
55847: CALL_OW 488
55851: NOT
55852: OR
55853: PUSH
55854: LD_VAR 0 13
55858: PPUSH
55859: CALL_OW 247
55863: PUSH
55864: LD_INT 3
55866: EQUAL
55867: OR
55868: IFFALSE 55874
// exit ;
55870: POP
55871: POP
55872: GO 56418
// if not tmp then
55874: LD_VAR 0 13
55878: NOT
55879: IFFALSE 55883
// continue ;
55881: GO 55739
// result := true ;
55883: LD_ADDR_VAR 0 8
55887: PUSH
55888: LD_INT 1
55890: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55891: LD_VAR 0 6
55895: PUSH
55896: LD_VAR 0 13
55900: PPUSH
55901: CALL_OW 247
55905: PUSH
55906: LD_INT 2
55908: EQUAL
55909: AND
55910: PUSH
55911: LD_VAR 0 13
55915: PPUSH
55916: CALL_OW 263
55920: PUSH
55921: LD_INT 1
55923: EQUAL
55924: AND
55925: IFFALSE 56089
// begin if IsDrivenBy ( tmp ) then
55927: LD_VAR 0 13
55931: PPUSH
55932: CALL_OW 311
55936: IFFALSE 55940
// continue ;
55938: GO 55739
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55940: LD_VAR 0 6
55944: PPUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 60
55950: PUSH
55951: EMPTY
55952: LIST
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 55
55963: PUSH
55964: EMPTY
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PPUSH
55975: CALL_OW 72
55979: IFFALSE 56087
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55981: LD_ADDR_VAR 0 18
55985: PUSH
55986: LD_VAR 0 6
55990: PPUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 60
55996: PUSH
55997: EMPTY
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: LD_INT 55
56009: PUSH
56010: EMPTY
56011: LIST
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PPUSH
56021: CALL_OW 72
56025: PUSH
56026: LD_INT 1
56028: ARRAY
56029: ST_TO_ADDR
// if IsInUnit ( driver ) then
56030: LD_VAR 0 18
56034: PPUSH
56035: CALL_OW 310
56039: IFFALSE 56050
// ComExit ( driver ) ;
56041: LD_VAR 0 18
56045: PPUSH
56046: CALL 81472 0 1
// AddComEnterUnit ( driver , tmp ) ;
56050: LD_VAR 0 18
56054: PPUSH
56055: LD_VAR 0 13
56059: PPUSH
56060: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56064: LD_VAR 0 18
56068: PPUSH
56069: LD_VAR 0 7
56073: PPUSH
56074: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56078: LD_VAR 0 18
56082: PPUSH
56083: CALL_OW 181
// end ; continue ;
56087: GO 55739
// end ; if not cleaners or not tmp in cleaners then
56089: LD_VAR 0 6
56093: NOT
56094: PUSH
56095: LD_VAR 0 13
56099: PUSH
56100: LD_VAR 0 6
56104: IN
56105: NOT
56106: OR
56107: IFFALSE 56414
// begin if dep then
56109: LD_VAR 0 17
56113: IFFALSE 56249
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56115: LD_ADDR_VAR 0 16
56119: PUSH
56120: LD_VAR 0 17
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: PPUSH
56129: CALL_OW 250
56133: PPUSH
56134: LD_VAR 0 17
56138: PUSH
56139: LD_INT 1
56141: ARRAY
56142: PPUSH
56143: CALL_OW 254
56147: PPUSH
56148: LD_INT 5
56150: PPUSH
56151: CALL_OW 272
56155: PUSH
56156: LD_VAR 0 17
56160: PUSH
56161: LD_INT 1
56163: ARRAY
56164: PPUSH
56165: CALL_OW 251
56169: PPUSH
56170: LD_VAR 0 17
56174: PUSH
56175: LD_INT 1
56177: ARRAY
56178: PPUSH
56179: CALL_OW 254
56183: PPUSH
56184: LD_INT 5
56186: PPUSH
56187: CALL_OW 273
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56196: LD_VAR 0 16
56200: PUSH
56201: LD_INT 1
56203: ARRAY
56204: PPUSH
56205: LD_VAR 0 16
56209: PUSH
56210: LD_INT 2
56212: ARRAY
56213: PPUSH
56214: CALL_OW 488
56218: IFFALSE 56249
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56220: LD_VAR 0 13
56224: PPUSH
56225: LD_VAR 0 16
56229: PUSH
56230: LD_INT 1
56232: ARRAY
56233: PPUSH
56234: LD_VAR 0 16
56238: PUSH
56239: LD_INT 2
56241: ARRAY
56242: PPUSH
56243: CALL_OW 111
// continue ;
56247: GO 55739
// end ; end ; r := GetDir ( tmp ) ;
56249: LD_ADDR_VAR 0 15
56253: PUSH
56254: LD_VAR 0 13
56258: PPUSH
56259: CALL_OW 254
56263: ST_TO_ADDR
// if r = 5 then
56264: LD_VAR 0 15
56268: PUSH
56269: LD_INT 5
56271: EQUAL
56272: IFFALSE 56282
// r := 0 ;
56274: LD_ADDR_VAR 0 15
56278: PUSH
56279: LD_INT 0
56281: ST_TO_ADDR
// for j = r to 5 do
56282: LD_ADDR_VAR 0 10
56286: PUSH
56287: DOUBLE
56288: LD_VAR 0 15
56292: DEC
56293: ST_TO_ADDR
56294: LD_INT 5
56296: PUSH
56297: FOR_TO
56298: IFFALSE 56412
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56300: LD_ADDR_VAR 0 11
56304: PUSH
56305: LD_VAR 0 13
56309: PPUSH
56310: CALL_OW 250
56314: PPUSH
56315: LD_VAR 0 10
56319: PPUSH
56320: LD_INT 2
56322: PPUSH
56323: CALL_OW 272
56327: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56328: LD_ADDR_VAR 0 12
56332: PUSH
56333: LD_VAR 0 13
56337: PPUSH
56338: CALL_OW 251
56342: PPUSH
56343: LD_VAR 0 10
56347: PPUSH
56348: LD_INT 2
56350: PPUSH
56351: CALL_OW 273
56355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56356: LD_VAR 0 11
56360: PPUSH
56361: LD_VAR 0 12
56365: PPUSH
56366: CALL_OW 488
56370: PUSH
56371: LD_VAR 0 11
56375: PPUSH
56376: LD_VAR 0 12
56380: PPUSH
56381: CALL_OW 428
56385: NOT
56386: AND
56387: IFFALSE 56410
// begin ComMoveXY ( tmp , _x , _y ) ;
56389: LD_VAR 0 13
56393: PPUSH
56394: LD_VAR 0 11
56398: PPUSH
56399: LD_VAR 0 12
56403: PPUSH
56404: CALL_OW 111
// break ;
56408: GO 56412
// end ; end ;
56410: GO 56297
56412: POP
56413: POP
// end ; end ;
56414: GO 55739
56416: POP
56417: POP
// end ;
56418: LD_VAR 0 8
56422: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56423: LD_INT 0
56425: PPUSH
// result := true ;
56426: LD_ADDR_VAR 0 3
56430: PUSH
56431: LD_INT 1
56433: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56434: LD_VAR 0 2
56438: PUSH
56439: LD_INT 24
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56453
56445: LD_INT 33
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56453
56451: GO 56478
56453: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56454: LD_ADDR_VAR 0 3
56458: PUSH
56459: LD_INT 32
56461: PPUSH
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 321
56471: PUSH
56472: LD_INT 2
56474: EQUAL
56475: ST_TO_ADDR
56476: GO 56794
56478: LD_INT 20
56480: DOUBLE
56481: EQUAL
56482: IFTRUE 56486
56484: GO 56511
56486: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56487: LD_ADDR_VAR 0 3
56491: PUSH
56492: LD_INT 6
56494: PPUSH
56495: LD_VAR 0 1
56499: PPUSH
56500: CALL_OW 321
56504: PUSH
56505: LD_INT 2
56507: EQUAL
56508: ST_TO_ADDR
56509: GO 56794
56511: LD_INT 22
56513: DOUBLE
56514: EQUAL
56515: IFTRUE 56525
56517: LD_INT 36
56519: DOUBLE
56520: EQUAL
56521: IFTRUE 56525
56523: GO 56550
56525: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56526: LD_ADDR_VAR 0 3
56530: PUSH
56531: LD_INT 15
56533: PPUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: CALL_OW 321
56543: PUSH
56544: LD_INT 2
56546: EQUAL
56547: ST_TO_ADDR
56548: GO 56794
56550: LD_INT 30
56552: DOUBLE
56553: EQUAL
56554: IFTRUE 56558
56556: GO 56583
56558: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56559: LD_ADDR_VAR 0 3
56563: PUSH
56564: LD_INT 20
56566: PPUSH
56567: LD_VAR 0 1
56571: PPUSH
56572: CALL_OW 321
56576: PUSH
56577: LD_INT 2
56579: EQUAL
56580: ST_TO_ADDR
56581: GO 56794
56583: LD_INT 28
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56597
56589: LD_INT 21
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56597
56595: GO 56622
56597: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56598: LD_ADDR_VAR 0 3
56602: PUSH
56603: LD_INT 21
56605: PPUSH
56606: LD_VAR 0 1
56610: PPUSH
56611: CALL_OW 321
56615: PUSH
56616: LD_INT 2
56618: EQUAL
56619: ST_TO_ADDR
56620: GO 56794
56622: LD_INT 16
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56630
56628: GO 56655
56630: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56631: LD_ADDR_VAR 0 3
56635: PUSH
56636: LD_INT 84
56638: PPUSH
56639: LD_VAR 0 1
56643: PPUSH
56644: CALL_OW 321
56648: PUSH
56649: LD_INT 2
56651: EQUAL
56652: ST_TO_ADDR
56653: GO 56794
56655: LD_INT 19
56657: DOUBLE
56658: EQUAL
56659: IFTRUE 56669
56661: LD_INT 23
56663: DOUBLE
56664: EQUAL
56665: IFTRUE 56669
56667: GO 56694
56669: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56670: LD_ADDR_VAR 0 3
56674: PUSH
56675: LD_INT 83
56677: PPUSH
56678: LD_VAR 0 1
56682: PPUSH
56683: CALL_OW 321
56687: PUSH
56688: LD_INT 2
56690: EQUAL
56691: ST_TO_ADDR
56692: GO 56794
56694: LD_INT 17
56696: DOUBLE
56697: EQUAL
56698: IFTRUE 56702
56700: GO 56727
56702: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_INT 39
56710: PPUSH
56711: LD_VAR 0 1
56715: PPUSH
56716: CALL_OW 321
56720: PUSH
56721: LD_INT 2
56723: EQUAL
56724: ST_TO_ADDR
56725: GO 56794
56727: LD_INT 18
56729: DOUBLE
56730: EQUAL
56731: IFTRUE 56735
56733: GO 56760
56735: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56736: LD_ADDR_VAR 0 3
56740: PUSH
56741: LD_INT 40
56743: PPUSH
56744: LD_VAR 0 1
56748: PPUSH
56749: CALL_OW 321
56753: PUSH
56754: LD_INT 2
56756: EQUAL
56757: ST_TO_ADDR
56758: GO 56794
56760: LD_INT 27
56762: DOUBLE
56763: EQUAL
56764: IFTRUE 56768
56766: GO 56793
56768: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56769: LD_ADDR_VAR 0 3
56773: PUSH
56774: LD_INT 35
56776: PPUSH
56777: LD_VAR 0 1
56781: PPUSH
56782: CALL_OW 321
56786: PUSH
56787: LD_INT 2
56789: EQUAL
56790: ST_TO_ADDR
56791: GO 56794
56793: POP
// end ;
56794: LD_VAR 0 3
56798: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56799: LD_INT 0
56801: PPUSH
56802: PPUSH
56803: PPUSH
56804: PPUSH
56805: PPUSH
56806: PPUSH
56807: PPUSH
56808: PPUSH
56809: PPUSH
56810: PPUSH
56811: PPUSH
// result := false ;
56812: LD_ADDR_VAR 0 6
56816: PUSH
56817: LD_INT 0
56819: ST_TO_ADDR
// if btype = b_depot then
56820: LD_VAR 0 2
56824: PUSH
56825: LD_INT 0
56827: EQUAL
56828: IFFALSE 56840
// begin result := true ;
56830: LD_ADDR_VAR 0 6
56834: PUSH
56835: LD_INT 1
56837: ST_TO_ADDR
// exit ;
56838: GO 57666
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56840: LD_VAR 0 1
56844: NOT
56845: PUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 266
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: IN
56866: NOT
56867: OR
56868: PUSH
56869: LD_VAR 0 2
56873: NOT
56874: OR
56875: PUSH
56876: LD_VAR 0 5
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: LD_INT 5
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: IN
56907: NOT
56908: OR
56909: PUSH
56910: LD_VAR 0 3
56914: PPUSH
56915: LD_VAR 0 4
56919: PPUSH
56920: CALL_OW 488
56924: NOT
56925: OR
56926: IFFALSE 56930
// exit ;
56928: GO 57666
// side := GetSide ( depot ) ;
56930: LD_ADDR_VAR 0 9
56934: PUSH
56935: LD_VAR 0 1
56939: PPUSH
56940: CALL_OW 255
56944: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56945: LD_VAR 0 9
56949: PPUSH
56950: LD_VAR 0 2
56954: PPUSH
56955: CALL 56423 0 2
56959: NOT
56960: IFFALSE 56964
// exit ;
56962: GO 57666
// pom := GetBase ( depot ) ;
56964: LD_ADDR_VAR 0 10
56968: PUSH
56969: LD_VAR 0 1
56973: PPUSH
56974: CALL_OW 274
56978: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56979: LD_ADDR_VAR 0 11
56983: PUSH
56984: LD_VAR 0 2
56988: PPUSH
56989: LD_VAR 0 1
56993: PPUSH
56994: CALL_OW 248
56998: PPUSH
56999: CALL_OW 450
57003: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57004: LD_VAR 0 10
57008: PPUSH
57009: LD_INT 1
57011: PPUSH
57012: CALL_OW 275
57016: PUSH
57017: LD_VAR 0 11
57021: PUSH
57022: LD_INT 1
57024: ARRAY
57025: GREATEREQUAL
57026: PUSH
57027: LD_VAR 0 10
57031: PPUSH
57032: LD_INT 2
57034: PPUSH
57035: CALL_OW 275
57039: PUSH
57040: LD_VAR 0 11
57044: PUSH
57045: LD_INT 2
57047: ARRAY
57048: GREATEREQUAL
57049: AND
57050: PUSH
57051: LD_VAR 0 10
57055: PPUSH
57056: LD_INT 3
57058: PPUSH
57059: CALL_OW 275
57063: PUSH
57064: LD_VAR 0 11
57068: PUSH
57069: LD_INT 3
57071: ARRAY
57072: GREATEREQUAL
57073: AND
57074: NOT
57075: IFFALSE 57079
// exit ;
57077: GO 57666
// if GetBType ( depot ) = b_depot then
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 266
57088: PUSH
57089: LD_INT 0
57091: EQUAL
57092: IFFALSE 57104
// dist := 28 else
57094: LD_ADDR_VAR 0 14
57098: PUSH
57099: LD_INT 28
57101: ST_TO_ADDR
57102: GO 57112
// dist := 36 ;
57104: LD_ADDR_VAR 0 14
57108: PUSH
57109: LD_INT 36
57111: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57112: LD_VAR 0 1
57116: PPUSH
57117: LD_VAR 0 3
57121: PPUSH
57122: LD_VAR 0 4
57126: PPUSH
57127: CALL_OW 297
57131: PUSH
57132: LD_VAR 0 14
57136: GREATER
57137: IFFALSE 57141
// exit ;
57139: GO 57666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57141: LD_ADDR_VAR 0 12
57145: PUSH
57146: LD_VAR 0 2
57150: PPUSH
57151: LD_VAR 0 3
57155: PPUSH
57156: LD_VAR 0 4
57160: PPUSH
57161: LD_VAR 0 5
57165: PPUSH
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 248
57175: PPUSH
57176: LD_INT 0
57178: PPUSH
57179: CALL 57671 0 6
57183: ST_TO_ADDR
// if not hexes then
57184: LD_VAR 0 12
57188: NOT
57189: IFFALSE 57193
// exit ;
57191: GO 57666
// hex := GetHexInfo ( x , y ) ;
57193: LD_ADDR_VAR 0 15
57197: PUSH
57198: LD_VAR 0 3
57202: PPUSH
57203: LD_VAR 0 4
57207: PPUSH
57208: CALL_OW 546
57212: ST_TO_ADDR
// if hex [ 1 ] then
57213: LD_VAR 0 15
57217: PUSH
57218: LD_INT 1
57220: ARRAY
57221: IFFALSE 57225
// exit ;
57223: GO 57666
// height := hex [ 2 ] ;
57225: LD_ADDR_VAR 0 13
57229: PUSH
57230: LD_VAR 0 15
57234: PUSH
57235: LD_INT 2
57237: ARRAY
57238: ST_TO_ADDR
// for i = 1 to hexes do
57239: LD_ADDR_VAR 0 7
57243: PUSH
57244: DOUBLE
57245: LD_INT 1
57247: DEC
57248: ST_TO_ADDR
57249: LD_VAR 0 12
57253: PUSH
57254: FOR_TO
57255: IFFALSE 57585
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57257: LD_VAR 0 12
57261: PUSH
57262: LD_VAR 0 7
57266: ARRAY
57267: PUSH
57268: LD_INT 1
57270: ARRAY
57271: PPUSH
57272: LD_VAR 0 12
57276: PUSH
57277: LD_VAR 0 7
57281: ARRAY
57282: PUSH
57283: LD_INT 2
57285: ARRAY
57286: PPUSH
57287: CALL_OW 488
57291: NOT
57292: PUSH
57293: LD_VAR 0 12
57297: PUSH
57298: LD_VAR 0 7
57302: ARRAY
57303: PUSH
57304: LD_INT 1
57306: ARRAY
57307: PPUSH
57308: LD_VAR 0 12
57312: PUSH
57313: LD_VAR 0 7
57317: ARRAY
57318: PUSH
57319: LD_INT 2
57321: ARRAY
57322: PPUSH
57323: CALL_OW 428
57327: PUSH
57328: LD_INT 0
57330: GREATER
57331: OR
57332: PUSH
57333: LD_VAR 0 12
57337: PUSH
57338: LD_VAR 0 7
57342: ARRAY
57343: PUSH
57344: LD_INT 1
57346: ARRAY
57347: PPUSH
57348: LD_VAR 0 12
57352: PUSH
57353: LD_VAR 0 7
57357: ARRAY
57358: PUSH
57359: LD_INT 2
57361: ARRAY
57362: PPUSH
57363: CALL_OW 351
57367: OR
57368: IFFALSE 57374
// exit ;
57370: POP
57371: POP
57372: GO 57666
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57374: LD_ADDR_VAR 0 8
57378: PUSH
57379: LD_VAR 0 12
57383: PUSH
57384: LD_VAR 0 7
57388: ARRAY
57389: PUSH
57390: LD_INT 1
57392: ARRAY
57393: PPUSH
57394: LD_VAR 0 12
57398: PUSH
57399: LD_VAR 0 7
57403: ARRAY
57404: PUSH
57405: LD_INT 2
57407: ARRAY
57408: PPUSH
57409: CALL_OW 546
57413: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57414: LD_VAR 0 8
57418: PUSH
57419: LD_INT 1
57421: ARRAY
57422: PUSH
57423: LD_VAR 0 8
57427: PUSH
57428: LD_INT 2
57430: ARRAY
57431: PUSH
57432: LD_VAR 0 13
57436: PUSH
57437: LD_INT 2
57439: PLUS
57440: GREATER
57441: OR
57442: PUSH
57443: LD_VAR 0 8
57447: PUSH
57448: LD_INT 2
57450: ARRAY
57451: PUSH
57452: LD_VAR 0 13
57456: PUSH
57457: LD_INT 2
57459: MINUS
57460: LESS
57461: OR
57462: PUSH
57463: LD_VAR 0 8
57467: PUSH
57468: LD_INT 3
57470: ARRAY
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 8
57477: PUSH
57478: LD_INT 9
57480: PUSH
57481: LD_INT 10
57483: PUSH
57484: LD_INT 11
57486: PUSH
57487: LD_INT 12
57489: PUSH
57490: LD_INT 13
57492: PUSH
57493: LD_INT 16
57495: PUSH
57496: LD_INT 17
57498: PUSH
57499: LD_INT 18
57501: PUSH
57502: LD_INT 19
57504: PUSH
57505: LD_INT 20
57507: PUSH
57508: LD_INT 21
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: IN
57526: NOT
57527: OR
57528: PUSH
57529: LD_VAR 0 8
57533: PUSH
57534: LD_INT 5
57536: ARRAY
57537: NOT
57538: OR
57539: PUSH
57540: LD_VAR 0 8
57544: PUSH
57545: LD_INT 6
57547: ARRAY
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 7
57557: PUSH
57558: LD_INT 9
57560: PUSH
57561: LD_INT 10
57563: PUSH
57564: LD_INT 11
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: IN
57575: NOT
57576: OR
57577: IFFALSE 57583
// exit ;
57579: POP
57580: POP
57581: GO 57666
// end ;
57583: GO 57254
57585: POP
57586: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57587: LD_VAR 0 9
57591: PPUSH
57592: LD_VAR 0 3
57596: PPUSH
57597: LD_VAR 0 4
57601: PPUSH
57602: LD_INT 20
57604: PPUSH
57605: CALL 49589 0 4
57609: PUSH
57610: LD_INT 4
57612: ARRAY
57613: IFFALSE 57617
// exit ;
57615: GO 57666
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57617: LD_VAR 0 2
57621: PUSH
57622: LD_INT 29
57624: PUSH
57625: LD_INT 30
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: IN
57632: PUSH
57633: LD_VAR 0 3
57637: PPUSH
57638: LD_VAR 0 4
57642: PPUSH
57643: LD_VAR 0 9
57647: PPUSH
57648: CALL_OW 440
57652: NOT
57653: AND
57654: IFFALSE 57658
// exit ;
57656: GO 57666
// result := true ;
57658: LD_ADDR_VAR 0 6
57662: PUSH
57663: LD_INT 1
57665: ST_TO_ADDR
// end ;
57666: LD_VAR 0 6
57670: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57671: LD_INT 0
57673: PPUSH
57674: PPUSH
57675: PPUSH
57676: PPUSH
57677: PPUSH
57678: PPUSH
57679: PPUSH
57680: PPUSH
57681: PPUSH
57682: PPUSH
57683: PPUSH
57684: PPUSH
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
57689: PPUSH
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
57704: PPUSH
57705: PPUSH
57706: PPUSH
57707: PPUSH
57708: PPUSH
57709: PPUSH
57710: PPUSH
57711: PPUSH
57712: PPUSH
57713: PPUSH
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
// result = [ ] ;
57731: LD_ADDR_VAR 0 7
57735: PUSH
57736: EMPTY
57737: ST_TO_ADDR
// temp_list = [ ] ;
57738: LD_ADDR_VAR 0 9
57742: PUSH
57743: EMPTY
57744: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57745: LD_VAR 0 4
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: IN
57776: NOT
57777: PUSH
57778: LD_VAR 0 1
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: IN
57793: PUSH
57794: LD_VAR 0 5
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: IN
57813: NOT
57814: AND
57815: OR
57816: IFFALSE 57820
// exit ;
57818: GO 76211
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57820: LD_VAR 0 1
57824: PUSH
57825: LD_INT 6
57827: PUSH
57828: LD_INT 7
57830: PUSH
57831: LD_INT 8
57833: PUSH
57834: LD_INT 13
57836: PUSH
57837: LD_INT 12
57839: PUSH
57840: LD_INT 15
57842: PUSH
57843: LD_INT 11
57845: PUSH
57846: LD_INT 14
57848: PUSH
57849: LD_INT 10
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: IN
57863: IFFALSE 57873
// btype = b_lab ;
57865: LD_ADDR_VAR 0 1
57869: PUSH
57870: LD_INT 6
57872: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57873: LD_VAR 0 6
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: IN
57892: NOT
57893: PUSH
57894: LD_VAR 0 1
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 6
57913: PUSH
57914: LD_INT 36
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: LD_INT 31
57925: PUSH
57926: LD_INT 32
57928: PUSH
57929: LD_INT 33
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: IN
57945: NOT
57946: PUSH
57947: LD_VAR 0 6
57951: PUSH
57952: LD_INT 1
57954: EQUAL
57955: AND
57956: OR
57957: PUSH
57958: LD_VAR 0 1
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: IN
57973: NOT
57974: PUSH
57975: LD_VAR 0 6
57979: PUSH
57980: LD_INT 2
57982: EQUAL
57983: AND
57984: OR
57985: IFFALSE 57995
// mode = 0 ;
57987: LD_ADDR_VAR 0 6
57991: PUSH
57992: LD_INT 0
57994: ST_TO_ADDR
// case mode of 0 :
57995: LD_VAR 0 6
57999: PUSH
58000: LD_INT 0
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58008
58006: GO 69461
58008: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58009: LD_ADDR_VAR 0 11
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58202: LD_ADDR_VAR 0 12
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58398: LD_ADDR_VAR 0 13
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58597: LD_ADDR_VAR 0 14
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58793: LD_ADDR_VAR 0 15
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58986: LD_ADDR_VAR 0 16
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59179: LD_ADDR_VAR 0 17
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59409: LD_ADDR_VAR 0 18
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59639: LD_ADDR_VAR 0 19
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59869: LD_ADDR_VAR 0 20
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60099: LD_ADDR_VAR 0 21
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60329: LD_ADDR_VAR 0 22
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60559: LD_ADDR_VAR 0 23
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60839: LD_ADDR_VAR 0 24
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61115: LD_ADDR_VAR 0 25
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61389: LD_ADDR_VAR 0 26
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61665: LD_ADDR_VAR 0 27
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61945: LD_ADDR_VAR 0 28
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: NEG
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 3
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62227: LD_ADDR_VAR 0 29
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: LD_INT 3
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 3
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62506: LD_ADDR_VAR 0 30
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62784: LD_ADDR_VAR 0 31
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: LD_INT 2
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63062: LD_ADDR_VAR 0 32
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 3
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 3
63305: NEG
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63340: LD_ADDR_VAR 0 33
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: LD_INT 2
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: NEG
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63619: LD_ADDR_VAR 0 34
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 3
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63899: LD_ADDR_VAR 0 35
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64011: LD_ADDR_VAR 0 36
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64123: LD_ADDR_VAR 0 37
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64235: LD_ADDR_VAR 0 38
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: NEG
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64347: LD_ADDR_VAR 0 39
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64459: LD_ADDR_VAR 0 40
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64571: LD_ADDR_VAR 0 41
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: NEG
64869: PUSH
64870: LD_INT 2
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64921: LD_ADDR_VAR 0 42
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 2
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: LD_INT 2
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 3
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: NEG
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: LD_INT 3
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65271: LD_ADDR_VAR 0 43
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: NEG
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: LD_INT 2
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 2
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: LD_INT 2
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: LD_INT 3
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65619: LD_ADDR_VAR 0 44
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 2
65797: NEG
65798: PUSH
65799: LD_INT 2
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 2
65809: NEG
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 3
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: LD_INT 2
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: NEG
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65969: LD_ADDR_VAR 0 45
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 2
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: NEG
66160: PUSH
66161: LD_INT 3
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 3
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 2
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66319: LD_ADDR_VAR 0 46
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: NEG
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: LD_INT 2
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 2
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: NEG
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PUSH
66498: LD_INT 1
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: LD_INT 2
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: NEG
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: NEG
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66667: LD_ADDR_VAR 0 47
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: LD_INT 1
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: LD_INT 1
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66818: LD_ADDR_VAR 0 48
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: LD_INT 2
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: LD_INT 2
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: LD_INT 1
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66965: LD_ADDR_VAR 0 49
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67109: LD_ADDR_VAR 0 50
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67253: LD_ADDR_VAR 0 51
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: NEG
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67400: LD_ADDR_VAR 0 52
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 1
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: NEG
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: NEG
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67551: LD_ADDR_VAR 0 53
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: LD_INT 2
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 2
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 2
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: LD_INT 2
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: LD_INT 2
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 2
67727: NEG
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 2
67738: NEG
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 2
67750: NEG
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67781: LD_ADDR_VAR 0 54
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: NEG
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 2
67957: NEG
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 2
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68011: LD_ADDR_VAR 0 55
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 2
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 2
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 2
68187: NEG
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68241: LD_ADDR_VAR 0 56
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 0
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 2
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 1
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 2
68417: NEG
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68471: LD_ADDR_VAR 0 57
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: LD_INT 1
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: LD_INT 2
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 1
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 2
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 2
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 2
68647: NEG
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 2
68670: NEG
68671: PUSH
68672: LD_INT 2
68674: NEG
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68701: LD_ADDR_VAR 0 58
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: NEG
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: LD_INT 1
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 2
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 2
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 2
68836: PUSH
68837: LD_INT 2
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 2
68888: NEG
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: NEG
68901: PUSH
68902: LD_INT 2
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68931: LD_ADDR_VAR 0 59
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: LD_INT 1
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69019: LD_ADDR_VAR 0 60
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 0
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 1
69039: NEG
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 1
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69107: LD_ADDR_VAR 0 61
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 0
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: LD_INT 1
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: LD_INT 1
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: NEG
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69195: LD_ADDR_VAR 0 62
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: LD_INT 0
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 1
69233: PUSH
69234: LD_INT 1
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: LD_INT 1
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 1
69264: NEG
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69283: LD_ADDR_VAR 0 63
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69371: LD_ADDR_VAR 0 64
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: PUSH
69410: LD_INT 1
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: ST_TO_ADDR
// end ; 1 :
69459: GO 75356
69461: LD_INT 1
69463: DOUBLE
69464: EQUAL
69465: IFTRUE 69469
69467: GO 72092
69469: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69470: LD_ADDR_VAR 0 11
69474: PUSH
69475: LD_INT 1
69477: NEG
69478: PUSH
69479: LD_INT 3
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 2
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69514: LD_ADDR_VAR 0 12
69518: PUSH
69519: LD_INT 2
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 3
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69555: LD_ADDR_VAR 0 13
69559: PUSH
69560: LD_INT 3
69562: PUSH
69563: LD_INT 2
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: LD_INT 3
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: PUSH
69583: LD_INT 3
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69595: LD_ADDR_VAR 0 14
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: LD_INT 3
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: LIST
69635: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69636: LD_ADDR_VAR 0 15
69640: PUSH
69641: LD_INT 2
69643: NEG
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 3
69654: NEG
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: NEG
69666: PUSH
69667: LD_INT 1
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69680: LD_ADDR_VAR 0 16
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: LD_INT 2
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69726: LD_ADDR_VAR 0 17
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 3
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69770: LD_ADDR_VAR 0 18
69774: PUSH
69775: LD_INT 2
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 3
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: LIST
69810: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69811: LD_ADDR_VAR 0 19
69815: PUSH
69816: LD_INT 3
69818: PUSH
69819: LD_INT 2
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: LD_INT 3
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: LD_INT 3
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69851: LD_ADDR_VAR 0 20
69855: PUSH
69856: LD_INT 1
69858: PUSH
69859: LD_INT 3
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_INT 3
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69892: LD_ADDR_VAR 0 21
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: LD_INT 1
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 3
69910: NEG
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 3
69921: NEG
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69936: LD_ADDR_VAR 0 22
69940: PUSH
69941: LD_INT 2
69943: NEG
69944: PUSH
69945: LD_INT 3
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 3
69955: NEG
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: LD_INT 3
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69982: LD_ADDR_VAR 0 23
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: LD_INT 3
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: LD_INT 4
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: LD_INT 3
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70026: LD_ADDR_VAR 0 24
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 4
70054: PUSH
70055: LD_INT 1
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: LIST
70066: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70067: LD_ADDR_VAR 0 25
70071: PUSH
70072: LD_INT 3
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 4
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70107: LD_ADDR_VAR 0 26
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: LD_INT 3
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: LIST
70147: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70148: LD_ADDR_VAR 0 27
70152: PUSH
70153: LD_INT 3
70155: NEG
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 3
70166: NEG
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 4
70177: NEG
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: LIST
70191: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70192: LD_ADDR_VAR 0 28
70196: PUSH
70197: LD_INT 3
70199: NEG
70200: PUSH
70201: LD_INT 3
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: LD_INT 4
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: NEG
70224: PUSH
70225: LD_INT 3
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: LIST
70237: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70238: LD_ADDR_VAR 0 29
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: LD_INT 3
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: LD_INT 3
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 1
70268: PUSH
70269: LD_INT 2
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: LD_INT 4
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: LD_INT 4
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: LD_INT 3
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: LD_INT 5
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 0
70325: PUSH
70326: LD_INT 5
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 1
70336: PUSH
70337: LD_INT 4
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: LD_INT 6
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 6
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: LD_INT 5
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70393: LD_ADDR_VAR 0 30
70397: PUSH
70398: LD_INT 2
70400: PUSH
70401: LD_INT 1
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 3
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 3
70421: PUSH
70422: LD_INT 1
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 4
70442: PUSH
70443: LD_INT 0
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 4
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 4
70462: PUSH
70463: LD_INT 1
70465: NEG
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 5
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 5
70483: PUSH
70484: LD_INT 1
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 6
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 6
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70536: LD_ADDR_VAR 0 31
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 2
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 4
70573: PUSH
70574: LD_INT 3
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: LD_INT 4
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 3
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 5
70603: PUSH
70604: LD_INT 4
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 5
70613: PUSH
70614: LD_INT 5
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 4
70623: PUSH
70624: LD_INT 5
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 6
70633: PUSH
70634: LD_INT 5
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 6
70643: PUSH
70644: LD_INT 6
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 5
70653: PUSH
70654: LD_INT 6
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70675: LD_ADDR_VAR 0 32
70679: PUSH
70680: LD_INT 1
70682: PUSH
70683: LD_INT 3
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: LD_INT 3
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: LD_INT 4
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: LD_INT 4
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: NEG
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: NEG
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: LD_INT 6
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: LD_INT 6
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: LD_INT 5
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70818: LD_ADDR_VAR 0 33
70822: PUSH
70823: LD_INT 2
70825: NEG
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 3
70836: NEG
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 3
70847: NEG
70848: PUSH
70849: LD_INT 1
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 3
70859: NEG
70860: PUSH
70861: LD_INT 1
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 4
70870: NEG
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 4
70893: NEG
70894: PUSH
70895: LD_INT 1
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 5
70904: NEG
70905: PUSH
70906: LD_INT 0
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 5
70915: NEG
70916: PUSH
70917: LD_INT 1
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 5
70927: NEG
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 6
70938: NEG
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 6
70949: NEG
70950: PUSH
70951: LD_INT 1
70953: NEG
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70973: LD_ADDR_VAR 0 34
70977: PUSH
70978: LD_INT 2
70980: NEG
70981: PUSH
70982: LD_INT 3
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 3
70992: NEG
70993: PUSH
70994: LD_INT 2
70996: NEG
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 3
71004: NEG
71005: PUSH
71006: LD_INT 3
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 3
71016: NEG
71017: PUSH
71018: LD_INT 4
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 4
71028: NEG
71029: PUSH
71030: LD_INT 3
71032: NEG
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 4
71040: NEG
71041: PUSH
71042: LD_INT 4
71044: NEG
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 4
71052: NEG
71053: PUSH
71054: LD_INT 5
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 5
71064: NEG
71065: PUSH
71066: LD_INT 4
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 5
71076: NEG
71077: PUSH
71078: LD_INT 5
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 5
71088: NEG
71089: PUSH
71090: LD_INT 6
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 6
71100: NEG
71101: PUSH
71102: LD_INT 5
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 6
71112: NEG
71113: PUSH
71114: LD_INT 6
71116: NEG
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71136: LD_ADDR_VAR 0 41
71140: PUSH
71141: LD_INT 0
71143: PUSH
71144: LD_INT 2
71146: NEG
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 1
71154: NEG
71155: PUSH
71156: LD_INT 3
71158: NEG
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 1
71166: PUSH
71167: LD_INT 2
71169: NEG
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: LIST
71179: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71180: LD_ADDR_VAR 0 42
71184: PUSH
71185: LD_INT 2
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 2
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: LIST
71220: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71221: LD_ADDR_VAR 0 43
71225: PUSH
71226: LD_INT 2
71228: PUSH
71229: LD_INT 2
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: LD_INT 2
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: LD_INT 3
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71261: LD_ADDR_VAR 0 44
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: LD_INT 2
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: LIST
71301: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71302: LD_ADDR_VAR 0 45
71306: PUSH
71307: LD_INT 2
71309: NEG
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: NEG
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: LD_INT 1
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: LIST
71345: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71346: LD_ADDR_VAR 0 46
71350: PUSH
71351: LD_INT 2
71353: NEG
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: LD_INT 3
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 3
71377: NEG
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71392: LD_ADDR_VAR 0 47
71396: PUSH
71397: LD_INT 2
71399: NEG
71400: PUSH
71401: LD_INT 3
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 1
71411: NEG
71412: PUSH
71413: LD_INT 3
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71425: LD_ADDR_VAR 0 48
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 2
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 2
71443: PUSH
71444: LD_INT 1
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71456: LD_ADDR_VAR 0 49
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: LD_INT 2
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71485: LD_ADDR_VAR 0 50
71489: PUSH
71490: LD_INT 2
71492: PUSH
71493: LD_INT 3
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71514: LD_ADDR_VAR 0 51
71518: PUSH
71519: LD_INT 1
71521: NEG
71522: PUSH
71523: LD_INT 2
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 2
71532: NEG
71533: PUSH
71534: LD_INT 1
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71545: LD_ADDR_VAR 0 52
71549: PUSH
71550: LD_INT 3
71552: NEG
71553: PUSH
71554: LD_INT 1
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71578: LD_ADDR_VAR 0 53
71582: PUSH
71583: LD_INT 1
71585: NEG
71586: PUSH
71587: LD_INT 3
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: LD_INT 3
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 1
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: LIST
71621: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71622: LD_ADDR_VAR 0 54
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: LD_INT 1
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 3
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 3
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: LIST
71662: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71663: LD_ADDR_VAR 0 55
71667: PUSH
71668: LD_INT 3
71670: PUSH
71671: LD_INT 2
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: LD_INT 3
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 2
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: LIST
71702: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71703: LD_ADDR_VAR 0 56
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: LD_INT 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 0
71720: PUSH
71721: LD_INT 3
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 1
71730: NEG
71731: PUSH
71732: LD_INT 2
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71744: LD_ADDR_VAR 0 57
71748: PUSH
71749: LD_INT 2
71751: NEG
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: NEG
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 3
71773: NEG
71774: PUSH
71775: LD_INT 1
71777: NEG
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71788: LD_ADDR_VAR 0 58
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: LD_INT 3
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 3
71807: NEG
71808: PUSH
71809: LD_INT 2
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 3
71819: NEG
71820: PUSH
71821: LD_INT 3
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: LIST
71833: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71834: LD_ADDR_VAR 0 59
71838: PUSH
71839: LD_INT 1
71841: NEG
71842: PUSH
71843: LD_INT 2
71845: NEG
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: LD_INT 2
71856: NEG
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: LD_INT 1
71867: NEG
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71878: LD_ADDR_VAR 0 60
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 2
71906: PUSH
71907: LD_INT 1
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71919: LD_ADDR_VAR 0 61
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 1
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71959: LD_ADDR_VAR 0 62
71963: PUSH
71964: LD_INT 1
71966: PUSH
71967: LD_INT 2
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 0
71976: PUSH
71977: LD_INT 2
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: LD_INT 1
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72000: LD_ADDR_VAR 0 63
72004: PUSH
72005: LD_INT 1
72007: NEG
72008: PUSH
72009: LD_INT 1
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 2
72018: NEG
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 2
72029: NEG
72030: PUSH
72031: LD_INT 1
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: LIST
72043: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72044: LD_ADDR_VAR 0 64
72048: PUSH
72049: LD_INT 1
72051: NEG
72052: PUSH
72053: LD_INT 2
72055: NEG
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 2
72063: NEG
72064: PUSH
72065: LD_INT 1
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 2
72075: NEG
72076: PUSH
72077: LD_INT 2
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: LIST
72089: ST_TO_ADDR
// end ; 2 :
72090: GO 75356
72092: LD_INT 2
72094: DOUBLE
72095: EQUAL
72096: IFTRUE 72100
72098: GO 75355
72100: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72101: LD_ADDR_VAR 0 29
72105: PUSH
72106: LD_INT 4
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 4
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 5
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 5
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 4
72149: PUSH
72150: LD_INT 1
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 3
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 3
72169: PUSH
72170: LD_INT 1
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: LD_INT 2
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 5
72191: PUSH
72192: LD_INT 2
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 3
72201: PUSH
72202: LD_INT 3
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 3
72211: PUSH
72212: LD_INT 2
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 4
72221: PUSH
72222: LD_INT 3
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_INT 4
72231: PUSH
72232: LD_INT 4
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: LD_INT 4
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 2
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 2
72261: PUSH
72262: LD_INT 2
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 4
72271: PUSH
72272: LD_INT 2
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: LD_INT 4
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: LD_INT 4
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 1
72311: PUSH
72312: LD_INT 4
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 1
72321: PUSH
72322: LD_INT 5
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 0
72331: PUSH
72332: LD_INT 5
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 1
72341: NEG
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: LD_INT 3
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 2
72363: PUSH
72364: LD_INT 5
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 2
72373: NEG
72374: PUSH
72375: LD_INT 3
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 3
72384: NEG
72385: PUSH
72386: LD_INT 0
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 3
72395: NEG
72396: PUSH
72397: LD_INT 1
72399: NEG
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 2
72407: NEG
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 2
72418: NEG
72419: PUSH
72420: LD_INT 1
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 3
72429: NEG
72430: PUSH
72431: LD_INT 1
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 4
72440: NEG
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 4
72451: NEG
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 4
72463: NEG
72464: PUSH
72465: LD_INT 2
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: NEG
72476: PUSH
72477: LD_INT 2
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 4
72486: NEG
72487: PUSH
72488: LD_INT 4
72490: NEG
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 4
72498: NEG
72499: PUSH
72500: LD_INT 5
72502: NEG
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 3
72510: NEG
72511: PUSH
72512: LD_INT 4
72514: NEG
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 3
72522: NEG
72523: PUSH
72524: LD_INT 3
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 4
72534: NEG
72535: PUSH
72536: LD_INT 3
72538: NEG
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 5
72546: NEG
72547: PUSH
72548: LD_INT 4
72550: NEG
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 5
72558: NEG
72559: PUSH
72560: LD_INT 5
72562: NEG
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: NEG
72571: PUSH
72572: LD_INT 5
72574: NEG
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 5
72582: NEG
72583: PUSH
72584: LD_INT 3
72586: NEG
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72639: LD_ADDR_VAR 0 30
72643: PUSH
72644: LD_INT 4
72646: PUSH
72647: LD_INT 4
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 4
72656: PUSH
72657: LD_INT 3
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 5
72666: PUSH
72667: LD_INT 4
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 5
72676: PUSH
72677: LD_INT 5
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 4
72686: PUSH
72687: LD_INT 5
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: LD_INT 3
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 3
72706: PUSH
72707: LD_INT 3
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 5
72716: PUSH
72717: LD_INT 3
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: LD_INT 5
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: LD_INT 3
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: LD_INT 2
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 1
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 1
72766: PUSH
72767: LD_INT 4
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: LD_INT 4
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: LD_INT 3
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 2
72808: PUSH
72809: LD_INT 4
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 2
72818: NEG
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 4
72829: NEG
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 4
72840: NEG
72841: PUSH
72842: LD_INT 1
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 3
72852: NEG
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 3
72863: NEG
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 4
72874: NEG
72875: PUSH
72876: LD_INT 1
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 5
72885: NEG
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 5
72896: NEG
72897: PUSH
72898: LD_INT 1
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 5
72908: NEG
72909: PUSH
72910: LD_INT 2
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: NEG
72921: PUSH
72922: LD_INT 2
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 3
72931: NEG
72932: PUSH
72933: LD_INT 3
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 3
72943: NEG
72944: PUSH
72945: LD_INT 4
72947: NEG
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 2
72955: NEG
72956: PUSH
72957: LD_INT 3
72959: NEG
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 2
72967: NEG
72968: PUSH
72969: LD_INT 2
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: NEG
72980: PUSH
72981: LD_INT 2
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 4
72991: NEG
72992: PUSH
72993: LD_INT 3
72995: NEG
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 4
73003: NEG
73004: PUSH
73005: LD_INT 4
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 2
73015: NEG
73016: PUSH
73017: LD_INT 4
73019: NEG
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 4
73027: NEG
73028: PUSH
73029: LD_INT 2
73031: NEG
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 0
73039: PUSH
73040: LD_INT 4
73042: NEG
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: LD_INT 5
73053: NEG
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 1
73061: PUSH
73062: LD_INT 4
73064: NEG
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 1
73072: PUSH
73073: LD_INT 3
73075: NEG
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 0
73083: PUSH
73084: LD_INT 3
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 1
73094: NEG
73095: PUSH
73096: LD_INT 4
73098: NEG
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 1
73106: NEG
73107: PUSH
73108: LD_INT 5
73110: NEG
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 2
73118: PUSH
73119: LD_INT 3
73121: NEG
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 2
73129: NEG
73130: PUSH
73131: LD_INT 5
73133: NEG
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73186: LD_ADDR_VAR 0 31
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: LD_INT 4
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 0
73203: PUSH
73204: LD_INT 3
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 1
73213: PUSH
73214: LD_INT 4
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 5
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 5
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 4
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: PUSH
73256: LD_INT 3
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 2
73265: PUSH
73266: LD_INT 5
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 2
73275: NEG
73276: PUSH
73277: LD_INT 3
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 3
73286: NEG
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 3
73297: NEG
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 2
73309: NEG
73310: PUSH
73311: LD_INT 0
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 2
73320: NEG
73321: PUSH
73322: LD_INT 1
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 3
73331: NEG
73332: PUSH
73333: LD_INT 1
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 4
73342: NEG
73343: PUSH
73344: LD_INT 0
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 4
73353: NEG
73354: PUSH
73355: LD_INT 1
73357: NEG
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 4
73365: NEG
73366: PUSH
73367: LD_INT 2
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: NEG
73378: PUSH
73379: LD_INT 2
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 4
73388: NEG
73389: PUSH
73390: LD_INT 4
73392: NEG
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 4
73400: NEG
73401: PUSH
73402: LD_INT 5
73404: NEG
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 3
73412: NEG
73413: PUSH
73414: LD_INT 4
73416: NEG
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 3
73424: NEG
73425: PUSH
73426: LD_INT 3
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 4
73436: NEG
73437: PUSH
73438: LD_INT 3
73440: NEG
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 5
73448: NEG
73449: PUSH
73450: LD_INT 4
73452: NEG
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 5
73460: NEG
73461: PUSH
73462: LD_INT 5
73464: NEG
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: LD_INT 3
73472: NEG
73473: PUSH
73474: LD_INT 5
73476: NEG
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 5
73484: NEG
73485: PUSH
73486: LD_INT 3
73488: NEG
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 0
73496: PUSH
73497: LD_INT 3
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 0
73507: PUSH
73508: LD_INT 4
73510: NEG
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 1
73518: PUSH
73519: LD_INT 3
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 1
73529: PUSH
73530: LD_INT 2
73532: NEG
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: LD_INT 2
73543: NEG
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 1
73551: NEG
73552: PUSH
73553: LD_INT 3
73555: NEG
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 1
73563: NEG
73564: PUSH
73565: LD_INT 4
73567: NEG
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 2
73575: PUSH
73576: LD_INT 2
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 2
73586: NEG
73587: PUSH
73588: LD_INT 4
73590: NEG
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 4
73598: PUSH
73599: LD_INT 0
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 4
73608: PUSH
73609: LD_INT 1
73611: NEG
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 5
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 5
73629: PUSH
73630: LD_INT 1
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 4
73639: PUSH
73640: LD_INT 1
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: LD_INT 1
73662: NEG
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 3
73670: PUSH
73671: LD_INT 2
73673: NEG
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: PUSH
73679: LD_INT 5
73681: PUSH
73682: LD_INT 2
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73736: LD_ADDR_VAR 0 32
73740: PUSH
73741: LD_INT 4
73743: NEG
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 4
73754: NEG
73755: PUSH
73756: LD_INT 1
73758: NEG
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 3
73766: NEG
73767: PUSH
73768: LD_INT 0
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 3
73777: NEG
73778: PUSH
73779: LD_INT 1
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 4
73788: NEG
73789: PUSH
73790: LD_INT 1
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 5
73799: NEG
73800: PUSH
73801: LD_INT 0
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 5
73810: NEG
73811: PUSH
73812: LD_INT 1
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 5
73822: NEG
73823: PUSH
73824: LD_INT 2
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 3
73834: NEG
73835: PUSH
73836: LD_INT 2
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 3
73845: NEG
73846: PUSH
73847: LD_INT 3
73849: NEG
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 3
73857: NEG
73858: PUSH
73859: LD_INT 4
73861: NEG
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 2
73869: NEG
73870: PUSH
73871: LD_INT 3
73873: NEG
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 2
73881: NEG
73882: PUSH
73883: LD_INT 2
73885: NEG
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 3
73893: NEG
73894: PUSH
73895: LD_INT 2
73897: NEG
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 4
73905: NEG
73906: PUSH
73907: LD_INT 3
73909: NEG
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 4
73917: NEG
73918: PUSH
73919: LD_INT 4
73921: NEG
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 2
73929: NEG
73930: PUSH
73931: LD_INT 4
73933: NEG
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 4
73941: NEG
73942: PUSH
73943: LD_INT 2
73945: NEG
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 0
73953: PUSH
73954: LD_INT 4
73956: NEG
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 0
73964: PUSH
73965: LD_INT 5
73967: NEG
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 1
73975: PUSH
73976: LD_INT 4
73978: NEG
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 1
73986: PUSH
73987: LD_INT 3
73989: NEG
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 0
73997: PUSH
73998: LD_INT 3
74000: NEG
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: LD_INT 1
74008: NEG
74009: PUSH
74010: LD_INT 4
74012: NEG
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 1
74020: NEG
74021: PUSH
74022: LD_INT 5
74024: NEG
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: LD_INT 3
74035: NEG
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 2
74043: NEG
74044: PUSH
74045: LD_INT 5
74047: NEG
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 3
74055: PUSH
74056: LD_INT 0
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 3
74065: PUSH
74066: LD_INT 1
74068: NEG
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 4
74076: PUSH
74077: LD_INT 0
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 4
74086: PUSH
74087: LD_INT 1
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 3
74096: PUSH
74097: LD_INT 1
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 2
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 2
74116: PUSH
74117: LD_INT 1
74119: NEG
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 2
74127: PUSH
74128: LD_INT 2
74130: NEG
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 4
74138: PUSH
74139: LD_INT 2
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 4
74148: PUSH
74149: LD_INT 4
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 4
74158: PUSH
74159: LD_INT 3
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 5
74168: PUSH
74169: LD_INT 4
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 5
74178: PUSH
74179: LD_INT 5
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 4
74188: PUSH
74189: LD_INT 5
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 3
74198: PUSH
74199: LD_INT 4
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 3
74208: PUSH
74209: LD_INT 3
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 5
74218: PUSH
74219: LD_INT 3
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 3
74228: PUSH
74229: LD_INT 5
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74283: LD_ADDR_VAR 0 33
74287: PUSH
74288: LD_INT 4
74290: NEG
74291: PUSH
74292: LD_INT 4
74294: NEG
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 4
74302: NEG
74303: PUSH
74304: LD_INT 5
74306: NEG
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 3
74314: NEG
74315: PUSH
74316: LD_INT 4
74318: NEG
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 3
74326: NEG
74327: PUSH
74328: LD_INT 3
74330: NEG
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 4
74338: NEG
74339: PUSH
74340: LD_INT 3
74342: NEG
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 5
74350: NEG
74351: PUSH
74352: LD_INT 4
74354: NEG
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 5
74362: NEG
74363: PUSH
74364: LD_INT 5
74366: NEG
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 3
74374: NEG
74375: PUSH
74376: LD_INT 5
74378: NEG
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 5
74386: NEG
74387: PUSH
74388: LD_INT 3
74390: NEG
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 0
74398: PUSH
74399: LD_INT 3
74401: NEG
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 0
74409: PUSH
74410: LD_INT 4
74412: NEG
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 1
74420: PUSH
74421: LD_INT 3
74423: NEG
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 1
74431: PUSH
74432: LD_INT 2
74434: NEG
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 0
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 1
74453: NEG
74454: PUSH
74455: LD_INT 3
74457: NEG
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: LD_INT 1
74465: NEG
74466: PUSH
74467: LD_INT 4
74469: NEG
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 2
74477: PUSH
74478: LD_INT 2
74480: NEG
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 2
74488: NEG
74489: PUSH
74490: LD_INT 4
74492: NEG
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: LD_INT 4
74500: PUSH
74501: LD_INT 0
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 4
74510: PUSH
74511: LD_INT 1
74513: NEG
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 5
74521: PUSH
74522: LD_INT 0
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 5
74531: PUSH
74532: LD_INT 1
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 4
74541: PUSH
74542: LD_INT 1
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 3
74551: PUSH
74552: LD_INT 0
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 3
74561: PUSH
74562: LD_INT 1
74564: NEG
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 3
74572: PUSH
74573: LD_INT 2
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: LD_INT 5
74583: PUSH
74584: LD_INT 2
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 3
74593: PUSH
74594: LD_INT 3
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 3
74603: PUSH
74604: LD_INT 2
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 4
74613: PUSH
74614: LD_INT 3
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 4
74623: PUSH
74624: LD_INT 4
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 3
74633: PUSH
74634: LD_INT 4
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 2
74643: PUSH
74644: LD_INT 3
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 2
74653: PUSH
74654: LD_INT 2
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 4
74663: PUSH
74664: LD_INT 2
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: LD_INT 4
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 0
74683: PUSH
74684: LD_INT 4
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 0
74693: PUSH
74694: LD_INT 3
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: LD_INT 4
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 1
74713: PUSH
74714: LD_INT 5
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 5
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: PUSH
74735: LD_INT 4
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 1
74744: NEG
74745: PUSH
74746: LD_INT 3
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 2
74755: PUSH
74756: LD_INT 5
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PUSH
74763: LD_INT 2
74765: NEG
74766: PUSH
74767: LD_INT 3
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74821: LD_ADDR_VAR 0 34
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: LD_INT 4
74831: NEG
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 0
74839: PUSH
74840: LD_INT 5
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 1
74850: PUSH
74851: LD_INT 4
74853: NEG
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 1
74861: PUSH
74862: LD_INT 3
74864: NEG
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 0
74872: PUSH
74873: LD_INT 3
74875: NEG
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: LD_INT 4
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 1
74895: NEG
74896: PUSH
74897: LD_INT 5
74899: NEG
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 2
74907: PUSH
74908: LD_INT 3
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 2
74918: NEG
74919: PUSH
74920: LD_INT 5
74922: NEG
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 3
74930: PUSH
74931: LD_INT 0
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 3
74940: PUSH
74941: LD_INT 1
74943: NEG
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 4
74951: PUSH
74952: LD_INT 0
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 4
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 3
74971: PUSH
74972: LD_INT 1
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 2
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 2
74991: PUSH
74992: LD_INT 1
74994: NEG
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 2
75002: PUSH
75003: LD_INT 2
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 4
75013: PUSH
75014: LD_INT 2
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 4
75023: PUSH
75024: LD_INT 4
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: LD_INT 4
75033: PUSH
75034: LD_INT 3
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 5
75043: PUSH
75044: LD_INT 4
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 5
75053: PUSH
75054: LD_INT 5
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_INT 4
75063: PUSH
75064: LD_INT 5
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 3
75073: PUSH
75074: LD_INT 4
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: LD_INT 3
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 5
75093: PUSH
75094: LD_INT 3
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 3
75103: PUSH
75104: LD_INT 5
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 0
75113: PUSH
75114: LD_INT 3
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 0
75123: PUSH
75124: LD_INT 2
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 1
75133: PUSH
75134: LD_INT 3
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 1
75143: PUSH
75144: LD_INT 4
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 0
75153: PUSH
75154: LD_INT 4
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 1
75163: NEG
75164: PUSH
75165: LD_INT 3
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 1
75174: NEG
75175: PUSH
75176: LD_INT 2
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 2
75185: PUSH
75186: LD_INT 4
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 2
75195: NEG
75196: PUSH
75197: LD_INT 2
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 4
75206: NEG
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 4
75217: NEG
75218: PUSH
75219: LD_INT 1
75221: NEG
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: LD_INT 3
75229: NEG
75230: PUSH
75231: LD_INT 0
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 3
75240: NEG
75241: PUSH
75242: LD_INT 1
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 4
75251: NEG
75252: PUSH
75253: LD_INT 1
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 5
75262: NEG
75263: PUSH
75264: LD_INT 0
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 5
75273: NEG
75274: PUSH
75275: LD_INT 1
75277: NEG
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 5
75285: NEG
75286: PUSH
75287: LD_INT 2
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 3
75297: NEG
75298: PUSH
75299: LD_INT 2
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: ST_TO_ADDR
// end ; end ;
75353: GO 75356
75355: POP
// case btype of b_depot , b_warehouse :
75356: LD_VAR 0 1
75360: PUSH
75361: LD_INT 0
75363: DOUBLE
75364: EQUAL
75365: IFTRUE 75375
75367: LD_INT 1
75369: DOUBLE
75370: EQUAL
75371: IFTRUE 75375
75373: GO 75576
75375: POP
// case nation of nation_american :
75376: LD_VAR 0 5
75380: PUSH
75381: LD_INT 1
75383: DOUBLE
75384: EQUAL
75385: IFTRUE 75389
75387: GO 75445
75389: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75390: LD_ADDR_VAR 0 9
75394: PUSH
75395: LD_VAR 0 11
75399: PUSH
75400: LD_VAR 0 12
75404: PUSH
75405: LD_VAR 0 13
75409: PUSH
75410: LD_VAR 0 14
75414: PUSH
75415: LD_VAR 0 15
75419: PUSH
75420: LD_VAR 0 16
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: PUSH
75433: LD_VAR 0 4
75437: PUSH
75438: LD_INT 1
75440: PLUS
75441: ARRAY
75442: ST_TO_ADDR
75443: GO 75574
75445: LD_INT 2
75447: DOUBLE
75448: EQUAL
75449: IFTRUE 75453
75451: GO 75509
75453: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75454: LD_ADDR_VAR 0 9
75458: PUSH
75459: LD_VAR 0 17
75463: PUSH
75464: LD_VAR 0 18
75468: PUSH
75469: LD_VAR 0 19
75473: PUSH
75474: LD_VAR 0 20
75478: PUSH
75479: LD_VAR 0 21
75483: PUSH
75484: LD_VAR 0 22
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: LD_VAR 0 4
75501: PUSH
75502: LD_INT 1
75504: PLUS
75505: ARRAY
75506: ST_TO_ADDR
75507: GO 75574
75509: LD_INT 3
75511: DOUBLE
75512: EQUAL
75513: IFTRUE 75517
75515: GO 75573
75517: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75518: LD_ADDR_VAR 0 9
75522: PUSH
75523: LD_VAR 0 23
75527: PUSH
75528: LD_VAR 0 24
75532: PUSH
75533: LD_VAR 0 25
75537: PUSH
75538: LD_VAR 0 26
75542: PUSH
75543: LD_VAR 0 27
75547: PUSH
75548: LD_VAR 0 28
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: PUSH
75561: LD_VAR 0 4
75565: PUSH
75566: LD_INT 1
75568: PLUS
75569: ARRAY
75570: ST_TO_ADDR
75571: GO 75574
75573: POP
75574: GO 76129
75576: LD_INT 2
75578: DOUBLE
75579: EQUAL
75580: IFTRUE 75590
75582: LD_INT 3
75584: DOUBLE
75585: EQUAL
75586: IFTRUE 75590
75588: GO 75646
75590: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75591: LD_ADDR_VAR 0 9
75595: PUSH
75596: LD_VAR 0 29
75600: PUSH
75601: LD_VAR 0 30
75605: PUSH
75606: LD_VAR 0 31
75610: PUSH
75611: LD_VAR 0 32
75615: PUSH
75616: LD_VAR 0 33
75620: PUSH
75621: LD_VAR 0 34
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: PUSH
75634: LD_VAR 0 4
75638: PUSH
75639: LD_INT 1
75641: PLUS
75642: ARRAY
75643: ST_TO_ADDR
75644: GO 76129
75646: LD_INT 16
75648: DOUBLE
75649: EQUAL
75650: IFTRUE 75708
75652: LD_INT 17
75654: DOUBLE
75655: EQUAL
75656: IFTRUE 75708
75658: LD_INT 18
75660: DOUBLE
75661: EQUAL
75662: IFTRUE 75708
75664: LD_INT 19
75666: DOUBLE
75667: EQUAL
75668: IFTRUE 75708
75670: LD_INT 22
75672: DOUBLE
75673: EQUAL
75674: IFTRUE 75708
75676: LD_INT 20
75678: DOUBLE
75679: EQUAL
75680: IFTRUE 75708
75682: LD_INT 21
75684: DOUBLE
75685: EQUAL
75686: IFTRUE 75708
75688: LD_INT 23
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75708
75694: LD_INT 24
75696: DOUBLE
75697: EQUAL
75698: IFTRUE 75708
75700: LD_INT 25
75702: DOUBLE
75703: EQUAL
75704: IFTRUE 75708
75706: GO 75764
75708: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75709: LD_ADDR_VAR 0 9
75713: PUSH
75714: LD_VAR 0 35
75718: PUSH
75719: LD_VAR 0 36
75723: PUSH
75724: LD_VAR 0 37
75728: PUSH
75729: LD_VAR 0 38
75733: PUSH
75734: LD_VAR 0 39
75738: PUSH
75739: LD_VAR 0 40
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: PUSH
75752: LD_VAR 0 4
75756: PUSH
75757: LD_INT 1
75759: PLUS
75760: ARRAY
75761: ST_TO_ADDR
75762: GO 76129
75764: LD_INT 6
75766: DOUBLE
75767: EQUAL
75768: IFTRUE 75820
75770: LD_INT 7
75772: DOUBLE
75773: EQUAL
75774: IFTRUE 75820
75776: LD_INT 8
75778: DOUBLE
75779: EQUAL
75780: IFTRUE 75820
75782: LD_INT 13
75784: DOUBLE
75785: EQUAL
75786: IFTRUE 75820
75788: LD_INT 12
75790: DOUBLE
75791: EQUAL
75792: IFTRUE 75820
75794: LD_INT 15
75796: DOUBLE
75797: EQUAL
75798: IFTRUE 75820
75800: LD_INT 11
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75820
75806: LD_INT 14
75808: DOUBLE
75809: EQUAL
75810: IFTRUE 75820
75812: LD_INT 10
75814: DOUBLE
75815: EQUAL
75816: IFTRUE 75820
75818: GO 75876
75820: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75821: LD_ADDR_VAR 0 9
75825: PUSH
75826: LD_VAR 0 41
75830: PUSH
75831: LD_VAR 0 42
75835: PUSH
75836: LD_VAR 0 43
75840: PUSH
75841: LD_VAR 0 44
75845: PUSH
75846: LD_VAR 0 45
75850: PUSH
75851: LD_VAR 0 46
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: LD_VAR 0 4
75868: PUSH
75869: LD_INT 1
75871: PLUS
75872: ARRAY
75873: ST_TO_ADDR
75874: GO 76129
75876: LD_INT 36
75878: DOUBLE
75879: EQUAL
75880: IFTRUE 75884
75882: GO 75940
75884: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75885: LD_ADDR_VAR 0 9
75889: PUSH
75890: LD_VAR 0 47
75894: PUSH
75895: LD_VAR 0 48
75899: PUSH
75900: LD_VAR 0 49
75904: PUSH
75905: LD_VAR 0 50
75909: PUSH
75910: LD_VAR 0 51
75914: PUSH
75915: LD_VAR 0 52
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: PUSH
75928: LD_VAR 0 4
75932: PUSH
75933: LD_INT 1
75935: PLUS
75936: ARRAY
75937: ST_TO_ADDR
75938: GO 76129
75940: LD_INT 4
75942: DOUBLE
75943: EQUAL
75944: IFTRUE 75966
75946: LD_INT 5
75948: DOUBLE
75949: EQUAL
75950: IFTRUE 75966
75952: LD_INT 34
75954: DOUBLE
75955: EQUAL
75956: IFTRUE 75966
75958: LD_INT 37
75960: DOUBLE
75961: EQUAL
75962: IFTRUE 75966
75964: GO 76022
75966: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75967: LD_ADDR_VAR 0 9
75971: PUSH
75972: LD_VAR 0 53
75976: PUSH
75977: LD_VAR 0 54
75981: PUSH
75982: LD_VAR 0 55
75986: PUSH
75987: LD_VAR 0 56
75991: PUSH
75992: LD_VAR 0 57
75996: PUSH
75997: LD_VAR 0 58
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: PUSH
76010: LD_VAR 0 4
76014: PUSH
76015: LD_INT 1
76017: PLUS
76018: ARRAY
76019: ST_TO_ADDR
76020: GO 76129
76022: LD_INT 31
76024: DOUBLE
76025: EQUAL
76026: IFTRUE 76072
76028: LD_INT 32
76030: DOUBLE
76031: EQUAL
76032: IFTRUE 76072
76034: LD_INT 33
76036: DOUBLE
76037: EQUAL
76038: IFTRUE 76072
76040: LD_INT 27
76042: DOUBLE
76043: EQUAL
76044: IFTRUE 76072
76046: LD_INT 26
76048: DOUBLE
76049: EQUAL
76050: IFTRUE 76072
76052: LD_INT 28
76054: DOUBLE
76055: EQUAL
76056: IFTRUE 76072
76058: LD_INT 29
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76072
76064: LD_INT 30
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76072
76070: GO 76128
76072: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76073: LD_ADDR_VAR 0 9
76077: PUSH
76078: LD_VAR 0 59
76082: PUSH
76083: LD_VAR 0 60
76087: PUSH
76088: LD_VAR 0 61
76092: PUSH
76093: LD_VAR 0 62
76097: PUSH
76098: LD_VAR 0 63
76102: PUSH
76103: LD_VAR 0 64
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: PUSH
76116: LD_VAR 0 4
76120: PUSH
76121: LD_INT 1
76123: PLUS
76124: ARRAY
76125: ST_TO_ADDR
76126: GO 76129
76128: POP
// temp_list2 = [ ] ;
76129: LD_ADDR_VAR 0 10
76133: PUSH
76134: EMPTY
76135: ST_TO_ADDR
// for i in temp_list do
76136: LD_ADDR_VAR 0 8
76140: PUSH
76141: LD_VAR 0 9
76145: PUSH
76146: FOR_IN
76147: IFFALSE 76199
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76149: LD_ADDR_VAR 0 10
76153: PUSH
76154: LD_VAR 0 10
76158: PUSH
76159: LD_VAR 0 8
76163: PUSH
76164: LD_INT 1
76166: ARRAY
76167: PUSH
76168: LD_VAR 0 2
76172: PLUS
76173: PUSH
76174: LD_VAR 0 8
76178: PUSH
76179: LD_INT 2
76181: ARRAY
76182: PUSH
76183: LD_VAR 0 3
76187: PLUS
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: EMPTY
76194: LIST
76195: ADD
76196: ST_TO_ADDR
76197: GO 76146
76199: POP
76200: POP
// result = temp_list2 ;
76201: LD_ADDR_VAR 0 7
76205: PUSH
76206: LD_VAR 0 10
76210: ST_TO_ADDR
// end ;
76211: LD_VAR 0 7
76215: RET
// export function EnemyInRange ( unit , dist ) ; begin
76216: LD_INT 0
76218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: LD_VAR 0 1
76228: PPUSH
76229: CALL_OW 255
76233: PPUSH
76234: LD_VAR 0 1
76238: PPUSH
76239: CALL_OW 250
76243: PPUSH
76244: LD_VAR 0 1
76248: PPUSH
76249: CALL_OW 251
76253: PPUSH
76254: LD_VAR 0 2
76258: PPUSH
76259: CALL 49589 0 4
76263: PUSH
76264: LD_INT 4
76266: ARRAY
76267: ST_TO_ADDR
// end ;
76268: LD_VAR 0 3
76272: RET
// export function PlayerSeeMe ( unit ) ; begin
76273: LD_INT 0
76275: PPUSH
// result := See ( your_side , unit ) ;
76276: LD_ADDR_VAR 0 2
76280: PUSH
76281: LD_OWVAR 2
76285: PPUSH
76286: LD_VAR 0 1
76290: PPUSH
76291: CALL_OW 292
76295: ST_TO_ADDR
// end ;
76296: LD_VAR 0 2
76300: RET
// export function ReverseDir ( unit ) ; begin
76301: LD_INT 0
76303: PPUSH
// if not unit then
76304: LD_VAR 0 1
76308: NOT
76309: IFFALSE 76313
// exit ;
76311: GO 76336
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76313: LD_ADDR_VAR 0 2
76317: PUSH
76318: LD_VAR 0 1
76322: PPUSH
76323: CALL_OW 254
76327: PUSH
76328: LD_INT 3
76330: PLUS
76331: PUSH
76332: LD_INT 6
76334: MOD
76335: ST_TO_ADDR
// end ;
76336: LD_VAR 0 2
76340: RET
// export function ReverseArray ( array ) ; var i ; begin
76341: LD_INT 0
76343: PPUSH
76344: PPUSH
// if not array then
76345: LD_VAR 0 1
76349: NOT
76350: IFFALSE 76354
// exit ;
76352: GO 76409
// result := [ ] ;
76354: LD_ADDR_VAR 0 2
76358: PUSH
76359: EMPTY
76360: ST_TO_ADDR
// for i := array downto 1 do
76361: LD_ADDR_VAR 0 3
76365: PUSH
76366: DOUBLE
76367: LD_VAR 0 1
76371: INC
76372: ST_TO_ADDR
76373: LD_INT 1
76375: PUSH
76376: FOR_DOWNTO
76377: IFFALSE 76407
// result := Join ( result , array [ i ] ) ;
76379: LD_ADDR_VAR 0 2
76383: PUSH
76384: LD_VAR 0 2
76388: PPUSH
76389: LD_VAR 0 1
76393: PUSH
76394: LD_VAR 0 3
76398: ARRAY
76399: PPUSH
76400: CALL 81074 0 2
76404: ST_TO_ADDR
76405: GO 76376
76407: POP
76408: POP
// end ;
76409: LD_VAR 0 2
76413: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76414: LD_INT 0
76416: PPUSH
76417: PPUSH
76418: PPUSH
76419: PPUSH
76420: PPUSH
76421: PPUSH
// if not unit or not hexes then
76422: LD_VAR 0 1
76426: NOT
76427: PUSH
76428: LD_VAR 0 2
76432: NOT
76433: OR
76434: IFFALSE 76438
// exit ;
76436: GO 76561
// dist := 9999 ;
76438: LD_ADDR_VAR 0 5
76442: PUSH
76443: LD_INT 9999
76445: ST_TO_ADDR
// for i = 1 to hexes do
76446: LD_ADDR_VAR 0 4
76450: PUSH
76451: DOUBLE
76452: LD_INT 1
76454: DEC
76455: ST_TO_ADDR
76456: LD_VAR 0 2
76460: PUSH
76461: FOR_TO
76462: IFFALSE 76549
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76464: LD_ADDR_VAR 0 6
76468: PUSH
76469: LD_VAR 0 1
76473: PPUSH
76474: LD_VAR 0 2
76478: PUSH
76479: LD_VAR 0 4
76483: ARRAY
76484: PUSH
76485: LD_INT 1
76487: ARRAY
76488: PPUSH
76489: LD_VAR 0 2
76493: PUSH
76494: LD_VAR 0 4
76498: ARRAY
76499: PUSH
76500: LD_INT 2
76502: ARRAY
76503: PPUSH
76504: CALL_OW 297
76508: ST_TO_ADDR
// if tdist < dist then
76509: LD_VAR 0 6
76513: PUSH
76514: LD_VAR 0 5
76518: LESS
76519: IFFALSE 76547
// begin hex := hexes [ i ] ;
76521: LD_ADDR_VAR 0 8
76525: PUSH
76526: LD_VAR 0 2
76530: PUSH
76531: LD_VAR 0 4
76535: ARRAY
76536: ST_TO_ADDR
// dist := tdist ;
76537: LD_ADDR_VAR 0 5
76541: PUSH
76542: LD_VAR 0 6
76546: ST_TO_ADDR
// end ; end ;
76547: GO 76461
76549: POP
76550: POP
// result := hex ;
76551: LD_ADDR_VAR 0 3
76555: PUSH
76556: LD_VAR 0 8
76560: ST_TO_ADDR
// end ;
76561: LD_VAR 0 3
76565: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76566: LD_INT 0
76568: PPUSH
76569: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76570: LD_VAR 0 1
76574: NOT
76575: PUSH
76576: LD_VAR 0 1
76580: PUSH
76581: LD_INT 21
76583: PUSH
76584: LD_INT 2
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 23
76593: PUSH
76594: LD_INT 2
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PPUSH
76605: CALL_OW 69
76609: IN
76610: NOT
76611: OR
76612: IFFALSE 76616
// exit ;
76614: GO 76663
// for i = 1 to 3 do
76616: LD_ADDR_VAR 0 3
76620: PUSH
76621: DOUBLE
76622: LD_INT 1
76624: DEC
76625: ST_TO_ADDR
76626: LD_INT 3
76628: PUSH
76629: FOR_TO
76630: IFFALSE 76661
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76632: LD_VAR 0 1
76636: PPUSH
76637: CALL_OW 250
76641: PPUSH
76642: LD_VAR 0 1
76646: PPUSH
76647: CALL_OW 251
76651: PPUSH
76652: LD_INT 1
76654: PPUSH
76655: CALL_OW 453
76659: GO 76629
76661: POP
76662: POP
// end ;
76663: LD_VAR 0 2
76667: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76668: LD_INT 0
76670: PPUSH
76671: PPUSH
76672: PPUSH
76673: PPUSH
76674: PPUSH
76675: PPUSH
// if not unit or not enemy_unit then
76676: LD_VAR 0 1
76680: NOT
76681: PUSH
76682: LD_VAR 0 2
76686: NOT
76687: OR
76688: IFFALSE 76692
// exit ;
76690: GO 77159
// if GetLives ( i ) < 250 then
76692: LD_VAR 0 4
76696: PPUSH
76697: CALL_OW 256
76701: PUSH
76702: LD_INT 250
76704: LESS
76705: IFFALSE 76718
// begin ComAutodestruct ( i ) ;
76707: LD_VAR 0 4
76711: PPUSH
76712: CALL 76566 0 1
// exit ;
76716: GO 77159
// end ; x := GetX ( enemy_unit ) ;
76718: LD_ADDR_VAR 0 7
76722: PUSH
76723: LD_VAR 0 2
76727: PPUSH
76728: CALL_OW 250
76732: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76733: LD_ADDR_VAR 0 8
76737: PUSH
76738: LD_VAR 0 2
76742: PPUSH
76743: CALL_OW 251
76747: ST_TO_ADDR
// if not x or not y then
76748: LD_VAR 0 7
76752: NOT
76753: PUSH
76754: LD_VAR 0 8
76758: NOT
76759: OR
76760: IFFALSE 76764
// exit ;
76762: GO 77159
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76764: LD_ADDR_VAR 0 6
76768: PUSH
76769: LD_VAR 0 7
76773: PPUSH
76774: LD_INT 0
76776: PPUSH
76777: LD_INT 4
76779: PPUSH
76780: CALL_OW 272
76784: PUSH
76785: LD_VAR 0 8
76789: PPUSH
76790: LD_INT 0
76792: PPUSH
76793: LD_INT 4
76795: PPUSH
76796: CALL_OW 273
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PUSH
76805: LD_VAR 0 7
76809: PPUSH
76810: LD_INT 1
76812: PPUSH
76813: LD_INT 4
76815: PPUSH
76816: CALL_OW 272
76820: PUSH
76821: LD_VAR 0 8
76825: PPUSH
76826: LD_INT 1
76828: PPUSH
76829: LD_INT 4
76831: PPUSH
76832: CALL_OW 273
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: PUSH
76841: LD_VAR 0 7
76845: PPUSH
76846: LD_INT 2
76848: PPUSH
76849: LD_INT 4
76851: PPUSH
76852: CALL_OW 272
76856: PUSH
76857: LD_VAR 0 8
76861: PPUSH
76862: LD_INT 2
76864: PPUSH
76865: LD_INT 4
76867: PPUSH
76868: CALL_OW 273
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_VAR 0 7
76881: PPUSH
76882: LD_INT 3
76884: PPUSH
76885: LD_INT 4
76887: PPUSH
76888: CALL_OW 272
76892: PUSH
76893: LD_VAR 0 8
76897: PPUSH
76898: LD_INT 3
76900: PPUSH
76901: LD_INT 4
76903: PPUSH
76904: CALL_OW 273
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 7
76917: PPUSH
76918: LD_INT 4
76920: PPUSH
76921: LD_INT 4
76923: PPUSH
76924: CALL_OW 272
76928: PUSH
76929: LD_VAR 0 8
76933: PPUSH
76934: LD_INT 4
76936: PPUSH
76937: LD_INT 4
76939: PPUSH
76940: CALL_OW 273
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_VAR 0 7
76953: PPUSH
76954: LD_INT 5
76956: PPUSH
76957: LD_INT 4
76959: PPUSH
76960: CALL_OW 272
76964: PUSH
76965: LD_VAR 0 8
76969: PPUSH
76970: LD_INT 5
76972: PPUSH
76973: LD_INT 4
76975: PPUSH
76976: CALL_OW 273
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: ST_TO_ADDR
// for i = tmp downto 1 do
76993: LD_ADDR_VAR 0 4
76997: PUSH
76998: DOUBLE
76999: LD_VAR 0 6
77003: INC
77004: ST_TO_ADDR
77005: LD_INT 1
77007: PUSH
77008: FOR_DOWNTO
77009: IFFALSE 77110
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77011: LD_VAR 0 6
77015: PUSH
77016: LD_VAR 0 4
77020: ARRAY
77021: PUSH
77022: LD_INT 1
77024: ARRAY
77025: PPUSH
77026: LD_VAR 0 6
77030: PUSH
77031: LD_VAR 0 4
77035: ARRAY
77036: PUSH
77037: LD_INT 2
77039: ARRAY
77040: PPUSH
77041: CALL_OW 488
77045: NOT
77046: PUSH
77047: LD_VAR 0 6
77051: PUSH
77052: LD_VAR 0 4
77056: ARRAY
77057: PUSH
77058: LD_INT 1
77060: ARRAY
77061: PPUSH
77062: LD_VAR 0 6
77066: PUSH
77067: LD_VAR 0 4
77071: ARRAY
77072: PUSH
77073: LD_INT 2
77075: ARRAY
77076: PPUSH
77077: CALL_OW 428
77081: PUSH
77082: LD_INT 0
77084: NONEQUAL
77085: OR
77086: IFFALSE 77108
// tmp := Delete ( tmp , i ) ;
77088: LD_ADDR_VAR 0 6
77092: PUSH
77093: LD_VAR 0 6
77097: PPUSH
77098: LD_VAR 0 4
77102: PPUSH
77103: CALL_OW 3
77107: ST_TO_ADDR
77108: GO 77008
77110: POP
77111: POP
// j := GetClosestHex ( unit , tmp ) ;
77112: LD_ADDR_VAR 0 5
77116: PUSH
77117: LD_VAR 0 1
77121: PPUSH
77122: LD_VAR 0 6
77126: PPUSH
77127: CALL 76414 0 2
77131: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77132: LD_VAR 0 1
77136: PPUSH
77137: LD_VAR 0 5
77141: PUSH
77142: LD_INT 1
77144: ARRAY
77145: PPUSH
77146: LD_VAR 0 5
77150: PUSH
77151: LD_INT 2
77153: ARRAY
77154: PPUSH
77155: CALL_OW 111
// end ;
77159: LD_VAR 0 3
77163: RET
// export function PrepareApemanSoldier ( ) ; begin
77164: LD_INT 0
77166: PPUSH
// uc_nation := 0 ;
77167: LD_ADDR_OWVAR 21
77171: PUSH
77172: LD_INT 0
77174: ST_TO_ADDR
// hc_sex := sex_male ;
77175: LD_ADDR_OWVAR 27
77179: PUSH
77180: LD_INT 1
77182: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77183: LD_ADDR_OWVAR 28
77187: PUSH
77188: LD_INT 15
77190: ST_TO_ADDR
// hc_gallery :=  ;
77191: LD_ADDR_OWVAR 33
77195: PUSH
77196: LD_STRING 
77198: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77199: LD_ADDR_OWVAR 31
77203: PUSH
77204: LD_INT 0
77206: PPUSH
77207: LD_INT 3
77209: PPUSH
77210: CALL_OW 12
77214: PUSH
77215: LD_INT 0
77217: PPUSH
77218: LD_INT 3
77220: PPUSH
77221: CALL_OW 12
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: LD_INT 0
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: ST_TO_ADDR
// end ;
77238: LD_VAR 0 1
77242: RET
// export function PrepareApemanEngineer ( ) ; begin
77243: LD_INT 0
77245: PPUSH
// uc_nation := 0 ;
77246: LD_ADDR_OWVAR 21
77250: PUSH
77251: LD_INT 0
77253: ST_TO_ADDR
// hc_sex := sex_male ;
77254: LD_ADDR_OWVAR 27
77258: PUSH
77259: LD_INT 1
77261: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77262: LD_ADDR_OWVAR 28
77266: PUSH
77267: LD_INT 16
77269: ST_TO_ADDR
// hc_gallery :=  ;
77270: LD_ADDR_OWVAR 33
77274: PUSH
77275: LD_STRING 
77277: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77278: LD_ADDR_OWVAR 31
77282: PUSH
77283: LD_INT 0
77285: PPUSH
77286: LD_INT 3
77288: PPUSH
77289: CALL_OW 12
77293: PUSH
77294: LD_INT 0
77296: PPUSH
77297: LD_INT 3
77299: PPUSH
77300: CALL_OW 12
77304: PUSH
77305: LD_INT 0
77307: PUSH
77308: LD_INT 0
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: ST_TO_ADDR
// end ;
77317: LD_VAR 0 1
77321: RET
// export function PrepareApeman ( agressivity ) ; begin
77322: LD_INT 0
77324: PPUSH
// uc_side := 0 ;
77325: LD_ADDR_OWVAR 20
77329: PUSH
77330: LD_INT 0
77332: ST_TO_ADDR
// uc_nation := 0 ;
77333: LD_ADDR_OWVAR 21
77337: PUSH
77338: LD_INT 0
77340: ST_TO_ADDR
// hc_sex := sex_male ;
77341: LD_ADDR_OWVAR 27
77345: PUSH
77346: LD_INT 1
77348: ST_TO_ADDR
// hc_class := class_apeman ;
77349: LD_ADDR_OWVAR 28
77353: PUSH
77354: LD_INT 12
77356: ST_TO_ADDR
// hc_gallery :=  ;
77357: LD_ADDR_OWVAR 33
77361: PUSH
77362: LD_STRING 
77364: ST_TO_ADDR
// if agressivity = 0 then
77365: LD_VAR 0 1
77369: PUSH
77370: LD_INT 0
77372: EQUAL
77373: IFFALSE 77385
// hc_agressivity := 0 else
77375: LD_ADDR_OWVAR 35
77379: PUSH
77380: LD_INT 0
77382: ST_TO_ADDR
77383: GO 77406
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77385: LD_ADDR_OWVAR 35
77389: PUSH
77390: LD_VAR 0 1
77394: NEG
77395: PPUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 12
77405: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77406: LD_ADDR_OWVAR 31
77410: PUSH
77411: LD_INT 0
77413: PPUSH
77414: LD_INT 3
77416: PPUSH
77417: CALL_OW 12
77421: PUSH
77422: LD_INT 0
77424: PPUSH
77425: LD_INT 3
77427: PPUSH
77428: CALL_OW 12
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: LD_INT 0
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: ST_TO_ADDR
// end ;
77445: LD_VAR 0 2
77449: RET
// export function PrepareTiger ( agressivity ) ; begin
77450: LD_INT 0
77452: PPUSH
// uc_side := 0 ;
77453: LD_ADDR_OWVAR 20
77457: PUSH
77458: LD_INT 0
77460: ST_TO_ADDR
// uc_nation := 0 ;
77461: LD_ADDR_OWVAR 21
77465: PUSH
77466: LD_INT 0
77468: ST_TO_ADDR
// hc_class := class_tiger ;
77469: LD_ADDR_OWVAR 28
77473: PUSH
77474: LD_INT 14
77476: ST_TO_ADDR
// hc_gallery :=  ;
77477: LD_ADDR_OWVAR 33
77481: PUSH
77482: LD_STRING 
77484: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77485: LD_ADDR_OWVAR 35
77489: PUSH
77490: LD_VAR 0 1
77494: NEG
77495: PPUSH
77496: LD_VAR 0 1
77500: PPUSH
77501: CALL_OW 12
77505: ST_TO_ADDR
// end ;
77506: LD_VAR 0 2
77510: RET
// export function PrepareEnchidna ( ) ; begin
77511: LD_INT 0
77513: PPUSH
// uc_side := 0 ;
77514: LD_ADDR_OWVAR 20
77518: PUSH
77519: LD_INT 0
77521: ST_TO_ADDR
// uc_nation := 0 ;
77522: LD_ADDR_OWVAR 21
77526: PUSH
77527: LD_INT 0
77529: ST_TO_ADDR
// hc_class := class_baggie ;
77530: LD_ADDR_OWVAR 28
77534: PUSH
77535: LD_INT 13
77537: ST_TO_ADDR
// hc_gallery :=  ;
77538: LD_ADDR_OWVAR 33
77542: PUSH
77543: LD_STRING 
77545: ST_TO_ADDR
// end ;
77546: LD_VAR 0 1
77550: RET
// export function PrepareFrog ( ) ; begin
77551: LD_INT 0
77553: PPUSH
// uc_side := 0 ;
77554: LD_ADDR_OWVAR 20
77558: PUSH
77559: LD_INT 0
77561: ST_TO_ADDR
// uc_nation := 0 ;
77562: LD_ADDR_OWVAR 21
77566: PUSH
77567: LD_INT 0
77569: ST_TO_ADDR
// hc_class := class_frog ;
77570: LD_ADDR_OWVAR 28
77574: PUSH
77575: LD_INT 19
77577: ST_TO_ADDR
// hc_gallery :=  ;
77578: LD_ADDR_OWVAR 33
77582: PUSH
77583: LD_STRING 
77585: ST_TO_ADDR
// end ;
77586: LD_VAR 0 1
77590: RET
// export function PrepareFish ( ) ; begin
77591: LD_INT 0
77593: PPUSH
// uc_side := 0 ;
77594: LD_ADDR_OWVAR 20
77598: PUSH
77599: LD_INT 0
77601: ST_TO_ADDR
// uc_nation := 0 ;
77602: LD_ADDR_OWVAR 21
77606: PUSH
77607: LD_INT 0
77609: ST_TO_ADDR
// hc_class := class_fish ;
77610: LD_ADDR_OWVAR 28
77614: PUSH
77615: LD_INT 20
77617: ST_TO_ADDR
// hc_gallery :=  ;
77618: LD_ADDR_OWVAR 33
77622: PUSH
77623: LD_STRING 
77625: ST_TO_ADDR
// end ;
77626: LD_VAR 0 1
77630: RET
// export function PrepareBird ( ) ; begin
77631: LD_INT 0
77633: PPUSH
// uc_side := 0 ;
77634: LD_ADDR_OWVAR 20
77638: PUSH
77639: LD_INT 0
77641: ST_TO_ADDR
// uc_nation := 0 ;
77642: LD_ADDR_OWVAR 21
77646: PUSH
77647: LD_INT 0
77649: ST_TO_ADDR
// hc_class := class_phororhacos ;
77650: LD_ADDR_OWVAR 28
77654: PUSH
77655: LD_INT 18
77657: ST_TO_ADDR
// hc_gallery :=  ;
77658: LD_ADDR_OWVAR 33
77662: PUSH
77663: LD_STRING 
77665: ST_TO_ADDR
// end ;
77666: LD_VAR 0 1
77670: RET
// export function PrepareHorse ( ) ; begin
77671: LD_INT 0
77673: PPUSH
// uc_side := 0 ;
77674: LD_ADDR_OWVAR 20
77678: PUSH
77679: LD_INT 0
77681: ST_TO_ADDR
// uc_nation := 0 ;
77682: LD_ADDR_OWVAR 21
77686: PUSH
77687: LD_INT 0
77689: ST_TO_ADDR
// hc_class := class_horse ;
77690: LD_ADDR_OWVAR 28
77694: PUSH
77695: LD_INT 21
77697: ST_TO_ADDR
// hc_gallery :=  ;
77698: LD_ADDR_OWVAR 33
77702: PUSH
77703: LD_STRING 
77705: ST_TO_ADDR
// end ;
77706: LD_VAR 0 1
77710: RET
// export function PrepareMastodont ( ) ; begin
77711: LD_INT 0
77713: PPUSH
// uc_side := 0 ;
77714: LD_ADDR_OWVAR 20
77718: PUSH
77719: LD_INT 0
77721: ST_TO_ADDR
// uc_nation := 0 ;
77722: LD_ADDR_OWVAR 21
77726: PUSH
77727: LD_INT 0
77729: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77730: LD_ADDR_OWVAR 37
77734: PUSH
77735: LD_INT 31
77737: ST_TO_ADDR
// vc_control := control_rider ;
77738: LD_ADDR_OWVAR 38
77742: PUSH
77743: LD_INT 4
77745: ST_TO_ADDR
// end ;
77746: LD_VAR 0 1
77750: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77751: LD_INT 0
77753: PPUSH
77754: PPUSH
77755: PPUSH
// uc_side = 0 ;
77756: LD_ADDR_OWVAR 20
77760: PUSH
77761: LD_INT 0
77763: ST_TO_ADDR
// uc_nation = 0 ;
77764: LD_ADDR_OWVAR 21
77768: PUSH
77769: LD_INT 0
77771: ST_TO_ADDR
// InitHc_All ( ) ;
77772: CALL_OW 584
// InitVc ;
77776: CALL_OW 20
// if mastodonts then
77780: LD_VAR 0 6
77784: IFFALSE 77851
// for i = 1 to mastodonts do
77786: LD_ADDR_VAR 0 11
77790: PUSH
77791: DOUBLE
77792: LD_INT 1
77794: DEC
77795: ST_TO_ADDR
77796: LD_VAR 0 6
77800: PUSH
77801: FOR_TO
77802: IFFALSE 77849
// begin vc_chassis := 31 ;
77804: LD_ADDR_OWVAR 37
77808: PUSH
77809: LD_INT 31
77811: ST_TO_ADDR
// vc_control := control_rider ;
77812: LD_ADDR_OWVAR 38
77816: PUSH
77817: LD_INT 4
77819: ST_TO_ADDR
// animal := CreateVehicle ;
77820: LD_ADDR_VAR 0 12
77824: PUSH
77825: CALL_OW 45
77829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77830: LD_VAR 0 12
77834: PPUSH
77835: LD_VAR 0 8
77839: PPUSH
77840: LD_INT 0
77842: PPUSH
77843: CALL 79979 0 3
// end ;
77847: GO 77801
77849: POP
77850: POP
// if horses then
77851: LD_VAR 0 5
77855: IFFALSE 77922
// for i = 1 to horses do
77857: LD_ADDR_VAR 0 11
77861: PUSH
77862: DOUBLE
77863: LD_INT 1
77865: DEC
77866: ST_TO_ADDR
77867: LD_VAR 0 5
77871: PUSH
77872: FOR_TO
77873: IFFALSE 77920
// begin hc_class := 21 ;
77875: LD_ADDR_OWVAR 28
77879: PUSH
77880: LD_INT 21
77882: ST_TO_ADDR
// hc_gallery :=  ;
77883: LD_ADDR_OWVAR 33
77887: PUSH
77888: LD_STRING 
77890: ST_TO_ADDR
// animal := CreateHuman ;
77891: LD_ADDR_VAR 0 12
77895: PUSH
77896: CALL_OW 44
77900: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77901: LD_VAR 0 12
77905: PPUSH
77906: LD_VAR 0 8
77910: PPUSH
77911: LD_INT 0
77913: PPUSH
77914: CALL 79979 0 3
// end ;
77918: GO 77872
77920: POP
77921: POP
// if birds then
77922: LD_VAR 0 1
77926: IFFALSE 77993
// for i = 1 to birds do
77928: LD_ADDR_VAR 0 11
77932: PUSH
77933: DOUBLE
77934: LD_INT 1
77936: DEC
77937: ST_TO_ADDR
77938: LD_VAR 0 1
77942: PUSH
77943: FOR_TO
77944: IFFALSE 77991
// begin hc_class := 18 ;
77946: LD_ADDR_OWVAR 28
77950: PUSH
77951: LD_INT 18
77953: ST_TO_ADDR
// hc_gallery =  ;
77954: LD_ADDR_OWVAR 33
77958: PUSH
77959: LD_STRING 
77961: ST_TO_ADDR
// animal := CreateHuman ;
77962: LD_ADDR_VAR 0 12
77966: PUSH
77967: CALL_OW 44
77971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77972: LD_VAR 0 12
77976: PPUSH
77977: LD_VAR 0 8
77981: PPUSH
77982: LD_INT 0
77984: PPUSH
77985: CALL 79979 0 3
// end ;
77989: GO 77943
77991: POP
77992: POP
// if tigers then
77993: LD_VAR 0 2
77997: IFFALSE 78081
// for i = 1 to tigers do
77999: LD_ADDR_VAR 0 11
78003: PUSH
78004: DOUBLE
78005: LD_INT 1
78007: DEC
78008: ST_TO_ADDR
78009: LD_VAR 0 2
78013: PUSH
78014: FOR_TO
78015: IFFALSE 78079
// begin hc_class = class_tiger ;
78017: LD_ADDR_OWVAR 28
78021: PUSH
78022: LD_INT 14
78024: ST_TO_ADDR
// hc_gallery =  ;
78025: LD_ADDR_OWVAR 33
78029: PUSH
78030: LD_STRING 
78032: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78033: LD_ADDR_OWVAR 35
78037: PUSH
78038: LD_INT 7
78040: NEG
78041: PPUSH
78042: LD_INT 7
78044: PPUSH
78045: CALL_OW 12
78049: ST_TO_ADDR
// animal := CreateHuman ;
78050: LD_ADDR_VAR 0 12
78054: PUSH
78055: CALL_OW 44
78059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78060: LD_VAR 0 12
78064: PPUSH
78065: LD_VAR 0 8
78069: PPUSH
78070: LD_INT 0
78072: PPUSH
78073: CALL 79979 0 3
// end ;
78077: GO 78014
78079: POP
78080: POP
// if apemans then
78081: LD_VAR 0 3
78085: IFFALSE 78208
// for i = 1 to apemans do
78087: LD_ADDR_VAR 0 11
78091: PUSH
78092: DOUBLE
78093: LD_INT 1
78095: DEC
78096: ST_TO_ADDR
78097: LD_VAR 0 3
78101: PUSH
78102: FOR_TO
78103: IFFALSE 78206
// begin hc_class = class_apeman ;
78105: LD_ADDR_OWVAR 28
78109: PUSH
78110: LD_INT 12
78112: ST_TO_ADDR
// hc_gallery =  ;
78113: LD_ADDR_OWVAR 33
78117: PUSH
78118: LD_STRING 
78120: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78121: LD_ADDR_OWVAR 35
78125: PUSH
78126: LD_INT 2
78128: NEG
78129: PPUSH
78130: LD_INT 2
78132: PPUSH
78133: CALL_OW 12
78137: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78138: LD_ADDR_OWVAR 31
78142: PUSH
78143: LD_INT 1
78145: PPUSH
78146: LD_INT 3
78148: PPUSH
78149: CALL_OW 12
78153: PUSH
78154: LD_INT 1
78156: PPUSH
78157: LD_INT 3
78159: PPUSH
78160: CALL_OW 12
78164: PUSH
78165: LD_INT 0
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: ST_TO_ADDR
// animal := CreateHuman ;
78177: LD_ADDR_VAR 0 12
78181: PUSH
78182: CALL_OW 44
78186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78187: LD_VAR 0 12
78191: PPUSH
78192: LD_VAR 0 8
78196: PPUSH
78197: LD_INT 0
78199: PPUSH
78200: CALL 79979 0 3
// end ;
78204: GO 78102
78206: POP
78207: POP
// if enchidnas then
78208: LD_VAR 0 4
78212: IFFALSE 78279
// for i = 1 to enchidnas do
78214: LD_ADDR_VAR 0 11
78218: PUSH
78219: DOUBLE
78220: LD_INT 1
78222: DEC
78223: ST_TO_ADDR
78224: LD_VAR 0 4
78228: PUSH
78229: FOR_TO
78230: IFFALSE 78277
// begin hc_class = 13 ;
78232: LD_ADDR_OWVAR 28
78236: PUSH
78237: LD_INT 13
78239: ST_TO_ADDR
// hc_gallery =  ;
78240: LD_ADDR_OWVAR 33
78244: PUSH
78245: LD_STRING 
78247: ST_TO_ADDR
// animal := CreateHuman ;
78248: LD_ADDR_VAR 0 12
78252: PUSH
78253: CALL_OW 44
78257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78258: LD_VAR 0 12
78262: PPUSH
78263: LD_VAR 0 8
78267: PPUSH
78268: LD_INT 0
78270: PPUSH
78271: CALL 79979 0 3
// end ;
78275: GO 78229
78277: POP
78278: POP
// if fishes then
78279: LD_VAR 0 7
78283: IFFALSE 78350
// for i = 1 to fishes do
78285: LD_ADDR_VAR 0 11
78289: PUSH
78290: DOUBLE
78291: LD_INT 1
78293: DEC
78294: ST_TO_ADDR
78295: LD_VAR 0 7
78299: PUSH
78300: FOR_TO
78301: IFFALSE 78348
// begin hc_class = 20 ;
78303: LD_ADDR_OWVAR 28
78307: PUSH
78308: LD_INT 20
78310: ST_TO_ADDR
// hc_gallery =  ;
78311: LD_ADDR_OWVAR 33
78315: PUSH
78316: LD_STRING 
78318: ST_TO_ADDR
// animal := CreateHuman ;
78319: LD_ADDR_VAR 0 12
78323: PUSH
78324: CALL_OW 44
78328: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78329: LD_VAR 0 12
78333: PPUSH
78334: LD_VAR 0 9
78338: PPUSH
78339: LD_INT 0
78341: PPUSH
78342: CALL 79979 0 3
// end ;
78346: GO 78300
78348: POP
78349: POP
// end ;
78350: LD_VAR 0 10
78354: RET
// export function WantHeal ( sci , unit ) ; begin
78355: LD_INT 0
78357: PPUSH
// if GetTaskList ( sci ) > 0 then
78358: LD_VAR 0 1
78362: PPUSH
78363: CALL_OW 437
78367: PUSH
78368: LD_INT 0
78370: GREATER
78371: IFFALSE 78441
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78373: LD_VAR 0 1
78377: PPUSH
78378: CALL_OW 437
78382: PUSH
78383: LD_INT 1
78385: ARRAY
78386: PUSH
78387: LD_INT 1
78389: ARRAY
78390: PUSH
78391: LD_STRING l
78393: EQUAL
78394: PUSH
78395: LD_VAR 0 1
78399: PPUSH
78400: CALL_OW 437
78404: PUSH
78405: LD_INT 1
78407: ARRAY
78408: PUSH
78409: LD_INT 4
78411: ARRAY
78412: PUSH
78413: LD_VAR 0 2
78417: EQUAL
78418: AND
78419: IFFALSE 78431
// result := true else
78421: LD_ADDR_VAR 0 3
78425: PUSH
78426: LD_INT 1
78428: ST_TO_ADDR
78429: GO 78439
// result := false ;
78431: LD_ADDR_VAR 0 3
78435: PUSH
78436: LD_INT 0
78438: ST_TO_ADDR
// end else
78439: GO 78449
// result := false ;
78441: LD_ADDR_VAR 0 3
78445: PUSH
78446: LD_INT 0
78448: ST_TO_ADDR
// end ;
78449: LD_VAR 0 3
78453: RET
// export function HealTarget ( sci ) ; begin
78454: LD_INT 0
78456: PPUSH
// if not sci then
78457: LD_VAR 0 1
78461: NOT
78462: IFFALSE 78466
// exit ;
78464: GO 78531
// result := 0 ;
78466: LD_ADDR_VAR 0 2
78470: PUSH
78471: LD_INT 0
78473: ST_TO_ADDR
// if GetTaskList ( sci ) then
78474: LD_VAR 0 1
78478: PPUSH
78479: CALL_OW 437
78483: IFFALSE 78531
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78485: LD_VAR 0 1
78489: PPUSH
78490: CALL_OW 437
78494: PUSH
78495: LD_INT 1
78497: ARRAY
78498: PUSH
78499: LD_INT 1
78501: ARRAY
78502: PUSH
78503: LD_STRING l
78505: EQUAL
78506: IFFALSE 78531
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78508: LD_ADDR_VAR 0 2
78512: PUSH
78513: LD_VAR 0 1
78517: PPUSH
78518: CALL_OW 437
78522: PUSH
78523: LD_INT 1
78525: ARRAY
78526: PUSH
78527: LD_INT 4
78529: ARRAY
78530: ST_TO_ADDR
// end ;
78531: LD_VAR 0 2
78535: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78536: LD_INT 0
78538: PPUSH
78539: PPUSH
78540: PPUSH
78541: PPUSH
// if not base_units then
78542: LD_VAR 0 1
78546: NOT
78547: IFFALSE 78551
// exit ;
78549: GO 78638
// result := false ;
78551: LD_ADDR_VAR 0 2
78555: PUSH
78556: LD_INT 0
78558: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78559: LD_ADDR_VAR 0 5
78563: PUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: LD_INT 21
78571: PUSH
78572: LD_INT 3
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PPUSH
78579: CALL_OW 72
78583: ST_TO_ADDR
// if not tmp then
78584: LD_VAR 0 5
78588: NOT
78589: IFFALSE 78593
// exit ;
78591: GO 78638
// for i in tmp do
78593: LD_ADDR_VAR 0 3
78597: PUSH
78598: LD_VAR 0 5
78602: PUSH
78603: FOR_IN
78604: IFFALSE 78636
// begin result := EnemyInRange ( i , 22 ) ;
78606: LD_ADDR_VAR 0 2
78610: PUSH
78611: LD_VAR 0 3
78615: PPUSH
78616: LD_INT 22
78618: PPUSH
78619: CALL 76216 0 2
78623: ST_TO_ADDR
// if result then
78624: LD_VAR 0 2
78628: IFFALSE 78634
// exit ;
78630: POP
78631: POP
78632: GO 78638
// end ;
78634: GO 78603
78636: POP
78637: POP
// end ;
78638: LD_VAR 0 2
78642: RET
// export function FilterByTag ( units , tag ) ; begin
78643: LD_INT 0
78645: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78646: LD_ADDR_VAR 0 3
78650: PUSH
78651: LD_VAR 0 1
78655: PPUSH
78656: LD_INT 120
78658: PUSH
78659: LD_VAR 0 2
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PPUSH
78668: CALL_OW 72
78672: ST_TO_ADDR
// end ;
78673: LD_VAR 0 3
78677: RET
// export function IsDriver ( un ) ; begin
78678: LD_INT 0
78680: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78681: LD_ADDR_VAR 0 2
78685: PUSH
78686: LD_VAR 0 1
78690: PUSH
78691: LD_INT 55
78693: PUSH
78694: EMPTY
78695: LIST
78696: PPUSH
78697: CALL_OW 69
78701: IN
78702: ST_TO_ADDR
// end ;
78703: LD_VAR 0 2
78707: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78708: LD_INT 0
78710: PPUSH
78711: PPUSH
// list := [ ] ;
78712: LD_ADDR_VAR 0 5
78716: PUSH
78717: EMPTY
78718: ST_TO_ADDR
// case d of 0 :
78719: LD_VAR 0 3
78723: PUSH
78724: LD_INT 0
78726: DOUBLE
78727: EQUAL
78728: IFTRUE 78732
78730: GO 78865
78732: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78733: LD_ADDR_VAR 0 5
78737: PUSH
78738: LD_VAR 0 1
78742: PUSH
78743: LD_INT 4
78745: MINUS
78746: PUSH
78747: LD_VAR 0 2
78751: PUSH
78752: LD_INT 4
78754: MINUS
78755: PUSH
78756: LD_INT 2
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: LIST
78763: PUSH
78764: LD_VAR 0 1
78768: PUSH
78769: LD_INT 3
78771: MINUS
78772: PUSH
78773: LD_VAR 0 2
78777: PUSH
78778: LD_INT 1
78780: PUSH
78781: EMPTY
78782: LIST
78783: LIST
78784: LIST
78785: PUSH
78786: LD_VAR 0 1
78790: PUSH
78791: LD_INT 4
78793: PLUS
78794: PUSH
78795: LD_VAR 0 2
78799: PUSH
78800: LD_INT 4
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: LIST
78807: PUSH
78808: LD_VAR 0 1
78812: PUSH
78813: LD_INT 3
78815: PLUS
78816: PUSH
78817: LD_VAR 0 2
78821: PUSH
78822: LD_INT 3
78824: PLUS
78825: PUSH
78826: LD_INT 5
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: LIST
78833: PUSH
78834: LD_VAR 0 1
78838: PUSH
78839: LD_VAR 0 2
78843: PUSH
78844: LD_INT 4
78846: PLUS
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: LIST
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: ST_TO_ADDR
// end ; 1 :
78863: GO 79563
78865: LD_INT 1
78867: DOUBLE
78868: EQUAL
78869: IFTRUE 78873
78871: GO 79006
78873: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78874: LD_ADDR_VAR 0 5
78878: PUSH
78879: LD_VAR 0 1
78883: PUSH
78884: LD_VAR 0 2
78888: PUSH
78889: LD_INT 4
78891: MINUS
78892: PUSH
78893: LD_INT 3
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: LIST
78900: PUSH
78901: LD_VAR 0 1
78905: PUSH
78906: LD_INT 3
78908: MINUS
78909: PUSH
78910: LD_VAR 0 2
78914: PUSH
78915: LD_INT 3
78917: MINUS
78918: PUSH
78919: LD_INT 2
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: LIST
78926: PUSH
78927: LD_VAR 0 1
78931: PUSH
78932: LD_INT 4
78934: MINUS
78935: PUSH
78936: LD_VAR 0 2
78940: PUSH
78941: LD_INT 1
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: LIST
78948: PUSH
78949: LD_VAR 0 1
78953: PUSH
78954: LD_VAR 0 2
78958: PUSH
78959: LD_INT 3
78961: PLUS
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: LIST
78970: PUSH
78971: LD_VAR 0 1
78975: PUSH
78976: LD_INT 4
78978: PLUS
78979: PUSH
78980: LD_VAR 0 2
78984: PUSH
78985: LD_INT 4
78987: PLUS
78988: PUSH
78989: LD_INT 5
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: LIST
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: ST_TO_ADDR
// end ; 2 :
79004: GO 79563
79006: LD_INT 2
79008: DOUBLE
79009: EQUAL
79010: IFTRUE 79014
79012: GO 79143
79014: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79015: LD_ADDR_VAR 0 5
79019: PUSH
79020: LD_VAR 0 1
79024: PUSH
79025: LD_VAR 0 2
79029: PUSH
79030: LD_INT 3
79032: MINUS
79033: PUSH
79034: LD_INT 3
79036: PUSH
79037: EMPTY
79038: LIST
79039: LIST
79040: LIST
79041: PUSH
79042: LD_VAR 0 1
79046: PUSH
79047: LD_INT 4
79049: PLUS
79050: PUSH
79051: LD_VAR 0 2
79055: PUSH
79056: LD_INT 4
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: LIST
79063: PUSH
79064: LD_VAR 0 1
79068: PUSH
79069: LD_VAR 0 2
79073: PUSH
79074: LD_INT 4
79076: PLUS
79077: PUSH
79078: LD_INT 0
79080: PUSH
79081: EMPTY
79082: LIST
79083: LIST
79084: LIST
79085: PUSH
79086: LD_VAR 0 1
79090: PUSH
79091: LD_INT 3
79093: MINUS
79094: PUSH
79095: LD_VAR 0 2
79099: PUSH
79100: LD_INT 1
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: LIST
79107: PUSH
79108: LD_VAR 0 1
79112: PUSH
79113: LD_INT 4
79115: MINUS
79116: PUSH
79117: LD_VAR 0 2
79121: PUSH
79122: LD_INT 4
79124: MINUS
79125: PUSH
79126: LD_INT 2
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: LIST
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: LIST
79138: LIST
79139: LIST
79140: ST_TO_ADDR
// end ; 3 :
79141: GO 79563
79143: LD_INT 3
79145: DOUBLE
79146: EQUAL
79147: IFTRUE 79151
79149: GO 79284
79151: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79152: LD_ADDR_VAR 0 5
79156: PUSH
79157: LD_VAR 0 1
79161: PUSH
79162: LD_INT 3
79164: PLUS
79165: PUSH
79166: LD_VAR 0 2
79170: PUSH
79171: LD_INT 4
79173: PUSH
79174: EMPTY
79175: LIST
79176: LIST
79177: LIST
79178: PUSH
79179: LD_VAR 0 1
79183: PUSH
79184: LD_INT 4
79186: PLUS
79187: PUSH
79188: LD_VAR 0 2
79192: PUSH
79193: LD_INT 4
79195: PLUS
79196: PUSH
79197: LD_INT 5
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: LIST
79204: PUSH
79205: LD_VAR 0 1
79209: PUSH
79210: LD_INT 4
79212: MINUS
79213: PUSH
79214: LD_VAR 0 2
79218: PUSH
79219: LD_INT 1
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: LIST
79226: PUSH
79227: LD_VAR 0 1
79231: PUSH
79232: LD_VAR 0 2
79236: PUSH
79237: LD_INT 4
79239: MINUS
79240: PUSH
79241: LD_INT 3
79243: PUSH
79244: EMPTY
79245: LIST
79246: LIST
79247: LIST
79248: PUSH
79249: LD_VAR 0 1
79253: PUSH
79254: LD_INT 3
79256: MINUS
79257: PUSH
79258: LD_VAR 0 2
79262: PUSH
79263: LD_INT 3
79265: MINUS
79266: PUSH
79267: LD_INT 2
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: LIST
79274: PUSH
79275: EMPTY
79276: LIST
79277: LIST
79278: LIST
79279: LIST
79280: LIST
79281: ST_TO_ADDR
// end ; 4 :
79282: GO 79563
79284: LD_INT 4
79286: DOUBLE
79287: EQUAL
79288: IFTRUE 79292
79290: GO 79425
79292: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79293: LD_ADDR_VAR 0 5
79297: PUSH
79298: LD_VAR 0 1
79302: PUSH
79303: LD_VAR 0 2
79307: PUSH
79308: LD_INT 4
79310: PLUS
79311: PUSH
79312: LD_INT 0
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: LIST
79319: PUSH
79320: LD_VAR 0 1
79324: PUSH
79325: LD_INT 3
79327: PLUS
79328: PUSH
79329: LD_VAR 0 2
79333: PUSH
79334: LD_INT 3
79336: PLUS
79337: PUSH
79338: LD_INT 5
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: LIST
79345: PUSH
79346: LD_VAR 0 1
79350: PUSH
79351: LD_INT 4
79353: PLUS
79354: PUSH
79355: LD_VAR 0 2
79359: PUSH
79360: LD_INT 4
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: LIST
79367: PUSH
79368: LD_VAR 0 1
79372: PUSH
79373: LD_VAR 0 2
79377: PUSH
79378: LD_INT 3
79380: MINUS
79381: PUSH
79382: LD_INT 3
79384: PUSH
79385: EMPTY
79386: LIST
79387: LIST
79388: LIST
79389: PUSH
79390: LD_VAR 0 1
79394: PUSH
79395: LD_INT 4
79397: MINUS
79398: PUSH
79399: LD_VAR 0 2
79403: PUSH
79404: LD_INT 4
79406: MINUS
79407: PUSH
79408: LD_INT 2
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: LIST
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: LIST
79420: LIST
79421: LIST
79422: ST_TO_ADDR
// end ; 5 :
79423: GO 79563
79425: LD_INT 5
79427: DOUBLE
79428: EQUAL
79429: IFTRUE 79433
79431: GO 79562
79433: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79434: LD_ADDR_VAR 0 5
79438: PUSH
79439: LD_VAR 0 1
79443: PUSH
79444: LD_INT 4
79446: MINUS
79447: PUSH
79448: LD_VAR 0 2
79452: PUSH
79453: LD_INT 1
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: LIST
79460: PUSH
79461: LD_VAR 0 1
79465: PUSH
79466: LD_VAR 0 2
79470: PUSH
79471: LD_INT 4
79473: MINUS
79474: PUSH
79475: LD_INT 3
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: LIST
79482: PUSH
79483: LD_VAR 0 1
79487: PUSH
79488: LD_INT 4
79490: PLUS
79491: PUSH
79492: LD_VAR 0 2
79496: PUSH
79497: LD_INT 4
79499: PLUS
79500: PUSH
79501: LD_INT 5
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: LIST
79508: PUSH
79509: LD_VAR 0 1
79513: PUSH
79514: LD_INT 3
79516: PLUS
79517: PUSH
79518: LD_VAR 0 2
79522: PUSH
79523: LD_INT 4
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: LIST
79530: PUSH
79531: LD_VAR 0 1
79535: PUSH
79536: LD_VAR 0 2
79540: PUSH
79541: LD_INT 3
79543: PLUS
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: LIST
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: ST_TO_ADDR
// end ; end ;
79560: GO 79563
79562: POP
// result := list ;
79563: LD_ADDR_VAR 0 4
79567: PUSH
79568: LD_VAR 0 5
79572: ST_TO_ADDR
// end ;
79573: LD_VAR 0 4
79577: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79578: LD_INT 0
79580: PPUSH
79581: PPUSH
79582: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79583: LD_VAR 0 1
79587: NOT
79588: PUSH
79589: LD_VAR 0 2
79593: PUSH
79594: LD_INT 1
79596: PUSH
79597: LD_INT 2
79599: PUSH
79600: LD_INT 3
79602: PUSH
79603: LD_INT 4
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: LIST
79610: LIST
79611: IN
79612: NOT
79613: OR
79614: IFFALSE 79618
// exit ;
79616: GO 79701
// tmp := [ ] ;
79618: LD_ADDR_VAR 0 5
79622: PUSH
79623: EMPTY
79624: ST_TO_ADDR
// for i in units do
79625: LD_ADDR_VAR 0 4
79629: PUSH
79630: LD_VAR 0 1
79634: PUSH
79635: FOR_IN
79636: IFFALSE 79670
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79638: LD_ADDR_VAR 0 5
79642: PUSH
79643: LD_VAR 0 5
79647: PPUSH
79648: LD_VAR 0 4
79652: PPUSH
79653: LD_VAR 0 2
79657: PPUSH
79658: CALL_OW 259
79662: PPUSH
79663: CALL 81074 0 2
79667: ST_TO_ADDR
79668: GO 79635
79670: POP
79671: POP
// if not tmp then
79672: LD_VAR 0 5
79676: NOT
79677: IFFALSE 79681
// exit ;
79679: GO 79701
// result := SortListByListDesc ( units , tmp ) ;
79681: LD_ADDR_VAR 0 3
79685: PUSH
79686: LD_VAR 0 1
79690: PPUSH
79691: LD_VAR 0 5
79695: PPUSH
79696: CALL_OW 77
79700: ST_TO_ADDR
// end ;
79701: LD_VAR 0 3
79705: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79706: LD_INT 0
79708: PPUSH
79709: PPUSH
79710: PPUSH
// result := false ;
79711: LD_ADDR_VAR 0 3
79715: PUSH
79716: LD_INT 0
79718: ST_TO_ADDR
// if not building then
79719: LD_VAR 0 2
79723: NOT
79724: IFFALSE 79728
// exit ;
79726: GO 79866
// x := GetX ( building ) ;
79728: LD_ADDR_VAR 0 4
79732: PUSH
79733: LD_VAR 0 2
79737: PPUSH
79738: CALL_OW 250
79742: ST_TO_ADDR
// y := GetY ( building ) ;
79743: LD_ADDR_VAR 0 5
79747: PUSH
79748: LD_VAR 0 2
79752: PPUSH
79753: CALL_OW 251
79757: ST_TO_ADDR
// if not x or not y then
79758: LD_VAR 0 4
79762: NOT
79763: PUSH
79764: LD_VAR 0 5
79768: NOT
79769: OR
79770: IFFALSE 79774
// exit ;
79772: GO 79866
// if GetTaskList ( unit ) then
79774: LD_VAR 0 1
79778: PPUSH
79779: CALL_OW 437
79783: IFFALSE 79866
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79785: LD_STRING e
79787: PUSH
79788: LD_VAR 0 1
79792: PPUSH
79793: CALL_OW 437
79797: PUSH
79798: LD_INT 1
79800: ARRAY
79801: PUSH
79802: LD_INT 1
79804: ARRAY
79805: EQUAL
79806: PUSH
79807: LD_VAR 0 4
79811: PUSH
79812: LD_VAR 0 1
79816: PPUSH
79817: CALL_OW 437
79821: PUSH
79822: LD_INT 1
79824: ARRAY
79825: PUSH
79826: LD_INT 2
79828: ARRAY
79829: EQUAL
79830: AND
79831: PUSH
79832: LD_VAR 0 5
79836: PUSH
79837: LD_VAR 0 1
79841: PPUSH
79842: CALL_OW 437
79846: PUSH
79847: LD_INT 1
79849: ARRAY
79850: PUSH
79851: LD_INT 3
79853: ARRAY
79854: EQUAL
79855: AND
79856: IFFALSE 79866
// result := true end ;
79858: LD_ADDR_VAR 0 3
79862: PUSH
79863: LD_INT 1
79865: ST_TO_ADDR
// end ;
79866: LD_VAR 0 3
79870: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79871: LD_INT 0
79873: PPUSH
// result := false ;
79874: LD_ADDR_VAR 0 4
79878: PUSH
79879: LD_INT 0
79881: ST_TO_ADDR
// if GetTaskList ( unit ) then
79882: LD_VAR 0 1
79886: PPUSH
79887: CALL_OW 437
79891: IFFALSE 79974
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79893: LD_STRING M
79895: PUSH
79896: LD_VAR 0 1
79900: PPUSH
79901: CALL_OW 437
79905: PUSH
79906: LD_INT 1
79908: ARRAY
79909: PUSH
79910: LD_INT 1
79912: ARRAY
79913: EQUAL
79914: PUSH
79915: LD_VAR 0 2
79919: PUSH
79920: LD_VAR 0 1
79924: PPUSH
79925: CALL_OW 437
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PUSH
79934: LD_INT 2
79936: ARRAY
79937: EQUAL
79938: AND
79939: PUSH
79940: LD_VAR 0 3
79944: PUSH
79945: LD_VAR 0 1
79949: PPUSH
79950: CALL_OW 437
79954: PUSH
79955: LD_INT 1
79957: ARRAY
79958: PUSH
79959: LD_INT 3
79961: ARRAY
79962: EQUAL
79963: AND
79964: IFFALSE 79974
// result := true ;
79966: LD_ADDR_VAR 0 4
79970: PUSH
79971: LD_INT 1
79973: ST_TO_ADDR
// end ; end ;
79974: LD_VAR 0 4
79978: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79979: LD_INT 0
79981: PPUSH
79982: PPUSH
79983: PPUSH
79984: PPUSH
// if not unit or not area then
79985: LD_VAR 0 1
79989: NOT
79990: PUSH
79991: LD_VAR 0 2
79995: NOT
79996: OR
79997: IFFALSE 80001
// exit ;
79999: GO 80177
// tmp := AreaToList ( area , i ) ;
80001: LD_ADDR_VAR 0 6
80005: PUSH
80006: LD_VAR 0 2
80010: PPUSH
80011: LD_VAR 0 5
80015: PPUSH
80016: CALL_OW 517
80020: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80021: LD_ADDR_VAR 0 5
80025: PUSH
80026: DOUBLE
80027: LD_INT 1
80029: DEC
80030: ST_TO_ADDR
80031: LD_VAR 0 6
80035: PUSH
80036: LD_INT 1
80038: ARRAY
80039: PUSH
80040: FOR_TO
80041: IFFALSE 80175
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80043: LD_ADDR_VAR 0 7
80047: PUSH
80048: LD_VAR 0 6
80052: PUSH
80053: LD_INT 1
80055: ARRAY
80056: PUSH
80057: LD_VAR 0 5
80061: ARRAY
80062: PUSH
80063: LD_VAR 0 6
80067: PUSH
80068: LD_INT 2
80070: ARRAY
80071: PUSH
80072: LD_VAR 0 5
80076: ARRAY
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80082: LD_INT 92
80084: PUSH
80085: LD_VAR 0 7
80089: PUSH
80090: LD_INT 1
80092: ARRAY
80093: PUSH
80094: LD_VAR 0 7
80098: PUSH
80099: LD_INT 2
80101: ARRAY
80102: PUSH
80103: LD_INT 2
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: LIST
80110: LIST
80111: PPUSH
80112: CALL_OW 69
80116: PUSH
80117: LD_INT 0
80119: EQUAL
80120: IFFALSE 80173
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80122: LD_VAR 0 1
80126: PPUSH
80127: LD_VAR 0 7
80131: PUSH
80132: LD_INT 1
80134: ARRAY
80135: PPUSH
80136: LD_VAR 0 7
80140: PUSH
80141: LD_INT 2
80143: ARRAY
80144: PPUSH
80145: LD_VAR 0 3
80149: PPUSH
80150: CALL_OW 48
// result := IsPlaced ( unit ) ;
80154: LD_ADDR_VAR 0 4
80158: PUSH
80159: LD_VAR 0 1
80163: PPUSH
80164: CALL_OW 305
80168: ST_TO_ADDR
// exit ;
80169: POP
80170: POP
80171: GO 80177
// end ; end ;
80173: GO 80040
80175: POP
80176: POP
// end ;
80177: LD_VAR 0 4
80181: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80182: LD_INT 0
80184: PPUSH
80185: PPUSH
80186: PPUSH
// if not side or side > 8 then
80187: LD_VAR 0 1
80191: NOT
80192: PUSH
80193: LD_VAR 0 1
80197: PUSH
80198: LD_INT 8
80200: GREATER
80201: OR
80202: IFFALSE 80206
// exit ;
80204: GO 80393
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80206: LD_ADDR_VAR 0 4
80210: PUSH
80211: LD_INT 22
80213: PUSH
80214: LD_VAR 0 1
80218: PUSH
80219: EMPTY
80220: LIST
80221: LIST
80222: PUSH
80223: LD_INT 21
80225: PUSH
80226: LD_INT 3
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PPUSH
80237: CALL_OW 69
80241: ST_TO_ADDR
// if not tmp then
80242: LD_VAR 0 4
80246: NOT
80247: IFFALSE 80251
// exit ;
80249: GO 80393
// enable_addtolog := true ;
80251: LD_ADDR_OWVAR 81
80255: PUSH
80256: LD_INT 1
80258: ST_TO_ADDR
// AddToLog ( [ ) ;
80259: LD_STRING [
80261: PPUSH
80262: CALL_OW 561
// for i in tmp do
80266: LD_ADDR_VAR 0 3
80270: PUSH
80271: LD_VAR 0 4
80275: PUSH
80276: FOR_IN
80277: IFFALSE 80384
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80279: LD_STRING [
80281: PUSH
80282: LD_VAR 0 3
80286: PPUSH
80287: CALL_OW 266
80291: STR
80292: PUSH
80293: LD_STRING , 
80295: STR
80296: PUSH
80297: LD_VAR 0 3
80301: PPUSH
80302: CALL_OW 250
80306: STR
80307: PUSH
80308: LD_STRING , 
80310: STR
80311: PUSH
80312: LD_VAR 0 3
80316: PPUSH
80317: CALL_OW 251
80321: STR
80322: PUSH
80323: LD_STRING , 
80325: STR
80326: PUSH
80327: LD_VAR 0 3
80331: PPUSH
80332: CALL_OW 254
80336: STR
80337: PUSH
80338: LD_STRING , 
80340: STR
80341: PUSH
80342: LD_VAR 0 3
80346: PPUSH
80347: LD_INT 1
80349: PPUSH
80350: CALL_OW 268
80354: STR
80355: PUSH
80356: LD_STRING , 
80358: STR
80359: PUSH
80360: LD_VAR 0 3
80364: PPUSH
80365: LD_INT 2
80367: PPUSH
80368: CALL_OW 268
80372: STR
80373: PUSH
80374: LD_STRING ],
80376: STR
80377: PPUSH
80378: CALL_OW 561
// end ;
80382: GO 80276
80384: POP
80385: POP
// AddToLog ( ]; ) ;
80386: LD_STRING ];
80388: PPUSH
80389: CALL_OW 561
// end ;
80393: LD_VAR 0 2
80397: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80398: LD_INT 0
80400: PPUSH
80401: PPUSH
80402: PPUSH
80403: PPUSH
80404: PPUSH
// if not area or not rate or not max then
80405: LD_VAR 0 1
80409: NOT
80410: PUSH
80411: LD_VAR 0 2
80415: NOT
80416: OR
80417: PUSH
80418: LD_VAR 0 4
80422: NOT
80423: OR
80424: IFFALSE 80428
// exit ;
80426: GO 80617
// while 1 do
80428: LD_INT 1
80430: IFFALSE 80617
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80432: LD_ADDR_VAR 0 9
80436: PUSH
80437: LD_VAR 0 1
80441: PPUSH
80442: LD_INT 1
80444: PPUSH
80445: CALL_OW 287
80449: PUSH
80450: LD_INT 10
80452: MUL
80453: ST_TO_ADDR
// r := rate / 10 ;
80454: LD_ADDR_VAR 0 7
80458: PUSH
80459: LD_VAR 0 2
80463: PUSH
80464: LD_INT 10
80466: DIVREAL
80467: ST_TO_ADDR
// time := 1 1$00 ;
80468: LD_ADDR_VAR 0 8
80472: PUSH
80473: LD_INT 2100
80475: ST_TO_ADDR
// if amount < min then
80476: LD_VAR 0 9
80480: PUSH
80481: LD_VAR 0 3
80485: LESS
80486: IFFALSE 80504
// r := r * 2 else
80488: LD_ADDR_VAR 0 7
80492: PUSH
80493: LD_VAR 0 7
80497: PUSH
80498: LD_INT 2
80500: MUL
80501: ST_TO_ADDR
80502: GO 80530
// if amount > max then
80504: LD_VAR 0 9
80508: PUSH
80509: LD_VAR 0 4
80513: GREATER
80514: IFFALSE 80530
// r := r / 2 ;
80516: LD_ADDR_VAR 0 7
80520: PUSH
80521: LD_VAR 0 7
80525: PUSH
80526: LD_INT 2
80528: DIVREAL
80529: ST_TO_ADDR
// time := time / r ;
80530: LD_ADDR_VAR 0 8
80534: PUSH
80535: LD_VAR 0 8
80539: PUSH
80540: LD_VAR 0 7
80544: DIVREAL
80545: ST_TO_ADDR
// if time < 0 then
80546: LD_VAR 0 8
80550: PUSH
80551: LD_INT 0
80553: LESS
80554: IFFALSE 80571
// time := time * - 1 ;
80556: LD_ADDR_VAR 0 8
80560: PUSH
80561: LD_VAR 0 8
80565: PUSH
80566: LD_INT 1
80568: NEG
80569: MUL
80570: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80571: LD_VAR 0 8
80575: PUSH
80576: LD_INT 35
80578: PPUSH
80579: LD_INT 875
80581: PPUSH
80582: CALL_OW 12
80586: PLUS
80587: PPUSH
80588: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80592: LD_INT 1
80594: PPUSH
80595: LD_INT 5
80597: PPUSH
80598: CALL_OW 12
80602: PPUSH
80603: LD_VAR 0 1
80607: PPUSH
80608: LD_INT 1
80610: PPUSH
80611: CALL_OW 55
// end ;
80615: GO 80428
// end ;
80617: LD_VAR 0 5
80621: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80622: LD_INT 0
80624: PPUSH
80625: PPUSH
80626: PPUSH
80627: PPUSH
80628: PPUSH
80629: PPUSH
80630: PPUSH
80631: PPUSH
// if not turrets or not factories then
80632: LD_VAR 0 1
80636: NOT
80637: PUSH
80638: LD_VAR 0 2
80642: NOT
80643: OR
80644: IFFALSE 80648
// exit ;
80646: GO 80955
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80648: LD_ADDR_VAR 0 10
80652: PUSH
80653: LD_INT 5
80655: PUSH
80656: LD_INT 6
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 2
80665: PUSH
80666: LD_INT 4
80668: PUSH
80669: EMPTY
80670: LIST
80671: LIST
80672: PUSH
80673: LD_INT 3
80675: PUSH
80676: LD_INT 5
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 24
80690: PUSH
80691: LD_INT 25
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 23
80700: PUSH
80701: LD_INT 27
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PUSH
80712: LD_INT 42
80714: PUSH
80715: LD_INT 43
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: PUSH
80722: LD_INT 44
80724: PUSH
80725: LD_INT 46
80727: PUSH
80728: EMPTY
80729: LIST
80730: LIST
80731: PUSH
80732: LD_INT 45
80734: PUSH
80735: LD_INT 47
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: LIST
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: LIST
80751: ST_TO_ADDR
// result := [ ] ;
80752: LD_ADDR_VAR 0 3
80756: PUSH
80757: EMPTY
80758: ST_TO_ADDR
// for i in turrets do
80759: LD_ADDR_VAR 0 4
80763: PUSH
80764: LD_VAR 0 1
80768: PUSH
80769: FOR_IN
80770: IFFALSE 80953
// begin nat := GetNation ( i ) ;
80772: LD_ADDR_VAR 0 7
80776: PUSH
80777: LD_VAR 0 4
80781: PPUSH
80782: CALL_OW 248
80786: ST_TO_ADDR
// weapon := 0 ;
80787: LD_ADDR_VAR 0 8
80791: PUSH
80792: LD_INT 0
80794: ST_TO_ADDR
// if not nat then
80795: LD_VAR 0 7
80799: NOT
80800: IFFALSE 80804
// continue ;
80802: GO 80769
// for j in list [ nat ] do
80804: LD_ADDR_VAR 0 5
80808: PUSH
80809: LD_VAR 0 10
80813: PUSH
80814: LD_VAR 0 7
80818: ARRAY
80819: PUSH
80820: FOR_IN
80821: IFFALSE 80862
// if GetBWeapon ( i ) = j [ 1 ] then
80823: LD_VAR 0 4
80827: PPUSH
80828: CALL_OW 269
80832: PUSH
80833: LD_VAR 0 5
80837: PUSH
80838: LD_INT 1
80840: ARRAY
80841: EQUAL
80842: IFFALSE 80860
// begin weapon := j [ 2 ] ;
80844: LD_ADDR_VAR 0 8
80848: PUSH
80849: LD_VAR 0 5
80853: PUSH
80854: LD_INT 2
80856: ARRAY
80857: ST_TO_ADDR
// break ;
80858: GO 80862
// end ;
80860: GO 80820
80862: POP
80863: POP
// if not weapon then
80864: LD_VAR 0 8
80868: NOT
80869: IFFALSE 80873
// continue ;
80871: GO 80769
// for k in factories do
80873: LD_ADDR_VAR 0 6
80877: PUSH
80878: LD_VAR 0 2
80882: PUSH
80883: FOR_IN
80884: IFFALSE 80949
// begin weapons := AvailableWeaponList ( k ) ;
80886: LD_ADDR_VAR 0 9
80890: PUSH
80891: LD_VAR 0 6
80895: PPUSH
80896: CALL_OW 478
80900: ST_TO_ADDR
// if not weapons then
80901: LD_VAR 0 9
80905: NOT
80906: IFFALSE 80910
// continue ;
80908: GO 80883
// if weapon in weapons then
80910: LD_VAR 0 8
80914: PUSH
80915: LD_VAR 0 9
80919: IN
80920: IFFALSE 80947
// begin result := [ i , weapon ] ;
80922: LD_ADDR_VAR 0 3
80926: PUSH
80927: LD_VAR 0 4
80931: PUSH
80932: LD_VAR 0 8
80936: PUSH
80937: EMPTY
80938: LIST
80939: LIST
80940: ST_TO_ADDR
// exit ;
80941: POP
80942: POP
80943: POP
80944: POP
80945: GO 80955
// end ; end ;
80947: GO 80883
80949: POP
80950: POP
// end ;
80951: GO 80769
80953: POP
80954: POP
// end ;
80955: LD_VAR 0 3
80959: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80960: LD_INT 0
80962: PPUSH
// if not side or side > 8 then
80963: LD_VAR 0 3
80967: NOT
80968: PUSH
80969: LD_VAR 0 3
80973: PUSH
80974: LD_INT 8
80976: GREATER
80977: OR
80978: IFFALSE 80982
// exit ;
80980: GO 81041
// if not range then
80982: LD_VAR 0 4
80986: NOT
80987: IFFALSE 80998
// range := - 12 ;
80989: LD_ADDR_VAR 0 4
80993: PUSH
80994: LD_INT 12
80996: NEG
80997: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80998: LD_VAR 0 1
81002: PPUSH
81003: LD_VAR 0 2
81007: PPUSH
81008: LD_VAR 0 3
81012: PPUSH
81013: LD_VAR 0 4
81017: PPUSH
81018: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81022: LD_VAR 0 1
81026: PPUSH
81027: LD_VAR 0 2
81031: PPUSH
81032: LD_VAR 0 3
81036: PPUSH
81037: CALL_OW 331
// end ;
81041: LD_VAR 0 5
81045: RET
// export function Video ( mode ) ; begin
81046: LD_INT 0
81048: PPUSH
// ingame_video = mode ;
81049: LD_ADDR_OWVAR 52
81053: PUSH
81054: LD_VAR 0 1
81058: ST_TO_ADDR
// interface_hidden = mode ;
81059: LD_ADDR_OWVAR 54
81063: PUSH
81064: LD_VAR 0 1
81068: ST_TO_ADDR
// end ;
81069: LD_VAR 0 2
81073: RET
// export function Join ( array , element ) ; begin
81074: LD_INT 0
81076: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81077: LD_ADDR_VAR 0 3
81081: PUSH
81082: LD_VAR 0 1
81086: PPUSH
81087: LD_VAR 0 1
81091: PUSH
81092: LD_INT 1
81094: PLUS
81095: PPUSH
81096: LD_VAR 0 2
81100: PPUSH
81101: CALL_OW 1
81105: ST_TO_ADDR
// end ;
81106: LD_VAR 0 3
81110: RET
// export function JoinUnion ( array , element ) ; begin
81111: LD_INT 0
81113: PPUSH
// result := array union element ;
81114: LD_ADDR_VAR 0 3
81118: PUSH
81119: LD_VAR 0 1
81123: PUSH
81124: LD_VAR 0 2
81128: UNION
81129: ST_TO_ADDR
// end ;
81130: LD_VAR 0 3
81134: RET
// export function GetBehemoths ( side ) ; begin
81135: LD_INT 0
81137: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81138: LD_ADDR_VAR 0 2
81142: PUSH
81143: LD_INT 22
81145: PUSH
81146: LD_VAR 0 1
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PUSH
81155: LD_INT 31
81157: PUSH
81158: LD_INT 25
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: PPUSH
81169: CALL_OW 69
81173: ST_TO_ADDR
// end ;
81174: LD_VAR 0 2
81178: RET
// export function Shuffle ( array ) ; var i , index ; begin
81179: LD_INT 0
81181: PPUSH
81182: PPUSH
81183: PPUSH
// result := [ ] ;
81184: LD_ADDR_VAR 0 2
81188: PUSH
81189: EMPTY
81190: ST_TO_ADDR
// if not array then
81191: LD_VAR 0 1
81195: NOT
81196: IFFALSE 81200
// exit ;
81198: GO 81299
// Randomize ;
81200: CALL_OW 10
// for i = array downto 1 do
81204: LD_ADDR_VAR 0 3
81208: PUSH
81209: DOUBLE
81210: LD_VAR 0 1
81214: INC
81215: ST_TO_ADDR
81216: LD_INT 1
81218: PUSH
81219: FOR_DOWNTO
81220: IFFALSE 81297
// begin index := rand ( 1 , array ) ;
81222: LD_ADDR_VAR 0 4
81226: PUSH
81227: LD_INT 1
81229: PPUSH
81230: LD_VAR 0 1
81234: PPUSH
81235: CALL_OW 12
81239: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81240: LD_ADDR_VAR 0 2
81244: PUSH
81245: LD_VAR 0 2
81249: PPUSH
81250: LD_VAR 0 2
81254: PUSH
81255: LD_INT 1
81257: PLUS
81258: PPUSH
81259: LD_VAR 0 1
81263: PUSH
81264: LD_VAR 0 4
81268: ARRAY
81269: PPUSH
81270: CALL_OW 2
81274: ST_TO_ADDR
// array := Delete ( array , index ) ;
81275: LD_ADDR_VAR 0 1
81279: PUSH
81280: LD_VAR 0 1
81284: PPUSH
81285: LD_VAR 0 4
81289: PPUSH
81290: CALL_OW 3
81294: ST_TO_ADDR
// end ;
81295: GO 81219
81297: POP
81298: POP
// end ;
81299: LD_VAR 0 2
81303: RET
// export function GetBaseMaterials ( base ) ; begin
81304: LD_INT 0
81306: PPUSH
// result := [ 0 , 0 , 0 ] ;
81307: LD_ADDR_VAR 0 2
81311: PUSH
81312: LD_INT 0
81314: PUSH
81315: LD_INT 0
81317: PUSH
81318: LD_INT 0
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: LIST
81325: ST_TO_ADDR
// if not base then
81326: LD_VAR 0 1
81330: NOT
81331: IFFALSE 81335
// exit ;
81333: GO 81384
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81335: LD_ADDR_VAR 0 2
81339: PUSH
81340: LD_VAR 0 1
81344: PPUSH
81345: LD_INT 1
81347: PPUSH
81348: CALL_OW 275
81352: PUSH
81353: LD_VAR 0 1
81357: PPUSH
81358: LD_INT 2
81360: PPUSH
81361: CALL_OW 275
81365: PUSH
81366: LD_VAR 0 1
81370: PPUSH
81371: LD_INT 3
81373: PPUSH
81374: CALL_OW 275
81378: PUSH
81379: EMPTY
81380: LIST
81381: LIST
81382: LIST
81383: ST_TO_ADDR
// end ;
81384: LD_VAR 0 2
81388: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81389: LD_INT 0
81391: PPUSH
81392: PPUSH
// result := array ;
81393: LD_ADDR_VAR 0 3
81397: PUSH
81398: LD_VAR 0 1
81402: ST_TO_ADDR
// if size >= result then
81403: LD_VAR 0 2
81407: PUSH
81408: LD_VAR 0 3
81412: GREATEREQUAL
81413: IFFALSE 81417
// exit ;
81415: GO 81467
// if size then
81417: LD_VAR 0 2
81421: IFFALSE 81467
// for i := array downto size do
81423: LD_ADDR_VAR 0 4
81427: PUSH
81428: DOUBLE
81429: LD_VAR 0 1
81433: INC
81434: ST_TO_ADDR
81435: LD_VAR 0 2
81439: PUSH
81440: FOR_DOWNTO
81441: IFFALSE 81465
// result := Delete ( result , result ) ;
81443: LD_ADDR_VAR 0 3
81447: PUSH
81448: LD_VAR 0 3
81452: PPUSH
81453: LD_VAR 0 3
81457: PPUSH
81458: CALL_OW 3
81462: ST_TO_ADDR
81463: GO 81440
81465: POP
81466: POP
// end ;
81467: LD_VAR 0 3
81471: RET
// export function ComExit ( unit ) ; var tmp ; begin
81472: LD_INT 0
81474: PPUSH
81475: PPUSH
// if not IsInUnit ( unit ) then
81476: LD_VAR 0 1
81480: PPUSH
81481: CALL_OW 310
81485: NOT
81486: IFFALSE 81490
// exit ;
81488: GO 81550
// tmp := IsInUnit ( unit ) ;
81490: LD_ADDR_VAR 0 3
81494: PUSH
81495: LD_VAR 0 1
81499: PPUSH
81500: CALL_OW 310
81504: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81505: LD_VAR 0 3
81509: PPUSH
81510: CALL_OW 247
81514: PUSH
81515: LD_INT 2
81517: EQUAL
81518: IFFALSE 81531
// ComExitVehicle ( unit ) else
81520: LD_VAR 0 1
81524: PPUSH
81525: CALL_OW 121
81529: GO 81540
// ComExitBuilding ( unit ) ;
81531: LD_VAR 0 1
81535: PPUSH
81536: CALL_OW 122
// result := tmp ;
81540: LD_ADDR_VAR 0 2
81544: PUSH
81545: LD_VAR 0 3
81549: ST_TO_ADDR
// end ;
81550: LD_VAR 0 2
81554: RET
// export function ComExitAll ( units ) ; var i ; begin
81555: LD_INT 0
81557: PPUSH
81558: PPUSH
// if not units then
81559: LD_VAR 0 1
81563: NOT
81564: IFFALSE 81568
// exit ;
81566: GO 81594
// for i in units do
81568: LD_ADDR_VAR 0 3
81572: PUSH
81573: LD_VAR 0 1
81577: PUSH
81578: FOR_IN
81579: IFFALSE 81592
// ComExit ( i ) ;
81581: LD_VAR 0 3
81585: PPUSH
81586: CALL 81472 0 1
81590: GO 81578
81592: POP
81593: POP
// end ;
81594: LD_VAR 0 2
81598: RET
// export function ResetHc ; begin
81599: LD_INT 0
81601: PPUSH
// InitHc ;
81602: CALL_OW 19
// hc_importance := 0 ;
81606: LD_ADDR_OWVAR 32
81610: PUSH
81611: LD_INT 0
81613: ST_TO_ADDR
// end ;
81614: LD_VAR 0 1
81618: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81619: LD_INT 0
81621: PPUSH
81622: PPUSH
81623: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81624: LD_ADDR_VAR 0 6
81628: PUSH
81629: LD_VAR 0 1
81633: PUSH
81634: LD_VAR 0 3
81638: PLUS
81639: PUSH
81640: LD_INT 2
81642: DIV
81643: ST_TO_ADDR
// if _x < 0 then
81644: LD_VAR 0 6
81648: PUSH
81649: LD_INT 0
81651: LESS
81652: IFFALSE 81669
// _x := _x * - 1 ;
81654: LD_ADDR_VAR 0 6
81658: PUSH
81659: LD_VAR 0 6
81663: PUSH
81664: LD_INT 1
81666: NEG
81667: MUL
81668: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81669: LD_ADDR_VAR 0 7
81673: PUSH
81674: LD_VAR 0 2
81678: PUSH
81679: LD_VAR 0 4
81683: PLUS
81684: PUSH
81685: LD_INT 2
81687: DIV
81688: ST_TO_ADDR
// if _y < 0 then
81689: LD_VAR 0 7
81693: PUSH
81694: LD_INT 0
81696: LESS
81697: IFFALSE 81714
// _y := _y * - 1 ;
81699: LD_ADDR_VAR 0 7
81703: PUSH
81704: LD_VAR 0 7
81708: PUSH
81709: LD_INT 1
81711: NEG
81712: MUL
81713: ST_TO_ADDR
// result := [ _x , _y ] ;
81714: LD_ADDR_VAR 0 5
81718: PUSH
81719: LD_VAR 0 6
81723: PUSH
81724: LD_VAR 0 7
81728: PUSH
81729: EMPTY
81730: LIST
81731: LIST
81732: ST_TO_ADDR
// end ;
81733: LD_VAR 0 5
81737: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81738: LD_INT 0
81740: PPUSH
81741: PPUSH
81742: PPUSH
81743: PPUSH
// task := GetTaskList ( unit ) ;
81744: LD_ADDR_VAR 0 7
81748: PUSH
81749: LD_VAR 0 1
81753: PPUSH
81754: CALL_OW 437
81758: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81759: LD_VAR 0 7
81763: NOT
81764: PUSH
81765: LD_VAR 0 1
81769: PPUSH
81770: LD_VAR 0 2
81774: PPUSH
81775: CALL_OW 308
81779: NOT
81780: AND
81781: IFFALSE 81785
// exit ;
81783: GO 81903
// if IsInArea ( unit , area ) then
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_VAR 0 2
81794: PPUSH
81795: CALL_OW 308
81799: IFFALSE 81817
// begin ComMoveToArea ( unit , goAway ) ;
81801: LD_VAR 0 1
81805: PPUSH
81806: LD_VAR 0 3
81810: PPUSH
81811: CALL_OW 113
// exit ;
81815: GO 81903
// end ; if task [ 1 ] [ 1 ] <> M then
81817: LD_VAR 0 7
81821: PUSH
81822: LD_INT 1
81824: ARRAY
81825: PUSH
81826: LD_INT 1
81828: ARRAY
81829: PUSH
81830: LD_STRING M
81832: NONEQUAL
81833: IFFALSE 81837
// exit ;
81835: GO 81903
// x := task [ 1 ] [ 2 ] ;
81837: LD_ADDR_VAR 0 5
81841: PUSH
81842: LD_VAR 0 7
81846: PUSH
81847: LD_INT 1
81849: ARRAY
81850: PUSH
81851: LD_INT 2
81853: ARRAY
81854: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81855: LD_ADDR_VAR 0 6
81859: PUSH
81860: LD_VAR 0 7
81864: PUSH
81865: LD_INT 1
81867: ARRAY
81868: PUSH
81869: LD_INT 3
81871: ARRAY
81872: ST_TO_ADDR
// if InArea ( x , y , area ) then
81873: LD_VAR 0 5
81877: PPUSH
81878: LD_VAR 0 6
81882: PPUSH
81883: LD_VAR 0 2
81887: PPUSH
81888: CALL_OW 309
81892: IFFALSE 81903
// ComStop ( unit ) ;
81894: LD_VAR 0 1
81898: PPUSH
81899: CALL_OW 141
// end ;
81903: LD_VAR 0 4
81907: RET
// export function Abs ( value ) ; begin
81908: LD_INT 0
81910: PPUSH
// result := value ;
81911: LD_ADDR_VAR 0 2
81915: PUSH
81916: LD_VAR 0 1
81920: ST_TO_ADDR
// if value < 0 then
81921: LD_VAR 0 1
81925: PUSH
81926: LD_INT 0
81928: LESS
81929: IFFALSE 81946
// result := value * - 1 ;
81931: LD_ADDR_VAR 0 2
81935: PUSH
81936: LD_VAR 0 1
81940: PUSH
81941: LD_INT 1
81943: NEG
81944: MUL
81945: ST_TO_ADDR
// end ;
81946: LD_VAR 0 2
81950: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81951: LD_INT 0
81953: PPUSH
81954: PPUSH
81955: PPUSH
81956: PPUSH
81957: PPUSH
81958: PPUSH
81959: PPUSH
81960: PPUSH
// if not unit or not building then
81961: LD_VAR 0 1
81965: NOT
81966: PUSH
81967: LD_VAR 0 2
81971: NOT
81972: OR
81973: IFFALSE 81977
// exit ;
81975: GO 82203
// x := GetX ( building ) ;
81977: LD_ADDR_VAR 0 4
81981: PUSH
81982: LD_VAR 0 2
81986: PPUSH
81987: CALL_OW 250
81991: ST_TO_ADDR
// y := GetY ( building ) ;
81992: LD_ADDR_VAR 0 6
81996: PUSH
81997: LD_VAR 0 2
82001: PPUSH
82002: CALL_OW 251
82006: ST_TO_ADDR
// d := GetDir ( building ) ;
82007: LD_ADDR_VAR 0 8
82011: PUSH
82012: LD_VAR 0 2
82016: PPUSH
82017: CALL_OW 254
82021: ST_TO_ADDR
// r := 4 ;
82022: LD_ADDR_VAR 0 9
82026: PUSH
82027: LD_INT 4
82029: ST_TO_ADDR
// for i := 1 to 5 do
82030: LD_ADDR_VAR 0 10
82034: PUSH
82035: DOUBLE
82036: LD_INT 1
82038: DEC
82039: ST_TO_ADDR
82040: LD_INT 5
82042: PUSH
82043: FOR_TO
82044: IFFALSE 82201
// begin _x := ShiftX ( x , d , r + i ) ;
82046: LD_ADDR_VAR 0 5
82050: PUSH
82051: LD_VAR 0 4
82055: PPUSH
82056: LD_VAR 0 8
82060: PPUSH
82061: LD_VAR 0 9
82065: PUSH
82066: LD_VAR 0 10
82070: PLUS
82071: PPUSH
82072: CALL_OW 272
82076: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82077: LD_ADDR_VAR 0 7
82081: PUSH
82082: LD_VAR 0 6
82086: PPUSH
82087: LD_VAR 0 8
82091: PPUSH
82092: LD_VAR 0 9
82096: PUSH
82097: LD_VAR 0 10
82101: PLUS
82102: PPUSH
82103: CALL_OW 273
82107: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82108: LD_VAR 0 5
82112: PPUSH
82113: LD_VAR 0 7
82117: PPUSH
82118: CALL_OW 488
82122: PUSH
82123: LD_VAR 0 5
82127: PPUSH
82128: LD_VAR 0 7
82132: PPUSH
82133: CALL_OW 428
82137: PPUSH
82138: CALL_OW 247
82142: PUSH
82143: LD_INT 3
82145: PUSH
82146: LD_INT 2
82148: PUSH
82149: EMPTY
82150: LIST
82151: LIST
82152: IN
82153: NOT
82154: AND
82155: IFFALSE 82199
// begin ComMoveXY ( unit , _x , _y ) ;
82157: LD_VAR 0 1
82161: PPUSH
82162: LD_VAR 0 5
82166: PPUSH
82167: LD_VAR 0 7
82171: PPUSH
82172: CALL_OW 111
// result := [ _x , _y ] ;
82176: LD_ADDR_VAR 0 3
82180: PUSH
82181: LD_VAR 0 5
82185: PUSH
82186: LD_VAR 0 7
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: ST_TO_ADDR
// exit ;
82195: POP
82196: POP
82197: GO 82203
// end ; end ;
82199: GO 82043
82201: POP
82202: POP
// end ;
82203: LD_VAR 0 3
82207: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82208: LD_INT 0
82210: PPUSH
82211: PPUSH
82212: PPUSH
// result := 0 ;
82213: LD_ADDR_VAR 0 3
82217: PUSH
82218: LD_INT 0
82220: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82221: LD_VAR 0 1
82225: PUSH
82226: LD_INT 0
82228: LESS
82229: PUSH
82230: LD_VAR 0 1
82234: PUSH
82235: LD_INT 8
82237: GREATER
82238: OR
82239: PUSH
82240: LD_VAR 0 2
82244: PUSH
82245: LD_INT 0
82247: LESS
82248: OR
82249: PUSH
82250: LD_VAR 0 2
82254: PUSH
82255: LD_INT 8
82257: GREATER
82258: OR
82259: IFFALSE 82263
// exit ;
82261: GO 82338
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82263: LD_ADDR_VAR 0 4
82267: PUSH
82268: LD_INT 22
82270: PUSH
82271: LD_VAR 0 2
82275: PUSH
82276: EMPTY
82277: LIST
82278: LIST
82279: PPUSH
82280: CALL_OW 69
82284: PUSH
82285: FOR_IN
82286: IFFALSE 82336
// begin un := UnitShoot ( i ) ;
82288: LD_ADDR_VAR 0 5
82292: PUSH
82293: LD_VAR 0 4
82297: PPUSH
82298: CALL_OW 504
82302: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82303: LD_VAR 0 5
82307: PPUSH
82308: CALL_OW 255
82312: PUSH
82313: LD_VAR 0 1
82317: EQUAL
82318: IFFALSE 82334
// begin result := un ;
82320: LD_ADDR_VAR 0 3
82324: PUSH
82325: LD_VAR 0 5
82329: ST_TO_ADDR
// exit ;
82330: POP
82331: POP
82332: GO 82338
// end ; end ;
82334: GO 82285
82336: POP
82337: POP
// end ;
82338: LD_VAR 0 3
82342: RET
// export function GetCargoBay ( units ) ; begin
82343: LD_INT 0
82345: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82346: LD_ADDR_VAR 0 2
82350: PUSH
82351: LD_VAR 0 1
82355: PPUSH
82356: LD_INT 2
82358: PUSH
82359: LD_INT 34
82361: PUSH
82362: LD_INT 12
82364: PUSH
82365: EMPTY
82366: LIST
82367: LIST
82368: PUSH
82369: LD_INT 34
82371: PUSH
82372: LD_INT 51
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: PUSH
82379: LD_INT 34
82381: PUSH
82382: LD_INT 32
82384: PUSH
82385: EMPTY
82386: LIST
82387: LIST
82388: PUSH
82389: LD_INT 34
82391: PUSH
82392: LD_INT 89
82394: PUSH
82395: EMPTY
82396: LIST
82397: LIST
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: LIST
82403: LIST
82404: LIST
82405: PPUSH
82406: CALL_OW 72
82410: ST_TO_ADDR
// end ;
82411: LD_VAR 0 2
82415: RET
// export function Negate ( value ) ; begin
82416: LD_INT 0
82418: PPUSH
// result := not value ;
82419: LD_ADDR_VAR 0 2
82423: PUSH
82424: LD_VAR 0 1
82428: NOT
82429: ST_TO_ADDR
// end ;
82430: LD_VAR 0 2
82434: RET
// export function Inc ( value ) ; begin
82435: LD_INT 0
82437: PPUSH
// result := value + 1 ;
82438: LD_ADDR_VAR 0 2
82442: PUSH
82443: LD_VAR 0 1
82447: PUSH
82448: LD_INT 1
82450: PLUS
82451: ST_TO_ADDR
// end ;
82452: LD_VAR 0 2
82456: RET
// export function Dec ( value ) ; begin
82457: LD_INT 0
82459: PPUSH
// result := value - 1 ;
82460: LD_ADDR_VAR 0 2
82464: PUSH
82465: LD_VAR 0 1
82469: PUSH
82470: LD_INT 1
82472: MINUS
82473: ST_TO_ADDR
// end ;
82474: LD_VAR 0 2
82478: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82479: LD_INT 0
82481: PPUSH
82482: PPUSH
82483: PPUSH
82484: PPUSH
82485: PPUSH
82486: PPUSH
82487: PPUSH
82488: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82489: LD_VAR 0 1
82493: PPUSH
82494: LD_VAR 0 2
82498: PPUSH
82499: CALL_OW 488
82503: NOT
82504: PUSH
82505: LD_VAR 0 3
82509: PPUSH
82510: LD_VAR 0 4
82514: PPUSH
82515: CALL_OW 488
82519: NOT
82520: OR
82521: IFFALSE 82534
// begin result := - 1 ;
82523: LD_ADDR_VAR 0 5
82527: PUSH
82528: LD_INT 1
82530: NEG
82531: ST_TO_ADDR
// exit ;
82532: GO 82769
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82534: LD_ADDR_VAR 0 12
82538: PUSH
82539: LD_VAR 0 1
82543: PPUSH
82544: LD_VAR 0 2
82548: PPUSH
82549: LD_VAR 0 3
82553: PPUSH
82554: LD_VAR 0 4
82558: PPUSH
82559: CALL 81619 0 4
82563: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82564: LD_ADDR_VAR 0 11
82568: PUSH
82569: LD_VAR 0 1
82573: PPUSH
82574: LD_VAR 0 2
82578: PPUSH
82579: LD_VAR 0 12
82583: PUSH
82584: LD_INT 1
82586: ARRAY
82587: PPUSH
82588: LD_VAR 0 12
82592: PUSH
82593: LD_INT 2
82595: ARRAY
82596: PPUSH
82597: CALL_OW 298
82601: ST_TO_ADDR
// distance := 9999 ;
82602: LD_ADDR_VAR 0 10
82606: PUSH
82607: LD_INT 9999
82609: ST_TO_ADDR
// for i := 0 to 5 do
82610: LD_ADDR_VAR 0 6
82614: PUSH
82615: DOUBLE
82616: LD_INT 0
82618: DEC
82619: ST_TO_ADDR
82620: LD_INT 5
82622: PUSH
82623: FOR_TO
82624: IFFALSE 82767
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82626: LD_ADDR_VAR 0 7
82630: PUSH
82631: LD_VAR 0 1
82635: PPUSH
82636: LD_VAR 0 6
82640: PPUSH
82641: LD_VAR 0 11
82645: PPUSH
82646: CALL_OW 272
82650: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82651: LD_ADDR_VAR 0 8
82655: PUSH
82656: LD_VAR 0 2
82660: PPUSH
82661: LD_VAR 0 6
82665: PPUSH
82666: LD_VAR 0 11
82670: PPUSH
82671: CALL_OW 273
82675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82676: LD_VAR 0 7
82680: PPUSH
82681: LD_VAR 0 8
82685: PPUSH
82686: CALL_OW 488
82690: NOT
82691: IFFALSE 82695
// continue ;
82693: GO 82623
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82695: LD_ADDR_VAR 0 9
82699: PUSH
82700: LD_VAR 0 12
82704: PUSH
82705: LD_INT 1
82707: ARRAY
82708: PPUSH
82709: LD_VAR 0 12
82713: PUSH
82714: LD_INT 2
82716: ARRAY
82717: PPUSH
82718: LD_VAR 0 7
82722: PPUSH
82723: LD_VAR 0 8
82727: PPUSH
82728: CALL_OW 298
82732: ST_TO_ADDR
// if tmp < distance then
82733: LD_VAR 0 9
82737: PUSH
82738: LD_VAR 0 10
82742: LESS
82743: IFFALSE 82765
// begin result := i ;
82745: LD_ADDR_VAR 0 5
82749: PUSH
82750: LD_VAR 0 6
82754: ST_TO_ADDR
// distance := tmp ;
82755: LD_ADDR_VAR 0 10
82759: PUSH
82760: LD_VAR 0 9
82764: ST_TO_ADDR
// end ; end ;
82765: GO 82623
82767: POP
82768: POP
// end ;
82769: LD_VAR 0 5
82773: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82774: LD_INT 0
82776: PPUSH
82777: PPUSH
// if not driver or not IsInUnit ( driver ) then
82778: LD_VAR 0 1
82782: NOT
82783: PUSH
82784: LD_VAR 0 1
82788: PPUSH
82789: CALL_OW 310
82793: NOT
82794: OR
82795: IFFALSE 82799
// exit ;
82797: GO 82889
// vehicle := IsInUnit ( driver ) ;
82799: LD_ADDR_VAR 0 3
82803: PUSH
82804: LD_VAR 0 1
82808: PPUSH
82809: CALL_OW 310
82813: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82814: LD_VAR 0 1
82818: PPUSH
82819: LD_STRING \
82821: PUSH
82822: LD_INT 0
82824: PUSH
82825: LD_INT 0
82827: PUSH
82828: LD_INT 0
82830: PUSH
82831: LD_INT 0
82833: PUSH
82834: LD_INT 0
82836: PUSH
82837: LD_INT 0
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: LIST
82844: LIST
82845: LIST
82846: LIST
82847: LIST
82848: PUSH
82849: LD_STRING E
82851: PUSH
82852: LD_INT 0
82854: PUSH
82855: LD_INT 0
82857: PUSH
82858: LD_VAR 0 3
82862: PUSH
82863: LD_INT 0
82865: PUSH
82866: LD_INT 0
82868: PUSH
82869: LD_INT 0
82871: PUSH
82872: EMPTY
82873: LIST
82874: LIST
82875: LIST
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PPUSH
82885: CALL_OW 446
// end ;
82889: LD_VAR 0 2
82893: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82894: LD_INT 0
82896: PPUSH
82897: PPUSH
// if not driver or not IsInUnit ( driver ) then
82898: LD_VAR 0 1
82902: NOT
82903: PUSH
82904: LD_VAR 0 1
82908: PPUSH
82909: CALL_OW 310
82913: NOT
82914: OR
82915: IFFALSE 82919
// exit ;
82917: GO 83009
// vehicle := IsInUnit ( driver ) ;
82919: LD_ADDR_VAR 0 3
82923: PUSH
82924: LD_VAR 0 1
82928: PPUSH
82929: CALL_OW 310
82933: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82934: LD_VAR 0 1
82938: PPUSH
82939: LD_STRING \
82941: PUSH
82942: LD_INT 0
82944: PUSH
82945: LD_INT 0
82947: PUSH
82948: LD_INT 0
82950: PUSH
82951: LD_INT 0
82953: PUSH
82954: LD_INT 0
82956: PUSH
82957: LD_INT 0
82959: PUSH
82960: EMPTY
82961: LIST
82962: LIST
82963: LIST
82964: LIST
82965: LIST
82966: LIST
82967: LIST
82968: PUSH
82969: LD_STRING E
82971: PUSH
82972: LD_INT 0
82974: PUSH
82975: LD_INT 0
82977: PUSH
82978: LD_VAR 0 3
82982: PUSH
82983: LD_INT 0
82985: PUSH
82986: LD_INT 0
82988: PUSH
82989: LD_INT 0
82991: PUSH
82992: EMPTY
82993: LIST
82994: LIST
82995: LIST
82996: LIST
82997: LIST
82998: LIST
82999: LIST
83000: PUSH
83001: EMPTY
83002: LIST
83003: LIST
83004: PPUSH
83005: CALL_OW 447
// end ;
83009: LD_VAR 0 2
83013: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83014: LD_INT 0
83016: PPUSH
83017: PPUSH
83018: PPUSH
// tmp := [ ] ;
83019: LD_ADDR_VAR 0 5
83023: PUSH
83024: EMPTY
83025: ST_TO_ADDR
// for i in units do
83026: LD_ADDR_VAR 0 4
83030: PUSH
83031: LD_VAR 0 1
83035: PUSH
83036: FOR_IN
83037: IFFALSE 83075
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83039: LD_ADDR_VAR 0 5
83043: PUSH
83044: LD_VAR 0 5
83048: PPUSH
83049: LD_VAR 0 5
83053: PUSH
83054: LD_INT 1
83056: PLUS
83057: PPUSH
83058: LD_VAR 0 4
83062: PPUSH
83063: CALL_OW 256
83067: PPUSH
83068: CALL_OW 2
83072: ST_TO_ADDR
83073: GO 83036
83075: POP
83076: POP
// if not tmp then
83077: LD_VAR 0 5
83081: NOT
83082: IFFALSE 83086
// exit ;
83084: GO 83134
// if asc then
83086: LD_VAR 0 2
83090: IFFALSE 83114
// result := SortListByListAsc ( units , tmp ) else
83092: LD_ADDR_VAR 0 3
83096: PUSH
83097: LD_VAR 0 1
83101: PPUSH
83102: LD_VAR 0 5
83106: PPUSH
83107: CALL_OW 76
83111: ST_TO_ADDR
83112: GO 83134
// result := SortListByListDesc ( units , tmp ) ;
83114: LD_ADDR_VAR 0 3
83118: PUSH
83119: LD_VAR 0 1
83123: PPUSH
83124: LD_VAR 0 5
83128: PPUSH
83129: CALL_OW 77
83133: ST_TO_ADDR
// end ;
83134: LD_VAR 0 3
83138: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83139: LD_INT 0
83141: PPUSH
83142: PPUSH
// task := GetTaskList ( mech ) ;
83143: LD_ADDR_VAR 0 4
83147: PUSH
83148: LD_VAR 0 1
83152: PPUSH
83153: CALL_OW 437
83157: ST_TO_ADDR
// if not task then
83158: LD_VAR 0 4
83162: NOT
83163: IFFALSE 83167
// exit ;
83165: GO 83209
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83167: LD_ADDR_VAR 0 3
83171: PUSH
83172: LD_VAR 0 4
83176: PUSH
83177: LD_INT 1
83179: ARRAY
83180: PUSH
83181: LD_INT 1
83183: ARRAY
83184: PUSH
83185: LD_STRING r
83187: EQUAL
83188: PUSH
83189: LD_VAR 0 4
83193: PUSH
83194: LD_INT 1
83196: ARRAY
83197: PUSH
83198: LD_INT 4
83200: ARRAY
83201: PUSH
83202: LD_VAR 0 2
83206: EQUAL
83207: AND
83208: ST_TO_ADDR
// end ;
83209: LD_VAR 0 3
83213: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83214: LD_INT 0
83216: PPUSH
// SetDir ( unit , d ) ;
83217: LD_VAR 0 1
83221: PPUSH
83222: LD_VAR 0 4
83226: PPUSH
83227: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83231: LD_ADDR_VAR 0 6
83235: PUSH
83236: LD_VAR 0 1
83240: PPUSH
83241: LD_VAR 0 2
83245: PPUSH
83246: LD_VAR 0 3
83250: PPUSH
83251: LD_VAR 0 5
83255: PPUSH
83256: CALL_OW 48
83260: ST_TO_ADDR
// end ;
83261: LD_VAR 0 6
83265: RET
// export function ToNaturalNumber ( number ) ; begin
83266: LD_INT 0
83268: PPUSH
// result := number div 1 ;
83269: LD_ADDR_VAR 0 2
83273: PUSH
83274: LD_VAR 0 1
83278: PUSH
83279: LD_INT 1
83281: DIV
83282: ST_TO_ADDR
// if number < 0 then
83283: LD_VAR 0 1
83287: PUSH
83288: LD_INT 0
83290: LESS
83291: IFFALSE 83301
// result := 0 ;
83293: LD_ADDR_VAR 0 2
83297: PUSH
83298: LD_INT 0
83300: ST_TO_ADDR
// end ;
83301: LD_VAR 0 2
83305: RET
// export function SortByClass ( units , class ) ; var un ; begin
83306: LD_INT 0
83308: PPUSH
83309: PPUSH
// if not units or not class then
83310: LD_VAR 0 1
83314: NOT
83315: PUSH
83316: LD_VAR 0 2
83320: NOT
83321: OR
83322: IFFALSE 83326
// exit ;
83324: GO 83421
// result := [ ] ;
83326: LD_ADDR_VAR 0 3
83330: PUSH
83331: EMPTY
83332: ST_TO_ADDR
// for un in units do
83333: LD_ADDR_VAR 0 4
83337: PUSH
83338: LD_VAR 0 1
83342: PUSH
83343: FOR_IN
83344: IFFALSE 83419
// if GetClass ( un ) = class then
83346: LD_VAR 0 4
83350: PPUSH
83351: CALL_OW 257
83355: PUSH
83356: LD_VAR 0 2
83360: EQUAL
83361: IFFALSE 83388
// result := Insert ( result , 1 , un ) else
83363: LD_ADDR_VAR 0 3
83367: PUSH
83368: LD_VAR 0 3
83372: PPUSH
83373: LD_INT 1
83375: PPUSH
83376: LD_VAR 0 4
83380: PPUSH
83381: CALL_OW 2
83385: ST_TO_ADDR
83386: GO 83417
// result := Replace ( result , result + 1 , un ) ;
83388: LD_ADDR_VAR 0 3
83392: PUSH
83393: LD_VAR 0 3
83397: PPUSH
83398: LD_VAR 0 3
83402: PUSH
83403: LD_INT 1
83405: PLUS
83406: PPUSH
83407: LD_VAR 0 4
83411: PPUSH
83412: CALL_OW 1
83416: ST_TO_ADDR
83417: GO 83343
83419: POP
83420: POP
// end ;
83421: LD_VAR 0 3
83425: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83426: LD_INT 0
83428: PPUSH
83429: PPUSH
83430: PPUSH
83431: PPUSH
83432: PPUSH
83433: PPUSH
83434: PPUSH
// result := [ ] ;
83435: LD_ADDR_VAR 0 4
83439: PUSH
83440: EMPTY
83441: ST_TO_ADDR
// if x - r < 0 then
83442: LD_VAR 0 1
83446: PUSH
83447: LD_VAR 0 3
83451: MINUS
83452: PUSH
83453: LD_INT 0
83455: LESS
83456: IFFALSE 83468
// min_x := 0 else
83458: LD_ADDR_VAR 0 8
83462: PUSH
83463: LD_INT 0
83465: ST_TO_ADDR
83466: GO 83484
// min_x := x - r ;
83468: LD_ADDR_VAR 0 8
83472: PUSH
83473: LD_VAR 0 1
83477: PUSH
83478: LD_VAR 0 3
83482: MINUS
83483: ST_TO_ADDR
// if y - r < 0 then
83484: LD_VAR 0 2
83488: PUSH
83489: LD_VAR 0 3
83493: MINUS
83494: PUSH
83495: LD_INT 0
83497: LESS
83498: IFFALSE 83510
// min_y := 0 else
83500: LD_ADDR_VAR 0 7
83504: PUSH
83505: LD_INT 0
83507: ST_TO_ADDR
83508: GO 83526
// min_y := y - r ;
83510: LD_ADDR_VAR 0 7
83514: PUSH
83515: LD_VAR 0 2
83519: PUSH
83520: LD_VAR 0 3
83524: MINUS
83525: ST_TO_ADDR
// max_x := x + r ;
83526: LD_ADDR_VAR 0 9
83530: PUSH
83531: LD_VAR 0 1
83535: PUSH
83536: LD_VAR 0 3
83540: PLUS
83541: ST_TO_ADDR
// max_y := y + r ;
83542: LD_ADDR_VAR 0 10
83546: PUSH
83547: LD_VAR 0 2
83551: PUSH
83552: LD_VAR 0 3
83556: PLUS
83557: ST_TO_ADDR
// for _x = min_x to max_x do
83558: LD_ADDR_VAR 0 5
83562: PUSH
83563: DOUBLE
83564: LD_VAR 0 8
83568: DEC
83569: ST_TO_ADDR
83570: LD_VAR 0 9
83574: PUSH
83575: FOR_TO
83576: IFFALSE 83677
// for _y = min_y to max_y do
83578: LD_ADDR_VAR 0 6
83582: PUSH
83583: DOUBLE
83584: LD_VAR 0 7
83588: DEC
83589: ST_TO_ADDR
83590: LD_VAR 0 10
83594: PUSH
83595: FOR_TO
83596: IFFALSE 83673
// begin if not ValidHex ( _x , _y ) then
83598: LD_VAR 0 5
83602: PPUSH
83603: LD_VAR 0 6
83607: PPUSH
83608: CALL_OW 488
83612: NOT
83613: IFFALSE 83617
// continue ;
83615: GO 83595
// if GetResourceTypeXY ( _x , _y ) then
83617: LD_VAR 0 5
83621: PPUSH
83622: LD_VAR 0 6
83626: PPUSH
83627: CALL_OW 283
83631: IFFALSE 83671
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83633: LD_ADDR_VAR 0 4
83637: PUSH
83638: LD_VAR 0 4
83642: PPUSH
83643: LD_VAR 0 4
83647: PUSH
83648: LD_INT 1
83650: PLUS
83651: PPUSH
83652: LD_VAR 0 5
83656: PUSH
83657: LD_VAR 0 6
83661: PUSH
83662: EMPTY
83663: LIST
83664: LIST
83665: PPUSH
83666: CALL_OW 1
83670: ST_TO_ADDR
// end ;
83671: GO 83595
83673: POP
83674: POP
83675: GO 83575
83677: POP
83678: POP
// end ;
83679: LD_VAR 0 4
83683: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83684: LD_INT 0
83686: PPUSH
83687: PPUSH
83688: PPUSH
83689: PPUSH
83690: PPUSH
83691: PPUSH
83692: PPUSH
83693: PPUSH
// if not units then
83694: LD_VAR 0 1
83698: NOT
83699: IFFALSE 83703
// exit ;
83701: GO 84231
// result := UnitFilter ( units , [ f_ok ] ) ;
83703: LD_ADDR_VAR 0 3
83707: PUSH
83708: LD_VAR 0 1
83712: PPUSH
83713: LD_INT 50
83715: PUSH
83716: EMPTY
83717: LIST
83718: PPUSH
83719: CALL_OW 72
83723: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83724: LD_ADDR_VAR 0 8
83728: PUSH
83729: LD_VAR 0 1
83733: PUSH
83734: LD_INT 1
83736: ARRAY
83737: PPUSH
83738: CALL_OW 255
83742: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83743: LD_ADDR_VAR 0 10
83747: PUSH
83748: LD_INT 29
83750: PUSH
83751: LD_INT 91
83753: PUSH
83754: LD_INT 49
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: LIST
83761: ST_TO_ADDR
// if not result then
83762: LD_VAR 0 3
83766: NOT
83767: IFFALSE 83771
// exit ;
83769: GO 84231
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83771: LD_ADDR_VAR 0 5
83775: PUSH
83776: LD_INT 81
83778: PUSH
83779: LD_VAR 0 8
83783: PUSH
83784: EMPTY
83785: LIST
83786: LIST
83787: PPUSH
83788: CALL_OW 69
83792: ST_TO_ADDR
// for i in result do
83793: LD_ADDR_VAR 0 4
83797: PUSH
83798: LD_VAR 0 3
83802: PUSH
83803: FOR_IN
83804: IFFALSE 84229
// begin tag := GetTag ( i ) + 1 ;
83806: LD_ADDR_VAR 0 9
83810: PUSH
83811: LD_VAR 0 4
83815: PPUSH
83816: CALL_OW 110
83820: PUSH
83821: LD_INT 1
83823: PLUS
83824: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83825: LD_ADDR_VAR 0 7
83829: PUSH
83830: LD_VAR 0 4
83834: PPUSH
83835: CALL_OW 250
83839: PPUSH
83840: LD_VAR 0 4
83844: PPUSH
83845: CALL_OW 251
83849: PPUSH
83850: LD_INT 4
83852: PPUSH
83853: CALL 83426 0 3
83857: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83858: LD_VAR 0 4
83862: PPUSH
83863: CALL_OW 247
83867: PUSH
83868: LD_INT 2
83870: EQUAL
83871: PUSH
83872: LD_VAR 0 7
83876: PUSH
83877: LD_INT 2
83879: GREATER
83880: AND
83881: PUSH
83882: LD_VAR 0 4
83886: PPUSH
83887: CALL_OW 264
83891: PUSH
83892: LD_VAR 0 10
83896: IN
83897: NOT
83898: AND
83899: IFFALSE 83938
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83901: LD_VAR 0 4
83905: PPUSH
83906: LD_VAR 0 7
83910: PUSH
83911: LD_INT 1
83913: ARRAY
83914: PUSH
83915: LD_INT 1
83917: ARRAY
83918: PPUSH
83919: LD_VAR 0 7
83923: PUSH
83924: LD_INT 1
83926: ARRAY
83927: PUSH
83928: LD_INT 2
83930: ARRAY
83931: PPUSH
83932: CALL_OW 116
83936: GO 84227
// if path > tag then
83938: LD_VAR 0 2
83942: PUSH
83943: LD_VAR 0 9
83947: GREATER
83948: IFFALSE 84156
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83950: LD_ADDR_VAR 0 6
83954: PUSH
83955: LD_VAR 0 5
83959: PPUSH
83960: LD_INT 91
83962: PUSH
83963: LD_VAR 0 4
83967: PUSH
83968: LD_INT 8
83970: PUSH
83971: EMPTY
83972: LIST
83973: LIST
83974: LIST
83975: PPUSH
83976: CALL_OW 72
83980: ST_TO_ADDR
// if nearEnemy then
83981: LD_VAR 0 6
83985: IFFALSE 84054
// begin if GetWeapon ( i ) = ru_time_lapser then
83987: LD_VAR 0 4
83991: PPUSH
83992: CALL_OW 264
83996: PUSH
83997: LD_INT 49
83999: EQUAL
84000: IFFALSE 84028
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84002: LD_VAR 0 4
84006: PPUSH
84007: LD_VAR 0 6
84011: PPUSH
84012: LD_VAR 0 4
84016: PPUSH
84017: CALL_OW 74
84021: PPUSH
84022: CALL_OW 112
84026: GO 84052
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84028: LD_VAR 0 4
84032: PPUSH
84033: LD_VAR 0 6
84037: PPUSH
84038: LD_VAR 0 4
84042: PPUSH
84043: CALL_OW 74
84047: PPUSH
84048: CALL 85302 0 2
// end else
84052: GO 84154
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84054: LD_VAR 0 4
84058: PPUSH
84059: LD_VAR 0 2
84063: PUSH
84064: LD_VAR 0 9
84068: ARRAY
84069: PUSH
84070: LD_INT 1
84072: ARRAY
84073: PPUSH
84074: LD_VAR 0 2
84078: PUSH
84079: LD_VAR 0 9
84083: ARRAY
84084: PUSH
84085: LD_INT 2
84087: ARRAY
84088: PPUSH
84089: CALL_OW 297
84093: PUSH
84094: LD_INT 6
84096: GREATER
84097: IFFALSE 84140
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84099: LD_VAR 0 4
84103: PPUSH
84104: LD_VAR 0 2
84108: PUSH
84109: LD_VAR 0 9
84113: ARRAY
84114: PUSH
84115: LD_INT 1
84117: ARRAY
84118: PPUSH
84119: LD_VAR 0 2
84123: PUSH
84124: LD_VAR 0 9
84128: ARRAY
84129: PUSH
84130: LD_INT 2
84132: ARRAY
84133: PPUSH
84134: CALL_OW 114
84138: GO 84154
// SetTag ( i , tag ) ;
84140: LD_VAR 0 4
84144: PPUSH
84145: LD_VAR 0 9
84149: PPUSH
84150: CALL_OW 109
// end else
84154: GO 84227
// if enemy then
84156: LD_VAR 0 5
84160: IFFALSE 84227
// begin if GetWeapon ( i ) = ru_time_lapser then
84162: LD_VAR 0 4
84166: PPUSH
84167: CALL_OW 264
84171: PUSH
84172: LD_INT 49
84174: EQUAL
84175: IFFALSE 84203
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84177: LD_VAR 0 4
84181: PPUSH
84182: LD_VAR 0 5
84186: PPUSH
84187: LD_VAR 0 4
84191: PPUSH
84192: CALL_OW 74
84196: PPUSH
84197: CALL_OW 112
84201: GO 84227
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84203: LD_VAR 0 4
84207: PPUSH
84208: LD_VAR 0 5
84212: PPUSH
84213: LD_VAR 0 4
84217: PPUSH
84218: CALL_OW 74
84222: PPUSH
84223: CALL 85302 0 2
// end ; end ;
84227: GO 83803
84229: POP
84230: POP
// end ;
84231: LD_VAR 0 3
84235: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84236: LD_INT 0
84238: PPUSH
84239: PPUSH
84240: PPUSH
// if not unit or IsInUnit ( unit ) then
84241: LD_VAR 0 1
84245: NOT
84246: PUSH
84247: LD_VAR 0 1
84251: PPUSH
84252: CALL_OW 310
84256: OR
84257: IFFALSE 84261
// exit ;
84259: GO 84352
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84261: LD_ADDR_VAR 0 4
84265: PUSH
84266: LD_VAR 0 1
84270: PPUSH
84271: CALL_OW 250
84275: PPUSH
84276: LD_VAR 0 2
84280: PPUSH
84281: LD_INT 1
84283: PPUSH
84284: CALL_OW 272
84288: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84289: LD_ADDR_VAR 0 5
84293: PUSH
84294: LD_VAR 0 1
84298: PPUSH
84299: CALL_OW 251
84303: PPUSH
84304: LD_VAR 0 2
84308: PPUSH
84309: LD_INT 1
84311: PPUSH
84312: CALL_OW 273
84316: ST_TO_ADDR
// if ValidHex ( x , y ) then
84317: LD_VAR 0 4
84321: PPUSH
84322: LD_VAR 0 5
84326: PPUSH
84327: CALL_OW 488
84331: IFFALSE 84352
// ComTurnXY ( unit , x , y ) ;
84333: LD_VAR 0 1
84337: PPUSH
84338: LD_VAR 0 4
84342: PPUSH
84343: LD_VAR 0 5
84347: PPUSH
84348: CALL_OW 118
// end ;
84352: LD_VAR 0 3
84356: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84357: LD_INT 0
84359: PPUSH
84360: PPUSH
// result := false ;
84361: LD_ADDR_VAR 0 3
84365: PUSH
84366: LD_INT 0
84368: ST_TO_ADDR
// if not units then
84369: LD_VAR 0 2
84373: NOT
84374: IFFALSE 84378
// exit ;
84376: GO 84423
// for i in units do
84378: LD_ADDR_VAR 0 4
84382: PUSH
84383: LD_VAR 0 2
84387: PUSH
84388: FOR_IN
84389: IFFALSE 84421
// if See ( side , i ) then
84391: LD_VAR 0 1
84395: PPUSH
84396: LD_VAR 0 4
84400: PPUSH
84401: CALL_OW 292
84405: IFFALSE 84419
// begin result := true ;
84407: LD_ADDR_VAR 0 3
84411: PUSH
84412: LD_INT 1
84414: ST_TO_ADDR
// exit ;
84415: POP
84416: POP
84417: GO 84423
// end ;
84419: GO 84388
84421: POP
84422: POP
// end ;
84423: LD_VAR 0 3
84427: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84428: LD_INT 0
84430: PPUSH
84431: PPUSH
84432: PPUSH
84433: PPUSH
// if not unit or not points then
84434: LD_VAR 0 1
84438: NOT
84439: PUSH
84440: LD_VAR 0 2
84444: NOT
84445: OR
84446: IFFALSE 84450
// exit ;
84448: GO 84540
// dist := 99999 ;
84450: LD_ADDR_VAR 0 5
84454: PUSH
84455: LD_INT 99999
84457: ST_TO_ADDR
// for i in points do
84458: LD_ADDR_VAR 0 4
84462: PUSH
84463: LD_VAR 0 2
84467: PUSH
84468: FOR_IN
84469: IFFALSE 84538
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84471: LD_ADDR_VAR 0 6
84475: PUSH
84476: LD_VAR 0 1
84480: PPUSH
84481: LD_VAR 0 4
84485: PUSH
84486: LD_INT 1
84488: ARRAY
84489: PPUSH
84490: LD_VAR 0 4
84494: PUSH
84495: LD_INT 2
84497: ARRAY
84498: PPUSH
84499: CALL_OW 297
84503: ST_TO_ADDR
// if tmpDist < dist then
84504: LD_VAR 0 6
84508: PUSH
84509: LD_VAR 0 5
84513: LESS
84514: IFFALSE 84536
// begin result := i ;
84516: LD_ADDR_VAR 0 3
84520: PUSH
84521: LD_VAR 0 4
84525: ST_TO_ADDR
// dist := tmpDist ;
84526: LD_ADDR_VAR 0 5
84530: PUSH
84531: LD_VAR 0 6
84535: ST_TO_ADDR
// end ; end ;
84536: GO 84468
84538: POP
84539: POP
// end ;
84540: LD_VAR 0 3
84544: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84545: LD_INT 0
84547: PPUSH
// uc_side := side ;
84548: LD_ADDR_OWVAR 20
84552: PUSH
84553: LD_VAR 0 1
84557: ST_TO_ADDR
// uc_nation := 3 ;
84558: LD_ADDR_OWVAR 21
84562: PUSH
84563: LD_INT 3
84565: ST_TO_ADDR
// vc_chassis := 25 ;
84566: LD_ADDR_OWVAR 37
84570: PUSH
84571: LD_INT 25
84573: ST_TO_ADDR
// vc_engine := engine_siberite ;
84574: LD_ADDR_OWVAR 39
84578: PUSH
84579: LD_INT 3
84581: ST_TO_ADDR
// vc_control := control_computer ;
84582: LD_ADDR_OWVAR 38
84586: PUSH
84587: LD_INT 3
84589: ST_TO_ADDR
// vc_weapon := 59 ;
84590: LD_ADDR_OWVAR 40
84594: PUSH
84595: LD_INT 59
84597: ST_TO_ADDR
// result := CreateVehicle ;
84598: LD_ADDR_VAR 0 5
84602: PUSH
84603: CALL_OW 45
84607: ST_TO_ADDR
// SetDir ( result , d ) ;
84608: LD_VAR 0 5
84612: PPUSH
84613: LD_VAR 0 4
84617: PPUSH
84618: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84622: LD_VAR 0 5
84626: PPUSH
84627: LD_VAR 0 2
84631: PPUSH
84632: LD_VAR 0 3
84636: PPUSH
84637: LD_INT 0
84639: PPUSH
84640: CALL_OW 48
// end ;
84644: LD_VAR 0 5
84648: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84649: LD_INT 0
84651: PPUSH
84652: PPUSH
84653: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84654: LD_ADDR_VAR 0 2
84658: PUSH
84659: LD_INT 0
84661: PUSH
84662: LD_INT 0
84664: PUSH
84665: LD_INT 0
84667: PUSH
84668: LD_INT 0
84670: PUSH
84671: EMPTY
84672: LIST
84673: LIST
84674: LIST
84675: LIST
84676: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84677: LD_VAR 0 1
84681: NOT
84682: PUSH
84683: LD_VAR 0 1
84687: PPUSH
84688: CALL_OW 264
84692: PUSH
84693: LD_INT 12
84695: PUSH
84696: LD_INT 51
84698: PUSH
84699: LD_INT 32
84701: PUSH
84702: LD_INT 89
84704: PUSH
84705: EMPTY
84706: LIST
84707: LIST
84708: LIST
84709: LIST
84710: IN
84711: NOT
84712: OR
84713: IFFALSE 84717
// exit ;
84715: GO 84815
// for i := 1 to 3 do
84717: LD_ADDR_VAR 0 3
84721: PUSH
84722: DOUBLE
84723: LD_INT 1
84725: DEC
84726: ST_TO_ADDR
84727: LD_INT 3
84729: PUSH
84730: FOR_TO
84731: IFFALSE 84813
// begin tmp := GetCargo ( cargo , i ) ;
84733: LD_ADDR_VAR 0 4
84737: PUSH
84738: LD_VAR 0 1
84742: PPUSH
84743: LD_VAR 0 3
84747: PPUSH
84748: CALL_OW 289
84752: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84753: LD_ADDR_VAR 0 2
84757: PUSH
84758: LD_VAR 0 2
84762: PPUSH
84763: LD_VAR 0 3
84767: PPUSH
84768: LD_VAR 0 4
84772: PPUSH
84773: CALL_OW 1
84777: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84778: LD_ADDR_VAR 0 2
84782: PUSH
84783: LD_VAR 0 2
84787: PPUSH
84788: LD_INT 4
84790: PPUSH
84791: LD_VAR 0 2
84795: PUSH
84796: LD_INT 4
84798: ARRAY
84799: PUSH
84800: LD_VAR 0 4
84804: PLUS
84805: PPUSH
84806: CALL_OW 1
84810: ST_TO_ADDR
// end ;
84811: GO 84730
84813: POP
84814: POP
// end ;
84815: LD_VAR 0 2
84819: RET
// export function Length ( array ) ; begin
84820: LD_INT 0
84822: PPUSH
// result := array + 0 ;
84823: LD_ADDR_VAR 0 2
84827: PUSH
84828: LD_VAR 0 1
84832: PUSH
84833: LD_INT 0
84835: PLUS
84836: ST_TO_ADDR
// end ;
84837: LD_VAR 0 2
84841: RET
// export function PrepareArray ( array ) ; begin
84842: LD_INT 0
84844: PPUSH
// result := array diff 0 ;
84845: LD_ADDR_VAR 0 2
84849: PUSH
84850: LD_VAR 0 1
84854: PUSH
84855: LD_INT 0
84857: DIFF
84858: ST_TO_ADDR
// if not result [ 1 ] then
84859: LD_VAR 0 2
84863: PUSH
84864: LD_INT 1
84866: ARRAY
84867: NOT
84868: IFFALSE 84888
// result := Delete ( result , 1 ) ;
84870: LD_ADDR_VAR 0 2
84874: PUSH
84875: LD_VAR 0 2
84879: PPUSH
84880: LD_INT 1
84882: PPUSH
84883: CALL_OW 3
84887: ST_TO_ADDR
// end ;
84888: LD_VAR 0 2
84892: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84893: LD_INT 0
84895: PPUSH
84896: PPUSH
84897: PPUSH
84898: PPUSH
// sibRocketRange := 25 ;
84899: LD_ADDR_VAR 0 6
84903: PUSH
84904: LD_INT 25
84906: ST_TO_ADDR
// result := false ;
84907: LD_ADDR_VAR 0 4
84911: PUSH
84912: LD_INT 0
84914: ST_TO_ADDR
// for i := 0 to 5 do
84915: LD_ADDR_VAR 0 5
84919: PUSH
84920: DOUBLE
84921: LD_INT 0
84923: DEC
84924: ST_TO_ADDR
84925: LD_INT 5
84927: PUSH
84928: FOR_TO
84929: IFFALSE 84996
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84931: LD_VAR 0 1
84935: PPUSH
84936: LD_VAR 0 5
84940: PPUSH
84941: LD_VAR 0 6
84945: PPUSH
84946: CALL_OW 272
84950: PPUSH
84951: LD_VAR 0 2
84955: PPUSH
84956: LD_VAR 0 5
84960: PPUSH
84961: LD_VAR 0 6
84965: PPUSH
84966: CALL_OW 273
84970: PPUSH
84971: LD_VAR 0 3
84975: PPUSH
84976: CALL_OW 309
84980: IFFALSE 84994
// begin result := true ;
84982: LD_ADDR_VAR 0 4
84986: PUSH
84987: LD_INT 1
84989: ST_TO_ADDR
// exit ;
84990: POP
84991: POP
84992: GO 84998
// end ;
84994: GO 84928
84996: POP
84997: POP
// end ;
84998: LD_VAR 0 4
85002: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85003: LD_INT 0
85005: PPUSH
85006: PPUSH
85007: PPUSH
// if btype = b_depot then
85008: LD_VAR 0 2
85012: PUSH
85013: LD_INT 0
85015: EQUAL
85016: IFFALSE 85028
// begin result := true ;
85018: LD_ADDR_VAR 0 3
85022: PUSH
85023: LD_INT 1
85025: ST_TO_ADDR
// exit ;
85026: GO 85144
// end ; pom := GetBase ( depot ) ;
85028: LD_ADDR_VAR 0 4
85032: PUSH
85033: LD_VAR 0 1
85037: PPUSH
85038: CALL_OW 274
85042: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85043: LD_ADDR_VAR 0 5
85047: PUSH
85048: LD_VAR 0 2
85052: PPUSH
85053: LD_VAR 0 1
85057: PPUSH
85058: CALL_OW 248
85062: PPUSH
85063: CALL_OW 450
85067: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85068: LD_ADDR_VAR 0 3
85072: PUSH
85073: LD_VAR 0 4
85077: PPUSH
85078: LD_INT 1
85080: PPUSH
85081: CALL_OW 275
85085: PUSH
85086: LD_VAR 0 5
85090: PUSH
85091: LD_INT 1
85093: ARRAY
85094: GREATEREQUAL
85095: PUSH
85096: LD_VAR 0 4
85100: PPUSH
85101: LD_INT 2
85103: PPUSH
85104: CALL_OW 275
85108: PUSH
85109: LD_VAR 0 5
85113: PUSH
85114: LD_INT 2
85116: ARRAY
85117: GREATEREQUAL
85118: AND
85119: PUSH
85120: LD_VAR 0 4
85124: PPUSH
85125: LD_INT 3
85127: PPUSH
85128: CALL_OW 275
85132: PUSH
85133: LD_VAR 0 5
85137: PUSH
85138: LD_INT 3
85140: ARRAY
85141: GREATEREQUAL
85142: AND
85143: ST_TO_ADDR
// end ;
85144: LD_VAR 0 3
85148: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85149: LD_INT 0
85151: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85152: LD_VAR 0 1
85156: PPUSH
85157: LD_VAR 0 2
85161: PPUSH
85162: LD_INT 0
85164: PPUSH
85165: LD_INT 0
85167: PPUSH
85168: LD_INT 1
85170: PPUSH
85171: LD_INT 0
85173: PPUSH
85174: CALL_OW 587
// end ;
85178: LD_VAR 0 3
85182: RET
// export function CenterOnNow ( unit ) ; begin
85183: LD_INT 0
85185: PPUSH
// result := IsInUnit ( unit ) ;
85186: LD_ADDR_VAR 0 2
85190: PUSH
85191: LD_VAR 0 1
85195: PPUSH
85196: CALL_OW 310
85200: ST_TO_ADDR
// if not result then
85201: LD_VAR 0 2
85205: NOT
85206: IFFALSE 85218
// result := unit ;
85208: LD_ADDR_VAR 0 2
85212: PUSH
85213: LD_VAR 0 1
85217: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85218: LD_VAR 0 1
85222: PPUSH
85223: CALL_OW 87
// end ;
85227: LD_VAR 0 2
85231: RET
// export function ComMoveHex ( unit , hex ) ; begin
85232: LD_INT 0
85234: PPUSH
// if not hex then
85235: LD_VAR 0 2
85239: NOT
85240: IFFALSE 85244
// exit ;
85242: GO 85297
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85244: LD_VAR 0 2
85248: PUSH
85249: LD_INT 1
85251: ARRAY
85252: PPUSH
85253: LD_VAR 0 2
85257: PUSH
85258: LD_INT 2
85260: ARRAY
85261: PPUSH
85262: CALL_OW 428
85266: IFFALSE 85270
// exit ;
85268: GO 85297
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85270: LD_VAR 0 1
85274: PPUSH
85275: LD_VAR 0 2
85279: PUSH
85280: LD_INT 1
85282: ARRAY
85283: PPUSH
85284: LD_VAR 0 2
85288: PUSH
85289: LD_INT 2
85291: ARRAY
85292: PPUSH
85293: CALL_OW 111
// end ;
85297: LD_VAR 0 3
85301: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85302: LD_INT 0
85304: PPUSH
85305: PPUSH
85306: PPUSH
// if not unit or not enemy then
85307: LD_VAR 0 1
85311: NOT
85312: PUSH
85313: LD_VAR 0 2
85317: NOT
85318: OR
85319: IFFALSE 85323
// exit ;
85321: GO 85447
// x := GetX ( enemy ) ;
85323: LD_ADDR_VAR 0 4
85327: PUSH
85328: LD_VAR 0 2
85332: PPUSH
85333: CALL_OW 250
85337: ST_TO_ADDR
// y := GetY ( enemy ) ;
85338: LD_ADDR_VAR 0 5
85342: PUSH
85343: LD_VAR 0 2
85347: PPUSH
85348: CALL_OW 251
85352: ST_TO_ADDR
// if ValidHex ( x , y ) then
85353: LD_VAR 0 4
85357: PPUSH
85358: LD_VAR 0 5
85362: PPUSH
85363: CALL_OW 488
85367: IFFALSE 85447
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85369: LD_VAR 0 2
85373: PPUSH
85374: CALL_OW 247
85378: PUSH
85379: LD_INT 3
85381: PUSH
85382: LD_INT 2
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: IN
85389: PUSH
85390: LD_VAR 0 1
85394: PPUSH
85395: CALL_OW 255
85399: PPUSH
85400: LD_VAR 0 2
85404: PPUSH
85405: CALL_OW 292
85409: OR
85410: IFFALSE 85428
// ComAttackUnit ( unit , enemy ) else
85412: LD_VAR 0 1
85416: PPUSH
85417: LD_VAR 0 2
85421: PPUSH
85422: CALL_OW 115
85426: GO 85447
// ComAgressiveMove ( unit , x , y ) ;
85428: LD_VAR 0 1
85432: PPUSH
85433: LD_VAR 0 4
85437: PPUSH
85438: LD_VAR 0 5
85442: PPUSH
85443: CALL_OW 114
// end ;
85447: LD_VAR 0 3
85451: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85452: LD_INT 0
85454: PPUSH
85455: PPUSH
85456: PPUSH
// list := AreaToList ( area , 0 ) ;
85457: LD_ADDR_VAR 0 5
85461: PUSH
85462: LD_VAR 0 1
85466: PPUSH
85467: LD_INT 0
85469: PPUSH
85470: CALL_OW 517
85474: ST_TO_ADDR
// if not list then
85475: LD_VAR 0 5
85479: NOT
85480: IFFALSE 85484
// exit ;
85482: GO 85614
// if all then
85484: LD_VAR 0 2
85488: IFFALSE 85576
// begin for i := 1 to list [ 1 ] do
85490: LD_ADDR_VAR 0 4
85494: PUSH
85495: DOUBLE
85496: LD_INT 1
85498: DEC
85499: ST_TO_ADDR
85500: LD_VAR 0 5
85504: PUSH
85505: LD_INT 1
85507: ARRAY
85508: PUSH
85509: FOR_TO
85510: IFFALSE 85572
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85512: LD_ADDR_VAR 0 3
85516: PUSH
85517: LD_VAR 0 3
85521: PPUSH
85522: LD_VAR 0 3
85526: PUSH
85527: LD_INT 1
85529: PLUS
85530: PPUSH
85531: LD_VAR 0 5
85535: PUSH
85536: LD_INT 1
85538: ARRAY
85539: PUSH
85540: LD_VAR 0 4
85544: ARRAY
85545: PUSH
85546: LD_VAR 0 5
85550: PUSH
85551: LD_INT 2
85553: ARRAY
85554: PUSH
85555: LD_VAR 0 4
85559: ARRAY
85560: PUSH
85561: EMPTY
85562: LIST
85563: LIST
85564: PPUSH
85565: CALL_OW 1
85569: ST_TO_ADDR
85570: GO 85509
85572: POP
85573: POP
// exit ;
85574: GO 85614
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85576: LD_ADDR_VAR 0 3
85580: PUSH
85581: LD_VAR 0 5
85585: PUSH
85586: LD_INT 1
85588: ARRAY
85589: PUSH
85590: LD_INT 1
85592: ARRAY
85593: PUSH
85594: LD_VAR 0 5
85598: PUSH
85599: LD_INT 2
85601: ARRAY
85602: PUSH
85603: LD_INT 1
85605: ARRAY
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: EMPTY
85612: LIST
85613: ST_TO_ADDR
// end ;
85614: LD_VAR 0 3
85618: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85619: LD_INT 0
85621: PPUSH
85622: PPUSH
// list := AreaToList ( area , 0 ) ;
85623: LD_ADDR_VAR 0 4
85627: PUSH
85628: LD_VAR 0 1
85632: PPUSH
85633: LD_INT 0
85635: PPUSH
85636: CALL_OW 517
85640: ST_TO_ADDR
// if not list then
85641: LD_VAR 0 4
85645: NOT
85646: IFFALSE 85650
// exit ;
85648: GO 85691
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85650: LD_ADDR_VAR 0 3
85654: PUSH
85655: LD_VAR 0 4
85659: PUSH
85660: LD_INT 1
85662: ARRAY
85663: PUSH
85664: LD_INT 1
85666: ARRAY
85667: PUSH
85668: LD_VAR 0 4
85672: PUSH
85673: LD_INT 2
85675: ARRAY
85676: PUSH
85677: LD_INT 1
85679: ARRAY
85680: PUSH
85681: LD_VAR 0 2
85685: PUSH
85686: EMPTY
85687: LIST
85688: LIST
85689: LIST
85690: ST_TO_ADDR
// end ;
85691: LD_VAR 0 3
85695: RET
// export function First ( array ) ; begin
85696: LD_INT 0
85698: PPUSH
// if not array then
85699: LD_VAR 0 1
85703: NOT
85704: IFFALSE 85708
// exit ;
85706: GO 85722
// result := array [ 1 ] ;
85708: LD_ADDR_VAR 0 2
85712: PUSH
85713: LD_VAR 0 1
85717: PUSH
85718: LD_INT 1
85720: ARRAY
85721: ST_TO_ADDR
// end ;
85722: LD_VAR 0 2
85726: RET
// export function Last ( array ) ; begin
85727: LD_INT 0
85729: PPUSH
// if not array then
85730: LD_VAR 0 1
85734: NOT
85735: IFFALSE 85739
// exit ;
85737: GO 85755
// result := array [ array ] ;
85739: LD_ADDR_VAR 0 2
85743: PUSH
85744: LD_VAR 0 1
85748: PUSH
85749: LD_VAR 0 1
85753: ARRAY
85754: ST_TO_ADDR
// end ;
85755: LD_VAR 0 2
85759: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85760: LD_INT 0
85762: PPUSH
85763: PPUSH
// result := [ ] ;
85764: LD_ADDR_VAR 0 5
85768: PUSH
85769: EMPTY
85770: ST_TO_ADDR
// if not array then
85771: LD_VAR 0 1
85775: NOT
85776: IFFALSE 85780
// exit ;
85778: GO 85892
// for i := 1 to array do
85780: LD_ADDR_VAR 0 6
85784: PUSH
85785: DOUBLE
85786: LD_INT 1
85788: DEC
85789: ST_TO_ADDR
85790: LD_VAR 0 1
85794: PUSH
85795: FOR_TO
85796: IFFALSE 85890
// if array [ i ] [ index ] = value then
85798: LD_VAR 0 1
85802: PUSH
85803: LD_VAR 0 6
85807: ARRAY
85808: PUSH
85809: LD_VAR 0 2
85813: ARRAY
85814: PUSH
85815: LD_VAR 0 3
85819: EQUAL
85820: IFFALSE 85888
// begin if indexColumn then
85822: LD_VAR 0 4
85826: IFFALSE 85862
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85828: LD_ADDR_VAR 0 5
85832: PUSH
85833: LD_VAR 0 5
85837: PPUSH
85838: LD_VAR 0 1
85842: PUSH
85843: LD_VAR 0 6
85847: ARRAY
85848: PUSH
85849: LD_VAR 0 4
85853: ARRAY
85854: PPUSH
85855: CALL 81074 0 2
85859: ST_TO_ADDR
85860: GO 85888
// result := Join ( result , array [ i ] ) ;
85862: LD_ADDR_VAR 0 5
85866: PUSH
85867: LD_VAR 0 5
85871: PPUSH
85872: LD_VAR 0 1
85876: PUSH
85877: LD_VAR 0 6
85881: ARRAY
85882: PPUSH
85883: CALL 81074 0 2
85887: ST_TO_ADDR
// end ;
85888: GO 85795
85890: POP
85891: POP
// end ;
85892: LD_VAR 0 5
85896: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85897: LD_INT 0
85899: PPUSH
// if not vehicles or not parkingPoint then
85900: LD_VAR 0 1
85904: NOT
85905: PUSH
85906: LD_VAR 0 2
85910: NOT
85911: OR
85912: IFFALSE 85916
// exit ;
85914: GO 86014
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85916: LD_ADDR_VAR 0 1
85920: PUSH
85921: LD_VAR 0 1
85925: PPUSH
85926: LD_INT 50
85928: PUSH
85929: EMPTY
85930: LIST
85931: PUSH
85932: LD_INT 3
85934: PUSH
85935: LD_INT 92
85937: PUSH
85938: LD_VAR 0 2
85942: PUSH
85943: LD_INT 1
85945: ARRAY
85946: PUSH
85947: LD_VAR 0 2
85951: PUSH
85952: LD_INT 2
85954: ARRAY
85955: PUSH
85956: LD_INT 8
85958: PUSH
85959: EMPTY
85960: LIST
85961: LIST
85962: LIST
85963: LIST
85964: PUSH
85965: EMPTY
85966: LIST
85967: LIST
85968: PUSH
85969: EMPTY
85970: LIST
85971: LIST
85972: PPUSH
85973: CALL_OW 72
85977: ST_TO_ADDR
// if not vehicles then
85978: LD_VAR 0 1
85982: NOT
85983: IFFALSE 85987
// exit ;
85985: GO 86014
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85987: LD_VAR 0 1
85991: PPUSH
85992: LD_VAR 0 2
85996: PUSH
85997: LD_INT 1
85999: ARRAY
86000: PPUSH
86001: LD_VAR 0 2
86005: PUSH
86006: LD_INT 2
86008: ARRAY
86009: PPUSH
86010: CALL_OW 111
// end ;
86014: LD_VAR 0 3
86018: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86019: LD_INT 0
86021: PPUSH
86022: PPUSH
86023: PPUSH
// if not side or not area then
86024: LD_VAR 0 1
86028: NOT
86029: PUSH
86030: LD_VAR 0 2
86034: NOT
86035: OR
86036: IFFALSE 86040
// exit ;
86038: GO 86159
// tmp := AreaToList ( area , 0 ) ;
86040: LD_ADDR_VAR 0 5
86044: PUSH
86045: LD_VAR 0 2
86049: PPUSH
86050: LD_INT 0
86052: PPUSH
86053: CALL_OW 517
86057: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86058: LD_ADDR_VAR 0 4
86062: PUSH
86063: DOUBLE
86064: LD_INT 1
86066: DEC
86067: ST_TO_ADDR
86068: LD_VAR 0 5
86072: PUSH
86073: LD_INT 1
86075: ARRAY
86076: PUSH
86077: FOR_TO
86078: IFFALSE 86157
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86080: LD_VAR 0 5
86084: PUSH
86085: LD_INT 1
86087: ARRAY
86088: PUSH
86089: LD_VAR 0 4
86093: ARRAY
86094: PPUSH
86095: LD_VAR 0 5
86099: PUSH
86100: LD_INT 2
86102: ARRAY
86103: PUSH
86104: LD_VAR 0 4
86108: ARRAY
86109: PPUSH
86110: CALL_OW 351
86114: IFFALSE 86155
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86116: LD_VAR 0 5
86120: PUSH
86121: LD_INT 1
86123: ARRAY
86124: PUSH
86125: LD_VAR 0 4
86129: ARRAY
86130: PPUSH
86131: LD_VAR 0 5
86135: PUSH
86136: LD_INT 2
86138: ARRAY
86139: PUSH
86140: LD_VAR 0 4
86144: ARRAY
86145: PPUSH
86146: LD_VAR 0 1
86150: PPUSH
86151: CALL_OW 244
// end ;
86155: GO 86077
86157: POP
86158: POP
// end ; end_of_file
86159: LD_VAR 0 3
86163: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86164: LD_VAR 0 1
86168: PUSH
86169: LD_INT 200
86171: DOUBLE
86172: GREATEREQUAL
86173: IFFALSE 86181
86175: LD_INT 299
86177: DOUBLE
86178: LESSEQUAL
86179: IFTRUE 86183
86181: GO 86215
86183: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86184: LD_VAR 0 1
86188: PPUSH
86189: LD_VAR 0 2
86193: PPUSH
86194: LD_VAR 0 3
86198: PPUSH
86199: LD_VAR 0 4
86203: PPUSH
86204: LD_VAR 0 5
86208: PPUSH
86209: CALL 38580 0 5
86213: GO 86292
86215: LD_INT 300
86217: DOUBLE
86218: GREATEREQUAL
86219: IFFALSE 86227
86221: LD_INT 399
86223: DOUBLE
86224: LESSEQUAL
86225: IFTRUE 86229
86227: GO 86291
86229: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86230: LD_VAR 0 1
86234: PPUSH
86235: LD_VAR 0 2
86239: PPUSH
86240: LD_VAR 0 3
86244: PPUSH
86245: LD_VAR 0 4
86249: PPUSH
86250: LD_VAR 0 5
86254: PPUSH
86255: LD_VAR 0 6
86259: PPUSH
86260: LD_VAR 0 7
86264: PPUSH
86265: LD_VAR 0 8
86269: PPUSH
86270: LD_VAR 0 9
86274: PPUSH
86275: LD_VAR 0 10
86279: PPUSH
86280: LD_VAR 0 11
86284: PPUSH
86285: CALL 34518 0 11
86289: GO 86292
86291: POP
// end ;
86292: PPOPN 11
86294: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86295: LD_VAR 0 1
86299: PPUSH
86300: LD_VAR 0 2
86304: PPUSH
86305: LD_VAR 0 3
86309: PPUSH
86310: LD_VAR 0 4
86314: PPUSH
86315: LD_VAR 0 5
86319: PPUSH
86320: CALL 37995 0 5
// end ; end_of_file
86324: PPOPN 5
86326: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86327: LD_VAR 0 1
86331: PPUSH
86332: LD_VAR 0 2
86336: PPUSH
86337: LD_VAR 0 3
86341: PPUSH
86342: LD_VAR 0 4
86346: PPUSH
86347: LD_VAR 0 5
86351: PPUSH
86352: LD_VAR 0 6
86356: PPUSH
86357: CALL 22170 0 6
// end ;
86361: PPOPN 6
86363: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86364: LD_INT 0
86366: PPUSH
// begin if not units then
86367: LD_VAR 0 1
86371: NOT
86372: IFFALSE 86376
// exit ;
86374: GO 86376
// end ;
86376: PPOPN 7
86378: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86379: CALL 22057 0 0
// end ;
86383: PPOPN 1
86385: END
