// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6300 0 0
// PrepareNature ;
 250: CALL 23206 0 0
// PrepareRussian ;
 254: CALL 5485 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5862 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5862 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5862 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5862 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5862 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5862 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5862 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5862 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5862 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; var xy , i ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
// uc_side = 4 ;
2144: LD_ADDR_OWVAR 20
2148: PUSH
2149: LD_INT 4
2151: ST_TO_ADDR
// uc_nation = 1 ;
2152: LD_ADDR_OWVAR 21
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: LD_INT 63
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 70
2177: PUSH
2178: LD_INT 1
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 83
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 16
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 27
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 38
2217: PUSH
2218: LD_INT 1
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 5
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 54
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2255: LD_ADDR_EXP 9
2259: PUSH
2260: LD_STRING Denis
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL 5862 0 2
2270: ST_TO_ADDR
// for i = 1 to xy do
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_VAR 0 2
2285: PUSH
2286: FOR_TO
2287: IFFALSE 2386
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2289: LD_VAR 0 2
2293: PUSH
2294: LD_VAR 0 3
2298: ARRAY
2299: PUSH
2300: LD_INT 1
2302: ARRAY
2303: PPUSH
2304: LD_VAR 0 2
2308: PUSH
2309: LD_VAR 0 3
2313: ARRAY
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 428
2323: PUSH
2324: LD_INT 0
2326: EQUAL
2327: IFFALSE 2384
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2329: LD_EXP 9
2333: PPUSH
2334: LD_VAR 0 2
2338: PUSH
2339: LD_VAR 0 3
2343: ARRAY
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PPUSH
2349: LD_VAR 0 2
2353: PUSH
2354: LD_VAR 0 3
2358: ARRAY
2359: PUSH
2360: LD_INT 2
2362: ARRAY
2363: PPUSH
2364: LD_INT 0
2366: PPUSH
2367: CALL_OW 48
// if IsPlaced ( Denis ) then
2371: LD_EXP 9
2375: PPUSH
2376: CALL_OW 305
2380: IFFALSE 2384
// break ;
2382: GO 2386
// end ;
2384: GO 2286
2386: POP
2387: POP
// SetClass ( Denis , 4 ) ;
2388: LD_EXP 9
2392: PPUSH
2393: LD_INT 4
2395: PPUSH
2396: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2400: LD_EXP 9
2404: PPUSH
2405: LD_INT 750
2407: PPUSH
2408: CALL_OW 234
// end ;
2412: LD_VAR 0 1
2416: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2417: LD_INT 0
2419: PPUSH
2420: PPUSH
2421: PPUSH
2422: PPUSH
2423: PPUSH
// area := HarrisonSupportArea ;
2424: LD_ADDR_VAR 0 4
2428: PUSH
2429: LD_INT 3
2431: ST_TO_ADDR
// dir := 2 ;
2432: LD_ADDR_VAR 0 5
2436: PUSH
2437: LD_INT 2
2439: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2440: LD_VAR 0 4
2444: PPUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 70
2459: IFFALSE 2477
// begin area := HarrisonSupportArea2 ;
2461: LD_ADDR_VAR 0 4
2465: PUSH
2466: LD_INT 31
2468: ST_TO_ADDR
// dir := 1 ;
2469: LD_ADDR_VAR 0 5
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// end ; uc_side = 1 ;
2477: LD_ADDR_OWVAR 20
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// uc_nation = 1 ;
2485: LD_ADDR_OWVAR 21
2489: PUSH
2490: LD_INT 1
2492: ST_TO_ADDR
// vc_engine = 1 ;
2493: LD_ADDR_OWVAR 39
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// vc_control = 1 ;
2501: LD_ADDR_OWVAR 38
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2509: LD_ADDR_OWVAR 40
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: LD_INT 4
2519: PUSH
2520: LD_INT 2
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_OWVAR 67
2532: ARRAY
2533: ST_TO_ADDR
// vc_chassis = 2 ;
2534: LD_ADDR_OWVAR 37
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// veh = CreateVehicle ;
2542: LD_ADDR_VAR 0 3
2546: PUSH
2547: CALL_OW 45
2551: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_VAR 0 5
2561: PPUSH
2562: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2566: LD_VAR 0 3
2570: PPUSH
2571: LD_VAR 0 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2583: LD_VAR 0 3
2587: PPUSH
2588: LD_INT 50
2590: PPUSH
2591: CALL_OW 240
// hc_class := 2 ;
2595: LD_ADDR_OWVAR 28
2599: PUSH
2600: LD_INT 2
2602: ST_TO_ADDR
// hc_sex := sex_male ;
2603: LD_ADDR_OWVAR 27
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2611: LD_ADDR_OWVAR 33
2615: PUSH
2616: LD_STRING SecondCharsGal
2618: ST_TO_ADDR
// hc_face_number := 52 ;
2619: LD_ADDR_OWVAR 34
2623: PUSH
2624: LD_INT 52
2626: ST_TO_ADDR
// hc_name := Craig Brown ;
2627: LD_ADDR_OWVAR 26
2631: PUSH
2632: LD_STRING Craig Brown
2634: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2635: LD_ADDR_OWVAR 29
2639: PUSH
2640: LD_INT 10
2642: PUSH
2643: LD_INT 10
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2650: LD_ADDR_OWVAR 30
2654: PUSH
2655: LD_INT 0
2657: PUSH
2658: LD_INT 2
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2673: LD_ADDR_OWVAR 31
2677: PUSH
2678: LD_INT 2
2680: PUSH
2681: LD_INT 3
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2696: LD_ADDR_EXP 17
2700: PUSH
2701: CALL_OW 44
2705: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2706: LD_EXP 17
2710: PPUSH
2711: LD_VAR 0 3
2715: PPUSH
2716: CALL_OW 52
// vc_engine = 1 ;
2720: LD_ADDR_OWVAR 39
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// vc_control = 1 ;
2728: LD_ADDR_OWVAR 38
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2736: LD_ADDR_OWVAR 40
2740: PUSH
2741: LD_INT 3
2743: ST_TO_ADDR
// vc_chassis = 2 ;
2744: LD_ADDR_OWVAR 37
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// veh = CreateVehicle ;
2752: LD_ADDR_VAR 0 3
2756: PUSH
2757: CALL_OW 45
2761: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_VAR 0 5
2771: PPUSH
2772: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2776: LD_VAR 0 3
2780: PPUSH
2781: LD_VAR 0 4
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2793: LD_VAR 0 3
2797: PPUSH
2798: LD_INT 50
2800: PPUSH
2801: CALL_OW 240
// hc_class := 1 ;
2805: LD_ADDR_OWVAR 28
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// hc_sex := sex_female ;
2813: LD_ADDR_OWVAR 27
2817: PUSH
2818: LD_INT 2
2820: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2821: LD_ADDR_OWVAR 33
2825: PUSH
2826: LD_STRING SecondCharsGal
2828: ST_TO_ADDR
// hc_face_number := 45 ;
2829: LD_ADDR_OWVAR 34
2833: PUSH
2834: LD_INT 45
2836: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2837: LD_ADDR_OWVAR 29
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 10
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2852: LD_ADDR_OWVAR 26
2856: PUSH
2857: LD_STRING Ingrid Jonsson
2859: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2860: LD_ADDR_OWVAR 30
2864: PUSH
2865: LD_INT 1
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: LD_INT 0
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2883: LD_ADDR_OWVAR 31
2887: PUSH
2888: LD_INT 3
2890: PUSH
2891: LD_INT 1
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2906: LD_ADDR_EXP 18
2910: PUSH
2911: CALL_OW 44
2915: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2916: LD_EXP 18
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 52
// end ;
2930: LD_VAR 0 1
2934: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2935: LD_INT 0
2937: PPUSH
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
// j = 0 ;
2942: LD_ADDR_VAR 0 3
2946: PUSH
2947: LD_INT 0
2949: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2950: LD_INT 35
2952: PPUSH
2953: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 22
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 26
2984: PUSH
2985: LD_INT 1
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 2
2994: PUSH
2995: LD_INT 25
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 25
3007: PUSH
3008: LD_INT 2
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 25
3017: PUSH
3018: LD_INT 3
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 4
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PUSH
3053: FOR_IN
3054: IFFALSE 3180
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 2
3068: PUSH
3069: LD_INT 21
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 2
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 21
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 59
3101: PUSH
3102: EMPTY
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 91
3114: PUSH
3115: LD_VAR 0 2
3119: PUSH
3120: LD_INT 25
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: NOT
3138: PUSH
3139: LD_VAR 0 2
3143: PPUSH
3144: LD_EXP 1
3148: PPUSH
3149: CALL_OW 296
3153: PUSH
3154: LD_INT 15
3156: LESS
3157: AND
3158: IFFALSE 3178
// begin tmp = i ;
3160: LD_ADDR_VAR 0 4
3164: PUSH
3165: LD_VAR 0 2
3169: ST_TO_ADDR
// j = 1 ;
3170: LD_ADDR_VAR 0 3
3174: PUSH
3175: LD_INT 1
3177: ST_TO_ADDR
// end ; end ;
3178: GO 3053
3180: POP
3181: POP
// until j = 1 ;
3182: LD_VAR 0 3
3186: PUSH
3187: LD_INT 1
3189: EQUAL
3190: IFFALSE 2950
// blockSpawn = 1 ;
3192: LD_ADDR_EXP 29
3196: PUSH
3197: LD_INT 1
3199: ST_TO_ADDR
// uc_side = 4 ;
3200: LD_ADDR_OWVAR 20
3204: PUSH
3205: LD_INT 4
3207: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3208: LD_ADDR_EXP 15
3212: PUSH
3213: LD_STRING Joan
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL 5862 0 2
3223: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3224: LD_EXP 15
3228: PPUSH
3229: LD_VAR 0 4
3233: PPUSH
3234: CALL_OW 250
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: CALL_OW 251
3248: PPUSH
3249: LD_INT 5
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3259: LD_EXP 15
3263: PPUSH
3264: LD_INT 250
3266: PPUSH
3267: CALL_OW 234
// InGameOn ;
3271: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3275: LD_EXP 15
3279: PPUSH
3280: CALL_OW 87
// wait ( 0 0$2 ) ;
3284: LD_INT 70
3286: PPUSH
3287: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3291: LD_VAR 0 4
3295: PPUSH
3296: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3300: LD_VAR 0 4
3304: PPUSH
3305: CALL_OW 122
// wait ( 0 0$1 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_EXP 15
3325: PPUSH
3326: CALL_OW 112
// wait ( 0 0$2 ) ;
3330: LD_INT 70
3332: PPUSH
3333: CALL_OW 67
// DialogueOn ;
3337: CALL_OW 6
// if tmp = JMM then
3341: LD_VAR 0 4
3345: PUSH
3346: LD_EXP 1
3350: EQUAL
3351: IFFALSE 3500
// begin ComTurnUnit ( JMM , Joan ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_EXP 15
3362: PPUSH
3363: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3367: LD_EXP 1
3371: PPUSH
3372: LD_STRING D5b-JMM-1
3374: PPUSH
3375: CALL_OW 88
// DialogueOff ;
3379: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3383: LD_EXP 15
3387: PPUSH
3388: LD_INT 500
3390: PPUSH
3391: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3395: LD_EXP 15
3399: PPUSH
3400: LD_EXP 1
3404: PPUSH
3405: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3409: LD_EXP 1
3413: PPUSH
3414: LD_EXP 15
3418: PPUSH
3419: CALL_OW 119
// wait ( 0 0$1 ) ;
3423: LD_INT 35
3425: PPUSH
3426: CALL_OW 67
// DialogueOn ;
3430: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3434: LD_EXP 15
3438: PPUSH
3439: LD_STRING D5b-Joan-1
3441: PPUSH
3442: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_STRING D5b-JMM-2
3453: PPUSH
3454: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3458: LD_EXP 15
3462: PPUSH
3463: LD_STRING D5b-Joan-2
3465: PPUSH
3466: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3470: LD_EXP 1
3474: PPUSH
3475: LD_STRING D5b-JMM-3
3477: PPUSH
3478: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3482: LD_EXP 15
3486: PPUSH
3487: LD_STRING D5b-Joan-3
3489: PPUSH
3490: CALL_OW 88
// DialogueOff ;
3494: CALL_OW 7
// end else
3498: GO 3835
// begin ComTurnUnit ( tmp , Joan ) ;
3500: LD_VAR 0 4
3504: PPUSH
3505: LD_EXP 15
3509: PPUSH
3510: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_STRING D5a-Sol1-1
3521: PPUSH
3522: CALL_OW 88
// DialogueOff ;
3526: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3530: LD_EXP 15
3534: PPUSH
3535: LD_INT 500
3537: PPUSH
3538: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3542: LD_EXP 15
3546: PPUSH
3547: LD_VAR 0 4
3551: PPUSH
3552: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3556: LD_VAR 0 4
3560: PPUSH
3561: LD_EXP 15
3565: PPUSH
3566: CALL_OW 119
// wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// DialogueOn ;
3577: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3581: LD_EXP 15
3585: PPUSH
3586: LD_STRING D5a-Joan-1
3588: PPUSH
3589: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_STRING D5a-Sol1-2
3600: PPUSH
3601: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3605: LD_EXP 15
3609: PPUSH
3610: LD_STRING D5a-Joan-2
3612: PPUSH
3613: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_STRING D5a-Sol1-3
3624: PPUSH
3625: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3629: LD_EXP 15
3633: PPUSH
3634: LD_STRING D5a-Joan-3
3636: PPUSH
3637: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3641: LD_VAR 0 4
3645: PPUSH
3646: LD_STRING D5a-Sol1-4
3648: PPUSH
3649: CALL_OW 88
// DialogueOff ;
3653: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3657: LD_EXP 1
3661: PPUSH
3662: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3666: LD_EXP 1
3670: PPUSH
3671: CALL_OW 122
// wait ( 0 0$1 ) ;
3675: LD_INT 35
3677: PPUSH
3678: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3682: LD_INT 35
3684: PPUSH
3685: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3689: LD_EXP 15
3693: PUSH
3694: LD_VAR 0 4
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PPUSH
3703: LD_EXP 1
3707: PPUSH
3708: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3712: LD_EXP 15
3716: PPUSH
3717: LD_EXP 1
3721: PPUSH
3722: CALL_OW 296
3726: PUSH
3727: LD_INT 5
3729: LESS
3730: IFFALSE 3682
// ComTurnUnit ( Joan , JMM ) ;
3732: LD_EXP 15
3736: PPUSH
3737: LD_EXP 1
3741: PPUSH
3742: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3746: LD_EXP 1
3750: PPUSH
3751: LD_EXP 15
3755: PPUSH
3756: CALL_OW 119
// wait ( 0 0$1 ) ;
3760: LD_INT 35
3762: PPUSH
3763: CALL_OW 67
// DialogueOn ;
3767: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3771: LD_EXP 15
3775: PPUSH
3776: LD_STRING D5a-Joan-4
3778: PPUSH
3779: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3783: LD_EXP 1
3787: PPUSH
3788: LD_STRING D5a-JMM-4
3790: PPUSH
3791: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3795: LD_EXP 15
3799: PPUSH
3800: LD_STRING D5a-Joan-5
3802: PPUSH
3803: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3807: LD_EXP 1
3811: PPUSH
3812: LD_STRING D5a-JMM-5
3814: PPUSH
3815: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_STRING D5a-Joan-6
3826: PPUSH
3827: CALL_OW 88
// DialogueOff ;
3831: CALL_OW 7
// end ; DialogueOn ;
3835: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3839: LD_EXP 1
3843: PPUSH
3844: LD_STRING D6-JMM-1
3846: PPUSH
3847: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3851: LD_EXP 15
3855: PPUSH
3856: LD_STRING D6-Joan-1
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING D6-JMM-2
3870: PPUSH
3871: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3875: LD_EXP 15
3879: PPUSH
3880: LD_STRING D6-Joan-2
3882: PPUSH
3883: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3887: LD_EXP 1
3891: PPUSH
3892: LD_STRING D6-JMM-3
3894: PPUSH
3895: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3899: LD_EXP 15
3903: PPUSH
3904: LD_STRING D6-Joan-3
3906: PPUSH
3907: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3911: LD_EXP 1
3915: PPUSH
3916: LD_STRING D6-JMM-4
3918: PPUSH
3919: CALL_OW 88
// DialogueOff ;
3923: CALL_OW 7
// InGameOff ;
3927: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3931: LD_EXP 15
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3943: LD_STRING MJ
3945: PPUSH
3946: CALL_OW 337
// JoanStatus = 1 ;
3950: LD_ADDR_EXP 16
3954: PUSH
3955: LD_INT 1
3957: ST_TO_ADDR
// blockSpawn = 0 ;
3958: LD_ADDR_EXP 29
3962: PUSH
3963: LD_INT 0
3965: ST_TO_ADDR
// end ;
3966: LD_VAR 0 1
3970: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3971: LD_INT 0
3973: PPUSH
3974: PPUSH
// repeat wait ( 0 0$7 ) ;
3975: LD_INT 245
3977: PPUSH
3978: CALL_OW 67
// until blockSpawn = 0 ;
3982: LD_EXP 29
3986: PUSH
3987: LD_INT 0
3989: EQUAL
3990: IFFALSE 3975
// uc_side = 1 ;
3992: LD_ADDR_OWVAR 20
3996: PUSH
3997: LD_INT 1
3999: ST_TO_ADDR
// uc_nation = 1 ;
4000: LD_ADDR_OWVAR 21
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// InitHc ;
4008: CALL_OW 19
// if number = 1 then
4012: LD_VAR 0 1
4016: PUSH
4017: LD_INT 1
4019: EQUAL
4020: IFFALSE 4196
// begin hc_class := 3 ;
4022: LD_ADDR_OWVAR 28
4026: PUSH
4027: LD_INT 3
4029: ST_TO_ADDR
// hc_sex := sex_male ;
4030: LD_ADDR_OWVAR 27
4034: PUSH
4035: LD_INT 1
4037: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4038: LD_ADDR_OWVAR 33
4042: PUSH
4043: LD_STRING SecondCharsGal
4045: ST_TO_ADDR
// hc_face_number := 55 ;
4046: LD_ADDR_OWVAR 34
4050: PUSH
4051: LD_INT 55
4053: ST_TO_ADDR
// hc_name := George McCarthy ;
4054: LD_ADDR_OWVAR 26
4058: PUSH
4059: LD_STRING George McCarthy
4061: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4062: LD_ADDR_OWVAR 29
4066: PUSH
4067: LD_INT 11
4069: PUSH
4070: LD_INT 10
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4077: LD_ADDR_OWVAR 30
4081: PUSH
4082: LD_INT 0
4084: PUSH
4085: LD_INT 0
4087: PUSH
4088: LD_INT 2
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4100: LD_ADDR_OWVAR 31
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: LD_INT 2
4110: PUSH
4111: LD_INT 3
4113: PUSH
4114: LD_INT 1
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: ST_TO_ADDR
// un = CreateHuman ;
4123: LD_ADDR_VAR 0 3
4127: PUSH
4128: CALL_OW 44
4132: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4133: LD_VAR 0 3
4137: PPUSH
4138: LD_INT 23
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 87
// wait ( 0 0$1 ) ;
4157: LD_INT 35
4159: PPUSH
4160: CALL_OW 67
// DialogueOn ;
4164: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4168: LD_VAR 0 3
4172: PPUSH
4173: LD_STRING D11d-Sol4-1
4175: PPUSH
4176: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING D11d-JMM-1
4187: PPUSH
4188: CALL_OW 88
// DialogueOff ;
4192: CALL_OW 7
// end ; if number = 2 then
4196: LD_VAR 0 1
4200: PUSH
4201: LD_INT 2
4203: EQUAL
4204: IFFALSE 4380
// begin hc_class := 1 ;
4206: LD_ADDR_OWVAR 28
4210: PUSH
4211: LD_INT 1
4213: ST_TO_ADDR
// hc_sex := sex_male ;
4214: LD_ADDR_OWVAR 27
4218: PUSH
4219: LD_INT 1
4221: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4222: LD_ADDR_OWVAR 33
4226: PUSH
4227: LD_STRING AmGalRemake
4229: ST_TO_ADDR
// hc_face_number := 7 ;
4230: LD_ADDR_OWVAR 34
4234: PUSH
4235: LD_INT 7
4237: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4238: LD_ADDR_OWVAR 26
4242: PUSH
4243: LD_STRING Bobby Jordan
4245: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4246: LD_ADDR_OWVAR 29
4250: PUSH
4251: LD_INT 9
4253: PUSH
4254: LD_INT 11
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4261: LD_ADDR_OWVAR 30
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 0
4271: PUSH
4272: LD_INT 0
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4284: LD_ADDR_OWVAR 31
4288: PUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 1
4294: PUSH
4295: LD_INT 1
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: ST_TO_ADDR
// un = CreateHuman ;
4307: LD_ADDR_VAR 0 3
4311: PUSH
4312: CALL_OW 44
4316: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4317: LD_VAR 0 3
4321: PPUSH
4322: LD_INT 24
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 49
// wait ( 0 0$1 ) ;
4332: LD_INT 35
4334: PPUSH
4335: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4339: LD_VAR 0 3
4343: PPUSH
4344: CALL_OW 87
// DialogueOn ;
4348: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4352: LD_VAR 0 3
4356: PPUSH
4357: LD_STRING D11b-Sol3-1
4359: PPUSH
4360: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING D11b-JMM-1
4371: PPUSH
4372: CALL_OW 88
// DialogueOff ;
4376: CALL_OW 7
// end ; if number = 3 then
4380: LD_VAR 0 1
4384: PUSH
4385: LD_INT 3
4387: EQUAL
4388: IFFALSE 4552
// begin hc_class := 1 ;
4390: LD_ADDR_OWVAR 28
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// hc_sex := sex_male ;
4398: LD_ADDR_OWVAR 27
4402: PUSH
4403: LD_INT 1
4405: ST_TO_ADDR
// hc_gallery := DJ ;
4406: LD_ADDR_OWVAR 33
4410: PUSH
4411: LD_STRING DJ
4413: ST_TO_ADDR
// hc_face_number := 1 ;
4414: LD_ADDR_OWVAR 34
4418: PUSH
4419: LD_INT 1
4421: ST_TO_ADDR
// hc_name := Darius Dajay ;
4422: LD_ADDR_OWVAR 26
4426: PUSH
4427: LD_STRING Darius Dajay
4429: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4430: LD_ADDR_OWVAR 29
4434: PUSH
4435: LD_INT 11
4437: PUSH
4438: LD_INT 11
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4445: LD_ADDR_OWVAR 30
4449: PUSH
4450: LD_INT 2
4452: PUSH
4453: LD_INT 0
4455: PUSH
4456: LD_INT 0
4458: PUSH
4459: LD_INT 0
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4468: LD_ADDR_OWVAR 31
4472: PUSH
4473: LD_INT 4
4475: PUSH
4476: LD_INT 0
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: LD_INT 0
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: ST_TO_ADDR
// un = CreateHuman ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: CALL_OW 44
4500: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_INT 25
4508: PPUSH
4509: LD_INT 1
4511: PPUSH
4512: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// wait ( 0 0$1 ) ;
4525: LD_INT 35
4527: PPUSH
4528: CALL_OW 67
// DialogueOn ;
4532: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4536: LD_VAR 0 3
4540: PPUSH
4541: LD_STRING D11f-Sol5-1
4543: PPUSH
4544: CALL_OW 88
// DialogueOff ;
4548: CALL_OW 7
// end ; if number = 4 then
4552: LD_VAR 0 1
4556: PUSH
4557: LD_INT 4
4559: EQUAL
4560: IFFALSE 4724
// begin hc_class := 3 ;
4562: LD_ADDR_OWVAR 28
4566: PUSH
4567: LD_INT 3
4569: ST_TO_ADDR
// hc_sex := sex_female ;
4570: LD_ADDR_OWVAR 27
4574: PUSH
4575: LD_INT 2
4577: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4578: LD_ADDR_OWVAR 33
4582: PUSH
4583: LD_STRING SecondCharsGal
4585: ST_TO_ADDR
// hc_face_number := 46 ;
4586: LD_ADDR_OWVAR 34
4590: PUSH
4591: LD_INT 46
4593: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4594: LD_ADDR_OWVAR 26
4598: PUSH
4599: LD_STRING Sylvia Creak
4601: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4602: LD_ADDR_OWVAR 29
4606: PUSH
4607: LD_INT 10
4609: PUSH
4610: LD_INT 9
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4617: LD_ADDR_OWVAR 30
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: LD_INT 1
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4640: LD_ADDR_OWVAR 31
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: LD_INT 1
4653: PUSH
4654: LD_INT 1
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: ST_TO_ADDR
// un = CreateHuman ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: CALL_OW 44
4672: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4673: LD_VAR 0 3
4677: PPUSH
4678: LD_INT 26
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4688: LD_VAR 0 3
4692: PPUSH
4693: CALL_OW 87
// wait ( 0 0$1 ) ;
4697: LD_INT 35
4699: PPUSH
4700: CALL_OW 67
// DialogueOn ;
4704: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4708: LD_VAR 0 3
4712: PPUSH
4713: LD_STRING D11e-FSol4-1
4715: PPUSH
4716: CALL_OW 88
// DialogueOff ;
4720: CALL_OW 7
// end ; if number = 5 then
4724: LD_VAR 0 1
4728: PUSH
4729: LD_INT 5
4731: EQUAL
4732: IFFALSE 4908
// begin hc_class := 1 ;
4734: LD_ADDR_OWVAR 28
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// hc_sex := sex_female ;
4742: LD_ADDR_OWVAR 27
4746: PUSH
4747: LD_INT 2
4749: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4750: LD_ADDR_OWVAR 33
4754: PUSH
4755: LD_STRING SecondCharsGal
4757: ST_TO_ADDR
// hc_face_number := 37 ;
4758: LD_ADDR_OWVAR 34
4762: PUSH
4763: LD_INT 37
4765: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4766: LD_ADDR_OWVAR 26
4770: PUSH
4771: LD_STRING Margherite Simpson
4773: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4774: LD_ADDR_OWVAR 29
4778: PUSH
4779: LD_INT 11
4781: PUSH
4782: LD_INT 10
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4789: LD_ADDR_OWVAR 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: LD_INT 1
4799: PUSH
4800: LD_INT 0
4802: PUSH
4803: LD_INT 0
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4812: LD_ADDR_OWVAR 31
4816: PUSH
4817: LD_INT 1
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: LD_INT 1
4825: PUSH
4826: LD_INT 1
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: ST_TO_ADDR
// un = CreateHuman ;
4835: LD_ADDR_VAR 0 3
4839: PUSH
4840: CALL_OW 44
4844: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4845: LD_VAR 0 3
4849: PPUSH
4850: LD_INT 27
4852: PPUSH
4853: LD_INT 1
4855: PPUSH
4856: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4860: LD_VAR 0 3
4864: PPUSH
4865: CALL_OW 87
// wait ( 0 0$1 ) ;
4869: LD_INT 35
4871: PPUSH
4872: CALL_OW 67
// DialogueOn ;
4876: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4880: LD_VAR 0 3
4884: PPUSH
4885: LD_STRING D11c-FSol3-1
4887: PPUSH
4888: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4892: LD_EXP 1
4896: PPUSH
4897: LD_STRING D11c-JMM-1
4899: PPUSH
4900: CALL_OW 88
// DialogueOff ;
4904: CALL_OW 7
// end ; if number = 6 then
4908: LD_VAR 0 1
4912: PUSH
4913: LD_INT 6
4915: EQUAL
4916: IFFALSE 5090
// begin hc_class := 1 ;
4918: LD_ADDR_OWVAR 28
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// hc_sex := sex_male ;
4926: LD_ADDR_OWVAR 27
4930: PUSH
4931: LD_INT 1
4933: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4934: LD_ADDR_OWVAR 33
4938: PUSH
4939: LD_STRING AmGalRemake
4941: ST_TO_ADDR
// hc_face_number := 1 ;
4942: LD_ADDR_OWVAR 34
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// hc_name := Charles Brown ;
4950: LD_ADDR_OWVAR 26
4954: PUSH
4955: LD_STRING Charles Brown
4957: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4958: LD_ADDR_OWVAR 29
4962: PUSH
4963: LD_INT 12
4965: PUSH
4966: LD_INT 11
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4973: LD_ADDR_OWVAR 30
4977: PUSH
4978: LD_INT 2
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: LD_INT 0
4986: PUSH
4987: LD_INT 0
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4996: LD_ADDR_OWVAR 31
5000: PUSH
5001: LD_INT 3
5003: PUSH
5004: LD_INT 0
5006: PUSH
5007: LD_INT 1
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: ST_TO_ADDR
// un = CreateHuman ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: CALL_OW 44
5028: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_INT 28
5036: PPUSH
5037: LD_INT 1
5039: PPUSH
5040: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5044: LD_VAR 0 3
5048: PPUSH
5049: CALL_OW 87
// wait ( 0 0$1 ) ;
5053: LD_INT 35
5055: PPUSH
5056: CALL_OW 67
// DialogueOn ;
5060: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5064: LD_VAR 0 3
5068: PPUSH
5069: LD_STRING D4-Sol1-5
5071: PPUSH
5072: CALL_OW 88
// DialogueOff ;
5076: CALL_OW 7
// tempCharles = un ;
5080: LD_ADDR_EXP 13
5084: PUSH
5085: LD_VAR 0 3
5089: ST_TO_ADDR
// end ; if number = 7 then
5090: LD_VAR 0 1
5094: PUSH
5095: LD_INT 7
5097: EQUAL
5098: IFFALSE 5348
// begin hc_class := 1 ;
5100: LD_ADDR_OWVAR 28
5104: PUSH
5105: LD_INT 1
5107: ST_TO_ADDR
// hc_sex := sex_female ;
5108: LD_ADDR_OWVAR 27
5112: PUSH
5113: LD_INT 2
5115: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5116: LD_ADDR_OWVAR 33
5120: PUSH
5121: LD_STRING AmGalRemake
5123: ST_TO_ADDR
// hc_face_number := 2 ;
5124: LD_ADDR_OWVAR 34
5128: PUSH
5129: LD_INT 2
5131: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5132: LD_ADDR_OWVAR 26
5136: PUSH
5137: LD_STRING Rebecca Macdonald
5139: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5140: LD_ADDR_OWVAR 29
5144: PUSH
5145: LD_INT 10
5147: PUSH
5148: LD_INT 10
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5155: LD_ADDR_OWVAR 30
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: LD_INT 0
5165: PUSH
5166: LD_INT 0
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5178: LD_ADDR_OWVAR 31
5182: PUSH
5183: LD_INT 1
5185: PUSH
5186: LD_INT 0
5188: PUSH
5189: LD_INT 0
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: ST_TO_ADDR
// un = CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 29
5218: PPUSH
5219: LD_INT 1
5221: PPUSH
5222: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5226: LD_VAR 0 3
5230: PPUSH
5231: CALL_OW 87
// wait ( 0 0$1 ) ;
5235: LD_INT 35
5237: PPUSH
5238: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5242: LD_INT 30
5244: PPUSH
5245: LD_INT 22
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 70
5259: IFFALSE 5348
// begin DialogueOn ;
5261: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: CALL_OW 250
5274: PPUSH
5275: LD_VAR 0 3
5279: PPUSH
5280: CALL_OW 251
5284: PPUSH
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 15
5290: NEG
5291: PPUSH
5292: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5296: LD_VAR 0 3
5300: PPUSH
5301: CALL_OW 250
5305: PPUSH
5306: LD_VAR 0 3
5310: PPUSH
5311: CALL_OW 251
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5323: LD_VAR 0 3
5327: PPUSH
5328: LD_STRING D11a-FSol2-1
5330: PPUSH
5331: CALL_OW 88
// ComCrawl ( un ) ;
5335: LD_VAR 0 3
5339: PPUSH
5340: CALL_OW 137
// DialogueOff ;
5344: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5348: LD_ADDR_EXP 45
5352: PUSH
5353: LD_EXP 45
5357: PUSH
5358: LD_VAR 0 3
5362: UNION
5363: ST_TO_ADDR
// arrivals := arrivals union un ;
5364: LD_ADDR_EXP 46
5368: PUSH
5369: LD_EXP 46
5373: PUSH
5374: LD_VAR 0 3
5378: UNION
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 2
5384: RET
// every 0 0$1 do var i ;
5385: GO 5387
5387: DISABLE
5388: LD_INT 0
5390: PPUSH
// begin enable ;
5391: ENABLE
// if not ignoreTarget then
5392: LD_EXP 45
5396: NOT
5397: IFFALSE 5401
// exit ;
5399: GO 5482
// for i in ignoreTarget do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_EXP 45
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5480
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5414: LD_INT 22
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 91
5426: PUSH
5427: LD_VAR 0 1
5431: PUSH
5432: LD_INT 10
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 69
5448: PUSH
5449: LD_EXP 45
5453: DIFF
5454: PUSH
5455: LD_INT 1
5457: GREATER
5458: IFFALSE 5478
// begin ignoreTarget := ignoreTarget diff i ;
5460: LD_ADDR_EXP 45
5464: PUSH
5465: LD_EXP 45
5469: PUSH
5470: LD_VAR 0 1
5474: DIFF
5475: ST_TO_ADDR
// break ;
5476: GO 5480
// end ;
5478: GO 5411
5480: POP
5481: POP
// end ; end_of_file
5482: PPOPN 1
5484: END
// export function PrepareRussian ; var i ; begin
5485: LD_INT 0
5487: PPUSH
5488: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_INT 3
5494: PPUSH
5495: LD_INT 2
5497: PPUSH
5498: LD_EXP 34
5502: PPUSH
5503: LD_EXP 35
5507: PPUSH
5508: CALL_OW 12
5512: PPUSH
5513: LD_INT 2
5515: PPUSH
5516: LD_INT 4
5518: PPUSH
5519: CALL 6054 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5523: LD_INT 3
5525: PPUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_INT 8
5531: PPUSH
5532: LD_EXP 34
5536: PPUSH
5537: LD_EXP 35
5541: PPUSH
5542: CALL_OW 12
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 4
5552: PPUSH
5553: CALL 6054 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5557: LD_INT 3
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: LD_INT 67
5565: PPUSH
5566: LD_EXP 34
5570: PPUSH
5571: LD_EXP 35
5575: PPUSH
5576: CALL_OW 12
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 2
5586: PPUSH
5587: CALL 6054 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5591: LD_INT 3
5593: PPUSH
5594: LD_INT 3
5596: PPUSH
5597: LD_INT 21
5599: PPUSH
5600: LD_EXP 34
5604: PPUSH
5605: LD_EXP 35
5609: PPUSH
5610: CALL_OW 12
5614: PPUSH
5615: LD_INT 3
5617: PPUSH
5618: LD_INT 6
5620: PPUSH
5621: CALL 6054 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5625: LD_INT 3
5627: PPUSH
5628: LD_INT 3
5630: PPUSH
5631: LD_INT 17
5633: PPUSH
5634: LD_EXP 34
5638: PPUSH
5639: LD_EXP 35
5643: PPUSH
5644: CALL_OW 12
5648: PPUSH
5649: LD_INT 3
5651: PPUSH
5652: LD_INT 6
5654: PPUSH
5655: CALL 6054 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5659: LD_INT 3
5661: PPUSH
5662: LD_INT 3
5664: PPUSH
5665: LD_INT 32
5667: PPUSH
5668: LD_EXP 34
5672: PPUSH
5673: LD_EXP 35
5677: PPUSH
5678: CALL_OW 12
5682: PPUSH
5683: LD_INT 4
5685: PPUSH
5686: LD_INT 2
5688: PPUSH
5689: CALL 6054 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5693: LD_ADDR_VAR 0 2
5697: PUSH
5698: LD_INT 22
5700: PUSH
5701: LD_INT 3
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 21
5710: PUSH
5711: LD_INT 3
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 30
5720: PUSH
5721: LD_INT 32
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: PPUSH
5733: CALL_OW 69
5737: PUSH
5738: FOR_IN
5739: IFFALSE 5779
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5741: LD_INT 3
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_VAR 0 2
5751: PPUSH
5752: LD_EXP 34
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: CALL_OW 12
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL 6054 0 6
5777: GO 5738
5779: POP
5780: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5781: LD_ADDR_VAR 0 2
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_INT 3
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 21
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 30
5808: PUSH
5809: LD_INT 31
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 69
5825: PUSH
5826: FOR_IN
5827: IFFALSE 5855
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5829: LD_EXP 34
5833: PPUSH
5834: LD_EXP 35
5838: PPUSH
5839: CALL_OW 12
5843: PPUSH
5844: LD_VAR 0 2
5848: PPUSH
5849: CALL 6164 0 2
5853: GO 5826
5855: POP
5856: POP
// end ; end_of_file
5857: LD_VAR 0 1
5861: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5862: LD_INT 0
5864: PPUSH
5865: PPUSH
// if exist_mode then
5866: LD_VAR 0 2
5870: IFFALSE 5895
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: LD_EXP 44
5881: PUSH
5882: LD_VAR 0 1
5886: STR
5887: PPUSH
5888: CALL_OW 34
5892: ST_TO_ADDR
// end else
5893: GO 5910
// begin unit := NewCharacter ( ident ) ;
5895: LD_ADDR_VAR 0 4
5899: PUSH
5900: LD_VAR 0 1
5904: PPUSH
5905: CALL_OW 25
5909: ST_TO_ADDR
// end ; result := unit ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_VAR 0 4
5919: ST_TO_ADDR
// end ;
5920: LD_VAR 0 3
5924: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5925: LD_INT 0
5927: PPUSH
5928: PPUSH
5929: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
5930: LD_ADDR_VAR 0 6
5934: PUSH
5935: LD_VAR 0 1
5939: PUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 12
5952: ARRAY
5953: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5954: LD_VAR 0 6
5958: PPUSH
5959: CALL_OW 258
5963: PUSH
5964: LD_INT 1
5966: EQUAL
5967: IFFALSE 5985
// Say ( speaker , dialogMID ) else
5969: LD_VAR 0 6
5973: PPUSH
5974: LD_VAR 0 2
5978: PPUSH
5979: CALL_OW 88
5983: GO 5999
// Say ( speaker , dialogFID ) ;
5985: LD_VAR 0 6
5989: PPUSH
5990: LD_VAR 0 3
5994: PPUSH
5995: CALL_OW 88
// result := speaker ;
5999: LD_ADDR_VAR 0 4
6003: PUSH
6004: LD_VAR 0 6
6008: ST_TO_ADDR
// end ;
6009: LD_VAR 0 4
6013: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6014: LD_INT 0
6016: PPUSH
6017: PPUSH
// for i in charactersList do
6018: LD_ADDR_VAR 0 4
6022: PUSH
6023: LD_VAR 0 1
6027: PUSH
6028: FOR_IN
6029: IFFALSE 6047
// SaveCharacters ( i , ident ) ;
6031: LD_VAR 0 4
6035: PPUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: CALL_OW 38
6045: GO 6028
6047: POP
6048: POP
// end ;
6049: LD_VAR 0 3
6053: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6054: LD_INT 0
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
// for i = 1 to count do
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: DOUBLE
6066: LD_INT 1
6068: DEC
6069: ST_TO_ADDR
6070: LD_VAR 0 6
6074: PUSH
6075: FOR_TO
6076: IFFALSE 6157
// begin uc_side = side ;
6078: LD_ADDR_OWVAR 20
6082: PUSH
6083: LD_VAR 0 1
6087: ST_TO_ADDR
// uc_nation = nation ;
6088: LD_ADDR_OWVAR 21
6092: PUSH
6093: LD_VAR 0 2
6097: ST_TO_ADDR
// hc_gallery =  ;
6098: LD_ADDR_OWVAR 33
6102: PUSH
6103: LD_STRING 
6105: ST_TO_ADDR
// hc_name =  ;
6106: LD_ADDR_OWVAR 26
6110: PUSH
6111: LD_STRING 
6113: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6114: LD_INT 0
6116: PPUSH
6117: LD_VAR 0 5
6121: PPUSH
6122: LD_VAR 0 4
6126: PPUSH
6127: CALL_OW 380
// un = CreateHuman ;
6131: LD_ADDR_VAR 0 10
6135: PUSH
6136: CALL_OW 44
6140: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6141: LD_VAR 0 10
6145: PPUSH
6146: LD_VAR 0 3
6150: PPUSH
6151: CALL_OW 52
// end ;
6155: GO 6075
6157: POP
6158: POP
// end ;
6159: LD_VAR 0 7
6163: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6164: LD_INT 0
6166: PPUSH
6167: PPUSH
6168: PPUSH
// uc_side := GetSide ( b ) ;
6169: LD_ADDR_OWVAR 20
6173: PUSH
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 255
6183: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6184: LD_ADDR_OWVAR 21
6188: PUSH
6189: LD_VAR 0 2
6193: PPUSH
6194: CALL_OW 248
6198: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6199: LD_INT 0
6201: PPUSH
6202: LD_INT 1
6204: PPUSH
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6214: LD_ADDR_VAR 0 5
6218: PUSH
6219: LD_VAR 0 2
6223: PPUSH
6224: CALL_OW 254
6228: PUSH
6229: LD_INT 3
6231: MINUS
6232: ST_TO_ADDR
// if dir < 0 then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_INT 0
6240: LESS
6241: IFFALSE 6257
// dir := 6 + dir ;
6243: LD_ADDR_VAR 0 5
6247: PUSH
6248: LD_INT 6
6250: PUSH
6251: LD_VAR 0 5
6255: PLUS
6256: ST_TO_ADDR
// un := CreateHuman ;
6257: LD_ADDR_VAR 0 4
6261: PUSH
6262: CALL_OW 44
6266: ST_TO_ADDR
// SetDir ( un , dir ) ;
6267: LD_VAR 0 4
6271: PPUSH
6272: LD_VAR 0 5
6276: PPUSH
6277: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6281: LD_VAR 0 4
6285: PPUSH
6286: LD_VAR 0 2
6290: PPUSH
6291: CALL_OW 52
// end ;
6295: LD_VAR 0 3
6299: RET
// export function PrepareDifficulty ; begin
6300: LD_INT 0
6302: PPUSH
// if Difficulty = 1 then
6303: LD_OWVAR 67
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: IFFALSE 6329
// begin RuSolMinLevel = 2 ;
6313: LD_ADDR_EXP 34
6317: PUSH
6318: LD_INT 2
6320: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6321: LD_ADDR_EXP 35
6325: PUSH
6326: LD_INT 4
6328: ST_TO_ADDR
// end ; if Difficulty = 2 then
6329: LD_OWVAR 67
6333: PUSH
6334: LD_INT 2
6336: EQUAL
6337: IFFALSE 6355
// begin RuSolMinLevel = 3 ;
6339: LD_ADDR_EXP 34
6343: PUSH
6344: LD_INT 3
6346: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6347: LD_ADDR_EXP 35
6351: PUSH
6352: LD_INT 5
6354: ST_TO_ADDR
// end ; if Difficulty = 3 then
6355: LD_OWVAR 67
6359: PUSH
6360: LD_INT 3
6362: EQUAL
6363: IFFALSE 6381
// begin RuSolMinLevel = 3 ;
6365: LD_ADDR_EXP 34
6369: PUSH
6370: LD_INT 3
6372: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6373: LD_ADDR_EXP 35
6377: PUSH
6378: LD_INT 6
6380: ST_TO_ADDR
// end ; end ;
6381: LD_VAR 0 1
6385: RET
// export function ShowQuery1 ; begin
6386: LD_INT 0
6388: PPUSH
// case query ( QKill ) of 1 :
6389: LD_STRING QKill
6391: PPUSH
6392: CALL_OW 97
6396: PUSH
6397: LD_INT 1
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6416
6405: POP
// begin result = 1 ;
6406: LD_ADDR_VAR 0 1
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// end ; 2 :
6414: GO 6455
6416: LD_INT 2
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6435
6424: POP
// begin result = 2 ;
6425: LD_ADDR_VAR 0 1
6429: PUSH
6430: LD_INT 2
6432: ST_TO_ADDR
// end ; 3 :
6433: GO 6455
6435: LD_INT 3
6437: DOUBLE
6438: EQUAL
6439: IFTRUE 6443
6441: GO 6454
6443: POP
// begin result = 3 ;
6444: LD_ADDR_VAR 0 1
6448: PUSH
6449: LD_INT 3
6451: ST_TO_ADDR
// end ; end ;
6452: GO 6455
6454: POP
// end ;
6455: LD_VAR 0 1
6459: RET
// export function ShowQuery2 ; begin
6460: LD_INT 0
6462: PPUSH
// case query ( QKill2 ) of 1 :
6463: LD_STRING QKill2
6465: PPUSH
6466: CALL_OW 97
6470: PUSH
6471: LD_INT 1
6473: DOUBLE
6474: EQUAL
6475: IFTRUE 6479
6477: GO 6490
6479: POP
// begin result = 1 ;
6480: LD_ADDR_VAR 0 1
6484: PUSH
6485: LD_INT 1
6487: ST_TO_ADDR
// end ; 2 :
6488: GO 6510
6490: LD_INT 2
6492: DOUBLE
6493: EQUAL
6494: IFTRUE 6498
6496: GO 6509
6498: POP
// begin result = 2 ;
6499: LD_ADDR_VAR 0 1
6503: PUSH
6504: LD_INT 2
6506: ST_TO_ADDR
// end ; end ;
6507: GO 6510
6509: POP
// end ;
6510: LD_VAR 0 1
6514: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6515: LD_INT 0
6517: PPUSH
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6522: LD_ADDR_VAR 0 8
6526: PUSH
6527: LD_INT 48
6529: PUSH
6530: LD_INT 49
6532: PUSH
6533: LD_INT 50
6535: PUSH
6536: LD_INT 20
6538: PUSH
6539: LD_INT 1
6541: PUSH
6542: LD_INT 51
6544: PUSH
6545: LD_INT 52
6547: PUSH
6548: LD_INT 69
6550: PUSH
6551: LD_INT 39
6553: PUSH
6554: LD_INT 34
6556: PUSH
6557: LD_INT 40
6559: PUSH
6560: LD_INT 53
6562: PUSH
6563: LD_INT 71
6565: PUSH
6566: LD_INT 57
6568: PUSH
6569: LD_INT 58
6571: PUSH
6572: LD_INT 44
6574: PUSH
6575: LD_INT 32
6577: PUSH
6578: LD_INT 27
6580: PUSH
6581: LD_INT 23
6583: PUSH
6584: LD_INT 33
6586: PUSH
6587: LD_INT 59
6589: PUSH
6590: LD_INT 54
6592: PUSH
6593: LD_INT 55
6595: PUSH
6596: LD_INT 56
6598: PUSH
6599: LD_INT 63
6601: PUSH
6602: LD_INT 64
6604: PUSH
6605: LD_INT 65
6607: PUSH
6608: LD_INT 30
6610: PUSH
6611: LD_INT 31
6613: PUSH
6614: LD_INT 21
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_INT 25
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6657: LD_ADDR_VAR 0 5
6661: PUSH
6662: DOUBLE
6663: LD_INT 1
6665: DEC
6666: ST_TO_ADDR
6667: LD_VAR 0 8
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6749
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6675: LD_VAR 0 8
6679: PUSH
6680: LD_VAR 0 5
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PPUSH
6691: CALL_OW 321
6695: PUSH
6696: LD_INT 1
6698: EQUAL
6699: PUSH
6700: LD_VAR 0 8
6704: PUSH
6705: LD_VAR 0 5
6709: ARRAY
6710: PPUSH
6711: LD_VAR 0 3
6715: PPUSH
6716: CALL_OW 482
6720: PUSH
6721: LD_INT 1
6723: EQUAL
6724: AND
6725: IFFALSE 6747
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6727: LD_VAR 0 2
6731: PPUSH
6732: LD_VAR 0 8
6736: PUSH
6737: LD_VAR 0 5
6741: ARRAY
6742: PPUSH
6743: CALL_OW 184
6747: GO 6672
6749: POP
6750: POP
// end ;
6751: LD_VAR 0 4
6755: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6756: LD_INT 0
6758: PPUSH
6759: PPUSH
6760: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6761: LD_INT 22
6763: PUSH
6764: LD_VAR 0 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 21
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: PUSH
6792: LD_VAR 0 3
6796: LESSEQUAL
6797: IFFALSE 6905
// begin for i = 1 to vehCount do
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: DOUBLE
6805: LD_INT 1
6807: DEC
6808: ST_TO_ADDR
6809: LD_VAR 0 3
6813: PUSH
6814: FOR_TO
6815: IFFALSE 6903
// begin weapon = weaponTab [ i ] ;
6817: LD_ADDR_VAR 0 10
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 9
6831: ARRAY
6832: ST_TO_ADDR
// if weapon = 46 then
6833: LD_VAR 0 10
6837: PUSH
6838: LD_INT 46
6840: EQUAL
6841: IFFALSE 6872
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6843: LD_VAR 0 2
6847: PPUSH
6848: LD_INT 24
6850: PPUSH
6851: LD_VAR 0 5
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: LD_VAR 0 10
6865: PPUSH
6866: CALL_OW 185
// end else
6870: GO 6901
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6872: LD_VAR 0 2
6876: PPUSH
6877: LD_VAR 0 7
6881: PPUSH
6882: LD_VAR 0 5
6886: PPUSH
6887: LD_VAR 0 6
6891: PPUSH
6892: LD_VAR 0 10
6896: PPUSH
6897: CALL_OW 185
// end ; end ;
6901: GO 6814
6903: POP
6904: POP
// end ; end ;
6905: LD_VAR 0 8
6909: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6910: LD_INT 0
6912: PPUSH
6913: PPUSH
6914: PPUSH
6915: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6916: LD_ADDR_VAR 0 8
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 21
6935: PUSH
6936: LD_INT 2
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 3
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: LD_INT 650
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// if damageVehicles > 0 then
6970: LD_VAR 0 8
6974: PUSH
6975: LD_INT 0
6977: GREATER
6978: IFFALSE 6999
// ComMoveXY ( damageVehicles , repX , repY ) ;
6980: LD_VAR 0 8
6984: PPUSH
6985: LD_VAR 0 3
6989: PPUSH
6990: LD_VAR 0 4
6994: PPUSH
6995: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6999: LD_VAR 0 8
7003: PPUSH
7004: LD_INT 95
7006: PUSH
7007: LD_VAR 0 2
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 58
7021: PUSH
7022: EMPTY
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 0
7040: GREATER
7041: IFFALSE 7108
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7043: LD_ADDR_VAR 0 6
7047: PUSH
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_INT 95
7055: PUSH
7056: LD_VAR 0 2
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 3
7067: PUSH
7068: LD_INT 58
7070: PUSH
7071: EMPTY
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 72
7086: PUSH
7087: FOR_IN
7088: IFFALSE 7106
// ComExitVehicle ( UnitsInside ( i ) ) ;
7090: LD_VAR 0 6
7094: PPUSH
7095: CALL_OW 313
7099: PPUSH
7100: CALL_OW 121
7104: GO 7087
7106: POP
7107: POP
// end ;
7108: LD_VAR 0 5
7112: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
7121: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7122: LD_ADDR_VAR 0 8
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 21
7141: PUSH
7142: LD_INT 2
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 24
7151: PUSH
7152: LD_INT 660
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 3
7161: PUSH
7162: LD_INT 58
7164: PUSH
7165: EMPTY
7166: LIST
7167: PUSH
7168: LD_INT 2
7170: PUSH
7171: LD_INT 34
7173: PUSH
7174: LD_INT 43
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 34
7183: PUSH
7184: LD_INT 44
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 46
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PPUSH
7218: CALL_OW 69
7222: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7223: LD_INT 22
7225: PUSH
7226: LD_VAR 0 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: LD_INT 1000
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 58
7260: PUSH
7261: EMPTY
7262: LIST
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: LD_INT 34
7269: PUSH
7270: LD_INT 43
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 44
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 46
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: PUSH
7319: LD_INT 5
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: LD_INT 6
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_OWVAR 67
7337: ARRAY
7338: EQUAL
7339: IFFALSE 7595
// if seeEnemy = 0 then
7341: LD_VAR 0 11
7345: PUSH
7346: LD_INT 0
7348: EQUAL
7349: IFFALSE 7595
// repeat wait ( 0 0$1 ) ;
7351: LD_INT 35
7353: PPUSH
7354: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7358: LD_ADDR_VAR 0 8
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 660
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: LD_INT 58
7400: PUSH
7401: EMPTY
7402: LIST
7403: PUSH
7404: LD_INT 2
7406: PUSH
7407: LD_INT 34
7409: PUSH
7410: LD_INT 43
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 34
7419: PUSH
7420: LD_INT 44
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 34
7429: PUSH
7430: LD_INT 46
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 69
7458: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7459: LD_INT 22
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 95
7473: PUSH
7474: LD_VAR 0 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PPUSH
7487: CALL_OW 69
7491: NOT
7492: PUSH
7493: LD_VAR 0 11
7497: PUSH
7498: LD_INT 0
7500: EQUAL
7501: AND
7502: IFFALSE 7557
// for i := 1 to wayX do
7504: LD_ADDR_VAR 0 6
7508: PUSH
7509: DOUBLE
7510: LD_INT 1
7512: DEC
7513: ST_TO_ADDR
7514: LD_VAR 0 3
7518: PUSH
7519: FOR_TO
7520: IFFALSE 7555
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7522: LD_VAR 0 8
7526: PPUSH
7527: LD_VAR 0 3
7531: PUSH
7532: LD_VAR 0 6
7536: ARRAY
7537: PPUSH
7538: LD_VAR 0 4
7542: PUSH
7543: LD_VAR 0 6
7547: ARRAY
7548: PPUSH
7549: CALL_OW 114
7553: GO 7519
7555: POP
7556: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 95
7571: PUSH
7572: LD_VAR 0 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_INT 0
7592: GREATER
7593: IFFALSE 7351
// seeEnemy = 1 ;
7595: LD_ADDR_VAR 0 11
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7603: LD_INT 35
7605: PPUSH
7606: CALL_OW 67
// for j in vehiclesOK do
7610: LD_ADDR_VAR 0 7
7614: PUSH
7615: LD_VAR 0 8
7619: PUSH
7620: FOR_IN
7621: IFFALSE 7834
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7623: LD_ADDR_VAR 0 9
7627: PUSH
7628: LD_INT 81
7630: PUSH
7631: LD_VAR 0 1
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 101
7642: PUSH
7643: LD_INT 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PUSH
7659: LD_EXP 45
7663: DIFF
7664: PPUSH
7665: LD_VAR 0 7
7669: PPUSH
7670: CALL_OW 74
7674: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7675: LD_ADDR_VAR 0 10
7679: PUSH
7680: LD_INT 81
7682: PUSH
7683: LD_VAR 0 1
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 101
7694: PUSH
7695: LD_INT 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 59
7707: PUSH
7708: EMPTY
7709: LIST
7710: PUSH
7711: LD_INT 21
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: PPUSH
7745: CALL_OW 69
7749: PUSH
7750: LD_EXP 45
7754: DIFF
7755: PPUSH
7756: LD_VAR 0 7
7760: PPUSH
7761: CALL_OW 74
7765: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7766: LD_VAR 0 7
7770: PPUSH
7771: LD_VAR 0 9
7775: PPUSH
7776: CALL_OW 296
7780: PUSH
7781: LD_INT 8
7783: PLUS
7784: PUSH
7785: LD_VAR 0 7
7789: PPUSH
7790: LD_VAR 0 10
7794: PPUSH
7795: CALL_OW 296
7799: LESS
7800: IFFALSE 7818
// ComAttackUnit ( j , target1 ) else
7802: LD_VAR 0 7
7806: PPUSH
7807: LD_VAR 0 9
7811: PPUSH
7812: CALL_OW 115
7816: GO 7832
// ComAttackUnit ( j , target2 ) ;
7818: LD_VAR 0 7
7822: PPUSH
7823: LD_VAR 0 10
7827: PPUSH
7828: CALL_OW 115
// end ;
7832: GO 7620
7834: POP
7835: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7836: LD_INT 22
7838: PUSH
7839: LD_VAR 0 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 24
7860: PUSH
7861: LD_INT 1000
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: LD_INT 58
7873: PUSH
7874: EMPTY
7875: LIST
7876: PUSH
7877: LD_INT 2
7879: PUSH
7880: LD_INT 34
7882: PUSH
7883: LD_INT 43
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 34
7892: PUSH
7893: LD_INT 44
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 34
7902: PUSH
7903: LD_INT 46
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 69
7931: PUSH
7932: LD_INT 0
7934: EQUAL
7935: IFFALSE 7603
// seeEnemy = 0 ;
7937: LD_ADDR_VAR 0 11
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// end ;
7945: LD_VAR 0 5
7949: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7958: LD_ADDR_VAR 0 8
7962: PUSH
7963: LD_VAR 0 2
7967: PPUSH
7968: CALL_OW 313
7972: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7973: LD_ADDR_VAR 0 9
7977: PUSH
7978: LD_VAR 0 3
7982: PPUSH
7983: LD_INT 22
7985: PUSH
7986: LD_VAR 0 1
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 25
7997: PUSH
7998: LD_INT 2
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 24
8007: PUSH
8008: LD_INT 750
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 3
8017: PUSH
8018: LD_INT 54
8020: PUSH
8021: EMPTY
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 70
8038: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8039: LD_ADDR_VAR 0 6
8043: PUSH
8044: LD_VAR 0 3
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_VAR 0 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 21
8063: PUSH
8064: LD_INT 3
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 24
8076: PUSH
8077: LD_INT 1000
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: PPUSH
8096: CALL_OW 70
8100: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8101: LD_VAR 0 6
8105: NOT
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_VAR 0 1
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 25
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 24
8131: PUSH
8132: LD_INT 250
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: NOT
8149: AND
8150: IFFALSE 8154
// exit ;
8152: GO 8336
// if buildings_list > 0 and engineerOkInside then
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 0
8161: GREATER
8162: PUSH
8163: LD_VAR 0 8
8167: AND
8168: IFFALSE 8179
// ComExitBuilding ( engineerOkInside ) ;
8170: LD_VAR 0 8
8174: PPUSH
8175: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8179: LD_VAR 0 6
8183: PUSH
8184: LD_INT 0
8186: GREATER
8187: PUSH
8188: LD_VAR 0 9
8192: PUSH
8193: LD_INT 0
8195: GREATER
8196: AND
8197: IFFALSE 8217
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8199: LD_VAR 0 9
8203: PPUSH
8204: LD_VAR 0 6
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8217: LD_VAR 0 6
8221: PUSH
8222: LD_INT 0
8224: EQUAL
8225: PUSH
8226: LD_VAR 0 4
8230: PUSH
8231: LD_INT 0
8233: EQUAL
8234: AND
8235: PUSH
8236: LD_VAR 0 9
8240: PUSH
8241: LD_INT 0
8243: GREATER
8244: AND
8245: IFFALSE 8261
// ComEnterUnit ( engineerOkOutside , building ) ;
8247: LD_VAR 0 9
8251: PPUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8261: LD_VAR 0 9
8265: PUSH
8266: LD_INT 0
8268: GREATER
8269: PUSH
8270: LD_VAR 0 6
8274: PUSH
8275: LD_INT 0
8277: EQUAL
8278: AND
8279: PUSH
8280: LD_VAR 0 4
8284: PUSH
8285: LD_INT 0
8287: GREATER
8288: AND
8289: IFFALSE 8336
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8291: LD_VAR 0 9
8295: PPUSH
8296: LD_VAR 0 4
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: LD_VAR 0 4
8309: PUSH
8310: LD_INT 2
8312: ARRAY
8313: PPUSH
8314: LD_VAR 0 4
8318: PUSH
8319: LD_INT 3
8321: ARRAY
8322: PPUSH
8323: LD_VAR 0 4
8327: PUSH
8328: LD_INT 4
8330: ARRAY
8331: PPUSH
8332: CALL_OW 145
// end ;
8336: LD_VAR 0 5
8340: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8341: LD_INT 0
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8352: LD_ADDR_VAR 0 6
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_VAR 0 1
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 25
8371: PUSH
8372: LD_INT 4
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 23
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 24
8391: PUSH
8392: LD_INT 251
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 69
8409: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8410: LD_ADDR_VAR 0 7
8414: PUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: LD_INT 22
8422: PUSH
8423: LD_VAR 0 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 23
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 25
8444: PUSH
8445: LD_INT 4
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 50
8454: PUSH
8455: EMPTY
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 70
8468: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8469: LD_ADDR_VAR 0 10
8473: PUSH
8474: LD_VAR 0 3
8478: PPUSH
8479: LD_INT 22
8481: PUSH
8482: LD_VAR 0 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: LD_INT 24
8523: PUSH
8524: LD_INT 750
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 70
8545: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8546: LD_ADDR_VAR 0 11
8550: PUSH
8551: LD_VAR 0 2
8555: PPUSH
8556: LD_INT 22
8558: PUSH
8559: LD_VAR 0 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 21
8570: PUSH
8571: LD_INT 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 3
8580: PUSH
8581: LD_INT 25
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 24
8600: PUSH
8601: LD_INT 1000
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 70
8622: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8623: LD_VAR 0 10
8627: NOT
8628: PUSH
8629: LD_VAR 0 11
8633: NOT
8634: AND
8635: PUSH
8636: LD_VAR 0 6
8640: NOT
8641: AND
8642: IFFALSE 8646
// exit ;
8644: GO 8880
// if damageUnits > 0 and sci_list > 0 then
8646: LD_VAR 0 10
8650: PUSH
8651: LD_INT 0
8653: GREATER
8654: PUSH
8655: LD_VAR 0 6
8659: PUSH
8660: LD_INT 0
8662: GREATER
8663: AND
8664: IFFALSE 8680
// ComMoveToArea ( damageUnits , healArea ) ;
8666: LD_VAR 0 10
8670: PPUSH
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8680: LD_VAR 0 11
8684: PUSH
8685: LD_INT 0
8687: GREATER
8688: PUSH
8689: LD_VAR 0 6
8693: PUSH
8694: LD_INT 0
8696: GREATER
8697: AND
8698: IFFALSE 8709
// ComExitBuilding ( sci_list ) ;
8700: LD_VAR 0 6
8704: PPUSH
8705: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8709: LD_VAR 0 11
8713: PUSH
8714: LD_INT 0
8716: GREATER
8717: PUSH
8718: LD_VAR 0 7
8722: PUSH
8723: LD_INT 0
8725: GREATER
8726: AND
8727: IFFALSE 8747
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8729: LD_VAR 0 7
8733: PPUSH
8734: LD_VAR 0 11
8738: PUSH
8739: LD_INT 1
8741: ARRAY
8742: PPUSH
8743: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8747: LD_VAR 0 10
8751: PUSH
8752: LD_INT 0
8754: EQUAL
8755: PUSH
8756: LD_VAR 0 11
8760: PUSH
8761: LD_INT 0
8763: EQUAL
8764: AND
8765: PUSH
8766: LD_VAR 0 7
8770: PUSH
8771: LD_INT 0
8773: GREATER
8774: AND
8775: IFFALSE 8880
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8777: LD_ADDR_VAR 0 12
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_VAR 0 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 21
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 30
8806: PUSH
8807: LD_INT 8
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 69
8823: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8824: LD_ADDR_VAR 0 13
8828: PUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_VAR 0 12
8836: PPUSH
8837: CALL_OW 12
8841: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8842: LD_VAR 0 7
8846: PPUSH
8847: LD_INT 3
8849: PUSH
8850: LD_INT 60
8852: PUSH
8853: EMPTY
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 72
8864: PPUSH
8865: LD_VAR 0 12
8869: PUSH
8870: LD_VAR 0 13
8874: ARRAY
8875: PPUSH
8876: CALL_OW 120
// end ; end ;
8880: LD_VAR 0 5
8884: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
// tmpTab = [ ] ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: EMPTY
8897: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8898: LD_INT 22
8900: PUSH
8901: LD_VAR 0 1
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 32
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: GREATER
8932: IFFALSE 9015
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8934: LD_ADDR_VAR 0 4
8938: PUSH
8939: LD_INT 22
8941: PUSH
8942: LD_VAR 0 1
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 30
8953: PUSH
8954: LD_INT 32
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 69
8969: PUSH
8970: FOR_IN
8971: IFFALSE 9013
// begin for j in UnitsInside ( i ) do
8973: LD_ADDR_VAR 0 5
8977: PUSH
8978: LD_VAR 0 4
8982: PPUSH
8983: CALL_OW 313
8987: PUSH
8988: FOR_IN
8989: IFFALSE 9009
// tmpTab = tmpTab ^ j ;
8991: LD_ADDR_VAR 0 6
8995: PUSH
8996: LD_VAR 0 6
9000: PUSH
9001: LD_VAR 0 5
9005: ADD
9006: ST_TO_ADDR
9007: GO 8988
9009: POP
9010: POP
// end ;
9011: GO 8970
9013: POP
9014: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9015: LD_VAR 0 6
9019: PPUSH
9020: LD_VAR 0 2
9024: PPUSH
9025: CALL_OW 250
9029: PPUSH
9030: LD_VAR 0 2
9034: PPUSH
9035: CALL_OW 251
9039: PPUSH
9040: CALL_OW 114
// end ;
9044: LD_VAR 0 3
9048: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9049: LD_INT 0
9051: PPUSH
9052: PPUSH
9053: PPUSH
9054: PPUSH
// enable ;
9055: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9056: LD_ADDR_VAR 0 7
9060: PUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: CALL_OW 435
9070: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 22
9078: PUSH
9079: LD_VAR 0 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: LD_INT 34
9090: PUSH
9091: LD_VAR 0 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PPUSH
9104: CALL_OW 69
9108: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9109: LD_VAR 0 6
9113: PUSH
9114: LD_INT 0
9116: GREATER
9117: PUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: CALL_OW 435
9127: AND
9128: PUSH
9129: LD_VAR 0 7
9133: PUSH
9134: LD_INT 0
9136: GREATER
9137: AND
9138: IFFALSE 9187
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9140: LD_VAR 0 6
9144: PUSH
9145: LD_INT 1
9147: ARRAY
9148: PPUSH
9149: LD_VAR 0 7
9153: PUSH
9154: LD_INT 1
9156: ARRAY
9157: PPUSH
9158: LD_VAR 0 7
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PPUSH
9167: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9171: LD_VAR 0 6
9175: PUSH
9176: LD_INT 1
9178: ARRAY
9179: PPUSH
9180: LD_INT 100
9182: PPUSH
9183: CALL_OW 240
// end ; end ;
9187: LD_VAR 0 4
9191: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9192: LD_INT 0
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9202: LD_ADDR_VAR 0 6
9206: PUSH
9207: LD_VAR 0 2
9211: PPUSH
9212: LD_INT 22
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 56
9226: PUSH
9227: EMPTY
9228: LIST
9229: PUSH
9230: LD_INT 24
9232: PUSH
9233: LD_INT 700
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 3
9242: PUSH
9243: LD_INT 60
9245: PUSH
9246: EMPTY
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: LD_INT 25
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 25
9268: PUSH
9269: LD_INT 5
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 25
9278: PUSH
9279: LD_INT 8
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 25
9288: PUSH
9289: LD_INT 9
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 70
9314: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9315: LD_ADDR_VAR 0 7
9319: PUSH
9320: LD_VAR 0 2
9324: PPUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 1
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 30
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 58
9349: PUSH
9350: EMPTY
9351: LIST
9352: PUSH
9353: LD_INT 24
9355: PUSH
9356: LD_INT 251
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 70
9373: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9374: LD_ADDR_VAR 0 9
9378: PUSH
9379: LD_VAR 0 2
9383: PPUSH
9384: LD_INT 22
9386: PUSH
9387: LD_VAR 0 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 4
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 30
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 24
9426: PUSH
9427: LD_INT 251
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: ST_TO_ADDR
// if barrackList > 0 then
9444: LD_VAR 0 9
9448: PUSH
9449: LD_INT 0
9451: GREATER
9452: IFFALSE 9600
// begin if turretList = 0 then
9454: LD_VAR 0 7
9458: PUSH
9459: LD_INT 0
9461: EQUAL
9462: IFFALSE 9504
// begin if soldiers_list > 0 then
9464: LD_VAR 0 6
9468: PUSH
9469: LD_INT 0
9471: GREATER
9472: IFFALSE 9502
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9474: LD_VAR 0 6
9478: PPUSH
9479: LD_VAR 0 9
9483: PUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_VAR 0 9
9491: PPUSH
9492: CALL_OW 12
9496: ARRAY
9497: PPUSH
9498: CALL_OW 120
// end else
9502: GO 9600
// begin for i in barrackList do
9504: LD_ADDR_VAR 0 4
9508: PUSH
9509: LD_VAR 0 9
9513: PUSH
9514: FOR_IN
9515: IFFALSE 9598
// begin insideUnits = UnitsInside ( i ) ;
9517: LD_ADDR_VAR 0 10
9521: PUSH
9522: LD_VAR 0 4
9526: PPUSH
9527: CALL_OW 313
9531: ST_TO_ADDR
// if insideUnits > 0 then
9532: LD_VAR 0 10
9536: PUSH
9537: LD_INT 0
9539: GREATER
9540: IFFALSE 9564
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9542: LD_VAR 0 10
9546: PUSH
9547: LD_INT 1
9549: ARRAY
9550: PPUSH
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: CALL_OW 120
// if soldiers_list > 0 then
9564: LD_VAR 0 6
9568: PUSH
9569: LD_INT 0
9571: GREATER
9572: IFFALSE 9596
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9574: LD_VAR 0 6
9578: PUSH
9579: LD_INT 1
9581: ARRAY
9582: PPUSH
9583: LD_VAR 0 7
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 120
// end ;
9596: GO 9514
9598: POP
9599: POP
// end ; end ; end ;
9600: LD_VAR 0 3
9604: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9605: LD_INT 0
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9612: LD_ADDR_VAR 0 6
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_VAR 0 1
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: LD_INT 30
9634: PUSH
9635: LD_INT 31
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 30
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 30
9654: PUSH
9655: LD_INT 33
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 30
9664: PUSH
9665: LD_INT 4
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 30
9674: PUSH
9675: LD_INT 5
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 69
9698: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9699: LD_ADDR_VAR 0 7
9703: PUSH
9704: LD_INT 22
9706: PUSH
9707: LD_VAR 0 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 3
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 58
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9742: LD_VAR 0 6
9746: PUSH
9747: LD_INT 0
9749: GREATER
9750: PUSH
9751: LD_VAR 0 7
9755: PUSH
9756: LD_INT 0
9758: GREATER
9759: AND
9760: IFFALSE 9830
// begin for i in turretsList do
9762: LD_ADDR_VAR 0 4
9766: PUSH
9767: LD_VAR 0 6
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9828
// begin for j in enemyBuildings do
9775: LD_ADDR_VAR 0 5
9779: PUSH
9780: LD_VAR 0 7
9784: PUSH
9785: FOR_IN
9786: IFFALSE 9824
// begin if GetDistUnits ( i , j ) < 20 then
9788: LD_VAR 0 4
9792: PPUSH
9793: LD_VAR 0 5
9797: PPUSH
9798: CALL_OW 296
9802: PUSH
9803: LD_INT 20
9805: LESS
9806: IFFALSE 9822
// begin ComAttackUnit ( i , j ) ;
9808: LD_VAR 0 4
9812: PPUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 115
// end ; end ;
9822: GO 9785
9824: POP
9825: POP
// end ;
9826: GO 9772
9828: POP
9829: POP
// end ; end ;
9830: LD_VAR 0 3
9834: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9835: LD_INT 0
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9843: LD_ADDR_VAR 0 8
9847: PUSH
9848: LD_INT 22
9850: PUSH
9851: LD_VAR 0 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 21
9862: PUSH
9863: LD_INT 2
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 34
9872: PUSH
9873: LD_INT 52
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9890: LD_ADDR_VAR 0 9
9894: PUSH
9895: LD_INT 22
9897: PUSH
9898: LD_VAR 0 1
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 24
9922: PUSH
9923: LD_INT 1000
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: PPUSH
9942: CALL_OW 69
9946: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9947: LD_VAR 0 9
9951: PUSH
9952: LD_INT 0
9954: GREATER
9955: PUSH
9956: LD_VAR 0 8
9960: PPUSH
9961: LD_INT 24
9963: PUSH
9964: LD_INT 750
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 72
9975: PUSH
9976: LD_INT 0
9978: GREATER
9979: AND
9980: IFFALSE 10015
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9982: LD_VAR 0 8
9986: PPUSH
9987: LD_INT 24
9989: PUSH
9990: LD_INT 750
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PPUSH
9997: CALL_OW 72
10001: PPUSH
10002: LD_VAR 0 9
10006: PUSH
10007: LD_INT 1
10009: ARRAY
10010: PPUSH
10011: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10015: LD_VAR 0 8
10019: PPUSH
10020: LD_INT 3
10022: PUSH
10023: LD_INT 24
10025: PUSH
10026: LD_INT 750
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 72
10041: PUSH
10042: LD_INT 0
10044: GREATER
10045: IFFALSE 10083
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10047: LD_VAR 0 8
10051: PPUSH
10052: LD_INT 3
10054: PUSH
10055: LD_INT 24
10057: PUSH
10058: LD_INT 750
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 72
10073: PPUSH
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10083: LD_VAR 0 8
10087: PUSH
10088: LD_INT 0
10090: GREATER
10091: PUSH
10092: LD_VAR 0 9
10096: PUSH
10097: LD_INT 0
10099: EQUAL
10100: AND
10101: PUSH
10102: LD_VAR 0 3
10106: PUSH
10107: LD_INT 0
10109: GREATER
10110: AND
10111: IFFALSE 10158
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10113: LD_VAR 0 8
10117: PPUSH
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 1
10125: ARRAY
10126: PPUSH
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 2
10134: ARRAY
10135: PPUSH
10136: LD_VAR 0 3
10140: PUSH
10141: LD_INT 3
10143: ARRAY
10144: PPUSH
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 4
10152: ARRAY
10153: PPUSH
10154: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10158: LD_VAR 0 2
10162: PPUSH
10163: LD_INT 22
10165: PUSH
10166: LD_VAR 0 1
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: LD_INT 21
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 34
10187: PUSH
10188: LD_INT 52
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: LD_INT 24
10200: PUSH
10201: LD_INT 750
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: PPUSH
10218: CALL_OW 70
10222: PUSH
10223: LD_INT 0
10225: GREATER
10226: IFFALSE 10428
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10228: LD_ADDR_VAR 0 5
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: LD_INT 22
10240: PUSH
10241: LD_VAR 0 1
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 21
10252: PUSH
10253: LD_INT 2
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 34
10262: PUSH
10263: LD_INT 52
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: LD_INT 24
10275: PUSH
10276: LD_INT 750
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 70
10297: PUSH
10298: FOR_IN
10299: IFFALSE 10426
// begin mechTmp = UnitsInside ( i ) ;
10301: LD_ADDR_VAR 0 6
10305: PUSH
10306: LD_VAR 0 5
10310: PPUSH
10311: CALL_OW 313
10315: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10316: LD_VAR 0 6
10320: PPUSH
10321: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10325: LD_VAR 0 6
10329: PPUSH
10330: LD_VAR 0 7
10334: PPUSH
10335: CALL_OW 189
// wait ( 0 0$2 ) ;
10339: LD_INT 70
10341: PPUSH
10342: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10346: LD_VAR 0 6
10350: PPUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: LD_INT 22
10358: PUSH
10359: LD_VAR 0 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 34
10380: PUSH
10381: LD_INT 52
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: LD_INT 1000
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 58
10400: PUSH
10401: EMPTY
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 70
10415: PUSH
10416: LD_INT 1
10418: ARRAY
10419: PPUSH
10420: CALL_OW 180
// end ;
10424: GO 10298
10426: POP
10427: POP
// end ; end ;
10428: LD_VAR 0 4
10432: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
10437: PPUSH
10438: PPUSH
10439: PPUSH
10440: PPUSH
10441: PPUSH
10442: PPUSH
10443: PPUSH
10444: PPUSH
10445: PPUSH
// for i = 1 to medicCount do
10446: LD_ADDR_VAR 0 14
10450: PUSH
10451: DOUBLE
10452: LD_INT 1
10454: DEC
10455: ST_TO_ADDR
10456: LD_VAR 0 7
10460: PUSH
10461: FOR_TO
10462: IFFALSE 10544
// begin uc_side = side ;
10464: LD_ADDR_OWVAR 20
10468: PUSH
10469: LD_VAR 0 1
10473: ST_TO_ADDR
// uc_nation = nation ;
10474: LD_ADDR_OWVAR 21
10478: PUSH
10479: LD_VAR 0 2
10483: ST_TO_ADDR
// hc_name =  ;
10484: LD_ADDR_OWVAR 26
10488: PUSH
10489: LD_STRING 
10491: ST_TO_ADDR
// hc_gallery =  ;
10492: LD_ADDR_OWVAR 33
10496: PUSH
10497: LD_STRING 
10499: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10500: LD_INT 0
10502: PPUSH
10503: LD_INT 4
10505: PPUSH
10506: LD_VAR 0 8
10510: PPUSH
10511: CALL_OW 380
// un = CreateHuman ;
10515: LD_ADDR_VAR 0 16
10519: PUSH
10520: CALL_OW 44
10524: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10525: LD_VAR 0 16
10529: PPUSH
10530: LD_VAR 0 9
10534: PPUSH
10535: LD_INT 0
10537: PPUSH
10538: CALL_OW 49
// end ;
10542: GO 10461
10544: POP
10545: POP
// for i = 1 to soldierCount do
10546: LD_ADDR_VAR 0 14
10550: PUSH
10551: DOUBLE
10552: LD_INT 1
10554: DEC
10555: ST_TO_ADDR
10556: LD_VAR 0 3
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10644
// begin uc_side = side ;
10564: LD_ADDR_OWVAR 20
10568: PUSH
10569: LD_VAR 0 1
10573: ST_TO_ADDR
// uc_nation = nation ;
10574: LD_ADDR_OWVAR 21
10578: PUSH
10579: LD_VAR 0 2
10583: ST_TO_ADDR
// hc_name =  ;
10584: LD_ADDR_OWVAR 26
10588: PUSH
10589: LD_STRING 
10591: ST_TO_ADDR
// hc_gallery =  ;
10592: LD_ADDR_OWVAR 33
10596: PUSH
10597: LD_STRING 
10599: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10600: LD_INT 0
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: LD_VAR 0 8
10610: PPUSH
10611: CALL_OW 380
// un = CreateHuman ;
10615: LD_ADDR_VAR 0 16
10619: PUSH
10620: CALL_OW 44
10624: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10625: LD_VAR 0 16
10629: PPUSH
10630: LD_VAR 0 9
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 49
// end ;
10642: GO 10561
10644: POP
10645: POP
// for i = 1 to sniperCount do
10646: LD_ADDR_VAR 0 14
10650: PUSH
10651: DOUBLE
10652: LD_INT 1
10654: DEC
10655: ST_TO_ADDR
10656: LD_VAR 0 4
10660: PUSH
10661: FOR_TO
10662: IFFALSE 10744
// begin uc_side = side ;
10664: LD_ADDR_OWVAR 20
10668: PUSH
10669: LD_VAR 0 1
10673: ST_TO_ADDR
// uc_nation = nation ;
10674: LD_ADDR_OWVAR 21
10678: PUSH
10679: LD_VAR 0 2
10683: ST_TO_ADDR
// hc_name =  ;
10684: LD_ADDR_OWVAR 26
10688: PUSH
10689: LD_STRING 
10691: ST_TO_ADDR
// hc_gallery =  ;
10692: LD_ADDR_OWVAR 33
10696: PUSH
10697: LD_STRING 
10699: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10700: LD_INT 0
10702: PPUSH
10703: LD_INT 5
10705: PPUSH
10706: LD_VAR 0 8
10710: PPUSH
10711: CALL_OW 380
// un = CreateHuman ;
10715: LD_ADDR_VAR 0 16
10719: PUSH
10720: CALL_OW 44
10724: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10725: LD_VAR 0 16
10729: PPUSH
10730: LD_VAR 0 9
10734: PPUSH
10735: LD_INT 0
10737: PPUSH
10738: CALL_OW 49
// end ;
10742: GO 10661
10744: POP
10745: POP
// for i = 1 to bazookCount do
10746: LD_ADDR_VAR 0 14
10750: PUSH
10751: DOUBLE
10752: LD_INT 1
10754: DEC
10755: ST_TO_ADDR
10756: LD_VAR 0 5
10760: PUSH
10761: FOR_TO
10762: IFFALSE 10844
// begin uc_side = side ;
10764: LD_ADDR_OWVAR 20
10768: PUSH
10769: LD_VAR 0 1
10773: ST_TO_ADDR
// uc_nation = nation ;
10774: LD_ADDR_OWVAR 21
10778: PUSH
10779: LD_VAR 0 2
10783: ST_TO_ADDR
// hc_name =  ;
10784: LD_ADDR_OWVAR 26
10788: PUSH
10789: LD_STRING 
10791: ST_TO_ADDR
// hc_gallery =  ;
10792: LD_ADDR_OWVAR 33
10796: PUSH
10797: LD_STRING 
10799: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10800: LD_INT 0
10802: PPUSH
10803: LD_INT 9
10805: PPUSH
10806: LD_VAR 0 8
10810: PPUSH
10811: CALL_OW 380
// un = CreateHuman ;
10815: LD_ADDR_VAR 0 16
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10825: LD_VAR 0 16
10829: PPUSH
10830: LD_VAR 0 9
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 49
// end ;
10842: GO 10761
10844: POP
10845: POP
// for i = 1 to mortalCount do
10846: LD_ADDR_VAR 0 14
10850: PUSH
10851: DOUBLE
10852: LD_INT 1
10854: DEC
10855: ST_TO_ADDR
10856: LD_VAR 0 6
10860: PUSH
10861: FOR_TO
10862: IFFALSE 10944
// begin uc_side = side ;
10864: LD_ADDR_OWVAR 20
10868: PUSH
10869: LD_VAR 0 1
10873: ST_TO_ADDR
// uc_nation = nation ;
10874: LD_ADDR_OWVAR 21
10878: PUSH
10879: LD_VAR 0 2
10883: ST_TO_ADDR
// hc_name =  ;
10884: LD_ADDR_OWVAR 26
10888: PUSH
10889: LD_STRING 
10891: ST_TO_ADDR
// hc_gallery =  ;
10892: LD_ADDR_OWVAR 33
10896: PUSH
10897: LD_STRING 
10899: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10900: LD_INT 0
10902: PPUSH
10903: LD_INT 8
10905: PPUSH
10906: LD_VAR 0 8
10910: PPUSH
10911: CALL_OW 380
// un = CreateHuman ;
10915: LD_ADDR_VAR 0 16
10919: PUSH
10920: CALL_OW 44
10924: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10925: LD_VAR 0 16
10929: PPUSH
10930: LD_VAR 0 9
10934: PPUSH
10935: LD_INT 0
10937: PPUSH
10938: CALL_OW 49
// end ;
10942: GO 10861
10944: POP
10945: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10946: LD_ADDR_VAR 0 19
10950: PUSH
10951: LD_INT 22
10953: PUSH
10954: LD_VAR 0 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 25
10968: PUSH
10969: LD_INT 1
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 25
10978: PUSH
10979: LD_INT 5
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 25
10988: PUSH
10989: LD_INT 8
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 25
10998: PUSH
10999: LD_INT 9
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11022: LD_ADDR_VAR 0 18
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_VAR 0 1
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 25
11041: PUSH
11042: LD_INT 4
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// for i in medic_list do
11058: LD_ADDR_VAR 0 14
11062: PUSH
11063: LD_VAR 0 18
11067: PUSH
11068: FOR_IN
11069: IFFALSE 11087
// ComMoveToArea ( i , healArea ) ;
11071: LD_VAR 0 14
11075: PPUSH
11076: LD_VAR 0 10
11080: PPUSH
11081: CALL_OW 113
11085: GO 11068
11087: POP
11088: POP
// if strategy = 1 then
11089: LD_VAR 0 12
11093: PUSH
11094: LD_INT 1
11096: EQUAL
11097: IFFALSE 11814
// begin repeat wait ( 0 0$3 ) ;
11099: LD_INT 105
11101: PPUSH
11102: CALL_OW 67
// for i in soldiersOK_list do
11106: LD_ADDR_VAR 0 14
11110: PUSH
11111: LD_VAR 0 19
11115: PUSH
11116: FOR_IN
11117: IFFALSE 11151
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11119: LD_VAR 0 14
11123: PPUSH
11124: LD_INT 80
11126: PPUSH
11127: LD_INT 109
11129: PPUSH
11130: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11134: LD_VAR 0 14
11138: PPUSH
11139: LD_INT 39
11141: PPUSH
11142: LD_INT 49
11144: PPUSH
11145: CALL_OW 174
// end ;
11149: GO 11116
11151: POP
11152: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11153: LD_INT 13
11155: PPUSH
11156: LD_INT 22
11158: PUSH
11159: LD_VAR 0 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 70
11172: PUSH
11173: LD_INT 0
11175: GREATER
11176: IFFALSE 11099
// repeat wait ( 0 0$1 ) ;
11178: LD_INT 35
11180: PPUSH
11181: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11185: LD_ADDR_VAR 0 17
11189: PUSH
11190: LD_INT 22
11192: PUSH
11193: LD_VAR 0 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 1
11204: PUSH
11205: LD_INT 3
11207: PUSH
11208: LD_INT 24
11210: PUSH
11211: LD_INT 550
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 24
11224: PUSH
11225: LD_INT 250
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 69
11245: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11246: LD_ADDR_VAR 0 19
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_VAR 0 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 1
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 25
11278: PUSH
11279: LD_INT 5
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 25
11288: PUSH
11289: LD_INT 8
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 25
11298: PUSH
11299: LD_INT 9
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 24
11315: PUSH
11316: LD_INT 1000
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: ST_TO_ADDR
// if medicCount > 0 then
11333: LD_VAR 0 7
11337: PUSH
11338: LD_INT 0
11340: GREATER
11341: IFFALSE 11415
// begin if damageUnit_list > 0 then
11343: LD_VAR 0 17
11347: PUSH
11348: LD_INT 0
11350: GREATER
11351: IFFALSE 11415
// begin for i in damageUnit_list do
11353: LD_ADDR_VAR 0 14
11357: PUSH
11358: LD_VAR 0 17
11362: PUSH
11363: FOR_IN
11364: IFFALSE 11413
// begin ComMoveToArea ( i , healArea ) ;
11366: LD_VAR 0 14
11370: PPUSH
11371: LD_VAR 0 10
11375: PPUSH
11376: CALL_OW 113
// for j in medic_list do
11380: LD_ADDR_VAR 0 15
11384: PUSH
11385: LD_VAR 0 18
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11409
// AddComHeal ( j , i ) ;
11393: LD_VAR 0 15
11397: PPUSH
11398: LD_VAR 0 14
11402: PPUSH
11403: CALL_OW 188
11407: GO 11390
11409: POP
11410: POP
// end ;
11411: GO 11363
11413: POP
11414: POP
// end ; end ; for i in soldiersOK_list do
11415: LD_ADDR_VAR 0 14
11419: PUSH
11420: LD_VAR 0 19
11424: PUSH
11425: FOR_IN
11426: IFFALSE 11608
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11428: LD_ADDR_VAR 0 22
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_VAR 0 11
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PPUSH
11445: CALL_OW 69
11449: PUSH
11450: LD_EXP 45
11454: DIFF
11455: PPUSH
11456: LD_VAR 0 14
11460: PPUSH
11461: CALL_OW 74
11465: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11466: LD_ADDR_VAR 0 23
11470: PUSH
11471: LD_INT 22
11473: PUSH
11474: LD_VAR 0 11
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 59
11488: PUSH
11489: EMPTY
11490: LIST
11491: PUSH
11492: LD_INT 21
11494: PUSH
11495: LD_INT 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 21
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: PPUSH
11530: LD_VAR 0 14
11534: PPUSH
11535: CALL_OW 74
11539: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11540: LD_VAR 0 14
11544: PPUSH
11545: LD_VAR 0 22
11549: PPUSH
11550: CALL_OW 296
11554: PUSH
11555: LD_INT 8
11557: PLUS
11558: PUSH
11559: LD_VAR 0 14
11563: PPUSH
11564: LD_VAR 0 23
11568: PPUSH
11569: CALL_OW 296
11573: LESS
11574: IFFALSE 11592
// begin ComAttackUnit ( i , target1 ) ;
11576: LD_VAR 0 14
11580: PPUSH
11581: LD_VAR 0 22
11585: PPUSH
11586: CALL_OW 115
// end else
11590: GO 11606
// begin ComAttackUnit ( i , target2 ) ;
11592: LD_VAR 0 14
11596: PPUSH
11597: LD_VAR 0 23
11601: PPUSH
11602: CALL_OW 115
// end ; end ;
11606: GO 11425
11608: POP
11609: POP
// for i in soldiersOK_list do
11610: LD_ADDR_VAR 0 14
11614: PUSH
11615: LD_VAR 0 19
11619: PUSH
11620: FOR_IN
11621: IFFALSE 11803
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11623: LD_ADDR_VAR 0 22
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_VAR 0 11
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 69
11644: PUSH
11645: LD_EXP 45
11649: DIFF
11650: PPUSH
11651: LD_VAR 0 14
11655: PPUSH
11656: CALL_OW 74
11660: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11661: LD_ADDR_VAR 0 23
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_VAR 0 11
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 59
11683: PUSH
11684: EMPTY
11685: LIST
11686: PUSH
11687: LD_INT 21
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 21
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: PPUSH
11725: LD_VAR 0 14
11729: PPUSH
11730: CALL_OW 74
11734: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11735: LD_VAR 0 14
11739: PPUSH
11740: LD_VAR 0 22
11744: PPUSH
11745: CALL_OW 296
11749: PUSH
11750: LD_INT 8
11752: PLUS
11753: PUSH
11754: LD_VAR 0 14
11758: PPUSH
11759: LD_VAR 0 23
11763: PPUSH
11764: CALL_OW 296
11768: LESS
11769: IFFALSE 11787
// begin ComAttackUnit ( i , target1 ) ;
11771: LD_VAR 0 14
11775: PPUSH
11776: LD_VAR 0 22
11780: PPUSH
11781: CALL_OW 115
// end else
11785: GO 11801
// begin ComAttackUnit ( i , target2 ) ;
11787: LD_VAR 0 14
11791: PPUSH
11792: LD_VAR 0 23
11796: PPUSH
11797: CALL_OW 115
// end ; end ;
11801: GO 11620
11803: POP
11804: POP
// until soldiersOK_list = [ ] ;
11805: LD_VAR 0 19
11809: PUSH
11810: EMPTY
11811: EQUAL
11812: IFFALSE 11178
// end ; if strategy = 2 then
11814: LD_VAR 0 12
11818: PUSH
11819: LD_INT 2
11821: EQUAL
11822: IFFALSE 12527
// begin repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// for i in soldiersOK_list do
11831: LD_ADDR_VAR 0 14
11835: PUSH
11836: LD_VAR 0 19
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11876
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11844: LD_VAR 0 14
11848: PPUSH
11849: LD_INT 117
11851: PPUSH
11852: LD_INT 97
11854: PPUSH
11855: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11859: LD_VAR 0 14
11863: PPUSH
11864: LD_INT 94
11866: PPUSH
11867: LD_INT 50
11869: PPUSH
11870: CALL_OW 174
// end ;
11874: GO 11841
11876: POP
11877: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11878: LD_INT 14
11880: PPUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 70
11897: PUSH
11898: LD_INT 0
11900: GREATER
11901: IFFALSE 11824
// repeat wait ( 0 0$3 ) ;
11903: LD_INT 105
11905: PPUSH
11906: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11910: LD_ADDR_VAR 0 17
11914: PUSH
11915: LD_INT 22
11917: PUSH
11918: LD_VAR 0 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 1
11929: PUSH
11930: LD_INT 3
11932: PUSH
11933: LD_INT 24
11935: PUSH
11936: LD_INT 550
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 24
11949: PUSH
11950: LD_INT 250
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 69
11970: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11971: LD_ADDR_VAR 0 19
11975: PUSH
11976: LD_INT 22
11978: PUSH
11979: LD_VAR 0 1
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 25
12003: PUSH
12004: LD_INT 5
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 8
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 25
12023: PUSH
12024: LD_INT 9
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 24
12040: PUSH
12041: LD_INT 1000
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if medicCount > 0 then
12058: LD_VAR 0 7
12062: PUSH
12063: LD_INT 0
12065: GREATER
12066: IFFALSE 12140
// begin if damageUnit_list > 0 then
12068: LD_VAR 0 17
12072: PUSH
12073: LD_INT 0
12075: GREATER
12076: IFFALSE 12140
// begin for i in damageUnit_list do
12078: LD_ADDR_VAR 0 14
12082: PUSH
12083: LD_VAR 0 17
12087: PUSH
12088: FOR_IN
12089: IFFALSE 12138
// begin ComMoveToArea ( i , healArea ) ;
12091: LD_VAR 0 14
12095: PPUSH
12096: LD_VAR 0 10
12100: PPUSH
12101: CALL_OW 113
// for j in medic_list do
12105: LD_ADDR_VAR 0 15
12109: PUSH
12110: LD_VAR 0 18
12114: PUSH
12115: FOR_IN
12116: IFFALSE 12134
// AddComHeal ( j , i ) ;
12118: LD_VAR 0 15
12122: PPUSH
12123: LD_VAR 0 14
12127: PPUSH
12128: CALL_OW 188
12132: GO 12115
12134: POP
12135: POP
// end ;
12136: GO 12088
12138: POP
12139: POP
// end ; end ; for i in soldiersOK_list do
12140: LD_ADDR_VAR 0 14
12144: PUSH
12145: LD_VAR 0 19
12149: PUSH
12150: FOR_IN
12151: IFFALSE 12327
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12153: LD_ADDR_VAR 0 22
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_VAR 0 11
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 69
12174: PPUSH
12175: LD_VAR 0 14
12179: PPUSH
12180: CALL_OW 74
12184: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12185: LD_ADDR_VAR 0 23
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 11
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 59
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: PPUSH
12249: LD_VAR 0 14
12253: PPUSH
12254: CALL_OW 74
12258: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12259: LD_VAR 0 14
12263: PPUSH
12264: LD_VAR 0 22
12268: PPUSH
12269: CALL_OW 296
12273: PUSH
12274: LD_INT 8
12276: PLUS
12277: PUSH
12278: LD_VAR 0 14
12282: PPUSH
12283: LD_VAR 0 23
12287: PPUSH
12288: CALL_OW 296
12292: LESS
12293: IFFALSE 12311
// begin ComAttackUnit ( i , target1 ) ;
12295: LD_VAR 0 14
12299: PPUSH
12300: LD_VAR 0 22
12304: PPUSH
12305: CALL_OW 115
// end else
12309: GO 12325
// begin ComAttackUnit ( i , target2 ) ;
12311: LD_VAR 0 14
12315: PPUSH
12316: LD_VAR 0 23
12320: PPUSH
12321: CALL_OW 115
// end ; end ;
12325: GO 12150
12327: POP
12328: POP
// for i in soldiersOK_list do
12329: LD_ADDR_VAR 0 14
12333: PUSH
12334: LD_VAR 0 19
12338: PUSH
12339: FOR_IN
12340: IFFALSE 12516
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12342: LD_ADDR_VAR 0 22
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_VAR 0 11
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PPUSH
12359: CALL_OW 69
12363: PPUSH
12364: LD_VAR 0 14
12368: PPUSH
12369: CALL_OW 74
12373: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12374: LD_ADDR_VAR 0 23
12378: PUSH
12379: LD_INT 22
12381: PUSH
12382: LD_VAR 0 11
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 2
12393: PUSH
12394: LD_INT 59
12396: PUSH
12397: EMPTY
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 21
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: PPUSH
12433: CALL_OW 69
12437: PPUSH
12438: LD_VAR 0 14
12442: PPUSH
12443: CALL_OW 74
12447: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12448: LD_VAR 0 14
12452: PPUSH
12453: LD_VAR 0 22
12457: PPUSH
12458: CALL_OW 296
12462: PUSH
12463: LD_INT 8
12465: PLUS
12466: PUSH
12467: LD_VAR 0 14
12471: PPUSH
12472: LD_VAR 0 23
12476: PPUSH
12477: CALL_OW 296
12481: LESS
12482: IFFALSE 12500
// begin ComAttackUnit ( i , target1 ) ;
12484: LD_VAR 0 14
12488: PPUSH
12489: LD_VAR 0 22
12493: PPUSH
12494: CALL_OW 115
// end else
12498: GO 12514
// begin ComAttackUnit ( i , target2 ) ;
12500: LD_VAR 0 14
12504: PPUSH
12505: LD_VAR 0 23
12509: PPUSH
12510: CALL_OW 115
// end ; end ;
12514: GO 12339
12516: POP
12517: POP
// until soldiersOK_list = [ ] ;
12518: LD_VAR 0 19
12522: PUSH
12523: EMPTY
12524: EQUAL
12525: IFFALSE 11903
// end ; end ; end_of_file
12527: LD_VAR 0 13
12531: RET
// every 0 0$01 do
12532: GO 12534
12534: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12535: LD_INT 22
12537: PUSH
12538: LD_INT 1
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: PUSH
12564: LD_INT 0
12566: EQUAL
12567: IFFALSE 12581
// SetClass ( JMM , 2 ) ;
12569: LD_EXP 1
12573: PPUSH
12574: LD_INT 2
12576: PPUSH
12577: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12581: LD_STRING M1
12583: PPUSH
12584: CALL_OW 337
// case difficulty of 1 :
12588: LD_OWVAR 67
12592: PUSH
12593: LD_INT 1
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12611
12601: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12602: LD_STRING M1-1
12604: PPUSH
12605: CALL_OW 337
12609: GO 12648
12611: LD_INT 2
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12629
12619: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12620: LD_STRING M1-2
12622: PPUSH
12623: CALL_OW 337
12627: GO 12648
12629: LD_INT 3
12631: DOUBLE
12632: EQUAL
12633: IFTRUE 12637
12635: GO 12647
12637: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12638: LD_STRING M1-3
12640: PPUSH
12641: CALL_OW 337
12645: GO 12648
12647: POP
// ChangeMissionObjectives ( M1cont ) ;
12648: LD_STRING M1cont
12650: PPUSH
12651: CALL_OW 337
// SaveForQuickRestart ;
12655: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12659: LD_INT 525
12661: PPUSH
12662: LD_INT 700
12664: PPUSH
12665: CALL_OW 12
12669: PPUSH
12670: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12674: LD_INT 5
12676: PPUSH
12677: LD_INT 82
12679: PPUSH
12680: LD_INT 38
12682: PPUSH
12683: LD_INT 10
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 56
// wait ( 0 0$14 ) ;
12693: LD_INT 490
12695: PPUSH
12696: CALL_OW 67
// firstCrateSpawn := true ;
12700: LD_ADDR_EXP 41
12704: PUSH
12705: LD_INT 1
12707: ST_TO_ADDR
// end ;
12708: END
// every 0 0$02 trigger firstCrateSpawn do
12709: LD_EXP 41
12713: IFFALSE 13076
12715: GO 12717
12717: DISABLE
// begin if IsOk ( Lisa ) then
12718: LD_EXP 2
12722: PPUSH
12723: CALL_OW 302
12727: IFFALSE 12743
// Say ( Lisa , DR0-Lisa-1 ) else
12729: LD_EXP 2
12733: PPUSH
12734: LD_STRING DR0-Lisa-1
12736: PPUSH
12737: CALL_OW 88
12741: GO 12889
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12743: LD_INT 22
12745: PUSH
12746: LD_INT 1
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 26
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 25
12778: PUSH
12779: LD_INT 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 25
12788: PUSH
12789: LD_INT 2
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 25
12798: PUSH
12799: LD_INT 3
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 25
12808: PUSH
12809: LD_INT 4
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: PUSH
12834: LD_EXP 1
12838: PUSH
12839: LD_EXP 8
12843: PUSH
12844: LD_EXP 5
12848: PUSH
12849: LD_EXP 6
12853: PUSH
12854: LD_EXP 7
12858: PUSH
12859: LD_EXP 4
12863: PUSH
12864: LD_EXP 3
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: DIFF
12878: PPUSH
12879: LD_STRING DR0-Sol1-1
12881: PPUSH
12882: LD_STRING DR0-Sol1-1
12884: PPUSH
12885: CALL 5925 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12889: LD_INT 22
12891: PUSH
12892: LD_INT 1
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 21
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 26
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: LD_INT 25
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 25
12954: PUSH
12955: LD_INT 4
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: PUSH
12980: LD_EXP 1
12984: PUSH
12985: LD_EXP 8
12989: PUSH
12990: LD_EXP 5
12994: PUSH
12995: LD_EXP 2
12999: PUSH
13000: LD_EXP 6
13004: PUSH
13005: LD_EXP 7
13009: PUSH
13010: LD_EXP 4
13014: PUSH
13015: LD_EXP 3
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: DIFF
13030: PPUSH
13031: LD_STRING DR0-Sol2-1
13033: PPUSH
13034: LD_STRING DR0-Sol2-1
13036: PPUSH
13037: CALL 5925 0 3
// if IsOk ( Cyrus ) then
13041: LD_EXP 4
13045: PPUSH
13046: CALL_OW 302
13050: IFFALSE 13064
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13052: LD_EXP 4
13056: PPUSH
13057: LD_STRING DR0-Cyrus-1
13059: PPUSH
13060: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13064: LD_EXP 1
13068: PPUSH
13069: LD_STRING DR0-JMM-1
13071: PPUSH
13072: CALL_OW 88
// end ;
13076: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13077: LD_EXP 5
13081: PPUSH
13082: CALL_OW 302
13086: PUSH
13087: LD_INT 22
13089: PUSH
13090: LD_INT 1
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 25
13099: PUSH
13100: LD_INT 16
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PPUSH
13111: CALL_OW 69
13115: PUSH
13116: LD_INT 0
13118: GREATER
13119: AND
13120: PUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 463
13128: NOT
13129: AND
13130: IFFALSE 13408
13132: GO 13134
13134: DISABLE
// begin DialogueOn ;
13135: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13139: LD_EXP 5
13143: PPUSH
13144: LD_STRING D10-Frank-1
13146: PPUSH
13147: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13151: LD_INT 22
13153: PUSH
13154: LD_INT 1
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: LD_INT 25
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 25
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: PUSH
13231: LD_EXP 1
13235: PUSH
13236: LD_EXP 5
13240: PUSH
13241: LD_EXP 2
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: DIFF
13251: PPUSH
13252: LD_STRING D10-Sol1-1
13254: PPUSH
13255: LD_STRING D10-FSol1-1
13257: PPUSH
13258: CALL 5925 0 3
// Say ( Frank , D10-Frank-2 ) ;
13262: LD_EXP 5
13266: PPUSH
13267: LD_STRING D10-Frank-2
13269: PPUSH
13270: CALL_OW 88
// if IsOK ( Lisa ) then
13274: LD_EXP 2
13278: PPUSH
13279: CALL_OW 302
13283: IFFALSE 13299
// begin Say ( Lisa , D10-Lisa-2 ) ;
13285: LD_EXP 2
13289: PPUSH
13290: LD_STRING D10-Lisa-2
13292: PPUSH
13293: CALL_OW 88
// end else
13297: GO 13404
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13299: LD_INT 22
13301: PUSH
13302: LD_INT 1
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 21
13311: PUSH
13312: LD_INT 1
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 1
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 25
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 3
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 25
13354: PUSH
13355: LD_INT 4
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: PUSH
13379: LD_EXP 1
13383: PUSH
13384: LD_EXP 5
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: DIFF
13393: PPUSH
13394: LD_STRING D10-Sol1-2
13396: PPUSH
13397: LD_STRING D10-FSol1-2
13399: PPUSH
13400: CALL 5925 0 3
// end ; DialogueOff ;
13404: CALL_OW 7
// end ;
13408: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 463
13416: NOT
13417: IFFALSE 13680
13419: GO 13421
13421: DISABLE
// begin HarrisonSupport ;
13422: CALL 2417 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13426: LD_EXP 17
13430: PPUSH
13431: CALL_OW 310
13435: PPUSH
13436: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13440: LD_EXP 17
13444: PPUSH
13445: LD_STRING DEng-Eng1-1
13447: PPUSH
13448: CALL_OW 88
// wait ( 1 1$0 ) ;
13452: LD_INT 2100
13454: PPUSH
13455: CALL_OW 67
// DialogueOn ;
13459: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13463: LD_EXP 14
13467: PPUSH
13468: LD_STRING DRem-Har-1
13470: PPUSH
13471: CALL_OW 94
// if contactWithRussian = 1 then
13475: LD_EXP 22
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: IFFALSE 13499
// begin Say ( JMM , DRem-JMM-1 ) ;
13485: LD_EXP 1
13489: PPUSH
13490: LD_STRING DRem-JMM-1
13492: PPUSH
13493: CALL_OW 88
// end else
13497: GO 13511
// begin Say ( JMM , DRem-JMM-1a ) ;
13499: LD_EXP 1
13503: PPUSH
13504: LD_STRING DRem-JMM-1a
13506: PPUSH
13507: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13511: LD_EXP 14
13515: PPUSH
13516: LD_STRING DRem-Har-2
13518: PPUSH
13519: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13523: LD_STRING DenisInDelta
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL_OW 30
13533: PUSH
13534: LD_INT 1
13536: EQUAL
13537: IFFALSE 13553
// begin Say ( JMM , DRem-JMM-2 ) ;
13539: LD_EXP 1
13543: PPUSH
13544: LD_STRING DRem-JMM-2
13546: PPUSH
13547: CALL_OW 88
// end else
13551: GO 13565
// begin Say ( JMM , DRem-JMM-2a ) ;
13553: LD_EXP 1
13557: PPUSH
13558: LD_STRING DRem-JMM-2a
13560: PPUSH
13561: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13565: LD_EXP 14
13569: PPUSH
13570: LD_STRING DRem-Har-3
13572: PPUSH
13573: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13577: LD_EXP 1
13581: PPUSH
13582: LD_STRING DRem-JMM-3
13584: PPUSH
13585: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13589: LD_EXP 14
13593: PPUSH
13594: LD_STRING DRem-Har-4
13596: PPUSH
13597: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13601: LD_STRING DenisInDelta
13603: PPUSH
13604: LD_INT 0
13606: PPUSH
13607: CALL_OW 30
13611: PUSH
13612: LD_INT 1
13614: EQUAL
13615: IFFALSE 13643
// begin Say ( JMM , DRem-JMM-4 ) ;
13617: LD_EXP 1
13621: PPUSH
13622: LD_STRING DRem-JMM-4
13624: PPUSH
13625: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13629: LD_EXP 14
13633: PPUSH
13634: LD_STRING DRem-Har-5
13636: PPUSH
13637: CALL_OW 94
// end else
13641: GO 13676
// begin SetRestrict ( 36 , 1 , true ) ;
13643: LD_INT 36
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13656: LD_INT 15
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: LD_INT 1
13664: PPUSH
13665: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13669: LD_STRING MR
13671: PPUSH
13672: CALL_OW 337
// end ; DialogueOff ;
13676: CALL_OW 7
// end ;
13680: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13681: LD_STRING DenisInDelta
13683: PPUSH
13684: LD_INT 0
13686: PPUSH
13687: CALL_OW 30
13691: PUSH
13692: LD_INT 1
13694: EQUAL
13695: PUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 463
13703: NOT
13704: AND
13705: IFFALSE 13938
13707: GO 13709
13709: DISABLE
13710: LD_INT 0
13712: PPUSH
// begin PrepareDenis ;
13713: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13717: LD_EXP 9
13721: PPUSH
13722: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13726: LD_ADDR_VAR 0 1
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_INT 1
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13746: LD_EXP 9
13750: PPUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_EXP 9
13760: PPUSH
13761: CALL_OW 74
13765: PPUSH
13766: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13770: LD_INT 35
13772: PPUSH
13773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13777: LD_INT 22
13779: PUSH
13780: LD_INT 1
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 91
13789: PUSH
13790: LD_EXP 9
13794: PUSH
13795: LD_INT 10
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: IFFALSE 13770
// SetSide ( Denis , 1 ) ;
13813: LD_EXP 9
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 235
// DialogueOn ;
13825: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13829: LD_EXP 9
13833: PPUSH
13834: LD_STRING DDen-Den-1
13836: PPUSH
13837: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13841: LD_EXP 1
13845: PPUSH
13846: LD_STRING DDen-JMM-1
13848: PPUSH
13849: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13853: LD_EXP 9
13857: PPUSH
13858: LD_STRING DDen-Den-2
13860: PPUSH
13861: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13865: LD_EXP 1
13869: PPUSH
13870: LD_STRING DDen-JMM-2
13872: PPUSH
13873: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13877: LD_EXP 9
13881: PPUSH
13882: LD_STRING DDen-Den-3
13884: PPUSH
13885: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13889: LD_EXP 1
13893: PPUSH
13894: LD_STRING DDen-JMM-3
13896: PPUSH
13897: CALL_OW 88
// DialogueOff ;
13901: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13905: LD_INT 36
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13918: LD_INT 15
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13931: LD_STRING MR
13933: PPUSH
13934: CALL_OW 337
// end ;
13938: PPOPN 1
13940: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13941: CALL 13996 0 0
13945: PUSH
13946: LD_EXP 9
13950: PPUSH
13951: CALL_OW 302
13955: AND
13956: PUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 463
13964: NOT
13965: AND
13966: IFFALSE 13995
13968: GO 13970
13970: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13971: LD_EXP 9
13975: PPUSH
13976: LD_STRING DR1-Den-1
13978: PPUSH
13979: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13983: LD_EXP 1
13987: PPUSH
13988: LD_STRING DR1-JMM-1
13990: PPUSH
13991: CALL_OW 88
// end ;
13995: END
// function CheckOptoLab ; var i ; begin
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
// result = false ;
14000: LD_ADDR_VAR 0 1
14004: PUSH
14005: LD_INT 0
14007: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14008: LD_ADDR_VAR 0 2
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_INT 1
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 2
14025: PUSH
14026: LD_INT 30
14028: PUSH
14029: LD_INT 7
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 30
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: PUSH
14060: FOR_IN
14061: IFFALSE 14113
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14063: LD_VAR 0 2
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 268
14075: PUSH
14076: LD_INT 15
14078: EQUAL
14079: PUSH
14080: LD_VAR 0 2
14084: PPUSH
14085: LD_INT 2
14087: PPUSH
14088: CALL_OW 268
14092: PUSH
14093: LD_INT 15
14095: EQUAL
14096: OR
14097: IFFALSE 14109
// begin result = true ;
14099: LD_ADDR_VAR 0 1
14103: PUSH
14104: LD_INT 1
14106: ST_TO_ADDR
// break ;
14107: GO 14113
// end ; break ;
14109: GO 14113
// end ;
14111: GO 14060
14113: POP
14114: POP
// end ;
14115: LD_VAR 0 1
14119: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14120: LD_INT 15
14122: PPUSH
14123: LD_INT 1
14125: PPUSH
14126: CALL_OW 321
14130: PUSH
14131: LD_INT 2
14133: EQUAL
14134: PUSH
14135: LD_EXP 9
14139: PPUSH
14140: CALL_OW 302
14144: AND
14145: PUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 463
14153: NOT
14154: AND
14155: IFFALSE 14387
14157: GO 14159
14159: DISABLE
// begin DialogueOn ;
14160: CALL_OW 6
// if IsOK ( Denis ) then
14164: LD_EXP 9
14168: PPUSH
14169: CALL_OW 302
14173: IFFALSE 14189
// begin Say ( Denis , DR2-Den-1 ) ;
14175: LD_EXP 9
14179: PPUSH
14180: LD_STRING DR2-Den-1
14182: PPUSH
14183: CALL_OW 88
// end else
14187: GO 14248
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14189: LD_INT 22
14191: PUSH
14192: LD_INT 1
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 21
14201: PUSH
14202: LD_INT 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 25
14211: PUSH
14212: LD_INT 4
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: PUSH
14229: LD_EXP 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: DIFF
14237: PPUSH
14238: LD_STRING DR2-Sci1-1
14240: PPUSH
14241: LD_STRING DR2-FSci1-1
14243: PPUSH
14244: CALL 5925 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14248: LD_EXP 1
14252: PPUSH
14253: LD_STRING DR2-JMM-1
14255: PPUSH
14256: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14260: LD_INT 22
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: LD_INT 25
14285: PUSH
14286: LD_INT 1
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 25
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 3
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 25
14315: PUSH
14316: LD_INT 4
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 69
14339: PUSH
14340: LD_EXP 1
14344: PUSH
14345: LD_EXP 9
14349: PUSH
14350: LD_EXP 8
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: DIFF
14360: PPUSH
14361: LD_STRING DR2-Sol1-1
14363: PPUSH
14364: LD_STRING DR2-Sol1-11
14366: PPUSH
14367: CALL 5925 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14371: LD_EXP 1
14375: PPUSH
14376: LD_STRING DR2-JMM-2
14378: PPUSH
14379: CALL_OW 88
// DialogueOff ;
14383: CALL_OW 7
// end ;
14387: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14388: LD_INT 22
14390: PUSH
14391: LD_INT 1
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 36
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: PUSH
14417: LD_INT 0
14419: EQUAL
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_INT 1
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 2
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 69
14460: PUSH
14461: LD_INT 0
14463: GREATER
14464: AND
14465: PUSH
14466: LD_EXP 23
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: PUSH
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 463
14483: NOT
14484: AND
14485: IFFALSE 14611
14487: GO 14489
14489: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14490: LD_INT 22
14492: PUSH
14493: LD_INT 1
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 25
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PPUSH
14525: CALL_OW 69
14529: PUSH
14530: LD_EXP 1
14534: PUSH
14535: LD_EXP 6
14539: PUSH
14540: LD_EXP 7
14544: PUSH
14545: LD_EXP 9
14549: PUSH
14550: LD_EXP 15
14554: PUSH
14555: LD_EXP 3
14559: PUSH
14560: LD_EXP 4
14564: PUSH
14565: LD_EXP 2
14569: PUSH
14570: LD_EXP 5
14574: PUSH
14575: LD_EXP 8
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: DIFF
14592: PPUSH
14593: LD_STRING D3a-Mech1-1
14595: PPUSH
14596: LD_STRING D3a-Mech1-1
14598: PPUSH
14599: CALL 5925 0 3
// firstTower = 2 ;
14603: LD_ADDR_EXP 23
14607: PUSH
14608: LD_INT 2
14610: ST_TO_ADDR
// end ;
14611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14612: LD_INT 22
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 3
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PPUSH
14636: CALL_OW 69
14640: PUSH
14641: LD_INT 0
14643: EQUAL
14644: IFFALSE 14759
14646: GO 14648
14648: DISABLE
14649: LD_INT 0
14651: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_INT 1
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 1
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 25
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 25
14702: PUSH
14703: LD_INT 3
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 25
14712: PUSH
14713: LD_INT 4
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PPUSH
14732: CALL_OW 69
14736: PUSH
14737: FOR_IN
14738: IFFALSE 14757
// AddExperience ( i , 1 , 10000 ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: LD_INT 10000
14750: PPUSH
14751: CALL_OW 492
14755: GO 14737
14757: POP
14758: POP
// end ;
14759: PPOPN 1
14761: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14762: LD_INT 22
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 30
14774: PUSH
14775: LD_INT 36
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: LD_INT 0
14793: GREATER
14794: PUSH
14795: LD_INT 22
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 21
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 33
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: PPUSH
14830: CALL_OW 69
14834: PUSH
14835: LD_INT 0
14837: GREATER
14838: AND
14839: PUSH
14840: CALL 15432 0 0
14844: AND
14845: PUSH
14846: LD_INT 1
14848: PPUSH
14849: CALL_OW 463
14853: NOT
14854: AND
14855: IFFALSE 15429
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
14866: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_INT 22
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 30
14884: PUSH
14885: LD_INT 36
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 69
14900: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14901: LD_ADDR_VAR 0 4
14905: PUSH
14906: LD_INT 22
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 21
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 33
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14946: LD_ADDR_VAR 0 5
14950: PUSH
14951: EMPTY
14952: ST_TO_ADDR
// for i in tmpControlTowers do
14953: LD_ADDR_VAR 0 1
14957: PUSH
14958: LD_VAR 0 3
14962: PUSH
14963: FOR_IN
14964: IFFALSE 15427
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14966: LD_EXP 1
14970: PPUSH
14971: CALL_OW 310
14975: PUSH
14976: LD_VAR 0 1
14980: EQUAL
14981: PUSH
14982: LD_EXP 1
14986: PPUSH
14987: CALL_OW 257
14991: PUSH
14992: LD_INT 3
14994: EQUAL
14995: AND
14996: IFFALSE 15126
// begin InGameOn ;
14998: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15002: LD_VAR 0 4
15006: PUSH
15007: LD_INT 1
15009: ARRAY
15010: PPUSH
15011: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15015: LD_EXP 1
15019: PPUSH
15020: LD_STRING D4a-JMM-1
15022: PPUSH
15023: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15027: LD_VAR 0 4
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: LD_EXP 1
15040: PPUSH
15041: CALL_OW 53
// wait ( 0 0$1 ) ;
15045: LD_INT 35
15047: PPUSH
15048: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15052: LD_VAR 0 4
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_VAR 0 4
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: CALL_OW 250
15074: PUSH
15075: LD_INT 3
15077: PLUS
15078: PPUSH
15079: LD_VAR 0 4
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: PPUSH
15088: CALL_OW 251
15092: PUSH
15093: LD_INT 2
15095: MINUS
15096: PPUSH
15097: CALL_OW 111
// wait ( 0 0$2 ) ;
15101: LD_INT 70
15103: PPUSH
15104: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15108: LD_EXP 1
15112: PPUSH
15113: LD_STRING D4b-JMM-1
15115: PPUSH
15116: CALL_OW 88
// InGameOff ;
15120: CALL_OW 9
// end else
15124: GO 15425
// begin InGameOn ;
15126: CALL_OW 8
// for j in UnitsInside ( i ) do
15130: LD_ADDR_VAR 0 2
15134: PUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 313
15144: PUSH
15145: FOR_IN
15146: IFFALSE 15181
// if GetClass ( j ) = 3 then
15148: LD_VAR 0 2
15152: PPUSH
15153: CALL_OW 257
15157: PUSH
15158: LD_INT 3
15160: EQUAL
15161: IFFALSE 15179
// tmpMechanicInside = tmpMechanicInside ^ j ;
15163: LD_ADDR_VAR 0 5
15167: PUSH
15168: LD_VAR 0 5
15172: PUSH
15173: LD_VAR 0 2
15177: ADD
15178: ST_TO_ADDR
15179: GO 15145
15181: POP
15182: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15183: LD_VAR 0 5
15187: PUSH
15188: LD_INT 1
15190: ARRAY
15191: PPUSH
15192: CALL_OW 258
15196: PUSH
15197: LD_INT 1
15199: EQUAL
15200: IFFALSE 15218
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15202: LD_VAR 0 5
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PPUSH
15211: LD_STRING D4a-Mech1-1
15213: PPUSH
15214: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15218: LD_VAR 0 5
15222: PUSH
15223: LD_INT 1
15225: ARRAY
15226: PPUSH
15227: CALL_OW 258
15231: PUSH
15232: LD_INT 2
15234: EQUAL
15235: IFFALSE 15253
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15237: LD_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: PPUSH
15246: LD_STRING D4a-FMech1-1
15248: PPUSH
15249: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15253: LD_VAR 0 4
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15266: LD_VAR 0 4
15270: PUSH
15271: LD_INT 1
15273: ARRAY
15274: PPUSH
15275: LD_VAR 0 5
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: PPUSH
15284: CALL_OW 53
// wait ( 0 0$1 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15295: LD_VAR 0 4
15299: PUSH
15300: LD_INT 1
15302: ARRAY
15303: PPUSH
15304: LD_VAR 0 4
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: PPUSH
15313: CALL_OW 250
15317: PUSH
15318: LD_INT 3
15320: PLUS
15321: PPUSH
15322: LD_VAR 0 4
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 251
15335: PUSH
15336: LD_INT 2
15338: MINUS
15339: PPUSH
15340: CALL_OW 111
// wait ( 0 0$2 ) ;
15344: LD_INT 70
15346: PPUSH
15347: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15351: LD_VAR 0 5
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: CALL_OW 258
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: IFFALSE 15386
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15370: LD_VAR 0 5
15374: PUSH
15375: LD_INT 1
15377: ARRAY
15378: PPUSH
15379: LD_STRING D4b-Mech1-1
15381: PPUSH
15382: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15386: LD_VAR 0 5
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: CALL_OW 258
15399: PUSH
15400: LD_INT 2
15402: EQUAL
15403: IFFALSE 15421
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15405: LD_VAR 0 5
15409: PUSH
15410: LD_INT 1
15412: ARRAY
15413: PPUSH
15414: LD_STRING D4b-FMech1-1
15416: PPUSH
15417: CALL_OW 88
// InGameOff ;
15421: CALL_OW 9
// end ; end ;
15425: GO 14963
15427: POP
15428: POP
// end ;
15429: PPOPN 5
15431: END
// function CheckMehInside ; var i , j ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// result = false ;
15437: LD_ADDR_VAR 0 1
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_INT 22
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 30
15462: PUSH
15463: LD_INT 36
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PPUSH
15474: CALL_OW 69
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15531
// begin for j in UnitsInside ( i ) do
15482: LD_ADDR_VAR 0 3
15486: PUSH
15487: LD_VAR 0 2
15491: PPUSH
15492: CALL_OW 313
15496: PUSH
15497: FOR_IN
15498: IFFALSE 15527
// begin if GetClass ( j ) = 3 then
15500: LD_VAR 0 3
15504: PPUSH
15505: CALL_OW 257
15509: PUSH
15510: LD_INT 3
15512: EQUAL
15513: IFFALSE 15525
// begin result = true ;
15515: LD_ADDR_VAR 0 1
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// break ;
15523: GO 15527
// end ; end ;
15525: GO 15497
15527: POP
15528: POP
// end ;
15529: GO 15479
15531: POP
15532: POP
// end ;
15533: LD_VAR 0 1
15537: RET
// every 25 25$0 do
15538: GO 15540
15540: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15541: LD_INT 35
15543: PPUSH
15544: CALL_OW 67
// until not InBattle ( 1 ) ;
15548: LD_INT 1
15550: PPUSH
15551: CALL_OW 463
15555: NOT
15556: IFFALSE 15541
// PrepareKurt ;
15558: CALL 19023 0 0
// end ;
15562: END
// every 35 35$0 do
15563: GO 15565
15565: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15566: LD_INT 35
15568: PPUSH
15569: CALL_OW 67
// until not InBattle ( 1 ) ;
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 463
15580: NOT
15581: IFFALSE 15566
// PrepareJoan ;
15583: CALL 2935 0 0
// wait ( 1 1$0 ) ;
15587: LD_INT 2100
15589: PPUSH
15590: CALL_OW 67
// if IsOK ( Lisa ) then
15594: LD_EXP 2
15598: PPUSH
15599: CALL_OW 302
15603: IFFALSE 15733
// begin DialogueOn ;
15605: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15609: LD_EXP 2
15613: PPUSH
15614: LD_STRING D7-Lisa-1
15616: PPUSH
15617: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15621: LD_EXP 1
15625: PPUSH
15626: LD_STRING D7-JMM-1
15628: PPUSH
15629: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15633: LD_EXP 2
15637: PPUSH
15638: LD_STRING D7-Lisa-2
15640: PPUSH
15641: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15645: LD_EXP 1
15649: PPUSH
15650: LD_STRING D7-JMM-2
15652: PPUSH
15653: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15657: LD_EXP 2
15661: PPUSH
15662: LD_STRING D7-Lisa-3
15664: PPUSH
15665: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15669: LD_EXP 1
15673: PPUSH
15674: LD_STRING D7-JMM-3
15676: PPUSH
15677: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15681: LD_EXP 2
15685: PPUSH
15686: LD_STRING D7-Lisa-4
15688: PPUSH
15689: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15693: LD_EXP 1
15697: PPUSH
15698: LD_STRING D7-JMM-4
15700: PPUSH
15701: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15705: LD_EXP 1
15709: PPUSH
15710: LD_STRING D7-JMM-4a
15712: PPUSH
15713: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15717: LD_EXP 2
15721: PPUSH
15722: LD_STRING D7-Lisa-5
15724: PPUSH
15725: CALL_OW 88
// DialogueOff ;
15729: CALL_OW 7
// end ; end ;
15733: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15734: LD_EXP 13
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 91
15751: PUSH
15752: LD_EXP 13
15756: PUSH
15757: LD_INT 10
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 25
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 25
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 25
15800: PUSH
15801: LD_INT 4
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: PPUSH
15820: CALL_OW 69
15824: PUSH
15825: LD_INT 1
15827: GREATER
15828: AND
15829: IFFALSE 15846
15831: GO 15833
15833: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15834: LD_EXP 13
15838: PPUSH
15839: LD_STRING D5-Sol1-1
15841: PPUSH
15842: CALL_OW 88
// end ;
15846: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15847: LD_INT 22
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 33
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: PUSH
15876: LD_INT 2
15878: GREATEREQUAL
15879: IFFALSE 15899
15881: GO 15883
15883: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15884: LD_STRING MRa
15886: PPUSH
15887: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15891: LD_ADDR_EXP 28
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// end ;
15899: END
// every 0 0$10 do var i , last ;
15900: GO 15902
15902: DISABLE
15903: LD_INT 0
15905: PPUSH
15906: PPUSH
// begin last := 7 ;
15907: LD_ADDR_VAR 0 2
15911: PUSH
15912: LD_INT 7
15914: ST_TO_ADDR
// for i = 1 to last do
15915: LD_ADDR_VAR 0 1
15919: PUSH
15920: DOUBLE
15921: LD_INT 1
15923: DEC
15924: ST_TO_ADDR
15925: LD_VAR 0 2
15929: PUSH
15930: FOR_TO
15931: IFFALSE 15959
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15933: LD_INT 6300
15935: PPUSH
15936: LD_INT 14700
15938: PPUSH
15939: CALL_OW 12
15943: PPUSH
15944: CALL_OW 67
// PrepareRandoms ( i ) ;
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL 3971 0 1
// end ;
15957: GO 15930
15959: POP
15960: POP
// end ;
15961: PPOPN 2
15963: END
// every 5 5$20 do
15964: GO 15966
15966: DISABLE
// begin DialogueOn ;
15967: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15971: LD_EXP 10
15975: PPUSH
15976: LD_STRING D12a-Sci-1
15978: PPUSH
15979: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15983: LD_EXP 1
15987: PPUSH
15988: LD_STRING D12a-JMM-1
15990: PPUSH
15991: CALL_OW 88
// DialogueOff ;
15995: CALL_OW 7
// cratesStatus = 1 ;
15999: LD_ADDR_EXP 38
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// end ;
16007: END
// every 13 13$0 do
16008: GO 16010
16010: DISABLE
// begin DialogueOn ;
16011: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16015: LD_EXP 10
16019: PPUSH
16020: LD_STRING D12b-Sci-1
16022: PPUSH
16023: CALL_OW 94
// DialogueOff ;
16027: CALL_OW 7
// cratesStatus = 2 ;
16031: LD_ADDR_EXP 38
16035: PUSH
16036: LD_INT 2
16038: ST_TO_ADDR
// end ;
16039: END
// every 32 32$0 do
16040: GO 16042
16042: DISABLE
// begin DialogueOn ;
16043: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16047: LD_EXP 10
16051: PPUSH
16052: LD_STRING D12c-Sci-1
16054: PPUSH
16055: CALL_OW 94
// DialogueOff ;
16059: CALL_OW 7
// wait ( 3 3$0 ) ;
16063: LD_INT 6300
16065: PPUSH
16066: CALL_OW 67
// DialogueOn ;
16070: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16074: LD_EXP 10
16078: PPUSH
16079: LD_STRING D12d-Sci-1
16081: PPUSH
16082: CALL_OW 94
// DialogueOff ;
16086: CALL_OW 7
// cratesStatus = 1 ;
16090: LD_ADDR_EXP 38
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// end ;
16098: END
// every 42 42$0 do
16099: GO 16101
16101: DISABLE
// begin DialogueOn ;
16102: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16106: LD_EXP 10
16110: PPUSH
16111: LD_STRING D12e-Sci-1
16113: PPUSH
16114: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16118: LD_EXP 1
16122: PPUSH
16123: LD_STRING D12e-JMM-1
16125: PPUSH
16126: CALL_OW 88
// DialogueOff ;
16130: CALL_OW 7
// cratesStatus = 2 ;
16134: LD_ADDR_EXP 38
16138: PUSH
16139: LD_INT 2
16141: ST_TO_ADDR
// end ;
16142: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16143: LD_INT 22
16145: PUSH
16146: LD_INT 6
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 34
16165: PUSH
16166: LD_INT 51
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: PPUSH
16178: CALL_OW 69
16182: PUSH
16183: LD_INT 0
16185: GREATER
16186: IFFALSE 16269
16188: GO 16190
16190: DISABLE
16191: LD_INT 0
16193: PPUSH
// begin enable ;
16194: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_INT 22
16202: PUSH
16203: LD_INT 6
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: PUSH
16247: FOR_IN
16248: IFFALSE 16267
// ComAgressiveMove ( i , 138 , 168 ) ;
16250: LD_VAR 0 1
16254: PPUSH
16255: LD_INT 138
16257: PPUSH
16258: LD_INT 168
16260: PPUSH
16261: CALL_OW 114
16265: GO 16247
16267: POP
16268: POP
// end ;
16269: PPOPN 1
16271: END
// every 0 0$1 do var i ;
16272: GO 16274
16274: DISABLE
16275: LD_INT 0
16277: PPUSH
// begin enable ;
16278: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16279: LD_ADDR_VAR 0 1
16283: PUSH
16284: LD_INT 4
16286: PPUSH
16287: LD_INT 2
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_INT 6
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: PPUSH
16318: CALL_OW 70
16322: PUSH
16323: FOR_IN
16324: IFFALSE 16388
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16326: LD_INT 4
16328: PPUSH
16329: LD_INT 22
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 34
16341: PUSH
16342: LD_INT 51
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 70
16357: PUSH
16358: LD_INT 0
16360: GREATER
16361: IFFALSE 16377
// sendedConvoys = sendedConvoys + 1 ;
16363: LD_ADDR_EXP 39
16367: PUSH
16368: LD_EXP 39
16372: PUSH
16373: LD_INT 1
16375: PLUS
16376: ST_TO_ADDR
// RemoveUnit ( i ) ;
16377: LD_VAR 0 1
16381: PPUSH
16382: CALL_OW 64
// end ;
16386: GO 16323
16388: POP
16389: POP
// end ; end_of_file
16390: PPOPN 1
16392: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16393: LD_VAR 0 1
16397: PUSH
16398: LD_INT 1
16400: EQUAL
16401: PUSH
16402: LD_VAR 0 2
16406: PUSH
16407: LD_INT 3
16409: EQUAL
16410: AND
16411: IFFALSE 16421
// contactWithRussian = 1 ;
16413: LD_ADDR_EXP 22
16417: PUSH
16418: LD_INT 1
16420: ST_TO_ADDR
// end ;
16421: PPOPN 2
16423: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 266
16433: PUSH
16434: LD_INT 36
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 255
16447: PUSH
16448: LD_INT 1
16450: EQUAL
16451: AND
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 21
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 33
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: PUSH
16493: LD_INT 0
16495: EQUAL
16496: AND
16497: PUSH
16498: LD_EXP 23
16502: PUSH
16503: LD_INT 0
16505: EQUAL
16506: AND
16507: IFFALSE 16587
// begin firstTower = 1 ;
16509: LD_ADDR_EXP 23
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16517: LD_INT 22
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 25
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 26
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: PPUSH
16563: CALL_OW 69
16567: PUSH
16568: LD_EXP 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: DIFF
16576: PPUSH
16577: LD_STRING D3b-Mech1-1
16579: PPUSH
16580: LD_STRING D3b-Mech1-1
16582: PPUSH
16583: CALL 5925 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 266
16596: PUSH
16597: LD_INT 0
16599: EQUAL
16600: PUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 255
16610: PUSH
16611: LD_INT 1
16613: EQUAL
16614: AND
16615: IFFALSE 16629
// SetBName ( building , theta ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_STRING theta
16624: PPUSH
16625: CALL_OW 500
// if GetSide ( building ) = 3 then
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 255
16638: PUSH
16639: LD_INT 3
16641: EQUAL
16642: IFFALSE 16716
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16644: LD_ADDR_EXP 31
16648: PUSH
16649: LD_EXP 31
16653: PPUSH
16654: LD_INT 1
16656: PPUSH
16657: CALL_OW 3
16661: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16662: LD_ADDR_EXP 31
16666: PUSH
16667: LD_EXP 31
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 3
16679: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16680: LD_ADDR_EXP 31
16684: PUSH
16685: LD_EXP 31
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 3
16697: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16698: LD_ADDR_EXP 31
16702: PUSH
16703: LD_EXP 31
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 3
16715: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 255
16725: PUSH
16726: LD_INT 3
16728: EQUAL
16729: PUSH
16730: LD_VAR 0 1
16734: PPUSH
16735: CALL_OW 266
16739: PUSH
16740: LD_INT 0
16742: EQUAL
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 266
16753: PUSH
16754: LD_INT 2
16756: EQUAL
16757: OR
16758: PUSH
16759: LD_VAR 0 1
16763: PPUSH
16764: CALL_OW 266
16768: PUSH
16769: LD_INT 4
16771: EQUAL
16772: OR
16773: PUSH
16774: EMPTY
16775: LIST
16776: AND
16777: IFFALSE 16788
// ComUpgrade ( building ) ;
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 255
16797: PUSH
16798: LD_INT 3
16800: EQUAL
16801: PUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 266
16811: PUSH
16812: LD_INT 32
16814: EQUAL
16815: AND
16816: IFFALSE 16857
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_INT 42
16825: PUSH
16826: LD_INT 43
16828: PUSH
16829: LD_INT 44
16831: PUSH
16832: LD_INT 46
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 4
16846: PPUSH
16847: CALL_OW 12
16851: ARRAY
16852: PPUSH
16853: CALL_OW 208
// end ; end ;
16857: PPOPN 1
16859: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
16860: LD_VAR 0 1
16864: PUSH
16865: LD_EXP 1
16869: EQUAL
16870: IFFALSE 16879
// YouLost ( JMM ) ;
16872: LD_STRING JMM
16874: PPUSH
16875: CALL_OW 104
// if unit = Joan then
16879: LD_VAR 0 1
16883: PUSH
16884: LD_EXP 15
16888: EQUAL
16889: IFFALSE 16899
// JoanStatus = 0 ;
16891: LD_ADDR_EXP 16
16895: PUSH
16896: LD_INT 0
16898: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 255
16908: PUSH
16909: LD_INT 1
16911: EQUAL
16912: PUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 247
16922: PUSH
16923: LD_INT 1
16925: EQUAL
16926: AND
16927: IFFALSE 17003
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16929: LD_VAR 0 1
16933: PPUSH
16934: CALL_OW 257
16938: PUSH
16939: LD_INT 1
16941: EQUAL
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 257
16952: PUSH
16953: LD_INT 2
16955: EQUAL
16956: OR
16957: PUSH
16958: LD_VAR 0 1
16962: PPUSH
16963: CALL_OW 257
16967: PUSH
16968: LD_INT 3
16970: EQUAL
16971: OR
16972: PUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: CALL_OW 257
16982: PUSH
16983: LD_INT 4
16985: EQUAL
16986: OR
16987: IFFALSE 17003
// unitLost = unitLost + 1 ;
16989: LD_ADDR_EXP 30
16993: PUSH
16994: LD_EXP 30
16998: PUSH
16999: LD_INT 1
17001: PLUS
17002: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 255
17012: PUSH
17013: LD_INT 3
17015: EQUAL
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: CALL_OW 247
17026: PUSH
17027: LD_INT 3
17029: EQUAL
17030: AND
17031: IFFALSE 17723
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17033: LD_VAR 0 1
17037: PPUSH
17038: CALL_OW 266
17042: PUSH
17043: LD_INT 31
17045: EQUAL
17046: PUSH
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 266
17056: PUSH
17057: LD_INT 32
17059: EQUAL
17060: OR
17061: PUSH
17062: LD_VAR 0 1
17066: PPUSH
17067: CALL_OW 266
17071: PUSH
17072: LD_INT 36
17074: EQUAL
17075: OR
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 266
17086: PUSH
17087: LD_INT 0
17089: EQUAL
17090: OR
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 266
17101: PUSH
17102: LD_INT 24
17104: EQUAL
17105: OR
17106: PUSH
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 266
17116: PUSH
17117: LD_INT 17
17119: EQUAL
17120: OR
17121: PUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 266
17131: PUSH
17132: LD_INT 25
17134: EQUAL
17135: OR
17136: PUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 266
17146: PUSH
17147: LD_INT 19
17149: EQUAL
17150: OR
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 266
17161: PUSH
17162: LD_INT 20
17164: EQUAL
17165: OR
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 266
17176: PUSH
17177: LD_INT 18
17179: EQUAL
17180: OR
17181: PUSH
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 266
17191: PUSH
17192: LD_INT 21
17194: EQUAL
17195: OR
17196: PUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 266
17206: PUSH
17207: LD_INT 23
17209: EQUAL
17210: OR
17211: PUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 266
17221: PUSH
17222: LD_INT 16
17224: EQUAL
17225: OR
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 266
17236: PUSH
17237: LD_INT 6
17239: EQUAL
17240: OR
17241: PUSH
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 266
17251: PUSH
17252: LD_INT 29
17254: EQUAL
17255: OR
17256: PUSH
17257: LD_VAR 0 1
17261: PPUSH
17262: CALL_OW 266
17266: PUSH
17267: LD_INT 26
17269: EQUAL
17270: OR
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 266
17281: PUSH
17282: LD_INT 30
17284: EQUAL
17285: OR
17286: PUSH
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 266
17296: PUSH
17297: LD_INT 28
17299: EQUAL
17300: OR
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 266
17311: PUSH
17312: LD_INT 27
17314: EQUAL
17315: OR
17316: PUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 266
17326: PUSH
17327: LD_INT 33
17329: EQUAL
17330: OR
17331: PUSH
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 266
17341: PUSH
17342: LD_INT 2
17344: EQUAL
17345: OR
17346: PUSH
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 266
17356: PUSH
17357: LD_INT 4
17359: EQUAL
17360: OR
17361: IFFALSE 17447
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17363: LD_ADDR_EXP 31
17367: PUSH
17368: LD_EXP 31
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 266
17382: ADD
17383: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17384: LD_ADDR_EXP 31
17388: PUSH
17389: LD_EXP 31
17393: PUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 250
17403: ADD
17404: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17405: LD_ADDR_EXP 31
17409: PUSH
17410: LD_EXP 31
17414: PUSH
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 251
17424: ADD
17425: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17426: LD_ADDR_EXP 31
17430: PUSH
17431: LD_EXP 31
17435: PUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 254
17445: ADD
17446: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 266
17456: PUSH
17457: LD_INT 1
17459: EQUAL
17460: IFFALSE 17539
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17462: LD_ADDR_EXP 31
17466: PUSH
17467: LD_EXP 31
17471: PUSH
17472: LD_INT 0
17474: ADD
17475: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17476: LD_ADDR_EXP 31
17480: PUSH
17481: LD_EXP 31
17485: PUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 250
17495: ADD
17496: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17497: LD_ADDR_EXP 31
17501: PUSH
17502: LD_EXP 31
17506: PUSH
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 251
17516: ADD
17517: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17518: LD_ADDR_EXP 31
17522: PUSH
17523: LD_EXP 31
17527: PUSH
17528: LD_VAR 0 1
17532: PPUSH
17533: CALL_OW 254
17537: ADD
17538: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17539: LD_VAR 0 1
17543: PPUSH
17544: CALL_OW 266
17548: PUSH
17549: LD_INT 3
17551: EQUAL
17552: IFFALSE 17631
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17554: LD_ADDR_EXP 31
17558: PUSH
17559: LD_EXP 31
17563: PUSH
17564: LD_INT 2
17566: ADD
17567: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17568: LD_ADDR_EXP 31
17572: PUSH
17573: LD_EXP 31
17577: PUSH
17578: LD_VAR 0 1
17582: PPUSH
17583: CALL_OW 250
17587: ADD
17588: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17589: LD_ADDR_EXP 31
17593: PUSH
17594: LD_EXP 31
17598: PUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: CALL_OW 251
17608: ADD
17609: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17610: LD_ADDR_EXP 31
17614: PUSH
17615: LD_EXP 31
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 254
17629: ADD
17630: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17631: LD_VAR 0 1
17635: PPUSH
17636: CALL_OW 266
17640: PUSH
17641: LD_INT 5
17643: EQUAL
17644: IFFALSE 17723
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17646: LD_ADDR_EXP 31
17650: PUSH
17651: LD_EXP 31
17655: PUSH
17656: LD_INT 4
17658: ADD
17659: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17660: LD_ADDR_EXP 31
17664: PUSH
17665: LD_EXP 31
17669: PUSH
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 250
17679: ADD
17680: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17681: LD_ADDR_EXP 31
17685: PUSH
17686: LD_EXP 31
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 251
17700: ADD
17701: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17702: LD_ADDR_EXP 31
17706: PUSH
17707: LD_EXP 31
17711: PUSH
17712: LD_VAR 0 1
17716: PPUSH
17717: CALL_OW 254
17721: ADD
17722: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 257
17732: PUSH
17733: LD_INT 3
17735: EQUAL
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 255
17746: PUSH
17747: LD_INT 3
17749: EQUAL
17750: AND
17751: PUSH
17752: LD_INT 21
17754: PPUSH
17755: CALL_OW 302
17759: AND
17760: PUSH
17761: LD_INT 21
17763: PPUSH
17764: CALL_OW 255
17768: PUSH
17769: LD_INT 3
17771: EQUAL
17772: AND
17773: IFFALSE 17841
// begin uc_side = 3 ;
17775: LD_ADDR_OWVAR 20
17779: PUSH
17780: LD_INT 3
17782: ST_TO_ADDR
// uc_nation = 3 ;
17783: LD_ADDR_OWVAR 21
17787: PUSH
17788: LD_INT 3
17790: ST_TO_ADDR
// hc_gallery :=  ;
17791: LD_ADDR_OWVAR 33
17795: PUSH
17796: LD_STRING 
17798: ST_TO_ADDR
// hc_name :=  ;
17799: LD_ADDR_OWVAR 26
17803: PUSH
17804: LD_STRING 
17806: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17807: LD_INT 0
17809: PPUSH
17810: LD_EXP 34
17814: PPUSH
17815: LD_EXP 35
17819: PPUSH
17820: CALL_OW 12
17824: PPUSH
17825: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17829: CALL_OW 44
17833: PPUSH
17834: LD_INT 21
17836: PPUSH
17837: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17841: LD_VAR 0 1
17845: PPUSH
17846: CALL_OW 255
17850: PUSH
17851: LD_INT 3
17853: EQUAL
17854: PUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 264
17864: PUSH
17865: LD_INT 52
17867: EQUAL
17868: AND
17869: PUSH
17870: LD_INT 21
17872: PPUSH
17873: CALL_OW 302
17877: AND
17878: PUSH
17879: LD_INT 21
17881: PPUSH
17882: CALL_OW 255
17886: PUSH
17887: LD_INT 3
17889: EQUAL
17890: AND
17891: IFFALSE 17912
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17893: LD_INT 21
17895: PPUSH
17896: LD_INT 22
17898: PPUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_INT 1
17904: PPUSH
17905: LD_INT 52
17907: PPUSH
17908: CALL_OW 125
// end ;
17912: PPOPN 1
17914: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17915: LD_INT 0
17917: PPUSH
17918: PPUSH
17919: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17920: LD_VAR 0 1
17924: PPUSH
17925: CALL_OW 264
17929: PUSH
17930: LD_INT 51
17932: EQUAL
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 255
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: AND
17948: IFFALSE 18010
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17950: LD_ADDR_VAR 0 5
17954: PUSH
17955: LD_INT 2
17957: PPUSH
17958: CALL_OW 274
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 275
17970: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17971: LD_INT 2
17973: PPUSH
17974: CALL_OW 274
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: LD_VAR 0 5
17986: PUSH
17987: LD_INT 100
17989: MINUS
17990: PPUSH
17991: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17995: LD_VAR 0 1
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: LD_INT 100
18005: PPUSH
18006: CALL_OW 291
// end ; if building = rufabsupp then
18010: LD_VAR 0 2
18014: PUSH
18015: LD_INT 17
18017: EQUAL
18018: IFFALSE 18032
// SetSide ( vehicle , 6 ) ;
18020: LD_VAR 0 1
18024: PPUSH
18025: LD_INT 6
18027: PPUSH
18028: CALL_OW 235
// end ;
18032: PPOPN 5
18034: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 255
18044: PUSH
18045: LD_INT 3
18047: EQUAL
18048: IFFALSE 18079
// begin tamedApemans = tamedApemans + 1 ;
18050: LD_ADDR_EXP 32
18054: PUSH
18055: LD_EXP 32
18059: PUSH
18060: LD_INT 1
18062: PLUS
18063: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18064: LD_VAR 0 1
18068: PPUSH
18069: LD_INT 106
18071: PPUSH
18072: LD_INT 85
18074: PPUSH
18075: CALL_OW 111
// end ; end ;
18079: PPOPN 2
18081: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18082: LD_INT 0
18084: PPUSH
18085: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 255
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 247
18109: PUSH
18110: LD_INT 2
18112: EQUAL
18113: AND
18114: IFFALSE 18223
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18116: LD_VAR 0 1
18120: PPUSH
18121: CALL_OW 264
18125: PUSH
18126: LD_INT 42
18128: EQUAL
18129: PUSH
18130: LD_VAR 0 1
18134: PPUSH
18135: CALL_OW 264
18139: PUSH
18140: LD_INT 43
18142: EQUAL
18143: OR
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 264
18154: PUSH
18155: LD_INT 44
18157: EQUAL
18158: OR
18159: PUSH
18160: LD_VAR 0 1
18164: PPUSH
18165: CALL_OW 264
18169: PUSH
18170: LD_INT 46
18172: EQUAL
18173: OR
18174: IFFALSE 18223
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18176: LD_INT 21
18178: PPUSH
18179: LD_VAR 0 1
18183: PPUSH
18184: CALL_OW 265
18188: PPUSH
18189: LD_VAR 0 1
18193: PPUSH
18194: CALL_OW 262
18198: PPUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 263
18208: PPUSH
18209: LD_VAR 0 1
18213: PPUSH
18214: CALL_OW 264
18218: PPUSH
18219: CALL_OW 185
// end ;
18223: PPOPN 3
18225: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 255
18235: PUSH
18236: LD_INT 3
18238: EQUAL
18239: PUSH
18240: LD_VAR 0 2
18244: PPUSH
18245: CALL_OW 255
18249: PUSH
18250: LD_INT 3
18252: EQUAL
18253: AND
18254: PUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 302
18264: AND
18265: IFFALSE 18307
// begin ComRepairVehicle ( human , vehicle ) ;
18267: LD_VAR 0 2
18271: PPUSH
18272: LD_VAR 0 1
18276: PPUSH
18277: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18281: LD_VAR 0 2
18285: PPUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18295: LD_VAR 0 1
18299: PPUSH
18300: LD_INT 100
18302: PPUSH
18303: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 255
18316: PUSH
18317: LD_INT 3
18319: EQUAL
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: CALL_OW 255
18330: PUSH
18331: LD_INT 3
18333: EQUAL
18334: AND
18335: PUSH
18336: LD_INT 21
18338: PPUSH
18339: CALL_OW 302
18343: AND
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 302
18354: NOT
18355: AND
18356: IFFALSE 18370
// ComEnterUnit ( human , rufab ) ;
18358: LD_VAR 0 2
18362: PPUSH
18363: LD_INT 21
18365: PPUSH
18366: CALL_OW 120
// end ;
18370: PPOPN 2
18372: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18373: LD_VAR 0 1
18377: PUSH
18378: LD_INT 21
18380: EQUAL
18381: PUSH
18382: LD_VAR 0 2
18386: PPUSH
18387: CALL_OW 255
18391: PUSH
18392: LD_INT 3
18394: EQUAL
18395: AND
18396: IFFALSE 18410
// SetLives ( human , 1000 ) ;
18398: LD_VAR 0 2
18402: PPUSH
18403: LD_INT 1000
18405: PPUSH
18406: CALL_OW 234
// end ; end_of_file
18410: PPOPN 2
18412: END
// every 0 0$30 trigger cratesStatus = 1 do
18413: LD_EXP 38
18417: PUSH
18418: LD_INT 1
18420: EQUAL
18421: IFFALSE 18504
18423: GO 18425
18425: DISABLE
// begin enable ;
18426: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18427: LD_INT 350
18429: PUSH
18430: LD_INT 1050
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: PPUSH
18440: LD_INT 2
18442: PPUSH
18443: CALL_OW 12
18447: ARRAY
18448: PPUSH
18449: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18453: LD_INT 4
18455: PUSH
18456: LD_INT 5
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 1
18465: PPUSH
18466: LD_INT 2
18468: PPUSH
18469: CALL_OW 12
18473: ARRAY
18474: PPUSH
18475: LD_INT 6
18477: PUSH
18478: LD_INT 7
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: PPUSH
18488: LD_INT 2
18490: PPUSH
18491: CALL_OW 12
18495: ARRAY
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 55
// end ;
18504: END
// every 1 1$0 trigger cratesStatus = 2 do
18505: LD_EXP 38
18509: PUSH
18510: LD_INT 2
18512: EQUAL
18513: IFFALSE 18596
18515: GO 18517
18517: DISABLE
// begin enable ;
18518: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18519: LD_INT 3150
18521: PUSH
18522: LD_INT 4550
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 1
18531: PPUSH
18532: LD_INT 2
18534: PPUSH
18535: CALL_OW 12
18539: ARRAY
18540: PPUSH
18541: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18545: LD_INT 2
18547: PUSH
18548: LD_INT 5
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: PPUSH
18558: LD_INT 2
18560: PPUSH
18561: CALL_OW 12
18565: ARRAY
18566: PPUSH
18567: LD_INT 6
18569: PUSH
18570: LD_INT 7
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PPUSH
18580: LD_INT 2
18582: PPUSH
18583: CALL_OW 12
18587: ARRAY
18588: PPUSH
18589: LD_INT 1
18591: PPUSH
18592: CALL_OW 55
// end ;
18596: END
// every 0 0$30 + 0 0$10 do
18597: GO 18599
18599: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18600: LD_INT 4
18602: PUSH
18603: LD_INT 5
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: PPUSH
18613: LD_INT 2
18615: PPUSH
18616: CALL_OW 12
18620: ARRAY
18621: PPUSH
18622: LD_INT 7
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 55
// Wait ( 0 0$15 ) ;
18632: LD_INT 525
18634: PPUSH
18635: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18639: LD_INT 4
18641: PUSH
18642: LD_INT 5
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: PPUSH
18652: LD_INT 2
18654: PPUSH
18655: CALL_OW 12
18659: ARRAY
18660: PPUSH
18661: LD_INT 7
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: CALL_OW 55
// Wait ( 0 0$20 ) ;
18671: LD_INT 700
18673: PPUSH
18674: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18678: LD_INT 4
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PPUSH
18691: LD_INT 2
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 7
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 55
// end ; end_of_file
18710: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18711: LD_EXP 24
18715: PUSH
18716: LD_INT 1
18718: EQUAL
18719: IFFALSE 19020
18721: GO 18723
18723: DISABLE
18724: LD_INT 0
18726: PPUSH
18727: PPUSH
18728: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18729: LD_ADDR_VAR 0 2
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 30
18759: PUSH
18760: LD_INT 0
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 30
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: ST_TO_ADDR
// for i in tmp do
18792: LD_ADDR_VAR 0 1
18796: PUSH
18797: LD_VAR 0 2
18801: PUSH
18802: FOR_IN
18803: IFFALSE 18836
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18805: LD_ADDR_VAR 0 3
18809: PUSH
18810: LD_VAR 0 3
18814: PUSH
18815: LD_VAR 0 1
18819: PPUSH
18820: CALL_OW 274
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL_OW 275
18832: PLUS
18833: ST_TO_ADDR
18834: GO 18802
18836: POP
18837: POP
// strings = [ ] ;
18838: LD_ADDR_EXP 27
18842: PUSH
18843: EMPTY
18844: ST_TO_ADDR
// if tmp = 0 then
18845: LD_VAR 0 2
18849: PUSH
18850: LD_INT 0
18852: EQUAL
18853: IFFALSE 18878
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18855: LD_ADDR_EXP 27
18859: PUSH
18860: LD_EXP 27
18864: PUSH
18865: LD_STRING #Am06-1
18867: PUSH
18868: LD_EXP 25
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: ADD
18877: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18878: LD_VAR 0 2
18882: PUSH
18883: LD_INT 0
18885: GREATER
18886: PUSH
18887: LD_EXP 25
18891: PUSH
18892: LD_VAR 0 3
18896: GREATER
18897: AND
18898: IFFALSE 18929
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18900: LD_ADDR_EXP 27
18904: PUSH
18905: LD_EXP 27
18909: PUSH
18910: LD_STRING #Am06-1
18912: PUSH
18913: LD_EXP 25
18917: PUSH
18918: LD_VAR 0 3
18922: MINUS
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: ADD
18928: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18929: LD_VAR 0 2
18933: PUSH
18934: LD_INT 0
18936: GREATER
18937: PUSH
18938: LD_EXP 25
18942: PUSH
18943: LD_VAR 0 3
18947: LESSEQUAL
18948: AND
18949: IFFALSE 18972
// strings = strings ^ [ #Am06-1 , 0 ] ;
18951: LD_ADDR_EXP 27
18955: PUSH
18956: LD_EXP 27
18960: PUSH
18961: LD_STRING #Am06-1
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: ADD
18971: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18972: LD_ADDR_EXP 26
18976: PUSH
18977: LD_EXP 26
18981: PUSH
18982: LD_INT 35
18984: MINUS
18985: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18986: LD_ADDR_EXP 27
18990: PUSH
18991: LD_EXP 27
18995: PUSH
18996: LD_STRING #Am06-2
18998: PUSH
18999: LD_EXP 26
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: ADD
19008: ST_TO_ADDR
// display_strings = strings ;
19009: LD_ADDR_OWVAR 47
19013: PUSH
19014: LD_EXP 27
19018: ST_TO_ADDR
// enable ;
19019: ENABLE
// end ; end_of_file
19020: PPOPN 3
19022: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: LD_INT 22
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: LD_INT 30
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: CALL_OW 69
19083: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19084: LD_INT 35
19086: PPUSH
19087: CALL_OW 67
// until depot ;
19091: LD_VAR 0 3
19095: IFFALSE 19032
// repeat wait ( 0 0$1 ) ;
19097: LD_INT 35
19099: PPUSH
19100: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19104: LD_ADDR_VAR 0 4
19108: PUSH
19109: LD_INT 22
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 91
19121: PUSH
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 1
19129: ARRAY
19130: PUSH
19131: LD_INT 15
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 2
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 3
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 25
19184: PUSH
19185: LD_INT 4
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: LD_INT 54
19204: PUSH
19205: EMPTY
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: LD_INT 55
19217: PUSH
19218: EMPTY
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 69
19237: PUSH
19238: LD_EXP 2
19242: PUSH
19243: LD_EXP 3
19247: PUSH
19248: LD_EXP 4
19252: PUSH
19253: LD_EXP 5
19257: PUSH
19258: LD_EXP 7
19262: PUSH
19263: LD_EXP 8
19267: PUSH
19268: LD_EXP 9
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: PUSH
19282: LD_EXP 46
19286: ADD
19287: DIFF
19288: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19289: LD_VAR 0 4
19293: PUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 463
19301: NOT
19302: AND
19303: IFFALSE 19097
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19305: LD_ADDR_VAR 0 4
19309: PUSH
19310: LD_VAR 0 4
19314: PUSH
19315: LD_INT 1
19317: PPUSH
19318: LD_VAR 0 4
19322: PPUSH
19323: CALL_OW 12
19327: ARRAY
19328: ST_TO_ADDR
// blockSpawn = 1 ;
19329: LD_ADDR_EXP 29
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// uc_side = 2 ;
19337: LD_ADDR_OWVAR 20
19341: PUSH
19342: LD_INT 2
19344: ST_TO_ADDR
// uc_nation = 2 ;
19345: LD_ADDR_OWVAR 21
19349: PUSH
19350: LD_INT 2
19352: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19353: LD_ADDR_EXP 19
19357: PUSH
19358: LD_STRING Kurt
19360: PPUSH
19361: LD_INT 0
19363: PPUSH
19364: CALL 5862 0 2
19368: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19369: LD_EXP 19
19373: PPUSH
19374: LD_VAR 0 4
19378: PPUSH
19379: CALL_OW 250
19383: PPUSH
19384: LD_VAR 0 4
19388: PPUSH
19389: CALL_OW 251
19393: PPUSH
19394: LD_INT 5
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 50
// InGameOn ;
19404: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19408: LD_EXP 19
19412: PPUSH
19413: CALL_OW 87
// wait ( 0 0$2 ) ;
19417: LD_INT 70
19419: PPUSH
19420: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19424: LD_EXP 19
19428: PPUSH
19429: LD_VAR 0 4
19433: PPUSH
19434: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19438: LD_VAR 0 4
19442: PPUSH
19443: LD_EXP 19
19447: PPUSH
19448: CALL_OW 112
// wait ( 0 0$1 ) ;
19452: LD_INT 35
19454: PPUSH
19455: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19459: LD_VAR 0 4
19463: PPUSH
19464: LD_EXP 19
19468: PPUSH
19469: CALL_OW 119
// DialogueOn ;
19473: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19477: LD_EXP 19
19481: PPUSH
19482: LD_STRING D2-Kurt-1
19484: PPUSH
19485: CALL_OW 88
// if tmp = JMM then
19489: LD_VAR 0 4
19493: PUSH
19494: LD_EXP 1
19498: EQUAL
19499: IFFALSE 19591
// begin Say ( JMM , D2-JMM-1 ) ;
19501: LD_EXP 1
19505: PPUSH
19506: LD_STRING D2-JMM-1
19508: PPUSH
19509: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19513: LD_EXP 19
19517: PPUSH
19518: LD_STRING D2-Kurt-2
19520: PPUSH
19521: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19525: LD_EXP 1
19529: PPUSH
19530: LD_STRING D2-JMM-2
19532: PPUSH
19533: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19537: LD_EXP 19
19541: PPUSH
19542: LD_STRING D2-Kurt-3
19544: PPUSH
19545: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19549: LD_EXP 1
19553: PPUSH
19554: LD_STRING D2-JMM-3
19556: PPUSH
19557: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19561: LD_EXP 19
19565: PPUSH
19566: LD_STRING D2-Kurt-4
19568: PPUSH
19569: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19573: LD_EXP 1
19577: PPUSH
19578: LD_STRING D2-JMM-4
19580: PPUSH
19581: CALL_OW 88
// DialogueOff ;
19585: CALL_OW 7
// end else
19589: GO 19901
// begin if GetSex ( tmp ) = 1 then
19591: LD_VAR 0 4
19595: PPUSH
19596: CALL_OW 258
19600: PUSH
19601: LD_INT 1
19603: EQUAL
19604: IFFALSE 19618
// Say ( tmp , D2-Sol1-1 ) ;
19606: LD_VAR 0 4
19610: PPUSH
19611: LD_STRING D2-Sol1-1
19613: PPUSH
19614: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19618: LD_VAR 0 4
19622: PPUSH
19623: CALL_OW 258
19627: PUSH
19628: LD_INT 2
19630: EQUAL
19631: IFFALSE 19645
// Say ( tmp , D2-FSol1-1 ) ;
19633: LD_VAR 0 4
19637: PPUSH
19638: LD_STRING D2-FSol1-1
19640: PPUSH
19641: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19645: LD_EXP 19
19649: PPUSH
19650: LD_STRING D2-Kurt-2
19652: PPUSH
19653: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19657: LD_VAR 0 4
19661: PPUSH
19662: CALL_OW 258
19666: PUSH
19667: LD_INT 1
19669: EQUAL
19670: IFFALSE 19684
// Say ( tmp , D2-Sol1-2 ) ;
19672: LD_VAR 0 4
19676: PPUSH
19677: LD_STRING D2-Sol1-2
19679: PPUSH
19680: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19684: LD_VAR 0 4
19688: PPUSH
19689: CALL_OW 258
19693: PUSH
19694: LD_INT 2
19696: EQUAL
19697: IFFALSE 19711
// Say ( tmp , D2-FSol1-2 ) ;
19699: LD_VAR 0 4
19703: PPUSH
19704: LD_STRING D2-FSol1-2
19706: PPUSH
19707: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19711: LD_EXP 19
19715: PPUSH
19716: LD_STRING D2-Kurt-3
19718: PPUSH
19719: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19723: LD_VAR 0 4
19727: PPUSH
19728: CALL_OW 258
19732: PUSH
19733: LD_INT 1
19735: EQUAL
19736: IFFALSE 19750
// Say ( tmp , D2-Sol1-3 ) ;
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_STRING D2-Sol1-3
19745: PPUSH
19746: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 258
19759: PUSH
19760: LD_INT 2
19762: EQUAL
19763: IFFALSE 19777
// Say ( tmp , D2-FSol1-3 ) ;
19765: LD_VAR 0 4
19769: PPUSH
19770: LD_STRING D2-FSol1-3
19772: PPUSH
19773: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19777: LD_EXP 19
19781: PPUSH
19782: LD_STRING D2-Kurt-4
19784: PPUSH
19785: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19789: LD_VAR 0 4
19793: PPUSH
19794: CALL_OW 258
19798: PUSH
19799: LD_INT 1
19801: EQUAL
19802: IFFALSE 19816
// Say ( tmp , D2-Sol1-4 ) ;
19804: LD_VAR 0 4
19808: PPUSH
19809: LD_STRING D2-Sol1-4
19811: PPUSH
19812: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19816: LD_VAR 0 4
19820: PPUSH
19821: CALL_OW 258
19825: PUSH
19826: LD_INT 2
19828: EQUAL
19829: IFFALSE 19843
// Say ( tmp , D2-FSol1-4 ) ;
19831: LD_VAR 0 4
19835: PPUSH
19836: LD_STRING D2-FSol1-4
19838: PPUSH
19839: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19843: LD_VAR 0 4
19847: PPUSH
19848: CALL_OW 258
19852: PUSH
19853: LD_INT 1
19855: EQUAL
19856: IFFALSE 19870
// Say ( tmp , D2-Sol1-5 ) ;
19858: LD_VAR 0 4
19862: PPUSH
19863: LD_STRING D2-Sol1-5
19865: PPUSH
19866: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19870: LD_VAR 0 4
19874: PPUSH
19875: CALL_OW 258
19879: PUSH
19880: LD_INT 2
19882: EQUAL
19883: IFFALSE 19897
// Say ( tmp , D2-FSol1-5 ) ;
19885: LD_VAR 0 4
19889: PPUSH
19890: LD_STRING D2-FSol1-5
19892: PPUSH
19893: CALL_OW 88
// DialogueOff ;
19897: CALL_OW 7
// end ; dec = ShowQuery1 ;
19901: LD_ADDR_VAR 0 6
19905: PUSH
19906: CALL 6386 0 0
19910: ST_TO_ADDR
// if dec = 1 then
19911: LD_VAR 0 6
19915: PUSH
19916: LD_INT 1
19918: EQUAL
19919: IFFALSE 19961
// begin DialogueOn ;
19921: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19925: LD_EXP 19
19929: PPUSH
19930: LD_STRING D2a-Kurt-1
19932: PPUSH
19933: CALL_OW 88
// DialogueOff ;
19937: CALL_OW 7
// InGameOff ;
19941: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19945: LD_INT 1
19947: PPUSH
19948: LD_INT 2
19950: PPUSH
19951: LD_INT 2
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: CALL_OW 80
// end ; if dec = 2 then
19961: LD_VAR 0 6
19965: PUSH
19966: LD_INT 2
19968: EQUAL
19969: IFFALSE 20469
// begin DialogueOn ;
19971: CALL_OW 6
// if tmp = JMM then
19975: LD_VAR 0 4
19979: PUSH
19980: LD_EXP 1
19984: EQUAL
19985: IFFALSE 20041
// begin Say ( JMM , D2b-JMM-1 ) ;
19987: LD_EXP 1
19991: PPUSH
19992: LD_STRING D2b-JMM-1
19994: PPUSH
19995: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19999: LD_EXP 19
20003: PPUSH
20004: LD_STRING D2b-Kurt-1
20006: PPUSH
20007: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20011: LD_EXP 1
20015: PPUSH
20016: LD_STRING D2b-JMM-2
20018: PPUSH
20019: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20023: LD_EXP 19
20027: PPUSH
20028: LD_STRING D2b-Kurt-2
20030: PPUSH
20031: CALL_OW 88
// DialogueOff ;
20035: CALL_OW 7
// end else
20039: GO 20231
// begin if GetSex ( tmp ) = 1 then
20041: LD_VAR 0 4
20045: PPUSH
20046: CALL_OW 258
20050: PUSH
20051: LD_INT 1
20053: EQUAL
20054: IFFALSE 20068
// Say ( tmp , D2b-Sol1-1 ) ;
20056: LD_VAR 0 4
20060: PPUSH
20061: LD_STRING D2b-Sol1-1
20063: PPUSH
20064: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20068: LD_VAR 0 4
20072: PPUSH
20073: CALL_OW 258
20077: PUSH
20078: LD_INT 2
20080: EQUAL
20081: IFFALSE 20095
// Say ( tmp , D2b-FSol1-1 ) ;
20083: LD_VAR 0 4
20087: PPUSH
20088: LD_STRING D2b-FSol1-1
20090: PPUSH
20091: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20095: LD_EXP 19
20099: PPUSH
20100: LD_STRING D2b-Kurt-1
20102: PPUSH
20103: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20107: LD_VAR 0 4
20111: PPUSH
20112: CALL_OW 258
20116: PUSH
20117: LD_INT 1
20119: EQUAL
20120: IFFALSE 20134
// Say ( tmp , D2b-Sol1-2 ) ;
20122: LD_VAR 0 4
20126: PPUSH
20127: LD_STRING D2b-Sol1-2
20129: PPUSH
20130: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20134: LD_VAR 0 4
20138: PPUSH
20139: CALL_OW 258
20143: PUSH
20144: LD_INT 2
20146: EQUAL
20147: IFFALSE 20161
// Say ( tmp , D2b-FSol1-2 ) ;
20149: LD_VAR 0 4
20153: PPUSH
20154: LD_STRING D2b-FSol1-2
20156: PPUSH
20157: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20161: LD_EXP 19
20165: PPUSH
20166: LD_STRING D2b-Kurt-2
20168: PPUSH
20169: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20173: LD_VAR 0 4
20177: PPUSH
20178: CALL_OW 258
20182: PUSH
20183: LD_INT 1
20185: EQUAL
20186: IFFALSE 20200
// Say ( tmp , D2c-Sol1-2 ) ;
20188: LD_VAR 0 4
20192: PPUSH
20193: LD_STRING D2c-Sol1-2
20195: PPUSH
20196: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20200: LD_VAR 0 4
20204: PPUSH
20205: CALL_OW 258
20209: PUSH
20210: LD_INT 2
20212: EQUAL
20213: IFFALSE 20227
// Say ( tmp , D2c-FSol1-2 ) ;
20215: LD_VAR 0 4
20219: PPUSH
20220: LD_STRING D2c-FSol1-2
20222: PPUSH
20223: CALL_OW 88
// DialogueOff ;
20227: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20231: LD_ADDR_VAR 0 7
20235: PUSH
20236: CALL 6460 0 0
20240: ST_TO_ADDR
// if dec2 = 1 then
20241: LD_VAR 0 7
20245: PUSH
20246: LD_INT 1
20248: EQUAL
20249: IFFALSE 20291
// begin DialogueOn ;
20251: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20255: LD_EXP 19
20259: PPUSH
20260: LD_STRING D2a-Kurt-1
20262: PPUSH
20263: CALL_OW 88
// DialogueOff ;
20267: CALL_OW 7
// InGameOff ;
20271: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20275: LD_INT 1
20277: PPUSH
20278: LD_INT 2
20280: PPUSH
20281: LD_INT 2
20283: PPUSH
20284: LD_INT 1
20286: PPUSH
20287: CALL_OW 80
// end ; if dec2 = 2 then
20291: LD_VAR 0 7
20295: PUSH
20296: LD_INT 2
20298: EQUAL
20299: IFFALSE 20469
// begin if tmp = JMM then
20301: LD_VAR 0 4
20305: PUSH
20306: LD_EXP 1
20310: EQUAL
20311: IFFALSE 20371
// begin DialogueOn ;
20313: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20317: LD_EXP 1
20321: PPUSH
20322: LD_STRING D2c-JMM-1
20324: PPUSH
20325: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20329: LD_EXP 19
20333: PPUSH
20334: LD_STRING D2c-Kurt-1
20336: PPUSH
20337: CALL_OW 88
// DialogueOff ;
20341: CALL_OW 7
// InGameOff ;
20345: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20349: LD_EXP 19
20353: PPUSH
20354: LD_INT 8
20356: PPUSH
20357: CALL_OW 113
// readyToEscape = 1 ;
20361: LD_ADDR_EXP 21
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// end else
20369: GO 20469
// begin DialogueOn ;
20371: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20375: LD_VAR 0 4
20379: PPUSH
20380: CALL_OW 258
20384: PUSH
20385: LD_INT 1
20387: EQUAL
20388: IFFALSE 20402
// Say ( tmp , D2c-Sol1-1 ) ;
20390: LD_VAR 0 4
20394: PPUSH
20395: LD_STRING D2c-Sol1-1
20397: PPUSH
20398: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20402: LD_VAR 0 4
20406: PPUSH
20407: CALL_OW 258
20411: PUSH
20412: LD_INT 2
20414: EQUAL
20415: IFFALSE 20429
// Say ( tmp , D2c-FSol1-1 ) ;
20417: LD_VAR 0 4
20421: PPUSH
20422: LD_STRING D2c-FSol1-1
20424: PPUSH
20425: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20429: LD_EXP 19
20433: PPUSH
20434: LD_STRING D2c-Kurt-1
20436: PPUSH
20437: CALL_OW 88
// DialogueOff ;
20441: CALL_OW 7
// InGameOff ;
20445: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20449: LD_EXP 19
20453: PPUSH
20454: LD_INT 8
20456: PPUSH
20457: CALL_OW 113
// readyToEscape = 1 ;
20461: LD_ADDR_EXP 21
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20469: LD_VAR 0 6
20473: PUSH
20474: LD_INT 3
20476: EQUAL
20477: IFFALSE 20651
// begin DialogueOn ;
20479: CALL_OW 6
// if tmp = JMM then
20483: LD_VAR 0 4
20487: PUSH
20488: LD_EXP 1
20492: EQUAL
20493: IFFALSE 20553
// begin DialogueOn ;
20495: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20499: LD_EXP 1
20503: PPUSH
20504: LD_STRING D2c-JMM-1
20506: PPUSH
20507: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20511: LD_EXP 19
20515: PPUSH
20516: LD_STRING D2c-Kurt-1
20518: PPUSH
20519: CALL_OW 88
// DialogueOff ;
20523: CALL_OW 7
// InGameOff ;
20527: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20531: LD_EXP 19
20535: PPUSH
20536: LD_INT 8
20538: PPUSH
20539: CALL_OW 113
// readyToEscape = 1 ;
20543: LD_ADDR_EXP 21
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// end else
20551: GO 20651
// begin DialogueOn ;
20553: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20557: LD_VAR 0 4
20561: PPUSH
20562: CALL_OW 258
20566: PUSH
20567: LD_INT 1
20569: EQUAL
20570: IFFALSE 20584
// Say ( tmp , D2c-Sol1-1 ) ;
20572: LD_VAR 0 4
20576: PPUSH
20577: LD_STRING D2c-Sol1-1
20579: PPUSH
20580: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20584: LD_VAR 0 4
20588: PPUSH
20589: CALL_OW 258
20593: PUSH
20594: LD_INT 2
20596: EQUAL
20597: IFFALSE 20611
// Say ( tmp , D2c-FSol1-1 ) ;
20599: LD_VAR 0 4
20603: PPUSH
20604: LD_STRING D2c-FSol1-1
20606: PPUSH
20607: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20611: LD_EXP 19
20615: PPUSH
20616: LD_STRING D2c-Kurt-1
20618: PPUSH
20619: CALL_OW 88
// DialogueOff ;
20623: CALL_OW 7
// InGameOff ;
20627: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20631: LD_EXP 19
20635: PPUSH
20636: LD_INT 8
20638: PPUSH
20639: CALL_OW 113
// readyToEscape = 1 ;
20643: LD_ADDR_EXP 21
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20651: LD_ADDR_EXP 29
20655: PUSH
20656: LD_INT 0
20658: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20659: LD_INT 35
20661: PPUSH
20662: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20666: LD_EXP 19
20670: PPUSH
20671: LD_INT 8
20673: PPUSH
20674: CALL_OW 308
20678: PUSH
20679: LD_EXP 21
20683: AND
20684: PUSH
20685: LD_EXP 19
20689: PPUSH
20690: CALL_OW 301
20694: OR
20695: IFFALSE 20659
// if IsDead ( Kurt ) then
20697: LD_EXP 19
20701: PPUSH
20702: CALL_OW 301
20706: IFFALSE 20710
// exit ;
20708: GO 20779
// RemoveUnit ( Kurt ) ;
20710: LD_EXP 19
20714: PPUSH
20715: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20719: LD_EXP 19
20723: PPUSH
20724: LD_STRING Kurt
20726: PPUSH
20727: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20731: LD_INT 1
20733: PPUSH
20734: LD_INT 2
20736: PPUSH
20737: CALL_OW 81
20741: PUSH
20742: LD_INT 0
20744: EQUAL
20745: IFFALSE 20755
// KurtStatus = 1 ;
20747: LD_ADDR_EXP 20
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20755: LD_INT 1
20757: PPUSH
20758: LD_INT 2
20760: PPUSH
20761: CALL_OW 81
20765: PUSH
20766: LD_INT 2
20768: EQUAL
20769: IFFALSE 20779
// KurtStatus = 2 ;
20771: LD_ADDR_EXP 20
20775: PUSH
20776: LD_INT 2
20778: ST_TO_ADDR
// end ; end_of_file
20779: LD_VAR 0 1
20783: RET
// every 0 0$1 do
20784: GO 20786
20786: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20787: LD_INT 3
20789: PPUSH
20790: LD_INT 32
20792: PPUSH
20793: LD_INT 3
20795: PPUSH
20796: CALL 6515 0 3
20800: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20801: GO 20803
20803: DISABLE
20804: LD_INT 0
20806: PPUSH
// begin enemyWayX = [ ] ;
20807: LD_ADDR_EXP 47
20811: PUSH
20812: EMPTY
20813: ST_TO_ADDR
// enemyWayY = [ ] ;
20814: LD_ADDR_EXP 48
20818: PUSH
20819: EMPTY
20820: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20821: LD_ADDR_VAR 0 1
20825: PUSH
20826: LD_INT 1
20828: PPUSH
20829: LD_INT 2
20831: PPUSH
20832: CALL_OW 12
20836: ST_TO_ADDR
// if rnd = 1 then
20837: LD_VAR 0 1
20841: PUSH
20842: LD_INT 1
20844: EQUAL
20845: IFFALSE 20885
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20847: LD_ADDR_EXP 47
20851: PUSH
20852: LD_INT 93
20854: PUSH
20855: LD_INT 84
20857: PUSH
20858: LD_INT 104
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20866: LD_ADDR_EXP 48
20870: PUSH
20871: LD_INT 51
20873: PUSH
20874: LD_INT 35
20876: PUSH
20877: LD_INT 28
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: ST_TO_ADDR
// end ; if rnd = 2 then
20885: LD_VAR 0 1
20889: PUSH
20890: LD_INT 2
20892: EQUAL
20893: IFFALSE 20949
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20895: LD_ADDR_EXP 47
20899: PUSH
20900: LD_INT 93
20902: PUSH
20903: LD_INT 52
20905: PUSH
20906: LD_INT 34
20908: PUSH
20909: LD_INT 28
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20922: LD_ADDR_EXP 48
20926: PUSH
20927: LD_INT 51
20929: PUSH
20930: LD_INT 45
20932: PUSH
20933: LD_INT 35
20935: PUSH
20936: LD_INT 26
20938: PUSH
20939: LD_INT 20
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: ST_TO_ADDR
// end ; enable ;
20949: ENABLE
// end ;
20950: PPOPN 1
20952: END
// every 0 0$1 do
20953: GO 20955
20955: DISABLE
// begin enable ;
20956: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20957: LD_INT 3
20959: PPUSH
20960: LD_INT 2
20962: PPUSH
20963: LD_INT 10
20965: PPUSH
20966: LD_EXP 31
20970: PPUSH
20971: CALL 7950 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20975: LD_INT 3
20977: PPUSH
20978: LD_INT 12
20980: PPUSH
20981: LD_EXP 31
20985: PPUSH
20986: CALL 9835 0 3
// if disableHealAI = 0 then
20990: LD_EXP 33
20994: PUSH
20995: LD_INT 0
20997: EQUAL
20998: IFFALSE 21019
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21000: LD_INT 3
21002: PPUSH
21003: LD_INT 9
21005: PPUSH
21006: LD_INT 10
21008: PPUSH
21009: LD_INT 32
21011: PUSH
21012: EMPTY
21013: LIST
21014: PPUSH
21015: CALL 8341 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21019: LD_INT 3
21021: PPUSH
21022: LD_INT 51
21024: PPUSH
21025: LD_INT 6
21027: PPUSH
21028: CALL 9049 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21032: LD_INT 3
21034: PPUSH
21035: LD_INT 12
21037: PPUSH
21038: LD_INT 121
21040: PPUSH
21041: LD_INT 100
21043: PPUSH
21044: CALL 6910 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21048: LD_INT 3
21050: PPUSH
21051: LD_INT 22
21053: PPUSH
21054: LD_EXP 47
21058: PPUSH
21059: LD_EXP 48
21063: PPUSH
21064: CALL 7113 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21068: LD_INT 3
21070: PPUSH
21071: LD_INT 10
21073: PPUSH
21074: CALL 9192 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21078: LD_INT 3
21080: PPUSH
21081: LD_INT 1
21083: PPUSH
21084: CALL 9605 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21088: LD_INT 2
21090: PPUSH
21091: CALL_OW 303
21095: PUSH
21096: LD_INT 2
21098: PPUSH
21099: CALL_OW 255
21103: PUSH
21104: LD_INT 1
21106: EQUAL
21107: OR
21108: IFFALSE 21120
// DefendDepot ( 3 , rudepo ) ;
21110: LD_INT 3
21112: PPUSH
21113: LD_INT 2
21115: PPUSH
21116: CALL 8885 0 2
// end ;
21120: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21121: LD_INT 22
21123: PUSH
21124: LD_INT 3
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 55
21143: PUSH
21144: EMPTY
21145: LIST
21146: PUSH
21147: LD_INT 3
21149: PUSH
21150: LD_INT 34
21152: PUSH
21153: LD_INT 51
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 69
21174: PUSH
21175: LD_INT 0
21177: EQUAL
21178: PUSH
21179: LD_INT 21
21181: PPUSH
21182: CALL_OW 255
21186: PUSH
21187: LD_INT 3
21189: EQUAL
21190: AND
21191: PUSH
21192: LD_INT 21
21194: PPUSH
21195: CALL_OW 302
21199: AND
21200: PUSH
21201: LD_INT 2
21203: PPUSH
21204: CALL_OW 255
21208: PUSH
21209: LD_INT 3
21211: EQUAL
21212: AND
21213: PUSH
21214: LD_INT 2
21216: PPUSH
21217: CALL_OW 302
21221: AND
21222: IFFALSE 21406
21224: GO 21226
21226: DISABLE
// begin enable ;
21227: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21228: LD_INT 2
21230: PPUSH
21231: CALL_OW 274
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: LD_INT 1000
21241: PPUSH
21242: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21246: LD_INT 3
21248: PPUSH
21249: LD_INT 21
21251: PPUSH
21252: LD_INT 5
21254: PUSH
21255: LD_INT 6
21257: PUSH
21258: LD_INT 6
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: PUSH
21266: LD_OWVAR 67
21270: ARRAY
21271: PPUSH
21272: LD_INT 43
21274: PUSH
21275: LD_INT 43
21277: PUSH
21278: LD_INT 44
21280: PUSH
21281: LD_INT 44
21283: PUSH
21284: LD_INT 46
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 43
21296: PUSH
21297: LD_INT 43
21299: PUSH
21300: LD_INT 43
21302: PUSH
21303: LD_INT 44
21305: PUSH
21306: LD_INT 44
21308: PUSH
21309: LD_INT 46
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 43
21322: PUSH
21323: LD_INT 43
21325: PUSH
21326: LD_INT 43
21328: PUSH
21329: LD_INT 44
21331: PUSH
21332: LD_INT 44
21334: PUSH
21335: LD_INT 46
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: PUSH
21351: LD_OWVAR 67
21355: ARRAY
21356: PPUSH
21357: LD_INT 1
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 22
21368: PUSH
21369: LD_INT 24
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PPUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 12
21386: ARRAY
21387: PUSH
21388: LD_INT 24
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: LD_OWVAR 67
21400: ARRAY
21401: PPUSH
21402: CALL 6756 0 7
// end ;
21406: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21407: LD_INT 17
21409: PPUSH
21410: CALL_OW 255
21414: PUSH
21415: LD_INT 3
21417: EQUAL
21418: PUSH
21419: LD_INT 17
21421: PPUSH
21422: CALL_OW 302
21426: AND
21427: PUSH
21428: LD_INT 2
21430: PPUSH
21431: CALL_OW 255
21435: PUSH
21436: LD_INT 3
21438: EQUAL
21439: AND
21440: PUSH
21441: LD_INT 2
21443: PPUSH
21444: CALL_OW 302
21448: AND
21449: IFFALSE 21516
21451: GO 21453
21453: DISABLE
// begin enable ;
21454: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21455: LD_INT 17
21457: PPUSH
21458: LD_INT 22
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: LD_INT 1
21466: PPUSH
21467: LD_INT 42
21469: PUSH
21470: LD_INT 43
21472: PUSH
21473: LD_INT 44
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_INT 3
21486: PPUSH
21487: CALL_OW 12
21491: ARRAY
21492: PPUSH
21493: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21497: LD_INT 17
21499: PPUSH
21500: LD_INT 22
21502: PPUSH
21503: LD_INT 1
21505: PPUSH
21506: LD_INT 1
21508: PPUSH
21509: LD_INT 51
21511: PPUSH
21512: CALL_OW 185
// end ;
21516: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21517: LD_INT 17
21519: PPUSH
21520: CALL_OW 302
21524: PUSH
21525: LD_INT 17
21527: PPUSH
21528: CALL_OW 255
21532: PUSH
21533: LD_INT 3
21535: EQUAL
21536: AND
21537: PUSH
21538: LD_INT 2
21540: PPUSH
21541: CALL_OW 302
21545: AND
21546: PUSH
21547: LD_INT 2
21549: PPUSH
21550: CALL_OW 255
21554: PUSH
21555: LD_INT 3
21557: EQUAL
21558: AND
21559: PUSH
21560: LD_INT 17
21562: PPUSH
21563: CALL_OW 313
21567: NOT
21568: AND
21569: IFFALSE 21663
21571: GO 21573
21573: DISABLE
21574: LD_INT 0
21576: PPUSH
// begin for i = 1 to 6 do
21577: LD_ADDR_VAR 0 1
21581: PUSH
21582: DOUBLE
21583: LD_INT 1
21585: DEC
21586: ST_TO_ADDR
21587: LD_INT 6
21589: PUSH
21590: FOR_TO
21591: IFFALSE 21661
// begin uc_side = 3 ;
21593: LD_ADDR_OWVAR 20
21597: PUSH
21598: LD_INT 3
21600: ST_TO_ADDR
// uc_nation = 3 ;
21601: LD_ADDR_OWVAR 21
21605: PUSH
21606: LD_INT 3
21608: ST_TO_ADDR
// hc_gallery :=  ;
21609: LD_ADDR_OWVAR 33
21613: PUSH
21614: LD_STRING 
21616: ST_TO_ADDR
// hc_name :=  ;
21617: LD_ADDR_OWVAR 26
21621: PUSH
21622: LD_STRING 
21624: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21625: LD_INT 0
21627: PPUSH
21628: LD_EXP 34
21632: PPUSH
21633: LD_EXP 35
21637: PPUSH
21638: CALL_OW 12
21642: PPUSH
21643: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21647: CALL_OW 44
21651: PPUSH
21652: LD_INT 17
21654: PPUSH
21655: CALL_OW 52
// end ;
21659: GO 21590
21661: POP
21662: POP
// end ;
21663: PPOPN 1
21665: END
// every 2 2$0 do var i , j ;
21666: GO 21668
21668: DISABLE
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21673: LD_INT 14700
21675: PUSH
21676: LD_INT 33600
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 1
21685: PPUSH
21686: LD_INT 2
21688: PPUSH
21689: CALL_OW 12
21693: ARRAY
21694: PPUSH
21695: CALL_OW 67
// disableHealAI = 1 ;
21699: LD_ADDR_EXP 33
21703: PUSH
21704: LD_INT 1
21706: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21707: LD_ADDR_VAR 0 1
21711: PUSH
21712: LD_INT 22
21714: PUSH
21715: LD_INT 3
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 4
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PPUSH
21736: CALL_OW 69
21740: PUSH
21741: FOR_IN
21742: IFFALSE 21755
// ComExitBuilding ( i ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 122
21753: GO 21741
21755: POP
21756: POP
// wait ( 0 0$1 ) ;
21757: LD_INT 35
21759: PPUSH
21760: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21764: LD_INT 35
21766: PPUSH
21767: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21771: LD_ADDR_VAR 0 1
21775: PUSH
21776: LD_INT 22
21778: PUSH
21779: LD_INT 3
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 25
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL_OW 69
21804: PUSH
21805: FOR_IN
21806: IFFALSE 21883
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_INT 17
21815: PPUSH
21816: LD_INT 22
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 25
21828: PUSH
21829: LD_INT 12
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PPUSH
21840: CALL_OW 70
21844: PUSH
21845: FOR_IN
21846: IFFALSE 21879
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_VAR 0 2
21857: PPUSH
21858: CALL_OW 250
21862: PPUSH
21863: LD_VAR 0 2
21867: PPUSH
21868: CALL_OW 251
21872: PPUSH
21873: CALL_OW 191
// end ;
21877: GO 21845
21879: POP
21880: POP
// end ;
21881: GO 21805
21883: POP
21884: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21885: LD_INT 22
21887: PUSH
21888: LD_INT 3
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 25
21897: PUSH
21898: LD_INT 4
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: PUSH
21914: LD_INT 0
21916: EQUAL
21917: PUSH
21918: LD_EXP 32
21922: PUSH
21923: LD_INT 6
21925: PUSH
21926: LD_INT 7
21928: PUSH
21929: LD_INT 8
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: LD_OWVAR 67
21941: ARRAY
21942: GREATEREQUAL
21943: OR
21944: PUSH
21945: LD_INT 17
21947: PPUSH
21948: LD_INT 22
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 25
21960: PUSH
21961: LD_INT 12
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 70
21976: PUSH
21977: LD_INT 0
21979: EQUAL
21980: OR
21981: IFFALSE 21764
// disableHealAI = 0 ;
21983: LD_ADDR_EXP 33
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21991: LD_ADDR_VAR 0 1
21995: PUSH
21996: LD_INT 22
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 25
22008: PUSH
22009: LD_INT 12
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PPUSH
22020: CALL_OW 69
22024: PUSH
22025: FOR_IN
22026: IFFALSE 22042
// SetClass ( i , 16 ) ;
22028: LD_VAR 0 1
22032: PPUSH
22033: LD_INT 16
22035: PPUSH
22036: CALL_OW 336
22040: GO 22025
22042: POP
22043: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22044: LD_ADDR_VAR 0 1
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 25
22061: PUSH
22062: LD_INT 4
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: CALL_OW 69
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22098
// ComMoveXY ( i , 113 , 94 ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_INT 113
22088: PPUSH
22089: LD_INT 94
22091: PPUSH
22092: CALL_OW 111
22096: GO 22078
22098: POP
22099: POP
// end ;
22100: PPOPN 2
22102: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22103: LD_INT 21
22105: PPUSH
22106: CALL_OW 255
22110: PUSH
22111: LD_INT 3
22113: EQUAL
22114: PUSH
22115: LD_INT 21
22117: PPUSH
22118: CALL_OW 302
22122: AND
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 3
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 34
22136: PUSH
22137: LD_INT 51
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PPUSH
22148: CALL_OW 69
22152: PUSH
22153: LD_INT 0
22155: EQUAL
22156: AND
22157: IFFALSE 22189
22159: GO 22161
22161: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22162: LD_INT 21
22164: PPUSH
22165: LD_INT 23
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: LD_INT 51
22176: PPUSH
22177: CALL_OW 185
// wait ( 5 5$0 ) ;
22181: LD_INT 10500
22183: PPUSH
22184: CALL_OW 67
// enable ;
22188: ENABLE
// end ; end_of_file
22189: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22190: LD_EXP 26
22194: PUSH
22195: LD_INT 0
22197: LESSEQUAL
22198: IFFALSE 22347
22200: GO 22202
22202: DISABLE
22203: LD_INT 0
22205: PPUSH
22206: PPUSH
22207: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 30
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 30
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: PPUSH
22266: CALL_OW 69
22270: ST_TO_ADDR
// for i in tmp do
22271: LD_ADDR_VAR 0 1
22275: PUSH
22276: LD_VAR 0 2
22280: PUSH
22281: FOR_IN
22282: IFFALSE 22315
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22284: LD_ADDR_VAR 0 3
22288: PUSH
22289: LD_VAR 0 3
22293: PUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL_OW 274
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: CALL_OW 275
22311: PLUS
22312: ST_TO_ADDR
22313: GO 22281
22315: POP
22316: POP
// if yourCrates >= needCrates then
22317: LD_VAR 0 3
22321: PUSH
22322: LD_EXP 25
22326: GREATEREQUAL
22327: IFFALSE 22340
// begin FinishMission ( yourCrates ) ;
22329: LD_VAR 0 3
22333: PPUSH
22334: CALL 22350 0 1
// end else
22338: GO 22347
// begin YouLost ( matmin ) ;
22340: LD_STRING matmin
22342: PPUSH
22343: CALL_OW 104
// end ; end ;
22347: PPOPN 3
22349: END
// export function FinishMission ( crates ) ; begin
22350: LD_INT 0
22352: PPUSH
// if crates + 100 > crates then
22353: LD_VAR 0 1
22357: PUSH
22358: LD_INT 100
22360: PLUS
22361: PUSH
22362: LD_VAR 0 1
22366: GREATER
22367: IFFALSE 22391
// begin AddMedal ( cans , 1 ) ;
22369: LD_STRING cans
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22379: LD_INT 1
22381: PPUSH
22382: LD_STRING 06_crates_1
22384: PPUSH
22385: CALL_OW 39
// end else
22389: GO 22412
// begin AddMedal ( cans , - 1 ) ;
22391: LD_STRING cans
22393: PPUSH
22394: LD_INT 1
22396: NEG
22397: PPUSH
22398: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22402: LD_INT 0
22404: PPUSH
22405: LD_STRING 06_crates_1
22407: PPUSH
22408: CALL_OW 39
// end ; if unitLost < 3 then
22412: LD_EXP 30
22416: PUSH
22417: LD_INT 3
22419: LESS
22420: IFFALSE 22434
// begin AddMedal ( people , 1 ) ;
22422: LD_STRING people
22424: PPUSH
22425: LD_INT 1
22427: PPUSH
22428: CALL_OW 101
// end else
22432: GO 22445
// begin AddMedal ( people , - 1 ) ;
22434: LD_STRING people
22436: PPUSH
22437: LD_INT 1
22439: NEG
22440: PPUSH
22441: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22445: LD_EXP 28
22449: PPUSH
22450: LD_STRING 06_remoteVehs_1
22452: PPUSH
22453: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22457: LD_EXP 28
22461: PUSH
22462: LD_INT 1
22464: EQUAL
22465: IFFALSE 22479
// begin AddMedal ( remote , 1 ) ;
22467: LD_STRING remote
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 101
// end else
22477: GO 22519
// begin if GetTech ( 18 , 1 ) = state_enabled then
22479: LD_INT 18
22481: PPUSH
22482: LD_INT 1
22484: PPUSH
22485: CALL_OW 321
22489: PUSH
22490: LD_INT 1
22492: EQUAL
22493: IFFALSE 22508
// begin AddMedal ( remote , - 1 ) ;
22495: LD_STRING remote
22497: PPUSH
22498: LD_INT 1
22500: NEG
22501: PPUSH
22502: CALL_OW 101
// end else
22506: GO 22519
// begin AddMedal ( remote , - 2 ) ;
22508: LD_STRING remote
22510: PPUSH
22511: LD_INT 2
22513: NEG
22514: PPUSH
22515: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22519: LD_EXP 20
22523: PPUSH
22524: LD_STRING 06_KurtStatus_1
22526: PPUSH
22527: CALL_OW 39
// GiveMedals ( Main ) ;
22531: LD_STRING Main
22533: PPUSH
22534: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22538: LD_INT 22
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 21
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 50
22560: PUSH
22561: EMPTY
22562: LIST
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: LD_INT 25
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 25
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 25
22589: PUSH
22590: LD_INT 3
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 25
22599: PUSH
22600: LD_INT 4
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PPUSH
22620: CALL_OW 69
22624: PPUSH
22625: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22629: LD_EXP 1
22633: PPUSH
22634: LD_EXP 43
22638: PUSH
22639: LD_STRING JMM
22641: STR
22642: PPUSH
22643: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22647: LD_EXP 2
22651: PPUSH
22652: LD_EXP 43
22656: PUSH
22657: LD_STRING Lisa
22659: STR
22660: PPUSH
22661: CALL 6014 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22665: LD_EXP 3
22669: PPUSH
22670: LD_EXP 43
22674: PUSH
22675: LD_STRING Bobby
22677: STR
22678: PPUSH
22679: CALL 6014 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22683: LD_EXP 4
22687: PPUSH
22688: LD_EXP 43
22692: PUSH
22693: LD_STRING Cyrus
22695: STR
22696: PPUSH
22697: CALL 6014 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22701: LD_EXP 5
22705: PPUSH
22706: LD_EXP 43
22710: PUSH
22711: LD_STRING Frank
22713: STR
22714: PPUSH
22715: CALL 6014 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22719: LD_EXP 6
22723: PPUSH
22724: LD_EXP 43
22728: PUSH
22729: LD_STRING Brown
22731: STR
22732: PPUSH
22733: CALL 6014 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22737: LD_EXP 7
22741: PPUSH
22742: LD_EXP 43
22746: PUSH
22747: LD_STRING Donaldson
22749: STR
22750: PPUSH
22751: CALL 6014 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22755: LD_EXP 8
22759: PPUSH
22760: LD_EXP 43
22764: PUSH
22765: LD_STRING Gladstone
22767: STR
22768: PPUSH
22769: CALL 6014 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22773: LD_EXP 9
22777: PPUSH
22778: LD_EXP 43
22782: PUSH
22783: LD_STRING Denis
22785: STR
22786: PPUSH
22787: CALL 6014 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22791: LD_EXP 15
22795: PPUSH
22796: LD_EXP 43
22800: PUSH
22801: LD_STRING Joan
22803: STR
22804: PPUSH
22805: CALL 6014 0 2
// if IsLive ( Joan ) then
22809: LD_EXP 15
22813: PPUSH
22814: CALL_OW 300
22818: IFFALSE 22832
// SaveCharacters ( Joan , Joan ) ;
22820: LD_EXP 15
22824: PPUSH
22825: LD_STRING Joan
22827: PPUSH
22828: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22832: LD_EXP 16
22836: PPUSH
22837: LD_STRING 06_JoanStatus_1
22839: PPUSH
22840: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22844: LD_INT 50
22846: PUSH
22847: EMPTY
22848: LIST
22849: PUSH
22850: LD_INT 22
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 21
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 25
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 25
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 25
22905: PUSH
22906: LD_INT 4
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 69
22930: PUSH
22931: LD_EXP 1
22935: PUSH
22936: LD_EXP 2
22940: PUSH
22941: LD_EXP 3
22945: PUSH
22946: LD_EXP 4
22950: PUSH
22951: LD_EXP 5
22955: PUSH
22956: LD_EXP 6
22960: PUSH
22961: LD_EXP 7
22965: PUSH
22966: LD_EXP 8
22970: PUSH
22971: LD_EXP 9
22975: PUSH
22976: LD_EXP 15
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: DIFF
22993: PPUSH
22994: LD_STRING 06_other_survivors
22996: PPUSH
22997: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23001: LD_INT 50
23003: PUSH
23004: EMPTY
23005: LIST
23006: PUSH
23007: LD_INT 22
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: LD_INT 25
23032: PUSH
23033: LD_INT 12
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 25
23042: PUSH
23043: LD_INT 16
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: PPUSH
23066: LD_STRING 06_other_apemans
23068: PPUSH
23069: CALL_OW 38
// YouWin ;
23073: CALL_OW 103
// end ; end_of_file
23077: LD_VAR 0 2
23081: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23082: LD_EXP 39
23086: PUSH
23087: LD_INT 3
23089: EQUAL
23090: IFFALSE 23205
23092: GO 23094
23094: DISABLE
// begin enable ;
23095: ENABLE
// sendedConvoys = 0 ;
23096: LD_ADDR_EXP 39
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23104: LD_INT 6
23106: PPUSH
23107: LD_INT 3
23109: PPUSH
23110: LD_INT 5
23112: PPUSH
23113: LD_INT 10
23115: PPUSH
23116: CALL_OW 12
23120: PUSH
23121: LD_INT 5
23123: PPUSH
23124: LD_INT 11
23126: PPUSH
23127: CALL_OW 12
23131: PUSH
23132: LD_INT 8
23134: PPUSH
23135: LD_INT 12
23137: PPUSH
23138: CALL_OW 12
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: PUSH
23148: LD_OWVAR 67
23152: ARRAY
23153: PPUSH
23154: LD_INT 0
23156: PPUSH
23157: LD_INT 0
23159: PPUSH
23160: LD_INT 0
23162: PPUSH
23163: LD_INT 0
23165: PPUSH
23166: LD_EXP 34
23170: PPUSH
23171: LD_EXP 35
23175: PPUSH
23176: CALL_OW 12
23180: PPUSH
23181: LD_INT 16
23183: PPUSH
23184: LD_INT 15
23186: PPUSH
23187: LD_INT 1
23189: PPUSH
23190: LD_INT 1
23192: PPUSH
23193: LD_INT 2
23195: PPUSH
23196: CALL_OW 12
23200: PPUSH
23201: CALL 10433 0 12
// end ; end_of_file
23205: END
// export function PrepareNature ; var i , un ; begin
23206: LD_INT 0
23208: PPUSH
23209: PPUSH
23210: PPUSH
// for i = 1 to Difficulty + 2 do
23211: LD_ADDR_VAR 0 2
23215: PUSH
23216: DOUBLE
23217: LD_INT 1
23219: DEC
23220: ST_TO_ADDR
23221: LD_OWVAR 67
23225: PUSH
23226: LD_INT 2
23228: PLUS
23229: PUSH
23230: FOR_TO
23231: IFFALSE 23340
// begin hc_sex = sex_male ;
23233: LD_ADDR_OWVAR 27
23237: PUSH
23238: LD_INT 1
23240: ST_TO_ADDR
// uc_side = 0 ;
23241: LD_ADDR_OWVAR 20
23245: PUSH
23246: LD_INT 0
23248: ST_TO_ADDR
// uc_nation = nation_nature ;
23249: LD_ADDR_OWVAR 21
23253: PUSH
23254: LD_INT 0
23256: ST_TO_ADDR
// hc_class = class_tiger ;
23257: LD_ADDR_OWVAR 28
23261: PUSH
23262: LD_INT 14
23264: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23265: LD_ADDR_OWVAR 31
23269: PUSH
23270: LD_EXP 35
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 0
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23290: LD_ADDR_OWVAR 35
23294: PUSH
23295: LD_INT 5
23297: NEG
23298: PPUSH
23299: LD_INT 5
23301: PPUSH
23302: CALL_OW 12
23306: PUSH
23307: LD_OWVAR 67
23311: MUL
23312: ST_TO_ADDR
// un = CreateHuman ;
23313: LD_ADDR_VAR 0 3
23317: PUSH
23318: CALL_OW 44
23322: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 18
23330: PPUSH
23331: LD_INT 0
23333: PPUSH
23334: CALL_OW 49
// end ;
23338: GO 23230
23340: POP
23341: POP
// for i = 1 to rand ( 3 , 4 ) do
23342: LD_ADDR_VAR 0 2
23346: PUSH
23347: DOUBLE
23348: LD_INT 1
23350: DEC
23351: ST_TO_ADDR
23352: LD_INT 3
23354: PPUSH
23355: LD_INT 4
23357: PPUSH
23358: CALL_OW 12
23362: PUSH
23363: FOR_TO
23364: IFFALSE 23458
// begin hc_sex = sex_male ;
23366: LD_ADDR_OWVAR 27
23370: PUSH
23371: LD_INT 1
23373: ST_TO_ADDR
// uc_side = 0 ;
23374: LD_ADDR_OWVAR 20
23378: PUSH
23379: LD_INT 0
23381: ST_TO_ADDR
// uc_nation = nation_nature ;
23382: LD_ADDR_OWVAR 21
23386: PUSH
23387: LD_INT 0
23389: ST_TO_ADDR
// hc_class = 18 ;
23390: LD_ADDR_OWVAR 28
23394: PUSH
23395: LD_INT 18
23397: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23398: LD_ADDR_OWVAR 31
23402: PUSH
23403: LD_EXP 35
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: ST_TO_ADDR
// hc_agressivity = 0 ;
23423: LD_ADDR_OWVAR 35
23427: PUSH
23428: LD_INT 0
23430: ST_TO_ADDR
// un = CreateHuman ;
23431: LD_ADDR_VAR 0 3
23435: PUSH
23436: CALL_OW 44
23440: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23441: LD_VAR 0 3
23445: PPUSH
23446: LD_INT 18
23448: PPUSH
23449: LD_INT 0
23451: PPUSH
23452: CALL_OW 49
// end ;
23456: GO 23363
23458: POP
23459: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: DOUBLE
23466: LD_INT 1
23468: DEC
23469: ST_TO_ADDR
23470: LD_INT 1
23472: PPUSH
23473: LD_INT 3
23475: PPUSH
23476: CALL_OW 12
23480: PUSH
23481: LD_OWVAR 67
23485: PLUS
23486: PUSH
23487: FOR_TO
23488: IFFALSE 23637
// begin hc_sex = sex_male ;
23490: LD_ADDR_OWVAR 27
23494: PUSH
23495: LD_INT 1
23497: ST_TO_ADDR
// uc_side = 0 ;
23498: LD_ADDR_OWVAR 20
23502: PUSH
23503: LD_INT 0
23505: ST_TO_ADDR
// uc_nation = nation_nature ;
23506: LD_ADDR_OWVAR 21
23510: PUSH
23511: LD_INT 0
23513: ST_TO_ADDR
// hc_class = class_apeman ;
23514: LD_ADDR_OWVAR 28
23518: PUSH
23519: LD_INT 12
23521: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23522: LD_ADDR_OWVAR 31
23526: PUSH
23527: LD_INT 2
23529: PPUSH
23530: LD_INT 5
23532: PPUSH
23533: CALL_OW 12
23537: PUSH
23538: LD_INT 0
23540: PPUSH
23541: LD_INT 2
23543: PPUSH
23544: CALL_OW 12
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23561: LD_ADDR_OWVAR 35
23565: PUSH
23566: LD_INT 20
23568: PPUSH
23569: LD_INT 30
23571: PPUSH
23572: CALL_OW 12
23576: PUSH
23577: LD_INT 30
23579: PPUSH
23580: LD_INT 40
23582: PPUSH
23583: CALL_OW 12
23587: PUSH
23588: LD_INT 40
23590: PPUSH
23591: LD_INT 50
23593: PPUSH
23594: CALL_OW 12
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: LD_OWVAR 67
23608: ARRAY
23609: ST_TO_ADDR
// un = CreateHuman ;
23610: LD_ADDR_VAR 0 3
23614: PUSH
23615: CALL_OW 44
23619: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23620: LD_VAR 0 3
23624: PPUSH
23625: LD_INT 19
23627: PPUSH
23628: LD_INT 0
23630: PPUSH
23631: CALL_OW 49
// end ;
23635: GO 23487
23637: POP
23638: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: DOUBLE
23645: LD_INT 1
23647: DEC
23648: ST_TO_ADDR
23649: LD_INT 5
23651: PPUSH
23652: LD_INT 6
23654: PPUSH
23655: CALL_OW 12
23659: PUSH
23660: LD_OWVAR 67
23664: PLUS
23665: PUSH
23666: FOR_TO
23667: IFFALSE 23775
// begin hc_sex = sex_male ;
23669: LD_ADDR_OWVAR 27
23673: PUSH
23674: LD_INT 1
23676: ST_TO_ADDR
// uc_side = 0 ;
23677: LD_ADDR_OWVAR 20
23681: PUSH
23682: LD_INT 0
23684: ST_TO_ADDR
// uc_nation = nation_nature ;
23685: LD_ADDR_OWVAR 21
23689: PUSH
23690: LD_INT 0
23692: ST_TO_ADDR
// hc_class = class_apeman ;
23693: LD_ADDR_OWVAR 28
23697: PUSH
23698: LD_INT 12
23700: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23701: LD_ADDR_OWVAR 31
23705: PUSH
23706: LD_INT 2
23708: PPUSH
23709: LD_INT 5
23711: PPUSH
23712: CALL_OW 12
23716: PUSH
23717: LD_INT 0
23719: PPUSH
23720: LD_INT 2
23722: PPUSH
23723: CALL_OW 12
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: ST_TO_ADDR
// hc_agressivity = 0 ;
23740: LD_ADDR_OWVAR 35
23744: PUSH
23745: LD_INT 0
23747: ST_TO_ADDR
// un = CreateHuman ;
23748: LD_ADDR_VAR 0 3
23752: PUSH
23753: CALL_OW 44
23757: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23758: LD_VAR 0 3
23762: PPUSH
23763: LD_INT 20
23765: PPUSH
23766: LD_INT 0
23768: PPUSH
23769: CALL_OW 49
// end ;
23773: GO 23666
23775: POP
23776: POP
// end ; end_of_file
23777: LD_VAR 0 1
23781: RET
