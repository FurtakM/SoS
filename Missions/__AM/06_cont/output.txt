// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 19622 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9794 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 39288 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 39288 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 39288 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 39288 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 39288 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 39288 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 39288 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 39288 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 39288 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 39288 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 39288 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 76357 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: ST_TO_ADDR
// for i = 1 to list do
7439: LD_ADDR_VAR 0 5
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_VAR 0 7
7453: PUSH
7454: FOR_TO
7455: IFFALSE 7527
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7457: LD_VAR 0 7
7461: PUSH
7462: LD_VAR 0 5
7466: ARRAY
7467: PPUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 321
7477: PUSH
7478: LD_INT 1
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 7
7486: PUSH
7487: LD_VAR 0 5
7491: ARRAY
7492: PPUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 482
7502: AND
7503: IFFALSE 7525
// AddComResearch ( lab , list [ i ] ) ;
7505: LD_VAR 0 2
7509: PPUSH
7510: LD_VAR 0 7
7514: PUSH
7515: LD_VAR 0 5
7519: ARRAY
7520: PPUSH
7521: CALL_OW 184
7525: GO 7454
7527: POP
7528: POP
// end ;
7529: LD_VAR 0 4
7533: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7534: LD_INT 0
7536: PPUSH
7537: PPUSH
7538: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7539: LD_INT 22
7541: PUSH
7542: LD_VAR 0 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 69
7569: PUSH
7570: LD_VAR 0 3
7574: LESSEQUAL
7575: IFFALSE 7683
// begin for i = 1 to vehCount do
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: DOUBLE
7583: LD_INT 1
7585: DEC
7586: ST_TO_ADDR
7587: LD_VAR 0 3
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7681
// begin weapon := weaponTab [ i ] ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_VAR 0 4
7604: PUSH
7605: LD_VAR 0 9
7609: ARRAY
7610: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7611: LD_VAR 0 10
7615: PUSH
7616: LD_INT 46
7618: EQUAL
7619: IFFALSE 7650
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 24
7628: PPUSH
7629: LD_VAR 0 5
7633: PPUSH
7634: LD_VAR 0 6
7638: PPUSH
7639: LD_VAR 0 10
7643: PPUSH
7644: CALL_OW 185
7648: GO 7679
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7650: LD_VAR 0 2
7654: PPUSH
7655: LD_VAR 0 7
7659: PPUSH
7660: LD_VAR 0 5
7664: PPUSH
7665: LD_VAR 0 6
7669: PPUSH
7670: LD_VAR 0 10
7674: PPUSH
7675: CALL_OW 185
// end ;
7679: GO 7592
7681: POP
7682: POP
// end ; end ;
7683: LD_VAR 0 8
7687: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7688: LD_INT 0
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7696: LD_ADDR_VAR 0 8
7700: PUSH
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 313
7710: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7711: LD_ADDR_VAR 0 9
7715: PUSH
7716: LD_VAR 0 3
7720: PPUSH
7721: LD_INT 22
7723: PUSH
7724: LD_VAR 0 1
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 750
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 70
7776: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_VAR 0 3
7786: PPUSH
7787: LD_INT 22
7789: PUSH
7790: LD_VAR 0 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: LD_INT 24
7814: PUSH
7815: LD_INT 1000
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7839: LD_VAR 0 6
7843: NOT
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_VAR 0 1
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 2
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 24
7869: PUSH
7870: LD_INT 250
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: PPUSH
7882: CALL_OW 69
7886: NOT
7887: AND
7888: IFFALSE 7892
// exit ;
7890: GO 8050
// if buildingsList and engineerOkInside then
7892: LD_VAR 0 6
7896: PUSH
7897: LD_VAR 0 8
7901: AND
7902: IFFALSE 7913
// ComExitBuilding ( engineerOkInside ) ;
7904: LD_VAR 0 8
7908: PPUSH
7909: CALL_OW 122
// if buildingsList and engineerOkOutside then
7913: LD_VAR 0 6
7917: PUSH
7918: LD_VAR 0 9
7922: AND
7923: IFFALSE 7943
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7925: LD_VAR 0 9
7929: PPUSH
7930: LD_VAR 0 6
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 0
7950: EQUAL
7951: PUSH
7952: LD_VAR 0 4
7956: PUSH
7957: LD_INT 0
7959: EQUAL
7960: AND
7961: PUSH
7962: LD_VAR 0 9
7966: AND
7967: IFFALSE 7983
// ComEnterUnit ( engineerOkOutside , depot ) ;
7969: LD_VAR 0 9
7973: PPUSH
7974: LD_VAR 0 2
7978: PPUSH
7979: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
7983: LD_VAR 0 9
7987: PUSH
7988: LD_VAR 0 6
7992: PUSH
7993: LD_INT 0
7995: EQUAL
7996: AND
7997: PUSH
7998: LD_VAR 0 4
8002: AND
8003: IFFALSE 8050
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8005: LD_VAR 0 9
8009: PPUSH
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 4
8023: PUSH
8024: LD_INT 2
8026: ARRAY
8027: PPUSH
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: ARRAY
8036: PPUSH
8037: LD_VAR 0 4
8041: PUSH
8042: LD_INT 4
8044: ARRAY
8045: PPUSH
8046: CALL_OW 145
// end ;
8050: LD_VAR 0 5
8054: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8066: LD_ADDR_VAR 0 6
8070: PUSH
8071: LD_INT 22
8073: PUSH
8074: LD_VAR 0 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 4
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 23
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 24
8105: PUSH
8106: LD_INT 251
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8124: LD_ADDR_VAR 0 7
8128: PUSH
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_INT 22
8136: PUSH
8137: LD_VAR 0 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 23
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 70
8182: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8183: LD_ADDR_VAR 0 10
8187: PUSH
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_INT 22
8195: PUSH
8196: LD_VAR 0 1
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 21
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 25
8220: PUSH
8221: LD_INT 3
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 750
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 70
8259: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8260: LD_ADDR_VAR 0 11
8264: PUSH
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 22
8272: PUSH
8273: LD_VAR 0 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 21
8284: PUSH
8285: LD_INT 1
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 3
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 3
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 1000
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 70
8336: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8337: LD_VAR 0 10
8341: NOT
8342: PUSH
8343: LD_VAR 0 11
8347: NOT
8348: AND
8349: PUSH
8350: LD_VAR 0 6
8354: NOT
8355: AND
8356: IFFALSE 8360
// exit ;
8358: GO 8566
// if damageUnits and sci_list then
8360: LD_VAR 0 10
8364: PUSH
8365: LD_VAR 0 6
8369: AND
8370: IFFALSE 8386
// ComMoveToArea ( damageUnits , healArea ) ;
8372: LD_VAR 0 10
8376: PPUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: CALL_OW 113
// if unitsToHeal and sci_list then
8386: LD_VAR 0 11
8390: PUSH
8391: LD_VAR 0 6
8395: AND
8396: IFFALSE 8407
// ComExitBuilding ( sci_list ) ;
8398: LD_VAR 0 6
8402: PPUSH
8403: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8407: LD_VAR 0 11
8411: PUSH
8412: LD_VAR 0 7
8416: AND
8417: IFFALSE 8437
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8419: LD_VAR 0 7
8423: PPUSH
8424: LD_VAR 0 11
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PPUSH
8433: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8437: LD_VAR 0 10
8441: PUSH
8442: LD_INT 0
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 11
8450: PUSH
8451: LD_INT 0
8453: EQUAL
8454: AND
8455: PUSH
8456: LD_VAR 0 7
8460: AND
8461: IFFALSE 8566
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8463: LD_ADDR_VAR 0 12
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 30
8492: PUSH
8493: LD_INT 8
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 69
8509: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8510: LD_ADDR_VAR 0 13
8514: PUSH
8515: LD_INT 1
8517: PPUSH
8518: LD_VAR 0 12
8522: PPUSH
8523: CALL_OW 12
8527: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8528: LD_VAR 0 7
8532: PPUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 60
8538: PUSH
8539: EMPTY
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: PPUSH
8551: LD_VAR 0 12
8555: PUSH
8556: LD_VAR 0 13
8560: ARRAY
8561: PPUSH
8562: CALL_OW 120
// end ; end ;
8566: LD_VAR 0 5
8570: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
// tmp := [ ] ;
8578: LD_ADDR_VAR 0 6
8582: PUSH
8583: EMPTY
8584: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_VAR 0 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 32
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: ST_TO_ADDR
// if bunkers then
8621: LD_VAR 0 7
8625: IFFALSE 8695
// for i in bunkers do
8627: LD_ADDR_VAR 0 4
8631: PUSH
8632: LD_VAR 0 7
8636: PUSH
8637: FOR_IN
8638: IFFALSE 8693
// for j in UnitsInside ( i ) do
8640: LD_ADDR_VAR 0 5
8644: PUSH
8645: LD_VAR 0 4
8649: PPUSH
8650: CALL_OW 313
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8689
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8658: LD_ADDR_VAR 0 6
8662: PUSH
8663: LD_VAR 0 6
8667: PPUSH
8668: LD_VAR 0 6
8672: PUSH
8673: LD_INT 1
8675: PLUS
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 1
8686: ST_TO_ADDR
8687: GO 8655
8689: POP
8690: POP
8691: GO 8637
8693: POP
8694: POP
// if tmp then
8695: LD_VAR 0 6
8699: IFFALSE 8739
// begin ComExitBuilding ( tmp ) ;
8701: LD_VAR 0 6
8705: PPUSH
8706: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8710: LD_VAR 0 6
8714: PPUSH
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 250
8724: PPUSH
8725: LD_VAR 0 2
8729: PPUSH
8730: CALL_OW 251
8734: PPUSH
8735: CALL_OW 174
// end ; end ;
8739: LD_VAR 0 3
8743: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
// enable ;
8749: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8750: LD_ADDR_VAR 0 6
8754: PUSH
8755: LD_VAR 0 3
8759: PPUSH
8760: CALL_OW 435
8764: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 22
8772: PUSH
8773: LD_VAR 0 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 34
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8803: LD_VAR 0 5
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: CALL_OW 435
8817: AND
8818: PUSH
8819: LD_VAR 0 6
8823: AND
8824: IFFALSE 8857
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8826: LD_VAR 0 5
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: LD_VAR 0 6
8839: PUSH
8840: LD_INT 1
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 6
8848: PUSH
8849: LD_INT 2
8851: ARRAY
8852: PPUSH
8853: CALL_OW 177
// end ;
8857: LD_VAR 0 4
8861: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8862: LD_INT 0
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8872: LD_ADDR_VAR 0 6
8876: PUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 56
8896: PUSH
8897: EMPTY
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 700
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 60
8915: PUSH
8916: EMPTY
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: LD_INT 25
8928: PUSH
8929: LD_INT 1
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 5
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 70
8984: PUSH
8985: LD_EXP 47
8989: PUSH
8990: LD_EXP 48
8994: UNION
8995: DIFF
8996: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8997: LD_ADDR_VAR 0 7
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 22
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 30
9021: PUSH
9022: LD_INT 32
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 58
9031: PUSH
9032: EMPTY
9033: LIST
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: LD_INT 251
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_VAR 0 2
9065: PPUSH
9066: LD_INT 22
9068: PUSH
9069: LD_VAR 0 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 4
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 30
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 70
9125: ST_TO_ADDR
// if barrackList then
9126: LD_VAR 0 9
9130: IFFALSE 9286
// begin if turretList = 0 then
9132: LD_VAR 0 7
9136: PUSH
9137: LD_INT 0
9139: EQUAL
9140: IFFALSE 9178
// begin if soldiersList then
9142: LD_VAR 0 6
9146: IFFALSE 9176
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9148: LD_VAR 0 6
9152: PPUSH
9153: LD_VAR 0 9
9157: PUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_VAR 0 9
9165: PPUSH
9166: CALL_OW 12
9170: ARRAY
9171: PPUSH
9172: CALL_OW 120
// end else
9176: GO 9286
// begin for i in barrackList do
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_VAR 0 9
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9284
// begin if not turretList then
9191: LD_VAR 0 7
9195: NOT
9196: IFFALSE 9202
// exit ;
9198: POP
9199: POP
9200: GO 9286
// insideUnits = UnitsInside ( i ) ;
9202: LD_ADDR_VAR 0 10
9206: PUSH
9207: LD_VAR 0 4
9211: PPUSH
9212: CALL_OW 313
9216: ST_TO_ADDR
// if insideUnits then
9217: LD_VAR 0 10
9221: IFFALSE 9282
// begin tmp := insideUnits [ 1 ] ;
9223: LD_ADDR_VAR 0 8
9227: PUSH
9228: LD_VAR 0 10
9232: PUSH
9233: LD_INT 1
9235: ARRAY
9236: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9246: LD_VAR 0 8
9250: PPUSH
9251: LD_VAR 0 7
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9264: LD_ADDR_VAR 0 7
9268: PUSH
9269: LD_VAR 0 7
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: CALL_OW 3
9281: ST_TO_ADDR
// end ; end ;
9282: GO 9188
9284: POP
9285: POP
// end ; end ; end ;
9286: LD_VAR 0 3
9290: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
9296: PPUSH
9297: PPUSH
9298: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9299: LD_ADDR_VAR 0 8
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_VAR 0 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 34
9328: PUSH
9329: LD_INT 52
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: ST_TO_ADDR
// if not craneList then
9346: LD_VAR 0 8
9350: NOT
9351: IFFALSE 9355
// exit ;
9353: GO 9789
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 21
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 3
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 1000
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9412: LD_VAR 0 9
9416: PUSH
9417: LD_VAR 0 8
9421: PPUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 750
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 72
9436: AND
9437: IFFALSE 9472
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9439: LD_VAR 0 8
9443: PPUSH
9444: LD_INT 24
9446: PUSH
9447: LD_INT 750
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 72
9458: PPUSH
9459: LD_VAR 0 9
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9472: LD_VAR 0 8
9476: PPUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 750
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL_OW 72
9498: IFFALSE 9536
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9500: LD_VAR 0 8
9504: PPUSH
9505: LD_INT 3
9507: PUSH
9508: LD_INT 24
9510: PUSH
9511: LD_INT 750
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PPUSH
9527: LD_VAR 0 2
9531: PPUSH
9532: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9536: LD_VAR 0 8
9540: PUSH
9541: LD_VAR 0 9
9545: PUSH
9546: LD_INT 0
9548: EQUAL
9549: AND
9550: PUSH
9551: LD_VAR 0 3
9555: AND
9556: IFFALSE 9603
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9558: LD_VAR 0 8
9562: PPUSH
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PPUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 2
9579: ARRAY
9580: PPUSH
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 3
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 4
9597: ARRAY
9598: PPUSH
9599: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 2
9612: PPUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 21
9627: PUSH
9628: LD_INT 2
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 34
9637: PUSH
9638: LD_INT 52
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: LD_INT 24
9650: PUSH
9651: LD_INT 750
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 70
9672: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9673: LD_ADDR_VAR 0 6
9677: PUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: LD_INT 22
9685: PUSH
9686: LD_VAR 0 1
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 0
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 70
9731: ST_TO_ADDR
// if crane then
9732: LD_VAR 0 7
9736: IFFALSE 9789
// for i in crane do
9738: LD_ADDR_VAR 0 5
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9787
// begin if dep then
9751: LD_VAR 0 6
9755: IFFALSE 9771
// ComMoveUnit ( i , dep ) ;
9757: LD_VAR 0 5
9761: PPUSH
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9771: LD_VAR 0 5
9775: PPUSH
9776: CALL_OW 311
9780: PPUSH
9781: CALL 77781 0 1
// end ;
9785: GO 9748
9787: POP
9788: POP
// end ; end_of_file
9789: LD_VAR 0 4
9793: RET
// export function Action ; begin
9794: LD_INT 0
9796: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9797: LD_INT 66
9799: PPUSH
9800: LD_INT 4
9802: PPUSH
9803: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PUSH
9836: LD_INT 0
9838: EQUAL
9839: IFFALSE 9853
// SetClass ( JMM , 2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_INT 2
9848: PPUSH
9849: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9853: LD_STRING M1
9855: PPUSH
9856: CALL_OW 337
// case Difficulty of 1 :
9860: LD_OWVAR 67
9864: PUSH
9865: LD_INT 1
9867: DOUBLE
9868: EQUAL
9869: IFTRUE 9873
9871: GO 9883
9873: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9874: LD_STRING M1-1
9876: PPUSH
9877: CALL_OW 337
9881: GO 9926
9883: LD_INT 2
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 9901
9891: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9892: LD_STRING M1-2
9894: PPUSH
9895: CALL_OW 337
9899: GO 9926
9901: LD_INT 3
9903: DOUBLE
9904: GREATEREQUAL
9905: IFFALSE 9913
9907: LD_INT 4
9909: DOUBLE
9910: LESSEQUAL
9911: IFTRUE 9915
9913: GO 9925
9915: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9916: LD_STRING M1-3
9918: PPUSH
9919: CALL_OW 337
9923: GO 9926
9925: POP
// ChangeMissionObjectives ( M1cont ) ;
9926: LD_STRING M1cont
9928: PPUSH
9929: CALL_OW 337
// wait ( 0 0$2 ) ;
9933: LD_INT 70
9935: PPUSH
9936: CALL_OW 67
// SaveForQuickRestart ;
9940: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9944: LD_INT 525
9946: PPUSH
9947: LD_INT 700
9949: PPUSH
9950: CALL_OW 12
9954: PPUSH
9955: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
9959: LD_INT 5
9961: PPUSH
9962: LD_INT 82
9964: PPUSH
9965: LD_INT 38
9967: PPUSH
9968: LD_INT 10
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 56
// wait ( 0 0$14 ) ;
9978: LD_INT 490
9980: PPUSH
9981: CALL_OW 67
// firstCrateSpawn := true ;
9985: LD_ADDR_EXP 40
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// end ;
9993: LD_VAR 0 1
9997: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
9998: LD_EXP 40
10002: IFFALSE 10391
10004: GO 10006
10006: DISABLE
10007: LD_INT 0
10009: PPUSH
// begin if IsOk ( Lisa ) then
10010: LD_EXP 2
10014: PPUSH
10015: CALL_OW 302
10019: IFFALSE 10035
// Say ( Lisa , DR0-Lisa-1 ) else
10021: LD_EXP 2
10025: PPUSH
10026: LD_STRING DR0-Lisa-1
10028: PPUSH
10029: CALL_OW 88
10033: GO 10181
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10035: LD_INT 22
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 26
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 25
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 25
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 25
10090: PUSH
10091: LD_INT 3
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 8
10135: PUSH
10136: LD_EXP 5
10140: PUSH
10141: LD_EXP 6
10145: PUSH
10146: LD_EXP 7
10150: PUSH
10151: LD_EXP 4
10155: PUSH
10156: LD_EXP 3
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: DIFF
10170: PPUSH
10171: LD_STRING DR0-Sol1-1
10173: PPUSH
10174: LD_STRING DR0-Sol1-1
10176: PPUSH
10177: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10181: LD_ADDR_VAR 0 1
10185: PUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 26
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: LD_INT 25
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 25
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 25
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 4
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PUSH
10277: LD_EXP 1
10281: PUSH
10282: LD_EXP 8
10286: PUSH
10287: LD_EXP 5
10291: PUSH
10292: LD_EXP 2
10296: PUSH
10297: LD_EXP 6
10301: PUSH
10302: LD_EXP 7
10306: PUSH
10307: LD_EXP 4
10311: PUSH
10312: LD_EXP 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: DIFF
10327: PPUSH
10328: LD_STRING DR0-Sol2-1
10330: PPUSH
10331: LD_STRING DR0-Sol2-1
10333: PPUSH
10334: CALL 6771 0 3
10338: ST_TO_ADDR
// if IsOk ( Cyrus ) then
10339: LD_EXP 4
10343: PPUSH
10344: CALL_OW 302
10348: IFFALSE 10362
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10350: LD_EXP 4
10354: PPUSH
10355: LD_STRING DR0-Cyrus-1
10357: PPUSH
10358: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
10362: LD_EXP 2
10366: PPUSH
10367: CALL_OW 302
10371: PUSH
10372: LD_VAR 0 1
10376: OR
10377: IFFALSE 10391
// Say ( JMM , DR0-JMM-1 ) ;
10379: LD_EXP 1
10383: PPUSH
10384: LD_STRING DR0-JMM-1
10386: PPUSH
10387: CALL_OW 88
// end ;
10391: PPOPN 1
10393: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10394: LD_EXP 5
10398: PPUSH
10399: CALL_OW 302
10403: PUSH
10404: LD_INT 22
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 25
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PPUSH
10428: CALL_OW 69
10432: PUSH
10433: LD_INT 0
10435: GREATER
10436: AND
10437: PUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 463
10445: NOT
10446: AND
10447: IFFALSE 10725
10449: GO 10451
10451: DISABLE
// begin DialogueOn ;
10452: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10456: LD_EXP 5
10460: PPUSH
10461: LD_STRING D10-Frank-1
10463: PPUSH
10464: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10468: LD_INT 22
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 1
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 2
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 1
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 2
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 4
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: PUSH
10548: LD_EXP 1
10552: PUSH
10553: LD_EXP 5
10557: PUSH
10558: LD_EXP 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: DIFF
10568: PPUSH
10569: LD_STRING D10-Sol1-1
10571: PPUSH
10572: LD_STRING D10-FSol1-1
10574: PPUSH
10575: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
10579: LD_EXP 5
10583: PPUSH
10584: LD_STRING D10-Frank-2
10586: PPUSH
10587: CALL_OW 88
// if IsOk ( Lisa ) then
10591: LD_EXP 2
10595: PPUSH
10596: CALL_OW 302
10600: IFFALSE 10616
// Say ( Lisa , D10-Lisa-2 ) else
10602: LD_EXP 2
10606: PPUSH
10607: LD_STRING D10-Lisa-2
10609: PPUSH
10610: CALL_OW 88
10614: GO 10721
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10616: LD_INT 22
10618: PUSH
10619: LD_INT 1
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: LD_INT 25
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 25
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 4
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: PUSH
10696: LD_EXP 1
10700: PUSH
10701: LD_EXP 5
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: DIFF
10710: PPUSH
10711: LD_STRING D10-Sol1-2
10713: PPUSH
10714: LD_STRING D10-FSol1-2
10716: PPUSH
10717: CALL 6771 0 3
// DialogueOff ;
10721: CALL_OW 7
// end ;
10725: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10726: LD_INT 1
10728: PPUSH
10729: CALL_OW 463
10733: NOT
10734: IFFALSE 11017
10736: GO 10738
10738: DISABLE
// begin HarrisonSupport ;
10739: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10743: LD_EXP 17
10747: PPUSH
10748: CALL_OW 310
10752: PPUSH
10753: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10757: LD_EXP 17
10761: PPUSH
10762: LD_STRING DEng-Eng1-1
10764: PPUSH
10765: CALL_OW 88
// wait ( 1 1$0 ) ;
10769: LD_INT 2100
10771: PPUSH
10772: CALL_OW 67
// DialogueOn ;
10776: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10780: LD_EXP 14
10784: PPUSH
10785: LD_STRING DRem-Har-1
10787: PPUSH
10788: CALL_OW 94
// if contactWithRussian then
10792: LD_EXP 22
10796: IFFALSE 10812
// Say ( JMM , DRem-JMM-1 ) else
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING DRem-JMM-1
10805: PPUSH
10806: CALL_OW 88
10810: GO 10824
// Say ( JMM , DRem-JMM-1a ) ;
10812: LD_EXP 1
10816: PPUSH
10817: LD_STRING DRem-JMM-1a
10819: PPUSH
10820: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
10824: LD_EXP 14
10828: PPUSH
10829: LD_STRING DRem-Har-2
10831: PPUSH
10832: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
10836: LD_STRING DenisInDelta
10838: PPUSH
10839: LD_INT 0
10841: PPUSH
10842: CALL_OW 30
10846: IFFALSE 10862
// Say ( JMM , DRem-JMM-2 ) else
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DRem-JMM-2
10855: PPUSH
10856: CALL_OW 88
10860: GO 10874
// Say ( JMM , DRem-JMM-2a ) ;
10862: LD_EXP 1
10866: PPUSH
10867: LD_STRING DRem-JMM-2a
10869: PPUSH
10870: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
10874: LD_EXP 14
10878: PPUSH
10879: LD_STRING DRem-Har-3
10881: PPUSH
10882: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10886: LD_EXP 1
10890: PPUSH
10891: LD_STRING DRem-JMM-3
10893: PPUSH
10894: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING DRem-Har-4
10905: PPUSH
10906: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
10910: LD_STRING DenisInDelta
10912: PPUSH
10913: LD_INT 0
10915: PPUSH
10916: CALL_OW 30
10920: IFFALSE 10980
// begin Say ( JMM , DRem-JMM-4 ) ;
10922: LD_EXP 1
10926: PPUSH
10927: LD_STRING DRem-JMM-4
10929: PPUSH
10930: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10934: LD_EXP 14
10938: PPUSH
10939: LD_STRING DRem-Har-5
10941: PPUSH
10942: CALL_OW 94
// DialogueOff ;
10946: CALL_OW 7
// wait ( 4 4$00 ) ;
10950: LD_INT 8400
10952: PPUSH
10953: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// until not InBattle ( 1 ) ;
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 463
10971: NOT
10972: IFFALSE 10957
// SpawnDenis ;
10974: CALL 11018 0 0
// end else
10978: GO 11017
// begin DialogueOff ;
10980: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
10984: LD_INT 36
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
10997: LD_INT 15
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11010: LD_STRING MR
11012: PPUSH
11013: CALL_OW 337
// end ; end ;
11017: END
// export function SpawnDenis ; var tmp ; begin
11018: LD_INT 0
11020: PPUSH
11021: PPUSH
// PrepareDenis ;
11022: CALL 2199 0 0
// if not Denis then
11026: LD_EXP 9
11030: NOT
11031: IFFALSE 11035
// exit ;
11033: GO 11256
// CenterNowOnUnits ( Denis ) ;
11035: LD_EXP 9
11039: PPUSH
11040: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11044: LD_ADDR_VAR 0 2
11048: PUSH
11049: LD_INT 22
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11064: LD_EXP 9
11068: PPUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_EXP 9
11078: PPUSH
11079: CALL_OW 74
11083: PPUSH
11084: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11088: LD_INT 35
11090: PPUSH
11091: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 91
11107: PUSH
11108: LD_EXP 9
11112: PUSH
11113: LD_INT 10
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 69
11129: IFFALSE 11088
// SetSide ( Denis , 1 ) ;
11131: LD_EXP 9
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 235
// DialogueOn ;
11143: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11147: LD_EXP 9
11151: PPUSH
11152: LD_STRING DDen-Den-1
11154: PPUSH
11155: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11159: LD_EXP 1
11163: PPUSH
11164: LD_STRING DDen-JMM-1
11166: PPUSH
11167: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11171: LD_EXP 9
11175: PPUSH
11176: LD_STRING DDen-Den-2
11178: PPUSH
11179: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11183: LD_EXP 1
11187: PPUSH
11188: LD_STRING DDen-JMM-2
11190: PPUSH
11191: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11195: LD_EXP 9
11199: PPUSH
11200: LD_STRING DDen-Den-3
11202: PPUSH
11203: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11207: LD_EXP 1
11211: PPUSH
11212: LD_STRING DDen-JMM-3
11214: PPUSH
11215: CALL_OW 88
// DialogueOff ;
11219: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11223: LD_INT 36
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11236: LD_INT 15
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11249: LD_STRING MR
11251: PPUSH
11252: CALL_OW 337
// end ;
11256: LD_VAR 0 1
11260: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11261: LD_INT 22
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 15
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PUSH
11290: LD_EXP 9
11294: PPUSH
11295: CALL_OW 302
11299: AND
11300: PUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 463
11308: NOT
11309: AND
11310: IFFALSE 11339
11312: GO 11314
11314: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11315: LD_EXP 9
11319: PPUSH
11320: LD_STRING DR1-Den-1
11322: PPUSH
11323: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11327: LD_EXP 1
11331: PPUSH
11332: LD_STRING DR1-JMM-1
11334: PPUSH
11335: CALL_OW 88
// end ;
11339: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11340: LD_INT 15
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 321
11350: PUSH
11351: LD_INT 2
11353: EQUAL
11354: PUSH
11355: LD_EXP 9
11359: PPUSH
11360: CALL_OW 302
11364: AND
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 463
11373: NOT
11374: AND
11375: IFFALSE 11607
11377: GO 11379
11379: DISABLE
// begin DialogueOn ;
11380: CALL_OW 6
// if IsOK ( Denis ) then
11384: LD_EXP 9
11388: PPUSH
11389: CALL_OW 302
11393: IFFALSE 11409
// Say ( Denis , DR2-Den-1 ) else
11395: LD_EXP 9
11399: PPUSH
11400: LD_STRING DR2-Den-1
11402: PPUSH
11403: CALL_OW 88
11407: GO 11468
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11409: LD_INT 22
11411: PUSH
11412: LD_INT 1
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 21
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 4
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: PUSH
11449: LD_EXP 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: DIFF
11457: PPUSH
11458: LD_STRING DR2-Sci1-1
11460: PPUSH
11461: LD_STRING DR2-FSci1-1
11463: PPUSH
11464: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11468: LD_EXP 1
11472: PPUSH
11473: LD_STRING DR2-JMM-1
11475: PPUSH
11476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11480: LD_INT 22
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PUSH
11560: LD_EXP 1
11564: PUSH
11565: LD_EXP 9
11569: PUSH
11570: LD_EXP 8
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING DR2-Sol1-1
11583: PPUSH
11584: LD_STRING DR2-Sol1-11
11586: PPUSH
11587: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11591: LD_EXP 1
11595: PPUSH
11596: LD_STRING DR2-JMM-2
11598: PPUSH
11599: CALL_OW 88
// DialogueOff ;
11603: CALL_OW 7
// end ;
11607: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11608: LD_INT 22
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 30
11620: PUSH
11621: LD_INT 36
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 69
11636: PUSH
11637: LD_INT 0
11639: EQUAL
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 33
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: PUSH
11681: LD_INT 0
11683: GREATER
11684: AND
11685: PUSH
11686: LD_EXP 23
11690: PUSH
11691: LD_INT 0
11693: EQUAL
11694: AND
11695: PUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 463
11703: NOT
11704: AND
11705: IFFALSE 11842
11707: GO 11709
11709: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11710: LD_INT 22
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 26
11742: PUSH
11743: LD_INT 1
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: PUSH
11761: LD_EXP 1
11765: PUSH
11766: LD_EXP 6
11770: PUSH
11771: LD_EXP 7
11775: PUSH
11776: LD_EXP 9
11780: PUSH
11781: LD_EXP 15
11785: PUSH
11786: LD_EXP 3
11790: PUSH
11791: LD_EXP 4
11795: PUSH
11796: LD_EXP 2
11800: PUSH
11801: LD_EXP 5
11805: PUSH
11806: LD_EXP 8
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: DIFF
11823: PPUSH
11824: LD_STRING D3a-Mech1-1
11826: PPUSH
11827: LD_STRING D3a-Mech1-1
11829: PPUSH
11830: CALL 6771 0 3
// firstTower = 2 ;
11834: LD_ADDR_EXP 23
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// end ;
11842: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11843: LD_INT 22
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PPUSH
11867: CALL_OW 69
11871: PUSH
11872: LD_INT 0
11874: EQUAL
11875: IFFALSE 12006
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin stop_talking := true ;
11883: LD_ADDR_OWVAR 56
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11891: LD_ADDR_VAR 0 1
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 25
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 25
11931: PUSH
11932: LD_INT 2
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 25
11941: PUSH
11942: LD_INT 3
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 25
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: PUSH
11976: FOR_IN
11977: IFFALSE 11996
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
11979: LD_VAR 0 1
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: LD_INT 7500
11989: PPUSH
11990: CALL_OW 591
11994: GO 11976
11996: POP
11997: POP
// stop_talking := false ;
11998: LD_ADDR_OWVAR 56
12002: PUSH
12003: LD_INT 0
12005: ST_TO_ADDR
// end ;
12006: PPOPN 1
12008: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12009: LD_INT 22
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 30
12021: PUSH
12022: LD_INT 36
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 33
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: AND
12078: PUSH
12079: CALL 12631 0 0
12083: AND
12084: PUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 463
12092: NOT
12093: AND
12094: IFFALSE 12628
12096: GO 12098
12098: DISABLE
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 30
12123: PUSH
12124: LD_INT 36
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12140: LD_ADDR_VAR 0 4
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 1
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 2
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 33
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12185: LD_ADDR_VAR 0 5
12189: PUSH
12190: EMPTY
12191: ST_TO_ADDR
// for i in tmpControlTowers do
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_VAR 0 3
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12626
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12205: LD_EXP 1
12209: PPUSH
12210: CALL_OW 310
12214: PUSH
12215: LD_VAR 0 1
12219: EQUAL
12220: PUSH
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 257
12230: PUSH
12231: LD_INT 3
12233: EQUAL
12234: AND
12235: IFFALSE 12369
// begin InGameOn ;
12237: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12241: LD_VAR 0 4
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_STRING D4a-JMM-1
12261: PPUSH
12262: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12266: LD_VAR 0 4
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PPUSH
12275: LD_EXP 1
12279: PPUSH
12280: CALL_OW 53
// wait ( 0 0$1 ) ;
12284: LD_INT 35
12286: PPUSH
12287: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12291: LD_VAR 0 4
12295: PUSH
12296: LD_INT 1
12298: ARRAY
12299: PPUSH
12300: LD_VAR 0 4
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: CALL_OW 250
12313: PUSH
12314: LD_INT 3
12316: PLUS
12317: PPUSH
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 1
12325: ARRAY
12326: PPUSH
12327: CALL_OW 251
12331: PUSH
12332: LD_INT 2
12334: MINUS
12335: PPUSH
12336: CALL_OW 111
// wait ( 0 0$2 ) ;
12340: LD_INT 70
12342: PPUSH
12343: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12347: LD_EXP 1
12351: PPUSH
12352: LD_STRING D4b-JMM-1
12354: PPUSH
12355: CALL_OW 88
// InGameOff ;
12359: CALL_OW 9
// exit ;
12363: POP
12364: POP
12365: GO 12628
// end else
12367: GO 12624
// begin InGameOn ;
12369: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12373: LD_ADDR_VAR 0 5
12377: PUSH
12378: LD_VAR 0 1
12382: PPUSH
12383: CALL_OW 313
12387: PPUSH
12388: LD_INT 25
12390: PUSH
12391: LD_INT 3
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 72
12402: ST_TO_ADDR
// if not tmpMechanicInside then
12403: LD_VAR 0 5
12407: NOT
12408: IFFALSE 12412
// continue ;
12410: GO 12202
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12412: LD_VAR 0 5
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PPUSH
12421: CALL_OW 258
12425: PUSH
12426: LD_INT 1
12428: EQUAL
12429: IFFALSE 12449
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12431: LD_VAR 0 5
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: LD_STRING D4a-Mech1-1
12442: PPUSH
12443: CALL_OW 88
12447: GO 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12449: LD_VAR 0 5
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: LD_STRING D4a-FMech1-1
12460: PPUSH
12461: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12478: LD_VAR 0 4
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PPUSH
12487: LD_VAR 0 5
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: CALL_OW 53
// wait ( 0 0$1 ) ;
12500: LD_INT 35
12502: PPUSH
12503: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12507: LD_VAR 0 4
12511: PUSH
12512: LD_INT 1
12514: ARRAY
12515: PPUSH
12516: LD_VAR 0 4
12520: PUSH
12521: LD_INT 1
12523: ARRAY
12524: PPUSH
12525: CALL_OW 250
12529: PUSH
12530: LD_INT 3
12532: PLUS
12533: PPUSH
12534: LD_VAR 0 4
12538: PUSH
12539: LD_INT 1
12541: ARRAY
12542: PPUSH
12543: CALL_OW 251
12547: PUSH
12548: LD_INT 2
12550: MINUS
12551: PPUSH
12552: CALL_OW 111
// wait ( 0 0$2 ) ;
12556: LD_INT 70
12558: PPUSH
12559: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12563: LD_VAR 0 5
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PPUSH
12572: CALL_OW 258
12576: PUSH
12577: LD_INT 1
12579: EQUAL
12580: IFFALSE 12600
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12582: LD_VAR 0 5
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_STRING D4b-Mech1-1
12593: PPUSH
12594: CALL_OW 88
12598: GO 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12600: LD_VAR 0 5
12604: PUSH
12605: LD_INT 1
12607: ARRAY
12608: PPUSH
12609: LD_STRING D4b-FMech1-1
12611: PPUSH
12612: CALL_OW 88
// InGameOff ;
12616: CALL_OW 9
// exit ;
12620: POP
12621: POP
12622: GO 12628
// end ; end ;
12624: GO 12202
12626: POP
12627: POP
// end ;
12628: PPOPN 5
12630: END
// function CheckMehInside ; var i , j , tmp ; begin
12631: LD_INT 0
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
// result := false ;
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 30
12662: PUSH
12663: LD_INT 36
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: ST_TO_ADDR
// if not tmp then
12679: LD_VAR 0 4
12683: NOT
12684: IFFALSE 12688
// exit ;
12686: GO 12752
// for i in tmp do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_VAR 0 4
12697: PUSH
12698: FOR_IN
12699: IFFALSE 12750
// for j in UnitsInside ( i ) do
12701: LD_ADDR_VAR 0 3
12705: PUSH
12706: LD_VAR 0 2
12710: PPUSH
12711: CALL_OW 313
12715: PUSH
12716: FOR_IN
12717: IFFALSE 12746
// if GetClass ( j ) = class_mechanic then
12719: LD_VAR 0 3
12723: PPUSH
12724: CALL_OW 257
12728: PUSH
12729: LD_INT 3
12731: EQUAL
12732: IFFALSE 12744
// begin result := true ;
12734: LD_ADDR_VAR 0 1
12738: PUSH
12739: LD_INT 1
12741: ST_TO_ADDR
// break ;
12742: GO 12746
// end ;
12744: GO 12716
12746: POP
12747: POP
12748: GO 12698
12750: POP
12751: POP
// end ;
12752: LD_VAR 0 1
12756: RET
// every 12 12$0 do
12757: GO 12759
12759: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12760: LD_INT 35
12762: PPUSH
12763: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 463
12774: NOT
12775: PUSH
12776: LD_INT 32
12778: PPUSH
12779: LD_INT 81
12781: PUSH
12782: LD_INT 1
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 70
12793: NOT
12794: AND
12795: IFFALSE 12760
// PrepareKurt ;
12797: CALL 15254 0 0
// end ;
12801: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12802: LD_EXP 15
12806: PPUSH
12807: CALL_OW 302
12811: PUSH
12812: LD_EXP 15
12816: PPUSH
12817: CALL_OW 255
12821: PUSH
12822: LD_INT 1
12824: EQUAL
12825: AND
12826: PUSH
12827: LD_EXP 2
12831: AND
12832: IFFALSE 12997
12834: GO 12836
12836: DISABLE
// begin wait ( 0 0$50 ) ;
12837: LD_INT 1750
12839: PPUSH
12840: CALL_OW 67
// if not IsOk ( Joan ) then
12844: LD_EXP 15
12848: PPUSH
12849: CALL_OW 302
12853: NOT
12854: IFFALSE 12858
// exit ;
12856: GO 12997
// if IsOK ( Lisa ) then
12858: LD_EXP 2
12862: PPUSH
12863: CALL_OW 302
12867: IFFALSE 12997
// begin DialogueOn ;
12869: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12873: LD_EXP 2
12877: PPUSH
12878: LD_STRING D7-Lisa-1
12880: PPUSH
12881: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12885: LD_EXP 1
12889: PPUSH
12890: LD_STRING D7-JMM-1
12892: PPUSH
12893: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12897: LD_EXP 2
12901: PPUSH
12902: LD_STRING D7-Lisa-2
12904: PPUSH
12905: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12909: LD_EXP 1
12913: PPUSH
12914: LD_STRING D7-JMM-2
12916: PPUSH
12917: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12921: LD_EXP 2
12925: PPUSH
12926: LD_STRING D7-Lisa-3
12928: PPUSH
12929: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12933: LD_EXP 1
12937: PPUSH
12938: LD_STRING D7-JMM-3
12940: PPUSH
12941: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12945: LD_EXP 2
12949: PPUSH
12950: LD_STRING D7-Lisa-4
12952: PPUSH
12953: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12957: LD_EXP 1
12961: PPUSH
12962: LD_STRING D7-JMM-4
12964: PPUSH
12965: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12969: LD_EXP 1
12973: PPUSH
12974: LD_STRING D7-JMM-4a
12976: PPUSH
12977: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12981: LD_EXP 2
12985: PPUSH
12986: LD_STRING D7-Lisa-5
12988: PPUSH
12989: CALL_OW 88
// DialogueOff ;
12993: CALL_OW 7
// end ; end ;
12997: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
12998: LD_EXP 13
13002: PUSH
13003: LD_INT 22
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 91
13015: PUSH
13016: LD_EXP 13
13020: PUSH
13021: LD_INT 10
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 25
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 25
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 25
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 4
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: PUSH
13089: LD_INT 1
13091: GREATER
13092: AND
13093: IFFALSE 13110
13095: GO 13097
13097: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13098: LD_EXP 13
13102: PPUSH
13103: LD_STRING D5-Sol1-1
13105: PPUSH
13106: CALL_OW 88
13110: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13111: LD_INT 22
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 33
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 69
13139: PUSH
13140: LD_INT 2
13142: GREATEREQUAL
13143: IFFALSE 13163
13145: GO 13147
13147: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13148: LD_STRING MRa
13150: PPUSH
13151: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13155: LD_ADDR_EXP 28
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// end ;
13163: END
// every 2 2$00 do var i , last ;
13164: GO 13166
13166: DISABLE
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
// begin last := 8 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 8
13178: ST_TO_ADDR
// for i = 1 to last do
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: DOUBLE
13185: LD_INT 1
13187: DEC
13188: ST_TO_ADDR
13189: LD_VAR 0 2
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13223
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13197: LD_INT 6300
13199: PPUSH
13200: LD_INT 12600
13202: PPUSH
13203: CALL_OW 12
13207: PPUSH
13208: CALL_OW 67
// PrepareRandoms ( i ) ;
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL 4078 0 1
// end ;
13221: GO 13194
13223: POP
13224: POP
// end ;
13225: PPOPN 2
13227: END
// every 5 5$20 do
13228: GO 13230
13230: DISABLE
// begin DialogueOn ;
13231: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13235: LD_EXP 10
13239: PPUSH
13240: LD_STRING D12a-Sci-1
13242: PPUSH
13243: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13247: LD_EXP 1
13251: PPUSH
13252: LD_STRING D12a-JMM-1
13254: PPUSH
13255: CALL_OW 88
// DialogueOff ;
13259: CALL_OW 7
// cratesStatus = 1 ;
13263: LD_ADDR_EXP 38
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// end ;
13271: END
// every 13 13$0 do
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13279: LD_EXP 10
13283: PPUSH
13284: LD_STRING D12b-Sci-1
13286: PPUSH
13287: CALL_OW 94
// DialogueOff ;
13291: CALL_OW 7
// cratesStatus = 2 ;
13295: LD_ADDR_EXP 38
13299: PUSH
13300: LD_INT 2
13302: ST_TO_ADDR
// end ;
13303: END
// every 32 32$0 do
13304: GO 13306
13306: DISABLE
// begin DialogueOn ;
13307: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13311: LD_EXP 10
13315: PPUSH
13316: LD_STRING D12c-Sci-1
13318: PPUSH
13319: CALL_OW 94
// DialogueOff ;
13323: CALL_OW 7
// wait ( 3 3$0 ) ;
13327: LD_INT 6300
13329: PPUSH
13330: CALL_OW 67
// DialogueOn ;
13334: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13338: LD_EXP 10
13342: PPUSH
13343: LD_STRING D12d-Sci-1
13345: PPUSH
13346: CALL_OW 94
// DialogueOff ;
13350: CALL_OW 7
// cratesStatus = 1 ;
13354: LD_ADDR_EXP 38
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13362: CALL 19400 0 0
// wait ( 2 2$30 ) ;
13366: LD_INT 5250
13368: PPUSH
13369: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13373: LD_INT 35
13375: PPUSH
13376: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 463
13387: NOT
13388: PUSH
13389: LD_INT 32
13391: PPUSH
13392: LD_INT 81
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 70
13406: NOT
13407: AND
13408: PUSH
13409: LD_EXP 26
13413: PUSH
13414: LD_INT 6300
13416: LESS
13417: OR
13418: IFFALSE 13373
// PrepareJoan ;
13420: CALL 3034 0 0
// end ;
13424: END
// every 42 42$0 do
13425: GO 13427
13427: DISABLE
// begin DialogueOn ;
13428: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13432: LD_EXP 10
13436: PPUSH
13437: LD_STRING D12e-Sci-1
13439: PPUSH
13440: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13444: LD_EXP 1
13448: PPUSH
13449: LD_STRING D12e-JMM-1
13451: PPUSH
13452: CALL_OW 88
// DialogueOff ;
13456: CALL_OW 7
// cratesStatus := 2 ;
13460: LD_ADDR_EXP 38
13464: PUSH
13465: LD_INT 2
13467: ST_TO_ADDR
// end ; end_of_file
13468: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13469: LD_VAR 0 1
13473: PUSH
13474: LD_INT 1
13476: EQUAL
13477: PUSH
13478: LD_VAR 0 2
13482: PUSH
13483: LD_INT 3
13485: EQUAL
13486: AND
13487: IFFALSE 13497
// contactWithRussian := 1 ;
13489: LD_ADDR_EXP 22
13493: PUSH
13494: LD_INT 1
13496: ST_TO_ADDR
// end ;
13497: PPOPN 2
13499: END
// on BuildingComplete ( building ) do var i ;
13500: LD_INT 0
13502: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 266
13512: PUSH
13513: LD_INT 36
13515: EQUAL
13516: PUSH
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 255
13526: PUSH
13527: LD_INT 1
13529: EQUAL
13530: AND
13531: PUSH
13532: LD_EXP 23
13536: PUSH
13537: LD_INT 0
13539: EQUAL
13540: AND
13541: IFFALSE 13621
// begin firstTower = 1 ;
13543: LD_ADDR_EXP 23
13547: PUSH
13548: LD_INT 1
13550: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13551: LD_INT 22
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 21
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PUSH
13602: LD_EXP 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: DIFF
13610: PPUSH
13611: LD_STRING D3b-Mech1-1
13613: PPUSH
13614: LD_STRING D3b-Mech1-1
13616: PPUSH
13617: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 266
13630: PUSH
13631: LD_INT 0
13633: EQUAL
13634: PUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 255
13644: PUSH
13645: LD_INT 1
13647: EQUAL
13648: AND
13649: IFFALSE 13663
// SetBName ( building , theta ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_STRING theta
13658: PPUSH
13659: CALL_OW 500
// if GetSide ( building ) = 3 then
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 255
13672: PUSH
13673: LD_INT 3
13675: EQUAL
13676: IFFALSE 13716
// begin for i := 1 to 4 do
13678: LD_ADDR_VAR 0 2
13682: PUSH
13683: DOUBLE
13684: LD_INT 1
13686: DEC
13687: ST_TO_ADDR
13688: LD_INT 4
13690: PUSH
13691: FOR_TO
13692: IFFALSE 13714
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13694: LD_ADDR_EXP 31
13698: PUSH
13699: LD_EXP 31
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 3
13711: ST_TO_ADDR
13712: GO 13691
13714: POP
13715: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 255
13725: PUSH
13726: LD_INT 3
13728: EQUAL
13729: PUSH
13730: LD_VAR 0 1
13734: PPUSH
13735: CALL_OW 266
13739: PUSH
13740: LD_INT 0
13742: EQUAL
13743: PUSH
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 266
13753: PUSH
13754: LD_INT 2
13756: EQUAL
13757: OR
13758: PUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 266
13768: PUSH
13769: LD_INT 4
13771: EQUAL
13772: OR
13773: PUSH
13774: EMPTY
13775: LIST
13776: AND
13777: IFFALSE 13788
// ComUpgrade ( building ) ;
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 255
13797: PUSH
13798: LD_INT 3
13800: EQUAL
13801: PUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 266
13811: PUSH
13812: LD_INT 32
13814: EQUAL
13815: AND
13816: IFFALSE 13857
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_INT 42
13825: PUSH
13826: LD_INT 43
13828: PUSH
13829: LD_INT 44
13831: PUSH
13832: LD_INT 46
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 1
13843: PPUSH
13844: LD_INT 4
13846: PPUSH
13847: CALL_OW 12
13851: ARRAY
13852: PPUSH
13853: CALL_OW 208
// end ;
13857: PPOPN 2
13859: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL 34648 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13869: LD_VAR 0 1
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 23
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: IN
13914: IFFALSE 13930
// killCounter := killCounter + 1 ;
13916: LD_ADDR_EXP 45
13920: PUSH
13921: LD_EXP 45
13925: PUSH
13926: LD_INT 1
13928: PLUS
13929: ST_TO_ADDR
// if unit in ruAttackersInForest then
13930: LD_VAR 0 1
13934: PUSH
13935: LD_EXP 48
13939: IN
13940: IFFALSE 13958
// ruAttackersInForest := ruAttackersInForest diff unit ;
13942: LD_ADDR_EXP 48
13946: PUSH
13947: LD_EXP 48
13951: PUSH
13952: LD_VAR 0 1
13956: DIFF
13957: ST_TO_ADDR
// if unit in ruAttackers then
13958: LD_VAR 0 1
13962: PUSH
13963: LD_EXP 47
13967: IN
13968: IFFALSE 13986
// ruAttackers := ruAttackers diff unit ;
13970: LD_ADDR_EXP 47
13974: PUSH
13975: LD_EXP 47
13979: PUSH
13980: LD_VAR 0 1
13984: DIFF
13985: ST_TO_ADDR
// if unit = JMM then
13986: LD_VAR 0 1
13990: PUSH
13991: LD_EXP 1
13995: EQUAL
13996: IFFALSE 14005
// YouLost ( JMM ) ;
13998: LD_STRING JMM
14000: PPUSH
14001: CALL_OW 104
// if unit = Joan then
14005: LD_VAR 0 1
14009: PUSH
14010: LD_EXP 15
14014: EQUAL
14015: IFFALSE 14025
// JoanStatus := 0 ;
14017: LD_ADDR_EXP 16
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_INT 1
14037: EQUAL
14038: PUSH
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 247
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: AND
14053: PUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 248
14063: PUSH
14064: LD_INT 1
14066: EQUAL
14067: AND
14068: IFFALSE 14084
// unitLost = unitLost + 1 ;
14070: LD_ADDR_EXP 30
14074: PUSH
14075: LD_EXP 30
14079: PUSH
14080: LD_INT 1
14082: PLUS
14083: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 255
14093: PUSH
14094: LD_INT 3
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 247
14107: PUSH
14108: LD_INT 3
14110: EQUAL
14111: AND
14112: PUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 266
14122: PUSH
14123: LD_INT 4
14125: PUSH
14126: LD_INT 5
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 31
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: IN
14141: AND
14142: IFFALSE 14228
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14144: LD_ADDR_EXP 31
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 266
14163: ADD
14164: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14165: LD_ADDR_EXP 31
14169: PUSH
14170: LD_EXP 31
14174: PUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 250
14184: ADD
14185: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14186: LD_ADDR_EXP 31
14190: PUSH
14191: LD_EXP 31
14195: PUSH
14196: LD_VAR 0 1
14200: PPUSH
14201: CALL_OW 251
14205: ADD
14206: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14207: LD_ADDR_EXP 31
14211: PUSH
14212: LD_EXP 31
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 254
14226: ADD
14227: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14228: LD_EXP 46
14232: PUSH
14233: LD_VAR 0 1
14237: PPUSH
14238: CALL_OW 257
14242: PUSH
14243: LD_INT 3
14245: EQUAL
14246: AND
14247: PUSH
14248: LD_VAR 0 1
14252: PPUSH
14253: CALL_OW 255
14257: PUSH
14258: LD_INT 3
14260: EQUAL
14261: AND
14262: PUSH
14263: LD_INT 21
14265: PPUSH
14266: CALL_OW 302
14270: AND
14271: PUSH
14272: LD_INT 21
14274: PPUSH
14275: CALL_OW 255
14279: PUSH
14280: LD_INT 3
14282: EQUAL
14283: AND
14284: IFFALSE 14366
// begin ruMechCounter := ruMechCounter - 1 ;
14286: LD_ADDR_EXP 46
14290: PUSH
14291: LD_EXP 46
14295: PUSH
14296: LD_INT 1
14298: MINUS
14299: ST_TO_ADDR
// uc_side := 3 ;
14300: LD_ADDR_OWVAR 20
14304: PUSH
14305: LD_INT 3
14307: ST_TO_ADDR
// uc_nation := 3 ;
14308: LD_ADDR_OWVAR 21
14312: PUSH
14313: LD_INT 3
14315: ST_TO_ADDR
// hc_gallery :=  ;
14316: LD_ADDR_OWVAR 33
14320: PUSH
14321: LD_STRING 
14323: ST_TO_ADDR
// hc_name :=  ;
14324: LD_ADDR_OWVAR 26
14328: PUSH
14329: LD_STRING 
14331: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14332: LD_INT 0
14334: PPUSH
14335: LD_EXP 34
14339: PPUSH
14340: LD_EXP 35
14344: PPUSH
14345: CALL_OW 12
14349: PPUSH
14350: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14354: CALL_OW 44
14358: PPUSH
14359: LD_INT 21
14361: PPUSH
14362: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14366: LD_VAR 0 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: PUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 264
14389: PUSH
14390: LD_INT 52
14392: EQUAL
14393: AND
14394: PUSH
14395: LD_INT 21
14397: PPUSH
14398: CALL_OW 302
14402: AND
14403: PUSH
14404: LD_INT 21
14406: PPUSH
14407: CALL_OW 255
14411: PUSH
14412: LD_INT 3
14414: EQUAL
14415: AND
14416: IFFALSE 14437
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14418: LD_INT 21
14420: PPUSH
14421: LD_INT 22
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: LD_INT 52
14432: PPUSH
14433: CALL_OW 125
// end ;
14437: PPOPN 1
14439: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14445: LD_VAR 0 1
14449: PPUSH
14450: LD_VAR 0 2
14454: PPUSH
14455: CALL 34770 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 255
14468: PUSH
14469: LD_INT 3
14471: EQUAL
14472: PUSH
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 264
14482: PUSH
14483: LD_INT 51
14485: PUSH
14486: LD_INT 52
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: IN
14493: NOT
14494: AND
14495: IFFALSE 14526
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14497: LD_ADDR_EXP 47
14501: PUSH
14502: LD_EXP 47
14506: PPUSH
14507: LD_EXP 47
14511: PUSH
14512: LD_INT 1
14514: PLUS
14515: PPUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 1
14525: ST_TO_ADDR
// end ;
14526: PPOPN 5
14528: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 255
14538: PUSH
14539: LD_INT 3
14541: EQUAL
14542: IFFALSE 14573
// begin tamedApemans = tamedApemans + 1 ;
14544: LD_ADDR_EXP 32
14548: PUSH
14549: LD_EXP 32
14553: PUSH
14554: LD_INT 1
14556: PLUS
14557: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 106
14565: PPUSH
14566: LD_INT 85
14568: PPUSH
14569: CALL_OW 111
// end ; end ;
14573: PPOPN 2
14575: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14576: LD_VAR 0 2
14580: PPUSH
14581: CALL_OW 255
14585: PUSH
14586: LD_INT 3
14588: EQUAL
14589: PUSH
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 255
14599: PUSH
14600: LD_INT 3
14602: EQUAL
14603: AND
14604: PUSH
14605: LD_INT 21
14607: PPUSH
14608: CALL_OW 302
14612: AND
14613: IFFALSE 14627
// ComEnterUnit ( human , rufab ) ;
14615: LD_VAR 0 1
14619: PPUSH
14620: LD_INT 21
14622: PPUSH
14623: CALL_OW 120
// end ;
14627: PPOPN 4
14629: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14630: LD_VAR 0 1
14634: PUSH
14635: LD_INT 21
14637: EQUAL
14638: PUSH
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 255
14648: PUSH
14649: LD_INT 3
14651: EQUAL
14652: AND
14653: IFFALSE 14667
// SetLives ( human , 1000 ) ;
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_INT 1000
14662: PPUSH
14663: CALL_OW 234
// end ;
14667: PPOPN 2
14669: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14670: LD_VAR 0 1
14674: PPUSH
14675: CALL 34754 0 1
// end ; end_of_file
14679: PPOPN 1
14681: END
// every 0 0$30 trigger cratesStatus = 1 do
14682: LD_EXP 38
14686: PUSH
14687: LD_INT 1
14689: EQUAL
14690: IFFALSE 14743
14692: GO 14694
14694: DISABLE
// begin enable ;
14695: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14696: LD_INT 350
14698: PUSH
14699: LD_INT 875
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 2
14711: PPUSH
14712: CALL_OW 12
14716: ARRAY
14717: PPUSH
14718: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14722: LD_INT 1
14724: PPUSH
14725: LD_INT 5
14727: PPUSH
14728: CALL_OW 12
14732: PPUSH
14733: LD_INT 7
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 55
// end ;
14743: END
// every 1 1$0 trigger cratesStatus = 2 do
14744: LD_EXP 38
14748: PUSH
14749: LD_INT 2
14751: EQUAL
14752: IFFALSE 14835
14754: GO 14756
14756: DISABLE
// begin enable ;
14757: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14758: LD_INT 3150
14760: PUSH
14761: LD_INT 4550
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: PPUSH
14771: LD_INT 2
14773: PPUSH
14774: CALL_OW 12
14778: ARRAY
14779: PPUSH
14780: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14784: LD_INT 2
14786: PUSH
14787: LD_INT 5
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 2
14799: PPUSH
14800: CALL_OW 12
14804: ARRAY
14805: PPUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 2
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 55
// end ;
14835: END
// every 0 0$30 + 0 0$10 do
14836: GO 14838
14838: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14839: LD_INT 4
14841: PUSH
14842: LD_INT 5
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 1
14851: PPUSH
14852: LD_INT 2
14854: PPUSH
14855: CALL_OW 12
14859: ARRAY
14860: PPUSH
14861: LD_INT 7
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 55
// Wait ( 0 0$15 ) ;
14871: LD_INT 525
14873: PPUSH
14874: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 55
// Wait ( 0 0$20 ) ;
14910: LD_INT 700
14912: PPUSH
14913: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14917: LD_INT 4
14919: PUSH
14920: LD_INT 5
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 1
14929: PPUSH
14930: LD_INT 2
14932: PPUSH
14933: CALL_OW 12
14937: ARRAY
14938: PPUSH
14939: LD_INT 7
14941: PPUSH
14942: LD_INT 1
14944: PPUSH
14945: CALL_OW 55
// end ; end_of_file
14949: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14950: LD_EXP 24
14954: PUSH
14955: LD_INT 1
14957: EQUAL
14958: IFFALSE 15251
14960: GO 14962
14962: DISABLE
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
14967: PPUSH
// begin enable ;
14968: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: ST_TO_ADDR
// for i in tmp do
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_VAR 0 2
15041: PUSH
15042: FOR_IN
15043: IFFALSE 15076
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_VAR 0 3
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 274
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 275
15072: PLUS
15073: ST_TO_ADDR
15074: GO 15042
15076: POP
15077: POP
// strings = [ ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: EMPTY
15084: ST_TO_ADDR
// if tmp = 0 then
15085: LD_VAR 0 2
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: IFFALSE 15118
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15095: LD_ADDR_EXP 27
15099: PUSH
15100: LD_EXP 27
15104: PUSH
15105: LD_STRING #Am06-1
15107: PUSH
15108: LD_EXP 25
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: ADD
15117: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15118: LD_VAR 0 2
15122: PUSH
15123: LD_EXP 25
15127: PUSH
15128: LD_VAR 0 3
15132: GREATER
15133: AND
15134: IFFALSE 15165
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15136: LD_ADDR_EXP 27
15140: PUSH
15141: LD_EXP 27
15145: PUSH
15146: LD_STRING #Am06-1
15148: PUSH
15149: LD_EXP 25
15153: PUSH
15154: LD_VAR 0 3
15158: MINUS
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ADD
15164: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_EXP 25
15174: PUSH
15175: LD_VAR 0 3
15179: LESSEQUAL
15180: AND
15181: IFFALSE 15204
// strings = strings ^ [ #Am06-1 , 0 ] ;
15183: LD_ADDR_EXP 27
15187: PUSH
15188: LD_EXP 27
15192: PUSH
15193: LD_STRING #Am06-1
15195: PUSH
15196: LD_INT 0
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: ADD
15203: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15204: LD_ADDR_EXP 26
15208: PUSH
15209: LD_EXP 26
15213: PUSH
15214: LD_INT 35
15216: MINUS
15217: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15218: LD_ADDR_EXP 27
15222: PUSH
15223: LD_EXP 27
15227: PUSH
15228: LD_STRING #Am06-2
15230: PUSH
15231: LD_EXP 26
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ADD
15240: ST_TO_ADDR
// display_strings = strings ;
15241: LD_ADDR_OWVAR 47
15245: PUSH
15246: LD_EXP 27
15250: ST_TO_ADDR
// end ; end_of_file
15251: PPOPN 3
15253: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15254: LD_INT 0
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 0
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PPUSH
15310: CALL_OW 69
15314: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15315: LD_INT 35
15317: PPUSH
15318: CALL_OW 67
// until depot ;
15322: LD_VAR 0 3
15326: IFFALSE 15263
// repeat wait ( 0 0$1 ) ;
15328: LD_INT 35
15330: PPUSH
15331: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15335: LD_ADDR_VAR 0 4
15339: PUSH
15340: LD_INT 22
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 91
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PUSH
15362: LD_INT 15
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 21
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 25
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 25
15395: PUSH
15396: LD_INT 2
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 25
15405: PUSH
15406: LD_INT 3
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 25
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 3
15432: PUSH
15433: LD_INT 54
15435: PUSH
15436: EMPTY
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 3
15445: PUSH
15446: LD_INT 55
15448: PUSH
15449: EMPTY
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: PUSH
15469: LD_EXP 2
15473: PUSH
15474: LD_EXP 3
15478: PUSH
15479: LD_EXP 4
15483: PUSH
15484: LD_EXP 5
15488: PUSH
15489: LD_EXP 7
15493: PUSH
15494: LD_EXP 8
15498: PUSH
15499: LD_EXP 9
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PUSH
15513: LD_EXP 44
15517: ADD
15518: DIFF
15519: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15520: LD_VAR 0 4
15524: PUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 463
15532: NOT
15533: AND
15534: IFFALSE 15328
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15536: LD_ADDR_VAR 0 4
15540: PUSH
15541: LD_VAR 0 4
15545: PUSH
15546: LD_INT 1
15548: PPUSH
15549: LD_VAR 0 4
15553: PPUSH
15554: CALL_OW 12
15558: ARRAY
15559: ST_TO_ADDR
// blockSpawn := 1 ;
15560: LD_ADDR_EXP 29
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// uc_side := 2 ;
15568: LD_ADDR_OWVAR 20
15572: PUSH
15573: LD_INT 2
15575: ST_TO_ADDR
// uc_nation := 2 ;
15576: LD_ADDR_OWVAR 21
15580: PUSH
15581: LD_INT 2
15583: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15584: LD_ADDR_EXP 19
15588: PUSH
15589: LD_STRING Kurt
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: LD_STRING 
15597: PPUSH
15598: CALL 39288 0 3
15602: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15603: LD_EXP 19
15607: PPUSH
15608: LD_VAR 0 4
15612: PPUSH
15613: CALL_OW 250
15617: PPUSH
15618: LD_VAR 0 4
15622: PPUSH
15623: CALL_OW 251
15627: PPUSH
15628: LD_INT 5
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 50
// InGameOn ;
15638: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15642: LD_EXP 19
15646: PPUSH
15647: CALL_OW 87
// wait ( 0 0$2 ) ;
15651: LD_INT 70
15653: PPUSH
15654: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15658: LD_EXP 19
15662: PPUSH
15663: LD_VAR 0 4
15667: PPUSH
15668: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15672: LD_VAR 0 4
15676: PPUSH
15677: LD_EXP 19
15681: PPUSH
15682: CALL_OW 112
// wait ( 0 0$1 ) ;
15686: LD_INT 35
15688: PPUSH
15689: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15693: LD_VAR 0 4
15697: PPUSH
15698: LD_EXP 19
15702: PPUSH
15703: CALL_OW 119
// DialogueOn ;
15707: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15711: LD_EXP 19
15715: PPUSH
15716: LD_STRING D2-Kurt-1
15718: PPUSH
15719: CALL_OW 88
// if tmp = JMM then
15723: LD_VAR 0 4
15727: PUSH
15728: LD_EXP 1
15732: EQUAL
15733: IFFALSE 15825
// begin Say ( JMM , D2-JMM-1 ) ;
15735: LD_EXP 1
15739: PPUSH
15740: LD_STRING D2-JMM-1
15742: PPUSH
15743: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15747: LD_EXP 19
15751: PPUSH
15752: LD_STRING D2-Kurt-2
15754: PPUSH
15755: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15759: LD_EXP 1
15763: PPUSH
15764: LD_STRING D2-JMM-2
15766: PPUSH
15767: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15771: LD_EXP 19
15775: PPUSH
15776: LD_STRING D2-Kurt-3
15778: PPUSH
15779: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15783: LD_EXP 1
15787: PPUSH
15788: LD_STRING D2-JMM-3
15790: PPUSH
15791: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15795: LD_EXP 19
15799: PPUSH
15800: LD_STRING D2-Kurt-4
15802: PPUSH
15803: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15807: LD_EXP 1
15811: PPUSH
15812: LD_STRING D2-JMM-4
15814: PPUSH
15815: CALL_OW 88
// DialogueOff ;
15819: CALL_OW 7
// end else
15823: GO 16053
// begin if GetSex ( tmp ) = 1 then
15825: LD_VAR 0 4
15829: PPUSH
15830: CALL_OW 258
15834: PUSH
15835: LD_INT 1
15837: EQUAL
15838: IFFALSE 15854
// Say ( tmp , D2-Sol1-1 ) else
15840: LD_VAR 0 4
15844: PPUSH
15845: LD_STRING D2-Sol1-1
15847: PPUSH
15848: CALL_OW 88
15852: GO 15866
// Say ( tmp , D2-FSol1-1 ) ;
15854: LD_VAR 0 4
15858: PPUSH
15859: LD_STRING D2-FSol1-1
15861: PPUSH
15862: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15866: LD_EXP 19
15870: PPUSH
15871: LD_STRING D2-Kurt-2
15873: PPUSH
15874: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 258
15887: PUSH
15888: LD_INT 1
15890: EQUAL
15891: IFFALSE 15907
// Say ( tmp , D2-Sol1-2 ) else
15893: LD_VAR 0 4
15897: PPUSH
15898: LD_STRING D2-Sol1-2
15900: PPUSH
15901: CALL_OW 88
15905: GO 15919
// Say ( tmp , D2-FSol1-2 ) ;
15907: LD_VAR 0 4
15911: PPUSH
15912: LD_STRING D2-FSol1-2
15914: PPUSH
15915: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15919: LD_EXP 19
15923: PPUSH
15924: LD_STRING D2-Kurt-3
15926: PPUSH
15927: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15931: LD_VAR 0 4
15935: PPUSH
15936: CALL_OW 258
15940: PUSH
15941: LD_INT 1
15943: EQUAL
15944: IFFALSE 15960
// Say ( tmp , D2-Sol1-3 ) else
15946: LD_VAR 0 4
15950: PPUSH
15951: LD_STRING D2-Sol1-3
15953: PPUSH
15954: CALL_OW 88
15958: GO 15972
// Say ( tmp , D2-FSol1-3 ) ;
15960: LD_VAR 0 4
15964: PPUSH
15965: LD_STRING D2-FSol1-3
15967: PPUSH
15968: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15972: LD_EXP 19
15976: PPUSH
15977: LD_STRING D2-Kurt-4
15979: PPUSH
15980: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15984: LD_VAR 0 4
15988: PPUSH
15989: CALL_OW 258
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16025
// begin Say ( tmp , D2-Sol1-4 ) ;
15999: LD_VAR 0 4
16003: PPUSH
16004: LD_STRING D2-Sol1-4
16006: PPUSH
16007: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16011: LD_VAR 0 4
16015: PPUSH
16016: LD_STRING D2-Sol1-5
16018: PPUSH
16019: CALL_OW 88
// end else
16023: GO 16049
// begin Say ( tmp , D2-FSol1-4 ) ;
16025: LD_VAR 0 4
16029: PPUSH
16030: LD_STRING D2-FSol1-4
16032: PPUSH
16033: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16037: LD_VAR 0 4
16041: PPUSH
16042: LD_STRING D2-FSol1-5
16044: PPUSH
16045: CALL_OW 88
// end ; DialogueOff ;
16049: CALL_OW 7
// end ; dec := ShowQuery1 ;
16053: LD_ADDR_VAR 0 6
16057: PUSH
16058: CALL 7256 0 0
16062: ST_TO_ADDR
// if dec = 1 then
16063: LD_VAR 0 6
16067: PUSH
16068: LD_INT 1
16070: EQUAL
16071: IFFALSE 16133
// begin DialogueOn ;
16073: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16077: LD_EXP 19
16081: PPUSH
16082: LD_STRING D2a-Kurt-1
16084: PPUSH
16085: CALL_OW 88
// DialogueOff ;
16089: CALL_OW 7
// InGameOff ;
16093: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16097: LD_INT 1
16099: PPUSH
16100: LD_INT 2
16102: PPUSH
16103: LD_INT 2
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16113: LD_EXP 19
16117: PPUSH
16118: LD_INT 8
16120: PPUSH
16121: CALL_OW 113
// readyToEscape := 1 ;
16125: LD_ADDR_EXP 21
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// end ; if dec = 2 then
16133: LD_VAR 0 6
16137: PUSH
16138: LD_INT 2
16140: EQUAL
16141: IFFALSE 16609
// begin DialogueOn ;
16143: CALL_OW 6
// if tmp = JMM then
16147: LD_VAR 0 4
16151: PUSH
16152: LD_EXP 1
16156: EQUAL
16157: IFFALSE 16213
// begin Say ( JMM , D2b-JMM-1 ) ;
16159: LD_EXP 1
16163: PPUSH
16164: LD_STRING D2b-JMM-1
16166: PPUSH
16167: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16171: LD_EXP 19
16175: PPUSH
16176: LD_STRING D2b-Kurt-1
16178: PPUSH
16179: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16183: LD_EXP 1
16187: PPUSH
16188: LD_STRING D2b-JMM-2
16190: PPUSH
16191: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16195: LD_EXP 19
16199: PPUSH
16200: LD_STRING D2b-Kurt-2
16202: PPUSH
16203: CALL_OW 88
// DialogueOff ;
16207: CALL_OW 7
// end else
16211: GO 16364
// begin if GetSex ( tmp ) = 1 then
16213: LD_VAR 0 4
16217: PPUSH
16218: CALL_OW 258
16222: PUSH
16223: LD_INT 1
16225: EQUAL
16226: IFFALSE 16242
// Say ( tmp , D2b-Sol1-1 ) else
16228: LD_VAR 0 4
16232: PPUSH
16233: LD_STRING D2b-Sol1-1
16235: PPUSH
16236: CALL_OW 88
16240: GO 16254
// Say ( tmp , D2b-FSol1-1 ) ;
16242: LD_VAR 0 4
16246: PPUSH
16247: LD_STRING D2b-FSol1-1
16249: PPUSH
16250: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16254: LD_EXP 19
16258: PPUSH
16259: LD_STRING D2b-Kurt-1
16261: PPUSH
16262: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16266: LD_VAR 0 4
16270: PPUSH
16271: CALL_OW 258
16275: PUSH
16276: LD_INT 1
16278: EQUAL
16279: IFFALSE 16295
// Say ( tmp , D2b-Sol1-2 ) else
16281: LD_VAR 0 4
16285: PPUSH
16286: LD_STRING D2b-Sol1-2
16288: PPUSH
16289: CALL_OW 88
16293: GO 16307
// Say ( tmp , D2b-FSol1-2 ) ;
16295: LD_VAR 0 4
16299: PPUSH
16300: LD_STRING D2b-FSol1-2
16302: PPUSH
16303: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16307: LD_EXP 19
16311: PPUSH
16312: LD_STRING D2b-Kurt-2
16314: PPUSH
16315: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16319: LD_VAR 0 4
16323: PPUSH
16324: CALL_OW 258
16328: PUSH
16329: LD_INT 1
16331: EQUAL
16332: IFFALSE 16348
// Say ( tmp , D2c-Sol1-2 ) else
16334: LD_VAR 0 4
16338: PPUSH
16339: LD_STRING D2c-Sol1-2
16341: PPUSH
16342: CALL_OW 88
16346: GO 16360
// Say ( tmp , D2c-FSol1-2 ) ;
16348: LD_VAR 0 4
16352: PPUSH
16353: LD_STRING D2c-FSol1-2
16355: PPUSH
16356: CALL_OW 88
// DialogueOff ;
16360: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16364: LD_ADDR_VAR 0 7
16368: PUSH
16369: CALL 7277 0 0
16373: ST_TO_ADDR
// if dec2 = 1 then
16374: LD_VAR 0 7
16378: PUSH
16379: LD_INT 1
16381: EQUAL
16382: IFFALSE 16444
// begin DialogueOn ;
16384: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16388: LD_EXP 19
16392: PPUSH
16393: LD_STRING D2a-Kurt-1
16395: PPUSH
16396: CALL_OW 88
// DialogueOff ;
16400: CALL_OW 7
// InGameOff ;
16404: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16408: LD_INT 1
16410: PPUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 2
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16424: LD_EXP 19
16428: PPUSH
16429: LD_INT 8
16431: PPUSH
16432: CALL_OW 113
// readyToEscape := 1 ;
16436: LD_ADDR_EXP 21
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// end ; if dec2 = 2 then
16444: LD_VAR 0 7
16448: PUSH
16449: LD_INT 2
16451: EQUAL
16452: IFFALSE 16609
// begin if tmp = JMM then
16454: LD_VAR 0 4
16458: PUSH
16459: LD_EXP 1
16463: EQUAL
16464: IFFALSE 16524
// begin DialogueOn ;
16466: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16470: LD_EXP 1
16474: PPUSH
16475: LD_STRING D2c-JMM-1
16477: PPUSH
16478: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16482: LD_EXP 19
16486: PPUSH
16487: LD_STRING D2c-Kurt-1
16489: PPUSH
16490: CALL_OW 88
// DialogueOff ;
16494: CALL_OW 7
// InGameOff ;
16498: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16502: LD_EXP 19
16506: PPUSH
16507: LD_INT 8
16509: PPUSH
16510: CALL_OW 113
// readyToEscape := 1 ;
16514: LD_ADDR_EXP 21
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// end else
16522: GO 16609
// begin DialogueOn ;
16524: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 258
16537: PUSH
16538: LD_INT 1
16540: EQUAL
16541: IFFALSE 16557
// Say ( tmp , D2c-Sol1-1 ) else
16543: LD_VAR 0 4
16547: PPUSH
16548: LD_STRING D2c-Sol1-1
16550: PPUSH
16551: CALL_OW 88
16555: GO 16569
// Say ( tmp , D2c-FSol1-1 ) ;
16557: LD_VAR 0 4
16561: PPUSH
16562: LD_STRING D2c-FSol1-1
16564: PPUSH
16565: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16569: LD_EXP 19
16573: PPUSH
16574: LD_STRING D2c-Kurt-1
16576: PPUSH
16577: CALL_OW 88
// DialogueOff ;
16581: CALL_OW 7
// InGameOff ;
16585: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16589: LD_EXP 19
16593: PPUSH
16594: LD_INT 8
16596: PPUSH
16597: CALL_OW 113
// readyToEscape := 1 ;
16601: LD_ADDR_EXP 21
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16609: LD_VAR 0 6
16613: PUSH
16614: LD_INT 3
16616: EQUAL
16617: IFFALSE 16778
// begin DialogueOn ;
16619: CALL_OW 6
// if tmp = JMM then
16623: LD_VAR 0 4
16627: PUSH
16628: LD_EXP 1
16632: EQUAL
16633: IFFALSE 16693
// begin DialogueOn ;
16635: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16639: LD_EXP 1
16643: PPUSH
16644: LD_STRING D2c-JMM-1
16646: PPUSH
16647: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16651: LD_EXP 19
16655: PPUSH
16656: LD_STRING D2c-Kurt-1
16658: PPUSH
16659: CALL_OW 88
// DialogueOff ;
16663: CALL_OW 7
// InGameOff ;
16667: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16671: LD_EXP 19
16675: PPUSH
16676: LD_INT 8
16678: PPUSH
16679: CALL_OW 113
// readyToEscape := 1 ;
16683: LD_ADDR_EXP 21
16687: PUSH
16688: LD_INT 1
16690: ST_TO_ADDR
// end else
16691: GO 16778
// begin DialogueOn ;
16693: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16697: LD_VAR 0 4
16701: PPUSH
16702: CALL_OW 258
16706: PUSH
16707: LD_INT 1
16709: EQUAL
16710: IFFALSE 16726
// Say ( tmp , D2c-Sol1-1 ) else
16712: LD_VAR 0 4
16716: PPUSH
16717: LD_STRING D2c-Sol1-1
16719: PPUSH
16720: CALL_OW 88
16724: GO 16738
// Say ( tmp , D2c-FSol1-1 ) ;
16726: LD_VAR 0 4
16730: PPUSH
16731: LD_STRING D2c-FSol1-1
16733: PPUSH
16734: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16738: LD_EXP 19
16742: PPUSH
16743: LD_STRING D2c-Kurt-1
16745: PPUSH
16746: CALL_OW 88
// DialogueOff ;
16750: CALL_OW 7
// InGameOff ;
16754: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16758: LD_EXP 19
16762: PPUSH
16763: LD_INT 8
16765: PPUSH
16766: CALL_OW 113
// readyToEscape := 1 ;
16770: LD_ADDR_EXP 21
16774: PUSH
16775: LD_INT 1
16777: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16778: LD_ADDR_EXP 29
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16786: LD_INT 35
16788: PPUSH
16789: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16793: LD_EXP 19
16797: PPUSH
16798: LD_INT 8
16800: PPUSH
16801: CALL_OW 308
16805: PUSH
16806: LD_EXP 21
16810: AND
16811: PUSH
16812: LD_EXP 19
16816: PPUSH
16817: CALL_OW 301
16821: OR
16822: IFFALSE 16786
// if IsDead ( Kurt ) then
16824: LD_EXP 19
16828: PPUSH
16829: CALL_OW 301
16833: IFFALSE 16837
// exit ;
16835: GO 16892
// RemoveUnit ( Kurt ) ;
16837: LD_EXP 19
16841: PPUSH
16842: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16846: LD_EXP 19
16850: PPUSH
16851: LD_STRING Kurt
16853: PPUSH
16854: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 2
16863: PPUSH
16864: CALL_OW 81
16868: PUSH
16869: LD_INT 0
16871: EQUAL
16872: IFFALSE 16884
// kurtStatus = 1 else
16874: LD_ADDR_EXP 20
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
16882: GO 16892
// kurtStatus = 2 ;
16884: LD_ADDR_EXP 20
16888: PUSH
16889: LD_INT 2
16891: ST_TO_ADDR
// end ; end_of_file
16892: LD_VAR 0 1
16896: RET
// every 0 0$2 do
16897: GO 16899
16899: DISABLE
// begin enable ;
16900: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16901: LD_INT 3
16903: PPUSH
16904: LD_INT 2
16906: PPUSH
16907: LD_INT 10
16909: PPUSH
16910: LD_EXP 31
16914: PPUSH
16915: CALL 7688 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16919: LD_INT 3
16921: PPUSH
16922: LD_INT 12
16924: PPUSH
16925: LD_EXP 31
16929: PPUSH
16930: CALL 9291 0 3
// if disableHealAI = 0 then
16934: LD_EXP 33
16938: PUSH
16939: LD_INT 0
16941: EQUAL
16942: IFFALSE 16963
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16944: LD_INT 3
16946: PPUSH
16947: LD_INT 9
16949: PPUSH
16950: LD_INT 10
16952: PPUSH
16953: LD_INT 32
16955: PUSH
16956: EMPTY
16957: LIST
16958: PPUSH
16959: CALL 8055 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16963: LD_INT 3
16965: PPUSH
16966: LD_INT 51
16968: PPUSH
16969: LD_INT 6
16971: PPUSH
16972: CALL 8744 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16976: LD_INT 2
16978: PPUSH
16979: CALL_OW 303
16983: PUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL_OW 255
16991: PUSH
16992: LD_INT 1
16994: EQUAL
16995: OR
16996: IFFALSE 17010
// DefendDepot ( 3 , rudepo ) else
16998: LD_INT 3
17000: PPUSH
17001: LD_INT 2
17003: PPUSH
17004: CALL 8571 0 2
17008: GO 17020
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17010: LD_INT 3
17012: PPUSH
17013: LD_INT 10
17015: PPUSH
17016: CALL 8862 0 2
// end ;
17020: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 55
17043: PUSH
17044: EMPTY
17045: LIST
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: LD_INT 34
17052: PUSH
17053: LD_INT 51
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: PUSH
17075: LD_INT 0
17077: EQUAL
17078: PUSH
17079: LD_INT 21
17081: PPUSH
17082: CALL_OW 255
17086: PUSH
17087: LD_INT 3
17089: EQUAL
17090: AND
17091: PUSH
17092: LD_INT 21
17094: PPUSH
17095: CALL_OW 302
17099: AND
17100: PUSH
17101: LD_INT 2
17103: PPUSH
17104: CALL_OW 255
17108: PUSH
17109: LD_INT 3
17111: EQUAL
17112: AND
17113: PUSH
17114: LD_INT 2
17116: PPUSH
17117: CALL_OW 302
17121: AND
17122: PUSH
17123: LD_INT 21
17125: PPUSH
17126: CALL_OW 313
17130: AND
17131: PUSH
17132: LD_EXP 47
17136: PUSH
17137: LD_INT 4
17139: PUSH
17140: LD_INT 5
17142: PUSH
17143: LD_INT 6
17145: PUSH
17146: LD_INT 6
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: LD_OWVAR 67
17159: ARRAY
17160: LESS
17161: AND
17162: IFFALSE 17383
17164: GO 17166
17166: DISABLE
// begin enable ;
17167: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17168: LD_INT 2
17170: PPUSH
17171: CALL_OW 274
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: LD_INT 2000
17181: PPUSH
17182: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17186: LD_INT 3
17188: PPUSH
17189: LD_INT 21
17191: PPUSH
17192: LD_INT 4
17194: PUSH
17195: LD_INT 5
17197: PUSH
17198: LD_INT 6
17200: PUSH
17201: LD_INT 6
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_OWVAR 67
17214: ARRAY
17215: PUSH
17216: LD_EXP 47
17220: MINUS
17221: PPUSH
17222: LD_INT 43
17224: PUSH
17225: LD_INT 43
17227: PUSH
17228: LD_INT 44
17230: PUSH
17231: LD_INT 44
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 43
17242: PUSH
17243: LD_INT 43
17245: PUSH
17246: LD_INT 43
17248: PUSH
17249: LD_INT 44
17251: PUSH
17252: LD_INT 44
17254: PUSH
17255: LD_INT 46
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 43
17268: PUSH
17269: LD_INT 43
17271: PUSH
17272: LD_INT 43
17274: PUSH
17275: LD_INT 44
17277: PUSH
17278: LD_INT 44
17280: PUSH
17281: LD_INT 46
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 43
17294: PUSH
17295: LD_INT 43
17297: PUSH
17298: LD_INT 44
17300: PUSH
17301: LD_INT 46
17303: PUSH
17304: LD_INT 46
17306: PUSH
17307: LD_INT 46
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: LD_OWVAR 67
17328: ARRAY
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 22
17338: PUSH
17339: LD_INT 22
17341: PUSH
17342: LD_INT 24
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: PPUSH
17352: LD_INT 2
17354: PPUSH
17355: CALL_OW 12
17359: ARRAY
17360: PUSH
17361: LD_INT 24
17363: PUSH
17364: LD_INT 24
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: LD_OWVAR 67
17377: ARRAY
17378: PPUSH
17379: CALL 7534 0 7
// end ;
17383: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17384: LD_INT 17
17386: PPUSH
17387: CALL_OW 255
17391: PUSH
17392: LD_INT 3
17394: EQUAL
17395: PUSH
17396: LD_INT 17
17398: PPUSH
17399: CALL_OW 302
17403: AND
17404: PUSH
17405: LD_INT 2
17407: PPUSH
17408: CALL_OW 255
17412: PUSH
17413: LD_INT 3
17415: EQUAL
17416: AND
17417: PUSH
17418: LD_INT 2
17420: PPUSH
17421: CALL_OW 302
17425: AND
17426: PUSH
17427: LD_EXP 47
17431: PUSH
17432: LD_INT 4
17434: PUSH
17435: LD_INT 5
17437: PUSH
17438: LD_INT 6
17440: PUSH
17441: LD_INT 7
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: LD_OWVAR 67
17454: ARRAY
17455: LESS
17456: AND
17457: IFFALSE 17505
17459: GO 17461
17461: DISABLE
// begin enable ;
17462: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17463: LD_INT 17
17465: PPUSH
17466: LD_INT 22
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 42
17477: PUSH
17478: LD_INT 43
17480: PUSH
17481: LD_INT 44
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 12
17499: ARRAY
17500: PPUSH
17501: CALL_OW 185
// end ;
17505: END
// every 2 2$0 do var i , j ;
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17513: LD_INT 14700
17515: PUSH
17516: LD_INT 33600
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: PPUSH
17526: LD_INT 2
17528: PPUSH
17529: CALL_OW 12
17533: ARRAY
17534: PPUSH
17535: CALL_OW 67
// disableHealAI = 1 ;
17539: LD_ADDR_EXP 33
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 25
17564: PUSH
17565: LD_INT 4
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 69
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17595
// ComExitBuilding ( i ) ;
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 122
17593: GO 17581
17595: POP
17596: POP
// wait ( 0 0$1 ) ;
17597: LD_INT 35
17599: PPUSH
17600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17604: LD_INT 35
17606: PPUSH
17607: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_INT 22
17618: PUSH
17619: LD_INT 3
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 25
17628: PUSH
17629: LD_INT 4
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: PUSH
17645: FOR_IN
17646: IFFALSE 17723
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_INT 17
17655: PPUSH
17656: LD_INT 22
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 25
17668: PUSH
17669: LD_INT 12
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 70
17684: PUSH
17685: FOR_IN
17686: IFFALSE 17719
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_VAR 0 2
17697: PPUSH
17698: CALL_OW 250
17702: PPUSH
17703: LD_VAR 0 2
17707: PPUSH
17708: CALL_OW 251
17712: PPUSH
17713: CALL_OW 191
17717: GO 17685
17719: POP
17720: POP
17721: GO 17645
17723: POP
17724: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17725: LD_INT 22
17727: PUSH
17728: LD_INT 3
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 25
17737: PUSH
17738: LD_INT 4
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: PUSH
17754: LD_INT 0
17756: EQUAL
17757: PUSH
17758: LD_EXP 32
17762: PUSH
17763: LD_INT 6
17765: PUSH
17766: LD_INT 7
17768: PUSH
17769: LD_INT 8
17771: PUSH
17772: LD_INT 8
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: LD_OWVAR 67
17785: ARRAY
17786: GREATEREQUAL
17787: OR
17788: PUSH
17789: LD_INT 17
17791: PPUSH
17792: LD_INT 22
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 25
17804: PUSH
17805: LD_INT 12
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 70
17820: PUSH
17821: LD_INT 0
17823: EQUAL
17824: OR
17825: IFFALSE 17604
// disableHealAI = 0 ;
17827: LD_ADDR_EXP 33
17831: PUSH
17832: LD_INT 0
17834: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17835: LD_ADDR_VAR 0 1
17839: PUSH
17840: LD_INT 22
17842: PUSH
17843: LD_INT 3
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 25
17852: PUSH
17853: LD_INT 12
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PPUSH
17864: CALL_OW 69
17868: PUSH
17869: FOR_IN
17870: IFFALSE 17886
// SetClass ( i , 16 ) ;
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 16
17879: PPUSH
17880: CALL_OW 336
17884: GO 17869
17886: POP
17887: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17888: LD_ADDR_VAR 0 1
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 25
17905: PUSH
17906: LD_INT 4
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PPUSH
17917: CALL_OW 69
17921: PUSH
17922: FOR_IN
17923: IFFALSE 17939
// ComEnterUnit ( i , rulab ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_INT 32
17932: PPUSH
17933: CALL_OW 120
17937: GO 17922
17939: POP
17940: POP
// end ; end_of_file
17941: PPOPN 2
17943: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17944: LD_EXP 26
17948: PUSH
17949: LD_INT 0
17951: LESSEQUAL
17952: IFFALSE 18106
17954: GO 17956
17956: DISABLE
17957: LD_INT 0
17959: PPUSH
17960: PPUSH
17961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17962: LD_ADDR_VAR 0 2
17966: PUSH
17967: LD_INT 22
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 21
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 2
17989: PUSH
17990: LD_INT 30
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 30
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: ST_TO_ADDR
// for i in tmp do
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: LD_VAR 0 2
18034: PUSH
18035: FOR_IN
18036: IFFALSE 18069
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18038: LD_ADDR_VAR 0 3
18042: PUSH
18043: LD_VAR 0 3
18047: PUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 274
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 275
18065: PLUS
18066: ST_TO_ADDR
18067: GO 18035
18069: POP
18070: POP
// if yourCrates >= needCrates then
18071: LD_VAR 0 3
18075: PUSH
18076: LD_EXP 25
18080: GREATEREQUAL
18081: IFFALSE 18099
// FinishMission ( yourCrates , needCrates ) else
18083: LD_VAR 0 3
18087: PPUSH
18088: LD_EXP 25
18092: PPUSH
18093: CALL 18109 0 2
18097: GO 18106
// YouLost ( matmin ) ;
18099: LD_STRING matmin
18101: PPUSH
18102: CALL_OW 104
// end ;
18106: PPOPN 3
18108: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18109: LD_INT 0
18111: PPUSH
18112: PPUSH
18113: PPUSH
18114: PPUSH
// if killCounter = 0 then
18115: LD_EXP 45
18119: PUSH
18120: LD_INT 0
18122: EQUAL
18123: IFFALSE 18132
// SetAchievement ( ACH_SURV ) ;
18125: LD_STRING ACH_SURV
18127: PPUSH
18128: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18132: LD_INT 22
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 3
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PPUSH
18156: CALL_OW 69
18160: PUSH
18161: LD_INT 0
18163: EQUAL
18164: IFFALSE 18180
// begin wait ( 3 ) ;
18166: LD_INT 3
18168: PPUSH
18169: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18173: LD_STRING ACH_BASEDESTROYER
18175: PPUSH
18176: CALL_OW 543
// end ; m1 := false ;
18180: LD_ADDR_VAR 0 4
18184: PUSH
18185: LD_INT 0
18187: ST_TO_ADDR
// m2 := false ;
18188: LD_ADDR_VAR 0 5
18192: PUSH
18193: LD_INT 0
18195: ST_TO_ADDR
// m3 := false ;
18196: LD_ADDR_VAR 0 6
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 100
18211: PUSH
18212: LD_INT 140
18214: PUSH
18215: LD_INT 180
18217: PUSH
18218: LD_INT 220
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: LD_OWVAR 67
18231: ARRAY
18232: PLUS
18233: PUSH
18234: LD_VAR 0 2
18238: GREATER
18239: IFFALSE 18271
// begin AddMedal ( cans , 1 ) ;
18241: LD_STRING cans
18243: PPUSH
18244: LD_INT 1
18246: PPUSH
18247: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18251: LD_INT 1
18253: PPUSH
18254: LD_STRING 06_crates_1
18256: PPUSH
18257: CALL_OW 39
// m1 := true ;
18261: LD_ADDR_VAR 0 4
18265: PUSH
18266: LD_INT 1
18268: ST_TO_ADDR
// end else
18269: GO 18292
// begin AddMedal ( cans , - 1 ) ;
18271: LD_STRING cans
18273: PPUSH
18274: LD_INT 1
18276: NEG
18277: PPUSH
18278: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18282: LD_INT 0
18284: PPUSH
18285: LD_STRING 06_crates_1
18287: PPUSH
18288: CALL_OW 39
// end ; if unitLost < 3 then
18292: LD_EXP 30
18296: PUSH
18297: LD_INT 3
18299: LESS
18300: IFFALSE 18322
// begin AddMedal ( people , 1 ) ;
18302: LD_STRING people
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL_OW 101
// m2 := true ;
18312: LD_ADDR_VAR 0 5
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// end else
18320: GO 18333
// AddMedal ( people , - 1 ) ;
18322: LD_STRING people
18324: PPUSH
18325: LD_INT 1
18327: NEG
18328: PPUSH
18329: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18333: LD_EXP 28
18337: PPUSH
18338: LD_STRING 06_remoteVehs_1
18340: PPUSH
18341: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18345: LD_EXP 28
18349: PUSH
18350: LD_INT 1
18352: EQUAL
18353: IFFALSE 18375
// begin AddMedal ( remote , 1 ) ;
18355: LD_STRING remote
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 101
// m3 := true ;
18365: LD_ADDR_VAR 0 6
18369: PUSH
18370: LD_INT 1
18372: ST_TO_ADDR
// end else
18373: GO 18415
// begin if GetTech ( 18 , 1 ) = state_enabled then
18375: LD_INT 18
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 321
18385: PUSH
18386: LD_INT 1
18388: EQUAL
18389: IFFALSE 18404
// AddMedal ( remote , - 1 ) else
18391: LD_STRING remote
18393: PPUSH
18394: LD_INT 1
18396: NEG
18397: PPUSH
18398: CALL_OW 101
18402: GO 18415
// AddMedal ( remote , - 2 ) ;
18404: LD_STRING remote
18406: PPUSH
18407: LD_INT 2
18409: NEG
18410: PPUSH
18411: CALL_OW 101
// end ; if m1 and m2 and m3 then
18415: LD_VAR 0 4
18419: PUSH
18420: LD_VAR 0 5
18424: AND
18425: PUSH
18426: LD_VAR 0 6
18430: AND
18431: IFFALSE 18447
// begin wait ( 3 ) ;
18433: LD_INT 3
18435: PPUSH
18436: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18440: LD_STRING ACH_ASPEED_6
18442: PPUSH
18443: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18447: LD_OWVAR 67
18451: PUSH
18452: LD_INT 3
18454: GREATEREQUAL
18455: PUSH
18456: LD_VAR 0 4
18460: AND
18461: PUSH
18462: LD_VAR 0 5
18466: AND
18467: PUSH
18468: LD_VAR 0 6
18472: AND
18473: IFFALSE 18485
// SetAchievementEX ( ACH_AMER , 6 ) ;
18475: LD_STRING ACH_AMER
18477: PPUSH
18478: LD_INT 6
18480: PPUSH
18481: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18485: LD_EXP 20
18489: PPUSH
18490: LD_STRING 06_KurtStatus_1
18492: PPUSH
18493: CALL_OW 39
// GiveMedals ( Main ) ;
18497: LD_STRING Main
18499: PPUSH
18500: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18504: LD_INT 22
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 50
18526: PUSH
18527: EMPTY
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 25
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 25
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 25
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 25
18565: PUSH
18566: LD_INT 4
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: PPUSH
18591: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18595: LD_EXP 1
18599: PPUSH
18600: LD_EXP 42
18604: PUSH
18605: LD_STRING JMM
18607: STR
18608: PPUSH
18609: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18613: LD_EXP 2
18617: PPUSH
18618: LD_EXP 42
18622: PUSH
18623: LD_STRING Lisa
18625: STR
18626: PPUSH
18627: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18631: LD_EXP 3
18635: PPUSH
18636: LD_EXP 42
18640: PUSH
18641: LD_STRING Bobby
18643: STR
18644: PPUSH
18645: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18649: LD_EXP 4
18653: PPUSH
18654: LD_EXP 42
18658: PUSH
18659: LD_STRING Cyrus
18661: STR
18662: PPUSH
18663: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18667: LD_EXP 5
18671: PPUSH
18672: LD_EXP 42
18676: PUSH
18677: LD_STRING Frank
18679: STR
18680: PPUSH
18681: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18685: LD_EXP 6
18689: PPUSH
18690: LD_EXP 42
18694: PUSH
18695: LD_STRING Brown
18697: STR
18698: PPUSH
18699: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18703: LD_EXP 7
18707: PPUSH
18708: LD_EXP 42
18712: PUSH
18713: LD_STRING Donaldson
18715: STR
18716: PPUSH
18717: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18721: LD_EXP 8
18725: PPUSH
18726: LD_EXP 42
18730: PUSH
18731: LD_STRING Gladstone
18733: STR
18734: PPUSH
18735: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18739: LD_EXP 9
18743: PPUSH
18744: LD_EXP 42
18748: PUSH
18749: LD_STRING Denis
18751: STR
18752: PPUSH
18753: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18757: LD_EXP 15
18761: PPUSH
18762: LD_EXP 42
18766: PUSH
18767: LD_STRING Joan
18769: STR
18770: PPUSH
18771: CALL 6869 0 2
// if IsLive ( Joan ) then
18775: LD_EXP 15
18779: PPUSH
18780: CALL_OW 300
18784: IFFALSE 18798
// SaveCharacters ( Joan , Joan ) ;
18786: LD_EXP 15
18790: PPUSH
18791: LD_STRING Joan
18793: PPUSH
18794: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18798: LD_EXP 16
18802: PPUSH
18803: LD_STRING 06_JoanStatus_1
18805: PPUSH
18806: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18810: LD_INT 50
18812: PUSH
18813: EMPTY
18814: LIST
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 21
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 25
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 25
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 25
18861: PUSH
18862: LD_INT 3
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 4
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: PUSH
18897: LD_EXP 1
18901: PUSH
18902: LD_EXP 2
18906: PUSH
18907: LD_EXP 3
18911: PUSH
18912: LD_EXP 4
18916: PUSH
18917: LD_EXP 5
18921: PUSH
18922: LD_EXP 6
18926: PUSH
18927: LD_EXP 7
18931: PUSH
18932: LD_EXP 8
18936: PUSH
18937: LD_EXP 9
18941: PUSH
18942: LD_EXP 15
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: DIFF
18959: PPUSH
18960: LD_STRING 06_other_survivors
18962: PPUSH
18963: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18967: LD_INT 50
18969: PUSH
18970: EMPTY
18971: LIST
18972: PUSH
18973: LD_INT 22
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 21
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 12
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 25
19008: PUSH
19009: LD_INT 16
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PPUSH
19032: LD_STRING 06_other_apemans
19034: PPUSH
19035: CALL_OW 38
// YouWin ;
19039: CALL_OW 103
// end ; end_of_file
19043: LD_VAR 0 3
19047: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19048: LD_EXP 47
19052: PUSH
19053: LD_OWVAR 1
19057: PUSH
19058: LD_INT 23100
19060: PUSH
19061: LD_INT 21000
19063: PUSH
19064: LD_INT 18900
19066: PUSH
19067: LD_INT 16800
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: LD_OWVAR 67
19080: ARRAY
19081: GREATER
19082: AND
19083: IFFALSE 19397
19085: GO 19087
19087: DISABLE
19088: LD_INT 0
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
// begin enable ;
19094: ENABLE
// for i in ruAttackers do
19095: LD_ADDR_VAR 0 1
19099: PUSH
19100: LD_EXP 47
19104: PUSH
19105: FOR_IN
19106: IFFALSE 19395
// begin if not IsDrivenBy ( i ) then
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 311
19117: NOT
19118: IFFALSE 19122
// continue ;
19120: GO 19105
// if i mod 2 = 0 then
19122: LD_VAR 0 1
19126: PUSH
19127: LD_INT 2
19129: MOD
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: IFFALSE 19189
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 91
19143: PUSH
19144: LD_INT 52
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 82
19153: PUSH
19154: LD_INT 34
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 90
19163: PUSH
19164: LD_INT 26
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 80
19173: PUSH
19174: LD_INT 12
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: ST_TO_ADDR
19187: GO 19251
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_INT 91
19196: PUSH
19197: LD_INT 52
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 68
19206: PUSH
19207: LD_INT 46
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 48
19216: PUSH
19217: LD_INT 43
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 33
19226: PUSH
19227: LD_INT 34
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 30
19236: PUSH
19237: LD_INT 19
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19251: LD_VAR 0 1
19255: PPUSH
19256: CALL_OW 256
19260: PUSH
19261: LD_INT 1000
19263: EQUAL
19264: IFFALSE 19282
// AgressiveMove ( i , path ) else
19266: LD_VAR 0 1
19270: PPUSH
19271: LD_VAR 0 3
19275: PPUSH
19276: CALL 78565 0 2
19280: GO 19393
// if GetLives ( i ) < 650 then
19282: LD_VAR 0 1
19286: PPUSH
19287: CALL_OW 256
19291: PUSH
19292: LD_INT 650
19294: LESS
19295: IFFALSE 19393
// begin if not IsInArea ( i , russianRepairArea ) then
19297: LD_VAR 0 1
19301: PPUSH
19302: LD_INT 12
19304: PPUSH
19305: CALL_OW 308
19309: NOT
19310: IFFALSE 19379
// begin SetTag ( i , 0 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 0
19319: PPUSH
19320: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 261
19333: PUSH
19334: LD_INT 50
19336: LESS
19337: PUSH
19338: LD_INT 21
19340: PPUSH
19341: CALL_OW 302
19345: AND
19346: IFFALSE 19362
// ComMoveUnit ( i , rufab ) else
19348: LD_VAR 0 1
19352: PPUSH
19353: LD_INT 21
19355: PPUSH
19356: CALL_OW 112
19360: GO 19377
// ComMoveXY ( i , 121 , 99 ) ;
19362: LD_VAR 0 1
19366: PPUSH
19367: LD_INT 121
19369: PPUSH
19370: LD_INT 99
19372: PPUSH
19373: CALL_OW 111
// end else
19377: GO 19393
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 311
19388: PPUSH
19389: CALL 77661 0 1
// end ; end ;
19393: GO 19105
19395: POP
19396: POP
// end ;
19397: PPOPN 4
19399: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19400: LD_INT 0
19402: PPUSH
19403: PPUSH
19404: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19405: LD_ADDR_VAR 0 2
19409: PUSH
19410: DOUBLE
19411: LD_INT 1
19413: DEC
19414: ST_TO_ADDR
19415: LD_INT 4
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: LD_INT 6
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: LD_OWVAR 67
19437: ARRAY
19438: PUSH
19439: FOR_TO
19440: IFFALSE 19615
// begin uc_side := 3 ;
19442: LD_ADDR_OWVAR 20
19446: PUSH
19447: LD_INT 3
19449: ST_TO_ADDR
// uc_nation := 3 ;
19450: LD_ADDR_OWVAR 21
19454: PUSH
19455: LD_INT 3
19457: ST_TO_ADDR
// InitHC_All ( ) ;
19458: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19462: LD_INT 0
19464: PPUSH
19465: LD_INT 4
19467: PUSH
19468: LD_INT 5
19470: PUSH
19471: LD_INT 6
19473: PUSH
19474: LD_INT 6
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: LD_OWVAR 67
19487: ARRAY
19488: PPUSH
19489: CALL_OW 381
// un := CreateHuman ;
19493: LD_ADDR_VAR 0 3
19497: PUSH
19498: CALL_OW 44
19502: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19503: LD_VAR 0 3
19507: PPUSH
19508: LD_INT 127
19510: PPUSH
19511: LD_INT 62
19513: PPUSH
19514: LD_INT 3
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19524: LD_ADDR_EXP 48
19528: PUSH
19529: LD_EXP 48
19533: PPUSH
19534: LD_EXP 48
19538: PUSH
19539: LD_INT 1
19541: PLUS
19542: PPUSH
19543: LD_VAR 0 3
19547: PPUSH
19548: CALL_OW 1
19552: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19553: LD_VAR 0 3
19557: PPUSH
19558: LD_INT 83
19560: PPUSH
19561: LD_INT 49
19563: PPUSH
19564: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19568: LD_VAR 0 3
19572: PPUSH
19573: LD_INT 49
19575: PPUSH
19576: LD_INT 43
19578: PPUSH
19579: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_INT 31
19590: PPUSH
19591: LD_INT 15
19593: PPUSH
19594: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 63
19605: PPUSH
19606: LD_INT 9
19608: PPUSH
19609: CALL_OW 174
// end ;
19613: GO 19439
19615: POP
19616: POP
// end ; end_of_file
19617: LD_VAR 0 1
19621: RET
// export function CreateNature ; var i , un ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
19626: PPUSH
// for i := 1 to Difficulty + 2 do
19627: LD_ADDR_VAR 0 2
19631: PUSH
19632: DOUBLE
19633: LD_INT 1
19635: DEC
19636: ST_TO_ADDR
19637: LD_OWVAR 67
19641: PUSH
19642: LD_INT 2
19644: PLUS
19645: PUSH
19646: FOR_TO
19647: IFFALSE 19756
// begin hc_sex := sex_male ;
19649: LD_ADDR_OWVAR 27
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// uc_side := 0 ;
19657: LD_ADDR_OWVAR 20
19661: PUSH
19662: LD_INT 0
19664: ST_TO_ADDR
// uc_nation := nation_nature ;
19665: LD_ADDR_OWVAR 21
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// hc_class := class_tiger ;
19673: LD_ADDR_OWVAR 28
19677: PUSH
19678: LD_INT 14
19680: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19681: LD_ADDR_OWVAR 31
19685: PUSH
19686: LD_EXP 35
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19706: LD_ADDR_OWVAR 35
19710: PUSH
19711: LD_INT 5
19713: NEG
19714: PPUSH
19715: LD_INT 5
19717: PPUSH
19718: CALL_OW 12
19722: PUSH
19723: LD_OWVAR 67
19727: MUL
19728: ST_TO_ADDR
// un := CreateHuman ;
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: CALL_OW 44
19738: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19739: LD_VAR 0 3
19743: PPUSH
19744: LD_INT 18
19746: PPUSH
19747: LD_INT 0
19749: PPUSH
19750: CALL_OW 49
// end ;
19754: GO 19646
19756: POP
19757: POP
// for i = 1 to rand ( 3 , 4 ) do
19758: LD_ADDR_VAR 0 2
19762: PUSH
19763: DOUBLE
19764: LD_INT 1
19766: DEC
19767: ST_TO_ADDR
19768: LD_INT 3
19770: PPUSH
19771: LD_INT 4
19773: PPUSH
19774: CALL_OW 12
19778: PUSH
19779: FOR_TO
19780: IFFALSE 19850
// begin hc_class := class_phororhacos ;
19782: LD_ADDR_OWVAR 28
19786: PUSH
19787: LD_INT 18
19789: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19790: LD_ADDR_OWVAR 31
19794: PUSH
19795: LD_EXP 35
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// hc_agressivity := 0 ;
19815: LD_ADDR_OWVAR 35
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// un = CreateHuman ;
19823: LD_ADDR_VAR 0 3
19827: PUSH
19828: CALL_OW 44
19832: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19833: LD_VAR 0 3
19837: PPUSH
19838: LD_INT 18
19840: PPUSH
19841: LD_INT 0
19843: PPUSH
19844: CALL_OW 49
// end ;
19848: GO 19779
19850: POP
19851: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: DOUBLE
19858: LD_INT 1
19860: DEC
19861: ST_TO_ADDR
19862: LD_INT 1
19864: PPUSH
19865: LD_INT 3
19867: PPUSH
19868: CALL_OW 12
19872: PUSH
19873: LD_OWVAR 67
19877: PLUS
19878: PUSH
19879: FOR_TO
19880: IFFALSE 20017
// begin hc_class := class_apeman ;
19882: LD_ADDR_OWVAR 28
19886: PUSH
19887: LD_INT 12
19889: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19890: LD_ADDR_OWVAR 31
19894: PUSH
19895: LD_INT 2
19897: PPUSH
19898: LD_INT 5
19900: PPUSH
19901: CALL_OW 12
19905: PUSH
19906: LD_INT 0
19908: PPUSH
19909: LD_INT 2
19911: PPUSH
19912: CALL_OW 12
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19929: LD_ADDR_OWVAR 35
19933: PUSH
19934: LD_INT 20
19936: PPUSH
19937: LD_INT 30
19939: PPUSH
19940: CALL_OW 12
19944: PUSH
19945: LD_INT 30
19947: PPUSH
19948: LD_INT 40
19950: PPUSH
19951: CALL_OW 12
19955: PUSH
19956: LD_INT 40
19958: PPUSH
19959: LD_INT 50
19961: PPUSH
19962: CALL_OW 12
19966: PUSH
19967: LD_INT 45
19969: PPUSH
19970: LD_INT 55
19972: PPUSH
19973: CALL_OW 12
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_OWVAR 67
19988: ARRAY
19989: ST_TO_ADDR
// un := CreateHuman ;
19990: LD_ADDR_VAR 0 3
19994: PUSH
19995: CALL_OW 44
19999: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20000: LD_VAR 0 3
20004: PPUSH
20005: LD_INT 19
20007: PPUSH
20008: LD_INT 0
20010: PPUSH
20011: CALL_OW 49
// end ;
20015: GO 19879
20017: POP
20018: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 5
20031: PPUSH
20032: LD_INT 6
20034: PPUSH
20035: CALL_OW 12
20039: PUSH
20040: LD_OWVAR 67
20044: PLUS
20045: PUSH
20046: FOR_TO
20047: IFFALSE 20131
// begin hc_class := class_apeman ;
20049: LD_ADDR_OWVAR 28
20053: PUSH
20054: LD_INT 12
20056: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20057: LD_ADDR_OWVAR 31
20061: PUSH
20062: LD_INT 2
20064: PPUSH
20065: LD_INT 5
20067: PPUSH
20068: CALL_OW 12
20072: PUSH
20073: LD_INT 0
20075: PPUSH
20076: LD_INT 2
20078: PPUSH
20079: CALL_OW 12
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: ST_TO_ADDR
// hc_agressivity := 0 ;
20096: LD_ADDR_OWVAR 35
20100: PUSH
20101: LD_INT 0
20103: ST_TO_ADDR
// un = CreateHuman ;
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: CALL_OW 44
20113: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20114: LD_VAR 0 3
20118: PPUSH
20119: LD_INT 20
20121: PPUSH
20122: LD_INT 0
20124: PPUSH
20125: CALL_OW 49
// end ;
20129: GO 20046
20131: POP
20132: POP
// end ; end_of_file
20133: LD_VAR 0 1
20137: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20138: LD_INT 0
20140: PPUSH
// ar_miner := 81 ;
20141: LD_ADDR_EXP 56
20145: PUSH
20146: LD_INT 81
20148: ST_TO_ADDR
// ar_crane := 88 ;
20149: LD_ADDR_EXP 55
20153: PUSH
20154: LD_INT 88
20156: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20157: LD_ADDR_EXP 50
20161: PUSH
20162: LD_INT 89
20164: ST_TO_ADDR
// us_hack := 99 ;
20165: LD_ADDR_EXP 51
20169: PUSH
20170: LD_INT 99
20172: ST_TO_ADDR
// us_artillery := 97 ;
20173: LD_ADDR_EXP 52
20177: PUSH
20178: LD_INT 97
20180: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20181: LD_ADDR_EXP 53
20185: PUSH
20186: LD_INT 91
20188: ST_TO_ADDR
// ar_mortar := 92 ;
20189: LD_ADDR_EXP 54
20193: PUSH
20194: LD_INT 92
20196: ST_TO_ADDR
// ru_flamethrower := 93 ;
20197: LD_ADDR_EXP 57
20201: PUSH
20202: LD_INT 93
20204: ST_TO_ADDR
// ru_radar := 98 ;
20205: LD_ADDR_EXP 49
20209: PUSH
20210: LD_INT 98
20212: ST_TO_ADDR
// tech_Artillery := 80 ;
20213: LD_ADDR_EXP 58
20217: PUSH
20218: LD_INT 80
20220: ST_TO_ADDR
// tech_RadMat := 81 ;
20221: LD_ADDR_EXP 59
20225: PUSH
20226: LD_INT 81
20228: ST_TO_ADDR
// tech_BasicTools := 82 ;
20229: LD_ADDR_EXP 60
20233: PUSH
20234: LD_INT 82
20236: ST_TO_ADDR
// tech_Cargo := 83 ;
20237: LD_ADDR_EXP 61
20241: PUSH
20242: LD_INT 83
20244: ST_TO_ADDR
// tech_Track := 84 ;
20245: LD_ADDR_EXP 62
20249: PUSH
20250: LD_INT 84
20252: ST_TO_ADDR
// tech_Crane := 85 ;
20253: LD_ADDR_EXP 63
20257: PUSH
20258: LD_INT 85
20260: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20261: LD_ADDR_EXP 64
20265: PUSH
20266: LD_INT 86
20268: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20269: LD_ADDR_EXP 65
20273: PUSH
20274: LD_INT 87
20276: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20277: LD_ADDR_EXP 66
20281: PUSH
20282: LD_INT 88
20284: ST_TO_ADDR
// class_mastodont := 31 ;
20285: LD_ADDR_EXP 67
20289: PUSH
20290: LD_INT 31
20292: ST_TO_ADDR
// class_horse := 21 ;
20293: LD_ADDR_EXP 68
20297: PUSH
20298: LD_INT 21
20300: ST_TO_ADDR
// end ;
20301: LD_VAR 0 1
20305: RET
// every 1 do
20306: GO 20308
20308: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20309: CALL 20138 0 0
20313: END
// every 0 0$1 do
20314: GO 20316
20316: DISABLE
// begin enable ;
20317: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20318: LD_STRING updateTimer(
20320: PUSH
20321: LD_OWVAR 1
20325: STR
20326: PUSH
20327: LD_STRING );
20329: STR
20330: PPUSH
20331: CALL_OW 559
// end ;
20335: END
// export function SOS_MapStart ( ) ; begin
20336: LD_INT 0
20338: PPUSH
// if streamModeActive then
20339: LD_EXP 69
20343: IFFALSE 20352
// DefineStreamItems ( true ) ;
20345: LD_INT 1
20347: PPUSH
20348: CALL 22002 0 1
// UpdateFactoryWaypoints ( ) ;
20352: CALL 35586 0 0
// end ;
20356: LD_VAR 0 1
20360: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20361: LD_INT 0
20363: PPUSH
// if p2 = 100 then
20364: LD_VAR 0 2
20368: PUSH
20369: LD_INT 100
20371: EQUAL
20372: IFFALSE 21375
// begin if not StreamModeActive then
20374: LD_EXP 69
20378: NOT
20379: IFFALSE 20389
// StreamModeActive := true ;
20381: LD_ADDR_EXP 69
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 0 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 0
20396: EQUAL
20397: IFFALSE 20403
// InitStreamMode ;
20399: CALL 21538 0 0
// if p3 = 1 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: EQUAL
20411: IFFALSE 20421
// sRocket := true ;
20413: LD_ADDR_EXP 74
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 2 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 2
20428: EQUAL
20429: IFFALSE 20439
// sSpeed := true ;
20431: LD_ADDR_EXP 73
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 3 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 3
20446: EQUAL
20447: IFFALSE 20457
// sEngine := true ;
20449: LD_ADDR_EXP 75
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 4 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 4
20464: EQUAL
20465: IFFALSE 20475
// sSpec := true ;
20467: LD_ADDR_EXP 72
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 5 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 5
20482: EQUAL
20483: IFFALSE 20493
// sLevel := true ;
20485: LD_ADDR_EXP 76
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 6 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 6
20500: EQUAL
20501: IFFALSE 20511
// sArmoury := true ;
20503: LD_ADDR_EXP 77
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 7 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 7
20518: EQUAL
20519: IFFALSE 20529
// sRadar := true ;
20521: LD_ADDR_EXP 78
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 8 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 8
20536: EQUAL
20537: IFFALSE 20547
// sBunker := true ;
20539: LD_ADDR_EXP 79
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 9 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 9
20554: EQUAL
20555: IFFALSE 20565
// sHack := true ;
20557: LD_ADDR_EXP 80
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 10 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 10
20572: EQUAL
20573: IFFALSE 20583
// sFire := true ;
20575: LD_ADDR_EXP 81
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 11 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 11
20590: EQUAL
20591: IFFALSE 20601
// sRefresh := true ;
20593: LD_ADDR_EXP 82
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 12 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 12
20608: EQUAL
20609: IFFALSE 20619
// sExp := true ;
20611: LD_ADDR_EXP 83
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 13 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 13
20626: EQUAL
20627: IFFALSE 20637
// sDepot := true ;
20629: LD_ADDR_EXP 84
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 14 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 14
20644: EQUAL
20645: IFFALSE 20655
// sFlag := true ;
20647: LD_ADDR_EXP 85
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 15 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 15
20662: EQUAL
20663: IFFALSE 20673
// sKamikadze := true ;
20665: LD_ADDR_EXP 93
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 16 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 16
20680: EQUAL
20681: IFFALSE 20691
// sTroll := true ;
20683: LD_ADDR_EXP 94
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 17 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 17
20698: EQUAL
20699: IFFALSE 20709
// sSlow := true ;
20701: LD_ADDR_EXP 95
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 18 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 18
20716: EQUAL
20717: IFFALSE 20727
// sLack := true ;
20719: LD_ADDR_EXP 96
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 19 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 19
20734: EQUAL
20735: IFFALSE 20745
// sTank := true ;
20737: LD_ADDR_EXP 98
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 20 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 20
20752: EQUAL
20753: IFFALSE 20763
// sRemote := true ;
20755: LD_ADDR_EXP 99
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 21 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 21
20770: EQUAL
20771: IFFALSE 20781
// sPowell := true ;
20773: LD_ADDR_EXP 100
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 22 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 22
20788: EQUAL
20789: IFFALSE 20799
// sTeleport := true ;
20791: LD_ADDR_EXP 103
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 23 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 23
20806: EQUAL
20807: IFFALSE 20817
// sOilTower := true ;
20809: LD_ADDR_EXP 105
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 24 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 24
20824: EQUAL
20825: IFFALSE 20835
// sShovel := true ;
20827: LD_ADDR_EXP 106
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 25 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 25
20842: EQUAL
20843: IFFALSE 20853
// sSheik := true ;
20845: LD_ADDR_EXP 107
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 26 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 26
20860: EQUAL
20861: IFFALSE 20871
// sEarthquake := true ;
20863: LD_ADDR_EXP 109
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 27 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 27
20878: EQUAL
20879: IFFALSE 20889
// sAI := true ;
20881: LD_ADDR_EXP 110
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 28 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 28
20896: EQUAL
20897: IFFALSE 20907
// sCargo := true ;
20899: LD_ADDR_EXP 113
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 29 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 29
20914: EQUAL
20915: IFFALSE 20925
// sDLaser := true ;
20917: LD_ADDR_EXP 114
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 30 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 30
20932: EQUAL
20933: IFFALSE 20943
// sExchange := true ;
20935: LD_ADDR_EXP 115
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 31 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 31
20950: EQUAL
20951: IFFALSE 20961
// sFac := true ;
20953: LD_ADDR_EXP 116
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 32 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 32
20968: EQUAL
20969: IFFALSE 20979
// sPower := true ;
20971: LD_ADDR_EXP 117
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 33 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 33
20986: EQUAL
20987: IFFALSE 20997
// sRandom := true ;
20989: LD_ADDR_EXP 118
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 34 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 34
21004: EQUAL
21005: IFFALSE 21015
// sShield := true ;
21007: LD_ADDR_EXP 119
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 35 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 35
21022: EQUAL
21023: IFFALSE 21033
// sTime := true ;
21025: LD_ADDR_EXP 120
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 36 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 36
21040: EQUAL
21041: IFFALSE 21051
// sTools := true ;
21043: LD_ADDR_EXP 121
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 101 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 101
21058: EQUAL
21059: IFFALSE 21069
// sSold := true ;
21061: LD_ADDR_EXP 86
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 102 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 102
21076: EQUAL
21077: IFFALSE 21087
// sDiff := true ;
21079: LD_ADDR_EXP 87
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 103 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 103
21094: EQUAL
21095: IFFALSE 21105
// sFog := true ;
21097: LD_ADDR_EXP 90
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 104 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 104
21112: EQUAL
21113: IFFALSE 21123
// sReset := true ;
21115: LD_ADDR_EXP 91
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 105 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 105
21130: EQUAL
21131: IFFALSE 21141
// sSun := true ;
21133: LD_ADDR_EXP 92
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 106 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 106
21148: EQUAL
21149: IFFALSE 21159
// sTiger := true ;
21151: LD_ADDR_EXP 88
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 107 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 107
21166: EQUAL
21167: IFFALSE 21177
// sBomb := true ;
21169: LD_ADDR_EXP 89
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 108 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 108
21184: EQUAL
21185: IFFALSE 21195
// sWound := true ;
21187: LD_ADDR_EXP 97
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 109 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 109
21202: EQUAL
21203: IFFALSE 21213
// sBetray := true ;
21205: LD_ADDR_EXP 101
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 110 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 110
21220: EQUAL
21221: IFFALSE 21231
// sContamin := true ;
21223: LD_ADDR_EXP 102
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 111 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 111
21238: EQUAL
21239: IFFALSE 21249
// sOil := true ;
21241: LD_ADDR_EXP 104
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 112 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 112
21256: EQUAL
21257: IFFALSE 21267
// sStu := true ;
21259: LD_ADDR_EXP 108
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 113 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 113
21274: EQUAL
21275: IFFALSE 21285
// sBazooka := true ;
21277: LD_ADDR_EXP 111
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 114 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 114
21292: EQUAL
21293: IFFALSE 21303
// sMortar := true ;
21295: LD_ADDR_EXP 112
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// if p3 = 115 then
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 115
21310: EQUAL
21311: IFFALSE 21321
// sRanger := true ;
21313: LD_ADDR_EXP 122
21317: PUSH
21318: LD_INT 1
21320: ST_TO_ADDR
// if p3 = 116 then
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 116
21328: EQUAL
21329: IFFALSE 21339
// sComputer := true ;
21331: LD_ADDR_EXP 123
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// if p3 = 117 then
21339: LD_VAR 0 3
21343: PUSH
21344: LD_INT 117
21346: EQUAL
21347: IFFALSE 21357
// s30 := true ;
21349: LD_ADDR_EXP 124
21353: PUSH
21354: LD_INT 1
21356: ST_TO_ADDR
// if p3 = 118 then
21357: LD_VAR 0 3
21361: PUSH
21362: LD_INT 118
21364: EQUAL
21365: IFFALSE 21375
// s60 := true ;
21367: LD_ADDR_EXP 125
21371: PUSH
21372: LD_INT 1
21374: ST_TO_ADDR
// end ; if p2 = 101 then
21375: LD_VAR 0 2
21379: PUSH
21380: LD_INT 101
21382: EQUAL
21383: IFFALSE 21511
// begin case p3 of 1 :
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 1
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21405
21398: POP
// hHackUnlimitedResources ; 2 :
21399: CALL 33609 0 0
21403: GO 21511
21405: LD_INT 2
21407: DOUBLE
21408: EQUAL
21409: IFTRUE 21413
21411: GO 21420
21413: POP
// hHackSetLevel10 ; 3 :
21414: CALL 33742 0 0
21418: GO 21511
21420: LD_INT 3
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21435
21428: POP
// hHackSetLevel10YourUnits ; 4 :
21429: CALL 33827 0 0
21433: GO 21511
21435: LD_INT 4
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21450
21443: POP
// hHackInvincible ; 5 :
21444: CALL 34275 0 0
21448: GO 21511
21450: LD_INT 5
21452: DOUBLE
21453: EQUAL
21454: IFTRUE 21458
21456: GO 21465
21458: POP
// hHackInvisible ; 6 :
21459: CALL 34386 0 0
21463: GO 21511
21465: LD_INT 6
21467: DOUBLE
21468: EQUAL
21469: IFTRUE 21473
21471: GO 21480
21473: POP
// hHackChangeYourSide ; 7 :
21474: CALL 34443 0 0
21478: GO 21511
21480: LD_INT 7
21482: DOUBLE
21483: EQUAL
21484: IFTRUE 21488
21486: GO 21495
21488: POP
// hHackChangeUnitSide ; 8 :
21489: CALL 34485 0 0
21493: GO 21511
21495: LD_INT 8
21497: DOUBLE
21498: EQUAL
21499: IFTRUE 21503
21501: GO 21510
21503: POP
// hHackFog ; end ;
21504: CALL 34586 0 0
21508: GO 21511
21510: POP
// end ; end ;
21511: LD_VAR 0 7
21515: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21516: GO 21518
21518: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21519: LD_STRING initStreamRollete();
21521: PPUSH
21522: CALL_OW 559
// InitStreamMode ;
21526: CALL 21538 0 0
// DefineStreamItems ( false ) ;
21530: LD_INT 0
21532: PPUSH
21533: CALL 22002 0 1
// end ;
21537: END
// function InitStreamMode ; begin
21538: LD_INT 0
21540: PPUSH
// streamModeActive := false ;
21541: LD_ADDR_EXP 69
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// normalCounter := 36 ;
21549: LD_ADDR_EXP 70
21553: PUSH
21554: LD_INT 36
21556: ST_TO_ADDR
// hardcoreCounter := 18 ;
21557: LD_ADDR_EXP 71
21561: PUSH
21562: LD_INT 18
21564: ST_TO_ADDR
// sRocket := false ;
21565: LD_ADDR_EXP 74
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sSpeed := false ;
21573: LD_ADDR_EXP 73
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sEngine := false ;
21581: LD_ADDR_EXP 75
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sSpec := false ;
21589: LD_ADDR_EXP 72
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sLevel := false ;
21597: LD_ADDR_EXP 76
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sArmoury := false ;
21605: LD_ADDR_EXP 77
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sRadar := false ;
21613: LD_ADDR_EXP 78
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sBunker := false ;
21621: LD_ADDR_EXP 79
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sHack := false ;
21629: LD_ADDR_EXP 80
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sFire := false ;
21637: LD_ADDR_EXP 81
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sRefresh := false ;
21645: LD_ADDR_EXP 82
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sExp := false ;
21653: LD_ADDR_EXP 83
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sDepot := false ;
21661: LD_ADDR_EXP 84
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sFlag := false ;
21669: LD_ADDR_EXP 85
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sKamikadze := false ;
21677: LD_ADDR_EXP 93
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sTroll := false ;
21685: LD_ADDR_EXP 94
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sSlow := false ;
21693: LD_ADDR_EXP 95
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sLack := false ;
21701: LD_ADDR_EXP 96
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sTank := false ;
21709: LD_ADDR_EXP 98
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sRemote := false ;
21717: LD_ADDR_EXP 99
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sPowell := false ;
21725: LD_ADDR_EXP 100
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sTeleport := false ;
21733: LD_ADDR_EXP 103
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sOilTower := false ;
21741: LD_ADDR_EXP 105
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sShovel := false ;
21749: LD_ADDR_EXP 106
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sSheik := false ;
21757: LD_ADDR_EXP 107
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sEarthquake := false ;
21765: LD_ADDR_EXP 109
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sAI := false ;
21773: LD_ADDR_EXP 110
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sCargo := false ;
21781: LD_ADDR_EXP 113
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sDLaser := false ;
21789: LD_ADDR_EXP 114
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// sExchange := false ;
21797: LD_ADDR_EXP 115
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// sFac := false ;
21805: LD_ADDR_EXP 116
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// sPower := false ;
21813: LD_ADDR_EXP 117
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// sRandom := false ;
21821: LD_ADDR_EXP 118
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// sShield := false ;
21829: LD_ADDR_EXP 119
21833: PUSH
21834: LD_INT 0
21836: ST_TO_ADDR
// sTime := false ;
21837: LD_ADDR_EXP 120
21841: PUSH
21842: LD_INT 0
21844: ST_TO_ADDR
// sTools := false ;
21845: LD_ADDR_EXP 121
21849: PUSH
21850: LD_INT 0
21852: ST_TO_ADDR
// sSold := false ;
21853: LD_ADDR_EXP 86
21857: PUSH
21858: LD_INT 0
21860: ST_TO_ADDR
// sDiff := false ;
21861: LD_ADDR_EXP 87
21865: PUSH
21866: LD_INT 0
21868: ST_TO_ADDR
// sFog := false ;
21869: LD_ADDR_EXP 90
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
// sReset := false ;
21877: LD_ADDR_EXP 91
21881: PUSH
21882: LD_INT 0
21884: ST_TO_ADDR
// sSun := false ;
21885: LD_ADDR_EXP 92
21889: PUSH
21890: LD_INT 0
21892: ST_TO_ADDR
// sTiger := false ;
21893: LD_ADDR_EXP 88
21897: PUSH
21898: LD_INT 0
21900: ST_TO_ADDR
// sBomb := false ;
21901: LD_ADDR_EXP 89
21905: PUSH
21906: LD_INT 0
21908: ST_TO_ADDR
// sWound := false ;
21909: LD_ADDR_EXP 97
21913: PUSH
21914: LD_INT 0
21916: ST_TO_ADDR
// sBetray := false ;
21917: LD_ADDR_EXP 101
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// sContamin := false ;
21925: LD_ADDR_EXP 102
21929: PUSH
21930: LD_INT 0
21932: ST_TO_ADDR
// sOil := false ;
21933: LD_ADDR_EXP 104
21937: PUSH
21938: LD_INT 0
21940: ST_TO_ADDR
// sStu := false ;
21941: LD_ADDR_EXP 108
21945: PUSH
21946: LD_INT 0
21948: ST_TO_ADDR
// sBazooka := false ;
21949: LD_ADDR_EXP 111
21953: PUSH
21954: LD_INT 0
21956: ST_TO_ADDR
// sMortar := false ;
21957: LD_ADDR_EXP 112
21961: PUSH
21962: LD_INT 0
21964: ST_TO_ADDR
// sRanger := false ;
21965: LD_ADDR_EXP 122
21969: PUSH
21970: LD_INT 0
21972: ST_TO_ADDR
// sComputer := false ;
21973: LD_ADDR_EXP 123
21977: PUSH
21978: LD_INT 0
21980: ST_TO_ADDR
// s30 := false ;
21981: LD_ADDR_EXP 124
21985: PUSH
21986: LD_INT 0
21988: ST_TO_ADDR
// s60 := false ;
21989: LD_ADDR_EXP 125
21993: PUSH
21994: LD_INT 0
21996: ST_TO_ADDR
// end ;
21997: LD_VAR 0 1
22001: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22002: LD_INT 0
22004: PPUSH
22005: PPUSH
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
// result := [ ] ;
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: EMPTY
22017: ST_TO_ADDR
// if campaign_id = 1 then
22018: LD_OWVAR 69
22022: PUSH
22023: LD_INT 1
22025: EQUAL
22026: IFFALSE 25192
// begin case mission_number of 1 :
22028: LD_OWVAR 70
22032: PUSH
22033: LD_INT 1
22035: DOUBLE
22036: EQUAL
22037: IFTRUE 22041
22039: GO 22117
22041: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22042: LD_ADDR_VAR 0 2
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: LD_INT 4
22052: PUSH
22053: LD_INT 11
22055: PUSH
22056: LD_INT 12
22058: PUSH
22059: LD_INT 15
22061: PUSH
22062: LD_INT 16
22064: PUSH
22065: LD_INT 22
22067: PUSH
22068: LD_INT 23
22070: PUSH
22071: LD_INT 26
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 101
22087: PUSH
22088: LD_INT 102
22090: PUSH
22091: LD_INT 106
22093: PUSH
22094: LD_INT 116
22096: PUSH
22097: LD_INT 117
22099: PUSH
22100: LD_INT 118
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: ST_TO_ADDR
22115: GO 25190
22117: LD_INT 2
22119: DOUBLE
22120: EQUAL
22121: IFTRUE 22125
22123: GO 22209
22125: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22126: LD_ADDR_VAR 0 2
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: LD_INT 4
22136: PUSH
22137: LD_INT 11
22139: PUSH
22140: LD_INT 12
22142: PUSH
22143: LD_INT 15
22145: PUSH
22146: LD_INT 16
22148: PUSH
22149: LD_INT 22
22151: PUSH
22152: LD_INT 23
22154: PUSH
22155: LD_INT 26
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 105
22177: PUSH
22178: LD_INT 106
22180: PUSH
22181: LD_INT 108
22183: PUSH
22184: LD_INT 116
22186: PUSH
22187: LD_INT 117
22189: PUSH
22190: LD_INT 118
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: ST_TO_ADDR
22207: GO 25190
22209: LD_INT 3
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22305
22217: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22218: LD_ADDR_VAR 0 2
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 4
22228: PUSH
22229: LD_INT 5
22231: PUSH
22232: LD_INT 11
22234: PUSH
22235: LD_INT 12
22237: PUSH
22238: LD_INT 15
22240: PUSH
22241: LD_INT 16
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_INT 26
22249: PUSH
22250: LD_INT 36
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 101
22267: PUSH
22268: LD_INT 102
22270: PUSH
22271: LD_INT 105
22273: PUSH
22274: LD_INT 106
22276: PUSH
22277: LD_INT 108
22279: PUSH
22280: LD_INT 116
22282: PUSH
22283: LD_INT 117
22285: PUSH
22286: LD_INT 118
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: ST_TO_ADDR
22303: GO 25190
22305: LD_INT 4
22307: DOUBLE
22308: EQUAL
22309: IFTRUE 22313
22311: GO 22409
22313: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22314: LD_ADDR_VAR 0 2
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 4
22324: PUSH
22325: LD_INT 5
22327: PUSH
22328: LD_INT 8
22330: PUSH
22331: LD_INT 11
22333: PUSH
22334: LD_INT 12
22336: PUSH
22337: LD_INT 15
22339: PUSH
22340: LD_INT 16
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_INT 23
22348: PUSH
22349: LD_INT 26
22351: PUSH
22352: LD_INT 36
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 101
22371: PUSH
22372: LD_INT 102
22374: PUSH
22375: LD_INT 105
22377: PUSH
22378: LD_INT 106
22380: PUSH
22381: LD_INT 108
22383: PUSH
22384: LD_INT 116
22386: PUSH
22387: LD_INT 117
22389: PUSH
22390: LD_INT 118
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: ST_TO_ADDR
22407: GO 25190
22409: LD_INT 5
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22529
22417: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: LD_INT 4
22428: PUSH
22429: LD_INT 5
22431: PUSH
22432: LD_INT 6
22434: PUSH
22435: LD_INT 8
22437: PUSH
22438: LD_INT 11
22440: PUSH
22441: LD_INT 12
22443: PUSH
22444: LD_INT 15
22446: PUSH
22447: LD_INT 16
22449: PUSH
22450: LD_INT 22
22452: PUSH
22453: LD_INT 23
22455: PUSH
22456: LD_INT 25
22458: PUSH
22459: LD_INT 26
22461: PUSH
22462: LD_INT 36
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 101
22483: PUSH
22484: LD_INT 102
22486: PUSH
22487: LD_INT 105
22489: PUSH
22490: LD_INT 106
22492: PUSH
22493: LD_INT 108
22495: PUSH
22496: LD_INT 109
22498: PUSH
22499: LD_INT 112
22501: PUSH
22502: LD_INT 116
22504: PUSH
22505: LD_INT 117
22507: PUSH
22508: LD_INT 118
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: ST_TO_ADDR
22527: GO 25190
22529: LD_INT 6
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22669
22537: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22538: LD_ADDR_VAR 0 2
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 4
22548: PUSH
22549: LD_INT 5
22551: PUSH
22552: LD_INT 6
22554: PUSH
22555: LD_INT 8
22557: PUSH
22558: LD_INT 11
22560: PUSH
22561: LD_INT 12
22563: PUSH
22564: LD_INT 15
22566: PUSH
22567: LD_INT 16
22569: PUSH
22570: LD_INT 20
22572: PUSH
22573: LD_INT 21
22575: PUSH
22576: LD_INT 22
22578: PUSH
22579: LD_INT 23
22581: PUSH
22582: LD_INT 25
22584: PUSH
22585: LD_INT 26
22587: PUSH
22588: LD_INT 30
22590: PUSH
22591: LD_INT 31
22593: PUSH
22594: LD_INT 32
22596: PUSH
22597: LD_INT 36
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 101
22623: PUSH
22624: LD_INT 102
22626: PUSH
22627: LD_INT 105
22629: PUSH
22630: LD_INT 106
22632: PUSH
22633: LD_INT 108
22635: PUSH
22636: LD_INT 109
22638: PUSH
22639: LD_INT 112
22641: PUSH
22642: LD_INT 116
22644: PUSH
22645: LD_INT 117
22647: PUSH
22648: LD_INT 118
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: ST_TO_ADDR
22667: GO 25190
22669: LD_INT 7
22671: DOUBLE
22672: EQUAL
22673: IFTRUE 22677
22675: GO 22789
22677: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22678: LD_ADDR_VAR 0 2
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 4
22688: PUSH
22689: LD_INT 5
22691: PUSH
22692: LD_INT 7
22694: PUSH
22695: LD_INT 11
22697: PUSH
22698: LD_INT 12
22700: PUSH
22701: LD_INT 15
22703: PUSH
22704: LD_INT 16
22706: PUSH
22707: LD_INT 20
22709: PUSH
22710: LD_INT 21
22712: PUSH
22713: LD_INT 22
22715: PUSH
22716: LD_INT 23
22718: PUSH
22719: LD_INT 25
22721: PUSH
22722: LD_INT 26
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 101
22743: PUSH
22744: LD_INT 102
22746: PUSH
22747: LD_INT 103
22749: PUSH
22750: LD_INT 105
22752: PUSH
22753: LD_INT 106
22755: PUSH
22756: LD_INT 108
22758: PUSH
22759: LD_INT 112
22761: PUSH
22762: LD_INT 116
22764: PUSH
22765: LD_INT 117
22767: PUSH
22768: LD_INT 118
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: ST_TO_ADDR
22787: GO 25190
22789: LD_INT 8
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22937
22797: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22798: LD_ADDR_VAR 0 2
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 5
22811: PUSH
22812: LD_INT 6
22814: PUSH
22815: LD_INT 7
22817: PUSH
22818: LD_INT 8
22820: PUSH
22821: LD_INT 11
22823: PUSH
22824: LD_INT 12
22826: PUSH
22827: LD_INT 15
22829: PUSH
22830: LD_INT 16
22832: PUSH
22833: LD_INT 20
22835: PUSH
22836: LD_INT 21
22838: PUSH
22839: LD_INT 22
22841: PUSH
22842: LD_INT 23
22844: PUSH
22845: LD_INT 25
22847: PUSH
22848: LD_INT 26
22850: PUSH
22851: LD_INT 30
22853: PUSH
22854: LD_INT 31
22856: PUSH
22857: LD_INT 32
22859: PUSH
22860: LD_INT 36
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 101
22887: PUSH
22888: LD_INT 102
22890: PUSH
22891: LD_INT 103
22893: PUSH
22894: LD_INT 105
22896: PUSH
22897: LD_INT 106
22899: PUSH
22900: LD_INT 108
22902: PUSH
22903: LD_INT 109
22905: PUSH
22906: LD_INT 112
22908: PUSH
22909: LD_INT 116
22911: PUSH
22912: LD_INT 117
22914: PUSH
22915: LD_INT 118
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: ST_TO_ADDR
22935: GO 25190
22937: LD_INT 9
22939: DOUBLE
22940: EQUAL
22941: IFTRUE 22945
22943: GO 23093
22945: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 4
22956: PUSH
22957: LD_INT 5
22959: PUSH
22960: LD_INT 6
22962: PUSH
22963: LD_INT 7
22965: PUSH
22966: LD_INT 8
22968: PUSH
22969: LD_INT 11
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 15
22977: PUSH
22978: LD_INT 16
22980: PUSH
22981: LD_INT 20
22983: PUSH
22984: LD_INT 21
22986: PUSH
22987: LD_INT 22
22989: PUSH
22990: LD_INT 23
22992: PUSH
22993: LD_INT 25
22995: PUSH
22996: LD_INT 26
22998: PUSH
22999: LD_INT 28
23001: PUSH
23002: LD_INT 30
23004: PUSH
23005: LD_INT 31
23007: PUSH
23008: LD_INT 32
23010: PUSH
23011: LD_INT 36
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 101
23039: PUSH
23040: LD_INT 102
23042: PUSH
23043: LD_INT 103
23045: PUSH
23046: LD_INT 105
23048: PUSH
23049: LD_INT 106
23051: PUSH
23052: LD_INT 108
23054: PUSH
23055: LD_INT 109
23057: PUSH
23058: LD_INT 112
23060: PUSH
23061: LD_INT 114
23063: PUSH
23064: LD_INT 116
23066: PUSH
23067: LD_INT 117
23069: PUSH
23070: LD_INT 118
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: ST_TO_ADDR
23091: GO 25190
23093: LD_INT 10
23095: DOUBLE
23096: EQUAL
23097: IFTRUE 23101
23099: GO 23297
23101: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23102: LD_ADDR_VAR 0 2
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 4
23112: PUSH
23113: LD_INT 5
23115: PUSH
23116: LD_INT 6
23118: PUSH
23119: LD_INT 7
23121: PUSH
23122: LD_INT 8
23124: PUSH
23125: LD_INT 9
23127: PUSH
23128: LD_INT 10
23130: PUSH
23131: LD_INT 11
23133: PUSH
23134: LD_INT 12
23136: PUSH
23137: LD_INT 13
23139: PUSH
23140: LD_INT 14
23142: PUSH
23143: LD_INT 15
23145: PUSH
23146: LD_INT 16
23148: PUSH
23149: LD_INT 17
23151: PUSH
23152: LD_INT 18
23154: PUSH
23155: LD_INT 19
23157: PUSH
23158: LD_INT 20
23160: PUSH
23161: LD_INT 21
23163: PUSH
23164: LD_INT 22
23166: PUSH
23167: LD_INT 23
23169: PUSH
23170: LD_INT 24
23172: PUSH
23173: LD_INT 25
23175: PUSH
23176: LD_INT 26
23178: PUSH
23179: LD_INT 28
23181: PUSH
23182: LD_INT 30
23184: PUSH
23185: LD_INT 31
23187: PUSH
23188: LD_INT 32
23190: PUSH
23191: LD_INT 36
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 101
23227: PUSH
23228: LD_INT 102
23230: PUSH
23231: LD_INT 103
23233: PUSH
23234: LD_INT 104
23236: PUSH
23237: LD_INT 105
23239: PUSH
23240: LD_INT 106
23242: PUSH
23243: LD_INT 107
23245: PUSH
23246: LD_INT 108
23248: PUSH
23249: LD_INT 109
23251: PUSH
23252: LD_INT 110
23254: PUSH
23255: LD_INT 111
23257: PUSH
23258: LD_INT 112
23260: PUSH
23261: LD_INT 114
23263: PUSH
23264: LD_INT 116
23266: PUSH
23267: LD_INT 117
23269: PUSH
23270: LD_INT 118
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: ST_TO_ADDR
23295: GO 25190
23297: LD_INT 11
23299: DOUBLE
23300: EQUAL
23301: IFTRUE 23305
23303: GO 23509
23305: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23306: LD_ADDR_VAR 0 2
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: LD_INT 4
23319: PUSH
23320: LD_INT 5
23322: PUSH
23323: LD_INT 6
23325: PUSH
23326: LD_INT 7
23328: PUSH
23329: LD_INT 8
23331: PUSH
23332: LD_INT 9
23334: PUSH
23335: LD_INT 10
23337: PUSH
23338: LD_INT 11
23340: PUSH
23341: LD_INT 12
23343: PUSH
23344: LD_INT 13
23346: PUSH
23347: LD_INT 14
23349: PUSH
23350: LD_INT 15
23352: PUSH
23353: LD_INT 16
23355: PUSH
23356: LD_INT 17
23358: PUSH
23359: LD_INT 18
23361: PUSH
23362: LD_INT 19
23364: PUSH
23365: LD_INT 20
23367: PUSH
23368: LD_INT 21
23370: PUSH
23371: LD_INT 22
23373: PUSH
23374: LD_INT 23
23376: PUSH
23377: LD_INT 24
23379: PUSH
23380: LD_INT 25
23382: PUSH
23383: LD_INT 26
23385: PUSH
23386: LD_INT 28
23388: PUSH
23389: LD_INT 30
23391: PUSH
23392: LD_INT 31
23394: PUSH
23395: LD_INT 32
23397: PUSH
23398: LD_INT 34
23400: PUSH
23401: LD_INT 36
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 101
23439: PUSH
23440: LD_INT 102
23442: PUSH
23443: LD_INT 103
23445: PUSH
23446: LD_INT 104
23448: PUSH
23449: LD_INT 105
23451: PUSH
23452: LD_INT 106
23454: PUSH
23455: LD_INT 107
23457: PUSH
23458: LD_INT 108
23460: PUSH
23461: LD_INT 109
23463: PUSH
23464: LD_INT 110
23466: PUSH
23467: LD_INT 111
23469: PUSH
23470: LD_INT 112
23472: PUSH
23473: LD_INT 114
23475: PUSH
23476: LD_INT 116
23478: PUSH
23479: LD_INT 117
23481: PUSH
23482: LD_INT 118
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: ST_TO_ADDR
23507: GO 25190
23509: LD_INT 12
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23517
23515: GO 23737
23517: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23518: LD_ADDR_VAR 0 2
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: LD_INT 4
23534: PUSH
23535: LD_INT 5
23537: PUSH
23538: LD_INT 6
23540: PUSH
23541: LD_INT 7
23543: PUSH
23544: LD_INT 8
23546: PUSH
23547: LD_INT 9
23549: PUSH
23550: LD_INT 10
23552: PUSH
23553: LD_INT 11
23555: PUSH
23556: LD_INT 12
23558: PUSH
23559: LD_INT 13
23561: PUSH
23562: LD_INT 14
23564: PUSH
23565: LD_INT 15
23567: PUSH
23568: LD_INT 16
23570: PUSH
23571: LD_INT 17
23573: PUSH
23574: LD_INT 18
23576: PUSH
23577: LD_INT 19
23579: PUSH
23580: LD_INT 20
23582: PUSH
23583: LD_INT 21
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_INT 23
23591: PUSH
23592: LD_INT 24
23594: PUSH
23595: LD_INT 25
23597: PUSH
23598: LD_INT 26
23600: PUSH
23601: LD_INT 27
23603: PUSH
23604: LD_INT 28
23606: PUSH
23607: LD_INT 30
23609: PUSH
23610: LD_INT 31
23612: PUSH
23613: LD_INT 32
23615: PUSH
23616: LD_INT 33
23618: PUSH
23619: LD_INT 34
23621: PUSH
23622: LD_INT 36
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 101
23663: PUSH
23664: LD_INT 102
23666: PUSH
23667: LD_INT 103
23669: PUSH
23670: LD_INT 104
23672: PUSH
23673: LD_INT 105
23675: PUSH
23676: LD_INT 106
23678: PUSH
23679: LD_INT 107
23681: PUSH
23682: LD_INT 108
23684: PUSH
23685: LD_INT 109
23687: PUSH
23688: LD_INT 110
23690: PUSH
23691: LD_INT 111
23693: PUSH
23694: LD_INT 112
23696: PUSH
23697: LD_INT 113
23699: PUSH
23700: LD_INT 114
23702: PUSH
23703: LD_INT 116
23705: PUSH
23706: LD_INT 117
23708: PUSH
23709: LD_INT 118
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: ST_TO_ADDR
23735: GO 25190
23737: LD_INT 13
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23953
23745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23746: LD_ADDR_VAR 0 2
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: LD_INT 8
23768: PUSH
23769: LD_INT 9
23771: PUSH
23772: LD_INT 10
23774: PUSH
23775: LD_INT 11
23777: PUSH
23778: LD_INT 12
23780: PUSH
23781: LD_INT 14
23783: PUSH
23784: LD_INT 15
23786: PUSH
23787: LD_INT 16
23789: PUSH
23790: LD_INT 17
23792: PUSH
23793: LD_INT 18
23795: PUSH
23796: LD_INT 19
23798: PUSH
23799: LD_INT 20
23801: PUSH
23802: LD_INT 21
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_INT 23
23810: PUSH
23811: LD_INT 24
23813: PUSH
23814: LD_INT 25
23816: PUSH
23817: LD_INT 26
23819: PUSH
23820: LD_INT 27
23822: PUSH
23823: LD_INT 28
23825: PUSH
23826: LD_INT 30
23828: PUSH
23829: LD_INT 31
23831: PUSH
23832: LD_INT 32
23834: PUSH
23835: LD_INT 33
23837: PUSH
23838: LD_INT 34
23840: PUSH
23841: LD_INT 36
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 101
23879: PUSH
23880: LD_INT 102
23882: PUSH
23883: LD_INT 103
23885: PUSH
23886: LD_INT 104
23888: PUSH
23889: LD_INT 105
23891: PUSH
23892: LD_INT 106
23894: PUSH
23895: LD_INT 107
23897: PUSH
23898: LD_INT 108
23900: PUSH
23901: LD_INT 109
23903: PUSH
23904: LD_INT 110
23906: PUSH
23907: LD_INT 111
23909: PUSH
23910: LD_INT 112
23912: PUSH
23913: LD_INT 113
23915: PUSH
23916: LD_INT 114
23918: PUSH
23919: LD_INT 116
23921: PUSH
23922: LD_INT 117
23924: PUSH
23925: LD_INT 118
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 25190
23953: LD_INT 14
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24185
23961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23962: LD_ADDR_VAR 0 2
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 6
23984: PUSH
23985: LD_INT 7
23987: PUSH
23988: LD_INT 8
23990: PUSH
23991: LD_INT 9
23993: PUSH
23994: LD_INT 10
23996: PUSH
23997: LD_INT 11
23999: PUSH
24000: LD_INT 12
24002: PUSH
24003: LD_INT 13
24005: PUSH
24006: LD_INT 14
24008: PUSH
24009: LD_INT 15
24011: PUSH
24012: LD_INT 16
24014: PUSH
24015: LD_INT 17
24017: PUSH
24018: LD_INT 18
24020: PUSH
24021: LD_INT 19
24023: PUSH
24024: LD_INT 20
24026: PUSH
24027: LD_INT 21
24029: PUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 24
24038: PUSH
24039: LD_INT 25
24041: PUSH
24042: LD_INT 26
24044: PUSH
24045: LD_INT 27
24047: PUSH
24048: LD_INT 28
24050: PUSH
24051: LD_INT 29
24053: PUSH
24054: LD_INT 30
24056: PUSH
24057: LD_INT 31
24059: PUSH
24060: LD_INT 32
24062: PUSH
24063: LD_INT 33
24065: PUSH
24066: LD_INT 34
24068: PUSH
24069: LD_INT 36
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 101
24111: PUSH
24112: LD_INT 102
24114: PUSH
24115: LD_INT 103
24117: PUSH
24118: LD_INT 104
24120: PUSH
24121: LD_INT 105
24123: PUSH
24124: LD_INT 106
24126: PUSH
24127: LD_INT 107
24129: PUSH
24130: LD_INT 108
24132: PUSH
24133: LD_INT 109
24135: PUSH
24136: LD_INT 110
24138: PUSH
24139: LD_INT 111
24141: PUSH
24142: LD_INT 112
24144: PUSH
24145: LD_INT 113
24147: PUSH
24148: LD_INT 114
24150: PUSH
24151: LD_INT 116
24153: PUSH
24154: LD_INT 117
24156: PUSH
24157: LD_INT 118
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: ST_TO_ADDR
24183: GO 25190
24185: LD_INT 15
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24417
24193: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24194: LD_ADDR_VAR 0 2
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 3
24207: PUSH
24208: LD_INT 4
24210: PUSH
24211: LD_INT 5
24213: PUSH
24214: LD_INT 6
24216: PUSH
24217: LD_INT 7
24219: PUSH
24220: LD_INT 8
24222: PUSH
24223: LD_INT 9
24225: PUSH
24226: LD_INT 10
24228: PUSH
24229: LD_INT 11
24231: PUSH
24232: LD_INT 12
24234: PUSH
24235: LD_INT 13
24237: PUSH
24238: LD_INT 14
24240: PUSH
24241: LD_INT 15
24243: PUSH
24244: LD_INT 16
24246: PUSH
24247: LD_INT 17
24249: PUSH
24250: LD_INT 18
24252: PUSH
24253: LD_INT 19
24255: PUSH
24256: LD_INT 20
24258: PUSH
24259: LD_INT 21
24261: PUSH
24262: LD_INT 22
24264: PUSH
24265: LD_INT 23
24267: PUSH
24268: LD_INT 24
24270: PUSH
24271: LD_INT 25
24273: PUSH
24274: LD_INT 26
24276: PUSH
24277: LD_INT 27
24279: PUSH
24280: LD_INT 28
24282: PUSH
24283: LD_INT 29
24285: PUSH
24286: LD_INT 30
24288: PUSH
24289: LD_INT 31
24291: PUSH
24292: LD_INT 32
24294: PUSH
24295: LD_INT 33
24297: PUSH
24298: LD_INT 34
24300: PUSH
24301: LD_INT 36
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 101
24343: PUSH
24344: LD_INT 102
24346: PUSH
24347: LD_INT 103
24349: PUSH
24350: LD_INT 104
24352: PUSH
24353: LD_INT 105
24355: PUSH
24356: LD_INT 106
24358: PUSH
24359: LD_INT 107
24361: PUSH
24362: LD_INT 108
24364: PUSH
24365: LD_INT 109
24367: PUSH
24368: LD_INT 110
24370: PUSH
24371: LD_INT 111
24373: PUSH
24374: LD_INT 112
24376: PUSH
24377: LD_INT 113
24379: PUSH
24380: LD_INT 114
24382: PUSH
24383: LD_INT 116
24385: PUSH
24386: LD_INT 117
24388: PUSH
24389: LD_INT 118
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: ST_TO_ADDR
24415: GO 25190
24417: LD_INT 16
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24561
24425: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24426: LD_ADDR_VAR 0 2
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 4
24436: PUSH
24437: LD_INT 5
24439: PUSH
24440: LD_INT 7
24442: PUSH
24443: LD_INT 11
24445: PUSH
24446: LD_INT 12
24448: PUSH
24449: LD_INT 15
24451: PUSH
24452: LD_INT 16
24454: PUSH
24455: LD_INT 20
24457: PUSH
24458: LD_INT 21
24460: PUSH
24461: LD_INT 22
24463: PUSH
24464: LD_INT 23
24466: PUSH
24467: LD_INT 25
24469: PUSH
24470: LD_INT 26
24472: PUSH
24473: LD_INT 30
24475: PUSH
24476: LD_INT 31
24478: PUSH
24479: LD_INT 32
24481: PUSH
24482: LD_INT 33
24484: PUSH
24485: LD_INT 34
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 101
24511: PUSH
24512: LD_INT 102
24514: PUSH
24515: LD_INT 103
24517: PUSH
24518: LD_INT 106
24520: PUSH
24521: LD_INT 108
24523: PUSH
24524: LD_INT 112
24526: PUSH
24527: LD_INT 113
24529: PUSH
24530: LD_INT 114
24532: PUSH
24533: LD_INT 116
24535: PUSH
24536: LD_INT 117
24538: PUSH
24539: LD_INT 118
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: ST_TO_ADDR
24559: GO 25190
24561: LD_INT 17
24563: DOUBLE
24564: EQUAL
24565: IFTRUE 24569
24567: GO 24793
24569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24570: LD_ADDR_VAR 0 2
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: LD_INT 4
24586: PUSH
24587: LD_INT 5
24589: PUSH
24590: LD_INT 6
24592: PUSH
24593: LD_INT 7
24595: PUSH
24596: LD_INT 8
24598: PUSH
24599: LD_INT 9
24601: PUSH
24602: LD_INT 10
24604: PUSH
24605: LD_INT 11
24607: PUSH
24608: LD_INT 12
24610: PUSH
24611: LD_INT 13
24613: PUSH
24614: LD_INT 14
24616: PUSH
24617: LD_INT 15
24619: PUSH
24620: LD_INT 16
24622: PUSH
24623: LD_INT 17
24625: PUSH
24626: LD_INT 18
24628: PUSH
24629: LD_INT 19
24631: PUSH
24632: LD_INT 20
24634: PUSH
24635: LD_INT 21
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_INT 23
24643: PUSH
24644: LD_INT 24
24646: PUSH
24647: LD_INT 25
24649: PUSH
24650: LD_INT 26
24652: PUSH
24653: LD_INT 27
24655: PUSH
24656: LD_INT 28
24658: PUSH
24659: LD_INT 29
24661: PUSH
24662: LD_INT 30
24664: PUSH
24665: LD_INT 31
24667: PUSH
24668: LD_INT 32
24670: PUSH
24671: LD_INT 33
24673: PUSH
24674: LD_INT 34
24676: PUSH
24677: LD_INT 36
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 101
24719: PUSH
24720: LD_INT 102
24722: PUSH
24723: LD_INT 103
24725: PUSH
24726: LD_INT 104
24728: PUSH
24729: LD_INT 105
24731: PUSH
24732: LD_INT 106
24734: PUSH
24735: LD_INT 107
24737: PUSH
24738: LD_INT 108
24740: PUSH
24741: LD_INT 109
24743: PUSH
24744: LD_INT 110
24746: PUSH
24747: LD_INT 111
24749: PUSH
24750: LD_INT 112
24752: PUSH
24753: LD_INT 113
24755: PUSH
24756: LD_INT 114
24758: PUSH
24759: LD_INT 116
24761: PUSH
24762: LD_INT 117
24764: PUSH
24765: LD_INT 118
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: ST_TO_ADDR
24791: GO 25190
24793: LD_INT 18
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24949
24801: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24802: LD_ADDR_VAR 0 2
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 4
24812: PUSH
24813: LD_INT 5
24815: PUSH
24816: LD_INT 7
24818: PUSH
24819: LD_INT 11
24821: PUSH
24822: LD_INT 12
24824: PUSH
24825: LD_INT 15
24827: PUSH
24828: LD_INT 16
24830: PUSH
24831: LD_INT 20
24833: PUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 22
24839: PUSH
24840: LD_INT 23
24842: PUSH
24843: LD_INT 25
24845: PUSH
24846: LD_INT 26
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 31
24854: PUSH
24855: LD_INT 32
24857: PUSH
24858: LD_INT 33
24860: PUSH
24861: LD_INT 34
24863: PUSH
24864: LD_INT 35
24866: PUSH
24867: LD_INT 36
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 101
24895: PUSH
24896: LD_INT 102
24898: PUSH
24899: LD_INT 103
24901: PUSH
24902: LD_INT 106
24904: PUSH
24905: LD_INT 108
24907: PUSH
24908: LD_INT 112
24910: PUSH
24911: LD_INT 113
24913: PUSH
24914: LD_INT 114
24916: PUSH
24917: LD_INT 115
24919: PUSH
24920: LD_INT 116
24922: PUSH
24923: LD_INT 117
24925: PUSH
24926: LD_INT 118
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25190
24949: LD_INT 19
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 25189
24957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24958: LD_ADDR_VAR 0 2
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 4
24974: PUSH
24975: LD_INT 5
24977: PUSH
24978: LD_INT 6
24980: PUSH
24981: LD_INT 7
24983: PUSH
24984: LD_INT 8
24986: PUSH
24987: LD_INT 9
24989: PUSH
24990: LD_INT 10
24992: PUSH
24993: LD_INT 11
24995: PUSH
24996: LD_INT 12
24998: PUSH
24999: LD_INT 13
25001: PUSH
25002: LD_INT 14
25004: PUSH
25005: LD_INT 15
25007: PUSH
25008: LD_INT 16
25010: PUSH
25011: LD_INT 17
25013: PUSH
25014: LD_INT 18
25016: PUSH
25017: LD_INT 19
25019: PUSH
25020: LD_INT 20
25022: PUSH
25023: LD_INT 21
25025: PUSH
25026: LD_INT 22
25028: PUSH
25029: LD_INT 23
25031: PUSH
25032: LD_INT 24
25034: PUSH
25035: LD_INT 25
25037: PUSH
25038: LD_INT 26
25040: PUSH
25041: LD_INT 27
25043: PUSH
25044: LD_INT 28
25046: PUSH
25047: LD_INT 29
25049: PUSH
25050: LD_INT 30
25052: PUSH
25053: LD_INT 31
25055: PUSH
25056: LD_INT 32
25058: PUSH
25059: LD_INT 33
25061: PUSH
25062: LD_INT 34
25064: PUSH
25065: LD_INT 35
25067: PUSH
25068: LD_INT 36
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 101
25111: PUSH
25112: LD_INT 102
25114: PUSH
25115: LD_INT 103
25117: PUSH
25118: LD_INT 104
25120: PUSH
25121: LD_INT 105
25123: PUSH
25124: LD_INT 106
25126: PUSH
25127: LD_INT 107
25129: PUSH
25130: LD_INT 108
25132: PUSH
25133: LD_INT 109
25135: PUSH
25136: LD_INT 110
25138: PUSH
25139: LD_INT 111
25141: PUSH
25142: LD_INT 112
25144: PUSH
25145: LD_INT 113
25147: PUSH
25148: LD_INT 114
25150: PUSH
25151: LD_INT 115
25153: PUSH
25154: LD_INT 116
25156: PUSH
25157: LD_INT 117
25159: PUSH
25160: LD_INT 118
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: ST_TO_ADDR
25187: GO 25190
25189: POP
// end else
25190: GO 25421
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25192: LD_ADDR_VAR 0 2
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 3
25205: PUSH
25206: LD_INT 4
25208: PUSH
25209: LD_INT 5
25211: PUSH
25212: LD_INT 6
25214: PUSH
25215: LD_INT 7
25217: PUSH
25218: LD_INT 8
25220: PUSH
25221: LD_INT 9
25223: PUSH
25224: LD_INT 10
25226: PUSH
25227: LD_INT 11
25229: PUSH
25230: LD_INT 12
25232: PUSH
25233: LD_INT 13
25235: PUSH
25236: LD_INT 14
25238: PUSH
25239: LD_INT 15
25241: PUSH
25242: LD_INT 16
25244: PUSH
25245: LD_INT 17
25247: PUSH
25248: LD_INT 18
25250: PUSH
25251: LD_INT 19
25253: PUSH
25254: LD_INT 20
25256: PUSH
25257: LD_INT 21
25259: PUSH
25260: LD_INT 22
25262: PUSH
25263: LD_INT 23
25265: PUSH
25266: LD_INT 24
25268: PUSH
25269: LD_INT 25
25271: PUSH
25272: LD_INT 26
25274: PUSH
25275: LD_INT 27
25277: PUSH
25278: LD_INT 28
25280: PUSH
25281: LD_INT 29
25283: PUSH
25284: LD_INT 30
25286: PUSH
25287: LD_INT 31
25289: PUSH
25290: LD_INT 32
25292: PUSH
25293: LD_INT 33
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 35
25301: PUSH
25302: LD_INT 36
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 101
25345: PUSH
25346: LD_INT 102
25348: PUSH
25349: LD_INT 103
25351: PUSH
25352: LD_INT 104
25354: PUSH
25355: LD_INT 105
25357: PUSH
25358: LD_INT 106
25360: PUSH
25361: LD_INT 107
25363: PUSH
25364: LD_INT 108
25366: PUSH
25367: LD_INT 109
25369: PUSH
25370: LD_INT 110
25372: PUSH
25373: LD_INT 111
25375: PUSH
25376: LD_INT 112
25378: PUSH
25379: LD_INT 113
25381: PUSH
25382: LD_INT 114
25384: PUSH
25385: LD_INT 115
25387: PUSH
25388: LD_INT 116
25390: PUSH
25391: LD_INT 117
25393: PUSH
25394: LD_INT 118
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// if result then
25421: LD_VAR 0 2
25425: IFFALSE 26211
// begin normal :=  ;
25427: LD_ADDR_VAR 0 5
25431: PUSH
25432: LD_STRING 
25434: ST_TO_ADDR
// hardcore :=  ;
25435: LD_ADDR_VAR 0 6
25439: PUSH
25440: LD_STRING 
25442: ST_TO_ADDR
// active :=  ;
25443: LD_ADDR_VAR 0 7
25447: PUSH
25448: LD_STRING 
25450: ST_TO_ADDR
// for i = 1 to normalCounter do
25451: LD_ADDR_VAR 0 8
25455: PUSH
25456: DOUBLE
25457: LD_INT 1
25459: DEC
25460: ST_TO_ADDR
25461: LD_EXP 70
25465: PUSH
25466: FOR_TO
25467: IFFALSE 25568
// begin tmp := 0 ;
25469: LD_ADDR_VAR 0 3
25473: PUSH
25474: LD_STRING 0
25476: ST_TO_ADDR
// if result [ 1 ] then
25477: LD_VAR 0 2
25481: PUSH
25482: LD_INT 1
25484: ARRAY
25485: IFFALSE 25550
// if result [ 1 ] [ 1 ] = i then
25487: LD_VAR 0 2
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PUSH
25496: LD_INT 1
25498: ARRAY
25499: PUSH
25500: LD_VAR 0 8
25504: EQUAL
25505: IFFALSE 25550
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25507: LD_ADDR_VAR 0 2
25511: PUSH
25512: LD_VAR 0 2
25516: PPUSH
25517: LD_INT 1
25519: PPUSH
25520: LD_VAR 0 2
25524: PUSH
25525: LD_INT 1
25527: ARRAY
25528: PPUSH
25529: LD_INT 1
25531: PPUSH
25532: CALL_OW 3
25536: PPUSH
25537: CALL_OW 1
25541: ST_TO_ADDR
// tmp := 1 ;
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_STRING 1
25549: ST_TO_ADDR
// end ; normal := normal & tmp ;
25550: LD_ADDR_VAR 0 5
25554: PUSH
25555: LD_VAR 0 5
25559: PUSH
25560: LD_VAR 0 3
25564: STR
25565: ST_TO_ADDR
// end ;
25566: GO 25466
25568: POP
25569: POP
// for i = 1 to hardcoreCounter do
25570: LD_ADDR_VAR 0 8
25574: PUSH
25575: DOUBLE
25576: LD_INT 1
25578: DEC
25579: ST_TO_ADDR
25580: LD_EXP 71
25584: PUSH
25585: FOR_TO
25586: IFFALSE 25691
// begin tmp := 0 ;
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_STRING 0
25595: ST_TO_ADDR
// if result [ 2 ] then
25596: LD_VAR 0 2
25600: PUSH
25601: LD_INT 2
25603: ARRAY
25604: IFFALSE 25673
// if result [ 2 ] [ 1 ] = 100 + i then
25606: LD_VAR 0 2
25610: PUSH
25611: LD_INT 2
25613: ARRAY
25614: PUSH
25615: LD_INT 1
25617: ARRAY
25618: PUSH
25619: LD_INT 100
25621: PUSH
25622: LD_VAR 0 8
25626: PLUS
25627: EQUAL
25628: IFFALSE 25673
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 2
25639: PPUSH
25640: LD_INT 2
25642: PPUSH
25643: LD_VAR 0 2
25647: PUSH
25648: LD_INT 2
25650: ARRAY
25651: PPUSH
25652: LD_INT 1
25654: PPUSH
25655: CALL_OW 3
25659: PPUSH
25660: CALL_OW 1
25664: ST_TO_ADDR
// tmp := 1 ;
25665: LD_ADDR_VAR 0 3
25669: PUSH
25670: LD_STRING 1
25672: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25673: LD_ADDR_VAR 0 6
25677: PUSH
25678: LD_VAR 0 6
25682: PUSH
25683: LD_VAR 0 3
25687: STR
25688: ST_TO_ADDR
// end ;
25689: GO 25585
25691: POP
25692: POP
// if isGameLoad then
25693: LD_VAR 0 1
25697: IFFALSE 26172
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25699: LD_ADDR_VAR 0 4
25703: PUSH
25704: LD_EXP 74
25708: PUSH
25709: LD_EXP 73
25713: PUSH
25714: LD_EXP 75
25718: PUSH
25719: LD_EXP 72
25723: PUSH
25724: LD_EXP 76
25728: PUSH
25729: LD_EXP 77
25733: PUSH
25734: LD_EXP 78
25738: PUSH
25739: LD_EXP 79
25743: PUSH
25744: LD_EXP 80
25748: PUSH
25749: LD_EXP 81
25753: PUSH
25754: LD_EXP 82
25758: PUSH
25759: LD_EXP 83
25763: PUSH
25764: LD_EXP 84
25768: PUSH
25769: LD_EXP 85
25773: PUSH
25774: LD_EXP 93
25778: PUSH
25779: LD_EXP 94
25783: PUSH
25784: LD_EXP 95
25788: PUSH
25789: LD_EXP 96
25793: PUSH
25794: LD_EXP 98
25798: PUSH
25799: LD_EXP 99
25803: PUSH
25804: LD_EXP 100
25808: PUSH
25809: LD_EXP 103
25813: PUSH
25814: LD_EXP 105
25818: PUSH
25819: LD_EXP 106
25823: PUSH
25824: LD_EXP 107
25828: PUSH
25829: LD_EXP 109
25833: PUSH
25834: LD_EXP 110
25838: PUSH
25839: LD_EXP 113
25843: PUSH
25844: LD_EXP 114
25848: PUSH
25849: LD_EXP 115
25853: PUSH
25854: LD_EXP 116
25858: PUSH
25859: LD_EXP 117
25863: PUSH
25864: LD_EXP 118
25868: PUSH
25869: LD_EXP 119
25873: PUSH
25874: LD_EXP 120
25878: PUSH
25879: LD_EXP 121
25883: PUSH
25884: LD_EXP 86
25888: PUSH
25889: LD_EXP 87
25893: PUSH
25894: LD_EXP 90
25898: PUSH
25899: LD_EXP 91
25903: PUSH
25904: LD_EXP 92
25908: PUSH
25909: LD_EXP 88
25913: PUSH
25914: LD_EXP 89
25918: PUSH
25919: LD_EXP 97
25923: PUSH
25924: LD_EXP 101
25928: PUSH
25929: LD_EXP 102
25933: PUSH
25934: LD_EXP 104
25938: PUSH
25939: LD_EXP 108
25943: PUSH
25944: LD_EXP 111
25948: PUSH
25949: LD_EXP 112
25953: PUSH
25954: LD_EXP 122
25958: PUSH
25959: LD_EXP 123
25963: PUSH
25964: LD_EXP 124
25968: PUSH
25969: LD_EXP 125
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: ST_TO_ADDR
// tmp :=  ;
26030: LD_ADDR_VAR 0 3
26034: PUSH
26035: LD_STRING 
26037: ST_TO_ADDR
// for i = 1 to normalCounter do
26038: LD_ADDR_VAR 0 8
26042: PUSH
26043: DOUBLE
26044: LD_INT 1
26046: DEC
26047: ST_TO_ADDR
26048: LD_EXP 70
26052: PUSH
26053: FOR_TO
26054: IFFALSE 26090
// begin if flags [ i ] then
26056: LD_VAR 0 4
26060: PUSH
26061: LD_VAR 0 8
26065: ARRAY
26066: IFFALSE 26088
// tmp := tmp & i & ; ;
26068: LD_ADDR_VAR 0 3
26072: PUSH
26073: LD_VAR 0 3
26077: PUSH
26078: LD_VAR 0 8
26082: STR
26083: PUSH
26084: LD_STRING ;
26086: STR
26087: ST_TO_ADDR
// end ;
26088: GO 26053
26090: POP
26091: POP
// for i = 1 to hardcoreCounter do
26092: LD_ADDR_VAR 0 8
26096: PUSH
26097: DOUBLE
26098: LD_INT 1
26100: DEC
26101: ST_TO_ADDR
26102: LD_EXP 71
26106: PUSH
26107: FOR_TO
26108: IFFALSE 26154
// begin if flags [ normalCounter + i ] then
26110: LD_VAR 0 4
26114: PUSH
26115: LD_EXP 70
26119: PUSH
26120: LD_VAR 0 8
26124: PLUS
26125: ARRAY
26126: IFFALSE 26152
// tmp := tmp & ( 100 + i ) & ; ;
26128: LD_ADDR_VAR 0 3
26132: PUSH
26133: LD_VAR 0 3
26137: PUSH
26138: LD_INT 100
26140: PUSH
26141: LD_VAR 0 8
26145: PLUS
26146: STR
26147: PUSH
26148: LD_STRING ;
26150: STR
26151: ST_TO_ADDR
// end ;
26152: GO 26107
26154: POP
26155: POP
// if tmp then
26156: LD_VAR 0 3
26160: IFFALSE 26172
// active := tmp ;
26162: LD_ADDR_VAR 0 7
26166: PUSH
26167: LD_VAR 0 3
26171: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26172: LD_STRING getStreamItemsFromMission("
26174: PUSH
26175: LD_VAR 0 5
26179: STR
26180: PUSH
26181: LD_STRING ","
26183: STR
26184: PUSH
26185: LD_VAR 0 6
26189: STR
26190: PUSH
26191: LD_STRING ","
26193: STR
26194: PUSH
26195: LD_VAR 0 7
26199: STR
26200: PUSH
26201: LD_STRING ")
26203: STR
26204: PPUSH
26205: CALL_OW 559
// end else
26209: GO 26218
// ToLua ( getStreamItemsFromMission("","","") ) ;
26211: LD_STRING getStreamItemsFromMission("","","")
26213: PPUSH
26214: CALL_OW 559
// end ;
26218: LD_VAR 0 2
26222: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26223: LD_EXP 69
26227: PUSH
26228: LD_EXP 74
26232: AND
26233: IFFALSE 26357
26235: GO 26237
26237: DISABLE
26238: LD_INT 0
26240: PPUSH
26241: PPUSH
// begin enable ;
26242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26243: LD_ADDR_VAR 0 2
26247: PUSH
26248: LD_INT 22
26250: PUSH
26251: LD_OWVAR 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 34
26265: PUSH
26266: LD_INT 7
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 34
26275: PUSH
26276: LD_INT 45
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 34
26285: PUSH
26286: LD_INT 28
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 34
26295: PUSH
26296: LD_INT 47
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PPUSH
26314: CALL_OW 69
26318: ST_TO_ADDR
// if not tmp then
26319: LD_VAR 0 2
26323: NOT
26324: IFFALSE 26328
// exit ;
26326: GO 26357
// for i in tmp do
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_VAR 0 2
26337: PUSH
26338: FOR_IN
26339: IFFALSE 26355
// begin SetLives ( i , 0 ) ;
26341: LD_VAR 0 1
26345: PPUSH
26346: LD_INT 0
26348: PPUSH
26349: CALL_OW 234
// end ;
26353: GO 26338
26355: POP
26356: POP
// end ;
26357: PPOPN 2
26359: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26360: LD_EXP 69
26364: PUSH
26365: LD_EXP 75
26369: AND
26370: IFFALSE 26454
26372: GO 26374
26374: DISABLE
26375: LD_INT 0
26377: PPUSH
26378: PPUSH
// begin enable ;
26379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26380: LD_ADDR_VAR 0 2
26384: PUSH
26385: LD_INT 22
26387: PUSH
26388: LD_OWVAR 2
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 32
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PPUSH
26411: CALL_OW 69
26415: ST_TO_ADDR
// if not tmp then
26416: LD_VAR 0 2
26420: NOT
26421: IFFALSE 26425
// exit ;
26423: GO 26454
// for i in tmp do
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: LD_VAR 0 2
26434: PUSH
26435: FOR_IN
26436: IFFALSE 26452
// begin SetLives ( i , 0 ) ;
26438: LD_VAR 0 1
26442: PPUSH
26443: LD_INT 0
26445: PPUSH
26446: CALL_OW 234
// end ;
26450: GO 26435
26452: POP
26453: POP
// end ;
26454: PPOPN 2
26456: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26457: LD_EXP 69
26461: PUSH
26462: LD_EXP 72
26466: AND
26467: IFFALSE 26560
26469: GO 26471
26471: DISABLE
26472: LD_INT 0
26474: PPUSH
// begin enable ;
26475: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26476: LD_ADDR_VAR 0 1
26480: PUSH
26481: LD_INT 22
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 25
26498: PUSH
26499: LD_INT 5
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 25
26508: PUSH
26509: LD_INT 9
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 25
26518: PUSH
26519: LD_INT 8
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PPUSH
26536: CALL_OW 69
26540: PUSH
26541: FOR_IN
26542: IFFALSE 26558
// begin SetClass ( i , 1 ) ;
26544: LD_VAR 0 1
26548: PPUSH
26549: LD_INT 1
26551: PPUSH
26552: CALL_OW 336
// end ;
26556: GO 26541
26558: POP
26559: POP
// end ;
26560: PPOPN 1
26562: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26563: LD_EXP 69
26567: PUSH
26568: LD_EXP 73
26572: AND
26573: PUSH
26574: LD_OWVAR 65
26578: PUSH
26579: LD_INT 7
26581: LESS
26582: AND
26583: IFFALSE 26597
26585: GO 26587
26587: DISABLE
// begin enable ;
26588: ENABLE
// game_speed := 7 ;
26589: LD_ADDR_OWVAR 65
26593: PUSH
26594: LD_INT 7
26596: ST_TO_ADDR
// end ;
26597: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26598: LD_EXP 69
26602: PUSH
26603: LD_EXP 76
26607: AND
26608: IFFALSE 26810
26610: GO 26612
26612: DISABLE
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
26617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 81
26625: PUSH
26626: LD_OWVAR 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 21
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PPUSH
26649: CALL_OW 69
26653: ST_TO_ADDR
// if not tmp then
26654: LD_VAR 0 3
26658: NOT
26659: IFFALSE 26663
// exit ;
26661: GO 26810
// if tmp > 5 then
26663: LD_VAR 0 3
26667: PUSH
26668: LD_INT 5
26670: GREATER
26671: IFFALSE 26683
// k := 5 else
26673: LD_ADDR_VAR 0 2
26677: PUSH
26678: LD_INT 5
26680: ST_TO_ADDR
26681: GO 26693
// k := tmp ;
26683: LD_ADDR_VAR 0 2
26687: PUSH
26688: LD_VAR 0 3
26692: ST_TO_ADDR
// for i := 1 to k do
26693: LD_ADDR_VAR 0 1
26697: PUSH
26698: DOUBLE
26699: LD_INT 1
26701: DEC
26702: ST_TO_ADDR
26703: LD_VAR 0 2
26707: PUSH
26708: FOR_TO
26709: IFFALSE 26808
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26711: LD_VAR 0 3
26715: PUSH
26716: LD_VAR 0 1
26720: ARRAY
26721: PPUSH
26722: LD_VAR 0 1
26726: PUSH
26727: LD_INT 4
26729: MOD
26730: PUSH
26731: LD_INT 1
26733: PLUS
26734: PPUSH
26735: CALL_OW 259
26739: PUSH
26740: LD_INT 10
26742: LESS
26743: IFFALSE 26806
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26745: LD_VAR 0 3
26749: PUSH
26750: LD_VAR 0 1
26754: ARRAY
26755: PPUSH
26756: LD_VAR 0 1
26760: PUSH
26761: LD_INT 4
26763: MOD
26764: PUSH
26765: LD_INT 1
26767: PLUS
26768: PPUSH
26769: LD_VAR 0 3
26773: PUSH
26774: LD_VAR 0 1
26778: ARRAY
26779: PPUSH
26780: LD_VAR 0 1
26784: PUSH
26785: LD_INT 4
26787: MOD
26788: PUSH
26789: LD_INT 1
26791: PLUS
26792: PPUSH
26793: CALL_OW 259
26797: PUSH
26798: LD_INT 1
26800: PLUS
26801: PPUSH
26802: CALL_OW 237
26806: GO 26708
26808: POP
26809: POP
// end ;
26810: PPOPN 3
26812: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26813: LD_EXP 69
26817: PUSH
26818: LD_EXP 77
26822: AND
26823: IFFALSE 26843
26825: GO 26827
26827: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26828: LD_INT 4
26830: PPUSH
26831: LD_OWVAR 2
26835: PPUSH
26836: LD_INT 0
26838: PPUSH
26839: CALL_OW 324
26843: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26844: LD_EXP 69
26848: PUSH
26849: LD_EXP 106
26853: AND
26854: IFFALSE 26874
26856: GO 26858
26858: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26859: LD_INT 19
26861: PPUSH
26862: LD_OWVAR 2
26866: PPUSH
26867: LD_INT 0
26869: PPUSH
26870: CALL_OW 324
26874: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26875: LD_EXP 69
26879: PUSH
26880: LD_EXP 78
26884: AND
26885: IFFALSE 26987
26887: GO 26889
26889: DISABLE
26890: LD_INT 0
26892: PPUSH
26893: PPUSH
// begin enable ;
26894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26895: LD_ADDR_VAR 0 2
26899: PUSH
26900: LD_INT 22
26902: PUSH
26903: LD_OWVAR 2
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: LD_INT 34
26917: PUSH
26918: LD_INT 11
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 34
26927: PUSH
26928: LD_INT 30
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 69
26948: ST_TO_ADDR
// if not tmp then
26949: LD_VAR 0 2
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 26987
// for i in tmp do
26958: LD_ADDR_VAR 0 1
26962: PUSH
26963: LD_VAR 0 2
26967: PUSH
26968: FOR_IN
26969: IFFALSE 26985
// begin SetLives ( i , 0 ) ;
26971: LD_VAR 0 1
26975: PPUSH
26976: LD_INT 0
26978: PPUSH
26979: CALL_OW 234
// end ;
26983: GO 26968
26985: POP
26986: POP
// end ;
26987: PPOPN 2
26989: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26990: LD_EXP 69
26994: PUSH
26995: LD_EXP 79
26999: AND
27000: IFFALSE 27020
27002: GO 27004
27004: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27005: LD_INT 32
27007: PPUSH
27008: LD_OWVAR 2
27012: PPUSH
27013: LD_INT 0
27015: PPUSH
27016: CALL_OW 324
27020: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27021: LD_EXP 69
27025: PUSH
27026: LD_EXP 80
27030: AND
27031: IFFALSE 27212
27033: GO 27035
27035: DISABLE
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
27040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27041: LD_ADDR_VAR 0 2
27045: PUSH
27046: LD_INT 22
27048: PUSH
27049: LD_OWVAR 2
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 33
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PPUSH
27072: CALL_OW 69
27076: ST_TO_ADDR
// if not tmp then
27077: LD_VAR 0 2
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27212
// side := 0 ;
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_INT 0
27093: ST_TO_ADDR
// for i := 1 to 8 do
27094: LD_ADDR_VAR 0 1
27098: PUSH
27099: DOUBLE
27100: LD_INT 1
27102: DEC
27103: ST_TO_ADDR
27104: LD_INT 8
27106: PUSH
27107: FOR_TO
27108: IFFALSE 27156
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27110: LD_OWVAR 2
27114: PUSH
27115: LD_VAR 0 1
27119: NONEQUAL
27120: PUSH
27121: LD_OWVAR 2
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 81
27135: PUSH
27136: LD_INT 2
27138: EQUAL
27139: AND
27140: IFFALSE 27154
// begin side := i ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_VAR 0 1
27151: ST_TO_ADDR
// break ;
27152: GO 27156
// end ;
27154: GO 27107
27156: POP
27157: POP
// if not side then
27158: LD_VAR 0 3
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27212
// for i := 1 to tmp do
27167: LD_ADDR_VAR 0 1
27171: PUSH
27172: DOUBLE
27173: LD_INT 1
27175: DEC
27176: ST_TO_ADDR
27177: LD_VAR 0 2
27181: PUSH
27182: FOR_TO
27183: IFFALSE 27210
// if Prob ( 60 ) then
27185: LD_INT 60
27187: PPUSH
27188: CALL_OW 13
27192: IFFALSE 27208
// SetSide ( i , side ) ;
27194: LD_VAR 0 1
27198: PPUSH
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL_OW 235
27208: GO 27182
27210: POP
27211: POP
// end ;
27212: PPOPN 3
27214: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27215: LD_EXP 69
27219: PUSH
27220: LD_EXP 82
27224: AND
27225: IFFALSE 27344
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27233: LD_ADDR_VAR 0 1
27237: PUSH
27238: LD_INT 22
27240: PUSH
27241: LD_OWVAR 2
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 21
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 3
27262: PUSH
27263: LD_INT 23
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: LIST
27281: PPUSH
27282: CALL_OW 69
27286: PUSH
27287: FOR_IN
27288: IFFALSE 27342
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 257
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 3
27308: PUSH
27309: LD_INT 4
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: IN
27318: IFFALSE 27340
// SetClass ( un , rand ( 1 , 4 ) ) ;
27320: LD_VAR 0 1
27324: PPUSH
27325: LD_INT 1
27327: PPUSH
27328: LD_INT 4
27330: PPUSH
27331: CALL_OW 12
27335: PPUSH
27336: CALL_OW 336
27340: GO 27287
27342: POP
27343: POP
// end ;
27344: PPOPN 1
27346: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27347: LD_EXP 69
27351: PUSH
27352: LD_EXP 81
27356: AND
27357: IFFALSE 27436
27359: GO 27361
27361: DISABLE
27362: LD_INT 0
27364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27365: LD_ADDR_VAR 0 1
27369: PUSH
27370: LD_INT 22
27372: PUSH
27373: LD_OWVAR 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 21
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PPUSH
27396: CALL_OW 69
27400: ST_TO_ADDR
// if not tmp then
27401: LD_VAR 0 1
27405: NOT
27406: IFFALSE 27410
// exit ;
27408: GO 27436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27410: LD_VAR 0 1
27414: PUSH
27415: LD_INT 1
27417: PPUSH
27418: LD_VAR 0 1
27422: PPUSH
27423: CALL_OW 12
27427: ARRAY
27428: PPUSH
27429: LD_INT 100
27431: PPUSH
27432: CALL_OW 234
// end ;
27436: PPOPN 1
27438: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27439: LD_EXP 69
27443: PUSH
27444: LD_EXP 83
27448: AND
27449: IFFALSE 27547
27451: GO 27453
27453: DISABLE
27454: LD_INT 0
27456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27457: LD_ADDR_VAR 0 1
27461: PUSH
27462: LD_INT 22
27464: PUSH
27465: LD_OWVAR 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 21
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: ST_TO_ADDR
// if not tmp then
27493: LD_VAR 0 1
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27547
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27502: LD_VAR 0 1
27506: PUSH
27507: LD_INT 1
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 12
27519: ARRAY
27520: PPUSH
27521: LD_INT 1
27523: PPUSH
27524: LD_INT 4
27526: PPUSH
27527: CALL_OW 12
27531: PPUSH
27532: LD_INT 3000
27534: PPUSH
27535: LD_INT 9000
27537: PPUSH
27538: CALL_OW 12
27542: PPUSH
27543: CALL_OW 492
// end ;
27547: PPOPN 1
27549: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27550: LD_EXP 69
27554: PUSH
27555: LD_EXP 84
27559: AND
27560: IFFALSE 27580
27562: GO 27564
27564: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27565: LD_INT 1
27567: PPUSH
27568: LD_OWVAR 2
27572: PPUSH
27573: LD_INT 0
27575: PPUSH
27576: CALL_OW 324
27580: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27581: LD_EXP 69
27585: PUSH
27586: LD_EXP 85
27590: AND
27591: IFFALSE 27674
27593: GO 27595
27595: DISABLE
27596: LD_INT 0
27598: PPUSH
27599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_INT 22
27607: PUSH
27608: LD_OWVAR 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 21
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PPUSH
27631: CALL_OW 69
27635: ST_TO_ADDR
// if not tmp then
27636: LD_VAR 0 2
27640: NOT
27641: IFFALSE 27645
// exit ;
27643: GO 27674
// for i in tmp do
27645: LD_ADDR_VAR 0 1
27649: PUSH
27650: LD_VAR 0 2
27654: PUSH
27655: FOR_IN
27656: IFFALSE 27672
// SetBLevel ( i , 10 ) ;
27658: LD_VAR 0 1
27662: PPUSH
27663: LD_INT 10
27665: PPUSH
27666: CALL_OW 241
27670: GO 27655
27672: POP
27673: POP
// end ;
27674: PPOPN 2
27676: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27677: LD_EXP 69
27681: PUSH
27682: LD_EXP 86
27686: AND
27687: IFFALSE 27798
27689: GO 27691
27691: DISABLE
27692: LD_INT 0
27694: PPUSH
27695: PPUSH
27696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27697: LD_ADDR_VAR 0 3
27701: PUSH
27702: LD_INT 22
27704: PUSH
27705: LD_OWVAR 2
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 25
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PPUSH
27728: CALL_OW 69
27732: ST_TO_ADDR
// if not tmp then
27733: LD_VAR 0 3
27737: NOT
27738: IFFALSE 27742
// exit ;
27740: GO 27798
// un := tmp [ rand ( 1 , tmp ) ] ;
27742: LD_ADDR_VAR 0 2
27746: PUSH
27747: LD_VAR 0 3
27751: PUSH
27752: LD_INT 1
27754: PPUSH
27755: LD_VAR 0 3
27759: PPUSH
27760: CALL_OW 12
27764: ARRAY
27765: ST_TO_ADDR
// if Crawls ( un ) then
27766: LD_VAR 0 2
27770: PPUSH
27771: CALL_OW 318
27775: IFFALSE 27786
// ComWalk ( un ) ;
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27786: LD_VAR 0 2
27790: PPUSH
27791: LD_INT 5
27793: PPUSH
27794: CALL_OW 336
// end ;
27798: PPOPN 3
27800: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27801: LD_EXP 69
27805: PUSH
27806: LD_EXP 87
27810: AND
27811: PUSH
27812: LD_OWVAR 67
27816: PUSH
27817: LD_INT 4
27819: LESS
27820: AND
27821: IFFALSE 27840
27823: GO 27825
27825: DISABLE
// begin Difficulty := Difficulty + 1 ;
27826: LD_ADDR_OWVAR 67
27830: PUSH
27831: LD_OWVAR 67
27835: PUSH
27836: LD_INT 1
27838: PLUS
27839: ST_TO_ADDR
// end ;
27840: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27841: LD_EXP 69
27845: PUSH
27846: LD_EXP 88
27850: AND
27851: IFFALSE 27954
27853: GO 27855
27855: DISABLE
27856: LD_INT 0
27858: PPUSH
// begin for i := 1 to 5 do
27859: LD_ADDR_VAR 0 1
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_INT 5
27871: PUSH
27872: FOR_TO
27873: IFFALSE 27952
// begin uc_nation := nation_nature ;
27875: LD_ADDR_OWVAR 21
27879: PUSH
27880: LD_INT 0
27882: ST_TO_ADDR
// uc_side := 0 ;
27883: LD_ADDR_OWVAR 20
27887: PUSH
27888: LD_INT 0
27890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27891: LD_ADDR_OWVAR 29
27895: PUSH
27896: LD_INT 12
27898: PUSH
27899: LD_INT 12
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// hc_agressivity := 20 ;
27906: LD_ADDR_OWVAR 35
27910: PUSH
27911: LD_INT 20
27913: ST_TO_ADDR
// hc_class := class_tiger ;
27914: LD_ADDR_OWVAR 28
27918: PUSH
27919: LD_INT 14
27921: ST_TO_ADDR
// hc_gallery :=  ;
27922: LD_ADDR_OWVAR 33
27926: PUSH
27927: LD_STRING 
27929: ST_TO_ADDR
// hc_name :=  ;
27930: LD_ADDR_OWVAR 26
27934: PUSH
27935: LD_STRING 
27937: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27938: CALL_OW 44
27942: PPUSH
27943: LD_INT 0
27945: PPUSH
27946: CALL_OW 51
// end ;
27950: GO 27872
27952: POP
27953: POP
// end ;
27954: PPOPN 1
27956: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27957: LD_EXP 69
27961: PUSH
27962: LD_EXP 89
27966: AND
27967: IFFALSE 27976
27969: GO 27971
27971: DISABLE
// StreamSibBomb ;
27972: CALL 27977 0 0
27976: END
// export function StreamSibBomb ; var i , x , y ; begin
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
27982: PPUSH
// result := false ;
27983: LD_ADDR_VAR 0 1
27987: PUSH
27988: LD_INT 0
27990: ST_TO_ADDR
// for i := 1 to 16 do
27991: LD_ADDR_VAR 0 2
27995: PUSH
27996: DOUBLE
27997: LD_INT 1
27999: DEC
28000: ST_TO_ADDR
28001: LD_INT 16
28003: PUSH
28004: FOR_TO
28005: IFFALSE 28204
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 10
28014: PUSH
28015: LD_INT 20
28017: PUSH
28018: LD_INT 30
28020: PUSH
28021: LD_INT 40
28023: PUSH
28024: LD_INT 50
28026: PUSH
28027: LD_INT 60
28029: PUSH
28030: LD_INT 70
28032: PUSH
28033: LD_INT 80
28035: PUSH
28036: LD_INT 90
28038: PUSH
28039: LD_INT 100
28041: PUSH
28042: LD_INT 110
28044: PUSH
28045: LD_INT 120
28047: PUSH
28048: LD_INT 130
28050: PUSH
28051: LD_INT 140
28053: PUSH
28054: LD_INT 150
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PPUSH
28077: LD_INT 15
28079: PPUSH
28080: CALL_OW 12
28084: ARRAY
28085: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28086: LD_ADDR_VAR 0 4
28090: PUSH
28091: LD_INT 10
28093: PUSH
28094: LD_INT 20
28096: PUSH
28097: LD_INT 30
28099: PUSH
28100: LD_INT 40
28102: PUSH
28103: LD_INT 50
28105: PUSH
28106: LD_INT 60
28108: PUSH
28109: LD_INT 70
28111: PUSH
28112: LD_INT 80
28114: PUSH
28115: LD_INT 90
28117: PUSH
28118: LD_INT 100
28120: PUSH
28121: LD_INT 110
28123: PUSH
28124: LD_INT 120
28126: PUSH
28127: LD_INT 130
28129: PUSH
28130: LD_INT 140
28132: PUSH
28133: LD_INT 150
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PPUSH
28156: LD_INT 15
28158: PPUSH
28159: CALL_OW 12
28163: ARRAY
28164: ST_TO_ADDR
// if ValidHex ( x , y ) then
28165: LD_VAR 0 3
28169: PPUSH
28170: LD_VAR 0 4
28174: PPUSH
28175: CALL_OW 488
28179: IFFALSE 28202
// begin result := [ x , y ] ;
28181: LD_ADDR_VAR 0 1
28185: PUSH
28186: LD_VAR 0 3
28190: PUSH
28191: LD_VAR 0 4
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: ST_TO_ADDR
// break ;
28200: GO 28204
// end ; end ;
28202: GO 28004
28204: POP
28205: POP
// if result then
28206: LD_VAR 0 1
28210: IFFALSE 28270
// begin ToLua ( playSibBomb() ) ;
28212: LD_STRING playSibBomb()
28214: PPUSH
28215: CALL_OW 559
// wait ( 0 0$14 ) ;
28219: LD_INT 490
28221: PPUSH
28222: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28226: LD_VAR 0 1
28230: PUSH
28231: LD_INT 1
28233: ARRAY
28234: PPUSH
28235: LD_VAR 0 1
28239: PUSH
28240: LD_INT 2
28242: ARRAY
28243: PPUSH
28244: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28248: LD_VAR 0 1
28252: PUSH
28253: LD_INT 1
28255: ARRAY
28256: PPUSH
28257: LD_VAR 0 1
28261: PUSH
28262: LD_INT 2
28264: ARRAY
28265: PPUSH
28266: CALL_OW 429
// end ; end ;
28270: LD_VAR 0 1
28274: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28275: LD_EXP 69
28279: PUSH
28280: LD_EXP 91
28284: AND
28285: IFFALSE 28297
28287: GO 28289
28289: DISABLE
// YouLost (  ) ;
28290: LD_STRING 
28292: PPUSH
28293: CALL_OW 104
28297: END
// every 0 0$1 trigger StreamModeActive and sFog do
28298: LD_EXP 69
28302: PUSH
28303: LD_EXP 90
28307: AND
28308: IFFALSE 28322
28310: GO 28312
28312: DISABLE
// FogOff ( your_side ) ;
28313: LD_OWVAR 2
28317: PPUSH
28318: CALL_OW 344
28322: END
// every 0 0$1 trigger StreamModeActive and sSun do
28323: LD_EXP 69
28327: PUSH
28328: LD_EXP 92
28332: AND
28333: IFFALSE 28361
28335: GO 28337
28337: DISABLE
// begin solar_recharge_percent := 0 ;
28338: LD_ADDR_OWVAR 79
28342: PUSH
28343: LD_INT 0
28345: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28346: LD_INT 10500
28348: PPUSH
28349: CALL_OW 67
// solar_recharge_percent := 100 ;
28353: LD_ADDR_OWVAR 79
28357: PUSH
28358: LD_INT 100
28360: ST_TO_ADDR
// end ;
28361: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28362: LD_EXP 69
28366: PUSH
28367: LD_EXP 93
28371: AND
28372: IFFALSE 28611
28374: GO 28376
28376: DISABLE
28377: LD_INT 0
28379: PPUSH
28380: PPUSH
28381: PPUSH
// begin tmp := [ ] ;
28382: LD_ADDR_VAR 0 3
28386: PUSH
28387: EMPTY
28388: ST_TO_ADDR
// for i := 1 to 6 do
28389: LD_ADDR_VAR 0 1
28393: PUSH
28394: DOUBLE
28395: LD_INT 1
28397: DEC
28398: ST_TO_ADDR
28399: LD_INT 6
28401: PUSH
28402: FOR_TO
28403: IFFALSE 28508
// begin uc_nation := nation_nature ;
28405: LD_ADDR_OWVAR 21
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// uc_side := 0 ;
28413: LD_ADDR_OWVAR 20
28417: PUSH
28418: LD_INT 0
28420: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28421: LD_ADDR_OWVAR 29
28425: PUSH
28426: LD_INT 12
28428: PUSH
28429: LD_INT 12
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// hc_agressivity := 20 ;
28436: LD_ADDR_OWVAR 35
28440: PUSH
28441: LD_INT 20
28443: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28444: LD_ADDR_OWVAR 28
28448: PUSH
28449: LD_INT 17
28451: ST_TO_ADDR
// hc_gallery :=  ;
28452: LD_ADDR_OWVAR 33
28456: PUSH
28457: LD_STRING 
28459: ST_TO_ADDR
// hc_name :=  ;
28460: LD_ADDR_OWVAR 26
28464: PUSH
28465: LD_STRING 
28467: ST_TO_ADDR
// un := CreateHuman ;
28468: LD_ADDR_VAR 0 2
28472: PUSH
28473: CALL_OW 44
28477: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28478: LD_VAR 0 2
28482: PPUSH
28483: LD_INT 1
28485: PPUSH
28486: CALL_OW 51
// tmp := tmp ^ un ;
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_VAR 0 3
28499: PUSH
28500: LD_VAR 0 2
28504: ADD
28505: ST_TO_ADDR
// end ;
28506: GO 28402
28508: POP
28509: POP
// repeat wait ( 0 0$1 ) ;
28510: LD_INT 35
28512: PPUSH
28513: CALL_OW 67
// for un in tmp do
28517: LD_ADDR_VAR 0 2
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: FOR_IN
28528: IFFALSE 28602
// begin if IsDead ( un ) then
28530: LD_VAR 0 2
28534: PPUSH
28535: CALL_OW 301
28539: IFFALSE 28559
// begin tmp := tmp diff un ;
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_VAR 0 3
28550: PUSH
28551: LD_VAR 0 2
28555: DIFF
28556: ST_TO_ADDR
// continue ;
28557: GO 28527
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28559: LD_VAR 0 2
28563: PPUSH
28564: LD_INT 3
28566: PUSH
28567: LD_INT 22
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PPUSH
28581: CALL_OW 69
28585: PPUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 74
28595: PPUSH
28596: CALL_OW 115
// end ;
28600: GO 28527
28602: POP
28603: POP
// until not tmp ;
28604: LD_VAR 0 3
28608: NOT
28609: IFFALSE 28510
// end ;
28611: PPOPN 3
28613: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28614: LD_EXP 69
28618: PUSH
28619: LD_EXP 94
28623: AND
28624: IFFALSE 28678
28626: GO 28628
28628: DISABLE
// begin ToLua ( displayTroll(); ) ;
28629: LD_STRING displayTroll();
28631: PPUSH
28632: CALL_OW 559
// wait ( 3 3$00 ) ;
28636: LD_INT 6300
28638: PPUSH
28639: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28643: LD_STRING hideTroll();
28645: PPUSH
28646: CALL_OW 559
// wait ( 1 1$00 ) ;
28650: LD_INT 2100
28652: PPUSH
28653: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28657: LD_STRING displayTroll();
28659: PPUSH
28660: CALL_OW 559
// wait ( 1 1$00 ) ;
28664: LD_INT 2100
28666: PPUSH
28667: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28671: LD_STRING hideTroll();
28673: PPUSH
28674: CALL_OW 559
// end ;
28678: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28679: LD_EXP 69
28683: PUSH
28684: LD_EXP 95
28688: AND
28689: IFFALSE 28752
28691: GO 28693
28693: DISABLE
28694: LD_INT 0
28696: PPUSH
// begin p := 0 ;
28697: LD_ADDR_VAR 0 1
28701: PUSH
28702: LD_INT 0
28704: ST_TO_ADDR
// repeat game_speed := 1 ;
28705: LD_ADDR_OWVAR 65
28709: PUSH
28710: LD_INT 1
28712: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28713: LD_INT 35
28715: PPUSH
28716: CALL_OW 67
// p := p + 1 ;
28720: LD_ADDR_VAR 0 1
28724: PUSH
28725: LD_VAR 0 1
28729: PUSH
28730: LD_INT 1
28732: PLUS
28733: ST_TO_ADDR
// until p >= 60 ;
28734: LD_VAR 0 1
28738: PUSH
28739: LD_INT 60
28741: GREATEREQUAL
28742: IFFALSE 28705
// game_speed := 4 ;
28744: LD_ADDR_OWVAR 65
28748: PUSH
28749: LD_INT 4
28751: ST_TO_ADDR
// end ;
28752: PPOPN 1
28754: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28755: LD_EXP 69
28759: PUSH
28760: LD_EXP 96
28764: AND
28765: IFFALSE 28911
28767: GO 28769
28769: DISABLE
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28774: LD_ADDR_VAR 0 1
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_OWVAR 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 30
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 30
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PPUSH
28823: CALL_OW 69
28827: ST_TO_ADDR
// if not depot then
28828: LD_VAR 0 1
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 28911
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28837: LD_ADDR_VAR 0 2
28841: PUSH
28842: LD_VAR 0 1
28846: PUSH
28847: LD_INT 1
28849: PPUSH
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 12
28859: ARRAY
28860: PPUSH
28861: CALL_OW 274
28865: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28866: LD_VAR 0 2
28870: PPUSH
28871: LD_INT 1
28873: PPUSH
28874: LD_INT 0
28876: PPUSH
28877: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28881: LD_VAR 0 2
28885: PPUSH
28886: LD_INT 2
28888: PPUSH
28889: LD_INT 0
28891: PPUSH
28892: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28896: LD_VAR 0 2
28900: PPUSH
28901: LD_INT 3
28903: PPUSH
28904: LD_INT 0
28906: PPUSH
28907: CALL_OW 277
// end ;
28911: PPOPN 2
28913: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28914: LD_EXP 69
28918: PUSH
28919: LD_EXP 97
28923: AND
28924: IFFALSE 29021
28926: GO 28928
28928: DISABLE
28929: LD_INT 0
28931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28932: LD_ADDR_VAR 0 1
28936: PUSH
28937: LD_INT 22
28939: PUSH
28940: LD_OWVAR 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 21
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: LD_INT 23
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: ST_TO_ADDR
// if not tmp then
28986: LD_VAR 0 1
28990: NOT
28991: IFFALSE 28995
// exit ;
28993: GO 29021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28995: LD_VAR 0 1
28999: PUSH
29000: LD_INT 1
29002: PPUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 12
29012: ARRAY
29013: PPUSH
29014: LD_INT 200
29016: PPUSH
29017: CALL_OW 234
// end ;
29021: PPOPN 1
29023: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29024: LD_EXP 69
29028: PUSH
29029: LD_EXP 98
29033: AND
29034: IFFALSE 29113
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_INT 22
29049: PUSH
29050: LD_OWVAR 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 21
29061: PUSH
29062: LD_INT 2
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 69
29077: ST_TO_ADDR
// if not tmp then
29078: LD_VAR 0 1
29082: NOT
29083: IFFALSE 29087
// exit ;
29085: GO 29113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29087: LD_VAR 0 1
29091: PUSH
29092: LD_INT 1
29094: PPUSH
29095: LD_VAR 0 1
29099: PPUSH
29100: CALL_OW 12
29104: ARRAY
29105: PPUSH
29106: LD_INT 60
29108: PPUSH
29109: CALL_OW 234
// end ;
29113: PPOPN 1
29115: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29116: LD_EXP 69
29120: PUSH
29121: LD_EXP 99
29125: AND
29126: IFFALSE 29225
29128: GO 29130
29130: DISABLE
29131: LD_INT 0
29133: PPUSH
29134: PPUSH
// begin enable ;
29135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29136: LD_ADDR_VAR 0 1
29140: PUSH
29141: LD_INT 22
29143: PUSH
29144: LD_OWVAR 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 61
29155: PUSH
29156: EMPTY
29157: LIST
29158: PUSH
29159: LD_INT 33
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: ST_TO_ADDR
// if not tmp then
29179: LD_VAR 0 1
29183: NOT
29184: IFFALSE 29188
// exit ;
29186: GO 29225
// for i in tmp do
29188: LD_ADDR_VAR 0 2
29192: PUSH
29193: LD_VAR 0 1
29197: PUSH
29198: FOR_IN
29199: IFFALSE 29223
// if IsControledBy ( i ) then
29201: LD_VAR 0 2
29205: PPUSH
29206: CALL_OW 312
29210: IFFALSE 29221
// ComUnlink ( i ) ;
29212: LD_VAR 0 2
29216: PPUSH
29217: CALL_OW 136
29221: GO 29198
29223: POP
29224: POP
// end ;
29225: PPOPN 2
29227: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29228: LD_EXP 69
29232: PUSH
29233: LD_EXP 100
29237: AND
29238: IFFALSE 29378
29240: GO 29242
29242: DISABLE
29243: LD_INT 0
29245: PPUSH
29246: PPUSH
// begin ToLua ( displayPowell(); ) ;
29247: LD_STRING displayPowell();
29249: PPUSH
29250: CALL_OW 559
// uc_side := 0 ;
29254: LD_ADDR_OWVAR 20
29258: PUSH
29259: LD_INT 0
29261: ST_TO_ADDR
// uc_nation := 2 ;
29262: LD_ADDR_OWVAR 21
29266: PUSH
29267: LD_INT 2
29269: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29270: LD_ADDR_OWVAR 37
29274: PUSH
29275: LD_INT 14
29277: ST_TO_ADDR
// vc_engine := engine_siberite ;
29278: LD_ADDR_OWVAR 39
29282: PUSH
29283: LD_INT 3
29285: ST_TO_ADDR
// vc_control := control_apeman ;
29286: LD_ADDR_OWVAR 38
29290: PUSH
29291: LD_INT 5
29293: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29294: LD_ADDR_OWVAR 40
29298: PUSH
29299: LD_INT 29
29301: ST_TO_ADDR
// un := CreateVehicle ;
29302: LD_ADDR_VAR 0 2
29306: PUSH
29307: CALL_OW 45
29311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_INT 1
29319: PPUSH
29320: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29324: LD_INT 35
29326: PPUSH
29327: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29331: LD_VAR 0 2
29335: PPUSH
29336: LD_INT 22
29338: PUSH
29339: LD_OWVAR 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: PPUSH
29353: LD_VAR 0 2
29357: PPUSH
29358: CALL_OW 74
29362: PPUSH
29363: CALL_OW 115
// until IsDead ( un ) ;
29367: LD_VAR 0 2
29371: PPUSH
29372: CALL_OW 301
29376: IFFALSE 29324
// end ;
29378: PPOPN 2
29380: END
// every 0 0$1 trigger StreamModeActive and sStu do
29381: LD_EXP 69
29385: PUSH
29386: LD_EXP 108
29390: AND
29391: IFFALSE 29407
29393: GO 29395
29395: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29396: LD_STRING displayStucuk();
29398: PPUSH
29399: CALL_OW 559
// ResetFog ;
29403: CALL_OW 335
// end ;
29407: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29408: LD_EXP 69
29412: PUSH
29413: LD_EXP 101
29417: AND
29418: IFFALSE 29559
29420: GO 29422
29422: DISABLE
29423: LD_INT 0
29425: PPUSH
29426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29427: LD_ADDR_VAR 0 2
29431: PUSH
29432: LD_INT 22
29434: PUSH
29435: LD_OWVAR 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 21
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PPUSH
29458: CALL_OW 69
29462: ST_TO_ADDR
// if not tmp then
29463: LD_VAR 0 2
29467: NOT
29468: IFFALSE 29472
// exit ;
29470: GO 29559
// un := tmp [ rand ( 1 , tmp ) ] ;
29472: LD_ADDR_VAR 0 1
29476: PUSH
29477: LD_VAR 0 2
29481: PUSH
29482: LD_INT 1
29484: PPUSH
29485: LD_VAR 0 2
29489: PPUSH
29490: CALL_OW 12
29494: ARRAY
29495: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_INT 0
29503: PPUSH
29504: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29508: LD_VAR 0 1
29512: PPUSH
29513: LD_OWVAR 3
29517: PUSH
29518: LD_VAR 0 1
29522: DIFF
29523: PPUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 74
29533: PPUSH
29534: CALL_OW 115
// wait ( 0 0$20 ) ;
29538: LD_INT 700
29540: PPUSH
29541: CALL_OW 67
// SetSide ( un , your_side ) ;
29545: LD_VAR 0 1
29549: PPUSH
29550: LD_OWVAR 2
29554: PPUSH
29555: CALL_OW 235
// end ;
29559: PPOPN 2
29561: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29562: LD_EXP 69
29566: PUSH
29567: LD_EXP 102
29571: AND
29572: IFFALSE 29678
29574: GO 29576
29576: DISABLE
29577: LD_INT 0
29579: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29580: LD_ADDR_VAR 0 1
29584: PUSH
29585: LD_INT 22
29587: PUSH
29588: LD_OWVAR 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: LD_INT 30
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 30
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not depot then
29634: LD_VAR 0 1
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29678
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29643: LD_VAR 0 1
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: CALL_OW 250
29656: PPUSH
29657: LD_VAR 0 1
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: CALL_OW 251
29670: PPUSH
29671: LD_INT 70
29673: PPUSH
29674: CALL_OW 495
// end ;
29678: PPOPN 1
29680: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29681: LD_EXP 69
29685: PUSH
29686: LD_EXP 103
29690: AND
29691: IFFALSE 29902
29693: GO 29695
29695: DISABLE
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29703: LD_ADDR_VAR 0 5
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_OWVAR 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 21
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ST_TO_ADDR
// if not tmp then
29739: LD_VAR 0 5
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 29902
// for i in tmp do
29748: LD_ADDR_VAR 0 1
29752: PUSH
29753: LD_VAR 0 5
29757: PUSH
29758: FOR_IN
29759: IFFALSE 29900
// begin d := rand ( 0 , 5 ) ;
29761: LD_ADDR_VAR 0 4
29765: PUSH
29766: LD_INT 0
29768: PPUSH
29769: LD_INT 5
29771: PPUSH
29772: CALL_OW 12
29776: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29777: LD_ADDR_VAR 0 2
29781: PUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: CALL_OW 250
29791: PPUSH
29792: LD_VAR 0 4
29796: PPUSH
29797: LD_INT 3
29799: PPUSH
29800: LD_INT 12
29802: PPUSH
29803: CALL_OW 12
29807: PPUSH
29808: CALL_OW 272
29812: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29813: LD_ADDR_VAR 0 3
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 251
29827: PPUSH
29828: LD_VAR 0 4
29832: PPUSH
29833: LD_INT 3
29835: PPUSH
29836: LD_INT 12
29838: PPUSH
29839: CALL_OW 12
29843: PPUSH
29844: CALL_OW 273
29848: ST_TO_ADDR
// if ValidHex ( x , y ) then
29849: LD_VAR 0 2
29853: PPUSH
29854: LD_VAR 0 3
29858: PPUSH
29859: CALL_OW 488
29863: IFFALSE 29898
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29865: LD_VAR 0 1
29869: PPUSH
29870: LD_VAR 0 2
29874: PPUSH
29875: LD_VAR 0 3
29879: PPUSH
29880: LD_INT 3
29882: PPUSH
29883: LD_INT 6
29885: PPUSH
29886: CALL_OW 12
29890: PPUSH
29891: LD_INT 1
29893: PPUSH
29894: CALL_OW 483
// end ;
29898: GO 29758
29900: POP
29901: POP
// end ;
29902: PPOPN 5
29904: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29905: LD_EXP 69
29909: PUSH
29910: LD_EXP 104
29914: AND
29915: IFFALSE 30009
29917: GO 29919
29919: DISABLE
29920: LD_INT 0
29922: PPUSH
29923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29924: LD_ADDR_VAR 0 2
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_OWVAR 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 32
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 21
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PPUSH
29966: CALL_OW 69
29970: ST_TO_ADDR
// if not tmp then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30009
// for i in tmp do
29980: LD_ADDR_VAR 0 1
29984: PUSH
29985: LD_VAR 0 2
29989: PUSH
29990: FOR_IN
29991: IFFALSE 30007
// SetFuel ( i , 0 ) ;
29993: LD_VAR 0 1
29997: PPUSH
29998: LD_INT 0
30000: PPUSH
30001: CALL_OW 240
30005: GO 29990
30007: POP
30008: POP
// end ;
30009: PPOPN 2
30011: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30012: LD_EXP 69
30016: PUSH
30017: LD_EXP 105
30021: AND
30022: IFFALSE 30088
30024: GO 30026
30026: DISABLE
30027: LD_INT 0
30029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30030: LD_ADDR_VAR 0 1
30034: PUSH
30035: LD_INT 22
30037: PUSH
30038: LD_OWVAR 2
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 30
30049: PUSH
30050: LD_INT 29
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PPUSH
30061: CALL_OW 69
30065: ST_TO_ADDR
// if not tmp then
30066: LD_VAR 0 1
30070: NOT
30071: IFFALSE 30075
// exit ;
30073: GO 30088
// DestroyUnit ( tmp [ 1 ] ) ;
30075: LD_VAR 0 1
30079: PUSH
30080: LD_INT 1
30082: ARRAY
30083: PPUSH
30084: CALL_OW 65
// end ;
30088: PPOPN 1
30090: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30091: LD_EXP 69
30095: PUSH
30096: LD_EXP 107
30100: AND
30101: IFFALSE 30230
30103: GO 30105
30105: DISABLE
30106: LD_INT 0
30108: PPUSH
// begin uc_side := 0 ;
30109: LD_ADDR_OWVAR 20
30113: PUSH
30114: LD_INT 0
30116: ST_TO_ADDR
// uc_nation := nation_arabian ;
30117: LD_ADDR_OWVAR 21
30121: PUSH
30122: LD_INT 2
30124: ST_TO_ADDR
// hc_gallery :=  ;
30125: LD_ADDR_OWVAR 33
30129: PUSH
30130: LD_STRING 
30132: ST_TO_ADDR
// hc_name :=  ;
30133: LD_ADDR_OWVAR 26
30137: PUSH
30138: LD_STRING 
30140: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30141: LD_INT 1
30143: PPUSH
30144: LD_INT 11
30146: PPUSH
30147: LD_INT 10
30149: PPUSH
30150: CALL_OW 380
// un := CreateHuman ;
30154: LD_ADDR_VAR 0 1
30158: PUSH
30159: CALL_OW 44
30163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 1
30171: PPUSH
30172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30176: LD_INT 35
30178: PPUSH
30179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30183: LD_VAR 0 1
30187: PPUSH
30188: LD_INT 22
30190: PUSH
30191: LD_OWVAR 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PPUSH
30200: CALL_OW 69
30204: PPUSH
30205: LD_VAR 0 1
30209: PPUSH
30210: CALL_OW 74
30214: PPUSH
30215: CALL_OW 115
// until IsDead ( un ) ;
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL_OW 301
30228: IFFALSE 30176
// end ;
30230: PPOPN 1
30232: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30233: LD_EXP 69
30237: PUSH
30238: LD_EXP 109
30242: AND
30243: IFFALSE 30255
30245: GO 30247
30247: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30248: LD_STRING earthquake(getX(game), 0, 32)
30250: PPUSH
30251: CALL_OW 559
30255: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30256: LD_EXP 69
30260: PUSH
30261: LD_EXP 110
30265: AND
30266: IFFALSE 30357
30268: GO 30270
30270: DISABLE
30271: LD_INT 0
30273: PPUSH
// begin enable ;
30274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30275: LD_ADDR_VAR 0 1
30279: PUSH
30280: LD_INT 22
30282: PUSH
30283: LD_OWVAR 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 21
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 33
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// if not tmp then
30322: LD_VAR 0 1
30326: NOT
30327: IFFALSE 30331
// exit ;
30329: GO 30357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30331: LD_VAR 0 1
30335: PUSH
30336: LD_INT 1
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 12
30348: ARRAY
30349: PPUSH
30350: LD_INT 1
30352: PPUSH
30353: CALL_OW 234
// end ;
30357: PPOPN 1
30359: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30360: LD_EXP 69
30364: PUSH
30365: LD_EXP 111
30369: AND
30370: IFFALSE 30511
30372: GO 30374
30374: DISABLE
30375: LD_INT 0
30377: PPUSH
30378: PPUSH
30379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_INT 22
30387: PUSH
30388: LD_OWVAR 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 25
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PPUSH
30411: CALL_OW 69
30415: ST_TO_ADDR
// if not tmp then
30416: LD_VAR 0 3
30420: NOT
30421: IFFALSE 30425
// exit ;
30423: GO 30511
// un := tmp [ rand ( 1 , tmp ) ] ;
30425: LD_ADDR_VAR 0 2
30429: PUSH
30430: LD_VAR 0 3
30434: PUSH
30435: LD_INT 1
30437: PPUSH
30438: LD_VAR 0 3
30442: PPUSH
30443: CALL_OW 12
30447: ARRAY
30448: ST_TO_ADDR
// if Crawls ( un ) then
30449: LD_VAR 0 2
30453: PPUSH
30454: CALL_OW 318
30458: IFFALSE 30469
// ComWalk ( un ) ;
30460: LD_VAR 0 2
30464: PPUSH
30465: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30469: LD_VAR 0 2
30473: PPUSH
30474: LD_INT 9
30476: PPUSH
30477: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30481: LD_INT 28
30483: PPUSH
30484: LD_OWVAR 2
30488: PPUSH
30489: LD_INT 2
30491: PPUSH
30492: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30496: LD_INT 29
30498: PPUSH
30499: LD_OWVAR 2
30503: PPUSH
30504: LD_INT 2
30506: PPUSH
30507: CALL_OW 322
// end ;
30511: PPOPN 3
30513: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30514: LD_EXP 69
30518: PUSH
30519: LD_EXP 112
30523: AND
30524: IFFALSE 30635
30526: GO 30528
30528: DISABLE
30529: LD_INT 0
30531: PPUSH
30532: PPUSH
30533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_INT 22
30541: PUSH
30542: LD_OWVAR 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 25
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PPUSH
30565: CALL_OW 69
30569: ST_TO_ADDR
// if not tmp then
30570: LD_VAR 0 3
30574: NOT
30575: IFFALSE 30579
// exit ;
30577: GO 30635
// un := tmp [ rand ( 1 , tmp ) ] ;
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: LD_VAR 0 3
30588: PUSH
30589: LD_INT 1
30591: PPUSH
30592: LD_VAR 0 3
30596: PPUSH
30597: CALL_OW 12
30601: ARRAY
30602: ST_TO_ADDR
// if Crawls ( un ) then
30603: LD_VAR 0 2
30607: PPUSH
30608: CALL_OW 318
30612: IFFALSE 30623
// ComWalk ( un ) ;
30614: LD_VAR 0 2
30618: PPUSH
30619: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30623: LD_VAR 0 2
30627: PPUSH
30628: LD_INT 8
30630: PPUSH
30631: CALL_OW 336
// end ;
30635: PPOPN 3
30637: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30638: LD_EXP 69
30642: PUSH
30643: LD_EXP 113
30647: AND
30648: IFFALSE 30792
30650: GO 30652
30652: DISABLE
30653: LD_INT 0
30655: PPUSH
30656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30657: LD_ADDR_VAR 0 2
30661: PUSH
30662: LD_INT 22
30664: PUSH
30665: LD_OWVAR 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 21
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 34
30689: PUSH
30690: LD_INT 12
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 34
30699: PUSH
30700: LD_INT 51
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 34
30709: PUSH
30710: LD_INT 32
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: PPUSH
30728: CALL_OW 69
30732: ST_TO_ADDR
// if not tmp then
30733: LD_VAR 0 2
30737: NOT
30738: IFFALSE 30742
// exit ;
30740: GO 30792
// for i in tmp do
30742: LD_ADDR_VAR 0 1
30746: PUSH
30747: LD_VAR 0 2
30751: PUSH
30752: FOR_IN
30753: IFFALSE 30790
// if GetCargo ( i , mat_artifact ) = 0 then
30755: LD_VAR 0 1
30759: PPUSH
30760: LD_INT 4
30762: PPUSH
30763: CALL_OW 289
30767: PUSH
30768: LD_INT 0
30770: EQUAL
30771: IFFALSE 30788
// SetCargo ( i , mat_siberit , 100 ) ;
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_INT 3
30780: PPUSH
30781: LD_INT 100
30783: PPUSH
30784: CALL_OW 290
30788: GO 30752
30790: POP
30791: POP
// end ;
30792: PPOPN 2
30794: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30795: LD_EXP 69
30799: PUSH
30800: LD_EXP 114
30804: AND
30805: IFFALSE 30988
30807: GO 30809
30809: DISABLE
30810: LD_INT 0
30812: PPUSH
30813: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30814: LD_ADDR_VAR 0 2
30818: PUSH
30819: LD_INT 22
30821: PUSH
30822: LD_OWVAR 2
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: ST_TO_ADDR
// if not tmp then
30836: LD_VAR 0 2
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 30988
// for i := 1 to 2 do
30845: LD_ADDR_VAR 0 1
30849: PUSH
30850: DOUBLE
30851: LD_INT 1
30853: DEC
30854: ST_TO_ADDR
30855: LD_INT 2
30857: PUSH
30858: FOR_TO
30859: IFFALSE 30986
// begin uc_side := your_side ;
30861: LD_ADDR_OWVAR 20
30865: PUSH
30866: LD_OWVAR 2
30870: ST_TO_ADDR
// uc_nation := nation_american ;
30871: LD_ADDR_OWVAR 21
30875: PUSH
30876: LD_INT 1
30878: ST_TO_ADDR
// vc_chassis := us_morphling ;
30879: LD_ADDR_OWVAR 37
30883: PUSH
30884: LD_INT 5
30886: ST_TO_ADDR
// vc_engine := engine_siberite ;
30887: LD_ADDR_OWVAR 39
30891: PUSH
30892: LD_INT 3
30894: ST_TO_ADDR
// vc_control := control_computer ;
30895: LD_ADDR_OWVAR 38
30899: PUSH
30900: LD_INT 3
30902: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30903: LD_ADDR_OWVAR 40
30907: PUSH
30908: LD_INT 10
30910: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30911: LD_VAR 0 2
30915: PUSH
30916: LD_INT 1
30918: ARRAY
30919: PPUSH
30920: CALL_OW 310
30924: NOT
30925: IFFALSE 30972
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30927: CALL_OW 45
30931: PPUSH
30932: LD_VAR 0 2
30936: PUSH
30937: LD_INT 1
30939: ARRAY
30940: PPUSH
30941: CALL_OW 250
30945: PPUSH
30946: LD_VAR 0 2
30950: PUSH
30951: LD_INT 1
30953: ARRAY
30954: PPUSH
30955: CALL_OW 251
30959: PPUSH
30960: LD_INT 12
30962: PPUSH
30963: LD_INT 1
30965: PPUSH
30966: CALL_OW 50
30970: GO 30984
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30972: CALL_OW 45
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 51
// end ;
30984: GO 30858
30986: POP
30987: POP
// end ;
30988: PPOPN 2
30990: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30991: LD_EXP 69
30995: PUSH
30996: LD_EXP 115
31000: AND
31001: IFFALSE 31223
31003: GO 31005
31005: DISABLE
31006: LD_INT 0
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_INT 22
31021: PUSH
31022: LD_OWVAR 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 21
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: LD_INT 23
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: LIST
31062: PPUSH
31063: CALL_OW 69
31067: ST_TO_ADDR
// if not tmp then
31068: LD_VAR 0 6
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 31223
// s1 := rand ( 1 , 4 ) ;
31077: LD_ADDR_VAR 0 2
31081: PUSH
31082: LD_INT 1
31084: PPUSH
31085: LD_INT 4
31087: PPUSH
31088: CALL_OW 12
31092: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31093: LD_ADDR_VAR 0 4
31097: PUSH
31098: LD_VAR 0 6
31102: PUSH
31103: LD_INT 1
31105: ARRAY
31106: PPUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: CALL_OW 259
31116: ST_TO_ADDR
// if s1 = 1 then
31117: LD_VAR 0 2
31121: PUSH
31122: LD_INT 1
31124: EQUAL
31125: IFFALSE 31145
// s2 := rand ( 2 , 4 ) else
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 2
31134: PPUSH
31135: LD_INT 4
31137: PPUSH
31138: CALL_OW 12
31142: ST_TO_ADDR
31143: GO 31153
// s2 := 1 ;
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 1
31152: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_VAR 0 6
31162: PUSH
31163: LD_INT 1
31165: ARRAY
31166: PPUSH
31167: LD_VAR 0 3
31171: PPUSH
31172: CALL_OW 259
31176: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31177: LD_VAR 0 6
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: PPUSH
31186: LD_VAR 0 2
31190: PPUSH
31191: LD_VAR 0 5
31195: PPUSH
31196: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31200: LD_VAR 0 6
31204: PUSH
31205: LD_INT 1
31207: ARRAY
31208: PPUSH
31209: LD_VAR 0 3
31213: PPUSH
31214: LD_VAR 0 4
31218: PPUSH
31219: CALL_OW 237
// end ;
31223: PPOPN 6
31225: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31226: LD_EXP 69
31230: PUSH
31231: LD_EXP 116
31235: AND
31236: IFFALSE 31315
31238: GO 31240
31240: DISABLE
31241: LD_INT 0
31243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31244: LD_ADDR_VAR 0 1
31248: PUSH
31249: LD_INT 22
31251: PUSH
31252: LD_OWVAR 2
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 30
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PPUSH
31275: CALL_OW 69
31279: ST_TO_ADDR
// if not tmp then
31280: LD_VAR 0 1
31284: NOT
31285: IFFALSE 31289
// exit ;
31287: GO 31315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31289: LD_VAR 0 1
31293: PUSH
31294: LD_INT 1
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 12
31306: ARRAY
31307: PPUSH
31308: LD_INT 1
31310: PPUSH
31311: CALL_OW 234
// end ;
31315: PPOPN 1
31317: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31318: LD_EXP 69
31322: PUSH
31323: LD_EXP 117
31327: AND
31328: IFFALSE 31440
31330: GO 31332
31332: DISABLE
31333: LD_INT 0
31335: PPUSH
31336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31337: LD_ADDR_VAR 0 2
31341: PUSH
31342: LD_INT 22
31344: PUSH
31345: LD_OWVAR 2
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: LD_INT 30
31359: PUSH
31360: LD_INT 27
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 30
31369: PUSH
31370: LD_INT 26
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 30
31379: PUSH
31380: LD_INT 28
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 69
31401: ST_TO_ADDR
// if not tmp then
31402: LD_VAR 0 2
31406: NOT
31407: IFFALSE 31411
// exit ;
31409: GO 31440
// for i in tmp do
31411: LD_ADDR_VAR 0 1
31415: PUSH
31416: LD_VAR 0 2
31420: PUSH
31421: FOR_IN
31422: IFFALSE 31438
// SetLives ( i , 1 ) ;
31424: LD_VAR 0 1
31428: PPUSH
31429: LD_INT 1
31431: PPUSH
31432: CALL_OW 234
31436: GO 31421
31438: POP
31439: POP
// end ;
31440: PPOPN 2
31442: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31443: LD_EXP 69
31447: PUSH
31448: LD_EXP 118
31452: AND
31453: IFFALSE 31740
31455: GO 31457
31457: DISABLE
31458: LD_INT 0
31460: PPUSH
31461: PPUSH
31462: PPUSH
// begin i := rand ( 1 , 7 ) ;
31463: LD_ADDR_VAR 0 1
31467: PUSH
31468: LD_INT 1
31470: PPUSH
31471: LD_INT 7
31473: PPUSH
31474: CALL_OW 12
31478: ST_TO_ADDR
// case i of 1 :
31479: LD_VAR 0 1
31483: PUSH
31484: LD_INT 1
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31502
31492: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31493: LD_STRING earthquake(getX(game), 0, 32)
31495: PPUSH
31496: CALL_OW 559
31500: GO 31740
31502: LD_INT 2
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31524
31510: POP
// begin ToLua ( displayStucuk(); ) ;
31511: LD_STRING displayStucuk();
31513: PPUSH
31514: CALL_OW 559
// ResetFog ;
31518: CALL_OW 335
// end ; 3 :
31522: GO 31740
31524: LD_INT 3
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31636
31532: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31533: LD_ADDR_VAR 0 2
31537: PUSH
31538: LD_INT 22
31540: PUSH
31541: LD_OWVAR 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 25
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PPUSH
31564: CALL_OW 69
31568: ST_TO_ADDR
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31740
// un := tmp [ rand ( 1 , tmp ) ] ;
31578: LD_ADDR_VAR 0 3
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: LD_INT 1
31590: PPUSH
31591: LD_VAR 0 2
31595: PPUSH
31596: CALL_OW 12
31600: ARRAY
31601: ST_TO_ADDR
// if Crawls ( un ) then
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 318
31611: IFFALSE 31622
// ComWalk ( un ) ;
31613: LD_VAR 0 3
31617: PPUSH
31618: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31622: LD_VAR 0 3
31626: PPUSH
31627: LD_INT 8
31629: PPUSH
31630: CALL_OW 336
// end ; 4 :
31634: GO 31740
31636: LD_INT 4
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31718
31644: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31645: LD_ADDR_VAR 0 2
31649: PUSH
31650: LD_INT 22
31652: PUSH
31653: LD_OWVAR 2
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 30
31664: PUSH
31665: LD_INT 29
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PPUSH
31676: CALL_OW 69
31680: ST_TO_ADDR
// if not tmp then
31681: LD_VAR 0 2
31685: NOT
31686: IFFALSE 31690
// exit ;
31688: GO 31740
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31690: LD_VAR 0 2
31694: PUSH
31695: LD_INT 1
31697: ARRAY
31698: PPUSH
31699: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31703: LD_VAR 0 2
31707: PUSH
31708: LD_INT 1
31710: ARRAY
31711: PPUSH
31712: CALL_OW 65
// end ; 5 .. 7 :
31716: GO 31740
31718: LD_INT 5
31720: DOUBLE
31721: GREATEREQUAL
31722: IFFALSE 31730
31724: LD_INT 7
31726: DOUBLE
31727: LESSEQUAL
31728: IFTRUE 31732
31730: GO 31739
31732: POP
// StreamSibBomb ; end ;
31733: CALL 27977 0 0
31737: GO 31740
31739: POP
// end ;
31740: PPOPN 3
31742: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31743: LD_EXP 69
31747: PUSH
31748: LD_EXP 119
31752: AND
31753: IFFALSE 31909
31755: GO 31757
31757: DISABLE
31758: LD_INT 0
31760: PPUSH
31761: PPUSH
31762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31763: LD_ADDR_VAR 0 2
31767: PUSH
31768: LD_INT 81
31770: PUSH
31771: LD_OWVAR 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 21
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 21
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PPUSH
31812: CALL_OW 69
31816: ST_TO_ADDR
// if not tmp then
31817: LD_VAR 0 2
31821: NOT
31822: IFFALSE 31826
// exit ;
31824: GO 31909
// p := 0 ;
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_INT 0
31833: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31834: LD_INT 35
31836: PPUSH
31837: CALL_OW 67
// p := p + 1 ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 3
31850: PUSH
31851: LD_INT 1
31853: PLUS
31854: ST_TO_ADDR
// for i in tmp do
31855: LD_ADDR_VAR 0 1
31859: PUSH
31860: LD_VAR 0 2
31864: PUSH
31865: FOR_IN
31866: IFFALSE 31897
// if GetLives ( i ) < 1000 then
31868: LD_VAR 0 1
31872: PPUSH
31873: CALL_OW 256
31877: PUSH
31878: LD_INT 1000
31880: LESS
31881: IFFALSE 31895
// SetLives ( i , 1000 ) ;
31883: LD_VAR 0 1
31887: PPUSH
31888: LD_INT 1000
31890: PPUSH
31891: CALL_OW 234
31895: GO 31865
31897: POP
31898: POP
// until p > 20 ;
31899: LD_VAR 0 3
31903: PUSH
31904: LD_INT 20
31906: GREATER
31907: IFFALSE 31834
// end ;
31909: PPOPN 3
31911: END
// every 0 0$1 trigger StreamModeActive and sTime do
31912: LD_EXP 69
31916: PUSH
31917: LD_EXP 120
31921: AND
31922: IFFALSE 31957
31924: GO 31926
31926: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31927: LD_INT 28
31929: PPUSH
31930: LD_OWVAR 2
31934: PPUSH
31935: LD_INT 2
31937: PPUSH
31938: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31942: LD_INT 30
31944: PPUSH
31945: LD_OWVAR 2
31949: PPUSH
31950: LD_INT 2
31952: PPUSH
31953: CALL_OW 322
// end ;
31957: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31958: LD_EXP 69
31962: PUSH
31963: LD_EXP 121
31967: AND
31968: IFFALSE 32089
31970: GO 31972
31972: DISABLE
31973: LD_INT 0
31975: PPUSH
31976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31977: LD_ADDR_VAR 0 2
31981: PUSH
31982: LD_INT 22
31984: PUSH
31985: LD_OWVAR 2
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 21
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: LD_INT 23
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: PPUSH
32026: CALL_OW 69
32030: ST_TO_ADDR
// if not tmp then
32031: LD_VAR 0 2
32035: NOT
32036: IFFALSE 32040
// exit ;
32038: GO 32089
// for i in tmp do
32040: LD_ADDR_VAR 0 1
32044: PUSH
32045: LD_VAR 0 2
32049: PUSH
32050: FOR_IN
32051: IFFALSE 32087
// begin if Crawls ( i ) then
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 318
32062: IFFALSE 32073
// ComWalk ( i ) ;
32064: LD_VAR 0 1
32068: PPUSH
32069: CALL_OW 138
// SetClass ( i , 2 ) ;
32073: LD_VAR 0 1
32077: PPUSH
32078: LD_INT 2
32080: PPUSH
32081: CALL_OW 336
// end ;
32085: GO 32050
32087: POP
32088: POP
// end ;
32089: PPOPN 2
32091: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32092: LD_EXP 69
32096: PUSH
32097: LD_EXP 122
32101: AND
32102: IFFALSE 32390
32104: GO 32106
32106: DISABLE
32107: LD_INT 0
32109: PPUSH
32110: PPUSH
32111: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32112: LD_OWVAR 2
32116: PPUSH
32117: LD_INT 9
32119: PPUSH
32120: LD_INT 1
32122: PPUSH
32123: LD_INT 1
32125: PPUSH
32126: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32130: LD_INT 9
32132: PPUSH
32133: LD_OWVAR 2
32137: PPUSH
32138: CALL_OW 343
// uc_side := 9 ;
32142: LD_ADDR_OWVAR 20
32146: PUSH
32147: LD_INT 9
32149: ST_TO_ADDR
// uc_nation := 2 ;
32150: LD_ADDR_OWVAR 21
32154: PUSH
32155: LD_INT 2
32157: ST_TO_ADDR
// hc_name := Dark Warrior ;
32158: LD_ADDR_OWVAR 26
32162: PUSH
32163: LD_STRING Dark Warrior
32165: ST_TO_ADDR
// hc_gallery :=  ;
32166: LD_ADDR_OWVAR 33
32170: PUSH
32171: LD_STRING 
32173: ST_TO_ADDR
// hc_noskilllimit := true ;
32174: LD_ADDR_OWVAR 76
32178: PUSH
32179: LD_INT 1
32181: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32182: LD_ADDR_OWVAR 31
32186: PUSH
32187: LD_INT 30
32189: PUSH
32190: LD_INT 30
32192: PUSH
32193: LD_INT 30
32195: PUSH
32196: LD_INT 30
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// un := CreateHuman ;
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: CALL_OW 44
32214: ST_TO_ADDR
// hc_noskilllimit := false ;
32215: LD_ADDR_OWVAR 76
32219: PUSH
32220: LD_INT 0
32222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32223: LD_VAR 0 3
32227: PPUSH
32228: LD_INT 1
32230: PPUSH
32231: CALL_OW 51
// ToLua ( playRanger() ) ;
32235: LD_STRING playRanger()
32237: PPUSH
32238: CALL_OW 559
// p := 0 ;
32242: LD_ADDR_VAR 0 2
32246: PUSH
32247: LD_INT 0
32249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32250: LD_INT 35
32252: PPUSH
32253: CALL_OW 67
// p := p + 1 ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_VAR 0 2
32266: PUSH
32267: LD_INT 1
32269: PLUS
32270: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32271: LD_VAR 0 3
32275: PPUSH
32276: CALL_OW 256
32280: PUSH
32281: LD_INT 1000
32283: LESS
32284: IFFALSE 32298
// SetLives ( un , 1000 ) ;
32286: LD_VAR 0 3
32290: PPUSH
32291: LD_INT 1000
32293: PPUSH
32294: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32298: LD_VAR 0 3
32302: PPUSH
32303: LD_INT 81
32305: PUSH
32306: LD_OWVAR 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 91
32317: PUSH
32318: LD_VAR 0 3
32322: PUSH
32323: LD_INT 30
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PPUSH
32335: CALL_OW 69
32339: PPUSH
32340: LD_VAR 0 3
32344: PPUSH
32345: CALL_OW 74
32349: PPUSH
32350: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32354: LD_VAR 0 2
32358: PUSH
32359: LD_INT 80
32361: GREATER
32362: PUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL_OW 301
32372: OR
32373: IFFALSE 32250
// if un then
32375: LD_VAR 0 3
32379: IFFALSE 32390
// RemoveUnit ( un ) ;
32381: LD_VAR 0 3
32385: PPUSH
32386: CALL_OW 64
// end ;
32390: PPOPN 3
32392: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32393: LD_EXP 123
32397: IFFALSE 32513
32399: GO 32401
32401: DISABLE
32402: LD_INT 0
32404: PPUSH
32405: PPUSH
32406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32407: LD_ADDR_VAR 0 2
32411: PUSH
32412: LD_INT 81
32414: PUSH
32415: LD_OWVAR 2
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 21
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32443: LD_STRING playComputer()
32445: PPUSH
32446: CALL_OW 559
// if not tmp then
32450: LD_VAR 0 2
32454: NOT
32455: IFFALSE 32459
// exit ;
32457: GO 32513
// for i in tmp do
32459: LD_ADDR_VAR 0 1
32463: PUSH
32464: LD_VAR 0 2
32468: PUSH
32469: FOR_IN
32470: IFFALSE 32511
// for j := 1 to 4 do
32472: LD_ADDR_VAR 0 3
32476: PUSH
32477: DOUBLE
32478: LD_INT 1
32480: DEC
32481: ST_TO_ADDR
32482: LD_INT 4
32484: PUSH
32485: FOR_TO
32486: IFFALSE 32507
// SetSkill ( i , j , 10 ) ;
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_VAR 0 3
32497: PPUSH
32498: LD_INT 10
32500: PPUSH
32501: CALL_OW 237
32505: GO 32485
32507: POP
32508: POP
32509: GO 32469
32511: POP
32512: POP
// end ;
32513: PPOPN 3
32515: END
// every 0 0$1 trigger s30 do var i , tmp ;
32516: LD_EXP 124
32520: IFFALSE 32589
32522: GO 32524
32524: DISABLE
32525: LD_INT 0
32527: PPUSH
32528: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32529: LD_ADDR_VAR 0 2
32533: PUSH
32534: LD_INT 22
32536: PUSH
32537: LD_OWVAR 2
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PPUSH
32546: CALL_OW 69
32550: ST_TO_ADDR
// if not tmp then
32551: LD_VAR 0 2
32555: NOT
32556: IFFALSE 32560
// exit ;
32558: GO 32589
// for i in tmp do
32560: LD_ADDR_VAR 0 1
32564: PUSH
32565: LD_VAR 0 2
32569: PUSH
32570: FOR_IN
32571: IFFALSE 32587
// SetLives ( i , 300 ) ;
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_INT 300
32580: PPUSH
32581: CALL_OW 234
32585: GO 32570
32587: POP
32588: POP
// end ;
32589: PPOPN 2
32591: END
// every 0 0$1 trigger s60 do var i , tmp ;
32592: LD_EXP 125
32596: IFFALSE 32665
32598: GO 32600
32600: DISABLE
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32605: LD_ADDR_VAR 0 2
32609: PUSH
32610: LD_INT 22
32612: PUSH
32613: LD_OWVAR 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PPUSH
32622: CALL_OW 69
32626: ST_TO_ADDR
// if not tmp then
32627: LD_VAR 0 2
32631: NOT
32632: IFFALSE 32636
// exit ;
32634: GO 32665
// for i in tmp do
32636: LD_ADDR_VAR 0 1
32640: PUSH
32641: LD_VAR 0 2
32645: PUSH
32646: FOR_IN
32647: IFFALSE 32663
// SetLives ( i , 600 ) ;
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_INT 600
32656: PPUSH
32657: CALL_OW 234
32661: GO 32646
32663: POP
32664: POP
// end ;
32665: PPOPN 2
32667: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32668: LD_INT 0
32670: PPUSH
// case cmd of 301 :
32671: LD_VAR 0 1
32675: PUSH
32676: LD_INT 301
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32716
32684: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 7
32694: PPUSH
32695: LD_VAR 0 8
32699: PPUSH
32700: LD_VAR 0 4
32704: PPUSH
32705: LD_VAR 0 5
32709: PPUSH
32710: CALL 33917 0 5
32714: GO 32837
32716: LD_INT 302
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32761
32724: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32725: LD_VAR 0 6
32729: PPUSH
32730: LD_VAR 0 7
32734: PPUSH
32735: LD_VAR 0 8
32739: PPUSH
32740: LD_VAR 0 9
32744: PPUSH
32745: LD_VAR 0 4
32749: PPUSH
32750: LD_VAR 0 5
32754: PPUSH
32755: CALL 34008 0 6
32759: GO 32837
32761: LD_INT 303
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32806
32769: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32770: LD_VAR 0 6
32774: PPUSH
32775: LD_VAR 0 7
32779: PPUSH
32780: LD_VAR 0 8
32784: PPUSH
32785: LD_VAR 0 9
32789: PPUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: CALL 32842 0 6
32804: GO 32837
32806: LD_INT 304
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32836
32814: POP
// hHackTeleport ( unit , x , y ) ; end ;
32815: LD_VAR 0 2
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: CALL 34601 0 3
32834: GO 32837
32836: POP
// end ;
32837: LD_VAR 0 12
32841: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32846: LD_VAR 0 1
32850: PUSH
32851: LD_INT 1
32853: LESS
32854: PUSH
32855: LD_VAR 0 1
32859: PUSH
32860: LD_INT 3
32862: GREATER
32863: OR
32864: PUSH
32865: LD_VAR 0 5
32869: PPUSH
32870: LD_VAR 0 6
32874: PPUSH
32875: CALL_OW 428
32879: OR
32880: IFFALSE 32884
// exit ;
32882: GO 33604
// uc_side := your_side ;
32884: LD_ADDR_OWVAR 20
32888: PUSH
32889: LD_OWVAR 2
32893: ST_TO_ADDR
// uc_nation := nation ;
32894: LD_ADDR_OWVAR 21
32898: PUSH
32899: LD_VAR 0 1
32903: ST_TO_ADDR
// bc_level = 1 ;
32904: LD_ADDR_OWVAR 43
32908: PUSH
32909: LD_INT 1
32911: ST_TO_ADDR
// case btype of 1 :
32912: LD_VAR 0 2
32916: PUSH
32917: LD_INT 1
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32936
32925: POP
// bc_type := b_depot ; 2 :
32926: LD_ADDR_OWVAR 42
32930: PUSH
32931: LD_INT 0
32933: ST_TO_ADDR
32934: GO 33548
32936: LD_INT 2
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_warehouse ; 3 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 1
32952: ST_TO_ADDR
32953: GO 33548
32955: LD_INT 3
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_lab ; 4 .. 9 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 6
32971: ST_TO_ADDR
32972: GO 33548
32974: LD_INT 4
32976: DOUBLE
32977: GREATEREQUAL
32978: IFFALSE 32986
32980: LD_INT 9
32982: DOUBLE
32983: LESSEQUAL
32984: IFTRUE 32988
32986: GO 33040
32988: POP
// begin bc_type := b_lab_half ;
32989: LD_ADDR_OWVAR 42
32993: PUSH
32994: LD_INT 7
32996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32997: LD_ADDR_OWVAR 44
33001: PUSH
33002: LD_INT 10
33004: PUSH
33005: LD_INT 11
33007: PUSH
33008: LD_INT 12
33010: PUSH
33011: LD_INT 15
33013: PUSH
33014: LD_INT 14
33016: PUSH
33017: LD_INT 13
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_INT 3
33035: MINUS
33036: ARRAY
33037: ST_TO_ADDR
// end ; 10 .. 13 :
33038: GO 33548
33040: LD_INT 10
33042: DOUBLE
33043: GREATEREQUAL
33044: IFFALSE 33052
33046: LD_INT 13
33048: DOUBLE
33049: LESSEQUAL
33050: IFTRUE 33054
33052: GO 33131
33054: POP
// begin bc_type := b_lab_full ;
33055: LD_ADDR_OWVAR 42
33059: PUSH
33060: LD_INT 8
33062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33063: LD_ADDR_OWVAR 44
33067: PUSH
33068: LD_INT 10
33070: PUSH
33071: LD_INT 12
33073: PUSH
33074: LD_INT 14
33076: PUSH
33077: LD_INT 13
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: PUSH
33086: LD_VAR 0 2
33090: PUSH
33091: LD_INT 9
33093: MINUS
33094: ARRAY
33095: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33096: LD_ADDR_OWVAR 45
33100: PUSH
33101: LD_INT 11
33103: PUSH
33104: LD_INT 15
33106: PUSH
33107: LD_INT 12
33109: PUSH
33110: LD_INT 15
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: PUSH
33119: LD_VAR 0 2
33123: PUSH
33124: LD_INT 9
33126: MINUS
33127: ARRAY
33128: ST_TO_ADDR
// end ; 14 :
33129: GO 33548
33131: LD_INT 14
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33150
33139: POP
// bc_type := b_workshop ; 15 :
33140: LD_ADDR_OWVAR 42
33144: PUSH
33145: LD_INT 2
33147: ST_TO_ADDR
33148: GO 33548
33150: LD_INT 15
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33169
33158: POP
// bc_type := b_factory ; 16 :
33159: LD_ADDR_OWVAR 42
33163: PUSH
33164: LD_INT 3
33166: ST_TO_ADDR
33167: GO 33548
33169: LD_INT 16
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33188
33177: POP
// bc_type := b_ext_gun ; 17 :
33178: LD_ADDR_OWVAR 42
33182: PUSH
33183: LD_INT 17
33185: ST_TO_ADDR
33186: GO 33548
33188: LD_INT 17
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33196
33194: GO 33224
33196: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33197: LD_ADDR_OWVAR 42
33201: PUSH
33202: LD_INT 19
33204: PUSH
33205: LD_INT 23
33207: PUSH
33208: LD_INT 19
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: PUSH
33216: LD_VAR 0 1
33220: ARRAY
33221: ST_TO_ADDR
33222: GO 33548
33224: LD_INT 18
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33243
33232: POP
// bc_type := b_ext_radar ; 19 :
33233: LD_ADDR_OWVAR 42
33237: PUSH
33238: LD_INT 20
33240: ST_TO_ADDR
33241: GO 33548
33243: LD_INT 19
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33262
33251: POP
// bc_type := b_ext_radio ; 20 :
33252: LD_ADDR_OWVAR 42
33256: PUSH
33257: LD_INT 22
33259: ST_TO_ADDR
33260: GO 33548
33262: LD_INT 20
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33281
33270: POP
// bc_type := b_ext_siberium ; 21 :
33271: LD_ADDR_OWVAR 42
33275: PUSH
33276: LD_INT 21
33278: ST_TO_ADDR
33279: GO 33548
33281: LD_INT 21
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33289
33287: GO 33300
33289: POP
// bc_type := b_ext_computer ; 22 :
33290: LD_ADDR_OWVAR 42
33294: PUSH
33295: LD_INT 24
33297: ST_TO_ADDR
33298: GO 33548
33300: LD_INT 22
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33319
33308: POP
// bc_type := b_ext_track ; 23 :
33309: LD_ADDR_OWVAR 42
33313: PUSH
33314: LD_INT 16
33316: ST_TO_ADDR
33317: GO 33548
33319: LD_INT 23
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33338
33327: POP
// bc_type := b_ext_laser ; 24 :
33328: LD_ADDR_OWVAR 42
33332: PUSH
33333: LD_INT 25
33335: ST_TO_ADDR
33336: GO 33548
33338: LD_INT 24
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33357
33346: POP
// bc_type := b_control_tower ; 25 :
33347: LD_ADDR_OWVAR 42
33351: PUSH
33352: LD_INT 36
33354: ST_TO_ADDR
33355: GO 33548
33357: LD_INT 25
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33376
33365: POP
// bc_type := b_breastwork ; 26 :
33366: LD_ADDR_OWVAR 42
33370: PUSH
33371: LD_INT 31
33373: ST_TO_ADDR
33374: GO 33548
33376: LD_INT 26
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 33395
33384: POP
// bc_type := b_bunker ; 27 :
33385: LD_ADDR_OWVAR 42
33389: PUSH
33390: LD_INT 32
33392: ST_TO_ADDR
33393: GO 33548
33395: LD_INT 27
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33414
33403: POP
// bc_type := b_turret ; 28 :
33404: LD_ADDR_OWVAR 42
33408: PUSH
33409: LD_INT 33
33411: ST_TO_ADDR
33412: GO 33548
33414: LD_INT 28
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33433
33422: POP
// bc_type := b_armoury ; 29 :
33423: LD_ADDR_OWVAR 42
33427: PUSH
33428: LD_INT 4
33430: ST_TO_ADDR
33431: GO 33548
33433: LD_INT 29
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33441
33439: GO 33452
33441: POP
// bc_type := b_barracks ; 30 :
33442: LD_ADDR_OWVAR 42
33446: PUSH
33447: LD_INT 5
33449: ST_TO_ADDR
33450: GO 33548
33452: LD_INT 30
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33471
33460: POP
// bc_type := b_solar_power ; 31 :
33461: LD_ADDR_OWVAR 42
33465: PUSH
33466: LD_INT 27
33468: ST_TO_ADDR
33469: GO 33548
33471: LD_INT 31
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33479
33477: GO 33490
33479: POP
// bc_type := b_oil_power ; 32 :
33480: LD_ADDR_OWVAR 42
33484: PUSH
33485: LD_INT 26
33487: ST_TO_ADDR
33488: GO 33548
33490: LD_INT 32
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33498
33496: GO 33509
33498: POP
// bc_type := b_siberite_power ; 33 :
33499: LD_ADDR_OWVAR 42
33503: PUSH
33504: LD_INT 28
33506: ST_TO_ADDR
33507: GO 33548
33509: LD_INT 33
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33528
33517: POP
// bc_type := b_oil_mine ; 34 :
33518: LD_ADDR_OWVAR 42
33522: PUSH
33523: LD_INT 29
33525: ST_TO_ADDR
33526: GO 33548
33528: LD_INT 34
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33547
33536: POP
// bc_type := b_siberite_mine ; end ;
33537: LD_ADDR_OWVAR 42
33541: PUSH
33542: LD_INT 30
33544: ST_TO_ADDR
33545: GO 33548
33547: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33548: LD_ADDR_VAR 0 8
33552: PUSH
33553: LD_VAR 0 5
33557: PPUSH
33558: LD_VAR 0 6
33562: PPUSH
33563: LD_VAR 0 3
33567: PPUSH
33568: CALL_OW 47
33572: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33573: LD_OWVAR 42
33577: PUSH
33578: LD_INT 32
33580: PUSH
33581: LD_INT 33
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: IN
33588: IFFALSE 33604
// PlaceWeaponTurret ( b , weapon ) ;
33590: LD_VAR 0 8
33594: PPUSH
33595: LD_VAR 0 4
33599: PPUSH
33600: CALL_OW 431
// end ;
33604: LD_VAR 0 7
33608: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33609: LD_INT 0
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33615: LD_ADDR_VAR 0 4
33619: PUSH
33620: LD_INT 22
33622: PUSH
33623: LD_OWVAR 2
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 30
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 30
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PPUSH
33664: CALL_OW 69
33668: ST_TO_ADDR
// if not tmp then
33669: LD_VAR 0 4
33673: NOT
33674: IFFALSE 33678
// exit ;
33676: GO 33737
// for i in tmp do
33678: LD_ADDR_VAR 0 2
33682: PUSH
33683: LD_VAR 0 4
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33735
// for j = 1 to 3 do
33691: LD_ADDR_VAR 0 3
33695: PUSH
33696: DOUBLE
33697: LD_INT 1
33699: DEC
33700: ST_TO_ADDR
33701: LD_INT 3
33703: PUSH
33704: FOR_TO
33705: IFFALSE 33731
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33707: LD_VAR 0 2
33711: PPUSH
33712: CALL_OW 274
33716: PPUSH
33717: LD_VAR 0 3
33721: PPUSH
33722: LD_INT 99999
33724: PPUSH
33725: CALL_OW 277
33729: GO 33704
33731: POP
33732: POP
33733: GO 33688
33735: POP
33736: POP
// end ;
33737: LD_VAR 0 1
33741: RET
// export function hHackSetLevel10 ; var i , j ; begin
33742: LD_INT 0
33744: PPUSH
33745: PPUSH
33746: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33747: LD_ADDR_VAR 0 2
33751: PUSH
33752: LD_INT 21
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PPUSH
33762: CALL_OW 69
33766: PUSH
33767: FOR_IN
33768: IFFALSE 33820
// if IsSelected ( i ) then
33770: LD_VAR 0 2
33774: PPUSH
33775: CALL_OW 306
33779: IFFALSE 33818
// begin for j := 1 to 4 do
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: DOUBLE
33787: LD_INT 1
33789: DEC
33790: ST_TO_ADDR
33791: LD_INT 4
33793: PUSH
33794: FOR_TO
33795: IFFALSE 33816
// SetSkill ( i , j , 10 ) ;
33797: LD_VAR 0 2
33801: PPUSH
33802: LD_VAR 0 3
33806: PPUSH
33807: LD_INT 10
33809: PPUSH
33810: CALL_OW 237
33814: GO 33794
33816: POP
33817: POP
// end ;
33818: GO 33767
33820: POP
33821: POP
// end ;
33822: LD_VAR 0 1
33826: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33827: LD_INT 0
33829: PPUSH
33830: PPUSH
33831: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33832: LD_ADDR_VAR 0 2
33836: PUSH
33837: LD_INT 22
33839: PUSH
33840: LD_OWVAR 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 21
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PPUSH
33863: CALL_OW 69
33867: PUSH
33868: FOR_IN
33869: IFFALSE 33910
// begin for j := 1 to 4 do
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: DOUBLE
33877: LD_INT 1
33879: DEC
33880: ST_TO_ADDR
33881: LD_INT 4
33883: PUSH
33884: FOR_TO
33885: IFFALSE 33906
// SetSkill ( i , j , 10 ) ;
33887: LD_VAR 0 2
33891: PPUSH
33892: LD_VAR 0 3
33896: PPUSH
33897: LD_INT 10
33899: PPUSH
33900: CALL_OW 237
33904: GO 33884
33906: POP
33907: POP
// end ;
33908: GO 33868
33910: POP
33911: POP
// end ;
33912: LD_VAR 0 1
33916: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33917: LD_INT 0
33919: PPUSH
// uc_side := your_side ;
33920: LD_ADDR_OWVAR 20
33924: PUSH
33925: LD_OWVAR 2
33929: ST_TO_ADDR
// uc_nation := nation ;
33930: LD_ADDR_OWVAR 21
33934: PUSH
33935: LD_VAR 0 1
33939: ST_TO_ADDR
// InitHc ;
33940: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33944: LD_INT 0
33946: PPUSH
33947: LD_VAR 0 2
33951: PPUSH
33952: LD_VAR 0 3
33956: PPUSH
33957: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33961: LD_VAR 0 4
33965: PPUSH
33966: LD_VAR 0 5
33970: PPUSH
33971: CALL_OW 428
33975: PUSH
33976: LD_INT 0
33978: EQUAL
33979: IFFALSE 34003
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33981: CALL_OW 44
33985: PPUSH
33986: LD_VAR 0 4
33990: PPUSH
33991: LD_VAR 0 5
33995: PPUSH
33996: LD_INT 1
33998: PPUSH
33999: CALL_OW 48
// end ;
34003: LD_VAR 0 6
34007: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
// uc_side := your_side ;
34012: LD_ADDR_OWVAR 20
34016: PUSH
34017: LD_OWVAR 2
34021: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34022: LD_VAR 0 1
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: IN
34049: IFFALSE 34061
// uc_nation := nation_american else
34051: LD_ADDR_OWVAR 21
34055: PUSH
34056: LD_INT 1
34058: ST_TO_ADDR
34059: GO 34104
// if chassis in [ 11 , 12 , 13 , 14 ] then
34061: LD_VAR 0 1
34065: PUSH
34066: LD_INT 11
34068: PUSH
34069: LD_INT 12
34071: PUSH
34072: LD_INT 13
34074: PUSH
34075: LD_INT 14
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: IN
34084: IFFALSE 34096
// uc_nation := nation_arabian else
34086: LD_ADDR_OWVAR 21
34090: PUSH
34091: LD_INT 2
34093: ST_TO_ADDR
34094: GO 34104
// uc_nation := nation_russian ;
34096: LD_ADDR_OWVAR 21
34100: PUSH
34101: LD_INT 3
34103: ST_TO_ADDR
// vc_chassis := chassis ;
34104: LD_ADDR_OWVAR 37
34108: PUSH
34109: LD_VAR 0 1
34113: ST_TO_ADDR
// vc_engine := engine ;
34114: LD_ADDR_OWVAR 39
34118: PUSH
34119: LD_VAR 0 2
34123: ST_TO_ADDR
// vc_control := control ;
34124: LD_ADDR_OWVAR 38
34128: PUSH
34129: LD_VAR 0 3
34133: ST_TO_ADDR
// vc_weapon := weapon ;
34134: LD_ADDR_OWVAR 40
34138: PUSH
34139: LD_VAR 0 4
34143: ST_TO_ADDR
// un := CreateVehicle ;
34144: LD_ADDR_VAR 0 8
34148: PUSH
34149: CALL_OW 45
34153: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34154: LD_VAR 0 8
34158: PPUSH
34159: LD_INT 0
34161: PPUSH
34162: LD_INT 5
34164: PPUSH
34165: CALL_OW 12
34169: PPUSH
34170: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34174: LD_VAR 0 8
34178: PPUSH
34179: LD_VAR 0 5
34183: PPUSH
34184: LD_VAR 0 6
34188: PPUSH
34189: LD_INT 1
34191: PPUSH
34192: CALL_OW 48
// end ;
34196: LD_VAR 0 7
34200: RET
// export hInvincible ; every 1 do
34201: GO 34203
34203: DISABLE
// hInvincible := [ ] ;
34204: LD_ADDR_EXP 126
34208: PUSH
34209: EMPTY
34210: ST_TO_ADDR
34211: END
// every 10 do var i ;
34212: GO 34214
34214: DISABLE
34215: LD_INT 0
34217: PPUSH
// begin enable ;
34218: ENABLE
// if not hInvincible then
34219: LD_EXP 126
34223: NOT
34224: IFFALSE 34228
// exit ;
34226: GO 34272
// for i in hInvincible do
34228: LD_ADDR_VAR 0 1
34232: PUSH
34233: LD_EXP 126
34237: PUSH
34238: FOR_IN
34239: IFFALSE 34270
// if GetLives ( i ) < 1000 then
34241: LD_VAR 0 1
34245: PPUSH
34246: CALL_OW 256
34250: PUSH
34251: LD_INT 1000
34253: LESS
34254: IFFALSE 34268
// SetLives ( i , 1000 ) ;
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_INT 1000
34263: PPUSH
34264: CALL_OW 234
34268: GO 34238
34270: POP
34271: POP
// end ;
34272: PPOPN 1
34274: END
// export function hHackInvincible ; var i ; begin
34275: LD_INT 0
34277: PPUSH
34278: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34279: LD_ADDR_VAR 0 2
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: LD_INT 21
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 21
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 69
34316: PUSH
34317: FOR_IN
34318: IFFALSE 34379
// if IsSelected ( i ) then
34320: LD_VAR 0 2
34324: PPUSH
34325: CALL_OW 306
34329: IFFALSE 34377
// begin if i in hInvincible then
34331: LD_VAR 0 2
34335: PUSH
34336: LD_EXP 126
34340: IN
34341: IFFALSE 34361
// hInvincible := hInvincible diff i else
34343: LD_ADDR_EXP 126
34347: PUSH
34348: LD_EXP 126
34352: PUSH
34353: LD_VAR 0 2
34357: DIFF
34358: ST_TO_ADDR
34359: GO 34377
// hInvincible := hInvincible union i ;
34361: LD_ADDR_EXP 126
34365: PUSH
34366: LD_EXP 126
34370: PUSH
34371: LD_VAR 0 2
34375: UNION
34376: ST_TO_ADDR
// end ;
34377: GO 34317
34379: POP
34380: POP
// end ;
34381: LD_VAR 0 1
34385: RET
// export function hHackInvisible ; var i , j ; begin
34386: LD_INT 0
34388: PPUSH
34389: PPUSH
34390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34391: LD_ADDR_VAR 0 2
34395: PUSH
34396: LD_INT 21
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PPUSH
34406: CALL_OW 69
34410: PUSH
34411: FOR_IN
34412: IFFALSE 34436
// if IsSelected ( i ) then
34414: LD_VAR 0 2
34418: PPUSH
34419: CALL_OW 306
34423: IFFALSE 34434
// ComForceInvisible ( i ) ;
34425: LD_VAR 0 2
34429: PPUSH
34430: CALL_OW 496
34434: GO 34411
34436: POP
34437: POP
// end ;
34438: LD_VAR 0 1
34442: RET
// export function hHackChangeYourSide ; begin
34443: LD_INT 0
34445: PPUSH
// if your_side = 8 then
34446: LD_OWVAR 2
34450: PUSH
34451: LD_INT 8
34453: EQUAL
34454: IFFALSE 34466
// your_side := 0 else
34456: LD_ADDR_OWVAR 2
34460: PUSH
34461: LD_INT 0
34463: ST_TO_ADDR
34464: GO 34480
// your_side := your_side + 1 ;
34466: LD_ADDR_OWVAR 2
34470: PUSH
34471: LD_OWVAR 2
34475: PUSH
34476: LD_INT 1
34478: PLUS
34479: ST_TO_ADDR
// end ;
34480: LD_VAR 0 1
34484: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34485: LD_INT 0
34487: PPUSH
34488: PPUSH
34489: PPUSH
// for i in all_units do
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_OWVAR 3
34499: PUSH
34500: FOR_IN
34501: IFFALSE 34579
// if IsSelected ( i ) then
34503: LD_VAR 0 2
34507: PPUSH
34508: CALL_OW 306
34512: IFFALSE 34577
// begin j := GetSide ( i ) ;
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_VAR 0 2
34523: PPUSH
34524: CALL_OW 255
34528: ST_TO_ADDR
// if j = 8 then
34529: LD_VAR 0 3
34533: PUSH
34534: LD_INT 8
34536: EQUAL
34537: IFFALSE 34549
// j := 0 else
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 0
34546: ST_TO_ADDR
34547: GO 34563
// j := j + 1 ;
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_VAR 0 3
34558: PUSH
34559: LD_INT 1
34561: PLUS
34562: ST_TO_ADDR
// SetSide ( i , j ) ;
34563: LD_VAR 0 2
34567: PPUSH
34568: LD_VAR 0 3
34572: PPUSH
34573: CALL_OW 235
// end ;
34577: GO 34500
34579: POP
34580: POP
// end ;
34581: LD_VAR 0 1
34585: RET
// export function hHackFog ; begin
34586: LD_INT 0
34588: PPUSH
// FogOff ( true ) ;
34589: LD_INT 1
34591: PPUSH
34592: CALL_OW 344
// end ;
34596: LD_VAR 0 1
34600: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34601: LD_INT 0
34603: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34604: LD_VAR 0 1
34608: PPUSH
34609: LD_VAR 0 2
34613: PPUSH
34614: LD_VAR 0 3
34618: PPUSH
34619: LD_INT 1
34621: PPUSH
34622: LD_INT 1
34624: PPUSH
34625: CALL_OW 483
// CenterOnXY ( x , y ) ;
34629: LD_VAR 0 2
34633: PPUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: CALL_OW 84
// end ; end_of_file
34643: LD_VAR 0 4
34647: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34648: LD_INT 0
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34654: LD_VAR 0 1
34658: PPUSH
34659: CALL_OW 264
34663: PUSH
34664: LD_EXP 53
34668: EQUAL
34669: IFFALSE 34741
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34671: LD_INT 68
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 255
34683: PPUSH
34684: CALL_OW 321
34688: PUSH
34689: LD_INT 2
34691: EQUAL
34692: IFFALSE 34704
// eff := 70 else
34694: LD_ADDR_VAR 0 4
34698: PUSH
34699: LD_INT 70
34701: ST_TO_ADDR
34702: GO 34712
// eff := 30 ;
34704: LD_ADDR_VAR 0 4
34708: PUSH
34709: LD_INT 30
34711: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 250
34721: PPUSH
34722: LD_VAR 0 1
34726: PPUSH
34727: CALL_OW 251
34731: PPUSH
34732: LD_VAR 0 4
34736: PPUSH
34737: CALL_OW 495
// end ; end ;
34741: LD_VAR 0 2
34745: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34746: LD_INT 0
34748: PPUSH
// end ;
34749: LD_VAR 0 4
34753: RET
// export function SOS_Command ( cmd ) ; begin
34754: LD_INT 0
34756: PPUSH
// end ;
34757: LD_VAR 0 2
34761: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34762: LD_INT 0
34764: PPUSH
// end ;
34765: LD_VAR 0 6
34769: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34770: LD_INT 0
34772: PPUSH
34773: PPUSH
// if not vehicle or not factory then
34774: LD_VAR 0 1
34778: NOT
34779: PUSH
34780: LD_VAR 0 2
34784: NOT
34785: OR
34786: IFFALSE 34790
// exit ;
34788: GO 35021
// if factoryWaypoints >= factory then
34790: LD_EXP 127
34794: PUSH
34795: LD_VAR 0 2
34799: GREATEREQUAL
34800: IFFALSE 35021
// if factoryWaypoints [ factory ] then
34802: LD_EXP 127
34806: PUSH
34807: LD_VAR 0 2
34811: ARRAY
34812: IFFALSE 35021
// begin if GetControl ( vehicle ) = control_manual then
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL_OW 263
34823: PUSH
34824: LD_INT 1
34826: EQUAL
34827: IFFALSE 34908
// begin driver := IsDrivenBy ( vehicle ) ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 1
34838: PPUSH
34839: CALL_OW 311
34843: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34844: LD_VAR 0 4
34848: PPUSH
34849: LD_EXP 127
34853: PUSH
34854: LD_VAR 0 2
34858: ARRAY
34859: PUSH
34860: LD_INT 3
34862: ARRAY
34863: PPUSH
34864: LD_EXP 127
34868: PUSH
34869: LD_VAR 0 2
34873: ARRAY
34874: PUSH
34875: LD_INT 4
34877: ARRAY
34878: PPUSH
34879: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34883: LD_VAR 0 4
34887: PPUSH
34888: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34892: LD_VAR 0 4
34896: PPUSH
34897: LD_VAR 0 2
34901: PPUSH
34902: CALL_OW 180
// end else
34906: GO 35021
// if GetControl ( vehicle ) = control_remote then
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 263
34917: PUSH
34918: LD_INT 2
34920: EQUAL
34921: IFFALSE 34982
// begin wait ( 0 0$2 ) ;
34923: LD_INT 70
34925: PPUSH
34926: CALL_OW 67
// if Connect ( vehicle ) then
34930: LD_VAR 0 1
34934: PPUSH
34935: CALL 47245 0 1
34939: IFFALSE 34980
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34941: LD_VAR 0 1
34945: PPUSH
34946: LD_EXP 127
34950: PUSH
34951: LD_VAR 0 2
34955: ARRAY
34956: PUSH
34957: LD_INT 3
34959: ARRAY
34960: PPUSH
34961: LD_EXP 127
34965: PUSH
34966: LD_VAR 0 2
34970: ARRAY
34971: PUSH
34972: LD_INT 4
34974: ARRAY
34975: PPUSH
34976: CALL_OW 171
// end else
34980: GO 35021
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34982: LD_VAR 0 1
34986: PPUSH
34987: LD_EXP 127
34991: PUSH
34992: LD_VAR 0 2
34996: ARRAY
34997: PUSH
34998: LD_INT 3
35000: ARRAY
35001: PPUSH
35002: LD_EXP 127
35006: PUSH
35007: LD_VAR 0 2
35011: ARRAY
35012: PUSH
35013: LD_INT 4
35015: ARRAY
35016: PPUSH
35017: CALL_OW 171
// end ; end ;
35021: LD_VAR 0 3
35025: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35026: LD_INT 0
35028: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35029: LD_VAR 0 1
35033: PUSH
35034: LD_INT 250
35036: EQUAL
35037: PUSH
35038: LD_VAR 0 2
35042: PPUSH
35043: CALL_OW 264
35047: PUSH
35048: LD_EXP 56
35052: EQUAL
35053: AND
35054: IFFALSE 35075
// MinerPlaceMine ( unit , x , y ) ;
35056: LD_VAR 0 2
35060: PPUSH
35061: LD_VAR 0 4
35065: PPUSH
35066: LD_VAR 0 5
35070: PPUSH
35071: CALL 37803 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35075: LD_VAR 0 1
35079: PUSH
35080: LD_INT 251
35082: EQUAL
35083: PUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL_OW 264
35093: PUSH
35094: LD_EXP 56
35098: EQUAL
35099: AND
35100: IFFALSE 35121
// MinerDetonateMine ( unit , x , y ) ;
35102: LD_VAR 0 2
35106: PPUSH
35107: LD_VAR 0 4
35111: PPUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: CALL 38080 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35121: LD_VAR 0 1
35125: PUSH
35126: LD_INT 252
35128: EQUAL
35129: PUSH
35130: LD_VAR 0 2
35134: PPUSH
35135: CALL_OW 264
35139: PUSH
35140: LD_EXP 56
35144: EQUAL
35145: AND
35146: IFFALSE 35167
// MinerCreateMinefield ( unit , x , y ) ;
35148: LD_VAR 0 2
35152: PPUSH
35153: LD_VAR 0 4
35157: PPUSH
35158: LD_VAR 0 5
35162: PPUSH
35163: CALL 38497 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35167: LD_VAR 0 1
35171: PUSH
35172: LD_INT 253
35174: EQUAL
35175: PUSH
35176: LD_VAR 0 2
35180: PPUSH
35181: CALL_OW 257
35185: PUSH
35186: LD_INT 5
35188: EQUAL
35189: AND
35190: IFFALSE 35211
// ComBinocular ( unit , x , y ) ;
35192: LD_VAR 0 2
35196: PPUSH
35197: LD_VAR 0 4
35201: PPUSH
35202: LD_VAR 0 5
35206: PPUSH
35207: CALL 38868 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 254
35218: EQUAL
35219: PUSH
35220: LD_VAR 0 2
35224: PPUSH
35225: CALL_OW 264
35229: PUSH
35230: LD_EXP 51
35234: EQUAL
35235: AND
35236: PUSH
35237: LD_VAR 0 3
35241: PPUSH
35242: CALL_OW 263
35246: PUSH
35247: LD_INT 3
35249: EQUAL
35250: AND
35251: IFFALSE 35267
// HackDestroyVehicle ( unit , selectedUnit ) ;
35253: LD_VAR 0 2
35257: PPUSH
35258: LD_VAR 0 3
35262: PPUSH
35263: CALL 37163 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35267: LD_VAR 0 1
35271: PUSH
35272: LD_INT 255
35274: EQUAL
35275: PUSH
35276: LD_VAR 0 2
35280: PPUSH
35281: CALL_OW 264
35285: PUSH
35286: LD_INT 14
35288: PUSH
35289: LD_INT 53
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: IN
35296: AND
35297: PUSH
35298: LD_VAR 0 4
35302: PPUSH
35303: LD_VAR 0 5
35307: PPUSH
35308: CALL_OW 488
35312: AND
35313: IFFALSE 35337
// CutTreeXYR ( unit , x , y , 12 ) ;
35315: LD_VAR 0 2
35319: PPUSH
35320: LD_VAR 0 4
35324: PPUSH
35325: LD_VAR 0 5
35329: PPUSH
35330: LD_INT 12
35332: PPUSH
35333: CALL 35729 0 4
// if cmd = 256 then
35337: LD_VAR 0 1
35341: PUSH
35342: LD_INT 256
35344: EQUAL
35345: IFFALSE 35366
// SetFactoryWaypoint ( unit , x , y ) ;
35347: LD_VAR 0 2
35351: PPUSH
35352: LD_VAR 0 4
35356: PPUSH
35357: LD_VAR 0 5
35361: PPUSH
35362: CALL 35371 0 3
// end ;
35366: LD_VAR 0 6
35370: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35371: LD_INT 0
35373: PPUSH
35374: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35375: LD_VAR 0 1
35379: NOT
35380: PUSH
35381: LD_VAR 0 2
35385: PPUSH
35386: LD_VAR 0 3
35390: PPUSH
35391: CALL_OW 488
35395: NOT
35396: OR
35397: PUSH
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 266
35407: PUSH
35408: LD_INT 3
35410: NONEQUAL
35411: PUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL_OW 247
35421: PUSH
35422: LD_INT 1
35424: EQUAL
35425: NOT
35426: AND
35427: OR
35428: IFFALSE 35432
// exit ;
35430: GO 35581
// if GetType ( factory ) = unit_human then
35432: LD_VAR 0 1
35436: PPUSH
35437: CALL_OW 247
35441: PUSH
35442: LD_INT 1
35444: EQUAL
35445: IFFALSE 35462
// factory := IsInUnit ( factory ) ;
35447: LD_ADDR_VAR 0 1
35451: PUSH
35452: LD_VAR 0 1
35456: PPUSH
35457: CALL_OW 310
35461: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 266
35471: PUSH
35472: LD_INT 3
35474: NONEQUAL
35475: IFFALSE 35479
// exit ;
35477: GO 35581
// if HexInfo ( x , y ) = factory then
35479: LD_VAR 0 2
35483: PPUSH
35484: LD_VAR 0 3
35488: PPUSH
35489: CALL_OW 428
35493: PUSH
35494: LD_VAR 0 1
35498: EQUAL
35499: IFFALSE 35526
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35501: LD_ADDR_EXP 127
35505: PUSH
35506: LD_EXP 127
35510: PPUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: LD_INT 0
35518: PPUSH
35519: CALL_OW 1
35523: ST_TO_ADDR
35524: GO 35577
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35526: LD_ADDR_EXP 127
35530: PUSH
35531: LD_EXP 127
35535: PPUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 255
35550: PUSH
35551: LD_VAR 0 1
35555: PUSH
35556: LD_VAR 0 2
35560: PUSH
35561: LD_VAR 0 3
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: PPUSH
35572: CALL_OW 1
35576: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35577: CALL 35586 0 0
// end ;
35581: LD_VAR 0 4
35585: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35586: LD_INT 0
35588: PPUSH
35589: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35590: LD_STRING resetFactoryWaypoint();
35592: PPUSH
35593: CALL_OW 559
// if factoryWaypoints then
35597: LD_EXP 127
35601: IFFALSE 35724
// begin for i := 1 to factoryWaypoints do
35603: LD_ADDR_VAR 0 2
35607: PUSH
35608: DOUBLE
35609: LD_INT 1
35611: DEC
35612: ST_TO_ADDR
35613: LD_EXP 127
35617: PUSH
35618: FOR_TO
35619: IFFALSE 35722
// if factoryWaypoints [ i ] then
35621: LD_EXP 127
35625: PUSH
35626: LD_VAR 0 2
35630: ARRAY
35631: IFFALSE 35720
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35633: LD_STRING setFactoryWaypointXY(
35635: PUSH
35636: LD_EXP 127
35640: PUSH
35641: LD_VAR 0 2
35645: ARRAY
35646: PUSH
35647: LD_INT 1
35649: ARRAY
35650: STR
35651: PUSH
35652: LD_STRING ,
35654: STR
35655: PUSH
35656: LD_EXP 127
35660: PUSH
35661: LD_VAR 0 2
35665: ARRAY
35666: PUSH
35667: LD_INT 2
35669: ARRAY
35670: STR
35671: PUSH
35672: LD_STRING ,
35674: STR
35675: PUSH
35676: LD_EXP 127
35680: PUSH
35681: LD_VAR 0 2
35685: ARRAY
35686: PUSH
35687: LD_INT 3
35689: ARRAY
35690: STR
35691: PUSH
35692: LD_STRING ,
35694: STR
35695: PUSH
35696: LD_EXP 127
35700: PUSH
35701: LD_VAR 0 2
35705: ARRAY
35706: PUSH
35707: LD_INT 4
35709: ARRAY
35710: STR
35711: PUSH
35712: LD_STRING )
35714: STR
35715: PPUSH
35716: CALL_OW 559
35720: GO 35618
35722: POP
35723: POP
// end ; end ;
35724: LD_VAR 0 1
35728: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35729: LD_INT 0
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35740: LD_VAR 0 1
35744: NOT
35745: PUSH
35746: LD_VAR 0 2
35750: PPUSH
35751: LD_VAR 0 3
35755: PPUSH
35756: CALL_OW 488
35760: NOT
35761: OR
35762: PUSH
35763: LD_VAR 0 4
35767: NOT
35768: OR
35769: IFFALSE 35773
// exit ;
35771: GO 36113
// list := [ ] ;
35773: LD_ADDR_VAR 0 13
35777: PUSH
35778: EMPTY
35779: ST_TO_ADDR
// if x - r < 0 then
35780: LD_VAR 0 2
35784: PUSH
35785: LD_VAR 0 4
35789: MINUS
35790: PUSH
35791: LD_INT 0
35793: LESS
35794: IFFALSE 35806
// min_x := 0 else
35796: LD_ADDR_VAR 0 7
35800: PUSH
35801: LD_INT 0
35803: ST_TO_ADDR
35804: GO 35822
// min_x := x - r ;
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: LD_VAR 0 2
35815: PUSH
35816: LD_VAR 0 4
35820: MINUS
35821: ST_TO_ADDR
// if y - r < 0 then
35822: LD_VAR 0 3
35826: PUSH
35827: LD_VAR 0 4
35831: MINUS
35832: PUSH
35833: LD_INT 0
35835: LESS
35836: IFFALSE 35848
// min_y := 0 else
35838: LD_ADDR_VAR 0 8
35842: PUSH
35843: LD_INT 0
35845: ST_TO_ADDR
35846: GO 35864
// min_y := y - r ;
35848: LD_ADDR_VAR 0 8
35852: PUSH
35853: LD_VAR 0 3
35857: PUSH
35858: LD_VAR 0 4
35862: MINUS
35863: ST_TO_ADDR
// max_x := x + r ;
35864: LD_ADDR_VAR 0 9
35868: PUSH
35869: LD_VAR 0 2
35873: PUSH
35874: LD_VAR 0 4
35878: PLUS
35879: ST_TO_ADDR
// max_y := y + r ;
35880: LD_ADDR_VAR 0 10
35884: PUSH
35885: LD_VAR 0 3
35889: PUSH
35890: LD_VAR 0 4
35894: PLUS
35895: ST_TO_ADDR
// for _x = min_x to max_x do
35896: LD_ADDR_VAR 0 11
35900: PUSH
35901: DOUBLE
35902: LD_VAR 0 7
35906: DEC
35907: ST_TO_ADDR
35908: LD_VAR 0 9
35912: PUSH
35913: FOR_TO
35914: IFFALSE 36031
// for _y = min_y to max_y do
35916: LD_ADDR_VAR 0 12
35920: PUSH
35921: DOUBLE
35922: LD_VAR 0 8
35926: DEC
35927: ST_TO_ADDR
35928: LD_VAR 0 10
35932: PUSH
35933: FOR_TO
35934: IFFALSE 36027
// begin if not ValidHex ( _x , _y ) then
35936: LD_VAR 0 11
35940: PPUSH
35941: LD_VAR 0 12
35945: PPUSH
35946: CALL_OW 488
35950: NOT
35951: IFFALSE 35955
// continue ;
35953: GO 35933
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35955: LD_VAR 0 11
35959: PPUSH
35960: LD_VAR 0 12
35964: PPUSH
35965: CALL_OW 351
35969: PUSH
35970: LD_VAR 0 11
35974: PPUSH
35975: LD_VAR 0 12
35979: PPUSH
35980: CALL_OW 554
35984: AND
35985: IFFALSE 36025
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35987: LD_ADDR_VAR 0 13
35991: PUSH
35992: LD_VAR 0 13
35996: PPUSH
35997: LD_VAR 0 13
36001: PUSH
36002: LD_INT 1
36004: PLUS
36005: PPUSH
36006: LD_VAR 0 11
36010: PUSH
36011: LD_VAR 0 12
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PPUSH
36020: CALL_OW 2
36024: ST_TO_ADDR
// end ;
36025: GO 35933
36027: POP
36028: POP
36029: GO 35913
36031: POP
36032: POP
// if not list then
36033: LD_VAR 0 13
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36113
// for i in list do
36042: LD_ADDR_VAR 0 6
36046: PUSH
36047: LD_VAR 0 13
36051: PUSH
36052: FOR_IN
36053: IFFALSE 36111
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_STRING M
36062: PUSH
36063: LD_VAR 0 6
36067: PUSH
36068: LD_INT 1
36070: ARRAY
36071: PUSH
36072: LD_VAR 0 6
36076: PUSH
36077: LD_INT 2
36079: ARRAY
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: PPUSH
36105: CALL_OW 447
36109: GO 36052
36111: POP
36112: POP
// end ;
36113: LD_VAR 0 5
36117: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36118: LD_EXP 128
36122: NOT
36123: IFFALSE 36173
36125: GO 36127
36127: DISABLE
// begin initHack := true ;
36128: LD_ADDR_EXP 128
36132: PUSH
36133: LD_INT 1
36135: ST_TO_ADDR
// hackTanks := [ ] ;
36136: LD_ADDR_EXP 129
36140: PUSH
36141: EMPTY
36142: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36143: LD_ADDR_EXP 130
36147: PUSH
36148: EMPTY
36149: ST_TO_ADDR
// hackLimit := 3 ;
36150: LD_ADDR_EXP 131
36154: PUSH
36155: LD_INT 3
36157: ST_TO_ADDR
// hackDist := 12 ;
36158: LD_ADDR_EXP 132
36162: PUSH
36163: LD_INT 12
36165: ST_TO_ADDR
// hackCounter := [ ] ;
36166: LD_ADDR_EXP 133
36170: PUSH
36171: EMPTY
36172: ST_TO_ADDR
// end ;
36173: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36174: LD_EXP 128
36178: PUSH
36179: LD_INT 34
36181: PUSH
36182: LD_EXP 51
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PPUSH
36191: CALL_OW 69
36195: AND
36196: IFFALSE 36451
36198: GO 36200
36200: DISABLE
36201: LD_INT 0
36203: PPUSH
36204: PPUSH
// begin enable ;
36205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36206: LD_ADDR_VAR 0 1
36210: PUSH
36211: LD_INT 34
36213: PUSH
36214: LD_EXP 51
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PPUSH
36223: CALL_OW 69
36227: PUSH
36228: FOR_IN
36229: IFFALSE 36449
// begin if not i in hackTanks then
36231: LD_VAR 0 1
36235: PUSH
36236: LD_EXP 129
36240: IN
36241: NOT
36242: IFFALSE 36325
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36244: LD_ADDR_EXP 129
36248: PUSH
36249: LD_EXP 129
36253: PPUSH
36254: LD_EXP 129
36258: PUSH
36259: LD_INT 1
36261: PLUS
36262: PPUSH
36263: LD_VAR 0 1
36267: PPUSH
36268: CALL_OW 1
36272: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36273: LD_ADDR_EXP 130
36277: PUSH
36278: LD_EXP 130
36282: PPUSH
36283: LD_EXP 130
36287: PUSH
36288: LD_INT 1
36290: PLUS
36291: PPUSH
36292: EMPTY
36293: PPUSH
36294: CALL_OW 1
36298: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36299: LD_ADDR_EXP 133
36303: PUSH
36304: LD_EXP 133
36308: PPUSH
36309: LD_EXP 133
36313: PUSH
36314: LD_INT 1
36316: PLUS
36317: PPUSH
36318: EMPTY
36319: PPUSH
36320: CALL_OW 1
36324: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 302
36334: NOT
36335: IFFALSE 36348
// begin HackUnlinkAll ( i ) ;
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL 36454 0 1
// continue ;
36346: GO 36228
// end ; HackCheckCapturedStatus ( i ) ;
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL 36897 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36357: LD_ADDR_VAR 0 2
36361: PUSH
36362: LD_INT 81
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 255
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 33
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 91
36391: PUSH
36392: LD_VAR 0 1
36396: PUSH
36397: LD_EXP 132
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 50
36409: PUSH
36410: EMPTY
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: PPUSH
36419: CALL_OW 69
36423: ST_TO_ADDR
// if not tmp then
36424: LD_VAR 0 2
36428: NOT
36429: IFFALSE 36433
// continue ;
36431: GO 36228
// HackLink ( i , tmp ) ;
36433: LD_VAR 0 1
36437: PPUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: CALL 36590 0 2
// end ;
36447: GO 36228
36449: POP
36450: POP
// end ;
36451: PPOPN 2
36453: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36454: LD_INT 0
36456: PPUSH
36457: PPUSH
36458: PPUSH
// if not hack in hackTanks then
36459: LD_VAR 0 1
36463: PUSH
36464: LD_EXP 129
36468: IN
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36585
// index := GetElementIndex ( hackTanks , hack ) ;
36474: LD_ADDR_VAR 0 4
36478: PUSH
36479: LD_EXP 129
36483: PPUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL 44059 0 2
36493: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36494: LD_EXP 130
36498: PUSH
36499: LD_VAR 0 4
36503: ARRAY
36504: IFFALSE 36585
// begin for i in hackTanksCaptured [ index ] do
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: LD_EXP 130
36515: PUSH
36516: LD_VAR 0 4
36520: ARRAY
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36549
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36525: LD_VAR 0 3
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: PPUSH
36534: LD_VAR 0 3
36538: PUSH
36539: LD_INT 2
36541: ARRAY
36542: PPUSH
36543: CALL_OW 235
36547: GO 36522
36549: POP
36550: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36551: LD_ADDR_EXP 130
36555: PUSH
36556: LD_EXP 130
36560: PPUSH
36561: LD_VAR 0 4
36565: PPUSH
36566: EMPTY
36567: PPUSH
36568: CALL_OW 1
36572: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36573: LD_VAR 0 1
36577: PPUSH
36578: LD_INT 0
36580: PPUSH
36581: CALL_OW 505
// end ; end ;
36585: LD_VAR 0 2
36589: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36590: LD_INT 0
36592: PPUSH
36593: PPUSH
36594: PPUSH
// if not hack in hackTanks or not vehicles then
36595: LD_VAR 0 1
36599: PUSH
36600: LD_EXP 129
36604: IN
36605: NOT
36606: PUSH
36607: LD_VAR 0 2
36611: NOT
36612: OR
36613: IFFALSE 36617
// exit ;
36615: GO 36892
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36617: LD_ADDR_VAR 0 2
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_INT 1
36634: PPUSH
36635: LD_INT 1
36637: PPUSH
36638: CALL 44709 0 4
36642: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36643: LD_ADDR_VAR 0 5
36647: PUSH
36648: LD_EXP 129
36652: PPUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL 44059 0 2
36662: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36663: LD_EXP 130
36667: PUSH
36668: LD_VAR 0 5
36672: ARRAY
36673: PUSH
36674: LD_EXP 131
36678: LESS
36679: IFFALSE 36868
// begin for i := 1 to vehicles do
36681: LD_ADDR_VAR 0 4
36685: PUSH
36686: DOUBLE
36687: LD_INT 1
36689: DEC
36690: ST_TO_ADDR
36691: LD_VAR 0 2
36695: PUSH
36696: FOR_TO
36697: IFFALSE 36866
// begin if hackTanksCaptured [ index ] = hackLimit then
36699: LD_EXP 130
36703: PUSH
36704: LD_VAR 0 5
36708: ARRAY
36709: PUSH
36710: LD_EXP 131
36714: EQUAL
36715: IFFALSE 36719
// break ;
36717: GO 36866
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36719: LD_ADDR_EXP 133
36723: PUSH
36724: LD_EXP 133
36728: PPUSH
36729: LD_VAR 0 5
36733: PPUSH
36734: LD_EXP 133
36738: PUSH
36739: LD_VAR 0 5
36743: ARRAY
36744: PUSH
36745: LD_INT 1
36747: PLUS
36748: PPUSH
36749: CALL_OW 1
36753: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36754: LD_ADDR_EXP 130
36758: PUSH
36759: LD_EXP 130
36763: PPUSH
36764: LD_VAR 0 5
36768: PUSH
36769: LD_EXP 130
36773: PUSH
36774: LD_VAR 0 5
36778: ARRAY
36779: PUSH
36780: LD_INT 1
36782: PLUS
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PPUSH
36788: LD_VAR 0 2
36792: PUSH
36793: LD_VAR 0 4
36797: ARRAY
36798: PUSH
36799: LD_VAR 0 2
36803: PUSH
36804: LD_VAR 0 4
36808: ARRAY
36809: PPUSH
36810: CALL_OW 255
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PPUSH
36819: CALL 44274 0 3
36823: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36824: LD_VAR 0 2
36828: PUSH
36829: LD_VAR 0 4
36833: ARRAY
36834: PPUSH
36835: LD_VAR 0 1
36839: PPUSH
36840: CALL_OW 255
36844: PPUSH
36845: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36849: LD_VAR 0 2
36853: PUSH
36854: LD_VAR 0 4
36858: ARRAY
36859: PPUSH
36860: CALL_OW 141
// end ;
36864: GO 36696
36866: POP
36867: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36868: LD_VAR 0 1
36872: PPUSH
36873: LD_EXP 130
36877: PUSH
36878: LD_VAR 0 5
36882: ARRAY
36883: PUSH
36884: LD_INT 0
36886: PLUS
36887: PPUSH
36888: CALL_OW 505
// end ;
36892: LD_VAR 0 3
36896: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36897: LD_INT 0
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
// if not hack in hackTanks then
36903: LD_VAR 0 1
36907: PUSH
36908: LD_EXP 129
36912: IN
36913: NOT
36914: IFFALSE 36918
// exit ;
36916: GO 37158
// index := GetElementIndex ( hackTanks , hack ) ;
36918: LD_ADDR_VAR 0 4
36922: PUSH
36923: LD_EXP 129
36927: PPUSH
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL 44059 0 2
36937: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: DOUBLE
36944: LD_EXP 130
36948: PUSH
36949: LD_VAR 0 4
36953: ARRAY
36954: INC
36955: ST_TO_ADDR
36956: LD_INT 1
36958: PUSH
36959: FOR_DOWNTO
36960: IFFALSE 37132
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36962: LD_ADDR_VAR 0 5
36966: PUSH
36967: LD_EXP 130
36971: PUSH
36972: LD_VAR 0 4
36976: ARRAY
36977: PUSH
36978: LD_VAR 0 3
36982: ARRAY
36983: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36984: LD_VAR 0 5
36988: PUSH
36989: LD_INT 1
36991: ARRAY
36992: PPUSH
36993: CALL_OW 302
36997: NOT
36998: PUSH
36999: LD_VAR 0 5
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: CALL_OW 255
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 255
37022: NONEQUAL
37023: OR
37024: IFFALSE 37130
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37026: LD_VAR 0 5
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: CALL_OW 305
37039: PUSH
37040: LD_VAR 0 5
37044: PUSH
37045: LD_INT 1
37047: ARRAY
37048: PPUSH
37049: CALL_OW 255
37053: PUSH
37054: LD_VAR 0 1
37058: PPUSH
37059: CALL_OW 255
37063: EQUAL
37064: AND
37065: IFFALSE 37089
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37067: LD_VAR 0 5
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 5
37080: PUSH
37081: LD_INT 2
37083: ARRAY
37084: PPUSH
37085: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37089: LD_ADDR_EXP 130
37093: PUSH
37094: LD_EXP 130
37098: PPUSH
37099: LD_VAR 0 4
37103: PPUSH
37104: LD_EXP 130
37108: PUSH
37109: LD_VAR 0 4
37113: ARRAY
37114: PPUSH
37115: LD_VAR 0 3
37119: PPUSH
37120: CALL_OW 3
37124: PPUSH
37125: CALL_OW 1
37129: ST_TO_ADDR
// end ; end ;
37130: GO 36959
37132: POP
37133: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_EXP 130
37143: PUSH
37144: LD_VAR 0 4
37148: ARRAY
37149: PUSH
37150: LD_INT 0
37152: PLUS
37153: PPUSH
37154: CALL_OW 505
// end ;
37158: LD_VAR 0 2
37162: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37163: LD_INT 0
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
// if not hack in hackTanks then
37169: LD_VAR 0 1
37173: PUSH
37174: LD_EXP 129
37178: IN
37179: NOT
37180: IFFALSE 37184
// exit ;
37182: GO 37269
// index := GetElementIndex ( hackTanks , hack ) ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_EXP 129
37193: PPUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL 44059 0 2
37203: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37204: LD_ADDR_VAR 0 4
37208: PUSH
37209: DOUBLE
37210: LD_INT 1
37212: DEC
37213: ST_TO_ADDR
37214: LD_EXP 130
37218: PUSH
37219: LD_VAR 0 5
37223: ARRAY
37224: PUSH
37225: FOR_TO
37226: IFFALSE 37267
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37228: LD_EXP 130
37232: PUSH
37233: LD_VAR 0 5
37237: ARRAY
37238: PUSH
37239: LD_VAR 0 4
37243: ARRAY
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: PUSH
37249: LD_VAR 0 2
37253: EQUAL
37254: IFFALSE 37265
// KillUnit ( vehicle ) ;
37256: LD_VAR 0 2
37260: PPUSH
37261: CALL_OW 66
37265: GO 37225
37267: POP
37268: POP
// end ;
37269: LD_VAR 0 3
37273: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37274: LD_EXP 134
37278: NOT
37279: IFFALSE 37314
37281: GO 37283
37283: DISABLE
// begin initMiner := true ;
37284: LD_ADDR_EXP 134
37288: PUSH
37289: LD_INT 1
37291: ST_TO_ADDR
// minersList := [ ] ;
37292: LD_ADDR_EXP 135
37296: PUSH
37297: EMPTY
37298: ST_TO_ADDR
// minerMinesList := [ ] ;
37299: LD_ADDR_EXP 136
37303: PUSH
37304: EMPTY
37305: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37306: LD_ADDR_EXP 137
37310: PUSH
37311: LD_INT 5
37313: ST_TO_ADDR
// end ;
37314: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37315: LD_EXP 134
37319: PUSH
37320: LD_INT 34
37322: PUSH
37323: LD_EXP 56
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: AND
37337: IFFALSE 37800
37339: GO 37341
37341: DISABLE
37342: LD_INT 0
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
// begin enable ;
37348: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37349: LD_ADDR_VAR 0 1
37353: PUSH
37354: LD_INT 34
37356: PUSH
37357: LD_EXP 56
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PPUSH
37366: CALL_OW 69
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37444
// begin if not i in minersList then
37374: LD_VAR 0 1
37378: PUSH
37379: LD_EXP 135
37383: IN
37384: NOT
37385: IFFALSE 37442
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37387: LD_ADDR_EXP 135
37391: PUSH
37392: LD_EXP 135
37396: PPUSH
37397: LD_EXP 135
37401: PUSH
37402: LD_INT 1
37404: PLUS
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 1
37415: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37416: LD_ADDR_EXP 136
37420: PUSH
37421: LD_EXP 136
37425: PPUSH
37426: LD_EXP 136
37430: PUSH
37431: LD_INT 1
37433: PLUS
37434: PPUSH
37435: EMPTY
37436: PPUSH
37437: CALL_OW 1
37441: ST_TO_ADDR
// end end ;
37442: GO 37371
37444: POP
37445: POP
// for i := minerMinesList downto 1 do
37446: LD_ADDR_VAR 0 1
37450: PUSH
37451: DOUBLE
37452: LD_EXP 136
37456: INC
37457: ST_TO_ADDR
37458: LD_INT 1
37460: PUSH
37461: FOR_DOWNTO
37462: IFFALSE 37798
// begin if IsLive ( minersList [ i ] ) then
37464: LD_EXP 135
37468: PUSH
37469: LD_VAR 0 1
37473: ARRAY
37474: PPUSH
37475: CALL_OW 300
37479: IFFALSE 37507
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37481: LD_EXP 135
37485: PUSH
37486: LD_VAR 0 1
37490: ARRAY
37491: PPUSH
37492: LD_EXP 136
37496: PUSH
37497: LD_VAR 0 1
37501: ARRAY
37502: PPUSH
37503: CALL_OW 505
// if not minerMinesList [ i ] then
37507: LD_EXP 136
37511: PUSH
37512: LD_VAR 0 1
37516: ARRAY
37517: NOT
37518: IFFALSE 37522
// continue ;
37520: GO 37461
// for j := minerMinesList [ i ] downto 1 do
37522: LD_ADDR_VAR 0 2
37526: PUSH
37527: DOUBLE
37528: LD_EXP 136
37532: PUSH
37533: LD_VAR 0 1
37537: ARRAY
37538: INC
37539: ST_TO_ADDR
37540: LD_INT 1
37542: PUSH
37543: FOR_DOWNTO
37544: IFFALSE 37794
// begin side := GetSide ( minersList [ i ] ) ;
37546: LD_ADDR_VAR 0 3
37550: PUSH
37551: LD_EXP 135
37555: PUSH
37556: LD_VAR 0 1
37560: ARRAY
37561: PPUSH
37562: CALL_OW 255
37566: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37567: LD_ADDR_VAR 0 4
37571: PUSH
37572: LD_EXP 136
37576: PUSH
37577: LD_VAR 0 1
37581: ARRAY
37582: PUSH
37583: LD_VAR 0 2
37587: ARRAY
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: PPUSH
37593: LD_EXP 136
37597: PUSH
37598: LD_VAR 0 1
37602: ARRAY
37603: PUSH
37604: LD_VAR 0 2
37608: ARRAY
37609: PUSH
37610: LD_INT 2
37612: ARRAY
37613: PPUSH
37614: CALL_OW 428
37618: ST_TO_ADDR
// if not tmp then
37619: LD_VAR 0 4
37623: NOT
37624: IFFALSE 37628
// continue ;
37626: GO 37543
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37628: LD_VAR 0 4
37632: PUSH
37633: LD_INT 81
37635: PUSH
37636: LD_VAR 0 3
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PPUSH
37645: CALL_OW 69
37649: IN
37650: PUSH
37651: LD_EXP 136
37655: PUSH
37656: LD_VAR 0 1
37660: ARRAY
37661: PUSH
37662: LD_VAR 0 2
37666: ARRAY
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: PPUSH
37672: LD_EXP 136
37676: PUSH
37677: LD_VAR 0 1
37681: ARRAY
37682: PUSH
37683: LD_VAR 0 2
37687: ARRAY
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PPUSH
37693: CALL_OW 458
37697: AND
37698: IFFALSE 37792
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37700: LD_EXP 136
37704: PUSH
37705: LD_VAR 0 1
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 2
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_EXP 136
37725: PUSH
37726: LD_VAR 0 1
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 2
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37751: LD_ADDR_EXP 136
37755: PUSH
37756: LD_EXP 136
37760: PPUSH
37761: LD_VAR 0 1
37765: PPUSH
37766: LD_EXP 136
37770: PUSH
37771: LD_VAR 0 1
37775: ARRAY
37776: PPUSH
37777: LD_VAR 0 2
37781: PPUSH
37782: CALL_OW 3
37786: PPUSH
37787: CALL_OW 1
37791: ST_TO_ADDR
// end ; end ;
37792: GO 37543
37794: POP
37795: POP
// end ;
37796: GO 37461
37798: POP
37799: POP
// end ;
37800: PPOPN 4
37802: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37803: LD_INT 0
37805: PPUSH
37806: PPUSH
// result := false ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: LD_INT 0
37814: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 264
37824: PUSH
37825: LD_EXP 56
37829: EQUAL
37830: NOT
37831: IFFALSE 37835
// exit ;
37833: GO 38075
// index := GetElementIndex ( minersList , unit ) ;
37835: LD_ADDR_VAR 0 5
37839: PUSH
37840: LD_EXP 135
37844: PPUSH
37845: LD_VAR 0 1
37849: PPUSH
37850: CALL 44059 0 2
37854: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37855: LD_EXP 136
37859: PUSH
37860: LD_VAR 0 5
37864: ARRAY
37865: PUSH
37866: LD_EXP 137
37870: GREATEREQUAL
37871: IFFALSE 37875
// exit ;
37873: GO 38075
// ComMoveXY ( unit , x , y ) ;
37875: LD_VAR 0 1
37879: PPUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: LD_VAR 0 3
37889: PPUSH
37890: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37894: LD_INT 35
37896: PPUSH
37897: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37901: LD_VAR 0 1
37905: PPUSH
37906: LD_VAR 0 2
37910: PPUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: CALL 74778 0 3
37920: NOT
37921: PUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 314
37931: AND
37932: IFFALSE 37936
// exit ;
37934: GO 38075
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37936: LD_VAR 0 2
37940: PPUSH
37941: LD_VAR 0 3
37945: PPUSH
37946: CALL_OW 428
37950: PUSH
37951: LD_VAR 0 1
37955: EQUAL
37956: PUSH
37957: LD_VAR 0 1
37961: PPUSH
37962: CALL_OW 314
37966: NOT
37967: AND
37968: IFFALSE 37894
// PlaySoundXY ( x , y , PlantMine ) ;
37970: LD_VAR 0 2
37974: PPUSH
37975: LD_VAR 0 3
37979: PPUSH
37980: LD_STRING PlantMine
37982: PPUSH
37983: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37987: LD_VAR 0 2
37991: PPUSH
37992: LD_VAR 0 3
37996: PPUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 255
38006: PPUSH
38007: LD_INT 0
38009: PPUSH
38010: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38014: LD_ADDR_EXP 136
38018: PUSH
38019: LD_EXP 136
38023: PPUSH
38024: LD_VAR 0 5
38028: PUSH
38029: LD_EXP 136
38033: PUSH
38034: LD_VAR 0 5
38038: ARRAY
38039: PUSH
38040: LD_INT 1
38042: PLUS
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PPUSH
38048: LD_VAR 0 2
38052: PUSH
38053: LD_VAR 0 3
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PPUSH
38062: CALL 44274 0 3
38066: ST_TO_ADDR
// result := true ;
38067: LD_ADDR_VAR 0 4
38071: PUSH
38072: LD_INT 1
38074: ST_TO_ADDR
// end ;
38075: LD_VAR 0 4
38079: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38080: LD_INT 0
38082: PPUSH
38083: PPUSH
38084: PPUSH
// if not unit in minersList then
38085: LD_VAR 0 1
38089: PUSH
38090: LD_EXP 135
38094: IN
38095: NOT
38096: IFFALSE 38100
// exit ;
38098: GO 38492
// index := GetElementIndex ( minersList , unit ) ;
38100: LD_ADDR_VAR 0 6
38104: PUSH
38105: LD_EXP 135
38109: PPUSH
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL 44059 0 2
38119: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38120: LD_ADDR_VAR 0 5
38124: PUSH
38125: DOUBLE
38126: LD_EXP 136
38130: PUSH
38131: LD_VAR 0 6
38135: ARRAY
38136: INC
38137: ST_TO_ADDR
38138: LD_INT 1
38140: PUSH
38141: FOR_DOWNTO
38142: IFFALSE 38303
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38144: LD_EXP 136
38148: PUSH
38149: LD_VAR 0 6
38153: ARRAY
38154: PUSH
38155: LD_VAR 0 5
38159: ARRAY
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: PUSH
38165: LD_VAR 0 2
38169: EQUAL
38170: PUSH
38171: LD_EXP 136
38175: PUSH
38176: LD_VAR 0 6
38180: ARRAY
38181: PUSH
38182: LD_VAR 0 5
38186: ARRAY
38187: PUSH
38188: LD_INT 2
38190: ARRAY
38191: PUSH
38192: LD_VAR 0 3
38196: EQUAL
38197: AND
38198: IFFALSE 38301
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38200: LD_EXP 136
38204: PUSH
38205: LD_VAR 0 6
38209: ARRAY
38210: PUSH
38211: LD_VAR 0 5
38215: ARRAY
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: PPUSH
38221: LD_EXP 136
38225: PUSH
38226: LD_VAR 0 6
38230: ARRAY
38231: PUSH
38232: LD_VAR 0 5
38236: ARRAY
38237: PUSH
38238: LD_INT 2
38240: ARRAY
38241: PPUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 255
38251: PPUSH
38252: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38256: LD_ADDR_EXP 136
38260: PUSH
38261: LD_EXP 136
38265: PPUSH
38266: LD_VAR 0 6
38270: PPUSH
38271: LD_EXP 136
38275: PUSH
38276: LD_VAR 0 6
38280: ARRAY
38281: PPUSH
38282: LD_VAR 0 5
38286: PPUSH
38287: CALL_OW 3
38291: PPUSH
38292: CALL_OW 1
38296: ST_TO_ADDR
// exit ;
38297: POP
38298: POP
38299: GO 38492
// end ; end ;
38301: GO 38141
38303: POP
38304: POP
// for i := minerMinesList [ index ] downto 1 do
38305: LD_ADDR_VAR 0 5
38309: PUSH
38310: DOUBLE
38311: LD_EXP 136
38315: PUSH
38316: LD_VAR 0 6
38320: ARRAY
38321: INC
38322: ST_TO_ADDR
38323: LD_INT 1
38325: PUSH
38326: FOR_DOWNTO
38327: IFFALSE 38490
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38329: LD_EXP 136
38333: PUSH
38334: LD_VAR 0 6
38338: ARRAY
38339: PUSH
38340: LD_VAR 0 5
38344: ARRAY
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PPUSH
38350: LD_EXP 136
38354: PUSH
38355: LD_VAR 0 6
38359: ARRAY
38360: PUSH
38361: LD_VAR 0 5
38365: ARRAY
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: PPUSH
38371: LD_VAR 0 2
38375: PPUSH
38376: LD_VAR 0 3
38380: PPUSH
38381: CALL_OW 298
38385: PUSH
38386: LD_INT 6
38388: LESS
38389: IFFALSE 38488
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38391: LD_EXP 136
38395: PUSH
38396: LD_VAR 0 6
38400: ARRAY
38401: PUSH
38402: LD_VAR 0 5
38406: ARRAY
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PPUSH
38412: LD_EXP 136
38416: PUSH
38417: LD_VAR 0 6
38421: ARRAY
38422: PUSH
38423: LD_VAR 0 5
38427: ARRAY
38428: PUSH
38429: LD_INT 2
38431: ARRAY
38432: PPUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 255
38442: PPUSH
38443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38447: LD_ADDR_EXP 136
38451: PUSH
38452: LD_EXP 136
38456: PPUSH
38457: LD_VAR 0 6
38461: PPUSH
38462: LD_EXP 136
38466: PUSH
38467: LD_VAR 0 6
38471: ARRAY
38472: PPUSH
38473: LD_VAR 0 5
38477: PPUSH
38478: CALL_OW 3
38482: PPUSH
38483: CALL_OW 1
38487: ST_TO_ADDR
// end ; end ;
38488: GO 38326
38490: POP
38491: POP
// end ;
38492: LD_VAR 0 4
38496: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 264
38517: PUSH
38518: LD_EXP 56
38522: EQUAL
38523: NOT
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: LD_EXP 135
38534: IN
38535: NOT
38536: OR
38537: IFFALSE 38541
// exit ;
38539: GO 38863
// index := GetElementIndex ( minersList , unit ) ;
38541: LD_ADDR_VAR 0 6
38545: PUSH
38546: LD_EXP 135
38550: PPUSH
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL 44059 0 2
38560: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38561: LD_ADDR_VAR 0 8
38565: PUSH
38566: LD_EXP 137
38570: PUSH
38571: LD_EXP 136
38575: PUSH
38576: LD_VAR 0 6
38580: ARRAY
38581: MINUS
38582: ST_TO_ADDR
// if not minesFreeAmount then
38583: LD_VAR 0 8
38587: NOT
38588: IFFALSE 38592
// exit ;
38590: GO 38863
// tmp := [ ] ;
38592: LD_ADDR_VAR 0 7
38596: PUSH
38597: EMPTY
38598: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38599: LD_ADDR_VAR 0 5
38603: PUSH
38604: DOUBLE
38605: LD_INT 1
38607: DEC
38608: ST_TO_ADDR
38609: LD_VAR 0 8
38613: PUSH
38614: FOR_TO
38615: IFFALSE 38810
// begin _d := rand ( 0 , 5 ) ;
38617: LD_ADDR_VAR 0 11
38621: PUSH
38622: LD_INT 0
38624: PPUSH
38625: LD_INT 5
38627: PPUSH
38628: CALL_OW 12
38632: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38633: LD_ADDR_VAR 0 12
38637: PUSH
38638: LD_INT 2
38640: PPUSH
38641: LD_INT 6
38643: PPUSH
38644: CALL_OW 12
38648: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38649: LD_ADDR_VAR 0 9
38653: PUSH
38654: LD_VAR 0 2
38658: PPUSH
38659: LD_VAR 0 11
38663: PPUSH
38664: LD_VAR 0 12
38668: PPUSH
38669: CALL_OW 272
38673: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38674: LD_ADDR_VAR 0 10
38678: PUSH
38679: LD_VAR 0 3
38683: PPUSH
38684: LD_VAR 0 11
38688: PPUSH
38689: LD_VAR 0 12
38693: PPUSH
38694: CALL_OW 273
38698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38699: LD_VAR 0 9
38703: PPUSH
38704: LD_VAR 0 10
38708: PPUSH
38709: CALL_OW 488
38713: PUSH
38714: LD_VAR 0 9
38718: PUSH
38719: LD_VAR 0 10
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_VAR 0 7
38732: IN
38733: NOT
38734: AND
38735: PUSH
38736: LD_VAR 0 9
38740: PPUSH
38741: LD_VAR 0 10
38745: PPUSH
38746: CALL_OW 458
38750: NOT
38751: AND
38752: IFFALSE 38794
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38754: LD_ADDR_VAR 0 7
38758: PUSH
38759: LD_VAR 0 7
38763: PPUSH
38764: LD_VAR 0 7
38768: PUSH
38769: LD_INT 1
38771: PLUS
38772: PPUSH
38773: LD_VAR 0 9
38777: PUSH
38778: LD_VAR 0 10
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PPUSH
38787: CALL_OW 1
38791: ST_TO_ADDR
38792: GO 38808
// i := i - 1 ;
38794: LD_ADDR_VAR 0 5
38798: PUSH
38799: LD_VAR 0 5
38803: PUSH
38804: LD_INT 1
38806: MINUS
38807: ST_TO_ADDR
// end ;
38808: GO 38614
38810: POP
38811: POP
// for i in tmp do
38812: LD_ADDR_VAR 0 5
38816: PUSH
38817: LD_VAR 0 7
38821: PUSH
38822: FOR_IN
38823: IFFALSE 38861
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38825: LD_VAR 0 1
38829: PPUSH
38830: LD_VAR 0 5
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: LD_VAR 0 5
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: PPUSH
38848: CALL 37803 0 3
38852: NOT
38853: IFFALSE 38859
// exit ;
38855: POP
38856: POP
38857: GO 38863
38859: GO 38822
38861: POP
38862: POP
// end ;
38863: LD_VAR 0 4
38867: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38868: LD_INT 0
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
// if not GetClass ( unit ) = class_sniper then
38877: LD_VAR 0 1
38881: PPUSH
38882: CALL_OW 257
38886: PUSH
38887: LD_INT 5
38889: EQUAL
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 39283
// dist := 8 ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_INT 8
38902: ST_TO_ADDR
// viewRange := 12 ;
38903: LD_ADDR_VAR 0 7
38907: PUSH
38908: LD_INT 12
38910: ST_TO_ADDR
// side := GetSide ( unit ) ;
38911: LD_ADDR_VAR 0 6
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 255
38925: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38926: LD_INT 61
38928: PPUSH
38929: LD_VAR 0 6
38933: PPUSH
38934: CALL_OW 321
38938: PUSH
38939: LD_INT 2
38941: EQUAL
38942: IFFALSE 38952
// viewRange := 16 ;
38944: LD_ADDR_VAR 0 7
38948: PUSH
38949: LD_INT 16
38951: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38952: LD_VAR 0 1
38956: PPUSH
38957: LD_VAR 0 2
38961: PPUSH
38962: LD_VAR 0 3
38966: PPUSH
38967: CALL_OW 297
38971: PUSH
38972: LD_VAR 0 5
38976: GREATER
38977: IFFALSE 39056
// begin ComMoveXY ( unit , x , y ) ;
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_VAR 0 3
38993: PPUSH
38994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38998: LD_INT 35
39000: PPUSH
39001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39005: LD_VAR 0 1
39009: PPUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: LD_VAR 0 3
39019: PPUSH
39020: CALL 74778 0 3
39024: NOT
39025: IFFALSE 39029
// exit ;
39027: GO 39283
// until GetDistUnitXY ( unit , x , y ) < dist ;
39029: LD_VAR 0 1
39033: PPUSH
39034: LD_VAR 0 2
39038: PPUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: CALL_OW 297
39048: PUSH
39049: LD_VAR 0 5
39053: LESS
39054: IFFALSE 38998
// end ; ComTurnXY ( unit , x , y ) ;
39056: LD_VAR 0 1
39060: PPUSH
39061: LD_VAR 0 2
39065: PPUSH
39066: LD_VAR 0 3
39070: PPUSH
39071: CALL_OW 118
// wait ( 5 ) ;
39075: LD_INT 5
39077: PPUSH
39078: CALL_OW 67
// _d := GetDir ( unit ) ;
39082: LD_ADDR_VAR 0 10
39086: PUSH
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 254
39096: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39097: LD_ADDR_VAR 0 8
39101: PUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 250
39111: PPUSH
39112: LD_VAR 0 10
39116: PPUSH
39117: LD_VAR 0 5
39121: PPUSH
39122: CALL_OW 272
39126: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39127: LD_ADDR_VAR 0 9
39131: PUSH
39132: LD_VAR 0 1
39136: PPUSH
39137: CALL_OW 251
39141: PPUSH
39142: LD_VAR 0 10
39146: PPUSH
39147: LD_VAR 0 5
39151: PPUSH
39152: CALL_OW 273
39156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39157: LD_VAR 0 8
39161: PPUSH
39162: LD_VAR 0 9
39166: PPUSH
39167: CALL_OW 488
39171: NOT
39172: IFFALSE 39176
// exit ;
39174: GO 39283
// ComAnimCustom ( unit , 1 ) ;
39176: LD_VAR 0 1
39180: PPUSH
39181: LD_INT 1
39183: PPUSH
39184: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39188: LD_VAR 0 8
39192: PPUSH
39193: LD_VAR 0 9
39197: PPUSH
39198: LD_VAR 0 6
39202: PPUSH
39203: LD_VAR 0 7
39207: PPUSH
39208: CALL_OW 330
// repeat wait ( 1 ) ;
39212: LD_INT 1
39214: PPUSH
39215: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39219: LD_VAR 0 1
39223: PPUSH
39224: CALL_OW 316
39228: PUSH
39229: LD_VAR 0 1
39233: PPUSH
39234: CALL_OW 314
39238: OR
39239: PUSH
39240: LD_VAR 0 1
39244: PPUSH
39245: CALL_OW 302
39249: NOT
39250: OR
39251: PUSH
39252: LD_VAR 0 1
39256: PPUSH
39257: CALL_OW 301
39261: OR
39262: IFFALSE 39212
// RemoveSeeing ( _x , _y , side ) ;
39264: LD_VAR 0 8
39268: PPUSH
39269: LD_VAR 0 9
39273: PPUSH
39274: LD_VAR 0 6
39278: PPUSH
39279: CALL_OW 331
// end ; end_of_file
39283: LD_VAR 0 4
39287: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
// if exist_mode then
39292: LD_VAR 0 2
39296: IFFALSE 39321
// unit := CreateCharacter ( prefix & ident ) else
39298: LD_ADDR_VAR 0 5
39302: PUSH
39303: LD_VAR 0 3
39307: PUSH
39308: LD_VAR 0 1
39312: STR
39313: PPUSH
39314: CALL_OW 34
39318: ST_TO_ADDR
39319: GO 39336
// unit := NewCharacter ( ident ) ;
39321: LD_ADDR_VAR 0 5
39325: PUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 25
39335: ST_TO_ADDR
// result := unit ;
39336: LD_ADDR_VAR 0 4
39340: PUSH
39341: LD_VAR 0 5
39345: ST_TO_ADDR
// end ;
39346: LD_VAR 0 4
39350: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39351: LD_INT 0
39353: PPUSH
39354: PPUSH
// if not side or not nation then
39355: LD_VAR 0 1
39359: NOT
39360: PUSH
39361: LD_VAR 0 2
39365: NOT
39366: OR
39367: IFFALSE 39371
// exit ;
39369: GO 40139
// case nation of nation_american :
39371: LD_VAR 0 2
39375: PUSH
39376: LD_INT 1
39378: DOUBLE
39379: EQUAL
39380: IFTRUE 39384
39382: GO 39598
39384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39385: LD_ADDR_VAR 0 4
39389: PUSH
39390: LD_INT 35
39392: PUSH
39393: LD_INT 45
39395: PUSH
39396: LD_INT 46
39398: PUSH
39399: LD_INT 47
39401: PUSH
39402: LD_INT 82
39404: PUSH
39405: LD_INT 83
39407: PUSH
39408: LD_INT 84
39410: PUSH
39411: LD_INT 85
39413: PUSH
39414: LD_INT 86
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 6
39425: PUSH
39426: LD_INT 15
39428: PUSH
39429: LD_INT 16
39431: PUSH
39432: LD_INT 7
39434: PUSH
39435: LD_INT 12
39437: PUSH
39438: LD_INT 13
39440: PUSH
39441: LD_INT 10
39443: PUSH
39444: LD_INT 14
39446: PUSH
39447: LD_INT 20
39449: PUSH
39450: LD_INT 21
39452: PUSH
39453: LD_INT 22
39455: PUSH
39456: LD_INT 25
39458: PUSH
39459: LD_INT 32
39461: PUSH
39462: LD_INT 27
39464: PUSH
39465: LD_INT 36
39467: PUSH
39468: LD_INT 69
39470: PUSH
39471: LD_INT 39
39473: PUSH
39474: LD_INT 34
39476: PUSH
39477: LD_INT 40
39479: PUSH
39480: LD_INT 48
39482: PUSH
39483: LD_INT 49
39485: PUSH
39486: LD_INT 50
39488: PUSH
39489: LD_INT 51
39491: PUSH
39492: LD_INT 52
39494: PUSH
39495: LD_INT 53
39497: PUSH
39498: LD_INT 54
39500: PUSH
39501: LD_INT 55
39503: PUSH
39504: LD_INT 56
39506: PUSH
39507: LD_INT 57
39509: PUSH
39510: LD_INT 58
39512: PUSH
39513: LD_INT 59
39515: PUSH
39516: LD_INT 60
39518: PUSH
39519: LD_INT 61
39521: PUSH
39522: LD_INT 62
39524: PUSH
39525: LD_INT 80
39527: PUSH
39528: LD_INT 82
39530: PUSH
39531: LD_INT 83
39533: PUSH
39534: LD_INT 84
39536: PUSH
39537: LD_INT 85
39539: PUSH
39540: LD_INT 86
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
39596: GO 40063
39598: LD_INT 2
39600: DOUBLE
39601: EQUAL
39602: IFTRUE 39606
39604: GO 39832
39606: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: LD_INT 35
39614: PUSH
39615: LD_INT 45
39617: PUSH
39618: LD_INT 46
39620: PUSH
39621: LD_INT 47
39623: PUSH
39624: LD_INT 82
39626: PUSH
39627: LD_INT 83
39629: PUSH
39630: LD_INT 84
39632: PUSH
39633: LD_INT 85
39635: PUSH
39636: LD_INT 87
39638: PUSH
39639: LD_INT 70
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 11
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 5
39656: PUSH
39657: LD_INT 6
39659: PUSH
39660: LD_INT 15
39662: PUSH
39663: LD_INT 18
39665: PUSH
39666: LD_INT 7
39668: PUSH
39669: LD_INT 17
39671: PUSH
39672: LD_INT 8
39674: PUSH
39675: LD_INT 20
39677: PUSH
39678: LD_INT 21
39680: PUSH
39681: LD_INT 22
39683: PUSH
39684: LD_INT 72
39686: PUSH
39687: LD_INT 26
39689: PUSH
39690: LD_INT 69
39692: PUSH
39693: LD_INT 39
39695: PUSH
39696: LD_INT 40
39698: PUSH
39699: LD_INT 41
39701: PUSH
39702: LD_INT 42
39704: PUSH
39705: LD_INT 43
39707: PUSH
39708: LD_INT 48
39710: PUSH
39711: LD_INT 49
39713: PUSH
39714: LD_INT 50
39716: PUSH
39717: LD_INT 51
39719: PUSH
39720: LD_INT 52
39722: PUSH
39723: LD_INT 53
39725: PUSH
39726: LD_INT 54
39728: PUSH
39729: LD_INT 55
39731: PUSH
39732: LD_INT 56
39734: PUSH
39735: LD_INT 60
39737: PUSH
39738: LD_INT 61
39740: PUSH
39741: LD_INT 62
39743: PUSH
39744: LD_INT 66
39746: PUSH
39747: LD_INT 67
39749: PUSH
39750: LD_INT 68
39752: PUSH
39753: LD_INT 81
39755: PUSH
39756: LD_INT 82
39758: PUSH
39759: LD_INT 83
39761: PUSH
39762: LD_INT 84
39764: PUSH
39765: LD_INT 85
39767: PUSH
39768: LD_INT 87
39770: PUSH
39771: LD_INT 88
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: ST_TO_ADDR
39830: GO 40063
39832: LD_INT 3
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 40062
39840: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39841: LD_ADDR_VAR 0 4
39845: PUSH
39846: LD_INT 46
39848: PUSH
39849: LD_INT 47
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 82
39860: PUSH
39861: LD_INT 83
39863: PUSH
39864: LD_INT 84
39866: PUSH
39867: LD_INT 85
39869: PUSH
39870: LD_INT 86
39872: PUSH
39873: LD_INT 11
39875: PUSH
39876: LD_INT 9
39878: PUSH
39879: LD_INT 20
39881: PUSH
39882: LD_INT 19
39884: PUSH
39885: LD_INT 21
39887: PUSH
39888: LD_INT 24
39890: PUSH
39891: LD_INT 22
39893: PUSH
39894: LD_INT 25
39896: PUSH
39897: LD_INT 28
39899: PUSH
39900: LD_INT 29
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 31
39908: PUSH
39909: LD_INT 37
39911: PUSH
39912: LD_INT 38
39914: PUSH
39915: LD_INT 32
39917: PUSH
39918: LD_INT 27
39920: PUSH
39921: LD_INT 33
39923: PUSH
39924: LD_INT 69
39926: PUSH
39927: LD_INT 39
39929: PUSH
39930: LD_INT 34
39932: PUSH
39933: LD_INT 40
39935: PUSH
39936: LD_INT 71
39938: PUSH
39939: LD_INT 23
39941: PUSH
39942: LD_INT 44
39944: PUSH
39945: LD_INT 48
39947: PUSH
39948: LD_INT 49
39950: PUSH
39951: LD_INT 50
39953: PUSH
39954: LD_INT 51
39956: PUSH
39957: LD_INT 52
39959: PUSH
39960: LD_INT 53
39962: PUSH
39963: LD_INT 54
39965: PUSH
39966: LD_INT 55
39968: PUSH
39969: LD_INT 56
39971: PUSH
39972: LD_INT 57
39974: PUSH
39975: LD_INT 58
39977: PUSH
39978: LD_INT 59
39980: PUSH
39981: LD_INT 63
39983: PUSH
39984: LD_INT 64
39986: PUSH
39987: LD_INT 65
39989: PUSH
39990: LD_INT 82
39992: PUSH
39993: LD_INT 83
39995: PUSH
39996: LD_INT 84
39998: PUSH
39999: LD_INT 85
40001: PUSH
40002: LD_INT 86
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
40060: GO 40063
40062: POP
// if state > - 1 and state < 3 then
40063: LD_VAR 0 3
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: GREATER
40072: PUSH
40073: LD_VAR 0 3
40077: PUSH
40078: LD_INT 3
40080: LESS
40081: AND
40082: IFFALSE 40139
// for i in result do
40084: LD_ADDR_VAR 0 5
40088: PUSH
40089: LD_VAR 0 4
40093: PUSH
40094: FOR_IN
40095: IFFALSE 40137
// if GetTech ( i , side ) <> state then
40097: LD_VAR 0 5
40101: PPUSH
40102: LD_VAR 0 1
40106: PPUSH
40107: CALL_OW 321
40111: PUSH
40112: LD_VAR 0 3
40116: NONEQUAL
40117: IFFALSE 40135
// result := result diff i ;
40119: LD_ADDR_VAR 0 4
40123: PUSH
40124: LD_VAR 0 4
40128: PUSH
40129: LD_VAR 0 5
40133: DIFF
40134: ST_TO_ADDR
40135: GO 40094
40137: POP
40138: POP
// end ;
40139: LD_VAR 0 4
40143: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
40148: PPUSH
// result := true ;
40149: LD_ADDR_VAR 0 3
40153: PUSH
40154: LD_INT 1
40156: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40157: LD_ADDR_VAR 0 5
40161: PUSH
40162: LD_VAR 0 2
40166: PPUSH
40167: CALL_OW 480
40171: ST_TO_ADDR
// if not tmp then
40172: LD_VAR 0 5
40176: NOT
40177: IFFALSE 40181
// exit ;
40179: GO 40230
// for i in tmp do
40181: LD_ADDR_VAR 0 4
40185: PUSH
40186: LD_VAR 0 5
40190: PUSH
40191: FOR_IN
40192: IFFALSE 40228
// if GetTech ( i , side ) <> state_researched then
40194: LD_VAR 0 4
40198: PPUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 321
40208: PUSH
40209: LD_INT 2
40211: NONEQUAL
40212: IFFALSE 40226
// begin result := false ;
40214: LD_ADDR_VAR 0 3
40218: PUSH
40219: LD_INT 0
40221: ST_TO_ADDR
// exit ;
40222: POP
40223: POP
40224: GO 40230
// end ;
40226: GO 40191
40228: POP
40229: POP
// end ;
40230: LD_VAR 0 3
40234: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40235: LD_INT 0
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40250: LD_VAR 0 1
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 257
40265: PUSH
40266: LD_INT 9
40268: NONEQUAL
40269: OR
40270: IFFALSE 40274
// exit ;
40272: GO 40847
// side := GetSide ( unit ) ;
40274: LD_ADDR_VAR 0 9
40278: PUSH
40279: LD_VAR 0 1
40283: PPUSH
40284: CALL_OW 255
40288: ST_TO_ADDR
// tech_space := tech_spacanom ;
40289: LD_ADDR_VAR 0 12
40293: PUSH
40294: LD_INT 29
40296: ST_TO_ADDR
// tech_time := tech_taurad ;
40297: LD_ADDR_VAR 0 13
40301: PUSH
40302: LD_INT 28
40304: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40305: LD_ADDR_VAR 0 11
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 310
40319: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40320: LD_VAR 0 11
40324: PPUSH
40325: CALL_OW 247
40329: PUSH
40330: LD_INT 2
40332: EQUAL
40333: IFFALSE 40337
// exit ;
40335: GO 40847
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40337: LD_ADDR_VAR 0 8
40341: PUSH
40342: LD_INT 81
40344: PUSH
40345: LD_VAR 0 9
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 21
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 69
40379: ST_TO_ADDR
// if not tmp then
40380: LD_VAR 0 8
40384: NOT
40385: IFFALSE 40389
// exit ;
40387: GO 40847
// if in_unit then
40389: LD_VAR 0 11
40393: IFFALSE 40417
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40395: LD_ADDR_VAR 0 10
40399: PUSH
40400: LD_VAR 0 8
40404: PPUSH
40405: LD_VAR 0 11
40409: PPUSH
40410: CALL_OW 74
40414: ST_TO_ADDR
40415: GO 40437
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40417: LD_ADDR_VAR 0 10
40421: PUSH
40422: LD_VAR 0 8
40426: PPUSH
40427: LD_VAR 0 1
40431: PPUSH
40432: CALL_OW 74
40436: ST_TO_ADDR
// if not enemy then
40437: LD_VAR 0 10
40441: NOT
40442: IFFALSE 40446
// exit ;
40444: GO 40847
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40446: LD_VAR 0 11
40450: PUSH
40451: LD_VAR 0 11
40455: PPUSH
40456: LD_VAR 0 10
40460: PPUSH
40461: CALL_OW 296
40465: PUSH
40466: LD_INT 13
40468: GREATER
40469: AND
40470: PUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_VAR 0 10
40480: PPUSH
40481: CALL_OW 296
40485: PUSH
40486: LD_INT 12
40488: GREATER
40489: OR
40490: IFFALSE 40494
// exit ;
40492: GO 40847
// missile := [ 1 ] ;
40494: LD_ADDR_VAR 0 14
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40505: LD_VAR 0 9
40509: PPUSH
40510: LD_VAR 0 12
40514: PPUSH
40515: CALL_OW 325
40519: IFFALSE 40548
// missile := Replace ( missile , missile + 1 , 2 ) ;
40521: LD_ADDR_VAR 0 14
40525: PUSH
40526: LD_VAR 0 14
40530: PPUSH
40531: LD_VAR 0 14
40535: PUSH
40536: LD_INT 1
40538: PLUS
40539: PPUSH
40540: LD_INT 2
40542: PPUSH
40543: CALL_OW 1
40547: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40548: LD_VAR 0 9
40552: PPUSH
40553: LD_VAR 0 13
40557: PPUSH
40558: CALL_OW 325
40562: PUSH
40563: LD_VAR 0 10
40567: PPUSH
40568: CALL_OW 255
40572: PPUSH
40573: LD_VAR 0 13
40577: PPUSH
40578: CALL_OW 325
40582: NOT
40583: AND
40584: IFFALSE 40613
// missile := Replace ( missile , missile + 1 , 3 ) ;
40586: LD_ADDR_VAR 0 14
40590: PUSH
40591: LD_VAR 0 14
40595: PPUSH
40596: LD_VAR 0 14
40600: PUSH
40601: LD_INT 1
40603: PLUS
40604: PPUSH
40605: LD_INT 3
40607: PPUSH
40608: CALL_OW 1
40612: ST_TO_ADDR
// if missile < 2 then
40613: LD_VAR 0 14
40617: PUSH
40618: LD_INT 2
40620: LESS
40621: IFFALSE 40625
// exit ;
40623: GO 40847
// x := GetX ( enemy ) ;
40625: LD_ADDR_VAR 0 4
40629: PUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: CALL_OW 250
40639: ST_TO_ADDR
// y := GetY ( enemy ) ;
40640: LD_ADDR_VAR 0 5
40644: PUSH
40645: LD_VAR 0 10
40649: PPUSH
40650: CALL_OW 251
40654: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40655: LD_ADDR_VAR 0 6
40659: PUSH
40660: LD_VAR 0 4
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PPUSH
40669: LD_INT 1
40671: PPUSH
40672: CALL_OW 12
40676: PLUS
40677: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40678: LD_ADDR_VAR 0 7
40682: PUSH
40683: LD_VAR 0 5
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PPUSH
40692: LD_INT 1
40694: PPUSH
40695: CALL_OW 12
40699: PLUS
40700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40701: LD_VAR 0 6
40705: PPUSH
40706: LD_VAR 0 7
40710: PPUSH
40711: CALL_OW 488
40715: NOT
40716: IFFALSE 40738
// begin _x := x ;
40718: LD_ADDR_VAR 0 6
40722: PUSH
40723: LD_VAR 0 4
40727: ST_TO_ADDR
// _y := y ;
40728: LD_ADDR_VAR 0 7
40732: PUSH
40733: LD_VAR 0 5
40737: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40738: LD_ADDR_VAR 0 3
40742: PUSH
40743: LD_INT 1
40745: PPUSH
40746: LD_VAR 0 14
40750: PPUSH
40751: CALL_OW 12
40755: ST_TO_ADDR
// case i of 1 :
40756: LD_VAR 0 3
40760: PUSH
40761: LD_INT 1
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40769
40767: GO 40786
40769: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_VAR 0 10
40779: PPUSH
40780: CALL_OW 115
40784: GO 40847
40786: LD_INT 2
40788: DOUBLE
40789: EQUAL
40790: IFTRUE 40794
40792: GO 40816
40794: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40795: LD_VAR 0 1
40799: PPUSH
40800: LD_VAR 0 6
40804: PPUSH
40805: LD_VAR 0 7
40809: PPUSH
40810: CALL_OW 153
40814: GO 40847
40816: LD_INT 3
40818: DOUBLE
40819: EQUAL
40820: IFTRUE 40824
40822: GO 40846
40824: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40825: LD_VAR 0 1
40829: PPUSH
40830: LD_VAR 0 6
40834: PPUSH
40835: LD_VAR 0 7
40839: PPUSH
40840: CALL_OW 154
40844: GO 40847
40846: POP
// end ;
40847: LD_VAR 0 2
40851: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40852: LD_INT 0
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
// if not unit or not building then
40860: LD_VAR 0 1
40864: NOT
40865: PUSH
40866: LD_VAR 0 2
40870: NOT
40871: OR
40872: IFFALSE 40876
// exit ;
40874: GO 41034
// x := GetX ( building ) ;
40876: LD_ADDR_VAR 0 5
40880: PUSH
40881: LD_VAR 0 2
40885: PPUSH
40886: CALL_OW 250
40890: ST_TO_ADDR
// y := GetY ( building ) ;
40891: LD_ADDR_VAR 0 6
40895: PUSH
40896: LD_VAR 0 2
40900: PPUSH
40901: CALL_OW 251
40905: ST_TO_ADDR
// for i = 0 to 5 do
40906: LD_ADDR_VAR 0 4
40910: PUSH
40911: DOUBLE
40912: LD_INT 0
40914: DEC
40915: ST_TO_ADDR
40916: LD_INT 5
40918: PUSH
40919: FOR_TO
40920: IFFALSE 41032
// begin _x := ShiftX ( x , i , 3 ) ;
40922: LD_ADDR_VAR 0 7
40926: PUSH
40927: LD_VAR 0 5
40931: PPUSH
40932: LD_VAR 0 4
40936: PPUSH
40937: LD_INT 3
40939: PPUSH
40940: CALL_OW 272
40944: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40945: LD_ADDR_VAR 0 8
40949: PUSH
40950: LD_VAR 0 6
40954: PPUSH
40955: LD_VAR 0 4
40959: PPUSH
40960: LD_INT 3
40962: PPUSH
40963: CALL_OW 273
40967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40968: LD_VAR 0 7
40972: PPUSH
40973: LD_VAR 0 8
40977: PPUSH
40978: CALL_OW 488
40982: NOT
40983: IFFALSE 40987
// continue ;
40985: GO 40919
// if HexInfo ( _x , _y ) = 0 then
40987: LD_VAR 0 7
40991: PPUSH
40992: LD_VAR 0 8
40996: PPUSH
40997: CALL_OW 428
41001: PUSH
41002: LD_INT 0
41004: EQUAL
41005: IFFALSE 41030
// begin ComMoveXY ( unit , _x , _y ) ;
41007: LD_VAR 0 1
41011: PPUSH
41012: LD_VAR 0 7
41016: PPUSH
41017: LD_VAR 0 8
41021: PPUSH
41022: CALL_OW 111
// exit ;
41026: POP
41027: POP
41028: GO 41034
// end ; end ;
41030: GO 40919
41032: POP
41033: POP
// end ;
41034: LD_VAR 0 3
41038: RET
// export function ScanBase ( side , base_area ) ; begin
41039: LD_INT 0
41041: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41042: LD_ADDR_VAR 0 3
41046: PUSH
41047: LD_VAR 0 2
41051: PPUSH
41052: LD_INT 81
41054: PUSH
41055: LD_VAR 0 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PPUSH
41064: CALL_OW 70
41068: ST_TO_ADDR
// end ;
41069: LD_VAR 0 3
41073: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
// result := false ;
41080: LD_ADDR_VAR 0 2
41084: PUSH
41085: LD_INT 0
41087: ST_TO_ADDR
// side := GetSide ( unit ) ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 255
41102: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41103: LD_ADDR_VAR 0 4
41107: PUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 248
41117: ST_TO_ADDR
// case nat of 1 :
41118: LD_VAR 0 4
41122: PUSH
41123: LD_INT 1
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41131
41129: GO 41142
41131: POP
// tech := tech_lassight ; 2 :
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_INT 12
41139: ST_TO_ADDR
41140: GO 41181
41142: LD_INT 2
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41161
41150: POP
// tech := tech_mortar ; 3 :
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_INT 41
41158: ST_TO_ADDR
41159: GO 41181
41161: LD_INT 3
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41180
41169: POP
// tech := tech_bazooka ; end ;
41170: LD_ADDR_VAR 0 5
41174: PUSH
41175: LD_INT 44
41177: ST_TO_ADDR
41178: GO 41181
41180: POP
// if Researched ( side , tech ) then
41181: LD_VAR 0 3
41185: PPUSH
41186: LD_VAR 0 5
41190: PPUSH
41191: CALL_OW 325
41195: IFFALSE 41222
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41197: LD_ADDR_VAR 0 2
41201: PUSH
41202: LD_INT 5
41204: PUSH
41205: LD_INT 8
41207: PUSH
41208: LD_INT 9
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: PUSH
41216: LD_VAR 0 4
41220: ARRAY
41221: ST_TO_ADDR
// end ;
41222: LD_VAR 0 2
41226: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41227: LD_INT 0
41229: PPUSH
41230: PPUSH
41231: PPUSH
// if not mines then
41232: LD_VAR 0 2
41236: NOT
41237: IFFALSE 41241
// exit ;
41239: GO 41385
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41241: LD_ADDR_VAR 0 5
41245: PUSH
41246: LD_INT 81
41248: PUSH
41249: LD_VAR 0 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 21
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PPUSH
41279: CALL_OW 69
41283: ST_TO_ADDR
// for i in mines do
41284: LD_ADDR_VAR 0 4
41288: PUSH
41289: LD_VAR 0 2
41293: PUSH
41294: FOR_IN
41295: IFFALSE 41383
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41297: LD_VAR 0 4
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: PPUSH
41306: LD_VAR 0 4
41310: PUSH
41311: LD_INT 2
41313: ARRAY
41314: PPUSH
41315: CALL_OW 458
41319: NOT
41320: IFFALSE 41324
// continue ;
41322: GO 41294
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41324: LD_VAR 0 4
41328: PUSH
41329: LD_INT 1
41331: ARRAY
41332: PPUSH
41333: LD_VAR 0 4
41337: PUSH
41338: LD_INT 2
41340: ARRAY
41341: PPUSH
41342: CALL_OW 428
41346: PUSH
41347: LD_VAR 0 5
41351: IN
41352: IFFALSE 41381
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41354: LD_VAR 0 4
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: PPUSH
41363: LD_VAR 0 4
41367: PUSH
41368: LD_INT 2
41370: ARRAY
41371: PPUSH
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 456
// end ;
41381: GO 41294
41383: POP
41384: POP
// end ;
41385: LD_VAR 0 3
41389: RET
// export function Count ( array ) ; var i ; begin
41390: LD_INT 0
41392: PPUSH
41393: PPUSH
// result := 0 ;
41394: LD_ADDR_VAR 0 2
41398: PUSH
41399: LD_INT 0
41401: ST_TO_ADDR
// for i in array do
41402: LD_ADDR_VAR 0 3
41406: PUSH
41407: LD_VAR 0 1
41411: PUSH
41412: FOR_IN
41413: IFFALSE 41437
// if i then
41415: LD_VAR 0 3
41419: IFFALSE 41435
// result := result + 1 ;
41421: LD_ADDR_VAR 0 2
41425: PUSH
41426: LD_VAR 0 2
41430: PUSH
41431: LD_INT 1
41433: PLUS
41434: ST_TO_ADDR
41435: GO 41412
41437: POP
41438: POP
// end ;
41439: LD_VAR 0 2
41443: RET
// export function IsEmpty ( building ) ; begin
41444: LD_INT 0
41446: PPUSH
// if not building then
41447: LD_VAR 0 1
41451: NOT
41452: IFFALSE 41456
// exit ;
41454: GO 41499
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41456: LD_ADDR_VAR 0 2
41460: PUSH
41461: LD_VAR 0 1
41465: PUSH
41466: LD_INT 22
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 255
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 58
41485: PUSH
41486: EMPTY
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PPUSH
41493: CALL_OW 69
41497: IN
41498: ST_TO_ADDR
// end ;
41499: LD_VAR 0 2
41503: RET
// export function IsNotFull ( building ) ; begin
41504: LD_INT 0
41506: PPUSH
// if not building then
41507: LD_VAR 0 1
41511: NOT
41512: IFFALSE 41516
// exit ;
41514: GO 41535
// result := UnitsInside ( building ) < 6 ;
41516: LD_ADDR_VAR 0 2
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 313
41530: PUSH
41531: LD_INT 6
41533: LESS
41534: ST_TO_ADDR
// end ;
41535: LD_VAR 0 2
41539: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41540: LD_INT 0
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
// tmp := [ ] ;
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: EMPTY
41552: ST_TO_ADDR
// list := [ ] ;
41553: LD_ADDR_VAR 0 5
41557: PUSH
41558: EMPTY
41559: ST_TO_ADDR
// for i = 16 to 25 do
41560: LD_ADDR_VAR 0 4
41564: PUSH
41565: DOUBLE
41566: LD_INT 16
41568: DEC
41569: ST_TO_ADDR
41570: LD_INT 25
41572: PUSH
41573: FOR_TO
41574: IFFALSE 41647
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41576: LD_ADDR_VAR 0 3
41580: PUSH
41581: LD_VAR 0 3
41585: PUSH
41586: LD_INT 22
41588: PUSH
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 255
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 91
41605: PUSH
41606: LD_VAR 0 1
41610: PUSH
41611: LD_INT 6
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 30
41621: PUSH
41622: LD_VAR 0 4
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: PUSH
41636: EMPTY
41637: LIST
41638: PPUSH
41639: CALL_OW 69
41643: ADD
41644: ST_TO_ADDR
41645: GO 41573
41647: POP
41648: POP
// for i = 1 to tmp do
41649: LD_ADDR_VAR 0 4
41653: PUSH
41654: DOUBLE
41655: LD_INT 1
41657: DEC
41658: ST_TO_ADDR
41659: LD_VAR 0 3
41663: PUSH
41664: FOR_TO
41665: IFFALSE 41753
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41667: LD_ADDR_VAR 0 5
41671: PUSH
41672: LD_VAR 0 5
41676: PUSH
41677: LD_VAR 0 3
41681: PUSH
41682: LD_VAR 0 4
41686: ARRAY
41687: PPUSH
41688: CALL_OW 266
41692: PUSH
41693: LD_VAR 0 3
41697: PUSH
41698: LD_VAR 0 4
41702: ARRAY
41703: PPUSH
41704: CALL_OW 250
41708: PUSH
41709: LD_VAR 0 3
41713: PUSH
41714: LD_VAR 0 4
41718: ARRAY
41719: PPUSH
41720: CALL_OW 251
41724: PUSH
41725: LD_VAR 0 3
41729: PUSH
41730: LD_VAR 0 4
41734: ARRAY
41735: PPUSH
41736: CALL_OW 254
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: ADD
41750: ST_TO_ADDR
41751: GO 41664
41753: POP
41754: POP
// result := list ;
41755: LD_ADDR_VAR 0 2
41759: PUSH
41760: LD_VAR 0 5
41764: ST_TO_ADDR
// end ;
41765: LD_VAR 0 2
41769: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
// if not factory then
41779: LD_VAR 0 1
41783: NOT
41784: IFFALSE 41788
// exit ;
41786: GO 42381
// if control = control_apeman then
41788: LD_VAR 0 4
41792: PUSH
41793: LD_INT 5
41795: EQUAL
41796: IFFALSE 41905
// begin tmp := UnitsInside ( factory ) ;
41798: LD_ADDR_VAR 0 8
41802: PUSH
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 313
41812: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41813: LD_VAR 0 8
41817: PPUSH
41818: LD_INT 25
41820: PUSH
41821: LD_INT 12
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PPUSH
41828: CALL_OW 72
41832: NOT
41833: IFFALSE 41843
// control := control_manual ;
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: LD_INT 1
41842: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41843: LD_ADDR_VAR 0 8
41847: PUSH
41848: LD_VAR 0 1
41852: PPUSH
41853: CALL 41540 0 1
41857: ST_TO_ADDR
// if tmp then
41858: LD_VAR 0 8
41862: IFFALSE 41905
// begin for i in tmp do
41864: LD_ADDR_VAR 0 7
41868: PUSH
41869: LD_VAR 0 8
41873: PUSH
41874: FOR_IN
41875: IFFALSE 41903
// if i [ 1 ] = b_ext_radio then
41877: LD_VAR 0 7
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PUSH
41886: LD_INT 22
41888: EQUAL
41889: IFFALSE 41901
// begin control := control_remote ;
41891: LD_ADDR_VAR 0 4
41895: PUSH
41896: LD_INT 2
41898: ST_TO_ADDR
// break ;
41899: GO 41903
// end ;
41901: GO 41874
41903: POP
41904: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41905: LD_VAR 0 1
41909: PPUSH
41910: LD_VAR 0 2
41914: PPUSH
41915: LD_VAR 0 3
41919: PPUSH
41920: LD_VAR 0 4
41924: PPUSH
41925: LD_VAR 0 5
41929: PPUSH
41930: CALL_OW 448
41934: IFFALSE 41969
// begin result := [ chassis , engine , control , weapon ] ;
41936: LD_ADDR_VAR 0 6
41940: PUSH
41941: LD_VAR 0 2
41945: PUSH
41946: LD_VAR 0 3
41950: PUSH
41951: LD_VAR 0 4
41955: PUSH
41956: LD_VAR 0 5
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
// exit ;
41967: GO 42381
// end ; _chassis := AvailableChassisList ( factory ) ;
41969: LD_ADDR_VAR 0 9
41973: PUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 475
41983: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41984: LD_ADDR_VAR 0 11
41988: PUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: CALL_OW 476
41998: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41999: LD_ADDR_VAR 0 12
42003: PUSH
42004: LD_VAR 0 1
42008: PPUSH
42009: CALL_OW 477
42013: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42014: LD_ADDR_VAR 0 10
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 478
42028: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42029: LD_VAR 0 9
42033: NOT
42034: PUSH
42035: LD_VAR 0 11
42039: NOT
42040: OR
42041: PUSH
42042: LD_VAR 0 12
42046: NOT
42047: OR
42048: PUSH
42049: LD_VAR 0 10
42053: NOT
42054: OR
42055: IFFALSE 42090
// begin result := [ chassis , engine , control , weapon ] ;
42057: LD_ADDR_VAR 0 6
42061: PUSH
42062: LD_VAR 0 2
42066: PUSH
42067: LD_VAR 0 3
42071: PUSH
42072: LD_VAR 0 4
42076: PUSH
42077: LD_VAR 0 5
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// exit ;
42088: GO 42381
// end ; if not chassis in _chassis then
42090: LD_VAR 0 2
42094: PUSH
42095: LD_VAR 0 9
42099: IN
42100: NOT
42101: IFFALSE 42127
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42103: LD_ADDR_VAR 0 2
42107: PUSH
42108: LD_VAR 0 9
42112: PUSH
42113: LD_INT 1
42115: PPUSH
42116: LD_VAR 0 9
42120: PPUSH
42121: CALL_OW 12
42125: ARRAY
42126: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42127: LD_VAR 0 2
42131: PPUSH
42132: LD_VAR 0 3
42136: PPUSH
42137: CALL 42386 0 2
42141: NOT
42142: IFFALSE 42201
// repeat engine := _engine [ 1 ] ;
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_VAR 0 11
42153: PUSH
42154: LD_INT 1
42156: ARRAY
42157: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42158: LD_ADDR_VAR 0 11
42162: PUSH
42163: LD_VAR 0 11
42167: PPUSH
42168: LD_INT 1
42170: PPUSH
42171: CALL_OW 3
42175: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_VAR 0 3
42185: PPUSH
42186: CALL 42386 0 2
42190: PUSH
42191: LD_VAR 0 11
42195: PUSH
42196: EMPTY
42197: EQUAL
42198: OR
42199: IFFALSE 42144
// if not control in _control then
42201: LD_VAR 0 4
42205: PUSH
42206: LD_VAR 0 12
42210: IN
42211: NOT
42212: IFFALSE 42238
// control := _control [ rand ( 1 , _control ) ] ;
42214: LD_ADDR_VAR 0 4
42218: PUSH
42219: LD_VAR 0 12
42223: PUSH
42224: LD_INT 1
42226: PPUSH
42227: LD_VAR 0 12
42231: PPUSH
42232: CALL_OW 12
42236: ARRAY
42237: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42238: LD_VAR 0 2
42242: PPUSH
42243: LD_VAR 0 5
42247: PPUSH
42248: CALL 42606 0 2
42252: NOT
42253: IFFALSE 42312
// repeat weapon := _weapon [ 1 ] ;
42255: LD_ADDR_VAR 0 5
42259: PUSH
42260: LD_VAR 0 10
42264: PUSH
42265: LD_INT 1
42267: ARRAY
42268: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42269: LD_ADDR_VAR 0 10
42273: PUSH
42274: LD_VAR 0 10
42278: PPUSH
42279: LD_INT 1
42281: PPUSH
42282: CALL_OW 3
42286: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42287: LD_VAR 0 2
42291: PPUSH
42292: LD_VAR 0 5
42296: PPUSH
42297: CALL 42606 0 2
42301: PUSH
42302: LD_VAR 0 10
42306: PUSH
42307: EMPTY
42308: EQUAL
42309: OR
42310: IFFALSE 42255
// result := [ ] ;
42312: LD_ADDR_VAR 0 6
42316: PUSH
42317: EMPTY
42318: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42319: LD_VAR 0 1
42323: PPUSH
42324: LD_VAR 0 2
42328: PPUSH
42329: LD_VAR 0 3
42333: PPUSH
42334: LD_VAR 0 4
42338: PPUSH
42339: LD_VAR 0 5
42343: PPUSH
42344: CALL_OW 448
42348: IFFALSE 42381
// result := [ chassis , engine , control , weapon ] ;
42350: LD_ADDR_VAR 0 6
42354: PUSH
42355: LD_VAR 0 2
42359: PUSH
42360: LD_VAR 0 3
42364: PUSH
42365: LD_VAR 0 4
42369: PUSH
42370: LD_VAR 0 5
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
// end ;
42381: LD_VAR 0 6
42385: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42386: LD_INT 0
42388: PPUSH
// if not chassis or not engine then
42389: LD_VAR 0 1
42393: NOT
42394: PUSH
42395: LD_VAR 0 2
42399: NOT
42400: OR
42401: IFFALSE 42405
// exit ;
42403: GO 42601
// case engine of engine_solar :
42405: LD_VAR 0 2
42409: PUSH
42410: LD_INT 2
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42456
42418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42419: LD_ADDR_VAR 0 3
42423: PUSH
42424: LD_INT 11
42426: PUSH
42427: LD_INT 12
42429: PUSH
42430: LD_INT 13
42432: PUSH
42433: LD_INT 14
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
42454: GO 42585
42456: LD_INT 1
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42464
42462: GO 42526
42464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42465: LD_ADDR_VAR 0 3
42469: PUSH
42470: LD_INT 11
42472: PUSH
42473: LD_INT 12
42475: PUSH
42476: LD_INT 13
42478: PUSH
42479: LD_INT 14
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: LD_INT 21
42499: PUSH
42500: LD_INT 23
42502: PUSH
42503: LD_INT 22
42505: PUSH
42506: LD_INT 24
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 42585
42526: LD_INT 3
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42584
42534: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 13
42542: PUSH
42543: LD_INT 14
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 4
42554: PUSH
42555: LD_INT 5
42557: PUSH
42558: LD_INT 21
42560: PUSH
42561: LD_INT 22
42563: PUSH
42564: LD_INT 23
42566: PUSH
42567: LD_INT 24
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
42582: GO 42585
42584: POP
// result := ( chassis in result ) ;
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_VAR 0 1
42594: PUSH
42595: LD_VAR 0 3
42599: IN
42600: ST_TO_ADDR
// end ;
42601: LD_VAR 0 3
42605: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42606: LD_INT 0
42608: PPUSH
// if not chassis or not weapon then
42609: LD_VAR 0 1
42613: NOT
42614: PUSH
42615: LD_VAR 0 2
42619: NOT
42620: OR
42621: IFFALSE 42625
// exit ;
42623: GO 43687
// case weapon of us_machine_gun :
42625: LD_VAR 0 2
42629: PUSH
42630: LD_INT 2
42632: DOUBLE
42633: EQUAL
42634: IFTRUE 42638
42636: GO 42668
42638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
42666: GO 43671
42668: LD_INT 3
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42706
42676: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 4
42693: PUSH
42694: LD_INT 5
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
42704: GO 43671
42706: LD_INT 11
42708: DOUBLE
42709: EQUAL
42710: IFTRUE 42714
42712: GO 42744
42714: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: LD_INT 5
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
42742: GO 43671
42744: LD_INT 4
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42752
42750: GO 42778
42752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 4
42766: PUSH
42767: LD_INT 5
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
42776: GO 43671
42778: LD_INT 5
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42812
42786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: LD_INT 4
42800: PUSH
42801: LD_INT 5
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 43671
42812: LD_INT 9
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42846
42820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 4
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
42844: GO 43671
42846: LD_INT 7
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42880
42854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: LD_INT 4
42868: PUSH
42869: LD_INT 5
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
42878: GO 43671
42880: LD_INT 12
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42888
42886: GO 42914
42888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 4
42902: PUSH
42903: LD_INT 5
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
42912: GO 43671
42914: LD_INT 13
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42948
42922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 4
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
42946: GO 43671
42948: LD_INT 14
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 42974
42956: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 4
42964: PUSH
42965: LD_INT 5
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: ST_TO_ADDR
42972: GO 43671
42974: LD_INT 6
42976: DOUBLE
42977: EQUAL
42978: IFTRUE 42982
42980: GO 43000
42982: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 4
42990: PUSH
42991: LD_INT 5
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: ST_TO_ADDR
42998: GO 43671
43000: LD_INT 10
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43008
43006: GO 43026
43008: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_INT 4
43016: PUSH
43017: LD_INT 5
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: ST_TO_ADDR
43024: GO 43671
43026: LD_INT 22
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 43060
43034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_INT 11
43042: PUSH
43043: LD_INT 12
43045: PUSH
43046: LD_INT 13
43048: PUSH
43049: LD_INT 14
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
43058: GO 43671
43060: LD_INT 23
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43094
43068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43069: LD_ADDR_VAR 0 3
43073: PUSH
43074: LD_INT 11
43076: PUSH
43077: LD_INT 12
43079: PUSH
43080: LD_INT 13
43082: PUSH
43083: LD_INT 14
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
43092: GO 43671
43094: LD_INT 24
43096: DOUBLE
43097: EQUAL
43098: IFTRUE 43102
43100: GO 43128
43102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43103: LD_ADDR_VAR 0 3
43107: PUSH
43108: LD_INT 11
43110: PUSH
43111: LD_INT 12
43113: PUSH
43114: LD_INT 13
43116: PUSH
43117: LD_INT 14
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43671
43128: LD_INT 30
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43162
43136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 11
43144: PUSH
43145: LD_INT 12
43147: PUSH
43148: LD_INT 13
43150: PUSH
43151: LD_INT 14
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 43671
43162: LD_INT 25
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43188
43170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 13
43178: PUSH
43179: LD_INT 14
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: ST_TO_ADDR
43186: GO 43671
43188: LD_INT 27
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43214
43196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: LD_INT 13
43204: PUSH
43205: LD_INT 14
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: ST_TO_ADDR
43212: GO 43671
43214: LD_EXP 54
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43250
43224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_INT 11
43232: PUSH
43233: LD_INT 12
43235: PUSH
43236: LD_INT 13
43238: PUSH
43239: LD_INT 14
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
43248: GO 43671
43250: LD_INT 28
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43276
43258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 13
43266: PUSH
43267: LD_INT 14
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: ST_TO_ADDR
43274: GO 43671
43276: LD_INT 29
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43302
43284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_INT 13
43292: PUSH
43293: LD_INT 14
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: ST_TO_ADDR
43300: GO 43671
43302: LD_INT 31
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43328
43310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 13
43318: PUSH
43319: LD_INT 14
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: ST_TO_ADDR
43326: GO 43671
43328: LD_INT 26
43330: DOUBLE
43331: EQUAL
43332: IFTRUE 43336
43334: GO 43354
43336: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_INT 13
43344: PUSH
43345: LD_INT 14
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: ST_TO_ADDR
43352: GO 43671
43354: LD_INT 42
43356: DOUBLE
43357: EQUAL
43358: IFTRUE 43362
43360: GO 43388
43362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 21
43370: PUSH
43371: LD_INT 22
43373: PUSH
43374: LD_INT 23
43376: PUSH
43377: LD_INT 24
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
43386: GO 43671
43388: LD_INT 43
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43396
43394: GO 43422
43396: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_INT 21
43404: PUSH
43405: LD_INT 22
43407: PUSH
43408: LD_INT 23
43410: PUSH
43411: LD_INT 24
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
43420: GO 43671
43422: LD_INT 44
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43430
43428: GO 43456
43430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43431: LD_ADDR_VAR 0 3
43435: PUSH
43436: LD_INT 21
43438: PUSH
43439: LD_INT 22
43441: PUSH
43442: LD_INT 23
43444: PUSH
43445: LD_INT 24
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
43454: GO 43671
43456: LD_INT 45
43458: DOUBLE
43459: EQUAL
43460: IFTRUE 43464
43462: GO 43490
43464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_INT 21
43472: PUSH
43473: LD_INT 22
43475: PUSH
43476: LD_INT 23
43478: PUSH
43479: LD_INT 24
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
43488: GO 43671
43490: LD_INT 49
43492: DOUBLE
43493: EQUAL
43494: IFTRUE 43498
43496: GO 43524
43498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 21
43506: PUSH
43507: LD_INT 22
43509: PUSH
43510: LD_INT 23
43512: PUSH
43513: LD_INT 24
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
43522: GO 43671
43524: LD_INT 51
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43558
43532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 21
43540: PUSH
43541: LD_INT 22
43543: PUSH
43544: LD_INT 23
43546: PUSH
43547: LD_INT 24
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
43556: GO 43671
43558: LD_INT 52
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43592
43566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_INT 21
43574: PUSH
43575: LD_INT 22
43577: PUSH
43578: LD_INT 23
43580: PUSH
43581: LD_INT 24
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
43590: GO 43671
43592: LD_INT 53
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43618
43600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 23
43608: PUSH
43609: LD_INT 24
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 43671
43618: LD_INT 46
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43644
43626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 23
43634: PUSH
43635: LD_INT 24
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 43671
43644: LD_INT 47
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43670
43652: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_INT 23
43660: PUSH
43661: LD_INT 24
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: ST_TO_ADDR
43668: GO 43671
43670: POP
// result := ( chassis in result ) ;
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_VAR 0 1
43680: PUSH
43681: LD_VAR 0 3
43685: IN
43686: ST_TO_ADDR
// end ;
43687: LD_VAR 0 3
43691: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43692: LD_INT 0
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
43700: PPUSH
// result := array ;
43701: LD_ADDR_VAR 0 5
43705: PUSH
43706: LD_VAR 0 1
43710: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43711: LD_VAR 0 1
43715: NOT
43716: PUSH
43717: LD_VAR 0 2
43721: NOT
43722: OR
43723: PUSH
43724: LD_VAR 0 3
43728: NOT
43729: OR
43730: PUSH
43731: LD_VAR 0 2
43735: PUSH
43736: LD_VAR 0 1
43740: GREATER
43741: OR
43742: PUSH
43743: LD_VAR 0 3
43747: PUSH
43748: LD_VAR 0 1
43752: GREATER
43753: OR
43754: IFFALSE 43758
// exit ;
43756: GO 44054
// if direction then
43758: LD_VAR 0 4
43762: IFFALSE 43826
// begin d := 1 ;
43764: LD_ADDR_VAR 0 9
43768: PUSH
43769: LD_INT 1
43771: ST_TO_ADDR
// if i_from > i_to then
43772: LD_VAR 0 2
43776: PUSH
43777: LD_VAR 0 3
43781: GREATER
43782: IFFALSE 43808
// length := ( array - i_from ) + i_to else
43784: LD_ADDR_VAR 0 11
43788: PUSH
43789: LD_VAR 0 1
43793: PUSH
43794: LD_VAR 0 2
43798: MINUS
43799: PUSH
43800: LD_VAR 0 3
43804: PLUS
43805: ST_TO_ADDR
43806: GO 43824
// length := i_to - i_from ;
43808: LD_ADDR_VAR 0 11
43812: PUSH
43813: LD_VAR 0 3
43817: PUSH
43818: LD_VAR 0 2
43822: MINUS
43823: ST_TO_ADDR
// end else
43824: GO 43887
// begin d := - 1 ;
43826: LD_ADDR_VAR 0 9
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: ST_TO_ADDR
// if i_from > i_to then
43835: LD_VAR 0 2
43839: PUSH
43840: LD_VAR 0 3
43844: GREATER
43845: IFFALSE 43865
// length := i_from - i_to else
43847: LD_ADDR_VAR 0 11
43851: PUSH
43852: LD_VAR 0 2
43856: PUSH
43857: LD_VAR 0 3
43861: MINUS
43862: ST_TO_ADDR
43863: GO 43887
// length := ( array - i_to ) + i_from ;
43865: LD_ADDR_VAR 0 11
43869: PUSH
43870: LD_VAR 0 1
43874: PUSH
43875: LD_VAR 0 3
43879: MINUS
43880: PUSH
43881: LD_VAR 0 2
43885: PLUS
43886: ST_TO_ADDR
// end ; if not length then
43887: LD_VAR 0 11
43891: NOT
43892: IFFALSE 43896
// exit ;
43894: GO 44054
// tmp := array ;
43896: LD_ADDR_VAR 0 10
43900: PUSH
43901: LD_VAR 0 1
43905: ST_TO_ADDR
// for i = 1 to length do
43906: LD_ADDR_VAR 0 6
43910: PUSH
43911: DOUBLE
43912: LD_INT 1
43914: DEC
43915: ST_TO_ADDR
43916: LD_VAR 0 11
43920: PUSH
43921: FOR_TO
43922: IFFALSE 44042
// begin for j = 1 to array do
43924: LD_ADDR_VAR 0 7
43928: PUSH
43929: DOUBLE
43930: LD_INT 1
43932: DEC
43933: ST_TO_ADDR
43934: LD_VAR 0 1
43938: PUSH
43939: FOR_TO
43940: IFFALSE 44028
// begin k := j + d ;
43942: LD_ADDR_VAR 0 8
43946: PUSH
43947: LD_VAR 0 7
43951: PUSH
43952: LD_VAR 0 9
43956: PLUS
43957: ST_TO_ADDR
// if k > array then
43958: LD_VAR 0 8
43962: PUSH
43963: LD_VAR 0 1
43967: GREATER
43968: IFFALSE 43978
// k := 1 ;
43970: LD_ADDR_VAR 0 8
43974: PUSH
43975: LD_INT 1
43977: ST_TO_ADDR
// if not k then
43978: LD_VAR 0 8
43982: NOT
43983: IFFALSE 43995
// k := array ;
43985: LD_ADDR_VAR 0 8
43989: PUSH
43990: LD_VAR 0 1
43994: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43995: LD_ADDR_VAR 0 10
43999: PUSH
44000: LD_VAR 0 10
44004: PPUSH
44005: LD_VAR 0 8
44009: PPUSH
44010: LD_VAR 0 1
44014: PUSH
44015: LD_VAR 0 7
44019: ARRAY
44020: PPUSH
44021: CALL_OW 1
44025: ST_TO_ADDR
// end ;
44026: GO 43939
44028: POP
44029: POP
// array := tmp ;
44030: LD_ADDR_VAR 0 1
44034: PUSH
44035: LD_VAR 0 10
44039: ST_TO_ADDR
// end ;
44040: GO 43921
44042: POP
44043: POP
// result := array ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_VAR 0 1
44053: ST_TO_ADDR
// end ;
44054: LD_VAR 0 5
44058: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44059: LD_INT 0
44061: PPUSH
44062: PPUSH
// result := 0 ;
44063: LD_ADDR_VAR 0 3
44067: PUSH
44068: LD_INT 0
44070: ST_TO_ADDR
// if not array or not value in array then
44071: LD_VAR 0 1
44075: NOT
44076: PUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_VAR 0 1
44086: IN
44087: NOT
44088: OR
44089: IFFALSE 44093
// exit ;
44091: GO 44147
// for i = 1 to array do
44093: LD_ADDR_VAR 0 4
44097: PUSH
44098: DOUBLE
44099: LD_INT 1
44101: DEC
44102: ST_TO_ADDR
44103: LD_VAR 0 1
44107: PUSH
44108: FOR_TO
44109: IFFALSE 44145
// if value = array [ i ] then
44111: LD_VAR 0 2
44115: PUSH
44116: LD_VAR 0 1
44120: PUSH
44121: LD_VAR 0 4
44125: ARRAY
44126: EQUAL
44127: IFFALSE 44143
// begin result := i ;
44129: LD_ADDR_VAR 0 3
44133: PUSH
44134: LD_VAR 0 4
44138: ST_TO_ADDR
// exit ;
44139: POP
44140: POP
44141: GO 44147
// end ;
44143: GO 44108
44145: POP
44146: POP
// end ;
44147: LD_VAR 0 3
44151: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44152: LD_INT 0
44154: PPUSH
// vc_chassis := chassis ;
44155: LD_ADDR_OWVAR 37
44159: PUSH
44160: LD_VAR 0 1
44164: ST_TO_ADDR
// vc_engine := engine ;
44165: LD_ADDR_OWVAR 39
44169: PUSH
44170: LD_VAR 0 2
44174: ST_TO_ADDR
// vc_control := control ;
44175: LD_ADDR_OWVAR 38
44179: PUSH
44180: LD_VAR 0 3
44184: ST_TO_ADDR
// vc_weapon := weapon ;
44185: LD_ADDR_OWVAR 40
44189: PUSH
44190: LD_VAR 0 4
44194: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44195: LD_ADDR_OWVAR 41
44199: PUSH
44200: LD_VAR 0 5
44204: ST_TO_ADDR
// end ;
44205: LD_VAR 0 6
44209: RET
// export function WantPlant ( unit ) ; var task ; begin
44210: LD_INT 0
44212: PPUSH
44213: PPUSH
// result := false ;
44214: LD_ADDR_VAR 0 2
44218: PUSH
44219: LD_INT 0
44221: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 437
44236: ST_TO_ADDR
// if task then
44237: LD_VAR 0 3
44241: IFFALSE 44269
// if task [ 1 ] [ 1 ] = p then
44243: LD_VAR 0 3
44247: PUSH
44248: LD_INT 1
44250: ARRAY
44251: PUSH
44252: LD_INT 1
44254: ARRAY
44255: PUSH
44256: LD_STRING p
44258: EQUAL
44259: IFFALSE 44269
// result := true ;
44261: LD_ADDR_VAR 0 2
44265: PUSH
44266: LD_INT 1
44268: ST_TO_ADDR
// end ;
44269: LD_VAR 0 2
44273: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44274: LD_INT 0
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
// if pos < 1 then
44280: LD_VAR 0 2
44284: PUSH
44285: LD_INT 1
44287: LESS
44288: IFFALSE 44292
// exit ;
44290: GO 44595
// if pos = 1 then
44292: LD_VAR 0 2
44296: PUSH
44297: LD_INT 1
44299: EQUAL
44300: IFFALSE 44333
// result := Replace ( arr , pos [ 1 ] , value ) else
44302: LD_ADDR_VAR 0 4
44306: PUSH
44307: LD_VAR 0 1
44311: PPUSH
44312: LD_VAR 0 2
44316: PUSH
44317: LD_INT 1
44319: ARRAY
44320: PPUSH
44321: LD_VAR 0 3
44325: PPUSH
44326: CALL_OW 1
44330: ST_TO_ADDR
44331: GO 44595
// begin tmp := arr ;
44333: LD_ADDR_VAR 0 6
44337: PUSH
44338: LD_VAR 0 1
44342: ST_TO_ADDR
// s_arr := [ tmp ] ;
44343: LD_ADDR_VAR 0 7
44347: PUSH
44348: LD_VAR 0 6
44352: PUSH
44353: EMPTY
44354: LIST
44355: ST_TO_ADDR
// for i = 1 to pos - 1 do
44356: LD_ADDR_VAR 0 5
44360: PUSH
44361: DOUBLE
44362: LD_INT 1
44364: DEC
44365: ST_TO_ADDR
44366: LD_VAR 0 2
44370: PUSH
44371: LD_INT 1
44373: MINUS
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44421
// begin tmp := tmp [ pos [ i ] ] ;
44378: LD_ADDR_VAR 0 6
44382: PUSH
44383: LD_VAR 0 6
44387: PUSH
44388: LD_VAR 0 2
44392: PUSH
44393: LD_VAR 0 5
44397: ARRAY
44398: ARRAY
44399: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44400: LD_ADDR_VAR 0 7
44404: PUSH
44405: LD_VAR 0 7
44409: PUSH
44410: LD_VAR 0 6
44414: PUSH
44415: EMPTY
44416: LIST
44417: ADD
44418: ST_TO_ADDR
// end ;
44419: GO 44375
44421: POP
44422: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44423: LD_ADDR_VAR 0 6
44427: PUSH
44428: LD_VAR 0 6
44432: PPUSH
44433: LD_VAR 0 2
44437: PUSH
44438: LD_VAR 0 2
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 3
44448: PPUSH
44449: CALL_OW 1
44453: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44454: LD_ADDR_VAR 0 7
44458: PUSH
44459: LD_VAR 0 7
44463: PPUSH
44464: LD_VAR 0 7
44468: PPUSH
44469: LD_VAR 0 6
44473: PPUSH
44474: CALL_OW 1
44478: ST_TO_ADDR
// for i = s_arr downto 2 do
44479: LD_ADDR_VAR 0 5
44483: PUSH
44484: DOUBLE
44485: LD_VAR 0 7
44489: INC
44490: ST_TO_ADDR
44491: LD_INT 2
44493: PUSH
44494: FOR_DOWNTO
44495: IFFALSE 44579
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44497: LD_ADDR_VAR 0 6
44501: PUSH
44502: LD_VAR 0 7
44506: PUSH
44507: LD_VAR 0 5
44511: PUSH
44512: LD_INT 1
44514: MINUS
44515: ARRAY
44516: PPUSH
44517: LD_VAR 0 2
44521: PUSH
44522: LD_VAR 0 5
44526: PUSH
44527: LD_INT 1
44529: MINUS
44530: ARRAY
44531: PPUSH
44532: LD_VAR 0 7
44536: PUSH
44537: LD_VAR 0 5
44541: ARRAY
44542: PPUSH
44543: CALL_OW 1
44547: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44548: LD_ADDR_VAR 0 7
44552: PUSH
44553: LD_VAR 0 7
44557: PPUSH
44558: LD_VAR 0 5
44562: PUSH
44563: LD_INT 1
44565: MINUS
44566: PPUSH
44567: LD_VAR 0 6
44571: PPUSH
44572: CALL_OW 1
44576: ST_TO_ADDR
// end ;
44577: GO 44494
44579: POP
44580: POP
// result := s_arr [ 1 ] ;
44581: LD_ADDR_VAR 0 4
44585: PUSH
44586: LD_VAR 0 7
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: ST_TO_ADDR
// end ; end ;
44595: LD_VAR 0 4
44599: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44600: LD_INT 0
44602: PPUSH
44603: PPUSH
// if not list then
44604: LD_VAR 0 1
44608: NOT
44609: IFFALSE 44613
// exit ;
44611: GO 44704
// i := list [ pos1 ] ;
44613: LD_ADDR_VAR 0 5
44617: PUSH
44618: LD_VAR 0 1
44622: PUSH
44623: LD_VAR 0 2
44627: ARRAY
44628: ST_TO_ADDR
// if not i then
44629: LD_VAR 0 5
44633: NOT
44634: IFFALSE 44638
// exit ;
44636: GO 44704
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44638: LD_ADDR_VAR 0 1
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: LD_VAR 0 2
44652: PPUSH
44653: LD_VAR 0 1
44657: PUSH
44658: LD_VAR 0 3
44662: ARRAY
44663: PPUSH
44664: CALL_OW 1
44668: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44669: LD_ADDR_VAR 0 1
44673: PUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: LD_VAR 0 3
44683: PPUSH
44684: LD_VAR 0 5
44688: PPUSH
44689: CALL_OW 1
44693: ST_TO_ADDR
// result := list ;
44694: LD_ADDR_VAR 0 4
44698: PUSH
44699: LD_VAR 0 1
44703: ST_TO_ADDR
// end ;
44704: LD_VAR 0 4
44708: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44709: LD_INT 0
44711: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44712: LD_ADDR_VAR 0 5
44716: PUSH
44717: LD_VAR 0 1
44721: PPUSH
44722: CALL_OW 250
44726: PPUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: CALL_OW 251
44736: PPUSH
44737: LD_VAR 0 2
44741: PPUSH
44742: LD_VAR 0 3
44746: PPUSH
44747: LD_VAR 0 4
44751: PPUSH
44752: CALL 44762 0 5
44756: ST_TO_ADDR
// end ;
44757: LD_VAR 0 5
44761: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44762: LD_INT 0
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// if not list then
44768: LD_VAR 0 3
44772: NOT
44773: IFFALSE 44777
// exit ;
44775: GO 45165
// result := [ ] ;
44777: LD_ADDR_VAR 0 6
44781: PUSH
44782: EMPTY
44783: ST_TO_ADDR
// for i in list do
44784: LD_ADDR_VAR 0 7
44788: PUSH
44789: LD_VAR 0 3
44793: PUSH
44794: FOR_IN
44795: IFFALSE 44997
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44797: LD_ADDR_VAR 0 9
44801: PUSH
44802: LD_VAR 0 7
44806: PPUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: CALL_OW 297
44821: ST_TO_ADDR
// if not result then
44822: LD_VAR 0 6
44826: NOT
44827: IFFALSE 44853
// result := [ [ i , tmp ] ] else
44829: LD_ADDR_VAR 0 6
44833: PUSH
44834: LD_VAR 0 7
44838: PUSH
44839: LD_VAR 0 9
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: ST_TO_ADDR
44851: GO 44995
// begin if result [ result ] [ 2 ] < tmp then
44853: LD_VAR 0 6
44857: PUSH
44858: LD_VAR 0 6
44862: ARRAY
44863: PUSH
44864: LD_INT 2
44866: ARRAY
44867: PUSH
44868: LD_VAR 0 9
44872: LESS
44873: IFFALSE 44915
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44875: LD_ADDR_VAR 0 6
44879: PUSH
44880: LD_VAR 0 6
44884: PPUSH
44885: LD_VAR 0 6
44889: PUSH
44890: LD_INT 1
44892: PLUS
44893: PPUSH
44894: LD_VAR 0 7
44898: PUSH
44899: LD_VAR 0 9
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PPUSH
44908: CALL_OW 2
44912: ST_TO_ADDR
44913: GO 44995
// for j = 1 to result do
44915: LD_ADDR_VAR 0 8
44919: PUSH
44920: DOUBLE
44921: LD_INT 1
44923: DEC
44924: ST_TO_ADDR
44925: LD_VAR 0 6
44929: PUSH
44930: FOR_TO
44931: IFFALSE 44993
// begin if tmp < result [ j ] [ 2 ] then
44933: LD_VAR 0 9
44937: PUSH
44938: LD_VAR 0 6
44942: PUSH
44943: LD_VAR 0 8
44947: ARRAY
44948: PUSH
44949: LD_INT 2
44951: ARRAY
44952: LESS
44953: IFFALSE 44991
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44955: LD_ADDR_VAR 0 6
44959: PUSH
44960: LD_VAR 0 6
44964: PPUSH
44965: LD_VAR 0 8
44969: PPUSH
44970: LD_VAR 0 7
44974: PUSH
44975: LD_VAR 0 9
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PPUSH
44984: CALL_OW 2
44988: ST_TO_ADDR
// break ;
44989: GO 44993
// end ; end ;
44991: GO 44930
44993: POP
44994: POP
// end ; end ;
44995: GO 44794
44997: POP
44998: POP
// if result and not asc then
44999: LD_VAR 0 6
45003: PUSH
45004: LD_VAR 0 4
45008: NOT
45009: AND
45010: IFFALSE 45085
// begin tmp := result ;
45012: LD_ADDR_VAR 0 9
45016: PUSH
45017: LD_VAR 0 6
45021: ST_TO_ADDR
// for i = tmp downto 1 do
45022: LD_ADDR_VAR 0 7
45026: PUSH
45027: DOUBLE
45028: LD_VAR 0 9
45032: INC
45033: ST_TO_ADDR
45034: LD_INT 1
45036: PUSH
45037: FOR_DOWNTO
45038: IFFALSE 45083
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45040: LD_ADDR_VAR 0 6
45044: PUSH
45045: LD_VAR 0 6
45049: PPUSH
45050: LD_VAR 0 9
45054: PUSH
45055: LD_VAR 0 7
45059: MINUS
45060: PUSH
45061: LD_INT 1
45063: PLUS
45064: PPUSH
45065: LD_VAR 0 9
45069: PUSH
45070: LD_VAR 0 7
45074: ARRAY
45075: PPUSH
45076: CALL_OW 1
45080: ST_TO_ADDR
45081: GO 45037
45083: POP
45084: POP
// end ; tmp := [ ] ;
45085: LD_ADDR_VAR 0 9
45089: PUSH
45090: EMPTY
45091: ST_TO_ADDR
// if mode then
45092: LD_VAR 0 5
45096: IFFALSE 45165
// begin for i = 1 to result do
45098: LD_ADDR_VAR 0 7
45102: PUSH
45103: DOUBLE
45104: LD_INT 1
45106: DEC
45107: ST_TO_ADDR
45108: LD_VAR 0 6
45112: PUSH
45113: FOR_TO
45114: IFFALSE 45153
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45116: LD_ADDR_VAR 0 9
45120: PUSH
45121: LD_VAR 0 9
45125: PPUSH
45126: LD_VAR 0 7
45130: PPUSH
45131: LD_VAR 0 6
45135: PUSH
45136: LD_VAR 0 7
45140: ARRAY
45141: PUSH
45142: LD_INT 1
45144: ARRAY
45145: PPUSH
45146: CALL_OW 1
45150: ST_TO_ADDR
45151: GO 45113
45153: POP
45154: POP
// result := tmp ;
45155: LD_ADDR_VAR 0 6
45159: PUSH
45160: LD_VAR 0 9
45164: ST_TO_ADDR
// end ; end ;
45165: LD_VAR 0 6
45169: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45170: LD_INT 0
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45178: LD_ADDR_VAR 0 5
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// if not x or not y then
45200: LD_VAR 0 2
45204: NOT
45205: PUSH
45206: LD_VAR 0 3
45210: NOT
45211: OR
45212: IFFALSE 45216
// exit ;
45214: GO 46868
// if not range then
45216: LD_VAR 0 4
45220: NOT
45221: IFFALSE 45231
// range := 10 ;
45223: LD_ADDR_VAR 0 4
45227: PUSH
45228: LD_INT 10
45230: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45231: LD_ADDR_VAR 0 8
45235: PUSH
45236: LD_INT 81
45238: PUSH
45239: LD_VAR 0 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 92
45250: PUSH
45251: LD_VAR 0 2
45255: PUSH
45256: LD_VAR 0 3
45260: PUSH
45261: LD_VAR 0 4
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: LD_INT 21
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: PPUSH
45294: CALL_OW 69
45298: ST_TO_ADDR
// if not tmp then
45299: LD_VAR 0 8
45303: NOT
45304: IFFALSE 45308
// exit ;
45306: GO 46868
// for i in tmp do
45308: LD_ADDR_VAR 0 6
45312: PUSH
45313: LD_VAR 0 8
45317: PUSH
45318: FOR_IN
45319: IFFALSE 46843
// begin points := [ 0 , 0 , 0 ] ;
45321: LD_ADDR_VAR 0 9
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: ST_TO_ADDR
// bpoints := 1 ;
45340: LD_ADDR_VAR 0 10
45344: PUSH
45345: LD_INT 1
45347: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45348: LD_VAR 0 6
45352: PPUSH
45353: CALL_OW 247
45357: PUSH
45358: LD_INT 1
45360: DOUBLE
45361: EQUAL
45362: IFTRUE 45366
45364: GO 45944
45366: POP
// begin if GetClass ( i ) = 1 then
45367: LD_VAR 0 6
45371: PPUSH
45372: CALL_OW 257
45376: PUSH
45377: LD_INT 1
45379: EQUAL
45380: IFFALSE 45401
// points := [ 10 , 5 , 3 ] ;
45382: LD_ADDR_VAR 0 9
45386: PUSH
45387: LD_INT 10
45389: PUSH
45390: LD_INT 5
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45401: LD_VAR 0 6
45405: PPUSH
45406: CALL_OW 257
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: LD_INT 4
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: IN
45425: IFFALSE 45446
// points := [ 3 , 2 , 1 ] ;
45427: LD_ADDR_VAR 0 9
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45446: LD_VAR 0 6
45450: PPUSH
45451: CALL_OW 257
45455: PUSH
45456: LD_INT 5
45458: EQUAL
45459: IFFALSE 45480
// points := [ 130 , 5 , 2 ] ;
45461: LD_ADDR_VAR 0 9
45465: PUSH
45466: LD_INT 130
45468: PUSH
45469: LD_INT 5
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45480: LD_VAR 0 6
45484: PPUSH
45485: CALL_OW 257
45489: PUSH
45490: LD_INT 8
45492: EQUAL
45493: IFFALSE 45514
// points := [ 35 , 35 , 30 ] ;
45495: LD_ADDR_VAR 0 9
45499: PUSH
45500: LD_INT 35
45502: PUSH
45503: LD_INT 35
45505: PUSH
45506: LD_INT 30
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45514: LD_VAR 0 6
45518: PPUSH
45519: CALL_OW 257
45523: PUSH
45524: LD_INT 9
45526: EQUAL
45527: IFFALSE 45548
// points := [ 20 , 55 , 40 ] ;
45529: LD_ADDR_VAR 0 9
45533: PUSH
45534: LD_INT 20
45536: PUSH
45537: LD_INT 55
45539: PUSH
45540: LD_INT 40
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45548: LD_VAR 0 6
45552: PPUSH
45553: CALL_OW 257
45557: PUSH
45558: LD_INT 12
45560: PUSH
45561: LD_INT 16
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: IN
45568: IFFALSE 45589
// points := [ 5 , 3 , 2 ] ;
45570: LD_ADDR_VAR 0 9
45574: PUSH
45575: LD_INT 5
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45589: LD_VAR 0 6
45593: PPUSH
45594: CALL_OW 257
45598: PUSH
45599: LD_INT 17
45601: EQUAL
45602: IFFALSE 45623
// points := [ 100 , 50 , 75 ] ;
45604: LD_ADDR_VAR 0 9
45608: PUSH
45609: LD_INT 100
45611: PUSH
45612: LD_INT 50
45614: PUSH
45615: LD_INT 75
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45623: LD_VAR 0 6
45627: PPUSH
45628: CALL_OW 257
45632: PUSH
45633: LD_INT 15
45635: EQUAL
45636: IFFALSE 45657
// points := [ 10 , 5 , 3 ] ;
45638: LD_ADDR_VAR 0 9
45642: PUSH
45643: LD_INT 10
45645: PUSH
45646: LD_INT 5
45648: PUSH
45649: LD_INT 3
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45657: LD_VAR 0 6
45661: PPUSH
45662: CALL_OW 257
45666: PUSH
45667: LD_INT 14
45669: EQUAL
45670: IFFALSE 45691
// points := [ 10 , 0 , 0 ] ;
45672: LD_ADDR_VAR 0 9
45676: PUSH
45677: LD_INT 10
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45691: LD_VAR 0 6
45695: PPUSH
45696: CALL_OW 257
45700: PUSH
45701: LD_INT 11
45703: EQUAL
45704: IFFALSE 45725
// points := [ 30 , 10 , 5 ] ;
45706: LD_ADDR_VAR 0 9
45710: PUSH
45711: LD_INT 30
45713: PUSH
45714: LD_INT 10
45716: PUSH
45717: LD_INT 5
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45725: LD_VAR 0 1
45729: PPUSH
45730: LD_INT 5
45732: PPUSH
45733: CALL_OW 321
45737: PUSH
45738: LD_INT 2
45740: EQUAL
45741: IFFALSE 45758
// bpoints := bpoints * 1.8 ;
45743: LD_ADDR_VAR 0 10
45747: PUSH
45748: LD_VAR 0 10
45752: PUSH
45753: LD_REAL  1.80000000000000E+0000
45756: MUL
45757: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45758: LD_VAR 0 6
45762: PPUSH
45763: CALL_OW 257
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 4
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: IN
45786: PUSH
45787: LD_VAR 0 1
45791: PPUSH
45792: LD_INT 51
45794: PPUSH
45795: CALL_OW 321
45799: PUSH
45800: LD_INT 2
45802: EQUAL
45803: AND
45804: IFFALSE 45821
// bpoints := bpoints * 1.2 ;
45806: LD_ADDR_VAR 0 10
45810: PUSH
45811: LD_VAR 0 10
45815: PUSH
45816: LD_REAL  1.20000000000000E+0000
45819: MUL
45820: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45821: LD_VAR 0 6
45825: PPUSH
45826: CALL_OW 257
45830: PUSH
45831: LD_INT 5
45833: PUSH
45834: LD_INT 7
45836: PUSH
45837: LD_INT 9
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: IN
45845: PUSH
45846: LD_VAR 0 1
45850: PPUSH
45851: LD_INT 52
45853: PPUSH
45854: CALL_OW 321
45858: PUSH
45859: LD_INT 2
45861: EQUAL
45862: AND
45863: IFFALSE 45880
// bpoints := bpoints * 1.5 ;
45865: LD_ADDR_VAR 0 10
45869: PUSH
45870: LD_VAR 0 10
45874: PUSH
45875: LD_REAL  1.50000000000000E+0000
45878: MUL
45879: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45880: LD_VAR 0 1
45884: PPUSH
45885: LD_INT 66
45887: PPUSH
45888: CALL_OW 321
45892: PUSH
45893: LD_INT 2
45895: EQUAL
45896: IFFALSE 45913
// bpoints := bpoints * 1.1 ;
45898: LD_ADDR_VAR 0 10
45902: PUSH
45903: LD_VAR 0 10
45907: PUSH
45908: LD_REAL  1.10000000000000E+0000
45911: MUL
45912: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45913: LD_ADDR_VAR 0 10
45917: PUSH
45918: LD_VAR 0 10
45922: PUSH
45923: LD_VAR 0 6
45927: PPUSH
45928: LD_INT 1
45930: PPUSH
45931: CALL_OW 259
45935: PUSH
45936: LD_REAL  1.15000000000000E+0000
45939: MUL
45940: MUL
45941: ST_TO_ADDR
// end ; unit_vehicle :
45942: GO 46772
45944: LD_INT 2
45946: DOUBLE
45947: EQUAL
45948: IFTRUE 45952
45950: GO 46760
45952: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45953: LD_VAR 0 6
45957: PPUSH
45958: CALL_OW 264
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: LD_INT 42
45968: PUSH
45969: LD_INT 24
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: IN
45977: IFFALSE 45998
// points := [ 25 , 5 , 3 ] ;
45979: LD_ADDR_VAR 0 9
45983: PUSH
45984: LD_INT 25
45986: PUSH
45987: LD_INT 5
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45998: LD_VAR 0 6
46002: PPUSH
46003: CALL_OW 264
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: LD_INT 43
46013: PUSH
46014: LD_INT 25
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: IN
46022: IFFALSE 46043
// points := [ 40 , 15 , 5 ] ;
46024: LD_ADDR_VAR 0 9
46028: PUSH
46029: LD_INT 40
46031: PUSH
46032: LD_INT 15
46034: PUSH
46035: LD_INT 5
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46043: LD_VAR 0 6
46047: PPUSH
46048: CALL_OW 264
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 23
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: IN
46063: IFFALSE 46084
// points := [ 7 , 25 , 8 ] ;
46065: LD_ADDR_VAR 0 9
46069: PUSH
46070: LD_INT 7
46072: PUSH
46073: LD_INT 25
46075: PUSH
46076: LD_INT 8
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46084: LD_VAR 0 6
46088: PPUSH
46089: CALL_OW 264
46093: PUSH
46094: LD_INT 5
46096: PUSH
46097: LD_INT 27
46099: PUSH
46100: LD_INT 44
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: IN
46108: IFFALSE 46129
// points := [ 14 , 50 , 16 ] ;
46110: LD_ADDR_VAR 0 9
46114: PUSH
46115: LD_INT 14
46117: PUSH
46118: LD_INT 50
46120: PUSH
46121: LD_INT 16
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46129: LD_VAR 0 6
46133: PPUSH
46134: CALL_OW 264
46138: PUSH
46139: LD_INT 6
46141: PUSH
46142: LD_INT 46
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: IN
46149: IFFALSE 46170
// points := [ 32 , 120 , 70 ] ;
46151: LD_ADDR_VAR 0 9
46155: PUSH
46156: LD_INT 32
46158: PUSH
46159: LD_INT 120
46161: PUSH
46162: LD_INT 70
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46170: LD_VAR 0 6
46174: PPUSH
46175: CALL_OW 264
46179: PUSH
46180: LD_INT 7
46182: PUSH
46183: LD_INT 28
46185: PUSH
46186: LD_INT 45
46188: PUSH
46189: LD_EXP 54
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: IN
46200: IFFALSE 46221
// points := [ 35 , 20 , 45 ] ;
46202: LD_ADDR_VAR 0 9
46206: PUSH
46207: LD_INT 35
46209: PUSH
46210: LD_INT 20
46212: PUSH
46213: LD_INT 45
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46221: LD_VAR 0 6
46225: PPUSH
46226: CALL_OW 264
46230: PUSH
46231: LD_INT 47
46233: PUSH
46234: EMPTY
46235: LIST
46236: IN
46237: IFFALSE 46258
// points := [ 67 , 45 , 75 ] ;
46239: LD_ADDR_VAR 0 9
46243: PUSH
46244: LD_INT 67
46246: PUSH
46247: LD_INT 45
46249: PUSH
46250: LD_INT 75
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 264
46267: PUSH
46268: LD_INT 26
46270: PUSH
46271: EMPTY
46272: LIST
46273: IN
46274: IFFALSE 46295
// points := [ 120 , 30 , 80 ] ;
46276: LD_ADDR_VAR 0 9
46280: PUSH
46281: LD_INT 120
46283: PUSH
46284: LD_INT 30
46286: PUSH
46287: LD_INT 80
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46295: LD_VAR 0 6
46299: PPUSH
46300: CALL_OW 264
46304: PUSH
46305: LD_INT 22
46307: PUSH
46308: EMPTY
46309: LIST
46310: IN
46311: IFFALSE 46332
// points := [ 40 , 1 , 1 ] ;
46313: LD_ADDR_VAR 0 9
46317: PUSH
46318: LD_INT 40
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46332: LD_VAR 0 6
46336: PPUSH
46337: CALL_OW 264
46341: PUSH
46342: LD_INT 29
46344: PUSH
46345: EMPTY
46346: LIST
46347: IN
46348: IFFALSE 46369
// points := [ 70 , 200 , 400 ] ;
46350: LD_ADDR_VAR 0 9
46354: PUSH
46355: LD_INT 70
46357: PUSH
46358: LD_INT 200
46360: PUSH
46361: LD_INT 400
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46369: LD_VAR 0 6
46373: PPUSH
46374: CALL_OW 264
46378: PUSH
46379: LD_INT 14
46381: PUSH
46382: LD_INT 53
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: IN
46389: IFFALSE 46410
// points := [ 40 , 10 , 20 ] ;
46391: LD_ADDR_VAR 0 9
46395: PUSH
46396: LD_INT 40
46398: PUSH
46399: LD_INT 10
46401: PUSH
46402: LD_INT 20
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46410: LD_VAR 0 6
46414: PPUSH
46415: CALL_OW 264
46419: PUSH
46420: LD_INT 9
46422: PUSH
46423: EMPTY
46424: LIST
46425: IN
46426: IFFALSE 46447
// points := [ 5 , 70 , 20 ] ;
46428: LD_ADDR_VAR 0 9
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: LD_INT 70
46438: PUSH
46439: LD_INT 20
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46447: LD_VAR 0 6
46451: PPUSH
46452: CALL_OW 264
46456: PUSH
46457: LD_INT 10
46459: PUSH
46460: EMPTY
46461: LIST
46462: IN
46463: IFFALSE 46484
// points := [ 35 , 110 , 70 ] ;
46465: LD_ADDR_VAR 0 9
46469: PUSH
46470: LD_INT 35
46472: PUSH
46473: LD_INT 110
46475: PUSH
46476: LD_INT 70
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46484: LD_VAR 0 6
46488: PPUSH
46489: CALL_OW 265
46493: PUSH
46494: LD_INT 25
46496: EQUAL
46497: IFFALSE 46518
// points := [ 80 , 65 , 100 ] ;
46499: LD_ADDR_VAR 0 9
46503: PUSH
46504: LD_INT 80
46506: PUSH
46507: LD_INT 65
46509: PUSH
46510: LD_INT 100
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46518: LD_VAR 0 6
46522: PPUSH
46523: CALL_OW 263
46527: PUSH
46528: LD_INT 1
46530: EQUAL
46531: IFFALSE 46566
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46533: LD_ADDR_VAR 0 10
46537: PUSH
46538: LD_VAR 0 10
46542: PUSH
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 311
46552: PPUSH
46553: LD_INT 3
46555: PPUSH
46556: CALL_OW 259
46560: PUSH
46561: LD_INT 4
46563: MUL
46564: MUL
46565: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46566: LD_VAR 0 6
46570: PPUSH
46571: CALL_OW 263
46575: PUSH
46576: LD_INT 2
46578: EQUAL
46579: IFFALSE 46630
// begin j := IsControledBy ( i ) ;
46581: LD_ADDR_VAR 0 7
46585: PUSH
46586: LD_VAR 0 6
46590: PPUSH
46591: CALL_OW 312
46595: ST_TO_ADDR
// if j then
46596: LD_VAR 0 7
46600: IFFALSE 46630
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46602: LD_ADDR_VAR 0 10
46606: PUSH
46607: LD_VAR 0 10
46611: PUSH
46612: LD_VAR 0 7
46616: PPUSH
46617: LD_INT 3
46619: PPUSH
46620: CALL_OW 259
46624: PUSH
46625: LD_INT 3
46627: MUL
46628: MUL
46629: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46630: LD_VAR 0 6
46634: PPUSH
46635: CALL_OW 264
46639: PUSH
46640: LD_INT 5
46642: PUSH
46643: LD_INT 6
46645: PUSH
46646: LD_INT 46
46648: PUSH
46649: LD_INT 44
46651: PUSH
46652: LD_INT 47
46654: PUSH
46655: LD_INT 45
46657: PUSH
46658: LD_INT 28
46660: PUSH
46661: LD_INT 7
46663: PUSH
46664: LD_INT 27
46666: PUSH
46667: LD_INT 29
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: IN
46682: PUSH
46683: LD_VAR 0 1
46687: PPUSH
46688: LD_INT 52
46690: PPUSH
46691: CALL_OW 321
46695: PUSH
46696: LD_INT 2
46698: EQUAL
46699: AND
46700: IFFALSE 46717
// bpoints := bpoints * 1.2 ;
46702: LD_ADDR_VAR 0 10
46706: PUSH
46707: LD_VAR 0 10
46711: PUSH
46712: LD_REAL  1.20000000000000E+0000
46715: MUL
46716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46717: LD_VAR 0 6
46721: PPUSH
46722: CALL_OW 264
46726: PUSH
46727: LD_INT 6
46729: PUSH
46730: LD_INT 46
46732: PUSH
46733: LD_INT 47
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: IN
46741: IFFALSE 46758
// bpoints := bpoints * 1.2 ;
46743: LD_ADDR_VAR 0 10
46747: PUSH
46748: LD_VAR 0 10
46752: PUSH
46753: LD_REAL  1.20000000000000E+0000
46756: MUL
46757: ST_TO_ADDR
// end ; unit_building :
46758: GO 46772
46760: LD_INT 3
46762: DOUBLE
46763: EQUAL
46764: IFTRUE 46768
46766: GO 46771
46768: POP
// ; end ;
46769: GO 46772
46771: POP
// for j = 1 to 3 do
46772: LD_ADDR_VAR 0 7
46776: PUSH
46777: DOUBLE
46778: LD_INT 1
46780: DEC
46781: ST_TO_ADDR
46782: LD_INT 3
46784: PUSH
46785: FOR_TO
46786: IFFALSE 46839
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46788: LD_ADDR_VAR 0 5
46792: PUSH
46793: LD_VAR 0 5
46797: PPUSH
46798: LD_VAR 0 7
46802: PPUSH
46803: LD_VAR 0 5
46807: PUSH
46808: LD_VAR 0 7
46812: ARRAY
46813: PUSH
46814: LD_VAR 0 9
46818: PUSH
46819: LD_VAR 0 7
46823: ARRAY
46824: PUSH
46825: LD_VAR 0 10
46829: MUL
46830: PLUS
46831: PPUSH
46832: CALL_OW 1
46836: ST_TO_ADDR
46837: GO 46785
46839: POP
46840: POP
// end ;
46841: GO 45318
46843: POP
46844: POP
// result := Replace ( result , 4 , tmp ) ;
46845: LD_ADDR_VAR 0 5
46849: PUSH
46850: LD_VAR 0 5
46854: PPUSH
46855: LD_INT 4
46857: PPUSH
46858: LD_VAR 0 8
46862: PPUSH
46863: CALL_OW 1
46867: ST_TO_ADDR
// end ;
46868: LD_VAR 0 5
46872: RET
// export function DangerAtRange ( unit , range ) ; begin
46873: LD_INT 0
46875: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 255
46890: PPUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 250
46900: PPUSH
46901: LD_VAR 0 1
46905: PPUSH
46906: CALL_OW 251
46910: PPUSH
46911: LD_VAR 0 2
46915: PPUSH
46916: CALL 45170 0 4
46920: ST_TO_ADDR
// end ;
46921: LD_VAR 0 3
46925: RET
// export function DangerInArea ( side , area ) ; begin
46926: LD_INT 0
46928: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46929: LD_ADDR_VAR 0 3
46933: PUSH
46934: LD_VAR 0 2
46938: PPUSH
46939: LD_INT 81
46941: PUSH
46942: LD_VAR 0 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PPUSH
46951: CALL_OW 70
46955: ST_TO_ADDR
// end ;
46956: LD_VAR 0 3
46960: RET
// export function IsExtension ( b ) ; begin
46961: LD_INT 0
46963: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46964: LD_ADDR_VAR 0 2
46968: PUSH
46969: LD_VAR 0 1
46973: PUSH
46974: LD_INT 23
46976: PUSH
46977: LD_INT 20
46979: PUSH
46980: LD_INT 22
46982: PUSH
46983: LD_INT 17
46985: PUSH
46986: LD_INT 24
46988: PUSH
46989: LD_INT 21
46991: PUSH
46992: LD_INT 19
46994: PUSH
46995: LD_INT 16
46997: PUSH
46998: LD_INT 25
47000: PUSH
47001: LD_INT 18
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: IN
47016: ST_TO_ADDR
// end ;
47017: LD_VAR 0 2
47021: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47022: LD_INT 0
47024: PPUSH
47025: PPUSH
47026: PPUSH
// result := [ ] ;
47027: LD_ADDR_VAR 0 4
47031: PUSH
47032: EMPTY
47033: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47034: LD_ADDR_VAR 0 5
47038: PUSH
47039: LD_VAR 0 2
47043: PPUSH
47044: LD_INT 21
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PPUSH
47054: CALL_OW 70
47058: ST_TO_ADDR
// if not tmp then
47059: LD_VAR 0 5
47063: NOT
47064: IFFALSE 47068
// exit ;
47066: GO 47132
// if checkLink then
47068: LD_VAR 0 3
47072: IFFALSE 47122
// begin for i in tmp do
47074: LD_ADDR_VAR 0 6
47078: PUSH
47079: LD_VAR 0 5
47083: PUSH
47084: FOR_IN
47085: IFFALSE 47120
// if GetBase ( i ) <> base then
47087: LD_VAR 0 6
47091: PPUSH
47092: CALL_OW 274
47096: PUSH
47097: LD_VAR 0 1
47101: NONEQUAL
47102: IFFALSE 47118
// ComLinkToBase ( base , i ) ;
47104: LD_VAR 0 1
47108: PPUSH
47109: LD_VAR 0 6
47113: PPUSH
47114: CALL_OW 169
47118: GO 47084
47120: POP
47121: POP
// end ; result := tmp ;
47122: LD_ADDR_VAR 0 4
47126: PUSH
47127: LD_VAR 0 5
47131: ST_TO_ADDR
// end ;
47132: LD_VAR 0 4
47136: RET
// export function ComComplete ( units , b ) ; var i ; begin
47137: LD_INT 0
47139: PPUSH
47140: PPUSH
// if not units then
47141: LD_VAR 0 1
47145: NOT
47146: IFFALSE 47150
// exit ;
47148: GO 47240
// for i in units do
47150: LD_ADDR_VAR 0 4
47154: PUSH
47155: LD_VAR 0 1
47159: PUSH
47160: FOR_IN
47161: IFFALSE 47238
// if BuildingStatus ( b ) = bs_build then
47163: LD_VAR 0 2
47167: PPUSH
47168: CALL_OW 461
47172: PUSH
47173: LD_INT 1
47175: EQUAL
47176: IFFALSE 47236
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47178: LD_VAR 0 4
47182: PPUSH
47183: LD_STRING h
47185: PUSH
47186: LD_VAR 0 2
47190: PPUSH
47191: CALL_OW 250
47195: PUSH
47196: LD_VAR 0 2
47200: PPUSH
47201: CALL_OW 251
47205: PUSH
47206: LD_VAR 0 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: PPUSH
47232: CALL_OW 446
47236: GO 47160
47238: POP
47239: POP
// end ;
47240: LD_VAR 0 3
47244: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47245: LD_INT 0
47247: PPUSH
47248: PPUSH
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47253: LD_VAR 0 1
47257: NOT
47258: PUSH
47259: LD_VAR 0 1
47263: PPUSH
47264: CALL_OW 263
47268: PUSH
47269: LD_INT 2
47271: NONEQUAL
47272: OR
47273: IFFALSE 47277
// exit ;
47275: GO 47593
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47277: LD_ADDR_VAR 0 6
47281: PUSH
47282: LD_INT 22
47284: PUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL_OW 255
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 30
47304: PUSH
47305: LD_INT 36
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 34
47314: PUSH
47315: LD_INT 31
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PPUSH
47331: CALL_OW 69
47335: ST_TO_ADDR
// if not tmp then
47336: LD_VAR 0 6
47340: NOT
47341: IFFALSE 47345
// exit ;
47343: GO 47593
// result := [ ] ;
47345: LD_ADDR_VAR 0 2
47349: PUSH
47350: EMPTY
47351: ST_TO_ADDR
// for i in tmp do
47352: LD_ADDR_VAR 0 3
47356: PUSH
47357: LD_VAR 0 6
47361: PUSH
47362: FOR_IN
47363: IFFALSE 47434
// begin t := UnitsInside ( i ) ;
47365: LD_ADDR_VAR 0 4
47369: PUSH
47370: LD_VAR 0 3
47374: PPUSH
47375: CALL_OW 313
47379: ST_TO_ADDR
// if t then
47380: LD_VAR 0 4
47384: IFFALSE 47432
// for j in t do
47386: LD_ADDR_VAR 0 7
47390: PUSH
47391: LD_VAR 0 4
47395: PUSH
47396: FOR_IN
47397: IFFALSE 47430
// result := Replace ( result , result + 1 , j ) ;
47399: LD_ADDR_VAR 0 2
47403: PUSH
47404: LD_VAR 0 2
47408: PPUSH
47409: LD_VAR 0 2
47413: PUSH
47414: LD_INT 1
47416: PLUS
47417: PPUSH
47418: LD_VAR 0 7
47422: PPUSH
47423: CALL_OW 1
47427: ST_TO_ADDR
47428: GO 47396
47430: POP
47431: POP
// end ;
47432: GO 47362
47434: POP
47435: POP
// if not result then
47436: LD_VAR 0 2
47440: NOT
47441: IFFALSE 47445
// exit ;
47443: GO 47593
// mech := result [ 1 ] ;
47445: LD_ADDR_VAR 0 5
47449: PUSH
47450: LD_VAR 0 2
47454: PUSH
47455: LD_INT 1
47457: ARRAY
47458: ST_TO_ADDR
// if result > 1 then
47459: LD_VAR 0 2
47463: PUSH
47464: LD_INT 1
47466: GREATER
47467: IFFALSE 47579
// begin for i = 2 to result do
47469: LD_ADDR_VAR 0 3
47473: PUSH
47474: DOUBLE
47475: LD_INT 2
47477: DEC
47478: ST_TO_ADDR
47479: LD_VAR 0 2
47483: PUSH
47484: FOR_TO
47485: IFFALSE 47577
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47487: LD_ADDR_VAR 0 4
47491: PUSH
47492: LD_VAR 0 2
47496: PUSH
47497: LD_VAR 0 3
47501: ARRAY
47502: PPUSH
47503: LD_INT 3
47505: PPUSH
47506: CALL_OW 259
47510: PUSH
47511: LD_VAR 0 2
47515: PUSH
47516: LD_VAR 0 3
47520: ARRAY
47521: PPUSH
47522: CALL_OW 432
47526: MINUS
47527: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47528: LD_VAR 0 4
47532: PUSH
47533: LD_VAR 0 5
47537: PPUSH
47538: LD_INT 3
47540: PPUSH
47541: CALL_OW 259
47545: PUSH
47546: LD_VAR 0 5
47550: PPUSH
47551: CALL_OW 432
47555: MINUS
47556: GREATEREQUAL
47557: IFFALSE 47575
// mech := result [ i ] ;
47559: LD_ADDR_VAR 0 5
47563: PUSH
47564: LD_VAR 0 2
47568: PUSH
47569: LD_VAR 0 3
47573: ARRAY
47574: ST_TO_ADDR
// end ;
47575: GO 47484
47577: POP
47578: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47579: LD_VAR 0 1
47583: PPUSH
47584: LD_VAR 0 5
47588: PPUSH
47589: CALL_OW 135
// end ;
47593: LD_VAR 0 2
47597: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47598: LD_INT 0
47600: PPUSH
47601: PPUSH
47602: PPUSH
47603: PPUSH
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
// result := [ ] ;
47613: LD_ADDR_VAR 0 7
47617: PUSH
47618: EMPTY
47619: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47620: LD_VAR 0 1
47624: PPUSH
47625: CALL_OW 266
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: IN
47640: NOT
47641: IFFALSE 47645
// exit ;
47643: GO 49279
// if name then
47645: LD_VAR 0 3
47649: IFFALSE 47665
// SetBName ( base_dep , name ) ;
47651: LD_VAR 0 1
47655: PPUSH
47656: LD_VAR 0 3
47660: PPUSH
47661: CALL_OW 500
// base := GetBase ( base_dep ) ;
47665: LD_ADDR_VAR 0 15
47669: PUSH
47670: LD_VAR 0 1
47674: PPUSH
47675: CALL_OW 274
47679: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47680: LD_ADDR_VAR 0 16
47684: PUSH
47685: LD_VAR 0 1
47689: PPUSH
47690: CALL_OW 255
47694: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47695: LD_ADDR_VAR 0 17
47699: PUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 248
47709: ST_TO_ADDR
// if sources then
47710: LD_VAR 0 5
47714: IFFALSE 47761
// for i = 1 to 3 do
47716: LD_ADDR_VAR 0 8
47720: PUSH
47721: DOUBLE
47722: LD_INT 1
47724: DEC
47725: ST_TO_ADDR
47726: LD_INT 3
47728: PUSH
47729: FOR_TO
47730: IFFALSE 47759
// AddResourceType ( base , i , sources [ i ] ) ;
47732: LD_VAR 0 15
47736: PPUSH
47737: LD_VAR 0 8
47741: PPUSH
47742: LD_VAR 0 5
47746: PUSH
47747: LD_VAR 0 8
47751: ARRAY
47752: PPUSH
47753: CALL_OW 276
47757: GO 47729
47759: POP
47760: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47761: LD_ADDR_VAR 0 18
47765: PUSH
47766: LD_VAR 0 15
47770: PPUSH
47771: LD_VAR 0 2
47775: PPUSH
47776: LD_INT 1
47778: PPUSH
47779: CALL 47022 0 3
47783: ST_TO_ADDR
// InitHc ;
47784: CALL_OW 19
// InitUc ;
47788: CALL_OW 18
// uc_side := side ;
47792: LD_ADDR_OWVAR 20
47796: PUSH
47797: LD_VAR 0 16
47801: ST_TO_ADDR
// uc_nation := nation ;
47802: LD_ADDR_OWVAR 21
47806: PUSH
47807: LD_VAR 0 17
47811: ST_TO_ADDR
// if buildings then
47812: LD_VAR 0 18
47816: IFFALSE 49138
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47818: LD_ADDR_VAR 0 19
47822: PUSH
47823: LD_VAR 0 18
47827: PPUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: LD_INT 29
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 30
47843: PUSH
47844: LD_INT 30
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: PPUSH
47856: CALL_OW 72
47860: ST_TO_ADDR
// if tmp then
47861: LD_VAR 0 19
47865: IFFALSE 47913
// for i in tmp do
47867: LD_ADDR_VAR 0 8
47871: PUSH
47872: LD_VAR 0 19
47876: PUSH
47877: FOR_IN
47878: IFFALSE 47911
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47880: LD_VAR 0 8
47884: PPUSH
47885: CALL_OW 250
47889: PPUSH
47890: LD_VAR 0 8
47894: PPUSH
47895: CALL_OW 251
47899: PPUSH
47900: LD_VAR 0 16
47904: PPUSH
47905: CALL_OW 441
47909: GO 47877
47911: POP
47912: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47913: LD_VAR 0 18
47917: PPUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 30
47923: PUSH
47924: LD_INT 32
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 30
47933: PUSH
47934: LD_INT 33
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: PPUSH
47946: CALL_OW 72
47950: IFFALSE 48038
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47952: LD_ADDR_VAR 0 8
47956: PUSH
47957: LD_VAR 0 18
47961: PPUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 30
47967: PUSH
47968: LD_INT 32
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 30
47977: PUSH
47978: LD_INT 33
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: PPUSH
47990: CALL_OW 72
47994: PUSH
47995: FOR_IN
47996: IFFALSE 48036
// begin if not GetBWeapon ( i ) then
47998: LD_VAR 0 8
48002: PPUSH
48003: CALL_OW 269
48007: NOT
48008: IFFALSE 48034
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48010: LD_VAR 0 8
48014: PPUSH
48015: LD_VAR 0 8
48019: PPUSH
48020: LD_VAR 0 2
48024: PPUSH
48025: CALL 49284 0 2
48029: PPUSH
48030: CALL_OW 431
// end ;
48034: GO 47995
48036: POP
48037: POP
// end ; for i = 1 to personel do
48038: LD_ADDR_VAR 0 8
48042: PUSH
48043: DOUBLE
48044: LD_INT 1
48046: DEC
48047: ST_TO_ADDR
48048: LD_VAR 0 6
48052: PUSH
48053: FOR_TO
48054: IFFALSE 49118
// begin if i > 4 then
48056: LD_VAR 0 8
48060: PUSH
48061: LD_INT 4
48063: GREATER
48064: IFFALSE 48068
// break ;
48066: GO 49118
// case i of 1 :
48068: LD_VAR 0 8
48072: PUSH
48073: LD_INT 1
48075: DOUBLE
48076: EQUAL
48077: IFTRUE 48081
48079: GO 48161
48081: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48082: LD_ADDR_VAR 0 12
48086: PUSH
48087: LD_VAR 0 18
48091: PPUSH
48092: LD_INT 22
48094: PUSH
48095: LD_VAR 0 16
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 58
48106: PUSH
48107: EMPTY
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 30
48115: PUSH
48116: LD_INT 32
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 30
48125: PUSH
48126: LD_INT 4
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 30
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: PPUSH
48154: CALL_OW 72
48158: ST_TO_ADDR
48159: GO 48383
48161: LD_INT 2
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48169
48167: GO 48231
48169: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48170: LD_ADDR_VAR 0 12
48174: PUSH
48175: LD_VAR 0 18
48179: PPUSH
48180: LD_INT 22
48182: PUSH
48183: LD_VAR 0 16
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 30
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 30
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PPUSH
48224: CALL_OW 72
48228: ST_TO_ADDR
48229: GO 48383
48231: LD_INT 3
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48239
48237: GO 48301
48239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48240: LD_ADDR_VAR 0 12
48244: PUSH
48245: LD_VAR 0 18
48249: PPUSH
48250: LD_INT 22
48252: PUSH
48253: LD_VAR 0 16
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 30
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 30
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PPUSH
48294: CALL_OW 72
48298: ST_TO_ADDR
48299: GO 48383
48301: LD_INT 4
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48382
48309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48310: LD_ADDR_VAR 0 12
48314: PUSH
48315: LD_VAR 0 18
48319: PPUSH
48320: LD_INT 22
48322: PUSH
48323: LD_VAR 0 16
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 30
48337: PUSH
48338: LD_INT 6
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 30
48347: PUSH
48348: LD_INT 7
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 30
48357: PUSH
48358: LD_INT 8
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PPUSH
48375: CALL_OW 72
48379: ST_TO_ADDR
48380: GO 48383
48382: POP
// if i = 1 then
48383: LD_VAR 0 8
48387: PUSH
48388: LD_INT 1
48390: EQUAL
48391: IFFALSE 48502
// begin tmp := [ ] ;
48393: LD_ADDR_VAR 0 19
48397: PUSH
48398: EMPTY
48399: ST_TO_ADDR
// for j in f do
48400: LD_ADDR_VAR 0 9
48404: PUSH
48405: LD_VAR 0 12
48409: PUSH
48410: FOR_IN
48411: IFFALSE 48484
// if GetBType ( j ) = b_bunker then
48413: LD_VAR 0 9
48417: PPUSH
48418: CALL_OW 266
48422: PUSH
48423: LD_INT 32
48425: EQUAL
48426: IFFALSE 48453
// tmp := Insert ( tmp , 1 , j ) else
48428: LD_ADDR_VAR 0 19
48432: PUSH
48433: LD_VAR 0 19
48437: PPUSH
48438: LD_INT 1
48440: PPUSH
48441: LD_VAR 0 9
48445: PPUSH
48446: CALL_OW 2
48450: ST_TO_ADDR
48451: GO 48482
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48453: LD_ADDR_VAR 0 19
48457: PUSH
48458: LD_VAR 0 19
48462: PPUSH
48463: LD_VAR 0 19
48467: PUSH
48468: LD_INT 1
48470: PLUS
48471: PPUSH
48472: LD_VAR 0 9
48476: PPUSH
48477: CALL_OW 2
48481: ST_TO_ADDR
48482: GO 48410
48484: POP
48485: POP
// if tmp then
48486: LD_VAR 0 19
48490: IFFALSE 48502
// f := tmp ;
48492: LD_ADDR_VAR 0 12
48496: PUSH
48497: LD_VAR 0 19
48501: ST_TO_ADDR
// end ; x := personel [ i ] ;
48502: LD_ADDR_VAR 0 13
48506: PUSH
48507: LD_VAR 0 6
48511: PUSH
48512: LD_VAR 0 8
48516: ARRAY
48517: ST_TO_ADDR
// if x = - 1 then
48518: LD_VAR 0 13
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: EQUAL
48527: IFFALSE 48736
// begin for j in f do
48529: LD_ADDR_VAR 0 9
48533: PUSH
48534: LD_VAR 0 12
48538: PUSH
48539: FOR_IN
48540: IFFALSE 48732
// repeat InitHc ;
48542: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48546: LD_VAR 0 9
48550: PPUSH
48551: CALL_OW 266
48555: PUSH
48556: LD_INT 5
48558: EQUAL
48559: IFFALSE 48629
// begin if UnitsInside ( j ) < 3 then
48561: LD_VAR 0 9
48565: PPUSH
48566: CALL_OW 313
48570: PUSH
48571: LD_INT 3
48573: LESS
48574: IFFALSE 48610
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48576: LD_INT 0
48578: PPUSH
48579: LD_INT 5
48581: PUSH
48582: LD_INT 8
48584: PUSH
48585: LD_INT 9
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: PUSH
48593: LD_VAR 0 17
48597: ARRAY
48598: PPUSH
48599: LD_VAR 0 4
48603: PPUSH
48604: CALL_OW 380
48608: GO 48627
// PrepareHuman ( false , i , skill ) ;
48610: LD_INT 0
48612: PPUSH
48613: LD_VAR 0 8
48617: PPUSH
48618: LD_VAR 0 4
48622: PPUSH
48623: CALL_OW 380
// end else
48627: GO 48646
// PrepareHuman ( false , i , skill ) ;
48629: LD_INT 0
48631: PPUSH
48632: LD_VAR 0 8
48636: PPUSH
48637: LD_VAR 0 4
48641: PPUSH
48642: CALL_OW 380
// un := CreateHuman ;
48646: LD_ADDR_VAR 0 14
48650: PUSH
48651: CALL_OW 44
48655: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48656: LD_ADDR_VAR 0 7
48660: PUSH
48661: LD_VAR 0 7
48665: PPUSH
48666: LD_INT 1
48668: PPUSH
48669: LD_VAR 0 14
48673: PPUSH
48674: CALL_OW 2
48678: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48679: LD_VAR 0 14
48683: PPUSH
48684: LD_VAR 0 9
48688: PPUSH
48689: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48693: LD_VAR 0 9
48697: PPUSH
48698: CALL_OW 313
48702: PUSH
48703: LD_INT 6
48705: EQUAL
48706: PUSH
48707: LD_VAR 0 9
48711: PPUSH
48712: CALL_OW 266
48716: PUSH
48717: LD_INT 32
48719: PUSH
48720: LD_INT 31
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: IN
48727: OR
48728: IFFALSE 48542
48730: GO 48539
48732: POP
48733: POP
// end else
48734: GO 49116
// for j = 1 to x do
48736: LD_ADDR_VAR 0 9
48740: PUSH
48741: DOUBLE
48742: LD_INT 1
48744: DEC
48745: ST_TO_ADDR
48746: LD_VAR 0 13
48750: PUSH
48751: FOR_TO
48752: IFFALSE 49114
// begin InitHc ;
48754: CALL_OW 19
// if not f then
48758: LD_VAR 0 12
48762: NOT
48763: IFFALSE 48852
// begin PrepareHuman ( false , i , skill ) ;
48765: LD_INT 0
48767: PPUSH
48768: LD_VAR 0 8
48772: PPUSH
48773: LD_VAR 0 4
48777: PPUSH
48778: CALL_OW 380
// un := CreateHuman ;
48782: LD_ADDR_VAR 0 14
48786: PUSH
48787: CALL_OW 44
48791: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48792: LD_ADDR_VAR 0 7
48796: PUSH
48797: LD_VAR 0 7
48801: PPUSH
48802: LD_INT 1
48804: PPUSH
48805: LD_VAR 0 14
48809: PPUSH
48810: CALL_OW 2
48814: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48815: LD_VAR 0 14
48819: PPUSH
48820: LD_VAR 0 1
48824: PPUSH
48825: CALL_OW 250
48829: PPUSH
48830: LD_VAR 0 1
48834: PPUSH
48835: CALL_OW 251
48839: PPUSH
48840: LD_INT 10
48842: PPUSH
48843: LD_INT 0
48845: PPUSH
48846: CALL_OW 50
// continue ;
48850: GO 48751
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48852: LD_VAR 0 12
48856: PUSH
48857: LD_INT 1
48859: ARRAY
48860: PPUSH
48861: CALL_OW 313
48865: PUSH
48866: LD_VAR 0 12
48870: PUSH
48871: LD_INT 1
48873: ARRAY
48874: PPUSH
48875: CALL_OW 266
48879: PUSH
48880: LD_INT 32
48882: PUSH
48883: LD_INT 31
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: IN
48890: AND
48891: PUSH
48892: LD_VAR 0 12
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: PPUSH
48901: CALL_OW 313
48905: PUSH
48906: LD_INT 6
48908: EQUAL
48909: OR
48910: IFFALSE 48930
// f := Delete ( f , 1 ) ;
48912: LD_ADDR_VAR 0 12
48916: PUSH
48917: LD_VAR 0 12
48921: PPUSH
48922: LD_INT 1
48924: PPUSH
48925: CALL_OW 3
48929: ST_TO_ADDR
// if not f then
48930: LD_VAR 0 12
48934: NOT
48935: IFFALSE 48953
// begin x := x + 2 ;
48937: LD_ADDR_VAR 0 13
48941: PUSH
48942: LD_VAR 0 13
48946: PUSH
48947: LD_INT 2
48949: PLUS
48950: ST_TO_ADDR
// continue ;
48951: GO 48751
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48953: LD_VAR 0 12
48957: PUSH
48958: LD_INT 1
48960: ARRAY
48961: PPUSH
48962: CALL_OW 266
48966: PUSH
48967: LD_INT 5
48969: EQUAL
48970: IFFALSE 49044
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48972: LD_VAR 0 12
48976: PUSH
48977: LD_INT 1
48979: ARRAY
48980: PPUSH
48981: CALL_OW 313
48985: PUSH
48986: LD_INT 3
48988: LESS
48989: IFFALSE 49025
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48991: LD_INT 0
48993: PPUSH
48994: LD_INT 5
48996: PUSH
48997: LD_INT 8
48999: PUSH
49000: LD_INT 9
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: PUSH
49008: LD_VAR 0 17
49012: ARRAY
49013: PPUSH
49014: LD_VAR 0 4
49018: PPUSH
49019: CALL_OW 380
49023: GO 49042
// PrepareHuman ( false , i , skill ) ;
49025: LD_INT 0
49027: PPUSH
49028: LD_VAR 0 8
49032: PPUSH
49033: LD_VAR 0 4
49037: PPUSH
49038: CALL_OW 380
// end else
49042: GO 49061
// PrepareHuman ( false , i , skill ) ;
49044: LD_INT 0
49046: PPUSH
49047: LD_VAR 0 8
49051: PPUSH
49052: LD_VAR 0 4
49056: PPUSH
49057: CALL_OW 380
// un := CreateHuman ;
49061: LD_ADDR_VAR 0 14
49065: PUSH
49066: CALL_OW 44
49070: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49071: LD_ADDR_VAR 0 7
49075: PUSH
49076: LD_VAR 0 7
49080: PPUSH
49081: LD_INT 1
49083: PPUSH
49084: LD_VAR 0 14
49088: PPUSH
49089: CALL_OW 2
49093: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49094: LD_VAR 0 14
49098: PPUSH
49099: LD_VAR 0 12
49103: PUSH
49104: LD_INT 1
49106: ARRAY
49107: PPUSH
49108: CALL_OW 52
// end ;
49112: GO 48751
49114: POP
49115: POP
// end ;
49116: GO 48053
49118: POP
49119: POP
// result := result ^ buildings ;
49120: LD_ADDR_VAR 0 7
49124: PUSH
49125: LD_VAR 0 7
49129: PUSH
49130: LD_VAR 0 18
49134: ADD
49135: ST_TO_ADDR
// end else
49136: GO 49279
// begin for i = 1 to personel do
49138: LD_ADDR_VAR 0 8
49142: PUSH
49143: DOUBLE
49144: LD_INT 1
49146: DEC
49147: ST_TO_ADDR
49148: LD_VAR 0 6
49152: PUSH
49153: FOR_TO
49154: IFFALSE 49277
// begin if i > 4 then
49156: LD_VAR 0 8
49160: PUSH
49161: LD_INT 4
49163: GREATER
49164: IFFALSE 49168
// break ;
49166: GO 49277
// x := personel [ i ] ;
49168: LD_ADDR_VAR 0 13
49172: PUSH
49173: LD_VAR 0 6
49177: PUSH
49178: LD_VAR 0 8
49182: ARRAY
49183: ST_TO_ADDR
// if x = - 1 then
49184: LD_VAR 0 13
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: EQUAL
49193: IFFALSE 49197
// continue ;
49195: GO 49153
// PrepareHuman ( false , i , skill ) ;
49197: LD_INT 0
49199: PPUSH
49200: LD_VAR 0 8
49204: PPUSH
49205: LD_VAR 0 4
49209: PPUSH
49210: CALL_OW 380
// un := CreateHuman ;
49214: LD_ADDR_VAR 0 14
49218: PUSH
49219: CALL_OW 44
49223: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49224: LD_VAR 0 14
49228: PPUSH
49229: LD_VAR 0 1
49233: PPUSH
49234: CALL_OW 250
49238: PPUSH
49239: LD_VAR 0 1
49243: PPUSH
49244: CALL_OW 251
49248: PPUSH
49249: LD_INT 10
49251: PPUSH
49252: LD_INT 0
49254: PPUSH
49255: CALL_OW 50
// result := result ^ un ;
49259: LD_ADDR_VAR 0 7
49263: PUSH
49264: LD_VAR 0 7
49268: PUSH
49269: LD_VAR 0 14
49273: ADD
49274: ST_TO_ADDR
// end ;
49275: GO 49153
49277: POP
49278: POP
// end ; end ;
49279: LD_VAR 0 7
49283: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49284: LD_INT 0
49286: PPUSH
49287: PPUSH
49288: PPUSH
49289: PPUSH
49290: PPUSH
49291: PPUSH
49292: PPUSH
49293: PPUSH
49294: PPUSH
49295: PPUSH
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
// result := false ;
49302: LD_ADDR_VAR 0 3
49306: PUSH
49307: LD_INT 0
49309: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49310: LD_VAR 0 1
49314: NOT
49315: PUSH
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 266
49325: PUSH
49326: LD_INT 32
49328: PUSH
49329: LD_INT 33
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: IN
49336: NOT
49337: OR
49338: IFFALSE 49342
// exit ;
49340: GO 50451
// nat := GetNation ( tower ) ;
49342: LD_ADDR_VAR 0 12
49346: PUSH
49347: LD_VAR 0 1
49351: PPUSH
49352: CALL_OW 248
49356: ST_TO_ADDR
// side := GetSide ( tower ) ;
49357: LD_ADDR_VAR 0 16
49361: PUSH
49362: LD_VAR 0 1
49366: PPUSH
49367: CALL_OW 255
49371: ST_TO_ADDR
// x := GetX ( tower ) ;
49372: LD_ADDR_VAR 0 10
49376: PUSH
49377: LD_VAR 0 1
49381: PPUSH
49382: CALL_OW 250
49386: ST_TO_ADDR
// y := GetY ( tower ) ;
49387: LD_ADDR_VAR 0 11
49391: PUSH
49392: LD_VAR 0 1
49396: PPUSH
49397: CALL_OW 251
49401: ST_TO_ADDR
// if not x or not y then
49402: LD_VAR 0 10
49406: NOT
49407: PUSH
49408: LD_VAR 0 11
49412: NOT
49413: OR
49414: IFFALSE 49418
// exit ;
49416: GO 50451
// weapon := 0 ;
49418: LD_ADDR_VAR 0 18
49422: PUSH
49423: LD_INT 0
49425: ST_TO_ADDR
// fac_list := [ ] ;
49426: LD_ADDR_VAR 0 17
49430: PUSH
49431: EMPTY
49432: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49433: LD_ADDR_VAR 0 6
49437: PUSH
49438: LD_VAR 0 1
49442: PPUSH
49443: CALL_OW 274
49447: PPUSH
49448: LD_VAR 0 2
49452: PPUSH
49453: LD_INT 0
49455: PPUSH
49456: CALL 47022 0 3
49460: PPUSH
49461: LD_INT 30
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PPUSH
49471: CALL_OW 72
49475: ST_TO_ADDR
// if not factories then
49476: LD_VAR 0 6
49480: NOT
49481: IFFALSE 49485
// exit ;
49483: GO 50451
// for i in factories do
49485: LD_ADDR_VAR 0 8
49489: PUSH
49490: LD_VAR 0 6
49494: PUSH
49495: FOR_IN
49496: IFFALSE 49521
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49498: LD_ADDR_VAR 0 17
49502: PUSH
49503: LD_VAR 0 17
49507: PUSH
49508: LD_VAR 0 8
49512: PPUSH
49513: CALL_OW 478
49517: UNION
49518: ST_TO_ADDR
49519: GO 49495
49521: POP
49522: POP
// if not fac_list then
49523: LD_VAR 0 17
49527: NOT
49528: IFFALSE 49532
// exit ;
49530: GO 50451
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_INT 4
49539: PUSH
49540: LD_INT 5
49542: PUSH
49543: LD_INT 9
49545: PUSH
49546: LD_INT 10
49548: PUSH
49549: LD_INT 6
49551: PUSH
49552: LD_INT 7
49554: PUSH
49555: LD_INT 11
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 27
49569: PUSH
49570: LD_INT 28
49572: PUSH
49573: LD_INT 26
49575: PUSH
49576: LD_INT 30
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 43
49587: PUSH
49588: LD_INT 44
49590: PUSH
49591: LD_INT 46
49593: PUSH
49594: LD_INT 45
49596: PUSH
49597: LD_INT 47
49599: PUSH
49600: LD_INT 49
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: PUSH
49616: LD_VAR 0 12
49620: ARRAY
49621: ST_TO_ADDR
// list := list isect fac_list ;
49622: LD_ADDR_VAR 0 5
49626: PUSH
49627: LD_VAR 0 5
49631: PUSH
49632: LD_VAR 0 17
49636: ISECT
49637: ST_TO_ADDR
// if not list then
49638: LD_VAR 0 5
49642: NOT
49643: IFFALSE 49647
// exit ;
49645: GO 50451
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49647: LD_VAR 0 12
49651: PUSH
49652: LD_INT 3
49654: EQUAL
49655: PUSH
49656: LD_INT 49
49658: PUSH
49659: LD_VAR 0 5
49663: IN
49664: AND
49665: PUSH
49666: LD_INT 31
49668: PPUSH
49669: LD_VAR 0 16
49673: PPUSH
49674: CALL_OW 321
49678: PUSH
49679: LD_INT 2
49681: EQUAL
49682: AND
49683: IFFALSE 49743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49685: LD_INT 22
49687: PUSH
49688: LD_VAR 0 16
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 35
49699: PUSH
49700: LD_INT 49
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 91
49709: PUSH
49710: LD_VAR 0 1
49714: PUSH
49715: LD_INT 10
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: PPUSH
49728: CALL_OW 69
49732: NOT
49733: IFFALSE 49743
// weapon := ru_time_lapser ;
49735: LD_ADDR_VAR 0 18
49739: PUSH
49740: LD_INT 49
49742: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49743: LD_VAR 0 12
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: IN
49758: PUSH
49759: LD_INT 11
49761: PUSH
49762: LD_VAR 0 5
49766: IN
49767: PUSH
49768: LD_INT 30
49770: PUSH
49771: LD_VAR 0 5
49775: IN
49776: OR
49777: AND
49778: PUSH
49779: LD_INT 6
49781: PPUSH
49782: LD_VAR 0 16
49786: PPUSH
49787: CALL_OW 321
49791: PUSH
49792: LD_INT 2
49794: EQUAL
49795: AND
49796: IFFALSE 49961
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49798: LD_INT 22
49800: PUSH
49801: LD_VAR 0 16
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 35
49815: PUSH
49816: LD_INT 11
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 35
49825: PUSH
49826: LD_INT 30
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 91
49840: PUSH
49841: LD_VAR 0 1
49845: PUSH
49846: LD_INT 18
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: PPUSH
49859: CALL_OW 69
49863: NOT
49864: PUSH
49865: LD_INT 22
49867: PUSH
49868: LD_VAR 0 16
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 30
49882: PUSH
49883: LD_INT 32
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 30
49892: PUSH
49893: LD_INT 33
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 91
49907: PUSH
49908: LD_VAR 0 1
49912: PUSH
49913: LD_INT 12
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: PPUSH
49929: CALL_OW 69
49933: PUSH
49934: LD_INT 2
49936: GREATER
49937: AND
49938: IFFALSE 49961
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49940: LD_ADDR_VAR 0 18
49944: PUSH
49945: LD_INT 11
49947: PUSH
49948: LD_INT 30
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_VAR 0 12
49959: ARRAY
49960: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49961: LD_VAR 0 18
49965: NOT
49966: PUSH
49967: LD_INT 40
49969: PPUSH
49970: LD_VAR 0 16
49974: PPUSH
49975: CALL_OW 321
49979: PUSH
49980: LD_INT 2
49982: EQUAL
49983: AND
49984: PUSH
49985: LD_INT 7
49987: PUSH
49988: LD_VAR 0 5
49992: IN
49993: PUSH
49994: LD_INT 28
49996: PUSH
49997: LD_VAR 0 5
50001: IN
50002: OR
50003: PUSH
50004: LD_INT 45
50006: PUSH
50007: LD_VAR 0 5
50011: IN
50012: OR
50013: AND
50014: IFFALSE 50268
// begin hex := GetHexInfo ( x , y ) ;
50016: LD_ADDR_VAR 0 4
50020: PUSH
50021: LD_VAR 0 10
50025: PPUSH
50026: LD_VAR 0 11
50030: PPUSH
50031: CALL_OW 546
50035: ST_TO_ADDR
// if hex [ 1 ] then
50036: LD_VAR 0 4
50040: PUSH
50041: LD_INT 1
50043: ARRAY
50044: IFFALSE 50048
// exit ;
50046: GO 50451
// height := hex [ 2 ] ;
50048: LD_ADDR_VAR 0 15
50052: PUSH
50053: LD_VAR 0 4
50057: PUSH
50058: LD_INT 2
50060: ARRAY
50061: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50062: LD_ADDR_VAR 0 14
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: LD_INT 5
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// for i in tmp do
50085: LD_ADDR_VAR 0 8
50089: PUSH
50090: LD_VAR 0 14
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50266
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50098: LD_ADDR_VAR 0 9
50102: PUSH
50103: LD_VAR 0 10
50107: PPUSH
50108: LD_VAR 0 8
50112: PPUSH
50113: LD_INT 5
50115: PPUSH
50116: CALL_OW 272
50120: PUSH
50121: LD_VAR 0 11
50125: PPUSH
50126: LD_VAR 0 8
50130: PPUSH
50131: LD_INT 5
50133: PPUSH
50134: CALL_OW 273
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50143: LD_VAR 0 9
50147: PUSH
50148: LD_INT 1
50150: ARRAY
50151: PPUSH
50152: LD_VAR 0 9
50156: PUSH
50157: LD_INT 2
50159: ARRAY
50160: PPUSH
50161: CALL_OW 488
50165: IFFALSE 50264
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50167: LD_ADDR_VAR 0 4
50171: PUSH
50172: LD_VAR 0 9
50176: PUSH
50177: LD_INT 1
50179: ARRAY
50180: PPUSH
50181: LD_VAR 0 9
50185: PUSH
50186: LD_INT 2
50188: ARRAY
50189: PPUSH
50190: CALL_OW 546
50194: ST_TO_ADDR
// if hex [ 1 ] then
50195: LD_VAR 0 4
50199: PUSH
50200: LD_INT 1
50202: ARRAY
50203: IFFALSE 50207
// continue ;
50205: GO 50095
// h := hex [ 2 ] ;
50207: LD_ADDR_VAR 0 13
50211: PUSH
50212: LD_VAR 0 4
50216: PUSH
50217: LD_INT 2
50219: ARRAY
50220: ST_TO_ADDR
// if h + 7 < height then
50221: LD_VAR 0 13
50225: PUSH
50226: LD_INT 7
50228: PLUS
50229: PUSH
50230: LD_VAR 0 15
50234: LESS
50235: IFFALSE 50264
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50237: LD_ADDR_VAR 0 18
50241: PUSH
50242: LD_INT 7
50244: PUSH
50245: LD_INT 28
50247: PUSH
50248: LD_INT 45
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: PUSH
50256: LD_VAR 0 12
50260: ARRAY
50261: ST_TO_ADDR
// break ;
50262: GO 50266
// end ; end ; end ;
50264: GO 50095
50266: POP
50267: POP
// end ; if not weapon then
50268: LD_VAR 0 18
50272: NOT
50273: IFFALSE 50333
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50275: LD_ADDR_VAR 0 5
50279: PUSH
50280: LD_VAR 0 5
50284: PUSH
50285: LD_INT 11
50287: PUSH
50288: LD_INT 30
50290: PUSH
50291: LD_INT 49
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: LIST
50298: DIFF
50299: ST_TO_ADDR
// if not list then
50300: LD_VAR 0 5
50304: NOT
50305: IFFALSE 50309
// exit ;
50307: GO 50451
// weapon := list [ rand ( 1 , list ) ] ;
50309: LD_ADDR_VAR 0 18
50313: PUSH
50314: LD_VAR 0 5
50318: PUSH
50319: LD_INT 1
50321: PPUSH
50322: LD_VAR 0 5
50326: PPUSH
50327: CALL_OW 12
50331: ARRAY
50332: ST_TO_ADDR
// end ; if weapon then
50333: LD_VAR 0 18
50337: IFFALSE 50451
// begin tmp := CostOfWeapon ( weapon ) ;
50339: LD_ADDR_VAR 0 14
50343: PUSH
50344: LD_VAR 0 18
50348: PPUSH
50349: CALL_OW 451
50353: ST_TO_ADDR
// j := GetBase ( tower ) ;
50354: LD_ADDR_VAR 0 9
50358: PUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: CALL_OW 274
50368: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50369: LD_VAR 0 9
50373: PPUSH
50374: LD_INT 1
50376: PPUSH
50377: CALL_OW 275
50381: PUSH
50382: LD_VAR 0 14
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: GREATEREQUAL
50391: PUSH
50392: LD_VAR 0 9
50396: PPUSH
50397: LD_INT 2
50399: PPUSH
50400: CALL_OW 275
50404: PUSH
50405: LD_VAR 0 14
50409: PUSH
50410: LD_INT 2
50412: ARRAY
50413: GREATEREQUAL
50414: AND
50415: PUSH
50416: LD_VAR 0 9
50420: PPUSH
50421: LD_INT 3
50423: PPUSH
50424: CALL_OW 275
50428: PUSH
50429: LD_VAR 0 14
50433: PUSH
50434: LD_INT 3
50436: ARRAY
50437: GREATEREQUAL
50438: AND
50439: IFFALSE 50451
// result := weapon ;
50441: LD_ADDR_VAR 0 3
50445: PUSH
50446: LD_VAR 0 18
50450: ST_TO_ADDR
// end ; end ;
50451: LD_VAR 0 3
50455: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50456: LD_INT 0
50458: PPUSH
50459: PPUSH
// result := true ;
50460: LD_ADDR_VAR 0 3
50464: PUSH
50465: LD_INT 1
50467: ST_TO_ADDR
// if array1 = array2 then
50468: LD_VAR 0 1
50472: PUSH
50473: LD_VAR 0 2
50477: EQUAL
50478: IFFALSE 50538
// begin for i = 1 to array1 do
50480: LD_ADDR_VAR 0 4
50484: PUSH
50485: DOUBLE
50486: LD_INT 1
50488: DEC
50489: ST_TO_ADDR
50490: LD_VAR 0 1
50494: PUSH
50495: FOR_TO
50496: IFFALSE 50534
// if array1 [ i ] <> array2 [ i ] then
50498: LD_VAR 0 1
50502: PUSH
50503: LD_VAR 0 4
50507: ARRAY
50508: PUSH
50509: LD_VAR 0 2
50513: PUSH
50514: LD_VAR 0 4
50518: ARRAY
50519: NONEQUAL
50520: IFFALSE 50532
// begin result := false ;
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_INT 0
50529: ST_TO_ADDR
// break ;
50530: GO 50534
// end ;
50532: GO 50495
50534: POP
50535: POP
// end else
50536: GO 50546
// result := false ;
50538: LD_ADDR_VAR 0 3
50542: PUSH
50543: LD_INT 0
50545: ST_TO_ADDR
// end ;
50546: LD_VAR 0 3
50550: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50551: LD_INT 0
50553: PPUSH
50554: PPUSH
// if not array1 or not array2 then
50555: LD_VAR 0 1
50559: NOT
50560: PUSH
50561: LD_VAR 0 2
50565: NOT
50566: OR
50567: IFFALSE 50571
// exit ;
50569: GO 50635
// result := true ;
50571: LD_ADDR_VAR 0 3
50575: PUSH
50576: LD_INT 1
50578: ST_TO_ADDR
// for i = 1 to array1 do
50579: LD_ADDR_VAR 0 4
50583: PUSH
50584: DOUBLE
50585: LD_INT 1
50587: DEC
50588: ST_TO_ADDR
50589: LD_VAR 0 1
50593: PUSH
50594: FOR_TO
50595: IFFALSE 50633
// if array1 [ i ] <> array2 [ i ] then
50597: LD_VAR 0 1
50601: PUSH
50602: LD_VAR 0 4
50606: ARRAY
50607: PUSH
50608: LD_VAR 0 2
50612: PUSH
50613: LD_VAR 0 4
50617: ARRAY
50618: NONEQUAL
50619: IFFALSE 50631
// begin result := false ;
50621: LD_ADDR_VAR 0 3
50625: PUSH
50626: LD_INT 0
50628: ST_TO_ADDR
// break ;
50629: GO 50633
// end ;
50631: GO 50594
50633: POP
50634: POP
// end ;
50635: LD_VAR 0 3
50639: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50640: LD_INT 0
50642: PPUSH
50643: PPUSH
50644: PPUSH
// pom := GetBase ( fac ) ;
50645: LD_ADDR_VAR 0 5
50649: PUSH
50650: LD_VAR 0 1
50654: PPUSH
50655: CALL_OW 274
50659: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50660: LD_ADDR_VAR 0 4
50664: PUSH
50665: LD_VAR 0 2
50669: PUSH
50670: LD_INT 1
50672: ARRAY
50673: PPUSH
50674: LD_VAR 0 2
50678: PUSH
50679: LD_INT 2
50681: ARRAY
50682: PPUSH
50683: LD_VAR 0 2
50687: PUSH
50688: LD_INT 3
50690: ARRAY
50691: PPUSH
50692: LD_VAR 0 2
50696: PUSH
50697: LD_INT 4
50699: ARRAY
50700: PPUSH
50701: CALL_OW 449
50705: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50706: LD_ADDR_VAR 0 3
50710: PUSH
50711: LD_VAR 0 5
50715: PPUSH
50716: LD_INT 1
50718: PPUSH
50719: CALL_OW 275
50723: PUSH
50724: LD_VAR 0 4
50728: PUSH
50729: LD_INT 1
50731: ARRAY
50732: GREATEREQUAL
50733: PUSH
50734: LD_VAR 0 5
50738: PPUSH
50739: LD_INT 2
50741: PPUSH
50742: CALL_OW 275
50746: PUSH
50747: LD_VAR 0 4
50751: PUSH
50752: LD_INT 2
50754: ARRAY
50755: GREATEREQUAL
50756: AND
50757: PUSH
50758: LD_VAR 0 5
50762: PPUSH
50763: LD_INT 3
50765: PPUSH
50766: CALL_OW 275
50770: PUSH
50771: LD_VAR 0 4
50775: PUSH
50776: LD_INT 3
50778: ARRAY
50779: GREATEREQUAL
50780: AND
50781: ST_TO_ADDR
// end ;
50782: LD_VAR 0 3
50786: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50787: LD_INT 0
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
// pom := GetBase ( building ) ;
50793: LD_ADDR_VAR 0 3
50797: PUSH
50798: LD_VAR 0 1
50802: PPUSH
50803: CALL_OW 274
50807: ST_TO_ADDR
// if not pom then
50808: LD_VAR 0 3
50812: NOT
50813: IFFALSE 50817
// exit ;
50815: GO 50987
// btype := GetBType ( building ) ;
50817: LD_ADDR_VAR 0 5
50821: PUSH
50822: LD_VAR 0 1
50826: PPUSH
50827: CALL_OW 266
50831: ST_TO_ADDR
// if btype = b_armoury then
50832: LD_VAR 0 5
50836: PUSH
50837: LD_INT 4
50839: EQUAL
50840: IFFALSE 50850
// btype := b_barracks ;
50842: LD_ADDR_VAR 0 5
50846: PUSH
50847: LD_INT 5
50849: ST_TO_ADDR
// if btype = b_depot then
50850: LD_VAR 0 5
50854: PUSH
50855: LD_INT 0
50857: EQUAL
50858: IFFALSE 50868
// btype := b_warehouse ;
50860: LD_ADDR_VAR 0 5
50864: PUSH
50865: LD_INT 1
50867: ST_TO_ADDR
// if btype = b_workshop then
50868: LD_VAR 0 5
50872: PUSH
50873: LD_INT 2
50875: EQUAL
50876: IFFALSE 50886
// btype := b_factory ;
50878: LD_ADDR_VAR 0 5
50882: PUSH
50883: LD_INT 3
50885: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50886: LD_ADDR_VAR 0 4
50890: PUSH
50891: LD_VAR 0 5
50895: PPUSH
50896: LD_VAR 0 1
50900: PPUSH
50901: CALL_OW 248
50905: PPUSH
50906: CALL_OW 450
50910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50911: LD_ADDR_VAR 0 2
50915: PUSH
50916: LD_VAR 0 3
50920: PPUSH
50921: LD_INT 1
50923: PPUSH
50924: CALL_OW 275
50928: PUSH
50929: LD_VAR 0 4
50933: PUSH
50934: LD_INT 1
50936: ARRAY
50937: GREATEREQUAL
50938: PUSH
50939: LD_VAR 0 3
50943: PPUSH
50944: LD_INT 2
50946: PPUSH
50947: CALL_OW 275
50951: PUSH
50952: LD_VAR 0 4
50956: PUSH
50957: LD_INT 2
50959: ARRAY
50960: GREATEREQUAL
50961: AND
50962: PUSH
50963: LD_VAR 0 3
50967: PPUSH
50968: LD_INT 3
50970: PPUSH
50971: CALL_OW 275
50975: PUSH
50976: LD_VAR 0 4
50980: PUSH
50981: LD_INT 3
50983: ARRAY
50984: GREATEREQUAL
50985: AND
50986: ST_TO_ADDR
// end ;
50987: LD_VAR 0 2
50991: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50992: LD_INT 0
50994: PPUSH
50995: PPUSH
50996: PPUSH
// pom := GetBase ( building ) ;
50997: LD_ADDR_VAR 0 4
51001: PUSH
51002: LD_VAR 0 1
51006: PPUSH
51007: CALL_OW 274
51011: ST_TO_ADDR
// if not pom then
51012: LD_VAR 0 4
51016: NOT
51017: IFFALSE 51021
// exit ;
51019: GO 51122
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51021: LD_ADDR_VAR 0 5
51025: PUSH
51026: LD_VAR 0 2
51030: PPUSH
51031: LD_VAR 0 1
51035: PPUSH
51036: CALL_OW 248
51040: PPUSH
51041: CALL_OW 450
51045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51046: LD_ADDR_VAR 0 3
51050: PUSH
51051: LD_VAR 0 4
51055: PPUSH
51056: LD_INT 1
51058: PPUSH
51059: CALL_OW 275
51063: PUSH
51064: LD_VAR 0 5
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: GREATEREQUAL
51073: PUSH
51074: LD_VAR 0 4
51078: PPUSH
51079: LD_INT 2
51081: PPUSH
51082: CALL_OW 275
51086: PUSH
51087: LD_VAR 0 5
51091: PUSH
51092: LD_INT 2
51094: ARRAY
51095: GREATEREQUAL
51096: AND
51097: PUSH
51098: LD_VAR 0 4
51102: PPUSH
51103: LD_INT 3
51105: PPUSH
51106: CALL_OW 275
51110: PUSH
51111: LD_VAR 0 5
51115: PUSH
51116: LD_INT 3
51118: ARRAY
51119: GREATEREQUAL
51120: AND
51121: ST_TO_ADDR
// end ;
51122: LD_VAR 0 3
51126: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51127: LD_INT 0
51129: PPUSH
51130: PPUSH
51131: PPUSH
51132: PPUSH
51133: PPUSH
51134: PPUSH
51135: PPUSH
51136: PPUSH
51137: PPUSH
51138: PPUSH
51139: PPUSH
// result := false ;
51140: LD_ADDR_VAR 0 8
51144: PUSH
51145: LD_INT 0
51147: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51148: LD_VAR 0 5
51152: NOT
51153: PUSH
51154: LD_VAR 0 1
51158: NOT
51159: OR
51160: PUSH
51161: LD_VAR 0 2
51165: NOT
51166: OR
51167: PUSH
51168: LD_VAR 0 3
51172: NOT
51173: OR
51174: IFFALSE 51178
// exit ;
51176: GO 51992
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51178: LD_ADDR_VAR 0 14
51182: PUSH
51183: LD_VAR 0 1
51187: PPUSH
51188: LD_VAR 0 2
51192: PPUSH
51193: LD_VAR 0 3
51197: PPUSH
51198: LD_VAR 0 4
51202: PPUSH
51203: LD_VAR 0 5
51207: PUSH
51208: LD_INT 1
51210: ARRAY
51211: PPUSH
51212: CALL_OW 248
51216: PPUSH
51217: LD_INT 0
51219: PPUSH
51220: CALL 53229 0 6
51224: ST_TO_ADDR
// if not hexes then
51225: LD_VAR 0 14
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51992
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51234: LD_ADDR_VAR 0 17
51238: PUSH
51239: LD_VAR 0 5
51243: PPUSH
51244: LD_INT 22
51246: PUSH
51247: LD_VAR 0 13
51251: PPUSH
51252: CALL_OW 255
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 30
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 30
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PPUSH
51293: CALL_OW 72
51297: ST_TO_ADDR
// for i = 1 to hexes do
51298: LD_ADDR_VAR 0 9
51302: PUSH
51303: DOUBLE
51304: LD_INT 1
51306: DEC
51307: ST_TO_ADDR
51308: LD_VAR 0 14
51312: PUSH
51313: FOR_TO
51314: IFFALSE 51990
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51316: LD_ADDR_VAR 0 13
51320: PUSH
51321: LD_VAR 0 14
51325: PUSH
51326: LD_VAR 0 9
51330: ARRAY
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: PPUSH
51336: LD_VAR 0 14
51340: PUSH
51341: LD_VAR 0 9
51345: ARRAY
51346: PUSH
51347: LD_INT 2
51349: ARRAY
51350: PPUSH
51351: CALL_OW 428
51355: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51356: LD_VAR 0 14
51360: PUSH
51361: LD_VAR 0 9
51365: ARRAY
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PPUSH
51371: LD_VAR 0 14
51375: PUSH
51376: LD_VAR 0 9
51380: ARRAY
51381: PUSH
51382: LD_INT 2
51384: ARRAY
51385: PPUSH
51386: CALL_OW 351
51390: PUSH
51391: LD_VAR 0 14
51395: PUSH
51396: LD_VAR 0 9
51400: ARRAY
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: PPUSH
51406: LD_VAR 0 14
51410: PUSH
51411: LD_VAR 0 9
51415: ARRAY
51416: PUSH
51417: LD_INT 2
51419: ARRAY
51420: PPUSH
51421: CALL_OW 488
51425: NOT
51426: OR
51427: PUSH
51428: LD_VAR 0 13
51432: PPUSH
51433: CALL_OW 247
51437: PUSH
51438: LD_INT 3
51440: EQUAL
51441: OR
51442: IFFALSE 51448
// exit ;
51444: POP
51445: POP
51446: GO 51992
// if not tmp then
51448: LD_VAR 0 13
51452: NOT
51453: IFFALSE 51457
// continue ;
51455: GO 51313
// result := true ;
51457: LD_ADDR_VAR 0 8
51461: PUSH
51462: LD_INT 1
51464: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51465: LD_VAR 0 6
51469: PUSH
51470: LD_VAR 0 13
51474: PPUSH
51475: CALL_OW 247
51479: PUSH
51480: LD_INT 2
51482: EQUAL
51483: AND
51484: PUSH
51485: LD_VAR 0 13
51489: PPUSH
51490: CALL_OW 263
51494: PUSH
51495: LD_INT 1
51497: EQUAL
51498: AND
51499: IFFALSE 51663
// begin if IsDrivenBy ( tmp ) then
51501: LD_VAR 0 13
51505: PPUSH
51506: CALL_OW 311
51510: IFFALSE 51514
// continue ;
51512: GO 51313
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51514: LD_VAR 0 6
51518: PPUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 60
51524: PUSH
51525: EMPTY
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 55
51537: PUSH
51538: EMPTY
51539: LIST
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PPUSH
51549: CALL_OW 72
51553: IFFALSE 51661
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51555: LD_ADDR_VAR 0 18
51559: PUSH
51560: LD_VAR 0 6
51564: PPUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 60
51570: PUSH
51571: EMPTY
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: LD_INT 55
51583: PUSH
51584: EMPTY
51585: LIST
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PPUSH
51595: CALL_OW 72
51599: PUSH
51600: LD_INT 1
51602: ARRAY
51603: ST_TO_ADDR
// if IsInUnit ( driver ) then
51604: LD_VAR 0 18
51608: PPUSH
51609: CALL_OW 310
51613: IFFALSE 51624
// ComExit ( driver ) ;
51615: LD_VAR 0 18
51619: PPUSH
51620: CALL 76357 0 1
// AddComEnterUnit ( driver , tmp ) ;
51624: LD_VAR 0 18
51628: PPUSH
51629: LD_VAR 0 13
51633: PPUSH
51634: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51638: LD_VAR 0 18
51642: PPUSH
51643: LD_VAR 0 7
51647: PPUSH
51648: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51652: LD_VAR 0 18
51656: PPUSH
51657: CALL_OW 181
// end ; continue ;
51661: GO 51313
// end ; if not cleaners or not tmp in cleaners then
51663: LD_VAR 0 6
51667: NOT
51668: PUSH
51669: LD_VAR 0 13
51673: PUSH
51674: LD_VAR 0 6
51678: IN
51679: NOT
51680: OR
51681: IFFALSE 51988
// begin if dep then
51683: LD_VAR 0 17
51687: IFFALSE 51823
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51689: LD_ADDR_VAR 0 16
51693: PUSH
51694: LD_VAR 0 17
51698: PUSH
51699: LD_INT 1
51701: ARRAY
51702: PPUSH
51703: CALL_OW 250
51707: PPUSH
51708: LD_VAR 0 17
51712: PUSH
51713: LD_INT 1
51715: ARRAY
51716: PPUSH
51717: CALL_OW 254
51721: PPUSH
51722: LD_INT 5
51724: PPUSH
51725: CALL_OW 272
51729: PUSH
51730: LD_VAR 0 17
51734: PUSH
51735: LD_INT 1
51737: ARRAY
51738: PPUSH
51739: CALL_OW 251
51743: PPUSH
51744: LD_VAR 0 17
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: PPUSH
51753: CALL_OW 254
51757: PPUSH
51758: LD_INT 5
51760: PPUSH
51761: CALL_OW 273
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51770: LD_VAR 0 16
51774: PUSH
51775: LD_INT 1
51777: ARRAY
51778: PPUSH
51779: LD_VAR 0 16
51783: PUSH
51784: LD_INT 2
51786: ARRAY
51787: PPUSH
51788: CALL_OW 488
51792: IFFALSE 51823
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51794: LD_VAR 0 13
51798: PPUSH
51799: LD_VAR 0 16
51803: PUSH
51804: LD_INT 1
51806: ARRAY
51807: PPUSH
51808: LD_VAR 0 16
51812: PUSH
51813: LD_INT 2
51815: ARRAY
51816: PPUSH
51817: CALL_OW 111
// continue ;
51821: GO 51313
// end ; end ; r := GetDir ( tmp ) ;
51823: LD_ADDR_VAR 0 15
51827: PUSH
51828: LD_VAR 0 13
51832: PPUSH
51833: CALL_OW 254
51837: ST_TO_ADDR
// if r = 5 then
51838: LD_VAR 0 15
51842: PUSH
51843: LD_INT 5
51845: EQUAL
51846: IFFALSE 51856
// r := 0 ;
51848: LD_ADDR_VAR 0 15
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
// for j = r to 5 do
51856: LD_ADDR_VAR 0 10
51860: PUSH
51861: DOUBLE
51862: LD_VAR 0 15
51866: DEC
51867: ST_TO_ADDR
51868: LD_INT 5
51870: PUSH
51871: FOR_TO
51872: IFFALSE 51986
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51874: LD_ADDR_VAR 0 11
51878: PUSH
51879: LD_VAR 0 13
51883: PPUSH
51884: CALL_OW 250
51888: PPUSH
51889: LD_VAR 0 10
51893: PPUSH
51894: LD_INT 2
51896: PPUSH
51897: CALL_OW 272
51901: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51902: LD_ADDR_VAR 0 12
51906: PUSH
51907: LD_VAR 0 13
51911: PPUSH
51912: CALL_OW 251
51916: PPUSH
51917: LD_VAR 0 10
51921: PPUSH
51922: LD_INT 2
51924: PPUSH
51925: CALL_OW 273
51929: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51930: LD_VAR 0 11
51934: PPUSH
51935: LD_VAR 0 12
51939: PPUSH
51940: CALL_OW 488
51944: PUSH
51945: LD_VAR 0 11
51949: PPUSH
51950: LD_VAR 0 12
51954: PPUSH
51955: CALL_OW 428
51959: NOT
51960: AND
51961: IFFALSE 51984
// begin ComMoveXY ( tmp , _x , _y ) ;
51963: LD_VAR 0 13
51967: PPUSH
51968: LD_VAR 0 11
51972: PPUSH
51973: LD_VAR 0 12
51977: PPUSH
51978: CALL_OW 111
// break ;
51982: GO 51986
// end ; end ;
51984: GO 51871
51986: POP
51987: POP
// end ; end ;
51988: GO 51313
51990: POP
51991: POP
// end ;
51992: LD_VAR 0 8
51996: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51997: LD_INT 0
51999: PPUSH
// result := true ;
52000: LD_ADDR_VAR 0 3
52004: PUSH
52005: LD_INT 1
52007: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52008: LD_VAR 0 2
52012: PUSH
52013: LD_INT 24
52015: DOUBLE
52016: EQUAL
52017: IFTRUE 52027
52019: LD_INT 33
52021: DOUBLE
52022: EQUAL
52023: IFTRUE 52027
52025: GO 52052
52027: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_INT 32
52035: PPUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 321
52045: PUSH
52046: LD_INT 2
52048: EQUAL
52049: ST_TO_ADDR
52050: GO 52372
52052: LD_INT 20
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52060
52058: GO 52085
52060: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52061: LD_ADDR_VAR 0 3
52065: PUSH
52066: LD_INT 6
52068: PPUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 321
52078: PUSH
52079: LD_INT 2
52081: EQUAL
52082: ST_TO_ADDR
52083: GO 52372
52085: LD_INT 22
52087: DOUBLE
52088: EQUAL
52089: IFTRUE 52099
52091: LD_INT 36
52093: DOUBLE
52094: EQUAL
52095: IFTRUE 52099
52097: GO 52124
52099: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52100: LD_ADDR_VAR 0 3
52104: PUSH
52105: LD_INT 15
52107: PPUSH
52108: LD_VAR 0 1
52112: PPUSH
52113: CALL_OW 321
52117: PUSH
52118: LD_INT 2
52120: EQUAL
52121: ST_TO_ADDR
52122: GO 52372
52124: LD_INT 30
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52132
52130: GO 52157
52132: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52133: LD_ADDR_VAR 0 3
52137: PUSH
52138: LD_INT 20
52140: PPUSH
52141: LD_VAR 0 1
52145: PPUSH
52146: CALL_OW 321
52150: PUSH
52151: LD_INT 2
52153: EQUAL
52154: ST_TO_ADDR
52155: GO 52372
52157: LD_INT 28
52159: DOUBLE
52160: EQUAL
52161: IFTRUE 52171
52163: LD_INT 21
52165: DOUBLE
52166: EQUAL
52167: IFTRUE 52171
52169: GO 52196
52171: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52172: LD_ADDR_VAR 0 3
52176: PUSH
52177: LD_INT 21
52179: PPUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 321
52189: PUSH
52190: LD_INT 2
52192: EQUAL
52193: ST_TO_ADDR
52194: GO 52372
52196: LD_INT 16
52198: DOUBLE
52199: EQUAL
52200: IFTRUE 52204
52202: GO 52231
52204: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52205: LD_ADDR_VAR 0 3
52209: PUSH
52210: LD_EXP 62
52214: PPUSH
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 321
52224: PUSH
52225: LD_INT 2
52227: EQUAL
52228: ST_TO_ADDR
52229: GO 52372
52231: LD_INT 19
52233: DOUBLE
52234: EQUAL
52235: IFTRUE 52245
52237: LD_INT 23
52239: DOUBLE
52240: EQUAL
52241: IFTRUE 52245
52243: GO 52272
52245: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52246: LD_ADDR_VAR 0 3
52250: PUSH
52251: LD_EXP 61
52255: PPUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 321
52265: PUSH
52266: LD_INT 2
52268: EQUAL
52269: ST_TO_ADDR
52270: GO 52372
52272: LD_INT 17
52274: DOUBLE
52275: EQUAL
52276: IFTRUE 52280
52278: GO 52305
52280: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52281: LD_ADDR_VAR 0 3
52285: PUSH
52286: LD_INT 39
52288: PPUSH
52289: LD_VAR 0 1
52293: PPUSH
52294: CALL_OW 321
52298: PUSH
52299: LD_INT 2
52301: EQUAL
52302: ST_TO_ADDR
52303: GO 52372
52305: LD_INT 18
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52313
52311: GO 52338
52313: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52314: LD_ADDR_VAR 0 3
52318: PUSH
52319: LD_INT 40
52321: PPUSH
52322: LD_VAR 0 1
52326: PPUSH
52327: CALL_OW 321
52331: PUSH
52332: LD_INT 2
52334: EQUAL
52335: ST_TO_ADDR
52336: GO 52372
52338: LD_INT 27
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52346
52344: GO 52371
52346: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52347: LD_ADDR_VAR 0 3
52351: PUSH
52352: LD_INT 35
52354: PPUSH
52355: LD_VAR 0 1
52359: PPUSH
52360: CALL_OW 321
52364: PUSH
52365: LD_INT 2
52367: EQUAL
52368: ST_TO_ADDR
52369: GO 52372
52371: POP
// end ;
52372: LD_VAR 0 3
52376: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52377: LD_INT 0
52379: PPUSH
52380: PPUSH
52381: PPUSH
52382: PPUSH
52383: PPUSH
52384: PPUSH
52385: PPUSH
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
// result := false ;
52390: LD_ADDR_VAR 0 6
52394: PUSH
52395: LD_INT 0
52397: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52398: LD_VAR 0 1
52402: NOT
52403: PUSH
52404: LD_VAR 0 1
52408: PPUSH
52409: CALL_OW 266
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: IN
52424: NOT
52425: OR
52426: PUSH
52427: LD_VAR 0 2
52431: NOT
52432: OR
52433: PUSH
52434: LD_VAR 0 5
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 4
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: IN
52465: NOT
52466: OR
52467: PUSH
52468: LD_VAR 0 3
52472: PPUSH
52473: LD_VAR 0 4
52477: PPUSH
52478: CALL_OW 488
52482: NOT
52483: OR
52484: IFFALSE 52488
// exit ;
52486: GO 53224
// side := GetSide ( depot ) ;
52488: LD_ADDR_VAR 0 9
52492: PUSH
52493: LD_VAR 0 1
52497: PPUSH
52498: CALL_OW 255
52502: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52503: LD_VAR 0 9
52507: PPUSH
52508: LD_VAR 0 2
52512: PPUSH
52513: CALL 51997 0 2
52517: NOT
52518: IFFALSE 52522
// exit ;
52520: GO 53224
// pom := GetBase ( depot ) ;
52522: LD_ADDR_VAR 0 10
52526: PUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL_OW 274
52536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52537: LD_ADDR_VAR 0 11
52541: PUSH
52542: LD_VAR 0 2
52546: PPUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: CALL_OW 248
52556: PPUSH
52557: CALL_OW 450
52561: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52562: LD_VAR 0 10
52566: PPUSH
52567: LD_INT 1
52569: PPUSH
52570: CALL_OW 275
52574: PUSH
52575: LD_VAR 0 11
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: GREATEREQUAL
52584: PUSH
52585: LD_VAR 0 10
52589: PPUSH
52590: LD_INT 2
52592: PPUSH
52593: CALL_OW 275
52597: PUSH
52598: LD_VAR 0 11
52602: PUSH
52603: LD_INT 2
52605: ARRAY
52606: GREATEREQUAL
52607: AND
52608: PUSH
52609: LD_VAR 0 10
52613: PPUSH
52614: LD_INT 3
52616: PPUSH
52617: CALL_OW 275
52621: PUSH
52622: LD_VAR 0 11
52626: PUSH
52627: LD_INT 3
52629: ARRAY
52630: GREATEREQUAL
52631: AND
52632: NOT
52633: IFFALSE 52637
// exit ;
52635: GO 53224
// if GetBType ( depot ) = b_depot then
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 266
52646: PUSH
52647: LD_INT 0
52649: EQUAL
52650: IFFALSE 52662
// dist := 28 else
52652: LD_ADDR_VAR 0 14
52656: PUSH
52657: LD_INT 28
52659: ST_TO_ADDR
52660: GO 52670
// dist := 36 ;
52662: LD_ADDR_VAR 0 14
52666: PUSH
52667: LD_INT 36
52669: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52670: LD_VAR 0 1
52674: PPUSH
52675: LD_VAR 0 3
52679: PPUSH
52680: LD_VAR 0 4
52684: PPUSH
52685: CALL_OW 297
52689: PUSH
52690: LD_VAR 0 14
52694: GREATER
52695: IFFALSE 52699
// exit ;
52697: GO 53224
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52699: LD_ADDR_VAR 0 12
52703: PUSH
52704: LD_VAR 0 2
52708: PPUSH
52709: LD_VAR 0 3
52713: PPUSH
52714: LD_VAR 0 4
52718: PPUSH
52719: LD_VAR 0 5
52723: PPUSH
52724: LD_VAR 0 1
52728: PPUSH
52729: CALL_OW 248
52733: PPUSH
52734: LD_INT 0
52736: PPUSH
52737: CALL 53229 0 6
52741: ST_TO_ADDR
// if not hexes then
52742: LD_VAR 0 12
52746: NOT
52747: IFFALSE 52751
// exit ;
52749: GO 53224
// hex := GetHexInfo ( x , y ) ;
52751: LD_ADDR_VAR 0 15
52755: PUSH
52756: LD_VAR 0 3
52760: PPUSH
52761: LD_VAR 0 4
52765: PPUSH
52766: CALL_OW 546
52770: ST_TO_ADDR
// if hex [ 1 ] then
52771: LD_VAR 0 15
52775: PUSH
52776: LD_INT 1
52778: ARRAY
52779: IFFALSE 52783
// exit ;
52781: GO 53224
// height := hex [ 2 ] ;
52783: LD_ADDR_VAR 0 13
52787: PUSH
52788: LD_VAR 0 15
52792: PUSH
52793: LD_INT 2
52795: ARRAY
52796: ST_TO_ADDR
// for i = 1 to hexes do
52797: LD_ADDR_VAR 0 7
52801: PUSH
52802: DOUBLE
52803: LD_INT 1
52805: DEC
52806: ST_TO_ADDR
52807: LD_VAR 0 12
52811: PUSH
52812: FOR_TO
52813: IFFALSE 53143
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52815: LD_VAR 0 12
52819: PUSH
52820: LD_VAR 0 7
52824: ARRAY
52825: PUSH
52826: LD_INT 1
52828: ARRAY
52829: PPUSH
52830: LD_VAR 0 12
52834: PUSH
52835: LD_VAR 0 7
52839: ARRAY
52840: PUSH
52841: LD_INT 2
52843: ARRAY
52844: PPUSH
52845: CALL_OW 488
52849: NOT
52850: PUSH
52851: LD_VAR 0 12
52855: PUSH
52856: LD_VAR 0 7
52860: ARRAY
52861: PUSH
52862: LD_INT 1
52864: ARRAY
52865: PPUSH
52866: LD_VAR 0 12
52870: PUSH
52871: LD_VAR 0 7
52875: ARRAY
52876: PUSH
52877: LD_INT 2
52879: ARRAY
52880: PPUSH
52881: CALL_OW 428
52885: PUSH
52886: LD_INT 0
52888: GREATER
52889: OR
52890: PUSH
52891: LD_VAR 0 12
52895: PUSH
52896: LD_VAR 0 7
52900: ARRAY
52901: PUSH
52902: LD_INT 1
52904: ARRAY
52905: PPUSH
52906: LD_VAR 0 12
52910: PUSH
52911: LD_VAR 0 7
52915: ARRAY
52916: PUSH
52917: LD_INT 2
52919: ARRAY
52920: PPUSH
52921: CALL_OW 351
52925: OR
52926: IFFALSE 52932
// exit ;
52928: POP
52929: POP
52930: GO 53224
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52932: LD_ADDR_VAR 0 8
52936: PUSH
52937: LD_VAR 0 12
52941: PUSH
52942: LD_VAR 0 7
52946: ARRAY
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PPUSH
52952: LD_VAR 0 12
52956: PUSH
52957: LD_VAR 0 7
52961: ARRAY
52962: PUSH
52963: LD_INT 2
52965: ARRAY
52966: PPUSH
52967: CALL_OW 546
52971: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52972: LD_VAR 0 8
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: PUSH
52981: LD_VAR 0 8
52985: PUSH
52986: LD_INT 2
52988: ARRAY
52989: PUSH
52990: LD_VAR 0 13
52994: PUSH
52995: LD_INT 2
52997: PLUS
52998: GREATER
52999: OR
53000: PUSH
53001: LD_VAR 0 8
53005: PUSH
53006: LD_INT 2
53008: ARRAY
53009: PUSH
53010: LD_VAR 0 13
53014: PUSH
53015: LD_INT 2
53017: MINUS
53018: LESS
53019: OR
53020: PUSH
53021: LD_VAR 0 8
53025: PUSH
53026: LD_INT 3
53028: ARRAY
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 8
53035: PUSH
53036: LD_INT 9
53038: PUSH
53039: LD_INT 10
53041: PUSH
53042: LD_INT 11
53044: PUSH
53045: LD_INT 12
53047: PUSH
53048: LD_INT 13
53050: PUSH
53051: LD_INT 16
53053: PUSH
53054: LD_INT 17
53056: PUSH
53057: LD_INT 18
53059: PUSH
53060: LD_INT 19
53062: PUSH
53063: LD_INT 20
53065: PUSH
53066: LD_INT 21
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: IN
53084: NOT
53085: OR
53086: PUSH
53087: LD_VAR 0 8
53091: PUSH
53092: LD_INT 5
53094: ARRAY
53095: NOT
53096: OR
53097: PUSH
53098: LD_VAR 0 8
53102: PUSH
53103: LD_INT 6
53105: ARRAY
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 7
53115: PUSH
53116: LD_INT 9
53118: PUSH
53119: LD_INT 10
53121: PUSH
53122: LD_INT 11
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: IN
53133: NOT
53134: OR
53135: IFFALSE 53141
// exit ;
53137: POP
53138: POP
53139: GO 53224
// end ;
53141: GO 52812
53143: POP
53144: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53145: LD_VAR 0 9
53149: PPUSH
53150: LD_VAR 0 3
53154: PPUSH
53155: LD_VAR 0 4
53159: PPUSH
53160: LD_INT 20
53162: PPUSH
53163: CALL 45170 0 4
53167: PUSH
53168: LD_INT 4
53170: ARRAY
53171: IFFALSE 53175
// exit ;
53173: GO 53224
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 29
53182: PUSH
53183: LD_INT 30
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: IN
53190: PUSH
53191: LD_VAR 0 3
53195: PPUSH
53196: LD_VAR 0 4
53200: PPUSH
53201: LD_VAR 0 9
53205: PPUSH
53206: CALL_OW 440
53210: NOT
53211: AND
53212: IFFALSE 53216
// exit ;
53214: GO 53224
// result := true ;
53216: LD_ADDR_VAR 0 6
53220: PUSH
53221: LD_INT 1
53223: ST_TO_ADDR
// end ;
53224: LD_VAR 0 6
53228: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53229: LD_INT 0
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
53268: PPUSH
53269: PPUSH
53270: PPUSH
53271: PPUSH
53272: PPUSH
53273: PPUSH
53274: PPUSH
53275: PPUSH
53276: PPUSH
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
53281: PPUSH
53282: PPUSH
53283: PPUSH
53284: PPUSH
53285: PPUSH
53286: PPUSH
53287: PPUSH
53288: PPUSH
// result = [ ] ;
53289: LD_ADDR_VAR 0 7
53293: PUSH
53294: EMPTY
53295: ST_TO_ADDR
// temp_list = [ ] ;
53296: LD_ADDR_VAR 0 9
53300: PUSH
53301: EMPTY
53302: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53303: LD_VAR 0 4
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 5
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: IN
53334: NOT
53335: PUSH
53336: LD_VAR 0 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: IN
53351: PUSH
53352: LD_VAR 0 5
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: IN
53371: NOT
53372: AND
53373: OR
53374: IFFALSE 53378
// exit ;
53376: GO 71769
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53378: LD_VAR 0 1
53382: PUSH
53383: LD_INT 6
53385: PUSH
53386: LD_INT 7
53388: PUSH
53389: LD_INT 8
53391: PUSH
53392: LD_INT 13
53394: PUSH
53395: LD_INT 12
53397: PUSH
53398: LD_INT 15
53400: PUSH
53401: LD_INT 11
53403: PUSH
53404: LD_INT 14
53406: PUSH
53407: LD_INT 10
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: IN
53421: IFFALSE 53431
// btype = b_lab ;
53423: LD_ADDR_VAR 0 1
53427: PUSH
53428: LD_INT 6
53430: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53431: LD_VAR 0 6
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: IN
53450: NOT
53451: PUSH
53452: LD_VAR 0 1
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 6
53471: PUSH
53472: LD_INT 36
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 5
53480: PUSH
53481: LD_INT 31
53483: PUSH
53484: LD_INT 32
53486: PUSH
53487: LD_INT 33
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: IN
53503: NOT
53504: PUSH
53505: LD_VAR 0 6
53509: PUSH
53510: LD_INT 1
53512: EQUAL
53513: AND
53514: OR
53515: PUSH
53516: LD_VAR 0 1
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: IN
53531: NOT
53532: PUSH
53533: LD_VAR 0 6
53537: PUSH
53538: LD_INT 2
53540: EQUAL
53541: AND
53542: OR
53543: IFFALSE 53553
// mode = 0 ;
53545: LD_ADDR_VAR 0 6
53549: PUSH
53550: LD_INT 0
53552: ST_TO_ADDR
// case mode of 0 :
53553: LD_VAR 0 6
53557: PUSH
53558: LD_INT 0
53560: DOUBLE
53561: EQUAL
53562: IFTRUE 53566
53564: GO 65019
53566: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53567: LD_ADDR_VAR 0 11
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53760: LD_ADDR_VAR 0 12
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53956: LD_ADDR_VAR 0 13
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54155: LD_ADDR_VAR 0 14
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54351: LD_ADDR_VAR 0 15
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54544: LD_ADDR_VAR 0 16
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54737: LD_ADDR_VAR 0 17
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54967: LD_ADDR_VAR 0 18
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55197: LD_ADDR_VAR 0 19
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55427: LD_ADDR_VAR 0 20
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55657: LD_ADDR_VAR 0 21
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55887: LD_ADDR_VAR 0 22
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56117: LD_ADDR_VAR 0 23
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56397: LD_ADDR_VAR 0 24
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56673: LD_ADDR_VAR 0 25
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56947: LD_ADDR_VAR 0 26
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57223: LD_ADDR_VAR 0 27
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57503: LD_ADDR_VAR 0 28
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57785: LD_ADDR_VAR 0 29
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 3
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58064: LD_ADDR_VAR 0 30
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58342: LD_ADDR_VAR 0 31
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58620: LD_ADDR_VAR 0 32
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 2
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58898: LD_ADDR_VAR 0 33
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 3
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59177: LD_ADDR_VAR 0 34
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: LD_INT 3
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59457: LD_ADDR_VAR 0 35
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59569: LD_ADDR_VAR 0 36
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59681: LD_ADDR_VAR 0 37
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59793: LD_ADDR_VAR 0 38
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59905: LD_ADDR_VAR 0 39
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60017: LD_ADDR_VAR 0 40
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60129: LD_ADDR_VAR 0 41
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60479: LD_ADDR_VAR 0 42
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 3
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60829: LD_ADDR_VAR 0 43
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61177: LD_ADDR_VAR 0 44
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: NEG
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61527: LD_ADDR_VAR 0 45
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 3
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61877: LD_ADDR_VAR 0 46
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 2
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: LD_INT 3
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 3
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62225: LD_ADDR_VAR 0 47
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62376: LD_ADDR_VAR 0 48
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62523: LD_ADDR_VAR 0 49
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62667: LD_ADDR_VAR 0 50
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 2
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62811: LD_ADDR_VAR 0 51
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62958: LD_ADDR_VAR 0 52
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63109: LD_ADDR_VAR 0 53
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63339: LD_ADDR_VAR 0 54
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63569: LD_ADDR_VAR 0 55
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: NEG
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63799: LD_ADDR_VAR 0 56
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64029: LD_ADDR_VAR 0 57
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64259: LD_ADDR_VAR 0 58
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 2
64435: NEG
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64489: LD_ADDR_VAR 0 59
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64577: LD_ADDR_VAR 0 60
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64665: LD_ADDR_VAR 0 61
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64753: LD_ADDR_VAR 0 62
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64841: LD_ADDR_VAR 0 63
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 1
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64929: LD_ADDR_VAR 0 64
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: ST_TO_ADDR
// end ; 1 :
65017: GO 70914
65019: LD_INT 1
65021: DOUBLE
65022: EQUAL
65023: IFTRUE 65027
65025: GO 67650
65027: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65028: LD_ADDR_VAR 0 11
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65072: LD_ADDR_VAR 0 12
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65113: LD_ADDR_VAR 0 13
65117: PUSH
65118: LD_INT 3
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65153: LD_ADDR_VAR 0 14
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 3
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: LIST
65193: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65194: LD_ADDR_VAR 0 15
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65238: LD_ADDR_VAR 0 16
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65284: LD_ADDR_VAR 0 17
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65328: LD_ADDR_VAR 0 18
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65369: LD_ADDR_VAR 0 19
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 3
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65409: LD_ADDR_VAR 0 20
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 3
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 3
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: LIST
65449: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65450: LD_ADDR_VAR 0 21
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65494: LD_ADDR_VAR 0 22
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: LD_INT 3
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65540: LD_ADDR_VAR 0 23
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 3
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65584: LD_ADDR_VAR 0 24
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65625: LD_ADDR_VAR 0 25
65629: PUSH
65630: LD_INT 3
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 4
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: LD_INT 4
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65665: LD_ADDR_VAR 0 26
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: LD_INT 4
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65706: LD_ADDR_VAR 0 27
65710: PUSH
65711: LD_INT 3
65713: NEG
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 3
65724: NEG
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 4
65735: NEG
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65750: LD_ADDR_VAR 0 28
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 3
65769: NEG
65770: PUSH
65771: LD_INT 4
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65796: LD_ADDR_VAR 0 29
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: LD_INT 3
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: LD_INT 4
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 4
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: LD_INT 3
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 5
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 5
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 4
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 6
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 6
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 5
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65951: LD_ADDR_VAR 0 30
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 5
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 5
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 5
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 6
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 6
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66094: LD_ADDR_VAR 0 31
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 5
66161: PUSH
66162: LD_INT 4
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: PUSH
66172: LD_INT 5
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: PUSH
66182: LD_INT 5
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 6
66191: PUSH
66192: LD_INT 5
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 6
66201: PUSH
66202: LD_INT 6
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 5
66211: PUSH
66212: LD_INT 6
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66233: LD_ADDR_VAR 0 32
66237: PUSH
66238: LD_INT 1
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 4
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 5
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 1
66333: PUSH
66334: LD_INT 6
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 6
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 5
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66376: LD_ADDR_VAR 0 33
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 3
66417: NEG
66418: PUSH
66419: LD_INT 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 4
66428: NEG
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 4
66439: NEG
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 5
66462: NEG
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 5
66473: NEG
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 5
66485: NEG
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 6
66496: NEG
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 6
66507: NEG
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66531: LD_ADDR_VAR 0 34
66535: PUSH
66536: LD_INT 2
66538: NEG
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: LD_INT 2
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: LD_INT 3
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 4
66598: NEG
66599: PUSH
66600: LD_INT 4
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 4
66610: NEG
66611: PUSH
66612: LD_INT 5
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 5
66622: NEG
66623: PUSH
66624: LD_INT 4
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 5
66634: NEG
66635: PUSH
66636: LD_INT 5
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 5
66646: NEG
66647: PUSH
66648: LD_INT 6
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 6
66658: NEG
66659: PUSH
66660: LD_INT 5
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 6
66670: NEG
66671: PUSH
66672: LD_INT 6
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66694: LD_ADDR_VAR 0 41
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 2
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66738: LD_ADDR_VAR 0 42
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66779: LD_ADDR_VAR 0 43
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: LIST
66818: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66819: LD_ADDR_VAR 0 44
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: LIST
66859: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66860: LD_ADDR_VAR 0 45
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66904: LD_ADDR_VAR 0 46
66908: PUSH
66909: LD_INT 2
66911: NEG
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 2
66923: NEG
66924: PUSH
66925: LD_INT 3
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 3
66935: NEG
66936: PUSH
66937: LD_INT 2
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66950: LD_ADDR_VAR 0 47
66954: PUSH
66955: LD_INT 2
66957: NEG
66958: PUSH
66959: LD_INT 3
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66983: LD_ADDR_VAR 0 48
66987: PUSH
66988: LD_INT 1
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 1
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67014: LD_ADDR_VAR 0 49
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67043: LD_ADDR_VAR 0 50
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67072: LD_ADDR_VAR 0 51
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67103: LD_ADDR_VAR 0 52
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67136: LD_ADDR_VAR 0 53
67140: PUSH
67141: LD_INT 1
67143: NEG
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: LD_INT 3
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67180: LD_ADDR_VAR 0 54
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67221: LD_ADDR_VAR 0 55
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: LIST
67260: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67261: LD_ADDR_VAR 0 56
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67302: LD_ADDR_VAR 0 57
67306: PUSH
67307: LD_INT 2
67309: NEG
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: NEG
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67346: LD_ADDR_VAR 0 58
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67392: LD_ADDR_VAR 0 59
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 2
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67436: LD_ADDR_VAR 0 60
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67477: LD_ADDR_VAR 0 61
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67517: LD_ADDR_VAR 0 62
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67558: LD_ADDR_VAR 0 63
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: NEG
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 2
67587: NEG
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67602: LD_ADDR_VAR 0 64
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 2
67633: NEG
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// end ; 2 :
67648: GO 70914
67650: LD_INT 2
67652: DOUBLE
67653: EQUAL
67654: IFTRUE 67658
67656: GO 70913
67658: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67659: LD_ADDR_VAR 0 29
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 5
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: LD_INT 1
67730: NEG
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 5
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: LD_INT 3
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: LD_INT 2
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: PUSH
67780: LD_INT 3
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 4
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 3
67799: PUSH
67800: LD_INT 4
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: LD_INT 2
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 5
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 1
67899: NEG
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: LD_INT 3
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: LD_INT 5
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 2
67931: NEG
67932: PUSH
67933: LD_INT 3
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 2
67976: NEG
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 3
67987: NEG
67988: PUSH
67989: LD_INT 1
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 4
67998: NEG
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 4
68009: NEG
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 4
68021: NEG
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: LD_INT 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: NEG
68045: PUSH
68046: LD_INT 4
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 4
68056: NEG
68057: PUSH
68058: LD_INT 5
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 3
68068: NEG
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 3
68080: NEG
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 4
68092: NEG
68093: PUSH
68094: LD_INT 3
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 5
68104: NEG
68105: PUSH
68106: LD_INT 4
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 5
68116: NEG
68117: PUSH
68118: LD_INT 5
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: NEG
68129: PUSH
68130: LD_INT 5
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 5
68140: NEG
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68197: LD_ADDR_VAR 0 30
68201: PUSH
68202: LD_INT 4
68204: PUSH
68205: LD_INT 4
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 5
68234: PUSH
68235: LD_INT 5
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 4
68244: PUSH
68245: LD_INT 5
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 5
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 5
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: LD_INT 3
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: LD_INT 3
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 1
68355: NEG
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 4
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: LD_INT 2
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: NEG
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 1
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 4
68432: NEG
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 5
68443: NEG
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 5
68454: NEG
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 5
68466: NEG
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: LD_INT 3
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 3
68501: NEG
68502: PUSH
68503: LD_INT 4
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: NEG
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 3
68537: NEG
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 4
68549: NEG
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 4
68561: NEG
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: NEG
68574: PUSH
68575: LD_INT 4
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: LD_INT 4
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 5
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: LD_INT 4
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: LD_INT 3
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 4
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 1
68664: NEG
68665: PUSH
68666: LD_INT 5
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68744: LD_ADDR_VAR 0 31
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: LD_INT 4
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: LD_INT 5
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 5
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: NEG
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: LD_INT 5
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: NEG
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: NEG
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 3
68889: NEG
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 4
68900: NEG
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 4
68911: NEG
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 4
68946: NEG
68947: PUSH
68948: LD_INT 4
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: NEG
68959: PUSH
68960: LD_INT 5
68962: NEG
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: NEG
68971: PUSH
68972: LD_INT 4
68974: NEG
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 3
68982: NEG
68983: PUSH
68984: LD_INT 3
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 5
69006: NEG
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 5
69018: NEG
69019: PUSH
69020: LD_INT 5
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 5
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 5
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 4
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: LD_INT 3
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: LD_INT 2
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: NEG
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: LD_INT 4
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 2
69133: PUSH
69134: LD_INT 2
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: NEG
69145: PUSH
69146: LD_INT 4
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: LD_INT 0
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 4
69166: PUSH
69167: LD_INT 1
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 5
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 5
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 4
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 3
69217: PUSH
69218: LD_INT 1
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 3
69228: PUSH
69229: LD_INT 2
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 5
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69294: LD_ADDR_VAR 0 32
69298: PUSH
69299: LD_INT 4
69301: NEG
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 3
69335: NEG
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 4
69346: NEG
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 5
69357: NEG
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: NEG
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 5
69380: NEG
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: NEG
69416: PUSH
69417: LD_INT 4
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 2
69427: NEG
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 2
69439: NEG
69440: PUSH
69441: LD_INT 2
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 4
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: NEG
69476: PUSH
69477: LD_INT 4
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: NEG
69488: PUSH
69489: LD_INT 4
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: NEG
69500: PUSH
69501: LD_INT 2
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: LD_INT 4
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 5
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: LD_INT 4
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: LD_INT 3
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 5
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: LD_INT 3
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 2
69601: NEG
69602: PUSH
69603: LD_INT 5
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 3
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 4
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 3
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 2
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 4
69696: PUSH
69697: LD_INT 2
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 4
69706: PUSH
69707: LD_INT 4
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 4
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 5
69726: PUSH
69727: LD_INT 4
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 5
69736: PUSH
69737: LD_INT 5
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 4
69746: PUSH
69747: LD_INT 5
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: LD_INT 3
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 5
69776: PUSH
69777: LD_INT 3
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 3
69786: PUSH
69787: LD_INT 5
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69841: LD_ADDR_VAR 0 33
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: LD_INT 4
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 4
69860: NEG
69861: PUSH
69862: LD_INT 5
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: LD_INT 4
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 3
69884: NEG
69885: PUSH
69886: LD_INT 3
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 4
69896: NEG
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 5
69908: NEG
69909: PUSH
69910: LD_INT 4
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 5
69920: NEG
69921: PUSH
69922: LD_INT 5
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: LD_INT 5
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 5
69944: NEG
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: LD_INT 3
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: LD_INT 2
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 2
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 3
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: LD_INT 4
70027: NEG
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 2
70035: PUSH
70036: LD_INT 2
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: LD_INT 4
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 4
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: PUSH
70069: LD_INT 1
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 5
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 5
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 4
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 1
70122: NEG
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 5
70141: PUSH
70142: LD_INT 2
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 4
70171: PUSH
70172: LD_INT 3
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 3
70191: PUSH
70192: LD_INT 4
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 3
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 2
70211: PUSH
70212: LD_INT 2
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 4
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: LD_INT 3
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: LD_INT 5
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: LD_INT 5
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 1
70291: NEG
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: NEG
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: LD_INT 5
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 2
70323: NEG
70324: PUSH
70325: LD_INT 3
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70379: LD_ADDR_VAR 0 34
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: LD_INT 5
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: LD_INT 4
70411: NEG
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 1
70419: PUSH
70420: LD_INT 3
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 0
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: LD_INT 4
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: LD_INT 5
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: LD_INT 3
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 2
70476: NEG
70477: PUSH
70478: LD_INT 5
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 3
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 3
70498: PUSH
70499: LD_INT 1
70501: NEG
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 2
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 2
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 2
70560: PUSH
70561: LD_INT 2
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 4
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: PUSH
70582: LD_INT 4
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 5
70601: PUSH
70602: LD_INT 4
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 5
70611: PUSH
70612: LD_INT 5
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 4
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: LD_INT 4
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 3
70641: PUSH
70642: LD_INT 3
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 5
70651: PUSH
70652: LD_INT 3
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 3
70661: PUSH
70662: LD_INT 5
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 3
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 0
70681: PUSH
70682: LD_INT 2
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: LD_INT 3
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: PUSH
70702: LD_INT 4
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: LD_INT 4
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: NEG
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: LD_INT 2
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 2
70753: NEG
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 4
70764: NEG
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 4
70775: NEG
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: LD_INT 0
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 3
70798: NEG
70799: PUSH
70800: LD_INT 1
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 4
70809: NEG
70810: PUSH
70811: LD_INT 1
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 5
70820: NEG
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 5
70831: NEG
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 5
70843: NEG
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: LD_INT 2
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: ST_TO_ADDR
// end ; end ;
70911: GO 70914
70913: POP
// case btype of b_depot , b_warehouse :
70914: LD_VAR 0 1
70918: PUSH
70919: LD_INT 0
70921: DOUBLE
70922: EQUAL
70923: IFTRUE 70933
70925: LD_INT 1
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70933
70931: GO 71134
70933: POP
// case nation of nation_american :
70934: LD_VAR 0 5
70938: PUSH
70939: LD_INT 1
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70947
70945: GO 71003
70947: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70948: LD_ADDR_VAR 0 9
70952: PUSH
70953: LD_VAR 0 11
70957: PUSH
70958: LD_VAR 0 12
70962: PUSH
70963: LD_VAR 0 13
70967: PUSH
70968: LD_VAR 0 14
70972: PUSH
70973: LD_VAR 0 15
70977: PUSH
70978: LD_VAR 0 16
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: PUSH
70991: LD_VAR 0 4
70995: PUSH
70996: LD_INT 1
70998: PLUS
70999: ARRAY
71000: ST_TO_ADDR
71001: GO 71132
71003: LD_INT 2
71005: DOUBLE
71006: EQUAL
71007: IFTRUE 71011
71009: GO 71067
71011: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71012: LD_ADDR_VAR 0 9
71016: PUSH
71017: LD_VAR 0 17
71021: PUSH
71022: LD_VAR 0 18
71026: PUSH
71027: LD_VAR 0 19
71031: PUSH
71032: LD_VAR 0 20
71036: PUSH
71037: LD_VAR 0 21
71041: PUSH
71042: LD_VAR 0 22
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: PUSH
71055: LD_VAR 0 4
71059: PUSH
71060: LD_INT 1
71062: PLUS
71063: ARRAY
71064: ST_TO_ADDR
71065: GO 71132
71067: LD_INT 3
71069: DOUBLE
71070: EQUAL
71071: IFTRUE 71075
71073: GO 71131
71075: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71076: LD_ADDR_VAR 0 9
71080: PUSH
71081: LD_VAR 0 23
71085: PUSH
71086: LD_VAR 0 24
71090: PUSH
71091: LD_VAR 0 25
71095: PUSH
71096: LD_VAR 0 26
71100: PUSH
71101: LD_VAR 0 27
71105: PUSH
71106: LD_VAR 0 28
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: PUSH
71119: LD_VAR 0 4
71123: PUSH
71124: LD_INT 1
71126: PLUS
71127: ARRAY
71128: ST_TO_ADDR
71129: GO 71132
71131: POP
71132: GO 71687
71134: LD_INT 2
71136: DOUBLE
71137: EQUAL
71138: IFTRUE 71148
71140: LD_INT 3
71142: DOUBLE
71143: EQUAL
71144: IFTRUE 71148
71146: GO 71204
71148: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71149: LD_ADDR_VAR 0 9
71153: PUSH
71154: LD_VAR 0 29
71158: PUSH
71159: LD_VAR 0 30
71163: PUSH
71164: LD_VAR 0 31
71168: PUSH
71169: LD_VAR 0 32
71173: PUSH
71174: LD_VAR 0 33
71178: PUSH
71179: LD_VAR 0 34
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: PUSH
71192: LD_VAR 0 4
71196: PUSH
71197: LD_INT 1
71199: PLUS
71200: ARRAY
71201: ST_TO_ADDR
71202: GO 71687
71204: LD_INT 16
71206: DOUBLE
71207: EQUAL
71208: IFTRUE 71266
71210: LD_INT 17
71212: DOUBLE
71213: EQUAL
71214: IFTRUE 71266
71216: LD_INT 18
71218: DOUBLE
71219: EQUAL
71220: IFTRUE 71266
71222: LD_INT 19
71224: DOUBLE
71225: EQUAL
71226: IFTRUE 71266
71228: LD_INT 22
71230: DOUBLE
71231: EQUAL
71232: IFTRUE 71266
71234: LD_INT 20
71236: DOUBLE
71237: EQUAL
71238: IFTRUE 71266
71240: LD_INT 21
71242: DOUBLE
71243: EQUAL
71244: IFTRUE 71266
71246: LD_INT 23
71248: DOUBLE
71249: EQUAL
71250: IFTRUE 71266
71252: LD_INT 24
71254: DOUBLE
71255: EQUAL
71256: IFTRUE 71266
71258: LD_INT 25
71260: DOUBLE
71261: EQUAL
71262: IFTRUE 71266
71264: GO 71322
71266: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71267: LD_ADDR_VAR 0 9
71271: PUSH
71272: LD_VAR 0 35
71276: PUSH
71277: LD_VAR 0 36
71281: PUSH
71282: LD_VAR 0 37
71286: PUSH
71287: LD_VAR 0 38
71291: PUSH
71292: LD_VAR 0 39
71296: PUSH
71297: LD_VAR 0 40
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: PUSH
71310: LD_VAR 0 4
71314: PUSH
71315: LD_INT 1
71317: PLUS
71318: ARRAY
71319: ST_TO_ADDR
71320: GO 71687
71322: LD_INT 6
71324: DOUBLE
71325: EQUAL
71326: IFTRUE 71378
71328: LD_INT 7
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71378
71334: LD_INT 8
71336: DOUBLE
71337: EQUAL
71338: IFTRUE 71378
71340: LD_INT 13
71342: DOUBLE
71343: EQUAL
71344: IFTRUE 71378
71346: LD_INT 12
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71378
71352: LD_INT 15
71354: DOUBLE
71355: EQUAL
71356: IFTRUE 71378
71358: LD_INT 11
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71378
71364: LD_INT 14
71366: DOUBLE
71367: EQUAL
71368: IFTRUE 71378
71370: LD_INT 10
71372: DOUBLE
71373: EQUAL
71374: IFTRUE 71378
71376: GO 71434
71378: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71379: LD_ADDR_VAR 0 9
71383: PUSH
71384: LD_VAR 0 41
71388: PUSH
71389: LD_VAR 0 42
71393: PUSH
71394: LD_VAR 0 43
71398: PUSH
71399: LD_VAR 0 44
71403: PUSH
71404: LD_VAR 0 45
71408: PUSH
71409: LD_VAR 0 46
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: PUSH
71422: LD_VAR 0 4
71426: PUSH
71427: LD_INT 1
71429: PLUS
71430: ARRAY
71431: ST_TO_ADDR
71432: GO 71687
71434: LD_INT 36
71436: DOUBLE
71437: EQUAL
71438: IFTRUE 71442
71440: GO 71498
71442: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71443: LD_ADDR_VAR 0 9
71447: PUSH
71448: LD_VAR 0 47
71452: PUSH
71453: LD_VAR 0 48
71457: PUSH
71458: LD_VAR 0 49
71462: PUSH
71463: LD_VAR 0 50
71467: PUSH
71468: LD_VAR 0 51
71472: PUSH
71473: LD_VAR 0 52
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: PUSH
71486: LD_VAR 0 4
71490: PUSH
71491: LD_INT 1
71493: PLUS
71494: ARRAY
71495: ST_TO_ADDR
71496: GO 71687
71498: LD_INT 4
71500: DOUBLE
71501: EQUAL
71502: IFTRUE 71524
71504: LD_INT 5
71506: DOUBLE
71507: EQUAL
71508: IFTRUE 71524
71510: LD_INT 34
71512: DOUBLE
71513: EQUAL
71514: IFTRUE 71524
71516: LD_INT 37
71518: DOUBLE
71519: EQUAL
71520: IFTRUE 71524
71522: GO 71580
71524: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71525: LD_ADDR_VAR 0 9
71529: PUSH
71530: LD_VAR 0 53
71534: PUSH
71535: LD_VAR 0 54
71539: PUSH
71540: LD_VAR 0 55
71544: PUSH
71545: LD_VAR 0 56
71549: PUSH
71550: LD_VAR 0 57
71554: PUSH
71555: LD_VAR 0 58
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: PUSH
71568: LD_VAR 0 4
71572: PUSH
71573: LD_INT 1
71575: PLUS
71576: ARRAY
71577: ST_TO_ADDR
71578: GO 71687
71580: LD_INT 31
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71630
71586: LD_INT 32
71588: DOUBLE
71589: EQUAL
71590: IFTRUE 71630
71592: LD_INT 33
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71630
71598: LD_INT 27
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71630
71604: LD_INT 26
71606: DOUBLE
71607: EQUAL
71608: IFTRUE 71630
71610: LD_INT 28
71612: DOUBLE
71613: EQUAL
71614: IFTRUE 71630
71616: LD_INT 29
71618: DOUBLE
71619: EQUAL
71620: IFTRUE 71630
71622: LD_INT 30
71624: DOUBLE
71625: EQUAL
71626: IFTRUE 71630
71628: GO 71686
71630: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71631: LD_ADDR_VAR 0 9
71635: PUSH
71636: LD_VAR 0 59
71640: PUSH
71641: LD_VAR 0 60
71645: PUSH
71646: LD_VAR 0 61
71650: PUSH
71651: LD_VAR 0 62
71655: PUSH
71656: LD_VAR 0 63
71660: PUSH
71661: LD_VAR 0 64
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: PUSH
71674: LD_VAR 0 4
71678: PUSH
71679: LD_INT 1
71681: PLUS
71682: ARRAY
71683: ST_TO_ADDR
71684: GO 71687
71686: POP
// temp_list2 = [ ] ;
71687: LD_ADDR_VAR 0 10
71691: PUSH
71692: EMPTY
71693: ST_TO_ADDR
// for i in temp_list do
71694: LD_ADDR_VAR 0 8
71698: PUSH
71699: LD_VAR 0 9
71703: PUSH
71704: FOR_IN
71705: IFFALSE 71757
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71707: LD_ADDR_VAR 0 10
71711: PUSH
71712: LD_VAR 0 10
71716: PUSH
71717: LD_VAR 0 8
71721: PUSH
71722: LD_INT 1
71724: ARRAY
71725: PUSH
71726: LD_VAR 0 2
71730: PLUS
71731: PUSH
71732: LD_VAR 0 8
71736: PUSH
71737: LD_INT 2
71739: ARRAY
71740: PUSH
71741: LD_VAR 0 3
71745: PLUS
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: EMPTY
71752: LIST
71753: ADD
71754: ST_TO_ADDR
71755: GO 71704
71757: POP
71758: POP
// result = temp_list2 ;
71759: LD_ADDR_VAR 0 7
71763: PUSH
71764: LD_VAR 0 10
71768: ST_TO_ADDR
// end ;
71769: LD_VAR 0 7
71773: RET
// export function EnemyInRange ( unit , dist ) ; begin
71774: LD_INT 0
71776: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71777: LD_ADDR_VAR 0 3
71781: PUSH
71782: LD_VAR 0 1
71786: PPUSH
71787: CALL_OW 255
71791: PPUSH
71792: LD_VAR 0 1
71796: PPUSH
71797: CALL_OW 250
71801: PPUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 251
71811: PPUSH
71812: LD_VAR 0 2
71816: PPUSH
71817: CALL 45170 0 4
71821: PUSH
71822: LD_INT 4
71824: ARRAY
71825: ST_TO_ADDR
// end ;
71826: LD_VAR 0 3
71830: RET
// export function PlayerSeeMe ( unit ) ; begin
71831: LD_INT 0
71833: PPUSH
// result := See ( your_side , unit ) ;
71834: LD_ADDR_VAR 0 2
71838: PUSH
71839: LD_OWVAR 2
71843: PPUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 292
71853: ST_TO_ADDR
// end ;
71854: LD_VAR 0 2
71858: RET
// export function ReverseDir ( unit ) ; begin
71859: LD_INT 0
71861: PPUSH
// if not unit then
71862: LD_VAR 0 1
71866: NOT
71867: IFFALSE 71871
// exit ;
71869: GO 71894
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71871: LD_ADDR_VAR 0 2
71875: PUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 254
71885: PUSH
71886: LD_INT 3
71888: PLUS
71889: PUSH
71890: LD_INT 6
71892: MOD
71893: ST_TO_ADDR
// end ;
71894: LD_VAR 0 2
71898: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71899: LD_INT 0
71901: PPUSH
71902: PPUSH
71903: PPUSH
71904: PPUSH
71905: PPUSH
// if not hexes then
71906: LD_VAR 0 2
71910: NOT
71911: IFFALSE 71915
// exit ;
71913: GO 72063
// dist := 9999 ;
71915: LD_ADDR_VAR 0 5
71919: PUSH
71920: LD_INT 9999
71922: ST_TO_ADDR
// for i = 1 to hexes do
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: DOUBLE
71929: LD_INT 1
71931: DEC
71932: ST_TO_ADDR
71933: LD_VAR 0 2
71937: PUSH
71938: FOR_TO
71939: IFFALSE 72051
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71941: LD_VAR 0 1
71945: PPUSH
71946: LD_VAR 0 2
71950: PUSH
71951: LD_VAR 0 4
71955: ARRAY
71956: PUSH
71957: LD_INT 1
71959: ARRAY
71960: PPUSH
71961: LD_VAR 0 2
71965: PUSH
71966: LD_VAR 0 4
71970: ARRAY
71971: PUSH
71972: LD_INT 2
71974: ARRAY
71975: PPUSH
71976: CALL_OW 297
71980: PUSH
71981: LD_VAR 0 5
71985: LESS
71986: IFFALSE 72049
// begin hex := hexes [ i ] ;
71988: LD_ADDR_VAR 0 7
71992: PUSH
71993: LD_VAR 0 2
71997: PUSH
71998: LD_VAR 0 4
72002: ARRAY
72003: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72004: LD_ADDR_VAR 0 5
72008: PUSH
72009: LD_VAR 0 1
72013: PPUSH
72014: LD_VAR 0 2
72018: PUSH
72019: LD_VAR 0 4
72023: ARRAY
72024: PUSH
72025: LD_INT 1
72027: ARRAY
72028: PPUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_VAR 0 4
72038: ARRAY
72039: PUSH
72040: LD_INT 2
72042: ARRAY
72043: PPUSH
72044: CALL_OW 297
72048: ST_TO_ADDR
// end ; end ;
72049: GO 71938
72051: POP
72052: POP
// result := hex ;
72053: LD_ADDR_VAR 0 3
72057: PUSH
72058: LD_VAR 0 7
72062: ST_TO_ADDR
// end ;
72063: LD_VAR 0 3
72067: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72068: LD_INT 0
72070: PPUSH
72071: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72072: LD_VAR 0 1
72076: NOT
72077: PUSH
72078: LD_VAR 0 1
72082: PUSH
72083: LD_INT 21
72085: PUSH
72086: LD_INT 2
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 23
72095: PUSH
72096: LD_INT 2
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PPUSH
72107: CALL_OW 69
72111: IN
72112: NOT
72113: OR
72114: IFFALSE 72118
// exit ;
72116: GO 72165
// for i = 1 to 3 do
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: DOUBLE
72124: LD_INT 1
72126: DEC
72127: ST_TO_ADDR
72128: LD_INT 3
72130: PUSH
72131: FOR_TO
72132: IFFALSE 72163
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72134: LD_VAR 0 1
72138: PPUSH
72139: CALL_OW 250
72143: PPUSH
72144: LD_VAR 0 1
72148: PPUSH
72149: CALL_OW 251
72153: PPUSH
72154: LD_INT 1
72156: PPUSH
72157: CALL_OW 453
72161: GO 72131
72163: POP
72164: POP
// end ;
72165: LD_VAR 0 2
72169: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72170: LD_INT 0
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72178: LD_VAR 0 1
72182: NOT
72183: PUSH
72184: LD_VAR 0 2
72188: NOT
72189: OR
72190: PUSH
72191: LD_VAR 0 1
72195: PPUSH
72196: CALL_OW 314
72200: OR
72201: IFFALSE 72205
// exit ;
72203: GO 72646
// x := GetX ( enemy_unit ) ;
72205: LD_ADDR_VAR 0 7
72209: PUSH
72210: LD_VAR 0 2
72214: PPUSH
72215: CALL_OW 250
72219: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72220: LD_ADDR_VAR 0 8
72224: PUSH
72225: LD_VAR 0 2
72229: PPUSH
72230: CALL_OW 251
72234: ST_TO_ADDR
// if not x or not y then
72235: LD_VAR 0 7
72239: NOT
72240: PUSH
72241: LD_VAR 0 8
72245: NOT
72246: OR
72247: IFFALSE 72251
// exit ;
72249: GO 72646
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72251: LD_ADDR_VAR 0 6
72255: PUSH
72256: LD_VAR 0 7
72260: PPUSH
72261: LD_INT 0
72263: PPUSH
72264: LD_INT 4
72266: PPUSH
72267: CALL_OW 272
72271: PUSH
72272: LD_VAR 0 8
72276: PPUSH
72277: LD_INT 0
72279: PPUSH
72280: LD_INT 4
72282: PPUSH
72283: CALL_OW 273
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_VAR 0 7
72296: PPUSH
72297: LD_INT 1
72299: PPUSH
72300: LD_INT 4
72302: PPUSH
72303: CALL_OW 272
72307: PUSH
72308: LD_VAR 0 8
72312: PPUSH
72313: LD_INT 1
72315: PPUSH
72316: LD_INT 4
72318: PPUSH
72319: CALL_OW 273
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_VAR 0 7
72332: PPUSH
72333: LD_INT 2
72335: PPUSH
72336: LD_INT 4
72338: PPUSH
72339: CALL_OW 272
72343: PUSH
72344: LD_VAR 0 8
72348: PPUSH
72349: LD_INT 2
72351: PPUSH
72352: LD_INT 4
72354: PPUSH
72355: CALL_OW 273
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_VAR 0 7
72368: PPUSH
72369: LD_INT 3
72371: PPUSH
72372: LD_INT 4
72374: PPUSH
72375: CALL_OW 272
72379: PUSH
72380: LD_VAR 0 8
72384: PPUSH
72385: LD_INT 3
72387: PPUSH
72388: LD_INT 4
72390: PPUSH
72391: CALL_OW 273
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_VAR 0 7
72404: PPUSH
72405: LD_INT 4
72407: PPUSH
72408: LD_INT 4
72410: PPUSH
72411: CALL_OW 272
72415: PUSH
72416: LD_VAR 0 8
72420: PPUSH
72421: LD_INT 4
72423: PPUSH
72424: LD_INT 4
72426: PPUSH
72427: CALL_OW 273
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_VAR 0 7
72440: PPUSH
72441: LD_INT 5
72443: PPUSH
72444: LD_INT 4
72446: PPUSH
72447: CALL_OW 272
72451: PUSH
72452: LD_VAR 0 8
72456: PPUSH
72457: LD_INT 5
72459: PPUSH
72460: LD_INT 4
72462: PPUSH
72463: CALL_OW 273
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: ST_TO_ADDR
// for i = tmp downto 1 do
72480: LD_ADDR_VAR 0 4
72484: PUSH
72485: DOUBLE
72486: LD_VAR 0 6
72490: INC
72491: ST_TO_ADDR
72492: LD_INT 1
72494: PUSH
72495: FOR_DOWNTO
72496: IFFALSE 72597
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72498: LD_VAR 0 6
72502: PUSH
72503: LD_VAR 0 4
72507: ARRAY
72508: PUSH
72509: LD_INT 1
72511: ARRAY
72512: PPUSH
72513: LD_VAR 0 6
72517: PUSH
72518: LD_VAR 0 4
72522: ARRAY
72523: PUSH
72524: LD_INT 2
72526: ARRAY
72527: PPUSH
72528: CALL_OW 488
72532: NOT
72533: PUSH
72534: LD_VAR 0 6
72538: PUSH
72539: LD_VAR 0 4
72543: ARRAY
72544: PUSH
72545: LD_INT 1
72547: ARRAY
72548: PPUSH
72549: LD_VAR 0 6
72553: PUSH
72554: LD_VAR 0 4
72558: ARRAY
72559: PUSH
72560: LD_INT 2
72562: ARRAY
72563: PPUSH
72564: CALL_OW 428
72568: PUSH
72569: LD_INT 0
72571: NONEQUAL
72572: OR
72573: IFFALSE 72595
// tmp := Delete ( tmp , i ) ;
72575: LD_ADDR_VAR 0 6
72579: PUSH
72580: LD_VAR 0 6
72584: PPUSH
72585: LD_VAR 0 4
72589: PPUSH
72590: CALL_OW 3
72594: ST_TO_ADDR
72595: GO 72495
72597: POP
72598: POP
// j := GetClosestHex ( unit , tmp ) ;
72599: LD_ADDR_VAR 0 5
72603: PUSH
72604: LD_VAR 0 1
72608: PPUSH
72609: LD_VAR 0 6
72613: PPUSH
72614: CALL 71899 0 2
72618: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72619: LD_VAR 0 1
72623: PPUSH
72624: LD_VAR 0 5
72628: PUSH
72629: LD_INT 1
72631: ARRAY
72632: PPUSH
72633: LD_VAR 0 5
72637: PUSH
72638: LD_INT 2
72640: ARRAY
72641: PPUSH
72642: CALL_OW 111
// end ;
72646: LD_VAR 0 3
72650: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72651: LD_INT 0
72653: PPUSH
72654: PPUSH
72655: PPUSH
// uc_side = 0 ;
72656: LD_ADDR_OWVAR 20
72660: PUSH
72661: LD_INT 0
72663: ST_TO_ADDR
// uc_nation = 0 ;
72664: LD_ADDR_OWVAR 21
72668: PUSH
72669: LD_INT 0
72671: ST_TO_ADDR
// InitHc_All ( ) ;
72672: CALL_OW 584
// InitVc ;
72676: CALL_OW 20
// if mastodonts then
72680: LD_VAR 0 6
72684: IFFALSE 72751
// for i = 1 to mastodonts do
72686: LD_ADDR_VAR 0 11
72690: PUSH
72691: DOUBLE
72692: LD_INT 1
72694: DEC
72695: ST_TO_ADDR
72696: LD_VAR 0 6
72700: PUSH
72701: FOR_TO
72702: IFFALSE 72749
// begin vc_chassis := 31 ;
72704: LD_ADDR_OWVAR 37
72708: PUSH
72709: LD_INT 31
72711: ST_TO_ADDR
// vc_control := control_rider ;
72712: LD_ADDR_OWVAR 38
72716: PUSH
72717: LD_INT 4
72719: ST_TO_ADDR
// animal := CreateVehicle ;
72720: LD_ADDR_VAR 0 12
72724: PUSH
72725: CALL_OW 45
72729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72730: LD_VAR 0 12
72734: PPUSH
72735: LD_VAR 0 8
72739: PPUSH
72740: LD_INT 0
72742: PPUSH
72743: CALL 74886 0 3
// end ;
72747: GO 72701
72749: POP
72750: POP
// if horses then
72751: LD_VAR 0 5
72755: IFFALSE 72822
// for i = 1 to horses do
72757: LD_ADDR_VAR 0 11
72761: PUSH
72762: DOUBLE
72763: LD_INT 1
72765: DEC
72766: ST_TO_ADDR
72767: LD_VAR 0 5
72771: PUSH
72772: FOR_TO
72773: IFFALSE 72820
// begin hc_class := 21 ;
72775: LD_ADDR_OWVAR 28
72779: PUSH
72780: LD_INT 21
72782: ST_TO_ADDR
// hc_gallery :=  ;
72783: LD_ADDR_OWVAR 33
72787: PUSH
72788: LD_STRING 
72790: ST_TO_ADDR
// animal := CreateHuman ;
72791: LD_ADDR_VAR 0 12
72795: PUSH
72796: CALL_OW 44
72800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72801: LD_VAR 0 12
72805: PPUSH
72806: LD_VAR 0 8
72810: PPUSH
72811: LD_INT 0
72813: PPUSH
72814: CALL 74886 0 3
// end ;
72818: GO 72772
72820: POP
72821: POP
// if birds then
72822: LD_VAR 0 1
72826: IFFALSE 72893
// for i = 1 to birds do
72828: LD_ADDR_VAR 0 11
72832: PUSH
72833: DOUBLE
72834: LD_INT 1
72836: DEC
72837: ST_TO_ADDR
72838: LD_VAR 0 1
72842: PUSH
72843: FOR_TO
72844: IFFALSE 72891
// begin hc_class = 18 ;
72846: LD_ADDR_OWVAR 28
72850: PUSH
72851: LD_INT 18
72853: ST_TO_ADDR
// hc_gallery =  ;
72854: LD_ADDR_OWVAR 33
72858: PUSH
72859: LD_STRING 
72861: ST_TO_ADDR
// animal := CreateHuman ;
72862: LD_ADDR_VAR 0 12
72866: PUSH
72867: CALL_OW 44
72871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72872: LD_VAR 0 12
72876: PPUSH
72877: LD_VAR 0 8
72881: PPUSH
72882: LD_INT 0
72884: PPUSH
72885: CALL 74886 0 3
// end ;
72889: GO 72843
72891: POP
72892: POP
// if tigers then
72893: LD_VAR 0 2
72897: IFFALSE 72981
// for i = 1 to tigers do
72899: LD_ADDR_VAR 0 11
72903: PUSH
72904: DOUBLE
72905: LD_INT 1
72907: DEC
72908: ST_TO_ADDR
72909: LD_VAR 0 2
72913: PUSH
72914: FOR_TO
72915: IFFALSE 72979
// begin hc_class = class_tiger ;
72917: LD_ADDR_OWVAR 28
72921: PUSH
72922: LD_INT 14
72924: ST_TO_ADDR
// hc_gallery =  ;
72925: LD_ADDR_OWVAR 33
72929: PUSH
72930: LD_STRING 
72932: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72933: LD_ADDR_OWVAR 35
72937: PUSH
72938: LD_INT 7
72940: NEG
72941: PPUSH
72942: LD_INT 7
72944: PPUSH
72945: CALL_OW 12
72949: ST_TO_ADDR
// animal := CreateHuman ;
72950: LD_ADDR_VAR 0 12
72954: PUSH
72955: CALL_OW 44
72959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72960: LD_VAR 0 12
72964: PPUSH
72965: LD_VAR 0 8
72969: PPUSH
72970: LD_INT 0
72972: PPUSH
72973: CALL 74886 0 3
// end ;
72977: GO 72914
72979: POP
72980: POP
// if apemans then
72981: LD_VAR 0 3
72985: IFFALSE 73108
// for i = 1 to apemans do
72987: LD_ADDR_VAR 0 11
72991: PUSH
72992: DOUBLE
72993: LD_INT 1
72995: DEC
72996: ST_TO_ADDR
72997: LD_VAR 0 3
73001: PUSH
73002: FOR_TO
73003: IFFALSE 73106
// begin hc_class = class_apeman ;
73005: LD_ADDR_OWVAR 28
73009: PUSH
73010: LD_INT 12
73012: ST_TO_ADDR
// hc_gallery =  ;
73013: LD_ADDR_OWVAR 33
73017: PUSH
73018: LD_STRING 
73020: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73021: LD_ADDR_OWVAR 35
73025: PUSH
73026: LD_INT 2
73028: NEG
73029: PPUSH
73030: LD_INT 2
73032: PPUSH
73033: CALL_OW 12
73037: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73038: LD_ADDR_OWVAR 31
73042: PUSH
73043: LD_INT 1
73045: PPUSH
73046: LD_INT 3
73048: PPUSH
73049: CALL_OW 12
73053: PUSH
73054: LD_INT 1
73056: PPUSH
73057: LD_INT 3
73059: PPUSH
73060: CALL_OW 12
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: ST_TO_ADDR
// animal := CreateHuman ;
73077: LD_ADDR_VAR 0 12
73081: PUSH
73082: CALL_OW 44
73086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73087: LD_VAR 0 12
73091: PPUSH
73092: LD_VAR 0 8
73096: PPUSH
73097: LD_INT 0
73099: PPUSH
73100: CALL 74886 0 3
// end ;
73104: GO 73002
73106: POP
73107: POP
// if enchidnas then
73108: LD_VAR 0 4
73112: IFFALSE 73179
// for i = 1 to enchidnas do
73114: LD_ADDR_VAR 0 11
73118: PUSH
73119: DOUBLE
73120: LD_INT 1
73122: DEC
73123: ST_TO_ADDR
73124: LD_VAR 0 4
73128: PUSH
73129: FOR_TO
73130: IFFALSE 73177
// begin hc_class = 13 ;
73132: LD_ADDR_OWVAR 28
73136: PUSH
73137: LD_INT 13
73139: ST_TO_ADDR
// hc_gallery =  ;
73140: LD_ADDR_OWVAR 33
73144: PUSH
73145: LD_STRING 
73147: ST_TO_ADDR
// animal := CreateHuman ;
73148: LD_ADDR_VAR 0 12
73152: PUSH
73153: CALL_OW 44
73157: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73158: LD_VAR 0 12
73162: PPUSH
73163: LD_VAR 0 8
73167: PPUSH
73168: LD_INT 0
73170: PPUSH
73171: CALL 74886 0 3
// end ;
73175: GO 73129
73177: POP
73178: POP
// if fishes then
73179: LD_VAR 0 7
73183: IFFALSE 73250
// for i = 1 to fishes do
73185: LD_ADDR_VAR 0 11
73189: PUSH
73190: DOUBLE
73191: LD_INT 1
73193: DEC
73194: ST_TO_ADDR
73195: LD_VAR 0 7
73199: PUSH
73200: FOR_TO
73201: IFFALSE 73248
// begin hc_class = 20 ;
73203: LD_ADDR_OWVAR 28
73207: PUSH
73208: LD_INT 20
73210: ST_TO_ADDR
// hc_gallery =  ;
73211: LD_ADDR_OWVAR 33
73215: PUSH
73216: LD_STRING 
73218: ST_TO_ADDR
// animal := CreateHuman ;
73219: LD_ADDR_VAR 0 12
73223: PUSH
73224: CALL_OW 44
73228: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73229: LD_VAR 0 12
73233: PPUSH
73234: LD_VAR 0 9
73238: PPUSH
73239: LD_INT 0
73241: PPUSH
73242: CALL 74886 0 3
// end ;
73246: GO 73200
73248: POP
73249: POP
// end ;
73250: LD_VAR 0 10
73254: RET
// export function WantHeal ( sci , unit ) ; begin
73255: LD_INT 0
73257: PPUSH
// if GetTaskList ( sci ) > 0 then
73258: LD_VAR 0 1
73262: PPUSH
73263: CALL_OW 437
73267: PUSH
73268: LD_INT 0
73270: GREATER
73271: IFFALSE 73341
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73273: LD_VAR 0 1
73277: PPUSH
73278: CALL_OW 437
73282: PUSH
73283: LD_INT 1
73285: ARRAY
73286: PUSH
73287: LD_INT 1
73289: ARRAY
73290: PUSH
73291: LD_STRING l
73293: EQUAL
73294: PUSH
73295: LD_VAR 0 1
73299: PPUSH
73300: CALL_OW 437
73304: PUSH
73305: LD_INT 1
73307: ARRAY
73308: PUSH
73309: LD_INT 4
73311: ARRAY
73312: PUSH
73313: LD_VAR 0 2
73317: EQUAL
73318: AND
73319: IFFALSE 73331
// result := true else
73321: LD_ADDR_VAR 0 3
73325: PUSH
73326: LD_INT 1
73328: ST_TO_ADDR
73329: GO 73339
// result := false ;
73331: LD_ADDR_VAR 0 3
73335: PUSH
73336: LD_INT 0
73338: ST_TO_ADDR
// end else
73339: GO 73349
// result := false ;
73341: LD_ADDR_VAR 0 3
73345: PUSH
73346: LD_INT 0
73348: ST_TO_ADDR
// end ;
73349: LD_VAR 0 3
73353: RET
// export function HealTarget ( sci ) ; begin
73354: LD_INT 0
73356: PPUSH
// if not sci then
73357: LD_VAR 0 1
73361: NOT
73362: IFFALSE 73366
// exit ;
73364: GO 73431
// result := 0 ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_INT 0
73373: ST_TO_ADDR
// if GetTaskList ( sci ) then
73374: LD_VAR 0 1
73378: PPUSH
73379: CALL_OW 437
73383: IFFALSE 73431
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73385: LD_VAR 0 1
73389: PPUSH
73390: CALL_OW 437
73394: PUSH
73395: LD_INT 1
73397: ARRAY
73398: PUSH
73399: LD_INT 1
73401: ARRAY
73402: PUSH
73403: LD_STRING l
73405: EQUAL
73406: IFFALSE 73431
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73408: LD_ADDR_VAR 0 2
73412: PUSH
73413: LD_VAR 0 1
73417: PPUSH
73418: CALL_OW 437
73422: PUSH
73423: LD_INT 1
73425: ARRAY
73426: PUSH
73427: LD_INT 4
73429: ARRAY
73430: ST_TO_ADDR
// end ;
73431: LD_VAR 0 2
73435: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73436: LD_INT 0
73438: PPUSH
73439: PPUSH
73440: PPUSH
73441: PPUSH
// if not base_units then
73442: LD_VAR 0 1
73446: NOT
73447: IFFALSE 73451
// exit ;
73449: GO 73538
// result := false ;
73451: LD_ADDR_VAR 0 2
73455: PUSH
73456: LD_INT 0
73458: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73459: LD_ADDR_VAR 0 5
73463: PUSH
73464: LD_VAR 0 1
73468: PPUSH
73469: LD_INT 21
73471: PUSH
73472: LD_INT 3
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PPUSH
73479: CALL_OW 72
73483: ST_TO_ADDR
// if not tmp then
73484: LD_VAR 0 5
73488: NOT
73489: IFFALSE 73493
// exit ;
73491: GO 73538
// for i in tmp do
73493: LD_ADDR_VAR 0 3
73497: PUSH
73498: LD_VAR 0 5
73502: PUSH
73503: FOR_IN
73504: IFFALSE 73536
// begin result := EnemyInRange ( i , 22 ) ;
73506: LD_ADDR_VAR 0 2
73510: PUSH
73511: LD_VAR 0 3
73515: PPUSH
73516: LD_INT 22
73518: PPUSH
73519: CALL 71774 0 2
73523: ST_TO_ADDR
// if result then
73524: LD_VAR 0 2
73528: IFFALSE 73534
// exit ;
73530: POP
73531: POP
73532: GO 73538
// end ;
73534: GO 73503
73536: POP
73537: POP
// end ;
73538: LD_VAR 0 2
73542: RET
// export function FilterByTag ( units , tag ) ; begin
73543: LD_INT 0
73545: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73546: LD_ADDR_VAR 0 3
73550: PUSH
73551: LD_VAR 0 1
73555: PPUSH
73556: LD_INT 120
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PPUSH
73568: CALL_OW 72
73572: ST_TO_ADDR
// end ;
73573: LD_VAR 0 3
73577: RET
// export function IsDriver ( un ) ; begin
73578: LD_INT 0
73580: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73581: LD_ADDR_VAR 0 2
73585: PUSH
73586: LD_VAR 0 1
73590: PUSH
73591: LD_INT 55
73593: PUSH
73594: EMPTY
73595: LIST
73596: PPUSH
73597: CALL_OW 69
73601: IN
73602: ST_TO_ADDR
// end ;
73603: LD_VAR 0 2
73607: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73608: LD_INT 0
73610: PPUSH
73611: PPUSH
// list := [ ] ;
73612: LD_ADDR_VAR 0 5
73616: PUSH
73617: EMPTY
73618: ST_TO_ADDR
// case d of 0 :
73619: LD_VAR 0 3
73623: PUSH
73624: LD_INT 0
73626: DOUBLE
73627: EQUAL
73628: IFTRUE 73632
73630: GO 73765
73632: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73633: LD_ADDR_VAR 0 5
73637: PUSH
73638: LD_VAR 0 1
73642: PUSH
73643: LD_INT 4
73645: MINUS
73646: PUSH
73647: LD_VAR 0 2
73651: PUSH
73652: LD_INT 4
73654: MINUS
73655: PUSH
73656: LD_INT 2
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: PUSH
73664: LD_VAR 0 1
73668: PUSH
73669: LD_INT 3
73671: MINUS
73672: PUSH
73673: LD_VAR 0 2
73677: PUSH
73678: LD_INT 1
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: LIST
73685: PUSH
73686: LD_VAR 0 1
73690: PUSH
73691: LD_INT 4
73693: PLUS
73694: PUSH
73695: LD_VAR 0 2
73699: PUSH
73700: LD_INT 4
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: PUSH
73708: LD_VAR 0 1
73712: PUSH
73713: LD_INT 3
73715: PLUS
73716: PUSH
73717: LD_VAR 0 2
73721: PUSH
73722: LD_INT 3
73724: PLUS
73725: PUSH
73726: LD_INT 5
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: LIST
73733: PUSH
73734: LD_VAR 0 1
73738: PUSH
73739: LD_VAR 0 2
73743: PUSH
73744: LD_INT 4
73746: PLUS
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: ST_TO_ADDR
// end ; 1 :
73763: GO 74463
73765: LD_INT 1
73767: DOUBLE
73768: EQUAL
73769: IFTRUE 73773
73771: GO 73906
73773: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73774: LD_ADDR_VAR 0 5
73778: PUSH
73779: LD_VAR 0 1
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 4
73791: MINUS
73792: PUSH
73793: LD_INT 3
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_VAR 0 1
73805: PUSH
73806: LD_INT 3
73808: MINUS
73809: PUSH
73810: LD_VAR 0 2
73814: PUSH
73815: LD_INT 3
73817: MINUS
73818: PUSH
73819: LD_INT 2
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: LIST
73826: PUSH
73827: LD_VAR 0 1
73831: PUSH
73832: LD_INT 4
73834: MINUS
73835: PUSH
73836: LD_VAR 0 2
73840: PUSH
73841: LD_INT 1
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: LIST
73848: PUSH
73849: LD_VAR 0 1
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_INT 3
73861: PLUS
73862: PUSH
73863: LD_INT 0
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: LIST
73870: PUSH
73871: LD_VAR 0 1
73875: PUSH
73876: LD_INT 4
73878: PLUS
73879: PUSH
73880: LD_VAR 0 2
73884: PUSH
73885: LD_INT 4
73887: PLUS
73888: PUSH
73889: LD_INT 5
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: ST_TO_ADDR
// end ; 2 :
73904: GO 74463
73906: LD_INT 2
73908: DOUBLE
73909: EQUAL
73910: IFTRUE 73914
73912: GO 74043
73914: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: LD_VAR 0 1
73924: PUSH
73925: LD_VAR 0 2
73929: PUSH
73930: LD_INT 3
73932: MINUS
73933: PUSH
73934: LD_INT 3
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: PUSH
73942: LD_VAR 0 1
73946: PUSH
73947: LD_INT 4
73949: PLUS
73950: PUSH
73951: LD_VAR 0 2
73955: PUSH
73956: LD_INT 4
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: PUSH
73964: LD_VAR 0 1
73968: PUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 4
73976: PLUS
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: LIST
73985: PUSH
73986: LD_VAR 0 1
73990: PUSH
73991: LD_INT 3
73993: MINUS
73994: PUSH
73995: LD_VAR 0 2
73999: PUSH
74000: LD_INT 1
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: LIST
74007: PUSH
74008: LD_VAR 0 1
74012: PUSH
74013: LD_INT 4
74015: MINUS
74016: PUSH
74017: LD_VAR 0 2
74021: PUSH
74022: LD_INT 4
74024: MINUS
74025: PUSH
74026: LD_INT 2
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: LIST
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: ST_TO_ADDR
// end ; 3 :
74041: GO 74463
74043: LD_INT 3
74045: DOUBLE
74046: EQUAL
74047: IFTRUE 74051
74049: GO 74184
74051: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74052: LD_ADDR_VAR 0 5
74056: PUSH
74057: LD_VAR 0 1
74061: PUSH
74062: LD_INT 3
74064: PLUS
74065: PUSH
74066: LD_VAR 0 2
74070: PUSH
74071: LD_INT 4
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 1
74083: PUSH
74084: LD_INT 4
74086: PLUS
74087: PUSH
74088: LD_VAR 0 2
74092: PUSH
74093: LD_INT 4
74095: PLUS
74096: PUSH
74097: LD_INT 5
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: PUSH
74105: LD_VAR 0 1
74109: PUSH
74110: LD_INT 4
74112: MINUS
74113: PUSH
74114: LD_VAR 0 2
74118: PUSH
74119: LD_INT 1
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: LIST
74126: PUSH
74127: LD_VAR 0 1
74131: PUSH
74132: LD_VAR 0 2
74136: PUSH
74137: LD_INT 4
74139: MINUS
74140: PUSH
74141: LD_INT 3
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: LIST
74148: PUSH
74149: LD_VAR 0 1
74153: PUSH
74154: LD_INT 3
74156: MINUS
74157: PUSH
74158: LD_VAR 0 2
74162: PUSH
74163: LD_INT 3
74165: MINUS
74166: PUSH
74167: LD_INT 2
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: ST_TO_ADDR
// end ; 4 :
74182: GO 74463
74184: LD_INT 4
74186: DOUBLE
74187: EQUAL
74188: IFTRUE 74192
74190: GO 74325
74192: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74193: LD_ADDR_VAR 0 5
74197: PUSH
74198: LD_VAR 0 1
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 4
74210: PLUS
74211: PUSH
74212: LD_INT 0
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: PUSH
74220: LD_VAR 0 1
74224: PUSH
74225: LD_INT 3
74227: PLUS
74228: PUSH
74229: LD_VAR 0 2
74233: PUSH
74234: LD_INT 3
74236: PLUS
74237: PUSH
74238: LD_INT 5
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: PUSH
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 4
74253: PLUS
74254: PUSH
74255: LD_VAR 0 2
74259: PUSH
74260: LD_INT 4
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: LIST
74267: PUSH
74268: LD_VAR 0 1
74272: PUSH
74273: LD_VAR 0 2
74277: PUSH
74278: LD_INT 3
74280: MINUS
74281: PUSH
74282: LD_INT 3
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: LD_VAR 0 1
74294: PUSH
74295: LD_INT 4
74297: MINUS
74298: PUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_INT 4
74306: MINUS
74307: PUSH
74308: LD_INT 2
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: ST_TO_ADDR
// end ; 5 :
74323: GO 74463
74325: LD_INT 5
74327: DOUBLE
74328: EQUAL
74329: IFTRUE 74333
74331: GO 74462
74333: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74334: LD_ADDR_VAR 0 5
74338: PUSH
74339: LD_VAR 0 1
74343: PUSH
74344: LD_INT 4
74346: MINUS
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 1
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: LIST
74360: PUSH
74361: LD_VAR 0 1
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 4
74373: MINUS
74374: PUSH
74375: LD_INT 3
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: PUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_INT 4
74390: PLUS
74391: PUSH
74392: LD_VAR 0 2
74396: PUSH
74397: LD_INT 4
74399: PLUS
74400: PUSH
74401: LD_INT 5
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: LIST
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: LD_INT 3
74416: PLUS
74417: PUSH
74418: LD_VAR 0 2
74422: PUSH
74423: LD_INT 4
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_VAR 0 2
74440: PUSH
74441: LD_INT 3
74443: PLUS
74444: PUSH
74445: LD_INT 0
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: ST_TO_ADDR
// end ; end ;
74460: GO 74463
74462: POP
// result := list ;
74463: LD_ADDR_VAR 0 4
74467: PUSH
74468: LD_VAR 0 5
74472: ST_TO_ADDR
// end ;
74473: LD_VAR 0 4
74477: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74478: LD_INT 0
74480: PPUSH
74481: PPUSH
74482: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74483: LD_VAR 0 1
74487: NOT
74488: PUSH
74489: LD_VAR 0 2
74493: PUSH
74494: LD_INT 1
74496: PUSH
74497: LD_INT 2
74499: PUSH
74500: LD_INT 3
74502: PUSH
74503: LD_INT 4
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: IN
74512: NOT
74513: OR
74514: IFFALSE 74518
// exit ;
74516: GO 74610
// tmp := [ ] ;
74518: LD_ADDR_VAR 0 5
74522: PUSH
74523: EMPTY
74524: ST_TO_ADDR
// for i in units do
74525: LD_ADDR_VAR 0 4
74529: PUSH
74530: LD_VAR 0 1
74534: PUSH
74535: FOR_IN
74536: IFFALSE 74579
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74538: LD_ADDR_VAR 0 5
74542: PUSH
74543: LD_VAR 0 5
74547: PPUSH
74548: LD_VAR 0 5
74552: PUSH
74553: LD_INT 1
74555: PLUS
74556: PPUSH
74557: LD_VAR 0 4
74561: PPUSH
74562: LD_VAR 0 2
74566: PPUSH
74567: CALL_OW 259
74571: PPUSH
74572: CALL_OW 2
74576: ST_TO_ADDR
74577: GO 74535
74579: POP
74580: POP
// if not tmp then
74581: LD_VAR 0 5
74585: NOT
74586: IFFALSE 74590
// exit ;
74588: GO 74610
// result := SortListByListDesc ( units , tmp ) ;
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: LD_VAR 0 1
74599: PPUSH
74600: LD_VAR 0 5
74604: PPUSH
74605: CALL_OW 77
74609: ST_TO_ADDR
// end ;
74610: LD_VAR 0 3
74614: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
74619: PPUSH
// result := false ;
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_INT 0
74627: ST_TO_ADDR
// x := GetX ( building ) ;
74628: LD_ADDR_VAR 0 4
74632: PUSH
74633: LD_VAR 0 2
74637: PPUSH
74638: CALL_OW 250
74642: ST_TO_ADDR
// y := GetY ( building ) ;
74643: LD_ADDR_VAR 0 5
74647: PUSH
74648: LD_VAR 0 2
74652: PPUSH
74653: CALL_OW 251
74657: ST_TO_ADDR
// if not building or not x or not y then
74658: LD_VAR 0 2
74662: NOT
74663: PUSH
74664: LD_VAR 0 4
74668: NOT
74669: OR
74670: PUSH
74671: LD_VAR 0 5
74675: NOT
74676: OR
74677: IFFALSE 74681
// exit ;
74679: GO 74773
// if GetTaskList ( unit ) then
74681: LD_VAR 0 1
74685: PPUSH
74686: CALL_OW 437
74690: IFFALSE 74773
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74692: LD_STRING e
74694: PUSH
74695: LD_VAR 0 1
74699: PPUSH
74700: CALL_OW 437
74704: PUSH
74705: LD_INT 1
74707: ARRAY
74708: PUSH
74709: LD_INT 1
74711: ARRAY
74712: EQUAL
74713: PUSH
74714: LD_VAR 0 4
74718: PUSH
74719: LD_VAR 0 1
74723: PPUSH
74724: CALL_OW 437
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: PUSH
74733: LD_INT 2
74735: ARRAY
74736: EQUAL
74737: AND
74738: PUSH
74739: LD_VAR 0 5
74743: PUSH
74744: LD_VAR 0 1
74748: PPUSH
74749: CALL_OW 437
74753: PUSH
74754: LD_INT 1
74756: ARRAY
74757: PUSH
74758: LD_INT 3
74760: ARRAY
74761: EQUAL
74762: AND
74763: IFFALSE 74773
// result := true end ;
74765: LD_ADDR_VAR 0 3
74769: PUSH
74770: LD_INT 1
74772: ST_TO_ADDR
// end ;
74773: LD_VAR 0 3
74777: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74778: LD_INT 0
74780: PPUSH
// result := false ;
74781: LD_ADDR_VAR 0 4
74785: PUSH
74786: LD_INT 0
74788: ST_TO_ADDR
// if GetTaskList ( unit ) then
74789: LD_VAR 0 1
74793: PPUSH
74794: CALL_OW 437
74798: IFFALSE 74881
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74800: LD_STRING M
74802: PUSH
74803: LD_VAR 0 1
74807: PPUSH
74808: CALL_OW 437
74812: PUSH
74813: LD_INT 1
74815: ARRAY
74816: PUSH
74817: LD_INT 1
74819: ARRAY
74820: EQUAL
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_VAR 0 1
74831: PPUSH
74832: CALL_OW 437
74836: PUSH
74837: LD_INT 1
74839: ARRAY
74840: PUSH
74841: LD_INT 2
74843: ARRAY
74844: EQUAL
74845: AND
74846: PUSH
74847: LD_VAR 0 3
74851: PUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: CALL_OW 437
74861: PUSH
74862: LD_INT 1
74864: ARRAY
74865: PUSH
74866: LD_INT 3
74868: ARRAY
74869: EQUAL
74870: AND
74871: IFFALSE 74881
// result := true ;
74873: LD_ADDR_VAR 0 4
74877: PUSH
74878: LD_INT 1
74880: ST_TO_ADDR
// end ; end ;
74881: LD_VAR 0 4
74885: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74886: LD_INT 0
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
// if not unit or not area then
74892: LD_VAR 0 1
74896: NOT
74897: PUSH
74898: LD_VAR 0 2
74902: NOT
74903: OR
74904: IFFALSE 74908
// exit ;
74906: GO 75072
// tmp := AreaToList ( area , i ) ;
74908: LD_ADDR_VAR 0 6
74912: PUSH
74913: LD_VAR 0 2
74917: PPUSH
74918: LD_VAR 0 5
74922: PPUSH
74923: CALL_OW 517
74927: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74928: LD_ADDR_VAR 0 5
74932: PUSH
74933: DOUBLE
74934: LD_INT 1
74936: DEC
74937: ST_TO_ADDR
74938: LD_VAR 0 6
74942: PUSH
74943: LD_INT 1
74945: ARRAY
74946: PUSH
74947: FOR_TO
74948: IFFALSE 75070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74950: LD_ADDR_VAR 0 7
74954: PUSH
74955: LD_VAR 0 6
74959: PUSH
74960: LD_INT 1
74962: ARRAY
74963: PUSH
74964: LD_VAR 0 5
74968: ARRAY
74969: PUSH
74970: LD_VAR 0 6
74974: PUSH
74975: LD_INT 2
74977: ARRAY
74978: PUSH
74979: LD_VAR 0 5
74983: ARRAY
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74989: LD_VAR 0 7
74993: PUSH
74994: LD_INT 1
74996: ARRAY
74997: PPUSH
74998: LD_VAR 0 7
75002: PUSH
75003: LD_INT 2
75005: ARRAY
75006: PPUSH
75007: CALL_OW 428
75011: PUSH
75012: LD_INT 0
75014: EQUAL
75015: IFFALSE 75068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75017: LD_VAR 0 1
75021: PPUSH
75022: LD_VAR 0 7
75026: PUSH
75027: LD_INT 1
75029: ARRAY
75030: PPUSH
75031: LD_VAR 0 7
75035: PUSH
75036: LD_INT 2
75038: ARRAY
75039: PPUSH
75040: LD_VAR 0 3
75044: PPUSH
75045: CALL_OW 48
// result := IsPlaced ( unit ) ;
75049: LD_ADDR_VAR 0 4
75053: PUSH
75054: LD_VAR 0 1
75058: PPUSH
75059: CALL_OW 305
75063: ST_TO_ADDR
// exit ;
75064: POP
75065: POP
75066: GO 75072
// end ; end ;
75068: GO 74947
75070: POP
75071: POP
// end ;
75072: LD_VAR 0 4
75076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75077: LD_INT 0
75079: PPUSH
75080: PPUSH
75081: PPUSH
// if not side or side > 8 then
75082: LD_VAR 0 1
75086: NOT
75087: PUSH
75088: LD_VAR 0 1
75092: PUSH
75093: LD_INT 8
75095: GREATER
75096: OR
75097: IFFALSE 75101
// exit ;
75099: GO 75288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75101: LD_ADDR_VAR 0 4
75105: PUSH
75106: LD_INT 22
75108: PUSH
75109: LD_VAR 0 1
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: PUSH
75118: LD_INT 21
75120: PUSH
75121: LD_INT 3
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PPUSH
75132: CALL_OW 69
75136: ST_TO_ADDR
// if not tmp then
75137: LD_VAR 0 4
75141: NOT
75142: IFFALSE 75146
// exit ;
75144: GO 75288
// enable_addtolog := true ;
75146: LD_ADDR_OWVAR 81
75150: PUSH
75151: LD_INT 1
75153: ST_TO_ADDR
// AddToLog ( [ ) ;
75154: LD_STRING [
75156: PPUSH
75157: CALL_OW 561
// for i in tmp do
75161: LD_ADDR_VAR 0 3
75165: PUSH
75166: LD_VAR 0 4
75170: PUSH
75171: FOR_IN
75172: IFFALSE 75279
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75174: LD_STRING [
75176: PUSH
75177: LD_VAR 0 3
75181: PPUSH
75182: CALL_OW 266
75186: STR
75187: PUSH
75188: LD_STRING , 
75190: STR
75191: PUSH
75192: LD_VAR 0 3
75196: PPUSH
75197: CALL_OW 250
75201: STR
75202: PUSH
75203: LD_STRING , 
75205: STR
75206: PUSH
75207: LD_VAR 0 3
75211: PPUSH
75212: CALL_OW 251
75216: STR
75217: PUSH
75218: LD_STRING , 
75220: STR
75221: PUSH
75222: LD_VAR 0 3
75226: PPUSH
75227: CALL_OW 254
75231: STR
75232: PUSH
75233: LD_STRING , 
75235: STR
75236: PUSH
75237: LD_VAR 0 3
75241: PPUSH
75242: LD_INT 1
75244: PPUSH
75245: CALL_OW 268
75249: STR
75250: PUSH
75251: LD_STRING , 
75253: STR
75254: PUSH
75255: LD_VAR 0 3
75259: PPUSH
75260: LD_INT 2
75262: PPUSH
75263: CALL_OW 268
75267: STR
75268: PUSH
75269: LD_STRING ],
75271: STR
75272: PPUSH
75273: CALL_OW 561
// end ;
75277: GO 75171
75279: POP
75280: POP
// AddToLog ( ]; ) ;
75281: LD_STRING ];
75283: PPUSH
75284: CALL_OW 561
// end ;
75288: LD_VAR 0 2
75292: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75293: LD_INT 0
75295: PPUSH
75296: PPUSH
75297: PPUSH
75298: PPUSH
75299: PPUSH
// if not area or not rate or not max then
75300: LD_VAR 0 1
75304: NOT
75305: PUSH
75306: LD_VAR 0 2
75310: NOT
75311: OR
75312: PUSH
75313: LD_VAR 0 4
75317: NOT
75318: OR
75319: IFFALSE 75323
// exit ;
75321: GO 75512
// while 1 do
75323: LD_INT 1
75325: IFFALSE 75512
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75327: LD_ADDR_VAR 0 9
75331: PUSH
75332: LD_VAR 0 1
75336: PPUSH
75337: LD_INT 1
75339: PPUSH
75340: CALL_OW 287
75344: PUSH
75345: LD_INT 10
75347: MUL
75348: ST_TO_ADDR
// r := rate / 10 ;
75349: LD_ADDR_VAR 0 7
75353: PUSH
75354: LD_VAR 0 2
75358: PUSH
75359: LD_INT 10
75361: DIVREAL
75362: ST_TO_ADDR
// time := 1 1$00 ;
75363: LD_ADDR_VAR 0 8
75367: PUSH
75368: LD_INT 2100
75370: ST_TO_ADDR
// if amount < min then
75371: LD_VAR 0 9
75375: PUSH
75376: LD_VAR 0 3
75380: LESS
75381: IFFALSE 75399
// r := r * 2 else
75383: LD_ADDR_VAR 0 7
75387: PUSH
75388: LD_VAR 0 7
75392: PUSH
75393: LD_INT 2
75395: MUL
75396: ST_TO_ADDR
75397: GO 75425
// if amount > max then
75399: LD_VAR 0 9
75403: PUSH
75404: LD_VAR 0 4
75408: GREATER
75409: IFFALSE 75425
// r := r / 2 ;
75411: LD_ADDR_VAR 0 7
75415: PUSH
75416: LD_VAR 0 7
75420: PUSH
75421: LD_INT 2
75423: DIVREAL
75424: ST_TO_ADDR
// time := time / r ;
75425: LD_ADDR_VAR 0 8
75429: PUSH
75430: LD_VAR 0 8
75434: PUSH
75435: LD_VAR 0 7
75439: DIVREAL
75440: ST_TO_ADDR
// if time < 0 then
75441: LD_VAR 0 8
75445: PUSH
75446: LD_INT 0
75448: LESS
75449: IFFALSE 75466
// time := time * - 1 ;
75451: LD_ADDR_VAR 0 8
75455: PUSH
75456: LD_VAR 0 8
75460: PUSH
75461: LD_INT 1
75463: NEG
75464: MUL
75465: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75466: LD_VAR 0 8
75470: PUSH
75471: LD_INT 35
75473: PPUSH
75474: LD_INT 875
75476: PPUSH
75477: CALL_OW 12
75481: PLUS
75482: PPUSH
75483: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75487: LD_INT 1
75489: PPUSH
75490: LD_INT 5
75492: PPUSH
75493: CALL_OW 12
75497: PPUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: LD_INT 1
75505: PPUSH
75506: CALL_OW 55
// end ;
75510: GO 75323
// end ;
75512: LD_VAR 0 5
75516: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75517: LD_INT 0
75519: PPUSH
75520: PPUSH
75521: PPUSH
75522: PPUSH
75523: PPUSH
75524: PPUSH
75525: PPUSH
75526: PPUSH
// if not turrets or not factories then
75527: LD_VAR 0 1
75531: NOT
75532: PUSH
75533: LD_VAR 0 2
75537: NOT
75538: OR
75539: IFFALSE 75543
// exit ;
75541: GO 75850
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75543: LD_ADDR_VAR 0 10
75547: PUSH
75548: LD_INT 5
75550: PUSH
75551: LD_INT 6
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: LD_INT 4
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: LD_INT 3
75570: PUSH
75571: LD_INT 5
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 24
75585: PUSH
75586: LD_INT 25
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: PUSH
75593: LD_INT 23
75595: PUSH
75596: LD_INT 27
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 42
75609: PUSH
75610: LD_INT 43
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 44
75619: PUSH
75620: LD_INT 46
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 45
75629: PUSH
75630: LD_INT 47
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: LIST
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: LIST
75646: ST_TO_ADDR
// result := [ ] ;
75647: LD_ADDR_VAR 0 3
75651: PUSH
75652: EMPTY
75653: ST_TO_ADDR
// for i in turrets do
75654: LD_ADDR_VAR 0 4
75658: PUSH
75659: LD_VAR 0 1
75663: PUSH
75664: FOR_IN
75665: IFFALSE 75848
// begin nat := GetNation ( i ) ;
75667: LD_ADDR_VAR 0 7
75671: PUSH
75672: LD_VAR 0 4
75676: PPUSH
75677: CALL_OW 248
75681: ST_TO_ADDR
// weapon := 0 ;
75682: LD_ADDR_VAR 0 8
75686: PUSH
75687: LD_INT 0
75689: ST_TO_ADDR
// if not nat then
75690: LD_VAR 0 7
75694: NOT
75695: IFFALSE 75699
// continue ;
75697: GO 75664
// for j in list [ nat ] do
75699: LD_ADDR_VAR 0 5
75703: PUSH
75704: LD_VAR 0 10
75708: PUSH
75709: LD_VAR 0 7
75713: ARRAY
75714: PUSH
75715: FOR_IN
75716: IFFALSE 75757
// if GetBWeapon ( i ) = j [ 1 ] then
75718: LD_VAR 0 4
75722: PPUSH
75723: CALL_OW 269
75727: PUSH
75728: LD_VAR 0 5
75732: PUSH
75733: LD_INT 1
75735: ARRAY
75736: EQUAL
75737: IFFALSE 75755
// begin weapon := j [ 2 ] ;
75739: LD_ADDR_VAR 0 8
75743: PUSH
75744: LD_VAR 0 5
75748: PUSH
75749: LD_INT 2
75751: ARRAY
75752: ST_TO_ADDR
// break ;
75753: GO 75757
// end ;
75755: GO 75715
75757: POP
75758: POP
// if not weapon then
75759: LD_VAR 0 8
75763: NOT
75764: IFFALSE 75768
// continue ;
75766: GO 75664
// for k in factories do
75768: LD_ADDR_VAR 0 6
75772: PUSH
75773: LD_VAR 0 2
75777: PUSH
75778: FOR_IN
75779: IFFALSE 75844
// begin weapons := AvailableWeaponList ( k ) ;
75781: LD_ADDR_VAR 0 9
75785: PUSH
75786: LD_VAR 0 6
75790: PPUSH
75791: CALL_OW 478
75795: ST_TO_ADDR
// if not weapons then
75796: LD_VAR 0 9
75800: NOT
75801: IFFALSE 75805
// continue ;
75803: GO 75778
// if weapon in weapons then
75805: LD_VAR 0 8
75809: PUSH
75810: LD_VAR 0 9
75814: IN
75815: IFFALSE 75842
// begin result := [ i , weapon ] ;
75817: LD_ADDR_VAR 0 3
75821: PUSH
75822: LD_VAR 0 4
75826: PUSH
75827: LD_VAR 0 8
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: ST_TO_ADDR
// exit ;
75836: POP
75837: POP
75838: POP
75839: POP
75840: GO 75850
// end ; end ;
75842: GO 75778
75844: POP
75845: POP
// end ;
75846: GO 75664
75848: POP
75849: POP
// end ;
75850: LD_VAR 0 3
75854: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75855: LD_INT 0
75857: PPUSH
// if not side or side > 8 then
75858: LD_VAR 0 3
75862: NOT
75863: PUSH
75864: LD_VAR 0 3
75868: PUSH
75869: LD_INT 8
75871: GREATER
75872: OR
75873: IFFALSE 75877
// exit ;
75875: GO 75936
// if not range then
75877: LD_VAR 0 4
75881: NOT
75882: IFFALSE 75893
// range := - 12 ;
75884: LD_ADDR_VAR 0 4
75888: PUSH
75889: LD_INT 12
75891: NEG
75892: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: LD_VAR 0 3
75907: PPUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 2
75926: PPUSH
75927: LD_VAR 0 3
75931: PPUSH
75932: CALL_OW 331
// end ;
75936: LD_VAR 0 5
75940: RET
// export function Video ( mode ) ; begin
75941: LD_INT 0
75943: PPUSH
// ingame_video = mode ;
75944: LD_ADDR_OWVAR 52
75948: PUSH
75949: LD_VAR 0 1
75953: ST_TO_ADDR
// interface_hidden = mode ;
75954: LD_ADDR_OWVAR 54
75958: PUSH
75959: LD_VAR 0 1
75963: ST_TO_ADDR
// end ;
75964: LD_VAR 0 2
75968: RET
// export function Join ( array , element ) ; begin
75969: LD_INT 0
75971: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75972: LD_ADDR_VAR 0 3
75976: PUSH
75977: LD_VAR 0 1
75981: PPUSH
75982: LD_VAR 0 1
75986: PUSH
75987: LD_INT 1
75989: PLUS
75990: PPUSH
75991: LD_VAR 0 2
75995: PPUSH
75996: CALL_OW 1
76000: ST_TO_ADDR
// end ;
76001: LD_VAR 0 3
76005: RET
// export function JoinUnion ( array , element ) ; begin
76006: LD_INT 0
76008: PPUSH
// result := array union element ;
76009: LD_ADDR_VAR 0 3
76013: PUSH
76014: LD_VAR 0 1
76018: PUSH
76019: LD_VAR 0 2
76023: UNION
76024: ST_TO_ADDR
// end ;
76025: LD_VAR 0 3
76029: RET
// export function GetBehemoths ( side ) ; begin
76030: LD_INT 0
76032: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76033: LD_ADDR_VAR 0 2
76037: PUSH
76038: LD_INT 22
76040: PUSH
76041: LD_VAR 0 1
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 31
76052: PUSH
76053: LD_INT 25
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PPUSH
76064: CALL_OW 69
76068: ST_TO_ADDR
// end ;
76069: LD_VAR 0 2
76073: RET
// export function Shuffle ( array ) ; var i , index ; begin
76074: LD_INT 0
76076: PPUSH
76077: PPUSH
76078: PPUSH
// result := [ ] ;
76079: LD_ADDR_VAR 0 2
76083: PUSH
76084: EMPTY
76085: ST_TO_ADDR
// if not array then
76086: LD_VAR 0 1
76090: NOT
76091: IFFALSE 76095
// exit ;
76093: GO 76194
// Randomize ;
76095: CALL_OW 10
// for i = array downto 1 do
76099: LD_ADDR_VAR 0 3
76103: PUSH
76104: DOUBLE
76105: LD_VAR 0 1
76109: INC
76110: ST_TO_ADDR
76111: LD_INT 1
76113: PUSH
76114: FOR_DOWNTO
76115: IFFALSE 76192
// begin index := rand ( 1 , array ) ;
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_INT 1
76124: PPUSH
76125: LD_VAR 0 1
76129: PPUSH
76130: CALL_OW 12
76134: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76135: LD_ADDR_VAR 0 2
76139: PUSH
76140: LD_VAR 0 2
76144: PPUSH
76145: LD_VAR 0 2
76149: PUSH
76150: LD_INT 1
76152: PLUS
76153: PPUSH
76154: LD_VAR 0 1
76158: PUSH
76159: LD_VAR 0 4
76163: ARRAY
76164: PPUSH
76165: CALL_OW 2
76169: ST_TO_ADDR
// array := Delete ( array , index ) ;
76170: LD_ADDR_VAR 0 1
76174: PUSH
76175: LD_VAR 0 1
76179: PPUSH
76180: LD_VAR 0 4
76184: PPUSH
76185: CALL_OW 3
76189: ST_TO_ADDR
// end ;
76190: GO 76114
76192: POP
76193: POP
// end ;
76194: LD_VAR 0 2
76198: RET
// export function GetBaseMaterials ( base ) ; begin
76199: LD_INT 0
76201: PPUSH
// result := [ 0 , 0 , 0 ] ;
76202: LD_ADDR_VAR 0 2
76206: PUSH
76207: LD_INT 0
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: LD_INT 0
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: ST_TO_ADDR
// if not base then
76221: LD_VAR 0 1
76225: NOT
76226: IFFALSE 76230
// exit ;
76228: GO 76279
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76230: LD_ADDR_VAR 0 2
76234: PUSH
76235: LD_VAR 0 1
76239: PPUSH
76240: LD_INT 1
76242: PPUSH
76243: CALL_OW 275
76247: PUSH
76248: LD_VAR 0 1
76252: PPUSH
76253: LD_INT 2
76255: PPUSH
76256: CALL_OW 275
76260: PUSH
76261: LD_VAR 0 1
76265: PPUSH
76266: LD_INT 3
76268: PPUSH
76269: CALL_OW 275
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: LIST
76278: ST_TO_ADDR
// end ;
76279: LD_VAR 0 2
76283: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76284: LD_INT 0
76286: PPUSH
76287: PPUSH
// result := array ;
76288: LD_ADDR_VAR 0 3
76292: PUSH
76293: LD_VAR 0 1
76297: ST_TO_ADDR
// if size > 0 then
76298: LD_VAR 0 2
76302: PUSH
76303: LD_INT 0
76305: GREATER
76306: IFFALSE 76352
// for i := array downto size do
76308: LD_ADDR_VAR 0 4
76312: PUSH
76313: DOUBLE
76314: LD_VAR 0 1
76318: INC
76319: ST_TO_ADDR
76320: LD_VAR 0 2
76324: PUSH
76325: FOR_DOWNTO
76326: IFFALSE 76350
// result := Delete ( result , result ) ;
76328: LD_ADDR_VAR 0 3
76332: PUSH
76333: LD_VAR 0 3
76337: PPUSH
76338: LD_VAR 0 3
76342: PPUSH
76343: CALL_OW 3
76347: ST_TO_ADDR
76348: GO 76325
76350: POP
76351: POP
// end ;
76352: LD_VAR 0 3
76356: RET
// export function ComExit ( unit ) ; var tmp ; begin
76357: LD_INT 0
76359: PPUSH
76360: PPUSH
// if not IsInUnit ( unit ) then
76361: LD_VAR 0 1
76365: PPUSH
76366: CALL_OW 310
76370: NOT
76371: IFFALSE 76375
// exit ;
76373: GO 76435
// tmp := IsInUnit ( unit ) ;
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 1
76384: PPUSH
76385: CALL_OW 310
76389: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76390: LD_VAR 0 3
76394: PPUSH
76395: CALL_OW 247
76399: PUSH
76400: LD_INT 2
76402: EQUAL
76403: IFFALSE 76416
// ComExitVehicle ( unit ) else
76405: LD_VAR 0 1
76409: PPUSH
76410: CALL_OW 121
76414: GO 76425
// ComExitBuilding ( unit ) ;
76416: LD_VAR 0 1
76420: PPUSH
76421: CALL_OW 122
// result := tmp ;
76425: LD_ADDR_VAR 0 2
76429: PUSH
76430: LD_VAR 0 3
76434: ST_TO_ADDR
// end ;
76435: LD_VAR 0 2
76439: RET
// export function ComExitAll ( units ) ; var i ; begin
76440: LD_INT 0
76442: PPUSH
76443: PPUSH
// if not units then
76444: LD_VAR 0 1
76448: NOT
76449: IFFALSE 76453
// exit ;
76451: GO 76479
// for i in units do
76453: LD_ADDR_VAR 0 3
76457: PUSH
76458: LD_VAR 0 1
76462: PUSH
76463: FOR_IN
76464: IFFALSE 76477
// ComExit ( i ) ;
76466: LD_VAR 0 3
76470: PPUSH
76471: CALL 76357 0 1
76475: GO 76463
76477: POP
76478: POP
// end ;
76479: LD_VAR 0 2
76483: RET
// export function ResetHc ; begin
76484: LD_INT 0
76486: PPUSH
// InitHc ;
76487: CALL_OW 19
// hc_importance := 0 ;
76491: LD_ADDR_OWVAR 32
76495: PUSH
76496: LD_INT 0
76498: ST_TO_ADDR
// end ;
76499: LD_VAR 0 1
76503: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76504: LD_INT 0
76506: PPUSH
76507: PPUSH
76508: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76509: LD_ADDR_VAR 0 6
76513: PUSH
76514: LD_VAR 0 1
76518: PUSH
76519: LD_VAR 0 3
76523: PLUS
76524: PUSH
76525: LD_INT 2
76527: DIV
76528: ST_TO_ADDR
// if _x < 0 then
76529: LD_VAR 0 6
76533: PUSH
76534: LD_INT 0
76536: LESS
76537: IFFALSE 76554
// _x := _x * - 1 ;
76539: LD_ADDR_VAR 0 6
76543: PUSH
76544: LD_VAR 0 6
76548: PUSH
76549: LD_INT 1
76551: NEG
76552: MUL
76553: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76554: LD_ADDR_VAR 0 7
76558: PUSH
76559: LD_VAR 0 2
76563: PUSH
76564: LD_VAR 0 4
76568: PLUS
76569: PUSH
76570: LD_INT 2
76572: DIV
76573: ST_TO_ADDR
// if _y < 0 then
76574: LD_VAR 0 7
76578: PUSH
76579: LD_INT 0
76581: LESS
76582: IFFALSE 76599
// _y := _y * - 1 ;
76584: LD_ADDR_VAR 0 7
76588: PUSH
76589: LD_VAR 0 7
76593: PUSH
76594: LD_INT 1
76596: NEG
76597: MUL
76598: ST_TO_ADDR
// result := [ _x , _y ] ;
76599: LD_ADDR_VAR 0 5
76603: PUSH
76604: LD_VAR 0 6
76608: PUSH
76609: LD_VAR 0 7
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: ST_TO_ADDR
// end ;
76618: LD_VAR 0 5
76622: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76623: LD_INT 0
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
// task := GetTaskList ( unit ) ;
76629: LD_ADDR_VAR 0 7
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 437
76643: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76644: LD_VAR 0 7
76648: NOT
76649: PUSH
76650: LD_VAR 0 1
76654: PPUSH
76655: LD_VAR 0 2
76659: PPUSH
76660: CALL_OW 308
76664: NOT
76665: AND
76666: IFFALSE 76670
// exit ;
76668: GO 76788
// if IsInArea ( unit , area ) then
76670: LD_VAR 0 1
76674: PPUSH
76675: LD_VAR 0 2
76679: PPUSH
76680: CALL_OW 308
76684: IFFALSE 76702
// begin ComMoveToArea ( unit , goAway ) ;
76686: LD_VAR 0 1
76690: PPUSH
76691: LD_VAR 0 3
76695: PPUSH
76696: CALL_OW 113
// exit ;
76700: GO 76788
// end ; if task [ 1 ] [ 1 ] <> M then
76702: LD_VAR 0 7
76706: PUSH
76707: LD_INT 1
76709: ARRAY
76710: PUSH
76711: LD_INT 1
76713: ARRAY
76714: PUSH
76715: LD_STRING M
76717: NONEQUAL
76718: IFFALSE 76722
// exit ;
76720: GO 76788
// x := task [ 1 ] [ 2 ] ;
76722: LD_ADDR_VAR 0 5
76726: PUSH
76727: LD_VAR 0 7
76731: PUSH
76732: LD_INT 1
76734: ARRAY
76735: PUSH
76736: LD_INT 2
76738: ARRAY
76739: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76740: LD_ADDR_VAR 0 6
76744: PUSH
76745: LD_VAR 0 7
76749: PUSH
76750: LD_INT 1
76752: ARRAY
76753: PUSH
76754: LD_INT 3
76756: ARRAY
76757: ST_TO_ADDR
// if InArea ( x , y , area ) then
76758: LD_VAR 0 5
76762: PPUSH
76763: LD_VAR 0 6
76767: PPUSH
76768: LD_VAR 0 2
76772: PPUSH
76773: CALL_OW 309
76777: IFFALSE 76788
// ComStop ( unit ) ;
76779: LD_VAR 0 1
76783: PPUSH
76784: CALL_OW 141
// end ;
76788: LD_VAR 0 4
76792: RET
// export function Abs ( value ) ; begin
76793: LD_INT 0
76795: PPUSH
// result := value ;
76796: LD_ADDR_VAR 0 2
76800: PUSH
76801: LD_VAR 0 1
76805: ST_TO_ADDR
// if value < 0 then
76806: LD_VAR 0 1
76810: PUSH
76811: LD_INT 0
76813: LESS
76814: IFFALSE 76831
// result := value * - 1 ;
76816: LD_ADDR_VAR 0 2
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_INT 1
76828: NEG
76829: MUL
76830: ST_TO_ADDR
// end ;
76831: LD_VAR 0 2
76835: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76836: LD_INT 0
76838: PPUSH
76839: PPUSH
76840: PPUSH
76841: PPUSH
76842: PPUSH
76843: PPUSH
76844: PPUSH
76845: PPUSH
// if not unit or not building then
76846: LD_VAR 0 1
76850: NOT
76851: PUSH
76852: LD_VAR 0 2
76856: NOT
76857: OR
76858: IFFALSE 76862
// exit ;
76860: GO 77088
// x := GetX ( building ) ;
76862: LD_ADDR_VAR 0 4
76866: PUSH
76867: LD_VAR 0 2
76871: PPUSH
76872: CALL_OW 250
76876: ST_TO_ADDR
// y := GetY ( building ) ;
76877: LD_ADDR_VAR 0 6
76881: PUSH
76882: LD_VAR 0 2
76886: PPUSH
76887: CALL_OW 251
76891: ST_TO_ADDR
// d := GetDir ( building ) ;
76892: LD_ADDR_VAR 0 8
76896: PUSH
76897: LD_VAR 0 2
76901: PPUSH
76902: CALL_OW 254
76906: ST_TO_ADDR
// r := 4 ;
76907: LD_ADDR_VAR 0 9
76911: PUSH
76912: LD_INT 4
76914: ST_TO_ADDR
// for i := 1 to 5 do
76915: LD_ADDR_VAR 0 10
76919: PUSH
76920: DOUBLE
76921: LD_INT 1
76923: DEC
76924: ST_TO_ADDR
76925: LD_INT 5
76927: PUSH
76928: FOR_TO
76929: IFFALSE 77086
// begin _x := ShiftX ( x , d , r + i ) ;
76931: LD_ADDR_VAR 0 5
76935: PUSH
76936: LD_VAR 0 4
76940: PPUSH
76941: LD_VAR 0 8
76945: PPUSH
76946: LD_VAR 0 9
76950: PUSH
76951: LD_VAR 0 10
76955: PLUS
76956: PPUSH
76957: CALL_OW 272
76961: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76962: LD_ADDR_VAR 0 7
76966: PUSH
76967: LD_VAR 0 6
76971: PPUSH
76972: LD_VAR 0 8
76976: PPUSH
76977: LD_VAR 0 9
76981: PUSH
76982: LD_VAR 0 10
76986: PLUS
76987: PPUSH
76988: CALL_OW 273
76992: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76993: LD_VAR 0 5
76997: PPUSH
76998: LD_VAR 0 7
77002: PPUSH
77003: CALL_OW 488
77007: PUSH
77008: LD_VAR 0 5
77012: PPUSH
77013: LD_VAR 0 7
77017: PPUSH
77018: CALL_OW 428
77022: PPUSH
77023: CALL_OW 247
77027: PUSH
77028: LD_INT 3
77030: PUSH
77031: LD_INT 2
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: IN
77038: NOT
77039: AND
77040: IFFALSE 77084
// begin ComMoveXY ( unit , _x , _y ) ;
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_VAR 0 5
77051: PPUSH
77052: LD_VAR 0 7
77056: PPUSH
77057: CALL_OW 111
// result := [ _x , _y ] ;
77061: LD_ADDR_VAR 0 3
77065: PUSH
77066: LD_VAR 0 5
77070: PUSH
77071: LD_VAR 0 7
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: ST_TO_ADDR
// exit ;
77080: POP
77081: POP
77082: GO 77088
// end ; end ;
77084: GO 76928
77086: POP
77087: POP
// end ;
77088: LD_VAR 0 3
77092: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77093: LD_INT 0
77095: PPUSH
77096: PPUSH
77097: PPUSH
// result := 0 ;
77098: LD_ADDR_VAR 0 3
77102: PUSH
77103: LD_INT 0
77105: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77106: LD_VAR 0 1
77110: PUSH
77111: LD_INT 0
77113: LESS
77114: PUSH
77115: LD_VAR 0 1
77119: PUSH
77120: LD_INT 8
77122: GREATER
77123: OR
77124: PUSH
77125: LD_VAR 0 2
77129: PUSH
77130: LD_INT 0
77132: LESS
77133: OR
77134: PUSH
77135: LD_VAR 0 2
77139: PUSH
77140: LD_INT 8
77142: GREATER
77143: OR
77144: IFFALSE 77148
// exit ;
77146: GO 77223
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77148: LD_ADDR_VAR 0 4
77152: PUSH
77153: LD_INT 22
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PPUSH
77165: CALL_OW 69
77169: PUSH
77170: FOR_IN
77171: IFFALSE 77221
// begin un := UnitShoot ( i ) ;
77173: LD_ADDR_VAR 0 5
77177: PUSH
77178: LD_VAR 0 4
77182: PPUSH
77183: CALL_OW 504
77187: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77188: LD_VAR 0 5
77192: PPUSH
77193: CALL_OW 255
77197: PUSH
77198: LD_VAR 0 1
77202: EQUAL
77203: IFFALSE 77219
// begin result := un ;
77205: LD_ADDR_VAR 0 3
77209: PUSH
77210: LD_VAR 0 5
77214: ST_TO_ADDR
// exit ;
77215: POP
77216: POP
77217: GO 77223
// end ; end ;
77219: GO 77170
77221: POP
77222: POP
// end ;
77223: LD_VAR 0 3
77227: RET
// export function GetCargoBay ( units ) ; begin
77228: LD_INT 0
77230: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77231: LD_ADDR_VAR 0 2
77235: PUSH
77236: LD_VAR 0 1
77240: PPUSH
77241: LD_INT 2
77243: PUSH
77244: LD_INT 34
77246: PUSH
77247: LD_INT 12
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 34
77256: PUSH
77257: LD_INT 51
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 34
77266: PUSH
77267: LD_INT 32
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 34
77276: PUSH
77277: LD_EXP 50
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: EMPTY
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: PPUSH
77293: CALL_OW 72
77297: ST_TO_ADDR
// end ;
77298: LD_VAR 0 2
77302: RET
// export function Negate ( value ) ; begin
77303: LD_INT 0
77305: PPUSH
// result := not value ;
77306: LD_ADDR_VAR 0 2
77310: PUSH
77311: LD_VAR 0 1
77315: NOT
77316: ST_TO_ADDR
// end ;
77317: LD_VAR 0 2
77321: RET
// export function Inc ( value ) ; begin
77322: LD_INT 0
77324: PPUSH
// result := value + 1 ;
77325: LD_ADDR_VAR 0 2
77329: PUSH
77330: LD_VAR 0 1
77334: PUSH
77335: LD_INT 1
77337: PLUS
77338: ST_TO_ADDR
// end ;
77339: LD_VAR 0 2
77343: RET
// export function Dec ( value ) ; begin
77344: LD_INT 0
77346: PPUSH
// result := value - 1 ;
77347: LD_ADDR_VAR 0 2
77351: PUSH
77352: LD_VAR 0 1
77356: PUSH
77357: LD_INT 1
77359: MINUS
77360: ST_TO_ADDR
// end ;
77361: LD_VAR 0 2
77365: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
77370: PPUSH
77371: PPUSH
77372: PPUSH
77373: PPUSH
77374: PPUSH
77375: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77376: LD_VAR 0 1
77380: PPUSH
77381: LD_VAR 0 2
77385: PPUSH
77386: CALL_OW 488
77390: NOT
77391: PUSH
77392: LD_VAR 0 3
77396: PPUSH
77397: LD_VAR 0 4
77401: PPUSH
77402: CALL_OW 488
77406: NOT
77407: OR
77408: IFFALSE 77421
// begin result := - 1 ;
77410: LD_ADDR_VAR 0 5
77414: PUSH
77415: LD_INT 1
77417: NEG
77418: ST_TO_ADDR
// exit ;
77419: GO 77656
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77421: LD_ADDR_VAR 0 12
77425: PUSH
77426: LD_VAR 0 1
77430: PPUSH
77431: LD_VAR 0 2
77435: PPUSH
77436: LD_VAR 0 3
77440: PPUSH
77441: LD_VAR 0 4
77445: PPUSH
77446: CALL 76504 0 4
77450: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77451: LD_ADDR_VAR 0 11
77455: PUSH
77456: LD_VAR 0 1
77460: PPUSH
77461: LD_VAR 0 2
77465: PPUSH
77466: LD_VAR 0 12
77470: PUSH
77471: LD_INT 1
77473: ARRAY
77474: PPUSH
77475: LD_VAR 0 12
77479: PUSH
77480: LD_INT 2
77482: ARRAY
77483: PPUSH
77484: CALL_OW 298
77488: ST_TO_ADDR
// distance := 9999 ;
77489: LD_ADDR_VAR 0 10
77493: PUSH
77494: LD_INT 9999
77496: ST_TO_ADDR
// for i := 0 to 5 do
77497: LD_ADDR_VAR 0 6
77501: PUSH
77502: DOUBLE
77503: LD_INT 0
77505: DEC
77506: ST_TO_ADDR
77507: LD_INT 5
77509: PUSH
77510: FOR_TO
77511: IFFALSE 77654
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77513: LD_ADDR_VAR 0 7
77517: PUSH
77518: LD_VAR 0 1
77522: PPUSH
77523: LD_VAR 0 6
77527: PPUSH
77528: LD_VAR 0 11
77532: PPUSH
77533: CALL_OW 272
77537: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77538: LD_ADDR_VAR 0 8
77542: PUSH
77543: LD_VAR 0 2
77547: PPUSH
77548: LD_VAR 0 6
77552: PPUSH
77553: LD_VAR 0 11
77557: PPUSH
77558: CALL_OW 273
77562: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77563: LD_VAR 0 7
77567: PPUSH
77568: LD_VAR 0 8
77572: PPUSH
77573: CALL_OW 488
77577: NOT
77578: IFFALSE 77582
// continue ;
77580: GO 77510
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77582: LD_ADDR_VAR 0 9
77586: PUSH
77587: LD_VAR 0 12
77591: PUSH
77592: LD_INT 1
77594: ARRAY
77595: PPUSH
77596: LD_VAR 0 12
77600: PUSH
77601: LD_INT 2
77603: ARRAY
77604: PPUSH
77605: LD_VAR 0 7
77609: PPUSH
77610: LD_VAR 0 8
77614: PPUSH
77615: CALL_OW 298
77619: ST_TO_ADDR
// if tmp < distance then
77620: LD_VAR 0 9
77624: PUSH
77625: LD_VAR 0 10
77629: LESS
77630: IFFALSE 77652
// begin result := i ;
77632: LD_ADDR_VAR 0 5
77636: PUSH
77637: LD_VAR 0 6
77641: ST_TO_ADDR
// distance := tmp ;
77642: LD_ADDR_VAR 0 10
77646: PUSH
77647: LD_VAR 0 9
77651: ST_TO_ADDR
// end ; end ;
77652: GO 77510
77654: POP
77655: POP
// end ;
77656: LD_VAR 0 5
77660: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77661: LD_INT 0
77663: PPUSH
77664: PPUSH
// if not driver or not IsInUnit ( driver ) then
77665: LD_VAR 0 1
77669: NOT
77670: PUSH
77671: LD_VAR 0 1
77675: PPUSH
77676: CALL_OW 310
77680: NOT
77681: OR
77682: IFFALSE 77686
// exit ;
77684: GO 77776
// vehicle := IsInUnit ( driver ) ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 310
77700: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77701: LD_VAR 0 1
77705: PPUSH
77706: LD_STRING \
77708: PUSH
77709: LD_INT 0
77711: PUSH
77712: LD_INT 0
77714: PUSH
77715: LD_INT 0
77717: PUSH
77718: LD_INT 0
77720: PUSH
77721: LD_INT 0
77723: PUSH
77724: LD_INT 0
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: PUSH
77736: LD_STRING E
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: LD_INT 0
77744: PUSH
77745: LD_VAR 0 3
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: LD_INT 0
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: LIST
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PPUSH
77772: CALL_OW 446
// end ;
77776: LD_VAR 0 2
77780: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
// if not driver or not IsInUnit ( driver ) then
77785: LD_VAR 0 1
77789: NOT
77790: PUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: CALL_OW 310
77800: NOT
77801: OR
77802: IFFALSE 77806
// exit ;
77804: GO 77896
// vehicle := IsInUnit ( driver ) ;
77806: LD_ADDR_VAR 0 3
77810: PUSH
77811: LD_VAR 0 1
77815: PPUSH
77816: CALL_OW 310
77820: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77821: LD_VAR 0 1
77825: PPUSH
77826: LD_STRING \
77828: PUSH
77829: LD_INT 0
77831: PUSH
77832: LD_INT 0
77834: PUSH
77835: LD_INT 0
77837: PUSH
77838: LD_INT 0
77840: PUSH
77841: LD_INT 0
77843: PUSH
77844: LD_INT 0
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: PUSH
77856: LD_STRING E
77858: PUSH
77859: LD_INT 0
77861: PUSH
77862: LD_INT 0
77864: PUSH
77865: LD_VAR 0 3
77869: PUSH
77870: LD_INT 0
77872: PUSH
77873: LD_INT 0
77875: PUSH
77876: LD_INT 0
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PPUSH
77892: CALL_OW 447
// end ;
77896: LD_VAR 0 2
77900: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77901: LD_INT 0
77903: PPUSH
77904: PPUSH
77905: PPUSH
// tmp := [ ] ;
77906: LD_ADDR_VAR 0 5
77910: PUSH
77911: EMPTY
77912: ST_TO_ADDR
// for i in units do
77913: LD_ADDR_VAR 0 4
77917: PUSH
77918: LD_VAR 0 1
77922: PUSH
77923: FOR_IN
77924: IFFALSE 77962
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77926: LD_ADDR_VAR 0 5
77930: PUSH
77931: LD_VAR 0 5
77935: PPUSH
77936: LD_VAR 0 5
77940: PUSH
77941: LD_INT 1
77943: PLUS
77944: PPUSH
77945: LD_VAR 0 4
77949: PPUSH
77950: CALL_OW 256
77954: PPUSH
77955: CALL_OW 2
77959: ST_TO_ADDR
77960: GO 77923
77962: POP
77963: POP
// if not tmp then
77964: LD_VAR 0 5
77968: NOT
77969: IFFALSE 77973
// exit ;
77971: GO 78021
// if asc then
77973: LD_VAR 0 2
77977: IFFALSE 78001
// result := SortListByListAsc ( units , tmp ) else
77979: LD_ADDR_VAR 0 3
77983: PUSH
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_VAR 0 5
77993: PPUSH
77994: CALL_OW 76
77998: ST_TO_ADDR
77999: GO 78021
// result := SortListByListDesc ( units , tmp ) ;
78001: LD_ADDR_VAR 0 3
78005: PUSH
78006: LD_VAR 0 1
78010: PPUSH
78011: LD_VAR 0 5
78015: PPUSH
78016: CALL_OW 77
78020: ST_TO_ADDR
// end ;
78021: LD_VAR 0 3
78025: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78026: LD_INT 0
78028: PPUSH
78029: PPUSH
// task := GetTaskList ( mech ) ;
78030: LD_ADDR_VAR 0 4
78034: PUSH
78035: LD_VAR 0 1
78039: PPUSH
78040: CALL_OW 437
78044: ST_TO_ADDR
// if not task then
78045: LD_VAR 0 4
78049: NOT
78050: IFFALSE 78054
// exit ;
78052: GO 78096
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78054: LD_ADDR_VAR 0 3
78058: PUSH
78059: LD_VAR 0 4
78063: PUSH
78064: LD_INT 1
78066: ARRAY
78067: PUSH
78068: LD_INT 1
78070: ARRAY
78071: PUSH
78072: LD_STRING r
78074: EQUAL
78075: PUSH
78076: LD_VAR 0 4
78080: PUSH
78081: LD_INT 1
78083: ARRAY
78084: PUSH
78085: LD_INT 4
78087: ARRAY
78088: PUSH
78089: LD_VAR 0 2
78093: EQUAL
78094: AND
78095: ST_TO_ADDR
// end ;
78096: LD_VAR 0 3
78100: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78101: LD_INT 0
78103: PPUSH
// SetDir ( unit , d ) ;
78104: LD_VAR 0 1
78108: PPUSH
78109: LD_VAR 0 4
78113: PPUSH
78114: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78118: LD_VAR 0 1
78122: PPUSH
78123: LD_VAR 0 2
78127: PPUSH
78128: LD_VAR 0 3
78132: PPUSH
78133: LD_VAR 0 5
78137: PPUSH
78138: CALL_OW 48
// end ;
78142: LD_VAR 0 6
78146: RET
// export function ToNaturalNumber ( number ) ; begin
78147: LD_INT 0
78149: PPUSH
// result := number div 1 ;
78150: LD_ADDR_VAR 0 2
78154: PUSH
78155: LD_VAR 0 1
78159: PUSH
78160: LD_INT 1
78162: DIV
78163: ST_TO_ADDR
// if number < 0 then
78164: LD_VAR 0 1
78168: PUSH
78169: LD_INT 0
78171: LESS
78172: IFFALSE 78182
// result := 0 ;
78174: LD_ADDR_VAR 0 2
78178: PUSH
78179: LD_INT 0
78181: ST_TO_ADDR
// end ;
78182: LD_VAR 0 2
78186: RET
// export function SortByClass ( units , class ) ; var un ; begin
78187: LD_INT 0
78189: PPUSH
78190: PPUSH
// if not units or not class then
78191: LD_VAR 0 1
78195: NOT
78196: PUSH
78197: LD_VAR 0 2
78201: NOT
78202: OR
78203: IFFALSE 78207
// exit ;
78205: GO 78302
// result := [ ] ;
78207: LD_ADDR_VAR 0 3
78211: PUSH
78212: EMPTY
78213: ST_TO_ADDR
// for un in units do
78214: LD_ADDR_VAR 0 4
78218: PUSH
78219: LD_VAR 0 1
78223: PUSH
78224: FOR_IN
78225: IFFALSE 78300
// if GetClass ( un ) = class then
78227: LD_VAR 0 4
78231: PPUSH
78232: CALL_OW 257
78236: PUSH
78237: LD_VAR 0 2
78241: EQUAL
78242: IFFALSE 78269
// result := Insert ( result , 1 , un ) else
78244: LD_ADDR_VAR 0 3
78248: PUSH
78249: LD_VAR 0 3
78253: PPUSH
78254: LD_INT 1
78256: PPUSH
78257: LD_VAR 0 4
78261: PPUSH
78262: CALL_OW 2
78266: ST_TO_ADDR
78267: GO 78298
// result := Replace ( result , result + 1 , un ) ;
78269: LD_ADDR_VAR 0 3
78273: PUSH
78274: LD_VAR 0 3
78278: PPUSH
78279: LD_VAR 0 3
78283: PUSH
78284: LD_INT 1
78286: PLUS
78287: PPUSH
78288: LD_VAR 0 4
78292: PPUSH
78293: CALL_OW 1
78297: ST_TO_ADDR
78298: GO 78224
78300: POP
78301: POP
// end ;
78302: LD_VAR 0 3
78306: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78307: LD_INT 0
78309: PPUSH
78310: PPUSH
78311: PPUSH
78312: PPUSH
78313: PPUSH
78314: PPUSH
78315: PPUSH
// result := [ ] ;
78316: LD_ADDR_VAR 0 4
78320: PUSH
78321: EMPTY
78322: ST_TO_ADDR
// if x - r < 0 then
78323: LD_VAR 0 1
78327: PUSH
78328: LD_VAR 0 3
78332: MINUS
78333: PUSH
78334: LD_INT 0
78336: LESS
78337: IFFALSE 78349
// min_x := 0 else
78339: LD_ADDR_VAR 0 8
78343: PUSH
78344: LD_INT 0
78346: ST_TO_ADDR
78347: GO 78365
// min_x := x - r ;
78349: LD_ADDR_VAR 0 8
78353: PUSH
78354: LD_VAR 0 1
78358: PUSH
78359: LD_VAR 0 3
78363: MINUS
78364: ST_TO_ADDR
// if y - r < 0 then
78365: LD_VAR 0 2
78369: PUSH
78370: LD_VAR 0 3
78374: MINUS
78375: PUSH
78376: LD_INT 0
78378: LESS
78379: IFFALSE 78391
// min_y := 0 else
78381: LD_ADDR_VAR 0 7
78385: PUSH
78386: LD_INT 0
78388: ST_TO_ADDR
78389: GO 78407
// min_y := y - r ;
78391: LD_ADDR_VAR 0 7
78395: PUSH
78396: LD_VAR 0 2
78400: PUSH
78401: LD_VAR 0 3
78405: MINUS
78406: ST_TO_ADDR
// max_x := x + r ;
78407: LD_ADDR_VAR 0 9
78411: PUSH
78412: LD_VAR 0 1
78416: PUSH
78417: LD_VAR 0 3
78421: PLUS
78422: ST_TO_ADDR
// max_y := y + r ;
78423: LD_ADDR_VAR 0 10
78427: PUSH
78428: LD_VAR 0 2
78432: PUSH
78433: LD_VAR 0 3
78437: PLUS
78438: ST_TO_ADDR
// for _x = min_x to max_x do
78439: LD_ADDR_VAR 0 5
78443: PUSH
78444: DOUBLE
78445: LD_VAR 0 8
78449: DEC
78450: ST_TO_ADDR
78451: LD_VAR 0 9
78455: PUSH
78456: FOR_TO
78457: IFFALSE 78558
// for _y = min_y to max_y do
78459: LD_ADDR_VAR 0 6
78463: PUSH
78464: DOUBLE
78465: LD_VAR 0 7
78469: DEC
78470: ST_TO_ADDR
78471: LD_VAR 0 10
78475: PUSH
78476: FOR_TO
78477: IFFALSE 78554
// begin if not ValidHex ( _x , _y ) then
78479: LD_VAR 0 5
78483: PPUSH
78484: LD_VAR 0 6
78488: PPUSH
78489: CALL_OW 488
78493: NOT
78494: IFFALSE 78498
// continue ;
78496: GO 78476
// if GetResourceTypeXY ( _x , _y ) then
78498: LD_VAR 0 5
78502: PPUSH
78503: LD_VAR 0 6
78507: PPUSH
78508: CALL_OW 283
78512: IFFALSE 78552
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78514: LD_ADDR_VAR 0 4
78518: PUSH
78519: LD_VAR 0 4
78523: PPUSH
78524: LD_VAR 0 4
78528: PUSH
78529: LD_INT 1
78531: PLUS
78532: PPUSH
78533: LD_VAR 0 5
78537: PUSH
78538: LD_VAR 0 6
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PPUSH
78547: CALL_OW 1
78551: ST_TO_ADDR
// end ;
78552: GO 78476
78554: POP
78555: POP
78556: GO 78456
78558: POP
78559: POP
// end ;
78560: LD_VAR 0 4
78564: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78565: LD_INT 0
78567: PPUSH
78568: PPUSH
78569: PPUSH
78570: PPUSH
78571: PPUSH
78572: PPUSH
78573: PPUSH
78574: PPUSH
// if not units then
78575: LD_VAR 0 1
78579: NOT
78580: IFFALSE 78584
// exit ;
78582: GO 79095
// result := UnitFilter ( units , [ f_ok ] ) ;
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 1
78593: PPUSH
78594: LD_INT 50
78596: PUSH
78597: EMPTY
78598: LIST
78599: PPUSH
78600: CALL_OW 72
78604: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78605: LD_ADDR_VAR 0 8
78609: PUSH
78610: LD_VAR 0 1
78614: PUSH
78615: LD_INT 1
78617: ARRAY
78618: PPUSH
78619: CALL_OW 255
78623: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78624: LD_ADDR_VAR 0 10
78628: PUSH
78629: LD_INT 29
78631: PUSH
78632: LD_EXP 53
78636: PUSH
78637: LD_INT 49
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: LIST
78644: ST_TO_ADDR
// if not result then
78645: LD_VAR 0 3
78649: NOT
78650: IFFALSE 78654
// exit ;
78652: GO 79095
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78654: LD_ADDR_VAR 0 5
78658: PUSH
78659: LD_INT 81
78661: PUSH
78662: LD_VAR 0 8
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: PPUSH
78671: CALL_OW 69
78675: ST_TO_ADDR
// for i in result do
78676: LD_ADDR_VAR 0 4
78680: PUSH
78681: LD_VAR 0 3
78685: PUSH
78686: FOR_IN
78687: IFFALSE 79093
// begin tag := GetTag ( i ) + 1 ;
78689: LD_ADDR_VAR 0 9
78693: PUSH
78694: LD_VAR 0 4
78698: PPUSH
78699: CALL_OW 110
78703: PUSH
78704: LD_INT 1
78706: PLUS
78707: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78708: LD_ADDR_VAR 0 7
78712: PUSH
78713: LD_VAR 0 4
78717: PPUSH
78718: CALL_OW 250
78722: PPUSH
78723: LD_VAR 0 4
78727: PPUSH
78728: CALL_OW 251
78732: PPUSH
78733: LD_INT 6
78735: PPUSH
78736: CALL 78307 0 3
78740: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78741: LD_VAR 0 7
78745: PUSH
78746: LD_VAR 0 4
78750: PPUSH
78751: CALL_OW 264
78755: PUSH
78756: LD_VAR 0 10
78760: IN
78761: NOT
78762: AND
78763: IFFALSE 78802
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78765: LD_VAR 0 4
78769: PPUSH
78770: LD_VAR 0 7
78774: PUSH
78775: LD_INT 1
78777: ARRAY
78778: PUSH
78779: LD_INT 1
78781: ARRAY
78782: PPUSH
78783: LD_VAR 0 7
78787: PUSH
78788: LD_INT 1
78790: ARRAY
78791: PUSH
78792: LD_INT 2
78794: ARRAY
78795: PPUSH
78796: CALL_OW 116
78800: GO 79091
// if path > tag then
78802: LD_VAR 0 2
78806: PUSH
78807: LD_VAR 0 9
78811: GREATER
78812: IFFALSE 79020
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78814: LD_ADDR_VAR 0 6
78818: PUSH
78819: LD_VAR 0 5
78823: PPUSH
78824: LD_INT 91
78826: PUSH
78827: LD_VAR 0 4
78831: PUSH
78832: LD_INT 12
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: LIST
78839: PPUSH
78840: CALL_OW 72
78844: ST_TO_ADDR
// if nearEnemy then
78845: LD_VAR 0 6
78849: IFFALSE 78918
// begin if GetWeapon ( i ) = ru_time_lapser then
78851: LD_VAR 0 4
78855: PPUSH
78856: CALL_OW 264
78860: PUSH
78861: LD_INT 49
78863: EQUAL
78864: IFFALSE 78892
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78866: LD_VAR 0 4
78870: PPUSH
78871: LD_VAR 0 6
78875: PPUSH
78876: LD_VAR 0 4
78880: PPUSH
78881: CALL_OW 74
78885: PPUSH
78886: CALL_OW 112
78890: GO 78916
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78892: LD_VAR 0 4
78896: PPUSH
78897: LD_VAR 0 6
78901: PPUSH
78902: LD_VAR 0 4
78906: PPUSH
78907: CALL_OW 74
78911: PPUSH
78912: CALL_OW 115
// end else
78916: GO 79018
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78918: LD_VAR 0 4
78922: PPUSH
78923: LD_VAR 0 2
78927: PUSH
78928: LD_VAR 0 9
78932: ARRAY
78933: PUSH
78934: LD_INT 1
78936: ARRAY
78937: PPUSH
78938: LD_VAR 0 2
78942: PUSH
78943: LD_VAR 0 9
78947: ARRAY
78948: PUSH
78949: LD_INT 2
78951: ARRAY
78952: PPUSH
78953: CALL_OW 297
78957: PUSH
78958: LD_INT 6
78960: GREATER
78961: IFFALSE 79004
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78963: LD_VAR 0 4
78967: PPUSH
78968: LD_VAR 0 2
78972: PUSH
78973: LD_VAR 0 9
78977: ARRAY
78978: PUSH
78979: LD_INT 1
78981: ARRAY
78982: PPUSH
78983: LD_VAR 0 2
78987: PUSH
78988: LD_VAR 0 9
78992: ARRAY
78993: PUSH
78994: LD_INT 2
78996: ARRAY
78997: PPUSH
78998: CALL_OW 114
79002: GO 79018
// SetTag ( i , tag ) ;
79004: LD_VAR 0 4
79008: PPUSH
79009: LD_VAR 0 9
79013: PPUSH
79014: CALL_OW 109
// end else
79018: GO 79091
// if enemy then
79020: LD_VAR 0 5
79024: IFFALSE 79091
// begin if GetWeapon ( i ) = ru_time_lapser then
79026: LD_VAR 0 4
79030: PPUSH
79031: CALL_OW 264
79035: PUSH
79036: LD_INT 49
79038: EQUAL
79039: IFFALSE 79067
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79041: LD_VAR 0 4
79045: PPUSH
79046: LD_VAR 0 5
79050: PPUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL_OW 74
79060: PPUSH
79061: CALL_OW 112
79065: GO 79091
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79067: LD_VAR 0 4
79071: PPUSH
79072: LD_VAR 0 5
79076: PPUSH
79077: LD_VAR 0 4
79081: PPUSH
79082: CALL_OW 74
79086: PPUSH
79087: CALL_OW 115
// end ; end ;
79091: GO 78686
79093: POP
79094: POP
// end ;
79095: LD_VAR 0 3
79099: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
79104: PPUSH
// if not unit or IsInUnit ( unit ) then
79105: LD_VAR 0 1
79109: NOT
79110: PUSH
79111: LD_VAR 0 1
79115: PPUSH
79116: CALL_OW 310
79120: OR
79121: IFFALSE 79125
// exit ;
79123: GO 79216
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79125: LD_ADDR_VAR 0 4
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 250
79139: PPUSH
79140: LD_VAR 0 2
79144: PPUSH
79145: LD_INT 1
79147: PPUSH
79148: CALL_OW 272
79152: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79153: LD_ADDR_VAR 0 5
79157: PUSH
79158: LD_VAR 0 1
79162: PPUSH
79163: CALL_OW 251
79167: PPUSH
79168: LD_VAR 0 2
79172: PPUSH
79173: LD_INT 1
79175: PPUSH
79176: CALL_OW 273
79180: ST_TO_ADDR
// if ValidHex ( x , y ) then
79181: LD_VAR 0 4
79185: PPUSH
79186: LD_VAR 0 5
79190: PPUSH
79191: CALL_OW 488
79195: IFFALSE 79216
// ComTurnXY ( unit , x , y ) ;
79197: LD_VAR 0 1
79201: PPUSH
79202: LD_VAR 0 4
79206: PPUSH
79207: LD_VAR 0 5
79211: PPUSH
79212: CALL_OW 118
// end ;
79216: LD_VAR 0 3
79220: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79221: LD_INT 0
79223: PPUSH
79224: PPUSH
// result := false ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_INT 0
79232: ST_TO_ADDR
// if not units then
79233: LD_VAR 0 2
79237: NOT
79238: IFFALSE 79242
// exit ;
79240: GO 79287
// for i in units do
79242: LD_ADDR_VAR 0 4
79246: PUSH
79247: LD_VAR 0 2
79251: PUSH
79252: FOR_IN
79253: IFFALSE 79285
// if See ( side , i ) then
79255: LD_VAR 0 1
79259: PPUSH
79260: LD_VAR 0 4
79264: PPUSH
79265: CALL_OW 292
79269: IFFALSE 79283
// begin result := true ;
79271: LD_ADDR_VAR 0 3
79275: PUSH
79276: LD_INT 1
79278: ST_TO_ADDR
// exit ;
79279: POP
79280: POP
79281: GO 79287
// end ;
79283: GO 79252
79285: POP
79286: POP
// end ;
79287: LD_VAR 0 3
79291: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79292: LD_INT 0
79294: PPUSH
79295: PPUSH
79296: PPUSH
79297: PPUSH
// if not unit or not points then
79298: LD_VAR 0 1
79302: NOT
79303: PUSH
79304: LD_VAR 0 2
79308: NOT
79309: OR
79310: IFFALSE 79314
// exit ;
79312: GO 79404
// dist := 99999 ;
79314: LD_ADDR_VAR 0 5
79318: PUSH
79319: LD_INT 99999
79321: ST_TO_ADDR
// for i in points do
79322: LD_ADDR_VAR 0 4
79326: PUSH
79327: LD_VAR 0 2
79331: PUSH
79332: FOR_IN
79333: IFFALSE 79402
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79335: LD_ADDR_VAR 0 6
79339: PUSH
79340: LD_VAR 0 1
79344: PPUSH
79345: LD_VAR 0 4
79349: PUSH
79350: LD_INT 1
79352: ARRAY
79353: PPUSH
79354: LD_VAR 0 4
79358: PUSH
79359: LD_INT 2
79361: ARRAY
79362: PPUSH
79363: CALL_OW 297
79367: ST_TO_ADDR
// if tmpDist < dist then
79368: LD_VAR 0 6
79372: PUSH
79373: LD_VAR 0 5
79377: LESS
79378: IFFALSE 79400
// begin result := i ;
79380: LD_ADDR_VAR 0 3
79384: PUSH
79385: LD_VAR 0 4
79389: ST_TO_ADDR
// dist := tmpDist ;
79390: LD_ADDR_VAR 0 5
79394: PUSH
79395: LD_VAR 0 6
79399: ST_TO_ADDR
// end ; end ;
79400: GO 79332
79402: POP
79403: POP
// end ;
79404: LD_VAR 0 3
79408: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79409: LD_INT 0
79411: PPUSH
// uc_side := side ;
79412: LD_ADDR_OWVAR 20
79416: PUSH
79417: LD_VAR 0 1
79421: ST_TO_ADDR
// uc_nation := 3 ;
79422: LD_ADDR_OWVAR 21
79426: PUSH
79427: LD_INT 3
79429: ST_TO_ADDR
// vc_chassis := 25 ;
79430: LD_ADDR_OWVAR 37
79434: PUSH
79435: LD_INT 25
79437: ST_TO_ADDR
// vc_engine := engine_siberite ;
79438: LD_ADDR_OWVAR 39
79442: PUSH
79443: LD_INT 3
79445: ST_TO_ADDR
// vc_control := control_computer ;
79446: LD_ADDR_OWVAR 38
79450: PUSH
79451: LD_INT 3
79453: ST_TO_ADDR
// vc_weapon := 59 ;
79454: LD_ADDR_OWVAR 40
79458: PUSH
79459: LD_INT 59
79461: ST_TO_ADDR
// result := CreateVehicle ;
79462: LD_ADDR_VAR 0 5
79466: PUSH
79467: CALL_OW 45
79471: ST_TO_ADDR
// SetDir ( result , d ) ;
79472: LD_VAR 0 5
79476: PPUSH
79477: LD_VAR 0 4
79481: PPUSH
79482: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79486: LD_VAR 0 5
79490: PPUSH
79491: LD_VAR 0 2
79495: PPUSH
79496: LD_VAR 0 3
79500: PPUSH
79501: LD_INT 0
79503: PPUSH
79504: CALL_OW 48
// end ;
79508: LD_VAR 0 5
79512: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79513: LD_INT 0
79515: PPUSH
79516: PPUSH
79517: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79518: LD_ADDR_VAR 0 2
79522: PUSH
79523: LD_INT 0
79525: PUSH
79526: LD_INT 0
79528: PUSH
79529: LD_INT 0
79531: PUSH
79532: LD_INT 0
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79541: LD_VAR 0 1
79545: NOT
79546: PUSH
79547: LD_VAR 0 1
79551: PPUSH
79552: CALL_OW 264
79556: PUSH
79557: LD_INT 12
79559: PUSH
79560: LD_INT 51
79562: PUSH
79563: LD_INT 32
79565: PUSH
79566: LD_EXP 50
79570: PUSH
79571: EMPTY
79572: LIST
79573: LIST
79574: LIST
79575: LIST
79576: IN
79577: NOT
79578: OR
79579: IFFALSE 79583
// exit ;
79581: GO 79681
// for i := 1 to 3 do
79583: LD_ADDR_VAR 0 3
79587: PUSH
79588: DOUBLE
79589: LD_INT 1
79591: DEC
79592: ST_TO_ADDR
79593: LD_INT 3
79595: PUSH
79596: FOR_TO
79597: IFFALSE 79679
// begin tmp := GetCargo ( cargo , i ) ;
79599: LD_ADDR_VAR 0 4
79603: PUSH
79604: LD_VAR 0 1
79608: PPUSH
79609: LD_VAR 0 3
79613: PPUSH
79614: CALL_OW 289
79618: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79619: LD_ADDR_VAR 0 2
79623: PUSH
79624: LD_VAR 0 2
79628: PPUSH
79629: LD_VAR 0 3
79633: PPUSH
79634: LD_VAR 0 4
79638: PPUSH
79639: CALL_OW 1
79643: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79644: LD_ADDR_VAR 0 2
79648: PUSH
79649: LD_VAR 0 2
79653: PPUSH
79654: LD_INT 4
79656: PPUSH
79657: LD_VAR 0 2
79661: PUSH
79662: LD_INT 4
79664: ARRAY
79665: PUSH
79666: LD_VAR 0 4
79670: PLUS
79671: PPUSH
79672: CALL_OW 1
79676: ST_TO_ADDR
// end ;
79677: GO 79596
79679: POP
79680: POP
// end ; end_of_file
79681: LD_VAR 0 2
79685: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79686: LD_VAR 0 1
79690: PUSH
79691: LD_INT 200
79693: DOUBLE
79694: GREATEREQUAL
79695: IFFALSE 79703
79697: LD_INT 299
79699: DOUBLE
79700: LESSEQUAL
79701: IFTRUE 79705
79703: GO 79737
79705: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79706: LD_VAR 0 1
79710: PPUSH
79711: LD_VAR 0 2
79715: PPUSH
79716: LD_VAR 0 3
79720: PPUSH
79721: LD_VAR 0 4
79725: PPUSH
79726: LD_VAR 0 5
79730: PPUSH
79731: CALL 35026 0 5
79735: GO 79814
79737: LD_INT 300
79739: DOUBLE
79740: GREATEREQUAL
79741: IFFALSE 79749
79743: LD_INT 399
79745: DOUBLE
79746: LESSEQUAL
79747: IFTRUE 79751
79749: GO 79813
79751: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79752: LD_VAR 0 1
79756: PPUSH
79757: LD_VAR 0 2
79761: PPUSH
79762: LD_VAR 0 3
79766: PPUSH
79767: LD_VAR 0 4
79771: PPUSH
79772: LD_VAR 0 5
79776: PPUSH
79777: LD_VAR 0 6
79781: PPUSH
79782: LD_VAR 0 7
79786: PPUSH
79787: LD_VAR 0 8
79791: PPUSH
79792: LD_VAR 0 9
79796: PPUSH
79797: LD_VAR 0 10
79801: PPUSH
79802: LD_VAR 0 11
79806: PPUSH
79807: CALL 32668 0 11
79811: GO 79814
79813: POP
// end ;
79814: PPOPN 11
79816: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79817: LD_VAR 0 1
79821: PPUSH
79822: LD_VAR 0 2
79826: PPUSH
79827: LD_VAR 0 3
79831: PPUSH
79832: LD_VAR 0 4
79836: PPUSH
79837: LD_VAR 0 5
79841: PPUSH
79842: CALL 34762 0 5
// end ; end_of_file
79846: PPOPN 5
79848: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79849: LD_VAR 0 1
79853: PPUSH
79854: LD_VAR 0 2
79858: PPUSH
79859: LD_VAR 0 3
79863: PPUSH
79864: LD_VAR 0 4
79868: PPUSH
79869: LD_VAR 0 5
79873: PPUSH
79874: LD_VAR 0 6
79878: PPUSH
79879: CALL 20361 0 6
// end ;
79883: PPOPN 6
79885: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79886: LD_INT 0
79888: PPUSH
// begin if not units then
79889: LD_VAR 0 1
79893: NOT
79894: IFFALSE 79898
// exit ;
79896: GO 79986
// if p1 = 1 then
79898: LD_VAR 0 2
79902: PUSH
79903: LD_INT 1
79905: EQUAL
79906: IFFALSE 79986
// begin if p2 = 1 then
79908: LD_VAR 0 3
79912: PUSH
79913: LD_INT 1
79915: EQUAL
79916: IFFALSE 79947
// begin for i in units do
79918: LD_ADDR_VAR 0 7
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: FOR_IN
79929: IFFALSE 79945
// begin SetUnitAttackType ( i , 3 ) ;
79931: LD_VAR 0 7
79935: PPUSH
79936: LD_INT 3
79938: PPUSH
79939: CALL_OW 603
// end ;
79943: GO 79928
79945: POP
79946: POP
// end ; if p2 = 2 then
79947: LD_VAR 0 3
79951: PUSH
79952: LD_INT 2
79954: EQUAL
79955: IFFALSE 79986
// begin for i in units do
79957: LD_ADDR_VAR 0 7
79961: PUSH
79962: LD_VAR 0 1
79966: PUSH
79967: FOR_IN
79968: IFFALSE 79984
// begin SetUnitAttackType ( i , 1 ) ;
79970: LD_VAR 0 7
79974: PPUSH
79975: LD_INT 1
79977: PPUSH
79978: CALL_OW 603
// end ;
79982: GO 79967
79984: POP
79985: POP
// end ; end ; end ;
79986: PPOPN 7
79988: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79989: CALL 20336 0 0
// end ;
79993: PPOPN 1
79995: END
